
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00803800  00003816  000038ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003734  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e2  0000b734  00003734  000037e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002de  0080382a  0080382a  000038f4  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003924  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000065be  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000271f  00000000  00000000  0000a1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000034a5  00000000  00000000  0000c919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008d0  00000000  00000000  0000fdc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000194b  00000000  00000000  00010690  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004219  00000000  00000000  00011fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  000161f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c6       	rjmp	.+3338   	; 0xd24 <__vector_6>
      1a:	00 00       	nop
      1c:	cd c6       	rjmp	.+3482   	; 0xdb8 <__vector_7>
      1e:	00 00       	nop
      20:	b5 c4       	rjmp	.+2410   	; 0x98c <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c4       	rjmp	.+2552   	; 0xa2e <__vector_13>
      36:	00 00       	nop
      38:	2d c5       	rjmp	.+2650   	; 0xa94 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	eb c5       	rjmp	.+3030   	; 0xc28 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	1d c6       	rjmp	.+3130   	; 0xc94 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c5       	rjmp	.+2764   	; 0xb3a <__vector_27>
      6e:	00 00       	nop
      70:	bf c5       	rjmp	.+2942   	; 0xbf0 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e6 e1       	ldi	r30, 0x16	; 22
      90:	f8 e3       	ldi	r31, 0x38	; 56
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 32       	cpi	r26, 0x2A	; 42
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	aa e2       	ldi	r26, 0x2A	; 42
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 30       	cpi	r26, 0x08	; 8
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 af 1a 	call	0x355e	; 0x355e <main>
      b2:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	80 83       	st	Z, r24
      c4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      c8:	a1 e2       	ldi	r26, 0x21	; 33
      ca:	b4 e0       	ldi	r27, 0x04	; 4
      cc:	92 e0       	ldi	r25, 0x02	; 2
      ce:	9c 93       	st	X, r25
      d0:	90 83       	st	Z, r25
      d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      d6:	e0 e1       	ldi	r30, 0x10	; 16
      d8:	f8 e0       	ldi	r31, 0x08	; 8
      da:	97 e0       	ldi	r25, 0x07	; 7
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	94 83       	std	Z+4, r25	; 0x04
      e2:	83 83       	std	Z+3, r24	; 0x03
      e4:	8c 93       	st	X, r24
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	85 81       	ldd	r24, Z+5	; 0x05
      ee:	84 6c       	ori	r24, 0xC4	; 196
      f0:	85 83       	std	Z+5, r24	; 0x05
      f2:	08 95       	ret

000000f4 <I2C_recover>:
      f4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     108:	99 e0       	ldi	r25, 0x09	; 9
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     112:	30 e1       	ldi	r19, 0x10	; 16
     114:	3a 95       	dec	r19
     116:	f1 f7       	brne	.-4      	; 0x114 <I2C_recover+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_recover+0x26>
     11a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     11e:	30 e1       	ldi	r19, 0x10	; 16
     120:	3a 95       	dec	r19
     122:	f1 f7       	brne	.-4      	; 0x120 <I2C_recover+0x2c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <I2C_recover+0x32>
     126:	91 50       	subi	r25, 0x01	; 1
     128:	89 f7       	brne	.-30     	; 0x10c <I2C_recover+0x18>
     12a:	28 e0       	ldi	r18, 0x08	; 8
     12c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     130:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     13e:	91 60       	ori	r25, 0x01	; 1
     140:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     144:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	94 6c       	ori	r25, 0xC4	; 196
     14a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     152:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     156:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	84 6c       	ori	r24, 0xC4	; 196
     16a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16e:	08 95       	ret

00000170 <I2C_start>:
     170:	28 2f       	mov	r18, r24
     172:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     176:	90 6c       	ori	r25, 0xC0	; 192
     178:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	89 2f       	mov	r24, r25
     182:	84 70       	andi	r24, 0x04	; 4
     184:	92 fd       	sbrc	r25, 2
     186:	03 c0       	rjmp	.+6      	; 0x18e <I2C_start+0x1e>
     188:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     18c:	08 95       	ret
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	08 95       	ret

00000192 <I2C_wait_ACK>:
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     19c:	87 fd       	sbrc	r24, 7
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a8:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     1ac:	81 11       	cpse	r24, r1
     1ae:	f4 cf       	rjmp	.-24     	; 0x198 <I2C_wait_ACK+0x6>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	82 fd       	sbrc	r24, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <I2C_wait_ACK+0x46>
     1c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ca:	83 fd       	sbrc	r24, 3
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <I2C_wait_ACK+0x4a>
     1ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d2:	82 95       	swap	r24
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret

000001e0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e2:	8c e0       	ldi	r24, 0x0C	; 12
     1e4:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1e8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ec:	89 2f       	mov	r24, r25
     1ee:	83 70       	andi	r24, 0x03	; 3
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1f8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1fc:	97 fd       	sbrc	r25, 7
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     200:	90 91 4e 3a 	lds	r25, 0x3A4E	; 0x803a4e <timeout_I2C>
     204:	91 11       	cpse	r25, r1
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <I2C_read+0x18>
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     20c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     210:	90 6c       	ori	r25, 0xC0	; 192
     212:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     216:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21a:	92 fd       	sbrc	r25, 2
     21c:	1e c0       	rjmp	.+60     	; 0x25a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     21e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     222:	93 fd       	sbrc	r25, 3
     224:	1d c0       	rjmp	.+58     	; 0x260 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     226:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22a:	89 2f       	mov	r24, r25
     22c:	80 71       	andi	r24, 0x10	; 16
     22e:	94 fd       	sbrc	r25, 4
     230:	16 c0       	rjmp	.+44     	; 0x25e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     232:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <I2C_read+0x5e>
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	01 c0       	rjmp	.+2      	; 0x240 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     23e:	94 60       	ori	r25, 0x04	; 4
     240:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     244:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     248:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24a:	61 11       	cpse	r22, r1
     24c:	09 c0       	rjmp	.+18     	; 0x260 <I2C_read+0x80>
     24e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     252:	92 60       	ori	r25, 0x02	; 2
     254:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     258:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     25e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     260:	08 95       	ret

00000262 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     262:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	b1 f4       	brne	.+44     	; 0x2a0 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     274:	80 81       	ld	r24, Z
     276:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     27e:	86 fd       	sbrc	r24, 6
     280:	06 c0       	rjmp	.+12     	; 0x28e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     282:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     286:	81 11       	cpse	r24, r1
     288:	f8 cf       	rjmp	.-16     	; 0x27a <I2C_write+0x18>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     28e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     292:	82 fd       	sbrc	r24, 2
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     296:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29a:	82 95       	swap	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a4:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2a6:	08 95       	ret

000002a8 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2a8:	e0 e1       	ldi	r30, 0x10	; 16
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 83       	std	Z+4, r24	; 0x04
     2b2:	08 95       	ret

000002b4 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	6b 01       	movw	r12, r22
     2c4:	f4 2e       	mov	r15, r20
     2c6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2c8:	18 2f       	mov	r17, r24
     2ca:	11 0f       	add	r17, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	50 df       	rcall	.-352    	; 0x170 <I2C_start>
	if (status != 0) goto error;
     2d0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d2:	2b c0       	rjmp	.+86     	; 0x32a <I2C_read_bytes+0x76>
     2d4:	5e df       	rcall	.-324    	; 0x192 <I2C_wait_ACK>
	if (status == 1) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <I2C_read_bytes+0x2c>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <I2C_stop>
		return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	27 c0       	rjmp	.+78     	; 0x32e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e0:	81 11       	cpse	r24, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2e6:	49 f0       	breq	.+18     	; 0x2fa <I2C_read_bytes+0x46>
     2e8:	c6 01       	movw	r24, r12
     2ea:	bb df       	rcall	.-138    	; 0x262 <I2C_write>
	    if (status != 0) goto error;
     2ec:	81 11       	cpse	r24, r1
     2ee:	1d c0       	rjmp	.+58     	; 0x32a <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	c8 1a       	sub	r12, r24
     2f4:	d8 0a       	sbc	r13, r24
        --reg_len;
     2f6:	fa 94       	dec	r15
     2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <I2C_read_bytes+0x30>
     2fa:	01 34       	cpi	r16, 0x41	; 65
     2fc:	08 f0       	brcs	.+2      	; 0x300 <I2C_read_bytes+0x4c>
     2fe:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     300:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     302:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     306:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     308:	40 f0       	brcs	.+16     	; 0x31a <I2C_read_bytes+0x66>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	ce 01       	movw	r24, r28
     30e:	68 df       	rcall	.-304    	; 0x1e0 <I2C_read>
		if (status != 0) goto error;
     310:	81 11       	cpse	r24, r1
     312:	0b c0       	rjmp	.+22     	; 0x32a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     318:	f6 cf       	rjmp	.-20     	; 0x306 <I2C_read_bytes+0x52>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     31e:	60 df       	rcall	.-320    	; 0x1e0 <I2C_read>
     320:	81 11       	cpse	r24, r1
	I2C_stop();
     322:	03 c0       	rjmp	.+6      	; 0x32a <I2C_read_bytes+0x76>
     324:	c1 df       	rcall	.-126    	; 0x2a8 <I2C_stop>
	return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32a:	e4 de       	rcall	.-568    	; 0xf4 <I2C_recover>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     32e:	df 91       	pop	r29
}
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <LanyardCode>:
     33e:	8b e7       	ldi	r24, 0x7B	; 123
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
    if (CheckState(LANYARD_COMPLETED)) {
     340:	4e d7       	rcall	.+3740   	; 0x11de <CheckState>
     342:	81 11       	cpse	r24, r1
     344:	d9 c0       	rjmp	.+434    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     346:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <gameNow>
     34a:	88 23       	and	r24, r24
     34c:	19 f0       	breq	.+6      	; 0x354 <LanyardCode+0x16>
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	09 f0       	breq	.+2      	; 0x354 <LanyardCode+0x16>
     352:	d2 c0       	rjmp	.+420    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
        return 0;

    /* activate led for buttonstate */
    //iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);

    if ( (buttonState & 0xf0) == 0)
     354:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     358:	98 2f       	mov	r25, r24
     35a:	90 7f       	andi	r25, 0xF0	; 240
     35c:	09 f4       	brne	.+2      	; 0x360 <LanyardCode+0x22>
     35e:	cc c0       	rjmp	.+408    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     360:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     364:	98 2f       	mov	r25, r24
     366:	92 27       	eor	r25, r18
     368:	9f 70       	andi	r25, 0x0F	; 15
     36a:	09 f4       	brne	.+2      	; 0x36e <LanyardCode+0x30>
     36c:	c5 c0       	rjmp	.+394    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
        return 0;

    if (lastButtonState == 0xff){
     36e:	2f 3f       	cpi	r18, 0xFF	; 255
     370:	09 f0       	breq	.+2      	; 0x374 <LanyardCode+0x36>
     372:	be c0       	rjmp	.+380    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
        switch (buttonState & 0x0f) {
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	82 30       	cpi	r24, 0x02	; 2
     378:	61 f0       	breq	.+24     	; 0x392 <LanyardCode+0x54>
     37a:	28 f4       	brcc	.+10     	; 0x386 <LanyardCode+0x48>
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	69 f4       	brne	.+26     	; 0x39a <LanyardCode+0x5c>
            case 0b0001: {
                digit = 0;
     380:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     384:	0d c0       	rjmp	.+26     	; 0x3a0 <LanyardCode+0x62>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     386:	84 30       	cpi	r24, 0x04	; 4
     388:	31 f0       	breq	.+12     	; 0x396 <LanyardCode+0x58>
     38a:	88 30       	cpi	r24, 0x08	; 8
     38c:	31 f4       	brne	.+12     	; 0x39a <LanyardCode+0x5c>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	05 c0       	rjmp	.+10     	; 0x39c <LanyardCode+0x5e>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	03 c0       	rjmp	.+6      	; 0x39c <LanyardCode+0x5e>
                break;
            }

            case 0b0100: {
                digit = 3;
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	01 c0       	rjmp	.+2      	; 0x39c <LanyardCode+0x5e>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     3a6:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <lanyardPos>
     3aa:	e8 2f       	mov	r30, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ec 5b       	subi	r30, 0xBC	; 188
     3b0:	f8 44       	sbci	r31, 0x48	; 72
     3b2:	20 81       	ld	r18, Z
     3b4:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     3b8:	e0 91 5c b7 	lds	r30, 0xB75C	; 0x80b75c <__bss_end+0x7c54>
     3bc:	29 13       	cpse	r18, r25
     3be:	17 c0       	rjmp	.+46     	; 0x3ee <LanyardCode+0xb0>
            lanyardState &= TRUE;
     3c0:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     3c4:	91 70       	andi	r25, 0x01	; 1
     3c6:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	e8 54       	subi	r30, 0x48	; 72
     3ce:	f5 4c       	sbci	r31, 0xC5	; 197
     3d0:	90 e8       	ldi	r25, 0x80	; 128
     3d2:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     3d4:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	e8 54       	subi	r30, 0x48	; 72
     3dc:	f5 4c       	sbci	r31, 0xC5	; 197
     3de:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     3e0:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e8 54       	subi	r30, 0x48	; 72
     3e8:	f5 4c       	sbci	r31, 0xC5	; 197
     3ea:	10 82       	st	Z, r1
     3ec:	13 c0       	rjmp	.+38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        } else {
            lanyardState = FALSE;
     3ee:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	e8 54       	subi	r30, 0x48	; 72
     3f6:	f5 4c       	sbci	r31, 0xC5	; 197
     3f8:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     3fa:	84 30       	cpi	r24, 0x04	; 4
     3fc:	58 f4       	brcc	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     3fe:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <gameNow>
                lanyardPos      = 0;
     402:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <lanyardPos>
                lanyardCnt      = 0;
     406:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <__data_end>
                lanyardState    = TRUE;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	70 c0       	rjmp	.+224    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
                return 0;
            }
        }
        lanyardPos++;
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <lanyardPos>
        lanyardCnt++;            
     41a:	90 91 2a 38 	lds	r25, 0x382A	; 0x80382a <__data_end>
     41e:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     420:	94 30       	cpi	r25, 0x04	; 4
     422:	18 f4       	brcc	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     424:	90 93 2a 38 	sts	0x382A, r25	; 0x80382a <__data_end>
     428:	63 c0       	rjmp	.+198    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     42a:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <__data_end>
            if (lanyardState == TRUE) {
     42e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     432:	91 30       	cpi	r25, 0x01	; 1
     434:	79 f5       	brne	.+94     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     436:	e8 2f       	mov	r30, r24
     438:	e6 95       	lsr	r30
     43a:	e6 95       	lsr	r30
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e2 59       	subi	r30, 0x92	; 146
     440:	f8 44       	sbci	r31, 0x48	; 72
     442:	e5 81       	ldd	r30, Z+5	; 0x05
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     44a:	e8 54       	subi	r30, 0x48	; 72
     44c:	f5 4c       	sbci	r31, 0xC5	; 197
     44e:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     450:	88 31       	cpi	r24, 0x18	; 24
     452:	09 f0       	breq	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	4d c0       	rjmp	.+154    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
                    UpdateState(LANYARD_COMPLETED);
     456:	8b e7       	ldi	r24, 0x7B	; 123
     458:	b8 d6       	rcall	.+3440   	; 0x11ca <UpdateState>
                    //iLED[SCARAB[G]] = 0;
                    iLED[EYE[R][L]] = 0;
     45a:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	e8 54       	subi	r30, 0x48	; 72
     462:	f5 4c       	sbci	r31, 0xC5	; 197
     464:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     466:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	e8 54       	subi	r30, 0x48	; 72
     46e:	f5 4c       	sbci	r31, 0xC5	; 197
     470:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     472:	e0 91 6d b7 	lds	r30, 0xB76D	; 0x80b76d <__bss_end+0x7c65>
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     47c:	e8 54       	subi	r30, 0x48	; 72
     47e:	f5 4c       	sbci	r31, 0xC5	; 197
     480:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     482:	e0 91 6c b7 	lds	r30, 0xB76C	; 0x80b76c <__bss_end+0x7c64>
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     48c:	e8 54       	subi	r30, 0x48	; 72
     48e:	f5 4c       	sbci	r31, 0xC5	; 197
     490:	80 83       	st	Z, r24
     492:	2e c0       	rjmp	.+92     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     494:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <gameNow>
                lanyardPos      = 0;
     498:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <lanyardPos>
                lanyardState    = TRUE;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                //iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
     4a2:	e0 91 6d b7 	lds	r30, 0xB76D	; 0x80b76d <__bss_end+0x7c65>
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	e8 54       	subi	r30, 0x48	; 72
     4aa:	f5 4c       	sbci	r31, 0xC5	; 197
     4ac:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     4ae:	e0 91 6c b7 	lds	r30, 0xB76C	; 0x80b76c <__bss_end+0x7c64>
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	e8 54       	subi	r30, 0x48	; 72
     4b6:	f5 4c       	sbci	r31, 0xC5	; 197
     4b8:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     4ba:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4c4:	e8 54       	subi	r30, 0x48	; 72
     4c6:	f5 4c       	sbci	r31, 0xC5	; 197
     4c8:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     4ca:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4d4:	e8 54       	subi	r30, 0x48	; 72
     4d6:	f5 4c       	sbci	r31, 0xC5	; 197
     4d8:	80 83       	st	Z, r24
     4da:	a4 e7       	ldi	r26, 0x74	; 116
     4dc:	b7 eb       	ldi	r27, 0xB7	; 183
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     4de:	ed 91       	ld	r30, X+
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e8 54       	subi	r30, 0x48	; 72
     4e4:	f5 4c       	sbci	r31, 0xC5	; 197
     4e6:	10 82       	st	Z, r1
                //iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     4e8:	87 eb       	ldi	r24, 0xB7	; 183
     4ea:	aa 37       	cpi	r26, 0x7A	; 122
     4ec:	b8 07       	cpc	r27, r24
     4ee:	b9 f7       	brne	.-18     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     4f0:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     4f4:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	08 95       	ret

000004fc <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     500:	87 ef       	ldi	r24, 0xF7	; 247
     502:	6d d6       	rcall	.+3290   	; 0x11de <CheckState>
     504:	81 11       	cpse	r24, r1
     506:	3e c1       	rjmp	.+636    	; 0x784 <MagnetMaze+0x288>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     508:	8d e7       	ldi	r24, 0x7D	; 125
     50a:	69 d6       	rcall	.+3282   	; 0x11de <CheckState>
     50c:	81 11       	cpse	r24, r1
     50e:	3a c1       	rjmp	.+628    	; 0x784 <MagnetMaze+0x288>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     510:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <gameNow>
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	08 f0       	brcs	.+2      	; 0x51a <MagnetMaze+0x1e>
     518:	35 c1       	rjmp	.+618    	; 0x784 <MagnetMaze+0x288>
        return 0;

    if (calHall == 0)
     51a:	80 91 e1 3a 	lds	r24, 0x3AE1	; 0x803ae1 <calHall>
     51e:	90 91 e2 3a 	lds	r25, 0x3AE2	; 0x803ae2 <calHall+0x1>
     522:	89 2b       	or	r24, r25
     524:	41 f4       	brne	.+16     	; 0x536 <MagnetMaze+0x3a>
        calHall = adcHall;
     526:	80 91 a9 3a 	lds	r24, 0x3AA9	; 0x803aa9 <adcHall>
     52a:	90 91 aa 3a 	lds	r25, 0x3AAA	; 0x803aaa <adcHall+0x1>
     52e:	80 93 e1 3a 	sts	0x3AE1, r24	; 0x803ae1 <calHall>
     532:	90 93 e2 3a 	sts	0x3AE2, r25	; 0x803ae2 <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     536:	80 91 a9 3a 	lds	r24, 0x3AA9	; 0x803aa9 <adcHall>
     53a:	90 91 aa 3a 	lds	r25, 0x3AAA	; 0x803aaa <adcHall+0x1>
     53e:	20 91 e1 3a 	lds	r18, 0x3AE1	; 0x803ae1 <calHall>
     542:	30 91 e2 3a 	lds	r19, 0x3AE2	; 0x803ae2 <calHall+0x1>
     546:	82 1b       	sub	r24, r18
     548:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     54a:	30 91 3e 38 	lds	r19, 0x383E	; 0x80383e <curHallState>
     54e:	31 30       	cpi	r19, 0x01	; 1
     550:	89 f0       	breq	.+34     	; 0x574 <MagnetMaze+0x78>
     552:	18 f0       	brcs	.+6      	; 0x55a <MagnetMaze+0x5e>
     554:	32 30       	cpi	r19, 0x02	; 2
     556:	c1 f0       	breq	.+48     	; 0x588 <MagnetMaze+0x8c>
     558:	1f c0       	rjmp	.+62     	; 0x598 <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     55a:	84 3d       	cpi	r24, 0xD4	; 212
     55c:	2e ef       	ldi	r18, 0xFE	; 254
     55e:	92 07       	cpc	r25, r18
     560:	14 f4       	brge	.+4      	; 0x566 <MagnetMaze+0x6a>
                newHallState = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	04 c0       	rjmp	.+8      	; 0x56e <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     566:	8d 32       	cpi	r24, 0x2D	; 45
     568:	91 40       	sbci	r25, 0x01	; 1
     56a:	5c f0       	brlt	.+22     	; 0x582 <MagnetMaze+0x86>
                newHallState = 2;
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <newHallState>
     572:	12 c0       	rjmp	.+36     	; 0x598 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     574:	8d 32       	cpi	r24, 0x2D	; 45
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	92 07       	cpc	r25, r18
     57a:	c4 f7       	brge	.-16     	; 0x56c <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     57c:	89 38       	cpi	r24, 0x89	; 137
     57e:	9f 4f       	sbci	r25, 0xFF	; 255
     580:	84 f3       	brlt	.-32     	; 0x562 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     582:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <newHallState>
     586:	08 c0       	rjmp	.+16     	; 0x598 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     588:	84 3d       	cpi	r24, 0xD4	; 212
     58a:	2e ef       	ldi	r18, 0xFE	; 254
     58c:	92 07       	cpc	r25, r18
     58e:	4c f3       	brlt	.-46     	; 0x562 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     590:	88 37       	cpi	r24, 0x78	; 120
     592:	91 05       	cpc	r25, r1
     594:	b4 f3       	brlt	.-20     	; 0x582 <MagnetMaze+0x86>
     596:	ea cf       	rjmp	.-44     	; 0x56c <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     598:	c0 91 5f b7 	lds	r28, 0xB75F	; 0x80b75f <__bss_end+0x7c57>
     59c:	ec 2f       	mov	r30, r28
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <newHallState>
     5a4:	88 23       	and	r24, r24
     5a6:	19 f0       	breq	.+6      	; 0x5ae <MagnetMaze+0xb2>
     5a8:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <MagnetMaze+0xb4>
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	e8 54       	subi	r30, 0x48	; 72
     5b2:	f5 4c       	sbci	r31, 0xC5	; 197
     5b4:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     5b6:	88 23       	and	r24, r24
     5b8:	59 f0       	breq	.+22     	; 0x5d0 <MagnetMaze+0xd4>
     5ba:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <mazePos>
     5be:	21 11       	cpse	r18, r1
     5c0:	3d c0       	rjmp	.+122    	; 0x63c <MagnetMaze+0x140>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	09 f4       	brne	.+2      	; 0x5ca <MagnetMaze+0xce>
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 3a 38 	sts	0x383A, r25	; 0x80383a <inverted>
     5ce:	36 c0       	rjmp	.+108    	; 0x63c <MagnetMaze+0x140>

    if (newHallState != curHallState) {
     5d0:	33 23       	and	r19, r19
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <MagnetMaze+0xda>
     5d4:	d7 c0       	rjmp	.+430    	; 0x784 <MagnetMaze+0x288>
        curHallState = newHallState;
     5d6:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     5da:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <mazePos>
     5de:	82 31       	cpi	r24, 0x12	; 18
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <MagnetMaze+0xe8>
     5e2:	d0 c0       	rjmp	.+416    	; 0x784 <MagnetMaze+0x288>
                gameNow   = TEXT;
     5e4:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <gameNow>
                mazePos   = 0;
     5e8:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <mazePos>
                mazeState = TRUE;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[SCARAB[G]]    = 0;
     5f2:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     5f4:	e0 91 6d b7 	lds	r30, 0xB76D	; 0x80b76d <__bss_end+0x7c65>
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	e8 54       	subi	r30, 0x48	; 72
     5fc:	f5 4c       	sbci	r31, 0xC5	; 197
     5fe:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     600:	e0 91 6c b7 	lds	r30, 0xB76C	; 0x80b76c <__bss_end+0x7c64>
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	e8 54       	subi	r30, 0x48	; 72
     608:	f5 4c       	sbci	r31, 0xC5	; 197
     60a:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     60c:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e8 54       	subi	r30, 0x48	; 72
     614:	f5 4c       	sbci	r31, 0xC5	; 197
     616:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     618:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	e8 54       	subi	r30, 0x48	; 72
     620:	f5 4c       	sbci	r31, 0xC5	; 197
     622:	10 82       	st	Z, r1
     624:	a4 e7       	ldi	r26, 0x74	; 116
     626:	b7 eb       	ldi	r27, 0xB7	; 183
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     628:	ed 91       	ld	r30, X+
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	e8 54       	subi	r30, 0x48	; 72
     62e:	f5 4c       	sbci	r31, 0xC5	; 197
     630:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     632:	27 eb       	ldi	r18, 0xB7	; 183
     634:	aa 37       	cpi	r26, 0x7A	; 122
     636:	b2 07       	cpc	r27, r18
     638:	b9 f7       	brne	.-18     	; 0x628 <MagnetMaze+0x12c>
     63a:	a4 c0       	rjmp	.+328    	; 0x784 <MagnetMaze+0x288>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     63c:	38 17       	cp	r19, r24
     63e:	09 f4       	brne	.+2      	; 0x642 <MagnetMaze+0x146>
     640:	a1 c0       	rjmp	.+322    	; 0x784 <MagnetMaze+0x288>
        curHallState = newHallState;
     642:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     64c:	90 91 3a 38 	lds	r25, 0x383A	; 0x80383a <inverted>
     650:	99 23       	and	r25, r25
     652:	11 f0       	breq	.+4      	; 0x658 <MagnetMaze+0x15c>
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	89 27       	eor	r24, r25
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	e2 2f       	mov	r30, r18
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	e6 58       	subi	r30, 0x86	; 134
     660:	f8 44       	sbci	r31, 0x48	; 72
     662:	40 81       	ld	r20, Z
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	84 17       	cp	r24, r20
     668:	95 07       	cpc	r25, r21
     66a:	91 f4       	brne	.+36     	; 0x690 <MagnetMaze+0x194>
                mazeState &= TRUE;
     66c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     670:	81 70       	andi	r24, 0x01	; 1
     672:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[EYE[R][L]] = 0;
     676:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e8 54       	subi	r30, 0x48	; 72
     67e:	f5 4c       	sbci	r31, 0xC5	; 197
     680:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     682:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	e8 54       	subi	r30, 0x48	; 72
     68a:	f5 4c       	sbci	r31, 0xC5	; 197
     68c:	10 82       	st	Z, r1
     68e:	02 c0       	rjmp	.+4      	; 0x694 <MagnetMaze+0x198>
            } else {
                mazeState = FALSE;
     690:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <mazePos>
            mazeCnt++;            
     69a:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <mazeCnt>
     69e:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     6a0:	83 30       	cpi	r24, 0x03	; 3
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <MagnetMaze+0x1ae>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     6a4:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <mazeCnt>
     6a8:	6d c0       	rjmp	.+218    	; 0x784 <MagnetMaze+0x288>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6aa:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <mazeCnt>
                if (mazeState == TRUE) {
     6ae:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	a9 f5       	brne	.+106    	; 0x720 <MagnetMaze+0x224>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     6b6:	eb ea       	ldi	r30, 0xAB	; 171
     6b8:	2e 9f       	mul	r18, r30
     6ba:	e1 2d       	mov	r30, r1
     6bc:	11 24       	eor	r1, r1
     6be:	e6 95       	lsr	r30
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	e2 59       	subi	r30, 0x92	; 146
     6c4:	f8 44       	sbci	r31, 0x48	; 72
     6c6:	e5 81       	ldd	r30, Z+5	; 0x05
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     6ce:	e8 54       	subi	r30, 0x48	; 72
     6d0:	f5 4c       	sbci	r31, 0xC5	; 197
     6d2:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     6d4:	22 31       	cpi	r18, 0x12	; 18
     6d6:	09 f0       	breq	.+2      	; 0x6da <MagnetMaze+0x1de>
                        UpdateState(MAZE_COMPLETED);
     6d8:	55 c0       	rjmp	.+170    	; 0x784 <MagnetMaze+0x288>
     6da:	8d e7       	ldi	r24, 0x7D	; 125
     6dc:	76 d5       	rcall	.+2796   	; 0x11ca <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     6de:	d0 e0       	ldi	r29, 0x00	; 0
     6e0:	c8 54       	subi	r28, 0x48	; 72
     6e2:	d5 4c       	sbci	r29, 0xC5	; 197
     6e4:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     6e6:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	e8 54       	subi	r30, 0x48	; 72
     6ee:	f5 4c       	sbci	r31, 0xC5	; 197
     6f0:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     6f2:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	e8 54       	subi	r30, 0x48	; 72
     6fa:	f5 4c       	sbci	r31, 0xC5	; 197
     6fc:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     6fe:	e0 91 6d b7 	lds	r30, 0xB76D	; 0x80b76d <__bss_end+0x7c65>
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     708:	e8 54       	subi	r30, 0x48	; 72
     70a:	f5 4c       	sbci	r31, 0xC5	; 197
     70c:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     70e:	e0 91 6c b7 	lds	r30, 0xB76C	; 0x80b76c <__bss_end+0x7c64>
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     718:	e8 54       	subi	r30, 0x48	; 72
     71a:	f5 4c       	sbci	r31, 0xC5	; 197
     71c:	80 83       	st	Z, r24
     71e:	32 c0       	rjmp	.+100    	; 0x784 <MagnetMaze+0x288>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     720:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <gameNow>
                    mazePos   = 0;
     724:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <mazePos>
                    mazeState = TRUE;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                    iLED[SCARAB[G]]    = 0;
     72e:	d0 e0       	ldi	r29, 0x00	; 0
     730:	c8 54       	subi	r28, 0x48	; 72
     732:	d5 4c       	sbci	r29, 0xC5	; 197
     734:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     736:	e0 91 6d b7 	lds	r30, 0xB76D	; 0x80b76d <__bss_end+0x7c65>
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	e8 54       	subi	r30, 0x48	; 72
     73e:	f5 4c       	sbci	r31, 0xC5	; 197
     740:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     742:	e0 91 6c b7 	lds	r30, 0xB76C	; 0x80b76c <__bss_end+0x7c64>
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	e8 54       	subi	r30, 0x48	; 72
     74a:	f5 4c       	sbci	r31, 0xC5	; 197
     74c:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     74e:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     758:	e8 54       	subi	r30, 0x48	; 72
     75a:	f5 4c       	sbci	r31, 0xC5	; 197
     75c:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     75e:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     768:	e8 54       	subi	r30, 0x48	; 72
     76a:	f5 4c       	sbci	r31, 0xC5	; 197
     76c:	80 83       	st	Z, r24
     76e:	a4 e7       	ldi	r26, 0x74	; 116
     770:	b7 eb       	ldi	r27, 0xB7	; 183
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     772:	ed 91       	ld	r30, X+
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	e8 54       	subi	r30, 0x48	; 72
     778:	f5 4c       	sbci	r31, 0xC5	; 197
     77a:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     77c:	87 eb       	ldi	r24, 0xB7	; 183
     77e:	aa 37       	cpi	r26, 0x7A	; 122
     780:	b8 07       	cpc	r27, r24
     782:	b9 f7       	brne	.-18     	; 0x772 <MagnetMaze+0x276>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <Setup>:
    ++test;

    for (uint8_t x=0; x<5; ++x){
        iLED[WING[R][x]] = iLED[WING[L][4-x]];
    }
}
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	f8 94       	cli
     792:	88 ed       	ldi	r24, 0xD8	; 216
     794:	84 bf       	out	0x34, r24	; 52
     796:	c1 e0       	ldi	r28, 0x01	; 1
     798:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     79c:	8a e4       	ldi	r24, 0x4A	; 74
     79e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     7a2:	8c e7       	ldi	r24, 0x7C	; 124
     7a4:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     7a8:	9f e3       	ldi	r25, 0x3F	; 63
     7aa:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     7ae:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7b2:	80 68       	ori	r24, 0x80	; 128
     7b4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7b8:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7c2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7c6:	80 68       	ori	r24, 0x80	; 128
     7c8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7cc:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     7d0:	80 68       	ori	r24, 0x80	; 128
     7d2:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     7d6:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     7da:	80 68       	ori	r24, 0x80	; 128
     7dc:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     7e0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     7e4:	80 68       	ori	r24, 0x80	; 128
     7e6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     7ea:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     7ee:	d2 e0       	ldi	r29, 0x02	; 2
     7f0:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     7f4:	2b e5       	ldi	r18, 0x5B	; 91
     7f6:	31 e0       	ldi	r19, 0x01	; 1
     7f8:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     7fc:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     806:	80 ec       	ldi	r24, 0xC0	; 192
     808:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     812:	1c ba       	out	0x1c, r1	; 28
     814:	1d ba       	out	0x1d, r1	; 29
     816:	1e ba       	out	0x1e, r1	; 30
     818:	1f ba       	out	0x1f, r1	; 31
     81a:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     81e:	88 e0       	ldi	r24, 0x08	; 8
     820:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     824:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     828:	87 e7       	ldi	r24, 0x77	; 119
     82a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     82e:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     832:	8b e0       	ldi	r24, 0x0B	; 11
     834:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     838:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     83c:	81 60       	ori	r24, 0x01	; 1
     83e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     842:	85 e0       	ldi	r24, 0x05	; 5
     844:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     848:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     854:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     858:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     85c:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     860:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     864:	8b e8       	ldi	r24, 0x8B	; 139
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     86c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     870:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     874:	21 dc       	rcall	.-1982   	; 0xb8 <I2C_init>
     876:	82 e1       	ldi	r24, 0x12	; 18
     878:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     87c:	80 e2       	ldi	r24, 0x20	; 32
     87e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     882:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     88c:	84 e4       	ldi	r24, 0x44	; 68
     88e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     892:	8e e1       	ldi	r24, 0x1E	; 30
     894:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     898:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     89c:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8a0:	81 60       	ori	r24, 0x01	; 1
     8a2:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8a6:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     8aa:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8ae:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     8b2:	82 e5       	ldi	r24, 0x52	; 82
     8b4:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     8be:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     8c2:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     8c6:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8ca:	81 60       	ori	r24, 0x01	; 1
     8cc:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8d0:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     8d4:	80 e4       	ldi	r24, 0x40	; 64
     8d6:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     8e0:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8e4:	81 60       	ori	r24, 0x01	; 1
     8e6:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8ea:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8ee:	80 fd       	sbrc	r24, 0
     8f0:	fc cf       	rjmp	.-8      	; 0x8ea <Setup+0x15e>
     8f2:	80 e3       	ldi	r24, 0x30	; 48
     8f4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     8f8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     8fc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     900:	82 fd       	sbrc	r24, 2
     902:	fc cf       	rjmp	.-8      	; 0x8fc <Setup+0x170>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	98 e7       	ldi	r25, 0x78	; 120
     908:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     90c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     910:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     914:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     918:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     91c:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     920:	82 96       	adiw	r24, 0x22	; 34
     922:	0e 94 4f 1b 	call	0x369e	; 0x369e <__udivmodhi4>
     926:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <tmp16bit>
     92a:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <tmp16bit+0x1>
     92e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     932:	83 fd       	sbrc	r24, 3
     934:	fc cf       	rjmp	.-8      	; 0x92e <Setup+0x1a2>
     936:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
     93a:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
     93e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     942:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     958:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     95c:	80 fd       	sbrc	r24, 0
     95e:	fc cf       	rjmp	.-8      	; 0x958 <Setup+0x1cc>
     960:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     96a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     974:	10 92 63 3a 	sts	0x3A63, r1	; 0x803a63 <serRx>
     978:	83 e6       	ldi	r24, 0x63	; 99
     97a:	9a e3       	ldi	r25, 0x3A	; 58
     97c:	80 93 a7 3a 	sts	0x3AA7, r24	; 0x803aa7 <serTxAddr>
     980:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <serTxAddr+0x1>
     984:	78 94       	sei
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <__vector_8>:
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
     99e:	ef 93       	push	r30
     9a0:	ff 93       	push	r31
     9a2:	87 e0       	ldi	r24, 0x07	; 7
     9a4:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     9a8:	84 e4       	ldi	r24, 0x44	; 68
     9aa:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     9ae:	ec b3       	in	r30, 0x1c	; 28
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	e8 9f       	mul	r30, r24
     9b4:	f0 01       	movw	r30, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	e8 54       	subi	r30, 0x48	; 72
     9ba:	f5 4c       	sbci	r31, 0xC5	; 197
     9bc:	a8 e2       	ldi	r26, 0x28	; 40
     9be:	ba e0       	ldi	r27, 0x0A	; 10
     9c0:	96 e0       	ldi	r25, 0x06	; 6
     9c2:	81 91       	ld	r24, Z+
     9c4:	8d 93       	st	X+, r24
     9c6:	9a 95       	dec	r25
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <__vector_8+0x36>
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     9d0:	8c b3       	in	r24, 0x1c	; 28
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	58 f4       	brcc	.+22     	; 0x9ec <__vector_8+0x60>
     9d6:	8c b3       	in	r24, 0x1c	; 28
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	01 c0       	rjmp	.+2      	; 0x9de <__vector_8+0x52>
     9dc:	99 0f       	add	r25, r25
     9de:	8a 95       	dec	r24
     9e0:	ea f7       	brpl	.-6      	; 0x9dc <__vector_8+0x50>
     9e2:	99 b9       	out	0x09, r25	; 9
     9e4:	8c b3       	in	r24, 0x1c	; 28
     9e6:	83 95       	inc	r24
     9e8:	8c bb       	out	0x1c, r24	; 28
     9ea:	0a c0       	rjmp	.+20     	; 0xa00 <__vector_8+0x74>
     9ec:	8c b3       	in	r24, 0x1c	; 28
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	21 f4       	brne	.+8      	; 0x9fa <__vector_8+0x6e>
     9f2:	2a 9a       	sbi	0x05, 2	; 5
     9f4:	83 95       	inc	r24
     9f6:	8c bb       	out	0x1c, r24	; 28
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <__vector_8+0x74>
     9fa:	2e 9a       	sbi	0x05, 6	; 5
     9fc:	88 27       	eor	r24, r24
     9fe:	8c bb       	out	0x1c, r24	; 28
     a00:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     a04:	88 23       	and	r24, r24
     a06:	29 f0       	breq	.+10     	; 0xa12 <__vector_8+0x86>
     a08:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     a0c:	81 50       	subi	r24, 0x01	; 1
     a0e:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_13>:
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
     a40:	e0 91 a7 3a 	lds	r30, 0x3AA7	; 0x803aa7 <serTxAddr>
     a44:	f0 91 a8 3a 	lds	r31, 0x3AA8	; 0x803aa8 <serTxAddr+0x1>
     a48:	80 81       	ld	r24, Z
     a4a:	88 23       	and	r24, r24
     a4c:	91 f0       	breq	.+36     	; 0xa72 <__vector_13+0x44>
     a4e:	80 81       	ld	r24, Z
     a50:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a54:	80 91 a7 3a 	lds	r24, 0x3AA7	; 0x803aa7 <serTxAddr>
     a58:	90 91 a8 3a 	lds	r25, 0x3AA8	; 0x803aa8 <serTxAddr+0x1>
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	80 93 a7 3a 	sts	0x3AA7, r24	; 0x803aa7 <serTxAddr>
     a62:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <serTxAddr+0x1>
     a66:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a6a:	80 62       	ori	r24, 0x20	; 32
     a6c:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <__vector_13+0x4e>
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     a78:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_14>:
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
     aac:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ab0:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ab4:	80 81       	ld	r24, Z
     ab6:	81 11       	cpse	r24, r1
     ab8:	08 c0       	rjmp	.+16     	; 0xaca <__vector_14+0x36>
     aba:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     abe:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     ac2:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     ac6:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     aca:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ace:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ad2:	80 81       	ld	r24, Z
     ad4:	88 23       	and	r24, r24
     ad6:	e1 f0       	breq	.+56     	; 0xb10 <__vector_14+0x7c>
     ad8:	20 81       	ld	r18, Z
     ada:	40 91 a4 3a 	lds	r20, 0x3AA4	; 0x803aa4 <auVolume>
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	2f 57       	subi	r18, 0x7F	; 127
     ae2:	31 09       	sbc	r19, r1
     ae4:	42 9f       	mul	r20, r18
     ae6:	c0 01       	movw	r24, r0
     ae8:	43 9f       	mul	r20, r19
     aea:	90 0d       	add	r25, r0
     aec:	11 24       	eor	r1, r1
     aee:	89 2f       	mov	r24, r25
     af0:	99 0f       	add	r25, r25
     af2:	99 0b       	sbc	r25, r25
     af4:	80 58       	subi	r24, 0x80	; 128
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     afc:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     b00:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     b0a:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <__vector_14+0x88>
     b10:	80 e8       	ldi	r24, 0x80	; 128
     b12:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 e0 3a 	sts	0x3AE0, r24	; 0x803ae0 <auPlayDone>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_27>:
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	8f 93       	push	r24
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
     b4a:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <serRxDone>
     b4e:	81 11       	cpse	r24, r1
     b50:	44 c0       	rjmp	.+136    	; 0xbda <__vector_27+0xa0>
     b52:	ed b3       	in	r30, 0x1d	; 29
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     b5a:	ed 59       	subi	r30, 0x9D	; 157
     b5c:	f5 4c       	sbci	r31, 0xC5	; 197
     b5e:	80 83       	st	Z, r24
     b60:	ed b3       	in	r30, 0x1d	; 29
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ed 59       	subi	r30, 0x9D	; 157
     b66:	f5 4c       	sbci	r31, 0xC5	; 197
     b68:	80 81       	ld	r24, Z
     b6a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     b6e:	ed b3       	in	r30, 0x1d	; 29
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	ed 59       	subi	r30, 0x9D	; 157
     b74:	f5 4c       	sbci	r31, 0xC5	; 197
     b76:	80 81       	ld	r24, Z
     b78:	8a 30       	cpi	r24, 0x0A	; 10
     b7a:	39 f0       	breq	.+14     	; 0xb8a <__vector_27+0x50>
     b7c:	ed b3       	in	r30, 0x1d	; 29
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ed 59       	subi	r30, 0x9D	; 157
     b82:	f5 4c       	sbci	r31, 0xC5	; 197
     b84:	80 81       	ld	r24, Z
     b86:	8d 30       	cpi	r24, 0x0D	; 13
     b88:	49 f4       	brne	.+18     	; 0xb9c <__vector_27+0x62>
     b8a:	ed b3       	in	r30, 0x1d	; 29
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	ed 59       	subi	r30, 0x9D	; 157
     b90:	f5 4c       	sbci	r31, 0xC5	; 197
     b92:	10 82       	st	Z, r1
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <serRxDone>
     b9a:	1f c0       	rjmp	.+62     	; 0xbda <__vector_27+0xa0>
     b9c:	ed b3       	in	r30, 0x1d	; 29
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	ed 59       	subi	r30, 0x9D	; 157
     ba2:	f5 4c       	sbci	r31, 0xC5	; 197
     ba4:	80 81       	ld	r24, Z
     ba6:	88 30       	cpi	r24, 0x08	; 8
     ba8:	39 f0       	breq	.+14     	; 0xbb8 <__vector_27+0x7e>
     baa:	ed b3       	in	r30, 0x1d	; 29
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ed 59       	subi	r30, 0x9D	; 157
     bb0:	f5 4c       	sbci	r31, 0xC5	; 197
     bb2:	80 81       	ld	r24, Z
     bb4:	8f 37       	cpi	r24, 0x7F	; 127
     bb6:	59 f4       	brne	.+22     	; 0xbce <__vector_27+0x94>
     bb8:	8d b3       	in	r24, 0x1d	; 29
     bba:	88 23       	and	r24, r24
     bbc:	41 f0       	breq	.+16     	; 0xbce <__vector_27+0x94>
     bbe:	ed b3       	in	r30, 0x1d	; 29
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ed 59       	subi	r30, 0x9D	; 157
     bc4:	f5 4c       	sbci	r31, 0xC5	; 197
     bc6:	10 82       	st	Z, r1
     bc8:	8d b3       	in	r24, 0x1d	; 29
     bca:	81 50       	subi	r24, 0x01	; 1
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__vector_27+0x9e>
     bce:	8d b3       	in	r24, 0x1d	; 29
     bd0:	80 34       	cpi	r24, 0x40	; 64
     bd2:	18 f4       	brcc	.+6      	; 0xbda <__vector_27+0xa0>
     bd4:	8d b3       	in	r24, 0x1d	; 29
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	8d bb       	out	0x1d, r24	; 29
     bda:	80 e8       	ldi	r24, 0x80	; 128
     bdc:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	8f 91       	pop	r24
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <__vector_28>:
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	8f 93       	push	r24
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
     c00:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c04:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c0e:	e5 e0       	ldi	r30, 0x05	; 5
     c10:	f8 e0       	ldi	r31, 0x08	; 8
     c12:	80 81       	ld	r24, Z
     c14:	8f 7d       	andi	r24, 0xDF	; 223
     c16:	80 83       	st	Z, r24
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	8f 91       	pop	r24
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_20>:
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	11 24       	eor	r1, r1
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
     c3a:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <adc0Chg>
     c3e:	81 11       	cpse	r24, r1
     c40:	18 c0       	rjmp	.+48     	; 0xc72 <__vector_20+0x4a>
     c42:	8e b3       	in	r24, 0x1e	; 30
     c44:	8f 5f       	subi	r24, 0xFF	; 255
     c46:	87 70       	andi	r24, 0x07	; 7
     c48:	8e bb       	out	0x1e, r24	; 30
     c4a:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     c4e:	8e 31       	cpi	r24, 0x1E	; 30
     c50:	41 f4       	brne	.+16     	; 0xc62 <__vector_20+0x3a>
     c52:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	80 93 e3 3a 	sts	0x3AE3, r24	; 0x803ae3 <adcTemp>
     c5c:	90 93 e4 3a 	sts	0x3AE4, r25	; 0x803ae4 <adcTemp+0x1>
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <__vector_20+0x54>
     c62:	ee b3       	in	r30, 0x1e	; 30
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c6a:	e0 55       	subi	r30, 0x50	; 80
     c6c:	f5 4c       	sbci	r31, 0xC5	; 197
     c6e:	80 83       	st	Z, r24
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <__vector_20+0x54>
     c72:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <adc0Chg>
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <adc0Chg>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_22>:
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ca6:	81 11       	cpse	r24, r1
     ca8:	0a c0       	rjmp	.+20     	; 0xcbe <__vector_22+0x2a>
     caa:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cae:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     cb2:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <adcPhot>
     cb6:	90 93 ac 3a 	sts	0x3AAC, r25	; 0x803aac <adcPhot+0x1>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	10 c0       	rjmp	.+32     	; 0xcde <__vector_22+0x4a>
     cbe:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	79 f4       	brne	.+30     	; 0xce4 <__vector_22+0x50>
     cc6:	88 e0       	ldi	r24, 0x08	; 8
     cc8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     ccc:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cd0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     cd4:	80 93 a9 3a 	sts	0x3AA9, r24	; 0x803aa9 <adcHall>
     cd8:	90 93 aa 3a 	sts	0x3AAA, r25	; 0x803aaa <adcHall+0x1>
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ce2:	10 c0       	rjmp	.+32     	; 0xd04 <__vector_22+0x70>
     ce4:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ce8:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     cec:	80 93 a5 3a 	sts	0x3AA5, r24	; 0x803aa5 <adcBtns>
     cf0:	90 93 a6 3a 	sts	0x3AA6, r25	; 0x803aa6 <adcBtns+0x1>
     cf4:	8f b3       	in	r24, 0x1f	; 31
     cf6:	8f 30       	cpi	r24, 0x0F	; 15
     cf8:	29 f4       	brne	.+10     	; 0xd04 <__vector_22+0x70>
     cfa:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d04:	8f b3       	in	r24, 0x1f	; 31
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	8f 70       	andi	r24, 0x0F	; 15
     d0c:	99 27       	eor	r25, r25
     d0e:	8f bb       	out	0x1f, r24	; 31
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_6>:
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d40:	81 ff       	sbrs	r24, 1
     d42:	26 c0       	rjmp	.+76     	; 0xd90 <__vector_6+0x6c>
     d44:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <buttonMark>
     d48:	8f 3f       	cpi	r24, 0xFF	; 255
     d4a:	29 f0       	breq	.+10     	; 0xd56 <__vector_6+0x32>
     d4c:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <buttonMark>
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <buttonMark>
     d56:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d5a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d5e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d62:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     d66:	82 96       	adiw	r24, 0x22	; 34
     d68:	0e 94 4f 1b 	call	0x369e	; 0x369e <__udivmodhi4>
     d6c:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <tmp16bit>
     d70:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <tmp16bit+0x1>
     d74:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     d78:	83 fd       	sbrc	r24, 3
     d7a:	fc cf       	rjmp	.-8      	; 0xd74 <__vector_6+0x50>
     d7c:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
     d80:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
     d84:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     d88:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <__vector_6+0x78>
     d90:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <minuteMark>
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <minuteMark>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     da0:	bf 91       	pop	r27
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_7>:
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	8f 93       	push	r24
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     dca:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     dce:	8f 91       	pop	r24
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <EERead>:
     dda:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     dde:	91 fd       	sbrc	r25, 1
     de0:	fc cf       	rjmp	.-8      	; 0xdda <EERead>
     de2:	fb 01       	movw	r30, r22
     de4:	48 0f       	add	r20, r24
     de6:	84 17       	cp	r24, r20
     de8:	39 f0       	breq	.+14     	; 0xdf8 <EERead+0x1e>
     dea:	a8 2f       	mov	r26, r24
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	bc 5e       	subi	r27, 0xEC	; 236
     df0:	9c 91       	ld	r25, X
     df2:	91 93       	st	Z+, r25
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	f7 cf       	rjmp	.-18     	; 0xde6 <EERead+0xc>
     df8:	08 95       	ret

00000dfa <EEWrite>:
     dfa:	9d e9       	ldi	r25, 0x9D	; 157
     dfc:	24 e0       	ldi	r18, 0x04	; 4
     dfe:	33 e0       	ldi	r19, 0x03	; 3
     e00:	44 23       	and	r20, r20
     e02:	09 f1       	breq	.+66     	; 0xe46 <EEWrite+0x4c>
     e04:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e08:	51 fd       	sbrc	r21, 1
     e0a:	fc cf       	rjmp	.-8      	; 0xe04 <EEWrite+0xa>
     e0c:	94 bf       	out	0x34, r25	; 52
     e0e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e12:	e8 2f       	mov	r30, r24
     e14:	58 2f       	mov	r21, r24
     e16:	5f 71       	andi	r21, 0x1F	; 31
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	6f 5f       	subi	r22, 0xFF	; 255
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	db 01       	movw	r26, r22
     e20:	11 97       	sbiw	r26, 0x01	; 1
     e22:	ac 91       	ld	r26, X
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	fc 5e       	subi	r31, 0xEC	; 236
     e28:	a0 83       	st	Z, r26
     e2a:	41 50       	subi	r20, 0x01	; 1
     e2c:	19 f0       	breq	.+6      	; 0xe34 <EEWrite+0x3a>
     e2e:	e8 2f       	mov	r30, r24
     e30:	5f 31       	cpi	r21, 0x1F	; 31
     e32:	81 f7       	brne	.-32     	; 0xe14 <EEWrite+0x1a>
     e34:	94 bf       	out	0x34, r25	; 52
     e36:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e3a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e3e:	52 ff       	sbrs	r21, 2
     e40:	df cf       	rjmp	.-66     	; 0xe00 <EEWrite+0x6>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	08 95       	ret
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret

00000e4a <SerSend>:
     e4a:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <serTxDone>
     e4e:	22 23       	and	r18, r18
     e50:	59 f0       	breq	.+22     	; 0xe68 <SerSend+0x1e>
     e52:	80 93 a7 3a 	sts	0x3AA7, r24	; 0x803aa7 <serTxAddr>
     e56:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <serTxAddr+0x1>
     e5a:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <serTxDone>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	08 95       	ret
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	08 95       	ret

00000e6c <SerSpeed>:
     e6c:	28 2f       	mov	r18, r24
     e6e:	81 11       	cpse	r24, r1
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <SerSpeed+0x8>
     e72:	21 e0       	ldi	r18, 0x01	; 1
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	82 1b       	sub	r24, r18
     e7a:	91 09       	sbc	r25, r1
     e7c:	98 2f       	mov	r25, r24
     e7e:	88 27       	eor	r24, r24
     e80:	81 50       	subi	r24, 0x01	; 1
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     e88:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     e8c:	08 95       	ret

00000e8e <SelectTSens>:
     e8e:	82 e1       	ldi	r24, 0x12	; 18
     e90:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     e94:	e0 e0       	ldi	r30, 0x00	; 0
     e96:	f6 e0       	ldi	r31, 0x06	; 6
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	80 83       	st	Z, r24
     e9e:	8e e1       	ldi	r24, 0x1E	; 30
     ea0:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <adc0Chg>
     eaa:	08 95       	ret

00000eac <SelectAuIn>:
     eac:	82 e2       	ldi	r24, 0x22	; 34
     eae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     eb2:	e0 e0       	ldi	r30, 0x00	; 0
     eb4:	f6 e0       	ldi	r31, 0x06	; 6
     eb6:	80 81       	ld	r24, Z
     eb8:	8b 7f       	andi	r24, 0xFB	; 251
     eba:	80 83       	st	Z, r24
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ec2:	83 e0       	ldi	r24, 0x03	; 3
     ec4:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <adc0Chg>
     ec8:	08 95       	ret

00000eca <CheckButtons>:
     eca:	20 91 a5 3a 	lds	r18, 0x3AA5	; 0x803aa5 <adcBtns>
     ece:	30 91 a6 3a 	lds	r19, 0x3AA6	; 0x803aa6 <adcBtns+0x1>
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	36 95       	lsr	r19
     ed6:	27 95       	ror	r18
     ed8:	9a 95       	dec	r25
     eda:	e1 f7       	brne	.-8      	; 0xed4 <CheckButtons+0xa>
     edc:	33 27       	eor	r19, r19
     ede:	2c 35       	cpi	r18, 0x5C	; 92
     ee0:	31 05       	cpc	r19, r1
     ee2:	d0 f4       	brcc	.+52     	; 0xf18 <CheckButtons+0x4e>
     ee4:	23 35       	cpi	r18, 0x53	; 83
     ee6:	31 05       	cpc	r19, r1
     ee8:	a8 f5       	brcc	.+106    	; 0xf54 <CheckButtons+0x8a>
     eea:	22 33       	cpi	r18, 0x32	; 50
     eec:	31 05       	cpc	r19, r1
     eee:	50 f4       	brcc	.+20     	; 0xf04 <CheckButtons+0x3a>
     ef0:	2d 32       	cpi	r18, 0x2D	; 45
     ef2:	31 05       	cpc	r19, r1
     ef4:	58 f5       	brcc	.+86     	; 0xf4c <CheckButtons+0x82>
     ef6:	23 52       	subi	r18, 0x23	; 35
     ef8:	31 09       	sbc	r19, r1
     efa:	25 30       	cpi	r18, 0x05	; 5
     efc:	31 05       	cpc	r19, r1
     efe:	80 f5       	brcc	.+96     	; 0xf60 <CheckButtons+0x96>
     f00:	9c e0       	ldi	r25, 0x0C	; 12
     f02:	2f c0       	rjmp	.+94     	; 0xf62 <CheckButtons+0x98>
     f04:	27 33       	cpi	r18, 0x37	; 55
     f06:	31 05       	cpc	r19, r1
     f08:	18 f1       	brcs	.+70     	; 0xf50 <CheckButtons+0x86>
     f0a:	2e 53       	subi	r18, 0x3E	; 62
     f0c:	31 09       	sbc	r19, r1
     f0e:	27 30       	cpi	r18, 0x07	; 7
     f10:	31 05       	cpc	r19, r1
     f12:	30 f5       	brcc	.+76     	; 0xf60 <CheckButtons+0x96>
     f14:	96 e0       	ldi	r25, 0x06	; 6
     f16:	25 c0       	rjmp	.+74     	; 0xf62 <CheckButtons+0x98>
     f18:	2a 38       	cpi	r18, 0x8A	; 138
     f1a:	31 05       	cpc	r19, r1
     f1c:	50 f4       	brcc	.+20     	; 0xf32 <CheckButtons+0x68>
     f1e:	29 37       	cpi	r18, 0x79	; 121
     f20:	31 05       	cpc	r19, r1
     f22:	d0 f4       	brcc	.+52     	; 0xf58 <CheckButtons+0x8e>
     f24:	23 56       	subi	r18, 0x63	; 99
     f26:	31 09       	sbc	r19, r1
     f28:	2b 30       	cpi	r18, 0x0B	; 11
     f2a:	31 05       	cpc	r19, r1
     f2c:	c8 f4       	brcc	.+50     	; 0xf60 <CheckButtons+0x96>
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	18 c0       	rjmp	.+48     	; 0xf62 <CheckButtons+0x98>
     f32:	22 3a       	cpi	r18, 0xA2	; 162
     f34:	31 05       	cpc	r19, r1
     f36:	a0 f0       	brcs	.+40     	; 0xf60 <CheckButtons+0x96>
     f38:	2b 3b       	cpi	r18, 0xBB	; 187
     f3a:	31 05       	cpc	r19, r1
     f3c:	78 f0       	brcs	.+30     	; 0xf5c <CheckButtons+0x92>
     f3e:	20 5f       	subi	r18, 0xF0	; 240
     f40:	31 09       	sbc	r19, r1
     f42:	20 31       	cpi	r18, 0x10	; 16
     f44:	31 05       	cpc	r19, r1
     f46:	60 f4       	brcc	.+24     	; 0xf60 <CheckButtons+0x96>
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0b c0       	rjmp	.+22     	; 0xf62 <CheckButtons+0x98>
     f4c:	99 e0       	ldi	r25, 0x09	; 9
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <CheckButtons+0x98>
     f50:	98 e0       	ldi	r25, 0x08	; 8
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <CheckButtons+0x98>
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <CheckButtons+0x98>
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <CheckButtons+0x98>
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <CheckButtons+0x98>
     f60:	9f e0       	ldi	r25, 0x0F	; 15
     f62:	28 2f       	mov	r18, r24
     f64:	2f 70       	andi	r18, 0x0F	; 15
     f66:	92 13       	cpse	r25, r18
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <CheckButtons+0xac>
     f6a:	98 2f       	mov	r25, r24
     f6c:	90 7f       	andi	r25, 0xF0	; 240
     f6e:	90 3f       	cpi	r25, 0xF0	; 240
     f70:	39 f0       	breq	.+14     	; 0xf80 <CheckButtons+0xb6>
     f72:	80 5f       	subi	r24, 0xF0	; 240
     f74:	08 95       	ret
     f76:	99 23       	and	r25, r25
     f78:	11 f0       	breq	.+4      	; 0xf7e <CheckButtons+0xb4>
     f7a:	89 2f       	mov	r24, r25
     f7c:	08 95       	ret
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <lfsr>:
     f82:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3879>
     f86:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3879+0x1>
     f8a:	9c 01       	movw	r18, r24
     f8c:	32 2f       	mov	r19, r18
     f8e:	22 27       	eor	r18, r18
     f90:	32 95       	swap	r19
     f92:	33 0f       	add	r19, r19
     f94:	30 7e       	andi	r19, 0xE0	; 224
     f96:	82 27       	eor	r24, r18
     f98:	93 27       	eor	r25, r19
     f9a:	9c 01       	movw	r18, r24
     f9c:	23 2f       	mov	r18, r19
     f9e:	33 27       	eor	r19, r19
     fa0:	26 95       	lsr	r18
     fa2:	82 27       	eor	r24, r18
     fa4:	93 27       	eor	r25, r19
     fa6:	9c 01       	movw	r18, r24
     fa8:	36 95       	lsr	r19
     faa:	32 2f       	mov	r19, r18
     fac:	22 27       	eor	r18, r18
     fae:	37 95       	ror	r19
     fb0:	27 95       	ror	r18
     fb2:	82 27       	eor	r24, r18
     fb4:	93 27       	eor	r25, r19
     fb6:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3879>
     fba:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3879+0x1>
     fbe:	08 95       	ret

00000fc0 <floatSpeed>:
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	7b 01       	movw	r14, r22
     fd0:	8a 01       	movw	r16, r20
     fd2:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     fd6:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     fda:	e8 2f       	mov	r30, r24
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	e7 70       	andi	r30, 0x07	; 7
     fe2:	ff 27       	eor	r31, r31
     fe4:	e2 5e       	subi	r30, 0xE2	; 226
     fe6:	f7 4c       	sbci	r31, 0xC7	; 199
     fe8:	d0 80       	ld	r13, Z
     fea:	cb df       	rcall	.-106    	; 0xf82 <lfsr>
     fec:	8d 21       	and	r24, r13
     fee:	c8 0f       	add	r28, r24
     ff0:	d1 1d       	adc	r29, r1
     ff2:	c7 df       	rcall	.-114    	; 0xf82 <lfsr>
     ff4:	8d 21       	and	r24, r13
     ff6:	c8 1b       	sub	r28, r24
     ff8:	d1 09       	sbc	r29, r1
     ffa:	0c 17       	cp	r16, r28
     ffc:	1d 07       	cpc	r17, r29
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <floatSpeed+0x42>
    1000:	e8 01       	movw	r28, r16
    1002:	c7 01       	movw	r24, r14
    1004:	ec 16       	cp	r14, r28
    1006:	fd 06       	cpc	r15, r29
    1008:	08 f4       	brcc	.+2      	; 0x100c <floatSpeed+0x4c>
    100a:	ce 01       	movw	r24, r28
    100c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1010:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	08 95       	ret

00001024 <floatAround>:
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	c8 2f       	mov	r28, r24
    102e:	d4 2f       	mov	r29, r20
    1030:	02 2f       	mov	r16, r18
    1032:	e6 2f       	mov	r30, r22
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	e7 70       	andi	r30, 0x07	; 7
    103a:	ff 27       	eor	r31, r31
    103c:	e2 5e       	subi	r30, 0xE2	; 226
    103e:	f7 4c       	sbci	r31, 0xC7	; 199
    1040:	10 81       	ld	r17, Z
    1042:	9f df       	rcall	.-194    	; 0xf82 <lfsr>
    1044:	81 23       	and	r24, r17
    1046:	c8 0f       	add	r28, r24
    1048:	9c df       	rcall	.-200    	; 0xf82 <lfsr>
    104a:	81 23       	and	r24, r17
    104c:	c8 1b       	sub	r28, r24
    104e:	8c 2f       	mov	r24, r28
    1050:	00 23       	and	r16, r16
    1052:	41 f0       	breq	.+16     	; 0x1064 <floatAround+0x40>
    1054:	9c 2f       	mov	r25, r28
    1056:	0c 17       	cp	r16, r28
    1058:	08 f4       	brcc	.+2      	; 0x105c <floatAround+0x38>
    105a:	90 2f       	mov	r25, r16
    105c:	8d 2f       	mov	r24, r29
    105e:	d9 17       	cp	r29, r25
    1060:	08 f4       	brcc	.+2      	; 0x1064 <floatAround+0x40>
    1062:	89 2f       	mov	r24, r25
    1064:	41 e0       	ldi	r20, 0x01	; 1
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	8d 17       	cp	r24, r29
    106a:	10 f0       	brcs	.+4      	; 0x1070 <floatAround+0x4c>
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	2d 2f       	mov	r18, r29
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	24 23       	and	r18, r20
    1076:	35 23       	and	r19, r21
    1078:	23 2b       	or	r18, r19
    107a:	09 f0       	breq	.+2      	; 0x107e <floatAround+0x5a>
    107c:	8d 2f       	mov	r24, r29
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <SaveGameState>:
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	64 97       	sbiw	r28, 0x14	; 20
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	44 e1       	ldi	r20, 0x14	; 20
    10a2:	be 01       	movw	r22, r28
    10a4:	6f 5f       	subi	r22, 0xFF	; 255
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	97 de       	rcall	.-722    	; 0xdda <EERead>
    10ac:	8f e4       	ldi	r24, 0x4F	; 79
    10ae:	c8 2e       	mov	r12, r24
    10b0:	8a e3       	ldi	r24, 0x3A	; 58
    10b2:	d8 2e       	mov	r13, r24
    10b4:	8e 01       	movw	r16, r28
    10b6:	0f 5f       	subi	r16, 0xFF	; 255
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	f1 2c       	mov	r15, r1
    10bc:	f8 01       	movw	r30, r16
    10be:	81 91       	ld	r24, Z+
    10c0:	8f 01       	movw	r16, r30
    10c2:	f6 01       	movw	r30, r12
    10c4:	90 81       	ld	r25, Z
    10c6:	98 13       	cpse	r25, r24
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <SaveGameState+0x52>
    10ca:	f3 94       	inc	r15
    10cc:	ff ef       	ldi	r31, 0xFF	; 255
    10ce:	cf 1a       	sub	r12, r31
    10d0:	df 0a       	sbc	r13, r31
    10d2:	80 e1       	ldi	r24, 0x10	; 16
    10d4:	f8 12       	cpse	r15, r24
    10d6:	f2 cf       	rjmp	.-28     	; 0x10bc <SaveGameState+0x34>
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <SaveGameState+0x62>
    10da:	41 e0       	ldi	r20, 0x01	; 1
    10dc:	b6 01       	movw	r22, r12
    10de:	8f 2d       	mov	r24, r15
    10e0:	8c de       	rcall	.-744    	; 0xdfa <EEWrite>
    10e2:	88 23       	and	r24, r24
    10e4:	91 f3       	breq	.-28     	; 0x10ca <SaveGameState+0x42>
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	36 c0       	rjmp	.+108    	; 0x1156 <SaveGameState+0xce>
    10ea:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory>
    10ee:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x1>
    10f2:	30 93 5f 3a 	sts	0x3A5F, r19	; 0x803a5f <gameState+0x10>
    10f6:	20 93 60 3a 	sts	0x3A60, r18	; 0x803a60 <gameState+0x11>
    10fa:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <inventory+0x2>
    10fe:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <inventory+0x3>
    1102:	90 93 61 3a 	sts	0x3A61, r25	; 0x803a61 <gameState+0x12>
    1106:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <gameState+0x13>
    110a:	89 89       	ldd	r24, Y+17	; 0x11
    110c:	9a 89       	ldd	r25, Y+18	; 0x12
    110e:	98 27       	eor	r25, r24
    1110:	89 27       	eor	r24, r25
    1112:	98 27       	eor	r25, r24
    1114:	28 17       	cp	r18, r24
    1116:	39 07       	cpc	r19, r25
    1118:	69 f4       	brne	.+26     	; 0x1134 <SaveGameState+0xac>
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	98 27       	eor	r25, r24
    1120:	89 27       	eor	r24, r25
    1122:	98 27       	eor	r25, r24
    1124:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <inventory+0x2>
    1128:	30 91 36 38 	lds	r19, 0x3836	; 0x803836 <inventory+0x3>
    112c:	28 17       	cp	r18, r24
    112e:	39 07       	cpc	r19, r25
    1130:	49 f4       	brne	.+18     	; 0x1144 <SaveGameState+0xbc>
    1132:	10 c0       	rjmp	.+32     	; 0x1154 <SaveGameState+0xcc>
    1134:	42 e0       	ldi	r20, 0x02	; 2
    1136:	6f e5       	ldi	r22, 0x5F	; 95
    1138:	7a e3       	ldi	r23, 0x3A	; 58
    113a:	80 e1       	ldi	r24, 0x10	; 16
    113c:	5e de       	rcall	.-836    	; 0xdfa <EEWrite>
    113e:	88 23       	and	r24, r24
    1140:	61 f3       	breq	.-40     	; 0x111a <SaveGameState+0x92>
    1142:	d1 cf       	rjmp	.-94     	; 0x10e6 <SaveGameState+0x5e>
    1144:	42 e0       	ldi	r20, 0x02	; 2
    1146:	61 e6       	ldi	r22, 0x61	; 97
    1148:	7a e3       	ldi	r23, 0x3A	; 58
    114a:	82 e1       	ldi	r24, 0x12	; 18
    114c:	56 de       	rcall	.-852    	; 0xdfa <EEWrite>
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	81 11       	cpse	r24, r1
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <SaveGameState+0xce>
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	89 2f       	mov	r24, r25
    1158:	64 96       	adiw	r28, 0x14	; 20
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <ReadStatusBit>:
    116e:	e8 2f       	mov	r30, r24
    1170:	ef 77       	andi	r30, 0x7F	; 127
    1172:	e6 95       	lsr	r30
    1174:	e6 95       	lsr	r30
    1176:	e6 95       	lsr	r30
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	e1 5b       	subi	r30, 0xB1	; 177
    117c:	f5 4c       	sbci	r31, 0xC5	; 197
    117e:	20 81       	ld	r18, Z
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	87 70       	andi	r24, 0x07	; 7
    1184:	a9 01       	movw	r20, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <ReadStatusBit+0x1e>
    1188:	55 95       	asr	r21
    118a:	47 95       	ror	r20
    118c:	8a 95       	dec	r24
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <ReadStatusBit+0x1a>
    1190:	ca 01       	movw	r24, r20
    1192:	81 70       	andi	r24, 0x01	; 1
    1194:	08 95       	ret

00001196 <WriteStatusBit>:
    1196:	e8 2f       	mov	r30, r24
    1198:	ef 77       	andi	r30, 0x7F	; 127
    119a:	e6 95       	lsr	r30
    119c:	e6 95       	lsr	r30
    119e:	e6 95       	lsr	r30
    11a0:	28 2f       	mov	r18, r24
    11a2:	27 70       	andi	r18, 0x07	; 7
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	e1 5b       	subi	r30, 0xB1	; 177
    11a8:	f5 4c       	sbci	r31, 0xC5	; 197
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <WriteStatusBit+0x1c>
    11b0:	88 0f       	add	r24, r24
    11b2:	2a 95       	dec	r18
    11b4:	ea f7       	brpl	.-6      	; 0x11b0 <WriteStatusBit+0x1a>
    11b6:	66 23       	and	r22, r22
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <WriteStatusBit+0x2a>
    11ba:	90 81       	ld	r25, Z
    11bc:	89 2b       	or	r24, r25
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <WriteStatusBit+0x30>
    11c0:	80 95       	com	r24
    11c2:	90 81       	ld	r25, Z
    11c4:	89 23       	and	r24, r25
    11c6:	80 83       	st	Z, r24
    11c8:	08 95       	ret

000011ca <UpdateState>:
    11ca:	98 2f       	mov	r25, r24
    11cc:	8f 77       	andi	r24, 0x7F	; 127
    11ce:	31 f0       	breq	.+12     	; 0x11dc <UpdateState+0x12>
    11d0:	97 ff       	sbrs	r25, 7
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <UpdateState+0xe>
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <UpdateState+0x10>
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	dd cf       	rjmp	.-70     	; 0x1196 <WriteStatusBit>
    11dc:	08 95       	ret

000011de <CheckState>:
    11de:	cf 93       	push	r28
    11e0:	c8 2f       	mov	r28, r24
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	c4 df       	rcall	.-120    	; 0x116e <ReadStatusBit>
    11e6:	2c 2f       	mov	r18, r28
    11e8:	22 1f       	adc	r18, r18
    11ea:	22 27       	eor	r18, r18
    11ec:	22 1f       	adc	r18, r18
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	81 11       	cpse	r24, r1
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <CheckState+0x18>
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	82 2f       	mov	r24, r18
    11f8:	89 27       	eor	r24, r25
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <getID>:
    11fe:	e3 e0       	ldi	r30, 0x03	; 3
    1200:	f1 e1       	ldi	r31, 0x11	; 17
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	91 91       	ld	r25, Z+
    1206:	89 0f       	add	r24, r25
    1208:	ed 30       	cpi	r30, 0x0D	; 13
    120a:	91 e1       	ldi	r25, 0x11	; 17
    120c:	f9 07       	cpc	r31, r25
    120e:	d1 f7       	brne	.-12     	; 0x1204 <getID+0x6>
    1210:	83 70       	andi	r24, 0x03	; 3
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <whoami>
    1218:	08 95       	ret

0000121a <Reset>:
    121a:	ef e4       	ldi	r30, 0x4F	; 79
    121c:	fa e3       	ldi	r31, 0x3A	; 58
    121e:	11 92       	st	Z+, r1
    1220:	8a e3       	ldi	r24, 0x3A	; 58
    1222:	e3 36       	cpi	r30, 0x63	; 99
    1224:	f8 07       	cpc	r31, r24
    1226:	d9 f7       	brne	.-10     	; 0x121e <Reset+0x4>
    1228:	ea df       	rcall	.-44     	; 0x11fe <getID>
    122a:	81 11       	cpse	r24, r1
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <Reset+0x1c>
    122e:	80 91 5c 3a 	lds	r24, 0x3A5C	; 0x803a5c <gameState+0xd>
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <Reset+0x26>
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	31 f4       	brne	.+12     	; 0x1246 <Reset+0x2c>
    123a:	80 91 5c 3a 	lds	r24, 0x3A5C	; 0x803a5c <gameState+0xd>
    123e:	80 68       	ori	r24, 0x80	; 128
    1240:	80 93 5c 3a 	sts	0x3A5C, r24	; 0x803a5c <gameState+0xd>
    1244:	0d c0       	rjmp	.+26     	; 0x1260 <Reset+0x46>
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	21 f4       	brne	.+8      	; 0x1252 <Reset+0x38>
    124a:	80 91 5d 3a 	lds	r24, 0x3A5D	; 0x803a5d <gameState+0xe>
    124e:	81 60       	ori	r24, 0x01	; 1
    1250:	05 c0       	rjmp	.+10     	; 0x125c <Reset+0x42>
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	29 f4       	brne	.+10     	; 0x1260 <Reset+0x46>
    1256:	80 91 5d 3a 	lds	r24, 0x3A5D	; 0x803a5d <gameState+0xe>
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	80 93 5d 3a 	sts	0x3A5D, r24	; 0x803a5d <gameState+0xe>
    1260:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <gameState>
    1264:	81 60       	ori	r24, 0x01	; 1
    1266:	80 93 4f 3a 	sts	0x3A4F, r24	; 0x803a4f <gameState>
    126a:	08 95       	ret

0000126c <LoadGameState>:
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	44 e1       	ldi	r20, 0x14	; 20
    1272:	6f e4       	ldi	r22, 0x4F	; 79
    1274:	7a e3       	ldi	r23, 0x3A	; 58
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	b0 dd       	rcall	.-1184   	; 0xdda <EERead>
    127a:	ce e6       	ldi	r28, 0x6E	; 110
    127c:	d0 e0       	ldi	r29, 0x00	; 0
    127e:	8c 2f       	mov	r24, r28
    1280:	76 df       	rcall	.-276    	; 0x116e <ReadStatusBit>
    1282:	d8 0f       	add	r29, r24
    1284:	cf 5f       	subi	r28, 0xFF	; 255
    1286:	c2 37       	cpi	r28, 0x72	; 114
    1288:	d1 f7       	brne	.-12     	; 0x127e <LoadGameState+0x12>
    128a:	d1 30       	cpi	r29, 0x01	; 1
    128c:	11 f0       	breq	.+4      	; 0x1292 <LoadGameState+0x26>
    128e:	c5 df       	rcall	.-118    	; 0x121a <Reset>
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <LoadGameState+0x28>
    1292:	b5 df       	rcall	.-150    	; 0x11fe <getID>
    1294:	80 91 5f 3a 	lds	r24, 0x3A5F	; 0x803a5f <gameState+0x10>
    1298:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <gameState+0x11>
    129c:	98 27       	eor	r25, r24
    129e:	89 27       	eor	r24, r25
    12a0:	98 27       	eor	r25, r24
    12a2:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory>
    12a6:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x1>
    12aa:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <gameState+0x12>
    12ae:	90 91 62 3a 	lds	r25, 0x3A62	; 0x803a62 <gameState+0x13>
    12b2:	98 27       	eor	r25, r24
    12b4:	89 27       	eor	r24, r25
    12b6:	98 27       	eor	r25, r24
    12b8:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <inventory+0x2>
    12bc:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <inventory+0x3>
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	08 95       	ret

000012c6 <HotSummer>:
    12c6:	cf 93       	push	r28
    12c8:	86 e7       	ldi	r24, 0x76	; 118
    12ca:	89 df       	rcall	.-238    	; 0x11de <CheckState>
    12cc:	c8 2f       	mov	r28, r24
    12ce:	88 23       	and	r24, r24
    12d0:	81 f0       	breq	.+32     	; 0x12f2 <HotSummer+0x2c>
    12d2:	e0 91 5f b7 	lds	r30, 0xB75F	; 0x80b75f <__bss_end+0x7c57>
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	e8 54       	subi	r30, 0x48	; 72
    12da:	f5 4c       	sbci	r31, 0xC5	; 197
    12dc:	10 82       	st	Z, r1
    12de:	e0 91 5e b7 	lds	r30, 0xB75E	; 0x80b75e <__bss_end+0x7c56>
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    12e8:	e8 54       	subi	r30, 0x48	; 72
    12ea:	f5 4c       	sbci	r31, 0xC5	; 197
    12ec:	80 83       	st	Z, r24
    12ee:	c1 e0       	ldi	r28, 0x01	; 1
    12f0:	4c c0       	rjmp	.+152    	; 0x138a <HotSummer+0xc4>
    12f2:	85 e7       	ldi	r24, 0x75	; 117
    12f4:	74 df       	rcall	.-280    	; 0x11de <CheckState>
    12f6:	88 23       	and	r24, r24
    12f8:	59 f1       	breq	.+86     	; 0x1350 <HotSummer+0x8a>
    12fa:	e0 91 5f b7 	lds	r30, 0xB75F	; 0x80b75f <__bss_end+0x7c57>
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    1304:	e8 54       	subi	r30, 0x48	; 72
    1306:	f5 4c       	sbci	r31, 0xC5	; 197
    1308:	80 83       	st	Z, r24
    130a:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <cooledDown.3938>
    130e:	88 23       	and	r24, r24
    1310:	79 f0       	breq	.+30     	; 0x1330 <HotSummer+0x6a>
    1312:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1316:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    131a:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    131e:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1322:	08 96       	adiw	r24, 0x08	; 8
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	18 f0       	brcs	.+6      	; 0x1330 <HotSummer+0x6a>
    132a:	86 e7       	ldi	r24, 0x76	; 118
    132c:	4e df       	rcall	.-356    	; 0x11ca <UpdateState>
    132e:	2d c0       	rjmp	.+90     	; 0x138a <HotSummer+0xc4>
    1330:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1334:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    1338:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    133c:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1340:	02 96       	adiw	r24, 0x02	; 2
    1342:	82 17       	cp	r24, r18
    1344:	93 07       	cpc	r25, r19
    1346:	08 f1       	brcs	.+66     	; 0x138a <HotSummer+0xc4>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <cooledDown.3938>
    134e:	1d c0       	rjmp	.+58     	; 0x138a <HotSummer+0xc4>
    1350:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1354:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    1358:	89 2b       	or	r24, r25
    135a:	41 f4       	brne	.+16     	; 0x136c <HotSummer+0xa6>
    135c:	80 91 e3 3a 	lds	r24, 0x3AE3	; 0x803ae3 <adcTemp>
    1360:	90 91 e4 3a 	lds	r25, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1364:	80 93 ae 3a 	sts	0x3AAE, r24	; 0x803aae <calTemp>
    1368:	90 93 af 3a 	sts	0x3AAF, r25	; 0x803aaf <calTemp+0x1>
    136c:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1370:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    1374:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    1378:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    137c:	08 96       	adiw	r24, 0x08	; 8
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	18 f0       	brcs	.+6      	; 0x138a <HotSummer+0xc4>
    1384:	85 e7       	ldi	r24, 0x75	; 117
    1386:	21 df       	rcall	.-446    	; 0x11ca <UpdateState>
    1388:	c0 e0       	ldi	r28, 0x00	; 0
    138a:	8c 2f       	mov	r24, r28
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <GenerateAudio>:


uint8_t GenerateAudio(){
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29

    if (auIn[AULEN>>1] < HPLVL) {
    1398:	80 91 b4 3a 	lds	r24, 0x3AB4	; 0x803ab4 <auIn+0x4>
    139c:	89 31       	cpi	r24, 0x19	; 25
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <GenerateAudio+0x12>
    13a0:	cf c0       	rjmp	.+414    	; 0x1540 <GenerateAudio+0x1b0>

        detHdPh = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 ad 3a 	sts	0x3AAD, r24	; 0x803aad <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    13a8:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    13ac:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    13b0:	88 27       	eor	r24, r24
    13b2:	89 2b       	or	r24, r25
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <GenerateAudio+0x28>
    13b6:	c6 c0       	rjmp	.+396    	; 0x1544 <GenerateAudio+0x1b4>

            //Silence
            if ((effect&0xE0)==0){
    13b8:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    13bc:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    13c0:	80 7e       	andi	r24, 0xE0	; 224
    13c2:	99 27       	eor	r25, r25
    13c4:	89 2b       	or	r24, r25
    13c6:	31 f4       	brne	.+12     	; 0x13d4 <GenerateAudio+0x44>
                auRepAddr = &zero;
    13c8:	8d e2       	ldi	r24, 0x2D	; 45
    13ca:	98 e3       	ldi	r25, 0x38	; 56
    13cc:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    13d0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    13d4:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    13d8:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    13dc:	80 7e       	andi	r24, 0xE0	; 224
    13de:	99 27       	eor	r25, r25
    13e0:	80 97       	sbiw	r24, 0x20	; 32
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <GenerateAudio+0x56>
    13e4:	59 c0       	rjmp	.+178    	; 0x1498 <GenerateAudio+0x108>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	52 e2       	ldi	r21, 0x22	; 34
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e2       	ldi	r23, 0x20	; 32
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	e7 dd       	rcall	.-1074   	; 0xfc0 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	65 e0       	ldi	r22, 0x05	; 5
    13f8:	80 e8       	ldi	r24, 0x80	; 128
    13fa:	14 de       	rcall	.-984    	; 0x1024 <floatAround>
    13fc:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <auBuffer.3948+0x2>

                if (buttonMark) {
    1400:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <buttonMark>
    1404:	88 23       	and	r24, r24
    1406:	09 f4       	brne	.+2      	; 0x140a <GenerateAudio+0x7a>
    1408:	47 c0       	rjmp	.+142    	; 0x1498 <GenerateAudio+0x108>
                    if (start == 0) {
    140a:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <start.3951>
    140e:	81 11       	cpse	r24, r1
    1410:	15 c0       	rjmp	.+42     	; 0x143c <GenerateAudio+0xac>
                        duration = 4;
    1412:	84 e0       	ldi	r24, 0x04	; 4
    1414:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <duration.3950>
                        loudness = 0xff;
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <loudness.3949>
                        TCB1_CCMP = 0x2000;
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e2       	ldi	r25, 0x20	; 32
    1422:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1426:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    142a:	8b e0       	ldi	r24, 0x0B	; 11
    142c:	98 e3       	ldi	r25, 0x38	; 56
    142e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1432:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <start.3951>
                    }

                    if (loudness) {
    143c:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <loudness.3949>
    1440:	88 23       	and	r24, r24
    1442:	69 f0       	breq	.+26     	; 0x145e <GenerateAudio+0xce>
                        auVolume = loudness;
    1444:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1448:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <duration.3950>
    144c:	99 23       	and	r25, r25
    144e:	21 f0       	breq	.+8      	; 0x1458 <GenerateAudio+0xc8>
    1450:	91 50       	subi	r25, 0x01	; 1
    1452:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <duration.3950>
    1456:	03 c0       	rjmp	.+6      	; 0x145e <GenerateAudio+0xce>
    1458:	86 95       	lsr	r24
    145a:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <loudness.3949>
                    } 

                    if (loudness == 0) {
    145e:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <loudness.3949>
    1462:	81 11       	cpse	r24, r1
    1464:	19 c0       	rjmp	.+50     	; 0x1498 <GenerateAudio+0x108>
                        effect &= 0x10;
    1466:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    146a:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    146e:	80 71       	andi	r24, 0x10	; 16
    1470:	99 27       	eor	r25, r25
    1472:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    1476:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
                        auRepAddr = &zero;
    147a:	8d e2       	ldi	r24, 0x2D	; 45
    147c:	98 e3       	ldi	r25, 0x38	; 56
    147e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1482:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1486:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    148a:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                        start = 0;
    1494:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <start.3951>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1498:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    149c:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    14a0:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    14a4:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    14a8:	80 7e       	andi	r24, 0xE0	; 224
    14aa:	99 27       	eor	r25, r25
    14ac:	80 36       	cpi	r24, 0x60	; 96
    14ae:	91 05       	cpc	r25, r1
    14b0:	d1 f5       	brne	.+116    	; 0x1526 <GenerateAudio+0x196>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    14b2:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <auBuffer.3952+0x6>
                auRepAddr = &auBuffer[0];
    14b6:	8f e3       	ldi	r24, 0x3F	; 63
    14b8:	98 e3       	ldi	r25, 0x38	; 56
    14ba:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    14be:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    14c2:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    14c4:	c1 e0       	ldi	r28, 0x01	; 1
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    14c6:	d3 e0       	ldi	r29, 0x03	; 3
    14c8:	8c 2f       	mov	r24, r28
    14ca:	6d 2f       	mov	r22, r29
    14cc:	0e 94 43 1b 	call	0x3686	; 0x3686 <__udivmodqi4>
    14d0:	99 23       	and	r25, r25
    14d2:	39 f0       	breq	.+14     	; 0x14e2 <GenerateAudio+0x152>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	65 e0       	ldi	r22, 0x05	; 5
    14da:	80 e8       	ldi	r24, 0x80	; 128
    14dc:	a3 dd       	rcall	.-1210   	; 0x1024 <floatAround>
    14de:	f8 01       	movw	r30, r16
    14e0:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    14e2:	cf 5f       	subi	r28, 0xFF	; 255
    14e4:	0f 5f       	subi	r16, 0xFF	; 255
    14e6:	1f 4f       	sbci	r17, 0xFF	; 255
    14e8:	c6 30       	cpi	r28, 0x06	; 6
    14ea:	71 f7       	brne	.-36     	; 0x14c8 <GenerateAudio+0x138>
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    14ec:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <buttonMark>
    14f0:	88 23       	and	r24, r24
    14f2:	c9 f0       	breq	.+50     	; 0x1526 <GenerateAudio+0x196>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	54 e0       	ldi	r21, 0x04	; 4
    14f8:	60 e8       	ldi	r22, 0x80	; 128
    14fa:	72 e0       	ldi	r23, 0x02	; 2
    14fc:	85 e0       	ldi	r24, 0x05	; 5
    14fe:	60 dd       	rcall	.-1344   	; 0xfc0 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1500:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <auVolume>
    1504:	20 ea       	ldi	r18, 0xA0	; 160
    1506:	40 e1       	ldi	r20, 0x10	; 16
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	8c dd       	rcall	.-1256   	; 0x1024 <floatAround>
    150c:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1510:	20 e9       	ldi	r18, 0x90	; 144
    1512:	40 e7       	ldi	r20, 0x70	; 112
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <auBuffer.3952>
    151a:	84 dd       	rcall	.-1272   	; 0x1024 <floatAround>
    151c:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <auBuffer.3952>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1520:	80 95       	com	r24
    1522:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <auBuffer.3952+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1526:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    152a:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    152e:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    1532:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1536:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    153a:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GenerateAudio+0x1b4>
            //
            else {
            }
        }
    } else {
        detHdPh = 0;
    1540:	10 92 ad 3a 	sts	0x3AAD, r1	; 0x803aad <detHdPh>
    }
    return buttonMark;
    1544:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <buttonMark>
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <setupSimon>:
    simonPos = 1;
    simonGameState = simonGameStateNext;
    simonGameStateNext = BASTET_GAME_SHOW_PATTERN;
}

void simonTone(uint8_t val) {
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	20 91 ab 3a 	lds	r18, 0x3AAB	; 0x803aab <adcPhot>
    155a:	30 91 ac 3a 	lds	r19, 0x3AAC	; 0x803aac <adcPhot+0x1>
    155e:	80 91 e3 3a 	lds	r24, 0x3AE3	; 0x803ae3 <adcTemp>
    1562:	90 91 e4 3a 	lds	r25, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1566:	82 0f       	add	r24, r18
    1568:	8f 73       	andi	r24, 0x3F	; 63
    156a:	80 93 27 38 	sts	0x3827, r24	; 0x803827 <simonPos>
    156e:	c0 e0       	ldi	r28, 0x00	; 0
    1570:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <simonPos>
    1574:	c8 17       	cp	r28, r24
    1576:	18 f4       	brcc	.+6      	; 0x157e <setupSimon+0x2c>
    1578:	04 dd       	rcall	.-1528   	; 0xf82 <lfsr>
    157a:	cf 5f       	subi	r28, 0xFF	; 255
    157c:	f9 cf       	rjmp	.-14     	; 0x1570 <setupSimon+0x1e>
    157e:	ce e4       	ldi	r28, 0x4E	; 78
    1580:	d8 e3       	ldi	r29, 0x38	; 56
    1582:	ff dc       	rcall	.-1538   	; 0xf82 <lfsr>
    1584:	83 70       	andi	r24, 0x03	; 3
    1586:	89 93       	st	Y+, r24
    1588:	88 e3       	ldi	r24, 0x38	; 56
    158a:	ce 35       	cpi	r28, 0x5E	; 94
    158c:	d8 07       	cpc	r29, r24
    158e:	c9 f7       	brne	.-14     	; 0x1582 <setupSimon+0x30>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 27 38 	sts	0x3827, r24	; 0x803827 <simonPos>
    1596:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <simonGameStateNext>
    159a:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <simonGameState>
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <simonGameStateNext>
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <simonLed>:
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	e0 e6       	ldi	r30, 0x60	; 96
    15b0:	f7 eb       	ldi	r31, 0xB7	; 183
    15b2:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    15b4:	a5 81       	ldd	r26, Z+5	; 0x05
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	a8 54       	subi	r26, 0x48	; 72
    15ba:	b5 4c       	sbci	r27, 0xC5	; 197
    15bc:	1c 92       	st	X, r1
    15be:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    15c0:	a8 81       	ld	r26, Y
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	a8 54       	subi	r26, 0x48	; 72
    15c6:	b5 4c       	sbci	r27, 0xC5	; 197
    15c8:	1c 92       	st	X, r1
void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    15ca:	97 eb       	ldi	r25, 0xB7	; 183
    15cc:	e5 36       	cpi	r30, 0x65	; 101
    15ce:	f9 07       	cpc	r31, r25
    15d0:	81 f7       	brne	.-32     	; 0x15b2 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 1) {
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	99 f4       	brne	.+38     	; 0x15fc <simonLed+0x52>
        iLED[WING[L][0]] = dimValue;
    15d6:	e0 91 65 b7 	lds	r30, 0xB765	; 0x80b765 <__bss_end+0x7c5d>
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    15e0:	e8 54       	subi	r30, 0x48	; 72
    15e2:	f5 4c       	sbci	r31, 0xC5	; 197
    15e4:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    15e6:	e0 91 66 b7 	lds	r30, 0xB766	; 0x80b766 <__bss_end+0x7c5e>
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    15f0:	e8 54       	subi	r30, 0x48	; 72
    15f2:	f5 4c       	sbci	r31, 0xC5	; 197
    15f4:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    15f6:	e0 91 67 b7 	lds	r30, 0xB767	; 0x80b767 <__bss_end+0x7c5f>
    15fa:	2e c0       	rjmp	.+92     	; 0x1658 <simonLed+0xae>
    } else if (val == 2) {
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	59 f4       	brne	.+22     	; 0x1616 <simonLed+0x6c>
        iLED[WING[L][3]] = dimValue;
    1600:	e0 91 68 b7 	lds	r30, 0xB768	; 0x80b768 <__bss_end+0x7c60>
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    160a:	e8 54       	subi	r30, 0x48	; 72
    160c:	f5 4c       	sbci	r31, 0xC5	; 197
    160e:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1610:	e0 91 69 b7 	lds	r30, 0xB769	; 0x80b769 <__bss_end+0x7c61>
    1614:	21 c0       	rjmp	.+66     	; 0x1658 <simonLed+0xae>
    } else if (val == 3) {
    1616:	83 30       	cpi	r24, 0x03	; 3
    1618:	99 f4       	brne	.+38     	; 0x1640 <simonLed+0x96>
        iLED[WING[R][0]] = dimValue;
    161a:	e0 91 60 b7 	lds	r30, 0xB760	; 0x80b760 <__bss_end+0x7c58>
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    1624:	e8 54       	subi	r30, 0x48	; 72
    1626:	f5 4c       	sbci	r31, 0xC5	; 197
    1628:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    162a:	e0 91 61 b7 	lds	r30, 0xB761	; 0x80b761 <__bss_end+0x7c59>
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    1634:	e8 54       	subi	r30, 0x48	; 72
    1636:	f5 4c       	sbci	r31, 0xC5	; 197
    1638:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    163a:	e0 91 62 b7 	lds	r30, 0xB762	; 0x80b762 <__bss_end+0x7c5a>
    163e:	0c c0       	rjmp	.+24     	; 0x1658 <simonLed+0xae>
    } else if (val == 4) {
    1640:	84 30       	cpi	r24, 0x04	; 4
    1642:	81 f4       	brne	.+32     	; 0x1664 <simonLed+0xba>
        iLED[WING[R][3]] = dimValue;
    1644:	e0 91 63 b7 	lds	r30, 0xB763	; 0x80b763 <__bss_end+0x7c5b>
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    164e:	e8 54       	subi	r30, 0x48	; 72
    1650:	f5 4c       	sbci	r31, 0xC5	; 197
    1652:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1654:	e0 91 64 b7 	lds	r30, 0xB764	; 0x80b764 <__bss_end+0x7c5c>
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    165e:	e8 54       	subi	r30, 0x48	; 72
    1660:	f5 4c       	sbci	r31, 0xC5	; 197
    1662:	80 83       	st	Z, r24
    }
    simonTone(val);
}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <BastetDictates>:

// Main game loop
uint8_t BastetDictates() {
    166a:	cf 93       	push	r28
    if (CheckState(BASTET_COMPLETED))
    166c:	8a e7       	ldi	r24, 0x7A	; 122
    166e:	b7 dd       	rcall	.-1170   	; 0x11de <CheckState>
    1670:	81 11       	cpse	r24, r1
    1672:	90 c0       	rjmp	.+288    	; 0x1794 <BastetDictates+0x12a>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1674:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <gameNow>
    1678:	8d 7f       	andi	r24, 0xFD	; 253
    167a:	09 f0       	breq	.+2      	; 0x167e <BastetDictates+0x14>
    167c:	8b c0       	rjmp	.+278    	; 0x1794 <BastetDictates+0x12a>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    167e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <simonGameState>
    1682:	81 11       	cpse	r24, r1
        setupSimon();
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <BastetDictates+0x1e>
    1686:	65 df       	rcall	.-310    	; 0x1552 <setupSimon>
    }

    if (BASTET_GAME_START == simonGameState) {
    1688:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <simonGameState>
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	41 f4       	brne	.+16     	; 0x16a0 <BastetDictates+0x36>
        // TODO start animu
        simonGameState = BASTET_GAME_INPUT;
    1690:	85 e0       	ldi	r24, 0x05	; 5
    1692:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <simonGameState>
        simonGameStateNext = BASTET_GAME_SHOW_PATTERN;
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <simonGameStateNext>
        simonTimer = 0;
    169c:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <simonTimer>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    16a0:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <simonGameState>
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	f1 f4       	brne	.+60     	; 0x16e4 <BastetDictates+0x7a>
        // assuming 15Hz
        uint8_t pos = simonTimer / (15 - (simonPos>>1));
    16a8:	20 91 27 38 	lds	r18, 0x3827	; 0x803827 <simonPos>
    16ac:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <simonTimer>
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	32 2f       	mov	r19, r18
    16b4:	36 95       	lsr	r19
    16b6:	6f e0       	ldi	r22, 0x0F	; 15
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	63 1b       	sub	r22, r19
    16bc:	71 09       	sbc	r23, r1
    16be:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__divmodhi4>
        if (pos > simonPos) {
    16c2:	26 17       	cp	r18, r22
    16c4:	40 f4       	brcc	.+16     	; 0x16d6 <BastetDictates+0x6c>
            simonGameState = BASTET_GAME_INPUT;
    16c6:	85 e0       	ldi	r24, 0x05	; 5
    16c8:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <simonGameState>
            simonGameStateNext = BASTET_GAME_INPUT;
    16cc:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <simonGameStateNext>
            simonLed(0);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	6b df       	rcall	.-298    	; 0x15aa <simonLed>
            return 0;
    16d4:	5f c0       	rjmp	.+190    	; 0x1794 <BastetDictates+0x12a>
        }
        simonLed(simonState[pos]+1);
    16d6:	77 27       	eor	r23, r23
    16d8:	fb 01       	movw	r30, r22
    16da:	e2 5b       	subi	r30, 0xB2	; 178
    16dc:	f7 4c       	sbci	r31, 0xC7	; 199
    16de:	80 81       	ld	r24, Z
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	63 df       	rcall	.-314    	; 0x15aa <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    16e4:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <simonGameState>
    16e8:	85 30       	cpi	r24, 0x05	; 5
    16ea:	09 f0       	breq	.+2      	; 0x16ee <BastetDictates+0x84>
    16ec:	4e c0       	rjmp	.+156    	; 0x178a <BastetDictates+0x120>
        uint8_t choice = 0;
        if ((buttonState & 0xf0)&&(buttonState < 0xff)) {
    16ee:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <buttonState>
    16f2:	8e 2f       	mov	r24, r30
    16f4:	80 7f       	andi	r24, 0xF0	; 240
    16f6:	c9 f1       	breq	.+114    	; 0x176a <BastetDictates+0x100>
    16f8:	ef 3f       	cpi	r30, 0xFF	; 255
    16fa:	b9 f1       	breq	.+110    	; 0x176a <BastetDictates+0x100>
    16fc:	ef 70       	andi	r30, 0x0F	; 15
    16fe:	e1 50       	subi	r30, 0x01	; 1
    1700:	e8 30       	cpi	r30, 0x08	; 8
    1702:	98 f5       	brcc	.+102    	; 0x176a <BastetDictates+0x100>
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	e4 57       	subi	r30, 0x74	; 116
    1708:	f8 44       	sbci	r31, 0x48	; 72
    170a:	c0 81       	ld	r28, Z
                    break;
            }
        }

        //Button pressed
        if (choice > 0) {
    170c:	cc 23       	and	r28, r28
    170e:	69 f1       	breq	.+90     	; 0x176a <BastetDictates+0x100>
            gameNow = BASTET;
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <gameNow>
            if (simonProcessed == 0) {
    1716:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <simonProcessed>
    171a:	81 11       	cpse	r24, r1
                simonTimer = 0;
    171c:	36 c0       	rjmp	.+108    	; 0x178a <BastetDictates+0x120>
    171e:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <simonTimer>
                simonLed(choice);
    1722:	8c 2f       	mov	r24, r28
    1724:	42 df       	rcall	.-380    	; 0x15aa <simonLed>
                // TODO something timer something 
                if (simonState[simonInputPos]+1 == choice) {
    1726:	40 91 4d 38 	lds	r20, 0x384D	; 0x80384d <simonInputPos>
    172a:	e4 2f       	mov	r30, r20
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	e2 5b       	subi	r30, 0xB2	; 178
    1730:	f7 4c       	sbci	r31, 0xC7	; 199
    1732:	20 81       	ld	r18, Z
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	2f 5f       	subi	r18, 0xFF	; 255
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	8c 2f       	mov	r24, r28
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	28 17       	cp	r18, r24
    1740:	39 07       	cpc	r19, r25
    1742:	21 f4       	brne	.+8      	; 0x174c <BastetDictates+0xe2>
                    // TODO correct sound
                    simonInputPos++;
    1744:	4f 5f       	subi	r20, 0xFF	; 255
    1746:	40 93 4d 38 	sts	0x384D, r20	; 0x80384d <simonInputPos>
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <BastetDictates+0xee>
                } else {
                    // TODO fail sound
                    simonInputPos = 0;
    174c:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <simonInputPos>
                    gameNow = TEXT;
    1750:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <gameNow>
                    simonLed(0);
    1754:	80 e0       	ldi	r24, 0x00	; 0
                }

                if (simonInputPos == BASTET_LENGTH) {
    1756:	29 df       	rcall	.-430    	; 0x15aa <simonLed>
    1758:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <simonInputPos>
    175c:	80 31       	cpi	r24, 0x10	; 16
                    // TODO win animu
                    UpdateState(BASTET_COMPLETED);
    175e:	a9 f4       	brne	.+42     	; 0x178a <BastetDictates+0x120>
    1760:	8a e7       	ldi	r24, 0x7A	; 122
    1762:	33 dd       	rcall	.-1434   	; 0x11ca <UpdateState>
                    gameNow = TEXT;
    1764:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <gameNow>
    1768:	10 c0       	rjmp	.+32     	; 0x178a <BastetDictates+0x120>
                }
            }
        
        //Button released, next or reset!
        } else {    
            if (simonInputPos == simonPos) {
    176a:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <simonInputPos>
    176e:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <simonPos>
    1772:	89 13       	cpse	r24, r25
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <BastetDictates+0x11c>
                simonPos++;
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	80 93 27 38 	sts	0x3827, r24	; 0x803827 <simonPos>
                simonInputPos = 0;
    177c:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <simonInputPos>
                simonGameState = BASTET_GAME_SHOW_PATTERN;
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <simonGameState>
            }                    
            simonProcessed = 0;
    1786:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <simonProcessed>
        }
    }
    ++simonTimer;
    178a:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <simonTimer>
    178e:	8f 5f       	subi	r24, 0xFF	; 255
    1790:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <simonTimer>
    return 0;
}
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	62 97       	sbiw	r28, 0x12	; 18
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	8a 8b       	std	Y+18, r24	; 0x12
    17ac:	80 e1       	ldi	r24, 0x10	; 16
    17ae:	e4 e3       	ldi	r30, 0x34	; 52
    17b0:	f7 eb       	ldi	r31, 0xB7	; 183
    17b2:	de 01       	movw	r26, r28
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	01 90       	ld	r0, Z+
    17b8:	0d 92       	st	X+, r0
    17ba:	8a 95       	dec	r24
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <Cheat+0x1c>
    17be:	fe 01       	movw	r30, r28
    17c0:	31 96       	adiw	r30, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	21 91       	ld	r18, Z+
    17c8:	31 91       	ld	r19, Z+
    17ca:	26 17       	cp	r18, r22
    17cc:	37 07       	cpc	r19, r23
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <Cheat+0x38>
    17d0:	89 2f       	mov	r24, r25
    17d2:	9f 5f       	subi	r25, 0xFF	; 255
    17d4:	98 30       	cpi	r25, 0x08	; 8
    17d6:	b9 f7       	brne	.-18     	; 0x17c6 <Cheat+0x2c>
    17d8:	88 30       	cpi	r24, 0x08	; 8
    17da:	10 f0       	brcs	.+4      	; 0x17e0 <Cheat+0x46>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	12 c0       	rjmp	.+36     	; 0x1804 <Cheat+0x6a>
    17e0:	18 e1       	ldi	r17, 0x18	; 24
    17e2:	18 0f       	add	r17, r24
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	be 01       	movw	r22, r28
    17e8:	6f 5e       	subi	r22, 0xEF	; 239
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	81 2f       	mov	r24, r17
    17ee:	f5 da       	rcall	.-2582   	; 0xdda <EERead>
    17f0:	89 89       	ldd	r24, Y+17	; 0x11
    17f2:	8f 3f       	cpi	r24, 0xFF	; 255
    17f4:	99 f7       	brne	.-26     	; 0x17dc <Cheat+0x42>
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	be 01       	movw	r22, r28
    17fa:	6e 5e       	subi	r22, 0xEE	; 238
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	81 2f       	mov	r24, r17
    1800:	fc da       	rcall	.-2568   	; 0xdfa <EEWrite>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	62 96       	adiw	r28, 0x12	; 18
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	08 95       	ret

00001812 <DecryptData>:
    1812:	f9 01       	movw	r30, r18
    1814:	9c 01       	movw	r18, r24
    1816:	2e 1b       	sub	r18, r30
    1818:	3f 0b       	sbc	r19, r31
    181a:	88 e0       	ldi	r24, 0x08	; 8
    181c:	48 9f       	mul	r20, r24
    181e:	a0 01       	movw	r20, r0
    1820:	11 24       	eor	r1, r1
    1822:	4a 5f       	subi	r20, 0xFA	; 250
    1824:	57 44       	sbci	r21, 0x47	; 71
    1826:	66 23       	and	r22, r22
    1828:	69 f0       	breq	.+26     	; 0x1844 <DecryptData+0x32>
    182a:	df 01       	movw	r26, r30
    182c:	a2 0f       	add	r26, r18
    182e:	b3 1f       	adc	r27, r19
    1830:	a7 70       	andi	r26, 0x07	; 7
    1832:	bb 27       	eor	r27, r27
    1834:	a4 0f       	add	r26, r20
    1836:	b5 1f       	adc	r27, r21
    1838:	80 81       	ld	r24, Z
    183a:	9c 91       	ld	r25, X
    183c:	98 27       	eor	r25, r24
    183e:	91 93       	st	Z+, r25
    1840:	61 50       	subi	r22, 0x01	; 1
    1842:	f1 cf       	rjmp	.-30     	; 0x1826 <DecryptData+0x14>
    1844:	08 95       	ret

00001846 <UnflipData>:
    1846:	26 2f       	mov	r18, r22
    1848:	fb 01       	movw	r30, r22
    184a:	35 e5       	ldi	r19, 0x55	; 85
    184c:	9e 2f       	mov	r25, r30
    184e:	92 1b       	sub	r25, r18
    1850:	98 17       	cp	r25, r24
    1852:	28 f4       	brcc	.+10     	; 0x185e <UnflipData+0x18>
    1854:	90 81       	ld	r25, Z
    1856:	92 95       	swap	r25
    1858:	93 27       	eor	r25, r19
    185a:	91 93       	st	Z+, r25
    185c:	f7 cf       	rjmp	.-18     	; 0x184c <UnflipData+0x6>
    185e:	08 95       	ret

00001860 <ExtEERead>:
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	00 d0       	rcall	.+0      	; 0x1876 <ExtEERead+0x16>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	d6 2e       	mov	r13, r22
    187c:	c4 2e       	mov	r12, r20
    187e:	59 01       	movw	r10, r18
    1880:	7c 01       	movw	r14, r24
    1882:	e8 94       	clt
    1884:	f7 f8       	bld	r15, 7
    1886:	f9 82       	std	Y+1, r15	; 0x01
    1888:	ea 82       	std	Y+2, r14	; 0x02
    188a:	06 2f       	mov	r16, r22
    188c:	42 e0       	ldi	r20, 0x02	; 2
    188e:	be 01       	movw	r22, r28
    1890:	6f 5f       	subi	r22, 0xFF	; 255
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	80 e5       	ldi	r24, 0x50	; 80
    1896:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_read_bytes>
    189a:	18 2f       	mov	r17, r24
    189c:	81 11       	cpse	r24, r1
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <ExtEERead+0x4a>
    18a0:	95 01       	movw	r18, r10
    18a2:	4c 2d       	mov	r20, r12
    18a4:	6d 2d       	mov	r22, r13
    18a6:	c7 01       	movw	r24, r14
    18a8:	b4 df       	rcall	.-152    	; 0x1812 <DecryptData>
    18aa:	81 2f       	mov	r24, r17
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	08 95       	ret

000018c6 <ClearTxAfter>:
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	88 30       	cpi	r24, 0x08	; 8
    18ca:	30 f4       	brcc	.+12     	; 0x18d8 <ClearTxAfter+0x12>
    18cc:	e8 2f       	mov	r30, r24
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	ea 5c       	subi	r30, 0xCA	; 202
    18d2:	f5 4c       	sbci	r31, 0xC5	; 197
    18d4:	10 82       	st	Z, r1
    18d6:	f7 cf       	rjmp	.-18     	; 0x18c6 <ClearTxAfter>
    18d8:	08 95       	ret

000018da <StartsWith>:
    18da:	ac 01       	movw	r20, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	e9 2f       	mov	r30, r25
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	da 01       	movw	r26, r20
    18e4:	ae 0f       	add	r26, r30
    18e6:	bf 1f       	adc	r27, r31
    18e8:	3c 91       	ld	r19, X
    18ea:	e6 0f       	add	r30, r22
    18ec:	f7 1f       	adc	r31, r23
    18ee:	31 11       	cpse	r19, r1
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <StartsWith+0x22>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 81       	ld	r25, Z
    18f6:	99 23       	and	r25, r25
    18f8:	49 f0       	breq	.+18     	; 0x190c <StartsWith+0x32>
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <StartsWith+0x30>
    18fc:	20 81       	ld	r18, Z
    18fe:	22 23       	and	r18, r18
    1900:	c1 f3       	breq	.-16     	; 0x18f2 <StartsWith+0x18>
    1902:	32 13       	cpse	r19, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <StartsWith+0x30>
    1906:	9f 5f       	subi	r25, 0xFF	; 255
    1908:	ea cf       	rjmp	.-44     	; 0x18de <StartsWith+0x4>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	08 95       	ret

0000190e <PrepareSending>:
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	51 f1       	breq	.+84     	; 0x1968 <PrepareSending+0x5a>
    1914:	ee e3       	ldi	r30, 0x3E	; 62
    1916:	fa e3       	ldi	r31, 0x3A	; 58
    1918:	a6 e3       	ldi	r26, 0x36	; 54
    191a:	ba e3       	ldi	r27, 0x3A	; 58
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	6f 3f       	cpi	r22, 0xFF	; 255
    1922:	71 05       	cpc	r23, r1
    1924:	69 f0       	breq	.+26     	; 0x1940 <PrepareSending+0x32>
    1926:	60 f0       	brcs	.+24     	; 0x1940 <PrepareSending+0x32>
    1928:	81 93       	st	Z+, r24
    192a:	91 93       	st	Z+, r25
    192c:	3d 93       	st	X+, r19
    192e:	81 50       	subi	r24, 0x01	; 1
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	6f 5f       	subi	r22, 0xFF	; 255
    1934:	71 09       	sbc	r23, r1
    1936:	2f 5f       	subi	r18, 0xFF	; 255
    1938:	27 30       	cpi	r18, 0x07	; 7
    193a:	91 f7       	brne	.-28     	; 0x1920 <PrepareSending+0x12>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	08 95       	ret
    1940:	e2 2f       	mov	r30, r18
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	df 01       	movw	r26, r30
    1946:	aa 0f       	add	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	a2 5c       	subi	r26, 0xC2	; 194
    194c:	b5 4c       	sbci	r27, 0xC5	; 197
    194e:	8d 93       	st	X+, r24
    1950:	9c 93       	st	X, r25
    1952:	ea 5c       	subi	r30, 0xCA	; 202
    1954:	f5 4c       	sbci	r31, 0xC5	; 197
    1956:	cb 01       	movw	r24, r22
    1958:	6f ef       	ldi	r22, 0xFF	; 255
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 4f 1b 	call	0x369e	; 0x369e <__udivmodhi4>
    1960:	80 83       	st	Z, r24
    1962:	40 93 34 3a 	sts	0x3A34, r20	; 0x803a34 <txTypeNow>
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <PrepareSending+0x64>
    1968:	10 92 3e 3a 	sts	0x3A3E, r1	; 0x803a3e <txAddrList>
    196c:	10 92 3f 3a 	sts	0x3A3F, r1	; 0x803a3f <txAddrList+0x1>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	82 2f       	mov	r24, r18
    1974:	a8 df       	rcall	.-176    	; 0x18c6 <ClearTxAfter>
    1976:	10 92 35 3a 	sts	0x3A35, r1	; 0x803a35 <txAddrNow>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	08 95       	ret

0000197e <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	f9 01       	movw	r30, r18
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	e7 5f       	subi	r30, 0xF7	; 247
    198e:	f6 4c       	sbci	r31, 0xC6	; 198
    1990:	ab e5       	ldi	r26, 0x5B	; 91
    1992:	ba e7       	ldi	r27, 0x7A	; 122
    1994:	a0 83       	st	Z, r26
    1996:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1998:	f9 01       	movw	r30, r18
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	e7 5b       	subi	r30, 0xB7	; 183
    19a0:	f6 4c       	sbci	r31, 0xC6	; 198
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	60 83       	st	Z, r22
    19a8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    19aa:	22 0f       	add	r18, r18
    19ac:	33 1f       	adc	r19, r19
    19ae:	f9 01       	movw	r30, r18
    19b0:	e7 57       	subi	r30, 0x77	; 119
    19b2:	f6 4c       	sbci	r31, 0xC6	; 198
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	40 83       	st	Z, r20
    19ba:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    19bc:	21 e0       	ldi	r18, 0x01	; 1
    19be:	28 0f       	add	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	f9 01       	movw	r30, r18
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	e7 5f       	subi	r30, 0xF7	; 247
    19ca:	f6 4c       	sbci	r31, 0xC6	; 198
    19cc:	c4 e6       	ldi	r28, 0x64	; 100
    19ce:	da e7       	ldi	r29, 0x7A	; 122
    19d0:	c0 83       	st	Z, r28
    19d2:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    19d4:	f9 01       	movw	r30, r18
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	e7 5b       	subi	r30, 0xB7	; 183
    19dc:	f6 4c       	sbci	r31, 0xC6	; 198
    19de:	ca e0       	ldi	r28, 0x0A	; 10
    19e0:	d0 e0       	ldi	r29, 0x00	; 0
    19e2:	c0 83       	st	Z, r28
    19e4:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	f9 01       	movw	r30, r18
    19ec:	e7 57       	subi	r30, 0x77	; 119
    19ee:	f6 4c       	sbci	r31, 0xC6	; 198
    19f0:	40 83       	st	Z, r20
    19f2:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    19f4:	e2 e0       	ldi	r30, 0x02	; 2
    19f6:	e8 0f       	add	r30, r24
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	e7 5f       	subi	r30, 0xF7	; 247
    1a00:	f6 4c       	sbci	r31, 0xC6	; 198
    1a02:	20 ef       	ldi	r18, 0xF0	; 240
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	20 83       	st	Z, r18
    1a08:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a0a:	23 e0       	ldi	r18, 0x03	; 3
    1a0c:	28 0f       	add	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	f9 01       	movw	r30, r18
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	e7 5f       	subi	r30, 0xF7	; 247
    1a18:	f6 4c       	sbci	r31, 0xC6	; 198
    1a1a:	a0 83       	st	Z, r26
    1a1c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1a1e:	f9 01       	movw	r30, r18
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	e7 5b       	subi	r30, 0xB7	; 183
    1a26:	f6 4c       	sbci	r31, 0xC6	; 198
    1a28:	60 83       	st	Z, r22
    1a2a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	f9 01       	movw	r30, r18
    1a32:	e7 57       	subi	r30, 0x77	; 119
    1a34:	f6 4c       	sbci	r31, 0xC6	; 198
    1a36:	40 83       	st	Z, r20
    1a38:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a3a:	24 e0       	ldi	r18, 0x04	; 4
    1a3c:	28 0f       	add	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	f9 01       	movw	r30, r18
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	e7 5f       	subi	r30, 0xF7	; 247
    1a48:	f6 4c       	sbci	r31, 0xC6	; 198
    1a4a:	a7 e5       	ldi	r26, 0x57	; 87
    1a4c:	ba e7       	ldi	r27, 0x7A	; 122
    1a4e:	a0 83       	st	Z, r26
    1a50:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1a52:	f9 01       	movw	r30, r18
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	e7 5b       	subi	r30, 0xB7	; 183
    1a5a:	f6 4c       	sbci	r31, 0xC6	; 198
    1a5c:	60 83       	st	Z, r22
    1a5e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1a60:	22 0f       	add	r18, r18
    1a62:	33 1f       	adc	r19, r19
    1a64:	f9 01       	movw	r30, r18
    1a66:	e7 57       	subi	r30, 0x77	; 119
    1a68:	f6 4c       	sbci	r31, 0xC6	; 198
    1a6a:	40 83       	st	Z, r20
    1a6c:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    1a6e:	8b 5f       	subi	r24, 0xFB	; 251
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1a76:	af 92       	push	r10
    1a78:	bf 92       	push	r11
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	2c 97       	sbiw	r28, 0x0c	; 12
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	7c 01       	movw	r14, r24
    1a94:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    1a96:	9e 01       	movw	r18, r28
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	6c e0       	ldi	r22, 0x0C	; 12
    1aa0:	80 96       	adiw	r24, 0x20	; 32
    1aa2:	de de       	rcall	.-580    	; 0x1860 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa8:	98 27       	eor	r25, r24
    1aaa:	89 27       	eor	r24, r25
    1aac:	98 27       	eor	r25, r24
    1aae:	80 96       	adiw	r24, 0x20	; 32
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 83       	st	Z, r24
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	98 27       	eor	r25, r24
    1abc:	89 27       	eor	r24, r25
    1abe:	98 27       	eor	r25, r24
    1ac0:	80 96       	adiw	r24, 0x20	; 32
    1ac2:	82 83       	std	Z+2, r24	; 0x02
    1ac4:	93 83       	std	Z+3, r25	; 0x03
    1ac6:	de 01       	movw	r26, r28
    1ac8:	15 96       	adiw	r26, 0x05	; 5
    1aca:	34 96       	adiw	r30, 0x04	; 4
    1acc:	c8 01       	movw	r24, r16
    1ace:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1ad0:	2d 91       	ld	r18, X+
    1ad2:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    1ad4:	e8 17       	cp	r30, r24
    1ad6:	f9 07       	cpc	r31, r25
    1ad8:	d9 f7       	brne	.-10     	; 0x1ad0 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1ada:	fc e2       	ldi	r31, 0x2C	; 44
    1adc:	ef 0e       	add	r14, r31
    1ade:	f1 1c       	adc	r15, r1
    1ae0:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1ae2:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    1ae4:	9e 01       	movw	r18, r28
    1ae6:	2f 5f       	subi	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	63 e0       	ldi	r22, 0x03	; 3
    1aee:	c7 01       	movw	r24, r14
    1af0:	b7 de       	rcall	.-658    	; 0x1860 <ExtEERead>
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	98 27       	eor	r25, r24
    1af8:	89 27       	eor	r24, r25
    1afa:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1afc:	97 01       	movw	r18, r14
    1afe:	2e 5f       	subi	r18, 0xFE	; 254
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1b02:	43 e0       	ldi	r20, 0x03	; 3
    1b04:	4d 15       	cp	r20, r13
    1b06:	80 f4       	brcc	.+32     	; 0x1b28 <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1b08:	ac 01       	movw	r20, r24
    1b0a:	41 50       	subi	r20, 0x01	; 1
    1b0c:	51 09       	sbc	r21, r1
    1b0e:	f8 01       	movw	r30, r16
    1b10:	42 8f       	std	Z+26, r20	; 0x1a
    1b12:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1b14:	f3 e0       	ldi	r31, 0x03	; 3
    1b16:	ef 0e       	add	r14, r31
    1b18:	f1 1c       	adc	r15, r1
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	e4 86       	std	Z+12, r14	; 0x0c
    1b1e:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1b20:	4b 81       	ldd	r20, Y+3	; 0x03
    1b22:	f5 01       	movw	r30, r10
    1b24:	44 a3       	std	Z+36, r20	; 0x24
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1b28:	f8 01       	movw	r30, r16
    1b2a:	82 8f       	std	Z+26, r24	; 0x1a
    1b2c:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1b2e:	24 87       	std	Z+12, r18	; 0x0c
    1b30:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1b32:	7c 01       	movw	r14, r24
    1b34:	e2 0e       	add	r14, r18
    1b36:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1b38:	d3 94       	inc	r13
    1b3a:	0e 5f       	subi	r16, 0xFE	; 254
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	ff ef       	ldi	r31, 0xFF	; 255
    1b40:	af 1a       	sub	r10, r31
    1b42:	bf 0a       	sbc	r11, r31
    1b44:	47 e0       	ldi	r20, 0x07	; 7
    1b46:	d4 12       	cpse	r13, r20
    1b48:	cd cf       	rjmp	.-102    	; 0x1ae4 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1b4a:	2c 96       	adiw	r28, 0x0c	; 12
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	bf 90       	pop	r11
    1b60:	af 90       	pop	r10
    1b62:	08 95       	ret

00001b64 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	a0 97       	sbiw	r28, 0x20	; 32
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1b80:	7c 01       	movw	r14, r24
    1b82:	20 e2       	ldi	r18, 0x20	; 32
    1b84:	e2 0e       	add	r14, r18
    1b86:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1b88:	9e 01       	movw	r18, r28
    1b8a:	2f 5f       	subi	r18, 0xFF	; 255
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	62 e0       	ldi	r22, 0x02	; 2
    1b92:	8c 96       	adiw	r24, 0x2c	; 44
    1b94:	65 de       	rcall	.-822    	; 0x1860 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    1b96:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    1b98:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1b9a:	11 23       	and	r17, r17
    1b9c:	51 f1       	breq	.+84     	; 0x1bf2 <CheckLetter+0x8e>
    1b9e:	01 2f       	mov	r16, r17
    1ba0:	11 32       	cpi	r17, 0x21	; 33
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <CheckLetter+0x42>
    1ba4:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    1ba6:	9e 01       	movw	r18, r28
    1ba8:	2f 5f       	subi	r18, 0xFF	; 255
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	60 2f       	mov	r22, r16
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	0e 96       	adiw	r24, 0x0e	; 14
    1bb4:	55 de       	rcall	.-854    	; 0x1860 <ExtEERead>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1bba:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1bbc:	dd 20       	and	r13, r13
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1bc0:	e1 e0       	ldi	r30, 0x01	; 1
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	ec 0f       	add	r30, r28
    1bc6:	fd 1f       	adc	r31, r29
    1bc8:	e8 0f       	add	r30, r24
    1bca:	f1 1d       	adc	r31, r1
    1bcc:	90 81       	ld	r25, Z
    1bce:	90 62       	ori	r25, 0x20	; 32
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	9c 11       	cpse	r25, r12
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <CheckLetter+0x8e>
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    1bd8:	91 91       	ld	r25, Z+
    1bda:	dd 24       	eor	r13, r13
    1bdc:	d3 94       	inc	r13
    1bde:	9b 35       	cpi	r25, 0x5B	; 91
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <CheckLetter+0x80>
    1be2:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	80 17       	cp	r24, r16
    1be8:	48 f3       	brcs	.-46     	; 0x1bbc <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1bea:	e0 0e       	add	r14, r16
    1bec:	f1 1c       	adc	r15, r1
        x -= max;
    1bee:	10 1b       	sub	r17, r16
    1bf0:	d4 cf       	rjmp	.-88     	; 0x1b9a <CheckLetter+0x36>
    }
    return 0;
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
}
    1bf4:	a0 96       	adiw	r28, 0x20	; 32
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	08 95       	ret

00001c0c <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	df 92       	push	r13
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <FindChild+0x14>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <FindChild+0x16>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	d6 2e       	mov	r13, r22
    1c28:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1c2a:	9e 01       	movw	r18, r28
    1c2c:	2f 5f       	subi	r18, 0xFF	; 255
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	64 e0       	ldi	r22, 0x04	; 4
    1c34:	80 96       	adiw	r24, 0x20	; 32
    1c36:	14 de       	rcall	.-984    	; 0x1860 <ExtEERead>
    1c38:	e9 80       	ldd	r14, Y+1	; 0x01
    1c3a:	fa 80       	ldd	r15, Y+2	; 0x02
    1c3c:	fe 24       	eor	r15, r14
    1c3e:	ef 24       	eor	r14, r15
    1c40:	fe 24       	eor	r15, r14
    1c42:	0b 81       	ldd	r16, Y+3	; 0x03
    1c44:	1c 81       	ldd	r17, Y+4	; 0x04
    1c46:	10 27       	eor	r17, r16
    1c48:	01 27       	eor	r16, r17
    1c4a:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    1c4c:	0e 15       	cp	r16, r14
    1c4e:	1f 05       	cpc	r17, r15
    1c50:	30 f5       	brcc	.+76     	; 0x1c9e <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    1c52:	a0 16       	cp	r10, r16
    1c54:	b1 06       	cpc	r11, r17
    1c56:	58 f0       	brcs	.+22     	; 0x1c6e <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1c58:	9e 01       	movw	r18, r28
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	62 e0       	ldi	r22, 0x02	; 2
    1c62:	c8 01       	movw	r24, r16
    1c64:	80 96       	adiw	r24, 0x20	; 32
    1c66:	fc dd       	rcall	.-1032   	; 0x1860 <ExtEERead>
    1c68:	09 81       	ldd	r16, Y+1	; 0x01
    1c6a:	1a 81       	ldd	r17, Y+2	; 0x02
    1c6c:	ec cf       	rjmp	.-40     	; 0x1c46 <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    1c6e:	9e 01       	movw	r18, r28
    1c70:	2f 5f       	subi	r18, 0xFF	; 255
    1c72:	3f 4f       	sbci	r19, 0xFF	; 255
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	c8 01       	movw	r24, r16
    1c7a:	85 96       	adiw	r24, 0x25	; 37
    1c7c:	f1 dd       	rcall	.-1054   	; 0x1860 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	81 11       	cpse	r24, r1
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1c84:	d1 10       	cpse	r13, r1
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <FindChild+0x98>
    1c8a:	a9 da       	rcall	.-2734   	; 0x11de <CheckState>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	fa cf       	rjmp	.-12     	; 0x1c84 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1c90:	e3 cf       	rjmp	.-58     	; 0x1c58 <FindChild+0x4c>
    1c92:	6d 2d       	mov	r22, r13
    1c94:	c8 01       	movw	r24, r16
    1c96:	66 df       	rcall	.-308    	; 0x1b64 <CheckLetter>
    1c98:	88 23       	and	r24, r24
    1c9a:	f1 f2       	breq	.-68     	; 0x1c58 <FindChild+0x4c>
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	01 c0       	rjmp	.+2      	; 0x1ca6 <FindChild+0x9a>
    1ca4:	c8 01       	movw	r24, r16
}
    1ca6:	24 96       	adiw	r28, 0x04	; 4
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	08 95       	ret

00001cc0 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1cc0:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1cc2:	9f e9       	ldi	r25, 0x9F	; 159
    1cc4:	98 0f       	add	r25, r24
    1cc6:	9a 31       	cpi	r25, 0x1A	; 26
    1cc8:	38 f0       	brcs	.+14     	; 0x1cd8 <InpOkChk+0x18>
    1cca:	90 ed       	ldi	r25, 0xD0	; 208
    1ccc:	98 0f       	add	r25, r24
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	9a 30       	cpi	r25, 0x0A	; 10
    1cd2:	18 f0       	brcs	.+6      	; 0x1cda <InpOkChk+0x1a>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	08 95       	ret
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1cda:	08 95       	ret

00001cdc <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1ce6:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    1ce8:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1cea:	f8 01       	movw	r30, r16
    1cec:	ed 0f       	add	r30, r29
    1cee:	f1 1d       	adc	r31, r1
    1cf0:	20 81       	ld	r18, Z
    1cf2:	8c 2f       	mov	r24, r28
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	22 23       	and	r18, r18
    1cf8:	51 f0       	breq	.+20     	; 0x1d0e <CleanInput+0x32>
        data[cnt] = data[x];
    1cfa:	d8 01       	movw	r26, r16
    1cfc:	a8 0f       	add	r26, r24
    1cfe:	b9 1f       	adc	r27, r25
    1d00:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1d02:	80 81       	ld	r24, Z
    1d04:	dd df       	rcall	.-70     	; 0x1cc0 <InpOkChk>
    1d06:	81 11       	cpse	r24, r1
    1d08:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1d0a:	df 5f       	subi	r29, 0xFF	; 255
    1d0c:	ee cf       	rjmp	.-36     	; 0x1cea <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1d0e:	f8 01       	movw	r30, r16
    1d10:	e8 0f       	add	r30, r24
    1d12:	f9 1f       	adc	r31, r25
    1d14:	10 82       	st	Z, r1
    return cnt;
}
    1d16:	8c 2f       	mov	r24, r28
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1d22:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    1d24:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    1d28:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    1d2c:	89 2b       	or	r24, r25
    1d2e:	99 f4       	brne	.+38     	; 0x1d56 <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    1d30:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    1d3a:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
        auStart = ((effect&0xE0)>0);
    1d3e:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <effect>
    1d42:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <effect+0x1>
    1d46:	80 7e       	andi	r24, 0xE0	; 224
    1d48:	99 27       	eor	r25, r25
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
    1d4c:	89 2b       	or	r24, r25
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <CheckSend+0x30>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	20 93 2e 38 	sts	0x382E, r18	; 0x80382e <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    1d56:	20 91 35 3a 	lds	r18, 0x3A35	; 0x803a35 <txAddrNow>
    1d5a:	28 30       	cpi	r18, 0x08	; 8
    1d5c:	08 f0       	brcs	.+2      	; 0x1d60 <CheckSend+0x3e>
    1d5e:	47 c0       	rjmp	.+142    	; 0x1dee <CheckSend+0xcc>
    1d60:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    1d64:	88 23       	and	r24, r24
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <CheckSend+0x48>
    1d68:	42 c0       	rjmp	.+132    	; 0x1dee <CheckSend+0xcc>
        if (txStrLen[txAddrNow] == 0){
    1d6a:	82 2f       	mov	r24, r18
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	fc 01       	movw	r30, r24
    1d70:	ea 5c       	subi	r30, 0xCA	; 202
    1d72:	f5 4c       	sbci	r31, 0xC5	; 197
    1d74:	e0 81       	ld	r30, Z
    1d76:	e1 11       	cpse	r30, r1
    1d78:	06 c0       	rjmp	.+12     	; 0x1d86 <CheckSend+0x64>
            txPart = 0;
    1d7a:	10 92 f6 38 	sts	0x38F6, r1	; 0x8038f6 <txPart.3937>
            txAddrNow = TXLISTLEN;
    1d7e:	88 e0       	ldi	r24, 0x08	; 8
    1d80:	80 93 35 3a 	sts	0x3A35, r24	; 0x803a35 <txAddrNow>
    1d84:	2c c0       	rjmp	.+88     	; 0x1dde <CheckSend+0xbc>
        } else if (txPart < txStrLen[txAddrNow]){
    1d86:	50 91 f6 38 	lds	r21, 0x38F6	; 0x8038f6 <txPart.3937>
    1d8a:	5e 17       	cp	r21, r30
    1d8c:	50 f5       	brcc	.+84     	; 0x1de2 <CheckSend+0xc0>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    1d8e:	ce 2f       	mov	r28, r30
    1d90:	c5 1b       	sub	r28, r21
    1d92:	c1 32       	cpi	r28, 0x21	; 33
    1d94:	08 f0       	brcs	.+2      	; 0x1d98 <CheckSend+0x76>
    1d96:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e2 5c       	subi	r30, 0xC2	; 194
    1da0:	f5 4c       	sbci	r31, 0xC5	; 197
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	27 ee       	ldi	r18, 0xE7	; 231
    1da8:	3a e3       	ldi	r19, 0x3A	; 58
    1daa:	40 91 34 3a 	lds	r20, 0x3A34	; 0x803a34 <txTypeNow>
    1dae:	6c 2f       	mov	r22, r28
    1db0:	85 0f       	add	r24, r21
    1db2:	91 1d       	adc	r25, r1
    1db4:	55 dd       	rcall	.-1366   	; 0x1860 <ExtEERead>
            txPart += EEreadLength;
    1db6:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <txPart.3937>
    1dba:	8c 0f       	add	r24, r28
    1dbc:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1dc0:	ec 2f       	mov	r30, r28
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	e9 51       	subi	r30, 0x19	; 25
    1dc6:	f5 4c       	sbci	r31, 0xC5	; 197
    1dc8:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    1dca:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <txBuffer>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <CheckSend+0xb6>
    1dd2:	8b ed       	ldi	r24, 0xDB	; 219
    1dd4:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <txBuffer>
            SerSend(&txBuffer[0]);
    1dd8:	87 ee       	ldi	r24, 0xE7	; 231
    1dda:	9a e3       	ldi	r25, 0x3A	; 58
    1ddc:	36 d8       	rcall	.-3988   	; 0xe4a <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	0b c0       	rjmp	.+22     	; 0x1df8 <CheckSend+0xd6>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1de2:	10 92 f6 38 	sts	0x38F6, r1	; 0x8038f6 <txPart.3937>
            ++txAddrNow;
    1de6:	2f 5f       	subi	r18, 0xFF	; 255
    1de8:	20 93 35 3a 	sts	0x3A35, r18	; 0x803a35 <txAddrNow>
    1dec:	f8 cf       	rjmp	.-16     	; 0x1dde <CheckSend+0xbc>
        }
    } else if (serTxDone) return 0; //All is sent!
    1dee:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <serTxDone>
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	91 11       	cpse	r25, r1
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1e00:	c0 91 08 39 	lds	r28, 0x3908	; 0x803908 <responseList>
    1e04:	cc 23       	and	r28, r28
    1e06:	e9 f1       	breq	.+122    	; 0x1e82 <CheckResponse+0x86>
        --responseList;
    1e08:	c1 50       	subi	r28, 0x01	; 1
    1e0a:	c0 93 08 39 	sts	0x3908, r28	; 0x803908 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1e0e:	d0 91 f5 38 	lds	r29, 0x38F5	; 0x8038f5 <number.3941>
    1e12:	2d 2f       	mov	r18, r29
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	f9 01       	movw	r30, r18
    1e18:	ee 0f       	add	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	e7 5f       	subi	r30, 0xF7	; 247
    1e1e:	f6 4c       	sbci	r31, 0xC6	; 198
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	80 3f       	cpi	r24, 0xF0	; 240
    1e26:	4f ef       	ldi	r20, 0xFF	; 255
    1e28:	94 07       	cpc	r25, r20
    1e2a:	51 f4       	brne	.+20     	; 0x1e40 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    1e2c:	60 91 23 3a 	lds	r22, 0x3A23	; 0x803a23 <currObj+0x1a>
    1e30:	70 91 24 3a 	lds	r23, 0x3A24	; 0x803a24 <currObj+0x1b>
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	80 91 15 3a 	lds	r24, 0x3A15	; 0x803a15 <currObj+0xc>
    1e3a:	90 91 16 3a 	lds	r25, 0x3A16	; 0x803a16 <currObj+0xd>
    1e3e:	0d c0       	rjmp	.+26     	; 0x1e5a <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    1e40:	d9 01       	movw	r26, r18
    1e42:	aa 0f       	add	r26, r26
    1e44:	bb 1f       	adc	r27, r27
    1e46:	a7 57       	subi	r26, 0x77	; 119
    1e48:	b6 4c       	sbci	r27, 0xC6	; 198
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	f9 01       	movw	r30, r18
    1e50:	e7 5b       	subi	r30, 0xB7	; 183
    1e52:	f6 4c       	sbci	r31, 0xC6	; 198
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	4c 91       	ld	r20, X
    1e5a:	59 dd       	rcall	.-1358   	; 0x190e <PrepareSending>
        }
        ++number;
    1e5c:	df 5f       	subi	r29, 0xFF	; 255
    1e5e:	d0 93 f5 38 	sts	0x38F5, r29	; 0x8038f5 <number.3941>

        if (responseList == 0) {
    1e62:	c1 11       	cpse	r28, r1
    1e64:	0d c0       	rjmp	.+26     	; 0x1e80 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    1e66:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    1e70:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
            RXCNT = 0;
    1e74:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    1e76:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <serRxDone>
            number = 0;
    1e7a:	10 92 f5 38 	sts	0x38F5, r1	; 0x8038f5 <number.3941>
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    1e80:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    1e82:	8c 2f       	mov	r24, r28
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    1e8a:	4f 92       	push	r4
    1e8c:	5f 92       	push	r5
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	a1 97       	sbiw	r28, 0x21	; 33
    1eb0:	cd bf       	out	0x3d, r28	; 61
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    1eb6:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <currDepth>
    1eba:	8f 3f       	cpi	r24, 0xFF	; 255
    1ebc:	49 f4       	brne	.+18     	; 0x1ed0 <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    1ebe:	69 e0       	ldi	r22, 0x09	; 9
    1ec0:	7a e3       	ldi	r23, 0x3A	; 58
    1ec2:	80 91 c9 39 	lds	r24, 0x39C9	; 0x8039c9 <route>
    1ec6:	90 91 ca 39 	lds	r25, 0x39CA	; 0x8039ca <route+0x1>
    1eca:	d5 dd       	rcall	.-1110   	; 0x1a76 <PopulateObject>
        currDepth = 0;
    1ecc:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <currDepth>
    }

    if (serRxDone){
    1ed0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <serRxDone>
    1ed4:	88 23       	and	r24, r24
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <CheckInput+0x50>
    1ed8:	63 c2       	rjmp	.+1222   	; 0x23a0 <CheckInput+0x516>

        //Special input requested from user by game
        if (specialInput[0]){
    1eda:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <specialInput>
    1ede:	88 23       	and	r24, r24
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <CheckInput+0x5a>
    1ee2:	57 c0       	rjmp	.+174    	; 0x1f92 <CheckInput+0x108>
            specialPassed = 0;
    1ee4:	10 92 f7 38 	sts	0x38F7, r1	; 0x8038f7 <specialPassed>
            data[0] = 'a';
    1ee8:	81 e6       	ldi	r24, 0x61	; 97
    1eea:	f8 01       	movw	r30, r16
    1eec:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    1eee:	68 ef       	ldi	r22, 0xF8	; 248
    1ef0:	78 e3       	ldi	r23, 0x38	; 56
    1ef2:	83 e6       	ldi	r24, 0x63	; 99
    1ef4:	9a e3       	ldi	r25, 0x3A	; 58
    1ef6:	f1 dc       	rcall	.-1566   	; 0x18da <StartsWith>
    1ef8:	f8 2e       	mov	r15, r24
    1efa:	88 23       	and	r24, r24
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <CheckInput+0x7c>
                specialPassed = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <specialPassed>
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <CheckInput+0x84>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1f06:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <specialInput>
    1f0a:	81 33       	cpi	r24, 0x31	; 49
    1f0c:	11 f0       	breq	.+4      	; 0x1f12 <CheckInput+0x88>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1f0e:	f1 2c       	mov	r15, r1
    1f10:	49 c2       	rjmp	.+1170   	; 0x23a4 <CheckInput+0x51a>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1f12:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <specialInput+0x2>
    1f16:	81 11       	cpse	r24, r1
    1f18:	fa cf       	rjmp	.-12     	; 0x1f0e <CheckInput+0x84>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    1f1a:	83 e6       	ldi	r24, 0x63	; 99
    1f1c:	9a e3       	ldi	r25, 0x3A	; 58
    1f1e:	de de       	rcall	.-580    	; 0x1cdc <CleanInput>
                specialPassed = 2;
    1f20:	92 e0       	ldi	r25, 0x02	; 2
    1f22:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <specialPassed>
                data[1] = 0;
    1f26:	f8 01       	movw	r30, r16
    1f28:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	80 f3       	brcs	.-32     	; 0x1f0e <CheckInput+0x84>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    1f2e:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    1f32:	81 33       	cpi	r24, 0x31	; 49
    1f34:	61 f0       	breq	.+24     	; 0x1f4e <CheckInput+0xc4>
    1f36:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    1f3a:	82 33       	cpi	r24, 0x32	; 50
    1f3c:	41 f0       	breq	.+16     	; 0x1f4e <CheckInput+0xc4>
    1f3e:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    1f42:	83 33       	cpi	r24, 0x33	; 51
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <CheckInput+0xc4>
    1f46:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    1f4a:	84 33       	cpi	r24, 0x34	; 52
    1f4c:	01 f7       	brne	.-64     	; 0x1f0e <CheckInput+0x84>
                        serRx[1] |= 0x20;
    1f4e:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    1f52:	80 62       	ori	r24, 0x20	; 32
    1f54:	80 93 64 3a 	sts	0x3A64, r24	; 0x803a64 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    1f58:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    1f5c:	81 36       	cpi	r24, 0x61	; 97
    1f5e:	61 f0       	breq	.+24     	; 0x1f78 <CheckInput+0xee>
    1f60:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    1f64:	85 36       	cpi	r24, 0x65	; 101
    1f66:	41 f0       	breq	.+16     	; 0x1f78 <CheckInput+0xee>
    1f68:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    1f6c:	86 36       	cpi	r24, 0x66	; 102
    1f6e:	21 f0       	breq	.+8      	; 0x1f78 <CheckInput+0xee>
    1f70:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    1f74:	87 37       	cpi	r24, 0x77	; 119
    1f76:	59 f6       	brne	.-106    	; 0x1f0e <CheckInput+0x84>
                            data[1] = specialInput[1]+0x11;
    1f78:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <specialInput+0x1>
    1f7c:	8f 5e       	subi	r24, 0xEF	; 239
    1f7e:	f8 01       	movw	r30, r16
    1f80:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1f82:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    1f86:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1f88:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    1f8c:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1f8e:	14 82       	std	Z+4, r1	; 0x04
    1f90:	09 c2       	rjmp	.+1042   	; 0x23a4 <CheckInput+0x51a>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    1f92:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    1f96:	83 32       	cpi	r24, 0x23	; 35
    1f98:	81 f5       	brne	.+96     	; 0x1ffa <CheckInput+0x170>
    1f9a:	8d b3       	in	r24, 0x1d	; 29
    1f9c:	86 30       	cpi	r24, 0x06	; 6
    1f9e:	69 f5       	brne	.+90     	; 0x1ffa <CheckInput+0x170>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	ed 59       	subi	r30, 0x9D	; 157
    1faa:	f5 4c       	sbci	r31, 0xC5	; 197
    1fac:	20 81       	ld	r18, Z
    1fae:	20 53       	subi	r18, 0x30	; 48
    1fb0:	20 83       	st	Z, r18
                    bitNr *= 10;
    1fb2:	11 0f       	add	r17, r17
    1fb4:	21 2f       	mov	r18, r17
    1fb6:	22 0f       	add	r18, r18
    1fb8:	22 0f       	add	r18, r18
    1fba:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    1fbc:	20 91 64 3a 	lds	r18, 0x3A64	; 0x803a64 <serRx+0x1>
    1fc0:	23 30       	cpi	r18, 0x03	; 3
    1fc2:	48 f4       	brcc	.+18     	; 0x1fd6 <CheckInput+0x14c>
                    if (serRx[x] < 10) {
    1fc4:	20 81       	ld	r18, Z
    1fc6:	2a 30       	cpi	r18, 0x0A	; 10
    1fc8:	b0 f4       	brcc	.+44     	; 0x1ff6 <CheckInput+0x16c>
                        bitNr += serRx[x];
    1fca:	20 81       	ld	r18, Z
    1fcc:	12 0f       	add	r17, r18
    1fce:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    1fd0:	84 30       	cpi	r24, 0x04	; 4
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	41 f7       	brne	.-48     	; 0x1fa6 <CheckInput+0x11c>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    1fd6:	81 2f       	mov	r24, r17
    1fd8:	8f 77       	andi	r24, 0x7F	; 127
    1fda:	69 f0       	breq	.+26     	; 0x1ff6 <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    1fdc:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx+0x4>
    1fe0:	60 91 68 3a 	lds	r22, 0x3A68	; 0x803a68 <serRx+0x5>
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	78 2b       	or	r23, r24
    1fe8:	81 2f       	mov	r24, r17
    1fea:	80 95       	com	r24
    1fec:	d6 db       	rcall	.-2132   	; 0x179a <Cheat>
    1fee:	88 23       	and	r24, r24
    1ff0:	11 f0       	breq	.+4      	; 0x1ff6 <CheckInput+0x16c>
    1ff2:	81 2f       	mov	r24, r17
    1ff4:	ea d8       	rcall	.-3628   	; 0x11ca <UpdateState>
                }
                responseList = SetStandardResponse(0);
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	50 c0       	rjmp	.+160    	; 0x209a <CheckInput+0x210>
    1ffa:	d8 01       	movw	r26, r16
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2000:	fc 01       	movw	r30, r24
    2002:	ed 59       	subi	r30, 0x9D	; 157
    2004:	f5 4c       	sbci	r31, 0xC5	; 197
    2006:	20 81       	ld	r18, Z
    2008:	21 34       	cpi	r18, 0x41	; 65
    200a:	18 f0       	brcs	.+6      	; 0x2012 <CheckInput+0x188>
    200c:	20 81       	ld	r18, Z
    200e:	2b 35       	cpi	r18, 0x5B	; 91
    2010:	10 f0       	brcs	.+4      	; 0x2016 <CheckInput+0x18c>
    2012:	20 81       	ld	r18, Z
    2014:	02 c0       	rjmp	.+4      	; 0x201a <CheckInput+0x190>
    2016:	20 81       	ld	r18, Z
    2018:	20 62       	ori	r18, 0x20	; 32
    201a:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    201c:	20 81       	ld	r18, Z
    201e:	21 11       	cpse	r18, r1
    2020:	05 c0       	rjmp	.+10     	; 0x202c <CheckInput+0x1a2>
                    data[x] = 0;
    2022:	f8 01       	movw	r30, r16
    2024:	e8 0f       	add	r30, r24
    2026:	f1 1d       	adc	r31, r1
    2028:	10 82       	st	Z, r1
                    break;
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <CheckInput+0x1ac>
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2030:	81 34       	cpi	r24, 0x41	; 65
    2032:	91 05       	cpc	r25, r1
    2034:	29 f7       	brne	.-54     	; 0x2000 <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2036:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
                data[0] = 0;
    203a:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    203c:	81 11       	cpse	r24, r1
    203e:	05 c0       	rjmp	.+10     	; 0x204a <CheckInput+0x1c0>
                data[0] = 0;
    2040:	10 82       	st	Z, r1
                RXCNT = 0;
    2042:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2044:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <serRxDone>
    2048:	ab c1       	rjmp	.+854    	; 0x23a0 <CheckInput+0x516>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    204a:	80 81       	ld	r24, Z
    204c:	8f 33       	cpi	r24, 0x3F	; 63
    204e:	11 f0       	breq	.+4      	; 0x2054 <CheckInput+0x1ca>
    2050:	88 36       	cpi	r24, 0x68	; 104
    2052:	39 f5       	brne	.+78     	; 0x20a2 <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2054:	8b e5       	ldi	r24, 0x5B	; 91
    2056:	9a e7       	ldi	r25, 0x7A	; 122
    2058:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    205c:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    2068:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    2074:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2078:	23 e9       	ldi	r18, 0x93	; 147
    207a:	3b e7       	ldi	r19, 0x7B	; 123
    207c:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2080:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2084:	2d e6       	ldi	r18, 0x6D	; 109
    2086:	34 e0       	ldi	r19, 0x04	; 4
    2088:	20 93 4b 39 	sts	0x394B, r18	; 0x80394b <reactStr+0x42>
    208c:	30 93 4c 39 	sts	0x394C, r19	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2090:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    2094:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	71 dc       	rcall	.-1822   	; 0x197e <SetStandardResponse>
    209c:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <responseList>
    20a0:	7f c1       	rjmp	.+766    	; 0x23a0 <CheckInput+0x516>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    20a2:	81 36       	cpi	r24, 0x61	; 97
    20a4:	d9 f4       	brne	.+54     	; 0x20dc <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20a6:	8b e5       	ldi	r24, 0x5B	; 91
    20a8:	9a e7       	ldi	r25, 0x7A	; 122
    20aa:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    20ae:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    20b2:	84 e0       	ldi	r24, 0x04	; 4
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    20ba:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    20c6:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20ca:	2e e6       	ldi	r18, 0x6E	; 110
    20cc:	3a e7       	ldi	r19, 0x7A	; 122
    20ce:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    20d2:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    20d6:	25 e2       	ldi	r18, 0x25	; 37
    20d8:	31 e0       	ldi	r19, 0x01	; 1
    20da:	d6 cf       	rjmp	.-84     	; 0x2088 <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    20dc:	87 37       	cpi	r24, 0x77	; 119
    20de:	09 f0       	breq	.+2      	; 0x20e2 <CheckInput+0x258>
    20e0:	6e c0       	rjmp	.+220    	; 0x21be <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20e2:	8b e5       	ldi	r24, 0x5B	; 91
    20e4:	9a e7       	ldi	r25, 0x7A	; 122
    20e6:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    20ea:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    20ee:	84 e0       	ldi	r24, 0x04	; 4
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    20f6:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    20fa:	21 e0       	ldi	r18, 0x01	; 1
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	20 93 89 39 	sts	0x3989, r18	; 0x803989 <reactStr+0x80>
    2102:	30 93 8a 39 	sts	0x398A, r19	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2106:	8b ec       	ldi	r24, 0xCB	; 203
    2108:	96 e7       	ldi	r25, 0x76	; 118
    210a:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    210e:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2112:	82 e1       	ldi	r24, 0x12	; 18
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    211a:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    211e:	20 93 8b 39 	sts	0x398B, r18	; 0x80398b <reactStr+0x82>
    2122:	30 93 8c 39 	sts	0x398C, r19	; 0x80398c <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    2126:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <whoami>
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	19 f4       	brne	.+6      	; 0x2134 <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    212e:	85 ec       	ldi	r24, 0xC5	; 197
    2130:	96 e7       	ldi	r25, 0x76	; 118
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    2134:	82 30       	cpi	r24, 0x02	; 2
    2136:	49 f4       	brne	.+18     	; 0x214a <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2138:	82 ec       	ldi	r24, 0xC2	; 194
    213a:	96 e7       	ldi	r25, 0x76	; 118
    213c:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    2140:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	1e c0       	rjmp	.+60     	; 0x2186 <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	49 f4       	brne	.+18     	; 0x2160 <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    214e:	8c eb       	ldi	r24, 0xBC	; 188
    2150:	96 e7       	ldi	r25, 0x76	; 118
    2152:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    2156:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	13 c0       	rjmp	.+38     	; 0x2186 <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	49 f4       	brne	.+18     	; 0x2176 <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2164:	87 eb       	ldi	r24, 0xB7	; 183
    2166:	96 e7       	ldi	r25, 0x76	; 118
    2168:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    216c:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2170:	85 e0       	ldi	r24, 0x05	; 5
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2176:	80 e4       	ldi	r24, 0x40	; 64
    2178:	96 e7       	ldi	r25, 0x76	; 118
    217a:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    217e:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2182:	82 e4       	ldi	r24, 0x42	; 66
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    218a:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    218e:	20 93 8d 39 	sts	0x398D, r18	; 0x80398d <reactStr+0x84>
    2192:	30 93 8e 39 	sts	0x398E, r19	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2196:	8d e9       	ldi	r24, 0x9D	; 157
    2198:	96 e7       	ldi	r25, 0x76	; 118
    219a:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x6>
    219e:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    21a2:	8a e1       	ldi	r24, 0x1A	; 26
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x46>
    21aa:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    21b6:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    21ba:	84 e0       	ldi	r24, 0x04	; 4
    21bc:	6e cf       	rjmp	.-292    	; 0x209a <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    21be:	81 37       	cpi	r24, 0x71	; 113
    21c0:	d9 f4       	brne	.+54     	; 0x21f8 <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21c2:	8b e5       	ldi	r24, 0x5B	; 91
    21c4:	9a e7       	ldi	r25, 0x7A	; 122
    21c6:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    21ca:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    21ce:	84 e0       	ldi	r24, 0x04	; 4
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    21d6:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    21e2:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21e6:	23 e0       	ldi	r18, 0x03	; 3
    21e8:	3a e7       	ldi	r19, 0x7A	; 122
    21ea:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    21ee:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    21f2:	24 e5       	ldi	r18, 0x54	; 84
    21f4:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    21f6:	48 cf       	rjmp	.-368    	; 0x2088 <CheckInput+0x1fe>
    21f8:	64 e9       	ldi	r22, 0x94	; 148
    21fa:	77 eb       	ldi	r23, 0xB7	; 183
    21fc:	c8 01       	movw	r24, r16
    21fe:	6d db       	rcall	.-2342   	; 0x18da <StartsWith>
    2200:	88 23       	and	r24, r24
    2202:	f9 f0       	breq	.+62     	; 0x2242 <CheckInput+0x3b8>
    2204:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	81 2f       	mov	r24, r17
    220a:	0e 94 cb 08 	call	0x1196	; 0x1196 <WriteStatusBit>
    220e:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2210:	12 37       	cpi	r17, 0x72	; 114
    2212:	c9 f7       	brne	.-14     	; 0x2206 <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    2214:	0e 94 44 08 	call	0x1088	; 0x1088 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    2218:	80 e2       	ldi	r24, 0x20	; 32
    221a:	e7 ed       	ldi	r30, 0xD7	; 215
    221c:	f7 eb       	ldi	r31, 0xB7	; 183
    221e:	de 01       	movw	r26, r28
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	01 90       	ld	r0, Z+
    2224:	0d 92       	st	X+, r0
    2226:	8a 95       	dec	r24
    2228:	e1 f7       	brne	.-8      	; 0x2222 <CheckInput+0x398>
                SerSpeed(60);
    222a:	8c e3       	ldi	r24, 0x3C	; 60
    222c:	0e 94 36 07 	call	0xe6c	; 0xe6c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2230:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    2234:	88 23       	and	r24, r24
    2236:	e1 f3       	breq	.-8      	; 0x2230 <CheckInput+0x3a6>
    2238:	ce 01       	movw	r24, r28
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	0e 94 25 07 	call	0xe4a	; 0xe4a <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    2240:	f7 cf       	rjmp	.-18     	; 0x2230 <CheckInput+0x3a6>
    2242:	6a e9       	ldi	r22, 0x9A	; 154
    2244:	77 eb       	ldi	r23, 0xB7	; 183
    2246:	c8 01       	movw	r24, r16
    2248:	48 db       	rcall	.-2416   	; 0x18da <StartsWith>
    224a:	68 2e       	mov	r6, r24
    224c:	88 23       	and	r24, r24
    224e:	61 f1       	breq	.+88     	; 0x22a8 <CheckInput+0x41e>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	89 a3       	std	Y+33, r24	; 0x21
    2254:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	be 01       	movw	r22, r28
    225a:	6f 5d       	subi	r22, 0xDF	; 223
    225c:	7f 4f       	sbci	r23, 0xFF	; 255
    225e:	81 2f       	mov	r24, r17
    2260:	0e 94 fd 06 	call	0xdfa	; 0xdfa <EEWrite>
    2264:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2266:	10 32       	cpi	r17, 0x20	; 32
    2268:	b1 f7       	brne	.-20     	; 0x2256 <CheckInput+0x3cc>
    226a:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	81 2f       	mov	r24, r17
    2270:	0e 94 cb 08 	call	0x1196	; 0x1196 <WriteStatusBit>
    2274:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2276:	12 37       	cpi	r17, 0x72	; 114
    2278:	c9 f7       	brne	.-14     	; 0x226c <CheckInput+0x3e2>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    227a:	0e 94 44 08 	call	0x1088	; 0x1088 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    227e:	8f e0       	ldi	r24, 0x0F	; 15
    2280:	e7 ef       	ldi	r30, 0xF7	; 247
    2282:	f7 eb       	ldi	r31, 0xB7	; 183
    2284:	de 01       	movw	r26, r28
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	01 90       	ld	r0, Z+
    228a:	0d 92       	st	X+, r0
    228c:	8a 95       	dec	r24
    228e:	e1 f7       	brne	.-8      	; 0x2288 <CheckInput+0x3fe>
                SerSpeed(60);
    2290:	8c e3       	ldi	r24, 0x3C	; 60
    2292:	0e 94 36 07 	call	0xe6c	; 0xe6c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2296:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    229a:	88 23       	and	r24, r24
    229c:	e1 f3       	breq	.-8      	; 0x2296 <CheckInput+0x40c>
    229e:	ce 01       	movw	r24, r28
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	0e 94 25 07 	call	0xe4a	; 0xe4a <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    22a6:	f7 cf       	rjmp	.-18     	; 0x2296 <CheckInput+0x40c>
    22a8:	61 ed       	ldi	r22, 0xD1	; 209
    22aa:	77 eb       	ldi	r23, 0xB7	; 183
    22ac:	c8 01       	movw	r24, r16
    22ae:	15 db       	rcall	.-2518   	; 0x18da <StartsWith>
    22b0:	88 23       	and	r24, r24
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <CheckInput+0x42c>
    22b4:	2c ce       	rjmp	.-936    	; 0x1f0e <CheckInput+0x84>
    22b6:	09 e0       	ldi	r16, 0x09	; 9
    22b8:	19 e3       	ldi	r17, 0x39	; 57
    22ba:	78 e1       	ldi	r23, 0x18	; 24
    22bc:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    22be:	ea e0       	ldi	r30, 0x0A	; 10
    22c0:	5e 2e       	mov	r5, r30
                        bit /= 10;
    22c2:	f4 e6       	ldi	r31, 0x64	; 100
    22c4:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    22c6:	ee 24       	eor	r14, r14
    22c8:	e3 94       	inc	r14
    22ca:	f1 2c       	mov	r15, r1
    22cc:	cc 24       	eor	r12, r12
    22ce:	c3 94       	inc	r12
    22d0:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22d2:	89 e5       	ldi	r24, 0x59	; 89
    22d4:	88 2e       	mov	r8, r24
    22d6:	8a e7       	ldi	r24, 0x7A	; 122
    22d8:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    22da:	92 e0       	ldi	r25, 0x02	; 2
    22dc:	a9 2e       	mov	r10, r25
    22de:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	be 01       	movw	r22, r28
    22e4:	6f 5d       	subi	r22, 0xDF	; 223
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	87 2d       	mov	r24, r7
    22ea:	0e 94 ed 06 	call	0xdda	; 0xdda <EERead>
                    bit = 0xff-bit;
    22ee:	29 a1       	ldd	r18, Y+33	; 0x21
    22f0:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    22f2:	82 2f       	mov	r24, r18
    22f4:	65 2d       	mov	r22, r5
    22f6:	0e 94 43 1b 	call	0x3686	; 0x3686 <__udivmodqi4>
    22fa:	9b 83       	std	Y+3, r25	; 0x03
    22fc:	0e 94 43 1b 	call	0x3686	; 0x3686 <__udivmodqi4>
    2300:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    2302:	82 2f       	mov	r24, r18
    2304:	64 2d       	mov	r22, r4
    2306:	0e 94 43 1b 	call	0x3686	; 0x3686 <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	19 a2       	std	Y+33, r1	; 0x21
    230e:	de 01       	movw	r26, r28
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    2314:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2316:	86 2d       	mov	r24, r6
    2318:	84 0f       	add	r24, r20
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	fc 01       	movw	r30, r24
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	e7 5f       	subi	r30, 0xF7	; 247
    2324:	f6 4c       	sbci	r31, 0xC6	; 198
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	2d 52       	subi	r18, 0x2D	; 45
    232a:	3b 48       	sbci	r19, 0x8B	; 139
    232c:	20 83       	st	Z, r18
    232e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2330:	fc 01       	movw	r30, r24
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	e7 5b       	subi	r30, 0xB7	; 183
    2338:	f6 4c       	sbci	r31, 0xC6	; 198
    233a:	e0 82       	st	Z, r14
    233c:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	fc 01       	movw	r30, r24
    2344:	e7 57       	subi	r30, 0x77	; 119
    2346:	f6 4c       	sbci	r31, 0xC6	; 198
    2348:	e0 82       	st	Z, r14
    234a:	f1 82       	std	Z+1, r15	; 0x01
    234c:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    234e:	43 30       	cpi	r20, 0x03	; 3
    2350:	09 f7       	brne	.-62     	; 0x2314 <CheckInput+0x48a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2352:	f8 01       	movw	r30, r16
    2354:	86 82       	std	Z+6, r8	; 0x06
    2356:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    2358:	ea 5b       	subi	r30, 0xBA	; 186
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	a0 82       	st	Z, r10
    235e:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2360:	e0 5c       	subi	r30, 0xC0	; 192
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	c0 82       	st	Z, r12
    2366:	d1 82       	std	Z+1, r13	; 0x01
    2368:	73 94       	inc	r7
    236a:	08 5f       	subi	r16, 0xF8	; 248
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	f4 e0       	ldi	r31, 0x04	; 4
    2370:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2372:	80 e2       	ldi	r24, 0x20	; 32
    2374:	78 12       	cpse	r7, r24
    2376:	b4 cf       	rjmp	.-152    	; 0x22e0 <CheckInput+0x456>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2378:	8b e5       	ldi	r24, 0x5B	; 91
    237a:	9a e7       	ldi	r25, 0x7A	; 122
    237c:	80 93 47 39 	sts	0x3947, r24	; 0x803947 <reactStr+0x3e>
    2380:	90 93 48 39 	sts	0x3948, r25	; 0x803948 <reactStr+0x3f>
    reactStr[1][number]=length;
    2384:	84 e0       	ldi	r24, 0x04	; 4
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	80 93 87 39 	sts	0x3987, r24	; 0x803987 <reactStr+0x7e>
    238c:	90 93 88 39 	sts	0x3988, r25	; 0x803988 <reactStr+0x7f>
    reactStr[2][number]=type;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	80 93 c7 39 	sts	0x39C7, r24	; 0x8039c7 <reactStr+0xbe>
    2398:	90 93 c8 39 	sts	0x39C8, r25	; 0x8039c8 <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    239c:	70 92 08 39 	sts	0x3908, r7	; 0x803908 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    23a0:	ff 24       	eor	r15, r15
    23a2:	f3 94       	inc	r15
}
    23a4:	8f 2d       	mov	r24, r15
    23a6:	a1 96       	adiw	r28, 0x21	; 33
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	bf 90       	pop	r11
    23be:	af 90       	pop	r10
    23c0:	9f 90       	pop	r9
    23c2:	8f 90       	pop	r8
    23c4:	7f 90       	pop	r7
    23c6:	6f 90       	pop	r6
    23c8:	5f 90       	pop	r5
    23ca:	4f 90       	pop	r4
    23cc:	08 95       	ret

000023ce <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    23ce:	4f 92       	push	r4
    23d0:	5f 92       	push	r5
    23d2:	6f 92       	push	r6
    23d4:	7f 92       	push	r7
    23d6:	8f 92       	push	r8
    23d8:	9f 92       	push	r9
    23da:	af 92       	push	r10
    23dc:	bf 92       	push	r11
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	2a 97       	sbiw	r28, 0x0a	; 10
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    23fa:	70 dc       	rcall	.-1824   	; 0x1cdc <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    23fc:	c8 01       	movw	r24, r16
    23fe:	6e dc       	rcall	.-1828   	; 0x1cdc <CleanInput>
    2400:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2402:	88 23       	and	r24, r24
    2404:	09 f4       	brne	.+2      	; 0x2408 <ProcessInput+0x3a>
    2406:	de c7       	rjmp	.+4028   	; 0x33c4 <ProcessInput+0xff6>

        //eXit to previous location
        if (data[0] == 'x'){
    2408:	d8 01       	movw	r26, r16
    240a:	8c 91       	ld	r24, X
    240c:	88 37       	cpi	r24, 0x78	; 120
    240e:	09 f0       	breq	.+2      	; 0x2412 <ProcessInput+0x44>
    2410:	45 c0       	rjmp	.+138    	; 0x249c <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2412:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <currDepth>
    2416:	e8 2f       	mov	r30, r24
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	ee 0f       	add	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	e7 53       	subi	r30, 0x37	; 55
    2420:	f6 4c       	sbci	r31, 0xC6	; 198
    2422:	20 81       	ld	r18, Z
    2424:	31 81       	ldd	r19, Z+1	; 0x01
    2426:	23 2b       	or	r18, r19
    2428:	11 f0       	breq	.+4      	; 0x242e <ProcessInput+0x60>
    242a:	81 11       	cpse	r24, r1
    242c:	03 c0       	rjmp	.+6      	; 0x2434 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    242e:	82 e8       	ldi	r24, 0x82	; 130
    2430:	96 e7       	ldi	r25, 0x76	; 118
    2432:	a1 c5       	rjmp	.+2882   	; 0x2f76 <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2434:	80 91 0f 3a 	lds	r24, 0x3A0F	; 0x803a0f <currObj+0x6>
    2438:	0e 94 ef 08 	call	0x11de	; 0x11de <CheckState>
    243c:	88 23       	and	r24, r24
    243e:	b9 f0       	breq	.+46     	; 0x246e <ProcessInput+0xa0>
                --currDepth;
    2440:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2444:	e1 50       	subi	r30, 0x01	; 1
    2446:	e0 93 28 38 	sts	0x3828, r30	; 0x803828 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	e7 53       	subi	r30, 0x37	; 55
    2452:	f6 4c       	sbci	r31, 0xC6	; 198
    2454:	69 e0       	ldi	r22, 0x09	; 9
    2456:	7a e3       	ldi	r23, 0x3A	; 58
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	0c db       	rcall	.-2536   	; 0x1a76 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    245e:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    2468:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
    246c:	31 c2       	rjmp	.+1122   	; 0x28d0 <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    246e:	80 91 2b 3a 	lds	r24, 0x3A2B	; 0x803a2b <currObj+0x22>
    2472:	90 91 2c 3a 	lds	r25, 0x3A2C	; 0x803a2c <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2476:	20 91 1d 3a 	lds	r18, 0x3A1D	; 0x803a1d <currObj+0x14>
    247a:	30 91 1e 3a 	lds	r19, 0x3A1E	; 0x803a1e <currObj+0x15>
    247e:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2482:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2486:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    248a:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    248e:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2492:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2496:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x28>
    249a:	3a c6       	rjmp	.+3188   	; 0x3110 <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    249c:	85 36       	cpi	r24, 0x65	; 101
    249e:	19 f0       	breq	.+6      	; 0x24a6 <ProcessInput+0xd8>
    24a0:	8f 36       	cpi	r24, 0x6F	; 111
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <ProcessInput+0xd8>
    24a4:	df c0       	rjmp	.+446    	; 0x2664 <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    24a6:	b2 e0       	ldi	r27, 0x02	; 2
    24a8:	fb 12       	cpse	r15, r27
    24aa:	c1 cf       	rjmp	.-126    	; 0x242e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    24ac:	e0 90 28 38 	lds	r14, 0x3828	; 0x803828 <currDepth>
    24b0:	f1 2c       	mov	r15, r1
    24b2:	f7 01       	movw	r30, r14
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	e7 53       	subi	r30, 0x37	; 55
    24ba:	f6 4c       	sbci	r31, 0xC6	; 198
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	d8 01       	movw	r26, r16
    24c2:	11 96       	adiw	r26, 0x01	; 1
    24c4:	6c 91       	ld	r22, X
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	a0 db       	rcall	.-2240   	; 0x1c0c <FindChild>
    24cc:	f7 01       	movw	r30, r14
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	e5 53       	subi	r30, 0x35	; 53
    24d4:	f6 4c       	sbci	r31, 0xC6	; 198
    24d6:	80 83       	st	Z, r24
    24d8:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    24da:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <currDepth>
    24de:	29 2f       	mov	r18, r25
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	f9 01       	movw	r30, r18
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	e5 53       	subi	r30, 0x35	; 53
    24ea:	f6 4c       	sbci	r31, 0xC6	; 198
    24ec:	40 81       	ld	r20, Z
    24ee:	51 81       	ldd	r21, Z+1	; 0x01
    24f0:	41 15       	cp	r20, r1
    24f2:	51 05       	cpc	r21, r1
    24f4:	21 f0       	breq	.+8      	; 0x24fe <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    24f6:	6a ec       	ldi	r22, 0xCA	; 202
    24f8:	78 e3       	ldi	r23, 0x38	; 56
    24fa:	ca 01       	movw	r24, r20
    24fc:	1c c0       	rjmp	.+56     	; 0x2536 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    24fe:	99 23       	and	r25, r25
    2500:	09 f4       	brne	.+2      	; 0x2504 <ProcessInput+0x136>
    2502:	77 c7       	rjmp	.+3822   	; 0x33f2 <ProcessInput+0x1024>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	f9 01       	movw	r30, r18
    250a:	e9 53       	subi	r30, 0x39	; 57
    250c:	f6 4c       	sbci	r31, 0xC6	; 198
    250e:	d8 01       	movw	r26, r16
    2510:	11 96       	adiw	r26, 0x01	; 1
    2512:	6c 91       	ld	r22, X
    2514:	80 81       	ld	r24, Z
    2516:	91 81       	ldd	r25, Z+1	; 0x01
    2518:	25 db       	rcall	.-2486   	; 0x1b64 <CheckLetter>
    251a:	88 23       	and	r24, r24
    251c:	09 f4       	brne	.+2      	; 0x2520 <ProcessInput+0x152>
    251e:	69 c7       	rjmp	.+3794   	; 0x33f2 <ProcessInput+0x1024>
                        PopulateObject(route[currDepth-1], &actObj1);
    2520:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	ee 0f       	add	r30, r30
    2528:	ff 1f       	adc	r31, r31
    252a:	e9 53       	subi	r30, 0x39	; 57
    252c:	f6 4c       	sbci	r31, 0xC6	; 198
    252e:	6a ec       	ldi	r22, 0xCA	; 202
    2530:	78 e3       	ldi	r23, 0x38	; 56
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	9f da       	rcall	.-2754   	; 0x1a76 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2538:	f8 01       	movw	r30, r16
    253a:	80 81       	ld	r24, Z
    253c:	85 36       	cpi	r24, 0x65	; 101
    253e:	c9 f4       	brne	.+50     	; 0x2572 <ProcessInput+0x1a4>
    2540:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0x8>
    2544:	80 fd       	sbrc	r24, 0
    2546:	1e c0       	rjmp	.+60     	; 0x2584 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2548:	80 ea       	ldi	r24, 0xA0	; 160
    254a:	99 e7       	ldi	r25, 0x79	; 121
    254c:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2550:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2554:	8e e1       	ldi	r24, 0x1E	; 30
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    255c:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    2568:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    256c:	72 e0       	ldi	r23, 0x02	; 2
    256e:	77 2e       	mov	r7, r23
    2570:	0e c7       	rjmp	.+3612   	; 0x338e <ProcessInput+0xfc0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2572:	8f 36       	cpi	r24, 0x6F	; 111
    2574:	39 f4       	brne	.+14     	; 0x2584 <ProcessInput+0x1b6>
    2576:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0x8>
    257a:	81 fd       	sbrc	r24, 1
    257c:	03 c0       	rjmp	.+6      	; 0x2584 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    257e:	85 e8       	ldi	r24, 0x85	; 133
    2580:	99 e7       	ldi	r25, 0x79	; 121
    2582:	f9 c4       	rjmp	.+2546   	; 0x2f76 <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2584:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3989+0x6>
    2588:	0e 94 ef 08 	call	0x11de	; 0x11de <CheckState>
    258c:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2590:	88 23       	and	r24, r24
    2592:	09 f4       	brne	.+2      	; 0x2596 <ProcessInput+0x1c8>
    2594:	49 c0       	rjmp	.+146    	; 0x2628 <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2596:	ae 2f       	mov	r26, r30
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	aa 0f       	add	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	a5 53       	subi	r26, 0x35	; 53
    25a0:	b6 4c       	sbci	r27, 0xC6	; 198
    25a2:	8d 91       	ld	r24, X+
    25a4:	9c 91       	ld	r25, X
    25a6:	89 2b       	or	r24, r25
    25a8:	11 f0       	breq	.+4      	; 0x25ae <ProcessInput+0x1e0>
    25aa:	ef 5f       	subi	r30, 0xFF	; 255
    25ac:	01 c0       	rjmp	.+2      	; 0x25b0 <ProcessInput+0x1e2>
    25ae:	e1 50       	subi	r30, 0x01	; 1
    25b0:	e0 93 28 38 	sts	0x3828, r30	; 0x803828 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    25b4:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	e7 53       	subi	r30, 0x37	; 55
    25c0:	f6 4c       	sbci	r31, 0xC6	; 198
    25c2:	69 e0       	ldi	r22, 0x09	; 9
    25c4:	7a e3       	ldi	r23, 0x3A	; 58
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	55 da       	rcall	.-2902   	; 0x1a76 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    25cc:	80 91 25 3a 	lds	r24, 0x3A25	; 0x803a25 <currObj+0x1c>
    25d0:	90 91 26 3a 	lds	r25, 0x3A26	; 0x803a26 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25d4:	20 91 17 3a 	lds	r18, 0x3A17	; 0x803a17 <currObj+0xe>
    25d8:	30 91 18 3a 	lds	r19, 0x3A18	; 0x803a18 <currObj+0xf>
    25dc:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    25e0:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    25e4:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    25e8:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    25ec:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    25f0:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25f4:	8b e5       	ldi	r24, 0x5B	; 91
    25f6:	9a e7       	ldi	r25, 0x7A	; 122
    25f8:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    25fc:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    2608:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x84>
    2614:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2618:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    2622:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
    2626:	8d c4       	rjmp	.+2330   	; 0x2f42 <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	e5 53       	subi	r30, 0x35	; 53
    2630:	f6 4c       	sbci	r31, 0xC6	; 198
    2632:	10 82       	st	Z, r1
    2634:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2636:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x22>
    263a:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    263e:	20 91 de 38 	lds	r18, 0x38DE	; 0x8038de <actObj1.3989+0x14>
    2642:	30 91 df 38 	lds	r19, 0x38DF	; 0x8038df <actObj1.3989+0x15>
    2646:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    264a:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    264e:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2652:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2656:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    265a:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    265e:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3989+0x28>
    2662:	56 c5       	rjmp	.+2732   	; 0x3110 <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2664:	8c 36       	cpi	r24, 0x6C	; 108
    2666:	09 f0       	breq	.+2      	; 0x266a <ProcessInput+0x29c>
    2668:	57 c1       	rjmp	.+686    	; 0x2918 <ProcessInput+0x54a>
    266a:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
            if (inputLen == 1) {
    266e:	b1 e0       	ldi	r27, 0x01	; 1
    2670:	fb 12       	cpse	r15, r27
    2672:	f6 c0       	rjmp	.+492    	; 0x2860 <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2674:	80 91 25 3a 	lds	r24, 0x3A25	; 0x803a25 <currObj+0x1c>
    2678:	90 91 26 3a 	lds	r25, 0x3A26	; 0x803a26 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    267c:	20 91 17 3a 	lds	r18, 0x3A17	; 0x803a17 <currObj+0xe>
    2680:	30 91 18 3a 	lds	r19, 0x3A18	; 0x803a18 <currObj+0xf>
    2684:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2688:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    268c:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2690:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2694:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2698:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    269c:	8b e5       	ldi	r24, 0x5B	; 91
    269e:	9a e7       	ldi	r25, 0x7A	; 122
    26a0:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    26a4:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    26b0:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x84>
    26bc:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26c0:	2e ee       	ldi	r18, 0xEE	; 238
    26c2:	39 e7       	ldi	r19, 0x79	; 121
    26c4:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x6>
    26c8:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    26cc:	25 e1       	ldi	r18, 0x15	; 21
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x46>
    26d4:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    26d8:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    26dc:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	ee 0f       	add	r30, r30
    26e4:	ff 1f       	adc	r31, r31
    26e6:	e5 53       	subi	r30, 0x35	; 53
    26e8:	f6 4c       	sbci	r31, 0xC6	; 198
    26ea:	10 82       	st	Z, r1
    26ec:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    26ee:	84 e0       	ldi	r24, 0x04	; 4
    26f0:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26f2:	99 e5       	ldi	r25, 0x59	; 89
    26f4:	c9 2e       	mov	r12, r25
    26f6:	9a e7       	ldi	r25, 0x7A	; 122
    26f8:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    26fa:	22 e0       	ldi	r18, 0x02	; 2
    26fc:	a2 2e       	mov	r10, r18
    26fe:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2700:	88 24       	eor	r8, r8
    2702:	83 94       	inc	r8
    2704:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2706:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <currDepth>
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9c 01       	movw	r18, r24
    270e:	22 0f       	add	r18, r18
    2710:	33 1f       	adc	r19, r19
    2712:	f9 01       	movw	r30, r18
    2714:	e5 53       	subi	r30, 0x35	; 53
    2716:	f6 4c       	sbci	r31, 0xC6	; 198
    2718:	7f 01       	movw	r14, r30
    271a:	40 81       	ld	r20, Z
    271c:	51 81       	ldd	r21, Z+1	; 0x01
    271e:	f9 01       	movw	r30, r18
    2720:	e7 53       	subi	r30, 0x37	; 55
    2722:	f6 4c       	sbci	r31, 0xC6	; 198
    2724:	60 e0       	ldi	r22, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	70 da       	rcall	.-2848   	; 0x1c0c <FindChild>
    272c:	d7 01       	movw	r26, r14
    272e:	8d 93       	st	X+, r24
    2730:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2732:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	e5 53       	subi	r30, 0x35	; 53
    273e:	f6 4c       	sbci	r31, 0xC6	; 198
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	09 f4       	brne	.+2      	; 0x274a <ProcessInput+0x37c>
    2748:	4a c0       	rjmp	.+148    	; 0x27de <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    274a:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory>
    274e:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x1>
    2752:	82 17       	cp	r24, r18
    2754:	93 07       	cpc	r25, r19
    2756:	09 f4       	brne	.+2      	; 0x275a <ProcessInput+0x38c>
    2758:	42 c0       	rjmp	.+132    	; 0x27de <ProcessInput+0x410>
    275a:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <inventory+0x2>
    275e:	30 91 36 38 	lds	r19, 0x3836	; 0x803836 <inventory+0x3>
    2762:	82 17       	cp	r24, r18
    2764:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2766:	d9 f1       	breq	.+118    	; 0x27de <ProcessInput+0x410>
    2768:	6a ec       	ldi	r22, 0xCA	; 202
    276a:	78 e3       	ldi	r23, 0x38	; 56
    276c:	84 d9       	rcall	.-3320   	; 0x1a76 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    276e:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x1a>
    2772:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2776:	e6 2d       	mov	r30, r6
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	df 01       	movw	r26, r30
    277c:	aa 0f       	add	r26, r26
    277e:	bb 1f       	adc	r27, r27
    2780:	a7 5f       	subi	r26, 0xF7	; 247
    2782:	b6 4c       	sbci	r27, 0xC6	; 198
    2784:	20 91 d6 38 	lds	r18, 0x38D6	; 0x8038d6 <actObj1.3989+0xc>
    2788:	30 91 d7 38 	lds	r19, 0x38D7	; 0x8038d7 <actObj1.3989+0xd>
    278c:	2d 93       	st	X+, r18
    278e:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2790:	df 01       	movw	r26, r30
    2792:	aa 0f       	add	r26, r26
    2794:	bb 1f       	adc	r27, r27
    2796:	a7 5b       	subi	r26, 0xB7	; 183
    2798:	b6 4c       	sbci	r27, 0xC6	; 198
    279a:	8d 93       	st	X+, r24
    279c:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    279e:	ee 0f       	add	r30, r30
    27a0:	ff 1f       	adc	r31, r31
    27a2:	e7 57       	subi	r30, 0x77	; 119
    27a4:	f6 4c       	sbci	r31, 0xC6	; 198
    27a6:	10 82       	st	Z, r1
    27a8:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	86 0d       	add	r24, r6
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	63 94       	inc	r6
    27b2:	63 94       	inc	r6
    27b4:	fc 01       	movw	r30, r24
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	e7 5f       	subi	r30, 0xF7	; 247
    27bc:	f6 4c       	sbci	r31, 0xC6	; 198
    27be:	c0 82       	st	Z, r12
    27c0:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    27c2:	fc 01       	movw	r30, r24
    27c4:	ee 0f       	add	r30, r30
    27c6:	ff 1f       	adc	r31, r31
    27c8:	e7 5b       	subi	r30, 0xB7	; 183
    27ca:	f6 4c       	sbci	r31, 0xC6	; 198
    27cc:	a0 82       	st	Z, r10
    27ce:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	fc 01       	movw	r30, r24
    27d6:	e7 57       	subi	r30, 0x77	; 119
    27d8:	f6 4c       	sbci	r31, 0xC6	; 198
    27da:	80 82       	st	Z, r8
    27dc:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    27de:	20 91 28 38 	lds	r18, 0x3828	; 0x803828 <currDepth>
    27e2:	82 2f       	mov	r24, r18
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	fc 01       	movw	r30, r24
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	e5 53       	subi	r30, 0x35	; 53
    27ee:	f6 4c       	sbci	r31, 0xC6	; 198
    27f0:	40 81       	ld	r20, Z
    27f2:	51 81       	ldd	r21, Z+1	; 0x01
    27f4:	45 2b       	or	r20, r21
    27f6:	09 f0       	breq	.+2      	; 0x27fa <ProcessInput+0x42c>
    27f8:	86 cf       	rjmp	.-244    	; 0x2706 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    27fa:	22 23       	and	r18, r18
    27fc:	69 f1       	breq	.+90     	; 0x2858 <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	fc 01       	movw	r30, r24
    2804:	e9 53       	subi	r30, 0x39	; 57
    2806:	f6 4c       	sbci	r31, 0xC6	; 198
    2808:	6a ec       	ldi	r22, 0xCA	; 202
    280a:	78 e3       	ldi	r23, 0x38	; 56
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	32 d9       	rcall	.-3484   	; 0x1a76 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2812:	20 91 e4 38 	lds	r18, 0x38E4	; 0x8038e4 <actObj1.3989+0x1a>
    2816:	30 91 e5 38 	lds	r19, 0x38E5	; 0x8038e5 <actObj1.3989+0x1b>
    281a:	77 24       	eor	r7, r7
    281c:	73 94       	inc	r7
    281e:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2820:	86 2d       	mov	r24, r6
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	fc 01       	movw	r30, r24
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	e7 5f       	subi	r30, 0xF7	; 247
    282c:	f6 4c       	sbci	r31, 0xC6	; 198
    282e:	40 91 d6 38 	lds	r20, 0x38D6	; 0x8038d6 <actObj1.3989+0xc>
    2832:	50 91 d7 38 	lds	r21, 0x38D7	; 0x8038d7 <actObj1.3989+0xd>
    2836:	40 83       	st	Z, r20
    2838:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    283a:	fc 01       	movw	r30, r24
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	e7 5b       	subi	r30, 0xB7	; 183
    2842:	f6 4c       	sbci	r31, 0xC6	; 198
    2844:	20 83       	st	Z, r18
    2846:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	fc 01       	movw	r30, r24
    284e:	e7 57       	subi	r30, 0x77	; 119
    2850:	f6 4c       	sbci	r31, 0xC6	; 198
    2852:	10 82       	st	Z, r1
    2854:	11 82       	std	Z+1, r1	; 0x01
    2856:	9b c5       	rjmp	.+2870   	; 0x338e <ProcessInput+0xfc0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2858:	77 24       	eor	r7, r7
    285a:	7a 94       	dec	r7
    285c:	76 0c       	add	r7, r6
    285e:	97 c5       	rjmp	.+2862   	; 0x338e <ProcessInput+0xfc0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2860:	ee 2e       	mov	r14, r30
    2862:	f1 2c       	mov	r15, r1
    2864:	f7 01       	movw	r30, r14
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	e7 53       	subi	r30, 0x37	; 55
    286c:	f6 4c       	sbci	r31, 0xC6	; 198
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	d8 01       	movw	r26, r16
    2874:	11 96       	adiw	r26, 0x01	; 1
    2876:	6c 91       	ld	r22, X
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	c7 d9       	rcall	.-3186   	; 0x1c0c <FindChild>
    287e:	f7 01       	movw	r30, r14
    2880:	ee 0f       	add	r30, r30
    2882:	ff 1f       	adc	r31, r31
    2884:	e5 53       	subi	r30, 0x35	; 53
    2886:	f6 4c       	sbci	r31, 0xC6	; 198
    2888:	80 83       	st	Z, r24
    288a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    288c:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <currDepth>
    2890:	29 2f       	mov	r18, r25
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	f9 01       	movw	r30, r18
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	e5 53       	subi	r30, 0x35	; 53
    289c:	f6 4c       	sbci	r31, 0xC6	; 198
    289e:	40 81       	ld	r20, Z
    28a0:	51 81       	ldd	r21, Z+1	; 0x01
    28a2:	41 15       	cp	r20, r1
    28a4:	51 05       	cpc	r21, r1
    28a6:	21 f0       	breq	.+8      	; 0x28b0 <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    28a8:	6a ec       	ldi	r22, 0xCA	; 202
    28aa:	78 e3       	ldi	r23, 0x38	; 56
    28ac:	ca 01       	movw	r24, r20
    28ae:	1e c0       	rjmp	.+60     	; 0x28ec <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    28b0:	99 23       	and	r25, r25
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    28b4:	9e c5       	rjmp	.+2876   	; 0x33f2 <ProcessInput+0x1024>
    28b6:	22 0f       	add	r18, r18
    28b8:	33 1f       	adc	r19, r19
    28ba:	f9 01       	movw	r30, r18
    28bc:	e9 53       	subi	r30, 0x39	; 57
    28be:	f6 4c       	sbci	r31, 0xC6	; 198
    28c0:	d8 01       	movw	r26, r16
    28c2:	11 96       	adiw	r26, 0x01	; 1
    28c4:	6c 91       	ld	r22, X
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	4c d9       	rcall	.-3432   	; 0x1b64 <CheckLetter>
    28cc:	81 11       	cpse	r24, r1
    28ce:	03 c0       	rjmp	.+6      	; 0x28d6 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    28d0:	77 24       	eor	r7, r7
    28d2:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    28d4:	5c c5       	rjmp	.+2744   	; 0x338e <ProcessInput+0xfc0>
    28d6:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	ee 0f       	add	r30, r30
    28de:	ff 1f       	adc	r31, r31
    28e0:	e9 53       	subi	r30, 0x39	; 57
    28e2:	f6 4c       	sbci	r31, 0xC6	; 198
    28e4:	6a ec       	ldi	r22, 0xCA	; 202
    28e6:	78 e3       	ldi	r23, 0x38	; 56
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	c4 d8       	rcall	.-3704   	; 0x1a76 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    28ee:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0x1c>
    28f2:	90 91 e7 38 	lds	r25, 0x38E7	; 0x8038e7 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28f6:	20 91 d8 38 	lds	r18, 0x38D8	; 0x8038d8 <actObj1.3989+0xe>
    28fa:	30 91 d9 38 	lds	r19, 0x38D9	; 0x8038d9 <actObj1.3989+0xf>
    28fe:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2902:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2906:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    290a:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    290e:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2912:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    2916:	2a ce       	rjmp	.-940    	; 0x256c <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2918:	80 37       	cpi	r24, 0x70	; 112
    291a:	09 f0       	breq	.+2      	; 0x291e <ProcessInput+0x550>
    291c:	96 c0       	rjmp	.+300    	; 0x2a4a <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    291e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory>
    2922:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x1>
    2926:	89 2b       	or	r24, r25
    2928:	79 f0       	breq	.+30     	; 0x2948 <ProcessInput+0x57a>
    292a:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <inventory+0x2>
    292e:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <inventory+0x3>
    2932:	89 2b       	or	r24, r25
    2934:	49 f0       	breq	.+18     	; 0x2948 <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2936:	85 e4       	ldi	r24, 0x45	; 69
    2938:	98 e7       	ldi	r25, 0x78	; 120
    293a:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    293e:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2942:	89 e5       	ldi	r24, 0x59	; 89
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	08 ce       	rjmp	.-1008   	; 0x2558 <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2948:	b2 e0       	ldi	r27, 0x02	; 2
    294a:	fb 12       	cpse	r15, r27
    294c:	70 cd       	rjmp	.-1312   	; 0x242e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    294e:	e0 90 28 38 	lds	r14, 0x3828	; 0x803828 <currDepth>
    2952:	f1 2c       	mov	r15, r1
    2954:	f7 01       	movw	r30, r14
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	e7 53       	subi	r30, 0x37	; 55
    295c:	f6 4c       	sbci	r31, 0xC6	; 198
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	d8 01       	movw	r26, r16
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	6c 91       	ld	r22, X
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	4f d9       	rcall	.-3426   	; 0x1c0c <FindChild>
    296e:	f7 01       	movw	r30, r14
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	e5 53       	subi	r30, 0x35	; 53
    2976:	f6 4c       	sbci	r31, 0xC6	; 198
    2978:	80 83       	st	Z, r24
    297a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    297c:	20 91 28 38 	lds	r18, 0x3828	; 0x803828 <currDepth>
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	22 0f       	add	r18, r18
    2988:	33 1f       	adc	r19, r19
    298a:	f9 01       	movw	r30, r18
    298c:	e7 53       	subi	r30, 0x37	; 55
    298e:	f6 4c       	sbci	r31, 0xC6	; 198
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	09 f4       	brne	.+2      	; 0x299a <ProcessInput+0x5cc>
    2998:	ca c3       	rjmp	.+1940   	; 0x312e <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    299a:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <inventory>
    299e:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <inventory+0x1>
    29a2:	84 17       	cp	r24, r20
    29a4:	95 07       	cpc	r25, r21
    29a6:	39 f0       	breq	.+14     	; 0x29b6 <ProcessInput+0x5e8>
    29a8:	40 91 35 38 	lds	r20, 0x3835	; 0x803835 <inventory+0x2>
    29ac:	50 91 36 38 	lds	r21, 0x3836	; 0x803836 <inventory+0x3>
    29b0:	84 17       	cp	r24, r20
    29b2:	95 07       	cpc	r25, r21
    29b4:	c1 f4       	brne	.+48     	; 0x29e6 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29b6:	80 e2       	ldi	r24, 0x20	; 32
    29b8:	98 e7       	ldi	r25, 0x78	; 120
    29ba:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    29be:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    29c2:	85 e2       	ldi	r24, 0x25	; 37
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    29ca:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    29d6:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    29da:	f9 01       	movw	r30, r18
    29dc:	e7 53       	subi	r30, 0x37	; 55
    29de:	f6 4c       	sbci	r31, 0xC6	; 198
    29e0:	10 82       	st	Z, r1
    29e2:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    29e4:	c3 cd       	rjmp	.-1146   	; 0x256c <ProcessInput+0x19e>
    29e6:	6a ec       	ldi	r22, 0xCA	; 202
    29e8:	78 e3       	ldi	r23, 0x38	; 56
    29ea:	45 d8       	rcall	.-3958   	; 0x1a76 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    29ec:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0x7>
    29f0:	0e 94 ef 08 	call	0x11de	; 0x11de <CheckState>
    29f4:	88 23       	and	r24, r24
    29f6:	09 f4       	brne	.+2      	; 0x29fa <ProcessInput+0x62c>
    29f8:	75 c3       	rjmp	.+1770   	; 0x30e4 <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    29fa:	80 91 d5 38 	lds	r24, 0x38D5	; 0x8038d5 <actObj1.3989+0xb>
    29fe:	88 23       	and	r24, r24
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <ProcessInput+0x636>
    2a02:	15 cd       	rjmp	.-1494   	; 0x242e <ProcessInput+0x60>
                                if (inventory[0]) {
    2a04:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory>
    2a08:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x1>
    2a0c:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	ee 0f       	add	r30, r30
    2a14:	ff 1f       	adc	r31, r31
    2a16:	e5 53       	subi	r30, 0x35	; 53
    2a18:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    2a1a:	89 2b       	or	r24, r25
    2a1c:	39 f0       	breq	.+14     	; 0x2a2c <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <inventory+0x2>
    2a26:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <inventory+0x3>
    2a2a:	06 c0       	rjmp	.+12     	; 0x2a38 <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory>
    2a34:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a38:	8a e0       	ldi	r24, 0x0A	; 10
    2a3a:	98 e7       	ldi	r25, 0x78	; 120
    2a3c:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2a40:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2a44:	86 e1       	ldi	r24, 0x16	; 22
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	5e c2       	rjmp	.+1212   	; 0x2f06 <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    2a4a:	84 36       	cpi	r24, 0x64	; 100
    2a4c:	d9 f4       	brne	.+54     	; 0x2a84 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2a4e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory>
    2a52:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x1>
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <ProcessInput+0x68e>
    2a5a:	ce c4       	rjmp	.+2460   	; 0x33f8 <ProcessInput+0x102a>
    2a5c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <inventory+0x2>
    2a60:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <inventory+0x3>
    2a64:	89 2b       	or	r24, r25
    2a66:	49 f4       	brne	.+18     	; 0x2a7a <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a68:	84 ee       	ldi	r24, 0xE4	; 228
    2a6a:	97 e7       	ldi	r25, 0x77	; 119
    2a6c:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2a70:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2a74:	86 e2       	ldi	r24, 0x26	; 38
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	6f cd       	rjmp	.-1314   	; 0x2558 <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2a7a:	b2 e0       	ldi	r27, 0x02	; 2
    2a7c:	fb 16       	cp	r15, r27
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <ProcessInput+0x6b4>
    2a80:	21 c5       	rjmp	.+2626   	; 0x34c4 <ProcessInput+0x10f6>
    2a82:	d5 cc       	rjmp	.-1622   	; 0x242e <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    2a84:	89 36       	cpi	r24, 0x69	; 105
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <ProcessInput+0x6bc>
    2a88:	7b c0       	rjmp	.+246    	; 0x2b80 <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2a8a:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory>
    2a8e:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x1>
    2a92:	89 2b       	or	r24, r25
    2a94:	31 f4       	brne	.+12     	; 0x2aa2 <ProcessInput+0x6d4>
    2a96:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <inventory+0x2>
    2a9a:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <inventory+0x3>
    2a9e:	89 2b       	or	r24, r25
    2aa0:	19 f3       	breq	.-58     	; 0x2a68 <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aa2:	8a e0       	ldi	r24, 0x0A	; 10
    2aa4:	98 e7       	ldi	r25, 0x78	; 120
    2aa6:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2aaa:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2aae:	86 e1       	ldi	r24, 0x16	; 22
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2ab6:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    2ac2:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
    2ac6:	23 e3       	ldi	r18, 0x33	; 51
    2ac8:	e2 2e       	mov	r14, r18
    2aca:	28 e3       	ldi	r18, 0x38	; 56
    2acc:	f2 2e       	mov	r15, r18
    2ace:	37 e3       	ldi	r19, 0x37	; 55
    2ad0:	63 2e       	mov	r6, r19
    2ad2:	38 e3       	ldi	r19, 0x38	; 56
    2ad4:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2ad6:	42 e0       	ldi	r20, 0x02	; 2
    2ad8:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ada:	59 e5       	ldi	r21, 0x59	; 89
    2adc:	c5 2e       	mov	r12, r21
    2ade:	5a e7       	ldi	r21, 0x7A	; 122
    2ae0:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2ae2:	62 e0       	ldi	r22, 0x02	; 2
    2ae4:	a6 2e       	mov	r10, r22
    2ae6:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2ae8:	88 24       	eor	r8, r8
    2aea:	83 94       	inc	r8
    2aec:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2aee:	d7 01       	movw	r26, r14
    2af0:	8d 91       	ld	r24, X+
    2af2:	9d 91       	ld	r25, X+
    2af4:	7d 01       	movw	r14, r26
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	d9 f1       	breq	.+118    	; 0x2b70 <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    2afa:	6a ec       	ldi	r22, 0xCA	; 202
    2afc:	78 e3       	ldi	r23, 0x38	; 56
    2afe:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2b02:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x1a>
    2b06:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b0a:	e5 2d       	mov	r30, r5
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	df 01       	movw	r26, r30
    2b10:	aa 0f       	add	r26, r26
    2b12:	bb 1f       	adc	r27, r27
    2b14:	a7 5f       	subi	r26, 0xF7	; 247
    2b16:	b6 4c       	sbci	r27, 0xC6	; 198
    2b18:	20 91 d6 38 	lds	r18, 0x38D6	; 0x8038d6 <actObj1.3989+0xc>
    2b1c:	30 91 d7 38 	lds	r19, 0x38D7	; 0x8038d7 <actObj1.3989+0xd>
    2b20:	2d 93       	st	X+, r18
    2b22:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2b24:	df 01       	movw	r26, r30
    2b26:	aa 0f       	add	r26, r26
    2b28:	bb 1f       	adc	r27, r27
    2b2a:	a7 5b       	subi	r26, 0xB7	; 183
    2b2c:	b6 4c       	sbci	r27, 0xC6	; 198
    2b2e:	8d 93       	st	X+, r24
    2b30:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2b32:	ee 0f       	add	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	e7 57       	subi	r30, 0x77	; 119
    2b38:	f6 4c       	sbci	r31, 0xC6	; 198
    2b3a:	10 82       	st	Z, r1
    2b3c:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3e:	e1 e0       	ldi	r30, 0x01	; 1
    2b40:	e5 0d       	add	r30, r5
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	53 94       	inc	r5
    2b46:	53 94       	inc	r5
    2b48:	df 01       	movw	r26, r30
    2b4a:	aa 0f       	add	r26, r26
    2b4c:	bb 1f       	adc	r27, r27
    2b4e:	a7 5f       	subi	r26, 0xF7	; 247
    2b50:	b6 4c       	sbci	r27, 0xC6	; 198
    2b52:	cd 92       	st	X+, r12
    2b54:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2b56:	df 01       	movw	r26, r30
    2b58:	aa 0f       	add	r26, r26
    2b5a:	bb 1f       	adc	r27, r27
    2b5c:	a7 5b       	subi	r26, 0xB7	; 183
    2b5e:	b6 4c       	sbci	r27, 0xC6	; 198
    2b60:	ad 92       	st	X+, r10
    2b62:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2b64:	ee 0f       	add	r30, r30
    2b66:	ff 1f       	adc	r31, r31
    2b68:	e7 57       	subi	r30, 0x77	; 119
    2b6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b6c:	80 82       	st	Z, r8
    2b6e:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    2b70:	6e 14       	cp	r6, r14
    2b72:	7f 04       	cpc	r7, r15
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <ProcessInput+0x7aa>
    2b76:	bb cf       	rjmp	.-138    	; 0x2aee <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2b78:	77 24       	eor	r7, r7
    2b7a:	7a 94       	dec	r7
    2b7c:	75 0c       	add	r7, r5
    2b7e:	07 c4       	rjmp	.+2062   	; 0x338e <ProcessInput+0xfc0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    2b80:	9c e8       	ldi	r25, 0x8C	; 140
    2b82:	98 0f       	add	r25, r24
    2b84:	92 30       	cpi	r25, 0x02	; 2
    2b86:	28 f0       	brcs	.+10     	; 0x2b92 <ProcessInput+0x7c4>
    2b88:	87 36       	cpi	r24, 0x67	; 103
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <ProcessInput+0x7c4>
    2b8c:	82 37       	cpi	r24, 0x72	; 114
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <ProcessInput+0x7c4>
    2b90:	d7 c2       	rjmp	.+1454   	; 0x3140 <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    2b92:	8e ef       	ldi	r24, 0xFE	; 254
    2b94:	8f 0d       	add	r24, r15
    2b96:	82 30       	cpi	r24, 0x02	; 2
    2b98:	08 f0       	brcs	.+2      	; 0x2b9c <ProcessInput+0x7ce>
    2b9a:	49 cc       	rjmp	.-1902   	; 0x242e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    2b9c:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2ba0:	ce 2e       	mov	r12, r30
    2ba2:	d1 2c       	mov	r13, r1
    2ba4:	d8 01       	movw	r26, r16
    2ba6:	af 0d       	add	r26, r15
    2ba8:	b1 1d       	adc	r27, r1
    2baa:	11 97       	sbiw	r26, 0x01	; 1
    2bac:	f6 01       	movw	r30, r12
    2bae:	ee 0f       	add	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	e7 53       	subi	r30, 0x37	; 55
    2bb4:	f6 4c       	sbci	r31, 0xC6	; 198
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	6c 91       	ld	r22, X
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	25 d8       	rcall	.-4022   	; 0x1c0c <FindChild>
    2bc2:	f6 01       	movw	r30, r12
    2bc4:	ee 0f       	add	r30, r30
    2bc6:	ff 1f       	adc	r31, r31
    2bc8:	e5 53       	subi	r30, 0x35	; 53
    2bca:	f6 4c       	sbci	r31, 0xC6	; 198
    2bcc:	80 83       	st	Z, r24
    2bce:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2bd0:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
    2bda:	e5 53       	subi	r30, 0x35	; 53
    2bdc:	f6 4c       	sbci	r31, 0xC6	; 198
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <ProcessInput+0x81a>
    2be6:	9a c2       	rjmp	.+1332   	; 0x311c <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    2be8:	b3 e0       	ldi	r27, 0x03	; 3
    2bea:	fb 12       	cpse	r15, r27
    2bec:	78 c1       	rjmp	.+752    	; 0x2ede <ProcessInput+0xb10>
    2bee:	f8 01       	movw	r30, r16
    2bf0:	20 81       	ld	r18, Z
    2bf2:	25 37       	cpi	r18, 0x75	; 117
    2bf4:	19 f0       	breq	.+6      	; 0x2bfc <ProcessInput+0x82e>
    2bf6:	27 36       	cpi	r18, 0x67	; 103
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <ProcessInput+0x82e>
    2bfa:	71 c1       	rjmp	.+738    	; 0x2ede <ProcessInput+0xb10>
    2bfc:	61 2c       	mov	r6, r1
    2bfe:	77 24       	eor	r7, r7
    2c00:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c02:	54 e6       	ldi	r21, 0x64	; 100
    2c04:	c5 2e       	mov	r12, r21
    2c06:	59 e7       	ldi	r21, 0x79	; 121
    2c08:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2c0a:	61 e2       	ldi	r22, 0x21	; 33
    2c0c:	a6 2e       	mov	r10, r22
    2c0e:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2c10:	88 24       	eor	r8, r8
    2c12:	83 94       	inc	r8
    2c14:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2c16:	e6 2c       	mov	r14, r6
    2c18:	f1 2c       	mov	r15, r1
    2c1a:	c7 01       	movw	r24, r14
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	9c 01       	movw	r18, r24
    2c22:	2d 5c       	subi	r18, 0xCD	; 205
    2c24:	37 4c       	sbci	r19, 0xC7	; 199
    2c26:	79 01       	movw	r14, r18
    2c28:	d9 01       	movw	r26, r18
    2c2a:	8d 91       	ld	r24, X+
    2c2c:	9c 91       	ld	r25, X
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	81 f0       	breq	.+32     	; 0x2c52 <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    2c32:	f8 01       	movw	r30, r16
    2c34:	61 81       	ldd	r22, Z+1	; 0x01
    2c36:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <CheckLetter>
    2c3a:	88 23       	and	r24, r24
    2c3c:	51 f0       	breq	.+20     	; 0x2c52 <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    2c3e:	6f e9       	ldi	r22, 0x9F	; 159
    2c40:	78 e3       	ldi	r23, 0x38	; 56
    2c42:	d7 01       	movw	r26, r14
    2c44:	8d 91       	ld	r24, X+
    2c46:	9c 91       	ld	r25, X
    2c48:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>
                                    x = 2;
    2c4c:	32 e0       	ldi	r19, 0x02	; 2
    2c4e:	63 2e       	mov	r6, r19
    2c50:	1e c0       	rjmp	.+60     	; 0x2c8e <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    2c52:	b1 e0       	ldi	r27, 0x01	; 1
    2c54:	6b 12       	cpse	r6, r27
    2c56:	1a c0       	rjmp	.+52     	; 0x2c8c <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c58:	e7 2d       	mov	r30, r7
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	df 01       	movw	r26, r30
    2c5e:	aa 0f       	add	r26, r26
    2c60:	bb 1f       	adc	r27, r27
    2c62:	a7 5f       	subi	r26, 0xF7	; 247
    2c64:	b6 4c       	sbci	r27, 0xC6	; 198
    2c66:	cd 92       	st	X+, r12
    2c68:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2c6a:	df 01       	movw	r26, r30
    2c6c:	aa 0f       	add	r26, r26
    2c6e:	bb 1f       	adc	r27, r27
    2c70:	a7 5b       	subi	r26, 0xB7	; 183
    2c72:	b6 4c       	sbci	r27, 0xC6	; 198
    2c74:	ad 92       	st	X+, r10
    2c76:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2c78:	ee 0f       	add	r30, r30
    2c7a:	ff 1f       	adc	r31, r31
    2c7c:	e7 57       	subi	r30, 0x77	; 119
    2c7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c80:	80 82       	st	Z, r8
    2c82:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2c84:	f8 01       	movw	r30, r16
    2c86:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2c88:	73 94       	inc	r7
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <ProcessInput+0x8c0>
    2c8c:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2c8e:	63 94       	inc	r6
    2c90:	f1 e0       	ldi	r31, 0x01	; 1
    2c92:	6f 16       	cp	r6, r31
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <ProcessInput+0x8ca>
    2c96:	bf cf       	rjmp	.-130    	; 0x2c16 <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2c98:	d8 01       	movw	r26, r16
    2c9a:	8c 91       	ld	r24, X
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <ProcessInput+0x8d4>
    2ca0:	76 c3       	rjmp	.+1772   	; 0x338e <ProcessInput+0xfc0>
                            PopulateObject(route[currDepth+1], &actObj1);
    2ca2:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	e5 53       	subi	r30, 0x35	; 53
    2cae:	f6 4c       	sbci	r31, 0xC6	; 198
    2cb0:	6a ec       	ldi	r22, 0xCA	; 202
    2cb2:	78 e3       	ldi	r23, 0x38	; 56
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2cbc:	e0 90 e8 38 	lds	r14, 0x38E8	; 0x8038e8 <actObj1.3989+0x1e>
    2cc0:	f0 90 e9 38 	lds	r15, 0x38E9	; 0x8038e9 <actObj1.3989+0x1f>
    2cc4:	b1 e0       	ldi	r27, 0x01	; 1
    2cc6:	eb 16       	cp	r14, r27
    2cc8:	f1 04       	cpc	r15, r1
    2cca:	09 f0       	breq	.+2      	; 0x2cce <ProcessInput+0x900>
    2ccc:	9a c0       	rjmp	.+308    	; 0x2e02 <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2cce:	98 01       	movw	r18, r16
    2cd0:	2e 5f       	subi	r18, 0xFE	; 254
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3989+0x10>
    2cdc:	90 91 db 38 	lds	r25, 0x38DB	; 0x8038db <actObj1.3989+0x11>
    2ce0:	0e 94 30 0c 	call	0x1860	; 0x1860 <ExtEERead>
                                if (data[2] == '1') {
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	42 81       	ldd	r20, Z+2	; 0x02
    2ce8:	21 e0       	ldi	r18, 0x01	; 1
    2cea:	27 0d       	add	r18, r7
    2cec:	87 2d       	mov	r24, r7
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	41 33       	cpi	r20, 0x31	; 49
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <ProcessInput+0x928>
    2cf4:	6b c0       	rjmp	.+214    	; 0x2dcc <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    2cf6:	30 91 aa 38 	lds	r19, 0x38AA	; 0x8038aa <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    2cfa:	51 ee       	ldi	r21, 0xE1	; 225
    2cfc:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cfe:	fc 01       	movw	r30, r24
    2d00:	ee 0f       	add	r30, r30
    2d02:	ff 1f       	adc	r31, r31
    2d04:	e7 5f       	subi	r30, 0xF7	; 247
    2d06:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    2d08:	54 30       	cpi	r21, 0x04	; 4
    2d0a:	60 f0       	brcs	.+24     	; 0x2d24 <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d0c:	44 e0       	ldi	r20, 0x04	; 4
    2d0e:	59 e7       	ldi	r21, 0x79	; 121
    2d10:	40 83       	st	Z, r20
    2d12:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2d14:	fc 01       	movw	r30, r24
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	e7 5b       	subi	r30, 0xB7	; 183
    2d1c:	f6 4c       	sbci	r31, 0xC6	; 198
    2d1e:	4a e1       	ldi	r20, 0x1A	; 26
    2d20:	50 e0       	ldi	r21, 0x00	; 0
    2d22:	64 c0       	rjmp	.+200    	; 0x2dec <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d24:	6e e8       	ldi	r22, 0x8E	; 142
    2d26:	75 e7       	ldi	r23, 0x75	; 117
    2d28:	60 83       	st	Z, r22
    2d2a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	e7 5b       	subi	r30, 0xB7	; 183
    2d34:	f6 4c       	sbci	r31, 0xC6	; 198
    2d36:	62 eb       	ldi	r22, 0xB2	; 178
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	60 83       	st	Z, r22
    2d3c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	fc 01       	movw	r30, r24
    2d44:	e7 57       	subi	r30, 0x77	; 119
    2d46:	f6 4c       	sbci	r31, 0xC6	; 198
    2d48:	e0 82       	st	Z, r14
    2d4a:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d4c:	82 2f       	mov	r24, r18
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	fc 01       	movw	r30, r24
    2d52:	ee 0f       	add	r30, r30
    2d54:	ff 1f       	adc	r31, r31
    2d56:	e7 5f       	subi	r30, 0xF7	; 247
    2d58:	f6 4c       	sbci	r31, 0xC6	; 198
    2d5a:	6b e5       	ldi	r22, 0x5B	; 91
    2d5c:	7a e7       	ldi	r23, 0x7A	; 122
    2d5e:	60 83       	st	Z, r22
    2d60:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2d62:	fc 01       	movw	r30, r24
    2d64:	ee 0f       	add	r30, r30
    2d66:	ff 1f       	adc	r31, r31
    2d68:	e7 5b       	subi	r30, 0xB7	; 183
    2d6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d6c:	62 e0       	ldi	r22, 0x02	; 2
    2d6e:	70 e0       	ldi	r23, 0x00	; 0
    2d70:	60 83       	st	Z, r22
    2d72:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e7 57       	subi	r30, 0x77	; 119
    2d7c:	f6 4c       	sbci	r31, 0xC6	; 198
    2d7e:	e0 82       	st	Z, r14
    2d80:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	87 0d       	add	r24, r7
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	f3 e0       	ldi	r31, 0x03	; 3
    2d8a:	7f 0e       	add	r7, r31
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	ee 0f       	add	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	e7 5f       	subi	r30, 0xF7	; 247
    2d94:	f6 4c       	sbci	r31, 0xC6	; 198
    2d96:	60 eb       	ldi	r22, 0xB0	; 176
    2d98:	78 e7       	ldi	r23, 0x78	; 120
    2d9a:	60 83       	st	Z, r22
    2d9c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2d9e:	fc 01       	movw	r30, r24
    2da0:	ee 0f       	add	r30, r30
    2da2:	ff 1f       	adc	r31, r31
    2da4:	e7 5b       	subi	r30, 0xB7	; 183
    2da6:	f6 4c       	sbci	r31, 0xC6	; 198
    2da8:	62 e1       	ldi	r22, 0x12	; 18
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	60 83       	st	Z, r22
    2dae:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	fc 01       	movw	r30, r24
    2db6:	e7 57       	subi	r30, 0x77	; 119
    2db8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dba:	e0 82       	st	Z, r14
    2dbc:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2dbe:	40 93 f8 38 	sts	0x38F8, r20	; 0x8038f8 <specialInput>
                                        specialInput[1] = item;
    2dc2:	30 93 f9 38 	sts	0x38F9, r19	; 0x8038f9 <specialInput+0x1>
                                        specialInput[2] = 0;
    2dc6:	10 92 fa 38 	sts	0x38FA, r1	; 0x8038fa <specialInput+0x2>
    2dca:	e1 c2       	rjmp	.+1474   	; 0x338e <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dcc:	fc 01       	movw	r30, r24
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
    2dd2:	e7 5f       	subi	r30, 0xF7	; 247
    2dd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd6:	40 e4       	ldi	r20, 0x40	; 64
    2dd8:	56 e7       	ldi	r21, 0x76	; 118
    2dda:	40 83       	st	Z, r20
    2ddc:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2dde:	fc 01       	movw	r30, r24
    2de0:	ee 0f       	add	r30, r30
    2de2:	ff 1f       	adc	r31, r31
    2de4:	e7 5b       	subi	r30, 0xB7	; 183
    2de6:	f6 4c       	sbci	r31, 0xC6	; 198
    2de8:	42 e4       	ldi	r20, 0x42	; 66
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	40 83       	st	Z, r20
    2dee:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	fc 01       	movw	r30, r24
    2df6:	e7 57       	subi	r30, 0x77	; 119
    2df8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dfa:	e0 82       	st	Z, r14
    2dfc:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    2dfe:	72 2e       	mov	r7, r18
    2e00:	c6 c2       	rjmp	.+1420   	; 0x338e <ProcessInput+0xfc0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    2e02:	90 91 d3 38 	lds	r25, 0x38D3	; 0x8038d3 <actObj1.3989+0x9>
    2e06:	80 91 aa 38 	lds	r24, 0x38AA	; 0x8038aa <actObj2.3990+0xb>
    2e0a:	98 13       	cpse	r25, r24
    2e0c:	2f c0       	rjmp	.+94     	; 0x2e6c <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2e0e:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x26>
    2e12:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x27>
    2e16:	ff 24       	eor	r15, r15
    2e18:	f3 94       	inc	r15
    2e1a:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e1c:	87 2d       	mov	r24, r7
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	fc 01       	movw	r30, r24
    2e22:	ee 0f       	add	r30, r30
    2e24:	ff 1f       	adc	r31, r31
    2e26:	e7 5f       	subi	r30, 0xF7	; 247
    2e28:	f6 4c       	sbci	r31, 0xC6	; 198
    2e2a:	40 91 e2 38 	lds	r20, 0x38E2	; 0x8038e2 <actObj1.3989+0x18>
    2e2e:	50 91 e3 38 	lds	r21, 0x38E3	; 0x8038e3 <actObj1.3989+0x19>
    2e32:	40 83       	st	Z, r20
    2e34:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2e36:	fc 01       	movw	r30, r24
    2e38:	ee 0f       	add	r30, r30
    2e3a:	ff 1f       	adc	r31, r31
    2e3c:	e7 5b       	subi	r30, 0xB7	; 183
    2e3e:	f6 4c       	sbci	r31, 0xC6	; 198
    2e40:	20 83       	st	Z, r18
    2e42:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	fc 01       	movw	r30, r24
    2e4a:	e7 57       	subi	r30, 0x77	; 119
    2e4c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e4e:	10 82       	st	Z, r1
    2e50:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    2e52:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x2a>
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    2e5c:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2e60:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0xa>
    2e64:	0e 94 e5 08 	call	0x11ca	; 0x11ca <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2e68:	7f 2c       	mov	r7, r15
    2e6a:	91 c2       	rjmp	.+1314   	; 0x338e <ProcessInput+0xfc0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    2e6c:	d8 01       	movw	r26, r16
    2e6e:	8c 91       	ld	r24, X
    2e70:	85 37       	cpi	r24, 0x75	; 117
    2e72:	99 f4       	brne	.+38     	; 0x2e9a <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e74:	87 2d       	mov	r24, r7
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	fc 01       	movw	r30, r24
    2e7a:	ee 0f       	add	r30, r30
    2e7c:	ff 1f       	adc	r31, r31
    2e7e:	e7 5f       	subi	r30, 0xF7	; 247
    2e80:	f6 4c       	sbci	r31, 0xC6	; 198
    2e82:	24 e0       	ldi	r18, 0x04	; 4
    2e84:	39 e7       	ldi	r19, 0x79	; 121
    2e86:	20 83       	st	Z, r18
    2e88:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	ee 0f       	add	r30, r30
    2e8e:	ff 1f       	adc	r31, r31
    2e90:	e7 5b       	subi	r30, 0xB7	; 183
    2e92:	f6 4c       	sbci	r31, 0xC6	; 198
    2e94:	2a e1       	ldi	r18, 0x1A	; 26
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	15 c0       	rjmp	.+42     	; 0x2ec4 <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2e9a:	87 36       	cpi	r24, 0x67	; 103
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <ProcessInput+0xad2>
    2e9e:	77 c2       	rjmp	.+1262   	; 0x338e <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ea0:	87 2d       	mov	r24, r7
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	ee 0f       	add	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	e7 5f       	subi	r30, 0xF7	; 247
    2eac:	f6 4c       	sbci	r31, 0xC6	; 198
    2eae:	2d ed       	ldi	r18, 0xDD	; 221
    2eb0:	36 e7       	ldi	r19, 0x76	; 118
    2eb2:	20 83       	st	Z, r18
    2eb4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	ee 0f       	add	r30, r30
    2eba:	ff 1f       	adc	r31, r31
    2ebc:	e7 5b       	subi	r30, 0xB7	; 183
    2ebe:	f6 4c       	sbci	r31, 0xC6	; 198
    2ec0:	28 e2       	ldi	r18, 0x28	; 40
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	20 83       	st	Z, r18
    2ec6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e7 57       	subi	r30, 0x77	; 119
    2ed0:	f6 4c       	sbci	r31, 0xC6	; 198
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	80 83       	st	Z, r24
    2ed8:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2eda:	73 94       	inc	r7
    2edc:	58 c2       	rjmp	.+1200   	; 0x338e <ProcessInput+0xfc0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2ede:	6a ec       	ldi	r22, 0xCA	; 202
    2ee0:	78 e3       	ldi	r23, 0x38	; 56
    2ee2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    2ee6:	f8 01       	movw	r30, r16
    2ee8:	80 81       	ld	r24, Z
    2eea:	84 37       	cpi	r24, 0x74	; 116
    2eec:	69 f5       	brne	.+90     	; 0x2f48 <ProcessInput+0xb7a>
    2eee:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0x8>
    2ef2:	83 fd       	sbrc	r24, 3
    2ef4:	4a c0       	rjmp	.+148    	; 0x2f8a <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ef6:	8e e1       	ldi	r24, 0x1E	; 30
    2ef8:	99 e7       	ldi	r25, 0x79	; 121
    2efa:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2efe:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2f02:	8e e1       	ldi	r24, 0x1E	; 30
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2f0a:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    2f16:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2f1a:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x1a>
    2f1e:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f22:	20 91 d6 38 	lds	r18, 0x38D6	; 0x8038d6 <actObj1.3989+0xc>
    2f26:	30 91 d7 38 	lds	r19, 0x38D7	; 0x8038d7 <actObj1.3989+0xd>
    2f2a:	20 93 0d 39 	sts	0x390D, r18	; 0x80390d <reactStr+0x4>
    2f2e:	30 93 0e 39 	sts	0x390E, r19	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2f32:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    2f36:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    2f3a:	10 92 8d 39 	sts	0x398D, r1	; 0x80398d <reactStr+0x84>
    2f3e:	10 92 8e 39 	sts	0x398E, r1	; 0x80398e <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2f42:	a3 e0       	ldi	r26, 0x03	; 3
    2f44:	7a 2e       	mov	r7, r26
    2f46:	23 c2       	rjmp	.+1094   	; 0x338e <ProcessInput+0xfc0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    2f48:	85 37       	cpi	r24, 0x75	; 117
    2f4a:	69 f4       	brne	.+26     	; 0x2f66 <ProcessInput+0xb98>
    2f4c:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0x8>
    2f50:	84 fd       	sbrc	r24, 4
    2f52:	1b c0       	rjmp	.+54     	; 0x2f8a <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f54:	84 e0       	ldi	r24, 0x04	; 4
    2f56:	99 e7       	ldi	r25, 0x79	; 121
    2f58:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2f5c:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2f60:	8a e1       	ldi	r24, 0x1A	; 26
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	f9 ca       	rjmp	.-2574   	; 0x2558 <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    2f66:	82 37       	cpi	r24, 0x72	; 114
    2f68:	69 f4       	brne	.+26     	; 0x2f84 <ProcessInput+0xbb6>
    2f6a:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0x8>
    2f6e:	85 fd       	sbrc	r24, 5
    2f70:	0c c0       	rjmp	.+24     	; 0x2f8a <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f72:	89 ee       	ldi	r24, 0xE9	; 233
    2f74:	98 e7       	ldi	r25, 0x78	; 120
    2f76:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2f7a:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2f7e:	8b e1       	ldi	r24, 0x1B	; 27
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	ea ca       	rjmp	.-2604   	; 0x2558 <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    2f84:	87 36       	cpi	r24, 0x67	; 103
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <ProcessInput+0xbbc>
    2f88:	52 ca       	rjmp	.-2908   	; 0x242e <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2f8a:	e0 90 e8 38 	lds	r14, 0x38E8	; 0x8038e8 <actObj1.3989+0x1e>
    2f8e:	f0 90 e9 38 	lds	r15, 0x38E9	; 0x8038e9 <actObj1.3989+0x1f>
    2f92:	f1 e0       	ldi	r31, 0x01	; 1
    2f94:	ef 16       	cp	r14, r31
    2f96:	f1 04       	cpc	r15, r1
    2f98:	11 f5       	brne	.+68     	; 0x2fde <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2f9a:	98 01       	movw	r18, r16
    2f9c:	2e 5f       	subi	r18, 0xFE	; 254
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	40 e0       	ldi	r20, 0x00	; 0
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3989+0x10>
    2fa8:	90 91 db 38 	lds	r25, 0x38DB	; 0x8038db <actObj1.3989+0x11>
    2fac:	0e 94 30 0c 	call	0x1860	; 0x1860 <ExtEERead>
                                if (data[2] == '1') {
    2fb0:	d8 01       	movw	r26, r16
    2fb2:	12 96       	adiw	r26, 0x02	; 2
    2fb4:	8c 91       	ld	r24, X
    2fb6:	81 33       	cpi	r24, 0x31	; 49
    2fb8:	09 f0       	breq	.+2      	; 0x2fbc <ProcessInput+0xbee>
    2fba:	8a cc       	rjmp	.-1772   	; 0x28d0 <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fbc:	83 e6       	ldi	r24, 0x63	; 99
    2fbe:	95 e7       	ldi	r25, 0x75	; 117
    2fc0:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2fc4:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2fc8:	8b e2       	ldi	r24, 0x2B	; 43
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2fd0:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2fd4:	e0 92 8b 39 	sts	0x398B, r14	; 0x80398b <reactStr+0x82>
    2fd8:	f0 92 8c 39 	sts	0x398C, r15	; 0x80398c <reactStr+0x83>
    2fdc:	c7 ca       	rjmp	.-2674   	; 0x256c <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    2fde:	e1 14       	cp	r14, r1
    2fe0:	f1 04       	cpc	r15, r1
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <ProcessInput+0xc18>
    2fe4:	59 c0       	rjmp	.+178    	; 0x3098 <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fe6:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3989+0x10>
    2fea:	90 91 db 38 	lds	r25, 0x38DB	; 0x8038db <actObj1.3989+0x11>
    2fee:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2ff2:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2ff6:	e0 92 4b 39 	sts	0x394B, r14	; 0x80394b <reactStr+0x42>
    2ffa:	f0 92 4c 39 	sts	0x394C, r15	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2ffe:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3002:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3006:	8b e5       	ldi	r24, 0x5B	; 91
    3008:	9a e7       	ldi	r25, 0x7A	; 122
    300a:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    300e:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    301a:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x84>
    3026:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    302a:	20 eb       	ldi	r18, 0xB0	; 176
    302c:	38 e7       	ldi	r19, 0x78	; 120
    302e:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x6>
    3032:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    3036:	22 e1       	ldi	r18, 0x12	; 18
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x46>
    303e:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    3042:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    3046:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    304a:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x20>
    304e:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x21>
    3052:	40 97       	sbiw	r24, 0x10	; 16
    3054:	30 f0       	brcs	.+12     	; 0x3062 <ProcessInput+0xc94>
    3056:	8f e0       	ldi	r24, 0x0F	; 15
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	80 93 ea 38 	sts	0x38EA, r24	; 0x8038ea <actObj1.3989+0x20>
    305e:	90 93 eb 38 	sts	0x38EB, r25	; 0x8038eb <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3062:	28 ef       	ldi	r18, 0xF8	; 248
    3064:	38 e3       	ldi	r19, 0x38	; 56
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	60 91 ea 38 	lds	r22, 0x38EA	; 0x8038ea <actObj1.3989+0x20>
    306c:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3989+0x12>
    3070:	90 91 dd 38 	lds	r25, 0x38DD	; 0x8038dd <actObj1.3989+0x13>
    3074:	0e 94 30 0c 	call	0x1860	; 0x1860 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3078:	68 ef       	ldi	r22, 0xF8	; 248
    307a:	78 e3       	ldi	r23, 0x38	; 56
    307c:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x20>
    3080:	0e 94 23 0c 	call	0x1846	; 0x1846 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3084:	e0 91 ea 38 	lds	r30, 0x38EA	; 0x8038ea <actObj1.3989+0x20>
    3088:	f0 91 eb 38 	lds	r31, 0x38EB	; 0x8038eb <actObj1.3989+0x21>
    308c:	e8 50       	subi	r30, 0x08	; 8
    308e:	f7 4c       	sbci	r31, 0xC7	; 199
    3090:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3092:	f4 e0       	ldi	r31, 0x04	; 4
    3094:	7f 2e       	mov	r7, r31
    3096:	7b c1       	rjmp	.+758    	; 0x338e <ProcessInput+0xfc0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3098:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0x7>
    309c:	0e 94 ef 08 	call	0x11de	; 0x11de <CheckState>
    30a0:	88 23       	and	r24, r24
    30a2:	01 f1       	breq	.+64     	; 0x30e4 <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    30a4:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x26>
    30a8:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ac:	20 91 e2 38 	lds	r18, 0x38E2	; 0x8038e2 <actObj1.3989+0x18>
    30b0:	30 91 e3 38 	lds	r19, 0x38E3	; 0x8038e3 <actObj1.3989+0x19>
    30b4:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    30b8:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    30bc:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    30c0:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    30c4:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    30c8:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    30cc:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x2a>
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    30d6:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    30da:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0xa>
    30de:	0e 94 e5 08 	call	0x11ca	; 0x11ca <UpdateState>
    30e2:	44 ca       	rjmp	.-2936   	; 0x256c <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    30e4:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3989+0x24>
    30e8:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ec:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3989+0x16>
    30f0:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3989+0x17>
    30f4:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    30f8:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    30fc:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3100:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3104:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3108:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    310c:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3989+0x29>
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    3116:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
    311a:	28 ca       	rjmp	.-2992   	; 0x256c <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    311c:	f8 01       	movw	r30, r16
    311e:	80 81       	ld	r24, Z
    3120:	84 37       	cpi	r24, 0x74	; 116
    3122:	11 f0       	breq	.+4      	; 0x3128 <ProcessInput+0xd5a>
    3124:	87 36       	cpi	r24, 0x67	; 103
    3126:	19 f4       	brne	.+6      	; 0x312e <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3128:	8c e3       	ldi	r24, 0x3C	; 60
    312a:	99 e7       	ldi	r25, 0x79	; 121
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <ProcessInput+0xd64>
    312e:	80 e5       	ldi	r24, 0x50	; 80
    3130:	99 e7       	ldi	r25, 0x79	; 121
    3132:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3136:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    313a:	84 e1       	ldi	r24, 0x14	; 20
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0c ca       	rjmp	.-3048   	; 0x2558 <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3140:	81 36       	cpi	r24, 0x61	; 97
    3142:	09 f0       	breq	.+2      	; 0x3146 <ProcessInput+0xd78>
    3144:	c5 cb       	rjmp	.-2166   	; 0x28d0 <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3146:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <specialPassed>
    314a:	82 30       	cpi	r24, 0x02	; 2
    314c:	08 f4       	brcc	.+2      	; 0x3150 <ProcessInput+0xd82>
    314e:	b3 c0       	rjmp	.+358    	; 0x32b6 <ProcessInput+0xee8>
                if (data[1] > 0) {
    3150:	d8 01       	movw	r26, r16
    3152:	11 96       	adiw	r26, 0x01	; 1
    3154:	2c 91       	ld	r18, X
    3156:	22 23       	and	r18, r18
    3158:	09 f4       	brne	.+2      	; 0x315c <ProcessInput+0xd8e>
    315a:	a4 c0       	rjmp	.+328    	; 0x32a4 <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    315c:	fe 01       	movw	r30, r28
    315e:	31 96       	adiw	r30, 0x01	; 1
    3160:	7f 01       	movw	r14, r30
    3162:	8a e0       	ldi	r24, 0x0A	; 10
    3164:	df 01       	movw	r26, r30
    3166:	1d 92       	st	X+, r1
    3168:	8a 95       	dec	r24
    316a:	e9 f7       	brne	.-6      	; 0x3166 <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    316c:	21 53       	subi	r18, 0x31	; 49
    316e:	f8 01       	movw	r30, r16
    3170:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3172:	32 81       	ldd	r19, Z+2	; 0x02
    3174:	31 53       	subi	r19, 0x31	; 49
    3176:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3178:	83 81       	ldd	r24, Z+3	; 0x03
    317a:	81 36       	cpi	r24, 0x61	; 97
    317c:	11 f4       	brne	.+4      	; 0x3182 <ProcessInput+0xdb4>
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	08 c0       	rjmp	.+16     	; 0x3192 <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    3182:	85 36       	cpi	r24, 0x65	; 101
    3184:	11 f4       	brne	.+4      	; 0x318a <ProcessInput+0xdbc>
    3186:	13 82       	std	Z+3, r1	; 0x03
    3188:	08 c0       	rjmp	.+16     	; 0x319a <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    318a:	86 36       	cpi	r24, 0x66	; 102
    318c:	21 f4       	brne	.+8      	; 0x3196 <ProcessInput+0xdc8>
    318e:	83 e0       	ldi	r24, 0x03	; 3
    3190:	f8 01       	movw	r30, r16
    3192:	83 83       	std	Z+3, r24	; 0x03
    3194:	02 c0       	rjmp	.+4      	; 0x319a <ProcessInput+0xdcc>
                    else data[3] = 2;
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    319a:	21 fd       	sbrc	r18, 1
    319c:	04 c0       	rjmp	.+8      	; 0x31a6 <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	dc 01       	movw	r26, r24
    31a4:	04 c0       	rjmp	.+8      	; 0x31ae <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 e1       	ldi	r26, 0x10	; 16
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    31ae:	20 ff       	sbrs	r18, 0
    31b0:	03 c0       	rjmp	.+6      	; 0x31b8 <ProcessInput+0xdea>
    31b2:	9f 5f       	subi	r25, 0xFF	; 255
    31b4:	af 4f       	sbci	r26, 0xFF	; 255
    31b6:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    31b8:	f8 01       	movw	r30, r16
    31ba:	23 81       	ldd	r18, Z+3	; 0x03
    31bc:	21 fd       	sbrc	r18, 1
    31be:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    31c0:	20 ff       	sbrs	r18, 0
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <ProcessInput+0xdfc>
    31c4:	40 96       	adiw	r24, 0x10	; 16
    31c6:	a1 1d       	adc	r26, r1
    31c8:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    31ca:	31 ff       	sbrs	r19, 1
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <ProcessInput+0xe06>
    31ce:	90 5f       	subi	r25, 0xF0	; 240
    31d0:	af 4f       	sbci	r26, 0xFF	; 255
    31d2:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    31d4:	30 ff       	sbrs	r19, 0
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <ProcessInput+0xe10>
    31d8:	01 96       	adiw	r24, 0x01	; 1
    31da:	a1 1d       	adc	r26, r1
    31dc:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    31de:	40 91 32 38 	lds	r20, 0x3832	; 0x803832 <whoami>
    31e2:	24 e0       	ldi	r18, 0x04	; 4
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	24 1b       	sub	r18, r20
    31e8:	31 09       	sbc	r19, r1
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	04 c0       	rjmp	.+8      	; 0x31f8 <ProcessInput+0xe2a>
    31f0:	66 0f       	add	r22, r22
    31f2:	77 1f       	adc	r23, r23
    31f4:	88 1f       	adc	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	2a 95       	dec	r18
    31fa:	d2 f7       	brpl	.-12     	; 0x31f0 <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31fc:	26 e0       	ldi	r18, 0x06	; 6
    31fe:	35 e7       	ldi	r19, 0x75	; 117
    3200:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    3204:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3208:	20 e2       	ldi	r18, 0x20	; 32
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	20 93 4b 39 	sts	0x394B, r18	; 0x80394b <reactStr+0x42>
    3210:	30 93 4c 39 	sts	0x394C, r19	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3214:	21 e0       	ldi	r18, 0x01	; 1
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	20 93 8b 39 	sts	0x398B, r18	; 0x80398b <reactStr+0x82>
    321c:	30 93 8c 39 	sts	0x398C, r19	; 0x80398c <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    3220:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    3222:	b5 2e       	mov	r11, r21
    3224:	ea e0       	ldi	r30, 0x0A	; 10
    3226:	4e 2e       	mov	r4, r30
    3228:	51 2c       	mov	r5, r1
    322a:	61 2c       	mov	r6, r1
    322c:	71 2c       	mov	r7, r1
    322e:	67 01       	movw	r12, r14
    3230:	cb 0c       	add	r12, r11
    3232:	d1 1c       	adc	r13, r1
    3234:	a3 01       	movw	r20, r6
    3236:	92 01       	movw	r18, r4
    3238:	59 d2       	rcall	.+1202   	; 0x36ec <__udivmodsi4>
    323a:	d6 01       	movw	r26, r12
    323c:	6c 93       	st	X, r22
                        answer /= 10;
    323e:	b9 01       	movw	r22, r18
    3240:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    3242:	61 15       	cp	r22, r1
    3244:	71 05       	cpc	r23, r1
    3246:	81 05       	cpc	r24, r1
    3248:	91 05       	cpc	r25, r1
    324a:	51 f4       	brne	.+20     	; 0x3260 <ProcessInput+0xe92>
    324c:	29 e0       	ldi	r18, 0x09	; 9
    324e:	c2 2e       	mov	r12, r18
    3250:	29 e3       	ldi	r18, 0x39	; 57
    3252:	d2 2e       	mov	r13, r18
    3254:	32 e0       	ldi	r19, 0x02	; 2
    3256:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3258:	88 24       	eor	r8, r8
    325a:	83 94       	inc	r8
    325c:	91 2c       	mov	r9, r1
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    3260:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    3262:	e5 cf       	rjmp	.-54     	; 0x322e <ProcessInput+0xe60>
    3264:	f2 e0       	ldi	r31, 0x02	; 2
    3266:	cf 0e       	add	r12, r31
    3268:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    326a:	29 e0       	ldi	r18, 0x09	; 9
    326c:	2b 15       	cp	r18, r11
    326e:	08 f4       	brcc	.+2      	; 0x3272 <ProcessInput+0xea4>
    3270:	8c c0       	rjmp	.+280    	; 0x338a <ProcessInput+0xfbc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3272:	73 94       	inc	r7
    3274:	f7 01       	movw	r30, r14
    3276:	eb 0d       	add	r30, r11
    3278:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    327a:	80 81       	ld	r24, Z
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	8d 52       	subi	r24, 0x2D	; 45
    3280:	9b 48       	sbci	r25, 0x8B	; 139
    3282:	f6 01       	movw	r30, r12
    3284:	82 83       	std	Z+2, r24	; 0x02
    3286:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    3288:	ee 5b       	subi	r30, 0xBE	; 190
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 82       	st	Z, r8
    328e:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    3290:	e0 5c       	subi	r30, 0xC0	; 192
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 82       	st	Z, r8
    3296:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3298:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0xa>
    329c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    32a0:	b3 94       	inc	r11
    32a2:	e0 cf       	rjmp	.-64     	; 0x3264 <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32a4:	86 e2       	ldi	r24, 0x26	; 38
    32a6:	95 e7       	ldi	r25, 0x75	; 117
    32a8:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    32ac:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    32b0:	8d e3       	ldi	r24, 0x3D	; 61
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	5e c0       	rjmp	.+188    	; 0x3372 <ProcessInput+0xfa4>
    32b6:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	e5 53       	subi	r30, 0x35	; 53
    32c2:	f6 4c       	sbci	r31, 0xC6	; 198
    32c4:	6a ec       	ldi	r22, 0xCA	; 202
    32c6:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    32c8:	81 30       	cpi	r24, 0x01	; 1
    32ca:	09 f0       	breq	.+2      	; 0x32ce <ProcessInput+0xf00>
    32cc:	46 c0       	rjmp	.+140    	; 0x335a <ProcessInput+0xf8c>
                PopulateObject(route[currDepth+1], &actObj1);
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
    32d2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    32d6:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0x7>
    32da:	0e 94 ef 08 	call	0x11de	; 0x11de <CheckState>
    32de:	88 23       	and	r24, r24
    32e0:	01 f1       	breq	.+64     	; 0x3322 <ProcessInput+0xf54>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    32e2:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x26>
    32e6:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32ea:	20 91 e2 38 	lds	r18, 0x38E2	; 0x8038e2 <actObj1.3989+0x18>
    32ee:	30 91 e3 38 	lds	r19, 0x38E3	; 0x8038e3 <actObj1.3989+0x19>
    32f2:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    32f6:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    32fa:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    32fe:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3302:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3306:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    330a:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x2a>
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    3314:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3318:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0xa>
    331c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <UpdateState>
    3320:	32 c0       	rjmp	.+100    	; 0x3386 <ProcessInput+0xfb8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3322:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3989+0x24>
    3326:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    332a:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3989+0x16>
    332e:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3989+0x17>
    3332:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    3336:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    333a:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    333e:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3342:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3346:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    334a:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3989+0x29>
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <effect>
    3354:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <effect+0x1>
    3358:	16 c0       	rjmp	.+44     	; 0x3386 <ProcessInput+0xfb8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3362:	8e e9       	ldi	r24, 0x9E	; 158
    3364:	98 e7       	ldi	r25, 0x78	; 120
    3366:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    336a:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    336e:	82 e1       	ldi	r24, 0x12	; 18
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3376:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    3382:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3386:	82 e0       	ldi	r24, 0x02	; 2
    3388:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    338a:	10 92 f8 38 	sts	0x38F8, r1	; 0x8038f8 <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    338e:	8b e5       	ldi	r24, 0x5B	; 91
    3390:	9a e7       	ldi	r25, 0x7A	; 122
    3392:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    3396:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    339a:	82 e0       	ldi	r24, 0x02	; 2
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    33a2:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    33ae:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    33b2:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <specialInput>
    33b6:	88 23       	and	r24, r24
    33b8:	19 f0       	breq	.+6      	; 0x33c0 <ProcessInput+0xff2>
    33ba:	70 92 08 39 	sts	0x3908, r7	; 0x803908 <responseList>
    33be:	9a c0       	rjmp	.+308    	; 0x34f4 <ProcessInput+0x1126>
    33c0:	87 2d       	mov	r24, r7
    33c2:	12 c0       	rjmp	.+36     	; 0x33e8 <ProcessInput+0x101a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33c4:	8b e5       	ldi	r24, 0x5B	; 91
    33c6:	9a e7       	ldi	r25, 0x7A	; 122
    33c8:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    33cc:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    33d8:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    33e4:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    33e8:	0e 94 bf 0c 	call	0x197e	; 0x197e <SetStandardResponse>
    33ec:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <responseList>
    33f0:	81 c0       	rjmp	.+258    	; 0x34f4 <ProcessInput+0x1126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33f2:	84 ed       	ldi	r24, 0xD4	; 212
    33f4:	99 e7       	ldi	r25, 0x79	; 121
    33f6:	b0 cd       	rjmp	.-1184   	; 0x2f58 <ProcessInput+0xb8a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    33f8:	b2 e0       	ldi	r27, 0x02	; 2
    33fa:	fb 12       	cpse	r15, r27
    33fc:	18 c8       	rjmp	.-4048   	; 0x242e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    33fe:	d8 01       	movw	r26, r16
    3400:	11 96       	adiw	r26, 0x01	; 1
    3402:	6c 91       	ld	r22, X
    3404:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <CheckLetter>
    3408:	88 23       	and	r24, r24
    340a:	09 f4       	brne	.+2      	; 0x340e <ProcessInput+0x1040>
    340c:	5b c0       	rjmp	.+182    	; 0x34c4 <ProcessInput+0x10f6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	9c 01       	movw	r18, r24
    3418:	2d 5c       	subi	r18, 0xCD	; 205
    341a:	37 4c       	sbci	r19, 0xC7	; 199
    341c:	79 01       	movw	r14, r18
    341e:	6a ec       	ldi	r22, 0xCA	; 202
    3420:	78 e3       	ldi	r23, 0x38	; 56
    3422:	d9 01       	movw	r26, r18
    3424:	8d 91       	ld	r24, X+
    3426:	9c 91       	ld	r25, X
    3428:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    342c:	84 ed       	ldi	r24, 0xD4	; 212
    342e:	97 e7       	ldi	r25, 0x77	; 119
    3430:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3434:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3438:	80 e1       	ldi	r24, 0x10	; 16
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3440:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    344c:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3450:	20 91 e4 38 	lds	r18, 0x38E4	; 0x8038e4 <actObj1.3989+0x1a>
    3454:	30 91 e5 38 	lds	r19, 0x38E5	; 0x8038e5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3458:	40 91 d6 38 	lds	r20, 0x38D6	; 0x8038d6 <actObj1.3989+0xc>
    345c:	50 91 d7 38 	lds	r21, 0x38D7	; 0x8038d7 <actObj1.3989+0xd>
    3460:	40 93 0d 39 	sts	0x390D, r20	; 0x80390d <reactStr+0x4>
    3464:	50 93 0e 39 	sts	0x390E, r21	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    3468:	20 93 4d 39 	sts	0x394D, r18	; 0x80394d <reactStr+0x44>
    346c:	30 93 4e 39 	sts	0x394E, r19	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    3470:	10 92 8d 39 	sts	0x398D, r1	; 0x80398d <reactStr+0x84>
    3474:	10 92 8e 39 	sts	0x398E, r1	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3478:	2b e5       	ldi	r18, 0x5B	; 91
    347a:	3a e7       	ldi	r19, 0x7A	; 122
    347c:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x6>
    3480:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    3484:	22 e0       	ldi	r18, 0x02	; 2
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x46>
    348c:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    3490:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    3494:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3498:	27 e9       	ldi	r18, 0x97	; 151
    349a:	37 e7       	ldi	r19, 0x77	; 119
    349c:	20 93 11 39 	sts	0x3911, r18	; 0x803911 <reactStr+0x8>
    34a0:	30 93 12 39 	sts	0x3912, r19	; 0x803912 <reactStr+0x9>
    reactStr[1][number]=length;
    34a4:	2d e3       	ldi	r18, 0x3D	; 61
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	20 93 51 39 	sts	0x3951, r18	; 0x803951 <reactStr+0x48>
    34ac:	30 93 52 39 	sts	0x3952, r19	; 0x803952 <reactStr+0x49>
    reactStr[2][number]=type;
    34b0:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <reactStr+0x88>
    34b4:	90 93 92 39 	sts	0x3992, r25	; 0x803992 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    34b8:	f7 01       	movw	r30, r14
    34ba:	10 82       	st	Z, r1
    34bc:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    34be:	f5 e0       	ldi	r31, 0x05	; 5
    34c0:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    34c2:	65 cf       	rjmp	.-310    	; 0x338e <ProcessInput+0xfc0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    34c4:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <inventory+0x2>
    34c8:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <inventory+0x3>
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	49 f0       	breq	.+18     	; 0x34e2 <ProcessInput+0x1114>
                        if (CheckLetter(inventory[x], data[1])) {
    34d0:	f8 01       	movw	r30, r16
    34d2:	61 81       	ldd	r22, Z+1	; 0x01
    34d4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <CheckLetter>
    34d8:	88 23       	and	r24, r24
    34da:	19 f0       	breq	.+6      	; 0x34e2 <ProcessInput+0x1114>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	98 cf       	rjmp	.-208    	; 0x3412 <ProcessInput+0x1044>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34e2:	84 e6       	ldi	r24, 0x64	; 100
    34e4:	99 e7       	ldi	r25, 0x79	; 121
    34e6:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    34ea:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    34ee:	81 e2       	ldi	r24, 0x21	; 33
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	32 c8       	rjmp	.-3996   	; 0x2558 <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    34f4:	d8 01       	movw	r26, r16
    34f6:	1c 92       	st	X, r1
    serRxDone = 0;
    34f8:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <serRxDone>
    RXCNT = 0;    
    34fc:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	2a 96       	adiw	r28, 0x0a	; 10
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	ff 90       	pop	r15
    3510:	ef 90       	pop	r14
    3512:	df 90       	pop	r13
    3514:	cf 90       	pop	r12
    3516:	bf 90       	pop	r11
    3518:	af 90       	pop	r10
    351a:	9f 90       	pop	r9
    351c:	8f 90       	pop	r8
    351e:	7f 90       	pop	r7
    3520:	6f 90       	pop	r6
    3522:	5f 90       	pop	r5
    3524:	4f 90       	pop	r4
    3526:	08 95       	ret

00003528 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3528:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    352a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <CheckSend>
    352e:	88 23       	and	r24, r24
    3530:	11 f0       	breq	.+4      	; 0x3536 <TextAdventure+0xe>
    3532:	c1 e0       	ldi	r28, 0x01	; 1
    3534:	11 c0       	rjmp	.+34     	; 0x3558 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3536:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <CheckResponse>
    353a:	81 11       	cpse	r24, r1
    353c:	fa cf       	rjmp	.-12     	; 0x3532 <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    353e:	8e e5       	ldi	r24, 0x5E	; 94
    3540:	98 e3       	ldi	r25, 0x38	; 56
    3542:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CheckInput>
    3546:	c8 2f       	mov	r28, r24
    3548:	81 11       	cpse	r24, r1
    354a:	05 c0       	rjmp	.+10     	; 0x3556 <TextAdventure+0x2e>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    354c:	8e e5       	ldi	r24, 0x5E	; 94
    354e:	98 e3       	ldi	r25, 0x38	; 56
    3550:	0e 94 e7 11 	call	0x23ce	; 0x23ce <ProcessInput>

    return 0;
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    3556:	c2 e0       	ldi	r28, 0x02	; 2

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);

    return 0;
    3558:	8c 2f       	mov	r24, r28
    355a:	cf 91       	pop	r28
    355c:	08 95       	ret

0000355e <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    355e:	0e 94 c6 03 	call	0x78c	; 0x78c <Setup>

    SerSpeed(0xff);
    3562:	8f ef       	ldi	r24, 0xFF	; 255
    3564:	0e 94 36 07 	call	0xe6c	; 0xe6c <SerSpeed>
    3568:	ae e6       	ldi	r26, 0x6E	; 110
    356a:	b7 eb       	ldi	r27, 0xB7	; 183
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	ed 91       	ld	r30, X+
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	e8 54       	subi	r30, 0x48	; 72
    3574:	f5 4c       	sbci	r31, 0xC5	; 197
    3576:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    3578:	15 96       	adiw	r26, 0x05	; 5
    357a:	ec 91       	ld	r30, X
    357c:	15 97       	sbiw	r26, 0x05	; 5
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	e8 54       	subi	r30, 0x48	; 72
    3582:	f5 4c       	sbci	r31, 0xC5	; 197
    3584:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    3586:	27 eb       	ldi	r18, 0xB7	; 183
    3588:	a4 37       	cpi	r26, 0x74	; 116
    358a:	b2 07       	cpc	r27, r18
    358c:	81 f7       	brne	.-32     	; 0x356e <main+0x10>
    358e:	e0 e6       	ldi	r30, 0x60	; 96
    3590:	f7 eb       	ldi	r31, 0xB7	; 183
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    3592:	91 e0       	ldi	r25, 0x01	; 1
    3594:	ef 01       	movw	r28, r30
    3596:	a5 81       	ldd	r26, Z+5	; 0x05
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	a8 54       	subi	r26, 0x48	; 72
    359c:	b5 4c       	sbci	r27, 0xC5	; 197
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	9c 93       	st	X, r25
    35a2:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    35a4:	a8 81       	ld	r26, Y
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	a8 54       	subi	r26, 0x48	; 72
    35aa:	b5 4c       	sbci	r27, 0xC5	; 197
    35ac:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    35ae:	27 eb       	ldi	r18, 0xB7	; 183
    35b0:	e5 36       	cpi	r30, 0x65	; 101
    35b2:	f2 07       	cpc	r31, r18
    35b4:	79 f7       	brne	.-34     	; 0x3594 <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }

    //"Others"
    iLED[EYE[G][R]] = 1;
    35b6:	e0 91 6c b7 	lds	r30, 0xB76C	; 0x80b76c <__bss_end+0x7c64>
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	e8 54       	subi	r30, 0x48	; 72
    35be:	f5 4c       	sbci	r31, 0xC5	; 197
    35c0:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    35c2:	e0 91 6d b7 	lds	r30, 0xB76D	; 0x80b76d <__bss_end+0x7c65>
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	e8 54       	subi	r30, 0x48	; 72
    35ca:	f5 4c       	sbci	r31, 0xC5	; 197
    35cc:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    35ce:	e0 91 6a b7 	lds	r30, 0xB76A	; 0x80b76a <__bss_end+0x7c62>
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	e8 54       	subi	r30, 0x48	; 72
    35d6:	f5 4c       	sbci	r31, 0xC5	; 197
    35d8:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    35da:	e0 91 6b b7 	lds	r30, 0xB76B	; 0x80b76b <__bss_end+0x7c63>
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	e8 54       	subi	r30, 0x48	; 72
    35e2:	f5 4c       	sbci	r31, 0xC5	; 197
    35e4:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    35e6:	e0 91 5e b7 	lds	r30, 0xB75E	; 0x80b75e <__bss_end+0x7c56>
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	e8 54       	subi	r30, 0x48	; 72
    35ee:	f5 4c       	sbci	r31, 0xC5	; 197
    35f0:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    35f2:	e0 91 5f b7 	lds	r30, 0xB75F	; 0x80b75f <__bss_end+0x7c57>
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	e8 54       	subi	r30, 0x48	; 72
    35fa:	f5 4c       	sbci	r31, 0xC5	; 197
    35fc:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    35fe:	e0 91 5d b7 	lds	r30, 0xB75D	; 0x80b75d <__bss_end+0x7c55>
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	e8 54       	subi	r30, 0x48	; 72
    3606:	f5 4c       	sbci	r31, 0xC5	; 197
    3608:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    360a:	e0 91 5c b7 	lds	r30, 0xB75C	; 0x80b75c <__bss_end+0x7c54>
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	e8 54       	subi	r30, 0x48	; 72
    3612:	f5 4c       	sbci	r31, 0xC5	; 197
    3614:	80 83       	st	Z, r24

    LoadGameState();
    3616:	0e 94 36 09 	call	0x126c	; 0x126c <LoadGameState>

    while (TRUE) {
        if (GenerateAudio()) {
    361a:	0e 94 c8 09 	call	0x1390	; 0x1390 <GenerateAudio>
    361e:	88 23       	and	r24, r24
    3620:	e1 f3       	breq	.-8      	; 0x361a <main+0xbc>
            buttonState = CheckButtons(buttonState);
    3622:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    3626:	0e 94 65 07 	call	0xeca	; 0xeca <CheckButtons>
    362a:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    362e:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3632:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3636:	82 31       	cpi	r24, 0x12	; 18
    3638:	19 f4       	brne	.+6      	; 0x3640 <main+0xe2>
    363a:	0e 94 56 07 	call	0xeac	; 0xeac <SelectAuIn>
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <main+0xe6>
    3640:	0e 94 47 07 	call	0xe8e	; 0xe8e <SelectTSens>

            //GenerateBlinks();

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3644:	71 df       	rcall	.-286    	; 0x3528 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3646:	0e 94 7e 02 	call	0x4fc	; 0x4fc <MagnetMaze>
            BastetDictates();
    364a:	0e 94 35 0b 	call	0x166a	; 0x166a <BastetDictates>
            LanyardCode();
    364e:	0e 94 9f 01 	call	0x33e	; 0x33e <LanyardCode>
            //MakeFriends();

            //Save progress
            SaveGameState();
    3652:	0e 94 44 08 	call	0x1088	; 0x1088 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3656:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <adcPhot>
    365a:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <adcPhot+0x1>
    365e:	0a 97       	sbiw	r24, 0x0a	; 10
    3660:	20 f4       	brcc	.+8      	; 0x366a <main+0x10c>
    3662:	61 e0       	ldi	r22, 0x01	; 1
    3664:	84 e7       	ldi	r24, 0x74	; 116
    3666:	0e 94 cb 08 	call	0x1196	; 0x1196 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    366a:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <adcPhot>
    366e:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <adcPhot+0x1>
    3672:	85 36       	cpi	r24, 0x65	; 101
    3674:	91 05       	cpc	r25, r1
    3676:	20 f0       	brcs	.+8      	; 0x3680 <main+0x122>
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	84 e7       	ldi	r24, 0x74	; 116
    367c:	0e 94 cb 08 	call	0x1196	; 0x1196 <WriteStatusBit>

            //Check temperature
            HotSummer();
    3680:	0e 94 63 09 	call	0x12c6	; 0x12c6 <HotSummer>
    3684:	ca cf       	rjmp	.-108    	; 0x361a <main+0xbc>

00003686 <__udivmodqi4>:
    3686:	99 1b       	sub	r25, r25
    3688:	79 e0       	ldi	r23, 0x09	; 9
    368a:	04 c0       	rjmp	.+8      	; 0x3694 <__udivmodqi4_ep>

0000368c <__udivmodqi4_loop>:
    368c:	99 1f       	adc	r25, r25
    368e:	96 17       	cp	r25, r22
    3690:	08 f0       	brcs	.+2      	; 0x3694 <__udivmodqi4_ep>
    3692:	96 1b       	sub	r25, r22

00003694 <__udivmodqi4_ep>:
    3694:	88 1f       	adc	r24, r24
    3696:	7a 95       	dec	r23
    3698:	c9 f7       	brne	.-14     	; 0x368c <__udivmodqi4_loop>
    369a:	80 95       	com	r24
    369c:	08 95       	ret

0000369e <__udivmodhi4>:
    369e:	aa 1b       	sub	r26, r26
    36a0:	bb 1b       	sub	r27, r27
    36a2:	51 e1       	ldi	r21, 0x11	; 17
    36a4:	07 c0       	rjmp	.+14     	; 0x36b4 <__udivmodhi4_ep>

000036a6 <__udivmodhi4_loop>:
    36a6:	aa 1f       	adc	r26, r26
    36a8:	bb 1f       	adc	r27, r27
    36aa:	a6 17       	cp	r26, r22
    36ac:	b7 07       	cpc	r27, r23
    36ae:	10 f0       	brcs	.+4      	; 0x36b4 <__udivmodhi4_ep>
    36b0:	a6 1b       	sub	r26, r22
    36b2:	b7 0b       	sbc	r27, r23

000036b4 <__udivmodhi4_ep>:
    36b4:	88 1f       	adc	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	5a 95       	dec	r21
    36ba:	a9 f7       	brne	.-22     	; 0x36a6 <__udivmodhi4_loop>
    36bc:	80 95       	com	r24
    36be:	90 95       	com	r25
    36c0:	bc 01       	movw	r22, r24
    36c2:	cd 01       	movw	r24, r26
    36c4:	08 95       	ret

000036c6 <__divmodhi4>:
    36c6:	97 fb       	bst	r25, 7
    36c8:	07 2e       	mov	r0, r23
    36ca:	16 f4       	brtc	.+4      	; 0x36d0 <__divmodhi4+0xa>
    36cc:	00 94       	com	r0
    36ce:	06 d0       	rcall	.+12     	; 0x36dc <__divmodhi4_neg1>
    36d0:	77 fd       	sbrc	r23, 7
    36d2:	08 d0       	rcall	.+16     	; 0x36e4 <__divmodhi4_neg2>
    36d4:	e4 df       	rcall	.-56     	; 0x369e <__udivmodhi4>
    36d6:	07 fc       	sbrc	r0, 7
    36d8:	05 d0       	rcall	.+10     	; 0x36e4 <__divmodhi4_neg2>
    36da:	3e f4       	brtc	.+14     	; 0x36ea <__divmodhi4_exit>

000036dc <__divmodhi4_neg1>:
    36dc:	90 95       	com	r25
    36de:	81 95       	neg	r24
    36e0:	9f 4f       	sbci	r25, 0xFF	; 255
    36e2:	08 95       	ret

000036e4 <__divmodhi4_neg2>:
    36e4:	70 95       	com	r23
    36e6:	61 95       	neg	r22
    36e8:	7f 4f       	sbci	r23, 0xFF	; 255

000036ea <__divmodhi4_exit>:
    36ea:	08 95       	ret

000036ec <__udivmodsi4>:
    36ec:	a1 e2       	ldi	r26, 0x21	; 33
    36ee:	1a 2e       	mov	r1, r26
    36f0:	aa 1b       	sub	r26, r26
    36f2:	bb 1b       	sub	r27, r27
    36f4:	fd 01       	movw	r30, r26
    36f6:	0d c0       	rjmp	.+26     	; 0x3712 <__udivmodsi4_ep>

000036f8 <__udivmodsi4_loop>:
    36f8:	aa 1f       	adc	r26, r26
    36fa:	bb 1f       	adc	r27, r27
    36fc:	ee 1f       	adc	r30, r30
    36fe:	ff 1f       	adc	r31, r31
    3700:	a2 17       	cp	r26, r18
    3702:	b3 07       	cpc	r27, r19
    3704:	e4 07       	cpc	r30, r20
    3706:	f5 07       	cpc	r31, r21
    3708:	20 f0       	brcs	.+8      	; 0x3712 <__udivmodsi4_ep>
    370a:	a2 1b       	sub	r26, r18
    370c:	b3 0b       	sbc	r27, r19
    370e:	e4 0b       	sbc	r30, r20
    3710:	f5 0b       	sbc	r31, r21

00003712 <__udivmodsi4_ep>:
    3712:	66 1f       	adc	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	88 1f       	adc	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	1a 94       	dec	r1
    371c:	69 f7       	brne	.-38     	; 0x36f8 <__udivmodsi4_loop>
    371e:	60 95       	com	r22
    3720:	70 95       	com	r23
    3722:	80 95       	com	r24
    3724:	90 95       	com	r25
    3726:	9b 01       	movw	r18, r22
    3728:	ac 01       	movw	r20, r24
    372a:	bd 01       	movw	r22, r26
    372c:	cf 01       	movw	r24, r30
    372e:	08 95       	ret

00003730 <_exit>:
    3730:	f8 94       	cli

00003732 <__stop_program>:
    3732:	ff cf       	rjmp	.-2      	; 0x3732 <__stop_program>
