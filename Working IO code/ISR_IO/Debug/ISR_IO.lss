
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00803800  00004056  0000410a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f9a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0000bf9a  00003f9a  0000404e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00803830  00803830  0000413a  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000413a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000416c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006cbd  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028b9  00000000  00000000  0000b1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ddd  00000000  00000000  0000da5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a04  00000000  00000000  00011838  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a89  00000000  00000000  0001223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000426e  00000000  00000000  00013cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  00017f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c7       	rjmp	.+3852   	; 0xf26 <__vector_6>
      1a:	00 00       	nop
      1c:	db c7       	rjmp	.+4022   	; 0xfd4 <__vector_7>
      1e:	00 00       	nop
      20:	c3 c5       	rjmp	.+2950   	; 0xba8 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c6       	rjmp	.+3092   	; 0xc4a <__vector_13>
      36:	00 00       	nop
      38:	3b c6       	rjmp	.+3190   	; 0xcb0 <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c6       	rjmp	.+3564   	; 0xe3e <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	1e c7       	rjmp	.+3644   	; 0xe96 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	71 c6       	rjmp	.+3298   	; 0xd50 <__vector_27>
      6e:	00 00       	nop
      70:	ca c6       	rjmp	.+3476   	; 0xe06 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	aa 0b       	sbc	r26, r26
      7e:	d8 0b       	sbc	r29, r24
      80:	df 0b       	sbc	r29, r31
      82:	8e 0c       	add	r8, r14
      84:	8e 0c       	add	r8, r14
      86:	f3 0b       	sbc	r31, r19
      88:	05 0c       	add	r0, r5
      8a:	30 0c       	add	r3, r0
      8c:	54 0c       	add	r5, r4

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	e6 e5       	ldi	r30, 0x56	; 86
      a2:	f0 e4       	ldi	r31, 0x40	; 64
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a0 33       	cpi	r26, 0x30	; 48
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a0 e3       	ldi	r26, 0x30	; 48
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a2 31       	cpi	r26, 0x12	; 18
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <main>
      c4:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      d0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     100:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     102:	8c 2f       	mov	r24, r28
     104:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
     108:	81 11       	cpse	r24, r1
     10a:	01 c0       	rjmp	.+2      	; 0x10e <MakeFriends+0x14>
     10c:	d0 e0       	ldi	r29, 0x00	; 0
     10e:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     110:	c8 36       	cpi	r28, 0x68	; 104
     112:	b9 f7       	brne	.-18     	; 0x102 <MakeFriends+0x8>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     114:	dd 23       	and	r29, r29
     116:	19 f0       	breq	.+6      	; 0x11e <MakeFriends+0x24>
     118:	8c e7       	ldi	r24, 0x7C	; 124
     11a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     11e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	20 f0       	brcs	.+8      	; 0x12e <MakeFriends+0x34>
        gameNow = FRIENDS; 
     126:	94 e0       	ldi	r25, 0x04	; 4
     128:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <gameNow>
     12c:	0c c0       	rjmp	.+24     	; 0x146 <MakeFriends+0x4c>
    }
    
    //Clear game state
    if ((progress == NO_OTHER) && (gameNow == FRIENDS)) {
     12e:	81 11       	cpse	r24, r1
     130:	0a c0       	rjmp	.+20     	; 0x146 <MakeFriends+0x4c>
     132:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <gameNow>
     136:	94 30       	cpi	r25, 0x04	; 4
     138:	31 f4       	brne	.+12     	; 0x146 <MakeFriends+0x4c>
        gameNow = TEXT; 
     13a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     13e:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     142:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
    }

    //Checking for headphones
    if (detHdPh) return 0;
     146:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <detHdPh>
     14a:	91 11       	cpse	r25, r1
     14c:	d3 c0       	rjmp	.+422    	; 0x2f4 <MakeFriends+0x1fa>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     14e:	81 11       	cpse	r24, r1
     150:	12 c0       	rjmp	.+36     	; 0x176 <MakeFriends+0x7c>
        setDAC[0] = whoami * 51;
     152:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     156:	93 e3       	ldi	r25, 0x33	; 51
     158:	89 9f       	mul	r24, r25
     15a:	80 2d       	mov	r24, r0
     15c:	11 24       	eor	r1, r1
     15e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	98 e3       	ldi	r25, 0x38	; 56
     166:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     16a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
     174:	0e c0       	rjmp	.+28     	; 0x192 <MakeFriends+0x98>
    } else {
        ++chkTmr;
     176:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3790>
     17a:	9f 5f       	subi	r25, 0xFF	; 255
     17c:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <chkTmr.3790>
        if (progress & NEXT){
     180:	98 2f       	mov	r25, r24
     182:	90 7f       	andi	r25, 0xF0	; 240
     184:	31 f0       	breq	.+12     	; 0x192 <MakeFriends+0x98>
            progress++;
            progress&=0x0f;
     186:	8f 5f       	subi	r24, 0xFF	; 255
     188:	8f 70       	andi	r24, 0x0F	; 15
     18a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3788>
            chkTmr = 0;
     18e:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3790>
        }
    }

    //Check for other badges
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     192:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     196:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	b9 01       	movw	r22, r18
     1a0:	6a 50       	subi	r22, 0x0A	; 10
     1a2:	71 09       	sbc	r23, r1
     1a4:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     1a8:	46 17       	cp	r20, r22
     1aa:	57 07       	cpc	r21, r23
     1ac:	5c f0       	brlt	.+22     	; 0x1c4 <MakeFriends+0xca>
     1ae:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	26 5f       	subi	r18, 0xF6	; 246
     1b6:	3f 4f       	sbci	r19, 0xFF	; 255
     1b8:	24 17       	cp	r18, r20
     1ba:	35 07       	cpc	r19, r21
     1bc:	1c f0       	brlt	.+6      	; 0x1c4 <MakeFriends+0xca>
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	08 f4       	brcc	.+2      	; 0x1c4 <MakeFriends+0xca>
     1c2:	3f c0       	rjmp	.+126    	; 0x242 <MakeFriends+0x148>
        if (progress == NO_OTHER) {
     1c4:	81 11       	cpse	r24, r1
     1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <MakeFriends+0xdc>
            if (chkTmr >= 8) {
     1c8:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     1cc:	88 30       	cpi	r24, 0x08	; 8
     1ce:	08 f4       	brcc	.+2      	; 0x1d2 <MakeFriends+0xd8>
     1d0:	91 c0       	rjmp	.+290    	; 0x2f4 <MakeFriends+0x1fa>
                progress |= NEXT;
     1d2:	80 ef       	ldi	r24, 0xF0	; 240
     1d4:	5f c0       	rjmp	.+190    	; 0x294 <MakeFriends+0x19a>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	41 f5       	brne	.+80     	; 0x22a <MakeFriends+0x130>
            jackIn = chkVolt250();
     1da:	77 df       	rcall	.-274    	; 0xca <chkVolt250>
     1dc:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3791>
            if (jackIn) {
     1e0:	88 23       	and	r24, r24
     1e2:	79 f1       	breq	.+94     	; 0x242 <MakeFriends+0x148>
                if (chkTmr >= SHORT_WAIT){
     1e4:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3790>
     1e8:	98 30       	cpi	r25, 0x08	; 8
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <MakeFriends+0xf4>
     1ec:	83 c0       	rjmp	.+262    	; 0x2f4 <MakeFriends+0x1fa>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     1ee:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     1f2:	91 30       	cpi	r25, 0x01	; 1
     1f4:	11 f4       	brne	.+4      	; 0x1fa <MakeFriends+0x100>
     1f6:	83 50       	subi	r24, 0x03	; 3
     1f8:	14 c0       	rjmp	.+40     	; 0x222 <MakeFriends+0x128>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     1fa:	92 30       	cpi	r25, 0x02	; 2
     1fc:	31 f4       	brne	.+12     	; 0x20a <MakeFriends+0x110>
     1fe:	83 30       	cpi	r24, 0x03	; 3
     200:	91 f0       	breq	.+36     	; 0x226 <MakeFriends+0x12c>
     202:	85 50       	subi	r24, 0x05	; 5
     204:	82 30       	cpi	r24, 0x02	; 2
     206:	e8 f4       	brcc	.+58     	; 0x242 <MakeFriends+0x148>
     208:	0e c0       	rjmp	.+28     	; 0x226 <MakeFriends+0x12c>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     20a:	93 30       	cpi	r25, 0x03	; 3
     20c:	39 f4       	brne	.+14     	; 0x21c <MakeFriends+0x122>
     20e:	9c ef       	ldi	r25, 0xFC	; 252
     210:	98 0f       	add	r25, r24
     212:	92 30       	cpi	r25, 0x02	; 2
     214:	40 f0       	brcs	.+16     	; 0x226 <MakeFriends+0x12c>
     216:	87 30       	cpi	r24, 0x07	; 7
     218:	a1 f4       	brne	.+40     	; 0x242 <MakeFriends+0x148>
     21a:	05 c0       	rjmp	.+10     	; 0x226 <MakeFriends+0x12c>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     21c:	94 30       	cpi	r25, 0x04	; 4
     21e:	89 f4       	brne	.+34     	; 0x242 <MakeFriends+0x148>
     220:	85 50       	subi	r24, 0x05	; 5
     222:	83 30       	cpi	r24, 0x03	; 3
     224:	70 f4       	brcc	.+28     	; 0x242 <MakeFriends+0x148>
                        progress |= NEXT;
     226:	81 ef       	ldi	r24, 0xF1	; 241
     228:	35 c0       	rjmp	.+106    	; 0x294 <MakeFriends+0x19a>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <MakeFriends+0x14e>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     22e:	83 30       	cpi	r24, 0x03	; 3
     230:	a1 f1       	breq	.+104    	; 0x29a <MakeFriends+0x1a0>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     232:	84 30       	cpi	r24, 0x04	; 4
     234:	09 f0       	breq	.+2      	; 0x238 <MakeFriends+0x13e>
     236:	5e c0       	rjmp	.+188    	; 0x2f4 <MakeFriends+0x1fa>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     238:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     23c:	80 34       	cpi	r24, 0x40	; 64
     23e:	08 f4       	brcc	.+2      	; 0x242 <MakeFriends+0x148>
     240:	59 c0       	rjmp	.+178    	; 0x2f4 <MakeFriends+0x1fa>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     242:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3788>
     246:	56 c0       	rjmp	.+172    	; 0x2f4 <MakeFriends+0x1fa>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     248:	87 e0       	ldi	r24, 0x07	; 7
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     250:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     254:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     258:	88 30       	cpi	r24, 0x08	; 8
     25a:	40 f0       	brcs	.+16     	; 0x26c <MakeFriends+0x172>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     25c:	2f ef       	ldi	r18, 0xFF	; 255
     25e:	44 e6       	ldi	r20, 0x64	; 100
     260:	68 e0       	ldi	r22, 0x08	; 8
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	0e 94 3e 09 	call	0x127c	; 0x127c <floatAround>
     268:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     26c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     270:	8a 3f       	cpi	r24, 0xFA	; 250
     272:	08 f4       	brcc	.+2      	; 0x276 <MakeFriends+0x17c>
     274:	3f c0       	rjmp	.+126    	; 0x2f4 <MakeFriends+0x1fa>
                candidate = jackIn-whoami;
     276:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     27a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <jackIn.3791>
     27e:	89 1b       	sub	r24, r25
     280:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <__data_end>
                if (candidate > whoami) {
     284:	98 17       	cp	r25, r24
     286:	18 f4       	brcc	.+6      	; 0x28e <MakeFriends+0x194>
                    setDAC[0] = 249;
     288:	89 ef       	ldi	r24, 0xF9	; 249
     28a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     28e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     292:	80 6f       	ori	r24, 0xF0	; 240
     294:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3788>
     298:	2d c0       	rjmp	.+90     	; 0x2f4 <MakeFriends+0x1fa>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     29a:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     29e:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2a0:	48 f1       	brcs	.+82     	; 0x2f4 <MakeFriends+0x1fa>
     2a2:	13 df       	rcall	.-474    	; 0xca <chkVolt250>
     2a4:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3791>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2a8:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <__data_end>
     2ac:	48 2f       	mov	r20, r24
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	20 91 3d 38 	lds	r18, 0x383D	; 0x80383d <whoami>
     2b4:	29 17       	cp	r18, r25
     2b6:	08 f4       	brcc	.+2      	; 0x2ba <MakeFriends+0x1c0>
     2b8:	29 2f       	mov	r18, r25
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	2b 5f       	subi	r18, 0xFB	; 251
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	42 17       	cp	r20, r18
     2c2:	53 07       	cpc	r21, r19
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <MakeFriends+0x1ce>
     2c6:	bd cf       	rjmp	.-134    	; 0x242 <MakeFriends+0x148>
                    UpdateState(99+candidate);
     2c8:	83 e6       	ldi	r24, 0x63	; 99
     2ca:	89 0f       	add	r24, r25
     2cc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                    UpdateState(99+whoami);
     2d0:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     2d4:	8d 59       	subi	r24, 0x9D	; 157
     2d6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                    
                    effect = 31;
     2da:	8f e1       	ldi	r24, 0x1F	; 31
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     2e2:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    WingBar(candidate, whoami);
     2e6:	60 91 3d 38 	lds	r22, 0x383D	; 0x80383d <whoami>
     2ea:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     2ee:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <WingBar>
     2f2:	cd cf       	rjmp	.-102    	; 0x28e <MakeFriends+0x194>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     302:	e6 e2       	ldi	r30, 0x26	; 38
     304:	f4 e0       	ldi	r31, 0x04	; 4
     306:	80 83       	st	Z, r24
     308:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     30c:	a1 e2       	ldi	r26, 0x21	; 33
     30e:	b4 e0       	ldi	r27, 0x04	; 4
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	9c 93       	st	X, r25
     314:	90 83       	st	Z, r25
     316:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     31a:	e0 e1       	ldi	r30, 0x10	; 16
     31c:	f8 e0       	ldi	r31, 0x08	; 8
     31e:	97 e0       	ldi	r25, 0x07	; 7
     320:	96 83       	std	Z+6, r25	; 0x06
     322:	98 e0       	ldi	r25, 0x08	; 8
     324:	94 83       	std	Z+4, r25	; 0x04
     326:	83 83       	std	Z+3, r24	; 0x03
     328:	8c 93       	st	X, r24
     32a:	85 81       	ldd	r24, Z+5	; 0x05
     32c:	81 60       	ori	r24, 0x01	; 1
     32e:	85 83       	std	Z+5, r24	; 0x05
     330:	85 81       	ldd	r24, Z+5	; 0x05
     332:	84 6c       	ori	r24, 0xC4	; 196
     334:	85 83       	std	Z+5, r24	; 0x05
     336:	08 95       	ret

00000338 <I2C_recover>:
     338:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     33c:	88 60       	ori	r24, 0x08	; 8
     33e:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     342:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     34c:	99 e0       	ldi	r25, 0x09	; 9
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     356:	30 e1       	ldi	r19, 0x10	; 16
     358:	3a 95       	dec	r19
     35a:	f1 f7       	brne	.-4      	; 0x358 <I2C_recover+0x20>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <I2C_recover+0x26>
     35e:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     362:	30 e1       	ldi	r19, 0x10	; 16
     364:	3a 95       	dec	r19
     366:	f1 f7       	brne	.-4      	; 0x364 <I2C_recover+0x2c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <I2C_recover+0x32>
     36a:	91 50       	subi	r25, 0x01	; 1
     36c:	89 f7       	brne	.-30     	; 0x350 <I2C_recover+0x18>
     36e:	28 e0       	ldi	r18, 0x08	; 8
     370:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     374:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     378:	92 e0       	ldi	r25, 0x02	; 2
     37a:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     37e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     382:	91 60       	ori	r25, 0x01	; 1
     384:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     388:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     38c:	94 6c       	ori	r25, 0xC4	; 196
     38e:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     392:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     396:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     39a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     39e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ac:	84 6c       	ori	r24, 0xC4	; 196
     3ae:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b2:	08 95       	ret

000003b4 <I2C_start>:
     3b4:	28 2f       	mov	r18, r24
     3b6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ba:	90 6c       	ori	r25, 0xC0	; 192
     3bc:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c4:	89 2f       	mov	r24, r25
     3c6:	84 70       	andi	r24, 0x04	; 4
     3c8:	92 fd       	sbrc	r25, 2
     3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <I2C_start+0x1e>
     3cc:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3d0:	08 95       	ret
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	08 95       	ret

000003d6 <I2C_wait_ACK>:
     3d6:	8c e0       	ldi	r24, 0x0C	; 12
     3d8:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
     3dc:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e0:	87 fd       	sbrc	r24, 7
     3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <I2C_wait_ACK+0x22>
     3e4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e8:	86 fd       	sbrc	r24, 6
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <I2C_wait_ACK+0x22>
     3ec:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     3f0:	81 11       	cpse	r24, r1
     3f2:	f4 cf       	rjmp	.-24     	; 0x3dc <I2C_wait_ACK+0x6>
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	08 95       	ret
     3f8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fc:	80 6c       	ori	r24, 0xC0	; 192
     3fe:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     402:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     406:	82 fd       	sbrc	r24, 2
     408:	09 c0       	rjmp	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     40a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40e:	83 fd       	sbrc	r24, 3
     410:	07 c0       	rjmp	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     416:	82 95       	swap	r24
     418:	81 70       	andi	r24, 0x01	; 1
     41a:	08 95       	ret
     41c:	84 e0       	ldi	r24, 0x04	; 4
     41e:	08 95       	ret
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	08 95       	ret

00000424 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     424:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     426:	8c e0       	ldi	r24, 0x0C	; 12
     428:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     42c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     430:	89 2f       	mov	r24, r25
     432:	83 70       	andi	r24, 0x03	; 3
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	11 f0       	breq	.+4      	; 0x43c <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     43c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     440:	97 fd       	sbrc	r25, 7
     442:	06 c0       	rjmp	.+12     	; 0x450 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     444:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <timeout_I2C>
     448:	91 11       	cpse	r25, r1
     44a:	f8 cf       	rjmp	.-16     	; 0x43c <I2C_read+0x18>
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     450:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     454:	90 6c       	ori	r25, 0xC0	; 192
     456:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     45a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     45e:	92 fd       	sbrc	r25, 2
     460:	1e c0       	rjmp	.+60     	; 0x49e <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     462:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     466:	93 fd       	sbrc	r25, 3
     468:	1d c0       	rjmp	.+58     	; 0x4a4 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     46a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     46e:	89 2f       	mov	r24, r25
     470:	80 71       	andi	r24, 0x10	; 16
     472:	94 fd       	sbrc	r25, 4
     474:	16 c0       	rjmp	.+44     	; 0x4a2 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     476:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     47a:	61 11       	cpse	r22, r1
     47c:	02 c0       	rjmp	.+4      	; 0x482 <I2C_read+0x5e>
     47e:	9b 7f       	andi	r25, 0xFB	; 251
     480:	01 c0       	rjmp	.+2      	; 0x484 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     482:	94 60       	ori	r25, 0x04	; 4
     484:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     488:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     48c:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     48e:	61 11       	cpse	r22, r1
     490:	09 c0       	rjmp	.+18     	; 0x4a4 <I2C_read+0x80>
     492:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     496:	92 60       	ori	r25, 0x02	; 2
     498:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     49c:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4a2:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     4a4:	08 95       	ret

000004a6 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     4a6:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     4a8:	8c e0       	ldi	r24, 0x0C	; 12
     4aa:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4ae:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b2:	93 70       	andi	r25, 0x03	; 3
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	b1 f4       	brne	.+44     	; 0x4e4 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4b8:	80 81       	ld	r24, Z
     4ba:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c2:	86 fd       	sbrc	r24, 6
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4c6:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     4ca:	81 11       	cpse	r24, r1
     4cc:	f8 cf       	rjmp	.-16     	; 0x4be <I2C_write+0x18>
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4d2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d6:	82 fd       	sbrc	r24, 2
     4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4da:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4de:	82 95       	swap	r24
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     4e4:	88 e0       	ldi	r24, 0x08	; 8
     4e6:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4e8:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     4ea:	08 95       	ret

000004ec <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     4ec:	e0 e1       	ldi	r30, 0x10	; 16
     4ee:	f8 e0       	ldi	r31, 0x08	; 8
     4f0:	84 81       	ldd	r24, Z+4	; 0x04
     4f2:	83 60       	ori	r24, 0x03	; 3
     4f4:	84 83       	std	Z+4, r24	; 0x04
     4f6:	08 95       	ret

000004f8 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	6b 01       	movw	r12, r22
     508:	f4 2e       	mov	r15, r20
     50a:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     50c:	18 2f       	mov	r17, r24
     50e:	11 0f       	add	r17, r17
     510:	81 2f       	mov	r24, r17
     512:	50 df       	rcall	.-352    	; 0x3b4 <I2C_start>
	if (status != 0) goto error;
     514:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     516:	2b c0       	rjmp	.+86     	; 0x56e <I2C_read_bytes+0x76>
     518:	5e df       	rcall	.-324    	; 0x3d6 <I2C_wait_ACK>
	if (status == 1) {
     51a:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     51c:	19 f4       	brne	.+6      	; 0x524 <I2C_read_bytes+0x2c>
     51e:	e6 df       	rcall	.-52     	; 0x4ec <I2C_stop>
		return 1;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	27 c0       	rjmp	.+78     	; 0x572 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     524:	81 11       	cpse	r24, r1
     526:	23 c0       	rjmp	.+70     	; 0x56e <I2C_read_bytes+0x76>
    while(reg_len > 0){
     528:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     52a:	49 f0       	breq	.+18     	; 0x53e <I2C_read_bytes+0x46>
     52c:	c6 01       	movw	r24, r12
     52e:	bb df       	rcall	.-138    	; 0x4a6 <I2C_write>
	    if (status != 0) goto error;
     530:	81 11       	cpse	r24, r1
     532:	1d c0       	rjmp	.+58     	; 0x56e <I2C_read_bytes+0x76>
        ++reg_ptr;
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	c8 1a       	sub	r12, r24
     538:	d8 0a       	sbc	r13, r24
        --reg_len;
     53a:	fa 94       	dec	r15
     53c:	f5 cf       	rjmp	.-22     	; 0x528 <I2C_read_bytes+0x30>
     53e:	01 34       	cpi	r16, 0x41	; 65
     540:	08 f0       	brcs	.+2      	; 0x544 <I2C_read_bytes+0x4c>
     542:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     544:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     546:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     54a:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     54c:	40 f0       	brcs	.+16     	; 0x55e <I2C_read_bytes+0x66>
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	ce 01       	movw	r24, r28
     552:	68 df       	rcall	.-304    	; 0x424 <I2C_read>
		if (status != 0) goto error;
     554:	81 11       	cpse	r24, r1
     556:	0b c0       	rjmp	.+22     	; 0x56e <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     558:	21 96       	adiw	r28, 0x01	; 1
     55a:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     55c:	f6 cf       	rjmp	.-20     	; 0x54a <I2C_read_bytes+0x52>
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     562:	60 df       	rcall	.-320    	; 0x424 <I2C_read>
     564:	81 11       	cpse	r24, r1
	I2C_stop();
     566:	03 c0       	rjmp	.+6      	; 0x56e <I2C_read_bytes+0x76>
     568:	c1 df       	rcall	.-126    	; 0x4ec <I2C_stop>
	return 0;
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     56e:	e4 de       	rcall	.-568    	; 0x338 <I2C_recover>
     570:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     572:	df 91       	pop	r29
}
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	08 95       	ret

00000582 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     582:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <lanyardPos>
    lanyardCnt      = 0;
     586:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
    lanyardState    = TRUE;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    ClearHackerLeds();
     590:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <ClearHackerLeds>

00000594 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     594:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     596:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	91 f4       	brne	.+36     	; 0x5c2 <LanyardCode+0x2e>
     59e:	6a e0       	ldi	r22, 0x0A	; 10
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <lanyardLastActive>
     5a6:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardLastActive+0x1>
     5aa:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <idleTimeout>
     5ae:	88 23       	and	r24, r24
     5b0:	41 f0       	breq	.+16     	; 0x5c2 <LanyardCode+0x2e>
        /* clean up maze game and go back to text game */
        initLanyard();
     5b2:	e7 df       	rcall	.-50     	; 0x582 <initLanyard>
        gameNow = TEXT;
     5b4:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     5b8:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     5bc:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
        return 0;
     5c0:	9b c0       	rjmp	.+310    	; 0x6f8 <LanyardCode+0x164>
    }

    if (CheckState(LANYARD_COMPLETED))
     5c2:	8b e7       	ldi	r24, 0x7B	; 123
     5c4:	35 d7       	rcall	.+3690   	; 0x1430 <CheckState>
     5c6:	81 11       	cpse	r24, r1
     5c8:	97 c0       	rjmp	.+302    	; 0x6f8 <LanyardCode+0x164>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5ca:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     5ce:	88 23       	and	r24, r24
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <LanyardCode+0x44>
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <LanyardCode+0x44>
     5d6:	90 c0       	rjmp	.+288    	; 0x6f8 <LanyardCode+0x164>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     5d8:	c0 91 c2 bf 	lds	r28, 0xBFC2	; 0x80bfc2 <__bss_end+0x84b0>
     5dc:	ec 2f       	mov	r30, r28
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5e4:	8f 3f       	cpi	r24, 0xFF	; 255
     5e6:	19 f0       	breq	.+6      	; 0x5ee <LanyardCode+0x5a>
     5e8:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <LanyardCode+0x5c>
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	ed 53       	subi	r30, 0x3D	; 61
     5f2:	f5 4c       	sbci	r31, 0xC5	; 197
     5f4:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     5f6:	8f 3f       	cpi	r24, 0xFF	; 255
     5f8:	09 f4       	brne	.+2      	; 0x5fc <LanyardCode+0x68>
     5fa:	7e c0       	rjmp	.+252    	; 0x6f8 <LanyardCode+0x164>
        return 0;

    if (buttonState == lastButtonState)
     5fc:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     600:	89 17       	cp	r24, r25
     602:	09 f4       	brne	.+2      	; 0x606 <LanyardCode+0x72>
     604:	79 c0       	rjmp	.+242    	; 0x6f8 <LanyardCode+0x164>
        return 0;

    lanyardLastActive = getClock();
     606:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <getClock>
     60a:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <lanyardLastActive>
     60e:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     612:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     616:	8f 3f       	cpi	r24, 0xFF	; 255
     618:	09 f0       	breq	.+2      	; 0x61c <LanyardCode+0x88>
     61a:	6e c0       	rjmp	.+220    	; 0x6f8 <LanyardCode+0x164>
        effect = 0x13f + (buttonState << 5);
     61c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     620:	20 e2       	ldi	r18, 0x20	; 32
     622:	82 9f       	mul	r24, r18
     624:	c0 01       	movw	r24, r0
     626:	11 24       	eor	r1, r1
     628:	81 5c       	subi	r24, 0xC1	; 193
     62a:	9e 4f       	sbci	r25, 0xFE	; 254
     62c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     630:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>

        if (gameNow != LANYARD)
     634:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     638:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     63a:	09 f0       	breq	.+2      	; 0x63e <LanyardCode+0xaa>
     63c:	a2 df       	rcall	.-188    	; 0x582 <initLanyard>
        gameNow = LANYARD;
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     644:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <lanyardPos>
     648:	e8 2f       	mov	r30, r24
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	e6 55       	subi	r30, 0x56	; 86
     64e:	f0 44       	sbci	r31, 0x40	; 64
     650:	20 81       	ld	r18, Z
     652:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     656:	29 13       	cpse	r18, r25
     658:	12 c0       	rjmp	.+36     	; 0x67e <LanyardCode+0xea>
            lanyardState &= TRUE;
     65a:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     65e:	91 70       	andi	r25, 0x01	; 1
     660:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     664:	e0 91 d1 bf 	lds	r30, 0xBFD1	; 0x80bfd1 <__bss_end+0x84bf>
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	ed 53       	subi	r30, 0x3D	; 61
     66c:	f5 4c       	sbci	r31, 0xC5	; 197
     66e:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     670:	e0 91 d0 bf 	lds	r30, 0xBFD0	; 0x80bfd0 <__bss_end+0x84be>
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	ed 53       	subi	r30, 0x3D	; 61
     678:	f5 4c       	sbci	r31, 0xC5	; 197
     67a:	10 82       	st	Z, r1
     67c:	09 c0       	rjmp	.+18     	; 0x690 <LanyardCode+0xfc>
        } else {
            lanyardState = FALSE;
     67e:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     682:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     684:	28 f4       	brcc	.+10     	; 0x690 <LanyardCode+0xfc>
     686:	7d df       	rcall	.-262    	; 0x582 <initLanyard>
                gameNow         = BASTET;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
                return 0;
     68e:	34 c0       	rjmp	.+104    	; 0x6f8 <LanyardCode+0x164>
            }
        }
        lanyardPos++;
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <lanyardPos>
        lanyardCnt++;            
     696:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <lanyardCnt>
     69a:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     69c:	94 30       	cpi	r25, 0x04	; 4
     69e:	18 f4       	brcc	.+6      	; 0x6a6 <LanyardCode+0x112>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     6a0:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <lanyardCnt>
     6a4:	29 c0       	rjmp	.+82     	; 0x6f8 <LanyardCode+0x164>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     6a6:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
            if (lanyardState == TRUE) {
     6aa:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6ae:	91 30       	cpi	r25, 0x01	; 1
     6b0:	e1 f4       	brne	.+56     	; 0x6ea <LanyardCode+0x156>
                if ((lanyardPos % 4) == 0) {
     6b2:	98 2f       	mov	r25, r24
     6b4:	93 70       	andi	r25, 0x03	; 3
     6b6:	69 f4       	brne	.+26     	; 0x6d2 <LanyardCode+0x13e>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     6b8:	e8 2f       	mov	r30, r24
     6ba:	e6 95       	lsr	r30
     6bc:	e6 95       	lsr	r30
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	ec 52       	subi	r30, 0x2C	; 44
     6c2:	f0 44       	sbci	r31, 0x40	; 64
     6c4:	e5 81       	ldd	r30, Z+5	; 0x05
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6cc:	ed 53       	subi	r30, 0x3D	; 61
     6ce:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     6d0:	90 83       	st	Z, r25
     6d2:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     6d4:	89 f4       	brne	.+34     	; 0x6f8 <LanyardCode+0x164>
     6d6:	8b e7       	ldi	r24, 0x7B	; 123
     6d8:	8a d6       	rcall	.+3348   	; 0x13ee <UpdateState>
                    iLED[CAT]       = 0;
     6da:	ec 2f       	mov	r30, r28
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ed 53       	subi	r30, 0x3D	; 61
     6e0:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     6e2:	10 82       	st	Z, r1
     6e4:	82 e4       	ldi	r24, 0x42	; 66
     6e6:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <LanyardCode+0x15c>
     6ea:	4b df       	rcall	.-362    	; 0x582 <initLanyard>
                effect = 0x21;
     6ec:	81 e2       	ldi	r24, 0x21	; 33
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     6f4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            }
        }
    }

    return 0;
}
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     6fe:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeHckrPos>
    mazePos = 0;
     702:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazePos>
    mazeCnt = 0;
     706:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
    mazeState = TRUE;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     710:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <inverted>
    effect = 0;
     714:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     718:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
     71c:	08 95       	ret

0000071e <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     71e:	97 ff       	sbrs	r25, 7
     720:	03 c0       	rjmp	.+6      	; 0x728 <showFieldStrength+0xa>
     722:	91 95       	neg	r25
     724:	81 95       	neg	r24
     726:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     728:	9c 01       	movw	r18, r24
     72a:	22 0f       	add	r18, r18
     72c:	33 1f       	adc	r19, r19
     72e:	29 37       	cpi	r18, 0x79	; 121
     730:	31 05       	cpc	r19, r1
     732:	1c f0       	brlt	.+6      	; 0x73a <showFieldStrength+0x1c>
        gameNow = MAZE;
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <gameNow>

    if (gameNow == MAZE) {
     73a:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <gameNow>
     73e:	41 30       	cpi	r20, 0x01	; 1
     740:	21 f5       	brne	.+72     	; 0x78a <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     742:	28 37       	cpi	r18, 0x78	; 120
     744:	31 05       	cpc	r19, r1
     746:	1c f4       	brge	.+6      	; 0x74e <showFieldStrength+0x30>
            WingBar(0,0);
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	1d c0       	rjmp	.+58     	; 0x788 <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     74e:	88 37       	cpi	r24, 0x78	; 120
     750:	91 05       	cpc	r25, r1
     752:	1c f4       	brge	.+6      	; 0x75a <showFieldStrength+0x3c>
            WingBar(1,1);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	17 c0       	rjmp	.+46     	; 0x788 <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     75a:	2c 32       	cpi	r18, 0x2C	; 44
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	34 07       	cpc	r19, r20
     760:	1c f4       	brge	.+6      	; 0x768 <showFieldStrength+0x4a>
            WingBar(2,2);
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	10 c0       	rjmp	.+32     	; 0x788 <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     768:	28 0f       	add	r18, r24
     76a:	39 1f       	adc	r19, r25
     76c:	28 35       	cpi	r18, 0x58	; 88
     76e:	32 40       	sbci	r19, 0x02	; 2
     770:	1c f4       	brge	.+6      	; 0x778 <showFieldStrength+0x5a>
            WingBar(3,3);
     772:	63 e0       	ldi	r22, 0x03	; 3
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	08 c0       	rjmp	.+16     	; 0x788 <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     778:	8c 32       	cpi	r24, 0x2C	; 44
     77a:	91 40       	sbci	r25, 0x01	; 1
     77c:	1c f4       	brge	.+6      	; 0x784 <showFieldStrength+0x66>
            WingBar(4,4);
     77e:	64 e0       	ldi	r22, 0x04	; 4
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	02 c0       	rjmp	.+4      	; 0x788 <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     784:	65 e0       	ldi	r22, 0x05	; 5
     786:	85 e0       	ldi	r24, 0x05	; 5
     788:	1e c7       	rjmp	.+3644   	; 0x15c6 <WingBar>
     78a:	08 95       	ret

0000078c <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     790:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	71 f4       	brne	.+28     	; 0x7b4 <MagnetMaze+0x28>
     798:	6a e0       	ldi	r22, 0x0A	; 10
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <mazeLastActive>
     7a0:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <mazeLastActive+0x1>
     7a4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <idleTimeout>
     7a8:	88 23       	and	r24, r24
     7aa:	21 f0       	breq	.+8      	; 0x7b4 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     7ac:	a8 df       	rcall	.-176    	; 0x6fe <initMaze>
        gameNow = TEXT;
     7ae:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     7b2:	e5 c0       	rjmp	.+458    	; 0x97e <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     7b4:	87 ef       	ldi	r24, 0xF7	; 247
     7b6:	3c d6       	rcall	.+3192   	; 0x1430 <CheckState>
     7b8:	81 11       	cpse	r24, r1
     7ba:	e1 c0       	rjmp	.+450    	; 0x97e <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7bc:	8d e7       	ldi	r24, 0x7D	; 125
     7be:	38 d6       	rcall	.+3184   	; 0x1430 <CheckState>
     7c0:	81 11       	cpse	r24, r1
     7c2:	dd c0       	rjmp	.+442    	; 0x97e <MagnetMaze+0x1f2>
     7c4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <MagnetMaze+0x42>
     7cc:	d8 c0       	rjmp	.+432    	; 0x97e <MagnetMaze+0x1f2>
     7ce:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <calHall>
        return 0;

    if (calHall == 0)
     7d2:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <calHall+0x1>
     7d6:	89 2b       	or	r24, r25
     7d8:	41 f4       	brne	.+16     	; 0x7ea <MagnetMaze+0x5e>
     7da:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
        calHall = adcHall;
     7de:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
     7e2:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <calHall>
     7e6:	90 93 ec 3a 	sts	0x3AEC, r25	; 0x803aec <calHall+0x1>
     7ea:	c0 91 bb 3a 	lds	r28, 0x3ABB	; 0x803abb <adcHall>

    int16_t valHall = adcHall - calHall;
     7ee:	d0 91 bc 3a 	lds	r29, 0x3ABC	; 0x803abc <adcHall+0x1>
     7f2:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <calHall>
     7f6:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <calHall+0x1>
     7fa:	c8 1b       	sub	r28, r24
     7fc:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     7fe:	ce 01       	movw	r24, r28
     800:	8e df       	rcall	.-228    	; 0x71e <showFieldStrength>
     802:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <curHallState>

    switch (curHallState) {
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	89 f0       	breq	.+34     	; 0x82c <MagnetMaze+0xa0>
     80a:	18 f0       	brcs	.+6      	; 0x812 <MagnetMaze+0x86>
     80c:	82 30       	cpi	r24, 0x02	; 2
     80e:	c1 f0       	breq	.+48     	; 0x840 <MagnetMaze+0xb4>
     810:	1f c0       	rjmp	.+62     	; 0x850 <MagnetMaze+0xc4>
     812:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     814:	9e ef       	ldi	r25, 0xFE	; 254
     816:	d9 07       	cpc	r29, r25
     818:	14 f4       	brge	.+4      	; 0x81e <MagnetMaze+0x92>
     81a:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     81c:	04 c0       	rjmp	.+8      	; 0x826 <MagnetMaze+0x9a>
     81e:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     820:	d1 40       	sbci	r29, 0x01	; 1
     822:	5c f0       	brlt	.+22     	; 0x83a <MagnetMaze+0xae>
     824:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     826:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <newHallState>
     82a:	12 c0       	rjmp	.+36     	; 0x850 <MagnetMaze+0xc4>
     82c:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	d9 07       	cpc	r29, r25
     832:	c4 f7       	brge	.-16     	; 0x824 <MagnetMaze+0x98>
     834:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     836:	df 4f       	sbci	r29, 0xFF	; 255
     838:	84 f3       	brlt	.-32     	; 0x81a <MagnetMaze+0x8e>
     83a:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     83e:	08 c0       	rjmp	.+16     	; 0x850 <MagnetMaze+0xc4>
     840:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     842:	9e ef       	ldi	r25, 0xFE	; 254
     844:	d9 07       	cpc	r29, r25
     846:	4c f3       	brlt	.-46     	; 0x81a <MagnetMaze+0x8e>
     848:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     84a:	d1 05       	cpc	r29, r1
     84c:	b4 f3       	brlt	.-20     	; 0x83a <MagnetMaze+0xae>
     84e:	ea cf       	rjmp	.-44     	; 0x824 <MagnetMaze+0x98>
     850:	c0 91 c2 bf 	lds	r28, 0xBFC2	; 0x80bfc2 <__bss_end+0x84b0>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     854:	ec 2f       	mov	r30, r28
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <newHallState>
     85c:	99 23       	and	r25, r25
     85e:	19 f0       	breq	.+6      	; 0x866 <MagnetMaze+0xda>
     860:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     864:	01 c0       	rjmp	.+2      	; 0x868 <MagnetMaze+0xdc>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	ed 53       	subi	r30, 0x3D	; 61
     86a:	f5 4c       	sbci	r31, 0xC5	; 197
     86c:	20 83       	st	Z, r18
     86e:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     870:	31 e0       	ldi	r19, 0x01	; 1
     872:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     876:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
     87a:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     87c:	09 f4       	brne	.+2      	; 0x880 <MagnetMaze+0xf4>
     87e:	7f c0       	rjmp	.+254    	; 0x97e <MagnetMaze+0x1f2>
     880:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     884:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazeLastActive>
     888:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <mazeLastActive+0x1>
     88c:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     890:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <newHallState>
     894:	91 11       	cpse	r25, r1
     896:	08 c0       	rjmp	.+16     	; 0x8a8 <MagnetMaze+0x11c>
     898:	88 23       	and	r24, r24
     89a:	31 f0       	breq	.+12     	; 0x8a8 <MagnetMaze+0x11c>
     89c:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <MagnetMaze+0x118>
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inverted>
     8a8:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <curHallState>

        curHallState = newHallState;
     8ac:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <MagnetMaze+0x126>
     8b0:	66 c0       	rjmp	.+204    	; 0x97e <MagnetMaze+0x1f2>
     8b2:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
            if (gameNow == TEXT)
     8b6:	81 11       	cpse	r24, r1
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <MagnetMaze+0x130>
                initMaze();
     8ba:	21 df       	rcall	.-446    	; 0x6fe <initMaze>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     8be:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
     8c2:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     8c6:	20 91 4c 38 	lds	r18, 0x384C	; 0x80384c <curHallState>
     8ca:	88 23       	and	r24, r24
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <MagnetMaze+0x146>
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	28 27       	eor	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <mazePos>
     8d8:	e8 2f       	mov	r30, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e0 5f       	subi	r30, 0xF0	; 240
     8de:	ff 43       	sbci	r31, 0x3F	; 63
     8e0:	40 81       	ld	r20, Z
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	24 17       	cp	r18, r20
     8e6:	35 07       	cpc	r19, r21
     8e8:	91 f4       	brne	.+36     	; 0x90e <MagnetMaze+0x182>
     8ea:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     8ee:	91 70       	andi	r25, 0x01	; 1
     8f0:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     8f4:	e0 91 d1 bf 	lds	r30, 0xBFD1	; 0x80bfd1 <__bss_end+0x84bf>
                iLED[EYE[R][L]] = 0;
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ed 53       	subi	r30, 0x3D	; 61
     8fc:	f5 4c       	sbci	r31, 0xC5	; 197
     8fe:	10 82       	st	Z, r1
     900:	e0 91 d0 bf 	lds	r30, 0xBFD0	; 0x80bfd0 <__bss_end+0x84be>
                iLED[EYE[R][R]] = 0;
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	ed 53       	subi	r30, 0x3D	; 61
     908:	f5 4c       	sbci	r31, 0xC5	; 197
     90a:	10 82       	st	Z, r1
     90c:	02 c0       	rjmp	.+4      	; 0x912 <MagnetMaze+0x186>
     90e:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     912:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     914:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <mazePos>
     918:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeCnt>
            mazeCnt++;            
     91c:	9f 5f       	subi	r25, 0xFF	; 255
     91e:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     920:	18 f4       	brcc	.+6      	; 0x928 <MagnetMaze+0x19c>
     922:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     926:	2b c0       	rjmp	.+86     	; 0x97e <MagnetMaze+0x1f2>
     928:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     92c:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     930:	91 30       	cpi	r25, 0x01	; 1
     932:	e1 f4       	brne	.+56     	; 0x96c <MagnetMaze+0x1e0>
     934:	90 91 49 38 	lds	r25, 0x3849	; 0x803849 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     938:	e9 2f       	mov	r30, r25
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	ec 52       	subi	r30, 0x2C	; 44
     93e:	f0 44       	sbci	r31, 0x40	; 64
     940:	e6 81       	ldd	r30, Z+6	; 0x06
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     948:	ed 53       	subi	r30, 0x3D	; 61
     94a:	f5 4c       	sbci	r31, 0xC5	; 197
     94c:	20 83       	st	Z, r18
     94e:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     950:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     954:	82 31       	cpi	r24, 0x12	; 18
     956:	99 f4       	brne	.+38     	; 0x97e <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     958:	8d e7       	ldi	r24, 0x7D	; 125
     95a:	49 d5       	rcall	.+2706   	; 0x13ee <UpdateState>
     95c:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	ed 53       	subi	r30, 0x3D	; 61
     962:	f5 4c       	sbci	r31, 0xC5	; 197
     964:	10 82       	st	Z, r1
                        effect = 0x42;
     966:	82 e4       	ldi	r24, 0x42	; 66
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	05 c0       	rjmp	.+10     	; 0x976 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     96c:	c8 de       	rcall	.-624    	; 0x6fe <initMaze>
     96e:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    gameNow   = TEXT;
     972:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     97a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
     97e:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <Setup>:
     986:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     988:	df 93       	push	r29
    cli();
     98a:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     98c:	88 ed       	ldi	r24, 0xD8	; 216
     98e:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     990:	c1 e0       	ldi	r28, 0x01	; 1
     992:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     996:	8a e4       	ldi	r24, 0x4A	; 74
     998:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     99c:	8c e7       	ldi	r24, 0x7C	; 124
     99e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     9a2:	9f e3       	ldi	r25, 0x3F	; 63
     9a4:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     9a8:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9ac:	80 68       	ori	r24, 0x80	; 128
     9ae:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     9b2:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9b6:	80 68       	ori	r24, 0x80	; 128
     9b8:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     9bc:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9c0:	80 68       	ori	r24, 0x80	; 128
     9c2:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     9c6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     9d0:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9d4:	80 68       	ori	r24, 0x80	; 128
     9d6:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     9da:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9de:	80 68       	ori	r24, 0x80	; 128
     9e0:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     9e4:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     9e8:	d2 e0       	ldi	r29, 0x02	; 2
     9ea:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     9ee:	2b e5       	ldi	r18, 0x5B	; 91
     9f0:	31 e0       	ldi	r19, 0x01	; 1
     9f2:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     9f6:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     9fa:	80 ea       	ldi	r24, 0xA0	; 160
     9fc:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     a00:	80 ec       	ldi	r24, 0xC0	; 192
     a02:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a0c:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a0e:	1d ba       	out	0x1d, r1	; 29
    GPIOR3 = 0;    //
     a10:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a12:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a1c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a20:	87 e7       	ldi	r24, 0x77	; 119
     a22:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a26:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a2a:	8b e0       	ldi	r24, 0x0B	; 11
     a2c:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     a30:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     a40:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a4c:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     a50:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     a54:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     a58:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     a5c:	8b e8       	ldi	r24, 0x8B	; 139
     a5e:	93 e0       	ldi	r25, 0x03	; 3
     a60:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a64:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     a68:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     a6c:	47 dc       	rcall	.-1906   	; 0x2fc <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     a6e:	82 e1       	ldi	r24, 0x12	; 18
     a70:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     a74:	80 e2       	ldi	r24, 0x20	; 32
     a76:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     a7a:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     a7e:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     a82:	84 e4       	ldi	r24, 0x44	; 68
     a84:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     a88:	8e e1       	ldi	r24, 0x1E	; 30
     a8a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     a8e:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     a92:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     a9c:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     aa0:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     aa4:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     aa8:	82 e5       	ldi	r24, 0x52	; 82
     aaa:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     ab4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     ab8:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     abc:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ac0:	81 60       	ori	r24, 0x01	; 1
     ac2:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     ac6:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     aca:	80 e4       	ldi	r24, 0x40	; 64
     acc:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     ad0:	80 e8       	ldi	r24, 0x80	; 128
     ad2:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     ad6:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ada:	81 60       	ori	r24, 0x01	; 1
     adc:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     ae0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ae4:	80 fd       	sbrc	r24, 0
     ae6:	fc cf       	rjmp	.-8      	; 0xae0 <Setup+0x15a>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     ae8:	80 e3       	ldi	r24, 0x30	; 48
     aea:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     aee:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     af2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     af6:	82 fd       	sbrc	r24, 2
     af8:	fc cf       	rjmp	.-8      	; 0xaf2 <Setup+0x16c>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	98 e7       	ldi	r25, 0x78	; 120
     afe:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b02:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b06:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b0a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b0e:	82 96       	adiw	r24, 0x22	; 34
     b10:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     b14:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b18:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b1c:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b20:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b24:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b28:	28 17       	cp	r18, r24
     b2a:	39 07       	cpc	r19, r25
     b2c:	70 f4       	brcc	.+28     	; 0xb4a <Setup+0x1c4>
     b2e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b32:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b36:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b3a:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b3e:	82 1b       	sub	r24, r18
     b40:	93 0b       	sbc	r25, r19
     b42:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     b46:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     b4a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b4e:	83 fd       	sbrc	r24, 3
     b50:	fc cf       	rjmp	.-8      	; 0xb4a <Setup+0x1c4>
    RTC_CMP            = tmp16bit;                         //Button timing
     b52:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b56:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b5a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b5e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     b6e:	88 e0       	ldi	r24, 0x08	; 8
     b70:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     b74:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b78:	80 fd       	sbrc	r24, 0
     b7a:	fc cf       	rjmp	.-8      	; 0xb74 <Setup+0x1ee>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     b7c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     b86:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     b90:	10 92 75 3a 	sts	0x3A75, r1	; 0x803a75 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     b94:	85 e7       	ldi	r24, 0x75	; 117
     b96:	9a e3       	ldi	r25, 0x3A	; 58
     b98:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     b9c:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>

    sei();
     ba0:	78 94       	sei
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	8f 93       	push	r24
     bb4:	9f 93       	push	r25
     bb6:	af 93       	push	r26
     bb8:	bf 93       	push	r27
     bba:	ef 93       	push	r30
     bbc:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     bc4:	84 e4       	ldi	r24, 0x44	; 68
     bc6:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     bca:	ec b3       	in	r30, 0x1c	; 28
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	e8 9f       	mul	r30, r24
     bd0:	f0 01       	movw	r30, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	ed 53       	subi	r30, 0x3D	; 61
     bd6:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     bd8:	a8 e2       	ldi	r26, 0x28	; 40
     bda:	ba e0       	ldi	r27, 0x0A	; 10
     bdc:	96 e0       	ldi	r25, 0x06	; 6
     bde:	81 91       	ld	r24, Z+
     be0:	8d 93       	st	X+, r24
     be2:	9a 95       	dec	r25
     be4:	e1 f7       	brne	.-8      	; 0xbde <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     be6:	8b e0       	ldi	r24, 0x0B	; 11
     be8:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     bec:	8c b3       	in	r24, 0x1c	; 28
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	58 f4       	brcc	.+22     	; 0xc08 <__vector_8+0x60>
        asm(
     bf2:	8c b3       	in	r24, 0x1c	; 28
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <__vector_8+0x52>
     bf8:	99 0f       	add	r25, r25
     bfa:	8a 95       	dec	r24
     bfc:	ea f7       	brpl	.-6      	; 0xbf8 <__vector_8+0x50>
     bfe:	99 b9       	out	0x09, r25	; 9
     c00:	8c b3       	in	r24, 0x1c	; 28
     c02:	83 95       	inc	r24
     c04:	8c bb       	out	0x1c, r24	; 28
     c06:	0a c0       	rjmp	.+20     	; 0xc1c <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c08:	8c b3       	in	r24, 0x1c	; 28
     c0a:	83 30       	cpi	r24, 0x03	; 3
     c0c:	21 f4       	brne	.+8      	; 0xc16 <__vector_8+0x6e>
     c0e:	2a 9a       	sbi	0x05, 2	; 5
     c10:	83 95       	inc	r24
     c12:	8c bb       	out	0x1c, r24	; 28
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <__vector_8+0x74>
     c16:	2e 9a       	sbi	0x05, 6	; 5
     c18:	88 27       	eor	r24, r24
     c1a:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c1c:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     c20:	88 23       	and	r24, r24
     c22:	29 f0       	breq	.+10     	; 0xc2e <__vector_8+0x86>
     c24:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
    if (*serTxAddr) {
     c5c:	e0 91 b9 3a 	lds	r30, 0x3AB9	; 0x803ab9 <serTxAddr>
     c60:	f0 91 ba 3a 	lds	r31, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     c64:	80 81       	ld	r24, Z
     c66:	88 23       	and	r24, r24
     c68:	91 f0       	breq	.+36     	; 0xc8e <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     c6a:	80 81       	ld	r24, Z
     c6c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     c70:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <serTxAddr>
     c74:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     c7e:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     c82:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c86:	80 62       	ori	r24, 0x20	; 32
     c88:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     c94:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     c9e:	ff 91       	pop	r31
     ca0:	ef 91       	pop	r30
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     cc8:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ccc:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cd0:	80 81       	ld	r24, Z
     cd2:	81 11       	cpse	r24, r1
     cd4:	08 c0       	rjmp	.+16     	; 0xce6 <__vector_14+0x36>
     cd6:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     cda:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     cde:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     ce2:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     ce6:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cea:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cee:	80 81       	ld	r24, Z
     cf0:	88 23       	and	r24, r24
     cf2:	e1 f0       	breq	.+56     	; 0xd2c <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     cf4:	20 81       	ld	r18, Z
     cf6:	40 91 b6 3a 	lds	r20, 0x3AB6	; 0x803ab6 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	2f 57       	subi	r18, 0x7F	; 127
     cfe:	31 09       	sbc	r19, r1
     d00:	42 9f       	mul	r20, r18
     d02:	c0 01       	movw	r24, r0
     d04:	43 9f       	mul	r20, r19
     d06:	90 0d       	add	r25, r0
     d08:	11 24       	eor	r1, r1
     d0a:	89 2f       	mov	r24, r25
     d0c:	99 0f       	add	r25, r25
     d0e:	99 0b       	sbc	r25, r25
     d10:	80 58       	subi	r24, 0x80	; 128
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d18:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d1c:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d26:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <__vector_14+0x82>
    } else {
        DAC0_DATA = 0x80;
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     d38:	ff 91       	pop	r31
     d3a:	ef 91       	pop	r30
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	8f 93       	push	r24
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
    if (serRxDone == 0){
     d60:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
     d64:	81 11       	cpse	r24, r1
     d66:	44 c0       	rjmp	.+136    	; 0xdf0 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     d68:	ed b3       	in	r30, 0x1d	; 29
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d70:	eb 58       	subi	r30, 0x8B	; 139
     d72:	f5 4c       	sbci	r31, 0xC5	; 197
     d74:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     d76:	ed b3       	in	r30, 0x1d	; 29
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	eb 58       	subi	r30, 0x8B	; 139
     d7c:	f5 4c       	sbci	r31, 0xC5	; 197
     d7e:	80 81       	ld	r24, Z
     d80:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     d84:	ed b3       	in	r30, 0x1d	; 29
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	eb 58       	subi	r30, 0x8B	; 139
     d8a:	f5 4c       	sbci	r31, 0xC5	; 197
     d8c:	80 81       	ld	r24, Z
     d8e:	8a 30       	cpi	r24, 0x0A	; 10
     d90:	39 f0       	breq	.+14     	; 0xda0 <__vector_27+0x50>
     d92:	ed b3       	in	r30, 0x1d	; 29
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	eb 58       	subi	r30, 0x8B	; 139
     d98:	f5 4c       	sbci	r31, 0xC5	; 197
     d9a:	80 81       	ld	r24, Z
     d9c:	8d 30       	cpi	r24, 0x0D	; 13
     d9e:	49 f4       	brne	.+18     	; 0xdb2 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     da0:	ed b3       	in	r30, 0x1d	; 29
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	eb 58       	subi	r30, 0x8B	; 139
     da6:	f5 4c       	sbci	r31, 0xC5	; 197
     da8:	10 82       	st	Z, r1
            serRxDone = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <serRxDone>
     db0:	1f c0       	rjmp	.+62     	; 0xdf0 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     db2:	ed b3       	in	r30, 0x1d	; 29
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	eb 58       	subi	r30, 0x8B	; 139
     db8:	f5 4c       	sbci	r31, 0xC5	; 197
     dba:	80 81       	ld	r24, Z
     dbc:	88 30       	cpi	r24, 0x08	; 8
     dbe:	39 f0       	breq	.+14     	; 0xdce <__vector_27+0x7e>
     dc0:	ed b3       	in	r30, 0x1d	; 29
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	eb 58       	subi	r30, 0x8B	; 139
     dc6:	f5 4c       	sbci	r31, 0xC5	; 197
     dc8:	80 81       	ld	r24, Z
     dca:	8f 37       	cpi	r24, 0x7F	; 127
     dcc:	59 f4       	brne	.+22     	; 0xde4 <__vector_27+0x94>
     dce:	8d b3       	in	r24, 0x1d	; 29
     dd0:	88 23       	and	r24, r24
     dd2:	41 f0       	breq	.+16     	; 0xde4 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     dd4:	ed b3       	in	r30, 0x1d	; 29
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	eb 58       	subi	r30, 0x8B	; 139
     dda:	f5 4c       	sbci	r31, 0xC5	; 197
     ddc:	10 82       	st	Z, r1
            --RXCNT;
     dde:	8d b3       	in	r24, 0x1d	; 29
     de0:	81 50       	subi	r24, 0x01	; 1
     de2:	05 c0       	rjmp	.+10     	; 0xdee <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     de4:	8d b3       	in	r24, 0x1d	; 29
     de6:	80 34       	cpi	r24, 0x40	; 64
     de8:	18 f4       	brcc	.+6      	; 0xdf0 <__vector_27+0xa0>
     dea:	8d b3       	in	r24, 0x1d	; 29
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     df0:	80 e8       	ldi	r24, 0x80	; 128
     df2:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	8f 91       	pop	r24
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	8f 93       	push	r24
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
    TCB0_CNT = 0;
     e16:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e1a:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e24:	e5 e0       	ldi	r30, 0x05	; 5
     e26:	f8 e0       	ldi	r31, 0x08	; 8
     e28:	80 81       	ld	r24, Z
     e2a:	8f 7d       	andi	r24, 0xDF	; 223
     e2c:	80 83       	st	Z, r24
};
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	8f 91       	pop	r24
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     e4c:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     e50:	81 11       	cpse	r24, r1
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <__vector_20+0x3a>
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn=ADC0_RESL;
     e54:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e58:	8e 31       	cpi	r24, 0x1E	; 30
     e5a:	49 f4       	brne	.+18     	; 0xe6e <__vector_20+0x30>
     e5c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e60:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e64:	80 93 ed 3a 	sts	0x3AED, r24	; 0x803aed <adcTemp>
     e68:	90 93 ee 3a 	sts	0x3AEE, r25	; 0x803aee <adcTemp+0x1>
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <__vector_20+0x44>
     e6e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e72:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <auIn>
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <__vector_20+0x44>
    } else --adc0Chg;
     e78:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     e7c:	81 50       	subi	r24, 0x01	; 1
     e7e:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	8f 93       	push	r24
     ea2:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     ea4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ea8:	81 11       	cpse	r24, r1
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     eac:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     eb0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     eb4:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcPhot>
     eb8:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	10 c0       	rjmp	.+32     	; 0xee0 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     ec0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	79 f4       	brne	.+30     	; 0xee6 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     ec8:	88 e0       	ldi	r24, 0x08	; 8
     eca:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     ece:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ed2:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ed6:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <adcHall>
     eda:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     ede:	84 e0       	ldi	r24, 0x04	; 4
     ee0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ee4:	10 c0       	rjmp	.+32     	; 0xf06 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     ee6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     eea:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     eee:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <adcBtns>
     ef2:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <adcBtns+0x1>
        if (A1CNT == 15){
     ef6:	8f b3       	in	r24, 0x1f	; 31
     ef8:	8f 30       	cpi	r24, 0x0F	; 15
     efa:	29 f4       	brne	.+10     	; 0xf06 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     efc:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f06:	8f b3       	in	r24, 0x1f	; 31
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	8f 70       	andi	r24, 0x0F	; 15
     f0e:	99 27       	eor	r25, r25
     f10:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     f38:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f3c:	81 ff       	sbrs	r24, 1
     f3e:	39 c0       	rjmp	.+114    	; 0xfb2 <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     f40:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     f44:	8f 3f       	cpi	r24, 0xFF	; 255
     f46:	29 f0       	breq	.+10     	; 0xf52 <__vector_6+0x2c>
     f48:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     f52:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f56:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f5a:	82 96       	adiw	r24, 0x22	; 34
     f5c:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     f60:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     f64:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f68:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f6c:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     f70:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	70 f4       	brcc	.+28     	; 0xf96 <__vector_6+0x70>
     f7a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f7e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f82:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     f86:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     f8a:	82 1b       	sub	r24, r18
     f8c:	93 0b       	sbc	r25, r19
     f8e:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     f92:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
     f96:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f9a:	83 fd       	sbrc	r24, 3
     f9c:	fc cf       	rjmp	.-8      	; 0xf96 <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
     f9e:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     fa2:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     fa6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     faa:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
     fb2:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <minuteMark>
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
     fe6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
     fea:	8f 91       	pop	r24
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
     ff6:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     ffa:	91 fd       	sbrc	r25, 1
     ffc:	fc cf       	rjmp	.-8      	; 0xff6 <EERead>
     ffe:	fb 01       	movw	r30, r22
    1000:	48 0f       	add	r20, r24

    while(size){
    1002:	84 17       	cp	r24, r20
    1004:	39 f0       	breq	.+14     	; 0x1014 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    1006:	a8 2f       	mov	r26, r24
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	bc 5e       	subi	r27, 0xEC	; 236
    100c:	9c 91       	ld	r25, X
    100e:	91 93       	st	Z+, r25
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	f7 cf       	rjmp	.-18     	; 0x1002 <EERead+0xc>
        --size;
    }
}
    1014:	08 95       	ret

00001016 <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1016:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1018:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    101a:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    101c:	44 23       	and	r20, r20
    101e:	09 f1       	breq	.+66     	; 0x1062 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1020:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1024:	51 fd       	sbrc	r21, 1
    1026:	fc cf       	rjmp	.-8      	; 0x1020 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1028:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    102a:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    102e:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    1030:	58 2f       	mov	r21, r24
    1032:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	db 01       	movw	r26, r22
    103c:	11 97       	sbiw	r26, 0x01	; 1
    103e:	ac 91       	ld	r26, X
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	fc 5e       	subi	r31, 0xEC	; 236
    1044:	a0 83       	st	Z, r26
            --size;
    1046:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1048:	19 f0       	breq	.+6      	; 0x1050 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    104a:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    104c:	5f 31       	cpi	r21, 0x1F	; 31
    104e:	81 f7       	brne	.-32     	; 0x1030 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    1050:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    1052:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    1056:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    105a:	52 ff       	sbrs	r21, 2
    105c:	df cf       	rjmp	.-66     	; 0x101c <EEWrite+0x6>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    1060:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret

00001066 <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1066:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1068:	9c 01       	movw	r18, r24
    106a:	2e 1b       	sub	r18, r30
    106c:	3f 0b       	sbc	r19, r31
    106e:	88 e0       	ldi	r24, 0x08	; 8
    1070:	48 9f       	mul	r20, r24
    1072:	a0 01       	movw	r20, r0
    1074:	11 24       	eor	r1, r1
    1076:	40 50       	subi	r20, 0x00	; 0
    1078:	50 44       	sbci	r21, 0x40	; 64
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    107a:	66 23       	and	r22, r22
    107c:	69 f0       	breq	.+26     	; 0x1098 <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    107e:	df 01       	movw	r26, r30
    1080:	a2 0f       	add	r26, r18
    1082:	b3 1f       	adc	r27, r19
    1084:	a7 70       	andi	r26, 0x07	; 7
    1086:	bb 27       	eor	r27, r27
    1088:	a4 0f       	add	r26, r20
    108a:	b5 1f       	adc	r27, r21
    108c:	80 81       	ld	r24, Z
    108e:	9c 91       	ld	r25, X
    1090:	98 27       	eor	r25, r24
    1092:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    1094:	61 50       	subi	r22, 0x01	; 1
    1096:	f1 cf       	rjmp	.-30     	; 0x107a <DecryptData+0x14>
    }
}
    1098:	08 95       	ret

0000109a <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <ExtEERead+0x16>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	d6 2e       	mov	r13, r22
    10b6:	c4 2e       	mov	r12, r20
    10b8:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    10ba:	7c 01       	movw	r14, r24
    10bc:	e8 94       	clt
    10be:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    10c0:	f9 82       	std	Y+1, r15	; 0x01
    10c2:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    10c4:	06 2f       	mov	r16, r22
    10c6:	42 e0       	ldi	r20, 0x02	; 2
    10c8:	be 01       	movw	r22, r28
    10ca:	6f 5f       	subi	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	80 e5       	ldi	r24, 0x50	; 80
    10d0:	13 da       	rcall	.-3034   	; 0x4f8 <I2C_read_bytes>
    10d2:	18 2f       	mov	r17, r24
    if (error) return error;
    10d4:	81 11       	cpse	r24, r1
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <ExtEERead+0x48>
    DecryptData(offset, length, type, data);
    10d8:	95 01       	movw	r18, r10
    10da:	4c 2d       	mov	r20, r12
    10dc:	6d 2d       	mov	r22, r13
    10de:	c7 01       	movw	r24, r14
    10e0:	c2 df       	rcall	.-124    	; 0x1066 <DecryptData>
    return 0;
}
    10e2:	81 2f       	mov	r24, r17
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	08 95       	ret

000010fe <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    10fe:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    1102:	22 23       	and	r18, r18
    1104:	59 f0       	breq	.+22     	; 0x111c <SerSend+0x1e>
        serTxAddr = addr;
    1106:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
    110a:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        serTxDone = 0;
    110e:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
    } else return 1;    //Error: Still sending data
    111c:	81 e0       	ldi	r24, 0x01	; 1
};
    111e:	08 95       	ret

00001120 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    1120:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    1122:	81 11       	cpse	r24, r1
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <SerSpeed+0x8>
    1126:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	82 1b       	sub	r24, r18
    112e:	91 09       	sbc	r25, r1
    1130:	98 2f       	mov	r25, r24
    1132:	88 27       	eor	r24, r24
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    113c:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    1140:	08 95       	ret

00001142 <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    1142:	82 e1       	ldi	r24, 0x12	; 18
    1144:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f6 e0       	ldi	r31, 0x06	; 6
    114c:	80 81       	ld	r24, Z
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1152:	8e e1       	ldi	r24, 0x1E	; 30
    1154:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    115e:	08 95       	ret

00001160 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    1160:	82 e2       	ldi	r24, 0x22	; 34
    1162:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    1166:	e0 e0       	ldi	r30, 0x00	; 0
    1168:	f6 e0       	ldi	r31, 0x06	; 6
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1170:	87 e0       	ldi	r24, 0x07	; 7
    1172:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    117c:	08 95       	ret

0000117e <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    117e:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    1182:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1186:	24 e0       	ldi	r18, 0x04	; 4
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	2a 95       	dec	r18
    118e:	e1 f7       	brne	.-8      	; 0x1188 <CheckButtons+0xa>
    1190:	99 27       	eor	r25, r25
    1192:	80 36       	cpi	r24, 0x60	; 96
    1194:	91 05       	cpc	r25, r1
    1196:	40 f4       	brcc	.+16     	; 0x11a8 <CheckButtons+0x2a>
    1198:	8f 34       	cpi	r24, 0x4F	; 79
    119a:	91 05       	cpc	r25, r1
    119c:	88 f4       	brcc	.+34     	; 0x11c0 <CheckButtons+0x42>
    119e:	c0 97       	sbiw	r24, 0x30	; 48
    11a0:	09 97       	sbiw	r24, 0x09	; 9
    11a2:	90 f4       	brcc	.+36     	; 0x11c8 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	11 c0       	rjmp	.+34     	; 0x11ca <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    11a8:	85 37       	cpi	r24, 0x75	; 117
    11aa:	91 05       	cpc	r25, r1
    11ac:	68 f0       	brcs	.+26     	; 0x11c8 <CheckButtons+0x4a>
    11ae:	8e 38       	cpi	r24, 0x8E	; 142
    11b0:	91 05       	cpc	r25, r1
    11b2:	40 f0       	brcs	.+16     	; 0x11c4 <CheckButtons+0x46>
    11b4:	8e 59       	subi	r24, 0x9E	; 158
    11b6:	91 09       	sbc	r25, r1
    11b8:	81 97       	sbiw	r24, 0x21	; 33
    11ba:	30 f4       	brcc	.+12     	; 0x11c8 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    11bc:	90 e0       	ldi	r25, 0x00	; 0
            break;
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    11c0:	93 e0       	ldi	r25, 0x03	; 3
            break;
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    11c4:	91 e0       	ldi	r25, 0x01	; 1
            break;
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    11ca:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <previousValue.3900>
    11ce:	98 17       	cp	r25, r24
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <CheckButtons+0x5a>
            previousValue = button;
    11d2:	90 93 24 38 	sts	0x3824, r25	; 0x803824 <previousValue.3900>
            return 0xFF;
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    11d8:	08 95       	ret

000011da <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    11da:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <state.3910>
    11de:	90 91 23 38 	lds	r25, 0x3823	; 0x803823 <state.3910+0x1>
    11e2:	9c 01       	movw	r18, r24
    11e4:	32 2f       	mov	r19, r18
    11e6:	22 27       	eor	r18, r18
    11e8:	32 95       	swap	r19
    11ea:	33 0f       	add	r19, r19
    11ec:	30 7e       	andi	r19, 0xE0	; 224
    11ee:	82 27       	eor	r24, r18
    11f0:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    11f2:	9c 01       	movw	r18, r24
    11f4:	23 2f       	mov	r18, r19
    11f6:	33 27       	eor	r19, r19
    11f8:	26 95       	lsr	r18
    11fa:	82 27       	eor	r24, r18
    11fc:	93 27       	eor	r25, r19
    state ^= (state << 7);
    11fe:	9c 01       	movw	r18, r24
    1200:	36 95       	lsr	r19
    1202:	32 2f       	mov	r19, r18
    1204:	22 27       	eor	r18, r18
    1206:	37 95       	ror	r19
    1208:	27 95       	ror	r18
    120a:	82 27       	eor	r24, r18
    120c:	93 27       	eor	r25, r19
    120e:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <state.3910>
    1212:	90 93 23 38 	sts	0x3823, r25	; 0x803823 <state.3910+0x1>
    return (state & 0xff);
}
    1216:	08 95       	ret

00001218 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	7b 01       	movw	r14, r22
    1228:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    122a:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    122e:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    1232:	e8 2f       	mov	r30, r24
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	31 97       	sbiw	r30, 0x01	; 1
    1238:	e7 70       	andi	r30, 0x07	; 7
    123a:	ff 27       	eor	r31, r31
    123c:	eb 5d       	subi	r30, 0xDB	; 219
    123e:	f7 4c       	sbci	r31, 0xC7	; 199
    1240:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    1242:	cb df       	rcall	.-106    	; 0x11da <lfsr>
    1244:	8d 21       	and	r24, r13
    1246:	c8 0f       	add	r28, r24
    1248:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    124a:	c7 df       	rcall	.-114    	; 0x11da <lfsr>
    124c:	8d 21       	and	r24, r13
    124e:	c8 1b       	sub	r28, r24
    1250:	d1 09       	sbc	r29, r1
    1252:	0c 17       	cp	r16, r28
    1254:	1d 07       	cpc	r17, r29
    1256:	08 f4       	brcc	.+2      	; 0x125a <floatSpeed+0x42>
    1258:	e8 01       	movw	r28, r16
    125a:	c7 01       	movw	r24, r14
    125c:	ec 16       	cp	r14, r28
    125e:	fd 06       	cpc	r15, r29
    1260:	08 f4       	brcc	.+2      	; 0x1264 <floatSpeed+0x4c>
    1262:	ce 01       	movw	r24, r28
    1264:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1268:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    126c:	df 91       	pop	r29
}
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	08 95       	ret

0000127c <floatAround>:
    127c:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	c8 2f       	mov	r28, r24
    1286:	d4 2f       	mov	r29, r20
    1288:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    128a:	e6 2f       	mov	r30, r22
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	31 97       	sbiw	r30, 0x01	; 1
    1290:	e7 70       	andi	r30, 0x07	; 7
    1292:	ff 27       	eor	r31, r31
    1294:	eb 5d       	subi	r30, 0xDB	; 219
    1296:	f7 4c       	sbci	r31, 0xC7	; 199
    1298:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    129a:	9f df       	rcall	.-194    	; 0x11da <lfsr>
    129c:	81 23       	and	r24, r17
    129e:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    12a0:	9c df       	rcall	.-200    	; 0x11da <lfsr>
    12a2:	81 23       	and	r24, r17
    12a4:	c8 1b       	sub	r28, r24
    12a6:	8c 2f       	mov	r24, r28
    12a8:	00 23       	and	r16, r16
    if (max){
    12aa:	41 f0       	breq	.+16     	; 0x12bc <floatAround+0x40>
    12ac:	9c 2f       	mov	r25, r28
    12ae:	0c 17       	cp	r16, r28
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <floatAround+0x38>
    12b2:	90 2f       	mov	r25, r16
    12b4:	8d 2f       	mov	r24, r29
    12b6:	d9 17       	cp	r29, r25
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <floatAround+0x40>
    12ba:	89 2f       	mov	r24, r25
    12bc:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	8d 17       	cp	r24, r29
    12c2:	10 f0       	brcs	.+4      	; 0x12c8 <floatAround+0x4c>
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	2d 2f       	mov	r18, r29
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	24 23       	and	r18, r20
    12ce:	35 23       	and	r19, r21
    12d0:	23 2b       	or	r18, r19
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <floatAround+0x5a>
    12d4:	8d 2f       	mov	r24, r29
    12d6:	df 91       	pop	r29

    return sample;
}
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <SaveGameState>:
    12e0:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    12e2:	df 92       	push	r13
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	64 97       	sbiw	r28, 0x14	; 20
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    12f8:	44 e1       	ldi	r20, 0x14	; 20
    12fa:	be 01       	movw	r22, r28
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	79 de       	rcall	.-782    	; 0xff6 <EERead>
    1304:	81 e6       	ldi	r24, 0x61	; 97
    1306:	c8 2e       	mov	r12, r24
    1308:	8a e3       	ldi	r24, 0x3A	; 58
    130a:	d8 2e       	mov	r13, r24
    130c:	8e 01       	movw	r16, r28
    130e:	0f 5f       	subi	r16, 0xFF	; 255
    1310:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1312:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    1314:	f8 01       	movw	r30, r16
    1316:	81 91       	ld	r24, Z+
    1318:	8f 01       	movw	r16, r30
    131a:	f6 01       	movw	r30, r12
    131c:	90 81       	ld	r25, Z
    131e:	98 13       	cpse	r25, r24
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1322:	f3 94       	inc	r15
    1324:	ff ef       	ldi	r31, 0xFF	; 255
    1326:	cf 1a       	sub	r12, r31
    1328:	df 0a       	sbc	r13, r31
    132a:	80 e1       	ldi	r24, 0x10	; 16
    132c:	f8 12       	cpse	r15, r24
    132e:	f2 cf       	rjmp	.-28     	; 0x1314 <SaveGameState+0x34>
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	b6 01       	movw	r22, r12
    1336:	8f 2d       	mov	r24, r15
    1338:	6e de       	rcall	.-804    	; 0x1016 <EEWrite>
    133a:	88 23       	and	r24, r24
    133c:	91 f3       	breq	.-28     	; 0x1322 <SaveGameState+0x42>
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	36 c0       	rjmp	.+108    	; 0x13ae <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    1342:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    1346:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    134a:	30 93 71 3a 	sts	0x3A71, r19	; 0x803a71 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    134e:	20 93 72 3a 	sts	0x3A72, r18	; 0x803a72 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    1352:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    1356:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    135a:	90 93 73 3a 	sts	0x3A73, r25	; 0x803a73 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    135e:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    1362:	89 89       	ldd	r24, Y+17	; 0x11
    1364:	9a 89       	ldd	r25, Y+18	; 0x12
    1366:	98 27       	eor	r25, r24
    1368:	89 27       	eor	r24, r25
    136a:	98 27       	eor	r25, r24
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	69 f4       	brne	.+26     	; 0x138c <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    1372:	8b 89       	ldd	r24, Y+19	; 0x13
    1374:	9c 89       	ldd	r25, Y+20	; 0x14
    1376:	98 27       	eor	r25, r24
    1378:	89 27       	eor	r24, r25
    137a:	98 27       	eor	r25, r24
    137c:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    1380:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    1384:	28 17       	cp	r18, r24
    1386:	39 07       	cpc	r19, r25
    1388:	49 f4       	brne	.+18     	; 0x139c <SaveGameState+0xbc>
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    138c:	42 e0       	ldi	r20, 0x02	; 2
    138e:	61 e7       	ldi	r22, 0x71	; 113
    1390:	7a e3       	ldi	r23, 0x3A	; 58
    1392:	80 e1       	ldi	r24, 0x10	; 16
    1394:	40 de       	rcall	.-896    	; 0x1016 <EEWrite>
    1396:	88 23       	and	r24, r24
    1398:	61 f3       	breq	.-40     	; 0x1372 <SaveGameState+0x92>
    139a:	d1 cf       	rjmp	.-94     	; 0x133e <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    139c:	42 e0       	ldi	r20, 0x02	; 2
    139e:	63 e7       	ldi	r22, 0x73	; 115
    13a0:	7a e3       	ldi	r23, 0x3A	; 58
    13a2:	82 e1       	ldi	r24, 0x12	; 18
    13a4:	38 de       	rcall	.-912    	; 0x1016 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	81 11       	cpse	r24, r1
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <SaveGameState+0xce>
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    13ae:	89 2f       	mov	r24, r25
    13b0:	64 96       	adiw	r28, 0x14	; 20
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	08 95       	ret

000013c6 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    13c6:	e8 2f       	mov	r30, r24
    13c8:	ef 77       	andi	r30, 0x7F	; 127
    13ca:	e6 95       	lsr	r30
    13cc:	e6 95       	lsr	r30
    13ce:	e6 95       	lsr	r30
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	ef 59       	subi	r30, 0x9F	; 159
    13d4:	f5 4c       	sbci	r31, 0xC5	; 197
    13d6:	20 81       	ld	r18, Z
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	87 70       	andi	r24, 0x07	; 7
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <ReadStatusBit+0x1e>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <ReadStatusBit+0x1a>
    13e8:	ca 01       	movw	r24, r20
}
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	08 95       	ret

000013ee <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    13ee:	e8 2f       	mov	r30, r24
    13f0:	ef 77       	andi	r30, 0x7F	; 127
    if (num) {
    13f2:	e9 f0       	breq	.+58     	; 0x142e <UpdateState+0x40>
    13f4:	e6 95       	lsr	r30
    13f6:	e6 95       	lsr	r30
    13f8:	e6 95       	lsr	r30
    13fa:	28 2f       	mov	r18, r24
    13fc:	27 70       	andi	r18, 0x07	; 7
        if (clearBit) {
            gameState[num>>3] &= ~(1<<(num&7));
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	ef 59       	subi	r30, 0x9F	; 159
    1402:	f5 4c       	sbci	r31, 0xC5	; 197
//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    if (num) {
        if (clearBit) {
    1404:	87 ff       	sbrs	r24, 7
    1406:	0a c0       	rjmp	.+20     	; 0x141c <UpdateState+0x2e>
            gameState[num>>3] &= ~(1<<(num&7));
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <UpdateState+0x22>
    140e:	88 0f       	add	r24, r24
    1410:	2a 95       	dec	r18
    1412:	ea f7       	brpl	.-6      	; 0x140e <UpdateState+0x20>
    1414:	80 95       	com	r24
    1416:	90 81       	ld	r25, Z
    1418:	89 23       	and	r24, r25
    141a:	08 c0       	rjmp	.+16     	; 0x142c <UpdateState+0x3e>
        } else {
            gameState[num>>3] |= 1<<(num&7);
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <UpdateState+0x36>
    1422:	88 0f       	add	r24, r24
    1424:	2a 95       	dec	r18
    1426:	ea f7       	brpl	.-6      	; 0x1422 <UpdateState+0x34>
    1428:	90 81       	ld	r25, Z
    142a:	89 2b       	or	r24, r25
    142c:	80 83       	st	Z, r24
    142e:	08 95       	ret

00001430 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    1430:	cf 93       	push	r28
    1432:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    1434:	8f 77       	andi	r24, 0x7F	; 127
    1436:	c7 df       	rcall	.-114    	; 0x13c6 <ReadStatusBit>
    1438:	2c 2f       	mov	r18, r28
    143a:	22 1f       	adc	r18, r18
    143c:	22 27       	eor	r18, r18
    143e:	22 1f       	adc	r18, r18
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	81 11       	cpse	r24, r1
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <CheckState+0x18>
    1446:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1448:	82 2f       	mov	r24, r18
    144a:	89 27       	eor	r24, r25
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    1450:	e3 e0       	ldi	r30, 0x03	; 3
    1452:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    1454:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    1456:	91 91       	ld	r25, Z+
    1458:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    145a:	ed 30       	cpi	r30, 0x0D	; 13
    145c:	91 e1       	ldi	r25, 0x11	; 17
    145e:	f9 07       	cpc	r31, r25
    1460:	d1 f7       	brne	.-12     	; 0x1456 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    1462:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	98 0f       	add	r25, r24
    1468:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <whoami>
    return id;
}
    146c:	08 95       	ret

0000146e <Reset>:

void Reset(){
    146e:	e1 e6       	ldi	r30, 0x61	; 97
    1470:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    1472:	11 92       	st	Z+, r1
    //Reset game progress (all zeros) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1474:	8a e3       	ldi	r24, 0x3A	; 58
    1476:	e5 37       	cpi	r30, 0x75	; 117
    1478:	f8 07       	cpc	r31, r24
    147a:	d9 f7       	brne	.-10     	; 0x1472 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    147c:	e9 df       	rcall	.-46     	; 0x1450 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    147e:	81 11       	cpse	r24, r1
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <Reset+0x18>
    1482:	8e e6       	ldi	r24, 0x6E	; 110
    1484:	0b c0       	rjmp	.+22     	; 0x149c <Reset+0x2e>
    else if (id == 1) UpdateState(111);
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	11 f4       	brne	.+4      	; 0x148e <Reset+0x20>
    148a:	8f e6       	ldi	r24, 0x6F	; 111
    148c:	07 c0       	rjmp	.+14     	; 0x149c <Reset+0x2e>
    else if (id == 2) UpdateState(112);
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	11 f4       	brne	.+4      	; 0x1496 <Reset+0x28>
    1492:	80 e7       	ldi	r24, 0x70	; 112
    1494:	03 c0       	rjmp	.+6      	; 0x149c <Reset+0x2e>
    else if (id == 3) UpdateState(113);
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	11 f4       	brne	.+4      	; 0x149e <Reset+0x30>
    149a:	81 e7       	ldi	r24, 0x71	; 113
    149c:	a8 df       	rcall	.-176    	; 0x13ee <UpdateState>

    //Write bit 0, must always be 1!
    UpdateState(0);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	a6 cf       	rjmp	.-180    	; 0x13ee <UpdateState>

000014a2 <LoadGameState>:
    14a2:	cf 93       	push	r28

    return sample;
}

//Load game status
void LoadGameState(){
    14a4:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    14a6:	44 e1       	ldi	r20, 0x14	; 20
    14a8:	61 e6       	ldi	r22, 0x61	; 97
    14aa:	7a e3       	ldi	r23, 0x3A	; 58
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	a3 dd       	rcall	.-1210   	; 0xff6 <EERead>
    14b0:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    14b2:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    14b4:	8c 2f       	mov	r24, r28
    14b6:	87 df       	rcall	.-242    	; 0x13c6 <ReadStatusBit>
    14b8:	d8 0f       	add	r29, r24
    14ba:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    14bc:	c2 37       	cpi	r28, 0x72	; 114
    14be:	d1 f7       	brne	.-12     	; 0x14b4 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    14c0:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <LoadGameState+0x26>
    14c4:	d4 df       	rcall	.-88     	; 0x146e <Reset>
    } else getID();
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <LoadGameState+0x28>
    14c8:	c3 df       	rcall	.-122    	; 0x1450 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    14ca:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0x10>
    14ce:	90 91 72 3a 	lds	r25, 0x3A72	; 0x803a72 <gameState+0x11>
    14d2:	98 27       	eor	r25, r24
    14d4:	89 27       	eor	r24, r25
    14d6:	98 27       	eor	r25, r24
    14d8:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    14dc:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    14e0:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x12>
    14e4:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x13>
    14e8:	98 27       	eor	r25, r24
    14ea:	89 27       	eor	r24, r25
    14ec:	98 27       	eor	r25, r24
    14ee:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    14f2:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <HotSummer>:
    //Write bit 0, must always be 1!
    UpdateState(0);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    14fc:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    14fe:	86 e7       	ldi	r24, 0x76	; 118
    1500:	97 df       	rcall	.-210    	; 0x1430 <CheckState>
    1502:	c8 2f       	mov	r28, r24
    1504:	88 23       	and	r24, r24
    1506:	81 f0       	breq	.+32     	; 0x1528 <HotSummer+0x2c>
        iLED[SCARAB[R]] = 0;
    1508:	e0 91 c4 bf 	lds	r30, 0xBFC4	; 0x80bfc4 <__bss_end+0x84b2>
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	ed 53       	subi	r30, 0x3D	; 61
    1510:	f5 4c       	sbci	r31, 0xC5	; 197
    1512:	10 82       	st	Z, r1
        iLED[SCARAB[G]] = dimValue;
    1514:	e0 91 c5 bf 	lds	r30, 0xBFC5	; 0x80bfc5 <__bss_end+0x84b3>
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    151e:	ed 53       	subi	r30, 0x3D	; 61
    1520:	f5 4c       	sbci	r31, 0xC5	; 197
    1522:	80 83       	st	Z, r24
        return 1;
    1524:	c1 e0       	ldi	r28, 0x01	; 1
    1526:	4c c0       	rjmp	.+152    	; 0x15c0 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    1528:	85 e7       	ldi	r24, 0x75	; 117
    152a:	82 df       	rcall	.-252    	; 0x1430 <CheckState>
    152c:	88 23       	and	r24, r24
    152e:	59 f1       	breq	.+86     	; 0x1586 <HotSummer+0x8a>
        iLED[SCARAB[R]] = dimValue;
    1530:	e0 91 c4 bf 	lds	r30, 0xBFC4	; 0x80bfc4 <__bss_end+0x84b2>
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    153a:	ed 53       	subi	r30, 0x3D	; 61
    153c:	f5 4c       	sbci	r31, 0xC5	; 197
    153e:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    1540:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <cooledDown.3965>
    1544:	88 23       	and	r24, r24
    1546:	79 f0       	breq	.+30     	; 0x1566 <HotSummer+0x6a>
    1548:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    154c:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1550:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1554:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1558:	80 96       	adiw	r24, 0x20	; 32
    155a:	28 17       	cp	r18, r24
    155c:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    155e:	18 f0       	brcs	.+6      	; 0x1566 <HotSummer+0x6a>
    1560:	86 e7       	ldi	r24, 0x76	; 118
    1562:	45 df       	rcall	.-374    	; 0x13ee <UpdateState>
            return 0;
    1564:	2d c0       	rjmp	.+90     	; 0x15c0 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1566:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    156a:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    156e:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1572:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1576:	08 96       	adiw	r24, 0x08	; 8
    1578:	82 17       	cp	r24, r18
    157a:	93 07       	cpc	r25, r19
    157c:	08 f1       	brcs	.+66     	; 0x15c0 <HotSummer+0xc4>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <cooledDown.3965>
    1584:	1d c0       	rjmp	.+58     	; 0x15c0 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1586:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    158a:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    158e:	89 2b       	or	r24, r25
    1590:	41 f4       	brne	.+16     	; 0x15a2 <HotSummer+0xa6>
    1592:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1596:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    159a:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <calTemp>
    159e:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    15a2:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    15a6:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    15aa:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    15ae:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    15b2:	80 96       	adiw	r24, 0x20	; 32
    15b4:	28 17       	cp	r18, r24
    15b6:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    15b8:	18 f0       	brcs	.+6      	; 0x15c0 <HotSummer+0xc4>
    15ba:	85 e7       	ldi	r24, 0x75	; 117
    15bc:	18 df       	rcall	.-464    	; 0x13ee <UpdateState>
        }
    }
    return 0;
    15be:	c0 e0       	ldi	r28, 0x00	; 0
}
    15c0:	8c 2f       	mov	r24, r28
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    15c6:	e6 ec       	ldi	r30, 0xC6	; 198
    15c8:	ff eb       	ldi	r31, 0xBF	; 191
    for (int8_t i=0; i<5; i++) {
    15ca:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    15cc:	a5 81       	ldd	r26, Z+5	; 0x05
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    15d0:	98 17       	cp	r25, r24
    15d2:	34 f4       	brge	.+12     	; 0x15e0 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    15d4:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15d8:	ad 53       	subi	r26, 0x3D	; 61
    15da:	b5 4c       	sbci	r27, 0xC5	; 197
    15dc:	2c 93       	st	X, r18
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    15e0:	ad 53       	subi	r26, 0x3D	; 61
    15e2:	b5 4c       	sbci	r27, 0xC5	; 197
    15e4:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    15e6:	a0 81       	ld	r26, Z
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    15ea:	96 17       	cp	r25, r22
    15ec:	34 f4       	brge	.+12     	; 0x15fa <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    15ee:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15f2:	ad 53       	subi	r26, 0x3D	; 61
    15f4:	b5 4c       	sbci	r27, 0xC5	; 197
    15f6:	2c 93       	st	X, r18
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    15fa:	ad 53       	subi	r26, 0x3D	; 61
    15fc:	b5 4c       	sbci	r27, 0xC5	; 197
    15fe:	1c 92       	st	X, r1
    1600:	9f 5f       	subi	r25, 0xFF	; 255
    1602:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    1604:	95 30       	cpi	r25, 0x05	; 5
    1606:	11 f7       	brne	.-60     	; 0x15cc <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    1608:	08 95       	ret

0000160a <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    160a:	a0 ed       	ldi	r26, 0xD0	; 208
    160c:	bf eb       	ldi	r27, 0xBF	; 191
    160e:	ec 91       	ld	r30, X
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	ed 53       	subi	r30, 0x3D	; 61
    1614:	f5 4c       	sbci	r31, 0xC5	; 197
    1616:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	ec 91       	ld	r30, X
    161c:	12 97       	sbiw	r26, 0x02	; 2
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	ed 53       	subi	r30, 0x3D	; 61
    1622:	f5 4c       	sbci	r31, 0xC5	; 197
    1624:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1626:	11 96       	adiw	r26, 0x01	; 1
    1628:	ec 91       	ld	r30, X
    162a:	11 97       	sbiw	r26, 0x01	; 1
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	ed 53       	subi	r30, 0x3D	; 61
    1630:	f5 4c       	sbci	r31, 0xC5	; 197
    1632:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1634:	13 96       	adiw	r26, 0x03	; 3
    1636:	ec 91       	ld	r30, X
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	ed 53       	subi	r30, 0x3D	; 61
    163c:	f5 4c       	sbci	r31, 0xC5	; 197
    163e:	60 83       	st	Z, r22
    1640:	08 95       	ret

00001642 <ClearHackerLeds>:
    }
}

void ClearHackerLeds() {
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	e4 ed       	ldi	r30, 0xD4	; 212
    1648:	ff eb       	ldi	r31, 0xBF	; 191
    164a:	ef 01       	movw	r28, r30
    for (uint8_t i=0;i<6;i++) {
        iLED[HCKR[G][i]] = 0;
    164c:	a6 81       	ldd	r26, Z+6	; 0x06
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ad 53       	subi	r26, 0x3D	; 61
    1652:	b5 4c       	sbci	r27, 0xC5	; 197
    1654:	1c 92       	st	X, r1
    1656:	31 96       	adiw	r30, 0x01	; 1
        iLED[HCKR[R][i]] = 0;
    1658:	a8 81       	ld	r26, Y
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ad 53       	subi	r26, 0x3D	; 61
    165e:	b5 4c       	sbci	r27, 0xC5	; 197
    1660:	1c 92       	st	X, r1
        iLED[EYE[G][i]] = g;
    }
}

void ClearHackerLeds() {
    for (uint8_t i=0;i<6;i++) {
    1662:	8f eb       	ldi	r24, 0xBF	; 191
    1664:	ea 3d       	cpi	r30, 0xDA	; 218
    1666:	f8 07       	cpc	r31, r24
    1668:	81 f7       	brne	.-32     	; 0x164a <ClearHackerLeds+0x8>
        iLED[HCKR[G][i]] = 0;
        iLED[HCKR[R][i]] = 0;
    }
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <GenerateBlinks>:


void GenerateBlinks(){
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    167c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1680:	88 23       	and	r24, r24
    1682:	29 f0       	breq	.+10     	; 0x168e <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    1684:	80 e4       	ldi	r24, 0x40	; 64
    1686:	d4 de       	rcall	.-600    	; 0x1430 <CheckState>
    1688:	81 11       	cpse	r24, r1
    168a:	24 c0       	rjmp	.+72     	; 0x16d4 <GenerateBlinks+0x64>
    168c:	50 c0       	rjmp	.+160    	; 0x172e <GenerateBlinks+0xbe>
    168e:	c4 ed       	ldi	r28, 0xD4	; 212
    1690:	df eb       	ldi	r29, 0xBF	; 191
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1692:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1694:	81 2f       	mov	r24, r17
    1696:	cc de       	rcall	.-616    	; 0x1430 <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    1698:	ee 81       	ldd	r30, Y+6	; 0x06
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    169c:	88 23       	and	r24, r24
    169e:	59 f0       	breq	.+22     	; 0x16b6 <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    16a0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16a4:	ed 53       	subi	r30, 0x3D	; 61
    16a6:	f5 4c       	sbci	r31, 0xC5	; 197
    16a8:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    16aa:	e8 81       	ld	r30, Y
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	ed 53       	subi	r30, 0x3D	; 61
    16b0:	f5 4c       	sbci	r31, 0xC5	; 197
    16b2:	10 82       	st	Z, r1
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    16b6:	ed 53       	subi	r30, 0x3D	; 61
    16b8:	f5 4c       	sbci	r31, 0xC5	; 197
    16ba:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    16bc:	e8 81       	ld	r30, Y
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16c4:	ed 53       	subi	r30, 0x3D	; 61
    16c6:	f5 4c       	sbci	r31, 0xC5	; 197
    16c8:	80 83       	st	Z, r24
    16ca:	1f 5f       	subi	r17, 0xFF	; 255
    16cc:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    16ce:	10 38       	cpi	r17, 0x80	; 128
    16d0:	09 f7       	brne	.-62     	; 0x1694 <GenerateBlinks+0x24>
    16d2:	d8 cf       	rjmp	.-80     	; 0x1684 <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16d4:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <HeartCount>
    16d8:	98 2f       	mov	r25, r24
    16da:	9d 7f       	andi	r25, 0xFD	; 253
    16dc:	e0 91 c3 bf 	lds	r30, 0xBFC3	; 0x80bfc3 <__bss_end+0x84b1>
            iLED[BADGER] = dimValue>>1 ;
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16e2:	91 30       	cpi	r25, 0x01	; 1
    16e4:	11 f0       	breq	.+4      	; 0x16ea <GenerateBlinks+0x7a>
    16e6:	85 30       	cpi	r24, 0x05	; 5
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    16ea:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16ee:	96 95       	lsr	r25
    16f0:	06 c0       	rjmp	.+12     	; 0x16fe <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	11 f0       	breq	.+4      	; 0x16fa <GenerateBlinks+0x8a>
    16f6:	84 30       	cpi	r24, 0x04	; 4
    16f8:	31 f4       	brne	.+12     	; 0x1706 <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    16fa:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16fe:	ed 53       	subi	r30, 0x3D	; 61
    1700:	f5 4c       	sbci	r31, 0xC5	; 197
    1702:	90 83       	st	Z, r25
    1704:	0c c0       	rjmp	.+24     	; 0x171e <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    1706:	88 23       	and	r24, r24
    1708:	11 f0       	breq	.+4      	; 0x170e <GenerateBlinks+0x9e>
    170a:	86 30       	cpi	r24, 0x06	; 6
    170c:	29 f4       	brne	.+10     	; 0x1718 <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    170e:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1712:	96 95       	lsr	r25
    1714:	96 95       	lsr	r25
    1716:	f3 cf       	rjmp	.-26     	; 0x16fe <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    1718:	ed 53       	subi	r30, 0x3D	; 61
    171a:	f5 4c       	sbci	r31, 0xC5	; 197
    171c:	10 82       	st	Z, r1
        if (HeartCount<32)
    171e:	80 32       	cpi	r24, 0x20	; 32
    1720:	20 f4       	brcc	.+8      	; 0x172a <GenerateBlinks+0xba>
            HeartCount++;
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <HeartCount>
    1728:	02 c0       	rjmp	.+4      	; 0x172e <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    172a:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    172e:	90 91 5a 38 	lds	r25, 0x385A	; 0x80385a <LedCount>
    1732:	9f 5f       	subi	r25, 0xFF	; 255
    1734:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <LedCount>

    switch (effect&0x1f) {
    1738:	e0 91 3a 38 	lds	r30, 0x383A	; 0x80383a <effect>
    173c:	f0 91 3b 38 	lds	r31, 0x383B	; 0x80383b <effect+0x1>
    1740:	ef 71       	andi	r30, 0x1F	; 31
    1742:	ff 27       	eor	r31, r31
    1744:	e9 30       	cpi	r30, 0x09	; 9
    1746:	f1 05       	cpc	r31, r1
    1748:	08 f0       	brcs	.+2      	; 0x174c <GenerateBlinks+0xdc>
    174a:	e8 c0       	rjmp	.+464    	; 0x191c <GenerateBlinks+0x2ac>
    174c:	e2 5c       	subi	r30, 0xC2	; 194
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	36 df       	rcall	.-404    	; 0x15c6 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    175a:	e0 91 d0 bf 	lds	r30, 0xBFD0	; 0x80bfd0 <__bss_end+0x84be>
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	ed 53       	subi	r30, 0x3D	; 61
    1762:	f5 4c       	sbci	r31, 0xC5	; 197
    1764:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1766:	e0 91 d2 bf 	lds	r30, 0xBFD2	; 0x80bfd2 <__bss_end+0x84c0>
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	ed 53       	subi	r30, 0x3D	; 61
    176e:	f5 4c       	sbci	r31, 0xC5	; 197
    1770:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1772:	e0 91 c4 bf 	lds	r30, 0xBFC4	; 0x80bfc4 <__bss_end+0x84b2>
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ed 53       	subi	r30, 0x3D	; 61
    177a:	f5 4c       	sbci	r31, 0xC5	; 197
    177c:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    177e:	e0 91 d1 bf 	lds	r30, 0xBFD1	; 0x80bfd1 <__bss_end+0x84bf>
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	ed 53       	subi	r30, 0x3D	; 61
    1786:	f5 4c       	sbci	r31, 0xC5	; 197
    1788:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    178a:	e0 91 d3 bf 	lds	r30, 0xBFD3	; 0x80bfd3 <__bss_end+0x84c1>
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	ed 53       	subi	r30, 0x3D	; 61
    1792:	f5 4c       	sbci	r31, 0xC5	; 197
    1794:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1796:	e0 91 c5 bf 	lds	r30, 0xBFC5	; 0x80bfc5 <__bss_end+0x84b3>
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ed 53       	subi	r30, 0x3D	; 61
    179e:	f5 4c       	sbci	r31, 0xC5	; 197
    17a0:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    17a2:	e0 91 c2 bf 	lds	r30, 0xBFC2	; 0x80bfc2 <__bss_end+0x84b0>
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	ed 53       	subi	r30, 0x3D	; 61
    17aa:	f5 4c       	sbci	r31, 0xC5	; 197
    17ac:	10 82       	st	Z, r1
            break;
    17ae:	b6 c0       	rjmp	.+364    	; 0x191c <GenerateBlinks+0x2ac>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    17b0:	89 2f       	mov	r24, r25
    17b2:	81 70       	andi	r24, 0x01	; 1
    17b4:	90 fd       	sbrc	r25, 0
    17b6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <GenerateBlinks+0x168>
    17be:	69 2f       	mov	r22, r25
    17c0:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17c2:	93 ff       	sbrs	r25, 3
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GenerateBlinks+0x15a>
    17c6:	60 95       	com	r22
    17c8:	70 95       	com	r23
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	66 0f       	add	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	8a 95       	dec	r24
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <GenerateBlinks+0x15c>
    17d4:	61 5e       	subi	r22, 0xE1	; 225
    17d6:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17e2:	ef 90       	pop	r14
    17e4:	12 cf       	rjmp	.-476    	; 0x160a <SetBothEyes>
            break;

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    17e6:	89 2f       	mov	r24, r25
    17e8:	83 70       	andi	r24, 0x03	; 3
    17ea:	09 f0       	breq	.+2      	; 0x17ee <GenerateBlinks+0x17e>
    17ec:	97 c0       	rjmp	.+302    	; 0x191c <GenerateBlinks+0x2ac>
                if (LedCount & 4)
    17ee:	92 ff       	sbrs	r25, 2
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <GenerateBlinks+0x188>
                    WingBar(5,5);
    17f2:	65 e0       	ldi	r22, 0x05	; 5
    17f4:	85 e0       	ldi	r24, 0x05	; 5
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GenerateBlinks+0x18c>
                else
                    WingBar(0,0);
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
        case 5:
            if ((LedCount & 3) == 0) {
                if (LedCount & 4)
                    WingBar(5,5);
                else
                    WingBar(0,0);
    1806:	ef 90       	pop	r14
    1808:	de ce       	rjmp	.-580    	; 0x15c6 <WingBar>
            }
            break;

        //'circle the wing leds'
        case 6:
            if (LedCount > 4) LedCount = 0;
    180a:	95 30       	cpi	r25, 0x05	; 5
    180c:	10 f0       	brcs	.+4      	; 0x1812 <GenerateBlinks+0x1a2>
    180e:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <LedCount>
            iLED[WING[L][LedCount]] = 0;
    1812:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <LedCount>
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	ea 53       	subi	r30, 0x3A	; 58
    181a:	f0 44       	sbci	r31, 0x40	; 64
    181c:	a5 81       	ldd	r26, Z+5	; 0x05
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ad 53       	subi	r26, 0x3D	; 61
    1822:	b5 4c       	sbci	r27, 0xC5	; 197
    1824:	1c 92       	st	X, r1
            iLED[WING[L][(LedCount+1)]] = dimValue;
    1826:	e6 81       	ldd	r30, Z+6	; 0x06
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    182e:	ed 53       	subi	r30, 0x3D	; 61
    1830:	f5 4c       	sbci	r31, 0xC5	; 197
    1832:	80 83       	st	Z, r24
    1834:	86 ec       	ldi	r24, 0xC6	; 198
    1836:	9f eb       	ldi	r25, 0xBF	; 191
    1838:	c0 ed       	ldi	r28, 0xD0	; 208
    183a:	df eb       	ldi	r29, 0xBF	; 191
    183c:	2b ec       	ldi	r18, 0xCB	; 203
    183e:	3f eb       	ldi	r19, 0xBF	; 191

            for (uint8_t x=0; x<5; ++x){
                iLED[WING[R][x]] = iLED[WING[L][4-x]];
    1840:	dc 01       	movw	r26, r24
    1842:	ed 91       	ld	r30, X+
    1844:	cd 01       	movw	r24, r26
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	aa 91       	ld	r26, -Y
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ad 53       	subi	r26, 0x3D	; 61
    184e:	b5 4c       	sbci	r27, 0xC5	; 197
    1850:	4c 91       	ld	r20, X
    1852:	ed 53       	subi	r30, 0x3D	; 61
    1854:	f5 4c       	sbci	r31, 0xC5	; 197
    1856:	40 83       	st	Z, r20
        case 6:
            if (LedCount > 4) LedCount = 0;
            iLED[WING[L][LedCount]] = 0;
            iLED[WING[L][(LedCount+1)]] = dimValue;

            for (uint8_t x=0; x<5; ++x){
    1858:	2c 17       	cp	r18, r28
    185a:	3d 07       	cpc	r19, r29
    185c:	89 f7       	brne	.-30     	; 0x1840 <GenerateBlinks+0x1d0>
    185e:	5e c0       	rjmp	.+188    	; 0x191c <GenerateBlinks+0x2ac>
    1860:	c6 ec       	ldi	r28, 0xC6	; 198
    1862:	df eb       	ldi	r29, 0xBF	; 191
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    1864:	7e 01       	movw	r14, r28
    1866:	0d 81       	ldd	r16, Y+5	; 0x05
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	b7 dc       	rcall	.-1682   	; 0x11da <lfsr>
    186c:	87 ff       	sbrs	r24, 7
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <GenerateBlinks+0x206>
    1870:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <GenerateBlinks+0x208>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	f8 01       	movw	r30, r16
    187a:	ed 53       	subi	r30, 0x3D	; 61
    187c:	f5 4c       	sbci	r31, 0xC5	; 197
    187e:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    1880:	21 96       	adiw	r28, 0x01	; 1
    1882:	f7 01       	movw	r30, r14
    1884:	00 81       	ld	r16, Z
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	a8 dc       	rcall	.-1712   	; 0x11da <lfsr>
    188a:	87 ff       	sbrs	r24, 7
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <GenerateBlinks+0x224>
    188e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <GenerateBlinks+0x226>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	f8 01       	movw	r30, r16
    1898:	ed 53       	subi	r30, 0x3D	; 61
    189a:	f5 4c       	sbci	r31, 0xC5	; 197
    189c:	80 83       	st	Z, r24
            }
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    189e:	ff eb       	ldi	r31, 0xBF	; 191
    18a0:	cb 3c       	cpi	r28, 0xCB	; 203
    18a2:	df 07       	cpc	r29, r31
    18a4:	f9 f6       	brne	.-66     	; 0x1864 <GenerateBlinks+0x1f4>
    18a6:	3a c0       	rjmp	.+116    	; 0x191c <GenerateBlinks+0x2ac>
            }
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
    18a8:	90 fd       	sbrc	r25, 0
    18aa:	38 c0       	rjmp	.+112    	; 0x191c <GenerateBlinks+0x2ac>
    18ac:	e6 ec       	ldi	r30, 0xC6	; 198
    18ae:	ff eb       	ldi	r31, 0xBF	; 191
    18b0:	8a ec       	ldi	r24, 0xCA	; 202
    18b2:	9f eb       	ldi	r25, 0xBF	; 191
    18b4:	9f 01       	movw	r18, r30
                for (uint8_t x=0; x<4; ++x){
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
    18b6:	a5 81       	ldd	r26, Z+5	; 0x05
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	c6 81       	ldd	r28, Z+6	; 0x06
    18bc:	d0 e0       	ldi	r29, 0x00	; 0
    18be:	cd 53       	subi	r28, 0x3D	; 61
    18c0:	d5 4c       	sbci	r29, 0xC5	; 197
    18c2:	48 81       	ld	r20, Y
    18c4:	ad 53       	subi	r26, 0x3D	; 61
    18c6:	b5 4c       	sbci	r27, 0xC5	; 197
    18c8:	4c 93       	st	X, r20
    18ca:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
    18cc:	e9 01       	movw	r28, r18
    18ce:	a8 81       	ld	r26, Y
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	c0 81       	ld	r28, Z
    18d4:	d0 e0       	ldi	r29, 0x00	; 0
    18d6:	cd 53       	subi	r28, 0x3D	; 61
    18d8:	d5 4c       	sbci	r29, 0xC5	; 197
    18da:	28 81       	ld	r18, Y
    18dc:	ad 53       	subi	r26, 0x3D	; 61
    18de:	b5 4c       	sbci	r27, 0xC5	; 197
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
                for (uint8_t x=0; x<4; ++x){
    18e0:	2c 93       	st	X, r18
    18e2:	8e 17       	cp	r24, r30
    18e4:	9f 07       	cpc	r25, r31
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
                }
                iLED[WING[L][4]] = (lfsr() > 224)?dimValue:0;
    18e6:	31 f7       	brne	.-52     	; 0x18b4 <GenerateBlinks+0x244>
    18e8:	c0 91 cf bf 	lds	r28, 0xBFCF	; 0x80bfcf <__bss_end+0x84bd>
    18ec:	d0 e0       	ldi	r29, 0x00	; 0
    18ee:	75 dc       	rcall	.-1814   	; 0x11da <lfsr>
    18f0:	81 3e       	cpi	r24, 0xE1	; 225
    18f2:	18 f0       	brcs	.+6      	; 0x18fa <GenerateBlinks+0x28a>
    18f4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <GenerateBlinks+0x28c>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	cd 53       	subi	r28, 0x3D	; 61
    18fe:	d5 4c       	sbci	r29, 0xC5	; 197
                iLED[WING[R][4]] = (lfsr() > 224)?dimValue:0;
    1900:	88 83       	st	Y, r24
    1902:	c0 91 ca bf 	lds	r28, 0xBFCA	; 0x80bfca <__bss_end+0x84b8>
    1906:	d0 e0       	ldi	r29, 0x00	; 0
    1908:	68 dc       	rcall	.-1840   	; 0x11da <lfsr>
    190a:	81 3e       	cpi	r24, 0xE1	; 225
    190c:	18 f0       	brcs	.+6      	; 0x1914 <GenerateBlinks+0x2a4>
    190e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <GenerateBlinks+0x2a6>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	cd 53       	subi	r28, 0x3D	; 61
    1918:	d5 4c       	sbci	r29, 0xC5	; 197
    191a:	88 83       	st	Y, r24
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	08 95       	ret

0000192a <GenerateAudio>:


uint8_t GenerateAudio(){
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28

    if (auIn < HPLVL) {
    1930:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1934:	89 31       	cpi	r24, 0x19	; 25
    1936:	08 f0       	brcs	.+2      	; 0x193a <GenerateAudio+0x10>
    1938:	27 c1       	rjmp	.+590    	; 0x1b88 <GenerateAudio+0x25e>

        detHdPh = 1;
    193a:	c1 e0       	ldi	r28, 0x01	; 1
    193c:	c0 93 bf 3a 	sts	0x3ABF, r28	; 0x803abf <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1940:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1944:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1948:	88 27       	eor	r24, r24
    194a:	89 2b       	or	r24, r25
    194c:	09 f0       	breq	.+2      	; 0x1950 <GenerateAudio+0x26>
    194e:	bf c0       	rjmp	.+382    	; 0x1ace <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    1950:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1954:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1958:	80 7e       	andi	r24, 0xE0	; 224
    195a:	99 27       	eor	r25, r25
    195c:	89 2b       	or	r24, r25
    195e:	31 f4       	brne	.+12     	; 0x196c <GenerateAudio+0x42>
                auRepAddr = &zero;
    1960:	89 e3       	ldi	r24, 0x39	; 57
    1962:	98 e3       	ldi	r25, 0x38	; 56
    1964:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1968:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    196c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1970:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1974:	80 7e       	andi	r24, 0xE0	; 224
    1976:	99 27       	eor	r25, r25
    1978:	80 97       	sbiw	r24, 0x20	; 32
    197a:	09 f0       	breq	.+2      	; 0x197e <GenerateAudio+0x54>
    197c:	59 c0       	rjmp	.+178    	; 0x1a30 <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	52 e2       	ldi	r21, 0x22	; 34
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e2       	ldi	r23, 0x20	; 32
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	47 dc       	rcall	.-1906   	; 0x1218 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	80 e8       	ldi	r24, 0x80	; 128
    1992:	74 dc       	rcall	.-1816   	; 0x127c <floatAround>
    1994:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <auBuffer.4022+0x2>

                if (buttonMark) {
    1998:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    199c:	88 23       	and	r24, r24
    199e:	09 f4       	brne	.+2      	; 0x19a2 <GenerateAudio+0x78>
    19a0:	47 c0       	rjmp	.+142    	; 0x1a30 <GenerateAudio+0x106>
                    if (start == 0) {
    19a2:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <start.4025>
    19a6:	81 11       	cpse	r24, r1
    19a8:	15 c0       	rjmp	.+42     	; 0x19d4 <GenerateAudio+0xaa>
                        duration = 4;
    19aa:	84 e0       	ldi	r24, 0x04	; 4
    19ac:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <duration.4024>
                        loudness = 0xff;
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4023>
                        TCB1_CCMP = 0x2000;
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e2       	ldi	r25, 0x20	; 32
    19ba:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19be:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    19c2:	81 e1       	ldi	r24, 0x11	; 17
    19c4:	98 e3       	ldi	r25, 0x38	; 56
    19c6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19ca:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <start.4025>
                    }

                    if (loudness) {
    19d4:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4023>
    19d8:	88 23       	and	r24, r24
    19da:	69 f0       	breq	.+26     	; 0x19f6 <GenerateAudio+0xcc>
                        auVolume = loudness;
    19dc:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    19e0:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <duration.4024>
    19e4:	99 23       	and	r25, r25
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <GenerateAudio+0xc6>
    19e8:	91 50       	subi	r25, 0x01	; 1
    19ea:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <duration.4024>
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <GenerateAudio+0xcc>
    19f0:	86 95       	lsr	r24
    19f2:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4023>
                    } 

                    if (loudness == 0) {
    19f6:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4023>
    19fa:	81 11       	cpse	r24, r1
    19fc:	19 c0       	rjmp	.+50     	; 0x1a30 <GenerateAudio+0x106>
                        effect &= 0x1f;
    19fe:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a02:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a06:	8f 71       	andi	r24, 0x1F	; 31
    1a08:	99 27       	eor	r25, r25
    1a0a:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1a0e:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1a12:	89 e3       	ldi	r24, 0x39	; 57
    1a14:	98 e3       	ldi	r25, 0x38	; 56
    1a16:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a1a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1a1e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1a22:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1a2c:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <start.4025>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1a30:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a34:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1a38:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a3c:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a40:	80 7e       	andi	r24, 0xE0	; 224
    1a42:	99 27       	eor	r25, r25
    1a44:	80 36       	cpi	r24, 0x60	; 96
    1a46:	91 05       	cpc	r25, r1
    1a48:	a9 f5       	brne	.+106    	; 0x1ab4 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1a4a:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <auBuffer.4026+0x6>
                auRepAddr = &auBuffer[0];
    1a4e:	8f e4       	ldi	r24, 0x4F	; 79
    1a50:	98 e3       	ldi	r25, 0x38	; 56
    1a52:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a56:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1a5a:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a5c:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1a5e:	c3 30       	cpi	r28, 0x03	; 3
    1a60:	39 f0       	breq	.+14     	; 0x1a70 <GenerateAudio+0x146>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	65 e0       	ldi	r22, 0x05	; 5
    1a68:	80 e8       	ldi	r24, 0x80	; 128
    1a6a:	08 dc       	rcall	.-2032   	; 0x127c <floatAround>
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a70:	cf 5f       	subi	r28, 0xFF	; 255
    1a72:	0f 5f       	subi	r16, 0xFF	; 255
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	c6 30       	cpi	r28, 0x06	; 6
    1a78:	91 f7       	brne	.-28     	; 0x1a5e <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1a7a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1a7e:	88 23       	and	r24, r24
    1a80:	c9 f0       	breq	.+50     	; 0x1ab4 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	54 e0       	ldi	r21, 0x04	; 4
    1a86:	60 e8       	ldi	r22, 0x80	; 128
    1a88:	72 e0       	ldi	r23, 0x02	; 2
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	c5 db       	rcall	.-2166   	; 0x1218 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1a8e:	80 91 b6 3a 	lds	r24, 0x3AB6	; 0x803ab6 <auVolume>
    1a92:	20 ea       	ldi	r18, 0xA0	; 160
    1a94:	40 e1       	ldi	r20, 0x10	; 16
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	f1 db       	rcall	.-2078   	; 0x127c <floatAround>
    1a9a:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1a9e:	20 e9       	ldi	r18, 0x90	; 144
    1aa0:	40 e7       	ldi	r20, 0x70	; 112
    1aa2:	62 e0       	ldi	r22, 0x02	; 2
    1aa4:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <auBuffer.4026>
    1aa8:	e9 db       	rcall	.-2094   	; 0x127c <floatAround>
    1aaa:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <auBuffer.4026>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1aae:	80 95       	com	r24
    1ab0:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <auBuffer.4026+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1ab4:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ab8:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1abc:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ac0:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1ac4:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ac8:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1acc:	5f c0       	rjmp	.+190    	; 0x1b8c <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1ace:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ad2:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1ad6:	88 27       	eor	r24, r24
    1ad8:	81 15       	cp	r24, r1
    1ada:	91 40       	sbci	r25, 0x01	; 1
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <GenerateAudio+0x1b6>
    1ade:	56 c0       	rjmp	.+172    	; 0x1b8c <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1ae0:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ae4:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1ae8:	80 7e       	andi	r24, 0xE0	; 224
    1aea:	99 27       	eor	r25, r25
    1aec:	81 39       	cpi	r24, 0x91	; 145
    1aee:	91 05       	cpc	r25, r1
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <GenerateAudio+0x1ca>
    1af2:	4c c0       	rjmp	.+152    	; 0x1b8c <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1af4:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <effect>
    1af8:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <effect+0x1>
    1afc:	60 7e       	andi	r22, 0xE0	; 224
    1afe:	77 27       	eor	r23, r23
    1b00:	6f 5f       	subi	r22, 0xFF	; 255
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	86 e0       	ldi	r24, 0x06	; 6
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1b0c:	e1 f7       	brne	.-8      	; 0x1b06 <GenerateAudio+0x1dc>
    1b0e:	ab 01       	movw	r20, r22
    1b10:	5d 5f       	subi	r21, 0xFD	; 253
    1b12:	7e 5f       	subi	r23, 0xFE	; 254
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 db       	rcall	.-2304   	; 0x1218 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1b18:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1b1c:	88 23       	and	r24, r24
    1b1e:	b1 f1       	breq	.+108    	; 0x1b8c <GenerateAudio+0x262>
                    if (start == 0) {
    1b20:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <start.4033>
    1b24:	81 11       	cpse	r24, r1
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <GenerateAudio+0x21a>
                        duration = 3;
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4032>
                        auRepAddr = &auBuffer[0];
    1b2e:	8e e0       	ldi	r24, 0x0E	; 14
    1b30:	98 e3       	ldi	r25, 0x38	; 56
    1b32:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b36:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1b3a:	8f ef       	ldi	r24, 0xFF	; 255
    1b3c:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 1;
    1b40:	c0 93 4e 38 	sts	0x384E, r28	; 0x80384e <start.4033>
                    }   if (duration == 0) {
    1b44:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <duration.4032>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	1a c0       	rjmp	.+52     	; 0x1b80 <GenerateAudio+0x256>
                        effect &= 0x1f;
    1b4c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b50:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b54:	8f 71       	andi	r24, 0x1F	; 31
    1b56:	99 27       	eor	r25, r25
    1b58:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1b5c:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1b60:	89 e3       	ldi	r24, 0x39	; 57
    1b62:	98 e3       	ldi	r25, 0x38	; 56
    1b64:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b68:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1b6c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1b70:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1b74:	8f ef       	ldi	r24, 0xFF	; 255
    1b76:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1b7a:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <start.4033>
    1b7e:	06 c0       	rjmp	.+12     	; 0x1b8c <GenerateAudio+0x262>
                    } else duration--;
    1b80:	81 50       	subi	r24, 0x01	; 1
    1b82:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4032>
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1b88:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <detHdPh>
    }
    return buttonMark;
    1b8c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
}
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	08 95       	ret

00001b98 <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1b98:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <minuteMark>
    1b9c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1ba0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1ba4:	89 2f       	mov	r24, r25
    1ba6:	99 27       	eor	r25, r25
    1ba8:	86 95       	lsr	r24
}
    1baa:	3c e3       	ldi	r19, 0x3C	; 60
    1bac:	23 9f       	mul	r18, r19
    1bae:	80 0d       	add	r24, r0
    1bb0:	91 1d       	adc	r25, r1
    1bb2:	11 24       	eor	r1, r1
    1bb4:	08 95       	ret

00001bb6 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	8c 01       	movw	r16, r24
    1bc0:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1bc2:	ea df       	rcall	.-44     	; 0x1b98 <getClock>
    1bc4:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1bc6:	80 17       	cp	r24, r16
    1bc8:	91 07       	cpc	r25, r17
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <idleTimeout+0x18>
        curClock += 256 * 60;
    1bcc:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1bce:	c0 0f       	add	r28, r16
    1bd0:	d1 1f       	adc	r29, r17
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	c2 17       	cp	r28, r18
    1bd6:	d3 07       	cpc	r29, r19
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <idleTimeout+0x26>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <SelfTest>:

uint8_t SelfTest(){
    1be6:	df 92       	push	r13
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <SelfTest+0x10>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <SelfTest+0x12>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    uint8_t tstVal[4] = {0x01, 0};
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	1a 82       	std	Y+2, r1	; 0x02
    1c00:	1b 82       	std	Y+3, r1	; 0x03
    1c02:	1c 82       	std	Y+4, r1	; 0x04
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	a4 ed       	ldi	r26, 0xD4	; 212
    1c0a:	bf eb       	ldi	r27, 0xBF	; 191

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	ed 91       	ld	r30, X+
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	ed 53       	subi	r30, 0x3D	; 61
    1c14:	f5 4c       	sbci	r31, 0xC5	; 197
    1c16:	80 83       	st	Z, r24

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1c18:	2f eb       	ldi	r18, 0xBF	; 191
    1c1a:	aa 3d       	cpi	r26, 0xDA	; 218
    1c1c:	b2 07       	cpc	r27, r18
    1c1e:	b9 f7       	brne	.-18     	; 0x1c0e <SelfTest+0x28>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Audio in/out
    SelectAuIn();
    1c20:	9f da       	rcall	.-2754   	; 0x1160 <SelectAuIn>
    auRepAddr = &tstVal[0];
    while (auIn > 0x04) ;
    1c22:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1c26:	85 30       	cpi	r24, 0x05	; 5
    1c28:	e0 f7       	brcc	.-8      	; 0x1c22 <SelfTest+0x3c>
    tstVal[0] = 0xff;
    while (auIn < 0x04) ;
    1c2a:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	e0 f3       	brcs	.-8      	; 0x1c2a <SelfTest+0x44>
    iLED[HCKR[R][0]] = 0x00;
    1c32:	e0 91 d4 bf 	lds	r30, 0xBFD4	; 0x80bfd4 <__bss_end+0x84c2>
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ed 53       	subi	r30, 0x3D	; 61
    1c3a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c3c:	10 82       	st	Z, r1
    iLED[HCKR[G][0]] = 0xff;
    1c3e:	e0 91 da bf 	lds	r30, 0xBFDA	; 0x80bfda <__bss_end+0x84c8>
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	ed 53       	subi	r30, 0x3D	; 61
    1c46:	f5 4c       	sbci	r31, 0xC5	; 197
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	80 83       	st	Z, r24
    auRepAddr = &zero;
    1c4c:	89 e3       	ldi	r24, 0x39	; 57
    1c4e:	98 e3       	ldi	r25, 0x38	; 56
    1c50:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c54:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1c58:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    1c5c:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    while (tstVal[0] == (adcPhot&0xff)) ;
    1c60:	99 27       	eor	r25, r25
    1c62:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    1c66:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1c6a:	33 27       	eor	r19, r19
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	c1 f3       	breq	.-16     	; 0x1c62 <SelfTest+0x7c>
    iLED[HCKR[R][1]] = 0x00;
    1c72:	e0 91 d5 bf 	lds	r30, 0xBFD5	; 0x80bfd5 <__bss_end+0x84c3>
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	ed 53       	subi	r30, 0x3D	; 61
    1c7a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c7c:	10 82       	st	Z, r1
    iLED[HCKR[G][1]] = 0xff;
    1c7e:	e0 91 db bf 	lds	r30, 0xBFDB	; 0x80bfdb <__bss_end+0x84c9>
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	ed 53       	subi	r30, 0x3D	; 61
    1c86:	f5 4c       	sbci	r31, 0xC5	; 197
    1c88:	8f ef       	ldi	r24, 0xFF	; 255
    1c8a:	80 83       	st	Z, r24

    //Magnet
    tstVal[0] = adcHall&0xff;
    1c8c:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
    1c90:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
    1c94:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcHall&0xff)) ;
    1c96:	99 27       	eor	r25, r25
    1c98:	20 91 bb 3a 	lds	r18, 0x3ABB	; 0x803abb <adcHall>
    1c9c:	30 91 bc 3a 	lds	r19, 0x3ABC	; 0x803abc <adcHall+0x1>
    1ca0:	33 27       	eor	r19, r19
    1ca2:	28 17       	cp	r18, r24
    1ca4:	39 07       	cpc	r19, r25
    1ca6:	c1 f3       	breq	.-16     	; 0x1c98 <SelfTest+0xb2>
    iLED[HCKR[R][2]] = 0x00;
    1ca8:	e0 91 d6 bf 	lds	r30, 0xBFD6	; 0x80bfd6 <__bss_end+0x84c4>
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	ed 53       	subi	r30, 0x3D	; 61
    1cb0:	f5 4c       	sbci	r31, 0xC5	; 197
    1cb2:	10 82       	st	Z, r1
    iLED[HCKR[G][2]] = 0xff;
    1cb4:	e0 91 dc bf 	lds	r30, 0xBFDC	; 0x80bfdc <__bss_end+0x84ca>
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	ed 53       	subi	r30, 0x3D	; 61
    1cbc:	f5 4c       	sbci	r31, 0xC5	; 197
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255

    //Temperature
    SelectTSens();
    1cc0:	80 83       	st	Z, r24
    1cc2:	3f da       	rcall	.-2946   	; 0x1142 <SelectTSens>
    tstVal[0] = adcTemp&0xff;
    1cc4:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1cc8:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcTemp&0xff)) ;
    1cce:	99 27       	eor	r25, r25
    1cd0:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1cd4:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1cd8:	33 27       	eor	r19, r19
    1cda:	28 17       	cp	r18, r24
    1cdc:	39 07       	cpc	r19, r25
    1cde:	c1 f3       	breq	.-16     	; 0x1cd0 <SelfTest+0xea>
    iLED[HCKR[R][3]] = 0x00;
    1ce0:	e0 91 d7 bf 	lds	r30, 0xBFD7	; 0x80bfd7 <__bss_end+0x84c5>
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	ed 53       	subi	r30, 0x3D	; 61
    1ce8:	f5 4c       	sbci	r31, 0xC5	; 197
    1cea:	10 82       	st	Z, r1
    iLED[HCKR[G][3]] = 0xff;
    1cec:	e0 91 dd bf 	lds	r30, 0xBFDD	; 0x80bfdd <__bss_end+0x84cb>
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	ed 53       	subi	r30, 0x3D	; 61
    1cf4:	f5 4c       	sbci	r31, 0xC5	; 197
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	80 83       	st	Z, r24

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1cfa:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    1cfe:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    1d02:	80 38       	cpi	r24, 0x80	; 128
    1d04:	9c 40       	sbci	r25, 0x0C	; 12
    1d06:	c8 f3       	brcs	.-14     	; 0x1cfa <SelfTest+0x114>
    iLED[HCKR[R][4]] = 0x00;
    1d08:	e0 90 d8 bf 	lds	r14, 0xBFD8	; 0x80bfd8 <__bss_end+0x84c6>
    1d0c:	8e 2d       	mov	r24, r14
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	fc 01       	movw	r30, r24
    1d12:	ed 53       	subi	r30, 0x3D	; 61
    1d14:	f5 4c       	sbci	r31, 0xC5	; 197
    1d16:	7f 01       	movw	r14, r30
    1d18:	10 82       	st	Z, r1
    iLED[HCKR[G][4]] = 0xff;
    1d1a:	00 91 de bf 	lds	r16, 0xBFDE	; 0x80bfde <__bss_end+0x84cc>
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	0d 53       	subi	r16, 0x3D	; 61
    1d22:	15 4c       	sbci	r17, 0xC5	; 197
    1d24:	dd 24       	eor	r13, r13
    1d26:	da 94       	dec	r13
    1d28:	f8 01       	movw	r30, r16
    1d2a:	d0 82       	st	Z, r13
        0x3CCD              Level 6, open_acl=0
        0x3CCE              Level 6, action_acl=192
        0x3CCF              Level 6, action_mask=20
    */

    ExtEERead(0x3CCC, 4, 0, &tstVal[0]);
    1d2c:	9e 01       	movw	r18, r28
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	64 e0       	ldi	r22, 0x04	; 4
    1d36:	8c ec       	ldi	r24, 0xCC	; 204
    1d38:	9c e3       	ldi	r25, 0x3C	; 60
    1d3a:	af d9       	rcall	.-3234   	; 0x109a <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	8f 33       	cpi	r24, 0x3F	; 63
    1d40:	49 f4       	brne	.+18     	; 0x1d54 <SelfTest+0x16e>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	81 11       	cpse	r24, r1
    1d46:	06 c0       	rjmp	.+12     	; 0x1d54 <SelfTest+0x16e>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	80 3c       	cpi	r24, 0xC0	; 192
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <SelfTest+0x16e>
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	84 31       	cpi	r24, 0x14	; 20
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <SelfTest+0x170>
    1d54:	ff cf       	rjmp	.-2      	; 0x1d54 <SelfTest+0x16e>
        while(1);
    } else {
        iLED[HCKR[R][4]] = 0x00;
    1d56:	f7 01       	movw	r30, r14
    1d58:	10 82       	st	Z, r1
        iLED[HCKR[G][4]] = 0xff;
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	d0 82       	st	Z, r13
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1d62:	fc 01       	movw	r30, r24
    1d64:	ed 53       	subi	r30, 0x3D	; 61
    1d66:	f5 4c       	sbci	r31, 0xC5	; 197
    1d68:	10 82       	st	Z, r1
    1d6a:	01 96       	adiw	r24, 0x01	; 1
        iLED[HCKR[R][4]] = 0x00;
        iLED[HCKR[G][4]] = 0xff;
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1d6c:	88 32       	cpi	r24, 0x28	; 40
    1d6e:	91 05       	cpc	r25, r1
    1d70:	c1 f7       	brne	.-16     	; 0x1d62 <SelfTest+0x17c>
    1d72:	10 e0       	ldi	r17, 0x00	; 0
        iLED[x]=0;
    }

    for(uint8_t x=0; x<((adcPhot+adcTemp)&0x3f); ++x) lfsr();
    1d74:	40 91 bd 3a 	lds	r20, 0x3ABD	; 0x803abd <adcPhot>
    1d78:	50 91 be 3a 	lds	r21, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1d7c:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1d80:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1d84:	21 2f       	mov	r18, r17
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	84 0f       	add	r24, r20
    1d8a:	95 1f       	adc	r25, r21
    1d8c:	8f 73       	andi	r24, 0x3F	; 63
    1d8e:	99 27       	eor	r25, r25
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	18 f4       	brcc	.+6      	; 0x1d9c <SelfTest+0x1b6>
    1d96:	21 da       	rcall	.-3006   	; 0x11da <lfsr>
    1d98:	1f 5f       	subi	r17, 0xFF	; 255
    1d9a:	ec cf       	rjmp	.-40     	; 0x1d74 <SelfTest+0x18e>

    return 0;
}
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	24 96       	adiw	r28, 0x04	; 4
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	08 95       	ret

00001db4 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	e6 ec       	ldi	r30, 0xC6	; 198
    1dba:	ff eb       	ldi	r31, 0xBF	; 191
    1dbc:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1dbe:	a5 81       	ldd	r26, Z+5	; 0x05
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	ad 53       	subi	r26, 0x3D	; 61
    1dc4:	b5 4c       	sbci	r27, 0xC5	; 197
    1dc6:	1c 92       	st	X, r1
    1dc8:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1dca:	a8 81       	ld	r26, Y
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	ad 53       	subi	r26, 0x3D	; 61
    1dd0:	b5 4c       	sbci	r27, 0xC5	; 197
    1dd2:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1dd4:	9f eb       	ldi	r25, 0xBF	; 191
    1dd6:	eb 3c       	cpi	r30, 0xCB	; 203
    1dd8:	f9 07       	cpc	r31, r25
    1dda:	81 f7       	brne	.-32     	; 0x1dbc <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1ddc:	83 30       	cpi	r24, 0x03	; 3
    1dde:	d9 f4       	brne	.+54     	; 0x1e16 <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1de0:	e0 91 cb bf 	lds	r30, 0xBFCB	; 0x80bfcb <__bss_end+0x84b9>
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dea:	ed 53       	subi	r30, 0x3D	; 61
    1dec:	f5 4c       	sbci	r31, 0xC5	; 197
    1dee:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1df0:	e0 91 cc bf 	lds	r30, 0xBFCC	; 0x80bfcc <__bss_end+0x84ba>
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dfa:	ed 53       	subi	r30, 0x3D	; 61
    1dfc:	f5 4c       	sbci	r31, 0xC5	; 197
    1dfe:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1e00:	e0 91 cd bf 	lds	r30, 0xBFCD	; 0x80bfcd <__bss_end+0x84bb>
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e0a:	ed 53       	subi	r30, 0x3D	; 61
    1e0c:	f5 4c       	sbci	r31, 0xC5	; 197
    1e0e:	80 83       	st	Z, r24
        effect = 0x013f;
    1e10:	8f e3       	ldi	r24, 0x3F	; 63
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	46 c0       	rjmp	.+140    	; 0x1ea2 <simonLed+0xee>
    } else if (val == 1) {  //
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	99 f4       	brne	.+38     	; 0x1e40 <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1e1a:	e0 91 ce bf 	lds	r30, 0xBFCE	; 0x80bfce <__bss_end+0x84bc>
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e24:	ed 53       	subi	r30, 0x3D	; 61
    1e26:	f5 4c       	sbci	r31, 0xC5	; 197
    1e28:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e2a:	e0 91 cf bf 	lds	r30, 0xBFCF	; 0x80bfcf <__bss_end+0x84bd>
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e34:	ed 53       	subi	r30, 0x3D	; 61
    1e36:	f5 4c       	sbci	r31, 0xC5	; 197
    1e38:	80 83       	st	Z, r24
        effect = 0x015f;
    1e3a:	8f e5       	ldi	r24, 0x5F	; 95
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	31 c0       	rjmp	.+98     	; 0x1ea2 <simonLed+0xee>
    } else if (val == 4) {  // III
    1e40:	84 30       	cpi	r24, 0x04	; 4
    1e42:	d9 f4       	brne	.+54     	; 0x1e7a <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1e44:	e0 91 c6 bf 	lds	r30, 0xBFC6	; 0x80bfc6 <__bss_end+0x84b4>
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e4e:	ed 53       	subi	r30, 0x3D	; 61
    1e50:	f5 4c       	sbci	r31, 0xC5	; 197
    1e52:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1e54:	e0 91 c7 bf 	lds	r30, 0xBFC7	; 0x80bfc7 <__bss_end+0x84b5>
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e5e:	ed 53       	subi	r30, 0x3D	; 61
    1e60:	f5 4c       	sbci	r31, 0xC5	; 197
    1e62:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1e64:	e0 91 c8 bf 	lds	r30, 0xBFC8	; 0x80bfc8 <__bss_end+0x84b6>
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e6e:	ed 53       	subi	r30, 0x3D	; 61
    1e70:	f5 4c       	sbci	r31, 0xC5	; 197
    1e72:	80 83       	st	Z, r24
        effect = 0x017f;
    1e74:	8f e7       	ldi	r24, 0x7F	; 127
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <simonLed+0xee>
    } else if (val == 2) {  // I
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	b1 f4       	brne	.+44     	; 0x1eaa <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1e7e:	e0 91 c9 bf 	lds	r30, 0xBFC9	; 0x80bfc9 <__bss_end+0x84b7>
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e88:	ed 53       	subi	r30, 0x3D	; 61
    1e8a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e8c:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1e8e:	e0 91 ca bf 	lds	r30, 0xBFCA	; 0x80bfca <__bss_end+0x84b8>
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e98:	ed 53       	subi	r30, 0x3D	; 61
    1e9a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e9c:	80 83       	st	Z, r24
        effect = 0x019f;
    1e9e:	8f e9       	ldi	r24, 0x9F	; 159
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1ea6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }
}
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	08 95       	ret

00001eb0 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1eb4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1eb8:	8d 7f       	andi	r24, 0xFD	; 253
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <BastetDictates+0xe>
    1ebc:	73 c1       	rjmp	.+742    	; 0x21a4 <BastetDictates+0x2f4>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1ebe:	8a e7       	ldi	r24, 0x7A	; 122
    1ec0:	b7 da       	rcall	.-2706   	; 0x1430 <CheckState>
    1ec2:	88 23       	and	r24, r24
    1ec4:	41 f0       	breq	.+16     	; 0x1ed6 <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1ec6:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <BastetDictates+0x20>
    1ece:	6a c1       	rjmp	.+724    	; 0x21a4 <BastetDictates+0x2f4>
            gameNow = TEXT;
    1ed0:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
    1ed4:	67 c1       	rjmp	.+718    	; 0x21a4 <BastetDictates+0x2f4>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1ed6:	8b e7       	ldi	r24, 0x7B	; 123
    1ed8:	ab da       	rcall	.-2730   	; 0x1430 <CheckState>
    1eda:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1ede:	88 23       	and	r24, r24
    1ee0:	29 f0       	breq	.+10     	; 0x1eec <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <BastetDictates+0x3c>
            gameNow = BASTET;
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1eec:	e0 91 c2 bf 	lds	r30, 0xBFC2	; 0x80bfc2 <__bss_end+0x84b0>
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef4:	19 f0       	breq	.+6      	; 0x1efc <BastetDictates+0x4c>
    1ef6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <BastetDictates+0x4e>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	ed 53       	subi	r30, 0x3D	; 61
    1f00:	f5 4c       	sbci	r31, 0xC5	; 197
    1f02:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1f04:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f08:	81 11       	cpse	r24, r1
    1f0a:	0c c0       	rjmp	.+24     	; 0x1f24 <BastetDictates+0x74>
    1f0c:	c2 e6       	ldi	r28, 0x62	; 98
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1f0e:	d8 e3       	ldi	r29, 0x38	; 56
    1f10:	64 d9       	rcall	.-3384   	; 0x11da <lfsr>
    1f12:	83 70       	andi	r24, 0x03	; 3
    1f14:	89 93       	st	Y+, r24
            gameNow = BASTET;

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1f16:	88 e3       	ldi	r24, 0x38	; 56
    1f18:	ce 36       	cpi	r28, 0x6E	; 110
    1f1a:	d8 07       	cpc	r29, r24
    1f1c:	c9 f7       	brne	.-14     	; 0x1f10 <BastetDictates+0x60>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f24:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	71 f4       	brne	.+28     	; 0x1f48 <BastetDictates+0x98>
    1f2c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	51 f4       	brne	.+20     	; 0x1f48 <BastetDictates+0x98>
        simonGameState = BASTET_GAME_INTRO;
    1f34:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        simonPos = 0;
    1f38:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonInputPos = 0;
    1f3c:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonTimer = 0;
    1f40:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        simonCounter = 0;
    1f44:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f48:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	19 f5       	brne	.+70     	; 0x1f96 <BastetDictates+0xe6>
        if (simonTimer > 5) {   // ±.33 seconds
    1f50:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1f54:	86 30       	cpi	r24, 0x06	; 6
    1f56:	38 f0       	brcs	.+14     	; 0x1f66 <BastetDictates+0xb6>
            simonCounter++;
    1f58:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1f62:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > 5) {
    1f66:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1f6a:	e6 30       	cpi	r30, 0x06	; 6
    1f6c:	48 f0       	brcs	.+18     	; 0x1f80 <BastetDictates+0xd0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f6e:	83 e0       	ldi	r24, 0x03	; 3
    1f70:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonTimer = 0;
    1f74:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonCounter = 0;
    1f78:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            ClearHackerLeds();
    1f7c:	62 db       	rcall	.-2364   	; 0x1642 <ClearHackerLeds>
            return 0;
    1f7e:	12 c1       	rjmp	.+548    	; 0x21a4 <BastetDictates+0x2f4>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	ec 52       	subi	r30, 0x2C	; 44
    1f84:	f0 44       	sbci	r31, 0x40	; 64
    1f86:	e0 81       	ld	r30, Z
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f8e:	ed 53       	subi	r30, 0x3D	; 61
    1f90:	f5 4c       	sbci	r31, 0xC5	; 197
    1f92:	80 83       	st	Z, r24
    1f94:	2b c0       	rjmp	.+86     	; 0x1fec <BastetDictates+0x13c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	49 f5       	brne	.+82     	; 0x1fec <BastetDictates+0x13c>
        if (simonTimer > 7) {   // ±.5 second
    1f9a:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1f9e:	88 30       	cpi	r24, 0x08	; 8
    1fa0:	38 f0       	brcs	.+14     	; 0x1fb0 <BastetDictates+0x100>
            simonCounter++;
    1fa2:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1fac:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > simonPos) {
    1fb0:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1fb4:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    1fb8:	8e 17       	cp	r24, r30
    1fba:	40 f4       	brcc	.+16     	; 0x1fcc <BastetDictates+0x11c>
            simonInputPos = 0;
    1fbc:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1fc0:	85 e0       	ldi	r24, 0x05	; 5
    1fc2:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonLed(0);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	f5 de       	rcall	.-534    	; 0x1db4 <simonLed>
    1fca:	98 c0       	rjmp	.+304    	; 0x20fc <BastetDictates+0x24c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1fcc:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1fd0:	83 30       	cpi	r24, 0x03	; 3
    1fd2:	30 f4       	brcc	.+12     	; 0x1fe0 <BastetDictates+0x130>
            simonLed(simonState[simonCounter] + 1);
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	ee 59       	subi	r30, 0x9E	; 158
    1fd8:	f7 4c       	sbci	r31, 0xC7	; 199
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	ea de       	rcall	.-556    	; 0x1db4 <simonLed>
        }
        if (simonTimer > 6) {
    1fe0:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1fe4:	87 30       	cpi	r24, 0x07	; 7
    1fe6:	10 f0       	brcs	.+4      	; 0x1fec <BastetDictates+0x13c>
            simonLed(0);
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	e4 de       	rcall	.-568    	; 0x1db4 <simonLed>
    1fec:	c0 91 5c 38 	lds	r28, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1ff0:	c5 30       	cpi	r28, 0x05	; 5
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <BastetDictates+0x146>
    1ff4:	86 c0       	rjmp	.+268    	; 0x2102 <BastetDictates+0x252>
    1ff6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1ffa:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1ffe:	98 17       	cp	r25, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <BastetDictates+0x154>
    2002:	71 c0       	rjmp	.+226    	; 0x20e6 <BastetDictates+0x236>
    2004:	90 91 5e 38 	lds	r25, 0x385E	; 0x80385e <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    2008:	91 11       	cpse	r25, r1
    200a:	6f c0       	rjmp	.+222    	; 0x20ea <BastetDictates+0x23a>
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	08 f0       	brcs	.+2      	; 0x2012 <BastetDictates+0x162>
    2010:	6c c0       	rjmp	.+216    	; 0x20ea <BastetDictates+0x23a>
                simonWait = 1;
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	90 93 5e 38 	sts	0x385E, r25	; 0x80385e <simonWait>
                simonTimer = 0;
    2018:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                simonLed(buttonState+1);
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	ca de       	rcall	.-620    	; 0x1db4 <simonLed>
    2020:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2022:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    2026:	c0 93 2d 38 	sts	0x382D, r28	; 0x80382d <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    202a:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    202e:	e8 2f       	mov	r30, r24
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	ee 59       	subi	r30, 0x9E	; 158
    2034:	f7 4c       	sbci	r31, 0xC7	; 199
    2036:	20 81       	ld	r18, Z
    2038:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    203c:	29 13       	cpse	r18, r25
    203e:	1d c0       	rjmp	.+58     	; 0x207a <BastetDictates+0x1ca>
    2040:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    2042:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <simonInputPos>
    2046:	e0 91 61 38 	lds	r30, 0x3861	; 0x803861 <simonPos>
                    if (simonInputPos > simonPos) {
    204a:	e8 17       	cp	r30, r24
    204c:	a0 f5       	brcc	.+104    	; 0x20b6 <BastetDictates+0x206>
    204e:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    2050:	e0 93 61 38 	sts	0x3861, r30	; 0x803861 <simonPos>
    2054:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                        simonTimer = 0;
    2058:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                        simonCounter = 0;
    205c:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    205e:	59 f0       	breq	.+22     	; 0x2076 <BastetDictates+0x1c6>
    2060:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	ec 52       	subi	r30, 0x2C	; 44
    2066:	f0 44       	sbci	r31, 0x40	; 64
    2068:	e5 81       	ldd	r30, Z+5	; 0x05
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2070:	ed 53       	subi	r30, 0x3D	; 61
    2072:	f5 4c       	sbci	r31, 0xC5	; 197
    2074:	80 83       	st	Z, r24
    2076:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    2078:	1c c0       	rjmp	.+56     	; 0x20b2 <BastetDictates+0x202>
    207a:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2082:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2086:	a4 ed       	ldi	r26, 0xD4	; 212
    2088:	bf eb       	ldi	r27, 0xBF	; 191
    208a:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2092:	ed 53       	subi	r30, 0x3D	; 61
    2094:	f5 4c       	sbci	r31, 0xC5	; 197
    2096:	80 83       	st	Z, r24
    2098:	8f eb       	ldi	r24, 0xBF	; 191
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    209a:	aa 3d       	cpi	r26, 0xDA	; 218
    209c:	b8 07       	cpc	r27, r24
    209e:	a9 f7       	brne	.-22     	; 0x208a <BastetDictates+0x1da>
    20a0:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    20a4:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
                    simonPos = 0;
    20a8:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonTimer = 0;
    20ac:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonCounter = 0;
    20b0:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    20b2:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    20b6:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    20ba:	8c 30       	cpi	r24, 0x0C	; 12
    20bc:	20 f4       	brcc	.+8      	; 0x20c6 <BastetDictates+0x216>
    20be:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    20c2:	8c 30       	cpi	r24, 0x0C	; 12
    20c4:	90 f0       	brcs	.+36     	; 0x20ea <BastetDictates+0x23a>
                    effect = 64|2;
    20c6:	82 e4       	ldi	r24, 0x42	; 66
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    20ce:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20d2:	8a e7       	ldi	r24, 0x7A	; 122
    20d4:	8c d9       	rcall	.-3304   	; 0x13ee <UpdateState>
    20d6:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonTimer = 0;
    20da:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonCounter = 0;
    20de:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    20e0:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <BastetDictates+0x23a>
    20e6:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20ea:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    20ee:	88 3c       	cpi	r24, 0xC8	; 200
    20f0:	41 f4       	brne	.+16     	; 0x2102 <BastetDictates+0x252>
    20f2:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20f4:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    20f8:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    20fc:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2100:	51 c0       	rjmp	.+162    	; 0x21a4 <BastetDictates+0x2f4>
            return 0;
    2102:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	81 f4       	brne	.+32     	; 0x212a <BastetDictates+0x27a>
        if (simonTimer >= 7) {
    210a:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    210e:	87 30       	cpi	r24, 0x07	; 7
    2110:	60 f0       	brcs	.+24     	; 0x212a <BastetDictates+0x27a>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	4f de       	rcall	.-866    	; 0x1db4 <simonLed>
    2116:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
            simonWait = 0;
    211a:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    211e:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    2122:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <simonNextGameState>
            simonGameState = simonNextGameState;
    2126:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    212a:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    212e:	86 30       	cpi	r24, 0x06	; 6
    2130:	41 f5       	brne	.+80     	; 0x2182 <BastetDictates+0x2d2>
    2132:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
        if (simonTimer > 3) {
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	38 f0       	brcs	.+14     	; 0x2148 <BastetDictates+0x298>
    213a:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
            simonCounter++;
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
    2144:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2148:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
        }
        if (simonCounter > 5) {
    214c:	86 30       	cpi	r24, 0x06	; 6
    214e:	40 f0       	brcs	.+16     	; 0x2160 <BastetDictates+0x2b0>
    2150:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2154:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    2158:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    215a:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    215e:	22 c0       	rjmp	.+68     	; 0x21a4 <BastetDictates+0x2f4>
            return 0;
    2160:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	e8 1b       	sub	r30, r24
    2166:	f1 09       	sbc	r31, r1
    2168:	ec 52       	subi	r30, 0x2C	; 44
    216a:	f0 44       	sbci	r31, 0x40	; 64
    216c:	a0 81       	ld	r26, Z
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	ad 53       	subi	r26, 0x3D	; 61
    2172:	b5 4c       	sbci	r27, 0xC5	; 197
    2174:	1c 92       	st	X, r1
    2176:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	ed 53       	subi	r30, 0x3D	; 61
    217c:	f5 4c       	sbci	r31, 0xC5	; 197
    217e:	10 82       	st	Z, r1
    2180:	0c c0       	rjmp	.+24     	; 0x219a <BastetDictates+0x2ea>
    2182:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    2184:	51 f4       	brne	.+20     	; 0x219a <BastetDictates+0x2ea>
        simonInputPos = 0;
    2186:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonPos = 0;
    218a:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    218e:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <simonGameState>
        gameNow = TEXT;
    2192:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        simonLed(0);
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	0d de       	rcall	.-998    	; 0x1db4 <simonLed>
    219a:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    }

    ++simonTimer;
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonTimer>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	08 95       	ret

000021ac <Cheat>:
    21ac:	1f 93       	push	r17

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	62 97       	sbiw	r28, 0x12	; 18
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	8a 8b       	std	Y+18, r24	; 0x12
    21be:	80 e1       	ldi	r24, 0x10	; 16
    21c0:	ea e9       	ldi	r30, 0x9A	; 154
    21c2:	ff eb       	ldi	r31, 0xBF	; 191
    21c4:	de 01       	movw	r26, r28
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	01 90       	ld	r0, Z+
    21ca:	0d 92       	st	X+, r0
    21cc:	8a 95       	dec	r24
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <Cheat+0x1c>
    21d0:	fe 01       	movw	r30, r28
    21d2:	31 96       	adiw	r30, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	8f ef       	ldi	r24, 0xFF	; 255
    21d8:	21 91       	ld	r18, Z+
    21da:	31 91       	ld	r19, Z+
    21dc:	26 17       	cp	r18, r22
    21de:	37 07       	cpc	r19, r23
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <Cheat+0x38>
    21e2:	89 2f       	mov	r24, r25
    21e4:	9f 5f       	subi	r25, 0xFF	; 255
    21e6:	98 30       	cpi	r25, 0x08	; 8
    21e8:	b9 f7       	brne	.-18     	; 0x21d8 <Cheat+0x2c>
    21ea:	88 30       	cpi	r24, 0x08	; 8
    21ec:	10 f0       	brcs	.+4      	; 0x21f2 <Cheat+0x46>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <Cheat+0x6e>
    21f2:	18 e1       	ldi	r17, 0x18	; 24
    21f4:	18 0f       	add	r17, r24
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	be 01       	movw	r22, r28
    21fa:	6f 5e       	subi	r22, 0xEF	; 239
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	81 2f       	mov	r24, r17
    2200:	0e 94 fb 07 	call	0xff6	; 0xff6 <EERead>
    2204:	89 89       	ldd	r24, Y+17	; 0x11
    2206:	8f 3f       	cpi	r24, 0xFF	; 255
    2208:	91 f7       	brne	.-28     	; 0x21ee <Cheat+0x42>
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	be 01       	movw	r22, r28
    220e:	6e 5e       	subi	r22, 0xEE	; 238
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	81 2f       	mov	r24, r17
    2214:	0e 94 0b 08 	call	0x1016	; 0x1016 <EEWrite>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	62 96       	adiw	r28, 0x12	; 18
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	08 95       	ret

00002228 <UnflipData>:
    2228:	26 2f       	mov	r18, r22
    222a:	fb 01       	movw	r30, r22
    222c:	35 e5       	ldi	r19, 0x55	; 85
    222e:	9e 2f       	mov	r25, r30
    2230:	92 1b       	sub	r25, r18
    2232:	98 17       	cp	r25, r24
    2234:	28 f4       	brcc	.+10     	; 0x2240 <UnflipData+0x18>
    2236:	90 81       	ld	r25, Z
    2238:	92 95       	swap	r25
    223a:	93 27       	eor	r25, r19
    223c:	91 93       	st	Z+, r25
    223e:	f7 cf       	rjmp	.-18     	; 0x222e <UnflipData+0x6>
    2240:	08 95       	ret

00002242 <ClearTxAfter>:
    2242:	8f 5f       	subi	r24, 0xFF	; 255
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	30 f4       	brcc	.+12     	; 0x2254 <ClearTxAfter+0x12>
    2248:	e8 2f       	mov	r30, r24
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	e8 5b       	subi	r30, 0xB8	; 184
    224e:	f5 4c       	sbci	r31, 0xC5	; 197
    2250:	10 82       	st	Z, r1
    2252:	f7 cf       	rjmp	.-18     	; 0x2242 <ClearTxAfter>
    2254:	08 95       	ret

00002256 <StartsWith>:
    2256:	ac 01       	movw	r20, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	e9 2f       	mov	r30, r25
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	da 01       	movw	r26, r20
    2260:	ae 0f       	add	r26, r30
    2262:	bf 1f       	adc	r27, r31
    2264:	3c 91       	ld	r19, X
    2266:	e6 0f       	add	r30, r22
    2268:	f7 1f       	adc	r31, r23
    226a:	31 11       	cpse	r19, r1
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <StartsWith+0x22>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 81       	ld	r25, Z
    2272:	99 23       	and	r25, r25
    2274:	49 f0       	breq	.+18     	; 0x2288 <StartsWith+0x32>
    2276:	07 c0       	rjmp	.+14     	; 0x2286 <StartsWith+0x30>
    2278:	20 81       	ld	r18, Z
    227a:	22 23       	and	r18, r18
    227c:	c1 f3       	breq	.-16     	; 0x226e <StartsWith+0x18>
    227e:	32 13       	cpse	r19, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <StartsWith+0x30>
    2282:	9f 5f       	subi	r25, 0xFF	; 255
    2284:	ea cf       	rjmp	.-44     	; 0x225a <StartsWith+0x4>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	08 95       	ret

0000228a <PrepareSending>:
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	fc 01       	movw	r30, r24
    2290:	61 15       	cp	r22, r1
    2292:	71 05       	cpc	r23, r1
    2294:	59 f1       	breq	.+86     	; 0x22ec <PrepareSending+0x62>
    2296:	a0 e5       	ldi	r26, 0x50	; 80
    2298:	ba e3       	ldi	r27, 0x3A	; 58
    229a:	c8 e4       	ldi	r28, 0x48	; 72
    229c:	da e3       	ldi	r29, 0x3A	; 58
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	9f ef       	ldi	r25, 0xFF	; 255
    22a2:	6f 3f       	cpi	r22, 0xFF	; 255
    22a4:	71 05       	cpc	r23, r1
    22a6:	69 f0       	breq	.+26     	; 0x22c2 <PrepareSending+0x38>
    22a8:	60 f0       	brcs	.+24     	; 0x22c2 <PrepareSending+0x38>
    22aa:	ed 93       	st	X+, r30
    22ac:	fd 93       	st	X+, r31
    22ae:	99 93       	st	Y+, r25
    22b0:	e1 50       	subi	r30, 0x01	; 1
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	6f 5f       	subi	r22, 0xFF	; 255
    22b6:	71 09       	sbc	r23, r1
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	87 30       	cpi	r24, 0x07	; 7
    22bc:	91 f7       	brne	.-28     	; 0x22a2 <PrepareSending+0x18>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	1e c0       	rjmp	.+60     	; 0x22fe <PrepareSending+0x74>
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	d9 01       	movw	r26, r18
    22c8:	aa 0f       	add	r26, r26
    22ca:	bb 1f       	adc	r27, r27
    22cc:	a0 5b       	subi	r26, 0xB0	; 176
    22ce:	b5 4c       	sbci	r27, 0xC5	; 197
    22d0:	ed 93       	st	X+, r30
    22d2:	fc 93       	st	X, r31
    22d4:	6f 3f       	cpi	r22, 0xFF	; 255
    22d6:	71 05       	cpc	r23, r1
    22d8:	11 f4       	brne	.+4      	; 0x22de <PrepareSending+0x54>
    22da:	6e ef       	ldi	r22, 0xFE	; 254
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	f9 01       	movw	r30, r18
    22e0:	e8 5b       	subi	r30, 0xB8	; 184
    22e2:	f5 4c       	sbci	r31, 0xC5	; 197
    22e4:	60 83       	st	Z, r22
    22e6:	40 93 46 3a 	sts	0x3A46, r20	; 0x803a46 <txTypeNow>
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <PrepareSending+0x6c>
    22ec:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrList>
    22f0:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrList+0x1>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	a5 df       	rcall	.-182    	; 0x2242 <ClearTxAfter>
    22f8:	10 92 47 3a 	sts	0x3A47, r1	; 0x803a47 <txAddrNow>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	f9 01       	movw	r30, r18
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	e5 5e       	subi	r30, 0xE5	; 229
    2314:	f6 4c       	sbci	r31, 0xC6	; 198
    2316:	a9 e5       	ldi	r26, 0x59	; 89
    2318:	ba e7       	ldi	r27, 0x7A	; 122
    231a:	a0 83       	st	Z, r26
    231c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    231e:	f9 01       	movw	r30, r18
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	e5 5a       	subi	r30, 0xA5	; 165
    2326:	f6 4c       	sbci	r31, 0xC6	; 198
    2328:	62 e0       	ldi	r22, 0x02	; 2
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	60 83       	st	Z, r22
    232e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	f9 01       	movw	r30, r18
    2336:	e5 56       	subi	r30, 0x65	; 101
    2338:	f6 4c       	sbci	r31, 0xC6	; 198
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	40 83       	st	Z, r20
    2340:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2342:	21 e0       	ldi	r18, 0x01	; 1
    2344:	28 0f       	add	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	f9 01       	movw	r30, r18
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	e5 5e       	subi	r30, 0xE5	; 229
    2350:	f6 4c       	sbci	r31, 0xC6	; 198
    2352:	c2 e6       	ldi	r28, 0x62	; 98
    2354:	da e7       	ldi	r29, 0x7A	; 122
    2356:	c0 83       	st	Z, r28
    2358:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    235a:	f9 01       	movw	r30, r18
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	e5 5a       	subi	r30, 0xA5	; 165
    2362:	f6 4c       	sbci	r31, 0xC6	; 198
    2364:	cc e0       	ldi	r28, 0x0C	; 12
    2366:	d0 e0       	ldi	r29, 0x00	; 0
    2368:	c0 83       	st	Z, r28
    236a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	f9 01       	movw	r30, r18
    2372:	e5 56       	subi	r30, 0x65	; 101
    2374:	f6 4c       	sbci	r31, 0xC6	; 198
    2376:	40 83       	st	Z, r20
    2378:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    237a:	e2 e0       	ldi	r30, 0x02	; 2
    237c:	e8 0f       	add	r30, r24
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	e5 5e       	subi	r30, 0xE5	; 229
    2386:	f6 4c       	sbci	r31, 0xC6	; 198
    2388:	20 ef       	ldi	r18, 0xF0	; 240
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	20 83       	st	Z, r18
    238e:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2390:	23 e0       	ldi	r18, 0x03	; 3
    2392:	28 0f       	add	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	f9 01       	movw	r30, r18
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	e5 5e       	subi	r30, 0xE5	; 229
    239e:	f6 4c       	sbci	r31, 0xC6	; 198
    23a0:	a0 83       	st	Z, r26
    23a2:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23a4:	f9 01       	movw	r30, r18
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	e5 5a       	subi	r30, 0xA5	; 165
    23ac:	f6 4c       	sbci	r31, 0xC6	; 198
    23ae:	60 83       	st	Z, r22
    23b0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23b2:	22 0f       	add	r18, r18
    23b4:	33 1f       	adc	r19, r19
    23b6:	f9 01       	movw	r30, r18
    23b8:	e5 56       	subi	r30, 0x65	; 101
    23ba:	f6 4c       	sbci	r31, 0xC6	; 198
    23bc:	40 83       	st	Z, r20
    23be:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23c0:	24 e0       	ldi	r18, 0x04	; 4
    23c2:	28 0f       	add	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	f9 01       	movw	r30, r18
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	e5 5e       	subi	r30, 0xE5	; 229
    23ce:	f6 4c       	sbci	r31, 0xC6	; 198
    23d0:	a5 e5       	ldi	r26, 0x55	; 85
    23d2:	ba e7       	ldi	r27, 0x7A	; 122
    23d4:	a0 83       	st	Z, r26
    23d6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23d8:	f9 01       	movw	r30, r18
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	e5 5a       	subi	r30, 0xA5	; 165
    23e0:	f6 4c       	sbci	r31, 0xC6	; 198
    23e2:	60 83       	st	Z, r22
    23e4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23e6:	22 0f       	add	r18, r18
    23e8:	33 1f       	adc	r19, r19
    23ea:	f9 01       	movw	r30, r18
    23ec:	e5 56       	subi	r30, 0x65	; 101
    23ee:	f6 4c       	sbci	r31, 0xC6	; 198
    23f0:	40 83       	st	Z, r20
    23f2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23f4:	8b 5f       	subi	r24, 0xFB	; 251
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    23fc:	af 92       	push	r10
    23fe:	bf 92       	push	r11
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	2c 97       	sbiw	r28, 0x0c	; 12
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	7c 01       	movw	r14, r24
    241a:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    241c:	9e 01       	movw	r18, r28
    241e:	2f 5f       	subi	r18, 0xFF	; 255
    2420:	3f 4f       	sbci	r19, 0xFF	; 255
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	6c e0       	ldi	r22, 0x0C	; 12
    2426:	80 96       	adiw	r24, 0x20	; 32
    2428:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	98 27       	eor	r25, r24
    2432:	89 27       	eor	r24, r25
    2434:	98 27       	eor	r25, r24
    2436:	80 96       	adiw	r24, 0x20	; 32
    2438:	f8 01       	movw	r30, r16
    243a:	80 83       	st	Z, r24
    243c:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	98 27       	eor	r25, r24
    2444:	89 27       	eor	r24, r25
    2446:	98 27       	eor	r25, r24
    2448:	80 96       	adiw	r24, 0x20	; 32
    244a:	82 83       	std	Z+2, r24	; 0x02
    244c:	93 83       	std	Z+3, r25	; 0x03
    244e:	de 01       	movw	r26, r28
    2450:	15 96       	adiw	r26, 0x05	; 5
    2452:	34 96       	adiw	r30, 0x04	; 4
    2454:	c8 01       	movw	r24, r16
    2456:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2458:	2d 91       	ld	r18, X+
    245a:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    245c:	e8 17       	cp	r30, r24
    245e:	f9 07       	cpc	r31, r25
    2460:	d9 f7       	brne	.-10     	; 0x2458 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    2462:	fc e2       	ldi	r31, 0x2C	; 44
    2464:	ef 0e       	add	r14, r31
    2466:	f1 1c       	adc	r15, r1
    2468:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    246a:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    246c:	9e 01       	movw	r18, r28
    246e:	2f 5f       	subi	r18, 0xFF	; 255
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	c7 01       	movw	r24, r14
    2478:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	98 27       	eor	r25, r24
    2482:	89 27       	eor	r24, r25
    2484:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    2486:	97 01       	movw	r18, r14
    2488:	2e 5f       	subi	r18, 0xFE	; 254
    248a:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    248c:	43 e0       	ldi	r20, 0x03	; 3
    248e:	4d 15       	cp	r20, r13
    2490:	80 f4       	brcc	.+32     	; 0x24b2 <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    2492:	ac 01       	movw	r20, r24
    2494:	41 50       	subi	r20, 0x01	; 1
    2496:	51 09       	sbc	r21, r1
    2498:	f8 01       	movw	r30, r16
    249a:	42 8f       	std	Z+26, r20	; 0x1a
    249c:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    249e:	f3 e0       	ldi	r31, 0x03	; 3
    24a0:	ef 0e       	add	r14, r31
    24a2:	f1 1c       	adc	r15, r1
    24a4:	f8 01       	movw	r30, r16
    24a6:	e4 86       	std	Z+12, r14	; 0x0c
    24a8:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    24aa:	4b 81       	ldd	r20, Y+3	; 0x03
    24ac:	f5 01       	movw	r30, r10
    24ae:	44 a3       	std	Z+36, r20	; 0x24
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    24b2:	f8 01       	movw	r30, r16
    24b4:	82 8f       	std	Z+26, r24	; 0x1a
    24b6:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    24b8:	24 87       	std	Z+12, r18	; 0x0c
    24ba:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    24bc:	7c 01       	movw	r14, r24
    24be:	e2 0e       	add	r14, r18
    24c0:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24c2:	d3 94       	inc	r13
    24c4:	0e 5f       	subi	r16, 0xFE	; 254
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	ff ef       	ldi	r31, 0xFF	; 255
    24ca:	af 1a       	sub	r10, r31
    24cc:	bf 0a       	sbc	r11, r31
    24ce:	47 e0       	ldi	r20, 0x07	; 7
    24d0:	d4 12       	cpse	r13, r20
    24d2:	cc cf       	rjmp	.-104    	; 0x246c <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24d4:	2c 96       	adiw	r28, 0x0c	; 12
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	ff 90       	pop	r15
    24e4:	ef 90       	pop	r14
    24e6:	df 90       	pop	r13
    24e8:	bf 90       	pop	r11
    24ea:	af 90       	pop	r10
    24ec:	08 95       	ret

000024ee <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	a0 97       	sbiw	r28, 0x20	; 32
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    250a:	7c 01       	movw	r14, r24
    250c:	20 e2       	ldi	r18, 0x20	; 32
    250e:	e2 0e       	add	r14, r18
    2510:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    2512:	9e 01       	movw	r18, r28
    2514:	2f 5f       	subi	r18, 0xFF	; 255
    2516:	3f 4f       	sbci	r19, 0xFF	; 255
    2518:	40 e0       	ldi	r20, 0x00	; 0
    251a:	62 e0       	ldi	r22, 0x02	; 2
    251c:	8c 96       	adiw	r24, 0x2c	; 44
    251e:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    2522:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    2524:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2526:	11 23       	and	r17, r17
    2528:	59 f1       	breq	.+86     	; 0x2580 <CheckLetter+0x92>
    252a:	01 2f       	mov	r16, r17
    252c:	11 32       	cpi	r17, 0x21	; 33
    252e:	08 f0       	brcs	.+2      	; 0x2532 <CheckLetter+0x44>
    2530:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    2532:	9e 01       	movw	r18, r28
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	60 2f       	mov	r22, r16
    253c:	c7 01       	movw	r24, r14
    253e:	0e 96       	adiw	r24, 0x0e	; 14
    2540:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
    2544:	fe 01       	movw	r30, r28
    2546:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2548:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    254a:	dd 20       	and	r13, r13
    254c:	61 f0       	breq	.+24     	; 0x2566 <CheckLetter+0x78>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    254e:	e1 e0       	ldi	r30, 0x01	; 1
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	ec 0f       	add	r30, r28
    2554:	fd 1f       	adc	r31, r29
    2556:	e8 0f       	add	r30, r24
    2558:	f1 1d       	adc	r31, r1
    255a:	90 81       	ld	r25, Z
    255c:	90 62       	ori	r25, 0x20	; 32
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	9c 11       	cpse	r25, r12
    2562:	0e c0       	rjmp	.+28     	; 0x2580 <CheckLetter+0x92>
    2564:	0e c0       	rjmp	.+28     	; 0x2582 <CheckLetter+0x94>
            }
            if (data[y] == '[') found = 1;
    2566:	91 91       	ld	r25, Z+
    2568:	dd 24       	eor	r13, r13
    256a:	d3 94       	inc	r13
    256c:	9b 35       	cpi	r25, 0x5B	; 91
    256e:	09 f0       	breq	.+2      	; 0x2572 <CheckLetter+0x84>
    2570:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	80 17       	cp	r24, r16
    2576:	48 f3       	brcs	.-46     	; 0x254a <CheckLetter+0x5c>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2578:	e0 0e       	add	r14, r16
    257a:	f1 1c       	adc	r15, r1
        x -= max;
    257c:	10 1b       	sub	r17, r16
    257e:	d3 cf       	rjmp	.-90     	; 0x2526 <CheckLetter+0x38>
    }
    return 0;
    2580:	80 e0       	ldi	r24, 0x00	; 0
}
    2582:	a0 96       	adiw	r28, 0x20	; 32
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	08 95       	ret

0000259a <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    259a:	af 92       	push	r10
    259c:	bf 92       	push	r11
    259e:	df 92       	push	r13
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <FindChild+0x14>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <FindChild+0x16>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	d6 2e       	mov	r13, r22
    25b6:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    25b8:	9e 01       	movw	r18, r28
    25ba:	2f 5f       	subi	r18, 0xFF	; 255
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	64 e0       	ldi	r22, 0x04	; 4
    25c2:	80 96       	adiw	r24, 0x20	; 32
    25c4:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
    25c8:	e9 80       	ldd	r14, Y+1	; 0x01
    25ca:	fa 80       	ldd	r15, Y+2	; 0x02
    25cc:	fe 24       	eor	r15, r14
    25ce:	ef 24       	eor	r14, r15
    25d0:	fe 24       	eor	r15, r14
    25d2:	0b 81       	ldd	r16, Y+3	; 0x03
    25d4:	1c 81       	ldd	r17, Y+4	; 0x04
    25d6:	10 27       	eor	r17, r16
    25d8:	01 27       	eor	r16, r17
    25da:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25dc:	0e 15       	cp	r16, r14
    25de:	1f 05       	cpc	r17, r15
    25e0:	48 f5       	brcc	.+82     	; 0x2634 <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25e2:	a0 16       	cp	r10, r16
    25e4:	b1 06       	cpc	r11, r17
    25e6:	60 f0       	brcs	.+24     	; 0x2600 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25e8:	9e 01       	movw	r18, r28
    25ea:	2f 5f       	subi	r18, 0xFF	; 255
    25ec:	3f 4f       	sbci	r19, 0xFF	; 255
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	62 e0       	ldi	r22, 0x02	; 2
    25f2:	c8 01       	movw	r24, r16
    25f4:	80 96       	adiw	r24, 0x20	; 32
    25f6:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
    25fa:	09 81       	ldd	r16, Y+1	; 0x01
    25fc:	1a 81       	ldd	r17, Y+2	; 0x02
    25fe:	eb cf       	rjmp	.-42     	; 0x25d6 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    2600:	9e 01       	movw	r18, r28
    2602:	2f 5f       	subi	r18, 0xFF	; 255
    2604:	3f 4f       	sbci	r19, 0xFF	; 255
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	c8 01       	movw	r24, r16
    260c:	85 96       	adiw	r24, 0x25	; 37
    260e:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	81 11       	cpse	r24, r1
    2616:	03 c0       	rjmp	.+6      	; 0x261e <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2618:	d1 10       	cpse	r13, r1
    261a:	06 c0       	rjmp	.+12     	; 0x2628 <FindChild+0x8e>
    261c:	0e c0       	rjmp	.+28     	; 0x263a <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    261e:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
    2622:	81 11       	cpse	r24, r1
    2624:	f9 cf       	rjmp	.-14     	; 0x2618 <FindChild+0x7e>
    2626:	e0 cf       	rjmp	.-64     	; 0x25e8 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2628:	6d 2d       	mov	r22, r13
    262a:	c8 01       	movw	r24, r16
    262c:	60 df       	rcall	.-320    	; 0x24ee <CheckLetter>
    262e:	88 23       	and	r24, r24
    2630:	d9 f2       	breq	.-74     	; 0x25e8 <FindChild+0x4e>
    2632:	03 c0       	rjmp	.+6      	; 0x263a <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	01 c0       	rjmp	.+2      	; 0x263c <FindChild+0xa2>
    263a:	c8 01       	movw	r24, r16
}
    263c:	24 96       	adiw	r28, 0x04	; 4
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	bf 90       	pop	r11
    2652:	af 90       	pop	r10
    2654:	08 95       	ret

00002656 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2656:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2658:	9f e9       	ldi	r25, 0x9F	; 159
    265a:	98 0f       	add	r25, r24
    265c:	9a 31       	cpi	r25, 0x1A	; 26
    265e:	38 f0       	brcs	.+14     	; 0x266e <InpOkChk+0x18>
    2660:	90 ed       	ldi	r25, 0xD0	; 208
    2662:	98 0f       	add	r25, r24
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	9a 30       	cpi	r25, 0x0A	; 10
    2668:	18 f0       	brcs	.+6      	; 0x2670 <InpOkChk+0x1a>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	08 95       	ret
    266e:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2670:	08 95       	ret

00002672 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    267c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    267e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2680:	f8 01       	movw	r30, r16
    2682:	ed 0f       	add	r30, r29
    2684:	f1 1d       	adc	r31, r1
    2686:	20 81       	ld	r18, Z
    2688:	8c 2f       	mov	r24, r28
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	22 23       	and	r18, r18
    268e:	51 f0       	breq	.+20     	; 0x26a4 <CleanInput+0x32>
        data[cnt] = data[x];
    2690:	d8 01       	movw	r26, r16
    2692:	a8 0f       	add	r26, r24
    2694:	b9 1f       	adc	r27, r25
    2696:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2698:	80 81       	ld	r24, Z
    269a:	dd df       	rcall	.-70     	; 0x2656 <InpOkChk>
    269c:	81 11       	cpse	r24, r1
    269e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    26a0:	df 5f       	subi	r29, 0xFF	; 255
    26a2:	ee cf       	rjmp	.-36     	; 0x2680 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    26a4:	f8 01       	movw	r30, r16
    26a6:	e8 0f       	add	r30, r24
    26a8:	f9 1f       	adc	r31, r25
    26aa:	10 82       	st	Z, r1
    return cnt;
}
    26ac:	8c 2f       	mov	r24, r28
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	08 95       	ret

000026b8 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    26b8:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    26ba:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    26be:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    26c2:	89 2b       	or	r24, r25
    26c4:	39 f4       	brne	.+14     	; 0x26d4 <CheckSend+0x1c>
        effect = currObj.byteField[EFFECTS];
    26c6:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    26d0:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    26d4:	20 91 47 3a 	lds	r18, 0x3A47	; 0x803a47 <txAddrNow>
    26d8:	28 30       	cpi	r18, 0x08	; 8
    26da:	08 f0       	brcs	.+2      	; 0x26de <CheckSend+0x26>
    26dc:	49 c0       	rjmp	.+146    	; 0x2770 <CheckSend+0xb8>
    26de:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    26e2:	88 23       	and	r24, r24
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <CheckSend+0x30>
    26e6:	44 c0       	rjmp	.+136    	; 0x2770 <CheckSend+0xb8>
        if (txStrLen[txAddrNow] == 0){
    26e8:	82 2f       	mov	r24, r18
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	fc 01       	movw	r30, r24
    26ee:	e8 5b       	subi	r30, 0xB8	; 184
    26f0:	f5 4c       	sbci	r31, 0xC5	; 197
    26f2:	e0 81       	ld	r30, Z
    26f4:	e1 11       	cpse	r30, r1
    26f6:	06 c0       	rjmp	.+12     	; 0x2704 <CheckSend+0x4c>
            txPart = 0;
    26f8:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3937>
            txAddrNow = TXLISTLEN;
    26fc:	88 e0       	ldi	r24, 0x08	; 8
    26fe:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <txAddrNow>
    2702:	2e c0       	rjmp	.+92     	; 0x2760 <CheckSend+0xa8>
        } else if (txPart < txStrLen[txAddrNow]){
    2704:	50 91 06 39 	lds	r21, 0x3906	; 0x803906 <txPart.3937>
    2708:	5e 17       	cp	r21, r30
    270a:	60 f5       	brcc	.+88     	; 0x2764 <CheckSend+0xac>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    270c:	ce 2f       	mov	r28, r30
    270e:	c5 1b       	sub	r28, r21
    2710:	c1 32       	cpi	r28, 0x21	; 33
    2712:	08 f0       	brcs	.+2      	; 0x2716 <CheckSend+0x5e>
    2714:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	fc 01       	movw	r30, r24
    271c:	e0 5b       	subi	r30, 0xB0	; 176
    271e:	f5 4c       	sbci	r31, 0xC5	; 197
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	21 ef       	ldi	r18, 0xF1	; 241
    2726:	3a e3       	ldi	r19, 0x3A	; 58
    2728:	40 91 46 3a 	lds	r20, 0x3A46	; 0x803a46 <txTypeNow>
    272c:	6c 2f       	mov	r22, r28
    272e:	85 0f       	add	r24, r21
    2730:	91 1d       	adc	r25, r1
    2732:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
            txPart += EEreadLength;
    2736:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <txPart.3937>
    273a:	8c 0f       	add	r24, r28
    273c:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2740:	ec 2f       	mov	r30, r28
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	ef 50       	subi	r30, 0x0F	; 15
    2746:	f5 4c       	sbci	r31, 0xC5	; 197
    2748:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    274a:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <txBuffer>
    274e:	81 11       	cpse	r24, r1
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <CheckSend+0xa0>
    2752:	8b ed       	ldi	r24, 0xDB	; 219
    2754:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <txBuffer>
            SerSend(&txBuffer[0]);
    2758:	81 ef       	ldi	r24, 0xF1	; 241
    275a:	9a e3       	ldi	r25, 0x3A	; 58
    275c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	0b c0       	rjmp	.+22     	; 0x277a <CheckSend+0xc2>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2764:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3937>
            ++txAddrNow;
    2768:	2f 5f       	subi	r18, 0xFF	; 255
    276a:	20 93 47 3a 	sts	0x3A47, r18	; 0x803a47 <txAddrNow>
    276e:	f8 cf       	rjmp	.-16     	; 0x2760 <CheckSend+0xa8>
        }
    } else if (serTxDone) return 0; //All is sent!
    2770:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	91 11       	cpse	r25, r1
    2778:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret

0000277e <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2782:	c0 91 1a 39 	lds	r28, 0x391A	; 0x80391a <responseList>
    2786:	cc 23       	and	r28, r28
    2788:	b1 f1       	breq	.+108    	; 0x27f6 <CheckResponse+0x78>
        --responseList;
    278a:	c1 50       	subi	r28, 0x01	; 1
    278c:	c0 93 1a 39 	sts	0x391A, r28	; 0x80391a <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2790:	d0 91 05 39 	lds	r29, 0x3905	; 0x803905 <number.3941>
    2794:	2d 2f       	mov	r18, r29
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	f9 01       	movw	r30, r18
    279a:	ee 0f       	add	r30, r30
    279c:	ff 1f       	adc	r31, r31
    279e:	e5 5e       	subi	r30, 0xE5	; 229
    27a0:	f6 4c       	sbci	r31, 0xC6	; 198
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	80 3f       	cpi	r24, 0xF0	; 240
    27a8:	4f ef       	ldi	r20, 0xFF	; 255
    27aa:	94 07       	cpc	r25, r20
    27ac:	51 f4       	brne	.+20     	; 0x27c2 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    27ae:	60 91 35 3a 	lds	r22, 0x3A35	; 0x803a35 <currObj+0x1a>
    27b2:	70 91 36 3a 	lds	r23, 0x3A36	; 0x803a36 <currObj+0x1b>
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0xc>
    27bc:	90 91 28 3a 	lds	r25, 0x3A28	; 0x803a28 <currObj+0xd>
    27c0:	0d c0       	rjmp	.+26     	; 0x27dc <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    27c2:	d9 01       	movw	r26, r18
    27c4:	aa 0f       	add	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	a5 56       	subi	r26, 0x65	; 101
    27ca:	b6 4c       	sbci	r27, 0xC6	; 198
    27cc:	22 0f       	add	r18, r18
    27ce:	33 1f       	adc	r19, r19
    27d0:	f9 01       	movw	r30, r18
    27d2:	e5 5a       	subi	r30, 0xA5	; 165
    27d4:	f6 4c       	sbci	r31, 0xC6	; 198
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	4c 91       	ld	r20, X
    27dc:	56 dd       	rcall	.-1364   	; 0x228a <PrepareSending>
        }
        number++;
    27de:	df 5f       	subi	r29, 0xFF	; 255
    27e0:	d0 93 05 39 	sts	0x3905, r29	; 0x803905 <number.3941>

        if (responseList == 0) {
    27e4:	c1 11       	cpse	r28, r1
    27e6:	06 c0       	rjmp	.+12     	; 0x27f4 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    27e8:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    27ea:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
            number = 0;
    27ee:	10 92 05 39 	sts	0x3905, r1	; 0x803905 <number.3941>
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27f4:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27f6:	8c 2f       	mov	r24, r28
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	08 95       	ret

000027fe <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27fe:	3f 92       	push	r3
    2800:	4f 92       	push	r4
    2802:	5f 92       	push	r5
    2804:	6f 92       	push	r6
    2806:	7f 92       	push	r7
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	2a 97       	sbiw	r28, 0x0a	; 10
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    282c:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2830:	8f 3f       	cpi	r24, 0xFF	; 255
    2832:	49 f4       	brne	.+18     	; 0x2846 <CheckInput+0x48>
        //Start at first location
        PopulateObject(route[0], &currObj);
    2834:	6b e1       	ldi	r22, 0x1B	; 27
    2836:	7a e3       	ldi	r23, 0x3A	; 58
    2838:	80 91 db 39 	lds	r24, 0x39DB	; 0x8039db <route>
    283c:	90 91 dc 39 	lds	r25, 0x39DC	; 0x8039dc <route+0x1>
    2840:	dd dd       	rcall	.-1094   	; 0x23fc <PopulateObject>
        currDepth = 0;
    2842:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <currDepth>
    }

    if (serRxDone){
    2846:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <CheckInput+0x52>
    284e:	f4 c1       	rjmp	.+1000   	; 0x2c38 <CheckInput+0x43a>

        //Special input requested from user by game
        if (specialInput[0]){
    2850:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2854:	88 23       	and	r24, r24
    2856:	09 f4       	brne	.+2      	; 0x285a <CheckInput+0x5c>
    2858:	4f c0       	rjmp	.+158    	; 0x28f8 <CheckInput+0xfa>
            specialPassed = 0;
    285a:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <specialPassed>
            data[0] = 'a';
    285e:	81 e6       	ldi	r24, 0x61	; 97
    2860:	f8 01       	movw	r30, r16
    2862:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2864:	6a e0       	ldi	r22, 0x0A	; 10
    2866:	79 e3       	ldi	r23, 0x39	; 57
    2868:	85 e7       	ldi	r24, 0x75	; 117
    286a:	9a e3       	ldi	r25, 0x3A	; 58
    286c:	f4 dc       	rcall	.-1560   	; 0x2256 <StartsWith>
    286e:	f8 2e       	mov	r15, r24
    2870:	88 23       	and	r24, r24
    2872:	21 f0       	breq	.+8      	; 0x287c <CheckInput+0x7e>
                specialPassed = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <specialPassed>
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <CheckInput+0x86>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    287c:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2880:	81 33       	cpi	r24, 0x31	; 49
    2882:	11 f0       	breq	.+4      	; 0x2888 <CheckInput+0x8a>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2884:	f1 2c       	mov	r15, r1
    2886:	da c1       	rjmp	.+948    	; 0x2c3c <CheckInput+0x43e>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2888:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput+0x2>
    288c:	81 11       	cpse	r24, r1
    288e:	fa cf       	rjmp	.-12     	; 0x2884 <CheckInput+0x86>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2890:	85 e7       	ldi	r24, 0x75	; 117
    2892:	9a e3       	ldi	r25, 0x3A	; 58
    2894:	ee de       	rcall	.-548    	; 0x2672 <CleanInput>
                specialPassed = 2;
    2896:	92 e0       	ldi	r25, 0x02	; 2
    2898:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <specialPassed>
                data[1] = 0;
    289c:	f8 01       	movw	r30, r16
    289e:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    28a0:	82 30       	cpi	r24, 0x02	; 2
    28a2:	80 f3       	brcs	.-32     	; 0x2884 <CheckInput+0x86>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    28a4:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28a8:	81 33       	cpi	r24, 0x31	; 49
    28aa:	60 f3       	brcs	.-40     	; 0x2884 <CheckInput+0x86>
    28ac:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28b0:	85 33       	cpi	r24, 0x35	; 53
    28b2:	40 f7       	brcc	.-48     	; 0x2884 <CheckInput+0x86>
                        serRx[1] |= 0x20;
    28b4:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28b8:	80 62       	ori	r24, 0x20	; 32
    28ba:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    28be:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28c2:	81 36       	cpi	r24, 0x61	; 97
    28c4:	61 f0       	breq	.+24     	; 0x28de <CheckInput+0xe0>
    28c6:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28ca:	85 36       	cpi	r24, 0x65	; 101
    28cc:	41 f0       	breq	.+16     	; 0x28de <CheckInput+0xe0>
    28ce:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28d2:	86 36       	cpi	r24, 0x66	; 102
    28d4:	21 f0       	breq	.+8      	; 0x28de <CheckInput+0xe0>
    28d6:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28da:	87 37       	cpi	r24, 0x77	; 119
    28dc:	99 f6       	brne	.-90     	; 0x2884 <CheckInput+0x86>
                            data[1] = specialInput[1]+0x11;
    28de:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput+0x1>
    28e2:	8f 5e       	subi	r24, 0xEF	; 239
    28e4:	f8 01       	movw	r30, r16
    28e6:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    28e8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28ec:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    28ee:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    28f2:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    28f4:	14 82       	std	Z+4, r1	; 0x04
    28f6:	a2 c1       	rjmp	.+836    	; 0x2c3c <CheckInput+0x43e>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    28f8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    28fc:	83 32       	cpi	r24, 0x23	; 35
    28fe:	89 f5       	brne	.+98     	; 0x2962 <CheckInput+0x164>
    2900:	8d b3       	in	r24, 0x1d	; 29
    2902:	86 30       	cpi	r24, 0x06	; 6
    2904:	71 f5       	brne	.+92     	; 0x2962 <CheckInput+0x164>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    290c:	fc 01       	movw	r30, r24
    290e:	eb 58       	subi	r30, 0x8B	; 139
    2910:	f5 4c       	sbci	r31, 0xC5	; 197
    2912:	20 81       	ld	r18, Z
    2914:	20 53       	subi	r18, 0x30	; 48
    2916:	20 83       	st	Z, r18
                    bitNr *= 10;
    2918:	11 0f       	add	r17, r17
    291a:	21 2f       	mov	r18, r17
    291c:	22 0f       	add	r18, r18
    291e:	22 0f       	add	r18, r18
    2920:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2922:	20 91 76 3a 	lds	r18, 0x3A76	; 0x803a76 <serRx+0x1>
    2926:	23 30       	cpi	r18, 0x03	; 3
    2928:	48 f4       	brcc	.+18     	; 0x293c <CheckInput+0x13e>
                    if (serRx[x] < 10) {
    292a:	20 81       	ld	r18, Z
    292c:	2a 30       	cpi	r18, 0x0A	; 10
    292e:	b8 f4       	brcc	.+46     	; 0x295e <CheckInput+0x160>
                        bitNr += serRx[x];
    2930:	20 81       	ld	r18, Z
    2932:	12 0f       	add	r17, r18
    2934:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    2936:	84 30       	cpi	r24, 0x04	; 4
    2938:	91 05       	cpc	r25, r1
    293a:	41 f7       	brne	.-48     	; 0x290c <CheckInput+0x10e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    293c:	81 2f       	mov	r24, r17
    293e:	8f 77       	andi	r24, 0x7F	; 127
    2940:	71 f0       	breq	.+28     	; 0x295e <CheckInput+0x160>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2942:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <serRx+0x4>
    2946:	60 91 7a 3a 	lds	r22, 0x3A7A	; 0x803a7a <serRx+0x5>
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	78 2b       	or	r23, r24
    294e:	81 2f       	mov	r24, r17
    2950:	80 95       	com	r24
    2952:	2c dc       	rcall	.-1960   	; 0x21ac <Cheat>
    2954:	88 23       	and	r24, r24
    2956:	19 f0       	breq	.+6      	; 0x295e <CheckInput+0x160>
    2958:	81 2f       	mov	r24, r17
    295a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	40 c0       	rjmp	.+128    	; 0x29e2 <CheckInput+0x1e4>
    2962:	d8 01       	movw	r26, r16
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2968:	fc 01       	movw	r30, r24
    296a:	eb 58       	subi	r30, 0x8B	; 139
    296c:	f5 4c       	sbci	r31, 0xC5	; 197
    296e:	20 81       	ld	r18, Z
    2970:	21 34       	cpi	r18, 0x41	; 65
    2972:	18 f0       	brcs	.+6      	; 0x297a <CheckInput+0x17c>
    2974:	20 81       	ld	r18, Z
    2976:	2b 35       	cpi	r18, 0x5B	; 91
    2978:	10 f0       	brcs	.+4      	; 0x297e <CheckInput+0x180>
    297a:	20 81       	ld	r18, Z
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <CheckInput+0x184>
    297e:	20 81       	ld	r18, Z
    2980:	20 62       	ori	r18, 0x20	; 32
    2982:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2984:	20 81       	ld	r18, Z
    2986:	21 11       	cpse	r18, r1
    2988:	05 c0       	rjmp	.+10     	; 0x2994 <CheckInput+0x196>
                    data[x] = 0;
    298a:	f8 01       	movw	r30, r16
    298c:	e8 0f       	add	r30, r24
    298e:	f1 1d       	adc	r31, r1
    2990:	10 82       	st	Z, r1
                    break;
    2992:	05 c0       	rjmp	.+10     	; 0x299e <CheckInput+0x1a0>
    2994:	01 96       	adiw	r24, 0x01	; 1
    2996:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2998:	81 34       	cpi	r24, 0x41	; 65
    299a:	91 05       	cpc	r25, r1
    299c:	29 f7       	brne	.-54     	; 0x2968 <CheckInput+0x16a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    299e:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
                data[0] = 0;
    29a2:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    29a4:	81 11       	cpse	r24, r1
    29a6:	05 c0       	rjmp	.+10     	; 0x29b2 <CheckInput+0x1b4>
                data[0] = 0;
    29a8:	10 82       	st	Z, r1
                RXCNT = 0;
    29aa:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    29ac:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    29b0:	43 c1       	rjmp	.+646    	; 0x2c38 <CheckInput+0x43a>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    29b2:	80 81       	ld	r24, Z
    29b4:	8f 33       	cpi	r24, 0x3F	; 63
    29b6:	11 f0       	breq	.+4      	; 0x29bc <CheckInput+0x1be>
    29b8:	88 36       	cpi	r24, 0x68	; 104
    29ba:	b9 f4       	brne	.+46     	; 0x29ea <CheckInput+0x1ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29bc:	83 e9       	ldi	r24, 0x93	; 147
    29be:	9b e7       	ldi	r25, 0x7B	; 123
    29c0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    29c4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    29c8:	8d e6       	ldi	r24, 0x6D	; 109
    29ca:	94 e0       	ldi	r25, 0x04	; 4
    29cc:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    29d0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    29dc:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	90 dc       	rcall	.-1760   	; 0x2304 <SetStandardResponse>
    29e4:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    29e8:	27 c1       	rjmp	.+590    	; 0x2c38 <CheckInput+0x43a>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    29ea:	81 36       	cpi	r24, 0x61	; 97
    29ec:	49 f4       	brne	.+18     	; 0x2a00 <CheckInput+0x202>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29ee:	8e e6       	ldi	r24, 0x6E	; 110
    29f0:	9a e7       	ldi	r25, 0x7A	; 122
    29f2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    29f6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    29fa:	85 e2       	ldi	r24, 0x25	; 37
    29fc:	91 e0       	ldi	r25, 0x01	; 1
    29fe:	e6 cf       	rjmp	.-52     	; 0x29cc <CheckInput+0x1ce>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2a00:	87 37       	cpi	r24, 0x77	; 119
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <CheckInput+0x208>
    2a04:	41 c0       	rjmp	.+130    	; 0x2a88 <CheckInput+0x28a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a06:	8d e8       	ldi	r24, 0x8D	; 141
    2a08:	96 e7       	ldi	r25, 0x76	; 118
    2a0a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2a0e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2a12:	82 e1       	ldi	r24, 0x12	; 18
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2a1a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2a1e:	21 e0       	ldi	r18, 0x01	; 1
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    2a26:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    2a2a:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	fc 01       	movw	r30, r24
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	e4 5b       	subi	r30, 0xB4	; 180
    2a38:	ff 43       	sbci	r31, 0x3F	; 63
    2a3a:	40 81       	ld	r20, Z
    2a3c:	51 81       	ldd	r21, Z+1	; 0x01
    2a3e:	88 0f       	add	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	fc 01       	movw	r30, r24
    2a44:	ec 5b       	subi	r30, 0xBC	; 188
    2a46:	ff 43       	sbci	r31, 0x3F	; 63
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2a50:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2a54:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    2a58:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2a5c:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    2a60:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a64:	8f e5       	ldi	r24, 0x5F	; 95
    2a66:	96 e7       	ldi	r25, 0x76	; 118
    2a68:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    2a6c:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    2a70:	8a e1       	ldi	r24, 0x1A	; 26
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    2a78:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    2a7c:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x86>
    2a80:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a84:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2a86:	ad cf       	rjmp	.-166    	; 0x29e2 <CheckInput+0x1e4>
    2a88:	62 e2       	ldi	r22, 0x22	; 34
    2a8a:	70 ec       	ldi	r23, 0xC0	; 192
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	e3 db       	rcall	.-2106   	; 0x2256 <StartsWith>
    2a90:	88 23       	and	r24, r24
    2a92:	19 f1       	breq	.+70     	; 0x2ada <CheckInput+0x2dc>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a94:	8e ee       	ldi	r24, 0xEE	; 238
    2a96:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    2a9a:	8f ee       	ldi	r24, 0xEF	; 239
    2a9c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    2aa0:	80 ef       	ldi	r24, 0xF0	; 240
    2aa2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    2aa6:	81 ef       	ldi	r24, 0xF1	; 241
    2aa8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                }
                SaveGameState();
    2aac:	0e 94 70 09 	call	0x12e0	; 0x12e0 <SaveGameState>

                uint8_t cheat[] = "Got ya! ";
    2ab0:	89 e0       	ldi	r24, 0x09	; 9
    2ab2:	e5 e3       	ldi	r30, 0x35	; 53
    2ab4:	f0 ec       	ldi	r31, 0xC0	; 192
    2ab6:	de 01       	movw	r26, r28
    2ab8:	11 96       	adiw	r26, 0x01	; 1
    2aba:	01 90       	ld	r0, Z+
    2abc:	0d 92       	st	X+, r0
    2abe:	8a 95       	dec	r24
    2ac0:	e1 f7       	brne	.-8      	; 0x2aba <CheckInput+0x2bc>
                SerSpeed(60);
    2ac2:	8c e3       	ldi	r24, 0x3C	; 60
    2ac4:	0e 94 90 08 	call	0x1120	; 0x1120 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2ac8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2acc:	88 23       	and	r24, r24
    2ace:	e1 f3       	breq	.-8      	; 0x2ac8 <CheckInput+0x2ca>
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2ad8:	f7 cf       	rjmp	.-18     	; 0x2ac8 <CheckInput+0x2ca>
    2ada:	68 e2       	ldi	r22, 0x28	; 40
    2adc:	70 ec       	ldi	r23, 0xC0	; 192
    2ade:	c8 01       	movw	r24, r16
    2ae0:	ba db       	rcall	.-2188   	; 0x2256 <StartsWith>
    2ae2:	88 23       	and	r24, r24
    2ae4:	81 f1       	breq	.+96     	; 0x2b46 <CheckInput+0x348>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2ae6:	8f ef       	ldi	r24, 0xFF	; 255
    2ae8:	8a 87       	std	Y+10, r24	; 0x0a
    2aea:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	be 01       	movw	r22, r28
    2af0:	66 5f       	subi	r22, 0xF6	; 246
    2af2:	7f 4f       	sbci	r23, 0xFF	; 255
    2af4:	81 2f       	mov	r24, r17
    2af6:	0e 94 0b 08 	call	0x1016	; 0x1016 <EEWrite>
    2afa:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2afc:	10 32       	cpi	r17, 0x20	; 32
    2afe:	b1 f7       	brne	.-20     	; 0x2aec <CheckInput+0x2ee>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2b00:	8e ee       	ldi	r24, 0xEE	; 238
    2b02:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    2b06:	8f ee       	ldi	r24, 0xEF	; 239
    2b08:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    2b0c:	80 ef       	ldi	r24, 0xF0	; 240
    2b0e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    2b12:	81 ef       	ldi	r24, 0xF1	; 241
    2b14:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                }
                
                SaveGameState();
    2b18:	0e 94 70 09 	call	0x12e0	; 0x12e0 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2b1c:	88 e0       	ldi	r24, 0x08	; 8
    2b1e:	ee e3       	ldi	r30, 0x3E	; 62
    2b20:	f0 ec       	ldi	r31, 0xC0	; 192
    2b22:	de 01       	movw	r26, r28
    2b24:	11 96       	adiw	r26, 0x01	; 1
    2b26:	01 90       	ld	r0, Z+
    2b28:	0d 92       	st	X+, r0
    2b2a:	8a 95       	dec	r24
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <CheckInput+0x328>
                SerSpeed(60);
    2b2e:	8c e3       	ldi	r24, 0x3C	; 60
    2b30:	0e 94 90 08 	call	0x1120	; 0x1120 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2b34:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2b38:	88 23       	and	r24, r24
    2b3a:	e1 f3       	breq	.-8      	; 0x2b34 <CheckInput+0x336>
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	01 96       	adiw	r24, 0x01	; 1
    2b40:	0e 94 7f 08 	call	0x10fe	; 0x10fe <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2b44:	f7 cf       	rjmp	.-18     	; 0x2b34 <CheckInput+0x336>
    2b46:	6f e2       	ldi	r22, 0x2F	; 47
    2b48:	70 ec       	ldi	r23, 0xC0	; 192
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	84 db       	rcall	.-2296   	; 0x2256 <StartsWith>
    2b4e:	88 23       	and	r24, r24
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <CheckInput+0x356>
    2b52:	98 ce       	rjmp	.-720    	; 0x2884 <CheckInput+0x86>
    2b54:	8b e1       	ldi	r24, 0x1B	; 27
    2b56:	c8 2e       	mov	r12, r24
    2b58:	89 e3       	ldi	r24, 0x39	; 57
    2b5a:	d8 2e       	mov	r13, r24
    2b5c:	9b e5       	ldi	r25, 0x5B	; 91
    2b5e:	e9 2e       	mov	r14, r25
    2b60:	99 e3       	ldi	r25, 0x39	; 57
    2b62:	f9 2e       	mov	r15, r25
    2b64:	0b e9       	ldi	r16, 0x9B	; 155
    2b66:	19 e3       	ldi	r17, 0x39	; 57
    2b68:	28 e1       	ldi	r18, 0x18	; 24
    2b6a:	32 2e       	mov	r3, r18
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b6c:	3d e9       	ldi	r19, 0x9D	; 157
    2b6e:	63 2e       	mov	r6, r19
    2b70:	34 e7       	ldi	r19, 0x74	; 116
    2b72:	73 2e       	mov	r7, r19
    reactStr[1][number]=length;
    2b74:	42 e0       	ldi	r20, 0x02	; 2
    2b76:	84 2e       	mov	r8, r20
    2b78:	91 2c       	mov	r9, r1
    reactStr[2][number]=type;
    2b7a:	aa 24       	eor	r10, r10
    2b7c:	a3 94       	inc	r10
    2b7e:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b80:	67 e5       	ldi	r22, 0x57	; 87
    2b82:	46 2e       	mov	r4, r22
    2b84:	6a e7       	ldi	r22, 0x7A	; 122
    2b86:	56 2e       	mov	r5, r22
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	be 01       	movw	r22, r28
    2b8c:	6f 5f       	subi	r22, 0xFF	; 255
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	83 2d       	mov	r24, r3
    2b92:	0e 94 fb 07 	call	0xff6	; 0xff6 <EERead>
                    bit = 0xff-bit;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	80 95       	com	r24
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b9c:	f6 01       	movw	r30, r12
    2b9e:	60 82       	st	Z, r6
    2ba0:	71 82       	std	Z+1, r7	; 0x01
    reactStr[1][number]=length;
    2ba2:	f7 01       	movw	r30, r14
    2ba4:	80 82       	st	Z, r8
    2ba6:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2ba8:	f8 01       	movw	r30, r16
    2baa:	a0 82       	st	Z, r10
    2bac:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bae:	28 2f       	mov	r18, r24
    2bb0:	22 95       	swap	r18
    2bb2:	2f 70       	andi	r18, 0x0F	; 15
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	23 57       	subi	r18, 0x73	; 115
    2bb8:	3b 48       	sbci	r19, 0x8B	; 139
    2bba:	f6 01       	movw	r30, r12
    2bbc:	22 83       	std	Z+2, r18	; 0x02
    2bbe:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    2bc0:	f7 01       	movw	r30, r14
    2bc2:	a2 82       	std	Z+2, r10	; 0x02
    2bc4:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	a2 82       	std	Z+2, r10	; 0x02
    2bca:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bcc:	8f 70       	andi	r24, 0x0F	; 15
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	83 57       	subi	r24, 0x73	; 115
    2bd2:	9b 48       	sbci	r25, 0x8B	; 139
    2bd4:	f6 01       	movw	r30, r12
    2bd6:	84 83       	std	Z+4, r24	; 0x04
    2bd8:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    2bda:	f7 01       	movw	r30, r14
    2bdc:	a4 82       	std	Z+4, r10	; 0x04
    2bde:	b5 82       	std	Z+5, r11	; 0x05
    reactStr[2][number]=type;
    2be0:	f8 01       	movw	r30, r16
    2be2:	a4 82       	std	Z+4, r10	; 0x04
    2be4:	b5 82       	std	Z+5, r11	; 0x05
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2be6:	f6 01       	movw	r30, r12
    2be8:	46 82       	std	Z+6, r4	; 0x06
    2bea:	57 82       	std	Z+7, r5	; 0x07
    reactStr[1][number]=length;
    2bec:	f7 01       	movw	r30, r14
    2bee:	86 82       	std	Z+6, r8	; 0x06
    2bf0:	97 82       	std	Z+7, r9	; 0x07
    reactStr[2][number]=type;
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	a6 82       	std	Z+6, r10	; 0x06
    2bf6:	b7 82       	std	Z+7, r11	; 0x07
    2bf8:	33 94       	inc	r3
    2bfa:	f8 e0       	ldi	r31, 0x08	; 8
    2bfc:	cf 0e       	add	r12, r31
    2bfe:	d1 1c       	adc	r13, r1
    2c00:	88 e0       	ldi	r24, 0x08	; 8
    2c02:	e8 0e       	add	r14, r24
    2c04:	f1 1c       	adc	r15, r1
    2c06:	08 5f       	subi	r16, 0xF8	; 248
    2c08:	1f 4f       	sbci	r17, 0xFF	; 255
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2c0a:	e0 e2       	ldi	r30, 0x20	; 32
    2c0c:	3e 12       	cpse	r3, r30
    2c0e:	bc cf       	rjmp	.-136    	; 0x2b88 <CheckInput+0x38a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c10:	89 e5       	ldi	r24, 0x59	; 89
    2c12:	9a e7       	ldi	r25, 0x7A	; 122
    2c14:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x3e>
    2c18:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x3f>
    reactStr[1][number]=length;
    2c1c:	84 e0       	ldi	r24, 0x04	; 4
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x7e>
    2c24:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x7f>
    reactStr[2][number]=type;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	80 93 d9 39 	sts	0x39D9, r24	; 0x8039d9 <reactStr+0xbe>
    2c30:	90 93 da 39 	sts	0x39DA, r25	; 0x8039da <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2c34:	30 92 1a 39 	sts	0x391A, r3	; 0x80391a <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2c38:	ff 24       	eor	r15, r15
    2c3a:	f3 94       	inc	r15
}
    2c3c:	8f 2d       	mov	r24, r15
    2c3e:	2a 96       	adiw	r28, 0x0a	; 10
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	df 90       	pop	r13
    2c52:	cf 90       	pop	r12
    2c54:	bf 90       	pop	r11
    2c56:	af 90       	pop	r10
    2c58:	9f 90       	pop	r9
    2c5a:	8f 90       	pop	r8
    2c5c:	7f 90       	pop	r7
    2c5e:	6f 90       	pop	r6
    2c60:	5f 90       	pop	r5
    2c62:	4f 90       	pop	r4
    2c64:	3f 90       	pop	r3
    2c66:	08 95       	ret

00002c68 <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2c68:	9f 92       	push	r9
    2c6a:	af 92       	push	r10
    2c6c:	bf 92       	push	r11
    2c6e:	cf 92       	push	r12
    2c70:	df 92       	push	r13
    2c72:	ef 92       	push	r14
    2c74:	ff 92       	push	r15
    2c76:	0f 93       	push	r16
    2c78:	1f 93       	push	r17
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	ab 97       	sbiw	r28, 0x2b	; 43
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	de bf       	out	0x3e, r29	; 62
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2c88:	99 24       	eor	r9, r9
    2c8a:	93 94       	inc	r9
    2c8c:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	fc 01       	movw	r30, r24
    2c92:	ee 0f       	add	r30, r30
    2c94:	ff 1f       	adc	r31, r31
    2c96:	e5 5e       	subi	r30, 0xE5	; 229
    2c98:	f6 4c       	sbci	r31, 0xC6	; 198
    2c9a:	2c ec       	ldi	r18, 0xCC	; 204
    2c9c:	37 e7       	ldi	r19, 0x77	; 119
    2c9e:	20 83       	st	Z, r18
    2ca0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	ee 0f       	add	r30, r30
    2ca6:	ff 1f       	adc	r31, r31
    2ca8:	e5 5a       	subi	r30, 0xA5	; 165
    2caa:	f6 4c       	sbci	r31, 0xC6	; 198
    2cac:	26 e1       	ldi	r18, 0x16	; 22
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	20 83       	st	Z, r18
    2cb2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e5 56       	subi	r30, 0x65	; 101
    2cbc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	80 83       	st	Z, r24
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	0e e3       	ldi	r16, 0x3E	; 62
    2cc8:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cca:	37 e5       	ldi	r19, 0x57	; 87
    2ccc:	e3 2e       	mov	r14, r19
    2cce:	3a e7       	ldi	r19, 0x7A	; 122
    2cd0:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2cd2:	42 e0       	ldi	r20, 0x02	; 2
    2cd4:	c4 2e       	mov	r12, r20
    2cd6:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2cd8:	aa 24       	eor	r10, r10
    2cda:	a3 94       	inc	r10
    2cdc:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2cde:	f8 01       	movw	r30, r16
    2ce0:	81 91       	ld	r24, Z+
    2ce2:	91 91       	ld	r25, Z+
    2ce4:	8f 01       	movw	r16, r30
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	c9 f1       	breq	.+114    	; 0x2d5c <ShowInventory+0xf4>
            PopulateObject(inventory[x], &actObj1);
    2cea:	be 01       	movw	r22, r28
    2cec:	6f 5f       	subi	r22, 0xFF	; 255
    2cee:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf0:	85 db       	rcall	.-2294   	; 0x23fc <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2cf2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2cf4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cf6:	89 2d       	mov	r24, r9
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	ee 0f       	add	r30, r30
    2cfe:	ff 1f       	adc	r31, r31
    2d00:	e5 5e       	subi	r30, 0xE5	; 229
    2d02:	f6 4c       	sbci	r31, 0xC6	; 198
    2d04:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d06:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d08:	40 83       	st	Z, r20
    2d0a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	ee 0f       	add	r30, r30
    2d10:	ff 1f       	adc	r31, r31
    2d12:	e5 5a       	subi	r30, 0xA5	; 165
    2d14:	f6 4c       	sbci	r31, 0xC6	; 198
    2d16:	20 83       	st	Z, r18
    2d18:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e5 56       	subi	r30, 0x65	; 101
    2d22:	f6 4c       	sbci	r31, 0xC6	; 198
    2d24:	10 82       	st	Z, r1
    2d26:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	89 0d       	add	r24, r9
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	93 94       	inc	r9
    2d30:	93 94       	inc	r9
    2d32:	fc 01       	movw	r30, r24
    2d34:	ee 0f       	add	r30, r30
    2d36:	ff 1f       	adc	r31, r31
    2d38:	e5 5e       	subi	r30, 0xE5	; 229
    2d3a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d3c:	e0 82       	st	Z, r14
    2d3e:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2d40:	fc 01       	movw	r30, r24
    2d42:	ee 0f       	add	r30, r30
    2d44:	ff 1f       	adc	r31, r31
    2d46:	e5 5a       	subi	r30, 0xA5	; 165
    2d48:	f6 4c       	sbci	r31, 0xC6	; 198
    2d4a:	c0 82       	st	Z, r12
    2d4c:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2d4e:	88 0f       	add	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	fc 01       	movw	r30, r24
    2d54:	e5 56       	subi	r30, 0x65	; 101
    2d56:	f6 4c       	sbci	r31, 0xC6	; 198
    2d58:	a0 82       	st	Z, r10
    2d5a:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2d5c:	f8 e3       	ldi	r31, 0x38	; 56
    2d5e:	02 34       	cpi	r16, 0x42	; 66
    2d60:	1f 07       	cpc	r17, r31
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <ShowInventory+0xfe>
    2d64:	bc cf       	rjmp	.-136    	; 0x2cde <ShowInventory+0x76>
        }
    }
    elements -= 1;
            
    return elements;
}
    2d66:	8f ef       	ldi	r24, 0xFF	; 255
    2d68:	89 0d       	add	r24, r9
    2d6a:	ab 96       	adiw	r28, 0x2b	; 43
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	1f 91       	pop	r17
    2d76:	0f 91       	pop	r16
    2d78:	ff 90       	pop	r15
    2d7a:	ef 90       	pop	r14
    2d7c:	df 90       	pop	r13
    2d7e:	cf 90       	pop	r12
    2d80:	bf 90       	pop	r11
    2d82:	af 90       	pop	r10
    2d84:	9f 90       	pop	r9
    2d86:	08 95       	ret

00002d88 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2d88:	6f 92       	push	r6
    2d8a:	7f 92       	push	r7
    2d8c:	8f 92       	push	r8
    2d8e:	9f 92       	push	r9
    2d90:	af 92       	push	r10
    2d92:	bf 92       	push	r11
    2d94:	cf 92       	push	r12
    2d96:	df 92       	push	r13
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	28 97       	sbiw	r28, 0x08	; 8
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2db0:	60 dc       	rcall	.-1856   	; 0x2672 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2db2:	c3 01       	movw	r24, r6
    2db4:	5e dc       	rcall	.-1860   	; 0x2672 <CleanInput>
    2db6:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2db8:	29 e5       	ldi	r18, 0x59	; 89
    2dba:	3a e7       	ldi	r19, 0x7A	; 122
    2dbc:	20 93 1b 39 	sts	0x391B, r18	; 0x80391b <reactStr>
    2dc0:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    2dc4:	84 e0       	ldi	r24, 0x04	; 4
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    2dcc:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2dd0:	01 e0       	ldi	r16, 0x01	; 1
    2dd2:	10 e0       	ldi	r17, 0x00	; 0
    2dd4:	00 93 9b 39 	sts	0x399B, r16	; 0x80399b <reactStr+0x80>
    2dd8:	10 93 9c 39 	sts	0x399C, r17	; 0x80399c <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2ddc:	ff 20       	and	r15, r15
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <ProcessInput+0x5a>
    2de0:	68 c7       	rjmp	.+3792   	; 0x3cb2 <ProcessInput+0xf2a>

        //eXit to previous location
        if (data[0] == 'x'){
    2de2:	d3 01       	movw	r26, r6
    2de4:	8c 91       	ld	r24, X
    2de6:	88 37       	cpi	r24, 0x78	; 120
    2de8:	09 f0       	breq	.+2      	; 0x2dec <ProcessInput+0x64>
    2dea:	45 c0       	rjmp	.+138    	; 0x2e76 <ProcessInput+0xee>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2dec:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2df0:	e8 2f       	mov	r30, r24
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	ee 0f       	add	r30, r30
    2df6:	ff 1f       	adc	r31, r31
    2df8:	e5 52       	subi	r30, 0x25	; 37
    2dfa:	f6 4c       	sbci	r31, 0xC6	; 198
    2dfc:	20 81       	ld	r18, Z
    2dfe:	31 81       	ldd	r19, Z+1	; 0x01
    2e00:	23 2b       	or	r18, r19
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <ProcessInput+0x80>
    2e04:	81 11       	cpse	r24, r1
    2e06:	03 c0       	rjmp	.+6      	; 0x2e0e <ProcessInput+0x86>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e08:	84 e4       	ldi	r24, 0x44	; 68
    2e0a:	96 e7       	ldi	r25, 0x76	; 118
    2e0c:	27 c5       	rjmp	.+2638   	; 0x385c <ProcessInput+0xad4>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2e0e:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x6>
    2e12:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
    2e16:	88 23       	and	r24, r24
    2e18:	b9 f0       	breq	.+46     	; 0x2e48 <ProcessInput+0xc0>
                --currDepth;
    2e1a:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2e1e:	e1 50       	subi	r30, 0x01	; 1
    2e20:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	ee 0f       	add	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	e5 52       	subi	r30, 0x25	; 37
    2e2c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e2e:	6b e1       	ldi	r22, 0x1B	; 27
    2e30:	7a e3       	ldi	r23, 0x3A	; 58
    2e32:	80 81       	ld	r24, Z
    2e34:	91 81       	ldd	r25, Z+1	; 0x01
    2e36:	e2 da       	rcall	.-2620   	; 0x23fc <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2e38:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2e42:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2e46:	31 c0       	rjmp	.+98     	; 0x2eaa <ProcessInput+0x122>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2e48:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x22>
    2e4c:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e50:	20 91 2f 3a 	lds	r18, 0x3A2F	; 0x803a2f <currObj+0x14>
    2e54:	30 91 30 3a 	lds	r19, 0x3A30	; 0x803a30 <currObj+0x15>
    2e58:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2e5c:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2e60:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2e64:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2e68:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2e6c:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2e70:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <currObj+0x28>
    2e74:	bd c5       	rjmp	.+2938   	; 0x39f0 <ProcessInput+0xc68>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2e76:	85 36       	cpi	r24, 0x65	; 101
    2e78:	19 f0       	breq	.+6      	; 0x2e80 <ProcessInput+0xf8>
    2e7a:	8f 36       	cpi	r24, 0x6F	; 111
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <ProcessInput+0xf8>
    2e7e:	f2 c0       	rjmp	.+484    	; 0x3064 <ProcessInput+0x2dc>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2e80:	b2 e0       	ldi	r27, 0x02	; 2
    2e82:	fb 16       	cp	r15, r27
    2e84:	a1 f0       	breq	.+40     	; 0x2eae <ProcessInput+0x126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e86:	84 e4       	ldi	r24, 0x44	; 68
    2e88:	96 e7       	ldi	r25, 0x76	; 118
    2e8a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2e8e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2e92:	8b e1       	ldi	r24, 0x1B	; 27
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2e9a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2ea6:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2eaa:	11 e0       	ldi	r17, 0x01	; 1
    2eac:	f9 c6       	rjmp	.+3570   	; 0x3ca0 <ProcessInput+0xf18>
            //Not possible, too many/little characters
            if (inputLen != 2){
                SetResponse(elements, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2eae:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <currDepth>
    2eb2:	10 e0       	ldi	r17, 0x00	; 0
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	ee 0f       	add	r30, r30
    2eb8:	ff 1f       	adc	r31, r31
    2eba:	e5 52       	subi	r30, 0x25	; 37
    2ebc:	f6 4c       	sbci	r31, 0xC6	; 198
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	d3 01       	movw	r26, r6
    2ec4:	11 96       	adiw	r26, 0x01	; 1
    2ec6:	6c 91       	ld	r22, X
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	66 db       	rcall	.-2356   	; 0x259a <FindChild>
    2ece:	00 0f       	add	r16, r16
    2ed0:	11 1f       	adc	r17, r17
    2ed2:	f8 01       	movw	r30, r16
    2ed4:	e3 52       	subi	r30, 0x23	; 35
    2ed6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ed8:	80 83       	st	Z, r24
    2eda:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2edc:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    2ee0:	29 2f       	mov	r18, r25
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	f9 01       	movw	r30, r18
    2ee6:	ee 0f       	add	r30, r30
    2ee8:	ff 1f       	adc	r31, r31
    2eea:	e3 52       	subi	r30, 0x23	; 35
    2eec:	f6 4c       	sbci	r31, 0xC6	; 198
    2eee:	40 81       	ld	r20, Z
    2ef0:	51 81       	ldd	r21, Z+1	; 0x01
    2ef2:	41 15       	cp	r20, r1
    2ef4:	51 05       	cpc	r21, r1
    2ef6:	21 f0       	breq	.+8      	; 0x2f00 <ProcessInput+0x178>
                    PopulateObject(route[currDepth+1], &actObj1);
    2ef8:	6a ed       	ldi	r22, 0xDA	; 218
    2efa:	78 e3       	ldi	r23, 0x38	; 56
    2efc:	ca 01       	movw	r24, r20
    2efe:	1c c0       	rjmp	.+56     	; 0x2f38 <ProcessInput+0x1b0>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2f00:	99 23       	and	r25, r25
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <ProcessInput+0x17e>
    2f04:	dc c6       	rjmp	.+3512   	; 0x3cbe <ProcessInput+0xf36>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2f06:	22 0f       	add	r18, r18
    2f08:	33 1f       	adc	r19, r19
    2f0a:	f9 01       	movw	r30, r18
    2f0c:	e7 52       	subi	r30, 0x27	; 39
    2f0e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f10:	d3 01       	movw	r26, r6
    2f12:	11 96       	adiw	r26, 0x01	; 1
    2f14:	6c 91       	ld	r22, X
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	e9 da       	rcall	.-2606   	; 0x24ee <CheckLetter>
    2f1c:	88 23       	and	r24, r24
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <ProcessInput+0x19a>
    2f20:	ce c6       	rjmp	.+3484   	; 0x3cbe <ProcessInput+0xf36>
                        PopulateObject(route[currDepth-1], &actObj1);
    2f22:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	ee 0f       	add	r30, r30
    2f2a:	ff 1f       	adc	r31, r31
    2f2c:	e7 52       	subi	r30, 0x27	; 39
    2f2e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f30:	6a ed       	ldi	r22, 0xDA	; 218
    2f32:	78 e3       	ldi	r23, 0x38	; 56
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	61 da       	rcall	.-2878   	; 0x23fc <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2f3a:	d3 01       	movw	r26, r6
    2f3c:	8c 91       	ld	r24, X
    2f3e:	85 36       	cpi	r24, 0x65	; 101
    2f40:	c1 f4       	brne	.+48     	; 0x2f72 <ProcessInput+0x1ea>
    2f42:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    2f46:	80 fd       	sbrc	r24, 0
    2f48:	1d c0       	rjmp	.+58     	; 0x2f84 <ProcessInput+0x1fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f4a:	8d e9       	ldi	r24, 0x9D	; 157
    2f4c:	99 e7       	ldi	r25, 0x79	; 121
    2f4e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2f52:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2f56:	8e e1       	ldi	r24, 0x1E	; 30
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2f5e:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2f6a:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2f6e:	12 e0       	ldi	r17, 0x02	; 2
    2f70:	97 c6       	rjmp	.+3374   	; 0x3ca0 <ProcessInput+0xf18>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2f72:	8f 36       	cpi	r24, 0x6F	; 111
    2f74:	39 f4       	brne	.+14     	; 0x2f84 <ProcessInput+0x1fc>
    2f76:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    2f7a:	81 fd       	sbrc	r24, 1
    2f7c:	03 c0       	rjmp	.+6      	; 0x2f84 <ProcessInput+0x1fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f7e:	82 e8       	ldi	r24, 0x82	; 130
    2f80:	99 e7       	ldi	r25, 0x79	; 121
    2f82:	6c c4       	rjmp	.+2264   	; 0x385c <ProcessInput+0xad4>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2f84:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <actObj1.3989+0x6>
    2f88:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
    2f8c:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2f90:	88 23       	and	r24, r24
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <ProcessInput+0x20e>
    2f94:	49 c0       	rjmp	.+146    	; 0x3028 <ProcessInput+0x2a0>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2f96:	ae 2f       	mov	r26, r30
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	aa 0f       	add	r26, r26
    2f9c:	bb 1f       	adc	r27, r27
    2f9e:	a3 52       	subi	r26, 0x23	; 35
    2fa0:	b6 4c       	sbci	r27, 0xC6	; 198
    2fa2:	8d 91       	ld	r24, X+
    2fa4:	9c 91       	ld	r25, X
    2fa6:	89 2b       	or	r24, r25
    2fa8:	11 f0       	breq	.+4      	; 0x2fae <ProcessInput+0x226>
    2faa:	ef 5f       	subi	r30, 0xFF	; 255
    2fac:	01 c0       	rjmp	.+2      	; 0x2fb0 <ProcessInput+0x228>
    2fae:	e1 50       	subi	r30, 0x01	; 1
    2fb0:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2fb4:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	e5 52       	subi	r30, 0x25	; 37
    2fc0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fc2:	6b e1       	ldi	r22, 0x1B	; 27
    2fc4:	7a e3       	ldi	r23, 0x3A	; 58
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	18 da       	rcall	.-3024   	; 0x23fc <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2fcc:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2fd0:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fd4:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    2fd8:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    2fdc:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2fe0:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2fe4:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2fe8:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2fec:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2ff0:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ff4:	89 e5       	ldi	r24, 0x59	; 89
    2ff6:	9a e7       	ldi	r25, 0x7A	; 122
    2ff8:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2ffc:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    3008:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    3014:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    3018:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3022:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3026:	07 c4       	rjmp	.+2062   	; 0x3836 <ProcessInput+0xaae>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	ee 0f       	add	r30, r30
    302c:	ff 1f       	adc	r31, r31
    302e:	e3 52       	subi	r30, 0x23	; 35
    3030:	f6 4c       	sbci	r31, 0xC6	; 198
    3032:	10 82       	st	Z, r1
    3034:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    3036:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3989+0x22>
    303a:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    303e:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3989+0x14>
    3042:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3989+0x15>
    3046:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    304a:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    304e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3052:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3056:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    305a:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    305e:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3989+0x28>
    3062:	c6 c4       	rjmp	.+2444   	; 0x39f0 <ProcessInput+0xc68>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    3064:	8c 36       	cpi	r24, 0x6C	; 108
    3066:	09 f0       	breq	.+2      	; 0x306a <ProcessInput+0x2e2>
    3068:	58 c1       	rjmp	.+688    	; 0x331a <ProcessInput+0x592>
    306a:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
            if (inputLen == 1) {
    306e:	b1 e0       	ldi	r27, 0x01	; 1
    3070:	fb 12       	cpse	r15, r27
    3072:	f1 c0       	rjmp	.+482    	; 0x3256 <ProcessInput+0x4ce>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    3074:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    3078:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    307c:	40 91 29 3a 	lds	r20, 0x3A29	; 0x803a29 <currObj+0xe>
    3080:	50 91 2a 3a 	lds	r21, 0x3A2A	; 0x803a2a <currObj+0xf>
    3084:	40 93 1d 39 	sts	0x391D, r20	; 0x80391d <reactStr+0x2>
    3088:	50 93 1e 39 	sts	0x391E, r21	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    308c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3090:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3094:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3098:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    309c:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    30a0:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    30a4:	82 e0       	ldi	r24, 0x02	; 2
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    30ac:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    30b0:	00 93 9f 39 	sts	0x399F, r16	; 0x80399f <reactStr+0x84>
    30b4:	10 93 a0 39 	sts	0x39A0, r17	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30b8:	8b ee       	ldi	r24, 0xEB	; 235
    30ba:	99 e7       	ldi	r25, 0x79	; 121
    30bc:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    30c0:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    30c4:	85 e1       	ldi	r24, 0x15	; 21
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    30cc:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    30d0:	00 93 a1 39 	sts	0x39A1, r16	; 0x8039a1 <reactStr+0x86>
    30d4:	10 93 a2 39 	sts	0x39A2, r17	; 0x8039a2 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	ee 0f       	add	r30, r30
    30dc:	ff 1f       	adc	r31, r31
    30de:	e3 52       	subi	r30, 0x23	; 35
    30e0:	f6 4c       	sbci	r31, 0xC6	; 198
    30e2:	10 82       	st	Z, r1
    30e4:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    30e6:	b4 e0       	ldi	r27, 0x04	; 4
    30e8:	9b 2e       	mov	r9, r27
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ea:	17 e5       	ldi	r17, 0x57	; 87
    30ec:	e1 2e       	mov	r14, r17
    30ee:	1a e7       	ldi	r17, 0x7A	; 122
    30f0:	f1 2e       	mov	r15, r17
    reactStr[1][number]=length;
    30f2:	02 e0       	ldi	r16, 0x02	; 2
    30f4:	c0 2e       	mov	r12, r16
    30f6:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    30f8:	aa 24       	eor	r10, r10
    30fa:	a3 94       	inc	r10
    30fc:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    30fe:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	8c 01       	movw	r16, r24
    3106:	00 0f       	add	r16, r16
    3108:	11 1f       	adc	r17, r17
    310a:	03 52       	subi	r16, 0x23	; 35
    310c:	16 4c       	sbci	r17, 0xC6	; 198
    310e:	f8 01       	movw	r30, r16
    3110:	40 81       	ld	r20, Z
    3112:	51 81       	ldd	r21, Z+1	; 0x01
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	fc 01       	movw	r30, r24
    311a:	e5 52       	subi	r30, 0x25	; 37
    311c:	f6 4c       	sbci	r31, 0xC6	; 198
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	3a da       	rcall	.-2956   	; 0x259a <FindChild>
    3126:	d8 01       	movw	r26, r16
    3128:	8d 93       	st	X+, r24
    312a:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    312c:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	ee 0f       	add	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	e3 52       	subi	r30, 0x23	; 35
    3138:	f6 4c       	sbci	r31, 0xC6	; 198
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	09 f4       	brne	.+2      	; 0x3144 <ProcessInput+0x3bc>
    3142:	4a c0       	rjmp	.+148    	; 0x31d8 <ProcessInput+0x450>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    3144:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    3148:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    314c:	82 17       	cp	r24, r18
    314e:	93 07       	cpc	r25, r19
    3150:	09 f4       	brne	.+2      	; 0x3154 <ProcessInput+0x3cc>
    3152:	42 c0       	rjmp	.+132    	; 0x31d8 <ProcessInput+0x450>
    3154:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    3158:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    315c:	82 17       	cp	r24, r18
    315e:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    3160:	d9 f1       	breq	.+118    	; 0x31d8 <ProcessInput+0x450>
    3162:	6a ed       	ldi	r22, 0xDA	; 218
    3164:	78 e3       	ldi	r23, 0x38	; 56
    3166:	4a d9       	rcall	.-3436   	; 0x23fc <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3168:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    316c:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3170:	e9 2d       	mov	r30, r9
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	df 01       	movw	r26, r30
    3176:	aa 0f       	add	r26, r26
    3178:	bb 1f       	adc	r27, r27
    317a:	a5 5e       	subi	r26, 0xE5	; 229
    317c:	b6 4c       	sbci	r27, 0xC6	; 198
    317e:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    3182:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    3186:	2d 93       	st	X+, r18
    3188:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    318a:	df 01       	movw	r26, r30
    318c:	aa 0f       	add	r26, r26
    318e:	bb 1f       	adc	r27, r27
    3190:	a5 5a       	subi	r26, 0xA5	; 165
    3192:	b6 4c       	sbci	r27, 0xC6	; 198
    3194:	8d 93       	st	X+, r24
    3196:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    3198:	ee 0f       	add	r30, r30
    319a:	ff 1f       	adc	r31, r31
    319c:	e5 56       	subi	r30, 0x65	; 101
    319e:	f6 4c       	sbci	r31, 0xC6	; 198
    31a0:	10 82       	st	Z, r1
    31a2:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	89 0d       	add	r24, r9
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	93 94       	inc	r9
    31ac:	93 94       	inc	r9
    31ae:	fc 01       	movw	r30, r24
    31b0:	ee 0f       	add	r30, r30
    31b2:	ff 1f       	adc	r31, r31
    31b4:	e5 5e       	subi	r30, 0xE5	; 229
    31b6:	f6 4c       	sbci	r31, 0xC6	; 198
    31b8:	e0 82       	st	Z, r14
    31ba:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    31bc:	fc 01       	movw	r30, r24
    31be:	ee 0f       	add	r30, r30
    31c0:	ff 1f       	adc	r31, r31
    31c2:	e5 5a       	subi	r30, 0xA5	; 165
    31c4:	f6 4c       	sbci	r31, 0xC6	; 198
    31c6:	c0 82       	st	Z, r12
    31c8:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    31ca:	88 0f       	add	r24, r24
    31cc:	99 1f       	adc	r25, r25
    31ce:	fc 01       	movw	r30, r24
    31d0:	e5 56       	subi	r30, 0x65	; 101
    31d2:	f6 4c       	sbci	r31, 0xC6	; 198
    31d4:	a0 82       	st	Z, r10
    31d6:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    31d8:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    31dc:	82 2f       	mov	r24, r18
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	fc 01       	movw	r30, r24
    31e2:	ee 0f       	add	r30, r30
    31e4:	ff 1f       	adc	r31, r31
    31e6:	e3 52       	subi	r30, 0x23	; 35
    31e8:	f6 4c       	sbci	r31, 0xC6	; 198
    31ea:	40 81       	ld	r20, Z
    31ec:	51 81       	ldd	r21, Z+1	; 0x01
    31ee:	45 2b       	or	r20, r21
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <ProcessInput+0x46c>
    31f2:	85 cf       	rjmp	.-246    	; 0x30fe <ProcessInput+0x376>

                //Look back if not on level 0
                if (currDepth) {
    31f4:	22 23       	and	r18, r18
    31f6:	61 f1       	breq	.+88     	; 0x3250 <ProcessInput+0x4c8>
                    PopulateObject(route[currDepth-1], &actObj1);
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	fc 01       	movw	r30, r24
    31fe:	e7 52       	subi	r30, 0x27	; 39
    3200:	f6 4c       	sbci	r31, 0xC6	; 198
    3202:	6a ed       	ldi	r22, 0xDA	; 218
    3204:	78 e3       	ldi	r23, 0x38	; 56
    3206:	80 81       	ld	r24, Z
    3208:	91 81       	ldd	r25, Z+1	; 0x01
    320a:	f8 d8       	rcall	.-3600   	; 0x23fc <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    320c:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3210:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    3214:	11 e0       	ldi	r17, 0x01	; 1
    3216:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3218:	89 2d       	mov	r24, r9
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	fc 01       	movw	r30, r24
    321e:	ee 0f       	add	r30, r30
    3220:	ff 1f       	adc	r31, r31
    3222:	e5 5e       	subi	r30, 0xE5	; 229
    3224:	f6 4c       	sbci	r31, 0xC6	; 198
    3226:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    322a:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    322e:	40 83       	st	Z, r20
    3230:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3232:	fc 01       	movw	r30, r24
    3234:	ee 0f       	add	r30, r30
    3236:	ff 1f       	adc	r31, r31
    3238:	e5 5a       	subi	r30, 0xA5	; 165
    323a:	f6 4c       	sbci	r31, 0xC6	; 198
    323c:	20 83       	st	Z, r18
    323e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	fc 01       	movw	r30, r24
    3246:	e5 56       	subi	r30, 0x65	; 101
    3248:	f6 4c       	sbci	r31, 0xC6	; 198
    324a:	10 82       	st	Z, r1
    324c:	11 82       	std	Z+1, r1	; 0x01
    324e:	28 c5       	rjmp	.+2640   	; 0x3ca0 <ProcessInput+0xf18>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    3250:	1f ef       	ldi	r17, 0xFF	; 255
    3252:	19 0d       	add	r17, r9
    3254:	25 c5       	rjmp	.+2634   	; 0x3ca0 <ProcessInput+0xf18>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3256:	ee 2e       	mov	r14, r30
    3258:	f1 2c       	mov	r15, r1
    325a:	f7 01       	movw	r30, r14
    325c:	ee 0f       	add	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	e5 52       	subi	r30, 0x25	; 37
    3262:	f6 4c       	sbci	r31, 0xC6	; 198
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	d3 01       	movw	r26, r6
    326a:	11 96       	adiw	r26, 0x01	; 1
    326c:	6c 91       	ld	r22, X
    326e:	80 81       	ld	r24, Z
    3270:	91 81       	ldd	r25, Z+1	; 0x01
    3272:	93 d9       	rcall	.-3290   	; 0x259a <FindChild>
    3274:	f7 01       	movw	r30, r14
    3276:	ee 0f       	add	r30, r30
    3278:	ff 1f       	adc	r31, r31
    327a:	e3 52       	subi	r30, 0x23	; 35
    327c:	f6 4c       	sbci	r31, 0xC6	; 198
    327e:	80 83       	st	Z, r24
    3280:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3282:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    3286:	29 2f       	mov	r18, r25
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	f9 01       	movw	r30, r18
    328c:	ee 0f       	add	r30, r30
    328e:	ff 1f       	adc	r31, r31
    3290:	e3 52       	subi	r30, 0x23	; 35
    3292:	f6 4c       	sbci	r31, 0xC6	; 198
    3294:	40 81       	ld	r20, Z
    3296:	51 81       	ldd	r21, Z+1	; 0x01
    3298:	41 15       	cp	r20, r1
    329a:	51 05       	cpc	r21, r1
    329c:	21 f0       	breq	.+8      	; 0x32a6 <ProcessInput+0x51e>
                    PopulateObject(route[currDepth+1], &actObj1);
    329e:	6a ed       	ldi	r22, 0xDA	; 218
    32a0:	78 e3       	ldi	r23, 0x38	; 56
    32a2:	ca 01       	movw	r24, r20
    32a4:	1b c0       	rjmp	.+54     	; 0x32dc <ProcessInput+0x554>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    32a6:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    32a8:	79 f1       	breq	.+94     	; 0x3308 <ProcessInput+0x580>
    32aa:	22 0f       	add	r18, r18
    32ac:	33 1f       	adc	r19, r19
    32ae:	f9 01       	movw	r30, r18
    32b0:	e7 52       	subi	r30, 0x27	; 39
    32b2:	f6 4c       	sbci	r31, 0xC6	; 198
    32b4:	d3 01       	movw	r26, r6
    32b6:	11 96       	adiw	r26, 0x01	; 1
    32b8:	6c 91       	ld	r22, X
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	17 d9       	rcall	.-3538   	; 0x24ee <CheckLetter>
    32c0:	88 23       	and	r24, r24
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <ProcessInput+0x53e>
                        PopulateObject(route[currDepth-1], &actObj1);
    32c4:	f2 cd       	rjmp	.-1052   	; 0x2eaa <ProcessInput+0x122>
    32c6:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	ee 0f       	add	r30, r30
    32ce:	ff 1f       	adc	r31, r31
    32d0:	e7 52       	subi	r30, 0x27	; 39
    32d2:	f6 4c       	sbci	r31, 0xC6	; 198
    32d4:	6a ed       	ldi	r22, 0xDA	; 218
    32d6:	78 e3       	ldi	r23, 0x38	; 56
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	8f d8       	rcall	.-3810   	; 0x23fc <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    32de:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3989+0x1c>
    32e2:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32e6:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0xe>
    32ea:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0xf>
    32ee:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    32f2:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    32f6:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    32fa:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    32fe:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3302:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    3306:	33 ce       	rjmp	.-922    	; 0x2f6e <ProcessInput+0x1e6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3308:	81 ed       	ldi	r24, 0xD1	; 209
    330a:	99 e7       	ldi	r25, 0x79	; 121
    330c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3310:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3314:	8a e1       	ldi	r24, 0x1A	; 26
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	ca c2       	rjmp	.+1428   	; 0x38ae <ProcessInput+0xb26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    331a:	80 37       	cpi	r24, 0x70	; 112
    331c:	09 f0       	breq	.+2      	; 0x3320 <ProcessInput+0x598>
    331e:	92 c0       	rjmp	.+292    	; 0x3444 <ProcessInput+0x6bc>
            if (inventory[0]&&inventory[1]) {
    3320:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    3324:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3328:	89 2b       	or	r24, r25
    332a:	79 f0       	breq	.+30     	; 0x334a <ProcessInput+0x5c2>
    332c:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3330:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3334:	89 2b       	or	r24, r25
    3336:	49 f0       	breq	.+18     	; 0x334a <ProcessInput+0x5c2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3338:	87 e0       	ldi	r24, 0x07	; 7
    333a:	98 e7       	ldi	r25, 0x78	; 120
    333c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3340:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3344:	89 e5       	ldi	r24, 0x59	; 89
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	b2 c2       	rjmp	.+1380   	; 0x38ae <ProcessInput+0xb26>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    334a:	b2 e0       	ldi	r27, 0x02	; 2
    334c:	fb 12       	cpse	r15, r27
    334e:	5c cd       	rjmp	.-1352   	; 0x2e08 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3350:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <currDepth>
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	f8 01       	movw	r30, r16
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	e5 52       	subi	r30, 0x25	; 37
    335e:	f6 4c       	sbci	r31, 0xC6	; 198
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	d3 01       	movw	r26, r6
    3366:	11 96       	adiw	r26, 0x01	; 1
    3368:	6c 91       	ld	r22, X
    336a:	80 81       	ld	r24, Z
    336c:	91 81       	ldd	r25, Z+1	; 0x01
    336e:	15 d9       	rcall	.-3542   	; 0x259a <FindChild>
    3370:	00 0f       	add	r16, r16
    3372:	11 1f       	adc	r17, r17
    3374:	f8 01       	movw	r30, r16
    3376:	e3 52       	subi	r30, 0x23	; 35
    3378:	f6 4c       	sbci	r31, 0xC6	; 198
    337a:	80 83       	st	Z, r24
    337c:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    337e:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	2f 5f       	subi	r18, 0xFF	; 255
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	22 0f       	add	r18, r18
    338a:	33 1f       	adc	r19, r19
    338c:	f9 01       	movw	r30, r18
    338e:	e5 52       	subi	r30, 0x25	; 37
    3390:	f6 4c       	sbci	r31, 0xC6	; 198
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	09 f4       	brne	.+2      	; 0x339c <ProcessInput+0x614>
    339a:	3f c3       	rjmp	.+1662   	; 0x3a1a <ProcessInput+0xc92>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    339c:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <inventory>
    33a0:	50 91 3f 38 	lds	r21, 0x383F	; 0x80383f <inventory+0x1>
    33a4:	84 17       	cp	r24, r20
    33a6:	95 07       	cpc	r25, r21
    33a8:	39 f0       	breq	.+14     	; 0x33b8 <ProcessInput+0x630>
    33aa:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory+0x2>
    33ae:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x3>
    33b2:	84 17       	cp	r24, r20
    33b4:	95 07       	cpc	r25, r21
    33b6:	c1 f4       	brne	.+48     	; 0x33e8 <ProcessInput+0x660>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33b8:	82 ee       	ldi	r24, 0xE2	; 226
    33ba:	97 e7       	ldi	r25, 0x77	; 119
    33bc:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    33c0:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    33c4:	85 e2       	ldi	r24, 0x25	; 37
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    33cc:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    33d8:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    33dc:	f9 01       	movw	r30, r18
    33de:	e5 52       	subi	r30, 0x25	; 37
    33e0:	f6 4c       	sbci	r31, 0xC6	; 198
    33e2:	10 82       	st	Z, r1
    33e4:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    33e6:	c3 cd       	rjmp	.-1146   	; 0x2f6e <ProcessInput+0x1e6>
    33e8:	6a ed       	ldi	r22, 0xDA	; 218
    33ea:	78 e3       	ldi	r23, 0x38	; 56
    33ec:	07 d8       	rcall	.-4082   	; 0x23fc <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    33ee:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    33f2:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
    33f6:	88 23       	and	r24, r24
    33f8:	09 f4       	brne	.+2      	; 0x33fc <ProcessInput+0x674>
    33fa:	e4 c2       	rjmp	.+1480   	; 0x39c4 <ProcessInput+0xc3c>
                            if (actObj1.byteField[ITEM_NR]) {
    33fc:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3989+0xb>
    3400:	88 23       	and	r24, r24
    3402:	09 f4       	brne	.+2      	; 0x3406 <ProcessInput+0x67e>
    3404:	01 cd       	rjmp	.-1534   	; 0x2e08 <ProcessInput+0x80>
                                if (inventory[0]) {
    3406:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    340a:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    340e:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                                    inventory[1] = route[currDepth+1];
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	e3 52       	subi	r30, 0x23	; 35
    341a:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    341c:	89 2b       	or	r24, r25
    341e:	39 f0       	breq	.+14     	; 0x342e <ProcessInput+0x6a6>
                                    inventory[1] = route[currDepth+1];
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    3428:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
    342c:	06 c0       	rjmp	.+12     	; 0x343a <ProcessInput+0x6b2>
                                } else {
                                    inventory[0] = route[currDepth+1];
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    3436:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    343a:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    343e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    3442:	2b c0       	rjmp	.+86     	; 0x349a <ProcessInput+0x712>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    3444:	84 36       	cpi	r24, 0x64	; 100
    3446:	d9 f4       	brne	.+54     	; 0x347e <ProcessInput+0x6f6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3448:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    344c:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3450:	00 97       	sbiw	r24, 0x00	; 0
    3452:	09 f0       	breq	.+2      	; 0x3456 <ProcessInput+0x6ce>
    3454:	3d c4       	rjmp	.+2170   	; 0x3cd0 <ProcessInput+0xf48>
    3456:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    345a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    345e:	89 2b       	or	r24, r25
    3460:	49 f4       	brne	.+18     	; 0x3474 <ProcessInput+0x6ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3462:	86 ea       	ldi	r24, 0xA6	; 166
    3464:	97 e7       	ldi	r25, 0x77	; 119
    3466:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    346a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    346e:	86 e2       	ldi	r24, 0x26	; 38
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	73 cd       	rjmp	.-1306   	; 0x2f5a <ProcessInput+0x1d2>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3474:	b2 e0       	ldi	r27, 0x02	; 2
    3476:	fb 16       	cp	r15, r27
    3478:	09 f4       	brne	.+2      	; 0x347c <ProcessInput+0x6f4>
    347a:	8c c4       	rjmp	.+2328   	; 0x3d94 <ProcessInput+0x100c>
    347c:	c5 cc       	rjmp	.-1654   	; 0x2e08 <ProcessInput+0x80>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    347e:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3480:	81 f4       	brne	.+32     	; 0x34a2 <ProcessInput+0x71a>
    3482:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    3486:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    348a:	89 2b       	or	r24, r25
    348c:	31 f4       	brne	.+12     	; 0x349a <ProcessInput+0x712>
    348e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3492:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3496:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    3498:	21 f3       	breq	.-56     	; 0x3462 <ProcessInput+0x6da>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	e5 db       	rcall	.-2102   	; 0x2c68 <ShowInventory>
    349e:	18 2f       	mov	r17, r24
    34a0:	ff c3       	rjmp	.+2046   	; 0x3ca0 <ProcessInput+0xf18>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    34a2:	9c e8       	ldi	r25, 0x8C	; 140
    34a4:	98 0f       	add	r25, r24
    34a6:	92 30       	cpi	r25, 0x02	; 2
    34a8:	28 f0       	brcs	.+10     	; 0x34b4 <ProcessInput+0x72c>
    34aa:	87 36       	cpi	r24, 0x67	; 103
    34ac:	19 f0       	breq	.+6      	; 0x34b4 <ProcessInput+0x72c>
    34ae:	82 37       	cpi	r24, 0x72	; 114
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <ProcessInput+0x72c>
    34b2:	b6 c2       	rjmp	.+1388   	; 0x3a20 <ProcessInput+0xc98>
            if ((inputLen<2)||(inputLen>3)) {
    34b4:	8e ef       	ldi	r24, 0xFE	; 254
    34b6:	8f 0d       	add	r24, r15
    34b8:	82 30       	cpi	r24, 0x02	; 2
    34ba:	08 f0       	brcs	.+2      	; 0x34be <ProcessInput+0x736>
    34bc:	a5 cc       	rjmp	.-1718   	; 0x2e08 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    34be:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    34c2:	0e 2f       	mov	r16, r30
    34c4:	10 e0       	ldi	r17, 0x00	; 0
    34c6:	d3 01       	movw	r26, r6
    34c8:	af 0d       	add	r26, r15
    34ca:	b1 1d       	adc	r27, r1
    34cc:	11 97       	sbiw	r26, 0x01	; 1
    34ce:	f8 01       	movw	r30, r16
    34d0:	ee 0f       	add	r30, r30
    34d2:	ff 1f       	adc	r31, r31
    34d4:	e5 52       	subi	r30, 0x25	; 37
    34d6:	f6 4c       	sbci	r31, 0xC6	; 198
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	6c 91       	ld	r22, X
    34de:	80 81       	ld	r24, Z
    34e0:	91 81       	ldd	r25, Z+1	; 0x01
    34e2:	5b d8       	rcall	.-3914   	; 0x259a <FindChild>
    34e4:	f8 01       	movw	r30, r16
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	e3 52       	subi	r30, 0x23	; 35
    34ec:	f6 4c       	sbci	r31, 0xC6	; 198
    34ee:	80 83       	st	Z, r24
    34f0:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    34f2:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	e3 52       	subi	r30, 0x23	; 35
    34fe:	f6 4c       	sbci	r31, 0xC6	; 198
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	09 f4       	brne	.+2      	; 0x350a <ProcessInput+0x782>
    3508:	79 c2       	rjmp	.+1266   	; 0x39fc <ProcessInput+0xc74>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    350a:	f3 e0       	ldi	r31, 0x03	; 3
    350c:	ff 12       	cpse	r15, r31
    350e:	61 c1       	rjmp	.+706    	; 0x37d2 <ProcessInput+0xa4a>
    3510:	d3 01       	movw	r26, r6
    3512:	2c 91       	ld	r18, X
    3514:	25 37       	cpi	r18, 0x75	; 117
    3516:	19 f0       	breq	.+6      	; 0x351e <ProcessInput+0x796>
    3518:	27 36       	cpi	r18, 0x67	; 103
    351a:	09 f0       	breq	.+2      	; 0x351e <ProcessInput+0x796>
    351c:	5a c1       	rjmp	.+692    	; 0x37d2 <ProcessInput+0xa4a>
    351e:	00 e0       	ldi	r16, 0x00	; 0
    3520:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3522:	41 e6       	ldi	r20, 0x61	; 97
    3524:	c4 2e       	mov	r12, r20
    3526:	49 e7       	ldi	r20, 0x79	; 121
    3528:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    352a:	51 e2       	ldi	r21, 0x21	; 33
    352c:	a5 2e       	mov	r10, r21
    352e:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3530:	88 24       	eor	r8, r8
    3532:	83 94       	inc	r8
    3534:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    3536:	e0 2e       	mov	r14, r16
    3538:	f1 2c       	mov	r15, r1
    353a:	c7 01       	movw	r24, r14
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	fc 01       	movw	r30, r24
    3542:	e2 5c       	subi	r30, 0xC2	; 194
    3544:	f7 4c       	sbci	r31, 0xC7	; 199
    3546:	7f 01       	movw	r14, r30
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	81 f0       	breq	.+32     	; 0x3570 <ProcessInput+0x7e8>
                                if (CheckLetter(inventory[x], data[1])) {
    3550:	d3 01       	movw	r26, r6
    3552:	11 96       	adiw	r26, 0x01	; 1
    3554:	6c 91       	ld	r22, X
    3556:	0e 94 77 12 	call	0x24ee	; 0x24ee <CheckLetter>
    355a:	88 23       	and	r24, r24
    355c:	49 f0       	breq	.+18     	; 0x3570 <ProcessInput+0x7e8>
                                    PopulateObject(inventory[x], &actObj2);
    355e:	6f ea       	ldi	r22, 0xAF	; 175
    3560:	78 e3       	ldi	r23, 0x38	; 56
    3562:	f7 01       	movw	r30, r14
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	0e 94 fe 11 	call	0x23fc	; 0x23fc <PopulateObject>
                                    x = 2;
    356c:	02 e0       	ldi	r16, 0x02	; 2
    356e:	1d c0       	rjmp	.+58     	; 0x35aa <ProcessInput+0x822>
                                }
                            }
                            if (x == 1) { 
    3570:	01 30       	cpi	r16, 0x01	; 1
    3572:	d1 f4       	brne	.+52     	; 0x35a8 <ProcessInput+0x820>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3574:	e1 2f       	mov	r30, r17
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	df 01       	movw	r26, r30
    357a:	aa 0f       	add	r26, r26
    357c:	bb 1f       	adc	r27, r27
    357e:	a5 5e       	subi	r26, 0xE5	; 229
    3580:	b6 4c       	sbci	r27, 0xC6	; 198
    3582:	cd 92       	st	X+, r12
    3584:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    3586:	df 01       	movw	r26, r30
    3588:	aa 0f       	add	r26, r26
    358a:	bb 1f       	adc	r27, r27
    358c:	a5 5a       	subi	r26, 0xA5	; 165
    358e:	b6 4c       	sbci	r27, 0xC6	; 198
    3590:	ad 92       	st	X+, r10
    3592:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	e5 56       	subi	r30, 0x65	; 101
    359a:	f6 4c       	sbci	r31, 0xC6	; 198
    359c:	80 82       	st	Z, r8
    359e:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    35a0:	d3 01       	movw	r26, r6
    35a2:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    35a4:	1f 5f       	subi	r17, 0xFF	; 255
    35a6:	01 c0       	rjmp	.+2      	; 0x35aa <ProcessInput+0x822>
    35a8:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    35aa:	0f 5f       	subi	r16, 0xFF	; 255
    35ac:	01 30       	cpi	r16, 0x01	; 1
    35ae:	19 f2       	breq	.-122    	; 0x3536 <ProcessInput+0x7ae>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    35b0:	f3 01       	movw	r30, r6
    35b2:	80 81       	ld	r24, Z
    35b4:	88 23       	and	r24, r24
    35b6:	09 f4       	brne	.+2      	; 0x35ba <ProcessInput+0x832>
    35b8:	73 c3       	rjmp	.+1766   	; 0x3ca0 <ProcessInput+0xf18>
                            PopulateObject(route[currDepth+1], &actObj1);
    35ba:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	ee 0f       	add	r30, r30
    35c2:	ff 1f       	adc	r31, r31
    35c4:	e3 52       	subi	r30, 0x23	; 35
    35c6:	f6 4c       	sbci	r31, 0xC6	; 198
    35c8:	6a ed       	ldi	r22, 0xDA	; 218
    35ca:	78 e3       	ldi	r23, 0x38	; 56
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    35d4:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3989+0x1e>
    35d8:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3989+0x1f>
    35dc:	f1 e0       	ldi	r31, 0x01	; 1
    35de:	ef 16       	cp	r14, r31
    35e0:	f1 04       	cpc	r15, r1
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <ProcessInput+0x85e>
    35e4:	89 c0       	rjmp	.+274    	; 0x36f8 <ProcessInput+0x970>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    35e6:	93 01       	movw	r18, r6
    35e8:	2e 5f       	subi	r18, 0xFE	; 254
    35ea:	3f 4f       	sbci	r19, 0xFF	; 255
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	61 e0       	ldi	r22, 0x01	; 1
    35f0:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    35f4:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    35f8:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
                                if (data[2] == '1') {
    35fc:	d3 01       	movw	r26, r6
    35fe:	12 96       	adiw	r26, 0x02	; 2
    3600:	3c 91       	ld	r19, X
    3602:	31 33       	cpi	r19, 0x31	; 49
    3604:	09 f0       	breq	.+2      	; 0x3608 <ProcessInput+0x880>
    3606:	4c c3       	rjmp	.+1688   	; 0x3ca0 <ProcessInput+0xf18>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3608:	20 91 ba 38 	lds	r18, 0x38BA	; 0x8038ba <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    360c:	51 ee       	ldi	r21, 0xE1	; 225
    360e:	52 0f       	add	r21, r18
    3610:	41 e0       	ldi	r20, 0x01	; 1
    3612:	41 0f       	add	r20, r17
    3614:	81 2f       	mov	r24, r17
    3616:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3618:	fc 01       	movw	r30, r24
    361a:	ee 0f       	add	r30, r30
    361c:	ff 1f       	adc	r31, r31
    361e:	e5 5e       	subi	r30, 0xE5	; 229
    3620:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3622:	54 30       	cpi	r21, 0x04	; 4
    3624:	b0 f0       	brcs	.+44     	; 0x3652 <ProcessInput+0x8ca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3626:	21 e0       	ldi	r18, 0x01	; 1
    3628:	39 e7       	ldi	r19, 0x79	; 121
    362a:	20 83       	st	Z, r18
    362c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    362e:	fc 01       	movw	r30, r24
    3630:	ee 0f       	add	r30, r30
    3632:	ff 1f       	adc	r31, r31
    3634:	e5 5a       	subi	r30, 0xA5	; 165
    3636:	f6 4c       	sbci	r31, 0xC6	; 198
    3638:	2a e1       	ldi	r18, 0x1A	; 26
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	20 83       	st	Z, r18
    363e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	fc 01       	movw	r30, r24
    3646:	e5 56       	subi	r30, 0x65	; 101
    3648:	f6 4c       	sbci	r31, 0xC6	; 198
    364a:	e0 82       	st	Z, r14
    364c:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    364e:	14 2f       	mov	r17, r20
    3650:	27 c3       	rjmp	.+1614   	; 0x3ca0 <ProcessInput+0xf18>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3652:	60 e5       	ldi	r22, 0x50	; 80
    3654:	75 e7       	ldi	r23, 0x75	; 117
    3656:	60 83       	st	Z, r22
    3658:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    365a:	fc 01       	movw	r30, r24
    365c:	ee 0f       	add	r30, r30
    365e:	ff 1f       	adc	r31, r31
    3660:	e5 5a       	subi	r30, 0xA5	; 165
    3662:	f6 4c       	sbci	r31, 0xC6	; 198
    3664:	62 eb       	ldi	r22, 0xB2	; 178
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	60 83       	st	Z, r22
    366a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    366c:	88 0f       	add	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	fc 01       	movw	r30, r24
    3672:	e5 56       	subi	r30, 0x65	; 101
    3674:	f6 4c       	sbci	r31, 0xC6	; 198
    3676:	e0 82       	st	Z, r14
    3678:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    367a:	84 2f       	mov	r24, r20
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	fc 01       	movw	r30, r24
    3680:	ee 0f       	add	r30, r30
    3682:	ff 1f       	adc	r31, r31
    3684:	e5 5e       	subi	r30, 0xE5	; 229
    3686:	f6 4c       	sbci	r31, 0xC6	; 198
    3688:	49 e5       	ldi	r20, 0x59	; 89
    368a:	5a e7       	ldi	r21, 0x7A	; 122
    368c:	40 83       	st	Z, r20
    368e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3690:	fc 01       	movw	r30, r24
    3692:	ee 0f       	add	r30, r30
    3694:	ff 1f       	adc	r31, r31
    3696:	e5 5a       	subi	r30, 0xA5	; 165
    3698:	f6 4c       	sbci	r31, 0xC6	; 198
    369a:	42 e0       	ldi	r20, 0x02	; 2
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	40 83       	st	Z, r20
    36a0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	fc 01       	movw	r30, r24
    36a8:	e5 56       	subi	r30, 0x65	; 101
    36aa:	f6 4c       	sbci	r31, 0xC6	; 198
    36ac:	e0 82       	st	Z, r14
    36ae:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	81 0f       	add	r24, r17
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	1d 5f       	subi	r17, 0xFD	; 253
    36b8:	fc 01       	movw	r30, r24
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	e5 5e       	subi	r30, 0xE5	; 229
    36c0:	f6 4c       	sbci	r31, 0xC6	; 198
    36c2:	4d ea       	ldi	r20, 0xAD	; 173
    36c4:	58 e7       	ldi	r21, 0x78	; 120
    36c6:	40 83       	st	Z, r20
    36c8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    36ca:	fc 01       	movw	r30, r24
    36cc:	ee 0f       	add	r30, r30
    36ce:	ff 1f       	adc	r31, r31
    36d0:	e5 5a       	subi	r30, 0xA5	; 165
    36d2:	f6 4c       	sbci	r31, 0xC6	; 198
    36d4:	42 e1       	ldi	r20, 0x12	; 18
    36d6:	50 e0       	ldi	r21, 0x00	; 0
    36d8:	40 83       	st	Z, r20
    36da:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    36dc:	88 0f       	add	r24, r24
    36de:	99 1f       	adc	r25, r25
    36e0:	fc 01       	movw	r30, r24
    36e2:	e5 56       	subi	r30, 0x65	; 101
    36e4:	f6 4c       	sbci	r31, 0xC6	; 198
    36e6:	e0 82       	st	Z, r14
    36e8:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    36ea:	30 93 0a 39 	sts	0x390A, r19	; 0x80390a <specialInput>
                                        specialInput[1] = item;
    36ee:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <specialInput+0x1>
                                        specialInput[2] = 0;
    36f2:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput+0x2>
    36f6:	d4 c2       	rjmp	.+1448   	; 0x3ca0 <ProcessInput+0xf18>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    36f8:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3989+0x9>
    36fc:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj2.3990+0xb>
    3700:	98 13       	cpse	r25, r24
    3702:	2e c0       	rjmp	.+92     	; 0x3760 <ProcessInput+0x9d8>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3704:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3989+0x26>
    3708:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3989+0x27>
    370c:	01 e0       	ldi	r16, 0x01	; 1
    370e:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3710:	81 2f       	mov	r24, r17
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	fc 01       	movw	r30, r24
    3716:	ee 0f       	add	r30, r30
    3718:	ff 1f       	adc	r31, r31
    371a:	e5 5e       	subi	r30, 0xE5	; 229
    371c:	f6 4c       	sbci	r31, 0xC6	; 198
    371e:	40 91 f2 38 	lds	r20, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3722:	50 91 f3 38 	lds	r21, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3726:	40 83       	st	Z, r20
    3728:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    372a:	fc 01       	movw	r30, r24
    372c:	ee 0f       	add	r30, r30
    372e:	ff 1f       	adc	r31, r31
    3730:	e5 5a       	subi	r30, 0xA5	; 165
    3732:	f6 4c       	sbci	r31, 0xC6	; 198
    3734:	20 83       	st	Z, r18
    3736:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	fc 01       	movw	r30, r24
    373e:	e5 56       	subi	r30, 0x65	; 101
    3740:	f6 4c       	sbci	r31, 0xC6	; 198
    3742:	10 82       	st	Z, r1
    3744:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3746:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3750:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3754:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3758:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    375c:	10 2f       	mov	r17, r16
    375e:	a0 c2       	rjmp	.+1344   	; 0x3ca0 <ProcessInput+0xf18>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3760:	f3 01       	movw	r30, r6
    3762:	80 81       	ld	r24, Z
    3764:	85 37       	cpi	r24, 0x75	; 117
    3766:	99 f4       	brne	.+38     	; 0x378e <ProcessInput+0xa06>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3768:	81 2f       	mov	r24, r17
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	fc 01       	movw	r30, r24
    376e:	ee 0f       	add	r30, r30
    3770:	ff 1f       	adc	r31, r31
    3772:	e5 5e       	subi	r30, 0xE5	; 229
    3774:	f6 4c       	sbci	r31, 0xC6	; 198
    3776:	21 e0       	ldi	r18, 0x01	; 1
    3778:	39 e7       	ldi	r19, 0x79	; 121
    377a:	20 83       	st	Z, r18
    377c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    377e:	fc 01       	movw	r30, r24
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	e5 5a       	subi	r30, 0xA5	; 165
    3786:	f6 4c       	sbci	r31, 0xC6	; 198
    3788:	2a e1       	ldi	r18, 0x1A	; 26
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	15 c0       	rjmp	.+42     	; 0x37b8 <ProcessInput+0xa30>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    378e:	87 36       	cpi	r24, 0x67	; 103
    3790:	09 f0       	breq	.+2      	; 0x3794 <ProcessInput+0xa0c>
    3792:	86 c2       	rjmp	.+1292   	; 0x3ca0 <ProcessInput+0xf18>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3794:	81 2f       	mov	r24, r17
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	fc 01       	movw	r30, r24
    379a:	ee 0f       	add	r30, r30
    379c:	ff 1f       	adc	r31, r31
    379e:	e5 5e       	subi	r30, 0xE5	; 229
    37a0:	f6 4c       	sbci	r31, 0xC6	; 198
    37a2:	2f e9       	ldi	r18, 0x9F	; 159
    37a4:	36 e7       	ldi	r19, 0x76	; 118
    37a6:	20 83       	st	Z, r18
    37a8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    37aa:	fc 01       	movw	r30, r24
    37ac:	ee 0f       	add	r30, r30
    37ae:	ff 1f       	adc	r31, r31
    37b0:	e5 5a       	subi	r30, 0xA5	; 165
    37b2:	f6 4c       	sbci	r31, 0xC6	; 198
    37b4:	28 e2       	ldi	r18, 0x28	; 40
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	20 83       	st	Z, r18
    37ba:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	fc 01       	movw	r30, r24
    37c2:	e5 56       	subi	r30, 0x65	; 101
    37c4:	f6 4c       	sbci	r31, 0xC6	; 198
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    37ce:	1f 5f       	subi	r17, 0xFF	; 255
    37d0:	67 c2       	rjmp	.+1230   	; 0x3ca0 <ProcessInput+0xf18>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    37d2:	6a ed       	ldi	r22, 0xDA	; 218
    37d4:	78 e3       	ldi	r23, 0x38	; 56
    37d6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    37da:	d3 01       	movw	r26, r6
    37dc:	8c 91       	ld	r24, X
    37de:	84 37       	cpi	r24, 0x74	; 116
    37e0:	61 f5       	brne	.+88     	; 0x383a <ProcessInput+0xab2>
    37e2:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    37e6:	83 fd       	sbrc	r24, 3
    37e8:	43 c0       	rjmp	.+134    	; 0x3870 <ProcessInput+0xae8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ea:	8b e1       	ldi	r24, 0x1B	; 27
    37ec:	99 e7       	ldi	r25, 0x79	; 121
    37ee:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    37f2:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    37f6:	8e e1       	ldi	r24, 0x1E	; 30
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    37fe:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    380a:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    380e:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3812:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3816:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    381a:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    381e:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    3822:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3826:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    382a:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    382e:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    3832:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3836:	13 e0       	ldi	r17, 0x03	; 3
    3838:	33 c2       	rjmp	.+1126   	; 0x3ca0 <ProcessInput+0xf18>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    383a:	85 37       	cpi	r24, 0x75	; 117
    383c:	39 f4       	brne	.+14     	; 0x384c <ProcessInput+0xac4>
    383e:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    3842:	84 fd       	sbrc	r24, 4
    3844:	15 c0       	rjmp	.+42     	; 0x3870 <ProcessInput+0xae8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	99 e7       	ldi	r25, 0x79	; 121
    384a:	3b c2       	rjmp	.+1142   	; 0x3cc2 <ProcessInput+0xf3a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    384c:	82 37       	cpi	r24, 0x72	; 114
    384e:	69 f4       	brne	.+26     	; 0x386a <ProcessInput+0xae2>
    3850:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    3854:	85 fd       	sbrc	r24, 5
    3856:	0c c0       	rjmp	.+24     	; 0x3870 <ProcessInput+0xae8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3858:	86 ee       	ldi	r24, 0xE6	; 230
    385a:	98 e7       	ldi	r25, 0x78	; 120
    385c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3860:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3864:	8b e1       	ldi	r24, 0x1B	; 27
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	78 cb       	rjmp	.-2320   	; 0x2f5a <ProcessInput+0x1d2>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    386a:	87 36       	cpi	r24, 0x67	; 103
    386c:	09 f4       	brne	.+2      	; 0x3870 <ProcessInput+0xae8>
    386e:	cc ca       	rjmp	.-2664   	; 0x2e08 <ProcessInput+0x80>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3870:	00 91 f8 38 	lds	r16, 0x38F8	; 0x8038f8 <actObj1.3989+0x1e>
    3874:	10 91 f9 38 	lds	r17, 0x38F9	; 0x8038f9 <actObj1.3989+0x1f>
    3878:	01 30       	cpi	r16, 0x01	; 1
    387a:	11 05       	cpc	r17, r1
    387c:	09 f5       	brne	.+66     	; 0x38c0 <ProcessInput+0xb38>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    387e:	93 01       	movw	r18, r6
    3880:	2e 5f       	subi	r18, 0xFE	; 254
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	40 e0       	ldi	r20, 0x00	; 0
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    388c:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    3890:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
                                if (data[2] == '1') {
    3894:	f3 01       	movw	r30, r6
    3896:	82 81       	ldd	r24, Z+2	; 0x02
    3898:	81 33       	cpi	r24, 0x31	; 49
    389a:	09 f0       	breq	.+2      	; 0x389e <ProcessInput+0xb16>
    389c:	06 cb       	rjmp	.-2548   	; 0x2eaa <ProcessInput+0x122>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    389e:	85 e2       	ldi	r24, 0x25	; 37
    38a0:	95 e7       	ldi	r25, 0x75	; 117
    38a2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    38a6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    38aa:	8b e2       	ldi	r24, 0x2B	; 43
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    38b2:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    38b6:	00 93 9d 39 	sts	0x399D, r16	; 0x80399d <reactStr+0x82>
    38ba:	10 93 9e 39 	sts	0x399E, r17	; 0x80399e <reactStr+0x83>
    38be:	57 cb       	rjmp	.-2386   	; 0x2f6e <ProcessInput+0x1e6>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    38c0:	01 15       	cp	r16, r1
    38c2:	11 05       	cpc	r17, r1
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <ProcessInput+0xb40>
    38c6:	58 c0       	rjmp	.+176    	; 0x3978 <ProcessInput+0xbf0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38c8:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    38cc:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    38d0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    38d4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    38d8:	00 93 5d 39 	sts	0x395D, r16	; 0x80395d <reactStr+0x42>
    38dc:	10 93 5e 39 	sts	0x395E, r17	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    38e0:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    38e4:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38e8:	89 e5       	ldi	r24, 0x59	; 89
    38ea:	9a e7       	ldi	r25, 0x7A	; 122
    38ec:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    38f0:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    38f4:	82 e0       	ldi	r24, 0x02	; 2
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    38fc:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    3908:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    390c:	2d ea       	ldi	r18, 0xAD	; 173
    390e:	38 e7       	ldi	r19, 0x78	; 120
    3910:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3914:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3918:	22 e1       	ldi	r18, 0x12	; 18
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3920:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3924:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    3928:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    392c:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    3930:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3989+0x21>
    3934:	40 97       	sbiw	r24, 0x10	; 16
    3936:	30 f0       	brcs	.+12     	; 0x3944 <ProcessInput+0xbbc>
    3938:	8f e0       	ldi	r24, 0x0F	; 15
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <actObj1.3989+0x20>
    3940:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3944:	2a e0       	ldi	r18, 0x0A	; 10
    3946:	39 e3       	ldi	r19, 0x39	; 57
    3948:	40 e0       	ldi	r20, 0x00	; 0
    394a:	60 91 fa 38 	lds	r22, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    394e:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x12>
    3952:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x13>
    3956:	0e 94 4d 08 	call	0x109a	; 0x109a <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    395a:	6a e0       	ldi	r22, 0x0A	; 10
    395c:	79 e3       	ldi	r23, 0x39	; 57
    395e:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    3962:	0e 94 14 11 	call	0x2228	; 0x2228 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3966:	e0 91 fa 38 	lds	r30, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    396a:	f0 91 fb 38 	lds	r31, 0x38FB	; 0x8038fb <actObj1.3989+0x21>
    396e:	e6 5f       	subi	r30, 0xF6	; 246
    3970:	f6 4c       	sbci	r31, 0xC6	; 198
    3972:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3974:	14 e0       	ldi	r17, 0x04	; 4
    3976:	94 c1       	rjmp	.+808    	; 0x3ca0 <ProcessInput+0xf18>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3978:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    397c:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
    3980:	88 23       	and	r24, r24
    3982:	01 f1       	breq	.+64     	; 0x39c4 <ProcessInput+0xc3c>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3984:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x26>
    3988:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    398c:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3990:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3994:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3998:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    399c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    39a0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    39a4:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    39a8:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    39ac:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    39b6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    39ba:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    39be:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    39c2:	d5 ca       	rjmp	.-2646   	; 0x2f6e <ProcessInput+0x1e6>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    39c4:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x24>
    39c8:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39cc:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x16>
    39d0:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x17>
    39d4:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    39d8:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    39dc:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    39e0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    39e4:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    39e8:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    39ec:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3989+0x29>
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    39f6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    39fa:	b9 ca       	rjmp	.-2702   	; 0x2f6e <ProcessInput+0x1e6>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    39fc:	d3 01       	movw	r26, r6
    39fe:	8c 91       	ld	r24, X
    3a00:	84 37       	cpi	r24, 0x74	; 116
    3a02:	11 f0       	breq	.+4      	; 0x3a08 <ProcessInput+0xc80>
    3a04:	87 36       	cpi	r24, 0x67	; 103
    3a06:	49 f4       	brne	.+18     	; 0x3a1a <ProcessInput+0xc92>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a08:	89 e3       	ldi	r24, 0x39	; 57
    3a0a:	99 e7       	ldi	r25, 0x79	; 121
    3a0c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3a10:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a14:	84 e1       	ldi	r24, 0x14	; 20
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	a0 ca       	rjmp	.-2752   	; 0x2f5a <ProcessInput+0x1d2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a1a:	8d e4       	ldi	r24, 0x4D	; 77
    3a1c:	99 e7       	ldi	r25, 0x79	; 121
    3a1e:	f6 cf       	rjmp	.-20     	; 0x3a0c <ProcessInput+0xc84>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3a20:	81 36       	cpi	r24, 0x61	; 97
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <ProcessInput+0xc9e>
    3a24:	42 ca       	rjmp	.-2940   	; 0x2eaa <ProcessInput+0x122>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3a26:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <specialPassed>
    3a2a:	82 30       	cpi	r24, 0x02	; 2
    3a2c:	08 f4       	brcc	.+2      	; 0x3a30 <ProcessInput+0xca8>
    3a2e:	c7 c0       	rjmp	.+398    	; 0x3bbe <ProcessInput+0xe36>
                if (data[1] > 0) {
    3a30:	f3 01       	movw	r30, r6
    3a32:	21 81       	ldd	r18, Z+1	; 0x01
    3a34:	22 23       	and	r18, r18
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <ProcessInput+0xcb2>
    3a38:	af c0       	rjmp	.+350    	; 0x3b98 <ProcessInput+0xe10>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	01 96       	adiw	r24, 0x01	; 1
    3a3e:	7c 01       	movw	r14, r24
    3a40:	88 e0       	ldi	r24, 0x08	; 8
    3a42:	d7 01       	movw	r26, r14
    3a44:	1d 92       	st	X+, r1
    3a46:	8a 95       	dec	r24
    3a48:	e9 f7       	brne	.-6      	; 0x3a44 <ProcessInput+0xcbc>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3a4a:	20 53       	subi	r18, 0x30	; 48
    3a4c:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3a4e:	32 81       	ldd	r19, Z+2	; 0x02
    3a50:	31 53       	subi	r19, 0x31	; 49
    3a52:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3a54:	83 81       	ldd	r24, Z+3	; 0x03
    3a56:	81 36       	cpi	r24, 0x61	; 97
    3a58:	11 f4       	brne	.+4      	; 0x3a5e <ProcessInput+0xcd6>
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	0c c0       	rjmp	.+24     	; 0x3a76 <ProcessInput+0xcee>
                    else if (data[3] == 'e') data[3] = 0;
    3a5e:	85 36       	cpi	r24, 0x65	; 101
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <ProcessInput+0xce0>
    3a62:	f3 01       	movw	r30, r6
    3a64:	13 82       	std	Z+3, r1	; 0x03
    3a66:	08 c0       	rjmp	.+16     	; 0x3a78 <ProcessInput+0xcf0>
                    else if (data[3] == 'f') data[3] = 3;
    3a68:	86 36       	cpi	r24, 0x66	; 102
    3a6a:	19 f4       	brne	.+6      	; 0x3a72 <ProcessInput+0xcea>
    3a6c:	83 e0       	ldi	r24, 0x03	; 3
    3a6e:	83 83       	std	Z+3, r24	; 0x03
    3a70:	03 c0       	rjmp	.+6      	; 0x3a78 <ProcessInput+0xcf0>
                    else data[3] = 2;
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	f3 01       	movw	r30, r6
    3a76:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3a78:	21 fd       	sbrc	r18, 1
    3a7a:	04 c0       	rjmp	.+8      	; 0x3a84 <ProcessInput+0xcfc>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	dc 01       	movw	r26, r24
    3a82:	04 c0       	rjmp	.+8      	; 0x3a8c <ProcessInput+0xd04>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	a0 e1       	ldi	r26, 0x10	; 16
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3a8c:	20 ff       	sbrs	r18, 0
    3a8e:	03 c0       	rjmp	.+6      	; 0x3a96 <ProcessInput+0xd0e>
    3a90:	9f 5f       	subi	r25, 0xFF	; 255
    3a92:	af 4f       	sbci	r26, 0xFF	; 255
    3a94:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3a96:	f3 01       	movw	r30, r6
    3a98:	23 81       	ldd	r18, Z+3	; 0x03
    3a9a:	21 fd       	sbrc	r18, 1
    3a9c:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3a9e:	20 ff       	sbrs	r18, 0
    3aa0:	03 c0       	rjmp	.+6      	; 0x3aa8 <ProcessInput+0xd20>
    3aa2:	40 96       	adiw	r24, 0x10	; 16
    3aa4:	a1 1d       	adc	r26, r1
    3aa6:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3aa8:	31 ff       	sbrs	r19, 1
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <ProcessInput+0xd2a>
    3aac:	90 5f       	subi	r25, 0xF0	; 240
    3aae:	af 4f       	sbci	r26, 0xFF	; 255
    3ab0:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3ab2:	30 ff       	sbrs	r19, 0
    3ab4:	03 c0       	rjmp	.+6      	; 0x3abc <ProcessInput+0xd34>
    3ab6:	01 96       	adiw	r24, 0x01	; 1
    3ab8:	a1 1d       	adc	r26, r1
    3aba:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3abc:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <whoami>
    3ac0:	24 e0       	ldi	r18, 0x04	; 4
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	24 1b       	sub	r18, r20
    3ac6:	31 09       	sbc	r19, r1
    3ac8:	04 c0       	rjmp	.+8      	; 0x3ad2 <ProcessInput+0xd4a>
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	aa 1f       	adc	r26, r26
    3ad0:	bb 1f       	adc	r27, r27
    3ad2:	2a 95       	dec	r18
    3ad4:	d2 f7       	brpl	.-12     	; 0x3aca <ProcessInput+0xd42>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ad6:	28 ec       	ldi	r18, 0xC8	; 200
    3ad8:	34 e7       	ldi	r19, 0x74	; 116
    3ada:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3ade:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3ae2:	20 e2       	ldi	r18, 0x20	; 32
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    3aea:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3aee:	21 e0       	ldi	r18, 0x01	; 1
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    3af6:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3afa:	4d e9       	ldi	r20, 0x9D	; 157
    3afc:	54 e7       	ldi	r21, 0x74	; 116
    3afe:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3b02:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3b06:	42 e0       	ldi	r20, 0x02	; 2
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    3b0e:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3b12:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    3b16:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3b1a:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3b1c:	f7 01       	movw	r30, r14
    3b1e:	e0 0f       	add	r30, r16
    3b20:	f1 1d       	adc	r31, r1
    3b22:	28 2f       	mov	r18, r24
    3b24:	2f 70       	andi	r18, 0x0F	; 15
    3b26:	20 83       	st	Z, r18
                        answer /= 16;
    3b28:	44 e0       	ldi	r20, 0x04	; 4
    3b2a:	b6 95       	lsr	r27
    3b2c:	a7 95       	ror	r26
    3b2e:	97 95       	ror	r25
    3b30:	87 95       	ror	r24
    3b32:	4a 95       	dec	r20
    3b34:	d1 f7       	brne	.-12     	; 0x3b2a <ProcessInput+0xda2>
                        if (answer == 0) break;
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	a1 05       	cpc	r26, r1
    3b3a:	b1 05       	cpc	r27, r1
    3b3c:	49 f4       	brne	.+18     	; 0x3b50 <ProcessInput+0xdc8>
    3b3e:	2b e1       	ldi	r18, 0x1B	; 27
    3b40:	c2 2e       	mov	r12, r18
    3b42:	29 e3       	ldi	r18, 0x39	; 57
    3b44:	d2 2e       	mov	r13, r18
    3b46:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3b48:	aa 24       	eor	r10, r10
    3b4a:	a3 94       	inc	r10
    3b4c:	b1 2c       	mov	r11, r1
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <ProcessInput+0xdcc>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3b50:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3b52:	e4 cf       	rjmp	.-56     	; 0x3b1c <ProcessInput+0xd94>
    3b54:	b2 e0       	ldi	r27, 0x02	; 2
    3b56:	cb 0e       	add	r12, r27
    3b58:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3b5a:	08 30       	cpi	r16, 0x08	; 8
    3b5c:	08 f0       	brcs	.+2      	; 0x3b60 <ProcessInput+0xdd8>
    3b5e:	9e c0       	rjmp	.+316    	; 0x3c9c <ProcessInput+0xf14>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3b60:	1f 5f       	subi	r17, 0xFF	; 255
    3b62:	f7 01       	movw	r30, r14
    3b64:	e0 0f       	add	r30, r16
    3b66:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b68:	80 81       	ld	r24, Z
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	83 57       	subi	r24, 0x73	; 115
    3b6e:	9b 48       	sbci	r25, 0x8B	; 139
    3b70:	d6 01       	movw	r26, r12
    3b72:	14 96       	adiw	r26, 0x04	; 4
    3b74:	8d 93       	st	X+, r24
    3b76:	9c 93       	st	X, r25
    3b78:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3b7a:	f6 01       	movw	r30, r12
    3b7c:	ec 5b       	subi	r30, 0xBC	; 188
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	a0 82       	st	Z, r10
    3b82:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3b84:	e0 5c       	subi	r30, 0xC0	; 192
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	a0 82       	st	Z, r10
    3b8a:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3b8c:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3b90:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3b94:	0f 5f       	subi	r16, 0xFF	; 255
    3b96:	de cf       	rjmp	.-68     	; 0x3b54 <ProcessInput+0xdcc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b98:	88 ee       	ldi	r24, 0xE8	; 232
    3b9a:	94 e7       	ldi	r25, 0x74	; 116
    3b9c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3ba0:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3ba4:	8d e3       	ldi	r24, 0x3D	; 61
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3bac:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3bb8:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3bbc:	6e c0       	rjmp	.+220    	; 0x3c9a <ProcessInput+0xf12>
    3bbe:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	ee 0f       	add	r30, r30
    3bc6:	ff 1f       	adc	r31, r31
    3bc8:	e3 52       	subi	r30, 0x23	; 35
    3bca:	f6 4c       	sbci	r31, 0xC6	; 198
    3bcc:	6a ed       	ldi	r22, 0xDA	; 218
    3bce:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3bd0:	81 30       	cpi	r24, 0x01	; 1
    3bd2:	09 f0       	breq	.+2      	; 0x3bd6 <ProcessInput+0xe4e>
    3bd4:	46 c0       	rjmp	.+140    	; 0x3c62 <ProcessInput+0xeda>
                PopulateObject(route[currDepth+1], &actObj1);
    3bd6:	80 81       	ld	r24, Z
    3bd8:	91 81       	ldd	r25, Z+1	; 0x01
    3bda:	0e 94 fe 11 	call	0x23fc	; 0x23fc <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3bde:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    3be2:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckState>
    3be6:	88 23       	and	r24, r24
    3be8:	01 f1       	breq	.+64     	; 0x3c2a <ProcessInput+0xea2>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3bea:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x26>
    3bee:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bf2:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3bf6:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3bfa:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3bfe:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c02:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c06:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c0a:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3c0e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3c12:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3c1c:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3c20:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3c24:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
    3c28:	38 c0       	rjmp	.+112    	; 0x3c9a <ProcessInput+0xf12>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3c2a:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x24>
    3c2e:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c32:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x16>
    3c36:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x17>
    3c3a:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3c3e:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c42:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c46:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c4a:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3c4e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3c52:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3989+0x29>
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3c5c:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3c60:	1c c0       	rjmp	.+56     	; 0x3c9a <ProcessInput+0xf12>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3c62:	80 81       	ld	r24, Z
    3c64:	91 81       	ldd	r25, Z+1	; 0x01
    3c66:	0e 94 fe 11 	call	0x23fc	; 0x23fc <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c6a:	80 e6       	ldi	r24, 0x60	; 96
    3c6c:	98 e7       	ldi	r25, 0x78	; 120
    3c6e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3c72:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c76:	8d e4       	ldi	r24, 0x4D	; 77
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c7e:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3c8a:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3c8e:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <getClock>
    3c92:	80 93 07 39 	sts	0x3907, r24	; 0x803907 <PunishmentTime>
    3c96:	90 93 08 39 	sts	0x3908, r25	; 0x803908 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3c9a:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3c9c:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3ca0:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    3ca4:	88 23       	and	r24, r24
    3ca6:	19 f0       	breq	.+6      	; 0x3cae <ProcessInput+0xf26>
    3ca8:	10 93 1a 39 	sts	0x391A, r17	; 0x80391a <responseList>
    3cac:	8b c0       	rjmp	.+278    	; 0x3dc4 <ProcessInput+0x103c>
    3cae:	81 2f       	mov	r24, r17
    3cb0:	01 c0       	rjmp	.+2      	; 0x3cb4 <ProcessInput+0xf2c>

    } else {

        responseList = SetStandardResponse(1);
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	0e 94 82 11 	call	0x2304	; 0x2304 <SetStandardResponse>
    3cb8:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    3cbc:	83 c0       	rjmp	.+262    	; 0x3dc4 <ProcessInput+0x103c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cbe:	81 ed       	ldi	r24, 0xD1	; 209
    3cc0:	99 e7       	ldi	r25, 0x79	; 121
    3cc2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3cc6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3cca:	8a e1       	ldi	r24, 0x1A	; 26
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	45 c9       	rjmp	.-3446   	; 0x2f5a <ProcessInput+0x1d2>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3cd0:	f2 e0       	ldi	r31, 0x02	; 2
    3cd2:	ff 12       	cpse	r15, r31
    3cd4:	99 c8       	rjmp	.-3790   	; 0x2e08 <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3cd6:	f3 01       	movw	r30, r6
    3cd8:	61 81       	ldd	r22, Z+1	; 0x01
    3cda:	0e 94 77 12 	call	0x24ee	; 0x24ee <CheckLetter>
    3cde:	88 23       	and	r24, r24
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <ProcessInput+0xf5c>
    3ce2:	58 c0       	rjmp	.+176    	; 0x3d94 <ProcessInput+0x100c>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3ce4:	00 e0       	ldi	r16, 0x00	; 0
    3ce6:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3ce8:	00 0f       	add	r16, r16
    3cea:	11 1f       	adc	r17, r17
    3cec:	02 5c       	subi	r16, 0xC2	; 194
    3cee:	17 4c       	sbci	r17, 0xC7	; 199
    3cf0:	6a ed       	ldi	r22, 0xDA	; 218
    3cf2:	78 e3       	ldi	r23, 0x38	; 56
    3cf4:	d8 01       	movw	r26, r16
    3cf6:	8d 91       	ld	r24, X+
    3cf8:	9c 91       	ld	r25, X
    3cfa:	0e 94 fe 11 	call	0x23fc	; 0x23fc <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cfe:	86 e9       	ldi	r24, 0x96	; 150
    3d00:	97 e7       	ldi	r25, 0x77	; 119
    3d02:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3d06:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3d0a:	80 e1       	ldi	r24, 0x10	; 16
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3d12:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3d1e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3d22:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3d26:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d2a:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    3d2e:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    3d32:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3d36:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3d3a:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x44>
    3d3e:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3d42:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    3d46:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d4a:	29 e5       	ldi	r18, 0x59	; 89
    3d4c:	3a e7       	ldi	r19, 0x7A	; 122
    3d4e:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3d52:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3d56:	22 e0       	ldi	r18, 0x02	; 2
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3d5e:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3d62:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    3d66:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d6a:	29 e5       	ldi	r18, 0x59	; 89
    3d6c:	37 e7       	ldi	r19, 0x77	; 119
    3d6e:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x8>
    3d72:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x9>
    reactStr[1][number]=length;
    3d76:	2d e3       	ldi	r18, 0x3D	; 61
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x48>
    3d7e:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x49>
    reactStr[2][number]=type;
    3d82:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x88>
    3d86:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3d8a:	f8 01       	movw	r30, r16
    3d8c:	10 82       	st	Z, r1
    3d8e:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3d90:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3d92:	86 cf       	rjmp	.-244    	; 0x3ca0 <ProcessInput+0xf18>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3d94:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3d98:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	49 f0       	breq	.+18     	; 0x3db2 <ProcessInput+0x102a>
                        if (CheckLetter(inventory[x], data[1])) {
    3da0:	f3 01       	movw	r30, r6
    3da2:	61 81       	ldd	r22, Z+1	; 0x01
    3da4:	0e 94 77 12 	call	0x24ee	; 0x24ee <CheckLetter>
    3da8:	88 23       	and	r24, r24
    3daa:	19 f0       	breq	.+6      	; 0x3db2 <ProcessInput+0x102a>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3dac:	01 e0       	ldi	r16, 0x01	; 1
    3dae:	10 e0       	ldi	r17, 0x00	; 0
    3db0:	9b cf       	rjmp	.-202    	; 0x3ce8 <ProcessInput+0xf60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3db2:	81 e6       	ldi	r24, 0x61	; 97
    3db4:	99 e7       	ldi	r25, 0x79	; 121
    3db6:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3dba:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3dbe:	81 e2       	ldi	r24, 0x21	; 33
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	cb c8       	rjmp	.-3690   	; 0x2f5a <ProcessInput+0x1d2>
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3dc4:	f3 01       	movw	r30, r6
    3dc6:	10 82       	st	Z, r1
    serRxDone = 0;
    3dc8:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    RXCNT = 0;    
    3dcc:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	28 96       	adiw	r28, 0x08	; 8
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	1f 91       	pop	r17
    3ddc:	0f 91       	pop	r16
    3dde:	ff 90       	pop	r15
    3de0:	ef 90       	pop	r14
    3de2:	df 90       	pop	r13
    3de4:	cf 90       	pop	r12
    3de6:	bf 90       	pop	r11
    3de8:	af 90       	pop	r10
    3dea:	9f 90       	pop	r9
    3dec:	8f 90       	pop	r8
    3dee:	7f 90       	pop	r7
    3df0:	6f 90       	pop	r6
    3df2:	08 95       	ret

00003df4 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3df4:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3df6:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3dfa:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3dfe:	89 2b       	or	r24, r25
    3e00:	09 f1       	breq	.+66     	; 0x3e44 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3e02:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <getClock>
        if (PunishmentCount < PunishmentTime)
    3e06:	20 91 07 39 	lds	r18, 0x3907	; 0x803907 <PunishmentTime>
    3e0a:	30 91 08 39 	lds	r19, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3e0e:	82 17       	cp	r24, r18
    3e10:	93 07       	cpc	r25, r19
    3e12:	08 f4       	brcc	.+2      	; 0x3e16 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3e14:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3e16:	ac 01       	movw	r20, r24
    3e18:	42 1b       	sub	r20, r18
    3e1a:	53 0b       	sbc	r21, r19
    3e1c:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3e1e:	4b 30       	cpi	r20, 0x0B	; 11
    3e20:	51 05       	cpc	r21, r1
    3e22:	30 f0       	brcs	.+12     	; 0x3e30 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3e24:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <PunishmentTime>
    3e28:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3e2c:	2a e0       	ldi	r18, 0x0A	; 10
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3e30:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    3e34:	81 11       	cpse	r24, r1
    3e36:	06 c0       	rjmp	.+12     	; 0x3e44 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3e38:	65 e0       	ldi	r22, 0x05	; 5
    3e3a:	62 1b       	sub	r22, r18
    3e3c:	8a e0       	ldi	r24, 0x0A	; 10
    3e3e:	82 1b       	sub	r24, r18
    3e40:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3e44:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <CheckSend>
    3e48:	88 23       	and	r24, r24
    3e4a:	11 f0       	breq	.+4      	; 0x3e50 <TextAdventure+0x5c>
    3e4c:	c1 e0       	ldi	r28, 0x01	; 1
    3e4e:	18 c0       	rjmp	.+48     	; 0x3e80 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3e50:	0e 94 bf 13 	call	0x277e	; 0x277e <CheckResponse>
    3e54:	c8 2f       	mov	r28, r24
    3e56:	81 11       	cpse	r24, r1
    3e58:	f9 cf       	rjmp	.-14     	; 0x3e4c <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3e5a:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3e5e:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3e62:	89 2b       	or	r24, r25
    3e64:	69 f4       	brne	.+26     	; 0x3e80 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3e66:	8e e6       	ldi	r24, 0x6E	; 110
    3e68:	98 e3       	ldi	r25, 0x38	; 56
    3e6a:	0e 94 ff 13 	call	0x27fe	; 0x27fe <CheckInput>
    3e6e:	c8 2f       	mov	r28, r24
    3e70:	81 11       	cpse	r24, r1
    3e72:	05 c0       	rjmp	.+10     	; 0x3e7e <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3e74:	8e e6       	ldi	r24, 0x6E	; 110
    3e76:	98 e3       	ldi	r25, 0x38	; 56
    3e78:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <ProcessInput>
    3e7c:	01 c0       	rjmp	.+2      	; 0x3e80 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3e7e:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3e80:	8c 2f       	mov	r24, r28
    3e82:	cf 91       	pop	r28
    3e84:	08 95       	ret

00003e86 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3e86:	0e 94 c3 04 	call	0x986	; 0x986 <Setup>
    LoadGameState();
    3e8a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LoadGameState>
    SelfTest();
    3e8e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <SelfTest>
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3e92:	cf e1       	ldi	r28, 0x1F	; 31
    3e94:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();
    LoadGameState();
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3e96:	0e 94 95 0c 	call	0x192a	; 0x192a <GenerateAudio>
    3e9a:	88 23       	and	r24, r24
    3e9c:	e1 f3       	breq	.-8      	; 0x3e96 <main+0x10>
            lastButtonState = buttonState;
    3e9e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3ea2:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3ea6:	0e 94 bf 08 	call	0x117e	; 0x117e <CheckButtons>
    3eaa:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3eae:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3eb2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3eb6:	82 31       	cpi	r24, 0x12	; 18
    3eb8:	19 f4       	brne	.+6      	; 0x3ec0 <main+0x3a>
    3eba:	0e 94 b0 08 	call	0x1160	; 0x1160 <SelectAuIn>
    3ebe:	02 c0       	rjmp	.+4      	; 0x3ec4 <main+0x3e>
    3ec0:	0e 94 a1 08 	call	0x1142	; 0x1142 <SelectTSens>

            GenerateBlinks();
    3ec4:	0e 94 38 0b 	call	0x1670	; 0x1670 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3ec8:	95 df       	rcall	.-214    	; 0x3df4 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3eca:	0e 94 c6 03 	call	0x78c	; 0x78c <MagnetMaze>
            LanyardCode();
    3ece:	0e 94 ca 02 	call	0x594	; 0x594 <LanyardCode>
            BastetDictates();
    3ed2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <BastetDictates>
            MakeFriends();
    3ed6:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    3eda:	0e 94 70 09 	call	0x12e0	; 0x12e0 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3ede:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3ee2:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3ee6:	0a 97       	sbiw	r24, 0x0a	; 10
    3ee8:	18 f4       	brcc	.+6      	; 0x3ef0 <main+0x6a>
    3eea:	84 e7       	ldi	r24, 0x74	; 116
    3eec:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3ef0:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3ef4:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3ef8:	85 36       	cpi	r24, 0x65	; 101
    3efa:	91 05       	cpc	r25, r1
    3efc:	18 f0       	brcs	.+6      	; 0x3f04 <main+0x7e>
    3efe:	84 ef       	ldi	r24, 0xF4	; 244
    3f00:	0e 94 f7 09 	call	0x13ee	; 0x13ee <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3f04:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3f08:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f0c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3f10:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f14:	46 e0       	ldi	r20, 0x06	; 6
    3f16:	36 95       	lsr	r19
    3f18:	27 95       	ror	r18
    3f1a:	4a 95       	dec	r20
    3f1c:	e1 f7       	brne	.-8      	; 0x3f16 <main+0x90>
    3f1e:	82 1b       	sub	r24, r18
    3f20:	93 0b       	sbc	r25, r19
    3f22:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3f26:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3f2a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3f2e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f32:	93 95       	inc	r25
    3f34:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3f38:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3f3c:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    3f40:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3f44:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3f48:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f4c:	22 0f       	add	r18, r18
    3f4e:	23 2f       	mov	r18, r19
    3f50:	22 1f       	adc	r18, r18
    3f52:	33 0b       	sbc	r19, r19
    3f54:	31 95       	neg	r19
    3f56:	fe 01       	movw	r30, r28
    3f58:	e2 1b       	sub	r30, r18
    3f5a:	f3 0b       	sbc	r31, r19
    3f5c:	e0 52       	subi	r30, 0x20	; 32
    3f5e:	f0 44       	sbci	r31, 0x40	; 64
    3f60:	20 81       	ld	r18, Z
    3f62:	82 1b       	sub	r24, r18
    3f64:	91 09       	sbc	r25, r1
    3f66:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3f6a:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3f6e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3f72:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f76:	66 e0       	ldi	r22, 0x06	; 6
    3f78:	96 95       	lsr	r25
    3f7a:	87 95       	ror	r24
    3f7c:	6a 95       	dec	r22
    3f7e:	e1 f7       	brne	.-8      	; 0x3f78 <main+0xf2>
    3f80:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3f84:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <HotSummer>
    3f88:	86 cf       	rjmp	.-244    	; 0x3e96 <main+0x10>

00003f8a <__tablejump2__>:
    3f8a:	ee 0f       	add	r30, r30
    3f8c:	ff 1f       	adc	r31, r31
    3f8e:	05 90       	lpm	r0, Z+
    3f90:	f4 91       	lpm	r31, Z
    3f92:	e0 2d       	mov	r30, r0
    3f94:	09 94       	ijmp

00003f96 <_exit>:
    3f96:	f8 94       	cli

00003f98 <__stop_program>:
    3f98:	ff cf       	rjmp	.-2      	; 0x3f98 <__stop_program>
