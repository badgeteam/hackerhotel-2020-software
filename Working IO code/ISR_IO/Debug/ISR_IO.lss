
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00803800  00003762  00003816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003680  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e2  0000b680  00003680  00003734  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002dd  00803828  00803828  0000383e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000383e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003870  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006565  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000271f  00000000  00000000  0000a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003436  00000000  00000000  0000c80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008d8  00000000  00000000  0000fc44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000193c  00000000  00000000  0001051c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000425e  00000000  00000000  00011e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  000160b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c6       	rjmp	.+3388   	; 0xd56 <__vector_6>
      1a:	00 00       	nop
      1c:	e6 c6       	rjmp	.+3532   	; 0xdea <__vector_7>
      1e:	00 00       	nop
      20:	ce c4       	rjmp	.+2460   	; 0x9be <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	15 c5       	rjmp	.+2602   	; 0xa60 <__vector_13>
      36:	00 00       	nop
      38:	46 c5       	rjmp	.+2700   	; 0xac6 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	04 c6       	rjmp	.+3080   	; 0xc5a <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c6       	rjmp	.+3180   	; 0xcc6 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7f c5       	rjmp	.+2814   	; 0xb6c <__vector_27>
      6e:	00 00       	nop
      70:	d8 c5       	rjmp	.+2992   	; 0xc22 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e2 e6       	ldi	r30, 0x62	; 98
      90:	f7 e3       	ldi	r31, 0x37	; 55
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 32       	cpi	r26, 0x28	; 40
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a8 e2       	ldi	r26, 0x28	; 40
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 30       	cpi	r26, 0x05	; 5
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <main>
      b2:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	80 83       	st	Z, r24
      c4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      c8:	a1 e2       	ldi	r26, 0x21	; 33
      ca:	b4 e0       	ldi	r27, 0x04	; 4
      cc:	92 e0       	ldi	r25, 0x02	; 2
      ce:	9c 93       	st	X, r25
      d0:	90 83       	st	Z, r25
      d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      d6:	e0 e1       	ldi	r30, 0x10	; 16
      d8:	f8 e0       	ldi	r31, 0x08	; 8
      da:	97 e0       	ldi	r25, 0x07	; 7
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	94 83       	std	Z+4, r25	; 0x04
      e2:	83 83       	std	Z+3, r24	; 0x03
      e4:	8c 93       	st	X, r24
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	85 81       	ldd	r24, Z+5	; 0x05
      ee:	84 6c       	ori	r24, 0xC4	; 196
      f0:	85 83       	std	Z+5, r24	; 0x05
      f2:	08 95       	ret

000000f4 <I2C_recover>:
      f4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     108:	99 e0       	ldi	r25, 0x09	; 9
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     112:	30 e1       	ldi	r19, 0x10	; 16
     114:	3a 95       	dec	r19
     116:	f1 f7       	brne	.-4      	; 0x114 <I2C_recover+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_recover+0x26>
     11a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     11e:	30 e1       	ldi	r19, 0x10	; 16
     120:	3a 95       	dec	r19
     122:	f1 f7       	brne	.-4      	; 0x120 <I2C_recover+0x2c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <I2C_recover+0x32>
     126:	91 50       	subi	r25, 0x01	; 1
     128:	89 f7       	brne	.-30     	; 0x10c <I2C_recover+0x18>
     12a:	28 e0       	ldi	r18, 0x08	; 8
     12c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     130:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     13e:	91 60       	ori	r25, 0x01	; 1
     140:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     144:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	94 6c       	ori	r25, 0xC4	; 196
     14a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     152:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     156:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	84 6c       	ori	r24, 0xC4	; 196
     16a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16e:	08 95       	ret

00000170 <I2C_start>:
     170:	28 2f       	mov	r18, r24
     172:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     176:	90 6c       	ori	r25, 0xC0	; 192
     178:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	89 2f       	mov	r24, r25
     182:	84 70       	andi	r24, 0x04	; 4
     184:	92 fd       	sbrc	r25, 2
     186:	03 c0       	rjmp	.+6      	; 0x18e <I2C_start+0x1e>
     188:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     18c:	08 95       	ret
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	08 95       	ret

00000192 <I2C_wait_ACK>:
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	80 93 4b 3a 	sts	0x3A4B, r24	; 0x803a4b <timeout_I2C>
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     19c:	87 fd       	sbrc	r24, 7
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a8:	80 91 4b 3a 	lds	r24, 0x3A4B	; 0x803a4b <timeout_I2C>
     1ac:	81 11       	cpse	r24, r1
     1ae:	f4 cf       	rjmp	.-24     	; 0x198 <I2C_wait_ACK+0x6>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	82 fd       	sbrc	r24, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <I2C_wait_ACK+0x46>
     1c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ca:	83 fd       	sbrc	r24, 3
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <I2C_wait_ACK+0x4a>
     1ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d2:	82 95       	swap	r24
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret

000001e0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e2:	8c e0       	ldi	r24, 0x0C	; 12
     1e4:	80 93 4b 3a 	sts	0x3A4B, r24	; 0x803a4b <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1e8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ec:	89 2f       	mov	r24, r25
     1ee:	83 70       	andi	r24, 0x03	; 3
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1f8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1fc:	97 fd       	sbrc	r25, 7
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     200:	90 91 4b 3a 	lds	r25, 0x3A4B	; 0x803a4b <timeout_I2C>
     204:	91 11       	cpse	r25, r1
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <I2C_read+0x18>
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     20c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     210:	90 6c       	ori	r25, 0xC0	; 192
     212:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     216:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21a:	92 fd       	sbrc	r25, 2
     21c:	1e c0       	rjmp	.+60     	; 0x25a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     21e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     222:	93 fd       	sbrc	r25, 3
     224:	1d c0       	rjmp	.+58     	; 0x260 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     226:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22a:	89 2f       	mov	r24, r25
     22c:	80 71       	andi	r24, 0x10	; 16
     22e:	94 fd       	sbrc	r25, 4
     230:	16 c0       	rjmp	.+44     	; 0x25e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     232:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <I2C_read+0x5e>
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	01 c0       	rjmp	.+2      	; 0x240 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     23e:	94 60       	ori	r25, 0x04	; 4
     240:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     244:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     248:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24a:	61 11       	cpse	r22, r1
     24c:	09 c0       	rjmp	.+18     	; 0x260 <I2C_read+0x80>
     24e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     252:	92 60       	ori	r25, 0x02	; 2
     254:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     258:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     25e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     260:	08 95       	ret

00000262 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     262:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	80 93 4b 3a 	sts	0x3A4B, r24	; 0x803a4b <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	b1 f4       	brne	.+44     	; 0x2a0 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     274:	80 81       	ld	r24, Z
     276:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     27e:	86 fd       	sbrc	r24, 6
     280:	06 c0       	rjmp	.+12     	; 0x28e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     282:	80 91 4b 3a 	lds	r24, 0x3A4B	; 0x803a4b <timeout_I2C>
     286:	81 11       	cpse	r24, r1
     288:	f8 cf       	rjmp	.-16     	; 0x27a <I2C_write+0x18>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     28e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     292:	82 fd       	sbrc	r24, 2
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     296:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29a:	82 95       	swap	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a4:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2a6:	08 95       	ret

000002a8 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2a8:	e0 e1       	ldi	r30, 0x10	; 16
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 83       	std	Z+4, r24	; 0x04
     2b2:	08 95       	ret

000002b4 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	6b 01       	movw	r12, r22
     2c4:	f4 2e       	mov	r15, r20
     2c6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2c8:	18 2f       	mov	r17, r24
     2ca:	11 0f       	add	r17, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	50 df       	rcall	.-352    	; 0x170 <I2C_start>
	if (status != 0) goto error;
     2d0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d2:	2b c0       	rjmp	.+86     	; 0x32a <I2C_read_bytes+0x76>
     2d4:	5e df       	rcall	.-324    	; 0x192 <I2C_wait_ACK>
	if (status == 1) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <I2C_read_bytes+0x2c>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <I2C_stop>
		return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	27 c0       	rjmp	.+78     	; 0x32e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e0:	81 11       	cpse	r24, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2e6:	49 f0       	breq	.+18     	; 0x2fa <I2C_read_bytes+0x46>
     2e8:	c6 01       	movw	r24, r12
     2ea:	bb df       	rcall	.-138    	; 0x262 <I2C_write>
	    if (status != 0) goto error;
     2ec:	81 11       	cpse	r24, r1
     2ee:	1d c0       	rjmp	.+58     	; 0x32a <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	c8 1a       	sub	r12, r24
     2f4:	d8 0a       	sbc	r13, r24
        --reg_len;
     2f6:	fa 94       	dec	r15
     2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <I2C_read_bytes+0x30>
     2fa:	01 34       	cpi	r16, 0x41	; 65
     2fc:	08 f0       	brcs	.+2      	; 0x300 <I2C_read_bytes+0x4c>
     2fe:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     300:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     302:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     306:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     308:	40 f0       	brcs	.+16     	; 0x31a <I2C_read_bytes+0x66>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	ce 01       	movw	r24, r28
     30e:	68 df       	rcall	.-304    	; 0x1e0 <I2C_read>
		if (status != 0) goto error;
     310:	81 11       	cpse	r24, r1
     312:	0b c0       	rjmp	.+22     	; 0x32a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     318:	f6 cf       	rjmp	.-20     	; 0x306 <I2C_read_bytes+0x52>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     31e:	60 df       	rcall	.-320    	; 0x1e0 <I2C_read>
     320:	81 11       	cpse	r24, r1
	I2C_stop();
     322:	03 c0       	rjmp	.+6      	; 0x32a <I2C_read_bytes+0x76>
     324:	c1 df       	rcall	.-126    	; 0x2a8 <I2C_stop>
	return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32a:	e4 de       	rcall	.-568    	; 0xf4 <I2C_recover>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     32e:	df 91       	pop	r29
}
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <LanyardCode>:
     33e:	cf 93       	push	r28
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
    if (CheckState(LANYARD_COMPLETED)) {
     340:	8b e7       	ldi	r24, 0x7B	; 123
     342:	66 d7       	rcall	.+3788   	; 0x1210 <CheckState>
     344:	81 11       	cpse	r24, r1
     346:	f0 c0       	rjmp	.+480    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     348:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     34c:	88 23       	and	r24, r24
     34e:	19 f0       	breq	.+6      	; 0x356 <LanyardCode+0x18>
     350:	83 30       	cpi	r24, 0x03	; 3
     352:	09 f0       	breq	.+2      	; 0x356 <LanyardCode+0x18>
     354:	e9 c0       	rjmp	.+466    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
        return 0;

    /* activate led for buttonstate */
    iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);
     356:	c0 91 ab b6 	lds	r28, 0xB6AB	; 0x80b6ab <__bss_end+0x7ba6>
     35a:	ec 2f       	mov	r30, r28
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     362:	8f 3f       	cpi	r24, 0xFF	; 255
     364:	19 f0       	breq	.+6      	; 0x36c <LanyardCode+0x2e>
     366:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     36a:	01 c0       	rjmp	.+2      	; 0x36e <LanyardCode+0x30>
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	eb 54       	subi	r30, 0x4B	; 75
     370:	f5 4c       	sbci	r31, 0xC5	; 197
     372:	90 83       	st	Z, r25

    if ( (buttonState & 0xf0) == 0)
     374:	98 2f       	mov	r25, r24
     376:	90 7f       	andi	r25, 0xF0	; 240
     378:	09 f4       	brne	.+2      	; 0x37c <LanyardCode+0x3e>
     37a:	d6 c0       	rjmp	.+428    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     37c:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     380:	98 2f       	mov	r25, r24
     382:	92 27       	eor	r25, r18
     384:	9f 70       	andi	r25, 0x0F	; 15
     386:	09 f4       	brne	.+2      	; 0x38a <LanyardCode+0x4c>
     388:	cf c0       	rjmp	.+414    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
        return 0;

    if (lastButtonState == 0xff){
     38a:	2f 3f       	cpi	r18, 0xFF	; 255
     38c:	09 f0       	breq	.+2      	; 0x390 <LanyardCode+0x52>
     38e:	c8 c0       	rjmp	.+400    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
        switch (buttonState & 0x0f) {
     390:	8f 70       	andi	r24, 0x0F	; 15
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	61 f0       	breq	.+24     	; 0x3ae <LanyardCode+0x70>
     396:	28 f4       	brcc	.+10     	; 0x3a2 <LanyardCode+0x64>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	69 f4       	brne	.+26     	; 0x3b6 <LanyardCode+0x78>
            case 0b0001: {
                digit = 0;
     39c:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <LanyardCode+0x7e>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     3a2:	84 30       	cpi	r24, 0x04	; 4
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <LanyardCode+0x74>
     3a6:	88 30       	cpi	r24, 0x08	; 8
     3a8:	31 f4       	brne	.+12     	; 0x3b6 <LanyardCode+0x78>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <LanyardCode+0x7a>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <LanyardCode+0x7a>
                break;
            }

            case 0b0100: {
                digit = 3;
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <LanyardCode+0x7a>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     3c2:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <lanyardPos>
     3c6:	e8 2f       	mov	r30, r24
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	e0 57       	subi	r30, 0x70	; 112
     3cc:	f9 44       	sbci	r31, 0x49	; 73
     3ce:	20 81       	ld	r18, Z
     3d0:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     3d4:	e0 91 a8 b6 	lds	r30, 0xB6A8	; 0x80b6a8 <__bss_end+0x7ba3>
     3d8:	29 13       	cpse	r18, r25
     3da:	17 c0       	rjmp	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
            lanyardState &= TRUE;
     3dc:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     3e0:	91 70       	andi	r25, 0x01	; 1
     3e2:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	eb 54       	subi	r30, 0x4B	; 75
     3ea:	f5 4c       	sbci	r31, 0xC5	; 197
     3ec:	90 e8       	ldi	r25, 0x80	; 128
     3ee:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     3f0:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	eb 54       	subi	r30, 0x4B	; 75
     3f8:	f5 4c       	sbci	r31, 0xC5	; 197
     3fa:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     3fc:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	eb 54       	subi	r30, 0x4B	; 75
     404:	f5 4c       	sbci	r31, 0xC5	; 197
     406:	10 82       	st	Z, r1
     408:	13 c0       	rjmp	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        } else {
            lanyardState = FALSE;
     40a:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	eb 54       	subi	r30, 0x4B	; 75
     412:	f5 4c       	sbci	r31, 0xC5	; 197
     414:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     416:	84 30       	cpi	r24, 0x04	; 4
     418:	58 f4       	brcc	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     41a:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     41e:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardCnt      = 0;
     422:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
                lanyardState    = TRUE;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	7a c0       	rjmp	.+244    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                return 0;
            }
        }
        lanyardPos++;
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <lanyardPos>
        lanyardCnt++;            
     436:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <__data_end>
     43a:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     43c:	94 30       	cpi	r25, 0x04	; 4
     43e:	18 f4       	brcc	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     440:	90 93 28 38 	sts	0x3828, r25	; 0x803828 <__data_end>
     444:	6d c0       	rjmp	.+218    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     446:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
            if (lanyardState == TRUE) {
     44a:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     44e:	91 30       	cpi	r25, 0x01	; 1
     450:	a1 f5       	brne	.+104    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     452:	e8 2f       	mov	r30, r24
     454:	e6 95       	lsr	r30
     456:	e6 95       	lsr	r30
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	e6 54       	subi	r30, 0x46	; 70
     45c:	f9 44       	sbci	r31, 0x49	; 73
     45e:	e5 81       	ldd	r30, Z+5	; 0x05
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     466:	eb 54       	subi	r30, 0x4B	; 75
     468:	f5 4c       	sbci	r31, 0xC5	; 197
     46a:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     46c:	88 31       	cpi	r24, 0x18	; 24
     46e:	09 f0       	breq	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	57 c0       	rjmp	.+174    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
                    UpdateState(LANYARD_COMPLETED);
     472:	8b e7       	ldi	r24, 0x7B	; 123
     474:	c3 d6       	rcall	.+3462   	; 0x11fc <UpdateState>
                    iLED[SCARAB[G]] = 0;
     476:	ec 2f       	mov	r30, r28
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	eb 54       	subi	r30, 0x4B	; 75
     47c:	f5 4c       	sbci	r31, 0xC5	; 197
     47e:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     480:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	eb 54       	subi	r30, 0x4B	; 75
     488:	f5 4c       	sbci	r31, 0xC5	; 197
     48a:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     48c:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	eb 54       	subi	r30, 0x4B	; 75
     494:	f5 4c       	sbci	r31, 0xC5	; 197
     496:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     498:	e0 91 b9 b6 	lds	r30, 0xB6B9	; 0x80b6b9 <__bss_end+0x7bb4>
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4a2:	eb 54       	subi	r30, 0x4B	; 75
     4a4:	f5 4c       	sbci	r31, 0xC5	; 197
     4a6:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     4a8:	e0 91 b8 b6 	lds	r30, 0xB6B8	; 0x80b6b8 <__bss_end+0x7bb3>
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4b2:	eb 54       	subi	r30, 0x4B	; 75
     4b4:	f5 4c       	sbci	r31, 0xC5	; 197
     4b6:	80 83       	st	Z, r24
     4b8:	33 c0       	rjmp	.+102    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     4ba:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     4be:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardState    = TRUE;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                iLED[SCARAB[G]] = 0;
     4c8:	ec 2f       	mov	r30, r28
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	eb 54       	subi	r30, 0x4B	; 75
     4ce:	f5 4c       	sbci	r31, 0xC5	; 197
     4d0:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     4d2:	e0 91 b9 b6 	lds	r30, 0xB6B9	; 0x80b6b9 <__bss_end+0x7bb4>
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	eb 54       	subi	r30, 0x4B	; 75
     4da:	f5 4c       	sbci	r31, 0xC5	; 197
     4dc:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     4de:	e0 91 b8 b6 	lds	r30, 0xB6B8	; 0x80b6b8 <__bss_end+0x7bb3>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	eb 54       	subi	r30, 0x4B	; 75
     4e6:	f5 4c       	sbci	r31, 0xC5	; 197
     4e8:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     4ea:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4f4:	eb 54       	subi	r30, 0x4B	; 75
     4f6:	f5 4c       	sbci	r31, 0xC5	; 197
     4f8:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     4fa:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     504:	eb 54       	subi	r30, 0x4B	; 75
     506:	f5 4c       	sbci	r31, 0xC5	; 197
     508:	80 83       	st	Z, r24
     50a:	a0 ec       	ldi	r26, 0xC0	; 192
     50c:	b6 eb       	ldi	r27, 0xB6	; 182
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     50e:	ed 91       	ld	r30, X+
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	eb 54       	subi	r30, 0x4B	; 75
     514:	f5 4c       	sbci	r31, 0xC5	; 197
     516:	10 82       	st	Z, r1
                iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     518:	86 eb       	ldi	r24, 0xB6	; 182
     51a:	a6 3c       	cpi	r26, 0xC6	; 198
     51c:	b8 07       	cpc	r27, r24
     51e:	b9 f7       	brne	.-18     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     520:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     524:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     532:	87 ef       	ldi	r24, 0xF7	; 247
     534:	6d d6       	rcall	.+3290   	; 0x1210 <CheckState>
     536:	81 11       	cpse	r24, r1
     538:	3e c1       	rjmp	.+636    	; 0x7b6 <MagnetMaze+0x288>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     53a:	8d e7       	ldi	r24, 0x7D	; 125
     53c:	69 d6       	rcall	.+3282   	; 0x1210 <CheckState>
     53e:	81 11       	cpse	r24, r1
     540:	3a c1       	rjmp	.+628    	; 0x7b6 <MagnetMaze+0x288>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     542:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	08 f0       	brcs	.+2      	; 0x54c <MagnetMaze+0x1e>
     54a:	35 c1       	rjmp	.+618    	; 0x7b6 <MagnetMaze+0x288>
        return 0;

    if (calHall == 0)
     54c:	80 91 de 3a 	lds	r24, 0x3ADE	; 0x803ade <calHall>
     550:	90 91 df 3a 	lds	r25, 0x3ADF	; 0x803adf <calHall+0x1>
     554:	89 2b       	or	r24, r25
     556:	41 f4       	brne	.+16     	; 0x568 <MagnetMaze+0x3a>
        calHall = adcHall;
     558:	80 91 a6 3a 	lds	r24, 0x3AA6	; 0x803aa6 <adcHall>
     55c:	90 91 a7 3a 	lds	r25, 0x3AA7	; 0x803aa7 <adcHall+0x1>
     560:	80 93 de 3a 	sts	0x3ADE, r24	; 0x803ade <calHall>
     564:	90 93 df 3a 	sts	0x3ADF, r25	; 0x803adf <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     568:	80 91 a6 3a 	lds	r24, 0x3AA6	; 0x803aa6 <adcHall>
     56c:	90 91 a7 3a 	lds	r25, 0x3AA7	; 0x803aa7 <adcHall+0x1>
     570:	20 91 de 3a 	lds	r18, 0x3ADE	; 0x803ade <calHall>
     574:	30 91 df 3a 	lds	r19, 0x3ADF	; 0x803adf <calHall+0x1>
     578:	82 1b       	sub	r24, r18
     57a:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     57c:	30 91 3c 38 	lds	r19, 0x383C	; 0x80383c <curHallState>
     580:	31 30       	cpi	r19, 0x01	; 1
     582:	89 f0       	breq	.+34     	; 0x5a6 <MagnetMaze+0x78>
     584:	18 f0       	brcs	.+6      	; 0x58c <MagnetMaze+0x5e>
     586:	32 30       	cpi	r19, 0x02	; 2
     588:	c1 f0       	breq	.+48     	; 0x5ba <MagnetMaze+0x8c>
     58a:	1f c0       	rjmp	.+62     	; 0x5ca <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     58c:	84 3d       	cpi	r24, 0xD4	; 212
     58e:	2e ef       	ldi	r18, 0xFE	; 254
     590:	92 07       	cpc	r25, r18
     592:	14 f4       	brge	.+4      	; 0x598 <MagnetMaze+0x6a>
                newHallState = 1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     598:	8d 32       	cpi	r24, 0x2D	; 45
     59a:	91 40       	sbci	r25, 0x01	; 1
     59c:	5c f0       	brlt	.+22     	; 0x5b4 <MagnetMaze+0x86>
                newHallState = 2;
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <newHallState>
     5a4:	12 c0       	rjmp	.+36     	; 0x5ca <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     5a6:	8d 32       	cpi	r24, 0x2D	; 45
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	92 07       	cpc	r25, r18
     5ac:	c4 f7       	brge	.-16     	; 0x59e <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5ae:	89 38       	cpi	r24, 0x89	; 137
     5b0:	9f 4f       	sbci	r25, 0xFF	; 255
     5b2:	84 f3       	brlt	.-32     	; 0x594 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5b4:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <newHallState>
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     5ba:	84 3d       	cpi	r24, 0xD4	; 212
     5bc:	2e ef       	ldi	r18, 0xFE	; 254
     5be:	92 07       	cpc	r25, r18
     5c0:	4c f3       	brlt	.-46     	; 0x594 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5c2:	88 37       	cpi	r24, 0x78	; 120
     5c4:	91 05       	cpc	r25, r1
     5c6:	b4 f3       	brlt	.-20     	; 0x5b4 <MagnetMaze+0x86>
     5c8:	ea cf       	rjmp	.-44     	; 0x59e <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     5ca:	c0 91 ab b6 	lds	r28, 0xB6AB	; 0x80b6ab <__bss_end+0x7ba6>
     5ce:	ec 2f       	mov	r30, r28
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <newHallState>
     5d6:	88 23       	and	r24, r24
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <MagnetMaze+0xb2>
     5da:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <MagnetMaze+0xb4>
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	eb 54       	subi	r30, 0x4B	; 75
     5e4:	f5 4c       	sbci	r31, 0xC5	; 197
     5e6:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     5e8:	88 23       	and	r24, r24
     5ea:	59 f0       	breq	.+22     	; 0x602 <MagnetMaze+0xd4>
     5ec:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <mazePos>
     5f0:	21 11       	cpse	r18, r1
     5f2:	3d c0       	rjmp	.+122    	; 0x66e <MagnetMaze+0x140>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	09 f4       	brne	.+2      	; 0x5fc <MagnetMaze+0xce>
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <inverted>
     600:	36 c0       	rjmp	.+108    	; 0x66e <MagnetMaze+0x140>

    if (newHallState != curHallState) {
     602:	33 23       	and	r19, r19
     604:	09 f4       	brne	.+2      	; 0x608 <MagnetMaze+0xda>
     606:	d7 c0       	rjmp	.+430    	; 0x7b6 <MagnetMaze+0x288>
        curHallState = newHallState;
     608:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     60c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <mazePos>
     610:	82 31       	cpi	r24, 0x12	; 18
     612:	09 f0       	breq	.+2      	; 0x616 <MagnetMaze+0xe8>
     614:	d0 c0       	rjmp	.+416    	; 0x7b6 <MagnetMaze+0x288>
                gameNow   = TEXT;
     616:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                mazePos   = 0;
     61a:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                mazeState = TRUE;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[SCARAB[G]]    = 0;
     624:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     626:	e0 91 b9 b6 	lds	r30, 0xB6B9	; 0x80b6b9 <__bss_end+0x7bb4>
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	eb 54       	subi	r30, 0x4B	; 75
     62e:	f5 4c       	sbci	r31, 0xC5	; 197
     630:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     632:	e0 91 b8 b6 	lds	r30, 0xB6B8	; 0x80b6b8 <__bss_end+0x7bb3>
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	eb 54       	subi	r30, 0x4B	; 75
     63a:	f5 4c       	sbci	r31, 0xC5	; 197
     63c:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     63e:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	eb 54       	subi	r30, 0x4B	; 75
     646:	f5 4c       	sbci	r31, 0xC5	; 197
     648:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     64a:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	eb 54       	subi	r30, 0x4B	; 75
     652:	f5 4c       	sbci	r31, 0xC5	; 197
     654:	10 82       	st	Z, r1
     656:	a0 ec       	ldi	r26, 0xC0	; 192
     658:	b6 eb       	ldi	r27, 0xB6	; 182
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     65a:	ed 91       	ld	r30, X+
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	eb 54       	subi	r30, 0x4B	; 75
     660:	f5 4c       	sbci	r31, 0xC5	; 197
     662:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     664:	26 eb       	ldi	r18, 0xB6	; 182
     666:	a6 3c       	cpi	r26, 0xC6	; 198
     668:	b2 07       	cpc	r27, r18
     66a:	b9 f7       	brne	.-18     	; 0x65a <MagnetMaze+0x12c>
     66c:	a4 c0       	rjmp	.+328    	; 0x7b6 <MagnetMaze+0x288>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     66e:	38 17       	cp	r19, r24
     670:	09 f4       	brne	.+2      	; 0x674 <MagnetMaze+0x146>
     672:	a1 c0       	rjmp	.+322    	; 0x7b6 <MagnetMaze+0x288>
        curHallState = newHallState;
     674:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     67e:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inverted>
     682:	99 23       	and	r25, r25
     684:	11 f0       	breq	.+4      	; 0x68a <MagnetMaze+0x15c>
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	89 27       	eor	r24, r25
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	e2 2f       	mov	r30, r18
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ea 53       	subi	r30, 0x3A	; 58
     692:	f9 44       	sbci	r31, 0x49	; 73
     694:	40 81       	ld	r20, Z
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	84 17       	cp	r24, r20
     69a:	95 07       	cpc	r25, r21
     69c:	91 f4       	brne	.+36     	; 0x6c2 <MagnetMaze+0x194>
                mazeState &= TRUE;
     69e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6a2:	81 70       	andi	r24, 0x01	; 1
     6a4:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[EYE[R][L]] = 0;
     6a8:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	eb 54       	subi	r30, 0x4B	; 75
     6b0:	f5 4c       	sbci	r31, 0xC5	; 197
     6b2:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     6b4:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	eb 54       	subi	r30, 0x4B	; 75
     6bc:	f5 4c       	sbci	r31, 0xC5	; 197
     6be:	10 82       	st	Z, r1
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <MagnetMaze+0x198>
            } else {
                mazeState = FALSE;
     6c2:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     6c6:	2f 5f       	subi	r18, 0xFF	; 255
     6c8:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <mazePos>
            mazeCnt++;            
     6cc:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <mazeCnt>
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     6d2:	83 30       	cpi	r24, 0x03	; 3
     6d4:	18 f4       	brcc	.+6      	; 0x6dc <MagnetMaze+0x1ae>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     6d6:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <mazeCnt>
     6da:	6d c0       	rjmp	.+218    	; 0x7b6 <MagnetMaze+0x288>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6dc:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <mazeCnt>
                if (mazeState == TRUE) {
     6e0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	a9 f5       	brne	.+106    	; 0x752 <MagnetMaze+0x224>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     6e8:	eb ea       	ldi	r30, 0xAB	; 171
     6ea:	2e 9f       	mul	r18, r30
     6ec:	e1 2d       	mov	r30, r1
     6ee:	11 24       	eor	r1, r1
     6f0:	e6 95       	lsr	r30
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	e6 54       	subi	r30, 0x46	; 70
     6f6:	f9 44       	sbci	r31, 0x49	; 73
     6f8:	e5 81       	ldd	r30, Z+5	; 0x05
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     700:	eb 54       	subi	r30, 0x4B	; 75
     702:	f5 4c       	sbci	r31, 0xC5	; 197
     704:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     706:	22 31       	cpi	r18, 0x12	; 18
     708:	09 f0       	breq	.+2      	; 0x70c <MagnetMaze+0x1de>
                        UpdateState(MAZE_COMPLETED);
     70a:	55 c0       	rjmp	.+170    	; 0x7b6 <MagnetMaze+0x288>
     70c:	8d e7       	ldi	r24, 0x7D	; 125
     70e:	76 d5       	rcall	.+2796   	; 0x11fc <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     710:	d0 e0       	ldi	r29, 0x00	; 0
     712:	cb 54       	subi	r28, 0x4B	; 75
     714:	d5 4c       	sbci	r29, 0xC5	; 197
     716:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     718:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	eb 54       	subi	r30, 0x4B	; 75
     720:	f5 4c       	sbci	r31, 0xC5	; 197
     722:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     724:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	eb 54       	subi	r30, 0x4B	; 75
     72c:	f5 4c       	sbci	r31, 0xC5	; 197
     72e:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     730:	e0 91 b9 b6 	lds	r30, 0xB6B9	; 0x80b6b9 <__bss_end+0x7bb4>
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     73a:	eb 54       	subi	r30, 0x4B	; 75
     73c:	f5 4c       	sbci	r31, 0xC5	; 197
     73e:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     740:	e0 91 b8 b6 	lds	r30, 0xB6B8	; 0x80b6b8 <__bss_end+0x7bb3>
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     74a:	eb 54       	subi	r30, 0x4B	; 75
     74c:	f5 4c       	sbci	r31, 0xC5	; 197
     74e:	80 83       	st	Z, r24
     750:	32 c0       	rjmp	.+100    	; 0x7b6 <MagnetMaze+0x288>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     752:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                    mazePos   = 0;
     756:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                    mazeState = TRUE;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                    iLED[SCARAB[G]]    = 0;
     760:	d0 e0       	ldi	r29, 0x00	; 0
     762:	cb 54       	subi	r28, 0x4B	; 75
     764:	d5 4c       	sbci	r29, 0xC5	; 197
     766:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     768:	e0 91 b9 b6 	lds	r30, 0xB6B9	; 0x80b6b9 <__bss_end+0x7bb4>
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	eb 54       	subi	r30, 0x4B	; 75
     770:	f5 4c       	sbci	r31, 0xC5	; 197
     772:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     774:	e0 91 b8 b6 	lds	r30, 0xB6B8	; 0x80b6b8 <__bss_end+0x7bb3>
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	eb 54       	subi	r30, 0x4B	; 75
     77c:	f5 4c       	sbci	r31, 0xC5	; 197
     77e:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     780:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     78a:	eb 54       	subi	r30, 0x4B	; 75
     78c:	f5 4c       	sbci	r31, 0xC5	; 197
     78e:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     790:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     79a:	eb 54       	subi	r30, 0x4B	; 75
     79c:	f5 4c       	sbci	r31, 0xC5	; 197
     79e:	80 83       	st	Z, r24
     7a0:	a0 ec       	ldi	r26, 0xC0	; 192
     7a2:	b6 eb       	ldi	r27, 0xB6	; 182
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     7a4:	ed 91       	ld	r30, X+
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	eb 54       	subi	r30, 0x4B	; 75
     7aa:	f5 4c       	sbci	r31, 0xC5	; 197
     7ac:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     7ae:	86 eb       	ldi	r24, 0xB6	; 182
     7b0:	a6 3c       	cpi	r26, 0xC6	; 198
     7b2:	b8 07       	cpc	r27, r24
     7b4:	b9 f7       	brne	.-18     	; 0x7a4 <MagnetMaze+0x276>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <Setup>:
    ++test;

    for (uint8_t x=0; x<5; ++x){
        iLED[WING[R][x]] = iLED[WING[L][4-x]];
    }
}
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	f8 94       	cli
     7c4:	88 ed       	ldi	r24, 0xD8	; 216
     7c6:	84 bf       	out	0x34, r24	; 52
     7c8:	c1 e0       	ldi	r28, 0x01	; 1
     7ca:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     7ce:	8a e4       	ldi	r24, 0x4A	; 74
     7d0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     7d4:	8c e7       	ldi	r24, 0x7C	; 124
     7d6:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     7da:	9f e3       	ldi	r25, 0x3F	; 63
     7dc:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     7e0:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7e4:	80 68       	ori	r24, 0x80	; 128
     7e6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7ea:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7ee:	80 68       	ori	r24, 0x80	; 128
     7f0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7f4:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7f8:	80 68       	ori	r24, 0x80	; 128
     7fa:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7fe:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     802:	80 68       	ori	r24, 0x80	; 128
     804:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     808:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     80c:	80 68       	ori	r24, 0x80	; 128
     80e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     812:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     816:	80 68       	ori	r24, 0x80	; 128
     818:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     81c:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     820:	d2 e0       	ldi	r29, 0x02	; 2
     822:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     826:	2b e5       	ldi	r18, 0x5B	; 91
     828:	31 e0       	ldi	r19, 0x01	; 1
     82a:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     82e:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     838:	80 ec       	ldi	r24, 0xC0	; 192
     83a:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     844:	1c ba       	out	0x1c, r1	; 28
     846:	1d ba       	out	0x1d, r1	; 29
     848:	1e ba       	out	0x1e, r1	; 30
     84a:	1f ba       	out	0x1f, r1	; 31
     84c:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     850:	88 e0       	ldi	r24, 0x08	; 8
     852:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     856:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     85a:	87 e7       	ldi	r24, 0x77	; 119
     85c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     860:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     864:	8b e0       	ldi	r24, 0x0B	; 11
     866:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     86a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     86e:	81 60       	ori	r24, 0x01	; 1
     870:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     87a:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     886:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     88a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     88e:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     892:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     896:	8b e8       	ldi	r24, 0x8B	; 139
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     89e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     8a2:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     8a6:	08 dc       	rcall	.-2032   	; 0xb8 <I2C_init>
     8a8:	82 e1       	ldi	r24, 0x12	; 18
     8aa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     8ae:	80 e2       	ldi	r24, 0x20	; 32
     8b0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b4:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     8b8:	86 e0       	ldi	r24, 0x06	; 6
     8ba:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8be:	84 e4       	ldi	r24, 0x44	; 68
     8c0:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     8c4:	8e e1       	ldi	r24, 0x1E	; 30
     8c6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     8ca:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     8ce:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8d2:	81 60       	ori	r24, 0x01	; 1
     8d4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8d8:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     8dc:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8e0:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     8e4:	82 e5       	ldi	r24, 0x52	; 82
     8e6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     8ea:	84 e0       	ldi	r24, 0x04	; 4
     8ec:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     8f0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     8f4:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     8f8:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8fc:	81 60       	ori	r24, 0x01	; 1
     8fe:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     902:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     906:	80 e4       	ldi	r24, 0x40	; 64
     908:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     90c:	80 e8       	ldi	r24, 0x80	; 128
     90e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     912:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     91c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     920:	80 fd       	sbrc	r24, 0
     922:	fc cf       	rjmp	.-8      	; 0x91c <Setup+0x15e>
     924:	80 e3       	ldi	r24, 0x30	; 48
     926:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     92a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     92e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     932:	82 fd       	sbrc	r24, 2
     934:	fc cf       	rjmp	.-8      	; 0x92e <Setup+0x170>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	98 e7       	ldi	r25, 0x78	; 120
     93a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     93e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     942:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     946:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     94a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     94e:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     952:	82 96       	adiw	r24, 0x22	; 34
     954:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
     958:	80 93 e2 3a 	sts	0x3AE2, r24	; 0x803ae2 <tmp16bit>
     95c:	90 93 e3 3a 	sts	0x3AE3, r25	; 0x803ae3 <tmp16bit+0x1>
     960:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     964:	83 fd       	sbrc	r24, 3
     966:	fc cf       	rjmp	.-8      	; 0x960 <Setup+0x1a2>
     968:	80 91 e2 3a 	lds	r24, 0x3AE2	; 0x803ae2 <tmp16bit>
     96c:	90 91 e3 3a 	lds	r25, 0x3AE3	; 0x803ae3 <tmp16bit+0x1>
     970:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     974:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     98a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     98e:	80 fd       	sbrc	r24, 0
     990:	fc cf       	rjmp	.-8      	; 0x98a <Setup+0x1cc>
     992:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     996:	81 60       	ori	r24, 0x01	; 1
     998:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     99c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     9a0:	81 60       	ori	r24, 0x01	; 1
     9a2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     9a6:	10 92 60 3a 	sts	0x3A60, r1	; 0x803a60 <serRx>
     9aa:	80 e6       	ldi	r24, 0x60	; 96
     9ac:	9a e3       	ldi	r25, 0x3A	; 58
     9ae:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <serTxAddr>
     9b2:	90 93 a5 3a 	sts	0x3AA5, r25	; 0x803aa5 <serTxAddr+0x1>
     9b6:	78 94       	sei
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <__vector_8>:
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	af 93       	push	r26
     9ce:	bf 93       	push	r27
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
     9d4:	87 e0       	ldi	r24, 0x07	; 7
     9d6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     9da:	84 e4       	ldi	r24, 0x44	; 68
     9dc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     9e0:	ec b3       	in	r30, 0x1c	; 28
     9e2:	88 e0       	ldi	r24, 0x08	; 8
     9e4:	e8 9f       	mul	r30, r24
     9e6:	f0 01       	movw	r30, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	eb 54       	subi	r30, 0x4B	; 75
     9ec:	f5 4c       	sbci	r31, 0xC5	; 197
     9ee:	a8 e2       	ldi	r26, 0x28	; 40
     9f0:	ba e0       	ldi	r27, 0x0A	; 10
     9f2:	96 e0       	ldi	r25, 0x06	; 6
     9f4:	81 91       	ld	r24, Z+
     9f6:	8d 93       	st	X+, r24
     9f8:	9a 95       	dec	r25
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <__vector_8+0x36>
     9fc:	8b e0       	ldi	r24, 0x0B	; 11
     9fe:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a02:	8c b3       	in	r24, 0x1c	; 28
     a04:	83 30       	cpi	r24, 0x03	; 3
     a06:	58 f4       	brcc	.+22     	; 0xa1e <__vector_8+0x60>
     a08:	8c b3       	in	r24, 0x1c	; 28
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <__vector_8+0x52>
     a0e:	99 0f       	add	r25, r25
     a10:	8a 95       	dec	r24
     a12:	ea f7       	brpl	.-6      	; 0xa0e <__vector_8+0x50>
     a14:	99 b9       	out	0x09, r25	; 9
     a16:	8c b3       	in	r24, 0x1c	; 28
     a18:	83 95       	inc	r24
     a1a:	8c bb       	out	0x1c, r24	; 28
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <__vector_8+0x74>
     a1e:	8c b3       	in	r24, 0x1c	; 28
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	21 f4       	brne	.+8      	; 0xa2c <__vector_8+0x6e>
     a24:	2a 9a       	sbi	0x05, 2	; 5
     a26:	83 95       	inc	r24
     a28:	8c bb       	out	0x1c, r24	; 28
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <__vector_8+0x74>
     a2c:	2e 9a       	sbi	0x05, 6	; 5
     a2e:	88 27       	eor	r24, r24
     a30:	8c bb       	out	0x1c, r24	; 28
     a32:	80 91 4b 3a 	lds	r24, 0x3A4B	; 0x803a4b <timeout_I2C>
     a36:	88 23       	and	r24, r24
     a38:	29 f0       	breq	.+10     	; 0xa44 <__vector_8+0x86>
     a3a:	80 91 4b 3a 	lds	r24, 0x3A4B	; 0x803a4b <timeout_I2C>
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	80 93 4b 3a 	sts	0x3A4B, r24	; 0x803a4b <timeout_I2C>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
     a5c:	1f 90       	pop	r1
     a5e:	18 95       	reti

00000a60 <__vector_13>:
     a60:	1f 92       	push	r1
     a62:	0f 92       	push	r0
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
     a72:	e0 91 a4 3a 	lds	r30, 0x3AA4	; 0x803aa4 <serTxAddr>
     a76:	f0 91 a5 3a 	lds	r31, 0x3AA5	; 0x803aa5 <serTxAddr+0x1>
     a7a:	80 81       	ld	r24, Z
     a7c:	88 23       	and	r24, r24
     a7e:	91 f0       	breq	.+36     	; 0xaa4 <__vector_13+0x44>
     a80:	80 81       	ld	r24, Z
     a82:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a86:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serTxAddr>
     a8a:	90 91 a5 3a 	lds	r25, 0x3AA5	; 0x803aa5 <serTxAddr+0x1>
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <serTxAddr>
     a94:	90 93 a5 3a 	sts	0x3AA5, r25	; 0x803aa5 <serTxAddr+0x1>
     a98:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a9c:	80 62       	ori	r24, 0x20	; 32
     a9e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <__vector_13+0x4e>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     aaa:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	0f 90       	pop	r0
     ac2:	1f 90       	pop	r1
     ac4:	18 95       	reti

00000ac6 <__vector_14>:
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	11 24       	eor	r1, r1
     ad0:	2f 93       	push	r18
     ad2:	3f 93       	push	r19
     ad4:	4f 93       	push	r20
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ae2:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ae6:	80 81       	ld	r24, Z
     ae8:	81 11       	cpse	r24, r1
     aea:	08 c0       	rjmp	.+16     	; 0xafc <__vector_14+0x36>
     aec:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     af0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     af4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     af8:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     afc:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     b00:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b04:	80 81       	ld	r24, Z
     b06:	88 23       	and	r24, r24
     b08:	e1 f0       	breq	.+56     	; 0xb42 <__vector_14+0x7c>
     b0a:	20 81       	ld	r18, Z
     b0c:	40 91 a1 3a 	lds	r20, 0x3AA1	; 0x803aa1 <auVolume>
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	2f 57       	subi	r18, 0x7F	; 127
     b14:	31 09       	sbc	r19, r1
     b16:	42 9f       	mul	r20, r18
     b18:	c0 01       	movw	r24, r0
     b1a:	43 9f       	mul	r20, r19
     b1c:	90 0d       	add	r25, r0
     b1e:	11 24       	eor	r1, r1
     b20:	89 2f       	mov	r24, r25
     b22:	99 0f       	add	r25, r25
     b24:	99 0b       	sbc	r25, r25
     b26:	80 58       	subi	r24, 0x80	; 128
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b2e:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     b32:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     b3c:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <__vector_14+0x88>
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 dd 3a 	sts	0x3ADD, r24	; 0x803add <auPlayDone>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     b54:	ff 91       	pop	r31
     b56:	ef 91       	pop	r30
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_27>:
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	8f 93       	push	r24
     b78:	ef 93       	push	r30
     b7a:	ff 93       	push	r31
     b7c:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
     b80:	81 11       	cpse	r24, r1
     b82:	44 c0       	rjmp	.+136    	; 0xc0c <__vector_27+0xa0>
     b84:	ed b3       	in	r30, 0x1d	; 29
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     b8c:	e0 5a       	subi	r30, 0xA0	; 160
     b8e:	f5 4c       	sbci	r31, 0xC5	; 197
     b90:	80 83       	st	Z, r24
     b92:	ed b3       	in	r30, 0x1d	; 29
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	e0 5a       	subi	r30, 0xA0	; 160
     b98:	f5 4c       	sbci	r31, 0xC5	; 197
     b9a:	80 81       	ld	r24, Z
     b9c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     ba0:	ed b3       	in	r30, 0x1d	; 29
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	e0 5a       	subi	r30, 0xA0	; 160
     ba6:	f5 4c       	sbci	r31, 0xC5	; 197
     ba8:	80 81       	ld	r24, Z
     baa:	8a 30       	cpi	r24, 0x0A	; 10
     bac:	39 f0       	breq	.+14     	; 0xbbc <__vector_27+0x50>
     bae:	ed b3       	in	r30, 0x1d	; 29
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	e0 5a       	subi	r30, 0xA0	; 160
     bb4:	f5 4c       	sbci	r31, 0xC5	; 197
     bb6:	80 81       	ld	r24, Z
     bb8:	8d 30       	cpi	r24, 0x0D	; 13
     bba:	49 f4       	brne	.+18     	; 0xbce <__vector_27+0x62>
     bbc:	ed b3       	in	r30, 0x1d	; 29
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e0 5a       	subi	r30, 0xA0	; 160
     bc2:	f5 4c       	sbci	r31, 0xC5	; 197
     bc4:	10 82       	st	Z, r1
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <serRxDone>
     bcc:	1f c0       	rjmp	.+62     	; 0xc0c <__vector_27+0xa0>
     bce:	ed b3       	in	r30, 0x1d	; 29
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	e0 5a       	subi	r30, 0xA0	; 160
     bd4:	f5 4c       	sbci	r31, 0xC5	; 197
     bd6:	80 81       	ld	r24, Z
     bd8:	88 30       	cpi	r24, 0x08	; 8
     bda:	39 f0       	breq	.+14     	; 0xbea <__vector_27+0x7e>
     bdc:	ed b3       	in	r30, 0x1d	; 29
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	e0 5a       	subi	r30, 0xA0	; 160
     be2:	f5 4c       	sbci	r31, 0xC5	; 197
     be4:	80 81       	ld	r24, Z
     be6:	8f 37       	cpi	r24, 0x7F	; 127
     be8:	59 f4       	brne	.+22     	; 0xc00 <__vector_27+0x94>
     bea:	8d b3       	in	r24, 0x1d	; 29
     bec:	88 23       	and	r24, r24
     bee:	41 f0       	breq	.+16     	; 0xc00 <__vector_27+0x94>
     bf0:	ed b3       	in	r30, 0x1d	; 29
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	e0 5a       	subi	r30, 0xA0	; 160
     bf6:	f5 4c       	sbci	r31, 0xC5	; 197
     bf8:	10 82       	st	Z, r1
     bfa:	8d b3       	in	r24, 0x1d	; 29
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <__vector_27+0x9e>
     c00:	8d b3       	in	r24, 0x1d	; 29
     c02:	80 34       	cpi	r24, 0x40	; 64
     c04:	18 f4       	brcc	.+6      	; 0xc0c <__vector_27+0xa0>
     c06:	8d b3       	in	r24, 0x1d	; 29
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	8d bb       	out	0x1d, r24	; 29
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     c12:	ff 91       	pop	r31
     c14:	ef 91       	pop	r30
     c16:	8f 91       	pop	r24
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f 90       	pop	r0
     c1e:	1f 90       	pop	r1
     c20:	18 95       	reti

00000c22 <__vector_28>:
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	8f 93       	push	r24
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
     c32:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c36:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c40:	e5 e0       	ldi	r30, 0x05	; 5
     c42:	f8 e0       	ldi	r31, 0x08	; 8
     c44:	80 81       	ld	r24, Z
     c46:	8f 7d       	andi	r24, 0xDF	; 223
     c48:	80 83       	st	Z, r24
     c4a:	ff 91       	pop	r31
     c4c:	ef 91       	pop	r30
     c4e:	8f 91       	pop	r24
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <__vector_20>:
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	ef 93       	push	r30
     c6a:	ff 93       	push	r31
     c6c:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <adc0Chg>
     c70:	81 11       	cpse	r24, r1
     c72:	18 c0       	rjmp	.+48     	; 0xca4 <__vector_20+0x4a>
     c74:	8e b3       	in	r24, 0x1e	; 30
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	87 70       	andi	r24, 0x07	; 7
     c7a:	8e bb       	out	0x1e, r24	; 30
     c7c:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     c80:	8e 31       	cpi	r24, 0x1E	; 30
     c82:	41 f4       	brne	.+16     	; 0xc94 <__vector_20+0x3a>
     c84:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	80 93 e0 3a 	sts	0x3AE0, r24	; 0x803ae0 <adcTemp>
     c8e:	90 93 e1 3a 	sts	0x3AE1, r25	; 0x803ae1 <adcTemp+0x1>
     c92:	0d c0       	rjmp	.+26     	; 0xcae <__vector_20+0x54>
     c94:	ee b3       	in	r30, 0x1e	; 30
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c9c:	e3 55       	subi	r30, 0x53	; 83
     c9e:	f5 4c       	sbci	r31, 0xC5	; 197
     ca0:	80 83       	st	Z, r24
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__vector_20+0x54>
     ca4:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <adc0Chg>
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <adc0Chg>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <__vector_22>:
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cd8:	81 11       	cpse	r24, r1
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__vector_22+0x2a>
     cdc:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ce0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ce4:	80 93 a8 3a 	sts	0x3AA8, r24	; 0x803aa8 <adcPhot>
     ce8:	90 93 a9 3a 	sts	0x3AA9, r25	; 0x803aa9 <adcPhot+0x1>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	10 c0       	rjmp	.+32     	; 0xd10 <__vector_22+0x4a>
     cf0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	79 f4       	brne	.+30     	; 0xd16 <__vector_22+0x50>
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     cfe:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d02:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d06:	80 93 a6 3a 	sts	0x3AA6, r24	; 0x803aa6 <adcHall>
     d0a:	90 93 a7 3a 	sts	0x3AA7, r25	; 0x803aa7 <adcHall+0x1>
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d14:	10 c0       	rjmp	.+32     	; 0xd36 <__vector_22+0x70>
     d16:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d1a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d1e:	80 93 a2 3a 	sts	0x3AA2, r24	; 0x803aa2 <adcBtns>
     d22:	90 93 a3 3a 	sts	0x3AA3, r25	; 0x803aa3 <adcBtns+0x1>
     d26:	8f b3       	in	r24, 0x1f	; 31
     d28:	8f 30       	cpi	r24, 0x0F	; 15
     d2a:	29 f4       	brne	.+10     	; 0xd36 <__vector_22+0x70>
     d2c:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d30:	88 e0       	ldi	r24, 0x08	; 8
     d32:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d36:	8f b3       	in	r24, 0x1f	; 31
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	8f 70       	andi	r24, 0x0F	; 15
     d3e:	99 27       	eor	r25, r25
     d40:	8f bb       	out	0x1f, r24	; 31
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_6>:
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d72:	81 ff       	sbrs	r24, 1
     d74:	26 c0       	rjmp	.+76     	; 0xdc2 <__vector_6+0x6c>
     d76:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d7a:	8f 3f       	cpi	r24, 0xFF	; 255
     d7c:	29 f0       	breq	.+10     	; 0xd88 <__vector_6+0x32>
     d7e:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d82:	8f 5f       	subi	r24, 0xFF	; 255
     d84:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <buttonMark>
     d88:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d8c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d90:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d94:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     d98:	82 96       	adiw	r24, 0x22	; 34
     d9a:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
     d9e:	80 93 e2 3a 	sts	0x3AE2, r24	; 0x803ae2 <tmp16bit>
     da2:	90 93 e3 3a 	sts	0x3AE3, r25	; 0x803ae3 <tmp16bit+0x1>
     da6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     daa:	83 fd       	sbrc	r24, 3
     dac:	fc cf       	rjmp	.-8      	; 0xda6 <__vector_6+0x50>
     dae:	80 91 e2 3a 	lds	r24, 0x3AE2	; 0x803ae2 <tmp16bit>
     db2:	90 91 e3 3a 	lds	r25, 0x3AE3	; 0x803ae3 <tmp16bit+0x1>
     db6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     dba:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <__vector_6+0x78>
     dc2:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <minuteMark>
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <minuteMark>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_7>:
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	8f 93       	push	r24
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     dfc:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     e00:	8f 91       	pop	r24
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <EERead>:
     e0c:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e10:	91 fd       	sbrc	r25, 1
     e12:	fc cf       	rjmp	.-8      	; 0xe0c <EERead>
     e14:	fb 01       	movw	r30, r22
     e16:	48 0f       	add	r20, r24
     e18:	84 17       	cp	r24, r20
     e1a:	39 f0       	breq	.+14     	; 0xe2a <EERead+0x1e>
     e1c:	a8 2f       	mov	r26, r24
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	bc 5e       	subi	r27, 0xEC	; 236
     e22:	9c 91       	ld	r25, X
     e24:	91 93       	st	Z+, r25
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	f7 cf       	rjmp	.-18     	; 0xe18 <EERead+0xc>
     e2a:	08 95       	ret

00000e2c <EEWrite>:
     e2c:	9d e9       	ldi	r25, 0x9D	; 157
     e2e:	24 e0       	ldi	r18, 0x04	; 4
     e30:	33 e0       	ldi	r19, 0x03	; 3
     e32:	44 23       	and	r20, r20
     e34:	09 f1       	breq	.+66     	; 0xe78 <EEWrite+0x4c>
     e36:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e3a:	51 fd       	sbrc	r21, 1
     e3c:	fc cf       	rjmp	.-8      	; 0xe36 <EEWrite+0xa>
     e3e:	94 bf       	out	0x34, r25	; 52
     e40:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e44:	e8 2f       	mov	r30, r24
     e46:	58 2f       	mov	r21, r24
     e48:	5f 71       	andi	r21, 0x1F	; 31
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	db 01       	movw	r26, r22
     e52:	11 97       	sbiw	r26, 0x01	; 1
     e54:	ac 91       	ld	r26, X
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	fc 5e       	subi	r31, 0xEC	; 236
     e5a:	a0 83       	st	Z, r26
     e5c:	41 50       	subi	r20, 0x01	; 1
     e5e:	19 f0       	breq	.+6      	; 0xe66 <EEWrite+0x3a>
     e60:	e8 2f       	mov	r30, r24
     e62:	5f 31       	cpi	r21, 0x1F	; 31
     e64:	81 f7       	brne	.-32     	; 0xe46 <EEWrite+0x1a>
     e66:	94 bf       	out	0x34, r25	; 52
     e68:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e6c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e70:	52 ff       	sbrs	r21, 2
     e72:	df cf       	rjmp	.-66     	; 0xe32 <EEWrite+0x6>
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	08 95       	ret
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret

00000e7c <SerSend>:
     e7c:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <serTxDone>
     e80:	22 23       	and	r18, r18
     e82:	59 f0       	breq	.+22     	; 0xe9a <SerSend+0x1e>
     e84:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <serTxAddr>
     e88:	90 93 a5 3a 	sts	0x3AA5, r25	; 0x803aa5 <serTxAddr+0x1>
     e8c:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <serTxDone>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	08 95       	ret
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	08 95       	ret

00000e9e <SerSpeed>:
     e9e:	28 2f       	mov	r18, r24
     ea0:	81 11       	cpse	r24, r1
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <SerSpeed+0x8>
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	82 1b       	sub	r24, r18
     eac:	91 09       	sbc	r25, r1
     eae:	98 2f       	mov	r25, r24
     eb0:	88 27       	eor	r24, r24
     eb2:	81 50       	subi	r24, 0x01	; 1
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     eba:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     ebe:	08 95       	ret

00000ec0 <SelectTSens>:
     ec0:	82 e1       	ldi	r24, 0x12	; 18
     ec2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ec6:	e0 e0       	ldi	r30, 0x00	; 0
     ec8:	f6 e0       	ldi	r31, 0x06	; 6
     eca:	80 81       	ld	r24, Z
     ecc:	84 60       	ori	r24, 0x04	; 4
     ece:	80 83       	st	Z, r24
     ed0:	8e e1       	ldi	r24, 0x1E	; 30
     ed2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <adc0Chg>
     edc:	08 95       	ret

00000ede <SelectAuIn>:
     ede:	82 e2       	ldi	r24, 0x22	; 34
     ee0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ee4:	e0 e0       	ldi	r30, 0x00	; 0
     ee6:	f6 e0       	ldi	r31, 0x06	; 6
     ee8:	80 81       	ld	r24, Z
     eea:	8b 7f       	andi	r24, 0xFB	; 251
     eec:	80 83       	st	Z, r24
     eee:	87 e0       	ldi	r24, 0x07	; 7
     ef0:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <adc0Chg>
     efa:	08 95       	ret

00000efc <CheckButtons>:
     efc:	20 91 a2 3a 	lds	r18, 0x3AA2	; 0x803aa2 <adcBtns>
     f00:	30 91 a3 3a 	lds	r19, 0x3AA3	; 0x803aa3 <adcBtns+0x1>
     f04:	94 e0       	ldi	r25, 0x04	; 4
     f06:	36 95       	lsr	r19
     f08:	27 95       	ror	r18
     f0a:	9a 95       	dec	r25
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <CheckButtons+0xa>
     f0e:	33 27       	eor	r19, r19
     f10:	2c 35       	cpi	r18, 0x5C	; 92
     f12:	31 05       	cpc	r19, r1
     f14:	d0 f4       	brcc	.+52     	; 0xf4a <CheckButtons+0x4e>
     f16:	23 35       	cpi	r18, 0x53	; 83
     f18:	31 05       	cpc	r19, r1
     f1a:	a8 f5       	brcc	.+106    	; 0xf86 <CheckButtons+0x8a>
     f1c:	22 33       	cpi	r18, 0x32	; 50
     f1e:	31 05       	cpc	r19, r1
     f20:	50 f4       	brcc	.+20     	; 0xf36 <CheckButtons+0x3a>
     f22:	2d 32       	cpi	r18, 0x2D	; 45
     f24:	31 05       	cpc	r19, r1
     f26:	58 f5       	brcc	.+86     	; 0xf7e <CheckButtons+0x82>
     f28:	23 52       	subi	r18, 0x23	; 35
     f2a:	31 09       	sbc	r19, r1
     f2c:	25 30       	cpi	r18, 0x05	; 5
     f2e:	31 05       	cpc	r19, r1
     f30:	80 f5       	brcc	.+96     	; 0xf92 <CheckButtons+0x96>
     f32:	9c e0       	ldi	r25, 0x0C	; 12
     f34:	2f c0       	rjmp	.+94     	; 0xf94 <CheckButtons+0x98>
     f36:	27 33       	cpi	r18, 0x37	; 55
     f38:	31 05       	cpc	r19, r1
     f3a:	18 f1       	brcs	.+70     	; 0xf82 <CheckButtons+0x86>
     f3c:	2e 53       	subi	r18, 0x3E	; 62
     f3e:	31 09       	sbc	r19, r1
     f40:	27 30       	cpi	r18, 0x07	; 7
     f42:	31 05       	cpc	r19, r1
     f44:	30 f5       	brcc	.+76     	; 0xf92 <CheckButtons+0x96>
     f46:	96 e0       	ldi	r25, 0x06	; 6
     f48:	25 c0       	rjmp	.+74     	; 0xf94 <CheckButtons+0x98>
     f4a:	2a 38       	cpi	r18, 0x8A	; 138
     f4c:	31 05       	cpc	r19, r1
     f4e:	50 f4       	brcc	.+20     	; 0xf64 <CheckButtons+0x68>
     f50:	29 37       	cpi	r18, 0x79	; 121
     f52:	31 05       	cpc	r19, r1
     f54:	d0 f4       	brcc	.+52     	; 0xf8a <CheckButtons+0x8e>
     f56:	23 56       	subi	r18, 0x63	; 99
     f58:	31 09       	sbc	r19, r1
     f5a:	2b 30       	cpi	r18, 0x0B	; 11
     f5c:	31 05       	cpc	r19, r1
     f5e:	c8 f4       	brcc	.+50     	; 0xf92 <CheckButtons+0x96>
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	18 c0       	rjmp	.+48     	; 0xf94 <CheckButtons+0x98>
     f64:	22 3a       	cpi	r18, 0xA2	; 162
     f66:	31 05       	cpc	r19, r1
     f68:	a0 f0       	brcs	.+40     	; 0xf92 <CheckButtons+0x96>
     f6a:	2b 3b       	cpi	r18, 0xBB	; 187
     f6c:	31 05       	cpc	r19, r1
     f6e:	78 f0       	brcs	.+30     	; 0xf8e <CheckButtons+0x92>
     f70:	20 5f       	subi	r18, 0xF0	; 240
     f72:	31 09       	sbc	r19, r1
     f74:	20 31       	cpi	r18, 0x10	; 16
     f76:	31 05       	cpc	r19, r1
     f78:	60 f4       	brcc	.+24     	; 0xf92 <CheckButtons+0x96>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <CheckButtons+0x98>
     f7e:	99 e0       	ldi	r25, 0x09	; 9
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <CheckButtons+0x98>
     f82:	98 e0       	ldi	r25, 0x08	; 8
     f84:	07 c0       	rjmp	.+14     	; 0xf94 <CheckButtons+0x98>
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <CheckButtons+0x98>
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <CheckButtons+0x98>
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <CheckButtons+0x98>
     f92:	9f e0       	ldi	r25, 0x0F	; 15
     f94:	28 2f       	mov	r18, r24
     f96:	2f 70       	andi	r18, 0x0F	; 15
     f98:	92 13       	cpse	r25, r18
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <CheckButtons+0xac>
     f9c:	98 2f       	mov	r25, r24
     f9e:	90 7f       	andi	r25, 0xF0	; 240
     fa0:	90 3f       	cpi	r25, 0xF0	; 240
     fa2:	39 f0       	breq	.+14     	; 0xfb2 <CheckButtons+0xb6>
     fa4:	80 5f       	subi	r24, 0xF0	; 240
     fa6:	08 95       	ret
     fa8:	99 23       	and	r25, r25
     faa:	11 f0       	breq	.+4      	; 0xfb0 <CheckButtons+0xb4>
     fac:	89 2f       	mov	r24, r25
     fae:	08 95       	ret
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	08 95       	ret

00000fb4 <lfsr>:
     fb4:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3879>
     fb8:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3879+0x1>
     fbc:	9c 01       	movw	r18, r24
     fbe:	32 2f       	mov	r19, r18
     fc0:	22 27       	eor	r18, r18
     fc2:	32 95       	swap	r19
     fc4:	33 0f       	add	r19, r19
     fc6:	30 7e       	andi	r19, 0xE0	; 224
     fc8:	82 27       	eor	r24, r18
     fca:	93 27       	eor	r25, r19
     fcc:	9c 01       	movw	r18, r24
     fce:	23 2f       	mov	r18, r19
     fd0:	33 27       	eor	r19, r19
     fd2:	26 95       	lsr	r18
     fd4:	82 27       	eor	r24, r18
     fd6:	93 27       	eor	r25, r19
     fd8:	9c 01       	movw	r18, r24
     fda:	36 95       	lsr	r19
     fdc:	32 2f       	mov	r19, r18
     fde:	22 27       	eor	r18, r18
     fe0:	37 95       	ror	r19
     fe2:	27 95       	ror	r18
     fe4:	82 27       	eor	r24, r18
     fe6:	93 27       	eor	r25, r19
     fe8:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3879>
     fec:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3879+0x1>
     ff0:	08 95       	ret

00000ff2 <floatSpeed>:
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	7b 01       	movw	r14, r22
    1002:	8a 01       	movw	r16, r20
    1004:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1008:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    100c:	e8 2f       	mov	r30, r24
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	31 97       	sbiw	r30, 0x01	; 1
    1012:	e7 70       	andi	r30, 0x07	; 7
    1014:	ff 27       	eor	r31, r31
    1016:	e2 5e       	subi	r30, 0xE2	; 226
    1018:	f7 4c       	sbci	r31, 0xC7	; 199
    101a:	d0 80       	ld	r13, Z
    101c:	cb df       	rcall	.-106    	; 0xfb4 <lfsr>
    101e:	8d 21       	and	r24, r13
    1020:	c8 0f       	add	r28, r24
    1022:	d1 1d       	adc	r29, r1
    1024:	c7 df       	rcall	.-114    	; 0xfb4 <lfsr>
    1026:	8d 21       	and	r24, r13
    1028:	c8 1b       	sub	r28, r24
    102a:	d1 09       	sbc	r29, r1
    102c:	0c 17       	cp	r16, r28
    102e:	1d 07       	cpc	r17, r29
    1030:	08 f4       	brcc	.+2      	; 0x1034 <floatSpeed+0x42>
    1032:	e8 01       	movw	r28, r16
    1034:	c7 01       	movw	r24, r14
    1036:	ec 16       	cp	r14, r28
    1038:	fd 06       	cpc	r15, r29
    103a:	08 f4       	brcc	.+2      	; 0x103e <floatSpeed+0x4c>
    103c:	ce 01       	movw	r24, r28
    103e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1042:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13
    1054:	08 95       	ret

00001056 <floatAround>:
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	c8 2f       	mov	r28, r24
    1060:	d4 2f       	mov	r29, r20
    1062:	02 2f       	mov	r16, r18
    1064:	e6 2f       	mov	r30, r22
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	31 97       	sbiw	r30, 0x01	; 1
    106a:	e7 70       	andi	r30, 0x07	; 7
    106c:	ff 27       	eor	r31, r31
    106e:	e2 5e       	subi	r30, 0xE2	; 226
    1070:	f7 4c       	sbci	r31, 0xC7	; 199
    1072:	10 81       	ld	r17, Z
    1074:	9f df       	rcall	.-194    	; 0xfb4 <lfsr>
    1076:	81 23       	and	r24, r17
    1078:	c8 0f       	add	r28, r24
    107a:	9c df       	rcall	.-200    	; 0xfb4 <lfsr>
    107c:	81 23       	and	r24, r17
    107e:	c8 1b       	sub	r28, r24
    1080:	8c 2f       	mov	r24, r28
    1082:	00 23       	and	r16, r16
    1084:	41 f0       	breq	.+16     	; 0x1096 <floatAround+0x40>
    1086:	9c 2f       	mov	r25, r28
    1088:	0c 17       	cp	r16, r28
    108a:	08 f4       	brcc	.+2      	; 0x108e <floatAround+0x38>
    108c:	90 2f       	mov	r25, r16
    108e:	8d 2f       	mov	r24, r29
    1090:	d9 17       	cp	r29, r25
    1092:	08 f4       	brcc	.+2      	; 0x1096 <floatAround+0x40>
    1094:	89 2f       	mov	r24, r25
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	8d 17       	cp	r24, r29
    109c:	10 f0       	brcs	.+4      	; 0x10a2 <floatAround+0x4c>
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	2d 2f       	mov	r18, r29
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	24 23       	and	r18, r20
    10a8:	35 23       	and	r19, r21
    10aa:	23 2b       	or	r18, r19
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <floatAround+0x5a>
    10ae:	8d 2f       	mov	r24, r29
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <SaveGameState>:
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	64 97       	sbiw	r28, 0x14	; 20
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	44 e1       	ldi	r20, 0x14	; 20
    10d4:	be 01       	movw	r22, r28
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	97 de       	rcall	.-722    	; 0xe0c <EERead>
    10de:	8c e4       	ldi	r24, 0x4C	; 76
    10e0:	c8 2e       	mov	r12, r24
    10e2:	8a e3       	ldi	r24, 0x3A	; 58
    10e4:	d8 2e       	mov	r13, r24
    10e6:	8e 01       	movw	r16, r28
    10e8:	0f 5f       	subi	r16, 0xFF	; 255
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
    10ec:	f1 2c       	mov	r15, r1
    10ee:	f8 01       	movw	r30, r16
    10f0:	81 91       	ld	r24, Z+
    10f2:	8f 01       	movw	r16, r30
    10f4:	f6 01       	movw	r30, r12
    10f6:	90 81       	ld	r25, Z
    10f8:	98 13       	cpse	r25, r24
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <SaveGameState+0x52>
    10fc:	f3 94       	inc	r15
    10fe:	ff ef       	ldi	r31, 0xFF	; 255
    1100:	cf 1a       	sub	r12, r31
    1102:	df 0a       	sbc	r13, r31
    1104:	80 e1       	ldi	r24, 0x10	; 16
    1106:	f8 12       	cpse	r15, r24
    1108:	f2 cf       	rjmp	.-28     	; 0x10ee <SaveGameState+0x34>
    110a:	08 c0       	rjmp	.+16     	; 0x111c <SaveGameState+0x62>
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	b6 01       	movw	r22, r12
    1110:	8f 2d       	mov	r24, r15
    1112:	8c de       	rcall	.-744    	; 0xe2c <EEWrite>
    1114:	88 23       	and	r24, r24
    1116:	91 f3       	breq	.-28     	; 0x10fc <SaveGameState+0x42>
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	36 c0       	rjmp	.+108    	; 0x1188 <SaveGameState+0xce>
    111c:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    1120:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    1124:	30 93 5c 3a 	sts	0x3A5C, r19	; 0x803a5c <gameState+0x10>
    1128:	20 93 5d 3a 	sts	0x3A5D, r18	; 0x803a5d <gameState+0x11>
    112c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    1130:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    1134:	90 93 5e 3a 	sts	0x3A5E, r25	; 0x803a5e <gameState+0x12>
    1138:	80 93 5f 3a 	sts	0x3A5F, r24	; 0x803a5f <gameState+0x13>
    113c:	89 89       	ldd	r24, Y+17	; 0x11
    113e:	9a 89       	ldd	r25, Y+18	; 0x12
    1140:	98 27       	eor	r25, r24
    1142:	89 27       	eor	r24, r25
    1144:	98 27       	eor	r25, r24
    1146:	28 17       	cp	r18, r24
    1148:	39 07       	cpc	r19, r25
    114a:	69 f4       	brne	.+26     	; 0x1166 <SaveGameState+0xac>
    114c:	8b 89       	ldd	r24, Y+19	; 0x13
    114e:	9c 89       	ldd	r25, Y+20	; 0x14
    1150:	98 27       	eor	r25, r24
    1152:	89 27       	eor	r24, r25
    1154:	98 27       	eor	r25, r24
    1156:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    115a:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    115e:	28 17       	cp	r18, r24
    1160:	39 07       	cpc	r19, r25
    1162:	49 f4       	brne	.+18     	; 0x1176 <SaveGameState+0xbc>
    1164:	10 c0       	rjmp	.+32     	; 0x1186 <SaveGameState+0xcc>
    1166:	42 e0       	ldi	r20, 0x02	; 2
    1168:	6c e5       	ldi	r22, 0x5C	; 92
    116a:	7a e3       	ldi	r23, 0x3A	; 58
    116c:	80 e1       	ldi	r24, 0x10	; 16
    116e:	5e de       	rcall	.-836    	; 0xe2c <EEWrite>
    1170:	88 23       	and	r24, r24
    1172:	61 f3       	breq	.-40     	; 0x114c <SaveGameState+0x92>
    1174:	d1 cf       	rjmp	.-94     	; 0x1118 <SaveGameState+0x5e>
    1176:	42 e0       	ldi	r20, 0x02	; 2
    1178:	6e e5       	ldi	r22, 0x5E	; 94
    117a:	7a e3       	ldi	r23, 0x3A	; 58
    117c:	82 e1       	ldi	r24, 0x12	; 18
    117e:	56 de       	rcall	.-852    	; 0xe2c <EEWrite>
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	81 11       	cpse	r24, r1
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <SaveGameState+0xce>
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	89 2f       	mov	r24, r25
    118a:	64 96       	adiw	r28, 0x14	; 20
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	08 95       	ret

000011a0 <ReadStatusBit>:
    11a0:	e8 2f       	mov	r30, r24
    11a2:	ef 77       	andi	r30, 0x7F	; 127
    11a4:	e6 95       	lsr	r30
    11a6:	e6 95       	lsr	r30
    11a8:	e6 95       	lsr	r30
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	e4 5b       	subi	r30, 0xB4	; 180
    11ae:	f5 4c       	sbci	r31, 0xC5	; 197
    11b0:	20 81       	ld	r18, Z
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	87 70       	andi	r24, 0x07	; 7
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <ReadStatusBit+0x1e>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <ReadStatusBit+0x1a>
    11c2:	ca 01       	movw	r24, r20
    11c4:	81 70       	andi	r24, 0x01	; 1
    11c6:	08 95       	ret

000011c8 <WriteStatusBit>:
    11c8:	e8 2f       	mov	r30, r24
    11ca:	ef 77       	andi	r30, 0x7F	; 127
    11cc:	e6 95       	lsr	r30
    11ce:	e6 95       	lsr	r30
    11d0:	e6 95       	lsr	r30
    11d2:	28 2f       	mov	r18, r24
    11d4:	27 70       	andi	r18, 0x07	; 7
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	e4 5b       	subi	r30, 0xB4	; 180
    11da:	f5 4c       	sbci	r31, 0xC5	; 197
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <WriteStatusBit+0x1c>
    11e2:	88 0f       	add	r24, r24
    11e4:	2a 95       	dec	r18
    11e6:	ea f7       	brpl	.-6      	; 0x11e2 <WriteStatusBit+0x1a>
    11e8:	66 23       	and	r22, r22
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <WriteStatusBit+0x2a>
    11ec:	90 81       	ld	r25, Z
    11ee:	89 2b       	or	r24, r25
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <WriteStatusBit+0x30>
    11f2:	80 95       	com	r24
    11f4:	90 81       	ld	r25, Z
    11f6:	89 23       	and	r24, r25
    11f8:	80 83       	st	Z, r24
    11fa:	08 95       	ret

000011fc <UpdateState>:
    11fc:	98 2f       	mov	r25, r24
    11fe:	8f 77       	andi	r24, 0x7F	; 127
    1200:	31 f0       	breq	.+12     	; 0x120e <UpdateState+0x12>
    1202:	97 ff       	sbrs	r25, 7
    1204:	02 c0       	rjmp	.+4      	; 0x120a <UpdateState+0xe>
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	01 c0       	rjmp	.+2      	; 0x120c <UpdateState+0x10>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	dd cf       	rjmp	.-70     	; 0x11c8 <WriteStatusBit>
    120e:	08 95       	ret

00001210 <CheckState>:
    1210:	cf 93       	push	r28
    1212:	c8 2f       	mov	r28, r24
    1214:	8f 77       	andi	r24, 0x7F	; 127
    1216:	c4 df       	rcall	.-120    	; 0x11a0 <ReadStatusBit>
    1218:	2c 2f       	mov	r18, r28
    121a:	22 1f       	adc	r18, r18
    121c:	22 27       	eor	r18, r18
    121e:	22 1f       	adc	r18, r18
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	81 11       	cpse	r24, r1
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <CheckState+0x18>
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	82 2f       	mov	r24, r18
    122a:	89 27       	eor	r24, r25
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <getID>:
    1230:	e3 e0       	ldi	r30, 0x03	; 3
    1232:	f1 e1       	ldi	r31, 0x11	; 17
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	91 91       	ld	r25, Z+
    1238:	89 0f       	add	r24, r25
    123a:	ed 30       	cpi	r30, 0x0D	; 13
    123c:	91 e1       	ldi	r25, 0x11	; 17
    123e:	f9 07       	cpc	r31, r25
    1240:	d1 f7       	brne	.-12     	; 0x1236 <getID+0x6>
    1242:	83 70       	andi	r24, 0x03	; 3
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <whoami>
    124a:	08 95       	ret

0000124c <Reset>:
    124c:	ec e4       	ldi	r30, 0x4C	; 76
    124e:	fa e3       	ldi	r31, 0x3A	; 58
    1250:	11 92       	st	Z+, r1
    1252:	8a e3       	ldi	r24, 0x3A	; 58
    1254:	e0 36       	cpi	r30, 0x60	; 96
    1256:	f8 07       	cpc	r31, r24
    1258:	d9 f7       	brne	.-10     	; 0x1250 <Reset+0x4>
    125a:	ea df       	rcall	.-44     	; 0x1230 <getID>
    125c:	81 11       	cpse	r24, r1
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <Reset+0x1c>
    1260:	80 91 59 3a 	lds	r24, 0x3A59	; 0x803a59 <gameState+0xd>
    1264:	80 64       	ori	r24, 0x40	; 64
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <Reset+0x26>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	31 f4       	brne	.+12     	; 0x1278 <Reset+0x2c>
    126c:	80 91 59 3a 	lds	r24, 0x3A59	; 0x803a59 <gameState+0xd>
    1270:	80 68       	ori	r24, 0x80	; 128
    1272:	80 93 59 3a 	sts	0x3A59, r24	; 0x803a59 <gameState+0xd>
    1276:	0d c0       	rjmp	.+26     	; 0x1292 <Reset+0x46>
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	21 f4       	brne	.+8      	; 0x1284 <Reset+0x38>
    127c:	80 91 5a 3a 	lds	r24, 0x3A5A	; 0x803a5a <gameState+0xe>
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <Reset+0x42>
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	29 f4       	brne	.+10     	; 0x1292 <Reset+0x46>
    1288:	80 91 5a 3a 	lds	r24, 0x3A5A	; 0x803a5a <gameState+0xe>
    128c:	82 60       	ori	r24, 0x02	; 2
    128e:	80 93 5a 3a 	sts	0x3A5A, r24	; 0x803a5a <gameState+0xe>
    1292:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <gameState>
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	80 93 4c 3a 	sts	0x3A4C, r24	; 0x803a4c <gameState>
    129c:	08 95       	ret

0000129e <LoadGameState>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	44 e1       	ldi	r20, 0x14	; 20
    12a4:	6c e4       	ldi	r22, 0x4C	; 76
    12a6:	7a e3       	ldi	r23, 0x3A	; 58
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	b0 dd       	rcall	.-1184   	; 0xe0c <EERead>
    12ac:	ce e6       	ldi	r28, 0x6E	; 110
    12ae:	d0 e0       	ldi	r29, 0x00	; 0
    12b0:	8c 2f       	mov	r24, r28
    12b2:	76 df       	rcall	.-276    	; 0x11a0 <ReadStatusBit>
    12b4:	d8 0f       	add	r29, r24
    12b6:	cf 5f       	subi	r28, 0xFF	; 255
    12b8:	c2 37       	cpi	r28, 0x72	; 114
    12ba:	d1 f7       	brne	.-12     	; 0x12b0 <LoadGameState+0x12>
    12bc:	d1 30       	cpi	r29, 0x01	; 1
    12be:	11 f0       	breq	.+4      	; 0x12c4 <LoadGameState+0x26>
    12c0:	c5 df       	rcall	.-118    	; 0x124c <Reset>
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <LoadGameState+0x28>
    12c4:	b5 df       	rcall	.-150    	; 0x1230 <getID>
    12c6:	80 91 5c 3a 	lds	r24, 0x3A5C	; 0x803a5c <gameState+0x10>
    12ca:	90 91 5d 3a 	lds	r25, 0x3A5D	; 0x803a5d <gameState+0x11>
    12ce:	98 27       	eor	r25, r24
    12d0:	89 27       	eor	r24, r25
    12d2:	98 27       	eor	r25, r24
    12d4:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    12d8:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    12dc:	80 91 5e 3a 	lds	r24, 0x3A5E	; 0x803a5e <gameState+0x12>
    12e0:	90 91 5f 3a 	lds	r25, 0x3A5F	; 0x803a5f <gameState+0x13>
    12e4:	98 27       	eor	r25, r24
    12e6:	89 27       	eor	r24, r25
    12e8:	98 27       	eor	r25, r24
    12ea:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    12ee:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <HotSummer>:
    12f8:	cf 93       	push	r28
    12fa:	86 e7       	ldi	r24, 0x76	; 118
    12fc:	89 df       	rcall	.-238    	; 0x1210 <CheckState>
    12fe:	c8 2f       	mov	r28, r24
    1300:	88 23       	and	r24, r24
    1302:	81 f0       	breq	.+32     	; 0x1324 <HotSummer+0x2c>
    1304:	e0 91 ab b6 	lds	r30, 0xB6AB	; 0x80b6ab <__bss_end+0x7ba6>
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	eb 54       	subi	r30, 0x4B	; 75
    130c:	f5 4c       	sbci	r31, 0xC5	; 197
    130e:	10 82       	st	Z, r1
    1310:	e0 91 aa b6 	lds	r30, 0xB6AA	; 0x80b6aa <__bss_end+0x7ba5>
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    131a:	eb 54       	subi	r30, 0x4B	; 75
    131c:	f5 4c       	sbci	r31, 0xC5	; 197
    131e:	80 83       	st	Z, r24
    1320:	c1 e0       	ldi	r28, 0x01	; 1
    1322:	4c c0       	rjmp	.+152    	; 0x13bc <HotSummer+0xc4>
    1324:	85 e7       	ldi	r24, 0x75	; 117
    1326:	74 df       	rcall	.-280    	; 0x1210 <CheckState>
    1328:	88 23       	and	r24, r24
    132a:	59 f1       	breq	.+86     	; 0x1382 <HotSummer+0x8a>
    132c:	e0 91 ab b6 	lds	r30, 0xB6AB	; 0x80b6ab <__bss_end+0x7ba6>
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    1336:	eb 54       	subi	r30, 0x4B	; 75
    1338:	f5 4c       	sbci	r31, 0xC5	; 197
    133a:	80 83       	st	Z, r24
    133c:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <cooledDown.3938>
    1340:	88 23       	and	r24, r24
    1342:	79 f0       	breq	.+30     	; 0x1362 <HotSummer+0x6a>
    1344:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <calTemp>
    1348:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <calTemp+0x1>
    134c:	20 91 e0 3a 	lds	r18, 0x3AE0	; 0x803ae0 <adcTemp>
    1350:	30 91 e1 3a 	lds	r19, 0x3AE1	; 0x803ae1 <adcTemp+0x1>
    1354:	08 96       	adiw	r24, 0x08	; 8
    1356:	28 17       	cp	r18, r24
    1358:	39 07       	cpc	r19, r25
    135a:	18 f0       	brcs	.+6      	; 0x1362 <HotSummer+0x6a>
    135c:	86 e7       	ldi	r24, 0x76	; 118
    135e:	4e df       	rcall	.-356    	; 0x11fc <UpdateState>
    1360:	2d c0       	rjmp	.+90     	; 0x13bc <HotSummer+0xc4>
    1362:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <calTemp>
    1366:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <calTemp+0x1>
    136a:	20 91 e0 3a 	lds	r18, 0x3AE0	; 0x803ae0 <adcTemp>
    136e:	30 91 e1 3a 	lds	r19, 0x3AE1	; 0x803ae1 <adcTemp+0x1>
    1372:	02 96       	adiw	r24, 0x02	; 2
    1374:	82 17       	cp	r24, r18
    1376:	93 07       	cpc	r25, r19
    1378:	08 f1       	brcs	.+66     	; 0x13bc <HotSummer+0xc4>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <cooledDown.3938>
    1380:	1d c0       	rjmp	.+58     	; 0x13bc <HotSummer+0xc4>
    1382:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <calTemp>
    1386:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <calTemp+0x1>
    138a:	89 2b       	or	r24, r25
    138c:	41 f4       	brne	.+16     	; 0x139e <HotSummer+0xa6>
    138e:	80 91 e0 3a 	lds	r24, 0x3AE0	; 0x803ae0 <adcTemp>
    1392:	90 91 e1 3a 	lds	r25, 0x3AE1	; 0x803ae1 <adcTemp+0x1>
    1396:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <calTemp>
    139a:	90 93 ac 3a 	sts	0x3AAC, r25	; 0x803aac <calTemp+0x1>
    139e:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <calTemp>
    13a2:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <calTemp+0x1>
    13a6:	20 91 e0 3a 	lds	r18, 0x3AE0	; 0x803ae0 <adcTemp>
    13aa:	30 91 e1 3a 	lds	r19, 0x3AE1	; 0x803ae1 <adcTemp+0x1>
    13ae:	08 96       	adiw	r24, 0x08	; 8
    13b0:	28 17       	cp	r18, r24
    13b2:	39 07       	cpc	r19, r25
    13b4:	18 f0       	brcs	.+6      	; 0x13bc <HotSummer+0xc4>
    13b6:	85 e7       	ldi	r24, 0x75	; 117
    13b8:	21 df       	rcall	.-446    	; 0x11fc <UpdateState>
    13ba:	c0 e0       	ldi	r28, 0x00	; 0
    13bc:	8c 2f       	mov	r24, r28
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <GenerateAudio>:


uint8_t GenerateAudio(){
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29

    if (auIn[AULEN>>1] < HPLVL) {
    13ca:	80 91 b1 3a 	lds	r24, 0x3AB1	; 0x803ab1 <auIn+0x4>
    13ce:	89 31       	cpi	r24, 0x19	; 25
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GenerateAudio+0x12>
    13d2:	cf c0       	rjmp	.+414    	; 0x1572 <GenerateAudio+0x1b0>

        detHdPh = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 aa 3a 	sts	0x3AAA, r24	; 0x803aaa <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    13da:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    13de:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    13e2:	88 27       	eor	r24, r24
    13e4:	89 2b       	or	r24, r25
    13e6:	09 f0       	breq	.+2      	; 0x13ea <GenerateAudio+0x28>
    13e8:	c6 c0       	rjmp	.+396    	; 0x1576 <GenerateAudio+0x1b4>

            //Silence
            if ((effect&0xE0)==0){
    13ea:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    13ee:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    13f2:	80 7e       	andi	r24, 0xE0	; 224
    13f4:	99 27       	eor	r25, r25
    13f6:	89 2b       	or	r24, r25
    13f8:	31 f4       	brne	.+12     	; 0x1406 <GenerateAudio+0x44>
                auRepAddr = &zero;
    13fa:	8b e2       	ldi	r24, 0x2B	; 43
    13fc:	98 e3       	ldi	r25, 0x38	; 56
    13fe:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1402:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    1406:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    140a:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    140e:	80 7e       	andi	r24, 0xE0	; 224
    1410:	99 27       	eor	r25, r25
    1412:	80 97       	sbiw	r24, 0x20	; 32
    1414:	09 f0       	breq	.+2      	; 0x1418 <GenerateAudio+0x56>
    1416:	59 c0       	rjmp	.+178    	; 0x14ca <GenerateAudio+0x108>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	52 e2       	ldi	r21, 0x22	; 34
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e2       	ldi	r23, 0x20	; 32
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	e7 dd       	rcall	.-1074   	; 0xff2 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	65 e0       	ldi	r22, 0x05	; 5
    142a:	80 e8       	ldi	r24, 0x80	; 128
    142c:	14 de       	rcall	.-984    	; 0x1056 <floatAround>
    142e:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <auBuffer.3948+0x2>

                if (buttonMark) {
    1432:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    1436:	88 23       	and	r24, r24
    1438:	09 f4       	brne	.+2      	; 0x143c <GenerateAudio+0x7a>
    143a:	47 c0       	rjmp	.+142    	; 0x14ca <GenerateAudio+0x108>
                    if (start == 0) {
    143c:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <start.3951>
    1440:	81 11       	cpse	r24, r1
    1442:	15 c0       	rjmp	.+42     	; 0x146e <GenerateAudio+0xac>
                        duration = 4;
    1444:	84 e0       	ldi	r24, 0x04	; 4
    1446:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <duration.3950>
                        loudness = 0xff;
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <loudness.3949>
                        TCB1_CCMP = 0x2000;
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e2       	ldi	r25, 0x20	; 32
    1454:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1458:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    145c:	8b e0       	ldi	r24, 0x0B	; 11
    145e:	98 e3       	ldi	r25, 0x38	; 56
    1460:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1464:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <start.3951>
                    }

                    if (loudness) {
    146e:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <loudness.3949>
    1472:	88 23       	and	r24, r24
    1474:	69 f0       	breq	.+26     	; 0x1490 <GenerateAudio+0xce>
                        auVolume = loudness;
    1476:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    147a:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <duration.3950>
    147e:	99 23       	and	r25, r25
    1480:	21 f0       	breq	.+8      	; 0x148a <GenerateAudio+0xc8>
    1482:	91 50       	subi	r25, 0x01	; 1
    1484:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <duration.3950>
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <GenerateAudio+0xce>
    148a:	86 95       	lsr	r24
    148c:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <loudness.3949>
                    } 

                    if (loudness == 0) {
    1490:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <loudness.3949>
    1494:	81 11       	cpse	r24, r1
    1496:	19 c0       	rjmp	.+50     	; 0x14ca <GenerateAudio+0x108>
                        effect &= 0x10;
    1498:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    149c:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    14a0:	80 71       	andi	r24, 0x10	; 16
    14a2:	99 27       	eor	r25, r25
    14a4:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    14a8:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                        auRepAddr = &zero;
    14ac:	8b e2       	ldi	r24, 0x2B	; 43
    14ae:	98 e3       	ldi	r25, 0x38	; 56
    14b0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    14b4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    14b8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    14bc:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <auVolume>
                        start = 0;
    14c6:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <start.3951>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    14ca:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14ce:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    14d2:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14d6:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    14da:	80 7e       	andi	r24, 0xE0	; 224
    14dc:	99 27       	eor	r25, r25
    14de:	80 36       	cpi	r24, 0x60	; 96
    14e0:	91 05       	cpc	r25, r1
    14e2:	d1 f5       	brne	.+116    	; 0x1558 <GenerateAudio+0x196>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    14e4:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <auBuffer.3952+0x6>
                auRepAddr = &auBuffer[0];
    14e8:	8d e3       	ldi	r24, 0x3D	; 61
    14ea:	98 e3       	ldi	r25, 0x38	; 56
    14ec:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    14f0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    14f4:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    14f6:	c1 e0       	ldi	r28, 0x01	; 1
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    14f8:	d3 e0       	ldi	r29, 0x03	; 3
    14fa:	8c 2f       	mov	r24, r28
    14fc:	6d 2f       	mov	r22, r29
    14fe:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__udivmodqi4>
    1502:	99 23       	and	r25, r25
    1504:	39 f0       	breq	.+14     	; 0x1514 <GenerateAudio+0x152>
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	65 e0       	ldi	r22, 0x05	; 5
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	a3 dd       	rcall	.-1210   	; 0x1056 <floatAround>
    1510:	f8 01       	movw	r30, r16
    1512:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1514:	cf 5f       	subi	r28, 0xFF	; 255
    1516:	0f 5f       	subi	r16, 0xFF	; 255
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	c6 30       	cpi	r28, 0x06	; 6
    151c:	71 f7       	brne	.-36     	; 0x14fa <GenerateAudio+0x138>
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    151e:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    1522:	88 23       	and	r24, r24
    1524:	c9 f0       	breq	.+50     	; 0x1558 <GenerateAudio+0x196>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	54 e0       	ldi	r21, 0x04	; 4
    152a:	60 e8       	ldi	r22, 0x80	; 128
    152c:	72 e0       	ldi	r23, 0x02	; 2
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	60 dd       	rcall	.-1344   	; 0xff2 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1532:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <auVolume>
    1536:	20 ea       	ldi	r18, 0xA0	; 160
    1538:	40 e1       	ldi	r20, 0x10	; 16
    153a:	62 e0       	ldi	r22, 0x02	; 2
    153c:	8c dd       	rcall	.-1256   	; 0x1056 <floatAround>
    153e:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1542:	20 e9       	ldi	r18, 0x90	; 144
    1544:	40 e7       	ldi	r20, 0x70	; 112
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <auBuffer.3952>
    154c:	84 dd       	rcall	.-1272   	; 0x1056 <floatAround>
    154e:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <auBuffer.3952>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1552:	80 95       	com	r24
    1554:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <auBuffer.3952+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1558:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    155c:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1560:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1564:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1568:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    156c:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <GenerateAudio+0x1b4>
            //
            else {
            }
        }
    } else {
        detHdPh = 0;
    1572:	10 92 aa 3a 	sts	0x3AAA, r1	; 0x803aaa <detHdPh>
    }
    return buttonMark;
    1576:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <setupSimon>:
        simonState[i] = (lfsr() % 4);
    }
    simonGameState = BASTET_GAME_START;
}

void simonTone(uint8_t val) {
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cb e4       	ldi	r28, 0x4B	; 75
    158a:	d8 e3       	ldi	r29, 0x38	; 56
    158c:	13 dd       	rcall	.-1498   	; 0xfb4 <lfsr>
    158e:	83 70       	andi	r24, 0x03	; 3
    1590:	89 93       	st	Y+, r24
    1592:	88 e3       	ldi	r24, 0x38	; 56
    1594:	cb 35       	cpi	r28, 0x5B	; 91
    1596:	d8 07       	cpc	r29, r24
    1598:	c9 f7       	brne	.-14     	; 0x158c <setupSimon+0x8>
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <simonGameState>
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <simonLed>:
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec ea       	ldi	r30, 0xAC	; 172
    15ac:	f6 eb       	ldi	r31, 0xB6	; 182
    15ae:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    15b0:	a5 81       	ldd	r26, Z+5	; 0x05
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ab 54       	subi	r26, 0x4B	; 75
    15b6:	b5 4c       	sbci	r27, 0xC5	; 197
    15b8:	1c 92       	st	X, r1
    15ba:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    15bc:	a8 81       	ld	r26, Y
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ab 54       	subi	r26, 0x4B	; 75
    15c2:	b5 4c       	sbci	r27, 0xC5	; 197
    15c4:	1c 92       	st	X, r1
void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    15c6:	96 eb       	ldi	r25, 0xB6	; 182
    15c8:	e1 3b       	cpi	r30, 0xB1	; 177
    15ca:	f9 07       	cpc	r31, r25
    15cc:	81 f7       	brne	.-32     	; 0x15ae <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 1) {
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	59 f4       	brne	.+22     	; 0x15e8 <simonLed+0x42>
        iLED[WING[L][0]] = dimValue;
    15d2:	e0 91 b1 b6 	lds	r30, 0xB6B1	; 0x80b6b1 <__bss_end+0x7bac>
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    15dc:	eb 54       	subi	r30, 0x4B	; 75
    15de:	f5 4c       	sbci	r31, 0xC5	; 197
    15e0:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    15e2:	e0 91 b2 b6 	lds	r30, 0xB6B2	; 0x80b6b2 <__bss_end+0x7bad>
    15e6:	26 c0       	rjmp	.+76     	; 0x1634 <simonLed+0x8e>
    } else if (val == 2) {
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	59 f4       	brne	.+22     	; 0x1602 <simonLed+0x5c>
        iLED[WING[L][3]] = dimValue;
    15ec:	e0 91 b4 b6 	lds	r30, 0xB6B4	; 0x80b6b4 <__bss_end+0x7baf>
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    15f6:	eb 54       	subi	r30, 0x4B	; 75
    15f8:	f5 4c       	sbci	r31, 0xC5	; 197
    15fa:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    15fc:	e0 91 b5 b6 	lds	r30, 0xB6B5	; 0x80b6b5 <__bss_end+0x7bb0>
    1600:	19 c0       	rjmp	.+50     	; 0x1634 <simonLed+0x8e>
    } else if (val == 3) {
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	59 f4       	brne	.+22     	; 0x161c <simonLed+0x76>
        iLED[WING[R][0]] = dimValue;
    1606:	e0 91 ac b6 	lds	r30, 0xB6AC	; 0x80b6ac <__bss_end+0x7ba7>
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    1610:	eb 54       	subi	r30, 0x4B	; 75
    1612:	f5 4c       	sbci	r31, 0xC5	; 197
    1614:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1616:	e0 91 ad b6 	lds	r30, 0xB6AD	; 0x80b6ad <__bss_end+0x7ba8>
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <simonLed+0x8e>
    } else if (val == 4) {
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	81 f4       	brne	.+32     	; 0x1640 <simonLed+0x9a>
        iLED[WING[R][3]] = dimValue;
    1620:	e0 91 af b6 	lds	r30, 0xB6AF	; 0x80b6af <__bss_end+0x7baa>
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    162a:	eb 54       	subi	r30, 0x4B	; 75
    162c:	f5 4c       	sbci	r31, 0xC5	; 197
    162e:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1630:	e0 91 b0 b6 	lds	r30, 0xB6B0	; 0x80b6b0 <__bss_end+0x7bab>
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    163a:	eb 54       	subi	r30, 0x4B	; 75
    163c:	f5 4c       	sbci	r31, 0xC5	; 197
    163e:	80 83       	st	Z, r24
    }
    simonTone(val);
}
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <BastetDictates>:

// Main game loop
uint8_t BastetDictates() {
    1646:	cf 93       	push	r28
    if (CheckState(BASTET_COMPLETED))
    1648:	8a e7       	ldi	r24, 0x7A	; 122
    164a:	e2 dd       	rcall	.-1084   	; 0x1210 <CheckState>
    164c:	81 11       	cpse	r24, r1
    164e:	5c c0       	rjmp	.+184    	; 0x1708 <BastetDictates+0xc2>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1650:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
    1654:	8d 7f       	andi	r24, 0xFD	; 253
    1656:	09 f0       	breq	.+2      	; 0x165a <BastetDictates+0x14>
    1658:	57 c0       	rjmp	.+174    	; 0x1708 <BastetDictates+0xc2>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    165a:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <simonGameState>
    165e:	81 11       	cpse	r24, r1
        setupSimon();
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <BastetDictates+0x1e>
    1662:	90 df       	rcall	.-224    	; 0x1584 <setupSimon>
    }

    if (BASTET_GAME_START == simonGameState) {
    1664:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <simonGameState>
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	29 f4       	brne	.+10     	; 0x1676 <BastetDictates+0x30>
        // TODO start animu
        simonGameState = BASTET_GAME_SHOW_PATTERN;
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <simonGameState>
        simonTimer = 0;
    1672:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <simonTimer>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1676:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <simonGameState>
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	a1 f4       	brne	.+40     	; 0x16a6 <BastetDictates+0x60>
        // assuming 15Hz
        uint8_t pos = simonTimer / 15;
    167e:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <simonTimer>
    1682:	6f e0       	ldi	r22, 0x0F	; 15
    1684:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__udivmodqi4>
        if (pos > simonPos) {
    1688:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <simonPos>
    168c:	98 17       	cp	r25, r24
    168e:	20 f4       	brcc	.+8      	; 0x1698 <BastetDictates+0x52>
            simonGameState = BASTET_GAME_INPUT;
    1690:	85 e0       	ldi	r24, 0x05	; 5
    1692:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <simonGameState>
            return 0;
    1696:	38 c0       	rjmp	.+112    	; 0x1708 <BastetDictates+0xc2>
        }
        simonLed(simonState[pos]+1);
    1698:	e8 2f       	mov	r30, r24
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	e5 5b       	subi	r30, 0xB5	; 181
    169e:	f7 4c       	sbci	r31, 0xC7	; 199
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	80 df       	rcall	.-256    	; 0x15a6 <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    16a6:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <simonGameState>
    16aa:	85 30       	cpi	r24, 0x05	; 5
    16ac:	41 f5       	brne	.+80     	; 0x16fe <BastetDictates+0xb8>
    16ae:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <buttonState>
    16b2:	e1 50       	subi	r30, 0x01	; 1
    16b4:	e8 30       	cpi	r30, 0x08	; 8
    16b6:	18 f5       	brcc	.+70     	; 0x16fe <BastetDictates+0xb8>
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	e8 52       	subi	r30, 0x28	; 40
    16bc:	f9 44       	sbci	r31, 0x49	; 73
    16be:	c0 81       	ld	r28, Z
                break;
            case 0b0001: // bottom right
                choice = 4;
                break;
        }
        if (choice > 0) {
    16c0:	cc 23       	and	r28, r28
            simonLed(choice);
    16c2:	e9 f0       	breq	.+58     	; 0x16fe <BastetDictates+0xb8>
    16c4:	8c 2f       	mov	r24, r28
    16c6:	6f df       	rcall	.-290    	; 0x15a6 <simonLed>
            if (simonState[simonInputPos]+1 == choice) {
    16c8:	40 91 4a 38 	lds	r20, 0x384A	; 0x80384a <simonInputPos>
    16cc:	e4 2f       	mov	r30, r20
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	e5 5b       	subi	r30, 0xB5	; 181
    16d2:	f7 4c       	sbci	r31, 0xC7	; 199
    16d4:	20 81       	ld	r18, Z
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	8c 2f       	mov	r24, r28
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	28 17       	cp	r18, r24
    16e2:	39 07       	cpc	r19, r25
    16e4:	21 f4       	brne	.+8      	; 0x16ee <BastetDictates+0xa8>
                // TODO win sound
                simonInputPos++;
    16e6:	4f 5f       	subi	r20, 0xFF	; 255
    16e8:	40 93 4a 38 	sts	0x384A, r20	; 0x80384a <simonInputPos>
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <BastetDictates+0xac>
            } else {
                // TODO fail sound
                simonInputPos = 0;
    16ee:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <simonInputPos>
            }
            if (simonInputPos == BASTET_LENGTH) {
    16f2:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <simonInputPos>
    16f6:	80 31       	cpi	r24, 0x10	; 16
                // TODO win animu
                UpdateState(BASTET_COMPLETED);
    16f8:	11 f4       	brne	.+4      	; 0x16fe <BastetDictates+0xb8>
    16fa:	8a e7       	ldi	r24, 0x7A	; 122
    16fc:	7f dd       	rcall	.-1282   	; 0x11fc <UpdateState>
            }
        }
    }
    ++simonTimer;
    16fe:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <simonTimer>
    1702:	8f 5f       	subi	r24, 0xFF	; 255
    1704:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <simonTimer>
    return 0;
}
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	62 97       	sbiw	r28, 0x12	; 18
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	8a 8b       	std	Y+18, r24	; 0x12
    1720:	80 e1       	ldi	r24, 0x10	; 16
    1722:	e0 e8       	ldi	r30, 0x80	; 128
    1724:	f6 eb       	ldi	r31, 0xB6	; 182
    1726:	de 01       	movw	r26, r28
    1728:	11 96       	adiw	r26, 0x01	; 1
    172a:	01 90       	ld	r0, Z+
    172c:	0d 92       	st	X+, r0
    172e:	8a 95       	dec	r24
    1730:	e1 f7       	brne	.-8      	; 0x172a <Cheat+0x1c>
    1732:	fe 01       	movw	r30, r28
    1734:	31 96       	adiw	r30, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	21 91       	ld	r18, Z+
    173c:	31 91       	ld	r19, Z+
    173e:	26 17       	cp	r18, r22
    1740:	37 07       	cpc	r19, r23
    1742:	09 f4       	brne	.+2      	; 0x1746 <Cheat+0x38>
    1744:	89 2f       	mov	r24, r25
    1746:	9f 5f       	subi	r25, 0xFF	; 255
    1748:	98 30       	cpi	r25, 0x08	; 8
    174a:	b9 f7       	brne	.-18     	; 0x173a <Cheat+0x2c>
    174c:	88 30       	cpi	r24, 0x08	; 8
    174e:	10 f0       	brcs	.+4      	; 0x1754 <Cheat+0x46>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	12 c0       	rjmp	.+36     	; 0x1778 <Cheat+0x6a>
    1754:	18 e1       	ldi	r17, 0x18	; 24
    1756:	18 0f       	add	r17, r24
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	be 01       	movw	r22, r28
    175c:	6f 5e       	subi	r22, 0xEF	; 239
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	81 2f       	mov	r24, r17
    1762:	54 db       	rcall	.-2392   	; 0xe0c <EERead>
    1764:	89 89       	ldd	r24, Y+17	; 0x11
    1766:	8f 3f       	cpi	r24, 0xFF	; 255
    1768:	99 f7       	brne	.-26     	; 0x1750 <Cheat+0x42>
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	be 01       	movw	r22, r28
    176e:	6e 5e       	subi	r22, 0xEE	; 238
    1770:	7f 4f       	sbci	r23, 0xFF	; 255
    1772:	81 2f       	mov	r24, r17
    1774:	5b db       	rcall	.-2378   	; 0xe2c <EEWrite>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	62 96       	adiw	r28, 0x12	; 18
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	08 95       	ret

00001786 <DecryptData>:
    1786:	f9 01       	movw	r30, r18
    1788:	9c 01       	movw	r18, r24
    178a:	2e 1b       	sub	r18, r30
    178c:	3f 0b       	sbc	r19, r31
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	48 9f       	mul	r20, r24
    1792:	a0 01       	movw	r20, r0
    1794:	11 24       	eor	r1, r1
    1796:	4e 5a       	subi	r20, 0xAE	; 174
    1798:	58 44       	sbci	r21, 0x48	; 72
    179a:	66 23       	and	r22, r22
    179c:	69 f0       	breq	.+26     	; 0x17b8 <DecryptData+0x32>
    179e:	df 01       	movw	r26, r30
    17a0:	a2 0f       	add	r26, r18
    17a2:	b3 1f       	adc	r27, r19
    17a4:	a7 70       	andi	r26, 0x07	; 7
    17a6:	bb 27       	eor	r27, r27
    17a8:	a4 0f       	add	r26, r20
    17aa:	b5 1f       	adc	r27, r21
    17ac:	80 81       	ld	r24, Z
    17ae:	9c 91       	ld	r25, X
    17b0:	98 27       	eor	r25, r24
    17b2:	91 93       	st	Z+, r25
    17b4:	61 50       	subi	r22, 0x01	; 1
    17b6:	f1 cf       	rjmp	.-30     	; 0x179a <DecryptData+0x14>
    17b8:	08 95       	ret

000017ba <UnflipData>:
    17ba:	26 2f       	mov	r18, r22
    17bc:	fb 01       	movw	r30, r22
    17be:	35 e5       	ldi	r19, 0x55	; 85
    17c0:	9e 2f       	mov	r25, r30
    17c2:	92 1b       	sub	r25, r18
    17c4:	98 17       	cp	r25, r24
    17c6:	28 f4       	brcc	.+10     	; 0x17d2 <UnflipData+0x18>
    17c8:	90 81       	ld	r25, Z
    17ca:	92 95       	swap	r25
    17cc:	93 27       	eor	r25, r19
    17ce:	91 93       	st	Z+, r25
    17d0:	f7 cf       	rjmp	.-18     	; 0x17c0 <UnflipData+0x6>
    17d2:	08 95       	ret

000017d4 <ExtEERead>:
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <ExtEERead+0x16>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	d6 2e       	mov	r13, r22
    17f0:	c4 2e       	mov	r12, r20
    17f2:	59 01       	movw	r10, r18
    17f4:	7c 01       	movw	r14, r24
    17f6:	e8 94       	clt
    17f8:	f7 f8       	bld	r15, 7
    17fa:	f9 82       	std	Y+1, r15	; 0x01
    17fc:	ea 82       	std	Y+2, r14	; 0x02
    17fe:	06 2f       	mov	r16, r22
    1800:	42 e0       	ldi	r20, 0x02	; 2
    1802:	be 01       	movw	r22, r28
    1804:	6f 5f       	subi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	80 e5       	ldi	r24, 0x50	; 80
    180a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <I2C_read_bytes>
    180e:	18 2f       	mov	r17, r24
    1810:	81 11       	cpse	r24, r1
    1812:	05 c0       	rjmp	.+10     	; 0x181e <ExtEERead+0x4a>
    1814:	95 01       	movw	r18, r10
    1816:	4c 2d       	mov	r20, r12
    1818:	6d 2d       	mov	r22, r13
    181a:	c7 01       	movw	r24, r14
    181c:	b4 df       	rcall	.-152    	; 0x1786 <DecryptData>
    181e:	81 2f       	mov	r24, r17
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	08 95       	ret

0000183a <ClearTxAfter>:
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	30 f4       	brcc	.+12     	; 0x184c <ClearTxAfter+0x12>
    1840:	e8 2f       	mov	r30, r24
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	ed 5c       	subi	r30, 0xCD	; 205
    1846:	f5 4c       	sbci	r31, 0xC5	; 197
    1848:	10 82       	st	Z, r1
    184a:	f7 cf       	rjmp	.-18     	; 0x183a <ClearTxAfter>
    184c:	08 95       	ret

0000184e <StartsWith>:
    184e:	ac 01       	movw	r20, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	e9 2f       	mov	r30, r25
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	da 01       	movw	r26, r20
    1858:	ae 0f       	add	r26, r30
    185a:	bf 1f       	adc	r27, r31
    185c:	3c 91       	ld	r19, X
    185e:	e6 0f       	add	r30, r22
    1860:	f7 1f       	adc	r31, r23
    1862:	31 11       	cpse	r19, r1
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <StartsWith+0x22>
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 81       	ld	r25, Z
    186a:	99 23       	and	r25, r25
    186c:	49 f0       	breq	.+18     	; 0x1880 <StartsWith+0x32>
    186e:	07 c0       	rjmp	.+14     	; 0x187e <StartsWith+0x30>
    1870:	20 81       	ld	r18, Z
    1872:	22 23       	and	r18, r18
    1874:	c1 f3       	breq	.-16     	; 0x1866 <StartsWith+0x18>
    1876:	32 13       	cpse	r19, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <StartsWith+0x30>
    187a:	9f 5f       	subi	r25, 0xFF	; 255
    187c:	ea cf       	rjmp	.-44     	; 0x1852 <StartsWith+0x4>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	08 95       	ret

00001882 <PrepareSending>:
    1882:	61 15       	cp	r22, r1
    1884:	71 05       	cpc	r23, r1
    1886:	51 f1       	breq	.+84     	; 0x18dc <PrepareSending+0x5a>
    1888:	eb e3       	ldi	r30, 0x3B	; 59
    188a:	fa e3       	ldi	r31, 0x3A	; 58
    188c:	a3 e3       	ldi	r26, 0x33	; 51
    188e:	ba e3       	ldi	r27, 0x3A	; 58
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	3f ef       	ldi	r19, 0xFF	; 255
    1894:	6f 3f       	cpi	r22, 0xFF	; 255
    1896:	71 05       	cpc	r23, r1
    1898:	69 f0       	breq	.+26     	; 0x18b4 <PrepareSending+0x32>
    189a:	60 f0       	brcs	.+24     	; 0x18b4 <PrepareSending+0x32>
    189c:	81 93       	st	Z+, r24
    189e:	91 93       	st	Z+, r25
    18a0:	3d 93       	st	X+, r19
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	9f 4f       	sbci	r25, 0xFF	; 255
    18a6:	6f 5f       	subi	r22, 0xFF	; 255
    18a8:	71 09       	sbc	r23, r1
    18aa:	2f 5f       	subi	r18, 0xFF	; 255
    18ac:	27 30       	cpi	r18, 0x07	; 7
    18ae:	91 f7       	brne	.-28     	; 0x1894 <PrepareSending+0x12>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	08 95       	ret
    18b4:	e2 2f       	mov	r30, r18
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	df 01       	movw	r26, r30
    18ba:	aa 0f       	add	r26, r26
    18bc:	bb 1f       	adc	r27, r27
    18be:	a5 5c       	subi	r26, 0xC5	; 197
    18c0:	b5 4c       	sbci	r27, 0xC5	; 197
    18c2:	8d 93       	st	X+, r24
    18c4:	9c 93       	st	X, r25
    18c6:	ed 5c       	subi	r30, 0xCD	; 205
    18c8:	f5 4c       	sbci	r31, 0xC5	; 197
    18ca:	cb 01       	movw	r24, r22
    18cc:	6f ef       	ldi	r22, 0xFF	; 255
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    18d4:	80 83       	st	Z, r24
    18d6:	40 93 31 3a 	sts	0x3A31, r20	; 0x803a31 <txTypeNow>
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <PrepareSending+0x64>
    18dc:	10 92 3b 3a 	sts	0x3A3B, r1	; 0x803a3b <txAddrList>
    18e0:	10 92 3c 3a 	sts	0x3A3C, r1	; 0x803a3c <txAddrList+0x1>
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	82 2f       	mov	r24, r18
    18e8:	a8 df       	rcall	.-176    	; 0x183a <ClearTxAfter>
    18ea:	10 92 32 3a 	sts	0x3A32, r1	; 0x803a32 <txAddrNow>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret

000018f2 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	f9 01       	movw	r30, r18
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ea 5f       	subi	r30, 0xFA	; 250
    1902:	f6 4c       	sbci	r31, 0xC6	; 198
    1904:	ab e5       	ldi	r26, 0x5B	; 91
    1906:	ba e7       	ldi	r27, 0x7A	; 122
    1908:	a0 83       	st	Z, r26
    190a:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    190c:	f9 01       	movw	r30, r18
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	ea 5b       	subi	r30, 0xBA	; 186
    1914:	f6 4c       	sbci	r31, 0xC6	; 198
    1916:	62 e0       	ldi	r22, 0x02	; 2
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	60 83       	st	Z, r22
    191c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    191e:	22 0f       	add	r18, r18
    1920:	33 1f       	adc	r19, r19
    1922:	f9 01       	movw	r30, r18
    1924:	ea 57       	subi	r30, 0x7A	; 122
    1926:	f6 4c       	sbci	r31, 0xC6	; 198
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	40 83       	st	Z, r20
    192e:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1930:	21 e0       	ldi	r18, 0x01	; 1
    1932:	28 0f       	add	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	f9 01       	movw	r30, r18
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ea 5f       	subi	r30, 0xFA	; 250
    193e:	f6 4c       	sbci	r31, 0xC6	; 198
    1940:	c4 e6       	ldi	r28, 0x64	; 100
    1942:	da e7       	ldi	r29, 0x7A	; 122
    1944:	c0 83       	st	Z, r28
    1946:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    1948:	f9 01       	movw	r30, r18
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	ea 5b       	subi	r30, 0xBA	; 186
    1950:	f6 4c       	sbci	r31, 0xC6	; 198
    1952:	ca e0       	ldi	r28, 0x0A	; 10
    1954:	d0 e0       	ldi	r29, 0x00	; 0
    1956:	c0 83       	st	Z, r28
    1958:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	f9 01       	movw	r30, r18
    1960:	ea 57       	subi	r30, 0x7A	; 122
    1962:	f6 4c       	sbci	r31, 0xC6	; 198
    1964:	40 83       	st	Z, r20
    1966:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1968:	e2 e0       	ldi	r30, 0x02	; 2
    196a:	e8 0f       	add	r30, r24
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	ee 0f       	add	r30, r30
    1970:	ff 1f       	adc	r31, r31
    1972:	ea 5f       	subi	r30, 0xFA	; 250
    1974:	f6 4c       	sbci	r31, 0xC6	; 198
    1976:	20 ef       	ldi	r18, 0xF0	; 240
    1978:	3f ef       	ldi	r19, 0xFF	; 255
    197a:	20 83       	st	Z, r18
    197c:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    197e:	23 e0       	ldi	r18, 0x03	; 3
    1980:	28 0f       	add	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	ee 0f       	add	r30, r30
    1988:	ff 1f       	adc	r31, r31
    198a:	ea 5f       	subi	r30, 0xFA	; 250
    198c:	f6 4c       	sbci	r31, 0xC6	; 198
    198e:	a0 83       	st	Z, r26
    1990:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1992:	f9 01       	movw	r30, r18
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	ea 5b       	subi	r30, 0xBA	; 186
    199a:	f6 4c       	sbci	r31, 0xC6	; 198
    199c:	60 83       	st	Z, r22
    199e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	f9 01       	movw	r30, r18
    19a6:	ea 57       	subi	r30, 0x7A	; 122
    19a8:	f6 4c       	sbci	r31, 0xC6	; 198
    19aa:	40 83       	st	Z, r20
    19ac:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    19ae:	24 e0       	ldi	r18, 0x04	; 4
    19b0:	28 0f       	add	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	ee 0f       	add	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	ea 5f       	subi	r30, 0xFA	; 250
    19bc:	f6 4c       	sbci	r31, 0xC6	; 198
    19be:	a7 e5       	ldi	r26, 0x57	; 87
    19c0:	ba e7       	ldi	r27, 0x7A	; 122
    19c2:	a0 83       	st	Z, r26
    19c4:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    19c6:	f9 01       	movw	r30, r18
    19c8:	ee 0f       	add	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	ea 5b       	subi	r30, 0xBA	; 186
    19ce:	f6 4c       	sbci	r31, 0xC6	; 198
    19d0:	60 83       	st	Z, r22
    19d2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	f9 01       	movw	r30, r18
    19da:	ea 57       	subi	r30, 0x7A	; 122
    19dc:	f6 4c       	sbci	r31, 0xC6	; 198
    19de:	40 83       	st	Z, r20
    19e0:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    19e2:	8b 5f       	subi	r24, 0xFB	; 251
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	2c 97       	sbiw	r28, 0x0c	; 12
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	7c 01       	movw	r14, r24
    1a08:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	6c e0       	ldi	r22, 0x0C	; 12
    1a14:	80 96       	adiw	r24, 0x20	; 32
    1a16:	de de       	rcall	.-580    	; 0x17d4 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	98 27       	eor	r25, r24
    1a1e:	89 27       	eor	r24, r25
    1a20:	98 27       	eor	r25, r24
    1a22:	80 96       	adiw	r24, 0x20	; 32
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	98 27       	eor	r25, r24
    1a30:	89 27       	eor	r24, r25
    1a32:	98 27       	eor	r25, r24
    1a34:	80 96       	adiw	r24, 0x20	; 32
    1a36:	82 83       	std	Z+2, r24	; 0x02
    1a38:	93 83       	std	Z+3, r25	; 0x03
    1a3a:	de 01       	movw	r26, r28
    1a3c:	15 96       	adiw	r26, 0x05	; 5
    1a3e:	34 96       	adiw	r30, 0x04	; 4
    1a40:	c8 01       	movw	r24, r16
    1a42:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1a44:	2d 91       	ld	r18, X+
    1a46:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    1a48:	e8 17       	cp	r30, r24
    1a4a:	f9 07       	cpc	r31, r25
    1a4c:	d9 f7       	brne	.-10     	; 0x1a44 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1a4e:	fc e2       	ldi	r31, 0x2C	; 44
    1a50:	ef 0e       	add	r14, r31
    1a52:	f1 1c       	adc	r15, r1
    1a54:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1a56:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    1a58:	9e 01       	movw	r18, r28
    1a5a:	2f 5f       	subi	r18, 0xFF	; 255
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	63 e0       	ldi	r22, 0x03	; 3
    1a62:	c7 01       	movw	r24, r14
    1a64:	b7 de       	rcall	.-658    	; 0x17d4 <ExtEERead>
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	98 27       	eor	r25, r24
    1a6c:	89 27       	eor	r24, r25
    1a6e:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1a70:	97 01       	movw	r18, r14
    1a72:	2e 5f       	subi	r18, 0xFE	; 254
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1a76:	43 e0       	ldi	r20, 0x03	; 3
    1a78:	4d 15       	cp	r20, r13
    1a7a:	80 f4       	brcc	.+32     	; 0x1a9c <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	41 50       	subi	r20, 0x01	; 1
    1a80:	51 09       	sbc	r21, r1
    1a82:	f8 01       	movw	r30, r16
    1a84:	42 8f       	std	Z+26, r20	; 0x1a
    1a86:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1a88:	f3 e0       	ldi	r31, 0x03	; 3
    1a8a:	ef 0e       	add	r14, r31
    1a8c:	f1 1c       	adc	r15, r1
    1a8e:	f8 01       	movw	r30, r16
    1a90:	e4 86       	std	Z+12, r14	; 0x0c
    1a92:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1a94:	4b 81       	ldd	r20, Y+3	; 0x03
    1a96:	f5 01       	movw	r30, r10
    1a98:	44 a3       	std	Z+36, r20	; 0x24
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	82 8f       	std	Z+26, r24	; 0x1a
    1aa0:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1aa2:	24 87       	std	Z+12, r18	; 0x0c
    1aa4:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1aa6:	7c 01       	movw	r14, r24
    1aa8:	e2 0e       	add	r14, r18
    1aaa:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1aac:	d3 94       	inc	r13
    1aae:	0e 5f       	subi	r16, 0xFE	; 254
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	ff ef       	ldi	r31, 0xFF	; 255
    1ab4:	af 1a       	sub	r10, r31
    1ab6:	bf 0a       	sbc	r11, r31
    1ab8:	47 e0       	ldi	r20, 0x07	; 7
    1aba:	d4 12       	cpse	r13, r20
    1abc:	cd cf       	rjmp	.-102    	; 0x1a58 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1abe:	2c 96       	adiw	r28, 0x0c	; 12
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	bf 90       	pop	r11
    1ad4:	af 90       	pop	r10
    1ad6:	08 95       	ret

00001ad8 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	a0 97       	sbiw	r28, 0x20	; 32
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1af4:	7c 01       	movw	r14, r24
    1af6:	20 e2       	ldi	r18, 0x20	; 32
    1af8:	e2 0e       	add	r14, r18
    1afa:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1afc:	9e 01       	movw	r18, r28
    1afe:	2f 5f       	subi	r18, 0xFF	; 255
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	8c 96       	adiw	r24, 0x2c	; 44
    1b08:	65 de       	rcall	.-822    	; 0x17d4 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    1b0a:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    1b0c:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1b0e:	11 23       	and	r17, r17
    1b10:	51 f1       	breq	.+84     	; 0x1b66 <CheckLetter+0x8e>
    1b12:	01 2f       	mov	r16, r17
    1b14:	11 32       	cpi	r17, 0x21	; 33
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <CheckLetter+0x42>
    1b18:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    1b1a:	9e 01       	movw	r18, r28
    1b1c:	2f 5f       	subi	r18, 0xFF	; 255
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	60 2f       	mov	r22, r16
    1b24:	c7 01       	movw	r24, r14
    1b26:	0e 96       	adiw	r24, 0x0e	; 14
    1b28:	55 de       	rcall	.-854    	; 0x17d4 <ExtEERead>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1b30:	dd 20       	and	r13, r13
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1b34:	e1 e0       	ldi	r30, 0x01	; 1
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	ec 0f       	add	r30, r28
    1b3a:	fd 1f       	adc	r31, r29
    1b3c:	e8 0f       	add	r30, r24
    1b3e:	f1 1d       	adc	r31, r1
    1b40:	90 81       	ld	r25, Z
    1b42:	90 62       	ori	r25, 0x20	; 32
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	9c 11       	cpse	r25, r12
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <CheckLetter+0x8e>
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    1b4c:	91 91       	ld	r25, Z+
    1b4e:	dd 24       	eor	r13, r13
    1b50:	d3 94       	inc	r13
    1b52:	9b 35       	cpi	r25, 0x5B	; 91
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <CheckLetter+0x80>
    1b56:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	80 17       	cp	r24, r16
    1b5c:	48 f3       	brcs	.-46     	; 0x1b30 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1b5e:	e0 0e       	add	r14, r16
    1b60:	f1 1c       	adc	r15, r1
        x -= max;
    1b62:	10 1b       	sub	r17, r16
    1b64:	d4 cf       	rjmp	.-88     	; 0x1b0e <CheckLetter+0x36>
    }
    return 0;
    1b66:	80 e0       	ldi	r24, 0x00	; 0
}
    1b68:	a0 96       	adiw	r28, 0x20	; 32
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	08 95       	ret

00001b80 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <FindChild+0x14>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <FindChild+0x16>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	d6 2e       	mov	r13, r22
    1b9c:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1b9e:	9e 01       	movw	r18, r28
    1ba0:	2f 5f       	subi	r18, 0xFF	; 255
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	64 e0       	ldi	r22, 0x04	; 4
    1ba8:	80 96       	adiw	r24, 0x20	; 32
    1baa:	14 de       	rcall	.-984    	; 0x17d4 <ExtEERead>
    1bac:	e9 80       	ldd	r14, Y+1	; 0x01
    1bae:	fa 80       	ldd	r15, Y+2	; 0x02
    1bb0:	fe 24       	eor	r15, r14
    1bb2:	ef 24       	eor	r14, r15
    1bb4:	fe 24       	eor	r15, r14
    1bb6:	0b 81       	ldd	r16, Y+3	; 0x03
    1bb8:	1c 81       	ldd	r17, Y+4	; 0x04
    1bba:	10 27       	eor	r17, r16
    1bbc:	01 27       	eor	r16, r17
    1bbe:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    1bc0:	0e 15       	cp	r16, r14
    1bc2:	1f 05       	cpc	r17, r15
    1bc4:	30 f5       	brcc	.+76     	; 0x1c12 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    1bc6:	a0 16       	cp	r10, r16
    1bc8:	b1 06       	cpc	r11, r17
    1bca:	58 f0       	brcs	.+22     	; 0x1be2 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1bcc:	9e 01       	movw	r18, r28
    1bce:	2f 5f       	subi	r18, 0xFF	; 255
    1bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	62 e0       	ldi	r22, 0x02	; 2
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	80 96       	adiw	r24, 0x20	; 32
    1bda:	fc dd       	rcall	.-1032   	; 0x17d4 <ExtEERead>
    1bdc:	09 81       	ldd	r16, Y+1	; 0x01
    1bde:	1a 81       	ldd	r17, Y+2	; 0x02
    1be0:	ec cf       	rjmp	.-40     	; 0x1bba <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    1be2:	9e 01       	movw	r18, r28
    1be4:	2f 5f       	subi	r18, 0xFF	; 255
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	c8 01       	movw	r24, r16
    1bee:	85 96       	adiw	r24, 0x25	; 37
    1bf0:	f1 dd       	rcall	.-1054   	; 0x17d4 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1bf8:	d1 10       	cpse	r13, r1
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <FindChild+0x98>
    1bfe:	08 db       	rcall	.-2544   	; 0x1210 <CheckState>
    1c00:	81 11       	cpse	r24, r1
    1c02:	fa cf       	rjmp	.-12     	; 0x1bf8 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1c04:	e3 cf       	rjmp	.-58     	; 0x1bcc <FindChild+0x4c>
    1c06:	6d 2d       	mov	r22, r13
    1c08:	c8 01       	movw	r24, r16
    1c0a:	66 df       	rcall	.-308    	; 0x1ad8 <CheckLetter>
    1c0c:	88 23       	and	r24, r24
    1c0e:	f1 f2       	breq	.-68     	; 0x1bcc <FindChild+0x4c>
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <FindChild+0x9a>
    1c18:	c8 01       	movw	r24, r16
}
    1c1a:	24 96       	adiw	r28, 0x04	; 4
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	08 95       	ret

00001c34 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1c34:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1c36:	9f e9       	ldi	r25, 0x9F	; 159
    1c38:	98 0f       	add	r25, r24
    1c3a:	9a 31       	cpi	r25, 0x1A	; 26
    1c3c:	38 f0       	brcs	.+14     	; 0x1c4c <InpOkChk+0x18>
    1c3e:	90 ed       	ldi	r25, 0xD0	; 208
    1c40:	98 0f       	add	r25, r24
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	9a 30       	cpi	r25, 0x0A	; 10
    1c46:	18 f0       	brcs	.+6      	; 0x1c4e <InpOkChk+0x1a>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	08 95       	ret
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1c4e:	08 95       	ret

00001c50 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1c5a:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    1c5c:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1c5e:	f8 01       	movw	r30, r16
    1c60:	ed 0f       	add	r30, r29
    1c62:	f1 1d       	adc	r31, r1
    1c64:	20 81       	ld	r18, Z
    1c66:	8c 2f       	mov	r24, r28
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	22 23       	and	r18, r18
    1c6c:	51 f0       	breq	.+20     	; 0x1c82 <CleanInput+0x32>
        data[cnt] = data[x];
    1c6e:	d8 01       	movw	r26, r16
    1c70:	a8 0f       	add	r26, r24
    1c72:	b9 1f       	adc	r27, r25
    1c74:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1c76:	80 81       	ld	r24, Z
    1c78:	dd df       	rcall	.-70     	; 0x1c34 <InpOkChk>
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1c7e:	df 5f       	subi	r29, 0xFF	; 255
    1c80:	ee cf       	rjmp	.-36     	; 0x1c5e <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1c82:	f8 01       	movw	r30, r16
    1c84:	e8 0f       	add	r30, r24
    1c86:	f9 1f       	adc	r31, r25
    1c88:	10 82       	st	Z, r1
    return cnt;
}
    1c8a:	8c 2f       	mov	r24, r28
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1c96:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    1c98:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1c9c:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1ca0:	89 2b       	or	r24, r25
    1ca2:	99 f4       	brne	.+38     	; 0x1cca <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    1ca4:	80 91 0a 3a 	lds	r24, 0x3A0A	; 0x803a0a <currObj+0x4>
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1cae:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
        auStart = ((effect&0xE0)>0);
    1cb2:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1cb6:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1cba:	80 7e       	andi	r24, 0xE0	; 224
    1cbc:	99 27       	eor	r25, r25
    1cbe:	21 e0       	ldi	r18, 0x01	; 1
    1cc0:	89 2b       	or	r24, r25
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <CheckSend+0x30>
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	20 93 2c 38 	sts	0x382C, r18	; 0x80382c <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    1cca:	20 91 32 3a 	lds	r18, 0x3A32	; 0x803a32 <txAddrNow>
    1cce:	28 30       	cpi	r18, 0x08	; 8
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <CheckSend+0x3e>
    1cd2:	47 c0       	rjmp	.+142    	; 0x1d62 <CheckSend+0xcc>
    1cd4:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    1cd8:	88 23       	and	r24, r24
    1cda:	09 f4       	brne	.+2      	; 0x1cde <CheckSend+0x48>
    1cdc:	42 c0       	rjmp	.+132    	; 0x1d62 <CheckSend+0xcc>
        if (txStrLen[txAddrNow] == 0){
    1cde:	82 2f       	mov	r24, r18
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	ed 5c       	subi	r30, 0xCD	; 205
    1ce6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ce8:	e0 81       	ld	r30, Z
    1cea:	e1 11       	cpse	r30, r1
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <CheckSend+0x64>
            txPart = 0;
    1cee:	10 92 f3 38 	sts	0x38F3, r1	; 0x8038f3 <txPart.3937>
            txAddrNow = TXLISTLEN;
    1cf2:	88 e0       	ldi	r24, 0x08	; 8
    1cf4:	80 93 32 3a 	sts	0x3A32, r24	; 0x803a32 <txAddrNow>
    1cf8:	2c c0       	rjmp	.+88     	; 0x1d52 <CheckSend+0xbc>
        } else if (txPart < txStrLen[txAddrNow]){
    1cfa:	50 91 f3 38 	lds	r21, 0x38F3	; 0x8038f3 <txPart.3937>
    1cfe:	5e 17       	cp	r21, r30
    1d00:	50 f5       	brcc	.+84     	; 0x1d56 <CheckSend+0xc0>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    1d02:	ce 2f       	mov	r28, r30
    1d04:	c5 1b       	sub	r28, r21
    1d06:	c1 32       	cpi	r28, 0x21	; 33
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <CheckSend+0x76>
    1d0a:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	fc 01       	movw	r30, r24
    1d12:	e5 5c       	subi	r30, 0xC5	; 197
    1d14:	f5 4c       	sbci	r31, 0xC5	; 197
    1d16:	80 81       	ld	r24, Z
    1d18:	91 81       	ldd	r25, Z+1	; 0x01
    1d1a:	24 ee       	ldi	r18, 0xE4	; 228
    1d1c:	3a e3       	ldi	r19, 0x3A	; 58
    1d1e:	40 91 31 3a 	lds	r20, 0x3A31	; 0x803a31 <txTypeNow>
    1d22:	6c 2f       	mov	r22, r28
    1d24:	85 0f       	add	r24, r21
    1d26:	91 1d       	adc	r25, r1
    1d28:	55 dd       	rcall	.-1366   	; 0x17d4 <ExtEERead>
            txPart += EEreadLength;
    1d2a:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <txPart.3937>
    1d2e:	8c 0f       	add	r24, r28
    1d30:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1d34:	ec 2f       	mov	r30, r28
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	ec 51       	subi	r30, 0x1C	; 28
    1d3a:	f5 4c       	sbci	r31, 0xC5	; 197
    1d3c:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    1d3e:	80 91 e4 3a 	lds	r24, 0x3AE4	; 0x803ae4 <txBuffer>
    1d42:	81 11       	cpse	r24, r1
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <CheckSend+0xb6>
    1d46:	8b ed       	ldi	r24, 0xDB	; 219
    1d48:	80 93 e4 3a 	sts	0x3AE4, r24	; 0x803ae4 <txBuffer>
            SerSend(&txBuffer[0]);
    1d4c:	84 ee       	ldi	r24, 0xE4	; 228
    1d4e:	9a e3       	ldi	r25, 0x3A	; 58
    1d50:	95 d8       	rcall	.-3798   	; 0xe7c <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0b c0       	rjmp	.+22     	; 0x1d6c <CheckSend+0xd6>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1d56:	10 92 f3 38 	sts	0x38F3, r1	; 0x8038f3 <txPart.3937>
            ++txAddrNow;
    1d5a:	2f 5f       	subi	r18, 0xFF	; 255
    1d5c:	20 93 32 3a 	sts	0x3A32, r18	; 0x803a32 <txAddrNow>
    1d60:	f8 cf       	rjmp	.-16     	; 0x1d52 <CheckSend+0xbc>
        }
    } else if (serTxDone) return 0; //All is sent!
    1d62:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <serTxDone>
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	91 11       	cpse	r25, r1
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1d74:	c0 91 05 39 	lds	r28, 0x3905	; 0x803905 <responseList>
    1d78:	cc 23       	and	r28, r28
    1d7a:	e9 f1       	breq	.+122    	; 0x1df6 <CheckResponse+0x86>
        --responseList;
    1d7c:	c1 50       	subi	r28, 0x01	; 1
    1d7e:	c0 93 05 39 	sts	0x3905, r28	; 0x803905 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1d82:	d0 91 f2 38 	lds	r29, 0x38F2	; 0x8038f2 <number.3941>
    1d86:	2d 2f       	mov	r18, r29
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	f9 01       	movw	r30, r18
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	ea 5f       	subi	r30, 0xFA	; 250
    1d92:	f6 4c       	sbci	r31, 0xC6	; 198
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	80 3f       	cpi	r24, 0xF0	; 240
    1d9a:	4f ef       	ldi	r20, 0xFF	; 255
    1d9c:	94 07       	cpc	r25, r20
    1d9e:	51 f4       	brne	.+20     	; 0x1db4 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    1da0:	60 91 20 3a 	lds	r22, 0x3A20	; 0x803a20 <currObj+0x1a>
    1da4:	70 91 21 3a 	lds	r23, 0x3A21	; 0x803a21 <currObj+0x1b>
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	80 91 12 3a 	lds	r24, 0x3A12	; 0x803a12 <currObj+0xc>
    1dae:	90 91 13 3a 	lds	r25, 0x3A13	; 0x803a13 <currObj+0xd>
    1db2:	0d c0       	rjmp	.+26     	; 0x1dce <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    1db4:	d9 01       	movw	r26, r18
    1db6:	aa 0f       	add	r26, r26
    1db8:	bb 1f       	adc	r27, r27
    1dba:	aa 57       	subi	r26, 0x7A	; 122
    1dbc:	b6 4c       	sbci	r27, 0xC6	; 198
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	ea 5b       	subi	r30, 0xBA	; 186
    1dc6:	f6 4c       	sbci	r31, 0xC6	; 198
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	4c 91       	ld	r20, X
    1dce:	59 dd       	rcall	.-1358   	; 0x1882 <PrepareSending>
        }
        ++number;
    1dd0:	df 5f       	subi	r29, 0xFF	; 255
    1dd2:	d0 93 f2 38 	sts	0x38F2, r29	; 0x8038f2 <number.3941>

        if (responseList == 0) {
    1dd6:	c1 11       	cpse	r28, r1
    1dd8:	0d c0       	rjmp	.+26     	; 0x1df4 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    1dda:	80 91 0a 3a 	lds	r24, 0x3A0A	; 0x803a0a <currObj+0x4>
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1de4:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
            RXCNT = 0;
    1de8:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    1dea:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
            number = 0;
    1dee:	10 92 f2 38 	sts	0x38F2, r1	; 0x8038f2 <number.3941>
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    1df4:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    1df6:	8c 2f       	mov	r24, r28
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    1dfe:	4f 92       	push	r4
    1e00:	5f 92       	push	r5
    1e02:	6f 92       	push	r6
    1e04:	7f 92       	push	r7
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	a1 97       	sbiw	r28, 0x21	; 33
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    1e2a:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <currDepth>
    1e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e30:	49 f4       	brne	.+18     	; 0x1e44 <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    1e32:	66 e0       	ldi	r22, 0x06	; 6
    1e34:	7a e3       	ldi	r23, 0x3A	; 58
    1e36:	80 91 c6 39 	lds	r24, 0x39C6	; 0x8039c6 <route>
    1e3a:	90 91 c7 39 	lds	r25, 0x39C7	; 0x8039c7 <route+0x1>
    1e3e:	d5 dd       	rcall	.-1110   	; 0x19ea <PopulateObject>
        currDepth = 0;
    1e40:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <currDepth>
    }

    if (serRxDone){
    1e44:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
    1e48:	88 23       	and	r24, r24
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <CheckInput+0x50>
    1e4c:	62 c2       	rjmp	.+1220   	; 0x2312 <CheckInput+0x514>

        //Special input requested from user by game
        if (specialInput[0]){
    1e4e:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <specialInput>
    1e52:	88 23       	and	r24, r24
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <CheckInput+0x5a>
    1e56:	57 c0       	rjmp	.+174    	; 0x1f06 <CheckInput+0x108>
            specialPassed = 0;
    1e58:	10 92 f4 38 	sts	0x38F4, r1	; 0x8038f4 <specialPassed>
            data[0] = 'a';
    1e5c:	81 e6       	ldi	r24, 0x61	; 97
    1e5e:	f8 01       	movw	r30, r16
    1e60:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    1e62:	65 ef       	ldi	r22, 0xF5	; 245
    1e64:	78 e3       	ldi	r23, 0x38	; 56
    1e66:	80 e6       	ldi	r24, 0x60	; 96
    1e68:	9a e3       	ldi	r25, 0x3A	; 58
    1e6a:	f1 dc       	rcall	.-1566   	; 0x184e <StartsWith>
    1e6c:	f8 2e       	mov	r15, r24
    1e6e:	88 23       	and	r24, r24
    1e70:	21 f0       	breq	.+8      	; 0x1e7a <CheckInput+0x7c>
                specialPassed = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <specialPassed>
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <CheckInput+0x84>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1e7a:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <specialInput>
    1e7e:	81 33       	cpi	r24, 0x31	; 49
    1e80:	11 f0       	breq	.+4      	; 0x1e86 <CheckInput+0x88>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1e82:	f1 2c       	mov	r15, r1
    1e84:	48 c2       	rjmp	.+1168   	; 0x2316 <CheckInput+0x518>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1e86:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <specialInput+0x2>
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	fa cf       	rjmp	.-12     	; 0x1e82 <CheckInput+0x84>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    1e8e:	80 e6       	ldi	r24, 0x60	; 96
    1e90:	9a e3       	ldi	r25, 0x3A	; 58
    1e92:	de de       	rcall	.-580    	; 0x1c50 <CleanInput>
                specialPassed = 2;
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <specialPassed>
                data[1] = 0;
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	80 f3       	brcs	.-32     	; 0x1e82 <CheckInput+0x84>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    1ea2:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
    1ea6:	81 33       	cpi	r24, 0x31	; 49
    1ea8:	61 f0       	breq	.+24     	; 0x1ec2 <CheckInput+0xc4>
    1eaa:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
    1eae:	82 33       	cpi	r24, 0x32	; 50
    1eb0:	41 f0       	breq	.+16     	; 0x1ec2 <CheckInput+0xc4>
    1eb2:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
    1eb6:	83 33       	cpi	r24, 0x33	; 51
    1eb8:	21 f0       	breq	.+8      	; 0x1ec2 <CheckInput+0xc4>
    1eba:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
    1ebe:	84 33       	cpi	r24, 0x34	; 52
    1ec0:	01 f7       	brne	.-64     	; 0x1e82 <CheckInput+0x84>
                        serRx[1] |= 0x20;
    1ec2:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <serRx+0x1>
    1ec6:	80 62       	ori	r24, 0x20	; 32
    1ec8:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    1ecc:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <serRx+0x1>
    1ed0:	81 36       	cpi	r24, 0x61	; 97
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <CheckInput+0xee>
    1ed4:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <serRx+0x1>
    1ed8:	85 36       	cpi	r24, 0x65	; 101
    1eda:	41 f0       	breq	.+16     	; 0x1eec <CheckInput+0xee>
    1edc:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <serRx+0x1>
    1ee0:	86 36       	cpi	r24, 0x66	; 102
    1ee2:	21 f0       	breq	.+8      	; 0x1eec <CheckInput+0xee>
    1ee4:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <serRx+0x1>
    1ee8:	87 37       	cpi	r24, 0x77	; 119
    1eea:	59 f6       	brne	.-106    	; 0x1e82 <CheckInput+0x84>
                            data[1] = specialInput[1]+0x11;
    1eec:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <specialInput+0x1>
    1ef0:	8f 5e       	subi	r24, 0xEF	; 239
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1ef6:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
    1efa:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1efc:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <serRx+0x1>
    1f00:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1f02:	14 82       	std	Z+4, r1	; 0x04
    1f04:	08 c2       	rjmp	.+1040   	; 0x2316 <CheckInput+0x518>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    1f06:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
    1f0a:	83 32       	cpi	r24, 0x23	; 35
    1f0c:	81 f5       	brne	.+96     	; 0x1f6e <CheckInput+0x170>
    1f0e:	8d b3       	in	r24, 0x1d	; 29
    1f10:	86 30       	cpi	r24, 0x06	; 6
    1f12:	69 f5       	brne	.+90     	; 0x1f6e <CheckInput+0x170>
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e0 5a       	subi	r30, 0xA0	; 160
    1f1e:	f5 4c       	sbci	r31, 0xC5	; 197
    1f20:	20 81       	ld	r18, Z
    1f22:	20 53       	subi	r18, 0x30	; 48
    1f24:	20 83       	st	Z, r18
                    bitNr *= 10;
    1f26:	11 0f       	add	r17, r17
    1f28:	21 2f       	mov	r18, r17
    1f2a:	22 0f       	add	r18, r18
    1f2c:	22 0f       	add	r18, r18
    1f2e:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    1f30:	20 91 61 3a 	lds	r18, 0x3A61	; 0x803a61 <serRx+0x1>
    1f34:	23 30       	cpi	r18, 0x03	; 3
    1f36:	48 f4       	brcc	.+18     	; 0x1f4a <CheckInput+0x14c>
                    if (serRx[x] < 10) {
    1f38:	20 81       	ld	r18, Z
    1f3a:	2a 30       	cpi	r18, 0x0A	; 10
    1f3c:	b0 f4       	brcc	.+44     	; 0x1f6a <CheckInput+0x16c>
                        bitNr += serRx[x];
    1f3e:	20 81       	ld	r18, Z
    1f40:	12 0f       	add	r17, r18
    1f42:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	91 05       	cpc	r25, r1
    1f48:	41 f7       	brne	.-48     	; 0x1f1a <CheckInput+0x11c>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    1f4a:	81 2f       	mov	r24, r17
    1f4c:	8f 77       	andi	r24, 0x7F	; 127
    1f4e:	69 f0       	breq	.+26     	; 0x1f6a <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    1f50:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x4>
    1f54:	60 91 65 3a 	lds	r22, 0x3A65	; 0x803a65 <serRx+0x5>
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	78 2b       	or	r23, r24
    1f5c:	81 2f       	mov	r24, r17
    1f5e:	80 95       	com	r24
    1f60:	d6 db       	rcall	.-2132   	; 0x170e <Cheat>
    1f62:	88 23       	and	r24, r24
    1f64:	11 f0       	breq	.+4      	; 0x1f6a <CheckInput+0x16c>
    1f66:	81 2f       	mov	r24, r17
    1f68:	49 d9       	rcall	.-3438   	; 0x11fc <UpdateState>
                }
                responseList = SetStandardResponse(0);
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	50 c0       	rjmp	.+160    	; 0x200e <CheckInput+0x210>
    1f6e:	d8 01       	movw	r26, r16
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    1f74:	fc 01       	movw	r30, r24
    1f76:	e0 5a       	subi	r30, 0xA0	; 160
    1f78:	f5 4c       	sbci	r31, 0xC5	; 197
    1f7a:	20 81       	ld	r18, Z
    1f7c:	21 34       	cpi	r18, 0x41	; 65
    1f7e:	18 f0       	brcs	.+6      	; 0x1f86 <CheckInput+0x188>
    1f80:	20 81       	ld	r18, Z
    1f82:	2b 35       	cpi	r18, 0x5B	; 91
    1f84:	10 f0       	brcs	.+4      	; 0x1f8a <CheckInput+0x18c>
    1f86:	20 81       	ld	r18, Z
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <CheckInput+0x190>
    1f8a:	20 81       	ld	r18, Z
    1f8c:	20 62       	ori	r18, 0x20	; 32
    1f8e:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1f90:	20 81       	ld	r18, Z
    1f92:	21 11       	cpse	r18, r1
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <CheckInput+0x1a2>
                    data[x] = 0;
    1f96:	f8 01       	movw	r30, r16
    1f98:	e8 0f       	add	r30, r24
    1f9a:	f1 1d       	adc	r31, r1
    1f9c:	10 82       	st	Z, r1
                    break;
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <CheckInput+0x1ac>
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    1fa4:	81 34       	cpi	r24, 0x41	; 65
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	29 f7       	brne	.-54     	; 0x1f74 <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1faa:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <serRx>
                data[0] = 0;
    1fae:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <CheckInput+0x1c0>
                data[0] = 0;
    1fb4:	10 82       	st	Z, r1
                RXCNT = 0;
    1fb6:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    1fb8:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
    1fbc:	aa c1       	rjmp	.+852    	; 0x2312 <CheckInput+0x514>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8f 33       	cpi	r24, 0x3F	; 63
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <CheckInput+0x1ca>
    1fc4:	88 36       	cpi	r24, 0x68	; 104
    1fc6:	39 f5       	brne	.+78     	; 0x2016 <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fc8:	8b e5       	ldi	r24, 0x5B	; 91
    1fca:	9a e7       	ldi	r25, 0x7A	; 122
    1fcc:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <reactStr>
    1fd0:	90 93 07 39 	sts	0x3907, r25	; 0x803907 <reactStr+0x1>
    reactStr[1][number]=length;
    1fd4:	84 e0       	ldi	r24, 0x04	; 4
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	80 93 46 39 	sts	0x3946, r24	; 0x803946 <reactStr+0x40>
    1fdc:	90 93 47 39 	sts	0x3947, r25	; 0x803947 <reactStr+0x41>
    reactStr[2][number]=type;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	80 93 86 39 	sts	0x3986, r24	; 0x803986 <reactStr+0x80>
    1fe8:	90 93 87 39 	sts	0x3987, r25	; 0x803987 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fec:	23 e9       	ldi	r18, 0x93	; 147
    1fee:	3b e7       	ldi	r19, 0x7B	; 123
    1ff0:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    1ff4:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    1ff8:	2d e6       	ldi	r18, 0x6D	; 109
    1ffa:	34 e0       	ldi	r19, 0x04	; 4
    1ffc:	20 93 48 39 	sts	0x3948, r18	; 0x803948 <reactStr+0x42>
    2000:	30 93 49 39 	sts	0x3949, r19	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2004:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    2008:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	71 dc       	rcall	.-1822   	; 0x18f2 <SetStandardResponse>
    2010:	80 93 05 39 	sts	0x3905, r24	; 0x803905 <responseList>
    2014:	7e c1       	rjmp	.+764    	; 0x2312 <CheckInput+0x514>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2016:	81 36       	cpi	r24, 0x61	; 97
    2018:	d9 f4       	brne	.+54     	; 0x2050 <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    201a:	8b e5       	ldi	r24, 0x5B	; 91
    201c:	9a e7       	ldi	r25, 0x7A	; 122
    201e:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <reactStr>
    2022:	90 93 07 39 	sts	0x3907, r25	; 0x803907 <reactStr+0x1>
    reactStr[1][number]=length;
    2026:	84 e0       	ldi	r24, 0x04	; 4
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	80 93 46 39 	sts	0x3946, r24	; 0x803946 <reactStr+0x40>
    202e:	90 93 47 39 	sts	0x3947, r25	; 0x803947 <reactStr+0x41>
    reactStr[2][number]=type;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	80 93 86 39 	sts	0x3986, r24	; 0x803986 <reactStr+0x80>
    203a:	90 93 87 39 	sts	0x3987, r25	; 0x803987 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    203e:	2e e6       	ldi	r18, 0x6E	; 110
    2040:	3a e7       	ldi	r19, 0x7A	; 122
    2042:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    2046:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    204a:	25 e2       	ldi	r18, 0x25	; 37
    204c:	31 e0       	ldi	r19, 0x01	; 1
    204e:	d6 cf       	rjmp	.-84     	; 0x1ffc <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2050:	87 37       	cpi	r24, 0x77	; 119
    2052:	09 f0       	breq	.+2      	; 0x2056 <CheckInput+0x258>
    2054:	6e c0       	rjmp	.+220    	; 0x2132 <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2056:	8b e5       	ldi	r24, 0x5B	; 91
    2058:	9a e7       	ldi	r25, 0x7A	; 122
    205a:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <reactStr>
    205e:	90 93 07 39 	sts	0x3907, r25	; 0x803907 <reactStr+0x1>
    reactStr[1][number]=length;
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	80 93 46 39 	sts	0x3946, r24	; 0x803946 <reactStr+0x40>
    206a:	90 93 47 39 	sts	0x3947, r25	; 0x803947 <reactStr+0x41>
    reactStr[2][number]=type;
    206e:	21 e0       	ldi	r18, 0x01	; 1
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	20 93 86 39 	sts	0x3986, r18	; 0x803986 <reactStr+0x80>
    2076:	30 93 87 39 	sts	0x3987, r19	; 0x803987 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    207a:	8b ec       	ldi	r24, 0xCB	; 203
    207c:	96 e7       	ldi	r25, 0x76	; 118
    207e:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2082:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2086:	82 e1       	ldi	r24, 0x12	; 18
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    208e:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2092:	20 93 88 39 	sts	0x3988, r18	; 0x803988 <reactStr+0x82>
    2096:	30 93 89 39 	sts	0x3989, r19	; 0x803989 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    209a:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <whoami>
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	19 f4       	brne	.+6      	; 0x20a8 <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20a2:	85 ec       	ldi	r24, 0xC5	; 197
    20a4:	96 e7       	ldi	r25, 0x76	; 118
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    20a8:	82 30       	cpi	r24, 0x02	; 2
    20aa:	49 f4       	brne	.+18     	; 0x20be <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20ac:	82 ec       	ldi	r24, 0xC2	; 194
    20ae:	96 e7       	ldi	r25, 0x76	; 118
    20b0:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    20b4:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	1e c0       	rjmp	.+60     	; 0x20fa <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	49 f4       	brne	.+18     	; 0x20d4 <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20c2:	8c eb       	ldi	r24, 0xBC	; 188
    20c4:	96 e7       	ldi	r25, 0x76	; 118
    20c6:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    20ca:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    20ce:	86 e0       	ldi	r24, 0x06	; 6
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	13 c0       	rjmp	.+38     	; 0x20fa <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    20d4:	84 30       	cpi	r24, 0x04	; 4
    20d6:	49 f4       	brne	.+18     	; 0x20ea <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20d8:	87 eb       	ldi	r24, 0xB7	; 183
    20da:	96 e7       	ldi	r25, 0x76	; 118
    20dc:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    20e0:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    20e4:	85 e0       	ldi	r24, 0x05	; 5
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	08 c0       	rjmp	.+16     	; 0x20fa <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20ea:	80 e4       	ldi	r24, 0x40	; 64
    20ec:	96 e7       	ldi	r25, 0x76	; 118
    20ee:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    20f2:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    20f6:	82 e4       	ldi	r24, 0x42	; 66
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x44>
    20fe:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x45>
    reactStr[2][number]=type;
    2102:	20 93 8a 39 	sts	0x398A, r18	; 0x80398a <reactStr+0x84>
    2106:	30 93 8b 39 	sts	0x398B, r19	; 0x80398b <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    210a:	8d e9       	ldi	r24, 0x9D	; 157
    210c:	96 e7       	ldi	r25, 0x76	; 118
    210e:	80 93 0c 39 	sts	0x390C, r24	; 0x80390c <reactStr+0x6>
    2112:	90 93 0d 39 	sts	0x390D, r25	; 0x80390d <reactStr+0x7>
    reactStr[1][number]=length;
    2116:	8a e1       	ldi	r24, 0x1A	; 26
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x46>
    211e:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x47>
    reactStr[2][number]=type;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x86>
    212a:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    212e:	84 e0       	ldi	r24, 0x04	; 4
    2130:	6e cf       	rjmp	.-292    	; 0x200e <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    2132:	81 37       	cpi	r24, 0x71	; 113
    2134:	d9 f4       	brne	.+54     	; 0x216c <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2136:	8b e5       	ldi	r24, 0x5B	; 91
    2138:	9a e7       	ldi	r25, 0x7A	; 122
    213a:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <reactStr>
    213e:	90 93 07 39 	sts	0x3907, r25	; 0x803907 <reactStr+0x1>
    reactStr[1][number]=length;
    2142:	84 e0       	ldi	r24, 0x04	; 4
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	80 93 46 39 	sts	0x3946, r24	; 0x803946 <reactStr+0x40>
    214a:	90 93 47 39 	sts	0x3947, r25	; 0x803947 <reactStr+0x41>
    reactStr[2][number]=type;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	80 93 86 39 	sts	0x3986, r24	; 0x803986 <reactStr+0x80>
    2156:	90 93 87 39 	sts	0x3987, r25	; 0x803987 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    215a:	23 e0       	ldi	r18, 0x03	; 3
    215c:	3a e7       	ldi	r19, 0x7A	; 122
    215e:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    2162:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2166:	24 e5       	ldi	r18, 0x54	; 84
    2168:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    216a:	48 cf       	rjmp	.-368    	; 0x1ffc <CheckInput+0x1fe>
    216c:	60 ee       	ldi	r22, 0xE0	; 224
    216e:	76 eb       	ldi	r23, 0xB6	; 182
    2170:	c8 01       	movw	r24, r16
    2172:	6d db       	rcall	.-2342   	; 0x184e <StartsWith>
    2174:	88 23       	and	r24, r24
    2176:	f1 f0       	breq	.+60     	; 0x21b4 <CheckInput+0x3b6>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2178:	1e e6       	ldi	r17, 0x6E	; 110
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	81 2f       	mov	r24, r17
    217e:	24 d8       	rcall	.-4024   	; 0x11c8 <WriteStatusBit>
    2180:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2182:	12 37       	cpi	r17, 0x72	; 114
    2184:	d1 f7       	brne	.-12     	; 0x217a <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    2186:	0e 94 5d 08 	call	0x10ba	; 0x10ba <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    218a:	80 e2       	ldi	r24, 0x20	; 32
    218c:	e3 e2       	ldi	r30, 0x23	; 35
    218e:	f7 eb       	ldi	r31, 0xB7	; 183
    2190:	de 01       	movw	r26, r28
    2192:	11 96       	adiw	r26, 0x01	; 1
    2194:	01 90       	ld	r0, Z+
    2196:	0d 92       	st	X+, r0
    2198:	8a 95       	dec	r24
    219a:	e1 f7       	brne	.-8      	; 0x2194 <CheckInput+0x396>
                SerSpeed(60);
    219c:	8c e3       	ldi	r24, 0x3C	; 60
    219e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    21a2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    21a6:	88 23       	and	r24, r24
    21a8:	e1 f3       	breq	.-8      	; 0x21a2 <CheckInput+0x3a4>
    21aa:	ce 01       	movw	r24, r28
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	0e 94 3e 07 	call	0xe7c	; 0xe7c <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    21b2:	f7 cf       	rjmp	.-18     	; 0x21a2 <CheckInput+0x3a4>
    21b4:	66 ee       	ldi	r22, 0xE6	; 230
    21b6:	76 eb       	ldi	r23, 0xB6	; 182
    21b8:	c8 01       	movw	r24, r16
    21ba:	49 db       	rcall	.-2414   	; 0x184e <StartsWith>
    21bc:	68 2e       	mov	r6, r24
    21be:	88 23       	and	r24, r24
    21c0:	61 f1       	breq	.+88     	; 0x221a <CheckInput+0x41c>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	89 a3       	std	Y+33, r24	; 0x21
    21c6:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	be 01       	movw	r22, r28
    21cc:	6f 5d       	subi	r22, 0xDF	; 223
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	81 2f       	mov	r24, r17
    21d2:	0e 94 16 07 	call	0xe2c	; 0xe2c <EEWrite>
    21d6:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    21d8:	10 32       	cpi	r17, 0x20	; 32
    21da:	b1 f7       	brne	.-20     	; 0x21c8 <CheckInput+0x3ca>
    21dc:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	81 2f       	mov	r24, r17
    21e2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <WriteStatusBit>
    21e6:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    21e8:	12 37       	cpi	r17, 0x72	; 114
    21ea:	c9 f7       	brne	.-14     	; 0x21de <CheckInput+0x3e0>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    21ec:	0e 94 5d 08 	call	0x10ba	; 0x10ba <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    21f0:	8f e0       	ldi	r24, 0x0F	; 15
    21f2:	e3 e4       	ldi	r30, 0x43	; 67
    21f4:	f7 eb       	ldi	r31, 0xB7	; 183
    21f6:	de 01       	movw	r26, r28
    21f8:	11 96       	adiw	r26, 0x01	; 1
    21fa:	01 90       	ld	r0, Z+
    21fc:	0d 92       	st	X+, r0
    21fe:	8a 95       	dec	r24
    2200:	e1 f7       	brne	.-8      	; 0x21fa <CheckInput+0x3fc>
                SerSpeed(60);
    2202:	8c e3       	ldi	r24, 0x3C	; 60
    2204:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2208:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    220c:	88 23       	and	r24, r24
    220e:	e1 f3       	breq	.-8      	; 0x2208 <CheckInput+0x40a>
    2210:	ce 01       	movw	r24, r28
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	0e 94 3e 07 	call	0xe7c	; 0xe7c <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    2218:	f7 cf       	rjmp	.-18     	; 0x2208 <CheckInput+0x40a>
    221a:	6d e1       	ldi	r22, 0x1D	; 29
    221c:	77 eb       	ldi	r23, 0xB7	; 183
    221e:	c8 01       	movw	r24, r16
    2220:	16 db       	rcall	.-2516   	; 0x184e <StartsWith>
    2222:	88 23       	and	r24, r24
    2224:	09 f4       	brne	.+2      	; 0x2228 <CheckInput+0x42a>
    2226:	2d ce       	rjmp	.-934    	; 0x1e82 <CheckInput+0x84>
    2228:	06 e0       	ldi	r16, 0x06	; 6
    222a:	19 e3       	ldi	r17, 0x39	; 57
    222c:	78 e1       	ldi	r23, 0x18	; 24
    222e:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2230:	ea e0       	ldi	r30, 0x0A	; 10
    2232:	5e 2e       	mov	r5, r30
                        bit /= 10;
    2234:	f4 e6       	ldi	r31, 0x64	; 100
    2236:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2238:	ee 24       	eor	r14, r14
    223a:	e3 94       	inc	r14
    223c:	f1 2c       	mov	r15, r1
    223e:	cc 24       	eor	r12, r12
    2240:	c3 94       	inc	r12
    2242:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2244:	89 e5       	ldi	r24, 0x59	; 89
    2246:	88 2e       	mov	r8, r24
    2248:	8a e7       	ldi	r24, 0x7A	; 122
    224a:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	a9 2e       	mov	r10, r25
    2250:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	be 01       	movw	r22, r28
    2256:	6f 5d       	subi	r22, 0xDF	; 223
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	87 2d       	mov	r24, r7
    225c:	0e 94 06 07 	call	0xe0c	; 0xe0c <EERead>
                    bit = 0xff-bit;
    2260:	29 a1       	ldd	r18, Y+33	; 0x21
    2262:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2264:	82 2f       	mov	r24, r18
    2266:	65 2d       	mov	r22, r5
    2268:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__udivmodqi4>
    226c:	9b 83       	std	Y+3, r25	; 0x03
    226e:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__udivmodqi4>
    2272:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    2274:	82 2f       	mov	r24, r18
    2276:	64 2d       	mov	r22, r4
    2278:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	19 a2       	std	Y+33, r1	; 0x21
    2280:	de 01       	movw	r26, r28
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    2286:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2288:	86 2d       	mov	r24, r6
    228a:	84 0f       	add	r24, r20
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	fc 01       	movw	r30, r24
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	ea 5f       	subi	r30, 0xFA	; 250
    2296:	f6 4c       	sbci	r31, 0xC6	; 198
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	2d 52       	subi	r18, 0x2D	; 45
    229c:	3b 48       	sbci	r19, 0x8B	; 139
    229e:	20 83       	st	Z, r18
    22a0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    22a2:	fc 01       	movw	r30, r24
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	ea 5b       	subi	r30, 0xBA	; 186
    22aa:	f6 4c       	sbci	r31, 0xC6	; 198
    22ac:	e0 82       	st	Z, r14
    22ae:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	fc 01       	movw	r30, r24
    22b6:	ea 57       	subi	r30, 0x7A	; 122
    22b8:	f6 4c       	sbci	r31, 0xC6	; 198
    22ba:	e0 82       	st	Z, r14
    22bc:	f1 82       	std	Z+1, r15	; 0x01
    22be:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    22c0:	43 30       	cpi	r20, 0x03	; 3
    22c2:	09 f7       	brne	.-62     	; 0x2286 <CheckInput+0x488>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22c4:	f8 01       	movw	r30, r16
    22c6:	86 82       	std	Z+6, r8	; 0x06
    22c8:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    22ca:	ea 5b       	subi	r30, 0xBA	; 186
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	a0 82       	st	Z, r10
    22d0:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    22d2:	e0 5c       	subi	r30, 0xC0	; 192
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	c0 82       	st	Z, r12
    22d8:	d1 82       	std	Z+1, r13	; 0x01
    22da:	73 94       	inc	r7
    22dc:	08 5f       	subi	r16, 0xF8	; 248
    22de:	1f 4f       	sbci	r17, 0xFF	; 255
    22e0:	f4 e0       	ldi	r31, 0x04	; 4
    22e2:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    22e4:	80 e2       	ldi	r24, 0x20	; 32
    22e6:	78 12       	cpse	r7, r24
    22e8:	b4 cf       	rjmp	.-152    	; 0x2252 <CheckInput+0x454>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22ea:	8b e5       	ldi	r24, 0x5B	; 91
    22ec:	9a e7       	ldi	r25, 0x7A	; 122
    22ee:	80 93 44 39 	sts	0x3944, r24	; 0x803944 <reactStr+0x3e>
    22f2:	90 93 45 39 	sts	0x3945, r25	; 0x803945 <reactStr+0x3f>
    reactStr[1][number]=length;
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	80 93 84 39 	sts	0x3984, r24	; 0x803984 <reactStr+0x7e>
    22fe:	90 93 85 39 	sts	0x3985, r25	; 0x803985 <reactStr+0x7f>
    reactStr[2][number]=type;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	80 93 c4 39 	sts	0x39C4, r24	; 0x8039c4 <reactStr+0xbe>
    230a:	90 93 c5 39 	sts	0x39C5, r25	; 0x8039c5 <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    230e:	70 92 05 39 	sts	0x3905, r7	; 0x803905 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2312:	ff 24       	eor	r15, r15
    2314:	f3 94       	inc	r15
}
    2316:	8f 2d       	mov	r24, r15
    2318:	a1 96       	adiw	r28, 0x21	; 33
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	7f 90       	pop	r7
    2338:	6f 90       	pop	r6
    233a:	5f 90       	pop	r5
    233c:	4f 90       	pop	r4
    233e:	08 95       	ret

00002340 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2340:	4f 92       	push	r4
    2342:	5f 92       	push	r5
    2344:	6f 92       	push	r6
    2346:	7f 92       	push	r7
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	2a 97       	sbiw	r28, 0x0a	; 10
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    236c:	71 dc       	rcall	.-1822   	; 0x1c50 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    236e:	c8 01       	movw	r24, r16
    2370:	6f dc       	rcall	.-1826   	; 0x1c50 <CleanInput>
    2372:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2374:	88 23       	and	r24, r24
    2376:	09 f4       	brne	.+2      	; 0x237a <ProcessInput+0x3a>
    2378:	de c7       	rjmp	.+4028   	; 0x3336 <ProcessInput+0xff6>

        //eXit to previous location
        if (data[0] == 'x'){
    237a:	d8 01       	movw	r26, r16
    237c:	8c 91       	ld	r24, X
    237e:	88 37       	cpi	r24, 0x78	; 120
    2380:	09 f0       	breq	.+2      	; 0x2384 <ProcessInput+0x44>
    2382:	45 c0       	rjmp	.+138    	; 0x240e <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2384:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <currDepth>
    2388:	e8 2f       	mov	r30, r24
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ea 53       	subi	r30, 0x3A	; 58
    2392:	f6 4c       	sbci	r31, 0xC6	; 198
    2394:	20 81       	ld	r18, Z
    2396:	31 81       	ldd	r19, Z+1	; 0x01
    2398:	23 2b       	or	r18, r19
    239a:	11 f0       	breq	.+4      	; 0x23a0 <ProcessInput+0x60>
    239c:	81 11       	cpse	r24, r1
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23a0:	82 e8       	ldi	r24, 0x82	; 130
    23a2:	96 e7       	ldi	r25, 0x76	; 118
    23a4:	a1 c5       	rjmp	.+2882   	; 0x2ee8 <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    23a6:	80 91 0c 3a 	lds	r24, 0x3A0C	; 0x803a0c <currObj+0x6>
    23aa:	0e 94 08 09 	call	0x1210	; 0x1210 <CheckState>
    23ae:	88 23       	and	r24, r24
    23b0:	b9 f0       	breq	.+46     	; 0x23e0 <ProcessInput+0xa0>
                --currDepth;
    23b2:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    23b6:	e1 50       	subi	r30, 0x01	; 1
    23b8:	e0 93 27 38 	sts	0x3827, r30	; 0x803827 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	ea 53       	subi	r30, 0x3A	; 58
    23c4:	f6 4c       	sbci	r31, 0xC6	; 198
    23c6:	66 e0       	ldi	r22, 0x06	; 6
    23c8:	7a e3       	ldi	r23, 0x3A	; 58
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	0d db       	rcall	.-2534   	; 0x19ea <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    23d0:	80 91 0a 3a 	lds	r24, 0x3A0A	; 0x803a0a <currObj+0x4>
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    23da:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    23de:	31 c2       	rjmp	.+1122   	; 0x2842 <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    23e0:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <currObj+0x22>
    23e4:	90 91 29 3a 	lds	r25, 0x3A29	; 0x803a29 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23e8:	20 91 1a 3a 	lds	r18, 0x3A1A	; 0x803a1a <currObj+0x14>
    23ec:	30 91 1b 3a 	lds	r19, 0x3A1B	; 0x803a1b <currObj+0x15>
    23f0:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    23f4:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    23f8:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    23fc:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2400:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    2404:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2408:	80 91 2e 3a 	lds	r24, 0x3A2E	; 0x803a2e <currObj+0x28>
    240c:	3a c6       	rjmp	.+3188   	; 0x3082 <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    240e:	85 36       	cpi	r24, 0x65	; 101
    2410:	19 f0       	breq	.+6      	; 0x2418 <ProcessInput+0xd8>
    2412:	8f 36       	cpi	r24, 0x6F	; 111
    2414:	09 f0       	breq	.+2      	; 0x2418 <ProcessInput+0xd8>
    2416:	df c0       	rjmp	.+446    	; 0x25d6 <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2418:	b2 e0       	ldi	r27, 0x02	; 2
    241a:	fb 12       	cpse	r15, r27
    241c:	c1 cf       	rjmp	.-126    	; 0x23a0 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    241e:	e0 90 27 38 	lds	r14, 0x3827	; 0x803827 <currDepth>
    2422:	f1 2c       	mov	r15, r1
    2424:	f7 01       	movw	r30, r14
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	ea 53       	subi	r30, 0x3A	; 58
    242c:	f6 4c       	sbci	r31, 0xC6	; 198
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	d8 01       	movw	r26, r16
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	6c 91       	ld	r22, X
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	a1 db       	rcall	.-2238   	; 0x1b80 <FindChild>
    243e:	f7 01       	movw	r30, r14
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	e8 53       	subi	r30, 0x38	; 56
    2446:	f6 4c       	sbci	r31, 0xC6	; 198
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    244c:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <currDepth>
    2450:	29 2f       	mov	r18, r25
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	f9 01       	movw	r30, r18
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	e8 53       	subi	r30, 0x38	; 56
    245c:	f6 4c       	sbci	r31, 0xC6	; 198
    245e:	40 81       	ld	r20, Z
    2460:	51 81       	ldd	r21, Z+1	; 0x01
    2462:	41 15       	cp	r20, r1
    2464:	51 05       	cpc	r21, r1
    2466:	21 f0       	breq	.+8      	; 0x2470 <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    2468:	67 ec       	ldi	r22, 0xC7	; 199
    246a:	78 e3       	ldi	r23, 0x38	; 56
    246c:	ca 01       	movw	r24, r20
    246e:	1c c0       	rjmp	.+56     	; 0x24a8 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2470:	99 23       	and	r25, r25
    2472:	09 f4       	brne	.+2      	; 0x2476 <ProcessInput+0x136>
    2474:	77 c7       	rjmp	.+3822   	; 0x3364 <ProcessInput+0x1024>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	f9 01       	movw	r30, r18
    247c:	ec 53       	subi	r30, 0x3C	; 60
    247e:	f6 4c       	sbci	r31, 0xC6	; 198
    2480:	d8 01       	movw	r26, r16
    2482:	11 96       	adiw	r26, 0x01	; 1
    2484:	6c 91       	ld	r22, X
    2486:	80 81       	ld	r24, Z
    2488:	91 81       	ldd	r25, Z+1	; 0x01
    248a:	26 db       	rcall	.-2484   	; 0x1ad8 <CheckLetter>
    248c:	88 23       	and	r24, r24
    248e:	09 f4       	brne	.+2      	; 0x2492 <ProcessInput+0x152>
    2490:	69 c7       	rjmp	.+3794   	; 0x3364 <ProcessInput+0x1024>
                        PopulateObject(route[currDepth-1], &actObj1);
    2492:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ec 53       	subi	r30, 0x3C	; 60
    249e:	f6 4c       	sbci	r31, 0xC6	; 198
    24a0:	67 ec       	ldi	r22, 0xC7	; 199
    24a2:	78 e3       	ldi	r23, 0x38	; 56
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	a0 da       	rcall	.-2752   	; 0x19ea <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 81       	ld	r24, Z
    24ae:	85 36       	cpi	r24, 0x65	; 101
    24b0:	c9 f4       	brne	.+50     	; 0x24e4 <ProcessInput+0x1a4>
    24b2:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x8>
    24b6:	80 fd       	sbrc	r24, 0
    24b8:	1e c0       	rjmp	.+60     	; 0x24f6 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24ba:	80 ea       	ldi	r24, 0xA0	; 160
    24bc:	99 e7       	ldi	r25, 0x79	; 121
    24be:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    24c2:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    24c6:	8e e1       	ldi	r24, 0x1E	; 30
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    24ce:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    24da:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    24de:	72 e0       	ldi	r23, 0x02	; 2
    24e0:	77 2e       	mov	r7, r23
    24e2:	0e c7       	rjmp	.+3612   	; 0x3300 <ProcessInput+0xfc0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    24e4:	8f 36       	cpi	r24, 0x6F	; 111
    24e6:	39 f4       	brne	.+14     	; 0x24f6 <ProcessInput+0x1b6>
    24e8:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x8>
    24ec:	81 fd       	sbrc	r24, 1
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24f0:	85 e8       	ldi	r24, 0x85	; 133
    24f2:	99 e7       	ldi	r25, 0x79	; 121
    24f4:	f9 c4       	rjmp	.+2546   	; 0x2ee8 <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    24f6:	80 91 cd 38 	lds	r24, 0x38CD	; 0x8038cd <actObj1.3989+0x6>
    24fa:	0e 94 08 09 	call	0x1210	; 0x1210 <CheckState>
    24fe:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    2502:	88 23       	and	r24, r24
    2504:	09 f4       	brne	.+2      	; 0x2508 <ProcessInput+0x1c8>
    2506:	49 c0       	rjmp	.+146    	; 0x259a <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2508:	ae 2f       	mov	r26, r30
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	aa 0f       	add	r26, r26
    250e:	bb 1f       	adc	r27, r27
    2510:	a8 53       	subi	r26, 0x38	; 56
    2512:	b6 4c       	sbci	r27, 0xC6	; 198
    2514:	8d 91       	ld	r24, X+
    2516:	9c 91       	ld	r25, X
    2518:	89 2b       	or	r24, r25
    251a:	11 f0       	breq	.+4      	; 0x2520 <ProcessInput+0x1e0>
    251c:	ef 5f       	subi	r30, 0xFF	; 255
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <ProcessInput+0x1e2>
    2520:	e1 50       	subi	r30, 0x01	; 1
    2522:	e0 93 27 38 	sts	0x3827, r30	; 0x803827 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2526:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ea 53       	subi	r30, 0x3A	; 58
    2532:	f6 4c       	sbci	r31, 0xC6	; 198
    2534:	66 e0       	ldi	r22, 0x06	; 6
    2536:	7a e3       	ldi	r23, 0x3A	; 58
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	56 da       	rcall	.-2900   	; 0x19ea <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    253e:	80 91 22 3a 	lds	r24, 0x3A22	; 0x803a22 <currObj+0x1c>
    2542:	90 91 23 3a 	lds	r25, 0x3A23	; 0x803a23 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2546:	20 91 14 3a 	lds	r18, 0x3A14	; 0x803a14 <currObj+0xe>
    254a:	30 91 15 3a 	lds	r19, 0x3A15	; 0x803a15 <currObj+0xf>
    254e:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    2552:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2556:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    255a:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    255e:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    2562:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2566:	8b e5       	ldi	r24, 0x5B	; 91
    2568:	9a e7       	ldi	r25, 0x7A	; 122
    256a:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    256e:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x44>
    257a:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x45>
    reactStr[2][number]=type;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x84>
    2586:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    258a:	80 91 0a 3a 	lds	r24, 0x3A0A	; 0x803a0a <currObj+0x4>
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2594:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    2598:	8d c4       	rjmp	.+2330   	; 0x2eb4 <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	e8 53       	subi	r30, 0x38	; 56
    25a2:	f6 4c       	sbci	r31, 0xC6	; 198
    25a4:	10 82       	st	Z, r1
    25a6:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    25a8:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj1.3989+0x22>
    25ac:	90 91 ea 38 	lds	r25, 0x38EA	; 0x8038ea <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25b0:	20 91 db 38 	lds	r18, 0x38DB	; 0x8038db <actObj1.3989+0x14>
    25b4:	30 91 dc 38 	lds	r19, 0x38DC	; 0x8038dc <actObj1.3989+0x15>
    25b8:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    25bc:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    25c0:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    25c4:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    25c8:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    25cc:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    25d0:	80 91 ef 38 	lds	r24, 0x38EF	; 0x8038ef <actObj1.3989+0x28>
    25d4:	56 c5       	rjmp	.+2732   	; 0x3082 <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    25d6:	8c 36       	cpi	r24, 0x6C	; 108
    25d8:	09 f0       	breq	.+2      	; 0x25dc <ProcessInput+0x29c>
    25da:	57 c1       	rjmp	.+686    	; 0x288a <ProcessInput+0x54a>
    25dc:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
            if (inputLen == 1) {
    25e0:	b1 e0       	ldi	r27, 0x01	; 1
    25e2:	fb 12       	cpse	r15, r27
    25e4:	f6 c0       	rjmp	.+492    	; 0x27d2 <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    25e6:	80 91 22 3a 	lds	r24, 0x3A22	; 0x803a22 <currObj+0x1c>
    25ea:	90 91 23 3a 	lds	r25, 0x3A23	; 0x803a23 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25ee:	20 91 14 3a 	lds	r18, 0x3A14	; 0x803a14 <currObj+0xe>
    25f2:	30 91 15 3a 	lds	r19, 0x3A15	; 0x803a15 <currObj+0xf>
    25f6:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    25fa:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    25fe:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    2602:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2606:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    260a:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    260e:	8b e5       	ldi	r24, 0x5B	; 91
    2610:	9a e7       	ldi	r25, 0x7A	; 122
    2612:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    2616:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x44>
    2622:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x45>
    reactStr[2][number]=type;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x84>
    262e:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2632:	2e ee       	ldi	r18, 0xEE	; 238
    2634:	39 e7       	ldi	r19, 0x79	; 121
    2636:	20 93 0c 39 	sts	0x390C, r18	; 0x80390c <reactStr+0x6>
    263a:	30 93 0d 39 	sts	0x390D, r19	; 0x80390d <reactStr+0x7>
    reactStr[1][number]=length;
    263e:	25 e1       	ldi	r18, 0x15	; 21
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	20 93 4c 39 	sts	0x394C, r18	; 0x80394c <reactStr+0x46>
    2646:	30 93 4d 39 	sts	0x394D, r19	; 0x80394d <reactStr+0x47>
    reactStr[2][number]=type;
    264a:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x86>
    264e:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	ee 0f       	add	r30, r30
    2656:	ff 1f       	adc	r31, r31
    2658:	e8 53       	subi	r30, 0x38	; 56
    265a:	f6 4c       	sbci	r31, 0xC6	; 198
    265c:	10 82       	st	Z, r1
    265e:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2660:	84 e0       	ldi	r24, 0x04	; 4
    2662:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2664:	99 e5       	ldi	r25, 0x59	; 89
    2666:	c9 2e       	mov	r12, r25
    2668:	9a e7       	ldi	r25, 0x7A	; 122
    266a:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    266c:	22 e0       	ldi	r18, 0x02	; 2
    266e:	a2 2e       	mov	r10, r18
    2670:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2672:	88 24       	eor	r8, r8
    2674:	83 94       	inc	r8
    2676:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2678:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <currDepth>
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9c 01       	movw	r18, r24
    2680:	22 0f       	add	r18, r18
    2682:	33 1f       	adc	r19, r19
    2684:	f9 01       	movw	r30, r18
    2686:	e8 53       	subi	r30, 0x38	; 56
    2688:	f6 4c       	sbci	r31, 0xC6	; 198
    268a:	7f 01       	movw	r14, r30
    268c:	40 81       	ld	r20, Z
    268e:	51 81       	ldd	r21, Z+1	; 0x01
    2690:	f9 01       	movw	r30, r18
    2692:	ea 53       	subi	r30, 0x3A	; 58
    2694:	f6 4c       	sbci	r31, 0xC6	; 198
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	71 da       	rcall	.-2846   	; 0x1b80 <FindChild>
    269e:	d7 01       	movw	r26, r14
    26a0:	8d 93       	st	X+, r24
    26a2:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    26a4:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	e8 53       	subi	r30, 0x38	; 56
    26b0:	f6 4c       	sbci	r31, 0xC6	; 198
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	09 f4       	brne	.+2      	; 0x26bc <ProcessInput+0x37c>
    26ba:	4a c0       	rjmp	.+148    	; 0x2750 <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    26bc:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    26c0:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    26c4:	82 17       	cp	r24, r18
    26c6:	93 07       	cpc	r25, r19
    26c8:	09 f4       	brne	.+2      	; 0x26cc <ProcessInput+0x38c>
    26ca:	42 c0       	rjmp	.+132    	; 0x2750 <ProcessInput+0x410>
    26cc:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    26d0:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    26d4:	82 17       	cp	r24, r18
    26d6:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    26d8:	d9 f1       	breq	.+118    	; 0x2750 <ProcessInput+0x410>
    26da:	67 ec       	ldi	r22, 0xC7	; 199
    26dc:	78 e3       	ldi	r23, 0x38	; 56
    26de:	85 d9       	rcall	.-3318   	; 0x19ea <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    26e0:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x1a>
    26e4:	90 91 e2 38 	lds	r25, 0x38E2	; 0x8038e2 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26e8:	e6 2d       	mov	r30, r6
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	df 01       	movw	r26, r30
    26ee:	aa 0f       	add	r26, r26
    26f0:	bb 1f       	adc	r27, r27
    26f2:	aa 5f       	subi	r26, 0xFA	; 250
    26f4:	b6 4c       	sbci	r27, 0xC6	; 198
    26f6:	20 91 d3 38 	lds	r18, 0x38D3	; 0x8038d3 <actObj1.3989+0xc>
    26fa:	30 91 d4 38 	lds	r19, 0x38D4	; 0x8038d4 <actObj1.3989+0xd>
    26fe:	2d 93       	st	X+, r18
    2700:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2702:	df 01       	movw	r26, r30
    2704:	aa 0f       	add	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	aa 5b       	subi	r26, 0xBA	; 186
    270a:	b6 4c       	sbci	r27, 0xC6	; 198
    270c:	8d 93       	st	X+, r24
    270e:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2710:	ee 0f       	add	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	ea 57       	subi	r30, 0x7A	; 122
    2716:	f6 4c       	sbci	r31, 0xC6	; 198
    2718:	10 82       	st	Z, r1
    271a:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	86 0d       	add	r24, r6
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	63 94       	inc	r6
    2724:	63 94       	inc	r6
    2726:	fc 01       	movw	r30, r24
    2728:	ee 0f       	add	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	ea 5f       	subi	r30, 0xFA	; 250
    272e:	f6 4c       	sbci	r31, 0xC6	; 198
    2730:	c0 82       	st	Z, r12
    2732:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2734:	fc 01       	movw	r30, r24
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	ea 5b       	subi	r30, 0xBA	; 186
    273c:	f6 4c       	sbci	r31, 0xC6	; 198
    273e:	a0 82       	st	Z, r10
    2740:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	fc 01       	movw	r30, r24
    2748:	ea 57       	subi	r30, 0x7A	; 122
    274a:	f6 4c       	sbci	r31, 0xC6	; 198
    274c:	80 82       	st	Z, r8
    274e:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2750:	20 91 27 38 	lds	r18, 0x3827	; 0x803827 <currDepth>
    2754:	82 2f       	mov	r24, r18
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	fc 01       	movw	r30, r24
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	e8 53       	subi	r30, 0x38	; 56
    2760:	f6 4c       	sbci	r31, 0xC6	; 198
    2762:	40 81       	ld	r20, Z
    2764:	51 81       	ldd	r21, Z+1	; 0x01
    2766:	45 2b       	or	r20, r21
    2768:	09 f0       	breq	.+2      	; 0x276c <ProcessInput+0x42c>
    276a:	86 cf       	rjmp	.-244    	; 0x2678 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    276c:	22 23       	and	r18, r18
    276e:	69 f1       	breq	.+90     	; 0x27ca <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	fc 01       	movw	r30, r24
    2776:	ec 53       	subi	r30, 0x3C	; 60
    2778:	f6 4c       	sbci	r31, 0xC6	; 198
    277a:	67 ec       	ldi	r22, 0xC7	; 199
    277c:	78 e3       	ldi	r23, 0x38	; 56
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	33 d9       	rcall	.-3482   	; 0x19ea <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2784:	20 91 e1 38 	lds	r18, 0x38E1	; 0x8038e1 <actObj1.3989+0x1a>
    2788:	30 91 e2 38 	lds	r19, 0x38E2	; 0x8038e2 <actObj1.3989+0x1b>
    278c:	77 24       	eor	r7, r7
    278e:	73 94       	inc	r7
    2790:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2792:	86 2d       	mov	r24, r6
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	fc 01       	movw	r30, r24
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ea 5f       	subi	r30, 0xFA	; 250
    279e:	f6 4c       	sbci	r31, 0xC6	; 198
    27a0:	40 91 d3 38 	lds	r20, 0x38D3	; 0x8038d3 <actObj1.3989+0xc>
    27a4:	50 91 d4 38 	lds	r21, 0x38D4	; 0x8038d4 <actObj1.3989+0xd>
    27a8:	40 83       	st	Z, r20
    27aa:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    27ac:	fc 01       	movw	r30, r24
    27ae:	ee 0f       	add	r30, r30
    27b0:	ff 1f       	adc	r31, r31
    27b2:	ea 5b       	subi	r30, 0xBA	; 186
    27b4:	f6 4c       	sbci	r31, 0xC6	; 198
    27b6:	20 83       	st	Z, r18
    27b8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	fc 01       	movw	r30, r24
    27c0:	ea 57       	subi	r30, 0x7A	; 122
    27c2:	f6 4c       	sbci	r31, 0xC6	; 198
    27c4:	10 82       	st	Z, r1
    27c6:	11 82       	std	Z+1, r1	; 0x01
    27c8:	9b c5       	rjmp	.+2870   	; 0x3300 <ProcessInput+0xfc0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    27ca:	77 24       	eor	r7, r7
    27cc:	7a 94       	dec	r7
    27ce:	76 0c       	add	r7, r6
    27d0:	97 c5       	rjmp	.+2862   	; 0x3300 <ProcessInput+0xfc0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    27d2:	ee 2e       	mov	r14, r30
    27d4:	f1 2c       	mov	r15, r1
    27d6:	f7 01       	movw	r30, r14
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	ea 53       	subi	r30, 0x3A	; 58
    27de:	f6 4c       	sbci	r31, 0xC6	; 198
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	d8 01       	movw	r26, r16
    27e6:	11 96       	adiw	r26, 0x01	; 1
    27e8:	6c 91       	ld	r22, X
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	c8 d9       	rcall	.-3184   	; 0x1b80 <FindChild>
    27f0:	f7 01       	movw	r30, r14
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	e8 53       	subi	r30, 0x38	; 56
    27f8:	f6 4c       	sbci	r31, 0xC6	; 198
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    27fe:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <currDepth>
    2802:	29 2f       	mov	r18, r25
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	e8 53       	subi	r30, 0x38	; 56
    280e:	f6 4c       	sbci	r31, 0xC6	; 198
    2810:	40 81       	ld	r20, Z
    2812:	51 81       	ldd	r21, Z+1	; 0x01
    2814:	41 15       	cp	r20, r1
    2816:	51 05       	cpc	r21, r1
    2818:	21 f0       	breq	.+8      	; 0x2822 <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    281a:	67 ec       	ldi	r22, 0xC7	; 199
    281c:	78 e3       	ldi	r23, 0x38	; 56
    281e:	ca 01       	movw	r24, r20
    2820:	1e c0       	rjmp	.+60     	; 0x285e <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2822:	99 23       	and	r25, r25
    2824:	09 f4       	brne	.+2      	; 0x2828 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2826:	9e c5       	rjmp	.+2876   	; 0x3364 <ProcessInput+0x1024>
    2828:	22 0f       	add	r18, r18
    282a:	33 1f       	adc	r19, r19
    282c:	f9 01       	movw	r30, r18
    282e:	ec 53       	subi	r30, 0x3C	; 60
    2830:	f6 4c       	sbci	r31, 0xC6	; 198
    2832:	d8 01       	movw	r26, r16
    2834:	11 96       	adiw	r26, 0x01	; 1
    2836:	6c 91       	ld	r22, X
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	4d d9       	rcall	.-3430   	; 0x1ad8 <CheckLetter>
    283e:	81 11       	cpse	r24, r1
    2840:	03 c0       	rjmp	.+6      	; 0x2848 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2842:	77 24       	eor	r7, r7
    2844:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2846:	5c c5       	rjmp	.+2744   	; 0x3300 <ProcessInput+0xfc0>
    2848:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	ec 53       	subi	r30, 0x3C	; 60
    2854:	f6 4c       	sbci	r31, 0xC6	; 198
    2856:	67 ec       	ldi	r22, 0xC7	; 199
    2858:	78 e3       	ldi	r23, 0x38	; 56
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	c5 d8       	rcall	.-3702   	; 0x19ea <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2860:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3989+0x1c>
    2864:	90 91 e4 38 	lds	r25, 0x38E4	; 0x8038e4 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2868:	20 91 d5 38 	lds	r18, 0x38D5	; 0x8038d5 <actObj1.3989+0xe>
    286c:	30 91 d6 38 	lds	r19, 0x38D6	; 0x8038d6 <actObj1.3989+0xf>
    2870:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    2874:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2878:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    287c:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2880:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    2884:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
    2888:	2a ce       	rjmp	.-940    	; 0x24de <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    288a:	80 37       	cpi	r24, 0x70	; 112
    288c:	09 f0       	breq	.+2      	; 0x2890 <ProcessInput+0x550>
    288e:	96 c0       	rjmp	.+300    	; 0x29bc <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    2890:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    2894:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2898:	89 2b       	or	r24, r25
    289a:	79 f0       	breq	.+30     	; 0x28ba <ProcessInput+0x57a>
    289c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    28a0:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    28a4:	89 2b       	or	r24, r25
    28a6:	49 f0       	breq	.+18     	; 0x28ba <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28a8:	85 e4       	ldi	r24, 0x45	; 69
    28aa:	98 e7       	ldi	r25, 0x78	; 120
    28ac:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    28b0:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    28b4:	89 e5       	ldi	r24, 0x59	; 89
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	08 ce       	rjmp	.-1008   	; 0x24ca <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    28ba:	b2 e0       	ldi	r27, 0x02	; 2
    28bc:	fb 12       	cpse	r15, r27
    28be:	70 cd       	rjmp	.-1312   	; 0x23a0 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    28c0:	e0 90 27 38 	lds	r14, 0x3827	; 0x803827 <currDepth>
    28c4:	f1 2c       	mov	r15, r1
    28c6:	f7 01       	movw	r30, r14
    28c8:	ee 0f       	add	r30, r30
    28ca:	ff 1f       	adc	r31, r31
    28cc:	ea 53       	subi	r30, 0x3A	; 58
    28ce:	f6 4c       	sbci	r31, 0xC6	; 198
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	d8 01       	movw	r26, r16
    28d6:	11 96       	adiw	r26, 0x01	; 1
    28d8:	6c 91       	ld	r22, X
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	50 d9       	rcall	.-3424   	; 0x1b80 <FindChild>
    28e0:	f7 01       	movw	r30, r14
    28e2:	ee 0f       	add	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	e8 53       	subi	r30, 0x38	; 56
    28e8:	f6 4c       	sbci	r31, 0xC6	; 198
    28ea:	80 83       	st	Z, r24
    28ec:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    28ee:	20 91 27 38 	lds	r18, 0x3827	; 0x803827 <currDepth>
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	2f 5f       	subi	r18, 0xFF	; 255
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	f9 01       	movw	r30, r18
    28fe:	ea 53       	subi	r30, 0x3A	; 58
    2900:	f6 4c       	sbci	r31, 0xC6	; 198
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	09 f4       	brne	.+2      	; 0x290c <ProcessInput+0x5cc>
    290a:	ca c3       	rjmp	.+1940   	; 0x30a0 <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    290c:	40 91 31 38 	lds	r20, 0x3831	; 0x803831 <inventory>
    2910:	50 91 32 38 	lds	r21, 0x3832	; 0x803832 <inventory+0x1>
    2914:	84 17       	cp	r24, r20
    2916:	95 07       	cpc	r25, r21
    2918:	39 f0       	breq	.+14     	; 0x2928 <ProcessInput+0x5e8>
    291a:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <inventory+0x2>
    291e:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <inventory+0x3>
    2922:	84 17       	cp	r24, r20
    2924:	95 07       	cpc	r25, r21
    2926:	c1 f4       	brne	.+48     	; 0x2958 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2928:	80 e2       	ldi	r24, 0x20	; 32
    292a:	98 e7       	ldi	r25, 0x78	; 120
    292c:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2930:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2934:	85 e2       	ldi	r24, 0x25	; 37
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    293c:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    2948:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    294c:	f9 01       	movw	r30, r18
    294e:	ea 53       	subi	r30, 0x3A	; 58
    2950:	f6 4c       	sbci	r31, 0xC6	; 198
    2952:	10 82       	st	Z, r1
    2954:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2956:	c3 cd       	rjmp	.-1146   	; 0x24de <ProcessInput+0x19e>
    2958:	67 ec       	ldi	r22, 0xC7	; 199
    295a:	78 e3       	ldi	r23, 0x38	; 56
    295c:	46 d8       	rcall	.-3956   	; 0x19ea <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    295e:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3989+0x7>
    2962:	0e 94 08 09 	call	0x1210	; 0x1210 <CheckState>
    2966:	88 23       	and	r24, r24
    2968:	09 f4       	brne	.+2      	; 0x296c <ProcessInput+0x62c>
    296a:	75 c3       	rjmp	.+1770   	; 0x3056 <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    296c:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3989+0xb>
    2970:	88 23       	and	r24, r24
    2972:	09 f4       	brne	.+2      	; 0x2976 <ProcessInput+0x636>
    2974:	15 cd       	rjmp	.-1494   	; 0x23a0 <ProcessInput+0x60>
                                if (inventory[0]) {
    2976:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    297a:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    297e:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	ee 0f       	add	r30, r30
    2986:	ff 1f       	adc	r31, r31
    2988:	e8 53       	subi	r30, 0x38	; 56
    298a:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    298c:	89 2b       	or	r24, r25
    298e:	39 f0       	breq	.+14     	; 0x299e <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    2990:	80 81       	ld	r24, Z
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    2998:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
    299c:	06 c0       	rjmp	.+12     	; 0x29aa <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    29a6:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29aa:	8a e0       	ldi	r24, 0x0A	; 10
    29ac:	98 e7       	ldi	r25, 0x78	; 120
    29ae:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    29b2:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    29b6:	86 e1       	ldi	r24, 0x16	; 22
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	5e c2       	rjmp	.+1212   	; 0x2e78 <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    29bc:	84 36       	cpi	r24, 0x64	; 100
    29be:	d9 f4       	brne	.+54     	; 0x29f6 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    29c0:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    29c4:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	09 f0       	breq	.+2      	; 0x29ce <ProcessInput+0x68e>
    29cc:	ce c4       	rjmp	.+2460   	; 0x336a <ProcessInput+0x102a>
    29ce:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    29d2:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    29d6:	89 2b       	or	r24, r25
    29d8:	49 f4       	brne	.+18     	; 0x29ec <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29da:	84 ee       	ldi	r24, 0xE4	; 228
    29dc:	97 e7       	ldi	r25, 0x77	; 119
    29de:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    29e2:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    29e6:	86 e2       	ldi	r24, 0x26	; 38
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	6f cd       	rjmp	.-1314   	; 0x24ca <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    29ec:	b2 e0       	ldi	r27, 0x02	; 2
    29ee:	fb 16       	cp	r15, r27
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <ProcessInput+0x6b4>
    29f2:	21 c5       	rjmp	.+2626   	; 0x3436 <ProcessInput+0x10f6>
    29f4:	d5 cc       	rjmp	.-1622   	; 0x23a0 <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    29f6:	89 36       	cpi	r24, 0x69	; 105
    29f8:	09 f0       	breq	.+2      	; 0x29fc <ProcessInput+0x6bc>
    29fa:	7b c0       	rjmp	.+246    	; 0x2af2 <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    29fc:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    2a00:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2a04:	89 2b       	or	r24, r25
    2a06:	31 f4       	brne	.+12     	; 0x2a14 <ProcessInput+0x6d4>
    2a08:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    2a0c:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    2a10:	89 2b       	or	r24, r25
    2a12:	19 f3       	breq	.-58     	; 0x29da <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a14:	8a e0       	ldi	r24, 0x0A	; 10
    2a16:	98 e7       	ldi	r25, 0x78	; 120
    2a18:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2a1c:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2a20:	86 e1       	ldi	r24, 0x16	; 22
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    2a28:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    2a34:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>
    2a38:	21 e3       	ldi	r18, 0x31	; 49
    2a3a:	e2 2e       	mov	r14, r18
    2a3c:	28 e3       	ldi	r18, 0x38	; 56
    2a3e:	f2 2e       	mov	r15, r18
    2a40:	35 e3       	ldi	r19, 0x35	; 53
    2a42:	63 2e       	mov	r6, r19
    2a44:	38 e3       	ldi	r19, 0x38	; 56
    2a46:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2a48:	42 e0       	ldi	r20, 0x02	; 2
    2a4a:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a4c:	59 e5       	ldi	r21, 0x59	; 89
    2a4e:	c5 2e       	mov	r12, r21
    2a50:	5a e7       	ldi	r21, 0x7A	; 122
    2a52:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2a54:	62 e0       	ldi	r22, 0x02	; 2
    2a56:	a6 2e       	mov	r10, r22
    2a58:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2a5a:	88 24       	eor	r8, r8
    2a5c:	83 94       	inc	r8
    2a5e:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2a60:	d7 01       	movw	r26, r14
    2a62:	8d 91       	ld	r24, X+
    2a64:	9d 91       	ld	r25, X+
    2a66:	7d 01       	movw	r14, r26
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	d9 f1       	breq	.+118    	; 0x2ae2 <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    2a6c:	67 ec       	ldi	r22, 0xC7	; 199
    2a6e:	78 e3       	ldi	r23, 0x38	; 56
    2a70:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2a74:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x1a>
    2a78:	90 91 e2 38 	lds	r25, 0x38E2	; 0x8038e2 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a7c:	e5 2d       	mov	r30, r5
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	df 01       	movw	r26, r30
    2a82:	aa 0f       	add	r26, r26
    2a84:	bb 1f       	adc	r27, r27
    2a86:	aa 5f       	subi	r26, 0xFA	; 250
    2a88:	b6 4c       	sbci	r27, 0xC6	; 198
    2a8a:	20 91 d3 38 	lds	r18, 0x38D3	; 0x8038d3 <actObj1.3989+0xc>
    2a8e:	30 91 d4 38 	lds	r19, 0x38D4	; 0x8038d4 <actObj1.3989+0xd>
    2a92:	2d 93       	st	X+, r18
    2a94:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2a96:	df 01       	movw	r26, r30
    2a98:	aa 0f       	add	r26, r26
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	aa 5b       	subi	r26, 0xBA	; 186
    2a9e:	b6 4c       	sbci	r27, 0xC6	; 198
    2aa0:	8d 93       	st	X+, r24
    2aa2:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	ea 57       	subi	r30, 0x7A	; 122
    2aaa:	f6 4c       	sbci	r31, 0xC6	; 198
    2aac:	10 82       	st	Z, r1
    2aae:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ab0:	e1 e0       	ldi	r30, 0x01	; 1
    2ab2:	e5 0d       	add	r30, r5
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	53 94       	inc	r5
    2ab8:	53 94       	inc	r5
    2aba:	df 01       	movw	r26, r30
    2abc:	aa 0f       	add	r26, r26
    2abe:	bb 1f       	adc	r27, r27
    2ac0:	aa 5f       	subi	r26, 0xFA	; 250
    2ac2:	b6 4c       	sbci	r27, 0xC6	; 198
    2ac4:	cd 92       	st	X+, r12
    2ac6:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2ac8:	df 01       	movw	r26, r30
    2aca:	aa 0f       	add	r26, r26
    2acc:	bb 1f       	adc	r27, r27
    2ace:	aa 5b       	subi	r26, 0xBA	; 186
    2ad0:	b6 4c       	sbci	r27, 0xC6	; 198
    2ad2:	ad 92       	st	X+, r10
    2ad4:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	ea 57       	subi	r30, 0x7A	; 122
    2adc:	f6 4c       	sbci	r31, 0xC6	; 198
    2ade:	80 82       	st	Z, r8
    2ae0:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    2ae2:	6e 14       	cp	r6, r14
    2ae4:	7f 04       	cpc	r7, r15
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <ProcessInput+0x7aa>
    2ae8:	bb cf       	rjmp	.-138    	; 0x2a60 <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2aea:	77 24       	eor	r7, r7
    2aec:	7a 94       	dec	r7
    2aee:	75 0c       	add	r7, r5
    2af0:	07 c4       	rjmp	.+2062   	; 0x3300 <ProcessInput+0xfc0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    2af2:	9c e8       	ldi	r25, 0x8C	; 140
    2af4:	98 0f       	add	r25, r24
    2af6:	92 30       	cpi	r25, 0x02	; 2
    2af8:	28 f0       	brcs	.+10     	; 0x2b04 <ProcessInput+0x7c4>
    2afa:	87 36       	cpi	r24, 0x67	; 103
    2afc:	19 f0       	breq	.+6      	; 0x2b04 <ProcessInput+0x7c4>
    2afe:	82 37       	cpi	r24, 0x72	; 114
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <ProcessInput+0x7c4>
    2b02:	d7 c2       	rjmp	.+1454   	; 0x30b2 <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    2b04:	8e ef       	ldi	r24, 0xFE	; 254
    2b06:	8f 0d       	add	r24, r15
    2b08:	82 30       	cpi	r24, 0x02	; 2
    2b0a:	08 f0       	brcs	.+2      	; 0x2b0e <ProcessInput+0x7ce>
    2b0c:	49 cc       	rjmp	.-1902   	; 0x23a0 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    2b0e:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    2b12:	ce 2e       	mov	r12, r30
    2b14:	d1 2c       	mov	r13, r1
    2b16:	d8 01       	movw	r26, r16
    2b18:	af 0d       	add	r26, r15
    2b1a:	b1 1d       	adc	r27, r1
    2b1c:	11 97       	sbiw	r26, 0x01	; 1
    2b1e:	f6 01       	movw	r30, r12
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	ea 53       	subi	r30, 0x3A	; 58
    2b26:	f6 4c       	sbci	r31, 0xC6	; 198
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	6c 91       	ld	r22, X
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	26 d8       	rcall	.-4020   	; 0x1b80 <FindChild>
    2b34:	f6 01       	movw	r30, r12
    2b36:	ee 0f       	add	r30, r30
    2b38:	ff 1f       	adc	r31, r31
    2b3a:	e8 53       	subi	r30, 0x38	; 56
    2b3c:	f6 4c       	sbci	r31, 0xC6	; 198
    2b3e:	80 83       	st	Z, r24
    2b40:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2b42:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	ee 0f       	add	r30, r30
    2b4a:	ff 1f       	adc	r31, r31
    2b4c:	e8 53       	subi	r30, 0x38	; 56
    2b4e:	f6 4c       	sbci	r31, 0xC6	; 198
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <ProcessInput+0x81a>
    2b58:	9a c2       	rjmp	.+1332   	; 0x308e <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    2b5a:	b3 e0       	ldi	r27, 0x03	; 3
    2b5c:	fb 12       	cpse	r15, r27
    2b5e:	78 c1       	rjmp	.+752    	; 0x2e50 <ProcessInput+0xb10>
    2b60:	f8 01       	movw	r30, r16
    2b62:	20 81       	ld	r18, Z
    2b64:	25 37       	cpi	r18, 0x75	; 117
    2b66:	19 f0       	breq	.+6      	; 0x2b6e <ProcessInput+0x82e>
    2b68:	27 36       	cpi	r18, 0x67	; 103
    2b6a:	09 f0       	breq	.+2      	; 0x2b6e <ProcessInput+0x82e>
    2b6c:	71 c1       	rjmp	.+738    	; 0x2e50 <ProcessInput+0xb10>
    2b6e:	61 2c       	mov	r6, r1
    2b70:	77 24       	eor	r7, r7
    2b72:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b74:	54 e6       	ldi	r21, 0x64	; 100
    2b76:	c5 2e       	mov	r12, r21
    2b78:	59 e7       	ldi	r21, 0x79	; 121
    2b7a:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2b7c:	61 e2       	ldi	r22, 0x21	; 33
    2b7e:	a6 2e       	mov	r10, r22
    2b80:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2b82:	88 24       	eor	r8, r8
    2b84:	83 94       	inc	r8
    2b86:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2b88:	e6 2c       	mov	r14, r6
    2b8a:	f1 2c       	mov	r15, r1
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	9c 01       	movw	r18, r24
    2b94:	2f 5c       	subi	r18, 0xCF	; 207
    2b96:	37 4c       	sbci	r19, 0xC7	; 199
    2b98:	79 01       	movw	r14, r18
    2b9a:	d9 01       	movw	r26, r18
    2b9c:	8d 91       	ld	r24, X+
    2b9e:	9c 91       	ld	r25, X
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	81 f0       	breq	.+32     	; 0x2bc4 <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	61 81       	ldd	r22, Z+1	; 0x01
    2ba8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <CheckLetter>
    2bac:	88 23       	and	r24, r24
    2bae:	51 f0       	breq	.+20     	; 0x2bc4 <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    2bb0:	6c e9       	ldi	r22, 0x9C	; 156
    2bb2:	78 e3       	ldi	r23, 0x38	; 56
    2bb4:	d7 01       	movw	r26, r14
    2bb6:	8d 91       	ld	r24, X+
    2bb8:	9c 91       	ld	r25, X
    2bba:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>
                                    x = 2;
    2bbe:	32 e0       	ldi	r19, 0x02	; 2
    2bc0:	63 2e       	mov	r6, r19
    2bc2:	1e c0       	rjmp	.+60     	; 0x2c00 <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    2bc4:	b1 e0       	ldi	r27, 0x01	; 1
    2bc6:	6b 12       	cpse	r6, r27
    2bc8:	1a c0       	rjmp	.+52     	; 0x2bfe <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bca:	e7 2d       	mov	r30, r7
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	df 01       	movw	r26, r30
    2bd0:	aa 0f       	add	r26, r26
    2bd2:	bb 1f       	adc	r27, r27
    2bd4:	aa 5f       	subi	r26, 0xFA	; 250
    2bd6:	b6 4c       	sbci	r27, 0xC6	; 198
    2bd8:	cd 92       	st	X+, r12
    2bda:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2bdc:	df 01       	movw	r26, r30
    2bde:	aa 0f       	add	r26, r26
    2be0:	bb 1f       	adc	r27, r27
    2be2:	aa 5b       	subi	r26, 0xBA	; 186
    2be4:	b6 4c       	sbci	r27, 0xC6	; 198
    2be6:	ad 92       	st	X+, r10
    2be8:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2bea:	ee 0f       	add	r30, r30
    2bec:	ff 1f       	adc	r31, r31
    2bee:	ea 57       	subi	r30, 0x7A	; 122
    2bf0:	f6 4c       	sbci	r31, 0xC6	; 198
    2bf2:	80 82       	st	Z, r8
    2bf4:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2bfa:	73 94       	inc	r7
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <ProcessInput+0x8c0>
    2bfe:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2c00:	63 94       	inc	r6
    2c02:	f1 e0       	ldi	r31, 0x01	; 1
    2c04:	6f 16       	cp	r6, r31
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <ProcessInput+0x8ca>
    2c08:	bf cf       	rjmp	.-130    	; 0x2b88 <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2c0a:	d8 01       	movw	r26, r16
    2c0c:	8c 91       	ld	r24, X
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <ProcessInput+0x8d4>
    2c12:	76 c3       	rjmp	.+1772   	; 0x3300 <ProcessInput+0xfc0>
                            PopulateObject(route[currDepth+1], &actObj1);
    2c14:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	ee 0f       	add	r30, r30
    2c1c:	ff 1f       	adc	r31, r31
    2c1e:	e8 53       	subi	r30, 0x38	; 56
    2c20:	f6 4c       	sbci	r31, 0xC6	; 198
    2c22:	67 ec       	ldi	r22, 0xC7	; 199
    2c24:	78 e3       	ldi	r23, 0x38	; 56
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2c2e:	e0 90 e5 38 	lds	r14, 0x38E5	; 0x8038e5 <actObj1.3989+0x1e>
    2c32:	f0 90 e6 38 	lds	r15, 0x38E6	; 0x8038e6 <actObj1.3989+0x1f>
    2c36:	b1 e0       	ldi	r27, 0x01	; 1
    2c38:	eb 16       	cp	r14, r27
    2c3a:	f1 04       	cpc	r15, r1
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <ProcessInput+0x900>
    2c3e:	9a c0       	rjmp	.+308    	; 0x2d74 <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2c40:	98 01       	movw	r18, r16
    2c42:	2e 5f       	subi	r18, 0xFE	; 254
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	61 e0       	ldi	r22, 0x01	; 1
    2c4a:	80 91 d7 38 	lds	r24, 0x38D7	; 0x8038d7 <actObj1.3989+0x10>
    2c4e:	90 91 d8 38 	lds	r25, 0x38D8	; 0x8038d8 <actObj1.3989+0x11>
    2c52:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <ExtEERead>
                                if (data[2] == '1') {
    2c56:	f8 01       	movw	r30, r16
    2c58:	42 81       	ldd	r20, Z+2	; 0x02
    2c5a:	21 e0       	ldi	r18, 0x01	; 1
    2c5c:	27 0d       	add	r18, r7
    2c5e:	87 2d       	mov	r24, r7
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	41 33       	cpi	r20, 0x31	; 49
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <ProcessInput+0x928>
    2c66:	6b c0       	rjmp	.+214    	; 0x2d3e <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    2c68:	30 91 a7 38 	lds	r19, 0x38A7	; 0x8038a7 <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    2c6c:	51 ee       	ldi	r21, 0xE1	; 225
    2c6e:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c70:	fc 01       	movw	r30, r24
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	ea 5f       	subi	r30, 0xFA	; 250
    2c78:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    2c7a:	54 30       	cpi	r21, 0x04	; 4
    2c7c:	60 f0       	brcs	.+24     	; 0x2c96 <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c7e:	44 e0       	ldi	r20, 0x04	; 4
    2c80:	59 e7       	ldi	r21, 0x79	; 121
    2c82:	40 83       	st	Z, r20
    2c84:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c86:	fc 01       	movw	r30, r24
    2c88:	ee 0f       	add	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	ea 5b       	subi	r30, 0xBA	; 186
    2c8e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c90:	4a e1       	ldi	r20, 0x1A	; 26
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	64 c0       	rjmp	.+200    	; 0x2d5e <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c96:	6e e8       	ldi	r22, 0x8E	; 142
    2c98:	75 e7       	ldi	r23, 0x75	; 117
    2c9a:	60 83       	st	Z, r22
    2c9c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	ee 0f       	add	r30, r30
    2ca2:	ff 1f       	adc	r31, r31
    2ca4:	ea 5b       	subi	r30, 0xBA	; 186
    2ca6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ca8:	62 eb       	ldi	r22, 0xB2	; 178
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	60 83       	st	Z, r22
    2cae:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	ea 57       	subi	r30, 0x7A	; 122
    2cb8:	f6 4c       	sbci	r31, 0xC6	; 198
    2cba:	e0 82       	st	Z, r14
    2cbc:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cbe:	82 2f       	mov	r24, r18
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	ea 5f       	subi	r30, 0xFA	; 250
    2cca:	f6 4c       	sbci	r31, 0xC6	; 198
    2ccc:	6b e5       	ldi	r22, 0x5B	; 91
    2cce:	7a e7       	ldi	r23, 0x7A	; 122
    2cd0:	60 83       	st	Z, r22
    2cd2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	ee 0f       	add	r30, r30
    2cd8:	ff 1f       	adc	r31, r31
    2cda:	ea 5b       	subi	r30, 0xBA	; 186
    2cdc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cde:	62 e0       	ldi	r22, 0x02	; 2
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	60 83       	st	Z, r22
    2ce4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	fc 01       	movw	r30, r24
    2cec:	ea 57       	subi	r30, 0x7A	; 122
    2cee:	f6 4c       	sbci	r31, 0xC6	; 198
    2cf0:	e0 82       	st	Z, r14
    2cf2:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	87 0d       	add	r24, r7
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	f3 e0       	ldi	r31, 0x03	; 3
    2cfc:	7f 0e       	add	r7, r31
    2cfe:	fc 01       	movw	r30, r24
    2d00:	ee 0f       	add	r30, r30
    2d02:	ff 1f       	adc	r31, r31
    2d04:	ea 5f       	subi	r30, 0xFA	; 250
    2d06:	f6 4c       	sbci	r31, 0xC6	; 198
    2d08:	60 eb       	ldi	r22, 0xB0	; 176
    2d0a:	78 e7       	ldi	r23, 0x78	; 120
    2d0c:	60 83       	st	Z, r22
    2d0e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2d10:	fc 01       	movw	r30, r24
    2d12:	ee 0f       	add	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	ea 5b       	subi	r30, 0xBA	; 186
    2d18:	f6 4c       	sbci	r31, 0xC6	; 198
    2d1a:	62 e1       	ldi	r22, 0x12	; 18
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	60 83       	st	Z, r22
    2d20:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	fc 01       	movw	r30, r24
    2d28:	ea 57       	subi	r30, 0x7A	; 122
    2d2a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d2c:	e0 82       	st	Z, r14
    2d2e:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2d30:	40 93 f5 38 	sts	0x38F5, r20	; 0x8038f5 <specialInput>
                                        specialInput[1] = item;
    2d34:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <specialInput+0x1>
                                        specialInput[2] = 0;
    2d38:	10 92 f7 38 	sts	0x38F7, r1	; 0x8038f7 <specialInput+0x2>
    2d3c:	e1 c2       	rjmp	.+1474   	; 0x3300 <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d3e:	fc 01       	movw	r30, r24
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	ea 5f       	subi	r30, 0xFA	; 250
    2d46:	f6 4c       	sbci	r31, 0xC6	; 198
    2d48:	40 e4       	ldi	r20, 0x40	; 64
    2d4a:	56 e7       	ldi	r21, 0x76	; 118
    2d4c:	40 83       	st	Z, r20
    2d4e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2d50:	fc 01       	movw	r30, r24
    2d52:	ee 0f       	add	r30, r30
    2d54:	ff 1f       	adc	r31, r31
    2d56:	ea 5b       	subi	r30, 0xBA	; 186
    2d58:	f6 4c       	sbci	r31, 0xC6	; 198
    2d5a:	42 e4       	ldi	r20, 0x42	; 66
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	40 83       	st	Z, r20
    2d60:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    2d62:	88 0f       	add	r24, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	fc 01       	movw	r30, r24
    2d68:	ea 57       	subi	r30, 0x7A	; 122
    2d6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d6c:	e0 82       	st	Z, r14
    2d6e:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    2d70:	72 2e       	mov	r7, r18
    2d72:	c6 c2       	rjmp	.+1420   	; 0x3300 <ProcessInput+0xfc0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    2d74:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <actObj1.3989+0x9>
    2d78:	80 91 a7 38 	lds	r24, 0x38A7	; 0x8038a7 <actObj2.3990+0xb>
    2d7c:	98 13       	cpse	r25, r24
    2d7e:	2f c0       	rjmp	.+94     	; 0x2dde <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2d80:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <actObj1.3989+0x26>
    2d84:	30 91 ee 38 	lds	r19, 0x38EE	; 0x8038ee <actObj1.3989+0x27>
    2d88:	ff 24       	eor	r15, r15
    2d8a:	f3 94       	inc	r15
    2d8c:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d8e:	87 2d       	mov	r24, r7
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	fc 01       	movw	r30, r24
    2d94:	ee 0f       	add	r30, r30
    2d96:	ff 1f       	adc	r31, r31
    2d98:	ea 5f       	subi	r30, 0xFA	; 250
    2d9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d9c:	40 91 df 38 	lds	r20, 0x38DF	; 0x8038df <actObj1.3989+0x18>
    2da0:	50 91 e0 38 	lds	r21, 0x38E0	; 0x8038e0 <actObj1.3989+0x19>
    2da4:	40 83       	st	Z, r20
    2da6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2da8:	fc 01       	movw	r30, r24
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	ea 5b       	subi	r30, 0xBA	; 186
    2db0:	f6 4c       	sbci	r31, 0xC6	; 198
    2db2:	20 83       	st	Z, r18
    2db4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	fc 01       	movw	r30, r24
    2dbc:	ea 57       	subi	r30, 0x7A	; 122
    2dbe:	f6 4c       	sbci	r31, 0xC6	; 198
    2dc0:	10 82       	st	Z, r1
    2dc2:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    2dc4:	80 91 f1 38 	lds	r24, 0x38F1	; 0x8038f1 <actObj1.3989+0x2a>
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2dce:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2dd2:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0xa>
    2dd6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2dda:	7f 2c       	mov	r7, r15
    2ddc:	91 c2       	rjmp	.+1314   	; 0x3300 <ProcessInput+0xfc0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    2dde:	d8 01       	movw	r26, r16
    2de0:	8c 91       	ld	r24, X
    2de2:	85 37       	cpi	r24, 0x75	; 117
    2de4:	99 f4       	brne	.+38     	; 0x2e0c <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2de6:	87 2d       	mov	r24, r7
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	fc 01       	movw	r30, r24
    2dec:	ee 0f       	add	r30, r30
    2dee:	ff 1f       	adc	r31, r31
    2df0:	ea 5f       	subi	r30, 0xFA	; 250
    2df2:	f6 4c       	sbci	r31, 0xC6	; 198
    2df4:	24 e0       	ldi	r18, 0x04	; 4
    2df6:	39 e7       	ldi	r19, 0x79	; 121
    2df8:	20 83       	st	Z, r18
    2dfa:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	ea 5b       	subi	r30, 0xBA	; 186
    2e04:	f6 4c       	sbci	r31, 0xC6	; 198
    2e06:	2a e1       	ldi	r18, 0x1A	; 26
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	15 c0       	rjmp	.+42     	; 0x2e36 <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2e0c:	87 36       	cpi	r24, 0x67	; 103
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <ProcessInput+0xad2>
    2e10:	77 c2       	rjmp	.+1262   	; 0x3300 <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e12:	87 2d       	mov	r24, r7
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	fc 01       	movw	r30, r24
    2e18:	ee 0f       	add	r30, r30
    2e1a:	ff 1f       	adc	r31, r31
    2e1c:	ea 5f       	subi	r30, 0xFA	; 250
    2e1e:	f6 4c       	sbci	r31, 0xC6	; 198
    2e20:	2d ed       	ldi	r18, 0xDD	; 221
    2e22:	36 e7       	ldi	r19, 0x76	; 118
    2e24:	20 83       	st	Z, r18
    2e26:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2e28:	fc 01       	movw	r30, r24
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	ea 5b       	subi	r30, 0xBA	; 186
    2e30:	f6 4c       	sbci	r31, 0xC6	; 198
    2e32:	28 e2       	ldi	r18, 0x28	; 40
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	20 83       	st	Z, r18
    2e38:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	fc 01       	movw	r30, r24
    2e40:	ea 57       	subi	r30, 0x7A	; 122
    2e42:	f6 4c       	sbci	r31, 0xC6	; 198
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	80 83       	st	Z, r24
    2e4a:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2e4c:	73 94       	inc	r7
    2e4e:	58 c2       	rjmp	.+1200   	; 0x3300 <ProcessInput+0xfc0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2e50:	67 ec       	ldi	r22, 0xC7	; 199
    2e52:	78 e3       	ldi	r23, 0x38	; 56
    2e54:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    2e58:	f8 01       	movw	r30, r16
    2e5a:	80 81       	ld	r24, Z
    2e5c:	84 37       	cpi	r24, 0x74	; 116
    2e5e:	69 f5       	brne	.+90     	; 0x2eba <ProcessInput+0xb7a>
    2e60:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x8>
    2e64:	83 fd       	sbrc	r24, 3
    2e66:	4a c0       	rjmp	.+148    	; 0x2efc <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e68:	8e e1       	ldi	r24, 0x1E	; 30
    2e6a:	99 e7       	ldi	r25, 0x79	; 121
    2e6c:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2e70:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2e74:	8e e1       	ldi	r24, 0x1E	; 30
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    2e7c:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    2e88:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2e8c:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x1a>
    2e90:	90 91 e2 38 	lds	r25, 0x38E2	; 0x8038e2 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e94:	20 91 d3 38 	lds	r18, 0x38D3	; 0x8038d3 <actObj1.3989+0xc>
    2e98:	30 91 d4 38 	lds	r19, 0x38D4	; 0x8038d4 <actObj1.3989+0xd>
    2e9c:	20 93 0a 39 	sts	0x390A, r18	; 0x80390a <reactStr+0x4>
    2ea0:	30 93 0b 39 	sts	0x390B, r19	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    2ea4:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x44>
    2ea8:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x45>
    reactStr[2][number]=type;
    2eac:	10 92 8a 39 	sts	0x398A, r1	; 0x80398a <reactStr+0x84>
    2eb0:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2eb4:	a3 e0       	ldi	r26, 0x03	; 3
    2eb6:	7a 2e       	mov	r7, r26
    2eb8:	23 c2       	rjmp	.+1094   	; 0x3300 <ProcessInput+0xfc0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    2eba:	85 37       	cpi	r24, 0x75	; 117
    2ebc:	69 f4       	brne	.+26     	; 0x2ed8 <ProcessInput+0xb98>
    2ebe:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x8>
    2ec2:	84 fd       	sbrc	r24, 4
    2ec4:	1b c0       	rjmp	.+54     	; 0x2efc <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ec6:	84 e0       	ldi	r24, 0x04	; 4
    2ec8:	99 e7       	ldi	r25, 0x79	; 121
    2eca:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2ece:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2ed2:	8a e1       	ldi	r24, 0x1A	; 26
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	f9 ca       	rjmp	.-2574   	; 0x24ca <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    2ed8:	82 37       	cpi	r24, 0x72	; 114
    2eda:	69 f4       	brne	.+26     	; 0x2ef6 <ProcessInput+0xbb6>
    2edc:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x8>
    2ee0:	85 fd       	sbrc	r24, 5
    2ee2:	0c c0       	rjmp	.+24     	; 0x2efc <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ee4:	89 ee       	ldi	r24, 0xE9	; 233
    2ee6:	98 e7       	ldi	r25, 0x78	; 120
    2ee8:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2eec:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2ef0:	8b e1       	ldi	r24, 0x1B	; 27
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	ea ca       	rjmp	.-2604   	; 0x24ca <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    2ef6:	87 36       	cpi	r24, 0x67	; 103
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <ProcessInput+0xbbc>
    2efa:	52 ca       	rjmp	.-2908   	; 0x23a0 <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2efc:	e0 90 e5 38 	lds	r14, 0x38E5	; 0x8038e5 <actObj1.3989+0x1e>
    2f00:	f0 90 e6 38 	lds	r15, 0x38E6	; 0x8038e6 <actObj1.3989+0x1f>
    2f04:	f1 e0       	ldi	r31, 0x01	; 1
    2f06:	ef 16       	cp	r14, r31
    2f08:	f1 04       	cpc	r15, r1
    2f0a:	11 f5       	brne	.+68     	; 0x2f50 <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2f0c:	98 01       	movw	r18, r16
    2f0e:	2e 5f       	subi	r18, 0xFE	; 254
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	80 91 d7 38 	lds	r24, 0x38D7	; 0x8038d7 <actObj1.3989+0x10>
    2f1a:	90 91 d8 38 	lds	r25, 0x38D8	; 0x8038d8 <actObj1.3989+0x11>
    2f1e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <ExtEERead>
                                if (data[2] == '1') {
    2f22:	d8 01       	movw	r26, r16
    2f24:	12 96       	adiw	r26, 0x02	; 2
    2f26:	8c 91       	ld	r24, X
    2f28:	81 33       	cpi	r24, 0x31	; 49
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <ProcessInput+0xbee>
    2f2c:	8a cc       	rjmp	.-1772   	; 0x2842 <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f2e:	83 e6       	ldi	r24, 0x63	; 99
    2f30:	95 e7       	ldi	r25, 0x75	; 117
    2f32:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2f36:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2f3a:	8b e2       	ldi	r24, 0x2B	; 43
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    2f42:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2f46:	e0 92 88 39 	sts	0x3988, r14	; 0x803988 <reactStr+0x82>
    2f4a:	f0 92 89 39 	sts	0x3989, r15	; 0x803989 <reactStr+0x83>
    2f4e:	c7 ca       	rjmp	.-2674   	; 0x24de <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    2f50:	e1 14       	cp	r14, r1
    2f52:	f1 04       	cpc	r15, r1
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <ProcessInput+0xc18>
    2f56:	59 c0       	rjmp	.+178    	; 0x300a <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f58:	80 91 d7 38 	lds	r24, 0x38D7	; 0x8038d7 <actObj1.3989+0x10>
    2f5c:	90 91 d8 38 	lds	r25, 0x38D8	; 0x8038d8 <actObj1.3989+0x11>
    2f60:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    2f64:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    2f68:	e0 92 48 39 	sts	0x3948, r14	; 0x803948 <reactStr+0x42>
    2f6c:	f0 92 49 39 	sts	0x3949, r15	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    2f70:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    2f74:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f78:	8b e5       	ldi	r24, 0x5B	; 91
    2f7a:	9a e7       	ldi	r25, 0x7A	; 122
    2f7c:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <reactStr+0x4>
    2f80:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x44>
    2f8c:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x45>
    reactStr[2][number]=type;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x84>
    2f98:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f9c:	20 eb       	ldi	r18, 0xB0	; 176
    2f9e:	38 e7       	ldi	r19, 0x78	; 120
    2fa0:	20 93 0c 39 	sts	0x390C, r18	; 0x80390c <reactStr+0x6>
    2fa4:	30 93 0d 39 	sts	0x390D, r19	; 0x80390d <reactStr+0x7>
    reactStr[1][number]=length;
    2fa8:	22 e1       	ldi	r18, 0x12	; 18
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	20 93 4c 39 	sts	0x394C, r18	; 0x80394c <reactStr+0x46>
    2fb0:	30 93 4d 39 	sts	0x394D, r19	; 0x80394d <reactStr+0x47>
    reactStr[2][number]=type;
    2fb4:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x86>
    2fb8:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    2fbc:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3989+0x20>
    2fc0:	90 91 e8 38 	lds	r25, 0x38E8	; 0x8038e8 <actObj1.3989+0x21>
    2fc4:	40 97       	sbiw	r24, 0x10	; 16
    2fc6:	30 f0       	brcs	.+12     	; 0x2fd4 <ProcessInput+0xc94>
    2fc8:	8f e0       	ldi	r24, 0x0F	; 15
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 93 e7 38 	sts	0x38E7, r24	; 0x8038e7 <actObj1.3989+0x20>
    2fd0:	90 93 e8 38 	sts	0x38E8, r25	; 0x8038e8 <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    2fd4:	25 ef       	ldi	r18, 0xF5	; 245
    2fd6:	38 e3       	ldi	r19, 0x38	; 56
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	60 91 e7 38 	lds	r22, 0x38E7	; 0x8038e7 <actObj1.3989+0x20>
    2fde:	80 91 d9 38 	lds	r24, 0x38D9	; 0x8038d9 <actObj1.3989+0x12>
    2fe2:	90 91 da 38 	lds	r25, 0x38DA	; 0x8038da <actObj1.3989+0x13>
    2fe6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    2fea:	65 ef       	ldi	r22, 0xF5	; 245
    2fec:	78 e3       	ldi	r23, 0x38	; 56
    2fee:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3989+0x20>
    2ff2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    2ff6:	e0 91 e7 38 	lds	r30, 0x38E7	; 0x8038e7 <actObj1.3989+0x20>
    2ffa:	f0 91 e8 38 	lds	r31, 0x38E8	; 0x8038e8 <actObj1.3989+0x21>
    2ffe:	eb 50       	subi	r30, 0x0B	; 11
    3000:	f7 4c       	sbci	r31, 0xC7	; 199
    3002:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3004:	f4 e0       	ldi	r31, 0x04	; 4
    3006:	7f 2e       	mov	r7, r31
    3008:	7b c1       	rjmp	.+758    	; 0x3300 <ProcessInput+0xfc0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    300a:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3989+0x7>
    300e:	0e 94 08 09 	call	0x1210	; 0x1210 <CheckState>
    3012:	88 23       	and	r24, r24
    3014:	01 f1       	breq	.+64     	; 0x3056 <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3016:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3989+0x26>
    301a:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    301e:	20 91 df 38 	lds	r18, 0x38DF	; 0x8038df <actObj1.3989+0x18>
    3022:	30 91 e0 38 	lds	r19, 0x38E0	; 0x8038e0 <actObj1.3989+0x19>
    3026:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    302a:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    302e:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    3032:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    3036:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    303a:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    303e:	80 91 f1 38 	lds	r24, 0x38F1	; 0x8038f1 <actObj1.3989+0x2a>
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3048:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    304c:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0xa>
    3050:	0e 94 fe 08 	call	0x11fc	; 0x11fc <UpdateState>
    3054:	44 ca       	rjmp	.-2936   	; 0x24de <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3056:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3989+0x24>
    305a:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    305e:	20 91 dd 38 	lds	r18, 0x38DD	; 0x8038dd <actObj1.3989+0x16>
    3062:	30 91 de 38 	lds	r19, 0x38DE	; 0x8038de <actObj1.3989+0x17>
    3066:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    306a:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    306e:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    3072:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    3076:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    307a:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    307e:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x29>
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3088:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    308c:	28 ca       	rjmp	.-2992   	; 0x24de <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    308e:	f8 01       	movw	r30, r16
    3090:	80 81       	ld	r24, Z
    3092:	84 37       	cpi	r24, 0x74	; 116
    3094:	11 f0       	breq	.+4      	; 0x309a <ProcessInput+0xd5a>
    3096:	87 36       	cpi	r24, 0x67	; 103
    3098:	19 f4       	brne	.+6      	; 0x30a0 <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    309a:	8c e3       	ldi	r24, 0x3C	; 60
    309c:	99 e7       	ldi	r25, 0x79	; 121
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <ProcessInput+0xd64>
    30a0:	80 e5       	ldi	r24, 0x50	; 80
    30a2:	99 e7       	ldi	r25, 0x79	; 121
    30a4:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    30a8:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    30ac:	84 e1       	ldi	r24, 0x14	; 20
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0c ca       	rjmp	.-3048   	; 0x24ca <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    30b2:	81 36       	cpi	r24, 0x61	; 97
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <ProcessInput+0xd78>
    30b6:	c5 cb       	rjmp	.-2166   	; 0x2842 <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    30b8:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <specialPassed>
    30bc:	82 30       	cpi	r24, 0x02	; 2
    30be:	08 f4       	brcc	.+2      	; 0x30c2 <ProcessInput+0xd82>
    30c0:	b3 c0       	rjmp	.+358    	; 0x3228 <ProcessInput+0xee8>
                if (data[1] > 0) {
    30c2:	d8 01       	movw	r26, r16
    30c4:	11 96       	adiw	r26, 0x01	; 1
    30c6:	2c 91       	ld	r18, X
    30c8:	22 23       	and	r18, r18
    30ca:	09 f4       	brne	.+2      	; 0x30ce <ProcessInput+0xd8e>
    30cc:	a4 c0       	rjmp	.+328    	; 0x3216 <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    30ce:	fe 01       	movw	r30, r28
    30d0:	31 96       	adiw	r30, 0x01	; 1
    30d2:	7f 01       	movw	r14, r30
    30d4:	8a e0       	ldi	r24, 0x0A	; 10
    30d6:	df 01       	movw	r26, r30
    30d8:	1d 92       	st	X+, r1
    30da:	8a 95       	dec	r24
    30dc:	e9 f7       	brne	.-6      	; 0x30d8 <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    30de:	21 53       	subi	r18, 0x31	; 49
    30e0:	f8 01       	movw	r30, r16
    30e2:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    30e4:	32 81       	ldd	r19, Z+2	; 0x02
    30e6:	31 53       	subi	r19, 0x31	; 49
    30e8:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    30ea:	83 81       	ldd	r24, Z+3	; 0x03
    30ec:	81 36       	cpi	r24, 0x61	; 97
    30ee:	11 f4       	brne	.+4      	; 0x30f4 <ProcessInput+0xdb4>
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	08 c0       	rjmp	.+16     	; 0x3104 <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    30f4:	85 36       	cpi	r24, 0x65	; 101
    30f6:	11 f4       	brne	.+4      	; 0x30fc <ProcessInput+0xdbc>
    30f8:	13 82       	std	Z+3, r1	; 0x03
    30fa:	08 c0       	rjmp	.+16     	; 0x310c <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    30fc:	86 36       	cpi	r24, 0x66	; 102
    30fe:	21 f4       	brne	.+8      	; 0x3108 <ProcessInput+0xdc8>
    3100:	83 e0       	ldi	r24, 0x03	; 3
    3102:	f8 01       	movw	r30, r16
    3104:	83 83       	std	Z+3, r24	; 0x03
    3106:	02 c0       	rjmp	.+4      	; 0x310c <ProcessInput+0xdcc>
                    else data[3] = 2;
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    310c:	21 fd       	sbrc	r18, 1
    310e:	04 c0       	rjmp	.+8      	; 0x3118 <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	dc 01       	movw	r26, r24
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e1       	ldi	r26, 0x10	; 16
    311e:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3120:	20 ff       	sbrs	r18, 0
    3122:	03 c0       	rjmp	.+6      	; 0x312a <ProcessInput+0xdea>
    3124:	9f 5f       	subi	r25, 0xFF	; 255
    3126:	af 4f       	sbci	r26, 0xFF	; 255
    3128:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    312a:	f8 01       	movw	r30, r16
    312c:	23 81       	ldd	r18, Z+3	; 0x03
    312e:	21 fd       	sbrc	r18, 1
    3130:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3132:	20 ff       	sbrs	r18, 0
    3134:	03 c0       	rjmp	.+6      	; 0x313c <ProcessInput+0xdfc>
    3136:	40 96       	adiw	r24, 0x10	; 16
    3138:	a1 1d       	adc	r26, r1
    313a:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    313c:	31 ff       	sbrs	r19, 1
    313e:	03 c0       	rjmp	.+6      	; 0x3146 <ProcessInput+0xe06>
    3140:	90 5f       	subi	r25, 0xF0	; 240
    3142:	af 4f       	sbci	r26, 0xFF	; 255
    3144:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3146:	30 ff       	sbrs	r19, 0
    3148:	03 c0       	rjmp	.+6      	; 0x3150 <ProcessInput+0xe10>
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	a1 1d       	adc	r26, r1
    314e:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3150:	40 91 30 38 	lds	r20, 0x3830	; 0x803830 <whoami>
    3154:	24 e0       	ldi	r18, 0x04	; 4
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	24 1b       	sub	r18, r20
    315a:	31 09       	sbc	r19, r1
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	04 c0       	rjmp	.+8      	; 0x316a <ProcessInput+0xe2a>
    3162:	66 0f       	add	r22, r22
    3164:	77 1f       	adc	r23, r23
    3166:	88 1f       	adc	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	2a 95       	dec	r18
    316c:	d2 f7       	brpl	.-12     	; 0x3162 <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    316e:	26 e0       	ldi	r18, 0x06	; 6
    3170:	35 e7       	ldi	r19, 0x75	; 117
    3172:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    3176:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    317a:	20 e2       	ldi	r18, 0x20	; 32
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	20 93 48 39 	sts	0x3948, r18	; 0x803948 <reactStr+0x42>
    3182:	30 93 49 39 	sts	0x3949, r19	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    3186:	21 e0       	ldi	r18, 0x01	; 1
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	20 93 88 39 	sts	0x3988, r18	; 0x803988 <reactStr+0x82>
    318e:	30 93 89 39 	sts	0x3989, r19	; 0x803989 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    3192:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    3194:	b5 2e       	mov	r11, r21
    3196:	ea e0       	ldi	r30, 0x0A	; 10
    3198:	4e 2e       	mov	r4, r30
    319a:	51 2c       	mov	r5, r1
    319c:	61 2c       	mov	r6, r1
    319e:	71 2c       	mov	r7, r1
    31a0:	67 01       	movw	r12, r14
    31a2:	cb 0c       	add	r12, r11
    31a4:	d1 1c       	adc	r13, r1
    31a6:	a3 01       	movw	r20, r6
    31a8:	92 01       	movw	r18, r4
    31aa:	46 d2       	rcall	.+1164   	; 0x3638 <__udivmodsi4>
    31ac:	d6 01       	movw	r26, r12
    31ae:	6c 93       	st	X, r22
                        answer /= 10;
    31b0:	b9 01       	movw	r22, r18
    31b2:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    31b4:	61 15       	cp	r22, r1
    31b6:	71 05       	cpc	r23, r1
    31b8:	81 05       	cpc	r24, r1
    31ba:	91 05       	cpc	r25, r1
    31bc:	51 f4       	brne	.+20     	; 0x31d2 <ProcessInput+0xe92>
    31be:	26 e0       	ldi	r18, 0x06	; 6
    31c0:	c2 2e       	mov	r12, r18
    31c2:	29 e3       	ldi	r18, 0x39	; 57
    31c4:	d2 2e       	mov	r13, r18
    31c6:	32 e0       	ldi	r19, 0x02	; 2
    31c8:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    31ca:	88 24       	eor	r8, r8
    31cc:	83 94       	inc	r8
    31ce:	91 2c       	mov	r9, r1
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    31d2:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    31d4:	e5 cf       	rjmp	.-54     	; 0x31a0 <ProcessInput+0xe60>
    31d6:	f2 e0       	ldi	r31, 0x02	; 2
    31d8:	cf 0e       	add	r12, r31
    31da:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    31dc:	29 e0       	ldi	r18, 0x09	; 9
    31de:	2b 15       	cp	r18, r11
    31e0:	08 f4       	brcc	.+2      	; 0x31e4 <ProcessInput+0xea4>
    31e2:	8c c0       	rjmp	.+280    	; 0x32fc <ProcessInput+0xfbc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    31e4:	73 94       	inc	r7
    31e6:	f7 01       	movw	r30, r14
    31e8:	eb 0d       	add	r30, r11
    31ea:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31ec:	80 81       	ld	r24, Z
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	8d 52       	subi	r24, 0x2D	; 45
    31f2:	9b 48       	sbci	r25, 0x8B	; 139
    31f4:	f6 01       	movw	r30, r12
    31f6:	82 83       	std	Z+2, r24	; 0x02
    31f8:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    31fa:	ee 5b       	subi	r30, 0xBE	; 190
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 82       	st	Z, r8
    3200:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    3202:	e0 5c       	subi	r30, 0xC0	; 192
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	80 82       	st	Z, r8
    3208:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    320a:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0xa>
    320e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    3212:	b3 94       	inc	r11
    3214:	e0 cf       	rjmp	.-64     	; 0x31d6 <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3216:	86 e2       	ldi	r24, 0x26	; 38
    3218:	95 e7       	ldi	r25, 0x75	; 117
    321a:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    321e:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    3222:	8d e3       	ldi	r24, 0x3D	; 61
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	5e c0       	rjmp	.+188    	; 0x32e4 <ProcessInput+0xfa4>
    3228:	e0 91 27 38 	lds	r30, 0x3827	; 0x803827 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	ee 0f       	add	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	e8 53       	subi	r30, 0x38	; 56
    3234:	f6 4c       	sbci	r31, 0xC6	; 198
    3236:	67 ec       	ldi	r22, 0xC7	; 199
    3238:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	09 f0       	breq	.+2      	; 0x3240 <ProcessInput+0xf00>
    323e:	46 c0       	rjmp	.+140    	; 0x32cc <ProcessInput+0xf8c>
                PopulateObject(route[currDepth+1], &actObj1);
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3248:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3989+0x7>
    324c:	0e 94 08 09 	call	0x1210	; 0x1210 <CheckState>
    3250:	88 23       	and	r24, r24
    3252:	01 f1       	breq	.+64     	; 0x3294 <ProcessInput+0xf54>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3254:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3989+0x26>
    3258:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    325c:	20 91 df 38 	lds	r18, 0x38DF	; 0x8038df <actObj1.3989+0x18>
    3260:	30 91 e0 38 	lds	r19, 0x38E0	; 0x8038e0 <actObj1.3989+0x19>
    3264:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    3268:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    326c:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    3270:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    3274:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    3278:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    327c:	80 91 f1 38 	lds	r24, 0x38F1	; 0x8038f1 <actObj1.3989+0x2a>
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3286:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    328a:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0xa>
    328e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <UpdateState>
    3292:	32 c0       	rjmp	.+100    	; 0x32f8 <ProcessInput+0xfb8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3294:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3989+0x24>
    3298:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    329c:	20 91 dd 38 	lds	r18, 0x38DD	; 0x8038dd <actObj1.3989+0x16>
    32a0:	30 91 de 38 	lds	r19, 0x38DE	; 0x8038de <actObj1.3989+0x17>
    32a4:	20 93 08 39 	sts	0x3908, r18	; 0x803908 <reactStr+0x2>
    32a8:	30 93 09 39 	sts	0x3909, r19	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    32ac:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    32b0:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    32b4:	10 92 88 39 	sts	0x3988, r1	; 0x803988 <reactStr+0x82>
    32b8:	10 92 89 39 	sts	0x3989, r1	; 0x803989 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    32bc:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x29>
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    32c6:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    32ca:	16 c0       	rjmp	.+44     	; 0x32f8 <ProcessInput+0xfb8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32d4:	8e e9       	ldi	r24, 0x9E	; 158
    32d6:	98 e7       	ldi	r25, 0x78	; 120
    32d8:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    32dc:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    32e0:	82 e1       	ldi	r24, 0x12	; 18
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    32e8:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    32f4:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    32f8:	82 e0       	ldi	r24, 0x02	; 2
    32fa:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    32fc:	10 92 f5 38 	sts	0x38F5, r1	; 0x8038f5 <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3300:	8b e5       	ldi	r24, 0x5B	; 91
    3302:	9a e7       	ldi	r25, 0x7A	; 122
    3304:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <reactStr>
    3308:	90 93 07 39 	sts	0x3907, r25	; 0x803907 <reactStr+0x1>
    reactStr[1][number]=length;
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	80 93 46 39 	sts	0x3946, r24	; 0x803946 <reactStr+0x40>
    3314:	90 93 47 39 	sts	0x3947, r25	; 0x803947 <reactStr+0x41>
    reactStr[2][number]=type;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	80 93 86 39 	sts	0x3986, r24	; 0x803986 <reactStr+0x80>
    3320:	90 93 87 39 	sts	0x3987, r25	; 0x803987 <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3324:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <specialInput>
    3328:	88 23       	and	r24, r24
    332a:	19 f0       	breq	.+6      	; 0x3332 <ProcessInput+0xff2>
    332c:	70 92 05 39 	sts	0x3905, r7	; 0x803905 <responseList>
    3330:	9a c0       	rjmp	.+308    	; 0x3466 <ProcessInput+0x1126>
    3332:	87 2d       	mov	r24, r7
    3334:	12 c0       	rjmp	.+36     	; 0x335a <ProcessInput+0x101a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3336:	8b e5       	ldi	r24, 0x5B	; 91
    3338:	9a e7       	ldi	r25, 0x7A	; 122
    333a:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <reactStr>
    333e:	90 93 07 39 	sts	0x3907, r25	; 0x803907 <reactStr+0x1>
    reactStr[1][number]=length;
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	80 93 46 39 	sts	0x3946, r24	; 0x803946 <reactStr+0x40>
    334a:	90 93 47 39 	sts	0x3947, r25	; 0x803947 <reactStr+0x41>
    reactStr[2][number]=type;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	80 93 86 39 	sts	0x3986, r24	; 0x803986 <reactStr+0x80>
    3356:	90 93 87 39 	sts	0x3987, r25	; 0x803987 <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    335a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <SetStandardResponse>
    335e:	80 93 05 39 	sts	0x3905, r24	; 0x803905 <responseList>
    3362:	81 c0       	rjmp	.+258    	; 0x3466 <ProcessInput+0x1126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3364:	84 ed       	ldi	r24, 0xD4	; 212
    3366:	99 e7       	ldi	r25, 0x79	; 121
    3368:	b0 cd       	rjmp	.-1184   	; 0x2eca <ProcessInput+0xb8a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    336a:	b2 e0       	ldi	r27, 0x02	; 2
    336c:	fb 12       	cpse	r15, r27
    336e:	18 c8       	rjmp	.-4048   	; 0x23a0 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3370:	d8 01       	movw	r26, r16
    3372:	11 96       	adiw	r26, 0x01	; 1
    3374:	6c 91       	ld	r22, X
    3376:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <CheckLetter>
    337a:	88 23       	and	r24, r24
    337c:	09 f4       	brne	.+2      	; 0x3380 <ProcessInput+0x1040>
    337e:	5b c0       	rjmp	.+182    	; 0x3436 <ProcessInput+0x10f6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	9c 01       	movw	r18, r24
    338a:	2f 5c       	subi	r18, 0xCF	; 207
    338c:	37 4c       	sbci	r19, 0xC7	; 199
    338e:	79 01       	movw	r14, r18
    3390:	67 ec       	ldi	r22, 0xC7	; 199
    3392:	78 e3       	ldi	r23, 0x38	; 56
    3394:	d9 01       	movw	r26, r18
    3396:	8d 91       	ld	r24, X+
    3398:	9c 91       	ld	r25, X
    339a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    339e:	84 ed       	ldi	r24, 0xD4	; 212
    33a0:	97 e7       	ldi	r25, 0x77	; 119
    33a2:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    33a6:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    33aa:	80 e1       	ldi	r24, 0x10	; 16
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr+0x42>
    33b2:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x43>
    reactStr[2][number]=type;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x82>
    33be:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    33c2:	20 91 e1 38 	lds	r18, 0x38E1	; 0x8038e1 <actObj1.3989+0x1a>
    33c6:	30 91 e2 38 	lds	r19, 0x38E2	; 0x8038e2 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33ca:	40 91 d3 38 	lds	r20, 0x38D3	; 0x8038d3 <actObj1.3989+0xc>
    33ce:	50 91 d4 38 	lds	r21, 0x38D4	; 0x8038d4 <actObj1.3989+0xd>
    33d2:	40 93 0a 39 	sts	0x390A, r20	; 0x80390a <reactStr+0x4>
    33d6:	50 93 0b 39 	sts	0x390B, r21	; 0x80390b <reactStr+0x5>
    reactStr[1][number]=length;
    33da:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x44>
    33de:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x45>
    reactStr[2][number]=type;
    33e2:	10 92 8a 39 	sts	0x398A, r1	; 0x80398a <reactStr+0x84>
    33e6:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33ea:	2b e5       	ldi	r18, 0x5B	; 91
    33ec:	3a e7       	ldi	r19, 0x7A	; 122
    33ee:	20 93 0c 39 	sts	0x390C, r18	; 0x80390c <reactStr+0x6>
    33f2:	30 93 0d 39 	sts	0x390D, r19	; 0x80390d <reactStr+0x7>
    reactStr[1][number]=length;
    33f6:	22 e0       	ldi	r18, 0x02	; 2
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	20 93 4c 39 	sts	0x394C, r18	; 0x80394c <reactStr+0x46>
    33fe:	30 93 4d 39 	sts	0x394D, r19	; 0x80394d <reactStr+0x47>
    reactStr[2][number]=type;
    3402:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x86>
    3406:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    340a:	27 e9       	ldi	r18, 0x97	; 151
    340c:	37 e7       	ldi	r19, 0x77	; 119
    340e:	20 93 0e 39 	sts	0x390E, r18	; 0x80390e <reactStr+0x8>
    3412:	30 93 0f 39 	sts	0x390F, r19	; 0x80390f <reactStr+0x9>
    reactStr[1][number]=length;
    3416:	2d e3       	ldi	r18, 0x3D	; 61
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x48>
    341e:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x49>
    reactStr[2][number]=type;
    3422:	80 93 8e 39 	sts	0x398E, r24	; 0x80398e <reactStr+0x88>
    3426:	90 93 8f 39 	sts	0x398F, r25	; 0x80398f <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    342a:	f7 01       	movw	r30, r14
    342c:	10 82       	st	Z, r1
    342e:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3430:	f5 e0       	ldi	r31, 0x05	; 5
    3432:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3434:	65 cf       	rjmp	.-310    	; 0x3300 <ProcessInput+0xfc0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3436:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    343a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	49 f0       	breq	.+18     	; 0x3454 <ProcessInput+0x1114>
                        if (CheckLetter(inventory[x], data[1])) {
    3442:	f8 01       	movw	r30, r16
    3444:	61 81       	ldd	r22, Z+1	; 0x01
    3446:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <CheckLetter>
    344a:	88 23       	and	r24, r24
    344c:	19 f0       	breq	.+6      	; 0x3454 <ProcessInput+0x1114>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	98 cf       	rjmp	.-208    	; 0x3384 <ProcessInput+0x1044>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3454:	84 e6       	ldi	r24, 0x64	; 100
    3456:	99 e7       	ldi	r25, 0x79	; 121
    3458:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <reactStr+0x2>
    345c:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <reactStr+0x3>
    reactStr[1][number]=length;
    3460:	81 e2       	ldi	r24, 0x21	; 33
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	32 c8       	rjmp	.-3996   	; 0x24ca <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3466:	d8 01       	movw	r26, r16
    3468:	1c 92       	st	X, r1
    serRxDone = 0;
    346a:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
    RXCNT = 0;    
    346e:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	2a 96       	adiw	r28, 0x0a	; 10
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	1f 91       	pop	r17
    347e:	0f 91       	pop	r16
    3480:	ff 90       	pop	r15
    3482:	ef 90       	pop	r14
    3484:	df 90       	pop	r13
    3486:	cf 90       	pop	r12
    3488:	bf 90       	pop	r11
    348a:	af 90       	pop	r10
    348c:	9f 90       	pop	r9
    348e:	8f 90       	pop	r8
    3490:	7f 90       	pop	r7
    3492:	6f 90       	pop	r6
    3494:	5f 90       	pop	r5
    3496:	4f 90       	pop	r4
    3498:	08 95       	ret

0000349a <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    349a:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    349c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <CheckSend>
    34a0:	88 23       	and	r24, r24
    34a2:	11 f0       	breq	.+4      	; 0x34a8 <TextAdventure+0xe>
    34a4:	c1 e0       	ldi	r28, 0x01	; 1
    34a6:	11 c0       	rjmp	.+34     	; 0x34ca <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    34a8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <CheckResponse>
    34ac:	81 11       	cpse	r24, r1
    34ae:	fa cf       	rjmp	.-12     	; 0x34a4 <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    34b0:	8b e5       	ldi	r24, 0x5B	; 91
    34b2:	98 e3       	ldi	r25, 0x38	; 56
    34b4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <CheckInput>
    34b8:	c8 2f       	mov	r28, r24
    34ba:	81 11       	cpse	r24, r1
    34bc:	05 c0       	rjmp	.+10     	; 0x34c8 <TextAdventure+0x2e>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    34be:	8b e5       	ldi	r24, 0x5B	; 91
    34c0:	98 e3       	ldi	r25, 0x38	; 56
    34c2:	0e 94 a0 11 	call	0x2340	; 0x2340 <ProcessInput>

    return 0;
    34c6:	01 c0       	rjmp	.+2      	; 0x34ca <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    34c8:	c2 e0       	ldi	r28, 0x02	; 2

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);

    return 0;
    34ca:	8c 2f       	mov	r24, r28
    34cc:	cf 91       	pop	r28
    34ce:	08 95       	ret

000034d0 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    34d0:	0e 94 df 03 	call	0x7be	; 0x7be <Setup>

    SerSpeed(0xff);
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <SerSpeed>
    34da:	aa eb       	ldi	r26, 0xBA	; 186
    34dc:	b6 eb       	ldi	r27, 0xB6	; 182
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	ed 91       	ld	r30, X+
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	eb 54       	subi	r30, 0x4B	; 75
    34e6:	f5 4c       	sbci	r31, 0xC5	; 197
    34e8:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    34ea:	15 96       	adiw	r26, 0x05	; 5
    34ec:	ec 91       	ld	r30, X
    34ee:	15 97       	sbiw	r26, 0x05	; 5
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	eb 54       	subi	r30, 0x4B	; 75
    34f4:	f5 4c       	sbci	r31, 0xC5	; 197
    34f6:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    34f8:	26 eb       	ldi	r18, 0xB6	; 182
    34fa:	a0 3c       	cpi	r26, 0xC0	; 192
    34fc:	b2 07       	cpc	r27, r18
    34fe:	81 f7       	brne	.-32     	; 0x34e0 <main+0x10>
    3500:	ec ea       	ldi	r30, 0xAC	; 172
    3502:	f6 eb       	ldi	r31, 0xB6	; 182
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    3504:	91 e0       	ldi	r25, 0x01	; 1
    3506:	ef 01       	movw	r28, r30
    3508:	a5 81       	ldd	r26, Z+5	; 0x05
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	ab 54       	subi	r26, 0x4B	; 75
    350e:	b5 4c       	sbci	r27, 0xC5	; 197
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	9c 93       	st	X, r25
    3514:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    3516:	a8 81       	ld	r26, Y
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	ab 54       	subi	r26, 0x4B	; 75
    351c:	b5 4c       	sbci	r27, 0xC5	; 197
    351e:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    3520:	26 eb       	ldi	r18, 0xB6	; 182
    3522:	e1 3b       	cpi	r30, 0xB1	; 177
    3524:	f2 07       	cpc	r31, r18
    3526:	79 f7       	brne	.-34     	; 0x3506 <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }

    //"Others"
    iLED[EYE[G][R]] = 1;
    3528:	e0 91 b8 b6 	lds	r30, 0xB6B8	; 0x80b6b8 <__bss_end+0x7bb3>
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	eb 54       	subi	r30, 0x4B	; 75
    3530:	f5 4c       	sbci	r31, 0xC5	; 197
    3532:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    3534:	e0 91 b9 b6 	lds	r30, 0xB6B9	; 0x80b6b9 <__bss_end+0x7bb4>
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	eb 54       	subi	r30, 0x4B	; 75
    353c:	f5 4c       	sbci	r31, 0xC5	; 197
    353e:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    3540:	e0 91 b6 b6 	lds	r30, 0xB6B6	; 0x80b6b6 <__bss_end+0x7bb1>
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	eb 54       	subi	r30, 0x4B	; 75
    3548:	f5 4c       	sbci	r31, 0xC5	; 197
    354a:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    354c:	e0 91 b7 b6 	lds	r30, 0xB6B7	; 0x80b6b7 <__bss_end+0x7bb2>
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	eb 54       	subi	r30, 0x4B	; 75
    3554:	f5 4c       	sbci	r31, 0xC5	; 197
    3556:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    3558:	e0 91 aa b6 	lds	r30, 0xB6AA	; 0x80b6aa <__bss_end+0x7ba5>
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	eb 54       	subi	r30, 0x4B	; 75
    3560:	f5 4c       	sbci	r31, 0xC5	; 197
    3562:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    3564:	e0 91 ab b6 	lds	r30, 0xB6AB	; 0x80b6ab <__bss_end+0x7ba6>
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	eb 54       	subi	r30, 0x4B	; 75
    356c:	f5 4c       	sbci	r31, 0xC5	; 197
    356e:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    3570:	e0 91 a9 b6 	lds	r30, 0xB6A9	; 0x80b6a9 <__bss_end+0x7ba4>
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	eb 54       	subi	r30, 0x4B	; 75
    3578:	f5 4c       	sbci	r31, 0xC5	; 197
    357a:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    357c:	e0 91 a8 b6 	lds	r30, 0xB6A8	; 0x80b6a8 <__bss_end+0x7ba3>
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	eb 54       	subi	r30, 0x4B	; 75
    3584:	f5 4c       	sbci	r31, 0xC5	; 197
    3586:	80 83       	st	Z, r24

    LoadGameState();
    3588:	0e 94 4f 09 	call	0x129e	; 0x129e <LoadGameState>

    while (TRUE) {
        if (GenerateAudio()) {
    358c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <GenerateAudio>
    3590:	88 23       	and	r24, r24
    3592:	e1 f3       	breq	.-8      	; 0x358c <main+0xbc>
            buttonState = CheckButtons(buttonState);
    3594:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    3598:	0e 94 7e 07 	call	0xefc	; 0xefc <CheckButtons>
    359c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    35a0:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    35a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    35a8:	82 31       	cpi	r24, 0x12	; 18
    35aa:	19 f4       	brne	.+6      	; 0x35b2 <main+0xe2>
    35ac:	0e 94 6f 07 	call	0xede	; 0xede <SelectAuIn>
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <main+0xe6>
    35b2:	0e 94 60 07 	call	0xec0	; 0xec0 <SelectTSens>

            //GenerateBlinks();

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    35b6:	71 df       	rcall	.-286    	; 0x349a <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    35b8:	0e 94 97 02 	call	0x52e	; 0x52e <MagnetMaze>
            BastetDictates();
    35bc:	0e 94 23 0b 	call	0x1646	; 0x1646 <BastetDictates>
            LanyardCode();
    35c0:	0e 94 9f 01 	call	0x33e	; 0x33e <LanyardCode>
            //MakeFriends();

            //Save progress
            SaveGameState();
    35c4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    35c8:	80 91 a8 3a 	lds	r24, 0x3AA8	; 0x803aa8 <adcPhot>
    35cc:	90 91 a9 3a 	lds	r25, 0x3AA9	; 0x803aa9 <adcPhot+0x1>
    35d0:	0a 97       	sbiw	r24, 0x0a	; 10
    35d2:	20 f4       	brcc	.+8      	; 0x35dc <main+0x10c>
    35d4:	61 e0       	ldi	r22, 0x01	; 1
    35d6:	84 e7       	ldi	r24, 0x74	; 116
    35d8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    35dc:	80 91 a8 3a 	lds	r24, 0x3AA8	; 0x803aa8 <adcPhot>
    35e0:	90 91 a9 3a 	lds	r25, 0x3AA9	; 0x803aa9 <adcPhot+0x1>
    35e4:	85 36       	cpi	r24, 0x65	; 101
    35e6:	91 05       	cpc	r25, r1
    35e8:	20 f0       	brcs	.+8      	; 0x35f2 <main+0x122>
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	84 e7       	ldi	r24, 0x74	; 116
    35ee:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <WriteStatusBit>

            //Check temperature
            HotSummer();
    35f2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <HotSummer>
    35f6:	ca cf       	rjmp	.-108    	; 0x358c <main+0xbc>

000035f8 <__udivmodqi4>:
    35f8:	99 1b       	sub	r25, r25
    35fa:	79 e0       	ldi	r23, 0x09	; 9
    35fc:	04 c0       	rjmp	.+8      	; 0x3606 <__udivmodqi4_ep>

000035fe <__udivmodqi4_loop>:
    35fe:	99 1f       	adc	r25, r25
    3600:	96 17       	cp	r25, r22
    3602:	08 f0       	brcs	.+2      	; 0x3606 <__udivmodqi4_ep>
    3604:	96 1b       	sub	r25, r22

00003606 <__udivmodqi4_ep>:
    3606:	88 1f       	adc	r24, r24
    3608:	7a 95       	dec	r23
    360a:	c9 f7       	brne	.-14     	; 0x35fe <__udivmodqi4_loop>
    360c:	80 95       	com	r24
    360e:	08 95       	ret

00003610 <__udivmodhi4>:
    3610:	aa 1b       	sub	r26, r26
    3612:	bb 1b       	sub	r27, r27
    3614:	51 e1       	ldi	r21, 0x11	; 17
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <__udivmodhi4_ep>

00003618 <__udivmodhi4_loop>:
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	a6 17       	cp	r26, r22
    361e:	b7 07       	cpc	r27, r23
    3620:	10 f0       	brcs	.+4      	; 0x3626 <__udivmodhi4_ep>
    3622:	a6 1b       	sub	r26, r22
    3624:	b7 0b       	sbc	r27, r23

00003626 <__udivmodhi4_ep>:
    3626:	88 1f       	adc	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	5a 95       	dec	r21
    362c:	a9 f7       	brne	.-22     	; 0x3618 <__udivmodhi4_loop>
    362e:	80 95       	com	r24
    3630:	90 95       	com	r25
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	08 95       	ret

00003638 <__udivmodsi4>:
    3638:	a1 e2       	ldi	r26, 0x21	; 33
    363a:	1a 2e       	mov	r1, r26
    363c:	aa 1b       	sub	r26, r26
    363e:	bb 1b       	sub	r27, r27
    3640:	fd 01       	movw	r30, r26
    3642:	0d c0       	rjmp	.+26     	; 0x365e <__udivmodsi4_ep>

00003644 <__udivmodsi4_loop>:
    3644:	aa 1f       	adc	r26, r26
    3646:	bb 1f       	adc	r27, r27
    3648:	ee 1f       	adc	r30, r30
    364a:	ff 1f       	adc	r31, r31
    364c:	a2 17       	cp	r26, r18
    364e:	b3 07       	cpc	r27, r19
    3650:	e4 07       	cpc	r30, r20
    3652:	f5 07       	cpc	r31, r21
    3654:	20 f0       	brcs	.+8      	; 0x365e <__udivmodsi4_ep>
    3656:	a2 1b       	sub	r26, r18
    3658:	b3 0b       	sbc	r27, r19
    365a:	e4 0b       	sbc	r30, r20
    365c:	f5 0b       	sbc	r31, r21

0000365e <__udivmodsi4_ep>:
    365e:	66 1f       	adc	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	1a 94       	dec	r1
    3668:	69 f7       	brne	.-38     	; 0x3644 <__udivmodsi4_loop>
    366a:	60 95       	com	r22
    366c:	70 95       	com	r23
    366e:	80 95       	com	r24
    3670:	90 95       	com	r25
    3672:	9b 01       	movw	r18, r22
    3674:	ac 01       	movw	r20, r24
    3676:	bd 01       	movw	r22, r26
    3678:	cf 01       	movw	r24, r30
    367a:	08 95       	ret

0000367c <_exit>:
    367c:	f8 94       	cli

0000367e <__stop_program>:
    367e:	ff cf       	rjmp	.-2      	; 0x367e <__stop_program>
