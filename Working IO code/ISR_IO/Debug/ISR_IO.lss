
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00803800  00003f9c  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003eec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0000beec  00003eec  00003fa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e5  00803836  00803836  00004086  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000340  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006ef5  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002911  00000000  00000000  0000b32d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003de7  00000000  00000000  0000dc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000090c  00000000  00000000  00011a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ac7  00000000  00000000  00012334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d80  00000000  00000000  00013dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  00017b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
       2:	00 00       	nop
       4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
       6:	00 00       	nop
       8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
       a:	00 00       	nop
       c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
       e:	00 00       	nop
      10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
      12:	00 00       	nop
      14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c7       	rjmp	.+3888   	; 0xf4a <__vector_6>
      1a:	00 00       	nop
      1c:	ea c7       	rjmp	.+4052   	; 0xff2 <__vector_7>
      1e:	00 00       	nop
      20:	d2 c5       	rjmp	.+2980   	; 0xbc6 <__vector_8>
      22:	00 00       	nop
      24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
      26:	00 00       	nop
      28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
      2a:	00 00       	nop
      2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
      2e:	00 00       	nop
      30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c6       	rjmp	.+3122   	; 0xc68 <__vector_13>
      36:	00 00       	nop
      38:	4a c6       	rjmp	.+3220   	; 0xcce <__vector_14>
      3a:	00 00       	nop
      3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
      3e:	00 00       	nop
      40:	4c c0       	rjmp	.+152    	; 0xda <__bad_interrupt>
      42:	00 00       	nop
      44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
      46:	00 00       	nop
      48:	48 c0       	rjmp	.+144    	; 0xda <__bad_interrupt>
      4a:	00 00       	nop
      4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c7       	rjmp	.+3600   	; 0xe62 <__vector_20>
      52:	00 00       	nop
      54:	42 c0       	rjmp	.+132    	; 0xda <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c7       	rjmp	.+3680   	; 0xeba <__vector_22>
      5a:	00 00       	nop
      5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
      5e:	00 00       	nop
      60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
      62:	00 00       	nop
      64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
      66:	00 00       	nop
      68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c6       	rjmp	.+3334   	; 0xd74 <__vector_27>
      6e:	00 00       	nop
      70:	dc c6       	rjmp	.+3512   	; 0xe2a <__vector_28>
      72:	00 00       	nop
      74:	32 c0       	rjmp	.+100    	; 0xda <__bad_interrupt>
      76:	00 00       	nop
      78:	30 c0       	rjmp	.+96     	; 0xda <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ab 0b       	sbc	r26, r27
      7e:	d9 0b       	sbc	r29, r25
      80:	eb 0b       	sbc	r30, r27
      82:	a6 0c       	add	r10, r6
      84:	a6 0c       	add	r10, r6
      86:	fa 0b       	sbc	r31, r26
      88:	07 0c       	add	r0, r7
      8a:	45 0c       	add	r4, r5
      8c:	6c 0c       	add	r6, r12
      8e:	a6 0c       	add	r10, r6
      90:	a6 0c       	add	r10, r6
      92:	a6 0c       	add	r10, r6
      94:	a6 0c       	add	r10, r6
      96:	a6 0c       	add	r10, r6
      98:	a6 0c       	add	r10, r6
      9a:	a6 0c       	add	r10, r6
      9c:	a6 0c       	add	r10, r6
      9e:	d9 0b       	sbc	r29, r25

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	cd bf       	out	0x3d, r28	; 61
      a8:	df e3       	ldi	r29, 0x3F	; 63
      aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
      ac:	18 e3       	ldi	r17, 0x38	; 56
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b8 e3       	ldi	r27, 0x38	; 56
      b2:	ec e9       	ldi	r30, 0x9C	; 156
      b4:	ff e3       	ldi	r31, 0x3F	; 63
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 33       	cpi	r26, 0x36	; 54
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	2b e3       	ldi	r18, 0x3B	; 59
      c4:	a6 e3       	ldi	r26, 0x36	; 54
      c6:	b8 e3       	ldi	r27, 0x38	; 56
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	ab 31       	cpi	r26, 0x1B	; 27
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <main>
      d6:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <_exit>

000000da <__bad_interrupt>:
      da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      dc:	28 ed       	ldi	r18, 0xD8	; 216
      de:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      e0:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      e2:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	42 17       	cp	r20, r18
      ea:	53 07       	cpc	r21, r19
      ec:	4c f0       	brlt	.+18     	; 0x100 <chkVolt250+0x24>
      ee:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
      f2:	50 e0       	ldi	r21, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	6e 5e       	subi	r22, 0xEE	; 238
      f8:	7f 4f       	sbci	r23, 0xFF	; 255
      fa:	64 17       	cp	r22, r20
      fc:	75 07       	cpc	r23, r21
      fe:	2c f4       	brge	.+10     	; 0x10a <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
     100:	81 50       	subi	r24, 0x01	; 1
     102:	29 51       	subi	r18, 0x19	; 25
     104:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
     106:	81 11       	cpse	r24, r1
     108:	ec cf       	rjmp	.-40     	; 0xe2 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
     10a:	08 95       	ret

0000010c <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
     110:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <chkTmr.3794>
     11a:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     11c:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     11e:	8c 2f       	mov	r24, r28
     120:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
     124:	81 11       	cpse	r24, r1
     126:	01 c0       	rjmp	.+2      	; 0x12a <MakeFriends+0x1e>
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     12c:	c8 36       	cpi	r28, 0x68	; 104
     12e:	b9 f7       	brne	.-18     	; 0x11e <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     130:	dd 23       	and	r29, r29
     132:	19 f0       	breq	.+6      	; 0x13a <MakeFriends+0x2e>
     134:	8c e7       	ldi	r24, 0x7C	; 124
     136:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     13a:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3792>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	20 f0       	brcs	.+8      	; 0x14a <MakeFriends+0x3e>
        gameNow = FRIENDS; 
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <gameNow>
     148:	0d c0       	rjmp	.+26     	; 0x164 <MakeFriends+0x58>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     14a:	81 11       	cpse	r24, r1
     14c:	0b c0       	rjmp	.+22     	; 0x164 <MakeFriends+0x58>
     14e:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <gameNow>
     152:	94 30       	cpi	r25, 0x04	; 4
     154:	61 f4       	brne	.+24     	; 0x16e <MakeFriends+0x62>
        gameNow = TEXT; 
     156:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     15a:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     15e:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
     162:	05 c0       	rjmp	.+10     	; 0x16e <MakeFriends+0x62>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     164:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <detHdPh>
     168:	91 11       	cpse	r25, r1
     16a:	f1 cf       	rjmp	.-30     	; 0x14e <MakeFriends+0x42>
     16c:	18 c0       	rjmp	.+48     	; 0x19e <MakeFriends+0x92>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     16e:	81 11       	cpse	r24, r1
     170:	16 c0       	rjmp	.+44     	; 0x19e <MakeFriends+0x92>
     172:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <detHdPh>
     176:	91 11       	cpse	r25, r1
     178:	12 c0       	rjmp	.+36     	; 0x19e <MakeFriends+0x92>
        setDAC[0] = whoami * 51;
     17a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     17e:	93 e3       	ldi	r25, 0x33	; 51
     180:	89 9f       	mul	r24, r25
     182:	80 2d       	mov	r24, r0
     184:	11 24       	eor	r1, r1
     186:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	98 e3       	ldi	r25, 0x38	; 56
     18e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     192:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <MakeFriends+0xa4>
    } else {
        if (progress & NEXT){
     19e:	98 2f       	mov	r25, r24
     1a0:	90 7f       	andi	r25, 0xF0	; 240
     1a2:	31 f0       	breq	.+12     	; 0x1b0 <MakeFriends+0xa4>
            progress++;
            progress&=0x0f;
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3792>
            chkTmr = 0;
     1ac:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <chkTmr.3794>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     1b0:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
     1b4:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	b9 01       	movw	r22, r18
     1be:	6a 50       	subi	r22, 0x0A	; 10
     1c0:	71 09       	sbc	r23, r1
     1c2:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3792>
     1c6:	46 17       	cp	r20, r22
     1c8:	57 07       	cpc	r21, r23
     1ca:	5c f0       	brlt	.+22     	; 0x1e2 <MakeFriends+0xd6>
     1cc:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	26 5f       	subi	r18, 0xF6	; 246
     1d4:	3f 4f       	sbci	r19, 0xFF	; 255
     1d6:	24 17       	cp	r18, r20
     1d8:	35 07       	cpc	r19, r21
     1da:	1c f0       	brlt	.+6      	; 0x1e2 <MakeFriends+0xd6>
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	08 f4       	brcc	.+2      	; 0x1e2 <MakeFriends+0xd6>
     1e0:	43 c0       	rjmp	.+134    	; 0x268 <MakeFriends+0x15c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     1e2:	81 11       	cpse	r24, r1
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <MakeFriends+0xf0>
     1e6:	80 91 c8 3a 	lds	r24, 0x3AC8	; 0x803ac8 <detHdPh>
     1ea:	81 11       	cpse	r24, r1
     1ec:	95 c0       	rjmp	.+298    	; 0x318 <MakeFriends+0x20c>
            if (chkTmr >= 8) {
     1ee:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     1f2:	88 30       	cpi	r24, 0x08	; 8
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <MakeFriends+0xec>
     1f6:	90 c0       	rjmp	.+288    	; 0x318 <MakeFriends+0x20c>
                progress |= NEXT;
     1f8:	80 ef       	ldi	r24, 0xF0	; 240
     1fa:	63 c0       	rjmp	.+198    	; 0x2c2 <MakeFriends+0x1b6>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	41 f5       	brne	.+80     	; 0x250 <MakeFriends+0x144>
            jackIn = chkVolt250();
     200:	6d df       	rcall	.-294    	; 0xdc <chkVolt250>
     202:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3795>
            if (jackIn) {
     206:	88 23       	and	r24, r24
     208:	79 f1       	breq	.+94     	; 0x268 <MakeFriends+0x15c>
                if (chkTmr >= SHORT_WAIT){
     20a:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <chkTmr.3794>
     20e:	98 30       	cpi	r25, 0x08	; 8
     210:	08 f4       	brcc	.+2      	; 0x214 <MakeFriends+0x108>
     212:	82 c0       	rjmp	.+260    	; 0x318 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     214:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <whoami>
     218:	91 30       	cpi	r25, 0x01	; 1
     21a:	11 f4       	brne	.+4      	; 0x220 <MakeFriends+0x114>
     21c:	83 50       	subi	r24, 0x03	; 3
     21e:	14 c0       	rjmp	.+40     	; 0x248 <MakeFriends+0x13c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	31 f4       	brne	.+12     	; 0x230 <MakeFriends+0x124>
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	91 f0       	breq	.+36     	; 0x24c <MakeFriends+0x140>
     228:	85 50       	subi	r24, 0x05	; 5
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	e8 f4       	brcc	.+58     	; 0x268 <MakeFriends+0x15c>
     22e:	0e c0       	rjmp	.+28     	; 0x24c <MakeFriends+0x140>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     230:	93 30       	cpi	r25, 0x03	; 3
     232:	39 f4       	brne	.+14     	; 0x242 <MakeFriends+0x136>
     234:	9c ef       	ldi	r25, 0xFC	; 252
     236:	98 0f       	add	r25, r24
     238:	92 30       	cpi	r25, 0x02	; 2
     23a:	40 f0       	brcs	.+16     	; 0x24c <MakeFriends+0x140>
     23c:	87 30       	cpi	r24, 0x07	; 7
     23e:	a1 f4       	brne	.+40     	; 0x268 <MakeFriends+0x15c>
     240:	05 c0       	rjmp	.+10     	; 0x24c <MakeFriends+0x140>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     242:	94 30       	cpi	r25, 0x04	; 4
     244:	89 f4       	brne	.+34     	; 0x268 <MakeFriends+0x15c>
     246:	85 50       	subi	r24, 0x05	; 5
     248:	83 30       	cpi	r24, 0x03	; 3
     24a:	70 f4       	brcc	.+28     	; 0x268 <MakeFriends+0x15c>
                        progress |= NEXT;
     24c:	81 ef       	ldi	r24, 0xF1	; 241
     24e:	39 c0       	rjmp	.+114    	; 0x2c2 <MakeFriends+0x1b6>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	69 f0       	breq	.+26     	; 0x26e <MakeFriends+0x162>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	c1 f1       	breq	.+112    	; 0x2c8 <MakeFriends+0x1bc>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     258:	84 30       	cpi	r24, 0x04	; 4
     25a:	09 f0       	breq	.+2      	; 0x25e <MakeFriends+0x152>
     25c:	5d c0       	rjmp	.+186    	; 0x318 <MakeFriends+0x20c>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     25e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     262:	80 34       	cpi	r24, 0x40	; 64
     264:	08 f4       	brcc	.+2      	; 0x268 <MakeFriends+0x15c>
     266:	58 c0       	rjmp	.+176    	; 0x318 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     268:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <progress.3792>
     26c:	55 c0       	rjmp	.+170    	; 0x318 <MakeFriends+0x20c>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     26e:	87 e0       	ldi	r24, 0x07	; 7
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     276:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     27a:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     27e:	88 30       	cpi	r24, 0x08	; 8
     280:	38 f0       	brcs	.+14     	; 0x290 <MakeFriends+0x184>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     282:	2f ef       	ldi	r18, 0xFF	; 255
     284:	44 e6       	ldi	r20, 0x64	; 100
     286:	68 e0       	ldi	r22, 0x08	; 8
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	fa d7       	rcall	.+4084   	; 0x1280 <floatAround>
     28c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     290:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     294:	8a 3f       	cpi	r24, 0xFA	; 250
     296:	08 f4       	brcc	.+2      	; 0x29a <MakeFriends+0x18e>
     298:	3f c0       	rjmp	.+126    	; 0x318 <MakeFriends+0x20c>
                candidate = jackIn-whoami;
     29a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     29e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <jackIn.3795>
     2a2:	98 1b       	sub	r25, r24
     2a4:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <__data_end>
                if (candidate > whoami) {
     2a8:	89 17       	cp	r24, r25
     2aa:	10 f4       	brcc	.+4      	; 0x2b0 <MakeFriends+0x1a4>
                    setDAC[0] = 249;
     2ac:	89 ef       	ldi	r24, 0xF9	; 249
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <MakeFriends+0x1ac>
                } else {
                    setDAC[0] = whoami * 51;
     2b0:	93 e3       	ldi	r25, 0x33	; 51
     2b2:	89 9f       	mul	r24, r25
     2b4:	80 2d       	mov	r24, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2bc:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3792>
     2c0:	80 6f       	ori	r24, 0xF0	; 240
     2c2:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3792>
     2c6:	28 c0       	rjmp	.+80     	; 0x318 <MakeFriends+0x20c>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2c8:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     2cc:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2ce:	20 f1       	brcs	.+72     	; 0x318 <MakeFriends+0x20c>
     2d0:	05 df       	rcall	.-502    	; 0xdc <chkVolt250>
     2d2:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3795>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2d6:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <__data_end>
     2da:	48 2f       	mov	r20, r24
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <whoami>
     2e2:	29 17       	cp	r18, r25
     2e4:	08 f4       	brcc	.+2      	; 0x2e8 <MakeFriends+0x1dc>
     2e6:	29 2f       	mov	r18, r25
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	2b 5f       	subi	r18, 0xFB	; 251
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	42 17       	cp	r20, r18
     2f0:	53 07       	cpc	r21, r19
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <MakeFriends+0x1ea>
     2f4:	b9 cf       	rjmp	.-142    	; 0x268 <MakeFriends+0x15c>
                    UpdateState(99+candidate);
     2f6:	83 e6       	ldi	r24, 0x63	; 99
     2f8:	89 0f       	add	r24, r25
     2fa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
                 
                    effect = 31;
     2fe:	8f e1       	ldi	r24, 0x1F	; 31
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     306:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    WingBar(candidate, whoami);
     30a:	60 91 43 38 	lds	r22, 0x3843	; 0x803843 <whoami>
     30e:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <__data_end>
     312:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <WingBar>
     316:	d2 cf       	rjmp	.-92     	; 0x2bc <MakeFriends+0x1b0>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     326:	e6 e2       	ldi	r30, 0x26	; 38
     328:	f4 e0       	ldi	r31, 0x04	; 4
     32a:	80 83       	st	Z, r24
     32c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     330:	a1 e2       	ldi	r26, 0x21	; 33
     332:	b4 e0       	ldi	r27, 0x04	; 4
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	9c 93       	st	X, r25
     338:	90 83       	st	Z, r25
     33a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     33e:	e0 e1       	ldi	r30, 0x10	; 16
     340:	f8 e0       	ldi	r31, 0x08	; 8
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	96 83       	std	Z+6, r25	; 0x06
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	94 83       	std	Z+4, r25	; 0x04
     34a:	83 83       	std	Z+3, r24	; 0x03
     34c:	8c 93       	st	X, r24
     34e:	85 81       	ldd	r24, Z+5	; 0x05
     350:	81 60       	ori	r24, 0x01	; 1
     352:	85 83       	std	Z+5, r24	; 0x05
     354:	85 81       	ldd	r24, Z+5	; 0x05
     356:	84 6c       	ori	r24, 0xC4	; 196
     358:	85 83       	std	Z+5, r24	; 0x05
     35a:	08 95       	ret

0000035c <I2C_recover>:
     35c:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     360:	88 60       	ori	r24, 0x08	; 8
     362:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     366:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     370:	99 e0       	ldi	r25, 0x09	; 9
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     37a:	30 e1       	ldi	r19, 0x10	; 16
     37c:	3a 95       	dec	r19
     37e:	f1 f7       	brne	.-4      	; 0x37c <I2C_recover+0x20>
     380:	00 c0       	rjmp	.+0      	; 0x382 <I2C_recover+0x26>
     382:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     386:	30 e1       	ldi	r19, 0x10	; 16
     388:	3a 95       	dec	r19
     38a:	f1 f7       	brne	.-4      	; 0x388 <I2C_recover+0x2c>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <I2C_recover+0x32>
     38e:	91 50       	subi	r25, 0x01	; 1
     390:	89 f7       	brne	.-30     	; 0x374 <I2C_recover+0x18>
     392:	28 e0       	ldi	r18, 0x08	; 8
     394:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     398:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3a2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a6:	91 60       	ori	r25, 0x01	; 1
     3a8:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ac:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b0:	94 6c       	ori	r25, 0xC4	; 196
     3b2:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b6:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ba:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3be:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3c2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3cc:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d0:	84 6c       	ori	r24, 0xC4	; 196
     3d2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d6:	08 95       	ret

000003d8 <I2C_start>:
     3d8:	28 2f       	mov	r18, r24
     3da:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3de:	90 6c       	ori	r25, 0xC0	; 192
     3e0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e8:	89 2f       	mov	r24, r25
     3ea:	84 70       	andi	r24, 0x04	; 4
     3ec:	92 fd       	sbrc	r25, 2
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <I2C_start+0x1e>
     3f0:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3f4:	08 95       	ret
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	08 95       	ret

000003fa <I2C_wait_ACK>:
     3fa:	8c e0       	ldi	r24, 0x0C	; 12
     3fc:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
     400:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     404:	87 fd       	sbrc	r24, 7
     406:	0a c0       	rjmp	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     408:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40c:	86 fd       	sbrc	r24, 6
     40e:	06 c0       	rjmp	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     410:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     414:	81 11       	cpse	r24, r1
     416:	f4 cf       	rjmp	.-24     	; 0x400 <__LOCK_REGION_LENGTH__>
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	08 95       	ret
     41c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	80 6c       	ori	r24, 0xC0	; 192
     422:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     426:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42a:	82 fd       	sbrc	r24, 2
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	83 fd       	sbrc	r24, 3
     434:	07 c0       	rjmp	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     436:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43a:	82 95       	swap	r24
     43c:	81 70       	andi	r24, 0x01	; 1
     43e:	08 95       	ret
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	08 95       	ret
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	08 95       	ret

00000448 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     448:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     44a:	8c e0       	ldi	r24, 0x0C	; 12
     44c:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     450:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     454:	89 2f       	mov	r24, r25
     456:	83 70       	andi	r24, 0x03	; 3
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	11 f0       	breq	.+4      	; 0x460 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     460:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     464:	97 fd       	sbrc	r25, 7
     466:	06 c0       	rjmp	.+12     	; 0x474 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     468:	90 91 69 3a 	lds	r25, 0x3A69	; 0x803a69 <timeout_I2C>
     46c:	91 11       	cpse	r25, r1
     46e:	f8 cf       	rjmp	.-16     	; 0x460 <I2C_read+0x18>
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     474:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     478:	90 6c       	ori	r25, 0xC0	; 192
     47a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     47e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     482:	92 fd       	sbrc	r25, 2
     484:	1e c0       	rjmp	.+60     	; 0x4c2 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     486:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48a:	93 fd       	sbrc	r25, 3
     48c:	1d c0       	rjmp	.+58     	; 0x4c8 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     48e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     492:	89 2f       	mov	r24, r25
     494:	80 71       	andi	r24, 0x10	; 16
     496:	94 fd       	sbrc	r25, 4
     498:	16 c0       	rjmp	.+44     	; 0x4c6 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     49a:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     49e:	61 11       	cpse	r22, r1
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <I2C_read+0x5e>
     4a2:	9b 7f       	andi	r25, 0xFB	; 251
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4a6:	94 60       	ori	r25, 0x04	; 4
     4a8:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     4ac:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     4b0:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     4b2:	61 11       	cpse	r22, r1
     4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <I2C_read+0x80>
     4b6:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4ba:	92 60       	ori	r25, 0x02	; 2
     4bc:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4c0:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4c6:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     4c8:	08 95       	ret

000004ca <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     4ca:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4d2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d6:	93 70       	andi	r25, 0x03	; 3
     4d8:	92 30       	cpi	r25, 0x02	; 2
     4da:	b1 f4       	brne	.+44     	; 0x508 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4dc:	80 81       	ld	r24, Z
     4de:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4e2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e6:	86 fd       	sbrc	r24, 6
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4ea:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     4ee:	81 11       	cpse	r24, r1
     4f0:	f8 cf       	rjmp	.-16     	; 0x4e2 <I2C_write+0x18>
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4fa:	82 fd       	sbrc	r24, 2
     4fc:	07 c0       	rjmp	.+14     	; 0x50c <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4fe:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     502:	82 95       	swap	r24
     504:	81 70       	andi	r24, 0x01	; 1
     506:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     50c:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     50e:	08 95       	ret

00000510 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     510:	e0 e1       	ldi	r30, 0x10	; 16
     512:	f8 e0       	ldi	r31, 0x08	; 8
     514:	84 81       	ldd	r24, Z+4	; 0x04
     516:	83 60       	ori	r24, 0x03	; 3
     518:	84 83       	std	Z+4, r24	; 0x04
     51a:	08 95       	ret

0000051c <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	6b 01       	movw	r12, r22
     52c:	f4 2e       	mov	r15, r20
     52e:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     530:	18 2f       	mov	r17, r24
     532:	11 0f       	add	r17, r17
     534:	81 2f       	mov	r24, r17
     536:	50 df       	rcall	.-352    	; 0x3d8 <I2C_start>
	if (status != 0) goto error;
     538:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     53a:	2b c0       	rjmp	.+86     	; 0x592 <I2C_read_bytes+0x76>
     53c:	5e df       	rcall	.-324    	; 0x3fa <I2C_wait_ACK>
	if (status == 1) {
     53e:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     540:	19 f4       	brne	.+6      	; 0x548 <I2C_read_bytes+0x2c>
     542:	e6 df       	rcall	.-52     	; 0x510 <I2C_stop>
		return 1;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	27 c0       	rjmp	.+78     	; 0x596 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     548:	81 11       	cpse	r24, r1
     54a:	23 c0       	rjmp	.+70     	; 0x592 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     54c:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     54e:	49 f0       	breq	.+18     	; 0x562 <I2C_read_bytes+0x46>
     550:	c6 01       	movw	r24, r12
     552:	bb df       	rcall	.-138    	; 0x4ca <I2C_write>
	    if (status != 0) goto error;
     554:	81 11       	cpse	r24, r1
     556:	1d c0       	rjmp	.+58     	; 0x592 <I2C_read_bytes+0x76>
        ++reg_ptr;
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	c8 1a       	sub	r12, r24
     55c:	d8 0a       	sbc	r13, r24
        --reg_len;
     55e:	fa 94       	dec	r15
     560:	f5 cf       	rjmp	.-22     	; 0x54c <I2C_read_bytes+0x30>
     562:	01 34       	cpi	r16, 0x41	; 65
     564:	08 f0       	brcs	.+2      	; 0x568 <I2C_read_bytes+0x4c>
     566:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     568:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     56a:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     56e:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     570:	40 f0       	brcs	.+16     	; 0x582 <I2C_read_bytes+0x66>
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	ce 01       	movw	r24, r28
     576:	68 df       	rcall	.-304    	; 0x448 <I2C_read>
		if (status != 0) goto error;
     578:	81 11       	cpse	r24, r1
     57a:	0b c0       	rjmp	.+22     	; 0x592 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     57c:	21 96       	adiw	r28, 0x01	; 1
     57e:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     580:	f6 cf       	rjmp	.-20     	; 0x56e <I2C_read_bytes+0x52>
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     586:	60 df       	rcall	.-320    	; 0x448 <I2C_read>
     588:	81 11       	cpse	r24, r1
	I2C_stop();
     58a:	03 c0       	rjmp	.+6      	; 0x592 <I2C_read_bytes+0x76>
     58c:	c1 df       	rcall	.-126    	; 0x510 <I2C_stop>
	return 0;
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	02 c0       	rjmp	.+4      	; 0x596 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     592:	e4 de       	rcall	.-568    	; 0x35c <I2C_recover>
     594:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     596:	df 91       	pop	r29
}
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	08 95       	ret

000005a6 <LanyardCode>:
     5a6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
uint16_t        lanyardLastActive = 0;


// Main game loop
uint8_t LanyardCode(){
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	89 f4       	brne	.+34     	; 0x5d0 <LanyardCode+0x2a>
     5ae:	6a e0       	ldi	r22, 0x0A	; 10
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <lanyardLastActive>
     5b6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <lanyardLastActive+0x1>
     5ba:	0e 94 75 0e 	call	0x1cea	; 0x1cea <idleTimeout>
     5be:	88 23       	and	r24, r24
     5c0:	39 f0       	breq	.+14     	; 0x5d0 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        gameNow = TEXT;
     5c2:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     5c6:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     5ca:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
        return 0;
     5ce:	9e c0       	rjmp	.+316    	; 0x70c <LanyardCode+0x166>
    }

    if (CheckState(LANYARD_COMPLETED))
     5d0:	8b e7       	ldi	r24, 0x7B	; 123
     5d2:	31 d7       	rcall	.+3682   	; 0x1436 <CheckState>
     5d4:	81 11       	cpse	r24, r1
     5d6:	9a c0       	rjmp	.+308    	; 0x70c <LanyardCode+0x166>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5d8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     5dc:	88 23       	and	r24, r24
     5de:	19 f0       	breq	.+6      	; 0x5e6 <LanyardCode+0x40>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <LanyardCode+0x40>
     5e4:	93 c0       	rjmp	.+294    	; 0x70c <LanyardCode+0x166>
        return 0;

    if (buttonState == 0xff)
     5e6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <LanyardCode+0x4a>
     5ee:	8e c0       	rjmp	.+284    	; 0x70c <LanyardCode+0x166>
        return 0;

    if (buttonState == lastButtonState)
     5f0:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     5f4:	89 17       	cp	r24, r25
     5f6:	09 f4       	brne	.+2      	; 0x5fa <LanyardCode+0x54>
     5f8:	89 c0       	rjmp	.+274    	; 0x70c <LanyardCode+0x166>
        return 0;

    lanyardLastActive = getClock();
     5fa:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <getClock>
     5fe:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <lanyardLastActive>
     602:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     606:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     60a:	8f 3f       	cpi	r24, 0xFF	; 255
     60c:	09 f0       	breq	.+2      	; 0x610 <LanyardCode+0x6a>
     60e:	7e c0       	rjmp	.+252    	; 0x70c <LanyardCode+0x166>
        if ((gameNow != LANYARD) || (lanyardState&GAME_OVER) ) {
     610:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	21 f4       	brne	.+8      	; 0x620 <LanyardCode+0x7a>
     618:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     61c:	81 ff       	sbrs	r24, 1
     61e:	0e c0       	rjmp	.+28     	; 0x63c <LanyardCode+0x96>
            // init Lanyard game
            gameNow         = LANYARD;
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
            lanyardPos      = 0;
     626:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <lanyardPos>
            lanyardCnt      = 0;
     62a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            lanyardState    = TRUE;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
            SetHackerLeds(0,0);
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 26 0b 	call	0x164c	; 0x164c <SetHackerLeds>
        }

        if (buttonState == lanyardCode[lanyardPos]) {
     63c:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     640:	e8 2f       	mov	r30, r24
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e4 50       	subi	r30, 0x04	; 4
     646:	f1 44       	sbci	r31, 0x41	; 65
     648:	20 81       	ld	r18, Z
     64a:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     64e:	29 13       	cpse	r18, r25
     650:	12 c0       	rjmp	.+36     	; 0x676 <LanyardCode+0xd0>
            lanyardState &= TRUE;
     652:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     656:	91 70       	andi	r25, 0x01	; 1
     658:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     65c:	e0 91 17 bf 	lds	r30, 0xBF17	; 0x80bf17 <__bss_end+0x83fc>
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	e4 53       	subi	r30, 0x34	; 52
     664:	f5 4c       	sbci	r31, 0xC5	; 197
     666:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     668:	e0 91 16 bf 	lds	r30, 0xBF16	; 0x80bf16 <__bss_end+0x83fb>
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	e4 53       	subi	r30, 0x34	; 52
     670:	f5 4c       	sbci	r31, 0xC5	; 197
     672:	10 82       	st	Z, r1
     674:	08 c0       	rjmp	.+16     	; 0x686 <LanyardCode+0xe0>
        } else {
            lanyardState = FALSE;
     676:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos == 0 ) {
     67a:	81 11       	cpse	r24, r1
     67c:	04 c0       	rjmp	.+8      	; 0x686 <LanyardCode+0xe0>
                gameNow         = BASTET;
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
                return 0;
     684:	43 c0       	rjmp	.+134    	; 0x70c <LanyardCode+0x166>
            }
        }
        lanyardPos++;
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <lanyardPos>
        lanyardCnt++;            
     68c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <lanyardCnt>
        WingBar(lanyardCnt,lanyardCnt);
     696:	68 2f       	mov	r22, r24
     698:	9b d7       	rcall	.+3894   	; 0x15d0 <WingBar>
        if (lanyardCnt >= 4) {
     69a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     69e:	84 30       	cpi	r24, 0x04	; 4
     6a0:	a8 f1       	brcs	.+106    	; 0x70c <LanyardCode+0x166>
            lanyardCnt = 0;
     6a2:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            if (lanyardState == TRUE) {
     6a6:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	19 f5       	brne	.+70     	; 0x6f4 <LanyardCode+0x14e>
                if (lanyardCnt == 0) {
                    WingBar(0,0);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	8e d7       	rcall	.+3868   	; 0x15d0 <WingBar>
                    iLED[HCKR[G][(lanyardPos>>1)-2]] = dimValue;
     6b4:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     6b8:	e8 2f       	mov	r30, r24
     6ba:	e6 95       	lsr	r30
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e6 5e       	subi	r30, 0xE6	; 230
     6c0:	f0 44       	sbci	r31, 0x40	; 64
     6c2:	a4 81       	ldd	r26, Z+4	; 0x04
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6ca:	a4 53       	subi	r26, 0x34	; 52
     6cc:	b5 4c       	sbci	r27, 0xC5	; 197
     6ce:	9c 93       	st	X, r25
                    iLED[HCKR[G][(lanyardPos>>1)-1]] = dimValue;
     6d0:	e5 81       	ldd	r30, Z+5	; 0x05
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6d8:	e4 53       	subi	r30, 0x34	; 52
     6da:	f5 4c       	sbci	r31, 0xC5	; 197
     6dc:	90 83       	st	Z, r25
                }
                if (lanyardPos == LANYARD_LEN) {
     6de:	8c 30       	cpi	r24, 0x0C	; 12
                    UpdateState(LANYARD_COMPLETED);
     6e0:	a9 f4       	brne	.+42     	; 0x70c <LanyardCode+0x166>
     6e2:	8b e7       	ldi	r24, 0x7B	; 123
     6e4:	86 d6       	rcall	.+3340   	; 0x13f2 <UpdateState>
                    effect    = 0x42;
     6e6:	82 e4       	ldi	r24, 0x42	; 66
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     6ee:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     6f2:	0c c0       	rjmp	.+24     	; 0x70c <LanyardCode+0x166>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                lanyardState |= GAME_OVER;
     6f4:	82 60       	ori	r24, 0x02	; 2
     6f6:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                effect  = 0x31;
     6fa:	81 e3       	ldi	r24, 0x31	; 49
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     702:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                WingBar(0,0);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	62 d7       	rcall	.+3780   	; 0x15d0 <WingBar>
            }
        }
    }

    return 0;
}
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	08 95       	ret

00000710 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     710:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <mazeHckrPos>
    mazePos = 0;
     714:	10 92 52 38 	sts	0x3852, r1	; 0x803852 <mazePos>
    mazeCnt = 0;
     718:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeCnt>
    mazeState = TRUE;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     722:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <inverted>
    SetHackerLeds(0,0);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 c7       	rjmp	.+3872   	; 0x164c <SetHackerLeds>
     72c:	08 95       	ret

0000072e <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     734:	97 ff       	sbrs	r25, 7
     736:	03 c0       	rjmp	.+6      	; 0x73e <showFieldStrength+0x10>
     738:	d1 95       	neg	r29
     73a:	c1 95       	neg	r28
     73c:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     73e:	cd 33       	cpi	r28, 0x3D	; 61
     740:	d1 05       	cpc	r29, r1
     742:	44 f0       	brlt	.+16     	; 0x754 <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     744:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     748:	81 11       	cpse	r24, r1
     74a:	04 c0       	rjmp	.+8      	; 0x754 <showFieldStrength+0x26>
            initMaze();
     74c:	e1 df       	rcall	.-62     	; 0x710 <initMaze>
            gameNow = MAZE;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
        }
    }

    if (gameNow == MAZE) {
     754:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	09 f5       	brne	.+66     	; 0x79e <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     75c:	cc 33       	cpi	r28, 0x3C	; 60
     75e:	d1 05       	cpc	r29, r1
     760:	1c f4       	brge	.+6      	; 0x768 <showFieldStrength+0x3a>
            WingBar(0,0);
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	1a c0       	rjmp	.+52     	; 0x79c <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     768:	c8 37       	cpi	r28, 0x78	; 120
     76a:	d1 05       	cpc	r29, r1
     76c:	1c f4       	brge	.+6      	; 0x774 <showFieldStrength+0x46>
            WingBar(1,1);
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	14 c0       	rjmp	.+40     	; 0x79c <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     774:	c6 39       	cpi	r28, 0x96	; 150
     776:	d1 05       	cpc	r29, r1
     778:	1c f4       	brge	.+6      	; 0x780 <showFieldStrength+0x52>
            WingBar(2,2);
     77a:	62 e0       	ldi	r22, 0x02	; 2
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	0e c0       	rjmp	.+28     	; 0x79c <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     780:	c8 3c       	cpi	r28, 0xC8	; 200
     782:	d1 05       	cpc	r29, r1
     784:	1c f4       	brge	.+6      	; 0x78c <showFieldStrength+0x5e>
            WingBar(3,3);
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	08 c0       	rjmp	.+16     	; 0x79c <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     78c:	cc 32       	cpi	r28, 0x2C	; 44
     78e:	d1 40       	sbci	r29, 0x01	; 1
     790:	1c f4       	brge	.+6      	; 0x798 <showFieldStrength+0x6a>
            WingBar(4,4);
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	02 c0       	rjmp	.+4      	; 0x79c <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     798:	65 e0       	ldi	r22, 0x05	; 5
     79a:	85 e0       	ldi	r24, 0x05	; 5
     79c:	19 d7       	rcall	.+3634   	; 0x15d0 <WingBar>
    }
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     7a8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	71 f4       	brne	.+28     	; 0x7cc <MagnetMaze+0x28>
     7b0:	6a e0       	ldi	r22, 0x0A	; 10
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <mazeLastActive>
     7b8:	90 91 4e 38 	lds	r25, 0x384E	; 0x80384e <mazeLastActive+0x1>
     7bc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <idleTimeout>
     7c0:	88 23       	and	r24, r24
     7c2:	21 f0       	breq	.+8      	; 0x7cc <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     7c4:	a5 df       	rcall	.-182    	; 0x710 <initMaze>
        gameNow = TEXT;
     7c6:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        return 0;
     7ca:	e5 c0       	rjmp	.+458    	; 0x996 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     7cc:	87 ef       	ldi	r24, 0xF7	; 247
     7ce:	33 d6       	rcall	.+3174   	; 0x1436 <CheckState>
     7d0:	81 11       	cpse	r24, r1
     7d2:	e1 c0       	rjmp	.+450    	; 0x996 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7d4:	8d e7       	ldi	r24, 0x7D	; 125
     7d6:	2f d6       	rcall	.+3166   	; 0x1436 <CheckState>
     7d8:	81 11       	cpse	r24, r1
     7da:	dd c0       	rjmp	.+442    	; 0x996 <MagnetMaze+0x1f2>
     7dc:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	08 f0       	brcs	.+2      	; 0x7e6 <MagnetMaze+0x42>
     7e4:	d8 c0       	rjmp	.+432    	; 0x996 <MagnetMaze+0x1f2>
     7e6:	80 91 f4 3a 	lds	r24, 0x3AF4	; 0x803af4 <calHall>
        return 0;

    if (calHall == 0)
     7ea:	90 91 f5 3a 	lds	r25, 0x3AF5	; 0x803af5 <calHall+0x1>
     7ee:	89 2b       	or	r24, r25
     7f0:	41 f4       	brne	.+16     	; 0x802 <MagnetMaze+0x5e>
     7f2:	80 91 c4 3a 	lds	r24, 0x3AC4	; 0x803ac4 <adcHall>
        calHall = adcHall;
     7f6:	90 91 c5 3a 	lds	r25, 0x3AC5	; 0x803ac5 <adcHall+0x1>
     7fa:	80 93 f4 3a 	sts	0x3AF4, r24	; 0x803af4 <calHall>
     7fe:	90 93 f5 3a 	sts	0x3AF5, r25	; 0x803af5 <calHall+0x1>
     802:	c0 91 c4 3a 	lds	r28, 0x3AC4	; 0x803ac4 <adcHall>

    int16_t valHall = adcHall - calHall;
     806:	d0 91 c5 3a 	lds	r29, 0x3AC5	; 0x803ac5 <adcHall+0x1>
     80a:	80 91 f4 3a 	lds	r24, 0x3AF4	; 0x803af4 <calHall>
     80e:	90 91 f5 3a 	lds	r25, 0x3AF5	; 0x803af5 <calHall+0x1>
     812:	c8 1b       	sub	r28, r24
     814:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     816:	ce 01       	movw	r24, r28
     818:	8a df       	rcall	.-236    	; 0x72e <showFieldStrength>
     81a:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <curHallState>

    switch (curHallState) {
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	89 f0       	breq	.+34     	; 0x844 <MagnetMaze+0xa0>
     822:	18 f0       	brcs	.+6      	; 0x82a <MagnetMaze+0x86>
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	c1 f0       	breq	.+48     	; 0x858 <MagnetMaze+0xb4>
     828:	1f c0       	rjmp	.+62     	; 0x868 <MagnetMaze+0xc4>
     82a:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     82c:	9e ef       	ldi	r25, 0xFE	; 254
     82e:	d9 07       	cpc	r29, r25
     830:	14 f4       	brge	.+4      	; 0x836 <MagnetMaze+0x92>
     832:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     834:	04 c0       	rjmp	.+8      	; 0x83e <MagnetMaze+0x9a>
     836:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     838:	d1 40       	sbci	r29, 0x01	; 1
     83a:	5c f0       	brlt	.+22     	; 0x852 <MagnetMaze+0xae>
     83c:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     83e:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <newHallState>
     842:	12 c0       	rjmp	.+36     	; 0x868 <MagnetMaze+0xc4>
     844:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	d9 07       	cpc	r29, r25
     84a:	c4 f7       	brge	.-16     	; 0x83c <MagnetMaze+0x98>
     84c:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     84e:	df 4f       	sbci	r29, 0xFF	; 255
     850:	84 f3       	brlt	.-32     	; 0x832 <MagnetMaze+0x8e>
     852:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     856:	08 c0       	rjmp	.+16     	; 0x868 <MagnetMaze+0xc4>
     858:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     85a:	9e ef       	ldi	r25, 0xFE	; 254
     85c:	d9 07       	cpc	r29, r25
     85e:	4c f3       	brlt	.-46     	; 0x832 <MagnetMaze+0x8e>
     860:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     862:	d1 05       	cpc	r29, r1
     864:	b4 f3       	brlt	.-20     	; 0x852 <MagnetMaze+0xae>
     866:	ea cf       	rjmp	.-44     	; 0x83c <MagnetMaze+0x98>
     868:	c0 91 08 bf 	lds	r28, 0xBF08	; 0x80bf08 <__bss_end+0x83ed>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     86c:	ec 2f       	mov	r30, r28
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	90 91 53 38 	lds	r25, 0x3853	; 0x803853 <newHallState>
     874:	99 23       	and	r25, r25
     876:	19 f0       	breq	.+6      	; 0x87e <MagnetMaze+0xda>
     878:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     87c:	01 c0       	rjmp	.+2      	; 0x880 <MagnetMaze+0xdc>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	e4 53       	subi	r30, 0x34	; 52
     882:	f5 4c       	sbci	r31, 0xC5	; 197
     884:	20 83       	st	Z, r18
     886:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     888:	31 e0       	ldi	r19, 0x01	; 1
     88a:	20 93 40 38 	sts	0x3840, r18	; 0x803840 <effect>
     88e:	30 93 41 38 	sts	0x3841, r19	; 0x803841 <effect+0x1>
     892:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     894:	09 f4       	brne	.+2      	; 0x898 <MagnetMaze+0xf4>
     896:	7f c0       	rjmp	.+254    	; 0x996 <MagnetMaze+0x1f2>
     898:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     89c:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <mazeLastActive>
     8a0:	90 93 4e 38 	sts	0x384E, r25	; 0x80384e <mazeLastActive+0x1>
     8a4:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     8a8:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <newHallState>
     8ac:	91 11       	cpse	r25, r1
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <MagnetMaze+0x11c>
     8b0:	88 23       	and	r24, r24
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <MagnetMaze+0x11c>
     8b4:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	09 f4       	brne	.+2      	; 0x8bc <MagnetMaze+0x118>
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inverted>
     8c0:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <curHallState>

        curHallState = newHallState;
     8c4:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     8c6:	09 f4       	brne	.+2      	; 0x8ca <MagnetMaze+0x126>
     8c8:	66 c0       	rjmp	.+204    	; 0x996 <MagnetMaze+0x1f2>
     8ca:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
            if (gameNow == TEXT)
     8ce:	81 11       	cpse	r24, r1
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <MagnetMaze+0x130>
                initMaze();
     8d2:	1e df       	rcall	.-452    	; 0x710 <initMaze>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     8d6:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
     8da:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     8de:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <curHallState>
     8e2:	88 23       	and	r24, r24
     8e4:	11 f0       	breq	.+4      	; 0x8ea <MagnetMaze+0x146>
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	28 27       	eor	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <mazePos>
     8f0:	e8 2f       	mov	r30, r24
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ea 5a       	subi	r30, 0xAA	; 170
     8f6:	f0 44       	sbci	r31, 0x40	; 64
     8f8:	40 81       	ld	r20, Z
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	24 17       	cp	r18, r20
     8fe:	35 07       	cpc	r19, r21
     900:	91 f4       	brne	.+36     	; 0x926 <MagnetMaze+0x182>
     902:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     906:	91 70       	andi	r25, 0x01	; 1
     908:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     90c:	e0 91 17 bf 	lds	r30, 0xBF17	; 0x80bf17 <__bss_end+0x83fc>
                iLED[EYE[R][L]] = 0;
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	e4 53       	subi	r30, 0x34	; 52
     914:	f5 4c       	sbci	r31, 0xC5	; 197
     916:	10 82       	st	Z, r1
     918:	e0 91 16 bf 	lds	r30, 0xBF16	; 0x80bf16 <__bss_end+0x83fb>
                iLED[EYE[R][R]] = 0;
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e4 53       	subi	r30, 0x34	; 52
     920:	f5 4c       	sbci	r31, 0xC5	; 197
     922:	10 82       	st	Z, r1
     924:	02 c0       	rjmp	.+4      	; 0x92a <MagnetMaze+0x186>
     926:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     92a:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     92c:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <mazePos>
     930:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <mazeCnt>
            mazeCnt++;            
     934:	9f 5f       	subi	r25, 0xFF	; 255
     936:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     938:	18 f4       	brcc	.+6      	; 0x940 <MagnetMaze+0x19c>
     93a:	90 93 50 38 	sts	0x3850, r25	; 0x803850 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     93e:	2b c0       	rjmp	.+86     	; 0x996 <MagnetMaze+0x1f2>
     940:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     944:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     948:	91 30       	cpi	r25, 0x01	; 1
     94a:	e1 f4       	brne	.+56     	; 0x984 <MagnetMaze+0x1e0>
     94c:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     950:	e9 2f       	mov	r30, r25
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	e6 5e       	subi	r30, 0xE6	; 230
     956:	f0 44       	sbci	r31, 0x40	; 64
     958:	e6 81       	ldd	r30, Z+6	; 0x06
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     960:	e4 53       	subi	r30, 0x34	; 52
     962:	f5 4c       	sbci	r31, 0xC5	; 197
     964:	20 83       	st	Z, r18
     966:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     968:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     96c:	82 31       	cpi	r24, 0x12	; 18
     96e:	99 f4       	brne	.+38     	; 0x996 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     970:	8d e7       	ldi	r24, 0x7D	; 125
     972:	3f d5       	rcall	.+2686   	; 0x13f2 <UpdateState>
     974:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e4 53       	subi	r30, 0x34	; 52
     97a:	f5 4c       	sbci	r31, 0xC5	; 197
     97c:	10 82       	st	Z, r1
                        effect = 0x42;
     97e:	82 e4       	ldi	r24, 0x42	; 66
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	05 c0       	rjmp	.+10     	; 0x98e <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     984:	c5 de       	rcall	.-630    	; 0x710 <initMaze>
     986:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                    gameNow   = TEXT;
     98a:	81 e3       	ldi	r24, 0x31	; 49
                    effect = 0x31;
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     992:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     996:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <Setup>:
     99e:	cf 93       	push	r28
    TCB1_CCMP = pitch;
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    auVolume = volume;
    return 1;
}
     9a0:	df 93       	push	r29
     9a2:	f8 94       	cli
     9a4:	88 ed       	ldi	r24, 0xD8	; 216
     9a6:	84 bf       	out	0x34, r24	; 52
     9a8:	c1 e0       	ldi	r28, 0x01	; 1
     9aa:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     9ae:	8a e4       	ldi	r24, 0x4A	; 74
     9b0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     9b4:	8c e7       	ldi	r24, 0x7C	; 124
     9b6:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     9ba:	9f e3       	ldi	r25, 0x3F	; 63
     9bc:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     9c0:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9c4:	80 68       	ori	r24, 0x80	; 128
     9c6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9ca:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9d4:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9de:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9e2:	80 68       	ori	r24, 0x80	; 128
     9e4:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9e8:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9ec:	80 68       	ori	r24, 0x80	; 128
     9ee:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9f2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9f6:	80 68       	ori	r24, 0x80	; 128
     9f8:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9fc:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     a00:	d2 e0       	ldi	r29, 0x02	; 2
     a02:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     a06:	2b e5       	ldi	r18, 0x5B	; 91
     a08:	31 e0       	ldi	r19, 0x01	; 1
     a0a:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a0e:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     a12:	80 ea       	ldi	r24, 0xA0	; 160
     a14:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a18:	80 ec       	ldi	r24, 0xC0	; 192
     a1a:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     a24:	1c ba       	out	0x1c, r1	; 28
     a26:	1d ba       	out	0x1d, r1	; 29
     a28:	1f ba       	out	0x1f, r1	; 31
     a2a:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     a2e:	88 e0       	ldi	r24, 0x08	; 8
     a30:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a34:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     a38:	87 e7       	ldi	r24, 0x77	; 119
     a3a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     a3e:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     a42:	8b e0       	ldi	r24, 0x0B	; 11
     a44:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a48:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a4c:	81 60       	ori	r24, 0x01	; 1
     a4e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a52:	85 e0       	ldi	r24, 0x05	; 5
     a54:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     a58:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a64:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     a68:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a6c:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     a70:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     a74:	8b e8       	ldi	r24, 0x8B	; 139
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a7c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     a80:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     a84:	4d dc       	rcall	.-1894   	; 0x320 <I2C_init>
     a86:	82 e1       	ldi	r24, 0x12	; 18
     a88:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a8c:	80 e2       	ldi	r24, 0x20	; 32
     a8e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a92:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     a96:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a9a:	84 e4       	ldi	r24, 0x44	; 68
     a9c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     aa0:	8e e1       	ldi	r24, 0x1E	; 30
     aa2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     aa6:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     aaa:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     aae:	81 60       	ori	r24, 0x01	; 1
     ab0:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     ab4:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     ab8:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     abc:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     ac0:	82 e5       	ldi	r24, 0x52	; 82
     ac2:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     acc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ad0:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     ad4:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ad8:	81 60       	ori	r24, 0x01	; 1
     ada:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ade:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ae8:	80 e8       	ldi	r24, 0x80	; 128
     aea:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     aee:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     af8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     afc:	80 fd       	sbrc	r24, 0
     afe:	fc cf       	rjmp	.-8      	; 0xaf8 <Setup+0x15a>
     b00:	80 e3       	ldi	r24, 0x30	; 48
     b02:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b06:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     b0a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b0e:	82 fd       	sbrc	r24, 2
     b10:	fc cf       	rjmp	.-8      	; 0xb0a <Setup+0x16c>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	98 e7       	ldi	r25, 0x78	; 120
     b16:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b1a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b1e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b22:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b26:	82 96       	adiw	r24, 0x22	; 34
     b28:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     b2c:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
     b30:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b34:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b38:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b3c:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b40:	28 17       	cp	r18, r24
     b42:	39 07       	cpc	r19, r25
     b44:	70 f4       	brcc	.+28     	; 0xb62 <Setup+0x1c4>
     b46:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b4a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b4e:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b52:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b56:	82 1b       	sub	r24, r18
     b58:	93 0b       	sbc	r25, r19
     b5a:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     b5e:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
     b62:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b66:	83 fd       	sbrc	r24, 3
     b68:	fc cf       	rjmp	.-8      	; 0xb62 <Setup+0x1c4>
     b6a:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b6e:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b72:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b76:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     b86:	88 e0       	ldi	r24, 0x08	; 8
     b88:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b8c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b90:	80 fd       	sbrc	r24, 0
     b92:	fc cf       	rjmp	.-8      	; 0xb8c <Setup+0x1ee>
     b94:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b98:	81 60       	ori	r24, 0x01	; 1
     b9a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b9e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     ba8:	10 92 7e 3a 	sts	0x3A7E, r1	; 0x803a7e <serRx>
     bac:	8e e7       	ldi	r24, 0x7E	; 126
     bae:	9a e3       	ldi	r25, 0x3A	; 58
     bb0:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <serTxAddr>
     bb4:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <serTxAddr+0x1>
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     bbe:	78 94       	sei
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <__vector_8>:
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
     bdc:	87 e0       	ldi	r24, 0x07	; 7
     bde:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     be2:	84 e4       	ldi	r24, 0x44	; 68
     be4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     be8:	ec b3       	in	r30, 0x1c	; 28
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	e8 9f       	mul	r30, r24
     bee:	f0 01       	movw	r30, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	e4 53       	subi	r30, 0x34	; 52
     bf4:	f5 4c       	sbci	r31, 0xC5	; 197
     bf6:	a8 e2       	ldi	r26, 0x28	; 40
     bf8:	ba e0       	ldi	r27, 0x0A	; 10
     bfa:	96 e0       	ldi	r25, 0x06	; 6
     bfc:	81 91       	ld	r24, Z+
     bfe:	8d 93       	st	X+, r24
     c00:	9a 95       	dec	r25
     c02:	e1 f7       	brne	.-8      	; 0xbfc <__vector_8+0x36>
     c04:	8b e0       	ldi	r24, 0x0B	; 11
     c06:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     c0a:	8c b3       	in	r24, 0x1c	; 28
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	58 f4       	brcc	.+22     	; 0xc26 <__vector_8+0x60>
     c10:	8c b3       	in	r24, 0x1c	; 28
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <__vector_8+0x52>
     c16:	99 0f       	add	r25, r25
     c18:	8a 95       	dec	r24
     c1a:	ea f7       	brpl	.-6      	; 0xc16 <__vector_8+0x50>
     c1c:	99 b9       	out	0x09, r25	; 9
     c1e:	8c b3       	in	r24, 0x1c	; 28
     c20:	83 95       	inc	r24
     c22:	8c bb       	out	0x1c, r24	; 28
     c24:	0a c0       	rjmp	.+20     	; 0xc3a <__vector_8+0x74>
     c26:	8c b3       	in	r24, 0x1c	; 28
     c28:	83 30       	cpi	r24, 0x03	; 3
     c2a:	21 f4       	brne	.+8      	; 0xc34 <__vector_8+0x6e>
     c2c:	2a 9a       	sbi	0x05, 2	; 5
     c2e:	83 95       	inc	r24
     c30:	8c bb       	out	0x1c, r24	; 28
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <__vector_8+0x74>
     c34:	2e 9a       	sbi	0x05, 6	; 5
     c36:	88 27       	eor	r24, r24
     c38:	8c bb       	out	0x1c, r24	; 28
     c3a:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     c3e:	88 23       	and	r24, r24
     c40:	29 f0       	breq	.+10     	; 0xc4c <__vector_8+0x86>
     c42:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     c46:	81 50       	subi	r24, 0x01	; 1
     c48:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <__vector_13>:
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
     c7a:	e0 91 c2 3a 	lds	r30, 0x3AC2	; 0x803ac2 <serTxAddr>
     c7e:	f0 91 c3 3a 	lds	r31, 0x3AC3	; 0x803ac3 <serTxAddr+0x1>
     c82:	80 81       	ld	r24, Z
     c84:	88 23       	and	r24, r24
     c86:	91 f0       	breq	.+36     	; 0xcac <__vector_13+0x44>
     c88:	80 81       	ld	r24, Z
     c8a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     c8e:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <serTxAddr>
     c92:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <serTxAddr+0x1>
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <serTxAddr>
     c9c:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <serTxAddr+0x1>
     ca0:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     ca4:	80 62       	ori	r24, 0x20	; 32
     ca6:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <__vector_13+0x4e>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
     cb2:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <__vector_14>:
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
     ce6:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cea:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cee:	80 81       	ld	r24, Z
     cf0:	81 11       	cpse	r24, r1
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <__vector_14+0x36>
     cf4:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     cf8:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     cfc:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d00:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d04:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d08:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	e1 f0       	breq	.+56     	; 0xd4a <__vector_14+0x7c>
     d12:	20 81       	ld	r18, Z
     d14:	40 91 bf 3a 	lds	r20, 0x3ABF	; 0x803abf <auVolume>
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	2f 57       	subi	r18, 0x7F	; 127
     d1c:	31 09       	sbc	r19, r1
     d1e:	42 9f       	mul	r20, r18
     d20:	c0 01       	movw	r24, r0
     d22:	43 9f       	mul	r20, r19
     d24:	90 0d       	add	r25, r0
     d26:	11 24       	eor	r1, r1
     d28:	89 2f       	mov	r24, r25
     d2a:	99 0f       	add	r25, r25
     d2c:	99 0b       	sbc	r25, r25
     d2e:	80 58       	subi	r24, 0x80	; 128
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     d36:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d3a:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d44:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <__vector_14+0x88>
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_27>:
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	8f 93       	push	r24
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
     d84:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <serRxDone>
     d88:	81 11       	cpse	r24, r1
     d8a:	44 c0       	rjmp	.+136    	; 0xe14 <__vector_27+0xa0>
     d8c:	ed b3       	in	r30, 0x1d	; 29
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d94:	e2 58       	subi	r30, 0x82	; 130
     d96:	f5 4c       	sbci	r31, 0xC5	; 197
     d98:	80 83       	st	Z, r24
     d9a:	ed b3       	in	r30, 0x1d	; 29
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	e2 58       	subi	r30, 0x82	; 130
     da0:	f5 4c       	sbci	r31, 0xC5	; 197
     da2:	80 81       	ld	r24, Z
     da4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     da8:	ed b3       	in	r30, 0x1d	; 29
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	e2 58       	subi	r30, 0x82	; 130
     dae:	f5 4c       	sbci	r31, 0xC5	; 197
     db0:	80 81       	ld	r24, Z
     db2:	8a 30       	cpi	r24, 0x0A	; 10
     db4:	39 f0       	breq	.+14     	; 0xdc4 <__vector_27+0x50>
     db6:	ed b3       	in	r30, 0x1d	; 29
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	e2 58       	subi	r30, 0x82	; 130
     dbc:	f5 4c       	sbci	r31, 0xC5	; 197
     dbe:	80 81       	ld	r24, Z
     dc0:	8d 30       	cpi	r24, 0x0D	; 13
     dc2:	49 f4       	brne	.+18     	; 0xdd6 <__vector_27+0x62>
     dc4:	ed b3       	in	r30, 0x1d	; 29
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	e2 58       	subi	r30, 0x82	; 130
     dca:	f5 4c       	sbci	r31, 0xC5	; 197
     dcc:	10 82       	st	Z, r1
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <serRxDone>
     dd4:	1f c0       	rjmp	.+62     	; 0xe14 <__vector_27+0xa0>
     dd6:	ed b3       	in	r30, 0x1d	; 29
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	e2 58       	subi	r30, 0x82	; 130
     ddc:	f5 4c       	sbci	r31, 0xC5	; 197
     dde:	80 81       	ld	r24, Z
     de0:	88 30       	cpi	r24, 0x08	; 8
     de2:	39 f0       	breq	.+14     	; 0xdf2 <__vector_27+0x7e>
     de4:	ed b3       	in	r30, 0x1d	; 29
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	e2 58       	subi	r30, 0x82	; 130
     dea:	f5 4c       	sbci	r31, 0xC5	; 197
     dec:	80 81       	ld	r24, Z
     dee:	8f 37       	cpi	r24, 0x7F	; 127
     df0:	59 f4       	brne	.+22     	; 0xe08 <__vector_27+0x94>
     df2:	8d b3       	in	r24, 0x1d	; 29
     df4:	88 23       	and	r24, r24
     df6:	41 f0       	breq	.+16     	; 0xe08 <__vector_27+0x94>
     df8:	ed b3       	in	r30, 0x1d	; 29
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	e2 58       	subi	r30, 0x82	; 130
     dfe:	f5 4c       	sbci	r31, 0xC5	; 197
     e00:	10 82       	st	Z, r1
     e02:	8d b3       	in	r24, 0x1d	; 29
     e04:	81 50       	subi	r24, 0x01	; 1
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <__vector_27+0x9e>
     e08:	8d b3       	in	r24, 0x1d	; 29
     e0a:	80 34       	cpi	r24, 0x40	; 64
     e0c:	18 f4       	brcc	.+6      	; 0xe14 <__vector_27+0xa0>
     e0e:	8d b3       	in	r24, 0x1d	; 29
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	8d bb       	out	0x1d, r24	; 29
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	8f 91       	pop	r24
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	0f 90       	pop	r0
     e26:	1f 90       	pop	r1
     e28:	18 95       	reti

00000e2a <__vector_28>:
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	8f 93       	push	r24
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
     e3a:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e3e:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e48:	e5 e0       	ldi	r30, 0x05	; 5
     e4a:	f8 e0       	ldi	r31, 0x08	; 8
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 7d       	andi	r24, 0xDF	; 223
     e50:	80 83       	st	Z, r24
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	8f 91       	pop	r24
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_20>:
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     e74:	81 11       	cpse	r24, r1
     e76:	12 c0       	rjmp	.+36     	; 0xe9c <__vector_20+0x3a>
     e78:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e7c:	8e 31       	cpi	r24, 0x1E	; 30
     e7e:	49 f4       	brne	.+18     	; 0xe92 <__vector_20+0x30>
     e80:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e84:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e88:	80 93 f6 3a 	sts	0x3AF6, r24	; 0x803af6 <adcTemp>
     e8c:	90 93 f7 3a 	sts	0x3AF7, r25	; 0x803af7 <adcTemp+0x1>
     e90:	0a c0       	rjmp	.+20     	; 0xea6 <__vector_20+0x44>
     e92:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e96:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <auIn>
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <__vector_20+0x44>
     e9c:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_22>:
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ecc:	81 11       	cpse	r24, r1
     ece:	0a c0       	rjmp	.+20     	; 0xee4 <__vector_22+0x2a>
     ed0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ed4:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ed8:	80 93 c6 3a 	sts	0x3AC6, r24	; 0x803ac6 <adcPhot>
     edc:	90 93 c7 3a 	sts	0x3AC7, r25	; 0x803ac7 <adcPhot+0x1>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	10 c0       	rjmp	.+32     	; 0xf04 <__vector_22+0x4a>
     ee4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	79 f4       	brne	.+30     	; 0xf0a <__vector_22+0x50>
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     ef2:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ef6:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     efa:	80 93 c4 3a 	sts	0x3AC4, r24	; 0x803ac4 <adcHall>
     efe:	90 93 c5 3a 	sts	0x3AC5, r25	; 0x803ac5 <adcHall+0x1>
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f08:	10 c0       	rjmp	.+32     	; 0xf2a <__vector_22+0x70>
     f0a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f0e:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f12:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <adcBtns>
     f16:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <adcBtns+0x1>
     f1a:	8f b3       	in	r24, 0x1f	; 31
     f1c:	8f 30       	cpi	r24, 0x0F	; 15
     f1e:	29 f4       	brne	.+10     	; 0xf2a <__vector_22+0x70>
     f20:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     f2a:	8f b3       	in	r24, 0x1f	; 31
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	8f 70       	andi	r24, 0x0F	; 15
     f32:	99 27       	eor	r25, r25
     f34:	8f bb       	out	0x1f, r24	; 31
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_6>:
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f60:	81 ff       	sbrs	r24, 1
     f62:	36 c0       	rjmp	.+108    	; 0xfd0 <__vector_6+0x86>
     f64:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f68:	8f 3f       	cpi	r24, 0xFF	; 255
     f6a:	29 f0       	breq	.+10     	; 0xf76 <__vector_6+0x2c>
     f6c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>
     f76:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f7a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f7e:	82 96       	adiw	r24, 0x22	; 34
     f80:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     f84:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
     f88:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f8c:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f90:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     f94:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	58 f4       	brcc	.+22     	; 0xfb4 <__vector_6+0x6a>
     f9e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     fa2:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     fa6:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     faa:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     fae:	82 1b       	sub	r24, r18
     fb0:	93 0b       	sbc	r25, r19
     fb2:	e6 cf       	rjmp	.-52     	; 0xf80 <__vector_6+0x36>
     fb4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     fb8:	83 fd       	sbrc	r24, 3
     fba:	fc cf       	rjmp	.-8      	; 0xfb4 <__vector_6+0x6a>
     fbc:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     fc0:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     fc4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fc8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <__vector_6+0x92>
     fd0:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <minuteMark>
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <minuteMark>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_7>:
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	8f 93       	push	r24
     ffe:	9f 93       	push	r25
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    1006:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <fastTicker>
    1010:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <EERead>:
    1022:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1026:	91 fd       	sbrc	r25, 1
    1028:	fc cf       	rjmp	.-8      	; 0x1022 <EERead>
    102a:	fb 01       	movw	r30, r22
    102c:	48 0f       	add	r20, r24
    102e:	84 17       	cp	r24, r20
    1030:	39 f0       	breq	.+14     	; 0x1040 <EERead+0x1e>
    1032:	a8 2f       	mov	r26, r24
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	bc 5e       	subi	r27, 0xEC	; 236
    1038:	9c 91       	ld	r25, X
    103a:	91 93       	st	Z+, r25
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	f7 cf       	rjmp	.-18     	; 0x102e <EERead+0xc>
    1040:	08 95       	ret

00001042 <EEWrite>:
    1042:	9d e9       	ldi	r25, 0x9D	; 157
    1044:	24 e0       	ldi	r18, 0x04	; 4
    1046:	33 e0       	ldi	r19, 0x03	; 3
    1048:	44 23       	and	r20, r20
    104a:	09 f1       	breq	.+66     	; 0x108e <EEWrite+0x4c>
    104c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1050:	51 fd       	sbrc	r21, 1
    1052:	fc cf       	rjmp	.-8      	; 0x104c <EEWrite+0xa>
    1054:	94 bf       	out	0x34, r25	; 52
    1056:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    105a:	e8 2f       	mov	r30, r24
    105c:	58 2f       	mov	r21, r24
    105e:	5f 71       	andi	r21, 0x1F	; 31
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	db 01       	movw	r26, r22
    1068:	11 97       	sbiw	r26, 0x01	; 1
    106a:	ac 91       	ld	r26, X
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	fc 5e       	subi	r31, 0xEC	; 236
    1070:	a0 83       	st	Z, r26
    1072:	41 50       	subi	r20, 0x01	; 1
    1074:	19 f0       	breq	.+6      	; 0x107c <EEWrite+0x3a>
    1076:	e8 2f       	mov	r30, r24
    1078:	5f 31       	cpi	r21, 0x1F	; 31
    107a:	81 f7       	brne	.-32     	; 0x105c <EEWrite+0x1a>
    107c:	94 bf       	out	0x34, r25	; 52
    107e:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1082:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1086:	52 ff       	sbrs	r21, 2
    1088:	df cf       	rjmp	.-66     	; 0x1048 <EEWrite+0x6>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	08 95       	ret
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret

00001092 <DecryptData>:
    1092:	f9 01       	movw	r30, r18
    1094:	9c 01       	movw	r18, r24
    1096:	2e 1b       	sub	r18, r30
    1098:	3f 0b       	sbc	r19, r31
    109a:	88 e0       	ldi	r24, 0x08	; 8
    109c:	48 9f       	mul	r20, r24
    109e:	a0 01       	movw	r20, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	4a 5b       	subi	r20, 0xBA	; 186
    10a4:	50 44       	sbci	r21, 0x40	; 64
    10a6:	66 23       	and	r22, r22
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <DecryptData+0x32>
    10aa:	df 01       	movw	r26, r30
    10ac:	a2 0f       	add	r26, r18
    10ae:	b3 1f       	adc	r27, r19
    10b0:	a7 70       	andi	r26, 0x07	; 7
    10b2:	bb 27       	eor	r27, r27
    10b4:	a4 0f       	add	r26, r20
    10b6:	b5 1f       	adc	r27, r21
    10b8:	80 81       	ld	r24, Z
    10ba:	9c 91       	ld	r25, X
    10bc:	98 27       	eor	r25, r24
    10be:	91 93       	st	Z+, r25
    10c0:	61 50       	subi	r22, 0x01	; 1
    10c2:	f1 cf       	rjmp	.-30     	; 0x10a6 <DecryptData+0x14>
    10c4:	08 95       	ret

000010c6 <ExtEERead>:
    10c6:	a2 e0       	ldi	r26, 0x02	; 2
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 e6       	ldi	r30, 0x69	; 105
    10cc:	f8 e0       	ldi	r31, 0x08	; 8
    10ce:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__prologue_saves__+0x10>
    10d2:	d6 2e       	mov	r13, r22
    10d4:	c4 2e       	mov	r12, r20
    10d6:	59 01       	movw	r10, r18
    10d8:	7c 01       	movw	r14, r24
    10da:	e8 94       	clt
    10dc:	f7 f8       	bld	r15, 7
    10de:	f9 82       	std	Y+1, r15	; 0x01
    10e0:	ea 82       	std	Y+2, r14	; 0x02
    10e2:	06 2f       	mov	r16, r22
    10e4:	42 e0       	ldi	r20, 0x02	; 2
    10e6:	be 01       	movw	r22, r28
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	80 e5       	ldi	r24, 0x50	; 80
    10ee:	16 da       	rcall	.-3028   	; 0x51c <I2C_read_bytes>
    10f0:	18 2f       	mov	r17, r24
    10f2:	81 11       	cpse	r24, r1
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <ExtEERead+0x3a>
    10f6:	95 01       	movw	r18, r10
    10f8:	4c 2d       	mov	r20, r12
    10fa:	6d 2d       	mov	r22, r13
    10fc:	c7 01       	movw	r24, r14
    10fe:	c9 df       	rcall	.-110    	; 0x1092 <DecryptData>
    1100:	81 2f       	mov	r24, r17
    1102:	22 96       	adiw	r28, 0x02	; 2
    1104:	ea e0       	ldi	r30, 0x0A	; 10
    1106:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <__epilogue_restores__+0x10>

0000110a <SerSend>:
    110a:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    110e:	22 23       	and	r18, r18
    1110:	59 f0       	breq	.+22     	; 0x1128 <SerSend+0x1e>
    1112:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <serTxAddr>
    1116:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <serTxAddr+0x1>
    111a:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	08 95       	ret
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	08 95       	ret

0000112c <SerSpeed>:
    112c:	28 2f       	mov	r18, r24
    112e:	81 11       	cpse	r24, r1
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <SerSpeed+0x8>
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	82 1b       	sub	r24, r18
    113a:	91 09       	sbc	r25, r1
    113c:	98 2f       	mov	r25, r24
    113e:	88 27       	eor	r24, r24
    1140:	81 50       	subi	r24, 0x01	; 1
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1148:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    114c:	08 95       	ret

0000114e <SelectTSens>:
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    1154:	82 e1       	ldi	r24, 0x12	; 18
    1156:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    115a:	e0 e0       	ldi	r30, 0x00	; 0
    115c:	f6 e0       	ldi	r31, 0x06	; 6
    115e:	80 81       	ld	r24, Z
    1160:	8b 7f       	andi	r24, 0xFB	; 251
    1162:	80 83       	st	Z, r24
    1164:	8e e1       	ldi	r24, 0x1E	; 30
    1166:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    116a:	08 95       	ret

0000116c <SelectAuIn>:
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    1172:	82 e2       	ldi	r24, 0x22	; 34
    1174:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1178:	e0 e0       	ldi	r30, 0x00	; 0
    117a:	f6 e0       	ldi	r31, 0x06	; 6
    117c:	80 81       	ld	r24, Z
    117e:	84 60       	ori	r24, 0x04	; 4
    1180:	80 83       	st	Z, r24
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1188:	08 95       	ret

0000118a <CheckButtons>:
    118a:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <adcBtns>
    118e:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <adcBtns+0x1>
    1192:	24 e0       	ldi	r18, 0x04	; 4
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	2a 95       	dec	r18
    119a:	e1 f7       	brne	.-8      	; 0x1194 <CheckButtons+0xa>
    119c:	99 27       	eor	r25, r25
    119e:	80 36       	cpi	r24, 0x60	; 96
    11a0:	91 05       	cpc	r25, r1
    11a2:	40 f4       	brcc	.+16     	; 0x11b4 <CheckButtons+0x2a>
    11a4:	8f 34       	cpi	r24, 0x4F	; 79
    11a6:	91 05       	cpc	r25, r1
    11a8:	88 f4       	brcc	.+34     	; 0x11cc <CheckButtons+0x42>
    11aa:	c0 97       	sbiw	r24, 0x30	; 48
    11ac:	09 97       	sbiw	r24, 0x09	; 9
    11ae:	90 f4       	brcc	.+36     	; 0x11d4 <CheckButtons+0x4a>
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <CheckButtons+0x4c>
    11b4:	85 37       	cpi	r24, 0x75	; 117
    11b6:	91 05       	cpc	r25, r1
    11b8:	68 f0       	brcs	.+26     	; 0x11d4 <CheckButtons+0x4a>
    11ba:	8e 38       	cpi	r24, 0x8E	; 142
    11bc:	91 05       	cpc	r25, r1
    11be:	40 f0       	brcs	.+16     	; 0x11d0 <CheckButtons+0x46>
    11c0:	8e 59       	subi	r24, 0x9E	; 158
    11c2:	91 09       	sbc	r25, r1
    11c4:	81 97       	sbiw	r24, 0x21	; 33
    11c6:	30 f4       	brcc	.+12     	; 0x11d4 <CheckButtons+0x4a>
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <CheckButtons+0x4c>
    11cc:	93 e0       	ldi	r25, 0x03	; 3
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <CheckButtons+0x4c>
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <CheckButtons+0x4c>
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <previousValue.3908>
    11da:	98 17       	cp	r25, r24
    11dc:	19 f0       	breq	.+6      	; 0x11e4 <CheckButtons+0x5a>
    11de:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <previousValue.3908>
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	08 95       	ret

000011e6 <lfsr>:
    11e6:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <lfsrSeed>
    11ea:	90 91 64 38 	lds	r25, 0x3864	; 0x803864 <lfsrSeed+0x1>
    11ee:	9c 01       	movw	r18, r24
    11f0:	32 2f       	mov	r19, r18
    11f2:	22 27       	eor	r18, r18
    11f4:	32 95       	swap	r19
    11f6:	33 0f       	add	r19, r19
    11f8:	30 7e       	andi	r19, 0xE0	; 224
    11fa:	82 27       	eor	r24, r18
    11fc:	93 27       	eor	r25, r19
    11fe:	9c 01       	movw	r18, r24
    1200:	23 2f       	mov	r18, r19
    1202:	33 27       	eor	r19, r19
    1204:	26 95       	lsr	r18
    1206:	82 27       	eor	r24, r18
    1208:	93 27       	eor	r25, r19
    120a:	9c 01       	movw	r18, r24
    120c:	36 95       	lsr	r19
    120e:	32 2f       	mov	r19, r18
    1210:	22 27       	eor	r18, r18
    1212:	37 95       	ror	r19
    1214:	27 95       	ror	r18
    1216:	82 27       	eor	r24, r18
    1218:	93 27       	eor	r25, r19
    121a:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <lfsrSeed>
    121e:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <lfsrSeed+0x1>
    1222:	08 95       	ret

00001224 <floatSpeed>:
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e1       	ldi	r30, 0x18	; 24
    122a:	f9 e0       	ldi	r31, 0x09	; 9
    122c:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <__prologue_saves__+0x16>
    1230:	7b 01       	movw	r14, r22
    1232:	8a 01       	movw	r16, r20
    1234:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1238:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    123c:	e8 2f       	mov	r30, r24
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	31 97       	sbiw	r30, 0x01	; 1
    1242:	e7 70       	andi	r30, 0x07	; 7
    1244:	ff 27       	eor	r31, r31
    1246:	e4 5d       	subi	r30, 0xD4	; 212
    1248:	f7 4c       	sbci	r31, 0xC7	; 199
    124a:	d0 80       	ld	r13, Z
    124c:	cc df       	rcall	.-104    	; 0x11e6 <lfsr>
    124e:	8d 21       	and	r24, r13
    1250:	c8 0f       	add	r28, r24
    1252:	d1 1d       	adc	r29, r1
    1254:	c8 df       	rcall	.-112    	; 0x11e6 <lfsr>
    1256:	8d 21       	and	r24, r13
    1258:	c8 1b       	sub	r28, r24
    125a:	d1 09       	sbc	r29, r1
    125c:	0c 17       	cp	r16, r28
    125e:	1d 07       	cpc	r17, r29
    1260:	08 f4       	brcc	.+2      	; 0x1264 <floatSpeed+0x40>
    1262:	e8 01       	movw	r28, r16
    1264:	c7 01       	movw	r24, r14
    1266:	ec 16       	cp	r14, r28
    1268:	fd 06       	cpc	r15, r29
    126a:	08 f4       	brcc	.+2      	; 0x126e <floatSpeed+0x4a>
    126c:	ce 01       	movw	r24, r28
    126e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1272:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	e7 e0       	ldi	r30, 0x07	; 7
    127c:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__epilogue_restores__+0x16>

00001280 <floatAround>:
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	c8 2f       	mov	r28, r24
    128a:	d4 2f       	mov	r29, r20
    128c:	02 2f       	mov	r16, r18
    128e:	e6 2f       	mov	r30, r22
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	31 97       	sbiw	r30, 0x01	; 1
    1294:	e7 70       	andi	r30, 0x07	; 7
    1296:	ff 27       	eor	r31, r31
    1298:	e4 5d       	subi	r30, 0xD4	; 212
    129a:	f7 4c       	sbci	r31, 0xC7	; 199
    129c:	10 81       	ld	r17, Z
    129e:	a3 df       	rcall	.-186    	; 0x11e6 <lfsr>
    12a0:	81 23       	and	r24, r17
    12a2:	c8 0f       	add	r28, r24
    12a4:	a0 df       	rcall	.-192    	; 0x11e6 <lfsr>
    12a6:	81 23       	and	r24, r17
    12a8:	c8 1b       	sub	r28, r24
    12aa:	8c 2f       	mov	r24, r28
    12ac:	00 23       	and	r16, r16
    12ae:	41 f0       	breq	.+16     	; 0x12c0 <floatAround+0x40>
    12b0:	9c 2f       	mov	r25, r28
    12b2:	0c 17       	cp	r16, r28
    12b4:	08 f4       	brcc	.+2      	; 0x12b8 <floatAround+0x38>
    12b6:	90 2f       	mov	r25, r16
    12b8:	8d 2f       	mov	r24, r29
    12ba:	d9 17       	cp	r29, r25
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <floatAround+0x40>
    12be:	89 2f       	mov	r24, r25
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	8d 17       	cp	r24, r29
    12c6:	10 f0       	brcs	.+4      	; 0x12cc <floatAround+0x4c>
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	2d 2f       	mov	r18, r29
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	24 23       	and	r18, r20
    12d2:	35 23       	and	r19, r21
    12d4:	23 2b       	or	r18, r19
    12d6:	09 f0       	breq	.+2      	; 0x12da <floatAround+0x5a>
    12d8:	8d 2f       	mov	r24, r29
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	08 95       	ret

000012e4 <SaveGameState>:
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	64 97       	sbiw	r28, 0x14	; 20
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	44 e1       	ldi	r20, 0x14	; 20
    12fe:	be 01       	movw	r22, r28
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	8d de       	rcall	.-742    	; 0x1022 <EERead>
    1308:	8a e6       	ldi	r24, 0x6A	; 106
    130a:	c8 2e       	mov	r12, r24
    130c:	8a e3       	ldi	r24, 0x3A	; 58
    130e:	d8 2e       	mov	r13, r24
    1310:	8e 01       	movw	r16, r28
    1312:	0f 5f       	subi	r16, 0xFF	; 255
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	f1 2c       	mov	r15, r1
    1318:	f8 01       	movw	r30, r16
    131a:	81 91       	ld	r24, Z+
    131c:	8f 01       	movw	r16, r30
    131e:	f6 01       	movw	r30, r12
    1320:	90 81       	ld	r25, Z
    1322:	98 13       	cpse	r25, r24
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <SaveGameState+0x52>
    1326:	f3 94       	inc	r15
    1328:	ff ef       	ldi	r31, 0xFF	; 255
    132a:	cf 1a       	sub	r12, r31
    132c:	df 0a       	sbc	r13, r31
    132e:	80 e1       	ldi	r24, 0x10	; 16
    1330:	f8 12       	cpse	r15, r24
    1332:	f2 cf       	rjmp	.-28     	; 0x1318 <SaveGameState+0x34>
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <SaveGameState+0x62>
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	b6 01       	movw	r22, r12
    133a:	8f 2d       	mov	r24, r15
    133c:	82 de       	rcall	.-764    	; 0x1042 <EEWrite>
    133e:	88 23       	and	r24, r24
    1340:	91 f3       	breq	.-28     	; 0x1326 <SaveGameState+0x42>
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	36 c0       	rjmp	.+108    	; 0x13b2 <SaveGameState+0xce>
    1346:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    134a:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    134e:	30 93 7a 3a 	sts	0x3A7A, r19	; 0x803a7a <gameState+0x10>
    1352:	20 93 7b 3a 	sts	0x3A7B, r18	; 0x803a7b <gameState+0x11>
    1356:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    135a:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    135e:	90 93 7c 3a 	sts	0x3A7C, r25	; 0x803a7c <gameState+0x12>
    1362:	80 93 7d 3a 	sts	0x3A7D, r24	; 0x803a7d <gameState+0x13>
    1366:	89 89       	ldd	r24, Y+17	; 0x11
    1368:	9a 89       	ldd	r25, Y+18	; 0x12
    136a:	98 27       	eor	r25, r24
    136c:	89 27       	eor	r24, r25
    136e:	98 27       	eor	r25, r24
    1370:	28 17       	cp	r18, r24
    1372:	39 07       	cpc	r19, r25
    1374:	69 f4       	brne	.+26     	; 0x1390 <SaveGameState+0xac>
    1376:	8b 89       	ldd	r24, Y+19	; 0x13
    1378:	9c 89       	ldd	r25, Y+20	; 0x14
    137a:	98 27       	eor	r25, r24
    137c:	89 27       	eor	r24, r25
    137e:	98 27       	eor	r25, r24
    1380:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    1384:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    1388:	28 17       	cp	r18, r24
    138a:	39 07       	cpc	r19, r25
    138c:	49 f4       	brne	.+18     	; 0x13a0 <SaveGameState+0xbc>
    138e:	10 c0       	rjmp	.+32     	; 0x13b0 <SaveGameState+0xcc>
    1390:	42 e0       	ldi	r20, 0x02	; 2
    1392:	6a e7       	ldi	r22, 0x7A	; 122
    1394:	7a e3       	ldi	r23, 0x3A	; 58
    1396:	80 e1       	ldi	r24, 0x10	; 16
    1398:	54 de       	rcall	.-856    	; 0x1042 <EEWrite>
    139a:	88 23       	and	r24, r24
    139c:	61 f3       	breq	.-40     	; 0x1376 <SaveGameState+0x92>
    139e:	d1 cf       	rjmp	.-94     	; 0x1342 <SaveGameState+0x5e>
    13a0:	42 e0       	ldi	r20, 0x02	; 2
    13a2:	6c e7       	ldi	r22, 0x7C	; 124
    13a4:	7a e3       	ldi	r23, 0x3A	; 58
    13a6:	82 e1       	ldi	r24, 0x12	; 18
    13a8:	4c de       	rcall	.-872    	; 0x1042 <EEWrite>
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	81 11       	cpse	r24, r1
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <SaveGameState+0xce>
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	89 2f       	mov	r24, r25
    13b4:	64 96       	adiw	r28, 0x14	; 20
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	08 95       	ret

000013ca <ReadStatusBit>:
    13ca:	e8 2f       	mov	r30, r24
    13cc:	ef 77       	andi	r30, 0x7F	; 127
    13ce:	e6 95       	lsr	r30
    13d0:	e6 95       	lsr	r30
    13d2:	e6 95       	lsr	r30
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	e6 59       	subi	r30, 0x96	; 150
    13d8:	f5 4c       	sbci	r31, 0xC5	; 197
    13da:	20 81       	ld	r18, Z
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	87 70       	andi	r24, 0x07	; 7
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <ReadStatusBit+0x1e>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <ReadStatusBit+0x1a>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	08 95       	ret

000013f2 <UpdateState>:
    13f2:	e8 2f       	mov	r30, r24
    13f4:	ef 77       	andi	r30, 0x7F	; 127
    13f6:	f1 f0       	breq	.+60     	; 0x1434 <UpdateState+0x42>
    13f8:	e6 95       	lsr	r30
    13fa:	e6 95       	lsr	r30
    13fc:	e6 95       	lsr	r30
    13fe:	28 2f       	mov	r18, r24
    1400:	27 70       	andi	r18, 0x07	; 7
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	e6 59       	subi	r30, 0x96	; 150
    1406:	f5 4c       	sbci	r31, 0xC5	; 197
    1408:	87 ff       	sbrs	r24, 7
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <UpdateState+0x30>
    140c:	82 2f       	mov	r24, r18
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	02 97       	sbiw	r24, 0x02	; 2
    1414:	0c f4       	brge	.+2      	; 0x1418 <UpdateState+0x26>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	20 95       	com	r18
    141a:	80 81       	ld	r24, Z
    141c:	28 23       	and	r18, r24
    141e:	20 83       	st	Z, r18
    1420:	08 95       	ret
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	01 c0       	rjmp	.+2      	; 0x142a <UpdateState+0x38>
    1428:	88 0f       	add	r24, r24
    142a:	2a 95       	dec	r18
    142c:	ea f7       	brpl	.-6      	; 0x1428 <UpdateState+0x36>
    142e:	90 81       	ld	r25, Z
    1430:	89 2b       	or	r24, r25
    1432:	80 83       	st	Z, r24
    1434:	08 95       	ret

00001436 <CheckState>:
    1436:	cf 93       	push	r28
    1438:	c8 2f       	mov	r28, r24
    143a:	8f 77       	andi	r24, 0x7F	; 127
    143c:	c6 df       	rcall	.-116    	; 0x13ca <ReadStatusBit>
    143e:	2c 2f       	mov	r18, r28
    1440:	22 1f       	adc	r18, r18
    1442:	22 27       	eor	r18, r18
    1444:	22 1f       	adc	r18, r18
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	81 11       	cpse	r24, r1
    144a:	01 c0       	rjmp	.+2      	; 0x144e <CheckState+0x18>
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	82 2f       	mov	r24, r18
    1450:	89 27       	eor	r24, r25
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <getID>:
    1456:	e3 e0       	ldi	r30, 0x03	; 3
    1458:	f1 e1       	ldi	r31, 0x11	; 17
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	91 91       	ld	r25, Z+
    145e:	89 0f       	add	r24, r25
    1460:	ed 30       	cpi	r30, 0x0D	; 13
    1462:	91 e1       	ldi	r25, 0x11	; 17
    1464:	f9 07       	cpc	r31, r25
    1466:	d1 f7       	brne	.-12     	; 0x145c <getID+0x6>
    1468:	83 70       	andi	r24, 0x03	; 3
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	98 0f       	add	r25, r24
    146e:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <whoami>
    1472:	08 95       	ret

00001474 <Reset>:
    1474:	cf 93       	push	r28
    1476:	ea e6       	ldi	r30, 0x6A	; 106
    1478:	fa e3       	ldi	r31, 0x3A	; 58
    147a:	11 92       	st	Z+, r1
    147c:	8a e3       	ldi	r24, 0x3A	; 58
    147e:	ee 37       	cpi	r30, 0x7E	; 126
    1480:	f8 07       	cpc	r31, r24
    1482:	d9 f7       	brne	.-10     	; 0x147a <Reset+0x6>
    1484:	e8 df       	rcall	.-48     	; 0x1456 <getID>
    1486:	c8 2f       	mov	r28, r24
    1488:	81 11       	cpse	r24, r1
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <Reset+0x1c>
    148c:	8e e6       	ldi	r24, 0x6E	; 110
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <Reset+0x32>
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	11 f4       	brne	.+4      	; 0x1498 <Reset+0x24>
    1494:	8f e6       	ldi	r24, 0x6F	; 111
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <Reset+0x32>
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	11 f4       	brne	.+4      	; 0x14a0 <Reset+0x2c>
    149c:	80 e7       	ldi	r24, 0x70	; 112
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <Reset+0x32>
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <Reset+0x34>
    14a4:	81 e7       	ldi	r24, 0x71	; 113
    14a6:	a5 df       	rcall	.-182    	; 0x13f2 <UpdateState>
    14a8:	84 e6       	ldi	r24, 0x64	; 100
    14aa:	8c 0f       	add	r24, r28
    14ac:	a2 df       	rcall	.-188    	; 0x13f2 <UpdateState>
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <LoadGameState>:
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	44 e1       	ldi	r20, 0x14	; 20
    14b8:	6a e6       	ldi	r22, 0x6A	; 106
    14ba:	7a e3       	ldi	r23, 0x3A	; 58
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	b1 dd       	rcall	.-1182   	; 0x1022 <EERead>
    14c0:	ce e6       	ldi	r28, 0x6E	; 110
    14c2:	d0 e0       	ldi	r29, 0x00	; 0
    14c4:	8c 2f       	mov	r24, r28
    14c6:	81 df       	rcall	.-254    	; 0x13ca <ReadStatusBit>
    14c8:	d8 0f       	add	r29, r24
    14ca:	cf 5f       	subi	r28, 0xFF	; 255
    14cc:	c2 37       	cpi	r28, 0x72	; 114
    14ce:	d1 f7       	brne	.-12     	; 0x14c4 <LoadGameState+0x12>
    14d0:	d1 30       	cpi	r29, 0x01	; 1
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <LoadGameState+0x26>
    14d4:	cf df       	rcall	.-98     	; 0x1474 <Reset>
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <LoadGameState+0x28>
    14d8:	be df       	rcall	.-132    	; 0x1456 <getID>
    14da:	80 91 7a 3a 	lds	r24, 0x3A7A	; 0x803a7a <gameState+0x10>
    14de:	90 91 7b 3a 	lds	r25, 0x3A7B	; 0x803a7b <gameState+0x11>
    14e2:	98 27       	eor	r25, r24
    14e4:	89 27       	eor	r24, r25
    14e6:	98 27       	eor	r25, r24
    14e8:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    14ec:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
    14f0:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <gameState+0x12>
    14f4:	90 91 7d 3a 	lds	r25, 0x3A7D	; 0x803a7d <gameState+0x13>
    14f8:	98 27       	eor	r25, r24
    14fa:	89 27       	eor	r24, r25
    14fc:	98 27       	eor	r25, r24
    14fe:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    1502:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <HotSummer>:
    150c:	cf 93       	push	r28
    150e:	86 e7       	ldi	r24, 0x76	; 118
    1510:	92 df       	rcall	.-220    	; 0x1436 <CheckState>
    1512:	c8 2f       	mov	r28, r24
    1514:	88 23       	and	r24, r24
    1516:	81 f0       	breq	.+32     	; 0x1538 <HotSummer+0x2c>
    1518:	e0 91 0a bf 	lds	r30, 0xBF0A	; 0x80bf0a <__bss_end+0x83ef>
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	e4 53       	subi	r30, 0x34	; 52
    1520:	f5 4c       	sbci	r31, 0xC5	; 197
    1522:	10 82       	st	Z, r1
    1524:	e0 91 0b bf 	lds	r30, 0xBF0B	; 0x80bf0b <__bss_end+0x83f0>
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    152e:	e4 53       	subi	r30, 0x34	; 52
    1530:	f5 4c       	sbci	r31, 0xC5	; 197
    1532:	80 83       	st	Z, r24
    1534:	c1 e0       	ldi	r28, 0x01	; 1
    1536:	49 c0       	rjmp	.+146    	; 0x15ca <HotSummer+0xbe>
    1538:	85 e7       	ldi	r24, 0x75	; 117
    153a:	7d df       	rcall	.-262    	; 0x1436 <CheckState>
    153c:	88 23       	and	r24, r24
    153e:	49 f1       	breq	.+82     	; 0x1592 <HotSummer+0x86>
    1540:	e0 91 0a bf 	lds	r30, 0xBF0A	; 0x80bf0a <__bss_end+0x83ef>
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    154a:	e4 53       	subi	r30, 0x34	; 52
    154c:	f5 4c       	sbci	r31, 0xC5	; 197
    154e:	80 83       	st	Z, r24
    1550:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <cooledDown.3972>
    1554:	88 23       	and	r24, r24
    1556:	71 f0       	breq	.+28     	; 0x1574 <HotSummer+0x68>
    1558:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    155c:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    1560:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    1564:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1568:	80 96       	adiw	r24, 0x20	; 32
    156a:	28 17       	cp	r18, r24
    156c:	39 07       	cpc	r19, r25
    156e:	10 f0       	brcs	.+4      	; 0x1574 <HotSummer+0x68>
    1570:	86 e7       	ldi	r24, 0x76	; 118
    1572:	2a c0       	rjmp	.+84     	; 0x15c8 <HotSummer+0xbc>
    1574:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    1578:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    157c:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    1580:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1584:	08 96       	adiw	r24, 0x08	; 8
    1586:	82 17       	cp	r24, r18
    1588:	93 07       	cpc	r25, r19
    158a:	18 f0       	brcs	.+6      	; 0x1592 <HotSummer+0x86>
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <cooledDown.3972>
    1592:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    1596:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    159a:	89 2b       	or	r24, r25
    159c:	41 f4       	brne	.+16     	; 0x15ae <HotSummer+0xa2>
    159e:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    15a2:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    15a6:	80 93 c9 3a 	sts	0x3AC9, r24	; 0x803ac9 <calTemp>
    15aa:	90 93 ca 3a 	sts	0x3ACA, r25	; 0x803aca <calTemp+0x1>
    15ae:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    15b2:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    15b6:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    15ba:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    15be:	80 96       	adiw	r24, 0x20	; 32
    15c0:	28 17       	cp	r18, r24
    15c2:	39 07       	cpc	r19, r25
    15c4:	10 f0       	brcs	.+4      	; 0x15ca <HotSummer+0xbe>
    15c6:	85 e7       	ldi	r24, 0x75	; 117
    15c8:	14 df       	rcall	.-472    	; 0x13f2 <UpdateState>
    15ca:	8c 2f       	mov	r24, r28
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <WingBar>:
    15d0:	ec e0       	ldi	r30, 0x0C	; 12
    15d2:	ff eb       	ldi	r31, 0xBF	; 191
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a5 81       	ldd	r26, Z+5	; 0x05
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	98 17       	cp	r25, r24
    15dc:	34 f4       	brge	.+12     	; 0x15ea <WingBar+0x1a>
    15de:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15e2:	a4 53       	subi	r26, 0x34	; 52
    15e4:	b5 4c       	sbci	r27, 0xC5	; 197
    15e6:	2c 93       	st	X, r18
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <WingBar+0x20>
    15ea:	a4 53       	subi	r26, 0x34	; 52
    15ec:	b5 4c       	sbci	r27, 0xC5	; 197
    15ee:	1c 92       	st	X, r1
    15f0:	a0 81       	ld	r26, Z
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	96 17       	cp	r25, r22
    15f6:	34 f4       	brge	.+12     	; 0x1604 <WingBar+0x34>
    15f8:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15fc:	a4 53       	subi	r26, 0x34	; 52
    15fe:	b5 4c       	sbci	r27, 0xC5	; 197
    1600:	2c 93       	st	X, r18
    1602:	03 c0       	rjmp	.+6      	; 0x160a <WingBar+0x3a>
    1604:	a4 53       	subi	r26, 0x34	; 52
    1606:	b5 4c       	sbci	r27, 0xC5	; 197
    1608:	1c 92       	st	X, r1
    160a:	9f 5f       	subi	r25, 0xFF	; 255
    160c:	31 96       	adiw	r30, 0x01	; 1
    160e:	95 30       	cpi	r25, 0x05	; 5
    1610:	11 f7       	brne	.-60     	; 0x15d6 <WingBar+0x6>
    1612:	08 95       	ret

00001614 <SetBothEyes>:
    1614:	a6 e1       	ldi	r26, 0x16	; 22
    1616:	bf eb       	ldi	r27, 0xBF	; 191
    1618:	ec 91       	ld	r30, X
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	e4 53       	subi	r30, 0x34	; 52
    161e:	f5 4c       	sbci	r31, 0xC5	; 197
    1620:	80 83       	st	Z, r24
    1622:	12 96       	adiw	r26, 0x02	; 2
    1624:	ec 91       	ld	r30, X
    1626:	12 97       	sbiw	r26, 0x02	; 2
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	e4 53       	subi	r30, 0x34	; 52
    162c:	f5 4c       	sbci	r31, 0xC5	; 197
    162e:	60 83       	st	Z, r22
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	ec 91       	ld	r30, X
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	e4 53       	subi	r30, 0x34	; 52
    163a:	f5 4c       	sbci	r31, 0xC5	; 197
    163c:	80 83       	st	Z, r24
    163e:	13 96       	adiw	r26, 0x03	; 3
    1640:	ec 91       	ld	r30, X
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	e4 53       	subi	r30, 0x34	; 52
    1646:	f5 4c       	sbci	r31, 0xC5	; 197
    1648:	60 83       	st	Z, r22
    164a:	08 95       	ret

0000164c <SetHackerLeds>:
    164c:	aa e1       	ldi	r26, 0x1A	; 26
    164e:	bf eb       	ldi	r27, 0xBF	; 191
    1650:	ed 91       	ld	r30, X+
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e4 53       	subi	r30, 0x34	; 52
    1656:	f5 4c       	sbci	r31, 0xC5	; 197
    1658:	80 83       	st	Z, r24
    165a:	15 96       	adiw	r26, 0x05	; 5
    165c:	ec 91       	ld	r30, X
    165e:	15 97       	sbiw	r26, 0x05	; 5
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	e4 53       	subi	r30, 0x34	; 52
    1664:	f5 4c       	sbci	r31, 0xC5	; 197
    1666:	60 83       	st	Z, r22
    1668:	9f eb       	ldi	r25, 0xBF	; 191
    166a:	a0 32       	cpi	r26, 0x20	; 32
    166c:	b9 07       	cpc	r27, r25
    166e:	81 f7       	brne	.-32     	; 0x1650 <SetHackerLeds+0x4>
    1670:	08 95       	ret

00001672 <GenerateBlinks>:
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e3       	ldi	r30, 0x3F	; 63
    1678:	fb e0       	ldi	r31, 0x0B	; 11
    167a:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__prologue_saves__+0x14>
    167e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1682:	88 23       	and	r24, r24
    1684:	29 f0       	breq	.+10     	; 0x1690 <GenerateBlinks+0x1e>
    1686:	80 e4       	ldi	r24, 0x40	; 64
    1688:	d6 de       	rcall	.-596    	; 0x1436 <CheckState>
    168a:	81 11       	cpse	r24, r1
    168c:	24 c0       	rjmp	.+72     	; 0x16d6 <GenerateBlinks+0x64>
    168e:	50 c0       	rjmp	.+160    	; 0x1730 <GenerateBlinks+0xbe>
    1690:	ca e1       	ldi	r28, 0x1A	; 26
    1692:	df eb       	ldi	r29, 0xBF	; 191
    1694:	1a e7       	ldi	r17, 0x7A	; 122
    1696:	81 2f       	mov	r24, r17
    1698:	ce de       	rcall	.-612    	; 0x1436 <CheckState>
    169a:	ee 81       	ldd	r30, Y+6	; 0x06
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	88 23       	and	r24, r24
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <GenerateBlinks+0x46>
    16a2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16a6:	e4 53       	subi	r30, 0x34	; 52
    16a8:	f5 4c       	sbci	r31, 0xC5	; 197
    16aa:	80 83       	st	Z, r24
    16ac:	e8 81       	ld	r30, Y
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	e4 53       	subi	r30, 0x34	; 52
    16b2:	f5 4c       	sbci	r31, 0xC5	; 197
    16b4:	10 82       	st	Z, r1
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <GenerateBlinks+0x5a>
    16b8:	e4 53       	subi	r30, 0x34	; 52
    16ba:	f5 4c       	sbci	r31, 0xC5	; 197
    16bc:	10 82       	st	Z, r1
    16be:	e8 81       	ld	r30, Y
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16c6:	e4 53       	subi	r30, 0x34	; 52
    16c8:	f5 4c       	sbci	r31, 0xC5	; 197
    16ca:	80 83       	st	Z, r24
    16cc:	1f 5f       	subi	r17, 0xFF	; 255
    16ce:	21 96       	adiw	r28, 0x01	; 1
    16d0:	10 38       	cpi	r17, 0x80	; 128
    16d2:	09 f7       	brne	.-62     	; 0x1696 <GenerateBlinks+0x24>
    16d4:	d8 cf       	rjmp	.-80     	; 0x1686 <GenerateBlinks+0x14>
    16d6:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <HeartCount>
    16da:	98 2f       	mov	r25, r24
    16dc:	9d 7f       	andi	r25, 0xFD	; 253
    16de:	e0 91 09 bf 	lds	r30, 0xBF09	; 0x80bf09 <__bss_end+0x83ee>
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	91 30       	cpi	r25, 0x01	; 1
    16e6:	11 f0       	breq	.+4      	; 0x16ec <GenerateBlinks+0x7a>
    16e8:	85 30       	cpi	r24, 0x05	; 5
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <GenerateBlinks+0x82>
    16ec:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16f0:	96 95       	lsr	r25
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <GenerateBlinks+0x8e>
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	11 f0       	breq	.+4      	; 0x16fc <GenerateBlinks+0x8a>
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	31 f4       	brne	.+12     	; 0x1708 <GenerateBlinks+0x96>
    16fc:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1700:	e4 53       	subi	r30, 0x34	; 52
    1702:	f5 4c       	sbci	r31, 0xC5	; 197
    1704:	90 83       	st	Z, r25
    1706:	0c c0       	rjmp	.+24     	; 0x1720 <GenerateBlinks+0xae>
    1708:	88 23       	and	r24, r24
    170a:	11 f0       	breq	.+4      	; 0x1710 <GenerateBlinks+0x9e>
    170c:	86 30       	cpi	r24, 0x06	; 6
    170e:	29 f4       	brne	.+10     	; 0x171a <GenerateBlinks+0xa8>
    1710:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1714:	96 95       	lsr	r25
    1716:	96 95       	lsr	r25
    1718:	f3 cf       	rjmp	.-26     	; 0x1700 <GenerateBlinks+0x8e>
    171a:	e4 53       	subi	r30, 0x34	; 52
    171c:	f5 4c       	sbci	r31, 0xC5	; 197
    171e:	10 82       	st	Z, r1
    1720:	80 32       	cpi	r24, 0x20	; 32
    1722:	20 f4       	brcc	.+8      	; 0x172c <GenerateBlinks+0xba>
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <HeartCount>
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GenerateBlinks+0xbe>
    172c:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <HeartCount>
    1730:	90 91 61 38 	lds	r25, 0x3861	; 0x803861 <LedCount>
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	90 93 61 38 	sts	0x3861, r25	; 0x803861 <LedCount>
    173a:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <effect>
    173e:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <effect+0x1>
    1742:	ef 71       	andi	r30, 0x1F	; 31
    1744:	ff 27       	eor	r31, r31
    1746:	e2 31       	cpi	r30, 0x12	; 18
    1748:	f1 05       	cpc	r31, r1
    174a:	08 f0       	brcs	.+2      	; 0x174e <GenerateBlinks+0xdc>
    174c:	ff c0       	rjmp	.+510    	; 0x194c <GenerateBlinks+0x2da>
    174e:	e2 5c       	subi	r30, 0xC2	; 194
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__tablejump2__>
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	3a df       	rcall	.-396    	; 0x15d0 <WingBar>
    175c:	e0 91 16 bf 	lds	r30, 0xBF16	; 0x80bf16 <__bss_end+0x83fb>
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	e4 53       	subi	r30, 0x34	; 52
    1764:	f5 4c       	sbci	r31, 0xC5	; 197
    1766:	10 82       	st	Z, r1
    1768:	e0 91 18 bf 	lds	r30, 0xBF18	; 0x80bf18 <__bss_end+0x83fd>
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	e4 53       	subi	r30, 0x34	; 52
    1770:	f5 4c       	sbci	r31, 0xC5	; 197
    1772:	10 82       	st	Z, r1
    1774:	e0 91 0a bf 	lds	r30, 0xBF0A	; 0x80bf0a <__bss_end+0x83ef>
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	e4 53       	subi	r30, 0x34	; 52
    177c:	f5 4c       	sbci	r31, 0xC5	; 197
    177e:	10 82       	st	Z, r1
    1780:	e0 91 17 bf 	lds	r30, 0xBF17	; 0x80bf17 <__bss_end+0x83fc>
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	e4 53       	subi	r30, 0x34	; 52
    1788:	f5 4c       	sbci	r31, 0xC5	; 197
    178a:	10 82       	st	Z, r1
    178c:	e0 91 19 bf 	lds	r30, 0xBF19	; 0x80bf19 <__bss_end+0x83fe>
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	e4 53       	subi	r30, 0x34	; 52
    1794:	f5 4c       	sbci	r31, 0xC5	; 197
    1796:	10 82       	st	Z, r1
    1798:	e0 91 0b bf 	lds	r30, 0xBF0B	; 0x80bf0b <__bss_end+0x83f0>
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	e4 53       	subi	r30, 0x34	; 52
    17a0:	f5 4c       	sbci	r31, 0xC5	; 197
    17a2:	10 82       	st	Z, r1
    17a4:	e0 91 08 bf 	lds	r30, 0xBF08	; 0x80bf08 <__bss_end+0x83ed>
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	e4 53       	subi	r30, 0x34	; 52
    17ac:	f5 4c       	sbci	r31, 0xC5	; 197
    17ae:	10 82       	st	Z, r1
    17b0:	cd c0       	rjmp	.+410    	; 0x194c <GenerateBlinks+0x2da>
    17b2:	89 2f       	mov	r24, r25
    17b4:	81 70       	andi	r24, 0x01	; 1
    17b6:	90 fd       	sbrc	r25, 0
    17b8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	2a df       	rcall	.-428    	; 0x1614 <SetBothEyes>
    17c0:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    17c4:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    17c8:	84 ff       	sbrs	r24, 4
    17ca:	c0 c0       	rjmp	.+384    	; 0x194c <GenerateBlinks+0x2da>
    17cc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	3c df       	rcall	.-392    	; 0x164c <SetHackerLeds>
    17d4:	bb c0       	rjmp	.+374    	; 0x194c <GenerateBlinks+0x2da>
    17d6:	69 2f       	mov	r22, r25
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	93 ff       	sbrs	r25, 3
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GenerateBlinks+0x170>
    17de:	60 95       	com	r22
    17e0:	70 95       	com	r23
    17e2:	95 e0       	ldi	r25, 0x05	; 5
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	9a 95       	dec	r25
    17ea:	e1 f7       	brne	.-8      	; 0x17e4 <GenerateBlinks+0x172>
    17ec:	61 5e       	subi	r22, 0xE1	; 225
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	11 df       	rcall	.-478    	; 0x1614 <SetBothEyes>
    17f2:	ac c0       	rjmp	.+344    	; 0x194c <GenerateBlinks+0x2da>
    17f4:	89 2f       	mov	r24, r25
    17f6:	83 70       	andi	r24, 0x03	; 3
    17f8:	09 f0       	breq	.+2      	; 0x17fc <GenerateBlinks+0x18a>
    17fa:	a8 c0       	rjmp	.+336    	; 0x194c <GenerateBlinks+0x2da>
    17fc:	92 ff       	sbrs	r25, 2
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <GenerateBlinks+0x194>
    1800:	65 e0       	ldi	r22, 0x05	; 5
    1802:	85 e0       	ldi	r24, 0x05	; 5
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GenerateBlinks+0x198>
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	e2 de       	rcall	.-572    	; 0x15d0 <WingBar>
    180c:	9f c0       	rjmp	.+318    	; 0x194c <GenerateBlinks+0x2da>
    180e:	95 30       	cpi	r25, 0x05	; 5
    1810:	10 f0       	brcs	.+4      	; 0x1816 <GenerateBlinks+0x1a4>
    1812:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <LedCount>
    1816:	40 91 61 38 	lds	r20, 0x3861	; 0x803861 <LedCount>
    181a:	24 2f       	mov	r18, r20
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	f9 01       	movw	r30, r18
    1820:	e4 5f       	subi	r30, 0xF4	; 244
    1822:	f0 44       	sbci	r31, 0x40	; 64
    1824:	e5 81       	ldd	r30, Z+5	; 0x05
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	e4 53       	subi	r30, 0x34	; 52
    182a:	f5 4c       	sbci	r31, 0xC5	; 197
    182c:	10 82       	st	Z, r1
    182e:	44 30       	cpi	r20, 0x04	; 4
    1830:	19 f0       	breq	.+6      	; 0x1838 <GenerateBlinks+0x1c6>
    1832:	c9 01       	movw	r24, r18
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GenerateBlinks+0x1ca>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	fc 01       	movw	r30, r24
    183e:	e4 5f       	subi	r30, 0xF4	; 244
    1840:	f0 44       	sbci	r31, 0x40	; 64
    1842:	e5 81       	ldd	r30, Z+5	; 0x05
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    184a:	e4 53       	subi	r30, 0x34	; 52
    184c:	f5 4c       	sbci	r31, 0xC5	; 197
    184e:	80 83       	st	Z, r24
    1850:	e0 e1       	ldi	r30, 0x10	; 16
    1852:	ff eb       	ldi	r31, 0xBF	; 191
    1854:	e2 1b       	sub	r30, r18
    1856:	f3 0b       	sbc	r31, r19
    1858:	e0 81       	ld	r30, Z
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	e4 53       	subi	r30, 0x34	; 52
    185e:	f5 4c       	sbci	r31, 0xC5	; 197
    1860:	10 82       	st	Z, r1
    1862:	44 30       	cpi	r20, 0x04	; 4
    1864:	29 f0       	breq	.+10     	; 0x1870 <GenerateBlinks+0x1fe>
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	82 1b       	sub	r24, r18
    186c:	93 0b       	sbc	r25, r19
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GenerateBlinks+0x202>
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	fc 01       	movw	r30, r24
    1876:	e4 5f       	subi	r30, 0xF4	; 244
    1878:	f0 44       	sbci	r31, 0x40	; 64
    187a:	e0 81       	ld	r30, Z
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1882:	e4 53       	subi	r30, 0x34	; 52
    1884:	f5 4c       	sbci	r31, 0xC5	; 197
    1886:	80 83       	st	Z, r24
    1888:	61 c0       	rjmp	.+194    	; 0x194c <GenerateBlinks+0x2da>
    188a:	cc e0       	ldi	r28, 0x0C	; 12
    188c:	df eb       	ldi	r29, 0xBF	; 191
    188e:	81 e1       	ldi	r24, 0x11	; 17
    1890:	e8 2e       	mov	r14, r24
    1892:	8f eb       	ldi	r24, 0xBF	; 191
    1894:	f8 2e       	mov	r15, r24
    1896:	6e 01       	movw	r12, r28
    1898:	0d 81       	ldd	r16, Y+5	; 0x05
    189a:	10 e0       	ldi	r17, 0x00	; 0
    189c:	a4 dc       	rcall	.-1720   	; 0x11e6 <lfsr>
    189e:	87 ff       	sbrs	r24, 7
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <GenerateBlinks+0x236>
    18a2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <GenerateBlinks+0x238>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	f8 01       	movw	r30, r16
    18ac:	e4 53       	subi	r30, 0x34	; 52
    18ae:	f5 4c       	sbci	r31, 0xC5	; 197
    18b0:	80 83       	st	Z, r24
    18b2:	21 96       	adiw	r28, 0x01	; 1
    18b4:	f6 01       	movw	r30, r12
    18b6:	00 81       	ld	r16, Z
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	95 dc       	rcall	.-1750   	; 0x11e6 <lfsr>
    18bc:	87 ff       	sbrs	r24, 7
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <GenerateBlinks+0x254>
    18c0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <GenerateBlinks+0x256>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	f8 01       	movw	r30, r16
    18ca:	e4 53       	subi	r30, 0x34	; 52
    18cc:	f5 4c       	sbci	r31, 0xC5	; 197
    18ce:	80 83       	st	Z, r24
    18d0:	ec 16       	cp	r14, r28
    18d2:	fd 06       	cpc	r15, r29
    18d4:	01 f7       	brne	.-64     	; 0x1896 <GenerateBlinks+0x224>
    18d6:	3a c0       	rjmp	.+116    	; 0x194c <GenerateBlinks+0x2da>
    18d8:	90 fd       	sbrc	r25, 0
    18da:	38 c0       	rjmp	.+112    	; 0x194c <GenerateBlinks+0x2da>
    18dc:	ec e0       	ldi	r30, 0x0C	; 12
    18de:	ff eb       	ldi	r31, 0xBF	; 191
    18e0:	80 e1       	ldi	r24, 0x10	; 16
    18e2:	9f eb       	ldi	r25, 0xBF	; 191
    18e4:	9f 01       	movw	r18, r30
    18e6:	a5 81       	ldd	r26, Z+5	; 0x05
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	c6 81       	ldd	r28, Z+6	; 0x06
    18ec:	d0 e0       	ldi	r29, 0x00	; 0
    18ee:	c4 53       	subi	r28, 0x34	; 52
    18f0:	d5 4c       	sbci	r29, 0xC5	; 197
    18f2:	48 81       	ld	r20, Y
    18f4:	a4 53       	subi	r26, 0x34	; 52
    18f6:	b5 4c       	sbci	r27, 0xC5	; 197
    18f8:	4c 93       	st	X, r20
    18fa:	31 96       	adiw	r30, 0x01	; 1
    18fc:	e9 01       	movw	r28, r18
    18fe:	a8 81       	ld	r26, Y
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	c0 81       	ld	r28, Z
    1904:	d0 e0       	ldi	r29, 0x00	; 0
    1906:	c4 53       	subi	r28, 0x34	; 52
    1908:	d5 4c       	sbci	r29, 0xC5	; 197
    190a:	28 81       	ld	r18, Y
    190c:	a4 53       	subi	r26, 0x34	; 52
    190e:	b5 4c       	sbci	r27, 0xC5	; 197
    1910:	2c 93       	st	X, r18
    1912:	8e 17       	cp	r24, r30
    1914:	9f 07       	cpc	r25, r31
    1916:	31 f7       	brne	.-52     	; 0x18e4 <GenerateBlinks+0x272>
    1918:	c0 91 15 bf 	lds	r28, 0xBF15	; 0x80bf15 <__bss_end+0x83fa>
    191c:	d0 e0       	ldi	r29, 0x00	; 0
    191e:	63 dc       	rcall	.-1850   	; 0x11e6 <lfsr>
    1920:	81 3e       	cpi	r24, 0xE1	; 225
    1922:	18 f0       	brcs	.+6      	; 0x192a <GenerateBlinks+0x2b8>
    1924:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1928:	01 c0       	rjmp	.+2      	; 0x192c <GenerateBlinks+0x2ba>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	c4 53       	subi	r28, 0x34	; 52
    192e:	d5 4c       	sbci	r29, 0xC5	; 197
    1930:	88 83       	st	Y, r24
    1932:	c0 91 10 bf 	lds	r28, 0xBF10	; 0x80bf10 <__bss_end+0x83f5>
    1936:	d0 e0       	ldi	r29, 0x00	; 0
    1938:	56 dc       	rcall	.-1876   	; 0x11e6 <lfsr>
    193a:	81 3e       	cpi	r24, 0xE1	; 225
    193c:	18 f0       	brcs	.+6      	; 0x1944 <GenerateBlinks+0x2d2>
    193e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <GenerateBlinks+0x2d4>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	c4 53       	subi	r28, 0x34	; 52
    1948:	d5 4c       	sbci	r29, 0xC5	; 197
    194a:	88 83       	st	Y, r24
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	e8 e0       	ldi	r30, 0x08	; 8
    1952:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x14>

00001956 <FadeOut>:
    1956:	e0 91 03 38 	lds	r30, 0x3803	; 0x803803 <auRepAddr>
    195a:	f0 91 04 38 	lds	r31, 0x3804	; 0x803804 <auRepAddr+0x1>
    195e:	90 81       	ld	r25, Z
    1960:	99 23       	and	r25, r25
    1962:	a1 f1       	breq	.+104    	; 0x19cc <FadeOut+0x76>
    1964:	20 91 4b 38 	lds	r18, 0x384B	; 0x80384b <fastTicker>
    1968:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <oldTicker>
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	29 1b       	sub	r18, r25
    1970:	31 09       	sbc	r19, r1
    1972:	80 95       	com	r24
    1974:	87 70       	andi	r24, 0x07	; 7
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <FadeOut+0x28>
    197a:	55 95       	asr	r21
    197c:	47 95       	ror	r20
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <FadeOut+0x24>
    1982:	ca 01       	movw	r24, r20
    1984:	44 23       	and	r20, r20
    1986:	11 f1       	breq	.+68     	; 0x19cc <FadeOut+0x76>
    1988:	30 91 bf 3a 	lds	r19, 0x3ABF	; 0x803abf <auVolume>
    198c:	43 17       	cp	r20, r19
    198e:	30 f4       	brcc	.+12     	; 0x199c <FadeOut+0x46>
    1990:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <auVolume>
    1994:	98 1b       	sub	r25, r24
    1996:	90 93 bf 3a 	sts	0x3ABF, r25	; 0x803abf <auVolume>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <FadeOut+0x6e>
    199c:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <auVolume>
    19a0:	66 23       	and	r22, r22
    19a2:	81 f0       	breq	.+32     	; 0x19c4 <FadeOut+0x6e>
    19a4:	8f e3       	ldi	r24, 0x3F	; 63
    19a6:	98 e3       	ldi	r25, 0x38	; 56
    19a8:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19ac:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    19b0:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    19b4:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19b8:	8f 71       	andi	r24, 0x1F	; 31
    19ba:	99 27       	eor	r25, r25
    19bc:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    19c0:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    19c4:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
    19c8:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <oldTicker>
    19cc:	08 95       	ret

000019ce <GenerateAudio>:

uint8_t GenerateAudio(){
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    static uint8_t start = 0;
    static uint8_t duration;

    //Headphones detected?
    if (auIn < HPLVL) {
    19d6:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <auIn>
    19da:	89 31       	cpi	r24, 0x19	; 25
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <GenerateAudio+0x12>
    19de:	62 c1       	rjmp	.+708    	; 0x1ca4 <GenerateAudio+0x2d6>

        detHdPh = 1;
    19e0:	c1 e0       	ldi	r28, 0x01	; 1
    19e2:	c0 93 c8 3a 	sts	0x3AC8, r28	; 0x803ac8 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    19e6:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    19ea:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19ee:	88 27       	eor	r24, r24
    19f0:	89 2b       	or	r24, r25
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <GenerateAudio+0x28>
    19f4:	0d c1       	rjmp	.+538    	; 0x1c10 <GenerateAudio+0x242>
        
            //Silence, I kill u
            if ((effect&0xE0)==0){
    19f6:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    19fa:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19fe:	80 7e       	andi	r24, 0xE0	; 224
    1a00:	99 27       	eor	r25, r25
    1a02:	89 2b       	or	r24, r25
    1a04:	49 f4       	brne	.+18     	; 0x1a18 <GenerateAudio+0x4a>
                auRepAddr = &zero;
    1a06:	8f e3       	ldi	r24, 0x3F	; 63
    1a08:	98 e3       	ldi	r25, 0x38	; 56
    1a0a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a0e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                start = 0;
    1a12:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <start.4039>
    1a16:	48 c1       	rjmp	.+656    	; 0x1ca8 <GenerateAudio+0x2da>
            }

            //Bad answer (buzzer, also used in other games)
            else if ((effect&0xE0)==32){
    1a18:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a1c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a20:	80 7e       	andi	r24, 0xE0	; 224
    1a22:	99 27       	eor	r25, r25
    1a24:	80 97       	sbiw	r24, 0x20	; 32
    1a26:	61 f5       	brne	.+88     	; 0x1a80 <GenerateAudio+0xb2>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	65 e0       	ldi	r22, 0x05	; 5
    1a2e:	80 e8       	ldi	r24, 0x80	; 128
    1a30:	27 dc       	rcall	.-1970   	; 0x1280 <floatAround>
    1a32:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <auBuffer.4041+0x2>

                if (start == 0) {
    1a36:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4039>
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <GenerateAudio+0x98>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	91 e2       	ldi	r25, 0x21	; 33
    1a42:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a46:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1a4a:	8a e1       	ldi	r24, 0x1A	; 26
    1a4c:	98 e3       	ldi	r25, 0x38	; 56
    1a4e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a52:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
            else if ((effect&0xE0)==32){
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2100, 0xff);
    1a5c:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4039>
                    duration = 4;
    1a60:	84 e0       	ldi	r24, 0x04	; 4
    1a62:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4040>
                }

                if (duration == 0) FadeOut(4, start);
    1a66:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4040>
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <GenerateAudio+0xa8>
    1a6e:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4039>
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	70 df       	rcall	.-288    	; 0x1956 <FadeOut>
                floatSpeed(1, 0x2000, 0x2200);
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	52 e2       	ldi	r21, 0x22	; 34
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e2       	ldi	r23, 0x20	; 32
    1a7e:	0f c1       	rjmp	.+542    	; 0x1c9e <GenerateAudio+0x2d0>
            }

            //Good (bell)
            else if ((effect&0xE0)==64){
    1a80:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a84:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a88:	80 7e       	andi	r24, 0xE0	; 224
    1a8a:	99 27       	eor	r25, r25
    1a8c:	80 34       	cpi	r24, 0x40	; 64
    1a8e:	91 05       	cpc	r25, r1
    1a90:	c1 f5       	brne	.+112    	; 0x1b02 <GenerateAudio+0x134>
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
    1a92:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4039>
    1a96:	81 11       	cpse	r24, r1
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <GenerateAudio+0xf4>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	9a e0       	ldi	r25, 0x0A	; 10
    1a9e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1aa2:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1aa6:	87 e1       	ldi	r24, 0x17	; 23
    1aa8:	98 e3       	ldi	r25, 0x38	; 56
    1aaa:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1aae:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
            //Good (bell)
            else if ((effect&0xE0)==64){
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x0a00, 0xff);
    1ab8:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4039>
                    duration = 4;
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4040>
                }

                if (duration == 0) FadeOut(4, start);
    1ac2:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4040>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <GenerateAudio+0x104>
    1aca:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4039>
    1ace:	84 e0       	ldi	r24, 0x04	; 4
    1ad0:	42 df       	rcall	.-380    	; 0x1956 <FadeOut>
                if (buttonMark){
    1ad2:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <GenerateAudio+0x10e>
    1ada:	e6 c0       	rjmp	.+460    	; 0x1ca8 <GenerateAudio+0x2da>
                    TCB1_CCMP -= 0x080;                    
    1adc:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ae0:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1ae4:	80 58       	subi	r24, 0x80	; 128
    1ae6:	91 09       	sbc	r25, r1
    1ae8:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1aec:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume == 0) effect = 0;
    1af0:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <auVolume>
    1af4:	81 11       	cpse	r24, r1
    1af6:	d8 c0       	rjmp	.+432    	; 0x1ca8 <GenerateAudio+0x2da>
    1af8:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1afc:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    1b00:	d3 c0       	rjmp	.+422    	; 0x1ca8 <GenerateAudio+0x2da>
                }
            }

            //Rain storm with whistling wind
            else if ((effect&0xE0)==96){
    1b02:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1b06:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b0a:	80 7e       	andi	r24, 0xE0	; 224
    1b0c:	99 27       	eor	r25, r25
    1b0e:	80 36       	cpi	r24, 0x60	; 96
    1b10:	91 05       	cpc	r25, r1
    1b12:	b9 f5       	brne	.+110    	; 0x1b82 <GenerateAudio+0x1b4>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1b14:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <auBuffer.4043+0x6>
                auRepAddr = &auBuffer[0];
    1b18:	87 e5       	ldi	r24, 0x57	; 87
    1b1a:	98 e3       	ldi	r25, 0x38	; 56
    1b1c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b20:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1b24:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b26:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1b28:	c3 30       	cpi	r28, 0x03	; 3
    1b2a:	39 f0       	breq	.+14     	; 0x1b3a <GenerateAudio+0x16c>
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	65 e0       	ldi	r22, 0x05	; 5
    1b32:	80 e8       	ldi	r24, 0x80	; 128
    1b34:	a5 db       	rcall	.-2230   	; 0x1280 <floatAround>
    1b36:	f8 01       	movw	r30, r16
    1b38:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b3a:	cf 5f       	subi	r28, 0xFF	; 255
    1b3c:	0f 5f       	subi	r16, 0xFF	; 255
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	c6 30       	cpi	r28, 0x06	; 6
    1b42:	91 f7       	brne	.-28     	; 0x1b28 <GenerateAudio+0x15a>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b44:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1b48:	88 23       	and	r24, r24
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <GenerateAudio+0x180>
    1b4c:	ad c0       	rjmp	.+346    	; 0x1ca8 <GenerateAudio+0x2da>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	54 e0       	ldi	r21, 0x04	; 4
    1b52:	60 e8       	ldi	r22, 0x80	; 128
    1b54:	72 e0       	ldi	r23, 0x02	; 2
    1b56:	85 e0       	ldi	r24, 0x05	; 5
    1b58:	65 db       	rcall	.-2358   	; 0x1224 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b5a:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <auVolume>
    1b5e:	20 ea       	ldi	r18, 0xA0	; 160
    1b60:	40 e1       	ldi	r20, 0x10	; 16
    1b62:	62 e0       	ldi	r22, 0x02	; 2
    1b64:	8d db       	rcall	.-2278   	; 0x1280 <floatAround>
    1b66:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b6a:	20 e9       	ldi	r18, 0x90	; 144
    1b6c:	40 e7       	ldi	r20, 0x70	; 112
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <auBuffer.4043>
    1b74:	85 db       	rcall	.-2294   	; 0x1280 <floatAround>
    1b76:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <auBuffer.4043>
    1b7a:	80 95       	com	r24
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b7c:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <auBuffer.4043+0x3>
    1b80:	93 c0       	rjmp	.+294    	; 0x1ca8 <GenerateAudio+0x2da>
    1b82:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                }
            }

            //Footsteps
            else if ((effect&0xE0)==128){
    1b86:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b8a:	80 7e       	andi	r24, 0xE0	; 224
    1b8c:	99 27       	eor	r25, r25
    1b8e:	80 38       	cpi	r24, 0x80	; 128
    1b90:	91 05       	cpc	r25, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <GenerateAudio+0x1c8>
    1b94:	89 c0       	rjmp	.+274    	; 0x1ca8 <GenerateAudio+0x2da>
    1b96:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>

            }

            //Bleeps
            else if ((effect&0xE0)==160){
    1b9a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b9e:	80 7e       	andi	r24, 0xE0	; 224
    1ba0:	99 27       	eor	r25, r25
    1ba2:	80 3a       	cpi	r24, 0xA0	; 160
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	79 f5       	brne	.+94     	; 0x1c06 <GenerateAudio+0x238>
    1ba8:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4039>
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                if (start == 0) {
    1bac:	81 11       	cpse	r24, r1
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <GenerateAudio+0x20a>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1bb2:	90 e2       	ldi	r25, 0x20	; 32
    1bb4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1bb8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1bbc:	81 e1       	ldi	r24, 0x11	; 17
    if (repeat) auRepAddr = auBuffer;
    1bbe:	98 e3       	ldi	r25, 0x38	; 56
    1bc0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1bc4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1bca:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
    1bce:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4039>
            //Bleeps
            else if ((effect&0xE0)==160){
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2000, 0xff);
    1bd2:	8a e0       	ldi	r24, 0x0A	; 10
                    duration = 10;
    1bd4:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4040>
    1bd8:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4040>
                }

                if (duration == 0) FadeOut(2, start);
    1bdc:	81 11       	cpse	r24, r1
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <GenerateAudio+0x21a>
    1be0:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4039>
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	b7 de       	rcall	.-658    	; 0x1956 <FadeOut>
                if (buttonMark){
    1be8:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1bec:	88 23       	and	r24, r24
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <GenerateAudio+0x224>
    1bf0:	5b c0       	rjmp	.+182    	; 0x1ca8 <GenerateAudio+0x2da>
    1bf2:	c1 e1       	ldi	r28, 0x11	; 17
    1bf4:	d8 e3       	ldi	r29, 0x38	; 56
                    for(uint8_t x=0; x<6; ++x){
                        auBuffer[x]=lfsr()|0x01;
    1bf6:	f7 da       	rcall	.-2578   	; 0x11e6 <lfsr>
    1bf8:	81 60       	ori	r24, 0x01	; 1
    1bfa:	89 93       	st	Y+, r24
    1bfc:	f8 e3       	ldi	r31, 0x38	; 56
                    duration = 10;
                }

                if (duration == 0) FadeOut(2, start);
                if (buttonMark){
                    for(uint8_t x=0; x<6; ++x){
    1bfe:	c7 31       	cpi	r28, 0x17	; 23
    1c00:	df 07       	cpc	r29, r31
    1c02:	c9 f7       	brne	.-14     	; 0x1bf6 <GenerateAudio+0x228>
    1c04:	51 c0       	rjmp	.+162    	; 0x1ca8 <GenerateAudio+0x2da>
    1c06:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                    }
                }
            }

            //
            else if ((effect&0xE0)==192){
    1c0a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c0e:	4c c0       	rjmp	.+152    	; 0x1ca8 <GenerateAudio+0x2da>
    1c10:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1c14:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c18:	88 27       	eor	r24, r24
    1c1a:	81 15       	cp	r24, r1
    1c1c:	91 40       	sbci	r25, 0x01	; 1
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <GenerateAudio+0x254>
    1c20:	43 c0       	rjmp	.+134    	; 0x1ca8 <GenerateAudio+0x2da>
    1c22:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
            if ((effect&0xE0) <= 0x90) {
    1c26:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c2a:	80 7e       	andi	r24, 0xE0	; 224
    1c2c:	99 27       	eor	r25, r25
    1c2e:	81 39       	cpi	r24, 0x91	; 145
    1c30:	91 05       	cpc	r25, r1
    1c32:	d0 f5       	brcc	.+116    	; 0x1ca8 <GenerateAudio+0x2da>
    1c34:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4039>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
    1c38:	81 11       	cpse	r24, r1
    1c3a:	22 c0       	rjmp	.+68     	; 0x1c80 <GenerateAudio+0x2b2>
    1c3c:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                    freq = ((effect&0xE0)+1)<<6;
    1c40:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c44:	80 7e       	andi	r24, 0xE0	; 224
    1c46:	99 27       	eor	r25, r25
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	26 e0       	ldi	r18, 0x06	; 6
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	2a 95       	dec	r18
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <GenerateAudio+0x27e>
    1c54:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <freq.4054>
    1c58:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <freq.4054+0x1>
    1c5c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1c60:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1c64:	8e e0       	ldi	r24, 0x0E	; 14
    if (repeat) auRepAddr = auBuffer;
    1c66:	98 e3       	ldi	r25, 0x38	; 56
    1c68:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c6c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1c72:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
    1c76:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4039>
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
                    freq = ((effect&0xE0)+1)<<6;
                    start = Play(&auBuffer[0], 1, freq, 0xff);
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
                    duration = 3;
    1c7c:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4040>
                }

                if (duration == 0) FadeOut(7, start);
    1c80:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4040>
    1c84:	81 11       	cpse	r24, r1
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <GenerateAudio+0x2c2>
    1c88:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4039>
    1c8c:	87 e0       	ldi	r24, 0x07	; 7
    1c8e:	63 de       	rcall	.-826    	; 0x1956 <FadeOut>
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1c90:	60 91 55 38 	lds	r22, 0x3855	; 0x803855 <freq.4054>
    1c94:	70 91 56 38 	lds	r23, 0x3856	; 0x803856 <freq.4054+0x1>
    1c98:	ab 01       	movw	r20, r22
    1c9a:	5d 5f       	subi	r21, 0xFD	; 253
    1c9c:	7e 5f       	subi	r23, 0xFE	; 254
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	c1 da       	rcall	.-2686   	; 0x1224 <floatSpeed>
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <GenerateAudio+0x2da>
    1ca4:	10 92 c8 3a 	sts	0x3AC8, r1	; 0x803ac8 <detHdPh>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);
            }
        }
    } else {
        detHdPh = 0;
    1ca8:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    }

    if (buttonMark && duration) --duration;
    1cac:	88 23       	and	r24, r24
    1cae:	39 f0       	breq	.+14     	; 0x1cbe <GenerateAudio+0x2f0>
    1cb0:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4040>
    1cb4:	88 23       	and	r24, r24
    1cb6:	19 f0       	breq	.+6      	; 0x1cbe <GenerateAudio+0x2f0>
    1cb8:	81 50       	subi	r24, 0x01	; 1
    1cba:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4040>
    1cbe:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>

    return buttonMark;
    1cc2:	df 91       	pop	r29
}
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	08 95       	ret

00001ccc <getClock>:
    1ccc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1cd0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1cd4:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <minuteMark>
    1cd8:	89 2f       	mov	r24, r25
    1cda:	99 27       	eor	r25, r25
    1cdc:	86 95       	lsr	r24
}
    1cde:	3c e3       	ldi	r19, 0x3C	; 60
    1ce0:	23 9f       	mul	r18, r19
    1ce2:	80 0d       	add	r24, r0
    1ce4:	91 1d       	adc	r25, r1
    1ce6:	11 24       	eor	r1, r1
    1ce8:	08 95       	ret

00001cea <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	8c 01       	movw	r16, r24
    1cf4:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1cf6:	ea df       	rcall	.-44     	; 0x1ccc <getClock>
    1cf8:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1cfa:	80 17       	cp	r24, r16
    1cfc:	91 07       	cpc	r25, r17
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <idleTimeout+0x18>
        curClock += 256 * 60;
    1d00:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1d02:	c0 0f       	add	r28, r16
    1d04:	d1 1f       	adc	r29, r17
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	c2 17       	cp	r28, r18
    1d0a:	d3 07       	cpc	r29, r19
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <idleTimeout+0x26>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
}
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	08 95       	ret

00001d1a <SelfTest>:

uint8_t SelfTest(){
    1d1a:	a4 e0       	ldi	r26, 0x04	; 4
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e3 e9       	ldi	r30, 0x93	; 147
    1d20:	fe e0       	ldi	r31, 0x0E	; 14
    1d22:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__prologue_saves__+0x20>
    uint8_t tstVal[4] = {0x01, 0};
    1d26:	19 82       	std	Y+1, r1	; 0x01
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	1b 82       	std	Y+3, r1	; 0x03
    1d2c:	1c 82       	std	Y+4, r1	; 0x04
    1d2e:	aa e1       	ldi	r26, 0x1A	; 26
    1d30:	bf eb       	ldi	r27, 0xBF	; 191
    1d32:	80 e2       	ldi	r24, 0x20	; 32
    1d34:	9f eb       	ldi	r25, 0xBF	; 191

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1d36:	2f ef       	ldi	r18, 0xFF	; 255
    1d38:	ed 91       	ld	r30, X+
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e4 53       	subi	r30, 0x34	; 52
    1d3e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d40:	20 83       	st	Z, r18

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1d42:	8a 17       	cp	r24, r26
    1d44:	9b 07       	cpc	r25, r27
    1d46:	c1 f7       	brne	.-16     	; 0x1d38 <SelfTest+0x1e>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1d48:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <adcPhot>
    1d4c:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    1d50:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1d52:	99 27       	eor	r25, r25
    1d54:	20 91 c6 3a 	lds	r18, 0x3AC6	; 0x803ac6 <adcPhot>
    1d58:	30 91 c7 3a 	lds	r19, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    1d5c:	33 27       	eor	r19, r19
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	c1 f3       	breq	.-16     	; 0x1d54 <SelfTest+0x3a>
    iLED[HCKR[R][1]] = 0x00;
    1d64:	e0 91 1b bf 	lds	r30, 0xBF1B	; 0x80bf1b <__bss_end+0x8400>
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	e4 53       	subi	r30, 0x34	; 52
    1d6c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d6e:	10 82       	st	Z, r1

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d70:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <adcBtns>
    1d74:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <adcBtns+0x1>
    1d78:	80 38       	cpi	r24, 0x80	; 128
    1d7a:	9c 40       	sbci	r25, 0x0C	; 12
    1d7c:	c8 f3       	brcs	.-14     	; 0x1d70 <SelfTest+0x56>
    iLED[HCKR[R][4]] = 0x00;
    1d7e:	e0 91 1e bf 	lds	r30, 0xBF1E	; 0x80bf1e <__bss_end+0x8403>
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	e4 53       	subi	r30, 0x34	; 52
    1d86:	f5 4c       	sbci	r31, 0xC5	; 197
    1d88:	10 82       	st	Z, r1
    
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    1d8a:	9e 01       	movw	r18, r28
    1d8c:	2f 5f       	subi	r18, 0xFF	; 255
    1d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	64 e0       	ldi	r22, 0x04	; 4
    1d94:	8c ec       	ldi	r24, 0xCC	; 204
    1d96:	9c e3       	ldi	r25, 0x3C	; 60
    1d98:	96 d9       	rcall	.-3284   	; 0x10c6 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	8f 33       	cpi	r24, 0x3F	; 63
    1d9e:	49 f4       	brne	.+18     	; 0x1db2 <SelfTest+0x98>
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	81 11       	cpse	r24, r1
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <SelfTest+0x98>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	80 3c       	cpi	r24, 0xC0	; 192
    1daa:	19 f4       	brne	.+6      	; 0x1db2 <SelfTest+0x98>
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	84 31       	cpi	r24, 0x14	; 20
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <SelfTest+0x9a>
    1db2:	ff cf       	rjmp	.-2      	; 0x1db2 <SelfTest+0x98>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1db8:	fc 01       	movw	r30, r24
    1dba:	e4 53       	subi	r30, 0x34	; 52
    1dbc:	f5 4c       	sbci	r31, 0xC5	; 197
    1dbe:	10 82       	st	Z, r1
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1dc2:	88 32       	cpi	r24, 0x28	; 40
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	c1 f7       	brne	.-16     	; 0x1db8 <SelfTest+0x9e>
        iLED[x]=0;
    }

    //for(uint8_t x=0; x<(adcPhot&0x3f); ++x) lfsr();
    lfsrSeed = (adcPhot + adcTemp)<<1 | 0x0001; 
    1dc8:	20 91 c6 3a 	lds	r18, 0x3AC6	; 0x803ac6 <adcPhot>
    1dcc:	30 91 c7 3a 	lds	r19, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    1dd0:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    1dd4:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1dd8:	82 0f       	add	r24, r18
    1dda:	93 1f       	adc	r25, r19
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <lfsrSeed>
    1de6:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <lfsrSeed+0x1>

    return 0;
}
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	24 96       	adiw	r28, 0x04	; 4
    1dee:	e2 e0       	ldi	r30, 0x02	; 2
    1df0:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__epilogue_restores__+0x20>

00001df4 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	ec e0       	ldi	r30, 0x0C	; 12
    1dfa:	ff eb       	ldi	r31, 0xBF	; 191
    1dfc:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1dfe:	a5 81       	ldd	r26, Z+5	; 0x05
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	a4 53       	subi	r26, 0x34	; 52
    1e04:	b5 4c       	sbci	r27, 0xC5	; 197
    1e06:	1c 92       	st	X, r1
    1e08:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1e0a:	a8 81       	ld	r26, Y
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	a4 53       	subi	r26, 0x34	; 52
    1e10:	b5 4c       	sbci	r27, 0xC5	; 197
    1e12:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1e14:	9f eb       	ldi	r25, 0xBF	; 191
    1e16:	e1 31       	cpi	r30, 0x11	; 17
    1e18:	f9 07       	cpc	r31, r25
    1e1a:	81 f7       	brne	.-32     	; 0x1dfc <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	99 f4       	brne	.+38     	; 0x1e46 <simonLed+0x52>
        iLED[WING[L][0]] = dimValue;
    1e20:	e0 91 11 bf 	lds	r30, 0xBF11	; 0x80bf11 <__bss_end+0x83f6>
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e2a:	e4 53       	subi	r30, 0x34	; 52
    1e2c:	f5 4c       	sbci	r31, 0xC5	; 197
    1e2e:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1e30:	e0 91 12 bf 	lds	r30, 0xBF12	; 0x80bf12 <__bss_end+0x83f7>
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e3a:	e4 53       	subi	r30, 0x34	; 52
    1e3c:	f5 4c       	sbci	r31, 0xC5	; 197
    1e3e:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1e40:	e0 91 13 bf 	lds	r30, 0xBF13	; 0x80bf13 <__bss_end+0x83f8>
    1e44:	2e c0       	rjmp	.+92     	; 0x1ea2 <simonLed+0xae>
    } else if (val == 1) {  //
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	59 f4       	brne	.+22     	; 0x1e60 <simonLed+0x6c>
        iLED[WING[L][3]] = dimValue;
    1e4a:	e0 91 14 bf 	lds	r30, 0xBF14	; 0x80bf14 <__bss_end+0x83f9>
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e54:	e4 53       	subi	r30, 0x34	; 52
    1e56:	f5 4c       	sbci	r31, 0xC5	; 197
    1e58:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e5a:	e0 91 15 bf 	lds	r30, 0xBF15	; 0x80bf15 <__bss_end+0x83fa>
    1e5e:	21 c0       	rjmp	.+66     	; 0x1ea2 <simonLed+0xae>
    } else if (val == 4) {  // III
    1e60:	84 30       	cpi	r24, 0x04	; 4
    1e62:	99 f4       	brne	.+38     	; 0x1e8a <simonLed+0x96>
        iLED[WING[R][0]] = dimValue;
    1e64:	e0 91 0c bf 	lds	r30, 0xBF0C	; 0x80bf0c <__bss_end+0x83f1>
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e6e:	e4 53       	subi	r30, 0x34	; 52
    1e70:	f5 4c       	sbci	r31, 0xC5	; 197
    1e72:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1e74:	e0 91 0d bf 	lds	r30, 0xBF0D	; 0x80bf0d <__bss_end+0x83f2>
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e7e:	e4 53       	subi	r30, 0x34	; 52
    1e80:	f5 4c       	sbci	r31, 0xC5	; 197
    1e82:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1e84:	e0 91 0e bf 	lds	r30, 0xBF0E	; 0x80bf0e <__bss_end+0x83f3>
    1e88:	0c c0       	rjmp	.+24     	; 0x1ea2 <simonLed+0xae>
    } else if (val == 2) {  // I
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	81 f4       	brne	.+32     	; 0x1eae <simonLed+0xba>
        iLED[WING[R][3]] = dimValue;
    1e8e:	e0 91 0f bf 	lds	r30, 0xBF0F	; 0x80bf0f <__bss_end+0x83f4>
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e98:	e4 53       	subi	r30, 0x34	; 52
    1e9a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e9c:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1e9e:	e0 91 10 bf 	lds	r30, 0xBF10	; 0x80bf10 <__bss_end+0x83f5>
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ea8:	e4 53       	subi	r30, 0x34	; 52
    1eaa:	f5 4c       	sbci	r31, 0xC5	; 197
    1eac:	80 83       	st	Z, r24
    }
}
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	08 95       	ret

00001eb4 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1eb8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1ebc:	8d 7f       	andi	r24, 0xFD	; 253
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <BastetDictates+0xe>
    1ec0:	69 c1       	rjmp	.+722    	; 0x2194 <BastetDictates+0x2e0>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1ec2:	8a e7       	ldi	r24, 0x7A	; 122
    1ec4:	b8 da       	rcall	.-2704   	; 0x1436 <CheckState>
    1ec6:	88 23       	and	r24, r24
    1ec8:	41 f0       	breq	.+16     	; 0x1eda <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1eca:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <BastetDictates+0x20>
    1ed2:	60 c1       	rjmp	.+704    	; 0x2194 <BastetDictates+0x2e0>
            gameNow = TEXT;
    1ed4:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
    1ed8:	5d c1       	rjmp	.+698    	; 0x2194 <BastetDictates+0x2e0>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1eda:	8b e7       	ldi	r24, 0x7B	; 123
    1edc:	ac da       	rcall	.-2728   	; 0x1436 <CheckState>
    1ede:	88 23       	and	r24, r24
    1ee0:	39 f0       	breq	.+14     	; 0x1ef0 <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1ee2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1ee6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <BastetDictates+0x3c>
            gameNow = BASTET;
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>

    if (BASTET_BOOT == simonGameState) {
    1ef0:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	0c c0       	rjmp	.+24     	; 0x1f10 <BastetDictates+0x5c>
    1ef8:	cb e6       	ldi	r28, 0x6B	; 107
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1efa:	d8 e3       	ldi	r29, 0x38	; 56
    1efc:	74 d9       	rcall	.-3352   	; 0x11e6 <lfsr>
    1efe:	83 70       	andi	r24, 0x03	; 3
    1f00:	89 93       	st	Y+, r24
    if (CheckState(LANYARD_COMPLETED))
        if (buttonState!=0xff)
            gameNow = BASTET;

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1f02:	88 e3       	ldi	r24, 0x38	; 56
    1f04:	c7 37       	cpi	r28, 0x77	; 119
    1f06:	d8 07       	cpc	r29, r24
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <BastetDictates+0x48>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f10:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	71 f4       	brne	.+28     	; 0x1f34 <BastetDictates+0x80>
    1f18:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	51 f4       	brne	.+20     	; 0x1f34 <BastetDictates+0x80>
        simonGameState = BASTET_GAME_INTRO;
    1f20:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
        simonPos = 0;
    1f24:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonPos>
        simonInputPos = 0;
    1f28:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
        simonTimer = 0;
    1f2c:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        simonCounter = 0;
    1f30:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f34:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	29 f5       	brne	.+74     	; 0x1f86 <BastetDictates+0xd2>
        if (simonTimer > 5) {   // ±.33 seconds
    1f3c:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1f40:	86 30       	cpi	r24, 0x06	; 6
    1f42:	38 f0       	brcs	.+14     	; 0x1f52 <BastetDictates+0x9e>
            simonCounter++;
    1f44:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonCounter>
            simonTimer = 0;
    1f4e:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        }
        if (simonCounter > 5) {
    1f52:	e0 91 66 38 	lds	r30, 0x3866	; 0x803866 <simonCounter>
    1f56:	e6 30       	cpi	r30, 0x06	; 6
    1f58:	58 f0       	brcs	.+22     	; 0x1f70 <BastetDictates+0xbc>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
            simonTimer = 0;
    1f60:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonCounter = 0;
    1f64:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            SetHackerLeds(0,0);
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	6f db       	rcall	.-2338   	; 0x164c <SetHackerLeds>
            return 0;
    1f6e:	12 c1       	rjmp	.+548    	; 0x2194 <BastetDictates+0x2e0>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	e6 5e       	subi	r30, 0xE6	; 230
    1f74:	f0 44       	sbci	r31, 0x40	; 64
    1f76:	e0 81       	ld	r30, Z
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f7e:	e4 53       	subi	r30, 0x34	; 52
    1f80:	f5 4c       	sbci	r31, 0xC5	; 197
    1f82:	80 83       	st	Z, r24
    1f84:	2b c0       	rjmp	.+86     	; 0x1fdc <BastetDictates+0x128>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	49 f5       	brne	.+82     	; 0x1fdc <BastetDictates+0x128>
        if (simonTimer > 7) {   // ±.5 second
    1f8a:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1f8e:	88 30       	cpi	r24, 0x08	; 8
    1f90:	38 f0       	brcs	.+14     	; 0x1fa0 <BastetDictates+0xec>
            simonCounter++;
    1f92:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
    1f96:	8f 5f       	subi	r24, 0xFF	; 255
    1f98:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonCounter>
            simonTimer = 0;
    1f9c:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1fa0:	e0 91 66 38 	lds	r30, 0x3866	; 0x803866 <simonCounter>
    1fa4:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <simonPos>
    1fa8:	8e 17       	cp	r24, r30
    1faa:	40 f4       	brcc	.+16     	; 0x1fbc <BastetDictates+0x108>
            simonInputPos = 0;
    1fac:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1fb0:	85 e0       	ldi	r24, 0x05	; 5
    1fb2:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
            simonLed(0);
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	1d df       	rcall	.-454    	; 0x1df4 <simonLed>
    1fba:	98 c0       	rjmp	.+304    	; 0x20ec <BastetDictates+0x238>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1fbc:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	30 f4       	brcc	.+12     	; 0x1fd0 <BastetDictates+0x11c>
            simonLed(simonState[simonCounter] + 1);
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	e5 59       	subi	r30, 0x95	; 149
    1fc8:	f7 4c       	sbci	r31, 0xC7	; 199
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 5f       	subi	r24, 0xFF	; 255
    1fce:	12 df       	rcall	.-476    	; 0x1df4 <simonLed>
        }
        if (simonTimer > 6) {
    1fd0:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1fd4:	87 30       	cpi	r24, 0x07	; 7
    1fd6:	10 f0       	brcs	.+4      	; 0x1fdc <BastetDictates+0x128>
            simonLed(0);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0c df       	rcall	.-488    	; 0x1df4 <simonLed>
    1fdc:	c0 91 65 38 	lds	r28, 0x3865	; 0x803865 <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1fe0:	c5 30       	cpi	r28, 0x05	; 5
    1fe2:	09 f0       	breq	.+2      	; 0x1fe6 <BastetDictates+0x132>
    1fe4:	86 c0       	rjmp	.+268    	; 0x20f2 <BastetDictates+0x23e>
    1fe6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1fea:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1fee:	98 17       	cp	r25, r24
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <BastetDictates+0x140>
    1ff2:	71 c0       	rjmp	.+226    	; 0x20d6 <BastetDictates+0x222>
    1ff4:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    1ff8:	91 11       	cpse	r25, r1
    1ffa:	6f c0       	rjmp	.+222    	; 0x20da <BastetDictates+0x226>
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	08 f0       	brcs	.+2      	; 0x2002 <BastetDictates+0x14e>
    2000:	6c c0       	rjmp	.+216    	; 0x20da <BastetDictates+0x226>
                simonWait = 1;
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <simonWait>
                simonTimer = 0;
    2008:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                simonLed(buttonState+1);
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	f2 de       	rcall	.-540    	; 0x1df4 <simonLed>
    2010:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2012:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
    2016:	c0 93 34 38 	sts	0x3834, r28	; 0x803834 <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    201a:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    201e:	e8 2f       	mov	r30, r24
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	e5 59       	subi	r30, 0x95	; 149
    2024:	f7 4c       	sbci	r31, 0xC7	; 199
    2026:	20 81       	ld	r18, Z
    2028:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    202c:	29 13       	cpse	r18, r25
    202e:	1d c0       	rjmp	.+58     	; 0x206a <BastetDictates+0x1b6>
    2030:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    2032:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <simonInputPos>
    2036:	e0 91 6a 38 	lds	r30, 0x386A	; 0x80386a <simonPos>
                    if (simonInputPos > simonPos) {
    203a:	e8 17       	cp	r30, r24
    203c:	a0 f5       	brcc	.+104    	; 0x20a6 <BastetDictates+0x1f2>
    203e:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    2040:	e0 93 6a 38 	sts	0x386A, r30	; 0x80386a <simonPos>
    2044:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                        simonTimer = 0;
    2048:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
                        simonCounter = 0;
    204c:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    204e:	59 f0       	breq	.+22     	; 0x2066 <BastetDictates+0x1b2>
    2050:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	e6 5e       	subi	r30, 0xE6	; 230
    2056:	f0 44       	sbci	r31, 0x40	; 64
    2058:	e5 81       	ldd	r30, Z+5	; 0x05
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2060:	e4 53       	subi	r30, 0x34	; 52
    2062:	f5 4c       	sbci	r31, 0xC5	; 197
    2064:	80 83       	st	Z, r24
    2066:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    2068:	1c c0       	rjmp	.+56     	; 0x20a2 <BastetDictates+0x1ee>
    206a:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2072:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2076:	aa e1       	ldi	r26, 0x1A	; 26
    2078:	bf eb       	ldi	r27, 0xBF	; 191
    207a:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2082:	e4 53       	subi	r30, 0x34	; 52
    2084:	f5 4c       	sbci	r31, 0xC5	; 197
    2086:	80 83       	st	Z, r24
    2088:	8f eb       	ldi	r24, 0xBF	; 191
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    208a:	a0 32       	cpi	r26, 0x20	; 32
    208c:	b8 07       	cpc	r27, r24
    208e:	a9 f7       	brne	.-22     	; 0x207a <BastetDictates+0x1c6>
    2090:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    2094:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonPos>
                    simonPos = 0;
    2098:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                    simonTimer = 0;
    209c:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
                    simonCounter = 0;
    20a0:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    20a2:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
    20a6:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    20aa:	8c 30       	cpi	r24, 0x0C	; 12
    20ac:	20 f4       	brcc	.+8      	; 0x20b6 <BastetDictates+0x202>
    20ae:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <simonPos>
    20b2:	8c 30       	cpi	r24, 0x0C	; 12
    20b4:	90 f0       	brcs	.+36     	; 0x20da <BastetDictates+0x226>
                    effect = 64|2;
    20b6:	82 e4       	ldi	r24, 0x42	; 66
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    20be:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20c2:	8a e7       	ldi	r24, 0x7A	; 122
    20c4:	96 d9       	rcall	.-3284   	; 0x13f2 <UpdateState>
    20c6:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                    simonTimer = 0;
    20ca:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
                    simonCounter = 0;
    20ce:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    20d0:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <BastetDictates+0x226>
    20d6:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20da:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    20de:	88 3c       	cpi	r24, 0xC8	; 200
    20e0:	41 f4       	brne	.+16     	; 0x20f2 <BastetDictates+0x23e>
    20e2:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20e4:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
    20e8:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            simonCounter = 0;
    20ec:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonTimer = 0;
    20f0:	51 c0       	rjmp	.+162    	; 0x2194 <BastetDictates+0x2e0>
            return 0;
    20f2:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	81 f4       	brne	.+32     	; 0x211a <BastetDictates+0x266>
        if (simonTimer >= 7) {
    20fa:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    20fe:	87 30       	cpi	r24, 0x07	; 7
    2100:	60 f0       	brcs	.+24     	; 0x211a <BastetDictates+0x266>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	77 de       	rcall	.-786    	; 0x1df4 <simonLed>
    2106:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonWait>
            simonWait = 0;
    210a:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonTimer = 0;
    210e:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            simonCounter = 0;
    2112:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <simonNextGameState>
            simonGameState = simonNextGameState;
    2116:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
    211a:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    211e:	86 30       	cpi	r24, 0x06	; 6
    2120:	41 f5       	brne	.+80     	; 0x2172 <BastetDictates+0x2be>
    2122:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
        if (simonTimer > 3) {
    2126:	84 30       	cpi	r24, 0x04	; 4
    2128:	38 f0       	brcs	.+14     	; 0x2138 <BastetDictates+0x284>
    212a:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
            simonCounter++;
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonCounter>
    2134:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonTimer = 0;
    2138:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
        }
        if (simonCounter > 5) {
    213c:	86 30       	cpi	r24, 0x06	; 6
    213e:	40 f0       	brcs	.+16     	; 0x2150 <BastetDictates+0x29c>
    2140:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonTimer = 0;
    2144:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            simonCounter = 0;
    2148:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    214a:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
    214e:	22 c0       	rjmp	.+68     	; 0x2194 <BastetDictates+0x2e0>
            return 0;
    2150:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	e8 1b       	sub	r30, r24
    2156:	f1 09       	sbc	r31, r1
    2158:	e6 5e       	subi	r30, 0xE6	; 230
    215a:	f0 44       	sbci	r31, 0x40	; 64
    215c:	a0 81       	ld	r26, Z
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	a4 53       	subi	r26, 0x34	; 52
    2162:	b5 4c       	sbci	r27, 0xC5	; 197
    2164:	1c 92       	st	X, r1
    2166:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	e4 53       	subi	r30, 0x34	; 52
    216c:	f5 4c       	sbci	r31, 0xC5	; 197
    216e:	10 82       	st	Z, r1
    2170:	0c c0       	rjmp	.+24     	; 0x218a <BastetDictates+0x2d6>
    2172:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    2174:	51 f4       	brne	.+20     	; 0x218a <BastetDictates+0x2d6>
        simonInputPos = 0;
    2176:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
        simonPos = 0;
    217a:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    217e:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonGameState>
        gameNow = TEXT;
    2182:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        simonLed(0);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	35 de       	rcall	.-918    	; 0x1df4 <simonLed>
    218a:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    }

    ++simonTimer;
    218e:	8f 5f       	subi	r24, 0xFF	; 255
    2190:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <simonTimer>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <Cheat>:
    219c:	a2 e1       	ldi	r26, 0x12	; 18

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e4 ed       	ldi	r30, 0xD4	; 212
    21a2:	f0 e1       	ldi	r31, 0x10	; 16
    21a4:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <__prologue_saves__+0x1e>
    21a8:	8a 8b       	std	Y+18, r24	; 0x12
    21aa:	80 e1       	ldi	r24, 0x10	; 16
    21ac:	ec ee       	ldi	r30, 0xEC	; 236
    21ae:	fe eb       	ldi	r31, 0xBE	; 190
    21b0:	de 01       	movw	r26, r28
    21b2:	11 96       	adiw	r26, 0x01	; 1
    21b4:	01 90       	ld	r0, Z+
    21b6:	0d 92       	st	X+, r0
    21b8:	8a 95       	dec	r24
    21ba:	e1 f7       	brne	.-8      	; 0x21b4 <Cheat+0x18>
    21bc:	fe 01       	movw	r30, r28
    21be:	31 96       	adiw	r30, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	21 91       	ld	r18, Z+
    21c6:	31 91       	ld	r19, Z+
    21c8:	26 17       	cp	r18, r22
    21ca:	37 07       	cpc	r19, r23
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <Cheat+0x34>
    21ce:	89 2f       	mov	r24, r25
    21d0:	9f 5f       	subi	r25, 0xFF	; 255
    21d2:	98 30       	cpi	r25, 0x08	; 8
    21d4:	b9 f7       	brne	.-18     	; 0x21c4 <Cheat+0x28>
    21d6:	88 30       	cpi	r24, 0x08	; 8
    21d8:	10 f0       	brcs	.+4      	; 0x21de <Cheat+0x42>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <Cheat+0x6a>
    21de:	18 e1       	ldi	r17, 0x18	; 24
    21e0:	18 0f       	add	r17, r24
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	be 01       	movw	r22, r28
    21e6:	6f 5e       	subi	r22, 0xEF	; 239
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	81 2f       	mov	r24, r17
    21ec:	0e 94 11 08 	call	0x1022	; 0x1022 <EERead>
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	8f 3f       	cpi	r24, 0xFF	; 255
    21f4:	91 f7       	brne	.-28     	; 0x21da <Cheat+0x3e>
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	be 01       	movw	r22, r28
    21fa:	6e 5e       	subi	r22, 0xEE	; 238
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	81 2f       	mov	r24, r17
    2200:	0e 94 21 08 	call	0x1042	; 0x1042 <EEWrite>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	62 96       	adiw	r28, 0x12	; 18
    2208:	e3 e0       	ldi	r30, 0x03	; 3
    220a:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__epilogue_restores__+0x1e>

0000220e <UnflipData>:
    220e:	26 2f       	mov	r18, r22
    2210:	fb 01       	movw	r30, r22
    2212:	35 e5       	ldi	r19, 0x55	; 85
    2214:	9e 2f       	mov	r25, r30
    2216:	92 1b       	sub	r25, r18
    2218:	98 17       	cp	r25, r24
    221a:	28 f4       	brcc	.+10     	; 0x2226 <UnflipData+0x18>
    221c:	90 81       	ld	r25, Z
    221e:	92 95       	swap	r25
    2220:	93 27       	eor	r25, r19
    2222:	91 93       	st	Z+, r25
    2224:	f7 cf       	rjmp	.-18     	; 0x2214 <UnflipData+0x6>
    2226:	08 95       	ret

00002228 <ClearTxAfter>:
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	88 30       	cpi	r24, 0x08	; 8
    222c:	30 f4       	brcc	.+12     	; 0x223a <ClearTxAfter+0x12>
    222e:	e8 2f       	mov	r30, r24
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	ef 5a       	subi	r30, 0xAF	; 175
    2234:	f5 4c       	sbci	r31, 0xC5	; 197
    2236:	10 82       	st	Z, r1
    2238:	f7 cf       	rjmp	.-18     	; 0x2228 <ClearTxAfter>
    223a:	08 95       	ret

0000223c <StartsWith>:
    223c:	ac 01       	movw	r20, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	e9 2f       	mov	r30, r25
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	da 01       	movw	r26, r20
    2246:	ae 0f       	add	r26, r30
    2248:	bf 1f       	adc	r27, r31
    224a:	3c 91       	ld	r19, X
    224c:	e6 0f       	add	r30, r22
    224e:	f7 1f       	adc	r31, r23
    2250:	31 11       	cpse	r19, r1
    2252:	05 c0       	rjmp	.+10     	; 0x225e <StartsWith+0x22>
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 81       	ld	r25, Z
    2258:	99 23       	and	r25, r25
    225a:	49 f0       	breq	.+18     	; 0x226e <StartsWith+0x32>
    225c:	07 c0       	rjmp	.+14     	; 0x226c <StartsWith+0x30>
    225e:	20 81       	ld	r18, Z
    2260:	22 23       	and	r18, r18
    2262:	c1 f3       	breq	.-16     	; 0x2254 <StartsWith+0x18>
    2264:	32 13       	cpse	r19, r18
    2266:	02 c0       	rjmp	.+4      	; 0x226c <StartsWith+0x30>
    2268:	9f 5f       	subi	r25, 0xFF	; 255
    226a:	ea cf       	rjmp	.-44     	; 0x2240 <StartsWith+0x4>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	08 95       	ret

00002270 <PrepareSending>:
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	fc 01       	movw	r30, r24
    2276:	61 15       	cp	r22, r1
    2278:	71 05       	cpc	r23, r1
    227a:	59 f1       	breq	.+86     	; 0x22d2 <PrepareSending+0x62>
    227c:	a9 e5       	ldi	r26, 0x59	; 89
    227e:	ba e3       	ldi	r27, 0x3A	; 58
    2280:	c1 e5       	ldi	r28, 0x51	; 81
    2282:	da e3       	ldi	r29, 0x3A	; 58
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	9f ef       	ldi	r25, 0xFF	; 255
    2288:	6f 3f       	cpi	r22, 0xFF	; 255
    228a:	71 05       	cpc	r23, r1
    228c:	69 f0       	breq	.+26     	; 0x22a8 <PrepareSending+0x38>
    228e:	60 f0       	brcs	.+24     	; 0x22a8 <PrepareSending+0x38>
    2290:	ed 93       	st	X+, r30
    2292:	fd 93       	st	X+, r31
    2294:	99 93       	st	Y+, r25
    2296:	e1 50       	subi	r30, 0x01	; 1
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	6f 5f       	subi	r22, 0xFF	; 255
    229c:	71 09       	sbc	r23, r1
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	87 30       	cpi	r24, 0x07	; 7
    22a2:	91 f7       	brne	.-28     	; 0x2288 <PrepareSending+0x18>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	1e c0       	rjmp	.+60     	; 0x22e4 <PrepareSending+0x74>
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	d9 01       	movw	r26, r18
    22ae:	aa 0f       	add	r26, r26
    22b0:	bb 1f       	adc	r27, r27
    22b2:	a7 5a       	subi	r26, 0xA7	; 167
    22b4:	b5 4c       	sbci	r27, 0xC5	; 197
    22b6:	ed 93       	st	X+, r30
    22b8:	fc 93       	st	X, r31
    22ba:	6f 3f       	cpi	r22, 0xFF	; 255
    22bc:	71 05       	cpc	r23, r1
    22be:	11 f4       	brne	.+4      	; 0x22c4 <PrepareSending+0x54>
    22c0:	6e ef       	ldi	r22, 0xFE	; 254
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	f9 01       	movw	r30, r18
    22c6:	ef 5a       	subi	r30, 0xAF	; 175
    22c8:	f5 4c       	sbci	r31, 0xC5	; 197
    22ca:	60 83       	st	Z, r22
    22cc:	40 93 4f 3a 	sts	0x3A4F, r20	; 0x803a4f <txTypeNow>
    22d0:	05 c0       	rjmp	.+10     	; 0x22dc <PrepareSending+0x6c>
    22d2:	10 92 59 3a 	sts	0x3A59, r1	; 0x803a59 <txAddrList>
    22d6:	10 92 5a 3a 	sts	0x3A5A, r1	; 0x803a5a <txAddrList+0x1>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	a5 df       	rcall	.-182    	; 0x2228 <ClearTxAfter>
    22de:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrNow>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	f9 01       	movw	r30, r18
    22f4:	ee 0f       	add	r30, r30
    22f6:	ff 1f       	adc	r31, r31
    22f8:	ec 5d       	subi	r30, 0xDC	; 220
    22fa:	f6 4c       	sbci	r31, 0xC6	; 198
    22fc:	a9 e5       	ldi	r26, 0x59	; 89
    22fe:	ba e7       	ldi	r27, 0x7A	; 122
    2300:	a0 83       	st	Z, r26
    2302:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2304:	f9 01       	movw	r30, r18
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ec 59       	subi	r30, 0x9C	; 156
    230c:	f6 4c       	sbci	r31, 0xC6	; 198
    230e:	62 e0       	ldi	r22, 0x02	; 2
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	60 83       	st	Z, r22
    2314:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2316:	22 0f       	add	r18, r18
    2318:	33 1f       	adc	r19, r19
    231a:	f9 01       	movw	r30, r18
    231c:	ec 55       	subi	r30, 0x5C	; 92
    231e:	f6 4c       	sbci	r31, 0xC6	; 198
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	40 83       	st	Z, r20
    2326:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2328:	21 e0       	ldi	r18, 0x01	; 1
    232a:	28 0f       	add	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	f9 01       	movw	r30, r18
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	ec 5d       	subi	r30, 0xDC	; 220
    2336:	f6 4c       	sbci	r31, 0xC6	; 198
    2338:	c2 e6       	ldi	r28, 0x62	; 98
    233a:	da e7       	ldi	r29, 0x7A	; 122
    233c:	c0 83       	st	Z, r28
    233e:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2340:	f9 01       	movw	r30, r18
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ec 59       	subi	r30, 0x9C	; 156
    2348:	f6 4c       	sbci	r31, 0xC6	; 198
    234a:	cc e0       	ldi	r28, 0x0C	; 12
    234c:	d0 e0       	ldi	r29, 0x00	; 0
    234e:	c0 83       	st	Z, r28
    2350:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	f9 01       	movw	r30, r18
    2358:	ec 55       	subi	r30, 0x5C	; 92
    235a:	f6 4c       	sbci	r31, 0xC6	; 198
    235c:	40 83       	st	Z, r20
    235e:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2360:	e2 e0       	ldi	r30, 0x02	; 2
    2362:	e8 0f       	add	r30, r24
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	ec 5d       	subi	r30, 0xDC	; 220
    236c:	f6 4c       	sbci	r31, 0xC6	; 198
    236e:	20 ef       	ldi	r18, 0xF0	; 240
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	20 83       	st	Z, r18
    2374:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2376:	23 e0       	ldi	r18, 0x03	; 3
    2378:	28 0f       	add	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	f9 01       	movw	r30, r18
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ec 5d       	subi	r30, 0xDC	; 220
    2384:	f6 4c       	sbci	r31, 0xC6	; 198
    2386:	a0 83       	st	Z, r26
    2388:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    238a:	f9 01       	movw	r30, r18
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ec 59       	subi	r30, 0x9C	; 156
    2392:	f6 4c       	sbci	r31, 0xC6	; 198
    2394:	60 83       	st	Z, r22
    2396:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	f9 01       	movw	r30, r18
    239e:	ec 55       	subi	r30, 0x5C	; 92
    23a0:	f6 4c       	sbci	r31, 0xC6	; 198
    23a2:	40 83       	st	Z, r20
    23a4:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23a6:	24 e0       	ldi	r18, 0x04	; 4
    23a8:	28 0f       	add	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	f9 01       	movw	r30, r18
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ec 5d       	subi	r30, 0xDC	; 220
    23b4:	f6 4c       	sbci	r31, 0xC6	; 198
    23b6:	a5 e5       	ldi	r26, 0x55	; 85
    23b8:	ba e7       	ldi	r27, 0x7A	; 122
    23ba:	a0 83       	st	Z, r26
    23bc:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23be:	f9 01       	movw	r30, r18
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ec 59       	subi	r30, 0x9C	; 156
    23c6:	f6 4c       	sbci	r31, 0xC6	; 198
    23c8:	60 83       	st	Z, r22
    23ca:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	f9 01       	movw	r30, r18
    23d2:	ec 55       	subi	r30, 0x5C	; 92
    23d4:	f6 4c       	sbci	r31, 0xC6	; 198
    23d6:	40 83       	st	Z, r20
    23d8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23da:	8b 5f       	subi	r24, 0xFB	; 251
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	2c 97       	sbiw	r28, 0x0c	; 12
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	7c 01       	movw	r14, r24
    2400:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2402:	9e 01       	movw	r18, r28
    2404:	2f 5f       	subi	r18, 0xFF	; 255
    2406:	3f 4f       	sbci	r19, 0xFF	; 255
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	6c e0       	ldi	r22, 0x0C	; 12
    240c:	80 96       	adiw	r24, 0x20	; 32
    240e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	98 27       	eor	r25, r24
    2418:	89 27       	eor	r24, r25
    241a:	98 27       	eor	r25, r24
    241c:	80 96       	adiw	r24, 0x20	; 32
    241e:	f8 01       	movw	r30, r16
    2420:	80 83       	st	Z, r24
    2422:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	98 27       	eor	r25, r24
    242a:	89 27       	eor	r24, r25
    242c:	98 27       	eor	r25, r24
    242e:	80 96       	adiw	r24, 0x20	; 32
    2430:	82 83       	std	Z+2, r24	; 0x02
    2432:	93 83       	std	Z+3, r25	; 0x03
    2434:	de 01       	movw	r26, r28
    2436:	15 96       	adiw	r26, 0x05	; 5
    2438:	34 96       	adiw	r30, 0x04	; 4
    243a:	c8 01       	movw	r24, r16
    243c:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    243e:	2d 91       	ld	r18, X+
    2440:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2442:	e8 17       	cp	r30, r24
    2444:	f9 07       	cpc	r31, r25
    2446:	d9 f7       	brne	.-10     	; 0x243e <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    2448:	fc e2       	ldi	r31, 0x2C	; 44
    244a:	ef 0e       	add	r14, r31
    244c:	f1 1c       	adc	r15, r1
    244e:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2450:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2452:	9e 01       	movw	r18, r28
    2454:	2f 5f       	subi	r18, 0xFF	; 255
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	c7 01       	movw	r24, r14
    245e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	98 27       	eor	r25, r24
    2468:	89 27       	eor	r24, r25
    246a:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    246c:	97 01       	movw	r18, r14
    246e:	2e 5f       	subi	r18, 0xFE	; 254
    2470:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2472:	43 e0       	ldi	r20, 0x03	; 3
    2474:	4d 15       	cp	r20, r13
    2476:	80 f4       	brcc	.+32     	; 0x2498 <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    2478:	ac 01       	movw	r20, r24
    247a:	41 50       	subi	r20, 0x01	; 1
    247c:	51 09       	sbc	r21, r1
    247e:	f8 01       	movw	r30, r16
    2480:	42 8f       	std	Z+26, r20	; 0x1a
    2482:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2484:	f3 e0       	ldi	r31, 0x03	; 3
    2486:	ef 0e       	add	r14, r31
    2488:	f1 1c       	adc	r15, r1
    248a:	f8 01       	movw	r30, r16
    248c:	e4 86       	std	Z+12, r14	; 0x0c
    248e:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    2490:	4b 81       	ldd	r20, Y+3	; 0x03
    2492:	f5 01       	movw	r30, r10
    2494:	44 a3       	std	Z+36, r20	; 0x24
    2496:	05 c0       	rjmp	.+10     	; 0x24a2 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    2498:	f8 01       	movw	r30, r16
    249a:	82 8f       	std	Z+26, r24	; 0x1a
    249c:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    249e:	24 87       	std	Z+12, r18	; 0x0c
    24a0:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    24a2:	7c 01       	movw	r14, r24
    24a4:	e2 0e       	add	r14, r18
    24a6:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24a8:	d3 94       	inc	r13
    24aa:	0e 5f       	subi	r16, 0xFE	; 254
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	ff ef       	ldi	r31, 0xFF	; 255
    24b0:	af 1a       	sub	r10, r31
    24b2:	bf 0a       	sbc	r11, r31
    24b4:	47 e0       	ldi	r20, 0x07	; 7
    24b6:	d4 12       	cpse	r13, r20
    24b8:	cc cf       	rjmp	.-104    	; 0x2452 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24ba:	2c 96       	adiw	r28, 0x0c	; 12
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	df 90       	pop	r13
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	08 95       	ret

000024d4 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24d4:	a0 e2       	ldi	r26, 0x20	; 32
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e0 e7       	ldi	r30, 0x70	; 112
    24da:	f2 e1       	ldi	r31, 0x12	; 18
    24dc:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__prologue_saves__+0x14>
    24e0:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    24e2:	7c 01       	movw	r14, r24
    24e4:	20 e2       	ldi	r18, 0x20	; 32
    24e6:	e2 0e       	add	r14, r18
    24e8:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    24ea:	9e 01       	movw	r18, r28
    24ec:	2f 5f       	subi	r18, 0xFF	; 255
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	62 e0       	ldi	r22, 0x02	; 2
    24f4:	8c 96       	adiw	r24, 0x2c	; 44
    24f6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    24fa:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    24fc:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    24fe:	11 23       	and	r17, r17
    2500:	59 f1       	breq	.+86     	; 0x2558 <CheckLetter+0x84>
    2502:	01 2f       	mov	r16, r17
    2504:	11 32       	cpi	r17, 0x21	; 33
    2506:	08 f0       	brcs	.+2      	; 0x250a <CheckLetter+0x36>
    2508:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    250a:	9e 01       	movw	r18, r28
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	60 2f       	mov	r22, r16
    2514:	c7 01       	movw	r24, r14
    2516:	0e 96       	adiw	r24, 0x0e	; 14
    2518:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
    251c:	fe 01       	movw	r30, r28
    251e:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2520:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2522:	dd 20       	and	r13, r13
    2524:	61 f0       	breq	.+24     	; 0x253e <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2526:	e1 e0       	ldi	r30, 0x01	; 1
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	ec 0f       	add	r30, r28
    252c:	fd 1f       	adc	r31, r29
    252e:	e8 0f       	add	r30, r24
    2530:	f1 1d       	adc	r31, r1
    2532:	90 81       	ld	r25, Z
    2534:	90 62       	ori	r25, 0x20	; 32
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	9c 11       	cpse	r25, r12
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <CheckLetter+0x84>
    253c:	0e c0       	rjmp	.+28     	; 0x255a <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    253e:	91 91       	ld	r25, Z+
    2540:	dd 24       	eor	r13, r13
    2542:	d3 94       	inc	r13
    2544:	9b 35       	cpi	r25, 0x5B	; 91
    2546:	09 f0       	breq	.+2      	; 0x254a <CheckLetter+0x76>
    2548:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	80 17       	cp	r24, r16
    254e:	48 f3       	brcs	.-46     	; 0x2522 <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2550:	e0 0e       	add	r14, r16
    2552:	f1 1c       	adc	r15, r1
        x -= max;
    2554:	10 1b       	sub	r17, r16
    2556:	d3 cf       	rjmp	.-90     	; 0x24fe <CheckLetter+0x2a>
    }
    return 0;
    2558:	80 e0       	ldi	r24, 0x00	; 0
}
    255a:	a0 96       	adiw	r28, 0x20	; 32
    255c:	e8 e0       	ldi	r30, 0x08	; 8
    255e:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__epilogue_restores__+0x14>

00002562 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2562:	af 92       	push	r10
    2564:	bf 92       	push	r11
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	00 d0       	rcall	.+0      	; 0x2576 <FindChild+0x14>
    2576:	00 d0       	rcall	.+0      	; 0x2578 <FindChild+0x16>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	d6 2e       	mov	r13, r22
    257e:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    2580:	9e 01       	movw	r18, r28
    2582:	2f 5f       	subi	r18, 0xFF	; 255
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	64 e0       	ldi	r22, 0x04	; 4
    258a:	80 96       	adiw	r24, 0x20	; 32
    258c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
    2590:	e9 80       	ldd	r14, Y+1	; 0x01
    2592:	fa 80       	ldd	r15, Y+2	; 0x02
    2594:	fe 24       	eor	r15, r14
    2596:	ef 24       	eor	r14, r15
    2598:	fe 24       	eor	r15, r14
    259a:	0b 81       	ldd	r16, Y+3	; 0x03
    259c:	1c 81       	ldd	r17, Y+4	; 0x04
    259e:	10 27       	eor	r17, r16
    25a0:	01 27       	eor	r16, r17
    25a2:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25a4:	0e 15       	cp	r16, r14
    25a6:	1f 05       	cpc	r17, r15
    25a8:	48 f5       	brcc	.+82     	; 0x25fc <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25aa:	a0 16       	cp	r10, r16
    25ac:	b1 06       	cpc	r11, r17
    25ae:	60 f0       	brcs	.+24     	; 0x25c8 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25b0:	9e 01       	movw	r18, r28
    25b2:	2f 5f       	subi	r18, 0xFF	; 255
    25b4:	3f 4f       	sbci	r19, 0xFF	; 255
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	62 e0       	ldi	r22, 0x02	; 2
    25ba:	c8 01       	movw	r24, r16
    25bc:	80 96       	adiw	r24, 0x20	; 32
    25be:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
    25c2:	09 81       	ldd	r16, Y+1	; 0x01
    25c4:	1a 81       	ldd	r17, Y+2	; 0x02
    25c6:	eb cf       	rjmp	.-42     	; 0x259e <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25c8:	9e 01       	movw	r18, r28
    25ca:	2f 5f       	subi	r18, 0xFF	; 255
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	61 e0       	ldi	r22, 0x01	; 1
    25d2:	c8 01       	movw	r24, r16
    25d4:	85 96       	adiw	r24, 0x25	; 37
    25d6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	81 11       	cpse	r24, r1
    25de:	03 c0       	rjmp	.+6      	; 0x25e6 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25e0:	d1 10       	cpse	r13, r1
    25e2:	06 c0       	rjmp	.+12     	; 0x25f0 <FindChild+0x8e>
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25e6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
    25ea:	81 11       	cpse	r24, r1
    25ec:	f9 cf       	rjmp	.-14     	; 0x25e0 <FindChild+0x7e>
    25ee:	e0 cf       	rjmp	.-64     	; 0x25b0 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25f0:	6d 2d       	mov	r22, r13
    25f2:	c8 01       	movw	r24, r16
    25f4:	6f df       	rcall	.-290    	; 0x24d4 <CheckLetter>
    25f6:	88 23       	and	r24, r24
    25f8:	d9 f2       	breq	.-74     	; 0x25b0 <FindChild+0x4e>
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <FindChild+0xa2>
    2602:	c8 01       	movw	r24, r16
}
    2604:	24 96       	adiw	r28, 0x04	; 4
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	1f 91       	pop	r17
    2610:	0f 91       	pop	r16
    2612:	ff 90       	pop	r15
    2614:	ef 90       	pop	r14
    2616:	df 90       	pop	r13
    2618:	bf 90       	pop	r11
    261a:	af 90       	pop	r10
    261c:	08 95       	ret

0000261e <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    261e:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2620:	9f e9       	ldi	r25, 0x9F	; 159
    2622:	98 0f       	add	r25, r24
    2624:	9a 31       	cpi	r25, 0x1A	; 26
    2626:	38 f0       	brcs	.+14     	; 0x2636 <InpOkChk+0x18>
    2628:	90 ed       	ldi	r25, 0xD0	; 208
    262a:	98 0f       	add	r25, r24
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	9a 30       	cpi	r25, 0x0A	; 10
    2630:	18 f0       	brcs	.+6      	; 0x2638 <InpOkChk+0x1a>
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	08 95       	ret
    2636:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2638:	08 95       	ret

0000263a <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2644:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2646:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2648:	f8 01       	movw	r30, r16
    264a:	ed 0f       	add	r30, r29
    264c:	f1 1d       	adc	r31, r1
    264e:	80 81       	ld	r24, Z
    2650:	2c 2f       	mov	r18, r28
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	88 23       	and	r24, r24
    2656:	61 f0       	breq	.+24     	; 0x2670 <CleanInput+0x36>
        data[cnt] = data[x];
    2658:	d8 01       	movw	r26, r16
    265a:	a2 0f       	add	r26, r18
    265c:	b3 1f       	adc	r27, r19
    265e:	8c 93       	st	X, r24
        if (data[x] == 0x1b) break; //Escape characters are not supported!
    2660:	80 81       	ld	r24, Z
    2662:	8b 31       	cpi	r24, 0x1B	; 27
    2664:	29 f0       	breq	.+10     	; 0x2670 <CleanInput+0x36>
        if (InpOkChk(data[x])) ++cnt;
    2666:	db df       	rcall	.-74     	; 0x261e <InpOkChk>
    2668:	81 11       	cpse	r24, r1
    266a:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    266c:	df 5f       	subi	r29, 0xFF	; 255
    266e:	ec cf       	rjmp	.-40     	; 0x2648 <CleanInput+0xe>
        data[cnt] = data[x];
        if (data[x] == 0x1b) break; //Escape characters are not supported!
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2670:	f8 01       	movw	r30, r16
    2672:	e2 0f       	add	r30, r18
    2674:	f3 1f       	adc	r31, r19
    2676:	10 82       	st	Z, r1
    return cnt;
}
    2678:	8c 2f       	mov	r24, r28
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2684:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    2686:	20 91 50 3a 	lds	r18, 0x3A50	; 0x803a50 <txAddrNow>
    268a:	28 30       	cpi	r18, 0x08	; 8
    268c:	08 f0       	brcs	.+2      	; 0x2690 <CheckSend+0xc>
    268e:	49 c0       	rjmp	.+146    	; 0x2722 <CheckSend+0x9e>
    2690:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2694:	88 23       	and	r24, r24
    2696:	09 f4       	brne	.+2      	; 0x269a <CheckSend+0x16>
    2698:	44 c0       	rjmp	.+136    	; 0x2722 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    269a:	82 2f       	mov	r24, r18
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	fc 01       	movw	r30, r24
    26a0:	ef 5a       	subi	r30, 0xAF	; 175
    26a2:	f5 4c       	sbci	r31, 0xC5	; 197
    26a4:	e0 81       	ld	r30, Z
    26a6:	e1 11       	cpse	r30, r1
    26a8:	06 c0       	rjmp	.+12     	; 0x26b6 <CheckSend+0x32>
            txPart = 0;
    26aa:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <txPart.3941>
            txAddrNow = TXLISTLEN;
    26ae:	88 e0       	ldi	r24, 0x08	; 8
    26b0:	80 93 50 3a 	sts	0x3A50, r24	; 0x803a50 <txAddrNow>
    26b4:	2e c0       	rjmp	.+92     	; 0x2712 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    26b6:	50 91 0f 39 	lds	r21, 0x390F	; 0x80390f <txPart.3941>
    26ba:	5e 17       	cp	r21, r30
    26bc:	60 f5       	brcc	.+88     	; 0x2716 <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    26be:	ce 2f       	mov	r28, r30
    26c0:	c5 1b       	sub	r28, r21
    26c2:	c1 32       	cpi	r28, 0x21	; 33
    26c4:	08 f0       	brcs	.+2      	; 0x26c8 <CheckSend+0x44>
    26c6:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	fc 01       	movw	r30, r24
    26ce:	e7 5a       	subi	r30, 0xA7	; 167
    26d0:	f5 4c       	sbci	r31, 0xC5	; 197
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	2a ef       	ldi	r18, 0xFA	; 250
    26d8:	3a e3       	ldi	r19, 0x3A	; 58
    26da:	40 91 4f 3a 	lds	r20, 0x3A4F	; 0x803a4f <txTypeNow>
    26de:	6c 2f       	mov	r22, r28
    26e0:	85 0f       	add	r24, r21
    26e2:	91 1d       	adc	r25, r1
    26e4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
            txPart += EEreadLength;
    26e8:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <txPart.3941>
    26ec:	8c 0f       	add	r24, r28
    26ee:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <txPart.3941>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    26f2:	ec 2f       	mov	r30, r28
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	e6 50       	subi	r30, 0x06	; 6
    26f8:	f5 4c       	sbci	r31, 0xC5	; 197
    26fa:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    26fc:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <txBuffer>
    2700:	81 11       	cpse	r24, r1
    2702:	03 c0       	rjmp	.+6      	; 0x270a <CheckSend+0x86>
    2704:	8b ed       	ldi	r24, 0xDB	; 219
    2706:	80 93 fa 3a 	sts	0x3AFA, r24	; 0x803afa <txBuffer>
            SerSend(&txBuffer[0]);
    270a:	8a ef       	ldi	r24, 0xFA	; 250
    270c:	9a e3       	ldi	r25, 0x3A	; 58
    270e:	0e 94 85 08 	call	0x110a	; 0x110a <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	0b c0       	rjmp	.+22     	; 0x272c <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2716:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <txPart.3941>
            ++txAddrNow;
    271a:	2f 5f       	subi	r18, 0xFF	; 255
    271c:	20 93 50 3a 	sts	0x3A50, r18	; 0x803a50 <txAddrNow>
    2720:	f8 cf       	rjmp	.-16     	; 0x2712 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2722:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	91 11       	cpse	r25, r1
    272a:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    272c:	cf 91       	pop	r28
    272e:	08 95       	ret

00002730 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2734:	c0 91 23 39 	lds	r28, 0x3923	; 0x803923 <responseList>
    2738:	cc 23       	and	r28, r28
    273a:	b1 f1       	breq	.+108    	; 0x27a8 <CheckResponse+0x78>
        --responseList;
    273c:	c1 50       	subi	r28, 0x01	; 1
    273e:	c0 93 23 39 	sts	0x3923, r28	; 0x803923 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2742:	d0 91 0e 39 	lds	r29, 0x390E	; 0x80390e <number.3945>
    2746:	2d 2f       	mov	r18, r29
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	f9 01       	movw	r30, r18
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ec 5d       	subi	r30, 0xDC	; 220
    2752:	f6 4c       	sbci	r31, 0xC6	; 198
    2754:	80 81       	ld	r24, Z
    2756:	91 81       	ldd	r25, Z+1	; 0x01
    2758:	80 3f       	cpi	r24, 0xF0	; 240
    275a:	4f ef       	ldi	r20, 0xFF	; 255
    275c:	94 07       	cpc	r25, r20
    275e:	51 f4       	brne	.+20     	; 0x2774 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2760:	60 91 3e 3a 	lds	r22, 0x3A3E	; 0x803a3e <currObj+0x1a>
    2764:	70 91 3f 3a 	lds	r23, 0x3A3F	; 0x803a3f <currObj+0x1b>
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	80 91 30 3a 	lds	r24, 0x3A30	; 0x803a30 <currObj+0xc>
    276e:	90 91 31 3a 	lds	r25, 0x3A31	; 0x803a31 <currObj+0xd>
    2772:	0d c0       	rjmp	.+26     	; 0x278e <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2774:	d9 01       	movw	r26, r18
    2776:	aa 0f       	add	r26, r26
    2778:	bb 1f       	adc	r27, r27
    277a:	ac 55       	subi	r26, 0x5C	; 92
    277c:	b6 4c       	sbci	r27, 0xC6	; 198
    277e:	22 0f       	add	r18, r18
    2780:	33 1f       	adc	r19, r19
    2782:	f9 01       	movw	r30, r18
    2784:	ec 59       	subi	r30, 0x9C	; 156
    2786:	f6 4c       	sbci	r31, 0xC6	; 198
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	4c 91       	ld	r20, X
    278e:	70 dd       	rcall	.-1312   	; 0x2270 <PrepareSending>
        }
        ++number;
    2790:	df 5f       	subi	r29, 0xFF	; 255
    2792:	d0 93 0e 39 	sts	0x390E, r29	; 0x80390e <number.3945>

        if (responseList == 0) {
    2796:	c1 11       	cpse	r28, r1
    2798:	06 c0       	rjmp	.+12     	; 0x27a6 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    279a:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    279c:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
            number = 0;
    27a0:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <number.3945>
    27a4:	01 c0       	rjmp	.+2      	; 0x27a8 <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27a6:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27a8:	8c 2f       	mov	r24, r28
    27aa:	df 91       	pop	r29
    27ac:	cf 91       	pop	r28
    27ae:	08 95       	ret

000027b0 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27b0:	aa e0       	ldi	r26, 0x0A	; 10
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ee ed       	ldi	r30, 0xDE	; 222
    27b6:	f3 e1       	ldi	r31, 0x13	; 19
    27b8:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <__prologue_saves__+0x6>
    27bc:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    27be:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    27c2:	8f 3f       	cpi	r24, 0xFF	; 255
    27c4:	49 f4       	brne	.+18     	; 0x27d8 <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    27c6:	64 e2       	ldi	r22, 0x24	; 36
    27c8:	7a e3       	ldi	r23, 0x3A	; 58
    27ca:	80 91 e4 39 	lds	r24, 0x39E4	; 0x8039e4 <route>
    27ce:	90 91 e5 39 	lds	r25, 0x39E5	; 0x8039e5 <route+0x1>
    27d2:	07 de       	rcall	.-1010   	; 0x23e2 <PopulateObject>
        currDepth = 0;
    27d4:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <currDepth>
    }

    if (serRxDone){
    27d8:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <serRxDone>
    27dc:	88 23       	and	r24, r24
    27de:	09 f4       	brne	.+2      	; 0x27e2 <CheckInput+0x32>
    27e0:	d4 c1       	rjmp	.+936    	; 0x2b8a <CheckInput+0x3da>

        //Special input requested from user by game
        if (specialInput[0]){
    27e2:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput>
    27e6:	88 23       	and	r24, r24
    27e8:	09 f4       	brne	.+2      	; 0x27ec <CheckInput+0x3c>
    27ea:	4f c0       	rjmp	.+158    	; 0x288a <CheckInput+0xda>
            specialPassed = 0;
    27ec:	10 92 12 39 	sts	0x3912, r1	; 0x803912 <specialPassed>
            data[0] = 'a';
    27f0:	81 e6       	ldi	r24, 0x61	; 97
    27f2:	f8 01       	movw	r30, r16
    27f4:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    27f6:	63 e1       	ldi	r22, 0x13	; 19
    27f8:	79 e3       	ldi	r23, 0x39	; 57
    27fa:	8e e7       	ldi	r24, 0x7E	; 126
    27fc:	9a e3       	ldi	r25, 0x3A	; 58
    27fe:	1e dd       	rcall	.-1476   	; 0x223c <StartsWith>
    2800:	f8 2e       	mov	r15, r24
    2802:	88 23       	and	r24, r24
    2804:	21 f0       	breq	.+8      	; 0x280e <CheckInput+0x5e>
                specialPassed = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <specialPassed>
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    280e:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput>
    2812:	81 33       	cpi	r24, 0x31	; 49
    2814:	11 f0       	breq	.+4      	; 0x281a <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2816:	f1 2c       	mov	r15, r1
    2818:	ba c1       	rjmp	.+884    	; 0x2b8e <CheckInput+0x3de>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    281a:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <specialInput+0x2>
    281e:	81 11       	cpse	r24, r1
    2820:	fa cf       	rjmp	.-12     	; 0x2816 <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2822:	8e e7       	ldi	r24, 0x7E	; 126
    2824:	9a e3       	ldi	r25, 0x3A	; 58
    2826:	09 df       	rcall	.-494    	; 0x263a <CleanInput>
                specialPassed = 2;
    2828:	92 e0       	ldi	r25, 0x02	; 2
    282a:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <specialPassed>
                data[1] = 0;
    282e:	f8 01       	movw	r30, r16
    2830:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2832:	82 30       	cpi	r24, 0x02	; 2
    2834:	80 f3       	brcs	.-32     	; 0x2816 <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2836:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    283a:	81 33       	cpi	r24, 0x31	; 49
    283c:	60 f3       	brcs	.-40     	; 0x2816 <CheckInput+0x66>
    283e:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    2842:	85 33       	cpi	r24, 0x35	; 53
    2844:	40 f7       	brcc	.-48     	; 0x2816 <CheckInput+0x66>
                        serRx[1] |= 0x20;
    2846:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    284a:	80 62       	ori	r24, 0x20	; 32
    284c:	80 93 7f 3a 	sts	0x3A7F, r24	; 0x803a7f <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2850:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    2854:	81 36       	cpi	r24, 0x61	; 97
    2856:	61 f0       	breq	.+24     	; 0x2870 <CheckInput+0xc0>
    2858:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    285c:	85 36       	cpi	r24, 0x65	; 101
    285e:	41 f0       	breq	.+16     	; 0x2870 <CheckInput+0xc0>
    2860:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    2864:	86 36       	cpi	r24, 0x66	; 102
    2866:	21 f0       	breq	.+8      	; 0x2870 <CheckInput+0xc0>
    2868:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    286c:	87 37       	cpi	r24, 0x77	; 119
    286e:	99 f6       	brne	.-90     	; 0x2816 <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    2870:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <specialInput+0x1>
    2874:	8f 5e       	subi	r24, 0xEF	; 239
    2876:	f8 01       	movw	r30, r16
    2878:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    287a:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    287e:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2880:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    2884:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2886:	14 82       	std	Z+4, r1	; 0x04
    2888:	82 c1       	rjmp	.+772    	; 0x2b8e <CheckInput+0x3de>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    288a:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    288e:	83 32       	cpi	r24, 0x23	; 35
    2890:	89 f5       	brne	.+98     	; 0x28f4 <CheckInput+0x144>
    2892:	8d b3       	in	r24, 0x1d	; 29
    2894:	86 30       	cpi	r24, 0x06	; 6
    2896:	71 f5       	brne	.+92     	; 0x28f4 <CheckInput+0x144>
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    289e:	fc 01       	movw	r30, r24
    28a0:	e2 58       	subi	r30, 0x82	; 130
    28a2:	f5 4c       	sbci	r31, 0xC5	; 197
    28a4:	20 81       	ld	r18, Z
    28a6:	20 53       	subi	r18, 0x30	; 48
    28a8:	20 83       	st	Z, r18
                    bitNr *= 10;
    28aa:	11 0f       	add	r17, r17
    28ac:	21 2f       	mov	r18, r17
    28ae:	22 0f       	add	r18, r18
    28b0:	22 0f       	add	r18, r18
    28b2:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    28b4:	20 91 7f 3a 	lds	r18, 0x3A7F	; 0x803a7f <serRx+0x1>
    28b8:	23 30       	cpi	r18, 0x03	; 3
    28ba:	48 f4       	brcc	.+18     	; 0x28ce <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    28bc:	20 81       	ld	r18, Z
    28be:	2a 30       	cpi	r18, 0x0A	; 10
    28c0:	b8 f4       	brcc	.+46     	; 0x28f0 <CheckInput+0x140>
                        bitNr += serRx[x];
    28c2:	20 81       	ld	r18, Z
    28c4:	12 0f       	add	r17, r18
    28c6:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    28c8:	84 30       	cpi	r24, 0x04	; 4
    28ca:	91 05       	cpc	r25, r1
    28cc:	41 f7       	brne	.-48     	; 0x289e <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    28ce:	81 2f       	mov	r24, r17
    28d0:	8f 77       	andi	r24, 0x7F	; 127
    28d2:	71 f0       	breq	.+28     	; 0x28f0 <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    28d4:	80 91 82 3a 	lds	r24, 0x3A82	; 0x803a82 <serRx+0x4>
    28d8:	60 91 83 3a 	lds	r22, 0x3A83	; 0x803a83 <serRx+0x5>
    28dc:	70 e0       	ldi	r23, 0x00	; 0
    28de:	78 2b       	or	r23, r24
    28e0:	81 2f       	mov	r24, r17
    28e2:	80 95       	com	r24
    28e4:	5b dc       	rcall	.-1866   	; 0x219c <Cheat>
    28e6:	88 23       	and	r24, r24
    28e8:	19 f0       	breq	.+6      	; 0x28f0 <CheckInput+0x140>
    28ea:	81 2f       	mov	r24, r17
    28ec:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	48 c1       	rjmp	.+656    	; 0x2b84 <CheckInput+0x3d4>
    28f4:	d8 01       	movw	r26, r16
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 58       	subi	r30, 0x82	; 130
    28fe:	f5 4c       	sbci	r31, 0xC5	; 197
    2900:	20 81       	ld	r18, Z
    2902:	21 34       	cpi	r18, 0x41	; 65
    2904:	18 f0       	brcs	.+6      	; 0x290c <CheckInput+0x15c>
    2906:	20 81       	ld	r18, Z
    2908:	2b 35       	cpi	r18, 0x5B	; 91
    290a:	10 f0       	brcs	.+4      	; 0x2910 <CheckInput+0x160>
    290c:	20 81       	ld	r18, Z
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <CheckInput+0x164>
    2910:	20 81       	ld	r18, Z
    2912:	20 62       	ori	r18, 0x20	; 32
    2914:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2916:	20 81       	ld	r18, Z
    2918:	21 11       	cpse	r18, r1
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <CheckInput+0x176>
                    data[x] = 0;
    291c:	f8 01       	movw	r30, r16
    291e:	e8 0f       	add	r30, r24
    2920:	f1 1d       	adc	r31, r1
    2922:	10 82       	st	Z, r1
                    break;
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <CheckInput+0x180>
    2926:	01 96       	adiw	r24, 0x01	; 1
    2928:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    292a:	81 34       	cpi	r24, 0x41	; 65
    292c:	91 05       	cpc	r25, r1
    292e:	29 f7       	brne	.-54     	; 0x28fa <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2930:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
                data[0] = 0;
    2934:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2936:	81 11       	cpse	r24, r1
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <CheckInput+0x194>
                data[0] = 0;
    293a:	10 82       	st	Z, r1
                RXCNT = 0;
    293c:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    293e:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
    2942:	23 c1       	rjmp	.+582    	; 0x2b8a <CheckInput+0x3da>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2944:	80 81       	ld	r24, Z
    2946:	8f 33       	cpi	r24, 0x3F	; 63
    2948:	11 f0       	breq	.+4      	; 0x294e <CheckInput+0x19e>
    294a:	88 36       	cpi	r24, 0x68	; 104
    294c:	49 f4       	brne	.+18     	; 0x2960 <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    294e:	83 e9       	ldi	r24, 0x93	; 147
    2950:	9b e7       	ldi	r25, 0x7B	; 123
    2952:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    2956:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    295a:	8d e6       	ldi	r24, 0x6D	; 109
    295c:	94 e0       	ldi	r25, 0x04	; 4
    295e:	0a c0       	rjmp	.+20     	; 0x2974 <CheckInput+0x1c4>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2960:	81 36       	cpi	r24, 0x61	; 97
    2962:	a1 f4       	brne	.+40     	; 0x298c <CheckInput+0x1dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2964:	8e e6       	ldi	r24, 0x6E	; 110
    2966:	9a e7       	ldi	r25, 0x7A	; 122
    2968:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    296c:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2970:	85 e2       	ldi	r24, 0x25	; 37
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2978:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    2984:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	fc c0       	rjmp	.+504    	; 0x2b84 <CheckInput+0x3d4>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    298c:	87 37       	cpi	r24, 0x77	; 119
    298e:	09 f0       	breq	.+2      	; 0x2992 <CheckInput+0x1e2>
    2990:	41 c0       	rjmp	.+130    	; 0x2a14 <CheckInput+0x264>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2992:	8d e8       	ldi	r24, 0x8D	; 141
    2994:	96 e7       	ldi	r25, 0x76	; 118
    2996:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    299a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    299e:	82 e1       	ldi	r24, 0x12	; 18
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    29a6:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    29aa:	21 e0       	ldi	r18, 0x01	; 1
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	20 93 a6 39 	sts	0x39A6, r18	; 0x8039a6 <reactStr+0x82>
    29b2:	30 93 a7 39 	sts	0x39A7, r19	; 0x8039a7 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    29b6:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	fc 01       	movw	r30, r24
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	ee 56       	subi	r30, 0x6E	; 110
    29c4:	f0 44       	sbci	r31, 0x40	; 64
    29c6:	40 81       	ld	r20, Z
    29c8:	51 81       	ldd	r21, Z+1	; 0x01
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	fc 01       	movw	r30, r24
    29d0:	e6 57       	subi	r30, 0x76	; 118
    29d2:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	80 93 28 39 	sts	0x3928, r24	; 0x803928 <reactStr+0x4>
    29dc:	90 93 29 39 	sts	0x3929, r25	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    29e0:	40 93 68 39 	sts	0x3968, r20	; 0x803968 <reactStr+0x44>
    29e4:	50 93 69 39 	sts	0x3969, r21	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    29e8:	20 93 a8 39 	sts	0x39A8, r18	; 0x8039a8 <reactStr+0x84>
    29ec:	30 93 a9 39 	sts	0x39A9, r19	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29f0:	8f e5       	ldi	r24, 0x5F	; 95
    29f2:	96 e7       	ldi	r25, 0x76	; 118
    29f4:	80 93 2a 39 	sts	0x392A, r24	; 0x80392a <reactStr+0x6>
    29f8:	90 93 2b 39 	sts	0x392B, r25	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    29fc:	8a e1       	ldi	r24, 0x1A	; 26
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	80 93 6a 39 	sts	0x396A, r24	; 0x80396a <reactStr+0x46>
    2a04:	90 93 6b 39 	sts	0x396B, r25	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    2a08:	20 93 aa 39 	sts	0x39AA, r18	; 0x8039aa <reactStr+0x86>
    2a0c:	30 93 ab 39 	sts	0x39AB, r19	; 0x8039ab <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a10:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2a12:	b8 c0       	rjmp	.+368    	; 0x2b84 <CheckInput+0x3d4>
    2a14:	68 e6       	ldi	r22, 0x68	; 104
    2a16:	7f eb       	ldi	r23, 0xBF	; 191
    2a18:	c8 01       	movw	r24, r16
    2a1a:	10 dc       	rcall	.-2016   	; 0x223c <StartsWith>
    2a1c:	88 23       	and	r24, r24
    2a1e:	19 f1       	breq	.+70     	; 0x2a66 <CheckInput+0x2b6>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a20:	8e ee       	ldi	r24, 0xEE	; 238
    2a22:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    2a26:	8f ee       	ldi	r24, 0xEF	; 239
    2a28:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    2a2c:	80 ef       	ldi	r24, 0xF0	; 240
    2a2e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    2a32:	81 ef       	ldi	r24, 0xF1	; 241
    2a34:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
                }
                SaveGameState();
    2a38:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a3c:	89 e0       	ldi	r24, 0x09	; 9
    2a3e:	eb e7       	ldi	r30, 0x7B	; 123
    2a40:	ff eb       	ldi	r31, 0xBF	; 191
    2a42:	de 01       	movw	r26, r28
    2a44:	11 96       	adiw	r26, 0x01	; 1
    2a46:	01 90       	ld	r0, Z+
    2a48:	0d 92       	st	X+, r0
    2a4a:	8a 95       	dec	r24
    2a4c:	e1 f7       	brne	.-8      	; 0x2a46 <CheckInput+0x296>
                SerSpeed(60);
    2a4e:	8c e3       	ldi	r24, 0x3C	; 60
    2a50:	0e 94 96 08 	call	0x112c	; 0x112c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a54:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a58:	88 23       	and	r24, r24
    2a5a:	e1 f3       	breq	.-8      	; 0x2a54 <CheckInput+0x2a4>
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	0e 94 85 08 	call	0x110a	; 0x110a <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2a64:	f7 cf       	rjmp	.-18     	; 0x2a54 <CheckInput+0x2a4>
    2a66:	6e e6       	ldi	r22, 0x6E	; 110
    2a68:	7f eb       	ldi	r23, 0xBF	; 191
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	e7 db       	rcall	.-2098   	; 0x223c <StartsWith>
    2a6e:	88 23       	and	r24, r24
    2a70:	81 f1       	breq	.+96     	; 0x2ad2 <CheckInput+0x322>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2a72:	8f ef       	ldi	r24, 0xFF	; 255
    2a74:	8a 87       	std	Y+10, r24	; 0x0a
    2a76:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2a78:	41 e0       	ldi	r20, 0x01	; 1
    2a7a:	be 01       	movw	r22, r28
    2a7c:	66 5f       	subi	r22, 0xF6	; 246
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a80:	81 2f       	mov	r24, r17
    2a82:	0e 94 21 08 	call	0x1042	; 0x1042 <EEWrite>
    2a86:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2a88:	10 32       	cpi	r17, 0x20	; 32
    2a8a:	b1 f7       	brne	.-20     	; 0x2a78 <CheckInput+0x2c8>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a8c:	8e ee       	ldi	r24, 0xEE	; 238
    2a8e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    2a92:	8f ee       	ldi	r24, 0xEF	; 239
    2a94:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    2a98:	80 ef       	ldi	r24, 0xF0	; 240
    2a9a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    2a9e:	81 ef       	ldi	r24, 0xF1	; 241
    2aa0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
                }
                
                SaveGameState();
    2aa4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2aa8:	88 e0       	ldi	r24, 0x08	; 8
    2aaa:	e4 e8       	ldi	r30, 0x84	; 132
    2aac:	ff eb       	ldi	r31, 0xBF	; 191
    2aae:	de 01       	movw	r26, r28
    2ab0:	11 96       	adiw	r26, 0x01	; 1
    2ab2:	01 90       	ld	r0, Z+
    2ab4:	0d 92       	st	X+, r0
    2ab6:	8a 95       	dec	r24
    2ab8:	e1 f7       	brne	.-8      	; 0x2ab2 <CheckInput+0x302>
                SerSpeed(60);
    2aba:	8c e3       	ldi	r24, 0x3C	; 60
    2abc:	0e 94 96 08 	call	0x112c	; 0x112c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2ac0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2ac4:	88 23       	and	r24, r24
    2ac6:	e1 f3       	breq	.-8      	; 0x2ac0 <CheckInput+0x310>
    2ac8:	ce 01       	movw	r24, r28
    2aca:	01 96       	adiw	r24, 0x01	; 1
    2acc:	0e 94 85 08 	call	0x110a	; 0x110a <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2ad0:	f7 cf       	rjmp	.-18     	; 0x2ac0 <CheckInput+0x310>
    2ad2:	65 e7       	ldi	r22, 0x75	; 117
    2ad4:	7f eb       	ldi	r23, 0xBF	; 191
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	b1 db       	rcall	.-2206   	; 0x223c <StartsWith>
    2ada:	88 23       	and	r24, r24
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <CheckInput+0x330>
    2ade:	9b ce       	rjmp	.-714    	; 0x2816 <CheckInput+0x66>
    2ae0:	84 e2       	ldi	r24, 0x24	; 36
    2ae2:	c8 2e       	mov	r12, r24
    2ae4:	89 e3       	ldi	r24, 0x39	; 57
    2ae6:	d8 2e       	mov	r13, r24
    2ae8:	94 e6       	ldi	r25, 0x64	; 100
    2aea:	e9 2e       	mov	r14, r25
    2aec:	99 e3       	ldi	r25, 0x39	; 57
    2aee:	f9 2e       	mov	r15, r25
    2af0:	04 ea       	ldi	r16, 0xA4	; 164
    2af2:	19 e3       	ldi	r17, 0x39	; 57
    2af4:	28 e1       	ldi	r18, 0x18	; 24
    2af6:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2af8:	aa 24       	eor	r10, r10
    2afa:	a3 94       	inc	r10
    2afc:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2afe:	47 e5       	ldi	r20, 0x57	; 87
    2b00:	84 2e       	mov	r8, r20
    2b02:	4a e7       	ldi	r20, 0x7A	; 122
    2b04:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2b06:	52 e0       	ldi	r21, 0x02	; 2
    2b08:	65 2e       	mov	r6, r21
    2b0a:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2b0c:	41 e0       	ldi	r20, 0x01	; 1
    2b0e:	be 01       	movw	r22, r28
    2b10:	6f 5f       	subi	r22, 0xFF	; 255
    2b12:	7f 4f       	sbci	r23, 0xFF	; 255
    2b14:	85 2d       	mov	r24, r5
    2b16:	0e 94 11 08 	call	0x1022	; 0x1022 <EERead>
                    bit = 0xff-bit;
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	80 95       	com	r24
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b20:	28 2f       	mov	r18, r24
    2b22:	22 95       	swap	r18
    2b24:	2f 70       	andi	r18, 0x0F	; 15
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	23 57       	subi	r18, 0x73	; 115
    2b2a:	3b 48       	sbci	r19, 0x8B	; 139
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	20 83       	st	Z, r18
    2b30:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b32:	f7 01       	movw	r30, r14
    2b34:	a0 82       	st	Z, r10
    2b36:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b38:	f8 01       	movw	r30, r16
    2b3a:	a0 82       	st	Z, r10
    2b3c:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3e:	8f 70       	andi	r24, 0x0F	; 15
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	83 57       	subi	r24, 0x73	; 115
    2b44:	9b 48       	sbci	r25, 0x8B	; 139
    2b46:	f6 01       	movw	r30, r12
    2b48:	82 83       	std	Z+2, r24	; 0x02
    2b4a:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2b4c:	f7 01       	movw	r30, r14
    2b4e:	a2 82       	std	Z+2, r10	; 0x02
    2b50:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2b52:	f8 01       	movw	r30, r16
    2b54:	a2 82       	std	Z+2, r10	; 0x02
    2b56:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b58:	f6 01       	movw	r30, r12
    2b5a:	84 82       	std	Z+4, r8	; 0x04
    2b5c:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2b5e:	f7 01       	movw	r30, r14
    2b60:	64 82       	std	Z+4, r6	; 0x04
    2b62:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2b64:	f8 01       	movw	r30, r16
    2b66:	a4 82       	std	Z+4, r10	; 0x04
    2b68:	b5 82       	std	Z+5, r11	; 0x05
    2b6a:	53 94       	inc	r5
    2b6c:	f6 e0       	ldi	r31, 0x06	; 6
    2b6e:	cf 0e       	add	r12, r31
    2b70:	d1 1c       	adc	r13, r1
    2b72:	86 e0       	ldi	r24, 0x06	; 6
    2b74:	e8 0e       	add	r14, r24
    2b76:	f1 1c       	adc	r15, r1
    2b78:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	e0 e2       	ldi	r30, 0x20	; 32
    2b7e:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2b80:	c5 cf       	rjmp	.-118    	; 0x2b0c <CheckInput+0x35c>
    2b82:	88 e1       	ldi	r24, 0x18	; 24
    2b84:	b2 db       	rcall	.-2204   	; 0x22ea <SetStandardResponse>
    2b86:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2b8a:	ff 24       	eor	r15, r15
    2b8c:	f3 94       	inc	r15
}
    2b8e:	8f 2d       	mov	r24, r15
    2b90:	2a 96       	adiw	r28, 0x0a	; 10
    2b92:	ef e0       	ldi	r30, 0x0F	; 15
    2b94:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x6>

00002b98 <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2b98:	ab e2       	ldi	r26, 0x2B	; 43
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    2b9e:	f5 e1       	ldi	r31, 0x15	; 21
    2ba0:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2ba4:	99 24       	eor	r9, r9
    2ba6:	93 94       	inc	r9
    2ba8:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	fc 01       	movw	r30, r24
    2bae:	ee 0f       	add	r30, r30
    2bb0:	ff 1f       	adc	r31, r31
    2bb2:	ec 5d       	subi	r30, 0xDC	; 220
    2bb4:	f6 4c       	sbci	r31, 0xC6	; 198
    2bb6:	2c ec       	ldi	r18, 0xCC	; 204
    2bb8:	37 e7       	ldi	r19, 0x77	; 119
    2bba:	20 83       	st	Z, r18
    2bbc:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	ee 0f       	add	r30, r30
    2bc2:	ff 1f       	adc	r31, r31
    2bc4:	ec 59       	subi	r30, 0x9C	; 156
    2bc6:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc8:	26 e1       	ldi	r18, 0x16	; 22
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	20 83       	st	Z, r18
    2bce:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	ec 55       	subi	r30, 0x5C	; 92
    2bd8:	f6 4c       	sbci	r31, 0xC6	; 198
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	80 83       	st	Z, r24
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	04 e4       	ldi	r16, 0x44	; 68
    2be4:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2be6:	37 e5       	ldi	r19, 0x57	; 87
    2be8:	e3 2e       	mov	r14, r19
    2bea:	3a e7       	ldi	r19, 0x7A	; 122
    2bec:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2bee:	42 e0       	ldi	r20, 0x02	; 2
    2bf0:	c4 2e       	mov	r12, r20
    2bf2:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2bf4:	aa 24       	eor	r10, r10
    2bf6:	a3 94       	inc	r10
    2bf8:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	81 91       	ld	r24, Z+
    2bfe:	91 91       	ld	r25, Z+
    2c00:	8f 01       	movw	r16, r30
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	c9 f1       	breq	.+114    	; 0x2c78 <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2c06:	be 01       	movw	r22, r28
    2c08:	6f 5f       	subi	r22, 0xFF	; 255
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0c:	ea db       	rcall	.-2092   	; 0x23e2 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c0e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2c10:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c12:	89 2d       	mov	r24, r9
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	fc 01       	movw	r30, r24
    2c18:	ee 0f       	add	r30, r30
    2c1a:	ff 1f       	adc	r31, r31
    2c1c:	ec 5d       	subi	r30, 0xDC	; 220
    2c1e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c20:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c22:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c24:	40 83       	st	Z, r20
    2c26:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c28:	fc 01       	movw	r30, r24
    2c2a:	ee 0f       	add	r30, r30
    2c2c:	ff 1f       	adc	r31, r31
    2c2e:	ec 59       	subi	r30, 0x9C	; 156
    2c30:	f6 4c       	sbci	r31, 0xC6	; 198
    2c32:	20 83       	st	Z, r18
    2c34:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	ec 55       	subi	r30, 0x5C	; 92
    2c3e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c40:	10 82       	st	Z, r1
    2c42:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	89 0d       	add	r24, r9
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	93 94       	inc	r9
    2c4c:	93 94       	inc	r9
    2c4e:	fc 01       	movw	r30, r24
    2c50:	ee 0f       	add	r30, r30
    2c52:	ff 1f       	adc	r31, r31
    2c54:	ec 5d       	subi	r30, 0xDC	; 220
    2c56:	f6 4c       	sbci	r31, 0xC6	; 198
    2c58:	e0 82       	st	Z, r14
    2c5a:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	ec 59       	subi	r30, 0x9C	; 156
    2c64:	f6 4c       	sbci	r31, 0xC6	; 198
    2c66:	c0 82       	st	Z, r12
    2c68:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	fc 01       	movw	r30, r24
    2c70:	ec 55       	subi	r30, 0x5C	; 92
    2c72:	f6 4c       	sbci	r31, 0xC6	; 198
    2c74:	a0 82       	st	Z, r10
    2c76:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2c78:	f8 e3       	ldi	r31, 0x38	; 56
    2c7a:	08 34       	cpi	r16, 0x48	; 72
    2c7c:	1f 07       	cpc	r17, r31
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <ShowInventory+0xea>
    2c80:	bc cf       	rjmp	.-136    	; 0x2bfa <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	89 0d       	add	r24, r9
    2c86:	ab 96       	adiw	r28, 0x2b	; 43
    2c88:	eb e0       	ldi	r30, 0x0B	; 11
    2c8a:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__epilogue_restores__+0xe>

00002c8e <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2c8e:	a8 e0       	ldi	r26, 0x08	; 8
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	ed e4       	ldi	r30, 0x4D	; 77
    2c94:	f6 e1       	ldi	r31, 0x16	; 22
    2c96:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__prologue_saves__+0x8>
    2c9a:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2c9c:	ce dc       	rcall	.-1636   	; 0x263a <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2c9e:	c3 01       	movw	r24, r6
    2ca0:	cc dc       	rcall	.-1640   	; 0x263a <CleanInput>
    2ca2:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ca4:	29 e5       	ldi	r18, 0x59	; 89
    2ca6:	3a e7       	ldi	r19, 0x7A	; 122
    2ca8:	20 93 24 39 	sts	0x3924, r18	; 0x803924 <reactStr>
    2cac:	30 93 25 39 	sts	0x3925, r19	; 0x803925 <reactStr+0x1>
    reactStr[1][number]=length;
    2cb0:	84 e0       	ldi	r24, 0x04	; 4
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	80 93 64 39 	sts	0x3964, r24	; 0x803964 <reactStr+0x40>
    2cb8:	90 93 65 39 	sts	0x3965, r25	; 0x803965 <reactStr+0x41>
    reactStr[2][number]=type;
    2cbc:	01 e0       	ldi	r16, 0x01	; 1
    2cbe:	10 e0       	ldi	r17, 0x00	; 0
    2cc0:	00 93 a4 39 	sts	0x39A4, r16	; 0x8039a4 <reactStr+0x80>
    2cc4:	10 93 a5 39 	sts	0x39A5, r17	; 0x8039a5 <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2cc8:	ff 20       	and	r15, r15
    2cca:	09 f4       	brne	.+2      	; 0x2cce <ProcessInput+0x40>
    2ccc:	54 c7       	rjmp	.+3752   	; 0x3b76 <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2cce:	d3 01       	movw	r26, r6
    2cd0:	8c 91       	ld	r24, X
    2cd2:	88 37       	cpi	r24, 0x78	; 120
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <ProcessInput+0x4a>
    2cd6:	45 c0       	rjmp	.+138    	; 0x2d62 <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2cd8:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2cdc:	e8 2f       	mov	r30, r24
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	ec 51       	subi	r30, 0x1C	; 28
    2ce6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ce8:	20 81       	ld	r18, Z
    2cea:	31 81       	ldd	r19, Z+1	; 0x01
    2cec:	23 2b       	or	r18, r19
    2cee:	11 f0       	breq	.+4      	; 0x2cf4 <ProcessInput+0x66>
    2cf0:	81 11       	cpse	r24, r1
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cf4:	84 e4       	ldi	r24, 0x44	; 68
    2cf6:	96 e7       	ldi	r25, 0x76	; 118
    2cf8:	13 c5       	rjmp	.+2598   	; 0x3720 <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2cfa:	80 91 2a 3a 	lds	r24, 0x3A2A	; 0x803a2a <currObj+0x6>
    2cfe:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
    2d02:	88 23       	and	r24, r24
    2d04:	b9 f0       	breq	.+46     	; 0x2d34 <ProcessInput+0xa6>
                --currDepth;
    2d06:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2d0a:	e1 50       	subi	r30, 0x01	; 1
    2d0c:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	ee 0f       	add	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	ec 51       	subi	r30, 0x1C	; 28
    2d18:	f6 4c       	sbci	r31, 0xC6	; 198
    2d1a:	64 e2       	ldi	r22, 0x24	; 36
    2d1c:	7a e3       	ldi	r23, 0x3A	; 58
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	5f db       	rcall	.-2370   	; 0x23e2 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2d24:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <currObj+0x4>
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2d2e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2d32:	2a c2       	rjmp	.+1108   	; 0x3188 <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2d34:	80 91 46 3a 	lds	r24, 0x3A46	; 0x803a46 <currObj+0x22>
    2d38:	90 91 47 3a 	lds	r25, 0x3A47	; 0x803a47 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d3c:	20 91 38 3a 	lds	r18, 0x3A38	; 0x803a38 <currObj+0x14>
    2d40:	30 91 39 3a 	lds	r19, 0x3A39	; 0x803a39 <currObj+0x15>
    2d44:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    2d48:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2d4c:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2d50:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2d54:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2d58:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2d5c:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <currObj+0x28>
    2d60:	a9 c5       	rjmp	.+2898   	; 0x38b4 <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2d62:	85 36       	cpi	r24, 0x65	; 101
    2d64:	19 f0       	breq	.+6      	; 0x2d6c <ProcessInput+0xde>
    2d66:	8f 36       	cpi	r24, 0x6F	; 111
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <ProcessInput+0xde>
    2d6a:	de c0       	rjmp	.+444    	; 0x2f28 <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2d6c:	b2 e0       	ldi	r27, 0x02	; 2
    2d6e:	fb 12       	cpse	r15, r27
    2d70:	c1 cf       	rjmp	.-126    	; 0x2cf4 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2d72:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    2d76:	10 e0       	ldi	r17, 0x00	; 0
    2d78:	f8 01       	movw	r30, r16
    2d7a:	ee 0f       	add	r30, r30
    2d7c:	ff 1f       	adc	r31, r31
    2d7e:	ec 51       	subi	r30, 0x1C	; 28
    2d80:	f6 4c       	sbci	r31, 0xC6	; 198
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	d3 01       	movw	r26, r6
    2d88:	11 96       	adiw	r26, 0x01	; 1
    2d8a:	6c 91       	ld	r22, X
    2d8c:	80 81       	ld	r24, Z
    2d8e:	91 81       	ldd	r25, Z+1	; 0x01
    2d90:	e8 db       	rcall	.-2096   	; 0x2562 <FindChild>
    2d92:	00 0f       	add	r16, r16
    2d94:	11 1f       	adc	r17, r17
    2d96:	f8 01       	movw	r30, r16
    2d98:	ea 51       	subi	r30, 0x1A	; 26
    2d9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d9c:	80 83       	st	Z, r24
    2d9e:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2da0:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    2da4:	29 2f       	mov	r18, r25
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	f9 01       	movw	r30, r18
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	ea 51       	subi	r30, 0x1A	; 26
    2db0:	f6 4c       	sbci	r31, 0xC6	; 198
    2db2:	40 81       	ld	r20, Z
    2db4:	51 81       	ldd	r21, Z+1	; 0x01
    2db6:	41 15       	cp	r20, r1
    2db8:	51 05       	cpc	r21, r1
    2dba:	21 f0       	breq	.+8      	; 0x2dc4 <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2dbc:	63 ee       	ldi	r22, 0xE3	; 227
    2dbe:	78 e3       	ldi	r23, 0x38	; 56
    2dc0:	ca 01       	movw	r24, r20
    2dc2:	1c c0       	rjmp	.+56     	; 0x2dfc <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2dc4:	99 23       	and	r25, r25
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <ProcessInput+0x13c>
    2dc8:	dc c6       	rjmp	.+3512   	; 0x3b82 <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2dca:	22 0f       	add	r18, r18
    2dcc:	33 1f       	adc	r19, r19
    2dce:	f9 01       	movw	r30, r18
    2dd0:	ee 51       	subi	r30, 0x1E	; 30
    2dd2:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd4:	d3 01       	movw	r26, r6
    2dd6:	11 96       	adiw	r26, 0x01	; 1
    2dd8:	6c 91       	ld	r22, X
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	7a db       	rcall	.-2316   	; 0x24d4 <CheckLetter>
    2de0:	88 23       	and	r24, r24
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <ProcessInput+0x158>
    2de4:	ce c6       	rjmp	.+3484   	; 0x3b82 <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2de6:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	ee 0f       	add	r30, r30
    2dee:	ff 1f       	adc	r31, r31
    2df0:	ee 51       	subi	r30, 0x1E	; 30
    2df2:	f6 4c       	sbci	r31, 0xC6	; 198
    2df4:	63 ee       	ldi	r22, 0xE3	; 227
    2df6:	78 e3       	ldi	r23, 0x38	; 56
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	f2 da       	rcall	.-2588   	; 0x23e2 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2dfe:	d3 01       	movw	r26, r6
    2e00:	8c 91       	ld	r24, X
    2e02:	85 36       	cpi	r24, 0x65	; 101
    2e04:	c1 f4       	brne	.+48     	; 0x2e36 <ProcessInput+0x1a8>
    2e06:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    2e0a:	80 fd       	sbrc	r24, 0
    2e0c:	1d c0       	rjmp	.+58     	; 0x2e48 <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e0e:	8d e9       	ldi	r24, 0x9D	; 157
    2e10:	99 e7       	ldi	r25, 0x79	; 121
    2e12:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    2e16:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2e1a:	8e e1       	ldi	r24, 0x1E	; 30
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2e22:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    2e2e:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2e32:	12 e0       	ldi	r17, 0x02	; 2
    2e34:	97 c6       	rjmp	.+3374   	; 0x3b64 <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2e36:	8f 36       	cpi	r24, 0x6F	; 111
    2e38:	39 f4       	brne	.+14     	; 0x2e48 <ProcessInput+0x1ba>
    2e3a:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    2e3e:	81 fd       	sbrc	r24, 1
    2e40:	03 c0       	rjmp	.+6      	; 0x2e48 <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e42:	82 e8       	ldi	r24, 0x82	; 130
    2e44:	99 e7       	ldi	r25, 0x79	; 121
    2e46:	6c c4       	rjmp	.+2264   	; 0x3720 <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2e48:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj1.3993+0x6>
    2e4c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
    2e50:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2e54:	88 23       	and	r24, r24
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <ProcessInput+0x1cc>
    2e58:	49 c0       	rjmp	.+146    	; 0x2eec <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2e5a:	ae 2f       	mov	r26, r30
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	aa 0f       	add	r26, r26
    2e60:	bb 1f       	adc	r27, r27
    2e62:	aa 51       	subi	r26, 0x1A	; 26
    2e64:	b6 4c       	sbci	r27, 0xC6	; 198
    2e66:	8d 91       	ld	r24, X+
    2e68:	9c 91       	ld	r25, X
    2e6a:	89 2b       	or	r24, r25
    2e6c:	11 f0       	breq	.+4      	; 0x2e72 <ProcessInput+0x1e4>
    2e6e:	ef 5f       	subi	r30, 0xFF	; 255
    2e70:	01 c0       	rjmp	.+2      	; 0x2e74 <ProcessInput+0x1e6>
    2e72:	e1 50       	subi	r30, 0x01	; 1
    2e74:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2e78:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	ee 0f       	add	r30, r30
    2e80:	ff 1f       	adc	r31, r31
    2e82:	ec 51       	subi	r30, 0x1C	; 28
    2e84:	f6 4c       	sbci	r31, 0xC6	; 198
    2e86:	64 e2       	ldi	r22, 0x24	; 36
    2e88:	7a e3       	ldi	r23, 0x3A	; 58
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	a9 da       	rcall	.-2734   	; 0x23e2 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e90:	80 91 40 3a 	lds	r24, 0x3A40	; 0x803a40 <currObj+0x1c>
    2e94:	90 91 41 3a 	lds	r25, 0x3A41	; 0x803a41 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e98:	20 91 32 3a 	lds	r18, 0x3A32	; 0x803a32 <currObj+0xe>
    2e9c:	30 91 33 3a 	lds	r19, 0x3A33	; 0x803a33 <currObj+0xf>
    2ea0:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    2ea4:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2ea8:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2eac:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2eb0:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2eb4:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eb8:	89 e5       	ldi	r24, 0x59	; 89
    2eba:	9a e7       	ldi	r25, 0x7A	; 122
    2ebc:	80 93 28 39 	sts	0x3928, r24	; 0x803928 <reactStr+0x4>
    2ec0:	90 93 29 39 	sts	0x3929, r25	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    2ecc:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	80 93 a8 39 	sts	0x39A8, r24	; 0x8039a8 <reactStr+0x84>
    2ed8:	90 93 a9 39 	sts	0x39A9, r25	; 0x8039a9 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2edc:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <currObj+0x4>
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2ee6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2eea:	07 c4       	rjmp	.+2062   	; 0x36fa <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	ea 51       	subi	r30, 0x1A	; 26
    2ef4:	f6 4c       	sbci	r31, 0xC6	; 198
    2ef6:	10 82       	st	Z, r1
    2ef8:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2efa:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3993+0x22>
    2efe:	90 91 06 39 	lds	r25, 0x3906	; 0x803906 <actObj1.3993+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f02:	20 91 f7 38 	lds	r18, 0x38F7	; 0x8038f7 <actObj1.3993+0x14>
    2f06:	30 91 f8 38 	lds	r19, 0x38F8	; 0x8038f8 <actObj1.3993+0x15>
    2f0a:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    2f0e:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2f12:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2f16:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2f1a:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2f1e:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2f22:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <actObj1.3993+0x28>
    2f26:	c6 c4       	rjmp	.+2444   	; 0x38b4 <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2f28:	8c 36       	cpi	r24, 0x6C	; 108
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <ProcessInput+0x2a0>
    2f2c:	59 c1       	rjmp	.+690    	; 0x31e0 <ProcessInput+0x552>
    2f2e:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
            if (inputLen == 1) {
    2f32:	b1 e0       	ldi	r27, 0x01	; 1
    2f34:	fb 12       	cpse	r15, r27
    2f36:	f1 c0       	rjmp	.+482    	; 0x311a <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f38:	80 91 40 3a 	lds	r24, 0x3A40	; 0x803a40 <currObj+0x1c>
    2f3c:	90 91 41 3a 	lds	r25, 0x3A41	; 0x803a41 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f40:	40 91 32 3a 	lds	r20, 0x3A32	; 0x803a32 <currObj+0xe>
    2f44:	50 91 33 3a 	lds	r21, 0x3A33	; 0x803a33 <currObj+0xf>
    2f48:	40 93 26 39 	sts	0x3926, r20	; 0x803926 <reactStr+0x2>
    2f4c:	50 93 27 39 	sts	0x3927, r21	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2f50:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2f54:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2f58:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2f5c:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f60:	20 93 28 39 	sts	0x3928, r18	; 0x803928 <reactStr+0x4>
    2f64:	30 93 29 39 	sts	0x3929, r19	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    2f70:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    2f74:	00 93 a8 39 	sts	0x39A8, r16	; 0x8039a8 <reactStr+0x84>
    2f78:	10 93 a9 39 	sts	0x39A9, r17	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f7c:	8b ee       	ldi	r24, 0xEB	; 235
    2f7e:	99 e7       	ldi	r25, 0x79	; 121
    2f80:	80 93 2a 39 	sts	0x392A, r24	; 0x80392a <reactStr+0x6>
    2f84:	90 93 2b 39 	sts	0x392B, r25	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    2f88:	85 e1       	ldi	r24, 0x15	; 21
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	80 93 6a 39 	sts	0x396A, r24	; 0x80396a <reactStr+0x46>
    2f90:	90 93 6b 39 	sts	0x396B, r25	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    2f94:	00 93 aa 39 	sts	0x39AA, r16	; 0x8039aa <reactStr+0x86>
    2f98:	10 93 ab 39 	sts	0x39AB, r17	; 0x8039ab <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	ee 0f       	add	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	ea 51       	subi	r30, 0x1A	; 26
    2fa4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fa6:	10 82       	st	Z, r1
    2fa8:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2faa:	14 e0       	ldi	r17, 0x04	; 4
    2fac:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fae:	07 e5       	ldi	r16, 0x57	; 87
    2fb0:	e0 2e       	mov	r14, r16
    2fb2:	0a e7       	ldi	r16, 0x7A	; 122
    2fb4:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	c8 2e       	mov	r12, r24
    2fba:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2fbc:	aa 24       	eor	r10, r10
    2fbe:	a3 94       	inc	r10
    2fc0:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2fc2:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	8c 01       	movw	r16, r24
    2fca:	00 0f       	add	r16, r16
    2fcc:	11 1f       	adc	r17, r17
    2fce:	0a 51       	subi	r16, 0x1A	; 26
    2fd0:	16 4c       	sbci	r17, 0xC6	; 198
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	40 81       	ld	r20, Z
    2fd6:	51 81       	ldd	r21, Z+1	; 0x01
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	fc 01       	movw	r30, r24
    2fde:	ec 51       	subi	r30, 0x1C	; 28
    2fe0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	91 81       	ldd	r25, Z+1	; 0x01
    2fe8:	bc da       	rcall	.-2696   	; 0x2562 <FindChild>
    2fea:	d8 01       	movw	r26, r16
    2fec:	8d 93       	st	X+, r24
    2fee:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2ff0:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	ea 51       	subi	r30, 0x1A	; 26
    2ffc:	f6 4c       	sbci	r31, 0xC6	; 198
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	09 f4       	brne	.+2      	; 0x3008 <ProcessInput+0x37a>
    3006:	4a c0       	rjmp	.+148    	; 0x309c <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    3008:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    300c:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    3010:	82 17       	cp	r24, r18
    3012:	93 07       	cpc	r25, r19
    3014:	09 f4       	brne	.+2      	; 0x3018 <ProcessInput+0x38a>
    3016:	42 c0       	rjmp	.+132    	; 0x309c <ProcessInput+0x40e>
    3018:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    301c:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    3020:	82 17       	cp	r24, r18
    3022:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    3024:	d9 f1       	breq	.+118    	; 0x309c <ProcessInput+0x40e>
    3026:	63 ee       	ldi	r22, 0xE3	; 227
    3028:	78 e3       	ldi	r23, 0x38	; 56
    302a:	db d9       	rcall	.-3146   	; 0x23e2 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    302c:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    3030:	90 91 fe 38 	lds	r25, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3034:	e9 2d       	mov	r30, r9
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	df 01       	movw	r26, r30
    303a:	aa 0f       	add	r26, r26
    303c:	bb 1f       	adc	r27, r27
    303e:	ac 5d       	subi	r26, 0xDC	; 220
    3040:	b6 4c       	sbci	r27, 0xC6	; 198
    3042:	20 91 ef 38 	lds	r18, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    3046:	30 91 f0 38 	lds	r19, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    304a:	2d 93       	st	X+, r18
    304c:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    304e:	df 01       	movw	r26, r30
    3050:	aa 0f       	add	r26, r26
    3052:	bb 1f       	adc	r27, r27
    3054:	ac 59       	subi	r26, 0x9C	; 156
    3056:	b6 4c       	sbci	r27, 0xC6	; 198
    3058:	8d 93       	st	X+, r24
    305a:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    305c:	ee 0f       	add	r30, r30
    305e:	ff 1f       	adc	r31, r31
    3060:	ec 55       	subi	r30, 0x5C	; 92
    3062:	f6 4c       	sbci	r31, 0xC6	; 198
    3064:	10 82       	st	Z, r1
    3066:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	89 0d       	add	r24, r9
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	93 94       	inc	r9
    3070:	93 94       	inc	r9
    3072:	fc 01       	movw	r30, r24
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	ec 5d       	subi	r30, 0xDC	; 220
    307a:	f6 4c       	sbci	r31, 0xC6	; 198
    307c:	e0 82       	st	Z, r14
    307e:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    3080:	fc 01       	movw	r30, r24
    3082:	ee 0f       	add	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	ec 59       	subi	r30, 0x9C	; 156
    3088:	f6 4c       	sbci	r31, 0xC6	; 198
    308a:	c0 82       	st	Z, r12
    308c:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	fc 01       	movw	r30, r24
    3094:	ec 55       	subi	r30, 0x5C	; 92
    3096:	f6 4c       	sbci	r31, 0xC6	; 198
    3098:	a0 82       	st	Z, r10
    309a:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    309c:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    30a0:	82 2f       	mov	r24, r18
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	fc 01       	movw	r30, r24
    30a6:	ee 0f       	add	r30, r30
    30a8:	ff 1f       	adc	r31, r31
    30aa:	ea 51       	subi	r30, 0x1A	; 26
    30ac:	f6 4c       	sbci	r31, 0xC6	; 198
    30ae:	40 81       	ld	r20, Z
    30b0:	51 81       	ldd	r21, Z+1	; 0x01
    30b2:	45 2b       	or	r20, r21
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <ProcessInput+0x42a>
    30b6:	85 cf       	rjmp	.-246    	; 0x2fc2 <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    30b8:	22 23       	and	r18, r18
    30ba:	61 f1       	breq	.+88     	; 0x3114 <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	fc 01       	movw	r30, r24
    30c2:	ee 51       	subi	r30, 0x1E	; 30
    30c4:	f6 4c       	sbci	r31, 0xC6	; 198
    30c6:	63 ee       	ldi	r22, 0xE3	; 227
    30c8:	78 e3       	ldi	r23, 0x38	; 56
    30ca:	80 81       	ld	r24, Z
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	89 d9       	rcall	.-3310   	; 0x23e2 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30d0:	20 91 fd 38 	lds	r18, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    30d4:	30 91 fe 38 	lds	r19, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    30d8:	11 e0       	ldi	r17, 0x01	; 1
    30da:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30dc:	89 2d       	mov	r24, r9
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	fc 01       	movw	r30, r24
    30e2:	ee 0f       	add	r30, r30
    30e4:	ff 1f       	adc	r31, r31
    30e6:	ec 5d       	subi	r30, 0xDC	; 220
    30e8:	f6 4c       	sbci	r31, 0xC6	; 198
    30ea:	40 91 ef 38 	lds	r20, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    30ee:	50 91 f0 38 	lds	r21, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    30f2:	40 83       	st	Z, r20
    30f4:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    30f6:	fc 01       	movw	r30, r24
    30f8:	ee 0f       	add	r30, r30
    30fa:	ff 1f       	adc	r31, r31
    30fc:	ec 59       	subi	r30, 0x9C	; 156
    30fe:	f6 4c       	sbci	r31, 0xC6	; 198
    3100:	20 83       	st	Z, r18
    3102:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	fc 01       	movw	r30, r24
    310a:	ec 55       	subi	r30, 0x5C	; 92
    310c:	f6 4c       	sbci	r31, 0xC6	; 198
    310e:	10 82       	st	Z, r1
    3110:	11 82       	std	Z+1, r1	; 0x01
    3112:	28 c5       	rjmp	.+2640   	; 0x3b64 <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    3114:	1f ef       	ldi	r17, 0xFF	; 255
    3116:	19 0d       	add	r17, r9
    3118:	25 c5       	rjmp	.+2634   	; 0x3b64 <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    311a:	ee 2e       	mov	r14, r30
    311c:	f1 2c       	mov	r15, r1
    311e:	f7 01       	movw	r30, r14
    3120:	ee 0f       	add	r30, r30
    3122:	ff 1f       	adc	r31, r31
    3124:	ec 51       	subi	r30, 0x1C	; 28
    3126:	f6 4c       	sbci	r31, 0xC6	; 198
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	d3 01       	movw	r26, r6
    312e:	11 96       	adiw	r26, 0x01	; 1
    3130:	6c 91       	ld	r22, X
    3132:	80 81       	ld	r24, Z
    3134:	91 81       	ldd	r25, Z+1	; 0x01
    3136:	15 da       	rcall	.-3030   	; 0x2562 <FindChild>
    3138:	f7 01       	movw	r30, r14
    313a:	ee 0f       	add	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	ea 51       	subi	r30, 0x1A	; 26
    3140:	f6 4c       	sbci	r31, 0xC6	; 198
    3142:	80 83       	st	Z, r24
    3144:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3146:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    314a:	29 2f       	mov	r18, r25
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	f9 01       	movw	r30, r18
    3150:	ee 0f       	add	r30, r30
    3152:	ff 1f       	adc	r31, r31
    3154:	ea 51       	subi	r30, 0x1A	; 26
    3156:	f6 4c       	sbci	r31, 0xC6	; 198
    3158:	40 81       	ld	r20, Z
    315a:	51 81       	ldd	r21, Z+1	; 0x01
    315c:	41 15       	cp	r20, r1
    315e:	51 05       	cpc	r21, r1
    3160:	21 f0       	breq	.+8      	; 0x316a <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    3162:	63 ee       	ldi	r22, 0xE3	; 227
    3164:	78 e3       	ldi	r23, 0x38	; 56
    3166:	ca 01       	movw	r24, r20
    3168:	1c c0       	rjmp	.+56     	; 0x31a2 <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    316a:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    316c:	81 f1       	breq	.+96     	; 0x31ce <ProcessInput+0x540>
    316e:	22 0f       	add	r18, r18
    3170:	33 1f       	adc	r19, r19
    3172:	f9 01       	movw	r30, r18
    3174:	ee 51       	subi	r30, 0x1E	; 30
    3176:	f6 4c       	sbci	r31, 0xC6	; 198
    3178:	d3 01       	movw	r26, r6
    317a:	11 96       	adiw	r26, 0x01	; 1
    317c:	6c 91       	ld	r22, X
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	a8 d9       	rcall	.-3248   	; 0x24d4 <CheckLetter>
    3184:	81 11       	cpse	r24, r1
    3186:	02 c0       	rjmp	.+4      	; 0x318c <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    3188:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    318a:	ec c4       	rjmp	.+2520   	; 0x3b64 <ProcessInput+0xed6>
    318c:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	ee 0f       	add	r30, r30
    3194:	ff 1f       	adc	r31, r31
    3196:	ee 51       	subi	r30, 0x1E	; 30
    3198:	f6 4c       	sbci	r31, 0xC6	; 198
    319a:	63 ee       	ldi	r22, 0xE3	; 227
    319c:	78 e3       	ldi	r23, 0x38	; 56
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	1f d9       	rcall	.-3522   	; 0x23e2 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    31a4:	80 91 ff 38 	lds	r24, 0x38FF	; 0x8038ff <actObj1.3993+0x1c>
    31a8:	90 91 00 39 	lds	r25, 0x3900	; 0x803900 <actObj1.3993+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31ac:	20 91 f1 38 	lds	r18, 0x38F1	; 0x8038f1 <actObj1.3993+0xe>
    31b0:	30 91 f2 38 	lds	r19, 0x38F2	; 0x8038f2 <actObj1.3993+0xf>
    31b4:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    31b8:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    31bc:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    31c0:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    31c4:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    31c8:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    31cc:	32 ce       	rjmp	.-924    	; 0x2e32 <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31ce:	81 ed       	ldi	r24, 0xD1	; 209
    31d0:	99 e7       	ldi	r25, 0x79	; 121
    31d2:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    31d6:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    31da:	8a e1       	ldi	r24, 0x1A	; 26
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	c9 c2       	rjmp	.+1426   	; 0x3772 <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    31e0:	80 37       	cpi	r24, 0x70	; 112
    31e2:	09 f0       	breq	.+2      	; 0x31e6 <ProcessInput+0x558>
    31e4:	92 c0       	rjmp	.+292    	; 0x330a <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    31e6:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    31ea:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    31ee:	89 2b       	or	r24, r25
    31f0:	79 f0       	breq	.+30     	; 0x3210 <ProcessInput+0x582>
    31f2:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    31f6:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    31fa:	89 2b       	or	r24, r25
    31fc:	49 f0       	breq	.+18     	; 0x3210 <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31fe:	87 e0       	ldi	r24, 0x07	; 7
    3200:	98 e7       	ldi	r25, 0x78	; 120
    3202:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3206:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    320a:	89 e5       	ldi	r24, 0x59	; 89
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	b1 c2       	rjmp	.+1378   	; 0x3772 <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    3210:	b2 e0       	ldi	r27, 0x02	; 2
    3212:	fb 12       	cpse	r15, r27
    3214:	6f cd       	rjmp	.-1314   	; 0x2cf4 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3216:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    321a:	10 e0       	ldi	r17, 0x00	; 0
    321c:	f8 01       	movw	r30, r16
    321e:	ee 0f       	add	r30, r30
    3220:	ff 1f       	adc	r31, r31
    3222:	ec 51       	subi	r30, 0x1C	; 28
    3224:	f6 4c       	sbci	r31, 0xC6	; 198
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	d3 01       	movw	r26, r6
    322c:	11 96       	adiw	r26, 0x01	; 1
    322e:	6c 91       	ld	r22, X
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	96 d9       	rcall	.-3284   	; 0x2562 <FindChild>
    3236:	00 0f       	add	r16, r16
    3238:	11 1f       	adc	r17, r17
    323a:	f8 01       	movw	r30, r16
    323c:	ea 51       	subi	r30, 0x1A	; 26
    323e:	f6 4c       	sbci	r31, 0xC6	; 198
    3240:	80 83       	st	Z, r24
    3242:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3244:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	2f 5f       	subi	r18, 0xFF	; 255
    324c:	3f 4f       	sbci	r19, 0xFF	; 255
    324e:	22 0f       	add	r18, r18
    3250:	33 1f       	adc	r19, r19
    3252:	f9 01       	movw	r30, r18
    3254:	ec 51       	subi	r30, 0x1C	; 28
    3256:	f6 4c       	sbci	r31, 0xC6	; 198
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	09 f4       	brne	.+2      	; 0x3262 <ProcessInput+0x5d4>
    3260:	38 c3       	rjmp	.+1648   	; 0x38d2 <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    3262:	40 91 44 38 	lds	r20, 0x3844	; 0x803844 <inventory>
    3266:	50 91 45 38 	lds	r21, 0x3845	; 0x803845 <inventory+0x1>
    326a:	84 17       	cp	r24, r20
    326c:	95 07       	cpc	r25, r21
    326e:	39 f0       	breq	.+14     	; 0x327e <ProcessInput+0x5f0>
    3270:	40 91 46 38 	lds	r20, 0x3846	; 0x803846 <inventory+0x2>
    3274:	50 91 47 38 	lds	r21, 0x3847	; 0x803847 <inventory+0x3>
    3278:	84 17       	cp	r24, r20
    327a:	95 07       	cpc	r25, r21
    327c:	c1 f4       	brne	.+48     	; 0x32ae <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    327e:	82 ee       	ldi	r24, 0xE2	; 226
    3280:	97 e7       	ldi	r25, 0x77	; 119
    3282:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3286:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    328a:	85 e2       	ldi	r24, 0x25	; 37
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3292:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    329e:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    32a2:	f9 01       	movw	r30, r18
    32a4:	ec 51       	subi	r30, 0x1C	; 28
    32a6:	f6 4c       	sbci	r31, 0xC6	; 198
    32a8:	10 82       	st	Z, r1
    32aa:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    32ac:	c2 cd       	rjmp	.-1148   	; 0x2e32 <ProcessInput+0x1a4>
    32ae:	63 ee       	ldi	r22, 0xE3	; 227
    32b0:	78 e3       	ldi	r23, 0x38	; 56
    32b2:	97 d8       	rcall	.-3794   	; 0x23e2 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    32b4:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x7>
    32b8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
    32bc:	88 23       	and	r24, r24
    32be:	09 f4       	brne	.+2      	; 0x32c2 <ProcessInput+0x634>
    32c0:	e3 c2       	rjmp	.+1478   	; 0x3888 <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    32c2:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3993+0xb>
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <ProcessInput+0x63e>
    32ca:	14 cd       	rjmp	.-1496   	; 0x2cf4 <ProcessInput+0x66>
                                if (inventory[0]) {
    32cc:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    32d0:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    32d4:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                                    inventory[1] = route[currDepth+1];
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	ee 0f       	add	r30, r30
    32dc:	ff 1f       	adc	r31, r31
    32de:	ea 51       	subi	r30, 0x1A	; 26
    32e0:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    32e2:	89 2b       	or	r24, r25
    32e4:	39 f0       	breq	.+14     	; 0x32f4 <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    32e6:	80 81       	ld	r24, Z
    32e8:	91 81       	ldd	r25, Z+1	; 0x01
    32ea:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    32ee:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    32f2:	06 c0       	rjmp	.+12     	; 0x3300 <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    32fc:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3300:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3304:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    3308:	2b c0       	rjmp	.+86     	; 0x3360 <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    330a:	84 36       	cpi	r24, 0x64	; 100
    330c:	d9 f4       	brne	.+54     	; 0x3344 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    330e:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3312:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	09 f0       	breq	.+2      	; 0x331c <ProcessInput+0x68e>
    331a:	3c c4       	rjmp	.+2168   	; 0x3b94 <ProcessInput+0xf06>
    331c:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3320:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3324:	89 2b       	or	r24, r25
    3326:	49 f4       	brne	.+18     	; 0x333a <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3328:	86 ea       	ldi	r24, 0xA6	; 166
    332a:	97 e7       	ldi	r25, 0x77	; 119
    332c:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3330:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3334:	86 e2       	ldi	r24, 0x26	; 38
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	72 cd       	rjmp	.-1308   	; 0x2e1e <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    333a:	b2 e0       	ldi	r27, 0x02	; 2
    333c:	fb 16       	cp	r15, r27
    333e:	09 f4       	brne	.+2      	; 0x3342 <ProcessInput+0x6b4>
    3340:	8b c4       	rjmp	.+2326   	; 0x3c58 <ProcessInput+0xfca>
    3342:	d8 cc       	rjmp	.-1616   	; 0x2cf4 <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    3344:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3346:	81 f4       	brne	.+32     	; 0x3368 <ProcessInput+0x6da>
    3348:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    334c:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3350:	89 2b       	or	r24, r25
    3352:	31 f4       	brne	.+12     	; 0x3360 <ProcessInput+0x6d2>
    3354:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3358:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    335c:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    335e:	21 f3       	breq	.-56     	; 0x3328 <ProcessInput+0x69a>
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	1a dc       	rcall	.-1996   	; 0x2b98 <ShowInventory>
    3364:	18 2f       	mov	r17, r24
    3366:	fe c3       	rjmp	.+2044   	; 0x3b64 <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3368:	9c e8       	ldi	r25, 0x8C	; 140
    336a:	98 0f       	add	r25, r24
    336c:	92 30       	cpi	r25, 0x02	; 2
    336e:	28 f0       	brcs	.+10     	; 0x337a <ProcessInput+0x6ec>
    3370:	87 36       	cpi	r24, 0x67	; 103
    3372:	19 f0       	breq	.+6      	; 0x337a <ProcessInput+0x6ec>
    3374:	82 37       	cpi	r24, 0x72	; 114
    3376:	09 f0       	breq	.+2      	; 0x337a <ProcessInput+0x6ec>
    3378:	b5 c2       	rjmp	.+1386   	; 0x38e4 <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    337a:	8e ef       	ldi	r24, 0xFE	; 254
    337c:	8f 0d       	add	r24, r15
    337e:	82 30       	cpi	r24, 0x02	; 2
    3380:	08 f0       	brcs	.+2      	; 0x3384 <ProcessInput+0x6f6>
    3382:	b8 cc       	rjmp	.-1680   	; 0x2cf4 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    3384:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    3388:	0e 2f       	mov	r16, r30
    338a:	10 e0       	ldi	r17, 0x00	; 0
    338c:	d3 01       	movw	r26, r6
    338e:	af 0d       	add	r26, r15
    3390:	b1 1d       	adc	r27, r1
    3392:	11 97       	sbiw	r26, 0x01	; 1
    3394:	f8 01       	movw	r30, r16
    3396:	ee 0f       	add	r30, r30
    3398:	ff 1f       	adc	r31, r31
    339a:	ec 51       	subi	r30, 0x1C	; 28
    339c:	f6 4c       	sbci	r31, 0xC6	; 198
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	6c 91       	ld	r22, X
    33a4:	80 81       	ld	r24, Z
    33a6:	91 81       	ldd	r25, Z+1	; 0x01
    33a8:	dc d8       	rcall	.-3656   	; 0x2562 <FindChild>
    33aa:	f8 01       	movw	r30, r16
    33ac:	ee 0f       	add	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	ea 51       	subi	r30, 0x1A	; 26
    33b2:	f6 4c       	sbci	r31, 0xC6	; 198
    33b4:	80 83       	st	Z, r24
    33b6:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    33b8:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	ee 0f       	add	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	ea 51       	subi	r30, 0x1A	; 26
    33c4:	f6 4c       	sbci	r31, 0xC6	; 198
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <ProcessInput+0x742>
    33ce:	78 c2       	rjmp	.+1264   	; 0x38c0 <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    33d0:	f3 e0       	ldi	r31, 0x03	; 3
    33d2:	ff 12       	cpse	r15, r31
    33d4:	60 c1       	rjmp	.+704    	; 0x3696 <ProcessInput+0xa08>
    33d6:	d3 01       	movw	r26, r6
    33d8:	2c 91       	ld	r18, X
    33da:	25 37       	cpi	r18, 0x75	; 117
    33dc:	19 f0       	breq	.+6      	; 0x33e4 <ProcessInput+0x756>
    33de:	27 36       	cpi	r18, 0x67	; 103
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <ProcessInput+0x756>
    33e2:	59 c1       	rjmp	.+690    	; 0x3696 <ProcessInput+0xa08>
    33e4:	00 e0       	ldi	r16, 0x00	; 0
    33e6:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33e8:	41 e6       	ldi	r20, 0x61	; 97
    33ea:	c4 2e       	mov	r12, r20
    33ec:	49 e7       	ldi	r20, 0x79	; 121
    33ee:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    33f0:	51 e2       	ldi	r21, 0x21	; 33
    33f2:	a5 2e       	mov	r10, r21
    33f4:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    33f6:	88 24       	eor	r8, r8
    33f8:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    33fa:	91 2c       	mov	r9, r1
    33fc:	e0 2e       	mov	r14, r16
    33fe:	f1 2c       	mov	r15, r1
    3400:	c7 01       	movw	r24, r14
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	fc 01       	movw	r30, r24
    3408:	ec 5b       	subi	r30, 0xBC	; 188
    340a:	f7 4c       	sbci	r31, 0xC7	; 199
    340c:	7f 01       	movw	r14, r30
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    3414:	79 f0       	breq	.+30     	; 0x3434 <ProcessInput+0x7a6>
    3416:	d3 01       	movw	r26, r6
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	6c 91       	ld	r22, X
    341c:	5b d8       	rcall	.-3914   	; 0x24d4 <CheckLetter>
    341e:	88 23       	and	r24, r24
    3420:	49 f0       	breq	.+18     	; 0x3434 <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    3422:	68 eb       	ldi	r22, 0xB8	; 184
    3424:	78 e3       	ldi	r23, 0x38	; 56
    3426:	f7 01       	movw	r30, r14
    3428:	80 81       	ld	r24, Z
    342a:	91 81       	ldd	r25, Z+1	; 0x01
    342c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <PopulateObject>
                                    x = 2;
    3430:	02 e0       	ldi	r16, 0x02	; 2
    3432:	1d c0       	rjmp	.+58     	; 0x346e <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    3434:	01 30       	cpi	r16, 0x01	; 1
    3436:	d1 f4       	brne	.+52     	; 0x346c <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3438:	e1 2f       	mov	r30, r17
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	df 01       	movw	r26, r30
    343e:	aa 0f       	add	r26, r26
    3440:	bb 1f       	adc	r27, r27
    3442:	ac 5d       	subi	r26, 0xDC	; 220
    3444:	b6 4c       	sbci	r27, 0xC6	; 198
    3446:	cd 92       	st	X+, r12
    3448:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    344a:	df 01       	movw	r26, r30
    344c:	aa 0f       	add	r26, r26
    344e:	bb 1f       	adc	r27, r27
    3450:	ac 59       	subi	r26, 0x9C	; 156
    3452:	b6 4c       	sbci	r27, 0xC6	; 198
    3454:	ad 92       	st	X+, r10
    3456:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3458:	ee 0f       	add	r30, r30
    345a:	ff 1f       	adc	r31, r31
    345c:	ec 55       	subi	r30, 0x5C	; 92
    345e:	f6 4c       	sbci	r31, 0xC6	; 198
    3460:	80 82       	st	Z, r8
    3462:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3464:	d3 01       	movw	r26, r6
    3466:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3468:	1f 5f       	subi	r17, 0xFF	; 255
    346a:	01 c0       	rjmp	.+2      	; 0x346e <ProcessInput+0x7e0>
    346c:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    346e:	0f 5f       	subi	r16, 0xFF	; 255
    3470:	01 30       	cpi	r16, 0x01	; 1
    3472:	21 f2       	breq	.-120    	; 0x33fc <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3474:	f3 01       	movw	r30, r6
    3476:	80 81       	ld	r24, Z
    3478:	88 23       	and	r24, r24
    347a:	09 f4       	brne	.+2      	; 0x347e <ProcessInput+0x7f0>
    347c:	73 c3       	rjmp	.+1766   	; 0x3b64 <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    347e:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	ee 0f       	add	r30, r30
    3486:	ff 1f       	adc	r31, r31
    3488:	ea 51       	subi	r30, 0x1A	; 26
    348a:	f6 4c       	sbci	r31, 0xC6	; 198
    348c:	63 ee       	ldi	r22, 0xE3	; 227
    348e:	78 e3       	ldi	r23, 0x38	; 56
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3498:	e0 90 01 39 	lds	r14, 0x3901	; 0x803901 <actObj1.3993+0x1e>
    349c:	f0 90 02 39 	lds	r15, 0x3902	; 0x803902 <actObj1.3993+0x1f>
    34a0:	f1 e0       	ldi	r31, 0x01	; 1
    34a2:	ef 16       	cp	r14, r31
    34a4:	f1 04       	cpc	r15, r1
    34a6:	09 f0       	breq	.+2      	; 0x34aa <ProcessInput+0x81c>
    34a8:	89 c0       	rjmp	.+274    	; 0x35bc <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    34aa:	93 01       	movw	r18, r6
    34ac:	2e 5f       	subi	r18, 0xFE	; 254
    34ae:	3f 4f       	sbci	r19, 0xFF	; 255
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	61 e0       	ldi	r22, 0x01	; 1
    34b4:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x10>
    34b8:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x11>
    34bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
                                if (data[2] == '1') {
    34c0:	d3 01       	movw	r26, r6
    34c2:	12 96       	adiw	r26, 0x02	; 2
    34c4:	3c 91       	ld	r19, X
    34c6:	31 33       	cpi	r19, 0x31	; 49
    34c8:	09 f0       	breq	.+2      	; 0x34cc <ProcessInput+0x83e>
    34ca:	4c c3       	rjmp	.+1688   	; 0x3b64 <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    34cc:	20 91 c3 38 	lds	r18, 0x38C3	; 0x8038c3 <actObj2.3994+0xb>
                                    if ((item < 31)||(item > 34)) {
    34d0:	51 ee       	ldi	r21, 0xE1	; 225
    34d2:	52 0f       	add	r21, r18
    34d4:	41 e0       	ldi	r20, 0x01	; 1
    34d6:	41 0f       	add	r20, r17
    34d8:	81 2f       	mov	r24, r17
    34da:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34dc:	fc 01       	movw	r30, r24
    34de:	ee 0f       	add	r30, r30
    34e0:	ff 1f       	adc	r31, r31
    34e2:	ec 5d       	subi	r30, 0xDC	; 220
    34e4:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    34e6:	54 30       	cpi	r21, 0x04	; 4
    34e8:	b0 f0       	brcs	.+44     	; 0x3516 <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34ea:	21 e0       	ldi	r18, 0x01	; 1
    34ec:	39 e7       	ldi	r19, 0x79	; 121
    34ee:	20 83       	st	Z, r18
    34f0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    34f2:	fc 01       	movw	r30, r24
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	ec 59       	subi	r30, 0x9C	; 156
    34fa:	f6 4c       	sbci	r31, 0xC6	; 198
    34fc:	2a e1       	ldi	r18, 0x1A	; 26
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	20 83       	st	Z, r18
    3502:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	fc 01       	movw	r30, r24
    350a:	ec 55       	subi	r30, 0x5C	; 92
    350c:	f6 4c       	sbci	r31, 0xC6	; 198
    350e:	e0 82       	st	Z, r14
    3510:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    3512:	14 2f       	mov	r17, r20
    3514:	27 c3       	rjmp	.+1614   	; 0x3b64 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3516:	60 e5       	ldi	r22, 0x50	; 80
    3518:	75 e7       	ldi	r23, 0x75	; 117
    351a:	60 83       	st	Z, r22
    351c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    351e:	fc 01       	movw	r30, r24
    3520:	ee 0f       	add	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	ec 59       	subi	r30, 0x9C	; 156
    3526:	f6 4c       	sbci	r31, 0xC6	; 198
    3528:	62 eb       	ldi	r22, 0xB2	; 178
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	60 83       	st	Z, r22
    352e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	fc 01       	movw	r30, r24
    3536:	ec 55       	subi	r30, 0x5C	; 92
    3538:	f6 4c       	sbci	r31, 0xC6	; 198
    353a:	e0 82       	st	Z, r14
    353c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    353e:	84 2f       	mov	r24, r20
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	fc 01       	movw	r30, r24
    3544:	ee 0f       	add	r30, r30
    3546:	ff 1f       	adc	r31, r31
    3548:	ec 5d       	subi	r30, 0xDC	; 220
    354a:	f6 4c       	sbci	r31, 0xC6	; 198
    354c:	49 e5       	ldi	r20, 0x59	; 89
    354e:	5a e7       	ldi	r21, 0x7A	; 122
    3550:	40 83       	st	Z, r20
    3552:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3554:	fc 01       	movw	r30, r24
    3556:	ee 0f       	add	r30, r30
    3558:	ff 1f       	adc	r31, r31
    355a:	ec 59       	subi	r30, 0x9C	; 156
    355c:	f6 4c       	sbci	r31, 0xC6	; 198
    355e:	42 e0       	ldi	r20, 0x02	; 2
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	40 83       	st	Z, r20
    3564:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	fc 01       	movw	r30, r24
    356c:	ec 55       	subi	r30, 0x5C	; 92
    356e:	f6 4c       	sbci	r31, 0xC6	; 198
    3570:	e0 82       	st	Z, r14
    3572:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3574:	82 e0       	ldi	r24, 0x02	; 2
    3576:	81 0f       	add	r24, r17
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	1d 5f       	subi	r17, 0xFD	; 253
    357c:	fc 01       	movw	r30, r24
    357e:	ee 0f       	add	r30, r30
    3580:	ff 1f       	adc	r31, r31
    3582:	ec 5d       	subi	r30, 0xDC	; 220
    3584:	f6 4c       	sbci	r31, 0xC6	; 198
    3586:	4d ea       	ldi	r20, 0xAD	; 173
    3588:	58 e7       	ldi	r21, 0x78	; 120
    358a:	40 83       	st	Z, r20
    358c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    358e:	fc 01       	movw	r30, r24
    3590:	ee 0f       	add	r30, r30
    3592:	ff 1f       	adc	r31, r31
    3594:	ec 59       	subi	r30, 0x9C	; 156
    3596:	f6 4c       	sbci	r31, 0xC6	; 198
    3598:	42 e1       	ldi	r20, 0x12	; 18
    359a:	50 e0       	ldi	r21, 0x00	; 0
    359c:	40 83       	st	Z, r20
    359e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	fc 01       	movw	r30, r24
    35a6:	ec 55       	subi	r30, 0x5C	; 92
    35a8:	f6 4c       	sbci	r31, 0xC6	; 198
    35aa:	e0 82       	st	Z, r14
    35ac:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    35ae:	30 93 13 39 	sts	0x3913, r19	; 0x803913 <specialInput>
                                        specialInput[1] = item;
    35b2:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <specialInput+0x1>
                                        specialInput[2] = 0;
    35b6:	10 92 15 39 	sts	0x3915, r1	; 0x803915 <specialInput+0x2>
    35ba:	d4 c2       	rjmp	.+1448   	; 0x3b64 <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    35bc:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3993+0x9>
    35c0:	80 91 c3 38 	lds	r24, 0x38C3	; 0x8038c3 <actObj2.3994+0xb>
    35c4:	98 13       	cpse	r25, r24
    35c6:	2e c0       	rjmp	.+92     	; 0x3624 <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    35c8:	20 91 09 39 	lds	r18, 0x3909	; 0x803909 <actObj1.3993+0x26>
    35cc:	30 91 0a 39 	lds	r19, 0x390A	; 0x80390a <actObj1.3993+0x27>
    35d0:	01 e0       	ldi	r16, 0x01	; 1
    35d2:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35d4:	81 2f       	mov	r24, r17
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	fc 01       	movw	r30, r24
    35da:	ee 0f       	add	r30, r30
    35dc:	ff 1f       	adc	r31, r31
    35de:	ec 5d       	subi	r30, 0xDC	; 220
    35e0:	f6 4c       	sbci	r31, 0xC6	; 198
    35e2:	40 91 fb 38 	lds	r20, 0x38FB	; 0x8038fb <actObj1.3993+0x18>
    35e6:	50 91 fc 38 	lds	r21, 0x38FC	; 0x8038fc <actObj1.3993+0x19>
    35ea:	40 83       	st	Z, r20
    35ec:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35ee:	fc 01       	movw	r30, r24
    35f0:	ee 0f       	add	r30, r30
    35f2:	ff 1f       	adc	r31, r31
    35f4:	ec 59       	subi	r30, 0x9C	; 156
    35f6:	f6 4c       	sbci	r31, 0xC6	; 198
    35f8:	20 83       	st	Z, r18
    35fa:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	fc 01       	movw	r30, r24
    3602:	ec 55       	subi	r30, 0x5C	; 92
    3604:	f6 4c       	sbci	r31, 0xC6	; 198
    3606:	10 82       	st	Z, r1
    3608:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    360a:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3993+0x2a>
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3614:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3618:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    361c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3620:	10 2f       	mov	r17, r16
    3622:	a0 c2       	rjmp	.+1344   	; 0x3b64 <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3624:	f3 01       	movw	r30, r6
    3626:	80 81       	ld	r24, Z
    3628:	85 37       	cpi	r24, 0x75	; 117
    362a:	99 f4       	brne	.+38     	; 0x3652 <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    362c:	81 2f       	mov	r24, r17
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	fc 01       	movw	r30, r24
    3632:	ee 0f       	add	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	ec 5d       	subi	r30, 0xDC	; 220
    3638:	f6 4c       	sbci	r31, 0xC6	; 198
    363a:	21 e0       	ldi	r18, 0x01	; 1
    363c:	39 e7       	ldi	r19, 0x79	; 121
    363e:	20 83       	st	Z, r18
    3640:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3642:	fc 01       	movw	r30, r24
    3644:	ee 0f       	add	r30, r30
    3646:	ff 1f       	adc	r31, r31
    3648:	ec 59       	subi	r30, 0x9C	; 156
    364a:	f6 4c       	sbci	r31, 0xC6	; 198
    364c:	2a e1       	ldi	r18, 0x1A	; 26
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	15 c0       	rjmp	.+42     	; 0x367c <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3652:	87 36       	cpi	r24, 0x67	; 103
    3654:	09 f0       	breq	.+2      	; 0x3658 <ProcessInput+0x9ca>
    3656:	86 c2       	rjmp	.+1292   	; 0x3b64 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3658:	81 2f       	mov	r24, r17
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	fc 01       	movw	r30, r24
    365e:	ee 0f       	add	r30, r30
    3660:	ff 1f       	adc	r31, r31
    3662:	ec 5d       	subi	r30, 0xDC	; 220
    3664:	f6 4c       	sbci	r31, 0xC6	; 198
    3666:	2f e9       	ldi	r18, 0x9F	; 159
    3668:	36 e7       	ldi	r19, 0x76	; 118
    366a:	20 83       	st	Z, r18
    366c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    366e:	fc 01       	movw	r30, r24
    3670:	ee 0f       	add	r30, r30
    3672:	ff 1f       	adc	r31, r31
    3674:	ec 59       	subi	r30, 0x9C	; 156
    3676:	f6 4c       	sbci	r31, 0xC6	; 198
    3678:	28 e2       	ldi	r18, 0x28	; 40
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	20 83       	st	Z, r18
    367e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	fc 01       	movw	r30, r24
    3686:	ec 55       	subi	r30, 0x5C	; 92
    3688:	f6 4c       	sbci	r31, 0xC6	; 198
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	80 83       	st	Z, r24
    3690:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3692:	1f 5f       	subi	r17, 0xFF	; 255
    3694:	67 c2       	rjmp	.+1230   	; 0x3b64 <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3696:	63 ee       	ldi	r22, 0xE3	; 227
    3698:	78 e3       	ldi	r23, 0x38	; 56
    369a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    369e:	d3 01       	movw	r26, r6
    36a0:	8c 91       	ld	r24, X
    36a2:	84 37       	cpi	r24, 0x74	; 116
    36a4:	61 f5       	brne	.+88     	; 0x36fe <ProcessInput+0xa70>
    36a6:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    36aa:	83 fd       	sbrc	r24, 3
    36ac:	43 c0       	rjmp	.+134    	; 0x3734 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36ae:	8b e1       	ldi	r24, 0x1B	; 27
    36b0:	99 e7       	ldi	r25, 0x79	; 121
    36b2:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    36b6:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    36ba:	8e e1       	ldi	r24, 0x1E	; 30
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    36c2:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    36ce:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36d2:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    36d6:	90 91 fe 38 	lds	r25, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36da:	20 91 ef 38 	lds	r18, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    36de:	30 91 f0 38 	lds	r19, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    36e2:	20 93 28 39 	sts	0x3928, r18	; 0x803928 <reactStr+0x4>
    36e6:	30 93 29 39 	sts	0x3929, r19	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    36ea:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    36ee:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    36f2:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x84>
    36f6:	10 92 a9 39 	sts	0x39A9, r1	; 0x8039a9 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36fa:	13 e0       	ldi	r17, 0x03	; 3
    36fc:	33 c2       	rjmp	.+1126   	; 0x3b64 <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    36fe:	85 37       	cpi	r24, 0x75	; 117
    3700:	39 f4       	brne	.+14     	; 0x3710 <ProcessInput+0xa82>
    3702:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    3706:	84 fd       	sbrc	r24, 4
    3708:	15 c0       	rjmp	.+42     	; 0x3734 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	99 e7       	ldi	r25, 0x79	; 121
    370e:	3b c2       	rjmp	.+1142   	; 0x3b86 <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3710:	82 37       	cpi	r24, 0x72	; 114
    3712:	69 f4       	brne	.+26     	; 0x372e <ProcessInput+0xaa0>
    3714:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    3718:	85 fd       	sbrc	r24, 5
    371a:	0c c0       	rjmp	.+24     	; 0x3734 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    371c:	86 ee       	ldi	r24, 0xE6	; 230
    371e:	98 e7       	ldi	r25, 0x78	; 120
    3720:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3724:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3728:	8b e1       	ldi	r24, 0x1B	; 27
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	78 cb       	rjmp	.-2320   	; 0x2e1e <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    372e:	87 36       	cpi	r24, 0x67	; 103
    3730:	09 f4       	brne	.+2      	; 0x3734 <ProcessInput+0xaa6>
    3732:	e0 ca       	rjmp	.-2624   	; 0x2cf4 <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3734:	00 91 01 39 	lds	r16, 0x3901	; 0x803901 <actObj1.3993+0x1e>
    3738:	10 91 02 39 	lds	r17, 0x3902	; 0x803902 <actObj1.3993+0x1f>
    373c:	01 30       	cpi	r16, 0x01	; 1
    373e:	11 05       	cpc	r17, r1
    3740:	09 f5       	brne	.+66     	; 0x3784 <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3742:	93 01       	movw	r18, r6
    3744:	2e 5f       	subi	r18, 0xFE	; 254
    3746:	3f 4f       	sbci	r19, 0xFF	; 255
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	61 e0       	ldi	r22, 0x01	; 1
    374c:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x10>
    3750:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x11>
    3754:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
                                if (data[2] == '1') {
    3758:	f3 01       	movw	r30, r6
    375a:	82 81       	ldd	r24, Z+2	; 0x02
    375c:	81 33       	cpi	r24, 0x31	; 49
    375e:	09 f0       	breq	.+2      	; 0x3762 <ProcessInput+0xad4>
    3760:	13 cd       	rjmp	.-1498   	; 0x3188 <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3762:	85 e2       	ldi	r24, 0x25	; 37
    3764:	95 e7       	ldi	r25, 0x75	; 117
    3766:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    376a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    376e:	8b e2       	ldi	r24, 0x2B	; 43
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3776:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    377a:	00 93 a6 39 	sts	0x39A6, r16	; 0x8039a6 <reactStr+0x82>
    377e:	10 93 a7 39 	sts	0x39A7, r17	; 0x8039a7 <reactStr+0x83>
    3782:	57 cb       	rjmp	.-2386   	; 0x2e32 <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3784:	01 15       	cp	r16, r1
    3786:	11 05       	cpc	r17, r1
    3788:	09 f4       	brne	.+2      	; 0x378c <ProcessInput+0xafe>
    378a:	58 c0       	rjmp	.+176    	; 0x383c <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    378c:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x10>
    3790:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x11>
    3794:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3798:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    379c:	00 93 66 39 	sts	0x3966, r16	; 0x803966 <reactStr+0x42>
    37a0:	10 93 67 39 	sts	0x3967, r17	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    37a4:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    37a8:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ac:	89 e5       	ldi	r24, 0x59	; 89
    37ae:	9a e7       	ldi	r25, 0x7A	; 122
    37b0:	80 93 28 39 	sts	0x3928, r24	; 0x803928 <reactStr+0x4>
    37b4:	90 93 29 39 	sts	0x3929, r25	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    37c0:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	80 93 a8 39 	sts	0x39A8, r24	; 0x8039a8 <reactStr+0x84>
    37cc:	90 93 a9 39 	sts	0x39A9, r25	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37d0:	2d ea       	ldi	r18, 0xAD	; 173
    37d2:	38 e7       	ldi	r19, 0x78	; 120
    37d4:	20 93 2a 39 	sts	0x392A, r18	; 0x80392a <reactStr+0x6>
    37d8:	30 93 2b 39 	sts	0x392B, r19	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    37dc:	22 e1       	ldi	r18, 0x12	; 18
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	20 93 6a 39 	sts	0x396A, r18	; 0x80396a <reactStr+0x46>
    37e4:	30 93 6b 39 	sts	0x396B, r19	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    37e8:	80 93 aa 39 	sts	0x39AA, r24	; 0x8039aa <reactStr+0x86>
    37ec:	90 93 ab 39 	sts	0x39AB, r25	; 0x8039ab <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    37f0:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3993+0x20>
    37f4:	90 91 04 39 	lds	r25, 0x3904	; 0x803904 <actObj1.3993+0x21>
    37f8:	40 97       	sbiw	r24, 0x10	; 16
    37fa:	30 f0       	brcs	.+12     	; 0x3808 <ProcessInput+0xb7a>
    37fc:	8f e0       	ldi	r24, 0x0F	; 15
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	80 93 03 39 	sts	0x3903, r24	; 0x803903 <actObj1.3993+0x20>
    3804:	90 93 04 39 	sts	0x3904, r25	; 0x803904 <actObj1.3993+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3808:	23 e1       	ldi	r18, 0x13	; 19
    380a:	39 e3       	ldi	r19, 0x39	; 57
    380c:	40 e0       	ldi	r20, 0x00	; 0
    380e:	60 91 03 39 	lds	r22, 0x3903	; 0x803903 <actObj1.3993+0x20>
    3812:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <actObj1.3993+0x12>
    3816:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <actObj1.3993+0x13>
    381a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    381e:	63 e1       	ldi	r22, 0x13	; 19
    3820:	79 e3       	ldi	r23, 0x39	; 57
    3822:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3993+0x20>
    3826:	0e 94 07 11 	call	0x220e	; 0x220e <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    382a:	e0 91 03 39 	lds	r30, 0x3903	; 0x803903 <actObj1.3993+0x20>
    382e:	f0 91 04 39 	lds	r31, 0x3904	; 0x803904 <actObj1.3993+0x21>
    3832:	ed 5e       	subi	r30, 0xED	; 237
    3834:	f6 4c       	sbci	r31, 0xC6	; 198
    3836:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3838:	14 e0       	ldi	r17, 0x04	; 4
    383a:	94 c1       	rjmp	.+808    	; 0x3b64 <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    383c:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x7>
    3840:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
    3844:	88 23       	and	r24, r24
    3846:	01 f1       	breq	.+64     	; 0x3888 <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3848:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <actObj1.3993+0x26>
    384c:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3850:	20 91 fb 38 	lds	r18, 0x38FB	; 0x8038fb <actObj1.3993+0x18>
    3854:	30 91 fc 38 	lds	r19, 0x38FC	; 0x8038fc <actObj1.3993+0x19>
    3858:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    385c:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3860:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3864:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3868:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    386c:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3870:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3993+0x2a>
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    387a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    387e:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3882:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    3886:	d5 ca       	rjmp	.-2646   	; 0x2e32 <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3888:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <actObj1.3993+0x24>
    388c:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3890:	20 91 f9 38 	lds	r18, 0x38F9	; 0x8038f9 <actObj1.3993+0x16>
    3894:	30 91 fa 38 	lds	r19, 0x38FA	; 0x8038fa <actObj1.3993+0x17>
    3898:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    389c:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    38a0:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    38a4:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    38a8:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    38ac:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    38b0:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3993+0x29>
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    38ba:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    38be:	b9 ca       	rjmp	.-2702   	; 0x2e32 <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    38c0:	d3 01       	movw	r26, r6
    38c2:	8c 91       	ld	r24, X
    38c4:	84 37       	cpi	r24, 0x74	; 116
    38c6:	11 f0       	breq	.+4      	; 0x38cc <ProcessInput+0xc3e>
    38c8:	87 36       	cpi	r24, 0x67	; 103
    38ca:	19 f4       	brne	.+6      	; 0x38d2 <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38cc:	89 e3       	ldi	r24, 0x39	; 57
    38ce:	99 e7       	ldi	r25, 0x79	; 121
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <ProcessInput+0xc48>
    38d2:	8d e4       	ldi	r24, 0x4D	; 77
    38d4:	99 e7       	ldi	r25, 0x79	; 121
    38d6:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    38da:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    38de:	84 e1       	ldi	r24, 0x14	; 20
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	9d ca       	rjmp	.-2758   	; 0x2e1e <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    38e4:	81 36       	cpi	r24, 0x61	; 97
    38e6:	09 f0       	breq	.+2      	; 0x38ea <ProcessInput+0xc5c>
    38e8:	4f cc       	rjmp	.-1890   	; 0x3188 <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    38ea:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <specialPassed>
    38ee:	82 30       	cpi	r24, 0x02	; 2
    38f0:	08 f4       	brcc	.+2      	; 0x38f4 <ProcessInput+0xc66>
    38f2:	c7 c0       	rjmp	.+398    	; 0x3a82 <ProcessInput+0xdf4>
                if (data[1] > 0) {
    38f4:	f3 01       	movw	r30, r6
    38f6:	21 81       	ldd	r18, Z+1	; 0x01
    38f8:	22 23       	and	r18, r18
    38fa:	09 f4       	brne	.+2      	; 0x38fe <ProcessInput+0xc70>
    38fc:	af c0       	rjmp	.+350    	; 0x3a5c <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    38fe:	ce 01       	movw	r24, r28
    3900:	01 96       	adiw	r24, 0x01	; 1
    3902:	7c 01       	movw	r14, r24
    3904:	88 e0       	ldi	r24, 0x08	; 8
    3906:	d7 01       	movw	r26, r14
    3908:	1d 92       	st	X+, r1
    390a:	8a 95       	dec	r24
    390c:	e9 f7       	brne	.-6      	; 0x3908 <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    390e:	20 53       	subi	r18, 0x30	; 48
    3910:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3912:	32 81       	ldd	r19, Z+2	; 0x02
    3914:	31 53       	subi	r19, 0x31	; 49
    3916:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3918:	83 81       	ldd	r24, Z+3	; 0x03
    391a:	81 36       	cpi	r24, 0x61	; 97
    391c:	11 f4       	brne	.+4      	; 0x3922 <ProcessInput+0xc94>
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	0c c0       	rjmp	.+24     	; 0x393a <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    3922:	85 36       	cpi	r24, 0x65	; 101
    3924:	19 f4       	brne	.+6      	; 0x392c <ProcessInput+0xc9e>
    3926:	f3 01       	movw	r30, r6
    3928:	13 82       	std	Z+3, r1	; 0x03
    392a:	08 c0       	rjmp	.+16     	; 0x393c <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    392c:	86 36       	cpi	r24, 0x66	; 102
    392e:	19 f4       	brne	.+6      	; 0x3936 <ProcessInput+0xca8>
    3930:	83 e0       	ldi	r24, 0x03	; 3
    3932:	83 83       	std	Z+3, r24	; 0x03
    3934:	03 c0       	rjmp	.+6      	; 0x393c <ProcessInput+0xcae>
                    else data[3] = 2;
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	f3 01       	movw	r30, r6
    393a:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    393c:	21 fd       	sbrc	r18, 1
    393e:	04 c0       	rjmp	.+8      	; 0x3948 <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	dc 01       	movw	r26, r24
    3946:	04 c0       	rjmp	.+8      	; 0x3950 <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	a0 e1       	ldi	r26, 0x10	; 16
    394e:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3950:	20 ff       	sbrs	r18, 0
    3952:	03 c0       	rjmp	.+6      	; 0x395a <ProcessInput+0xccc>
    3954:	9f 5f       	subi	r25, 0xFF	; 255
    3956:	af 4f       	sbci	r26, 0xFF	; 255
    3958:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    395a:	f3 01       	movw	r30, r6
    395c:	23 81       	ldd	r18, Z+3	; 0x03
    395e:	21 fd       	sbrc	r18, 1
    3960:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3962:	20 ff       	sbrs	r18, 0
    3964:	03 c0       	rjmp	.+6      	; 0x396c <ProcessInput+0xcde>
    3966:	40 96       	adiw	r24, 0x10	; 16
    3968:	a1 1d       	adc	r26, r1
    396a:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    396c:	31 ff       	sbrs	r19, 1
    396e:	03 c0       	rjmp	.+6      	; 0x3976 <ProcessInput+0xce8>
    3970:	90 5f       	subi	r25, 0xF0	; 240
    3972:	af 4f       	sbci	r26, 0xFF	; 255
    3974:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3976:	30 ff       	sbrs	r19, 0
    3978:	03 c0       	rjmp	.+6      	; 0x3980 <ProcessInput+0xcf2>
    397a:	01 96       	adiw	r24, 0x01	; 1
    397c:	a1 1d       	adc	r26, r1
    397e:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3980:	40 91 43 38 	lds	r20, 0x3843	; 0x803843 <whoami>
    3984:	24 e0       	ldi	r18, 0x04	; 4
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	24 1b       	sub	r18, r20
    398a:	31 09       	sbc	r19, r1
    398c:	04 c0       	rjmp	.+8      	; 0x3996 <ProcessInput+0xd08>
    398e:	88 0f       	add	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	aa 1f       	adc	r26, r26
    3994:	bb 1f       	adc	r27, r27
    3996:	2a 95       	dec	r18
    3998:	d2 f7       	brpl	.-12     	; 0x398e <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    399a:	28 ec       	ldi	r18, 0xC8	; 200
    399c:	34 e7       	ldi	r19, 0x74	; 116
    399e:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    39a2:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    39a6:	20 e2       	ldi	r18, 0x20	; 32
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	20 93 66 39 	sts	0x3966, r18	; 0x803966 <reactStr+0x42>
    39ae:	30 93 67 39 	sts	0x3967, r19	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    39b2:	21 e0       	ldi	r18, 0x01	; 1
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	20 93 a6 39 	sts	0x39A6, r18	; 0x8039a6 <reactStr+0x82>
    39ba:	30 93 a7 39 	sts	0x39A7, r19	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39be:	4d e9       	ldi	r20, 0x9D	; 157
    39c0:	54 e7       	ldi	r21, 0x74	; 116
    39c2:	40 93 28 39 	sts	0x3928, r20	; 0x803928 <reactStr+0x4>
    39c6:	50 93 29 39 	sts	0x3929, r21	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    39ca:	42 e0       	ldi	r20, 0x02	; 2
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	40 93 68 39 	sts	0x3968, r20	; 0x803968 <reactStr+0x44>
    39d2:	50 93 69 39 	sts	0x3969, r21	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    39d6:	20 93 a8 39 	sts	0x39A8, r18	; 0x8039a8 <reactStr+0x84>
    39da:	30 93 a9 39 	sts	0x39A9, r19	; 0x8039a9 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39de:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    39e0:	f7 01       	movw	r30, r14
    39e2:	e0 0f       	add	r30, r16
    39e4:	f1 1d       	adc	r31, r1
    39e6:	28 2f       	mov	r18, r24
    39e8:	2f 70       	andi	r18, 0x0F	; 15
    39ea:	20 83       	st	Z, r18
                        answer /= 16;
    39ec:	44 e0       	ldi	r20, 0x04	; 4
    39ee:	b6 95       	lsr	r27
    39f0:	a7 95       	ror	r26
    39f2:	97 95       	ror	r25
    39f4:	87 95       	ror	r24
    39f6:	4a 95       	dec	r20
    39f8:	d1 f7       	brne	.-12     	; 0x39ee <ProcessInput+0xd60>
                        if (answer == 0) break;
    39fa:	00 97       	sbiw	r24, 0x00	; 0
    39fc:	a1 05       	cpc	r26, r1
    39fe:	b1 05       	cpc	r27, r1
    3a00:	49 f4       	brne	.+18     	; 0x3a14 <ProcessInput+0xd86>
    3a02:	24 e2       	ldi	r18, 0x24	; 36
    3a04:	c2 2e       	mov	r12, r18
    3a06:	29 e3       	ldi	r18, 0x39	; 57
    3a08:	d2 2e       	mov	r13, r18
    3a0a:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3a0c:	aa 24       	eor	r10, r10
    3a0e:	a3 94       	inc	r10
    3a10:	b1 2c       	mov	r11, r1
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a14:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3a16:	e4 cf       	rjmp	.-56     	; 0x39e0 <ProcessInput+0xd52>
    3a18:	b2 e0       	ldi	r27, 0x02	; 2
    3a1a:	cb 0e       	add	r12, r27
    3a1c:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3a1e:	08 30       	cpi	r16, 0x08	; 8
    3a20:	08 f0       	brcs	.+2      	; 0x3a24 <ProcessInput+0xd96>
    3a22:	9e c0       	rjmp	.+316    	; 0x3b60 <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3a24:	1f 5f       	subi	r17, 0xFF	; 255
    3a26:	f7 01       	movw	r30, r14
    3a28:	e0 0f       	add	r30, r16
    3a2a:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a2c:	80 81       	ld	r24, Z
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	83 57       	subi	r24, 0x73	; 115
    3a32:	9b 48       	sbci	r25, 0x8B	; 139
    3a34:	d6 01       	movw	r26, r12
    3a36:	14 96       	adiw	r26, 0x04	; 4
    3a38:	8d 93       	st	X+, r24
    3a3a:	9c 93       	st	X, r25
    3a3c:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3a3e:	f6 01       	movw	r30, r12
    3a40:	ec 5b       	subi	r30, 0xBC	; 188
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	a0 82       	st	Z, r10
    3a46:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3a48:	e0 5c       	subi	r30, 0xC0	; 192
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	a0 82       	st	Z, r10
    3a4e:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3a50:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3a54:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3a58:	0f 5f       	subi	r16, 0xFF	; 255
    3a5a:	de cf       	rjmp	.-68     	; 0x3a18 <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a5c:	88 ee       	ldi	r24, 0xE8	; 232
    3a5e:	94 e7       	ldi	r25, 0x74	; 116
    3a60:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3a64:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3a68:	8d e3       	ldi	r24, 0x3D	; 61
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3a70:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    3a7c:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
    3a80:	6e c0       	rjmp	.+220    	; 0x3b5e <ProcessInput+0xed0>
    3a82:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	ee 0f       	add	r30, r30
    3a8a:	ff 1f       	adc	r31, r31
    3a8c:	ea 51       	subi	r30, 0x1A	; 26
    3a8e:	f6 4c       	sbci	r31, 0xC6	; 198
    3a90:	63 ee       	ldi	r22, 0xE3	; 227
    3a92:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3a94:	81 30       	cpi	r24, 0x01	; 1
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <ProcessInput+0xe0c>
    3a98:	46 c0       	rjmp	.+140    	; 0x3b26 <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    3a9a:	80 81       	ld	r24, Z
    3a9c:	91 81       	ldd	r25, Z+1	; 0x01
    3a9e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3aa2:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x7>
    3aa6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <CheckState>
    3aaa:	88 23       	and	r24, r24
    3aac:	01 f1       	breq	.+64     	; 0x3aee <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3aae:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <actObj1.3993+0x26>
    3ab2:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ab6:	20 91 fb 38 	lds	r18, 0x38FB	; 0x8038fb <actObj1.3993+0x18>
    3aba:	30 91 fc 38 	lds	r19, 0x38FC	; 0x8038fc <actObj1.3993+0x19>
    3abe:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    3ac2:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3ac6:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3aca:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3ace:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    3ad2:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3ad6:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3993+0x2a>
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3ae0:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3ae4:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3ae8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
    3aec:	38 c0       	rjmp	.+112    	; 0x3b5e <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3aee:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <actObj1.3993+0x24>
    3af2:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3af6:	20 91 f9 38 	lds	r18, 0x38F9	; 0x8038f9 <actObj1.3993+0x16>
    3afa:	30 91 fa 38 	lds	r19, 0x38FA	; 0x8038fa <actObj1.3993+0x17>
    3afe:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    3b02:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3b06:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3b0a:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3b0e:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    3b12:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3b16:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3993+0x29>
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3b20:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3b24:	1c c0       	rjmp	.+56     	; 0x3b5e <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b2e:	80 e6       	ldi	r24, 0x60	; 96
    3b30:	98 e7       	ldi	r25, 0x78	; 120
    3b32:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3b36:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3b3a:	8d e4       	ldi	r24, 0x4D	; 77
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3b42:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    3b4e:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3b52:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <getClock>
    3b56:	80 93 10 39 	sts	0x3910, r24	; 0x803910 <PunishmentTime>
    3b5a:	90 93 11 39 	sts	0x3911, r25	; 0x803911 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3b5e:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3b60:	10 92 13 39 	sts	0x3913, r1	; 0x803913 <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b64:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput>
    3b68:	88 23       	and	r24, r24
    3b6a:	19 f0       	breq	.+6      	; 0x3b72 <ProcessInput+0xee4>
    3b6c:	10 93 23 39 	sts	0x3923, r17	; 0x803923 <responseList>
    3b70:	8b c0       	rjmp	.+278    	; 0x3c88 <ProcessInput+0xffa>
    3b72:	81 2f       	mov	r24, r17
    3b74:	01 c0       	rjmp	.+2      	; 0x3b78 <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	0e 94 75 11 	call	0x22ea	; 0x22ea <SetStandardResponse>
    3b7c:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <responseList>
    3b80:	83 c0       	rjmp	.+262    	; 0x3c88 <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b82:	81 ed       	ldi	r24, 0xD1	; 209
    3b84:	99 e7       	ldi	r25, 0x79	; 121
    3b86:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3b8a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3b8e:	8a e1       	ldi	r24, 0x1A	; 26
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	45 c9       	rjmp	.-3446   	; 0x2e1e <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3b94:	f2 e0       	ldi	r31, 0x02	; 2
    3b96:	ff 12       	cpse	r15, r31
    3b98:	ad c8       	rjmp	.-3750   	; 0x2cf4 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3b9a:	f3 01       	movw	r30, r6
    3b9c:	61 81       	ldd	r22, Z+1	; 0x01
    3b9e:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <CheckLetter>
    3ba2:	88 23       	and	r24, r24
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <ProcessInput+0xf1a>
    3ba6:	58 c0       	rjmp	.+176    	; 0x3c58 <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3ba8:	00 e0       	ldi	r16, 0x00	; 0
    3baa:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3bac:	00 0f       	add	r16, r16
    3bae:	11 1f       	adc	r17, r17
    3bb0:	0c 5b       	subi	r16, 0xBC	; 188
    3bb2:	17 4c       	sbci	r17, 0xC7	; 199
    3bb4:	63 ee       	ldi	r22, 0xE3	; 227
    3bb6:	78 e3       	ldi	r23, 0x38	; 56
    3bb8:	d8 01       	movw	r26, r16
    3bba:	8d 91       	ld	r24, X+
    3bbc:	9c 91       	ld	r25, X
    3bbe:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bc2:	86 e9       	ldi	r24, 0x96	; 150
    3bc4:	97 e7       	ldi	r25, 0x77	; 119
    3bc6:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3bca:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3bce:	80 e1       	ldi	r24, 0x10	; 16
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3bd6:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    3be2:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3be6:	20 91 fd 38 	lds	r18, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    3bea:	30 91 fe 38 	lds	r19, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bee:	40 91 ef 38 	lds	r20, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    3bf2:	50 91 f0 38 	lds	r21, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    3bf6:	40 93 28 39 	sts	0x3928, r20	; 0x803928 <reactStr+0x4>
    3bfa:	50 93 29 39 	sts	0x3929, r21	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    3bfe:	20 93 68 39 	sts	0x3968, r18	; 0x803968 <reactStr+0x44>
    3c02:	30 93 69 39 	sts	0x3969, r19	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    3c06:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x84>
    3c0a:	10 92 a9 39 	sts	0x39A9, r1	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c0e:	29 e5       	ldi	r18, 0x59	; 89
    3c10:	3a e7       	ldi	r19, 0x7A	; 122
    3c12:	20 93 2a 39 	sts	0x392A, r18	; 0x80392a <reactStr+0x6>
    3c16:	30 93 2b 39 	sts	0x392B, r19	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    3c1a:	22 e0       	ldi	r18, 0x02	; 2
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	20 93 6a 39 	sts	0x396A, r18	; 0x80396a <reactStr+0x46>
    3c22:	30 93 6b 39 	sts	0x396B, r19	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    3c26:	80 93 aa 39 	sts	0x39AA, r24	; 0x8039aa <reactStr+0x86>
    3c2a:	90 93 ab 39 	sts	0x39AB, r25	; 0x8039ab <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c2e:	29 e5       	ldi	r18, 0x59	; 89
    3c30:	37 e7       	ldi	r19, 0x77	; 119
    3c32:	20 93 2c 39 	sts	0x392C, r18	; 0x80392c <reactStr+0x8>
    3c36:	30 93 2d 39 	sts	0x392D, r19	; 0x80392d <reactStr+0x9>
    reactStr[1][number]=length;
    3c3a:	2d e3       	ldi	r18, 0x3D	; 61
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	20 93 6c 39 	sts	0x396C, r18	; 0x80396c <reactStr+0x48>
    3c42:	30 93 6d 39 	sts	0x396D, r19	; 0x80396d <reactStr+0x49>
    reactStr[2][number]=type;
    3c46:	80 93 ac 39 	sts	0x39AC, r24	; 0x8039ac <reactStr+0x88>
    3c4a:	90 93 ad 39 	sts	0x39AD, r25	; 0x8039ad <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c4e:	f8 01       	movw	r30, r16
    3c50:	10 82       	st	Z, r1
    3c52:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c54:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3c56:	86 cf       	rjmp	.-244    	; 0x3b64 <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c58:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3c5c:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	49 f0       	breq	.+18     	; 0x3c76 <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3c64:	f3 01       	movw	r30, r6
    3c66:	61 81       	ldd	r22, Z+1	; 0x01
    3c68:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <CheckLetter>
    3c6c:	88 23       	and	r24, r24
    3c6e:	19 f0       	breq	.+6      	; 0x3c76 <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c70:	01 e0       	ldi	r16, 0x01	; 1
    3c72:	10 e0       	ldi	r17, 0x00	; 0
    3c74:	9b cf       	rjmp	.-202    	; 0x3bac <ProcessInput+0xf1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c76:	81 e6       	ldi	r24, 0x61	; 97
    3c78:	99 e7       	ldi	r25, 0x79	; 121
    3c7a:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3c7e:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3c82:	81 e2       	ldi	r24, 0x21	; 33
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3c86:	cb c8       	rjmp	.-3690   	; 0x2e1e <ProcessInput+0x190>
    3c88:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3c8a:	10 82       	st	Z, r1
    3c8c:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3c90:	1d ba       	out	0x1d, r1	; 29
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	28 96       	adiw	r28, 0x08	; 8
    3c96:	ee e0       	ldi	r30, 0x0E	; 14
    3c98:	13 c1       	rjmp	.+550    	; 0x3ec0 <__epilogue_restores__+0x8>

00003c9a <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3c9a:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3c9c:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <PunishmentTime>
    3ca0:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <PunishmentTime+0x1>
    3ca4:	89 2b       	or	r24, r25
    3ca6:	09 f1       	breq	.+66     	; 0x3cea <TextAdventure+0x50>
        PunishmentCount = getClock();
    3ca8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <getClock>
        if (PunishmentCount < PunishmentTime)
    3cac:	20 91 10 39 	lds	r18, 0x3910	; 0x803910 <PunishmentTime>
    3cb0:	30 91 11 39 	lds	r19, 0x3911	; 0x803911 <PunishmentTime+0x1>
    3cb4:	82 17       	cp	r24, r18
    3cb6:	93 07       	cpc	r25, r19
    3cb8:	08 f4       	brcc	.+2      	; 0x3cbc <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3cba:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3cbc:	ac 01       	movw	r20, r24
    3cbe:	42 1b       	sub	r20, r18
    3cc0:	53 0b       	sbc	r21, r19
    3cc2:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3cc4:	4b 30       	cpi	r20, 0x0B	; 11
    3cc6:	51 05       	cpc	r21, r1
    3cc8:	30 f0       	brcs	.+12     	; 0x3cd6 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3cca:	10 92 10 39 	sts	0x3910, r1	; 0x803910 <PunishmentTime>
    3cce:	10 92 11 39 	sts	0x3911, r1	; 0x803911 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3cd2:	2a e0       	ldi	r18, 0x0A	; 10
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3cd6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    3cda:	81 11       	cpse	r24, r1
    3cdc:	06 c0       	rjmp	.+12     	; 0x3cea <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3cde:	65 e0       	ldi	r22, 0x05	; 5
    3ce0:	62 1b       	sub	r22, r18
    3ce2:	8a e0       	ldi	r24, 0x0A	; 10
    3ce4:	82 1b       	sub	r24, r18
    3ce6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3cea:	0e 94 42 13 	call	0x2684	; 0x2684 <CheckSend>
    3cee:	88 23       	and	r24, r24
    3cf0:	11 f0       	breq	.+4      	; 0x3cf6 <TextAdventure+0x5c>
    3cf2:	c1 e0       	ldi	r28, 0x01	; 1
    3cf4:	18 c0       	rjmp	.+48     	; 0x3d26 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3cf6:	0e 94 98 13 	call	0x2730	; 0x2730 <CheckResponse>
    3cfa:	c8 2f       	mov	r28, r24
    3cfc:	81 11       	cpse	r24, r1
    3cfe:	f9 cf       	rjmp	.-14     	; 0x3cf2 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3d00:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <PunishmentTime>
    3d04:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <PunishmentTime+0x1>
    3d08:	89 2b       	or	r24, r25
    3d0a:	69 f4       	brne	.+26     	; 0x3d26 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d0c:	87 e7       	ldi	r24, 0x77	; 119
    3d0e:	98 e3       	ldi	r25, 0x38	; 56
    3d10:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <CheckInput>
    3d14:	c8 2f       	mov	r28, r24
    3d16:	81 11       	cpse	r24, r1
    3d18:	05 c0       	rjmp	.+10     	; 0x3d24 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3d1a:	87 e7       	ldi	r24, 0x77	; 119
    3d1c:	98 e3       	ldi	r25, 0x38	; 56
    3d1e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <ProcessInput>
    3d22:	01 c0       	rjmp	.+2      	; 0x3d26 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d24:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d26:	8c 2f       	mov	r24, r28
    3d28:	cf 91       	pop	r28
    3d2a:	08 95       	ret

00003d2c <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d2c:	0e 94 cf 04 	call	0x99e	; 0x99e <Setup>
    LoadGameState();
    3d30:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LoadGameState>
    gameState[0]|=1;
    3d34:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <gameState>
    3d38:	81 60       	ori	r24, 0x01	; 1
    3d3a:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <gameState>
    SelfTest();
    3d3e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <SelfTest>
    3d42:	c0 91 08 bf 	lds	r28, 0xBF08	; 0x80bf08 <__bss_end+0x83ed>
            if (buttonState != 0xff) {
                if ((effect & 0xffe0)==0)
                    effect = 0x13f + (buttonState<<5);
                iLED[CAT] = dimValue;
            } else {
                iLED[CAT] = 0;
    3d46:	d0 e0       	ldi	r29, 0x00	; 0
    3d48:	c4 53       	subi	r28, 0x34	; 52
    3d4a:	d5 4c       	sbci	r29, 0xC5	; 197
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3d4c:	0f e1       	ldi	r16, 0x1F	; 31
    3d4e:	10 e0       	ldi	r17, 0x00	; 0
    LoadGameState();
    gameState[0]|=1;
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3d50:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <GenerateAudio>
    3d54:	88 23       	and	r24, r24
    3d56:	e1 f3       	breq	.-8      	; 0x3d50 <main+0x24>

            //Some sound effects and button readout 
            lastButtonState = buttonState;
    3d58:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3d5c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3d60:	0e 94 c5 08 	call	0x118a	; 0x118a <CheckButtons>
    3d64:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            if (buttonState != 0xff) {
    3d68:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6a:	a9 f0       	breq	.+42     	; 0x3d96 <main+0x6a>
                if ((effect & 0xffe0)==0)
    3d6c:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <effect>
    3d70:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <effect+0x1>
    3d74:	20 7e       	andi	r18, 0xE0	; 224
    3d76:	23 2b       	or	r18, r19
    3d78:	51 f4       	brne	.+20     	; 0x3d8e <main+0x62>
                    effect = 0x13f + (buttonState<<5);
    3d7a:	20 e2       	ldi	r18, 0x20	; 32
    3d7c:	82 9f       	mul	r24, r18
    3d7e:	c0 01       	movw	r24, r0
    3d80:	11 24       	eor	r1, r1
    3d82:	81 5c       	subi	r24, 0xC1	; 193
    3d84:	9e 4f       	sbci	r25, 0xFE	; 254
    3d86:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3d8a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                iLED[CAT] = dimValue;
    3d8e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    3d92:	88 83       	st	Y, r24
    3d94:	01 c0       	rjmp	.+2      	; 0x3d98 <main+0x6c>
            } else {
                iLED[CAT] = 0;
    3d96:	18 82       	st	Y, r1
            }
            --buttonMark;
    3d98:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    3d9c:	81 50       	subi	r24, 0x01	; 1
    3d9e:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>

            //Switch between audio port input (badge to badge comms) and onboard temperature sensor
            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3da2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3da6:	82 31       	cpi	r24, 0x12	; 18
    3da8:	19 f4       	brne	.+6      	; 0x3db0 <main+0x84>
    3daa:	0e 94 b6 08 	call	0x116c	; 0x116c <SelectAuIn>
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <main+0x88>
    3db0:	0e 94 a7 08 	call	0x114e	; 0x114e <SelectTSens>

            GenerateBlinks();
    3db4:	0e 94 39 0b 	call	0x1672	; 0x1672 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3db8:	70 df       	rcall	.-288    	; 0x3c9a <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3dba:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MagnetMaze>
            LanyardCode();
    3dbe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LanyardCode>
            BastetDictates();
    3dc2:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <BastetDictates>
            MakeFriends();
    3dc6:	0e 94 86 00 	call	0x10c	; 0x10c <MakeFriends>

            //Save progress
            SaveGameState();
    3dca:	0e 94 72 09 	call	0x12e4	; 0x12e4 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3dce:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <adcPhot>
    3dd2:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    3dd6:	0a 97       	sbiw	r24, 0x0a	; 10
    3dd8:	18 f4       	brcc	.+6      	; 0x3de0 <main+0xb4>
    3dda:	84 e7       	ldi	r24, 0x74	; 116
    3ddc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3de0:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <adcPhot>
    3de4:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    3de8:	85 36       	cpi	r24, 0x65	; 101
    3dea:	91 05       	cpc	r25, r1
    3dec:	18 f0       	brcs	.+6      	; 0x3df4 <main+0xc8>
    3dee:	84 ef       	ldi	r24, 0xF4	; 244
    3df0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3df4:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3df8:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3dfc:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e00:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e04:	46 e0       	ldi	r20, 0x06	; 6
    3e06:	36 95       	lsr	r19
    3e08:	27 95       	ror	r18
    3e0a:	4a 95       	dec	r20
    3e0c:	e1 f7       	brne	.-8      	; 0x3e06 <main+0xda>
    3e0e:	82 1b       	sub	r24, r18
    3e10:	93 0b       	sbc	r25, r19
    3e12:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e16:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3e1a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e1e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e22:	93 95       	inc	r25
    3e24:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e28:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3e2c:	20 91 c6 3a 	lds	r18, 0x3AC6	; 0x803ac6 <adcPhot>
    3e30:	30 91 c7 3a 	lds	r19, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    3e34:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e38:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e3c:	22 0f       	add	r18, r18
    3e3e:	23 2f       	mov	r18, r19
    3e40:	22 1f       	adc	r18, r18
    3e42:	33 0b       	sbc	r19, r19
    3e44:	31 95       	neg	r19
    3e46:	f8 01       	movw	r30, r16
    3e48:	e2 1b       	sub	r30, r18
    3e4a:	f3 0b       	sbc	r31, r19
    3e4c:	ea 5d       	subi	r30, 0xDA	; 218
    3e4e:	f0 44       	sbci	r31, 0x40	; 64
    3e50:	20 81       	ld	r18, Z
    3e52:	82 1b       	sub	r24, r18
    3e54:	91 09       	sbc	r25, r1
    3e56:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e5a:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3e5e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e62:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e66:	66 e0       	ldi	r22, 0x06	; 6
    3e68:	96 95       	lsr	r25
    3e6a:	87 95       	ror	r24
    3e6c:	6a 95       	dec	r22
    3e6e:	e1 f7       	brne	.-8      	; 0x3e68 <main+0x13c>
    3e70:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3e74:	0e 94 86 0a 	call	0x150c	; 0x150c <HotSummer>
    3e78:	6b cf       	rjmp	.-298    	; 0x3d50 <main+0x24>

00003e7a <__tablejump2__>:
    3e7a:	ee 0f       	add	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	05 90       	lpm	r0, Z+
    3e80:	f4 91       	lpm	r31, Z
    3e82:	e0 2d       	mov	r30, r0
    3e84:	09 94       	ijmp

00003e86 <__prologue_saves__>:
    3e86:	2f 92       	push	r2
    3e88:	3f 92       	push	r3
    3e8a:	4f 92       	push	r4
    3e8c:	5f 92       	push	r5
    3e8e:	6f 92       	push	r6
    3e90:	7f 92       	push	r7
    3e92:	8f 92       	push	r8
    3e94:	9f 92       	push	r9
    3e96:	af 92       	push	r10
    3e98:	bf 92       	push	r11
    3e9a:	cf 92       	push	r12
    3e9c:	df 92       	push	r13
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
    3eae:	ca 1b       	sub	r28, r26
    3eb0:	db 0b       	sbc	r29, r27
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	09 94       	ijmp

00003eb8 <__epilogue_restores__>:
    3eb8:	2a 88       	ldd	r2, Y+18	; 0x12
    3eba:	39 88       	ldd	r3, Y+17	; 0x11
    3ebc:	48 88       	ldd	r4, Y+16	; 0x10
    3ebe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ec0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ec2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ec4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ec6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eca:	b9 84       	ldd	r11, Y+9	; 0x09
    3ecc:	c8 84       	ldd	r12, Y+8	; 0x08
    3ece:	df 80       	ldd	r13, Y+7	; 0x07
    3ed0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ed2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ed4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ed6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ed8:	aa 81       	ldd	r26, Y+2	; 0x02
    3eda:	b9 81       	ldd	r27, Y+1	; 0x01
    3edc:	ce 0f       	add	r28, r30
    3ede:	d1 1d       	adc	r29, r1
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	ed 01       	movw	r28, r26
    3ee6:	08 95       	ret

00003ee8 <_exit>:
    3ee8:	f8 94       	cli

00003eea <__stop_program>:
    3eea:	ff cf       	rjmp	.-2      	; 0x3eea <__stop_program>
