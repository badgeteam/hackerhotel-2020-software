
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00803800  00003e62  00003f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d60  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000102  0000bd60  00003d60  00003e14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002ec  0080382e  0080382e  00003f44  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f74  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000328  00000000  00000000  00003fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d2a  00000000  00000000  000042dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000292b  00000000  00000000  0000b006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b92  00000000  00000000  0000d931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000984  00000000  00000000  000114c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a3c  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000044ed  00000000  00000000  00013884  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  00017d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__vector_6>
      1c:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_7>
      20:	6a c6       	rjmp	.+3284   	; 0xcf6 <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b1 c6       	rjmp	.+3426   	; 0xd98 <__vector_13>
      36:	00 00       	nop
      38:	e2 c6       	rjmp	.+3524   	; 0xdfe <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a0 c7       	rjmp	.+3904   	; 0xf92 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	d3 c7       	rjmp	.+4006   	; 0x1000 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1b c7       	rjmp	.+3638   	; 0xea4 <__vector_27>
      6e:	00 00       	nop
      70:	74 c7       	rjmp	.+3816   	; 0xf5a <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e2 e6       	ldi	r30, 0x62	; 98
      90:	fe e3       	ldi	r31, 0x3E	; 62
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 32       	cpi	r26, 0x2E	; 46
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	ae e2       	ldi	r26, 0x2E	; 46
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 31       	cpi	r26, 0x1A	; 26
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <main>
      b2:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      b8:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <avgVolt.3773>
      bc:	85 e1       	ldi	r24, 0x15	; 21
      be:	90 e0       	ldi	r25, 0x00	; 0
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      c0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      c4:	50 e0       	ldi	r21, 0x00	; 0
      c6:	48 17       	cp	r20, r24
      c8:	59 07       	cpc	r21, r25
      ca:	74 f0       	brlt	.+28     	; 0xe8 <chkVolt250+0x30>
      cc:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	bc 01       	movw	r22, r24
      d4:	68 5f       	subi	r22, 0xF8	; 248
      d6:	7f 4f       	sbci	r23, 0xFF	; 255
      d8:	64 17       	cp	r22, r20
      da:	75 07       	cpc	r23, r21
      dc:	2c f0       	brlt	.+10     	; 0xe8 <chkVolt250+0x30>
      de:	20 93 32 38 	sts	0x3832, r18	; 0x803832 <avgVolt.3773>
            break;
        }
        ++avgVolt;
    }
    return avgVolt;
      e2:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <avgVolt.3773>
      e6:	08 95       	ret
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            break;
        }
        ++avgVolt;
      e8:	2f 5f       	subi	r18, 0xFF	; 255
      ea:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
      ec:	86 3f       	cpi	r24, 0xF6	; 246
      ee:	91 05       	cpc	r25, r1
      f0:	39 f7       	brne	.-50     	; 0xc0 <chkVolt250+0x8>
      f2:	f5 cf       	rjmp	.-22     	; 0xde <chkVolt250+0x26>

000000f4 <MakeFriends>:
    }
    return avgVolt;
}

// Main game loop
uint8_t MakeFriends(){
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     102:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; x++){
        if (CheckState(100+x) == 0) foundAll = 0;
     104:	8c 2f       	mov	r24, r28
     106:	0e 94 a5 0a 	call	0x154a	; 0x154a <CheckState>
     10a:	81 11       	cpse	r24, r1
     10c:	01 c0       	rjmp	.+2      	; 0x110 <MakeFriends+0x1c>
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; x++){
     112:	c8 36       	cpi	r28, 0x68	; 104
     114:	b9 f7       	brne	.-18     	; 0x104 <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     116:	dd 23       	and	r29, r29
     118:	19 f0       	breq	.+6      	; 0x120 <MakeFriends+0x2c>
     11a:	8c e7       	ldi	r24, 0x7C	; 124
     11c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>


    //Checking for headphones
    if (detHdPh) return 0;
     120:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <detHdPh>
     124:	81 11       	cpse	r24, r1
     126:	1e c1       	rjmp	.+572    	; 0x364 <MakeFriends+0x270>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     128:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <progress.3780>
     12c:	81 11       	cpse	r24, r1
     12e:	11 c0       	rjmp	.+34     	; 0x152 <MakeFriends+0x5e>
        setDAC[0] = whoami * 50;
     130:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     134:	22 e3       	ldi	r18, 0x32	; 50
     136:	92 9f       	mul	r25, r18
     138:	90 2d       	mov	r25, r0
     13a:	11 24       	eor	r1, r1
     13c:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	38 e3       	ldi	r19, 0x38	; 56
     144:	20 93 05 38 	sts	0x3805, r18	; 0x803805 <auRepAddr>
     148:	30 93 06 38 	sts	0x3806, r19	; 0x803806 <auRepAddr+0x1>
        auVolume = 255;
     14c:	9f ef       	ldi	r25, 0xFF	; 255
     14e:	90 93 b6 3a 	sts	0x3AB6, r25	; 0x803ab6 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) ||((progress > FIRST_CONTACT))) {
     152:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     156:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	65 50       	subi	r22, 0x05	; 5
     162:	71 09       	sbc	r23, r1
     164:	46 17       	cp	r20, r22
     166:	57 07       	cpc	r21, r23
     168:	64 f0       	brlt	.+24     	; 0x182 <MakeFriends+0x8e>
     16a:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	2b 5f       	subi	r18, 0xFB	; 251
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	24 17       	cp	r18, r20
     176:	35 07       	cpc	r19, r21
     178:	24 f0       	brlt	.+8      	; 0x182 <MakeFriends+0x8e>
     17a:	82 30       	cpi	r24, 0x02	; 2
     17c:	08 f0       	brcs	.+2      	; 0x180 <MakeFriends+0x8c>
     17e:	40 c0       	rjmp	.+128    	; 0x200 <MakeFriends+0x10c>
     180:	ef c0       	rjmp	.+478    	; 0x360 <MakeFriends+0x26c>
        if (progress == NO_OTHER) {
     182:	81 11       	cpse	r24, r1
     184:	0a c0       	rjmp	.+20     	; 0x19a <MakeFriends+0xa6>
            ++chkTmr;
     186:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3782>
     18a:	8f 5f       	subi	r24, 0xFF	; 255
     18c:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3782>
            if (chkTmr >= 8) {
     190:	88 30       	cpi	r24, 0x08	; 8
     192:	08 f4       	brcc	.+2      	; 0x196 <MakeFriends+0xa2>
     194:	e7 c0       	rjmp	.+462    	; 0x364 <MakeFriends+0x270>
                progress = FIRST_CONTACT;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	81 c0       	rjmp	.+258    	; 0x29c <MakeFriends+0x1a8>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	89 f5       	brne	.+98     	; 0x200 <MakeFriends+0x10c>
            jackIn = chkVolt250();
     19e:	8c df       	rcall	.-232    	; 0xb8 <chkVolt250>
     1a0:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <jackIn.3783>
            if (jackIn) {
     1a4:	88 23       	and	r24, r24
     1a6:	49 f1       	breq	.+82     	; 0x1fa <MakeFriends+0x106>
                ++chkTmr;
     1a8:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <chkTmr.3782>
     1ac:	9f 5f       	subi	r25, 0xFF	; 255
     1ae:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <chkTmr.3782>
                if (chkTmr >= SHORT_WAIT){
     1b2:	98 30       	cpi	r25, 0x08	; 8
     1b4:	08 f4       	brcc	.+2      	; 0x1b8 <MakeFriends+0xc4>
     1b6:	d6 c0       	rjmp	.+428    	; 0x364 <MakeFriends+0x270>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1b8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     1bc:	91 30       	cpi	r25, 0x01	; 1
     1be:	29 f4       	brne	.+10     	; 0x1ca <MakeFriends+0xd6>
     1c0:	83 50       	subi	r24, 0x03	; 3
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	b8 f4       	brcc	.+46     	; 0x1f4 <MakeFriends+0x100>
                        progress = SECOND_LOVE; 
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	69 c0       	rjmp	.+210    	; 0x29c <MakeFriends+0x1a8>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1ca:	92 30       	cpi	r25, 0x02	; 2
     1cc:	31 f4       	brne	.+12     	; 0x1da <MakeFriends+0xe6>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	d1 f3       	breq	.-12     	; 0x1c6 <MakeFriends+0xd2>
     1d2:	85 50       	subi	r24, 0x05	; 5
     1d4:	82 30       	cpi	r24, 0x02	; 2
     1d6:	70 f4       	brcc	.+28     	; 0x1f4 <MakeFriends+0x100>
     1d8:	f6 cf       	rjmp	.-20     	; 0x1c6 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1da:	93 30       	cpi	r25, 0x03	; 3
     1dc:	39 f4       	brne	.+14     	; 0x1ec <MakeFriends+0xf8>
     1de:	9c ef       	ldi	r25, 0xFC	; 252
     1e0:	98 0f       	add	r25, r24
     1e2:	92 30       	cpi	r25, 0x02	; 2
     1e4:	80 f3       	brcs	.-32     	; 0x1c6 <MakeFriends+0xd2>
     1e6:	87 30       	cpi	r24, 0x07	; 7
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <MakeFriends+0x100>
     1ea:	ed cf       	rjmp	.-38     	; 0x1c6 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1ec:	94 30       	cpi	r25, 0x04	; 4
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <MakeFriends+0x100>
     1f0:	85 50       	subi	r24, 0x05	; 5
     1f2:	e7 cf       	rjmp	.-50     	; 0x1c2 <MakeFriends+0xce>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     1f4:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <progress.3780>
     1f8:	53 c0       	rjmp	.+166    	; 0x2a0 <MakeFriends+0x1ac>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     1fa:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <chkTmr.3782>
     1fe:	b0 c0       	rjmp	.+352    	; 0x360 <MakeFriends+0x26c>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	09 f0       	breq	.+2      	; 0x206 <MakeFriends+0x112>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <MakeFriends+0x1b2>
            ++chkTmr;
     206:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3782>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3782>
     210:	cc e8       	ldi	r28, 0x8C	; 140
     212:	dd eb       	ldi	r29, 0xBD	; 189
     214:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     216:	0d 81       	ldd	r16, Y+5	; 0x05
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	0e 94 77 09 	call	0x12ee	; 0x12ee <lfsr>
     21e:	87 ff       	sbrs	r24, 7
     220:	03 c0       	rjmp	.+6      	; 0x228 <MakeFriends+0x134>
     222:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     226:	01 c0       	rjmp	.+2      	; 0x22a <MakeFriends+0x136>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	f8 01       	movw	r30, r16
     22c:	e6 53       	subi	r30, 0x36	; 54
     22e:	f5 4c       	sbci	r31, 0xC5	; 197
     230:	80 83       	st	Z, r24
     232:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     234:	f7 01       	movw	r30, r14
     236:	00 81       	ld	r16, Z
     238:	10 e0       	ldi	r17, 0x00	; 0
     23a:	0e 94 77 09 	call	0x12ee	; 0x12ee <lfsr>
     23e:	87 ff       	sbrs	r24, 7
     240:	03 c0       	rjmp	.+6      	; 0x248 <MakeFriends+0x154>
     242:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     246:	01 c0       	rjmp	.+2      	; 0x24a <MakeFriends+0x156>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	f8 01       	movw	r30, r16
     24c:	e6 53       	subi	r30, 0x36	; 54
     24e:	f5 4c       	sbci	r31, 0xC5	; 197
     250:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     252:	fd eb       	ldi	r31, 0xBD	; 189
     254:	c1 39       	cpi	r28, 0x91	; 145
     256:	df 07       	cpc	r29, r31
     258:	e9 f6       	brne	.-70     	; 0x214 <MakeFriends+0x120>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     25a:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3782>
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	40 f0       	brcs	.+16     	; 0x272 <MakeFriends+0x17e>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     262:	2f ef       	ldi	r18, 0xFF	; 255
     264:	44 e6       	ldi	r20, 0x64	; 100
     266:	68 e0       	ldi	r22, 0x08	; 8
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	0e 94 c8 09 	call	0x1390	; 0x1390 <floatAround>
     26e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     272:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3782>
     276:	8a 3f       	cpi	r24, 0xFA	; 250
     278:	08 f4       	brcc	.+2      	; 0x27c <MakeFriends+0x188>
     27a:	74 c0       	rjmp	.+232    	; 0x364 <MakeFriends+0x270>
                candidate = jackIn-whoami;
     27c:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     280:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <jackIn.3783>
     284:	89 1b       	sub	r24, r25
     286:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <__data_end>
                if (candidate > whoami) setDAC[0] = 250; else setDAC[0] = 0;
     28a:	98 17       	cp	r25, r24
     28c:	20 f4       	brcc	.+8      	; 0x296 <MakeFriends+0x1a2>
     28e:	8a ef       	ldi	r24, 0xFA	; 250
     290:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     294:	02 c0       	rjmp	.+4      	; 0x29a <MakeFriends+0x1a6>
     296:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <progress.3780>
                chkTmr = 0;
     2a0:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <chkTmr.3782>
     2a4:	5f c0       	rjmp	.+190    	; 0x364 <MakeFriends+0x270>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	e1 f5       	brne	.+120    	; 0x322 <MakeFriends+0x22e>
            chkTmr++;
     2aa:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3782>
     2ae:	8f 5f       	subi	r24, 0xFF	; 255
     2b0:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3782>
            if (chkTmr >= SHORT_WAIT) {
     2b4:	88 30       	cpi	r24, 0x08	; 8
     2b6:	08 f4       	brcc	.+2      	; 0x2ba <MakeFriends+0x1c6>
                if (chkVolt250() == 5) {
     2b8:	55 c0       	rjmp	.+170    	; 0x364 <MakeFriends+0x270>
     2ba:	fe de       	rcall	.-516    	; 0xb8 <chkVolt250>
     2bc:	85 30       	cpi	r24, 0x05	; 5
     2be:	09 f0       	breq	.+2      	; 0x2c2 <MakeFriends+0x1ce>
     2c0:	99 cf       	rjmp	.-206    	; 0x1f4 <MakeFriends+0x100>
                    UpdateState(99+candidate);
     2c2:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <__data_end>
     2c6:	8d 59       	subi	r24, 0x9D	; 157
     2c8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
                    UpdateState(99+whoami);
     2cc:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     2d0:	8d 59       	subi	r24, 0x9D	; 157
     2d2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2d6:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <__data_end>
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     2da:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <whoami>
     2de:	ac e8       	ldi	r26, 0x8C	; 140
     2e0:	bd eb       	ldi	r27, 0xBD	; 189
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	ed 01       	movw	r28, r26
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	ec 91       	ld	r30, X
     2ea:	15 97       	sbiw	r26, 0x05	; 5
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	82 17       	cp	r24, r18
     2f0:	18 f4       	brcc	.+6      	; 0x2f8 <MakeFriends+0x204>
     2f2:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <MakeFriends+0x206>
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	e6 53       	subi	r30, 0x36	; 54
     2fc:	f5 4c       	sbci	r31, 0xC5	; 197
     2fe:	90 83       	st	Z, r25
     300:	11 96       	adiw	r26, 0x01	; 1
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     302:	e8 81       	ld	r30, Y
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	83 17       	cp	r24, r19
     308:	18 f4       	brcc	.+6      	; 0x310 <MakeFriends+0x21c>
     30a:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     30e:	01 c0       	rjmp	.+2      	; 0x312 <MakeFriends+0x21e>
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	e6 53       	subi	r30, 0x36	; 54
     314:	f5 4c       	sbci	r31, 0xC5	; 197
     316:	90 83       	st	Z, r25
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	85 30       	cpi	r24, 0x05	; 5
     31c:	19 f7       	brne	.-58     	; 0x2e4 <MakeFriends+0x1f0>
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
                    }   
                    progress = FOURTH_BASE;
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	bd cf       	rjmp	.-134    	; 0x29c <MakeFriends+0x1a8>
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
     322:	84 30       	cpi	r24, 0x04	; 4
            if (chkVolt250() == 5) {
     324:	f9 f4       	brne	.+62     	; 0x364 <MakeFriends+0x270>
     326:	c8 de       	rcall	.-624    	; 0xb8 <chkVolt250>
     328:	85 30       	cpi	r24, 0x05	; 5
     32a:	e1 f4       	brne	.+56     	; 0x364 <MakeFriends+0x270>
                chkTmr++;
     32c:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3782>
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3782>
                if (chkTmr >= LONG_WAIT) {
     336:	8a 3f       	cpi	r24, 0xFA	; 250
     338:	a8 f0       	brcs	.+42     	; 0x364 <MakeFriends+0x270>
     33a:	ec e8       	ldi	r30, 0x8C	; 140
     33c:	fd eb       	ldi	r31, 0xBD	; 189
     33e:	81 e9       	ldi	r24, 0x91	; 145
     340:	9d eb       	ldi	r25, 0xBD	; 189
     342:	ef 01       	movw	r28, r30
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = 0;
     344:	a5 81       	ldd	r26, Z+5	; 0x05
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	a6 53       	subi	r26, 0x36	; 54
     34a:	b5 4c       	sbci	r27, 0xC5	; 197
     34c:	1c 92       	st	X, r1
     34e:	31 96       	adiw	r30, 0x01	; 1
                        iLED[WING[R][x]] = 0;
     350:	a8 81       	ld	r26, Y
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	a6 53       	subi	r26, 0x36	; 54
     356:	b5 4c       	sbci	r27, 0xC5	; 197
     358:	1c 92       	st	X, r1
        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
            if (chkVolt250() == 5) {
                chkTmr++;
                if (chkTmr >= LONG_WAIT) {
                    for (uint8_t x=0; x<5; ++x){
     35a:	8e 17       	cp	r24, r30
     35c:	9f 07       	cpc	r25, r31
     35e:	89 f7       	brne	.-30     	; 0x342 <MakeFriends+0x24e>
                    }                    
                }
            }
        }

    } else progress = NO_OTHER;
     360:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <progress.3780>
      
    return 0;
}
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	08 95       	ret

00000374 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     37a:	e6 e2       	ldi	r30, 0x26	; 38
     37c:	f4 e0       	ldi	r31, 0x04	; 4
     37e:	80 83       	st	Z, r24
     380:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     384:	a1 e2       	ldi	r26, 0x21	; 33
     386:	b4 e0       	ldi	r27, 0x04	; 4
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	9c 93       	st	X, r25
     38c:	90 83       	st	Z, r25
     38e:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     392:	e0 e1       	ldi	r30, 0x10	; 16
     394:	f8 e0       	ldi	r31, 0x08	; 8
     396:	97 e0       	ldi	r25, 0x07	; 7
     398:	96 83       	std	Z+6, r25	; 0x06
     39a:	98 e0       	ldi	r25, 0x08	; 8
     39c:	94 83       	std	Z+4, r25	; 0x04
     39e:	83 83       	std	Z+3, r24	; 0x03
     3a0:	8c 93       	st	X, r24
     3a2:	85 81       	ldd	r24, Z+5	; 0x05
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	85 83       	std	Z+5, r24	; 0x05
     3a8:	85 81       	ldd	r24, Z+5	; 0x05
     3aa:	84 6c       	ori	r24, 0xC4	; 196
     3ac:	85 83       	std	Z+5, r24	; 0x05
     3ae:	08 95       	ret

000003b0 <I2C_recover>:
     3b0:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3b4:	88 60       	ori	r24, 0x08	; 8
     3b6:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ba:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3ce:	30 e1       	ldi	r19, 0x10	; 16
     3d0:	3a 95       	dec	r19
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <I2C_recover+0x20>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <I2C_recover+0x26>
     3d6:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3da:	30 e1       	ldi	r19, 0x10	; 16
     3dc:	3a 95       	dec	r19
     3de:	f1 f7       	brne	.-4      	; 0x3dc <I2C_recover+0x2c>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <I2C_recover+0x32>
     3e2:	91 50       	subi	r25, 0x01	; 1
     3e4:	89 f7       	brne	.-30     	; 0x3c8 <I2C_recover+0x18>
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ec:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3f6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	91 60       	ori	r25, 0x01	; 1
     3fc:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     400:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     404:	94 6c       	ori	r25, 0xC4	; 196
     406:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40a:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     40e:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     412:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     416:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     424:	84 6c       	ori	r24, 0xC4	; 196
     426:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42a:	08 95       	ret

0000042c <I2C_start>:
     42c:	28 2f       	mov	r18, r24
     42e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	90 6c       	ori	r25, 0xC0	; 192
     434:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     438:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43c:	89 2f       	mov	r24, r25
     43e:	84 70       	andi	r24, 0x04	; 4
     440:	92 fd       	sbrc	r25, 2
     442:	03 c0       	rjmp	.+6      	; 0x44a <I2C_start+0x1e>
     444:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     448:	08 95       	ret
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	08 95       	ret

0000044e <I2C_wait_ACK>:
     44e:	8c e0       	ldi	r24, 0x0C	; 12
     450:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
     454:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     458:	87 fd       	sbrc	r24, 7
     45a:	0a c0       	rjmp	.+20     	; 0x470 <I2C_wait_ACK+0x22>
     45c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     460:	86 fd       	sbrc	r24, 6
     462:	06 c0       	rjmp	.+12     	; 0x470 <I2C_wait_ACK+0x22>
     464:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     468:	81 11       	cpse	r24, r1
     46a:	f4 cf       	rjmp	.-24     	; 0x454 <I2C_wait_ACK+0x6>
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	08 95       	ret
     470:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     474:	80 6c       	ori	r24, 0xC0	; 192
     476:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47e:	82 fd       	sbrc	r24, 2
     480:	09 c0       	rjmp	.+18     	; 0x494 <I2C_wait_ACK+0x46>
     482:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     486:	83 fd       	sbrc	r24, 3
     488:	07 c0       	rjmp	.+14     	; 0x498 <I2C_wait_ACK+0x4a>
     48a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48e:	82 95       	swap	r24
     490:	81 70       	andi	r24, 0x01	; 1
     492:	08 95       	ret
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	08 95       	ret
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	08 95       	ret

0000049c <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     49c:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4a4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a8:	89 2f       	mov	r24, r25
     4aa:	83 70       	andi	r24, 0x03	; 3
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4b4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b8:	97 fd       	sbrc	r25, 7
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4bc:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <timeout_I2C>
     4c0:	91 11       	cpse	r25, r1
     4c2:	f8 cf       	rjmp	.-16     	; 0x4b4 <I2C_read+0x18>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4c8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4cc:	90 6c       	ori	r25, 0xC0	; 192
     4ce:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4d2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d6:	92 fd       	sbrc	r25, 2
     4d8:	1e c0       	rjmp	.+60     	; 0x516 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4da:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4de:	93 fd       	sbrc	r25, 3
     4e0:	1d c0       	rjmp	.+58     	; 0x51c <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4e2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e6:	89 2f       	mov	r24, r25
     4e8:	80 71       	andi	r24, 0x10	; 16
     4ea:	94 fd       	sbrc	r25, 4
     4ec:	16 c0       	rjmp	.+44     	; 0x51a <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     4ee:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4f2:	61 11       	cpse	r22, r1
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <I2C_read+0x5e>
     4f6:	9b 7f       	andi	r25, 0xFB	; 251
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4fa:	94 60       	ori	r25, 0x04	; 4
     4fc:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     500:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     504:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     506:	61 11       	cpse	r22, r1
     508:	09 c0       	rjmp	.+18     	; 0x51c <I2C_read+0x80>
     50a:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     50e:	92 60       	ori	r25, 0x02	; 2
     510:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     514:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     51a:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     51c:	08 95       	ret

0000051e <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     51e:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     520:	8c e0       	ldi	r24, 0x0C	; 12
     522:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     526:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     52a:	93 70       	andi	r25, 0x03	; 3
     52c:	92 30       	cpi	r25, 0x02	; 2
     52e:	b1 f4       	brne	.+44     	; 0x55c <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     530:	80 81       	ld	r24, Z
     532:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     536:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     53a:	86 fd       	sbrc	r24, 6
     53c:	06 c0       	rjmp	.+12     	; 0x54a <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     53e:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     542:	81 11       	cpse	r24, r1
     544:	f8 cf       	rjmp	.-16     	; 0x536 <I2C_write+0x18>
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     54a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     54e:	82 fd       	sbrc	r24, 2
     550:	07 c0       	rjmp	.+14     	; 0x560 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     552:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     556:	82 95       	swap	r24
     558:	81 70       	andi	r24, 0x01	; 1
     55a:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     560:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     562:	08 95       	ret

00000564 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     564:	e0 e1       	ldi	r30, 0x10	; 16
     566:	f8 e0       	ldi	r31, 0x08	; 8
     568:	84 81       	ldd	r24, Z+4	; 0x04
     56a:	83 60       	ori	r24, 0x03	; 3
     56c:	84 83       	std	Z+4, r24	; 0x04
     56e:	08 95       	ret

00000570 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	6b 01       	movw	r12, r22
     580:	f4 2e       	mov	r15, r20
     582:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     584:	18 2f       	mov	r17, r24
     586:	11 0f       	add	r17, r17
     588:	81 2f       	mov	r24, r17
     58a:	50 df       	rcall	.-352    	; 0x42c <I2C_start>
	if (status != 0) goto error;
     58c:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     58e:	2b c0       	rjmp	.+86     	; 0x5e6 <I2C_read_bytes+0x76>
     590:	5e df       	rcall	.-324    	; 0x44e <I2C_wait_ACK>
	if (status == 1) {
     592:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     594:	19 f4       	brne	.+6      	; 0x59c <I2C_read_bytes+0x2c>
     596:	e6 df       	rcall	.-52     	; 0x564 <I2C_stop>
		return 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	27 c0       	rjmp	.+78     	; 0x5ea <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     59c:	81 11       	cpse	r24, r1
     59e:	23 c0       	rjmp	.+70     	; 0x5e6 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     5a0:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     5a2:	49 f0       	breq	.+18     	; 0x5b6 <I2C_read_bytes+0x46>
     5a4:	c6 01       	movw	r24, r12
     5a6:	bb df       	rcall	.-138    	; 0x51e <I2C_write>
	    if (status != 0) goto error;
     5a8:	81 11       	cpse	r24, r1
     5aa:	1d c0       	rjmp	.+58     	; 0x5e6 <I2C_read_bytes+0x76>
        ++reg_ptr;
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	c8 1a       	sub	r12, r24
     5b0:	d8 0a       	sbc	r13, r24
        --reg_len;
     5b2:	fa 94       	dec	r15
     5b4:	f5 cf       	rjmp	.-22     	; 0x5a0 <I2C_read_bytes+0x30>
     5b6:	01 34       	cpi	r16, 0x41	; 65
     5b8:	08 f0       	brcs	.+2      	; 0x5bc <I2C_read_bytes+0x4c>
     5ba:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5bc:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5be:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5c2:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5c4:	40 f0       	brcs	.+16     	; 0x5d6 <I2C_read_bytes+0x66>
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	ce 01       	movw	r24, r28
     5ca:	68 df       	rcall	.-304    	; 0x49c <I2C_read>
		if (status != 0) goto error;
     5cc:	81 11       	cpse	r24, r1
     5ce:	0b c0       	rjmp	.+22     	; 0x5e6 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5d0:	21 96       	adiw	r28, 0x01	; 1
     5d2:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5d4:	f6 cf       	rjmp	.-20     	; 0x5c2 <I2C_read_bytes+0x52>
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5da:	60 df       	rcall	.-320    	; 0x49c <I2C_read>
     5dc:	81 11       	cpse	r24, r1
	I2C_stop();
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <I2C_read_bytes+0x76>
     5e0:	c1 df       	rcall	.-126    	; 0x564 <I2C_stop>
	return 0;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5e6:	e4 de       	rcall	.-568    	; 0x3b0 <I2C_recover>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5ea:	df 91       	pop	r29
}
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	08 95       	ret

000005fa <initLanyard>:
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     5fa:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardPos>
    lanyardCnt      = 0;
     5fe:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <lanyardCnt>
    lanyardState    = TRUE;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <lanyardState>
    lastButtonState = 0xff;
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    iLED[CAT]       = 0;
     60e:	e0 91 88 bd 	lds	r30, 0xBD88	; 0x80bd88 <__bss_end+0x826e>
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e6 53       	subi	r30, 0x36	; 54
     616:	f5 4c       	sbci	r31, 0xC5	; 197
     618:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     61a:	e0 91 99 bd 	lds	r30, 0xBD99	; 0x80bd99 <__bss_end+0x827f>
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e6 53       	subi	r30, 0x36	; 54
     622:	f5 4c       	sbci	r31, 0xC5	; 197
     624:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     626:	e0 91 98 bd 	lds	r30, 0xBD98	; 0x80bd98 <__bss_end+0x827e>
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	e6 53       	subi	r30, 0x36	; 54
     62e:	f5 4c       	sbci	r31, 0xC5	; 197
     630:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     632:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	e6 53       	subi	r30, 0x36	; 54
     63a:	f5 4c       	sbci	r31, 0xC5	; 197
     63c:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     63e:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e6 53       	subi	r30, 0x36	; 54
     646:	f5 4c       	sbci	r31, 0xC5	; 197
     648:	10 82       	st	Z, r1
     64a:	a0 ea       	ldi	r26, 0xA0	; 160
     64c:	bd eb       	ldi	r27, 0xBD	; 189
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     64e:	ed 91       	ld	r30, X+
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	e6 53       	subi	r30, 0x36	; 54
     654:	f5 4c       	sbci	r31, 0xC5	; 197
     656:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     658:	8d eb       	ldi	r24, 0xBD	; 189
     65a:	a6 3a       	cpi	r26, 0xA6	; 166
     65c:	b8 07       	cpc	r27, r24
     65e:	b9 f7       	brne	.-18     	; 0x64e <initLanyard+0x54>
        iLED[HCKR[G][i]] = 0;
}
     660:	08 95       	ret

00000662 <LanyardCode>:

// Main game loop
uint8_t LanyardCode(){
     662:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     664:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	71 f4       	brne	.+28     	; 0x688 <LanyardCode+0x26>
     66c:	6a e0       	ldi	r22, 0x0A	; 10
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <lanyardLastActive>
     674:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <lanyardLastActive+0x1>
     678:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <idleTimeout>
     67c:	88 23       	and	r24, r24
     67e:	21 f0       	breq	.+8      	; 0x688 <LanyardCode+0x26>
        /* clean up maze game and go back to text game */
        initLanyard();
     680:	bc df       	rcall	.-136    	; 0x5fa <initLanyard>
        gameNow = TEXT;
     682:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     686:	bf c0       	rjmp	.+382    	; 0x806 <LanyardCode+0x1a4>
    }

    if (CheckState(LANYARD_COMPLETED))
     688:	8b e7       	ldi	r24, 0x7B	; 123
     68a:	5f d7       	rcall	.+3774   	; 0x154a <CheckState>
     68c:	81 11       	cpse	r24, r1
     68e:	bb c0       	rjmp	.+374    	; 0x806 <LanyardCode+0x1a4>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     690:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     694:	88 23       	and	r24, r24
     696:	19 f0       	breq	.+6      	; 0x69e <LanyardCode+0x3c>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	09 f0       	breq	.+2      	; 0x69e <LanyardCode+0x3c>
     69c:	b4 c0       	rjmp	.+360    	; 0x806 <LanyardCode+0x1a4>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     69e:	c0 91 88 bd 	lds	r28, 0xBD88	; 0x80bd88 <__bss_end+0x826e>
     6a2:	ec 2f       	mov	r30, r28
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <buttonState>
     6aa:	9f 3f       	cpi	r25, 0xFF	; 255
     6ac:	19 f0       	breq	.+6      	; 0x6b4 <LanyardCode+0x52>
     6ae:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <LanyardCode+0x54>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	e6 53       	subi	r30, 0x36	; 54
     6b8:	f5 4c       	sbci	r31, 0xC5	; 197
     6ba:	80 83       	st	Z, r24

    if ( (buttonState & 0xf0) == 0)
     6bc:	89 2f       	mov	r24, r25
     6be:	80 7f       	andi	r24, 0xF0	; 240
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <LanyardCode+0x62>
     6c2:	a1 c0       	rjmp	.+322    	; 0x806 <LanyardCode+0x1a4>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     6c4:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <lastButtonState>
     6c8:	89 27       	eor	r24, r25
     6ca:	8f 70       	andi	r24, 0x0F	; 15
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <LanyardCode+0x6e>
     6ce:	9b c0       	rjmp	.+310    	; 0x806 <LanyardCode+0x1a4>
        return 0;

    lanyardLastActive = getClock();
     6d0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <getClock>
     6d4:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <lanyardLastActive>
     6d8:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     6dc:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <lastButtonState>
     6e0:	8f 3f       	cpi	r24, 0xFF	; 255
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <LanyardCode+0x84>
     6e4:	8c c0       	rjmp	.+280    	; 0x7fe <LanyardCode+0x19c>
        switch (buttonState & 0x0f) {
     6e6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	61 f0       	breq	.+24     	; 0x708 <LanyardCode+0xa6>
     6f0:	28 f4       	brcc	.+10     	; 0x6fc <LanyardCode+0x9a>
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	69 f4       	brne	.+26     	; 0x710 <LanyardCode+0xae>
            case 0b0001:
                digit = 0;
     6f6:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <digit>
                break;
     6fa:	0d c0       	rjmp	.+26     	; 0x716 <LanyardCode+0xb4>
        return 0;

    lanyardLastActive = getClock();

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     6fc:	84 30       	cpi	r24, 0x04	; 4
     6fe:	31 f0       	breq	.+12     	; 0x70c <LanyardCode+0xaa>
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	31 f4       	brne	.+12     	; 0x710 <LanyardCode+0xae>
            case 0b0100:
                digit = 3;
                break;

            case 0b1000:
                digit = 2;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	05 c0       	rjmp	.+10     	; 0x712 <LanyardCode+0xb0>
            case 0b0001:
                digit = 0;
                break;

            case 0b0010:
                digit = 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	03 c0       	rjmp	.+6      	; 0x712 <LanyardCode+0xb0>
                break;

            case 0b0100:
                digit = 3;
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	01 c0       	rjmp	.+2      	; 0x712 <LanyardCode+0xb0>
            case 0b1000:
                digit = 2;
                break;

            default:
                digit = 0xff;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <digit>
                break;
        }
        gameNow = LANYARD;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
        /* TODO play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     71c:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <lanyardPos>
     720:	e8 2f       	mov	r30, r24
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	e0 59       	subi	r30, 0x90	; 144
     726:	f2 44       	sbci	r31, 0x42	; 66
     728:	20 81       	ld	r18, Z
     72a:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <digit>
     72e:	29 13       	cpse	r18, r25
     730:	12 c0       	rjmp	.+36     	; 0x756 <LanyardCode+0xf4>
            lanyardState &= TRUE;
     732:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     736:	91 70       	andi	r25, 0x01	; 1
     738:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <lanyardState>
            iLED[EYE[R][L]] = 0;
     73c:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	e6 53       	subi	r30, 0x36	; 54
     744:	f5 4c       	sbci	r31, 0xC5	; 197
     746:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     748:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e6 53       	subi	r30, 0x36	; 54
     750:	f5 4c       	sbci	r31, 0xC5	; 197
     752:	10 82       	st	Z, r1
     754:	05 c0       	rjmp	.+10     	; 0x760 <LanyardCode+0xfe>
        } else {
            lanyardState = FALSE;
     756:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <lanyardState>
            if (lanyardPos < 4 ) {
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	08 f4       	brcc	.+2      	; 0x760 <LanyardCode+0xfe>
     75e:	90 cf       	rjmp	.-224    	; 0x680 <LanyardCode+0x1e>
                */
                gameNow         = TEXT;
                return 0;
            }
        }
        lanyardPos++;
     760:	8f 5f       	subi	r24, 0xFF	; 255
     762:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <lanyardPos>
        lanyardCnt++;            
     766:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardCnt>
     76a:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     76c:	94 30       	cpi	r25, 0x04	; 4
     76e:	18 f4       	brcc	.+6      	; 0x776 <LanyardCode+0x114>
                gameNow         = TEXT;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     770:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardCnt>
     774:	44 c0       	rjmp	.+136    	; 0x7fe <LanyardCode+0x19c>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     776:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <lanyardCnt>
            if (lanyardState == TRUE) {
     77a:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     77e:	91 30       	cpi	r25, 0x01	; 1
     780:	69 f5       	brne	.+90     	; 0x7dc <LanyardCode+0x17a>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     782:	e8 2f       	mov	r30, r24
     784:	e6 95       	lsr	r30
     786:	e6 95       	lsr	r30
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e6 56       	subi	r30, 0x66	; 102
     78c:	f2 44       	sbci	r31, 0x42	; 66
     78e:	e5 81       	ldd	r30, Z+5	; 0x05
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     796:	e6 53       	subi	r30, 0x36	; 54
     798:	f5 4c       	sbci	r31, 0xC5	; 197
     79a:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     79c:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     79e:	79 f5       	brne	.+94     	; 0x7fe <LanyardCode+0x19c>
     7a0:	8b e7       	ldi	r24, 0x7B	; 123
     7a2:	c9 d6       	rcall	.+3474   	; 0x1536 <UpdateState>
                    iLED[CAT]       = 0;
     7a4:	ec 2f       	mov	r30, r28
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	e6 53       	subi	r30, 0x36	; 54
     7aa:	f5 4c       	sbci	r31, 0xC5	; 197
     7ac:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     7ae:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	e6 53       	subi	r30, 0x36	; 54
     7b6:	f5 4c       	sbci	r31, 0xC5	; 197
     7b8:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     7ba:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	e6 53       	subi	r30, 0x36	; 54
     7c2:	f5 4c       	sbci	r31, 0xC5	; 197
     7c4:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     7c6:	e0 91 99 bd 	lds	r30, 0xBD99	; 0x80bd99 <__bss_end+0x827f>
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     7d0:	e6 53       	subi	r30, 0x36	; 54
     7d2:	f5 4c       	sbci	r31, 0xC5	; 197
     7d4:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     7d6:	e0 91 98 bd 	lds	r30, 0xBD98	; 0x80bd98 <__bss_end+0x827e>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <LanyardCode+0x190>
     7dc:	0e df       	rcall	.-484    	; 0x5fa <initLanyard>
                iLED[EYE[R][L]] = dimValue;
     7de:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     7e8:	e6 53       	subi	r30, 0x36	; 54
     7ea:	f5 4c       	sbci	r31, 0xC5	; 197
     7ec:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     7ee:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     7f8:	e6 53       	subi	r30, 0x36	; 54
     7fa:	f5 4c       	sbci	r31, 0xC5	; 197
     7fc:	80 83       	st	Z, r24
            }
        }
    }

    lastButtonState = buttonState;
     7fe:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     802:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    return 0;
}
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazePos = 0;
     80c:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazePos>
    mazeCnt = 0;
     810:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
    mazeState = TRUE;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
    inverted  = FALSE;
     81a:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <inverted>
    iLED[CAT]       = 0;
     81e:	e0 91 88 bd 	lds	r30, 0xBD88	; 0x80bd88 <__bss_end+0x826e>
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	e6 53       	subi	r30, 0x36	; 54
     826:	f5 4c       	sbci	r31, 0xC5	; 197
     828:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     82a:	e0 91 99 bd 	lds	r30, 0xBD99	; 0x80bd99 <__bss_end+0x827f>
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	e6 53       	subi	r30, 0x36	; 54
     832:	f5 4c       	sbci	r31, 0xC5	; 197
     834:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     836:	e0 91 98 bd 	lds	r30, 0xBD98	; 0x80bd98 <__bss_end+0x827e>
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	e6 53       	subi	r30, 0x36	; 54
     83e:	f5 4c       	sbci	r31, 0xC5	; 197
     840:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     842:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	e6 53       	subi	r30, 0x36	; 54
     84a:	f5 4c       	sbci	r31, 0xC5	; 197
     84c:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     84e:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	e6 53       	subi	r30, 0x36	; 54
     856:	f5 4c       	sbci	r31, 0xC5	; 197
     858:	10 82       	st	Z, r1
     85a:	a0 ea       	ldi	r26, 0xA0	; 160
     85c:	bd eb       	ldi	r27, 0xBD	; 189
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     85e:	ed 91       	ld	r30, X+
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	e6 53       	subi	r30, 0x36	; 54
     864:	f5 4c       	sbci	r31, 0xC5	; 197
     866:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     868:	8d eb       	ldi	r24, 0xBD	; 189
     86a:	a6 3a       	cpi	r26, 0xA6	; 166
     86c:	b8 07       	cpc	r27, r24
     86e:	b9 f7       	brne	.-18     	; 0x85e <initMaze+0x52>
        iLED[HCKR[G][i]] = 0;
}
     870:	08 95       	ret

00000872 <showFieldStrength>:

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     872:	97 ff       	sbrs	r25, 7
     874:	03 c0       	rjmp	.+6      	; 0x87c <showFieldStrength+0xa>
     876:	91 95       	neg	r25
     878:	81 95       	neg	r24
     87a:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     87c:	9c 01       	movw	r18, r24
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	29 37       	cpi	r18, 0x79	; 121
     884:	31 05       	cpc	r19, r1
     886:	1c f0       	brlt	.+6      	; 0x88e <showFieldStrength+0x1c>
        gameNow = MAZE;
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <gameNow>

    if (gameNow == MAZE) {
     88e:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <gameNow>
     892:	41 30       	cpi	r20, 0x01	; 1
     894:	21 f5       	brne	.+72     	; 0x8de <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     896:	28 37       	cpi	r18, 0x78	; 120
     898:	31 05       	cpc	r19, r1
     89a:	1c f4       	brge	.+6      	; 0x8a2 <showFieldStrength+0x30>
            WingBar(0,0);
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	1d c0       	rjmp	.+58     	; 0x8dc <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     8a2:	88 37       	cpi	r24, 0x78	; 120
     8a4:	91 05       	cpc	r25, r1
     8a6:	1c f4       	brge	.+6      	; 0x8ae <showFieldStrength+0x3c>
            WingBar(1,1);
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	17 c0       	rjmp	.+46     	; 0x8dc <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     8ae:	2c 32       	cpi	r18, 0x2C	; 44
     8b0:	41 e0       	ldi	r20, 0x01	; 1
     8b2:	34 07       	cpc	r19, r20
     8b4:	1c f4       	brge	.+6      	; 0x8bc <showFieldStrength+0x4a>
            WingBar(2,2);
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     8bc:	28 0f       	add	r18, r24
     8be:	39 1f       	adc	r19, r25
     8c0:	28 35       	cpi	r18, 0x58	; 88
     8c2:	32 40       	sbci	r19, 0x02	; 2
     8c4:	1c f4       	brge	.+6      	; 0x8cc <showFieldStrength+0x5a>
            WingBar(3,3);
     8c6:	63 e0       	ldi	r22, 0x03	; 3
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	08 c0       	rjmp	.+16     	; 0x8dc <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     8cc:	8c 32       	cpi	r24, 0x2C	; 44
     8ce:	91 40       	sbci	r25, 0x01	; 1
     8d0:	1c f4       	brge	.+6      	; 0x8d8 <showFieldStrength+0x66>
            WingBar(4,4);
     8d2:	64 e0       	ldi	r22, 0x04	; 4
     8d4:	84 e0       	ldi	r24, 0x04	; 4
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     8d8:	65 e0       	ldi	r22, 0x05	; 5
     8da:	85 e0       	ldi	r24, 0x05	; 5
     8dc:	0f c7       	rjmp	.+3614   	; 0x16fc <WingBar>
     8de:	08 95       	ret

000008e0 <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     8e4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	71 f4       	brne	.+28     	; 0x908 <MagnetMaze+0x28>
     8ec:	6a e0       	ldi	r22, 0x0A	; 10
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <mazeLastActive>
     8f4:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <mazeLastActive+0x1>
     8f8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <idleTimeout>
     8fc:	88 23       	and	r24, r24
     8fe:	21 f0       	breq	.+8      	; 0x908 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     900:	85 df       	rcall	.-246    	; 0x80c <initMaze>
        gameNow = TEXT;
     902:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     906:	f4 c0       	rjmp	.+488    	; 0xaf0 <MagnetMaze+0x210>
    }
        
    if (CheckState(MAZE_INACTIVE))
     908:	87 ef       	ldi	r24, 0xF7	; 247
     90a:	1f d6       	rcall	.+3134   	; 0x154a <CheckState>
     90c:	81 11       	cpse	r24, r1
     90e:	f0 c0       	rjmp	.+480    	; 0xaf0 <MagnetMaze+0x210>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     910:	8d e7       	ldi	r24, 0x7D	; 125
     912:	1b d6       	rcall	.+3126   	; 0x154a <CheckState>
     914:	81 11       	cpse	r24, r1
     916:	ec c0       	rjmp	.+472    	; 0xaf0 <MagnetMaze+0x210>
     918:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	08 f0       	brcs	.+2      	; 0x922 <MagnetMaze+0x42>
     920:	e7 c0       	rjmp	.+462    	; 0xaf0 <MagnetMaze+0x210>
     922:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <calHall>
        return 0;

    if (calHall == 0)
     926:	90 91 f4 3a 	lds	r25, 0x3AF4	; 0x803af4 <calHall+0x1>
     92a:	89 2b       	or	r24, r25
     92c:	41 f4       	brne	.+16     	; 0x93e <MagnetMaze+0x5e>
     92e:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
        calHall = adcHall;
     932:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
     936:	80 93 f3 3a 	sts	0x3AF3, r24	; 0x803af3 <calHall>
     93a:	90 93 f4 3a 	sts	0x3AF4, r25	; 0x803af4 <calHall+0x1>
     93e:	c0 91 bb 3a 	lds	r28, 0x3ABB	; 0x803abb <adcHall>

    int16_t valHall = adcHall - calHall;
     942:	d0 91 bc 3a 	lds	r29, 0x3ABC	; 0x803abc <adcHall+0x1>
     946:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <calHall>
     94a:	90 91 f4 3a 	lds	r25, 0x3AF4	; 0x803af4 <calHall+0x1>
     94e:	c8 1b       	sub	r28, r24
     950:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     952:	ce 01       	movw	r24, r28
     954:	8e df       	rcall	.-228    	; 0x872 <showFieldStrength>
     956:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <curHallState>

    switch (curHallState) {
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	89 f0       	breq	.+34     	; 0x980 <MagnetMaze+0xa0>
     95e:	18 f0       	brcs	.+6      	; 0x966 <MagnetMaze+0x86>
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	c1 f0       	breq	.+48     	; 0x994 <MagnetMaze+0xb4>
     964:	1f c0       	rjmp	.+62     	; 0x9a4 <MagnetMaze+0xc4>
     966:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     968:	9e ef       	ldi	r25, 0xFE	; 254
     96a:	d9 07       	cpc	r29, r25
     96c:	14 f4       	brge	.+4      	; 0x972 <MagnetMaze+0x92>
     96e:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     970:	04 c0       	rjmp	.+8      	; 0x97a <MagnetMaze+0x9a>
     972:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     974:	d1 40       	sbci	r29, 0x01	; 1
     976:	5c f0       	brlt	.+22     	; 0x98e <MagnetMaze+0xae>
     978:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     97a:	90 93 4a 38 	sts	0x384A, r25	; 0x80384a <newHallState>
     97e:	12 c0       	rjmp	.+36     	; 0x9a4 <MagnetMaze+0xc4>
     980:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	d9 07       	cpc	r29, r25
     986:	c4 f7       	brge	.-16     	; 0x978 <MagnetMaze+0x98>
     988:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     98a:	df 4f       	sbci	r29, 0xFF	; 255
     98c:	84 f3       	brlt	.-32     	; 0x96e <MagnetMaze+0x8e>
     98e:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     992:	08 c0       	rjmp	.+16     	; 0x9a4 <MagnetMaze+0xc4>
     994:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     996:	9e ef       	ldi	r25, 0xFE	; 254
     998:	d9 07       	cpc	r29, r25
     99a:	4c f3       	brlt	.-46     	; 0x96e <MagnetMaze+0x8e>
     99c:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     99e:	d1 05       	cpc	r29, r1
     9a0:	b4 f3       	brlt	.-20     	; 0x98e <MagnetMaze+0xae>
     9a2:	ea cf       	rjmp	.-44     	; 0x978 <MagnetMaze+0x98>
     9a4:	c0 91 88 bd 	lds	r28, 0xBD88	; 0x80bd88 <__bss_end+0x826e>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     9a8:	ec 2f       	mov	r30, r28
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <newHallState>
     9b0:	99 23       	and	r25, r25
     9b2:	19 f0       	breq	.+6      	; 0x9ba <MagnetMaze+0xda>
     9b4:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <MagnetMaze+0xdc>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	e6 53       	subi	r30, 0x36	; 54
     9be:	f5 4c       	sbci	r31, 0xC5	; 197
     9c0:	20 83       	st	Z, r18
     9c2:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <MagnetMaze+0xe8>
     9c6:	94 c0       	rjmp	.+296    	; 0xaf0 <MagnetMaze+0x210>
     9c8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     9cc:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazeLastActive>
     9d0:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <mazeLastActive+0x1>
     9d4:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     9d8:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <newHallState>
     9dc:	21 11       	cpse	r18, r1
     9de:	08 c0       	rjmp	.+16     	; 0x9f0 <MagnetMaze+0x110>
     9e0:	88 23       	and	r24, r24
     9e2:	31 f0       	breq	.+12     	; 0x9f0 <MagnetMaze+0x110>
     9e4:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	09 f4       	brne	.+2      	; 0x9ec <MagnetMaze+0x10c>
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inverted>
     9f0:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <curHallState>

        curHallState = newHallState;
     9f4:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     9f6:	09 f4       	brne	.+2      	; 0x9fa <MagnetMaze+0x11a>
     9f8:	7b c0       	rjmp	.+246    	; 0xaf0 <MagnetMaze+0x210>
     9fa:	91 e0       	ldi	r25, 0x01	; 1
            gameNow = MAZE;
     9fc:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <gameNow>
     a00:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inverted>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     a04:	99 23       	and	r25, r25
     a06:	11 f0       	breq	.+4      	; 0xa0c <MagnetMaze+0x12c>
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	89 27       	eor	r24, r25
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	e2 2f       	mov	r30, r18
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	ea 53       	subi	r30, 0x3A	; 58
     a14:	f2 44       	sbci	r31, 0x42	; 66
     a16:	40 81       	ld	r20, Z
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	84 17       	cp	r24, r20
     a1c:	95 07       	cpc	r25, r21
     a1e:	91 f4       	brne	.+36     	; 0xa44 <MagnetMaze+0x164>
     a20:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <mazeState>
                mazeState &= TRUE;
     a24:	81 70       	andi	r24, 0x01	; 1
     a26:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
     a2a:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
                iLED[EYE[R][L]] = 0;
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	e6 53       	subi	r30, 0x36	; 54
     a32:	f5 4c       	sbci	r31, 0xC5	; 197
     a34:	10 82       	st	Z, r1
     a36:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
                iLED[EYE[R][R]] = 0;
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	e6 53       	subi	r30, 0x36	; 54
     a3e:	f5 4c       	sbci	r31, 0xC5	; 197
     a40:	10 82       	st	Z, r1
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <MagnetMaze+0x168>
     a44:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <mazeState>
            } else {
                mazeState = FALSE;
     a48:	81 e0       	ldi	r24, 0x01	; 1
                /* TODO play tone BAD */
            }
            mazePos++;
     a4a:	82 0f       	add	r24, r18
     a4c:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <mazePos>
     a50:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeCnt>
            mazeCnt++;            
     a54:	9f 5f       	subi	r25, 0xFF	; 255
     a56:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     a58:	18 f4       	brcc	.+6      	; 0xa60 <MagnetMaze+0x180>
     a5a:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeCnt>
            } else {
                mazeState = FALSE;
                /* TODO play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     a5e:	48 c0       	rjmp	.+144    	; 0xaf0 <MagnetMaze+0x210>
     a60:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     a64:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <mazeState>
                if (mazeState == TRUE) {
     a68:	91 30       	cpi	r25, 0x01	; 1
     a6a:	79 f5       	brne	.+94     	; 0xaca <MagnetMaze+0x1ea>
     a6c:	eb ea       	ldi	r30, 0xAB	; 171
                    /* TODO play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     a6e:	8e 9f       	mul	r24, r30
     a70:	e1 2d       	mov	r30, r1
     a72:	11 24       	eor	r1, r1
     a74:	e6 95       	lsr	r30
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e6 56       	subi	r30, 0x66	; 102
     a7a:	f2 44       	sbci	r31, 0x42	; 66
     a7c:	e5 81       	ldd	r30, Z+5	; 0x05
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     a84:	e6 53       	subi	r30, 0x36	; 54
     a86:	f5 4c       	sbci	r31, 0xC5	; 197
     a88:	90 83       	st	Z, r25
                    if (mazePos == sizeof(mazeCode)) {
     a8a:	82 31       	cpi	r24, 0x12	; 18
     a8c:	89 f5       	brne	.+98     	; 0xaf0 <MagnetMaze+0x210>
                        UpdateState(MAZE_COMPLETED);
     a8e:	8d e7       	ldi	r24, 0x7D	; 125
     a90:	52 d5       	rcall	.+2724   	; 0x1536 <UpdateState>
     a92:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	e6 53       	subi	r30, 0x36	; 54
     a98:	f5 4c       	sbci	r31, 0xC5	; 197
     a9a:	10 82       	st	Z, r1
     a9c:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
                        iLED[EYE[R][L]] = 0;
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	e6 53       	subi	r30, 0x36	; 54
     aa4:	f5 4c       	sbci	r31, 0xC5	; 197
     aa6:	10 82       	st	Z, r1
     aa8:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
                        iLED[EYE[R][R]] = 0;
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	e6 53       	subi	r30, 0x36	; 54
     ab0:	f5 4c       	sbci	r31, 0xC5	; 197
     ab2:	10 82       	st	Z, r1
     ab4:	e0 91 99 bd 	lds	r30, 0xBD99	; 0x80bd99 <__bss_end+0x827f>
                        iLED[EYE[G][L]] = dimValue;
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     abe:	e6 53       	subi	r30, 0x36	; 54
     ac0:	f5 4c       	sbci	r31, 0xC5	; 197
     ac2:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     ac4:	e0 91 98 bd 	lds	r30, 0xBD98	; 0x80bd98 <__bss_end+0x827e>
     ac8:	0d c0       	rjmp	.+26     	; 0xae4 <MagnetMaze+0x204>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     aca:	a0 de       	rcall	.-704    	; 0x80c <initMaze>
     acc:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    gameNow   = TEXT;
     ad0:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
                    iLED[EYE[R][L]] = dimValue;
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     ada:	e6 53       	subi	r30, 0x36	; 54
     adc:	f5 4c       	sbci	r31, 0xC5	; 197
     ade:	80 83       	st	Z, r24
     ae0:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
                    iLED[EYE[R][R]] = dimValue;
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     aea:	e6 53       	subi	r30, 0x36	; 54
     aec:	f5 4c       	sbci	r31, 0xC5	; 197
     aee:	80 83       	st	Z, r24
     af0:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <Setup>:

volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t heart = 0;

void Setup(){
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
    cli();
     afc:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     afe:	88 ed       	ldi	r24, 0xD8	; 216
     b00:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     b02:	c1 e0       	ldi	r28, 0x01	; 1
     b04:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     b08:	8a e4       	ldi	r24, 0x4A	; 74
     b0a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     b0e:	8c e7       	ldi	r24, 0x7C	; 124
     b10:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     b14:	9f e3       	ldi	r25, 0x3F	; 63
     b16:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     b1a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     b1e:	80 68       	ori	r24, 0x80	; 128
     b20:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     b24:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     b2e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     b38:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     b42:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     b4c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     b56:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     b5a:	d2 e0       	ldi	r29, 0x02	; 2
     b5c:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     b60:	2b e5       	ldi	r18, 0x5B	; 91
     b62:	31 e0       	ldi	r19, 0x01	; 1
     b64:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     b68:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     b6c:	80 ea       	ldi	r24, 0xA0	; 160
     b6e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     b72:	80 ec       	ldi	r24, 0xC0	; 192
     b74:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     b7e:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     b80:	1d ba       	out	0x1d, r1	; 29
    AUPOS = 0;     //Used as audio input/output buffer counter
     b82:	1e ba       	out	0x1e, r1	; 30
    GPIOR3 = 0;    //
     b84:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     b86:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     b8a:	88 e0       	ldi	r24, 0x08	; 8
     b8c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     b90:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     b94:	87 e7       	ldi	r24, 0x77	; 119
     b96:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     b9a:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     b9e:	8b e0       	ldi	r24, 0x0B	; 11
     ba0:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     ba4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     bae:	85 e0       	ldi	r24, 0x05	; 5
     bb0:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     bb4:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     bc0:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     bc4:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     bc8:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     bcc:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     bd0:	8b e8       	ldi	r24, 0x8B	; 139
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     bd8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     bdc:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     be0:	c9 db       	rcall	.-2158   	; 0x374 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     be2:	82 e1       	ldi	r24, 0x12	; 18
     be4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     be8:	80 e2       	ldi	r24, 0x20	; 32
     bea:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     bee:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     bf2:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     bf6:	84 e4       	ldi	r24, 0x44	; 68
     bf8:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     bfc:	8e e1       	ldi	r24, 0x1E	; 30
     bfe:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     c02:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     c06:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     c10:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     c14:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     c18:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     c1c:	82 e5       	ldi	r24, 0x52	; 82
     c1e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     c28:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     c2c:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     c30:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     c3a:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     c3e:	80 e4       	ldi	r24, 0x40	; 64
     c40:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     c44:	80 e8       	ldi	r24, 0x80	; 128
     c46:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     c4a:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     c54:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c58:	80 fd       	sbrc	r24, 0
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <Setup+0x15c>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     c5c:	80 e3       	ldi	r24, 0x30	; 48
     c5e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     c62:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     c66:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c6a:	82 fd       	sbrc	r24, 2
     c6c:	fc cf       	rjmp	.-8      	; 0xc66 <Setup+0x16e>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	98 e7       	ldi	r25, 0x78	; 120
     c72:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c76:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
     c7a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c7e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c82:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c86:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     c8a:	82 96       	adiw	r24, 0x22	; 34
     c8c:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__udivmodhi4>
     c90:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <tmp16bit>
     c94:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     c98:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c9c:	83 fd       	sbrc	r24, 3
     c9e:	fc cf       	rjmp	.-8      	; 0xc98 <Setup+0x1a0>
    RTC_CMP            = tmp16bit;                         //Button timing
     ca0:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
     ca4:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
     ca8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     cac:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     cc2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     cc6:	80 fd       	sbrc	r24, 0
     cc8:	fc cf       	rjmp	.-8      	; 0xcc2 <Setup+0x1ca>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     cca:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     cce:	81 60       	ori	r24, 0x01	; 1
     cd0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     cd4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     cde:	10 92 75 3a 	sts	0x3A75, r1	; 0x803a75 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     ce2:	85 e7       	ldi	r24, 0x75	; 117
     ce4:	9a e3       	ldi	r25, 0x3A	; 58
     ce6:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     cea:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>

    sei();
     cee:	78 94       	sei
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     d0c:	87 e0       	ldi	r24, 0x07	; 7
     d0e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     d12:	84 e4       	ldi	r24, 0x44	; 68
     d14:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     d18:	ec b3       	in	r30, 0x1c	; 28
     d1a:	88 e0       	ldi	r24, 0x08	; 8
     d1c:	e8 9f       	mul	r30, r24
     d1e:	f0 01       	movw	r30, r0
     d20:	11 24       	eor	r1, r1
     d22:	e6 53       	subi	r30, 0x36	; 54
     d24:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     d26:	a8 e2       	ldi	r26, 0x28	; 40
     d28:	ba e0       	ldi	r27, 0x0A	; 10
     d2a:	96 e0       	ldi	r25, 0x06	; 6
     d2c:	81 91       	ld	r24, Z+
     d2e:	8d 93       	st	X+, r24
     d30:	9a 95       	dec	r25
     d32:	e1 f7       	brne	.-8      	; 0xd2c <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     d34:	8b e0       	ldi	r24, 0x0B	; 11
     d36:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     d3a:	8c b3       	in	r24, 0x1c	; 28
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	58 f4       	brcc	.+22     	; 0xd56 <__vector_8+0x60>
        asm(
     d40:	8c b3       	in	r24, 0x1c	; 28
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <__vector_8+0x52>
     d46:	99 0f       	add	r25, r25
     d48:	8a 95       	dec	r24
     d4a:	ea f7       	brpl	.-6      	; 0xd46 <__vector_8+0x50>
     d4c:	99 b9       	out	0x09, r25	; 9
     d4e:	8c b3       	in	r24, 0x1c	; 28
     d50:	83 95       	inc	r24
     d52:	8c bb       	out	0x1c, r24	; 28
     d54:	0a c0       	rjmp	.+20     	; 0xd6a <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     d56:	8c b3       	in	r24, 0x1c	; 28
     d58:	83 30       	cpi	r24, 0x03	; 3
     d5a:	21 f4       	brne	.+8      	; 0xd64 <__vector_8+0x6e>
     d5c:	2a 9a       	sbi	0x05, 2	; 5
     d5e:	83 95       	inc	r24
     d60:	8c bb       	out	0x1c, r24	; 28
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <__vector_8+0x74>
     d64:	2e 9a       	sbi	0x05, 6	; 5
     d66:	88 27       	eor	r24, r24
     d68:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     d6a:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     d6e:	88 23       	and	r24, r24
     d70:	29 f0       	breq	.+10     	; 0xd7c <__vector_8+0x86>
     d72:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     d76:	81 50       	subi	r24, 0x01	; 1
     d78:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
    if (*serTxAddr) {
     daa:	e0 91 b9 3a 	lds	r30, 0x3AB9	; 0x803ab9 <serTxAddr>
     dae:	f0 91 ba 3a 	lds	r31, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     db2:	80 81       	ld	r24, Z
     db4:	88 23       	and	r24, r24
     db6:	91 f0       	breq	.+36     	; 0xddc <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     db8:	80 81       	ld	r24, Z
     dba:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     dbe:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <serTxAddr>
     dc2:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     dcc:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     dd0:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     dd4:	80 62       	ori	r24, 0x20	; 32
     dd6:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <serTxDone>
        TCB0_INTCTRL = 0x00;
     de2:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	0f 90       	pop	r0
     dfa:	1f 90       	pop	r1
     dfc:	18 95       	reti

00000dfe <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     e16:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     e1a:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     e1e:	80 81       	ld	r24, Z
     e20:	81 11       	cpse	r24, r1
     e22:	08 c0       	rjmp	.+16     	; 0xe34 <__vector_14+0x36>
     e24:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auRepAddr>
     e28:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auRepAddr+0x1>
     e2c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     e30:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     e34:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     e38:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	e1 f0       	breq	.+56     	; 0xe7a <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     e42:	20 81       	ld	r18, Z
     e44:	40 91 b6 3a 	lds	r20, 0x3AB6	; 0x803ab6 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	2f 57       	subi	r18, 0x7F	; 127
     e4c:	31 09       	sbc	r19, r1
     e4e:	42 9f       	mul	r20, r18
     e50:	c0 01       	movw	r24, r0
     e52:	43 9f       	mul	r20, r19
     e54:	90 0d       	add	r25, r0
     e56:	11 24       	eor	r1, r1
     e58:	89 2f       	mov	r24, r25
     e5a:	99 0f       	add	r25, r25
     e5c:	99 0b       	sbc	r25, r25
     e5e:	80 58       	subi	r24, 0x80	; 128
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     e66:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <auSmpAddr>
     e6a:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <auSmpAddr+0x1>
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     e74:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <__vector_14+0x88>
    } else {
        DAC0_DATA = 0x80;
     e7a:	80 e8       	ldi	r24, 0x80	; 128
     e7c:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        auPlayDone = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 f2 3a 	sts	0x3AF2, r24	; 0x803af2 <auPlayDone>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	8f 93       	push	r24
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
    if (serRxDone == 0){
     eb4:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
     eb8:	81 11       	cpse	r24, r1
     eba:	44 c0       	rjmp	.+136    	; 0xf44 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     ebc:	ed b3       	in	r30, 0x1d	; 29
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     ec4:	eb 58       	subi	r30, 0x8B	; 139
     ec6:	f5 4c       	sbci	r31, 0xC5	; 197
     ec8:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     eca:	ed b3       	in	r30, 0x1d	; 29
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	eb 58       	subi	r30, 0x8B	; 139
     ed0:	f5 4c       	sbci	r31, 0xC5	; 197
     ed2:	80 81       	ld	r24, Z
     ed4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     ed8:	ed b3       	in	r30, 0x1d	; 29
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	eb 58       	subi	r30, 0x8B	; 139
     ede:	f5 4c       	sbci	r31, 0xC5	; 197
     ee0:	80 81       	ld	r24, Z
     ee2:	8a 30       	cpi	r24, 0x0A	; 10
     ee4:	39 f0       	breq	.+14     	; 0xef4 <__vector_27+0x50>
     ee6:	ed b3       	in	r30, 0x1d	; 29
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	eb 58       	subi	r30, 0x8B	; 139
     eec:	f5 4c       	sbci	r31, 0xC5	; 197
     eee:	80 81       	ld	r24, Z
     ef0:	8d 30       	cpi	r24, 0x0D	; 13
     ef2:	49 f4       	brne	.+18     	; 0xf06 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     ef4:	ed b3       	in	r30, 0x1d	; 29
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	eb 58       	subi	r30, 0x8B	; 139
     efa:	f5 4c       	sbci	r31, 0xC5	; 197
     efc:	10 82       	st	Z, r1
            serRxDone = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <serRxDone>
     f04:	1f c0       	rjmp	.+62     	; 0xf44 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     f06:	ed b3       	in	r30, 0x1d	; 29
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	eb 58       	subi	r30, 0x8B	; 139
     f0c:	f5 4c       	sbci	r31, 0xC5	; 197
     f0e:	80 81       	ld	r24, Z
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	39 f0       	breq	.+14     	; 0xf22 <__vector_27+0x7e>
     f14:	ed b3       	in	r30, 0x1d	; 29
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	eb 58       	subi	r30, 0x8B	; 139
     f1a:	f5 4c       	sbci	r31, 0xC5	; 197
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 37       	cpi	r24, 0x7F	; 127
     f20:	59 f4       	brne	.+22     	; 0xf38 <__vector_27+0x94>
     f22:	8d b3       	in	r24, 0x1d	; 29
     f24:	88 23       	and	r24, r24
     f26:	41 f0       	breq	.+16     	; 0xf38 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     f28:	ed b3       	in	r30, 0x1d	; 29
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	eb 58       	subi	r30, 0x8B	; 139
     f2e:	f5 4c       	sbci	r31, 0xC5	; 197
     f30:	10 82       	st	Z, r1
            --RXCNT;
     f32:	8d b3       	in	r24, 0x1d	; 29
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     f38:	8d b3       	in	r24, 0x1d	; 29
     f3a:	80 34       	cpi	r24, 0x40	; 64
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <__vector_27+0xa0>
     f3e:	8d b3       	in	r24, 0x1d	; 29
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     f44:	80 e8       	ldi	r24, 0x80	; 128
     f46:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	8f 91       	pop	r24
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	0f 90       	pop	r0
     f56:	1f 90       	pop	r1
     f58:	18 95       	reti

00000f5a <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	8f 93       	push	r24
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
    TCB0_CNT = 0;
     f6a:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     f6e:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     f78:	e5 e0       	ldi	r30, 0x05	; 5
     f7a:	f8 e0       	ldi	r31, 0x08	; 8
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7d       	andi	r24, 0xDF	; 223
     f80:	80 83       	st	Z, r24
};
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	8f 91       	pop	r24
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f 90       	pop	r0
     f8e:	1f 90       	pop	r1
     f90:	18 95       	reti

00000f92 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	8f 93       	push	r24
     f9e:	9f 93       	push	r25
     fa0:	ef 93       	push	r30
     fa2:	ff 93       	push	r31
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     fa4:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <adc0Chg>
     fa8:	81 11       	cpse	r24, r1
     faa:	19 c0       	rjmp	.+50     	; 0xfde <__vector_20+0x4c>
        AUPOS = (AUPOS+1)&(AULEN-1);
     fac:	8e b3       	in	r24, 0x1e	; 30
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	87 70       	andi	r24, 0x07	; 7
     fb2:	8e bb       	out	0x1e, r24	; 30
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn[AUPOS]=ADC0_RESL;
     fb4:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     fb8:	8e 31       	cpi	r24, 0x1E	; 30
     fba:	49 f4       	brne	.+18     	; 0xfce <__vector_20+0x3c>
     fbc:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     fc0:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     fc4:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <adcTemp>
     fc8:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <adcTemp+0x1>
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <__vector_20+0x56>
     fce:	ee b3       	in	r30, 0x1e	; 30
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     fd6:	ee 53       	subi	r30, 0x3E	; 62
     fd8:	f5 4c       	sbci	r31, 0xC5	; 197
     fda:	80 83       	st	Z, r24
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <__vector_20+0x56>
    } else --adc0Chg;
     fde:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <adc0Chg>
     fe2:	81 50       	subi	r24, 0x01	; 1
     fe4:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
    100e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    1012:	81 11       	cpse	r24, r1
    1014:	0a c0       	rjmp	.+20     	; 0x102a <__vector_22+0x2a>
        adcPhot = ADC1_RES;
    1016:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    101a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    101e:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcPhot>
    1022:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	10 c0       	rjmp	.+32     	; 0x104a <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
    102a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	79 f4       	brne	.+30     	; 0x1050 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
    1032:	88 e0       	ldi	r24, 0x08	; 8
    1034:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
    1038:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    103c:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    1040:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <adcHall>
    1044:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
    1050:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    1054:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    1058:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <adcBtns>
    105c:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <adcBtns+0x1>
        if (A1CNT == 15){
    1060:	8f b3       	in	r24, 0x1f	; 31
    1062:	8f 30       	cpi	r24, 0x0F	; 15
    1064:	29 f4       	brne	.+10     	; 0x1070 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
    1066:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
    106a:	88 e0       	ldi	r24, 0x08	; 8
    106c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
    1070:	8f b3       	in	r24, 0x1f	; 31
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	99 27       	eor	r25, r25
    107a:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    if (RTC_INTFLAGS & RTC_CMP_bm){
    10a8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    10ac:	81 ff       	sbrs	r24, 1
    10ae:	26 c0       	rjmp	.+76     	; 0x10fc <__vector_6+0x6c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
    10b0:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    10b4:	8f 3f       	cpi	r24, 0xFF	; 255
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <__vector_6+0x32>
    10b8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <buttonMark>
        tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
    10c2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    10c6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    10ca:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    10ce:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    10d2:	82 96       	adiw	r24, 0x22	; 34
    10d4:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__udivmodhi4>
    10d8:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <tmp16bit>
    10dc:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    10e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10e4:	83 fd       	sbrc	r24, 3
    10e6:	fc cf       	rjmp	.-8      	; 0x10e0 <__vector_6+0x50>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    10e8:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
    10ec:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
    10f0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    10f4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__vector_6+0x78>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    10fc:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <minuteMark>
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    110c:	bf 91       	pop	r27
    110e:	af 91       	pop	r26
    1110:	9f 91       	pop	r25
    1112:	8f 91       	pop	r24
    1114:	7f 91       	pop	r23
    1116:	6f 91       	pop	r22
    1118:	5f 91       	pop	r21
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    1136:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    113a:	8f 91       	pop	r24
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1146:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    114a:	91 fd       	sbrc	r25, 1
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <EERead>
    114e:	fb 01       	movw	r30, r22
    1150:	48 0f       	add	r20, r24

    while(size){
    1152:	84 17       	cp	r24, r20
    1154:	39 f0       	breq	.+14     	; 0x1164 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    1156:	a8 2f       	mov	r26, r24
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	bc 5e       	subi	r27, 0xEC	; 236
    115c:	9c 91       	ld	r25, X
    115e:	91 93       	st	Z+, r25
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	f7 cf       	rjmp	.-18     	; 0x1152 <EERead+0xc>
        --size;
    }
}
    1164:	08 95       	ret

00001166 <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1166:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1168:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    116a:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    116c:	44 23       	and	r20, r20
    116e:	09 f1       	breq	.+66     	; 0x11b2 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1170:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1174:	51 fd       	sbrc	r21, 1
    1176:	fc cf       	rjmp	.-8      	; 0x1170 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1178:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    117a:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    117e:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    1180:	58 2f       	mov	r21, r24
    1182:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1184:	8f 5f       	subi	r24, 0xFF	; 255
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	db 01       	movw	r26, r22
    118c:	11 97       	sbiw	r26, 0x01	; 1
    118e:	ac 91       	ld	r26, X
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	fc 5e       	subi	r31, 0xEC	; 236
    1194:	a0 83       	st	Z, r26
            --size;
    1196:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1198:	19 f0       	breq	.+6      	; 0x11a0 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    119a:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    119c:	5f 31       	cpi	r21, 0x1F	; 31
    119e:	81 f7       	brne	.-32     	; 0x1180 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    11a0:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    11a2:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    11a6:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    11aa:	52 ff       	sbrs	r21, 2
    11ac:	df cf       	rjmp	.-66     	; 0x116c <EEWrite+0x6>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    11b0:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret

000011b6 <SerSend>:
}

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    11b6:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <serTxDone>
    11ba:	22 23       	and	r18, r18
    11bc:	59 f0       	breq	.+22     	; 0x11d4 <SerSend+0x1e>
        serTxAddr = addr;
    11be:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
    11c2:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        serTxDone = 0;
    11c6:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <serTxDone>
        TCB0_INTCTRL = 0x01;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret
    } else return 1;    //Error: Still sending data
    11d4:	81 e0       	ldi	r24, 0x01	; 1
};
    11d6:	08 95       	ret

000011d8 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    11d8:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    11da:	81 11       	cpse	r24, r1
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <SerSpeed+0x8>
    11de:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	82 1b       	sub	r24, r18
    11e6:	91 09       	sbc	r25, r1
    11e8:	98 2f       	mov	r25, r24
    11ea:	88 27       	eor	r24, r24
    11ec:	81 50       	subi	r24, 0x01	; 1
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    11f4:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    11f8:	08 95       	ret

000011fa <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11fa:	82 e1       	ldi	r24, 0x12	; 18
    11fc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1200:	e0 e0       	ldi	r30, 0x00	; 0
    1202:	f6 e0       	ldi	r31, 0x06	; 6
    1204:	80 81       	ld	r24, Z
    1206:	8b 7f       	andi	r24, 0xFB	; 251
    1208:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    120a:	8e e1       	ldi	r24, 0x1E	; 30
    120c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    1216:	08 95       	ret

00001218 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    1218:	82 e2       	ldi	r24, 0x22	; 34
    121a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    121e:	e0 e0       	ldi	r30, 0x00	; 0
    1220:	f6 e0       	ldi	r31, 0x06	; 6
    1222:	80 81       	ld	r24, Z
    1224:	84 60       	ori	r24, 0x04	; 4
    1226:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1228:	87 e0       	ldi	r24, 0x07	; 7
    122a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    1234:	08 95       	ret

00001236 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1236:	20 91 b7 3a 	lds	r18, 0x3AB7	; 0x803ab7 <adcBtns>
    123a:	30 91 b8 3a 	lds	r19, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	36 95       	lsr	r19
    1242:	27 95       	ror	r18
    1244:	9a 95       	dec	r25
    1246:	e1 f7       	brne	.-8      	; 0x1240 <CheckButtons+0xa>
    1248:	33 27       	eor	r19, r19
    124a:	2c 35       	cpi	r18, 0x5C	; 92
    124c:	31 05       	cpc	r19, r1
    124e:	d0 f4       	brcc	.+52     	; 0x1284 <CheckButtons+0x4e>
    1250:	23 35       	cpi	r18, 0x53	; 83
    1252:	31 05       	cpc	r19, r1
    1254:	a8 f5       	brcc	.+106    	; 0x12c0 <CheckButtons+0x8a>
    1256:	22 33       	cpi	r18, 0x32	; 50
    1258:	31 05       	cpc	r19, r1
    125a:	50 f4       	brcc	.+20     	; 0x1270 <CheckButtons+0x3a>
    125c:	2d 32       	cpi	r18, 0x2D	; 45
    125e:	31 05       	cpc	r19, r1
    1260:	58 f5       	brcc	.+86     	; 0x12b8 <CheckButtons+0x82>
    1262:	23 52       	subi	r18, 0x23	; 35
    1264:	31 09       	sbc	r19, r1
    1266:	25 30       	cpi	r18, 0x05	; 5
    1268:	31 05       	cpc	r19, r1
    126a:	80 f5       	brcc	.+96     	; 0x12cc <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
    126c:	9c e0       	ldi	r25, 0x0C	; 12
    126e:	2f c0       	rjmp	.+94     	; 0x12ce <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    1270:	27 33       	cpi	r18, 0x37	; 55
    1272:	31 05       	cpc	r19, r1
    1274:	18 f1       	brcs	.+70     	; 0x12bc <CheckButtons+0x86>
    1276:	2e 53       	subi	r18, 0x3E	; 62
    1278:	31 09       	sbc	r19, r1
    127a:	27 30       	cpi	r18, 0x07	; 7
    127c:	31 05       	cpc	r19, r1
    127e:	30 f5       	brcc	.+76     	; 0x12cc <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
    1280:	96 e0       	ldi	r25, 0x06	; 6
        break;
    1282:	25 c0       	rjmp	.+74     	; 0x12ce <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    1284:	2a 38       	cpi	r18, 0x8A	; 138
    1286:	31 05       	cpc	r19, r1
    1288:	50 f4       	brcc	.+20     	; 0x129e <CheckButtons+0x68>
    128a:	29 37       	cpi	r18, 0x79	; 121
    128c:	31 05       	cpc	r19, r1
    128e:	d0 f4       	brcc	.+52     	; 0x12c4 <CheckButtons+0x8e>
    1290:	23 56       	subi	r18, 0x63	; 99
    1292:	31 09       	sbc	r19, r1
    1294:	2b 30       	cpi	r18, 0x0B	; 11
    1296:	31 05       	cpc	r19, r1
    1298:	c8 f4       	brcc	.+50     	; 0x12cc <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
    129a:	93 e0       	ldi	r25, 0x03	; 3
        break;
    129c:	18 c0       	rjmp	.+48     	; 0x12ce <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
    129e:	22 3a       	cpi	r18, 0xA2	; 162
    12a0:	31 05       	cpc	r19, r1
    12a2:	a0 f0       	brcs	.+40     	; 0x12cc <CheckButtons+0x96>
    12a4:	2b 3b       	cpi	r18, 0xBB	; 187
    12a6:	31 05       	cpc	r19, r1
    12a8:	78 f0       	brcs	.+30     	; 0x12c8 <CheckButtons+0x92>
    12aa:	20 5f       	subi	r18, 0xF0	; 240
    12ac:	31 09       	sbc	r19, r1
    12ae:	20 31       	cpi	r18, 0x10	; 16
    12b0:	31 05       	cpc	r19, r1
    12b2:	60 f4       	brcc	.+24     	; 0x12cc <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
    12b4:	90 e0       	ldi	r25, 0x00	; 0
        break;
    12b6:	0b c0       	rjmp	.+22     	; 0x12ce <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
    12b8:	99 e0       	ldi	r25, 0x09	; 9
        break;
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
    12bc:	98 e0       	ldi	r25, 0x08	; 8
        break;
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
    12c0:	94 e0       	ldi	r25, 0x04	; 4
        break;
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
    12c4:	92 e0       	ldi	r25, 0x02	; 2
        break;
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
    12c8:	91 e0       	ldi	r25, 0x01	; 1
        break;
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    12cc:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
    12ce:	28 2f       	mov	r18, r24
    12d0:	2f 70       	andi	r18, 0x0F	; 15
    12d2:	92 13       	cpse	r25, r18
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
    12d6:	98 2f       	mov	r25, r24
    12d8:	90 7f       	andi	r25, 0xF0	; 240
    12da:	90 3f       	cpi	r25, 0xF0	; 240
    12dc:	39 f0       	breq	.+14     	; 0x12ec <CheckButtons+0xb6>
    12de:	80 5f       	subi	r24, 0xF0	; 240
    12e0:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
    12e2:	99 23       	and	r25, r25
    12e4:	11 f0       	breq	.+4      	; 0x12ea <CheckButtons+0xb4>
    12e6:	89 2f       	mov	r24, r25
    12e8:	08 95       	ret
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
    12ec:	08 95       	ret

000012ee <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    12ee:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <state.3889>
    12f2:	90 91 22 38 	lds	r25, 0x3822	; 0x803822 <state.3889+0x1>
    12f6:	9c 01       	movw	r18, r24
    12f8:	32 2f       	mov	r19, r18
    12fa:	22 27       	eor	r18, r18
    12fc:	32 95       	swap	r19
    12fe:	33 0f       	add	r19, r19
    1300:	30 7e       	andi	r19, 0xE0	; 224
    1302:	82 27       	eor	r24, r18
    1304:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    1306:	9c 01       	movw	r18, r24
    1308:	23 2f       	mov	r18, r19
    130a:	33 27       	eor	r19, r19
    130c:	26 95       	lsr	r18
    130e:	82 27       	eor	r24, r18
    1310:	93 27       	eor	r25, r19
    state ^= (state << 7);
    1312:	9c 01       	movw	r18, r24
    1314:	36 95       	lsr	r19
    1316:	32 2f       	mov	r19, r18
    1318:	22 27       	eor	r18, r18
    131a:	37 95       	ror	r19
    131c:	27 95       	ror	r18
    131e:	82 27       	eor	r24, r18
    1320:	93 27       	eor	r25, r19
    1322:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <state.3889>
    1326:	90 93 22 38 	sts	0x3822, r25	; 0x803822 <state.3889+0x1>
    return (state & 0xff);
}
    132a:	08 95       	ret

0000132c <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	7b 01       	movw	r14, r22
    133c:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    133e:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1342:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    1346:	e8 2f       	mov	r30, r24
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	31 97       	sbiw	r30, 0x01	; 1
    134c:	e7 70       	andi	r30, 0x07	; 7
    134e:	ff 27       	eor	r31, r31
    1350:	ed 5d       	subi	r30, 0xDD	; 221
    1352:	f7 4c       	sbci	r31, 0xC7	; 199
    1354:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    1356:	cb df       	rcall	.-106    	; 0x12ee <lfsr>
    1358:	8d 21       	and	r24, r13
    135a:	c8 0f       	add	r28, r24
    135c:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    135e:	c7 df       	rcall	.-114    	; 0x12ee <lfsr>
    1360:	8d 21       	and	r24, r13
    1362:	c8 1b       	sub	r28, r24
    1364:	d1 09       	sbc	r29, r1
    1366:	0c 17       	cp	r16, r28
    1368:	1d 07       	cpc	r17, r29
    136a:	08 f4       	brcc	.+2      	; 0x136e <floatSpeed+0x42>
    136c:	e8 01       	movw	r28, r16
    136e:	c7 01       	movw	r24, r14
    1370:	ec 16       	cp	r14, r28
    1372:	fd 06       	cpc	r15, r29
    1374:	08 f4       	brcc	.+2      	; 0x1378 <floatSpeed+0x4c>
    1376:	ce 01       	movw	r24, r28
    1378:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    137c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1380:	df 91       	pop	r29
}
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	08 95       	ret

00001390 <floatAround>:
    1390:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	c8 2f       	mov	r28, r24
    139a:	d4 2f       	mov	r29, r20
    139c:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    139e:	e6 2f       	mov	r30, r22
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	e7 70       	andi	r30, 0x07	; 7
    13a6:	ff 27       	eor	r31, r31
    13a8:	ed 5d       	subi	r30, 0xDD	; 221
    13aa:	f7 4c       	sbci	r31, 0xC7	; 199
    13ac:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    13ae:	9f df       	rcall	.-194    	; 0x12ee <lfsr>
    13b0:	81 23       	and	r24, r17
    13b2:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    13b4:	9c df       	rcall	.-200    	; 0x12ee <lfsr>
    13b6:	81 23       	and	r24, r17
    13b8:	c8 1b       	sub	r28, r24
    13ba:	8c 2f       	mov	r24, r28
    13bc:	00 23       	and	r16, r16
    if (max){
    13be:	41 f0       	breq	.+16     	; 0x13d0 <floatAround+0x40>
    13c0:	9c 2f       	mov	r25, r28
    13c2:	0c 17       	cp	r16, r28
    13c4:	08 f4       	brcc	.+2      	; 0x13c8 <floatAround+0x38>
    13c6:	90 2f       	mov	r25, r16
    13c8:	8d 2f       	mov	r24, r29
    13ca:	d9 17       	cp	r29, r25
    13cc:	08 f4       	brcc	.+2      	; 0x13d0 <floatAround+0x40>
    13ce:	89 2f       	mov	r24, r25
    13d0:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	8d 17       	cp	r24, r29
    13d6:	10 f0       	brcs	.+4      	; 0x13dc <floatAround+0x4c>
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	2d 2f       	mov	r18, r29
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	24 23       	and	r18, r20
    13e2:	35 23       	and	r19, r21
    13e4:	23 2b       	or	r18, r19
    13e6:	09 f0       	breq	.+2      	; 0x13ea <floatAround+0x5a>
    13e8:	8d 2f       	mov	r24, r29
    13ea:	df 91       	pop	r29

    return sample;
}
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <SaveGameState>:
    13f4:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    13f6:	df 92       	push	r13
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	64 97       	sbiw	r28, 0x14	; 20
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    140c:	44 e1       	ldi	r20, 0x14	; 20
    140e:	be 01       	movw	r22, r28
    1410:	6f 5f       	subi	r22, 0xFF	; 255
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	97 de       	rcall	.-722    	; 0x1146 <EERead>
    1418:	81 e6       	ldi	r24, 0x61	; 97
    141a:	c8 2e       	mov	r12, r24
    141c:	8a e3       	ldi	r24, 0x3A	; 58
    141e:	d8 2e       	mov	r13, r24
    1420:	8e 01       	movw	r16, r28
    1422:	0f 5f       	subi	r16, 0xFF	; 255
    1424:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1426:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    1428:	f8 01       	movw	r30, r16
    142a:	81 91       	ld	r24, Z+
    142c:	8f 01       	movw	r16, r30
    142e:	f6 01       	movw	r30, r12
    1430:	90 81       	ld	r25, Z
    1432:	98 13       	cpse	r25, r24
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1436:	f3 94       	inc	r15
    1438:	ff ef       	ldi	r31, 0xFF	; 255
    143a:	cf 1a       	sub	r12, r31
    143c:	df 0a       	sbc	r13, r31
    143e:	80 e1       	ldi	r24, 0x10	; 16
    1440:	f8 12       	cpse	r15, r24
    1442:	f2 cf       	rjmp	.-28     	; 0x1428 <SaveGameState+0x34>
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	b6 01       	movw	r22, r12
    144a:	8f 2d       	mov	r24, r15
    144c:	8c de       	rcall	.-744    	; 0x1166 <EEWrite>
    144e:	88 23       	and	r24, r24
    1450:	91 f3       	breq	.-28     	; 0x1436 <SaveGameState+0x42>
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	36 c0       	rjmp	.+108    	; 0x14c2 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    1456:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    145a:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    145e:	30 93 71 3a 	sts	0x3A71, r19	; 0x803a71 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    1462:	20 93 72 3a 	sts	0x3A72, r18	; 0x803a72 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    1466:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    146a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    146e:	90 93 73 3a 	sts	0x3A73, r25	; 0x803a73 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    1472:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    1476:	89 89       	ldd	r24, Y+17	; 0x11
    1478:	9a 89       	ldd	r25, Y+18	; 0x12
    147a:	98 27       	eor	r25, r24
    147c:	89 27       	eor	r24, r25
    147e:	98 27       	eor	r25, r24
    1480:	28 17       	cp	r18, r24
    1482:	39 07       	cpc	r19, r25
    1484:	69 f4       	brne	.+26     	; 0x14a0 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	98 27       	eor	r25, r24
    148c:	89 27       	eor	r24, r25
    148e:	98 27       	eor	r25, r24
    1490:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    1494:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    1498:	28 17       	cp	r18, r24
    149a:	39 07       	cpc	r19, r25
    149c:	49 f4       	brne	.+18     	; 0x14b0 <SaveGameState+0xbc>
    149e:	10 c0       	rjmp	.+32     	; 0x14c0 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    14a0:	42 e0       	ldi	r20, 0x02	; 2
    14a2:	61 e7       	ldi	r22, 0x71	; 113
    14a4:	7a e3       	ldi	r23, 0x3A	; 58
    14a6:	80 e1       	ldi	r24, 0x10	; 16
    14a8:	5e de       	rcall	.-836    	; 0x1166 <EEWrite>
    14aa:	88 23       	and	r24, r24
    14ac:	61 f3       	breq	.-40     	; 0x1486 <SaveGameState+0x92>
    14ae:	d1 cf       	rjmp	.-94     	; 0x1452 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    14b0:	42 e0       	ldi	r20, 0x02	; 2
    14b2:	63 e7       	ldi	r22, 0x73	; 115
    14b4:	7a e3       	ldi	r23, 0x3A	; 58
    14b6:	82 e1       	ldi	r24, 0x12	; 18
    14b8:	56 de       	rcall	.-852    	; 0x1166 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	81 11       	cpse	r24, r1
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <SaveGameState+0xce>
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    14c2:	89 2f       	mov	r24, r25
    14c4:	64 96       	adiw	r28, 0x14	; 20
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    14da:	e8 2f       	mov	r30, r24
    14dc:	ef 77       	andi	r30, 0x7F	; 127
    14de:	e6 95       	lsr	r30
    14e0:	e6 95       	lsr	r30
    14e2:	e6 95       	lsr	r30
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	ef 59       	subi	r30, 0x9F	; 159
    14e8:	f5 4c       	sbci	r31, 0xC5	; 197
    14ea:	20 81       	ld	r18, Z
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	87 70       	andi	r24, 0x07	; 7
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <ReadStatusBit+0x1e>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <ReadStatusBit+0x1a>
    14fc:	ca 01       	movw	r24, r20
}
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	08 95       	ret

00001502 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    1502:	e8 2f       	mov	r30, r24
    1504:	ef 77       	andi	r30, 0x7F	; 127
    1506:	e6 95       	lsr	r30
    1508:	e6 95       	lsr	r30
    150a:	e6 95       	lsr	r30
    150c:	28 2f       	mov	r18, r24
    150e:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	ef 59       	subi	r30, 0x9F	; 159
    1514:	f5 4c       	sbci	r31, 0xC5	; 197
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	01 c0       	rjmp	.+2      	; 0x151e <WriteStatusBit+0x1c>
    151c:	88 0f       	add	r24, r24
    151e:	2a 95       	dec	r18
    1520:	ea f7       	brpl	.-6      	; 0x151c <WriteStatusBit+0x1a>
    1522:	66 23       	and	r22, r22
    1524:	19 f0       	breq	.+6      	; 0x152c <WriteStatusBit+0x2a>
    1526:	90 81       	ld	r25, Z
    1528:	89 2b       	or	r24, r25
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    152c:	80 95       	com	r24
    152e:	90 81       	ld	r25, Z
    1530:	89 23       	and	r24, r25
    1532:	80 83       	st	Z, r24
    1534:	08 95       	ret

00001536 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    1536:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    1538:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    153a:	31 f0       	breq	.+12     	; 0x1548 <UpdateState+0x12>
        if (clearBit) {
    153c:	97 ff       	sbrs	r25, 7
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	dd cf       	rjmp	.-70     	; 0x1502 <WriteStatusBit>
    1548:	08 95       	ret

0000154a <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    154a:	cf 93       	push	r28
    154c:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    154e:	8f 77       	andi	r24, 0x7F	; 127
    1550:	c4 df       	rcall	.-120    	; 0x14da <ReadStatusBit>
    1552:	2c 2f       	mov	r18, r28
    1554:	22 1f       	adc	r18, r18
    1556:	22 27       	eor	r18, r18
    1558:	22 1f       	adc	r18, r18
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	81 11       	cpse	r24, r1
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <CheckState+0x18>
    1560:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1562:	82 2f       	mov	r24, r18
    1564:	89 27       	eor	r24, r25
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    156a:	e3 e0       	ldi	r30, 0x03	; 3
    156c:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    156e:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    1570:	91 91       	ld	r25, Z+
    1572:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    1574:	ed 30       	cpi	r30, 0x0D	; 13
    1576:	91 e1       	ldi	r25, 0x11	; 17
    1578:	f9 07       	cpc	r31, r25
    157a:	d1 f7       	brne	.-12     	; 0x1570 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    157c:	83 70       	andi	r24, 0x03	; 3
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <whoami>
    return whoami;
}
    1584:	08 95       	ret

00001586 <Reset>:

void Reset(){
    1586:	e1 e6       	ldi	r30, 0x61	; 97
    1588:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    158a:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    158c:	8a e3       	ldi	r24, 0x3A	; 58
    158e:	e5 37       	cpi	r30, 0x75	; 117
    1590:	f8 07       	cpc	r31, r24
    1592:	d9 f7       	brne	.-10     	; 0x158a <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1594:	ea df       	rcall	.-44     	; 0x156a <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    1596:	81 11       	cpse	r24, r1
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    159a:	80 91 6e 3a 	lds	r24, 0x3A6E	; 0x803a6e <gameState+0xd>
    159e:	80 64       	ori	r24, 0x40	; 64
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	31 f4       	brne	.+12     	; 0x15b2 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15a6:	80 91 6e 3a 	lds	r24, 0x3A6E	; 0x803a6e <gameState+0xd>
    15aa:	80 68       	ori	r24, 0x80	; 128
    15ac:	80 93 6e 3a 	sts	0x3A6E, r24	; 0x803a6e <gameState+0xd>
    15b0:	0d c0       	rjmp	.+26     	; 0x15cc <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	21 f4       	brne	.+8      	; 0x15be <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15b6:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <gameState+0xe>
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	29 f4       	brne	.+10     	; 0x15cc <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    15c2:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <gameState+0xe>
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	80 93 6f 3a 	sts	0x3A6F, r24	; 0x803a6f <gameState+0xe>
    15cc:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <gameState>
    15d0:	81 60       	ori	r24, 0x01	; 1
    15d2:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <gameState>
    15d6:	08 95       	ret

000015d8 <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    15dc:	44 e1       	ldi	r20, 0x14	; 20
    15de:	61 e6       	ldi	r22, 0x61	; 97
    15e0:	7a e3       	ldi	r23, 0x3A	; 58
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	b0 dd       	rcall	.-1184   	; 0x1146 <EERead>
    15e6:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    15e8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    15ea:	8c 2f       	mov	r24, r28
    15ec:	76 df       	rcall	.-276    	; 0x14da <ReadStatusBit>
    15ee:	d8 0f       	add	r29, r24
    15f0:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    15f2:	c2 37       	cpi	r28, 0x72	; 114
    15f4:	d1 f7       	brne	.-12     	; 0x15ea <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    15f6:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    15f8:	11 f0       	breq	.+4      	; 0x15fe <LoadGameState+0x26>
    15fa:	c5 df       	rcall	.-118    	; 0x1586 <Reset>
    } else getID();
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <LoadGameState+0x28>
    15fe:	b5 df       	rcall	.-150    	; 0x156a <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    1600:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0x10>
    1604:	90 91 72 3a 	lds	r25, 0x3A72	; 0x803a72 <gameState+0x11>
    1608:	98 27       	eor	r25, r24
    160a:	89 27       	eor	r24, r25
    160c:	98 27       	eor	r25, r24
    160e:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    1612:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1616:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x12>
    161a:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x13>
    161e:	98 27       	eor	r25, r24
    1620:	89 27       	eor	r24, r25
    1622:	98 27       	eor	r25, r24
    1624:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    1628:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    1632:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1634:	86 e7       	ldi	r24, 0x76	; 118
    1636:	89 df       	rcall	.-238    	; 0x154a <CheckState>
    1638:	c8 2f       	mov	r28, r24
    163a:	88 23       	and	r24, r24
    163c:	81 f0       	breq	.+32     	; 0x165e <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    163e:	e0 91 8b bd 	lds	r30, 0xBD8B	; 0x80bd8b <__bss_end+0x8271>
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	e6 53       	subi	r30, 0x36	; 54
    1646:	f5 4c       	sbci	r31, 0xC5	; 197
    1648:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    164a:	e0 91 8a bd 	lds	r30, 0xBD8A	; 0x80bd8a <__bss_end+0x8270>
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1654:	e6 53       	subi	r30, 0x36	; 54
    1656:	f5 4c       	sbci	r31, 0xC5	; 197
    1658:	80 83       	st	Z, r24
        return 1;
    165a:	c1 e0       	ldi	r28, 0x01	; 1
    165c:	4c c0       	rjmp	.+152    	; 0x16f6 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    165e:	85 e7       	ldi	r24, 0x75	; 117
    1660:	74 df       	rcall	.-280    	; 0x154a <CheckState>
    1662:	88 23       	and	r24, r24
    1664:	59 f1       	breq	.+86     	; 0x16bc <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    1666:	e0 91 8b bd 	lds	r30, 0xBD8B	; 0x80bd8b <__bss_end+0x8271>
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1670:	e6 53       	subi	r30, 0x36	; 54
    1672:	f5 4c       	sbci	r31, 0xC5	; 197
    1674:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    1676:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <cooledDown.3948>
    167a:	88 23       	and	r24, r24
    167c:	79 f0       	breq	.+30     	; 0x169c <HotSummer+0x6a>
    167e:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    1682:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1686:	20 91 f5 3a 	lds	r18, 0x3AF5	; 0x803af5 <adcTemp>
    168a:	30 91 f6 3a 	lds	r19, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    168e:	80 96       	adiw	r24, 0x20	; 32
    1690:	28 17       	cp	r18, r24
    1692:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1694:	18 f0       	brcs	.+6      	; 0x169c <HotSummer+0x6a>
    1696:	86 e7       	ldi	r24, 0x76	; 118
    1698:	4e df       	rcall	.-356    	; 0x1536 <UpdateState>
            return 0;
    169a:	2d c0       	rjmp	.+90     	; 0x16f6 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    169c:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    16a0:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    16a4:	20 91 f5 3a 	lds	r18, 0x3AF5	; 0x803af5 <adcTemp>
    16a8:	30 91 f6 3a 	lds	r19, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    16ac:	08 96       	adiw	r24, 0x08	; 8
    16ae:	82 17       	cp	r24, r18
    16b0:	93 07       	cpc	r25, r19
    16b2:	08 f1       	brcs	.+66     	; 0x16f6 <HotSummer+0xc4>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <cooledDown.3948>
    16ba:	1d c0       	rjmp	.+58     	; 0x16f6 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    16bc:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    16c0:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    16c4:	89 2b       	or	r24, r25
    16c6:	41 f4       	brne	.+16     	; 0x16d8 <HotSummer+0xa6>
    16c8:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <adcTemp>
    16cc:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    16d0:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <calTemp>
    16d4:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    16d8:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    16dc:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    16e0:	20 91 f5 3a 	lds	r18, 0x3AF5	; 0x803af5 <adcTemp>
    16e4:	30 91 f6 3a 	lds	r19, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    16e8:	80 96       	adiw	r24, 0x20	; 32
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    16ee:	18 f0       	brcs	.+6      	; 0x16f6 <HotSummer+0xc4>
    16f0:	85 e7       	ldi	r24, 0x75	; 117
    16f2:	21 df       	rcall	.-446    	; 0x1536 <UpdateState>
        }
    }
    return 0;
    16f4:	c0 e0       	ldi	r28, 0x00	; 0
}
    16f6:	8c 2f       	mov	r24, r28
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <WingBar>:

void WingBar(int8_t l, int8_t r) {
    16fc:	ec e8       	ldi	r30, 0x8C	; 140
    16fe:	fd eb       	ldi	r31, 0xBD	; 189
    for (int8_t i=0; i<5; i++) {
    1700:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    1702:	a5 81       	ldd	r26, Z+5	; 0x05
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    1706:	98 17       	cp	r25, r24
    1708:	34 f4       	brge	.+12     	; 0x1716 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    170a:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
    170e:	a6 53       	subi	r26, 0x36	; 54
    1710:	b5 4c       	sbci	r27, 0xC5	; 197
    1712:	2c 93       	st	X, r18
    1714:	03 c0       	rjmp	.+6      	; 0x171c <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    1716:	a6 53       	subi	r26, 0x36	; 54
    1718:	b5 4c       	sbci	r27, 0xC5	; 197
    171a:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    171c:	a0 81       	ld	r26, Z
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    1720:	96 17       	cp	r25, r22
    1722:	34 f4       	brge	.+12     	; 0x1730 <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    1724:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
    1728:	a6 53       	subi	r26, 0x36	; 54
    172a:	b5 4c       	sbci	r27, 0xC5	; 197
    172c:	2c 93       	st	X, r18
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    1730:	a6 53       	subi	r26, 0x36	; 54
    1732:	b5 4c       	sbci	r27, 0xC5	; 197
    1734:	1c 92       	st	X, r1
    1736:	9f 5f       	subi	r25, 0xFF	; 255
    1738:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    173a:	95 30       	cpi	r25, 0x05	; 5
    173c:	11 f7       	brne	.-60     	; 0x1702 <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    173e:	08 95       	ret

00001740 <GenerateBlinks>:

void GenerateBlinks(){
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ca e9       	ldi	r28, 0x9A	; 154
    1748:	dd eb       	ldi	r29, 0xBD	; 189
    174a:	1a e7       	ldi	r17, 0x7A	; 122
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    for (uint8_t i=0;i<6;i++) {
        if(CheckState(HACKER_STATES + i)) {
    174c:	81 2f       	mov	r24, r17
    174e:	fd de       	rcall	.-518    	; 0x154a <CheckState>
            iLED[HCKR[G][i]] = dimValue;
    1750:	ee 81       	ldd	r30, Y+6	; 0x06
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    for (uint8_t i=0;i<6;i++) {
        if(CheckState(HACKER_STATES + i)) {
    1754:	88 23       	and	r24, r24
    1756:	59 f0       	breq	.+22     	; 0x176e <GenerateBlinks+0x2e>
            iLED[HCKR[G][i]] = dimValue;
    1758:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    175c:	e6 53       	subi	r30, 0x36	; 54
    175e:	f5 4c       	sbci	r31, 0xC5	; 197
    1760:	80 83       	st	Z, r24
            iLED[HCKR[R][i]] = 0;
    1762:	e8 81       	ld	r30, Y
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	e6 53       	subi	r30, 0x36	; 54
    1768:	f5 4c       	sbci	r31, 0xC5	; 197
    176a:	10 82       	st	Z, r1
    176c:	0a c0       	rjmp	.+20     	; 0x1782 <GenerateBlinks+0x42>
        } else {
            iLED[HCKR[G][i]] = 0;
    176e:	e6 53       	subi	r30, 0x36	; 54
    1770:	f5 4c       	sbci	r31, 0xC5	; 197
    1772:	10 82       	st	Z, r1
            iLED[HCKR[R][i]] = dimValue;
    1774:	e8 81       	ld	r30, Y
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    177c:	e6 53       	subi	r30, 0x36	; 54
    177e:	f5 4c       	sbci	r31, 0xC5	; 197
    1780:	80 83       	st	Z, r24
    1782:	1f 5f       	subi	r17, 0xFF	; 255
    1784:	21 96       	adiw	r28, 0x01	; 1
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    for (uint8_t i=0;i<6;i++) {
    1786:	10 38       	cpi	r17, 0x80	; 128
    1788:	09 f7       	brne	.-62     	; 0x174c <GenerateBlinks+0xc>
        } else {
            iLED[HCKR[G][i]] = 0;
            iLED[HCKR[R][i]] = dimValue;
        }
    }
    if (CheckState(GEM_STATE)) {
    178a:	80 e4       	ldi	r24, 0x40	; 64
    178c:	de de       	rcall	.-580    	; 0x154a <CheckState>
    178e:	88 23       	and	r24, r24
    1790:	69 f1       	breq	.+90     	; 0x17ec <GenerateBlinks+0xac>
        if ( heart == 1 || heart == 3 || heart == 5 )
    1792:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <heart>
    1796:	98 2f       	mov	r25, r24
    1798:	9d 7f       	andi	r25, 0xFD	; 253
    179a:	e0 91 89 bd 	lds	r30, 0xBD89	; 0x80bd89 <__bss_end+0x826f>
            iLED[BADGER] = dimValue / 2;
    179e:	f0 e0       	ldi	r31, 0x00	; 0
            iLED[HCKR[G][i]] = 0;
            iLED[HCKR[R][i]] = dimValue;
        }
    }
    if (CheckState(GEM_STATE)) {
        if ( heart == 1 || heart == 3 || heart == 5 )
    17a0:	91 30       	cpi	r25, 0x01	; 1
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <GenerateBlinks+0x68>
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <GenerateBlinks+0x70>
            iLED[BADGER] = dimValue / 2;
    17a8:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
    17ac:	96 95       	lsr	r25
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <GenerateBlinks+0x7c>
        else if ( heart == 2 || heart == 4 )
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <GenerateBlinks+0x78>
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	31 f4       	brne	.+12     	; 0x17c4 <GenerateBlinks+0x84>
            iLED[BADGER] = dimValue;
    17b8:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
    17bc:	e6 53       	subi	r30, 0x36	; 54
    17be:	f5 4c       	sbci	r31, 0xC5	; 197
    17c0:	90 83       	st	Z, r25
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <GenerateBlinks+0x9c>
        else if ( heart == 0 || heart == 6 )
    17c4:	88 23       	and	r24, r24
    17c6:	11 f0       	breq	.+4      	; 0x17cc <GenerateBlinks+0x8c>
    17c8:	86 30       	cpi	r24, 0x06	; 6
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue / 4;
    17cc:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
    17d0:	96 95       	lsr	r25
    17d2:	96 95       	lsr	r25
    17d4:	f3 cf       	rjmp	.-26     	; 0x17bc <GenerateBlinks+0x7c>
        else
            iLED[BADGER] = 0;
    17d6:	e6 53       	subi	r30, 0x36	; 54
    17d8:	f5 4c       	sbci	r31, 0xC5	; 197
    17da:	10 82       	st	Z, r1
        if (heart<32)
    17dc:	80 32       	cpi	r24, 0x20	; 32
    17de:	20 f4       	brcc	.+8      	; 0x17e8 <GenerateBlinks+0xa8>
            heart++;
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <heart>
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GenerateBlinks+0xac>
        else
            heart = 0;
    17e8:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <heart>
    }

    //LEDs for text adventure
    if ((effect&0xff00)==0) {
    17ec:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    17f0:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    17f4:	88 27       	eor	r24, r24
    17f6:	89 2b       	or	r24, r25
    17f8:	71 f4       	brne	.+28     	; 0x1816 <GenerateBlinks+0xd6>
        //Off
        if ((effect&0x1f)==0){
    17fa:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    17fe:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1802:	8f 71       	andi	r24, 0x1F	; 31
    1804:	99 27       	eor	r25, r25
    1806:	89 2b       	or	r24, r25
    1808:	31 f4       	brne	.+12     	; 0x1816 <GenerateBlinks+0xd6>
            WingBar(0,0);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28

    //LEDs for text adventure
    if ((effect&0xff00)==0) {
        //Off
        if ((effect&0x1f)==0){
            WingBar(0,0);
    1812:	1f 91       	pop	r17
    1814:	73 cf       	rjmp	.-282    	; 0x16fc <WingBar>
        }
    }
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	08 95       	ret

0000181e <GenerateAudio>:


uint8_t GenerateAudio(){
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28

    if (auIn[AULEN>>1] < HPLVL) {
    1824:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <auIn+0x4>
    1828:	89 31       	cpi	r24, 0x19	; 25
    182a:	08 f0       	brcs	.+2      	; 0x182e <GenerateAudio+0x10>
    182c:	2e c1       	rjmp	.+604    	; 0x1a8a <GenerateAudio+0x26c>

        detHdPh = 1;
    182e:	c1 e0       	ldi	r28, 0x01	; 1
    1830:	c0 93 bf 3a 	sts	0x3ABF, r28	; 0x803abf <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1834:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1838:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    183c:	88 27       	eor	r24, r24
    183e:	89 2b       	or	r24, r25
    1840:	09 f0       	breq	.+2      	; 0x1844 <GenerateAudio+0x26>
    1842:	bf c0       	rjmp	.+382    	; 0x19c2 <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    1844:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1848:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    184c:	80 7e       	andi	r24, 0xE0	; 224
    184e:	99 27       	eor	r25, r25
    1850:	89 2b       	or	r24, r25
    1852:	31 f4       	brne	.+12     	; 0x1860 <GenerateAudio+0x42>
                auRepAddr = &zero;
    1854:	88 e3       	ldi	r24, 0x38	; 56
    1856:	98 e3       	ldi	r25, 0x38	; 56
    1858:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    185c:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    1860:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1864:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1868:	80 7e       	andi	r24, 0xE0	; 224
    186a:	99 27       	eor	r25, r25
    186c:	80 97       	sbiw	r24, 0x20	; 32
    186e:	09 f0       	breq	.+2      	; 0x1872 <GenerateAudio+0x54>
    1870:	59 c0       	rjmp	.+178    	; 0x1924 <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	52 e2       	ldi	r21, 0x22	; 34
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	70 e2       	ldi	r23, 0x20	; 32
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	57 dd       	rcall	.-1362   	; 0x132c <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	65 e0       	ldi	r22, 0x05	; 5
    1884:	80 e8       	ldi	r24, 0x80	; 128
    1886:	84 dd       	rcall	.-1272   	; 0x1390 <floatAround>
    1888:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <auBuffer.3965+0x2>

                if (buttonMark) {
    188c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <GenerateAudio+0x78>
    1894:	47 c0       	rjmp	.+142    	; 0x1924 <GenerateAudio+0x106>
                    if (start == 0) {
    1896:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <start.3968>
    189a:	81 11       	cpse	r24, r1
    189c:	15 c0       	rjmp	.+42     	; 0x18c8 <GenerateAudio+0xaa>
                        duration = 4;
    189e:	84 e0       	ldi	r24, 0x04	; 4
    18a0:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <duration.3967>
                        loudness = 0xff;
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <loudness.3966>
                        TCB1_CCMP = 0x2000;
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e2       	ldi	r25, 0x20	; 32
    18ae:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    18b2:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    18b6:	80 e1       	ldi	r24, 0x10	; 16
    18b8:	98 e3       	ldi	r25, 0x38	; 56
    18ba:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    18be:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        start = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <start.3968>
                    }

                    if (loudness) {
    18c8:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <loudness.3966>
    18cc:	88 23       	and	r24, r24
    18ce:	69 f0       	breq	.+26     	; 0x18ea <GenerateAudio+0xcc>
                        auVolume = loudness;
    18d0:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    18d4:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <duration.3967>
    18d8:	99 23       	and	r25, r25
    18da:	21 f0       	breq	.+8      	; 0x18e4 <GenerateAudio+0xc6>
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <duration.3967>
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <GenerateAudio+0xcc>
    18e4:	86 95       	lsr	r24
    18e6:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <loudness.3966>
                    } 

                    if (loudness == 0) {
    18ea:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <loudness.3966>
    18ee:	81 11       	cpse	r24, r1
    18f0:	19 c0       	rjmp	.+50     	; 0x1924 <GenerateAudio+0x106>
                        effect &= 0x1f;
    18f2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    18f6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    18fa:	8f 71       	andi	r24, 0x1F	; 31
    18fc:	99 27       	eor	r25, r25
    18fe:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1902:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1906:	88 e3       	ldi	r24, 0x38	; 56
    1908:	98 e3       	ldi	r25, 0x38	; 56
    190a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    190e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1912:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
    1916:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
                        auVolume = 0xff;
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1920:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <start.3968>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1924:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1928:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    192c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1930:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1934:	80 7e       	andi	r24, 0xE0	; 224
    1936:	99 27       	eor	r25, r25
    1938:	80 36       	cpi	r24, 0x60	; 96
    193a:	91 05       	cpc	r25, r1
    193c:	a9 f5       	brne	.+106    	; 0x19a8 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    193e:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <auBuffer.3969+0x6>
                auRepAddr = &auBuffer[0];
    1942:	8e e4       	ldi	r24, 0x4E	; 78
    1944:	98 e3       	ldi	r25, 0x38	; 56
    1946:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    194a:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
    194e:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1950:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1952:	c3 30       	cpi	r28, 0x03	; 3
    1954:	39 f0       	breq	.+14     	; 0x1964 <GenerateAudio+0x146>
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	18 dd       	rcall	.-1488   	; 0x1390 <floatAround>
    1960:	f8 01       	movw	r30, r16
    1962:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1964:	cf 5f       	subi	r28, 0xFF	; 255
    1966:	0f 5f       	subi	r16, 0xFF	; 255
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	c6 30       	cpi	r28, 0x06	; 6
    196c:	91 f7       	brne	.-28     	; 0x1952 <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    196e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1972:	88 23       	and	r24, r24
    1974:	c9 f0       	breq	.+50     	; 0x19a8 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	54 e0       	ldi	r21, 0x04	; 4
    197a:	60 e8       	ldi	r22, 0x80	; 128
    197c:	72 e0       	ldi	r23, 0x02	; 2
    197e:	85 e0       	ldi	r24, 0x05	; 5
    1980:	d5 dc       	rcall	.-1622   	; 0x132c <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1982:	80 91 b6 3a 	lds	r24, 0x3AB6	; 0x803ab6 <auVolume>
    1986:	20 ea       	ldi	r18, 0xA0	; 160
    1988:	40 e1       	ldi	r20, 0x10	; 16
    198a:	62 e0       	ldi	r22, 0x02	; 2
    198c:	01 dd       	rcall	.-1534   	; 0x1390 <floatAround>
    198e:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1992:	20 e9       	ldi	r18, 0x90	; 144
    1994:	40 e7       	ldi	r20, 0x70	; 112
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <auBuffer.3969>
    199c:	f9 dc       	rcall	.-1550   	; 0x1390 <floatAround>
    199e:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <auBuffer.3969>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    19a2:	80 95       	com	r24
    19a4:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <auBuffer.3969+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    19a8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19ac:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    19b0:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19b4:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    19b8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19bc:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19c0:	66 c0       	rjmp	.+204    	; 0x1a8e <GenerateAudio+0x270>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    19c2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19c6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19ca:	88 27       	eor	r24, r24
    19cc:	81 15       	cp	r24, r1
    19ce:	91 40       	sbci	r25, 0x01	; 1
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <GenerateAudio+0x1b6>
    19d2:	5d c0       	rjmp	.+186    	; 0x1a8e <GenerateAudio+0x270>
            if ((effect&0xE0) <= 0x90) {
    19d4:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19d8:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19dc:	80 7e       	andi	r24, 0xE0	; 224
    19de:	99 27       	eor	r25, r25
    19e0:	81 39       	cpi	r24, 0x91	; 145
    19e2:	91 05       	cpc	r25, r1
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <GenerateAudio+0x1ca>
    19e6:	53 c0       	rjmp	.+166    	; 0x1a8e <GenerateAudio+0x270>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<4;
    19e8:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <effect>
    19ec:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <effect+0x1>
    19f0:	60 7e       	andi	r22, 0xE0	; 224
    19f2:	77 27       	eor	r23, r23
    19f4:	6f 5f       	subi	r22, 0xFF	; 255
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	84 e0       	ldi	r24, 0x04	; 4
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <GenerateAudio+0x1dc>
    1a02:	ab 01       	movw	r20, r22
    1a04:	5d 5f       	subi	r21, 0xFD	; 253
    1a06:	7e 5f       	subi	r23, 0xFE	; 254
    1a08:	81 e0       	ldi	r24, 0x01	; 1
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1a0a:	90 dc       	rcall	.-1760   	; 0x132c <floatSpeed>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	41 e0       	ldi	r20, 0x01	; 1
    1a10:	65 e0       	ldi	r22, 0x05	; 5
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	bd dc       	rcall	.-1670   	; 0x1390 <floatAround>
    1a16:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <auBuffer.3974+0x2>

                if (buttonMark) {
    1a1a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1a1e:	88 23       	and	r24, r24
    1a20:	b1 f1       	breq	.+108    	; 0x1a8e <GenerateAudio+0x270>
                    if (start == 0) {
    1a22:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <start.3976>
    1a26:	81 11       	cpse	r24, r1
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <GenerateAudio+0x228>
                        duration = 4;
    1a2a:	84 e0       	ldi	r24, 0x04	; 4
    1a2c:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <duration.3975>
                        auRepAddr = &auBuffer[0];
    1a30:	8d e0       	ldi	r24, 0x0D	; 13
    1a32:	98 e3       	ldi	r25, 0x38	; 56
    1a34:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    1a38:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        auVolume = 255;
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 1;
    1a42:	c0 93 4d 38 	sts	0x384D, r28	; 0x80384d <start.3976>
                    }   if (duration == 0) {
    1a46:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <duration.3975>
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	1a c0       	rjmp	.+52     	; 0x1a82 <GenerateAudio+0x264>
                        effect &= 0x1f;
    1a4e:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a52:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a56:	8f 71       	andi	r24, 0x1F	; 31
    1a58:	99 27       	eor	r25, r25
    1a5a:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1a5e:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1a62:	88 e3       	ldi	r24, 0x38	; 56
    1a64:	98 e3       	ldi	r25, 0x38	; 56
    1a66:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    1a6a:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1a6e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
    1a72:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1a7c:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <start.3976>
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <GenerateAudio+0x270>
                    } else duration--;
    1a82:	81 50       	subi	r24, 0x01	; 1
    1a84:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <duration.3975>
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GenerateAudio+0x270>
                }
            }
        }
    } else {
        detHdPh = 0;
    1a8a:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <detHdPh>
    }
    return buttonMark;
    1a8e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
}
    1a92:	cf 91       	pop	r28
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1a9a:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <minuteMark>
    1a9e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1aa2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1aa6:	89 2f       	mov	r24, r25
    1aa8:	99 27       	eor	r25, r25
    1aaa:	86 95       	lsr	r24
}
    1aac:	3c e3       	ldi	r19, 0x3C	; 60
    1aae:	23 9f       	mul	r18, r19
    1ab0:	80 0d       	add	r24, r0
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	08 95       	ret

00001ab8 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1ac4:	ea df       	rcall	.-44     	; 0x1a9a <getClock>
    1ac6:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1ac8:	80 17       	cp	r24, r16
    1aca:	91 07       	cpc	r25, r17
    1acc:	08 f4       	brcc	.+2      	; 0x1ad0 <idleTimeout+0x18>
        curClock += 256 * 60;
    1ace:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1ad0:	c0 0f       	add	r28, r16
    1ad2:	d1 1f       	adc	r29, r17
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	c2 17       	cp	r28, r18
    1ad8:	d3 07       	cpc	r29, r19
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <idleTimeout+0x26>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <simonLed>:

void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	ec e8       	ldi	r30, 0x8C	; 140
    1aee:	fd eb       	ldi	r31, 0xBD	; 189
    1af0:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1af2:	a5 81       	ldd	r26, Z+5	; 0x05
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	a6 53       	subi	r26, 0x36	; 54
    1af8:	b5 4c       	sbci	r27, 0xC5	; 197
    1afa:	1c 92       	st	X, r1
    1afc:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1afe:	a8 81       	ld	r26, Y
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	a6 53       	subi	r26, 0x36	; 54
    1b04:	b5 4c       	sbci	r27, 0xC5	; 197
    1b06:	1c 92       	st	X, r1
void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1b08:	9d eb       	ldi	r25, 0xBD	; 189
    1b0a:	e1 39       	cpi	r30, 0x91	; 145
    1b0c:	f9 07       	cpc	r31, r25
    1b0e:	81 f7       	brne	.-32     	; 0x1af0 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 1) {
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	99 f4       	brne	.+38     	; 0x1b3a <simonLed+0x52>
        iLED[WING[L][0]] = dimValue;
    1b14:	e0 91 91 bd 	lds	r30, 0xBD91	; 0x80bd91 <__bss_end+0x8277>
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b1e:	e6 53       	subi	r30, 0x36	; 54
    1b20:	f5 4c       	sbci	r31, 0xC5	; 197
    1b22:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1b24:	e0 91 92 bd 	lds	r30, 0xBD92	; 0x80bd92 <__bss_end+0x8278>
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b2e:	e6 53       	subi	r30, 0x36	; 54
    1b30:	f5 4c       	sbci	r31, 0xC5	; 197
    1b32:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1b34:	e0 91 93 bd 	lds	r30, 0xBD93	; 0x80bd93 <__bss_end+0x8279>
    1b38:	2e c0       	rjmp	.+92     	; 0x1b96 <simonLed+0xae>
    } else if (val == 2) {
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	59 f4       	brne	.+22     	; 0x1b54 <simonLed+0x6c>
        iLED[WING[L][3]] = dimValue;
    1b3e:	e0 91 94 bd 	lds	r30, 0xBD94	; 0x80bd94 <__bss_end+0x827a>
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b48:	e6 53       	subi	r30, 0x36	; 54
    1b4a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b4c:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1b4e:	e0 91 95 bd 	lds	r30, 0xBD95	; 0x80bd95 <__bss_end+0x827b>
    1b52:	21 c0       	rjmp	.+66     	; 0x1b96 <simonLed+0xae>
    } else if (val == 3) {
    1b54:	83 30       	cpi	r24, 0x03	; 3
    1b56:	99 f4       	brne	.+38     	; 0x1b7e <simonLed+0x96>
        iLED[WING[R][0]] = dimValue;
    1b58:	e0 91 8c bd 	lds	r30, 0xBD8C	; 0x80bd8c <__bss_end+0x8272>
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b62:	e6 53       	subi	r30, 0x36	; 54
    1b64:	f5 4c       	sbci	r31, 0xC5	; 197
    1b66:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1b68:	e0 91 8d bd 	lds	r30, 0xBD8D	; 0x80bd8d <__bss_end+0x8273>
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b72:	e6 53       	subi	r30, 0x36	; 54
    1b74:	f5 4c       	sbci	r31, 0xC5	; 197
    1b76:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1b78:	e0 91 8e bd 	lds	r30, 0xBD8E	; 0x80bd8e <__bss_end+0x8274>
    1b7c:	0c c0       	rjmp	.+24     	; 0x1b96 <simonLed+0xae>
    } else if (val == 4) {
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	81 f4       	brne	.+32     	; 0x1ba2 <simonLed+0xba>
        iLED[WING[R][3]] = dimValue;
    1b82:	e0 91 8f bd 	lds	r30, 0xBD8F	; 0x80bd8f <__bss_end+0x8275>
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b8c:	e6 53       	subi	r30, 0x36	; 54
    1b8e:	f5 4c       	sbci	r31, 0xC5	; 197
    1b90:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1b92:	e0 91 90 bd 	lds	r30, 0xBD90	; 0x80bd90 <__bss_end+0x8276>
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1b9c:	e6 53       	subi	r30, 0x36	; 54
    1b9e:	f5 4c       	sbci	r31, 0xC5	; 197
    1ba0:	80 83       	st	Z, r24
    }
    simonTone(val);
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <BastetDictates>:

// Main game loop
uint8_t BastetDictates() {
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    if (CheckState(BASTET_COMPLETED))
    1bac:	8a e7       	ldi	r24, 0x7A	; 122
    1bae:	cd dc       	rcall	.-1638   	; 0x154a <CheckState>
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	b8 c0       	rjmp	.+368    	; 0x1d24 <BastetDictates+0x17c>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1bb4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1bb8:	8d 7f       	andi	r24, 0xFD	; 253
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <BastetDictates+0x16>
    1bbc:	b3 c0       	rjmp	.+358    	; 0x1d24 <BastetDictates+0x17c>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    1bbe:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	22 c0       	rjmp	.+68     	; 0x1c0a <BastetDictates+0x62>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    1bc6:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    1bca:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1bce:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <adcTemp>
    1bd2:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    1bd6:	82 0f       	add	r24, r18
    1bd8:	8f 73       	andi	r24, 0x3F	; 63
    1bda:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1bde:	c0 e0       	ldi	r28, 0x00	; 0
    1be0:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <simonPos>
    1be4:	c8 17       	cp	r28, r24
    1be6:	18 f4       	brcc	.+6      	; 0x1bee <BastetDictates+0x46>
    1be8:	82 db       	rcall	.-2300   	; 0x12ee <lfsr>
    1bea:	cf 5f       	subi	r28, 0xFF	; 255
    1bec:	f9 cf       	rjmp	.-14     	; 0x1be0 <BastetDictates+0x38>
    1bee:	ce e5       	ldi	r28, 0x5E	; 94

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1bf0:	d8 e3       	ldi	r29, 0x38	; 56
    1bf2:	7d db       	rcall	.-2310   	; 0x12ee <lfsr>
    1bf4:	83 70       	andi	r24, 0x03	; 3
    1bf6:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1bf8:	88 e3       	ldi	r24, 0x38	; 56
    1bfa:	ce 36       	cpi	r28, 0x6E	; 110
    1bfc:	d8 07       	cpc	r29, r24
    1bfe:	c9 f7       	brne	.-14     	; 0x1bf2 <BastetDictates+0x4a>
            simonState[i] = (lfsr() % 4);
        }
        simonPos = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <simonPos>
        simonGameState = BASTET_GAME_START;
    1c06:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState) {
    1c0a:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	29 f4       	brne	.+10     	; 0x1c1c <BastetDictates+0x74>
        // TODO start animu
        simonGameState = BASTET_GAME_SHOW_PATTERN;
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        simonTimer = 0;
    1c18:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <simonTimer>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1c1c:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	d9 f4       	brne	.+54     	; 0x1c5a <BastetDictates+0xb2>
        // assuming 15Hz
        uint8_t pos = simonTimer / (15 - (simonPos>>1));
    1c24:	20 91 2b 38 	lds	r18, 0x382B	; 0x80382b <simonPos>
    1c28:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <simonTimer>
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	32 2f       	mov	r19, r18
    1c30:	36 95       	lsr	r19
    1c32:	6f e0       	ldi	r22, 0x0F	; 15
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	63 1b       	sub	r22, r19
    1c38:	71 09       	sbc	r23, r1
    1c3a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__divmodhi4>
        if (pos > simonPos) {
    1c3e:	26 17       	cp	r18, r22
    1c40:	30 f4       	brcc	.+12     	; 0x1c4e <BastetDictates+0xa6>
            simonGameState = BASTET_GAME_INPUT;
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonLed(0);
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	4e df       	rcall	.-356    	; 0x1ae8 <simonLed>
            return 0;
    1c4c:	6b c0       	rjmp	.+214    	; 0x1d24 <BastetDictates+0x17c>
        }
        simonLed(simonState[pos]);
    1c4e:	77 27       	eor	r23, r23
    1c50:	fb 01       	movw	r30, r22
    1c52:	e2 5a       	subi	r30, 0xA2	; 162
    1c54:	f7 4c       	sbci	r31, 0xC7	; 199
    1c56:	80 81       	ld	r24, Z
    1c58:	47 df       	rcall	.-370    	; 0x1ae8 <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1c5a:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1c5e:	85 30       	cpi	r24, 0x05	; 5
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <BastetDictates+0xbc>
    1c62:	4e c0       	rjmp	.+156    	; 0x1d00 <BastetDictates+0x158>
        uint8_t choice = 0;
        if ((buttonState & 0xf0)&&(buttonState < 0xff)) {
    1c64:	e0 91 09 38 	lds	r30, 0x3809	; 0x803809 <buttonState>
    1c68:	8e 2f       	mov	r24, r30
    1c6a:	80 7f       	andi	r24, 0xF0	; 240
    1c6c:	c9 f1       	breq	.+114    	; 0x1ce0 <BastetDictates+0x138>
    1c6e:	ef 3f       	cpi	r30, 0xFF	; 255
    1c70:	b9 f1       	breq	.+110    	; 0x1ce0 <BastetDictates+0x138>
    1c72:	ef 70       	andi	r30, 0x0F	; 15
    1c74:	e1 50       	subi	r30, 0x01	; 1
    1c76:	e8 30       	cpi	r30, 0x08	; 8
    1c78:	98 f5       	brcc	.+102    	; 0x1ce0 <BastetDictates+0x138>
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	e8 52       	subi	r30, 0x28	; 40
    1c7e:	f2 44       	sbci	r31, 0x42	; 66
    1c80:	c0 81       	ld	r28, Z
                    break;
            }
        }

        //Button pressed
        if (choice > 0) {
    1c82:	cc 23       	and	r28, r28
    1c84:	69 f1       	breq	.+90     	; 0x1ce0 <BastetDictates+0x138>
            gameNow = BASTET;
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
            if (simonProcessed == 0) {
    1c8c:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <simonProcessed>
    1c90:	81 11       	cpse	r24, r1
                simonTimer = 0;
    1c92:	43 c0       	rjmp	.+134    	; 0x1d1a <BastetDictates+0x172>
    1c94:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <simonTimer>
                simonLed(choice);
    1c98:	8c 2f       	mov	r24, r28
    1c9a:	26 df       	rcall	.-436    	; 0x1ae8 <simonLed>
                // TODO something timer something 
                if (simonState[simonInputPos]+1 == choice) {
    1c9c:	40 91 5d 38 	lds	r20, 0x385D	; 0x80385d <simonInputPos>
    1ca0:	e4 2f       	mov	r30, r20
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	e2 5a       	subi	r30, 0xA2	; 162
    1ca6:	f7 4c       	sbci	r31, 0xC7	; 199
    1ca8:	20 81       	ld	r18, Z
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	2f 5f       	subi	r18, 0xFF	; 255
    1cae:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb0:	8c 2f       	mov	r24, r28
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	28 17       	cp	r18, r24
    1cb6:	39 07       	cpc	r19, r25
    1cb8:	21 f4       	brne	.+8      	; 0x1cc2 <BastetDictates+0x11a>
                    // TODO correct sound
                    simonInputPos++;
    1cba:	4f 5f       	subi	r20, 0xFF	; 255
    1cbc:	40 93 5d 38 	sts	0x385D, r20	; 0x80385d <simonInputPos>
                } else {
                    // TODO fail sound
                    simonInputPos = 0;
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <BastetDictates+0x126>
    1cc2:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonInputPos>
                    gameNow = TEXT;
    1cc6:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    simonLed(0);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
                }

                if (simonInputPos == BASTET_LENGTH) {
    1ccc:	0d df       	rcall	.-486    	; 0x1ae8 <simonLed>
    1cce:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonInputPos>
    1cd2:	80 31       	cpi	r24, 0x10	; 16
                    // TODO win animu
                    UpdateState(BASTET_COMPLETED);
    1cd4:	a9 f4       	brne	.+42     	; 0x1d00 <BastetDictates+0x158>
    1cd6:	8a e7       	ldi	r24, 0x7A	; 122
    1cd8:	2e dc       	rcall	.-1956   	; 0x1536 <UpdateState>
                    gameNow = TEXT;
    1cda:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
    1cde:	10 c0       	rjmp	.+32     	; 0x1d00 <BastetDictates+0x158>
                }
            }
        
        //Button released, next or reset!
        } else {    
            if (simonInputPos == simonPos) {
    1ce0:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonInputPos>
    1ce4:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <simonPos>
    1ce8:	89 13       	cpse	r24, r25
    1cea:	08 c0       	rjmp	.+16     	; 0x1cfc <BastetDictates+0x154>
                simonPos++;
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <simonPos>
                simonInputPos = 0;
    1cf2:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonInputPos>
                simonGameState = BASTET_GAME_SHOW_PATTERN;
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            }                    
            simonProcessed = 0;
    1cfc:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <simonProcessed>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    1d00:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1d04:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    1d06:	49 f4       	brne	.+18     	; 0x1d1a <BastetDictates+0x172>
    1d08:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <simonTimer>
    1d0c:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    1d0e:	28 f0       	brcs	.+10     	; 0x1d1a <BastetDictates+0x172>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	ea de       	rcall	.-556    	; 0x1ae8 <simonLed>
            simonGameState = BASTET_GAME_INPUT;
    1d14:	85 e0       	ldi	r24, 0x05	; 5
    1d16:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        }
    }

    ++simonTimer;
    1d1a:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <simonTimer>
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <simonTimer>
    return 0;
}
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	08 95       	ret

00001d2c <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	62 97       	sbiw	r28, 0x12	; 18
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	8a 8b       	std	Y+18, r24	; 0x12
    1d3e:	80 e1       	ldi	r24, 0x10	; 16
    1d40:	e0 e6       	ldi	r30, 0x60	; 96
    1d42:	fd eb       	ldi	r31, 0xBD	; 189
    1d44:	de 01       	movw	r26, r28
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	01 90       	ld	r0, Z+
    1d4a:	0d 92       	st	X+, r0
    1d4c:	8a 95       	dec	r24
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <Cheat+0x1c>
    1d50:	fe 01       	movw	r30, r28
    1d52:	31 96       	adiw	r30, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	21 91       	ld	r18, Z+
    1d5a:	31 91       	ld	r19, Z+
    1d5c:	26 17       	cp	r18, r22
    1d5e:	37 07       	cpc	r19, r23
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <Cheat+0x38>
    1d62:	89 2f       	mov	r24, r25
    1d64:	9f 5f       	subi	r25, 0xFF	; 255
    1d66:	98 30       	cpi	r25, 0x08	; 8
    1d68:	b9 f7       	brne	.-18     	; 0x1d58 <Cheat+0x2c>
    1d6a:	88 30       	cpi	r24, 0x08	; 8
    1d6c:	10 f0       	brcs	.+4      	; 0x1d72 <Cheat+0x46>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	12 c0       	rjmp	.+36     	; 0x1d96 <Cheat+0x6a>
    1d72:	18 e1       	ldi	r17, 0x18	; 24
    1d74:	18 0f       	add	r17, r24
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	be 01       	movw	r22, r28
    1d7a:	6f 5e       	subi	r22, 0xEF	; 239
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	81 2f       	mov	r24, r17
    1d80:	e2 d9       	rcall	.-3132   	; 0x1146 <EERead>
    1d82:	89 89       	ldd	r24, Y+17	; 0x11
    1d84:	8f 3f       	cpi	r24, 0xFF	; 255
    1d86:	99 f7       	brne	.-26     	; 0x1d6e <Cheat+0x42>
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	be 01       	movw	r22, r28
    1d8c:	6e 5e       	subi	r22, 0xEE	; 238
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	81 2f       	mov	r24, r17
    1d92:	e9 d9       	rcall	.-3118   	; 0x1166 <EEWrite>
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	62 96       	adiw	r28, 0x12	; 18
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	08 95       	ret

00001da4 <DecryptData>:
    1da4:	f9 01       	movw	r30, r18
    1da6:	9c 01       	movw	r18, r24
    1da8:	2e 1b       	sub	r18, r30
    1daa:	3f 0b       	sbc	r19, r31
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	48 9f       	mul	r20, r24
    1db0:	a0 01       	movw	r20, r0
    1db2:	11 24       	eor	r1, r1
    1db4:	4e 5a       	subi	r20, 0xAE	; 174
    1db6:	51 44       	sbci	r21, 0x41	; 65
    1db8:	66 23       	and	r22, r22
    1dba:	69 f0       	breq	.+26     	; 0x1dd6 <DecryptData+0x32>
    1dbc:	df 01       	movw	r26, r30
    1dbe:	a2 0f       	add	r26, r18
    1dc0:	b3 1f       	adc	r27, r19
    1dc2:	a7 70       	andi	r26, 0x07	; 7
    1dc4:	bb 27       	eor	r27, r27
    1dc6:	a4 0f       	add	r26, r20
    1dc8:	b5 1f       	adc	r27, r21
    1dca:	80 81       	ld	r24, Z
    1dcc:	9c 91       	ld	r25, X
    1dce:	98 27       	eor	r25, r24
    1dd0:	91 93       	st	Z+, r25
    1dd2:	61 50       	subi	r22, 0x01	; 1
    1dd4:	f1 cf       	rjmp	.-30     	; 0x1db8 <DecryptData+0x14>
    1dd6:	08 95       	ret

00001dd8 <UnflipData>:
    1dd8:	26 2f       	mov	r18, r22
    1dda:	fb 01       	movw	r30, r22
    1ddc:	35 e5       	ldi	r19, 0x55	; 85
    1dde:	9e 2f       	mov	r25, r30
    1de0:	92 1b       	sub	r25, r18
    1de2:	98 17       	cp	r25, r24
    1de4:	28 f4       	brcc	.+10     	; 0x1df0 <UnflipData+0x18>
    1de6:	90 81       	ld	r25, Z
    1de8:	92 95       	swap	r25
    1dea:	93 27       	eor	r25, r19
    1dec:	91 93       	st	Z+, r25
    1dee:	f7 cf       	rjmp	.-18     	; 0x1dde <UnflipData+0x6>
    1df0:	08 95       	ret

00001df2 <ExtEERead>:
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <ExtEERead+0x16>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	d6 2e       	mov	r13, r22
    1e0e:	c4 2e       	mov	r12, r20
    1e10:	59 01       	movw	r10, r18
    1e12:	7c 01       	movw	r14, r24
    1e14:	e8 94       	clt
    1e16:	f7 f8       	bld	r15, 7
    1e18:	f9 82       	std	Y+1, r15	; 0x01
    1e1a:	ea 82       	std	Y+2, r14	; 0x02
    1e1c:	06 2f       	mov	r16, r22
    1e1e:	42 e0       	ldi	r20, 0x02	; 2
    1e20:	be 01       	movw	r22, r28
    1e22:	6f 5f       	subi	r22, 0xFF	; 255
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	80 e5       	ldi	r24, 0x50	; 80
    1e28:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_read_bytes>
    1e2c:	18 2f       	mov	r17, r24
    1e2e:	81 11       	cpse	r24, r1
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <ExtEERead+0x4a>
    1e32:	95 01       	movw	r18, r10
    1e34:	4c 2d       	mov	r20, r12
    1e36:	6d 2d       	mov	r22, r13
    1e38:	c7 01       	movw	r24, r14
    1e3a:	b4 df       	rcall	.-152    	; 0x1da4 <DecryptData>
    1e3c:	81 2f       	mov	r24, r17
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	08 95       	ret

00001e58 <ClearTxAfter>:
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	88 30       	cpi	r24, 0x08	; 8
    1e5c:	30 f4       	brcc	.+12     	; 0x1e6a <ClearTxAfter+0x12>
    1e5e:	e8 2f       	mov	r30, r24
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	e8 5b       	subi	r30, 0xB8	; 184
    1e64:	f5 4c       	sbci	r31, 0xC5	; 197
    1e66:	10 82       	st	Z, r1
    1e68:	f7 cf       	rjmp	.-18     	; 0x1e58 <ClearTxAfter>
    1e6a:	08 95       	ret

00001e6c <StartsWith>:
    1e6c:	ac 01       	movw	r20, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	e9 2f       	mov	r30, r25
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	da 01       	movw	r26, r20
    1e76:	ae 0f       	add	r26, r30
    1e78:	bf 1f       	adc	r27, r31
    1e7a:	3c 91       	ld	r19, X
    1e7c:	e6 0f       	add	r30, r22
    1e7e:	f7 1f       	adc	r31, r23
    1e80:	31 11       	cpse	r19, r1
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <StartsWith+0x22>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 81       	ld	r25, Z
    1e88:	99 23       	and	r25, r25
    1e8a:	49 f0       	breq	.+18     	; 0x1e9e <StartsWith+0x32>
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <StartsWith+0x30>
    1e8e:	20 81       	ld	r18, Z
    1e90:	22 23       	and	r18, r18
    1e92:	c1 f3       	breq	.-16     	; 0x1e84 <StartsWith+0x18>
    1e94:	32 13       	cpse	r19, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <StartsWith+0x30>
    1e98:	9f 5f       	subi	r25, 0xFF	; 255
    1e9a:	ea cf       	rjmp	.-44     	; 0x1e70 <StartsWith+0x4>
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	08 95       	ret

00001ea0 <PrepareSending>:
    1ea0:	61 15       	cp	r22, r1
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	51 f1       	breq	.+84     	; 0x1efa <PrepareSending+0x5a>
    1ea6:	e0 e5       	ldi	r30, 0x50	; 80
    1ea8:	fa e3       	ldi	r31, 0x3A	; 58
    1eaa:	a8 e4       	ldi	r26, 0x48	; 72
    1eac:	ba e3       	ldi	r27, 0x3A	; 58
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	6f 3f       	cpi	r22, 0xFF	; 255
    1eb4:	71 05       	cpc	r23, r1
    1eb6:	69 f0       	breq	.+26     	; 0x1ed2 <PrepareSending+0x32>
    1eb8:	60 f0       	brcs	.+24     	; 0x1ed2 <PrepareSending+0x32>
    1eba:	81 93       	st	Z+, r24
    1ebc:	91 93       	st	Z+, r25
    1ebe:	3d 93       	st	X+, r19
    1ec0:	81 50       	subi	r24, 0x01	; 1
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	6f 5f       	subi	r22, 0xFF	; 255
    1ec6:	71 09       	sbc	r23, r1
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	27 30       	cpi	r18, 0x07	; 7
    1ecc:	91 f7       	brne	.-28     	; 0x1eb2 <PrepareSending+0x12>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	08 95       	ret
    1ed2:	e2 2f       	mov	r30, r18
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	df 01       	movw	r26, r30
    1ed8:	aa 0f       	add	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	a0 5b       	subi	r26, 0xB0	; 176
    1ede:	b5 4c       	sbci	r27, 0xC5	; 197
    1ee0:	8d 93       	st	X+, r24
    1ee2:	9c 93       	st	X, r25
    1ee4:	e8 5b       	subi	r30, 0xB8	; 184
    1ee6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ee8:	cb 01       	movw	r24, r22
    1eea:	6f ef       	ldi	r22, 0xFF	; 255
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__udivmodhi4>
    1ef2:	80 83       	st	Z, r24
    1ef4:	40 93 46 3a 	sts	0x3A46, r20	; 0x803a46 <txTypeNow>
    1ef8:	05 c0       	rjmp	.+10     	; 0x1f04 <PrepareSending+0x64>
    1efa:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrList>
    1efe:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrList+0x1>
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	82 2f       	mov	r24, r18
    1f06:	a8 df       	rcall	.-176    	; 0x1e58 <ClearTxAfter>
    1f08:	10 92 47 3a 	sts	0x3A47, r1	; 0x803a47 <txAddrNow>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	08 95       	ret

00001f10 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	f9 01       	movw	r30, r18
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	e5 5e       	subi	r30, 0xE5	; 229
    1f20:	f6 4c       	sbci	r31, 0xC6	; 198
    1f22:	ab e5       	ldi	r26, 0x5B	; 91
    1f24:	ba e7       	ldi	r27, 0x7A	; 122
    1f26:	a0 83       	st	Z, r26
    1f28:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1f2a:	f9 01       	movw	r30, r18
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	e5 5a       	subi	r30, 0xA5	; 165
    1f32:	f6 4c       	sbci	r31, 0xC6	; 198
    1f34:	62 e0       	ldi	r22, 0x02	; 2
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	60 83       	st	Z, r22
    1f3a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	f9 01       	movw	r30, r18
    1f42:	e5 56       	subi	r30, 0x65	; 101
    1f44:	f6 4c       	sbci	r31, 0xC6	; 198
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	40 83       	st	Z, r20
    1f4c:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f4e:	21 e0       	ldi	r18, 0x01	; 1
    1f50:	28 0f       	add	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	f9 01       	movw	r30, r18
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	e5 5e       	subi	r30, 0xE5	; 229
    1f5c:	f6 4c       	sbci	r31, 0xC6	; 198
    1f5e:	c4 e6       	ldi	r28, 0x64	; 100
    1f60:	da e7       	ldi	r29, 0x7A	; 122
    1f62:	c0 83       	st	Z, r28
    1f64:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    1f66:	f9 01       	movw	r30, r18
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	e5 5a       	subi	r30, 0xA5	; 165
    1f6e:	f6 4c       	sbci	r31, 0xC6	; 198
    1f70:	ca e0       	ldi	r28, 0x0A	; 10
    1f72:	d0 e0       	ldi	r29, 0x00	; 0
    1f74:	c0 83       	st	Z, r28
    1f76:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	e5 56       	subi	r30, 0x65	; 101
    1f80:	f6 4c       	sbci	r31, 0xC6	; 198
    1f82:	40 83       	st	Z, r20
    1f84:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1f86:	e2 e0       	ldi	r30, 0x02	; 2
    1f88:	e8 0f       	add	r30, r24
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	e5 5e       	subi	r30, 0xE5	; 229
    1f92:	f6 4c       	sbci	r31, 0xC6	; 198
    1f94:	20 ef       	ldi	r18, 0xF0	; 240
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	20 83       	st	Z, r18
    1f9a:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f9c:	23 e0       	ldi	r18, 0x03	; 3
    1f9e:	28 0f       	add	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	e5 5e       	subi	r30, 0xE5	; 229
    1faa:	f6 4c       	sbci	r31, 0xC6	; 198
    1fac:	a0 83       	st	Z, r26
    1fae:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	e5 5a       	subi	r30, 0xA5	; 165
    1fb8:	f6 4c       	sbci	r31, 0xC6	; 198
    1fba:	60 83       	st	Z, r22
    1fbc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	f9 01       	movw	r30, r18
    1fc4:	e5 56       	subi	r30, 0x65	; 101
    1fc6:	f6 4c       	sbci	r31, 0xC6	; 198
    1fc8:	40 83       	st	Z, r20
    1fca:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fcc:	24 e0       	ldi	r18, 0x04	; 4
    1fce:	28 0f       	add	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	f9 01       	movw	r30, r18
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	e5 5e       	subi	r30, 0xE5	; 229
    1fda:	f6 4c       	sbci	r31, 0xC6	; 198
    1fdc:	a7 e5       	ldi	r26, 0x57	; 87
    1fde:	ba e7       	ldi	r27, 0x7A	; 122
    1fe0:	a0 83       	st	Z, r26
    1fe2:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1fe4:	f9 01       	movw	r30, r18
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	e5 5a       	subi	r30, 0xA5	; 165
    1fec:	f6 4c       	sbci	r31, 0xC6	; 198
    1fee:	60 83       	st	Z, r22
    1ff0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1ff2:	22 0f       	add	r18, r18
    1ff4:	33 1f       	adc	r19, r19
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	e5 56       	subi	r30, 0x65	; 101
    1ffa:	f6 4c       	sbci	r31, 0xC6	; 198
    1ffc:	40 83       	st	Z, r20
    1ffe:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    2000:	8b 5f       	subi	r24, 0xFB	; 251
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	2c 97       	sbiw	r28, 0x0c	; 12
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	7c 01       	movw	r14, r24
    2026:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2028:	9e 01       	movw	r18, r28
    202a:	2f 5f       	subi	r18, 0xFF	; 255
    202c:	3f 4f       	sbci	r19, 0xFF	; 255
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	6c e0       	ldi	r22, 0x0C	; 12
    2032:	80 96       	adiw	r24, 0x20	; 32
    2034:	de de       	rcall	.-580    	; 0x1df2 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	98 27       	eor	r25, r24
    203c:	89 27       	eor	r24, r25
    203e:	98 27       	eor	r25, r24
    2040:	80 96       	adiw	r24, 0x20	; 32
    2042:	f8 01       	movw	r30, r16
    2044:	80 83       	st	Z, r24
    2046:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	98 27       	eor	r25, r24
    204e:	89 27       	eor	r24, r25
    2050:	98 27       	eor	r25, r24
    2052:	80 96       	adiw	r24, 0x20	; 32
    2054:	82 83       	std	Z+2, r24	; 0x02
    2056:	93 83       	std	Z+3, r25	; 0x03
    2058:	de 01       	movw	r26, r28
    205a:	15 96       	adiw	r26, 0x05	; 5
    205c:	34 96       	adiw	r30, 0x04	; 4
    205e:	c8 01       	movw	r24, r16
    2060:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2062:	2d 91       	ld	r18, X+
    2064:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2066:	e8 17       	cp	r30, r24
    2068:	f9 07       	cpc	r31, r25
    206a:	d9 f7       	brne	.-10     	; 0x2062 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    206c:	fc e2       	ldi	r31, 0x2C	; 44
    206e:	ef 0e       	add	r14, r31
    2070:	f1 1c       	adc	r15, r1
    2072:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2074:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2076:	9e 01       	movw	r18, r28
    2078:	2f 5f       	subi	r18, 0xFF	; 255
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	63 e0       	ldi	r22, 0x03	; 3
    2080:	c7 01       	movw	r24, r14
    2082:	b7 de       	rcall	.-658    	; 0x1df2 <ExtEERead>
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	98 27       	eor	r25, r24
    208a:	89 27       	eor	r24, r25
    208c:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    208e:	97 01       	movw	r18, r14
    2090:	2e 5f       	subi	r18, 0xFE	; 254
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2094:	43 e0       	ldi	r20, 0x03	; 3
    2096:	4d 15       	cp	r20, r13
    2098:	80 f4       	brcc	.+32     	; 0x20ba <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    209a:	ac 01       	movw	r20, r24
    209c:	41 50       	subi	r20, 0x01	; 1
    209e:	51 09       	sbc	r21, r1
    20a0:	f8 01       	movw	r30, r16
    20a2:	42 8f       	std	Z+26, r20	; 0x1a
    20a4:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    20a6:	f3 e0       	ldi	r31, 0x03	; 3
    20a8:	ef 0e       	add	r14, r31
    20aa:	f1 1c       	adc	r15, r1
    20ac:	f8 01       	movw	r30, r16
    20ae:	e4 86       	std	Z+12, r14	; 0x0c
    20b0:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    20b2:	4b 81       	ldd	r20, Y+3	; 0x03
    20b4:	f5 01       	movw	r30, r10
    20b6:	44 a3       	std	Z+36, r20	; 0x24
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    20ba:	f8 01       	movw	r30, r16
    20bc:	82 8f       	std	Z+26, r24	; 0x1a
    20be:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    20c0:	24 87       	std	Z+12, r18	; 0x0c
    20c2:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    20c4:	7c 01       	movw	r14, r24
    20c6:	e2 0e       	add	r14, r18
    20c8:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    20ca:	d3 94       	inc	r13
    20cc:	0e 5f       	subi	r16, 0xFE	; 254
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	ff ef       	ldi	r31, 0xFF	; 255
    20d2:	af 1a       	sub	r10, r31
    20d4:	bf 0a       	sbc	r11, r31
    20d6:	47 e0       	ldi	r20, 0x07	; 7
    20d8:	d4 12       	cpse	r13, r20
    20da:	cd cf       	rjmp	.-102    	; 0x2076 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    20dc:	2c 96       	adiw	r28, 0x0c	; 12
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	bf 90       	pop	r11
    20f2:	af 90       	pop	r10
    20f4:	08 95       	ret

000020f6 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    20f6:	cf 92       	push	r12
    20f8:	df 92       	push	r13
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	a0 97       	sbiw	r28, 0x20	; 32
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2112:	7c 01       	movw	r14, r24
    2114:	20 e2       	ldi	r18, 0x20	; 32
    2116:	e2 0e       	add	r14, r18
    2118:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    211a:	9e 01       	movw	r18, r28
    211c:	2f 5f       	subi	r18, 0xFF	; 255
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	62 e0       	ldi	r22, 0x02	; 2
    2124:	8c 96       	adiw	r24, 0x2c	; 44
    2126:	65 de       	rcall	.-822    	; 0x1df2 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    2128:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    212a:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    212c:	11 23       	and	r17, r17
    212e:	51 f1       	breq	.+84     	; 0x2184 <CheckLetter+0x8e>
    2130:	01 2f       	mov	r16, r17
    2132:	11 32       	cpi	r17, 0x21	; 33
    2134:	08 f0       	brcs	.+2      	; 0x2138 <CheckLetter+0x42>
    2136:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    2138:	9e 01       	movw	r18, r28
    213a:	2f 5f       	subi	r18, 0xFF	; 255
    213c:	3f 4f       	sbci	r19, 0xFF	; 255
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	60 2f       	mov	r22, r16
    2142:	c7 01       	movw	r24, r14
    2144:	0e 96       	adiw	r24, 0x0e	; 14
    2146:	55 de       	rcall	.-854    	; 0x1df2 <ExtEERead>
    2148:	fe 01       	movw	r30, r28
    214a:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    214c:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    214e:	dd 20       	and	r13, r13
    2150:	61 f0       	breq	.+24     	; 0x216a <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2152:	e1 e0       	ldi	r30, 0x01	; 1
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	ec 0f       	add	r30, r28
    2158:	fd 1f       	adc	r31, r29
    215a:	e8 0f       	add	r30, r24
    215c:	f1 1d       	adc	r31, r1
    215e:	90 81       	ld	r25, Z
    2160:	90 62       	ori	r25, 0x20	; 32
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	9c 11       	cpse	r25, r12
    2166:	0e c0       	rjmp	.+28     	; 0x2184 <CheckLetter+0x8e>
    2168:	0e c0       	rjmp	.+28     	; 0x2186 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    216a:	91 91       	ld	r25, Z+
    216c:	dd 24       	eor	r13, r13
    216e:	d3 94       	inc	r13
    2170:	9b 35       	cpi	r25, 0x5B	; 91
    2172:	09 f0       	breq	.+2      	; 0x2176 <CheckLetter+0x80>
    2174:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 17       	cp	r24, r16
    217a:	48 f3       	brcs	.-46     	; 0x214e <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    217c:	e0 0e       	add	r14, r16
    217e:	f1 1c       	adc	r15, r1
        x -= max;
    2180:	10 1b       	sub	r17, r16
    2182:	d4 cf       	rjmp	.-88     	; 0x212c <CheckLetter+0x36>
    }
    return 0;
    2184:	80 e0       	ldi	r24, 0x00	; 0
}
    2186:	a0 96       	adiw	r28, 0x20	; 32
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	08 95       	ret

0000219e <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    219e:	af 92       	push	r10
    21a0:	bf 92       	push	r11
    21a2:	df 92       	push	r13
    21a4:	ef 92       	push	r14
    21a6:	ff 92       	push	r15
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <FindChild+0x14>
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <FindChild+0x16>
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	d6 2e       	mov	r13, r22
    21ba:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    21bc:	9e 01       	movw	r18, r28
    21be:	2f 5f       	subi	r18, 0xFF	; 255
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	64 e0       	ldi	r22, 0x04	; 4
    21c6:	80 96       	adiw	r24, 0x20	; 32
    21c8:	14 de       	rcall	.-984    	; 0x1df2 <ExtEERead>
    21ca:	e9 80       	ldd	r14, Y+1	; 0x01
    21cc:	fa 80       	ldd	r15, Y+2	; 0x02
    21ce:	fe 24       	eor	r15, r14
    21d0:	ef 24       	eor	r14, r15
    21d2:	fe 24       	eor	r15, r14
    21d4:	0b 81       	ldd	r16, Y+3	; 0x03
    21d6:	1c 81       	ldd	r17, Y+4	; 0x04
    21d8:	10 27       	eor	r17, r16
    21da:	01 27       	eor	r16, r17
    21dc:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    21de:	0e 15       	cp	r16, r14
    21e0:	1f 05       	cpc	r17, r15
    21e2:	30 f5       	brcc	.+76     	; 0x2230 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    21e4:	a0 16       	cp	r10, r16
    21e6:	b1 06       	cpc	r11, r17
    21e8:	58 f0       	brcs	.+22     	; 0x2200 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    21ea:	9e 01       	movw	r18, r28
    21ec:	2f 5f       	subi	r18, 0xFF	; 255
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	c8 01       	movw	r24, r16
    21f6:	80 96       	adiw	r24, 0x20	; 32
    21f8:	fc dd       	rcall	.-1032   	; 0x1df2 <ExtEERead>
    21fa:	09 81       	ldd	r16, Y+1	; 0x01
    21fc:	1a 81       	ldd	r17, Y+2	; 0x02
    21fe:	ec cf       	rjmp	.-40     	; 0x21d8 <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    2200:	9e 01       	movw	r18, r28
    2202:	2f 5f       	subi	r18, 0xFF	; 255
    2204:	3f 4f       	sbci	r19, 0xFF	; 255
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	61 e0       	ldi	r22, 0x01	; 1
    220a:	c8 01       	movw	r24, r16
    220c:	85 96       	adiw	r24, 0x25	; 37
    220e:	f1 dd       	rcall	.-1054   	; 0x1df2 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	81 11       	cpse	r24, r1
    2214:	03 c0       	rjmp	.+6      	; 0x221c <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2216:	d1 10       	cpse	r13, r1
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    221a:	0d c0       	rjmp	.+26     	; 0x2236 <FindChild+0x98>
    221c:	96 d9       	rcall	.-3284   	; 0x154a <CheckState>
    221e:	81 11       	cpse	r24, r1
    2220:	fa cf       	rjmp	.-12     	; 0x2216 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2222:	e3 cf       	rjmp	.-58     	; 0x21ea <FindChild+0x4c>
    2224:	6d 2d       	mov	r22, r13
    2226:	c8 01       	movw	r24, r16
    2228:	66 df       	rcall	.-308    	; 0x20f6 <CheckLetter>
    222a:	88 23       	and	r24, r24
    222c:	f1 f2       	breq	.-68     	; 0x21ea <FindChild+0x4c>
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <FindChild+0x9a>
    2236:	c8 01       	movw	r24, r16
}
    2238:	24 96       	adiw	r28, 0x04	; 4
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	08 95       	ret

00002252 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2252:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2254:	9f e9       	ldi	r25, 0x9F	; 159
    2256:	98 0f       	add	r25, r24
    2258:	9a 31       	cpi	r25, 0x1A	; 26
    225a:	38 f0       	brcs	.+14     	; 0x226a <InpOkChk+0x18>
    225c:	90 ed       	ldi	r25, 0xD0	; 208
    225e:	98 0f       	add	r25, r24
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	9a 30       	cpi	r25, 0x0A	; 10
    2264:	18 f0       	brcs	.+6      	; 0x226c <InpOkChk+0x1a>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	08 95       	ret
    226a:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    226c:	08 95       	ret

0000226e <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2278:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    227a:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    227c:	f8 01       	movw	r30, r16
    227e:	ed 0f       	add	r30, r29
    2280:	f1 1d       	adc	r31, r1
    2282:	20 81       	ld	r18, Z
    2284:	8c 2f       	mov	r24, r28
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	22 23       	and	r18, r18
    228a:	51 f0       	breq	.+20     	; 0x22a0 <CleanInput+0x32>
        data[cnt] = data[x];
    228c:	d8 01       	movw	r26, r16
    228e:	a8 0f       	add	r26, r24
    2290:	b9 1f       	adc	r27, r25
    2292:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2294:	80 81       	ld	r24, Z
    2296:	dd df       	rcall	.-70     	; 0x2252 <InpOkChk>
    2298:	81 11       	cpse	r24, r1
    229a:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    229c:	df 5f       	subi	r29, 0xFF	; 255
    229e:	ee cf       	rjmp	.-36     	; 0x227c <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    22a0:	f8 01       	movw	r30, r16
    22a2:	e8 0f       	add	r30, r24
    22a4:	f9 1f       	adc	r31, r25
    22a6:	10 82       	st	Z, r1
    return cnt;
}
    22a8:	8c 2f       	mov	r24, r28
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	08 95       	ret

000022b4 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    22b4:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    22b6:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    22ba:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    22be:	89 2b       	or	r24, r25
    22c0:	99 f4       	brne	.+38     	; 0x22e8 <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    22c2:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    22cc:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
        auStart = ((effect&0xE0)>0);
    22d0:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    22d4:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    22d8:	80 7e       	andi	r24, 0xE0	; 224
    22da:	99 27       	eor	r25, r25
    22dc:	21 e0       	ldi	r18, 0x01	; 1
    22de:	89 2b       	or	r24, r25
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <CheckSend+0x30>
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	20 93 39 38 	sts	0x3839, r18	; 0x803839 <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    22e8:	20 91 47 3a 	lds	r18, 0x3A47	; 0x803a47 <txAddrNow>
    22ec:	28 30       	cpi	r18, 0x08	; 8
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <CheckSend+0x3e>
    22f0:	48 c0       	rjmp	.+144    	; 0x2382 <CheckSend+0xce>
    22f2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    22f6:	88 23       	and	r24, r24
    22f8:	09 f4       	brne	.+2      	; 0x22fc <CheckSend+0x48>
    22fa:	43 c0       	rjmp	.+134    	; 0x2382 <CheckSend+0xce>
        if (txStrLen[txAddrNow] == 0){
    22fc:	82 2f       	mov	r24, r18
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	fc 01       	movw	r30, r24
    2302:	e8 5b       	subi	r30, 0xB8	; 184
    2304:	f5 4c       	sbci	r31, 0xC5	; 197
    2306:	e0 81       	ld	r30, Z
    2308:	e1 11       	cpse	r30, r1
    230a:	06 c0       	rjmp	.+12     	; 0x2318 <CheckSend+0x64>
            txPart = 0;
    230c:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3947>
            txAddrNow = TXLISTLEN;
    2310:	88 e0       	ldi	r24, 0x08	; 8
    2312:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <txAddrNow>
    2316:	2d c0       	rjmp	.+90     	; 0x2372 <CheckSend+0xbe>
        } else if (txPart < txStrLen[txAddrNow]){
    2318:	50 91 06 39 	lds	r21, 0x3906	; 0x803906 <txPart.3947>
    231c:	5e 17       	cp	r21, r30
    231e:	58 f5       	brcc	.+86     	; 0x2376 <CheckSend+0xc2>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2320:	ce 2f       	mov	r28, r30
    2322:	c5 1b       	sub	r28, r21
    2324:	c1 32       	cpi	r28, 0x21	; 33
    2326:	08 f0       	brcs	.+2      	; 0x232a <CheckSend+0x76>
    2328:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	fc 01       	movw	r30, r24
    2330:	e0 5b       	subi	r30, 0xB0	; 176
    2332:	f5 4c       	sbci	r31, 0xC5	; 197
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	29 ef       	ldi	r18, 0xF9	; 249
    233a:	3a e3       	ldi	r19, 0x3A	; 58
    233c:	40 91 46 3a 	lds	r20, 0x3A46	; 0x803a46 <txTypeNow>
    2340:	6c 2f       	mov	r22, r28
    2342:	85 0f       	add	r24, r21
    2344:	91 1d       	adc	r25, r1
    2346:	55 dd       	rcall	.-1366   	; 0x1df2 <ExtEERead>
            txPart += EEreadLength;
    2348:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <txPart.3947>
    234c:	8c 0f       	add	r24, r28
    234e:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <txPart.3947>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2352:	ec 2f       	mov	r30, r28
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	e7 50       	subi	r30, 0x07	; 7
    2358:	f5 4c       	sbci	r31, 0xC5	; 197
    235a:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    235c:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <txBuffer>
    2360:	81 11       	cpse	r24, r1
    2362:	03 c0       	rjmp	.+6      	; 0x236a <CheckSend+0xb6>
    2364:	8b ed       	ldi	r24, 0xDB	; 219
    2366:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <txBuffer>
            SerSend(&txBuffer[0]);
    236a:	89 ef       	ldi	r24, 0xF9	; 249
    236c:	9a e3       	ldi	r25, 0x3A	; 58
    236e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	0b c0       	rjmp	.+22     	; 0x238c <CheckSend+0xd8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2376:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3947>
            ++txAddrNow;
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	20 93 47 3a 	sts	0x3A47, r18	; 0x803a47 <txAddrNow>
    2380:	f8 cf       	rjmp	.-16     	; 0x2372 <CheckSend+0xbe>
        }
    } else if (serTxDone) return 0; //All is sent!
    2382:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <serTxDone>
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	91 11       	cpse	r25, r1
    238a:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2394:	c0 91 1a 39 	lds	r28, 0x391A	; 0x80391a <responseList>
    2398:	cc 23       	and	r28, r28
    239a:	e9 f1       	breq	.+122    	; 0x2416 <CheckResponse+0x86>
        --responseList;
    239c:	c1 50       	subi	r28, 0x01	; 1
    239e:	c0 93 1a 39 	sts	0x391A, r28	; 0x80391a <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    23a2:	d0 91 05 39 	lds	r29, 0x3905	; 0x803905 <number.3951>
    23a6:	2d 2f       	mov	r18, r29
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	f9 01       	movw	r30, r18
    23ac:	ee 0f       	add	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	e5 5e       	subi	r30, 0xE5	; 229
    23b2:	f6 4c       	sbci	r31, 0xC6	; 198
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	80 3f       	cpi	r24, 0xF0	; 240
    23ba:	4f ef       	ldi	r20, 0xFF	; 255
    23bc:	94 07       	cpc	r25, r20
    23be:	51 f4       	brne	.+20     	; 0x23d4 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    23c0:	60 91 35 3a 	lds	r22, 0x3A35	; 0x803a35 <currObj+0x1a>
    23c4:	70 91 36 3a 	lds	r23, 0x3A36	; 0x803a36 <currObj+0x1b>
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0xc>
    23ce:	90 91 28 3a 	lds	r25, 0x3A28	; 0x803a28 <currObj+0xd>
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    23d4:	d9 01       	movw	r26, r18
    23d6:	aa 0f       	add	r26, r26
    23d8:	bb 1f       	adc	r27, r27
    23da:	a5 56       	subi	r26, 0x65	; 101
    23dc:	b6 4c       	sbci	r27, 0xC6	; 198
    23de:	22 0f       	add	r18, r18
    23e0:	33 1f       	adc	r19, r19
    23e2:	f9 01       	movw	r30, r18
    23e4:	e5 5a       	subi	r30, 0xA5	; 165
    23e6:	f6 4c       	sbci	r31, 0xC6	; 198
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	4c 91       	ld	r20, X
    23ee:	58 dd       	rcall	.-1360   	; 0x1ea0 <PrepareSending>
        }
        ++number;
    23f0:	df 5f       	subi	r29, 0xFF	; 255
    23f2:	d0 93 05 39 	sts	0x3905, r29	; 0x803905 <number.3951>

        if (responseList == 0) {
    23f6:	c1 11       	cpse	r28, r1
    23f8:	0d c0       	rjmp	.+26     	; 0x2414 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    23fa:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2404:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            RXCNT = 0;
    2408:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    240a:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
            number = 0;
    240e:	10 92 05 39 	sts	0x3905, r1	; 0x803905 <number.3951>
    2412:	01 c0       	rjmp	.+2      	; 0x2416 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    2414:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    2416:	8c 2f       	mov	r24, r28
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	08 95       	ret

0000241e <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    241e:	5f 92       	push	r5
    2420:	6f 92       	push	r6
    2422:	7f 92       	push	r7
    2424:	8f 92       	push	r8
    2426:	9f 92       	push	r9
    2428:	af 92       	push	r10
    242a:	bf 92       	push	r11
    242c:	cf 92       	push	r12
    242e:	df 92       	push	r13
    2430:	ef 92       	push	r14
    2432:	ff 92       	push	r15
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	a1 97       	sbiw	r28, 0x21	; 33
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    2448:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <currDepth>
    244c:	8f 3f       	cpi	r24, 0xFF	; 255
    244e:	49 f4       	brne	.+18     	; 0x2462 <CheckInput+0x44>
        //Start at first location
        PopulateObject(route[0], &currObj);
    2450:	6b e1       	ldi	r22, 0x1B	; 27
    2452:	7a e3       	ldi	r23, 0x3A	; 58
    2454:	80 91 db 39 	lds	r24, 0x39DB	; 0x8039db <route>
    2458:	90 91 dc 39 	lds	r25, 0x39DC	; 0x8039dc <route+0x1>
    245c:	d5 dd       	rcall	.-1110   	; 0x2008 <PopulateObject>
        currDepth = 0;
    245e:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <currDepth>
    }

    if (serRxDone){
    2462:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
    2466:	88 23       	and	r24, r24
    2468:	09 f4       	brne	.+2      	; 0x246c <CheckInput+0x4e>
    246a:	61 c2       	rjmp	.+1218   	; 0x292e <CheckInput+0x510>

        //Special input requested from user by game
        if (specialInput[0]){
    246c:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2470:	88 23       	and	r24, r24
    2472:	09 f4       	brne	.+2      	; 0x2476 <CheckInput+0x58>
    2474:	57 c0       	rjmp	.+174    	; 0x2524 <CheckInput+0x106>
            specialPassed = 0;
    2476:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <specialPassed>
            data[0] = 'a';
    247a:	81 e6       	ldi	r24, 0x61	; 97
    247c:	f8 01       	movw	r30, r16
    247e:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2480:	6a e0       	ldi	r22, 0x0A	; 10
    2482:	79 e3       	ldi	r23, 0x39	; 57
    2484:	85 e7       	ldi	r24, 0x75	; 117
    2486:	9a e3       	ldi	r25, 0x3A	; 58
    2488:	f1 dc       	rcall	.-1566   	; 0x1e6c <StartsWith>
    248a:	f8 2e       	mov	r15, r24
    248c:	88 23       	and	r24, r24
    248e:	21 f0       	breq	.+8      	; 0x2498 <CheckInput+0x7a>
                specialPassed = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <specialPassed>
    2496:	04 c0       	rjmp	.+8      	; 0x24a0 <CheckInput+0x82>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2498:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    249c:	81 33       	cpi	r24, 0x31	; 49
    249e:	11 f0       	breq	.+4      	; 0x24a4 <CheckInput+0x86>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    24a0:	f1 2c       	mov	r15, r1
    24a2:	47 c2       	rjmp	.+1166   	; 0x2932 <CheckInput+0x514>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    24a4:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput+0x2>
    24a8:	81 11       	cpse	r24, r1
    24aa:	fa cf       	rjmp	.-12     	; 0x24a0 <CheckInput+0x82>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    24ac:	85 e7       	ldi	r24, 0x75	; 117
    24ae:	9a e3       	ldi	r25, 0x3A	; 58
    24b0:	de de       	rcall	.-580    	; 0x226e <CleanInput>
                specialPassed = 2;
    24b2:	92 e0       	ldi	r25, 0x02	; 2
    24b4:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <specialPassed>
                data[1] = 0;
    24b8:	f8 01       	movw	r30, r16
    24ba:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	80 f3       	brcs	.-32     	; 0x24a0 <CheckInput+0x82>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    24c0:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    24c4:	81 33       	cpi	r24, 0x31	; 49
    24c6:	61 f0       	breq	.+24     	; 0x24e0 <CheckInput+0xc2>
    24c8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    24cc:	82 33       	cpi	r24, 0x32	; 50
    24ce:	41 f0       	breq	.+16     	; 0x24e0 <CheckInput+0xc2>
    24d0:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    24d4:	83 33       	cpi	r24, 0x33	; 51
    24d6:	21 f0       	breq	.+8      	; 0x24e0 <CheckInput+0xc2>
    24d8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    24dc:	84 33       	cpi	r24, 0x34	; 52
    24de:	01 f7       	brne	.-64     	; 0x24a0 <CheckInput+0x82>
                        serRx[1] |= 0x20;
    24e0:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    24e4:	80 62       	ori	r24, 0x20	; 32
    24e6:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    24ea:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    24ee:	81 36       	cpi	r24, 0x61	; 97
    24f0:	61 f0       	breq	.+24     	; 0x250a <CheckInput+0xec>
    24f2:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    24f6:	85 36       	cpi	r24, 0x65	; 101
    24f8:	41 f0       	breq	.+16     	; 0x250a <CheckInput+0xec>
    24fa:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    24fe:	86 36       	cpi	r24, 0x66	; 102
    2500:	21 f0       	breq	.+8      	; 0x250a <CheckInput+0xec>
    2502:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    2506:	87 37       	cpi	r24, 0x77	; 119
    2508:	59 f6       	brne	.-106    	; 0x24a0 <CheckInput+0x82>
                            data[1] = specialInput[1]+0x11;
    250a:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput+0x1>
    250e:	8f 5e       	subi	r24, 0xEF	; 239
    2510:	f8 01       	movw	r30, r16
    2512:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    2514:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    2518:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    251a:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    251e:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2520:	14 82       	std	Z+4, r1	; 0x04
    2522:	07 c2       	rjmp	.+1038   	; 0x2932 <CheckInput+0x514>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    2524:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    2528:	83 32       	cpi	r24, 0x23	; 35
    252a:	89 f5       	brne	.+98     	; 0x258e <CheckInput+0x170>
    252c:	8d b3       	in	r24, 0x1d	; 29
    252e:	86 30       	cpi	r24, 0x06	; 6
    2530:	71 f5       	brne	.+92     	; 0x258e <CheckInput+0x170>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    2538:	fc 01       	movw	r30, r24
    253a:	eb 58       	subi	r30, 0x8B	; 139
    253c:	f5 4c       	sbci	r31, 0xC5	; 197
    253e:	20 81       	ld	r18, Z
    2540:	20 53       	subi	r18, 0x30	; 48
    2542:	20 83       	st	Z, r18
                    bitNr *= 10;
    2544:	11 0f       	add	r17, r17
    2546:	21 2f       	mov	r18, r17
    2548:	22 0f       	add	r18, r18
    254a:	22 0f       	add	r18, r18
    254c:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    254e:	20 91 76 3a 	lds	r18, 0x3A76	; 0x803a76 <serRx+0x1>
    2552:	23 30       	cpi	r18, 0x03	; 3
    2554:	48 f4       	brcc	.+18     	; 0x2568 <CheckInput+0x14a>
                    if (serRx[x] < 10) {
    2556:	20 81       	ld	r18, Z
    2558:	2a 30       	cpi	r18, 0x0A	; 10
    255a:	b8 f4       	brcc	.+46     	; 0x258a <CheckInput+0x16c>
                        bitNr += serRx[x];
    255c:	20 81       	ld	r18, Z
    255e:	12 0f       	add	r17, r18
    2560:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	91 05       	cpc	r25, r1
    2566:	41 f7       	brne	.-48     	; 0x2538 <CheckInput+0x11a>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    2568:	81 2f       	mov	r24, r17
    256a:	8f 77       	andi	r24, 0x7F	; 127
    256c:	71 f0       	breq	.+28     	; 0x258a <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    256e:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <serRx+0x4>
    2572:	60 91 7a 3a 	lds	r22, 0x3A7A	; 0x803a7a <serRx+0x5>
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	78 2b       	or	r23, r24
    257a:	81 2f       	mov	r24, r17
    257c:	80 95       	com	r24
    257e:	d6 db       	rcall	.-2132   	; 0x1d2c <Cheat>
    2580:	88 23       	and	r24, r24
    2582:	19 f0       	breq	.+6      	; 0x258a <CheckInput+0x16c>
    2584:	81 2f       	mov	r24, r17
    2586:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	50 c0       	rjmp	.+160    	; 0x262e <CheckInput+0x210>
    258e:	d8 01       	movw	r26, r16
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2594:	fc 01       	movw	r30, r24
    2596:	eb 58       	subi	r30, 0x8B	; 139
    2598:	f5 4c       	sbci	r31, 0xC5	; 197
    259a:	20 81       	ld	r18, Z
    259c:	21 34       	cpi	r18, 0x41	; 65
    259e:	18 f0       	brcs	.+6      	; 0x25a6 <CheckInput+0x188>
    25a0:	20 81       	ld	r18, Z
    25a2:	2b 35       	cpi	r18, 0x5B	; 91
    25a4:	10 f0       	brcs	.+4      	; 0x25aa <CheckInput+0x18c>
    25a6:	20 81       	ld	r18, Z
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <CheckInput+0x190>
    25aa:	20 81       	ld	r18, Z
    25ac:	20 62       	ori	r18, 0x20	; 32
    25ae:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    25b0:	20 81       	ld	r18, Z
    25b2:	21 11       	cpse	r18, r1
    25b4:	05 c0       	rjmp	.+10     	; 0x25c0 <CheckInput+0x1a2>
                    data[x] = 0;
    25b6:	f8 01       	movw	r30, r16
    25b8:	e8 0f       	add	r30, r24
    25ba:	f1 1d       	adc	r31, r1
    25bc:	10 82       	st	Z, r1
                    break;
    25be:	05 c0       	rjmp	.+10     	; 0x25ca <CheckInput+0x1ac>
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    25c4:	81 34       	cpi	r24, 0x41	; 65
    25c6:	91 05       	cpc	r25, r1
    25c8:	29 f7       	brne	.-54     	; 0x2594 <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    25ca:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
                data[0] = 0;
    25ce:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    25d0:	81 11       	cpse	r24, r1
    25d2:	05 c0       	rjmp	.+10     	; 0x25de <CheckInput+0x1c0>
                data[0] = 0;
    25d4:	10 82       	st	Z, r1
                RXCNT = 0;
    25d6:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    25d8:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    25dc:	a8 c1       	rjmp	.+848    	; 0x292e <CheckInput+0x510>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    25de:	80 81       	ld	r24, Z
    25e0:	8f 33       	cpi	r24, 0x3F	; 63
    25e2:	11 f0       	breq	.+4      	; 0x25e8 <CheckInput+0x1ca>
    25e4:	88 36       	cpi	r24, 0x68	; 104
    25e6:	39 f5       	brne	.+78     	; 0x2636 <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25e8:	8b e5       	ldi	r24, 0x5B	; 91
    25ea:	9a e7       	ldi	r25, 0x7A	; 122
    25ec:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    25f0:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    25f4:	84 e0       	ldi	r24, 0x04	; 4
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    25fc:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    2608:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    260c:	23 e9       	ldi	r18, 0x93	; 147
    260e:	3b e7       	ldi	r19, 0x7B	; 123
    2610:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2614:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2618:	2d e6       	ldi	r18, 0x6D	; 109
    261a:	34 e0       	ldi	r19, 0x04	; 4
    261c:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    2620:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2624:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2628:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	70 dc       	rcall	.-1824   	; 0x1f10 <SetStandardResponse>
    2630:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    2634:	7c c1       	rjmp	.+760    	; 0x292e <CheckInput+0x510>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2636:	81 36       	cpi	r24, 0x61	; 97
    2638:	d9 f4       	brne	.+54     	; 0x2670 <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    263a:	8b e5       	ldi	r24, 0x5B	; 91
    263c:	9a e7       	ldi	r25, 0x7A	; 122
    263e:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    2642:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    2646:	84 e0       	ldi	r24, 0x04	; 4
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    264e:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    265a:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    265e:	2e e6       	ldi	r18, 0x6E	; 110
    2660:	3a e7       	ldi	r19, 0x7A	; 122
    2662:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2666:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    266a:	25 e2       	ldi	r18, 0x25	; 37
    266c:	31 e0       	ldi	r19, 0x01	; 1
    266e:	d6 cf       	rjmp	.-84     	; 0x261c <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2670:	87 37       	cpi	r24, 0x77	; 119
    2672:	09 f0       	breq	.+2      	; 0x2676 <CheckInput+0x258>
    2674:	6e c0       	rjmp	.+220    	; 0x2752 <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2676:	8b e5       	ldi	r24, 0x5B	; 91
    2678:	9a e7       	ldi	r25, 0x7A	; 122
    267a:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    267e:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    2682:	84 e0       	ldi	r24, 0x04	; 4
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    268a:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    268e:	21 e0       	ldi	r18, 0x01	; 1
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	20 93 9b 39 	sts	0x399B, r18	; 0x80399b <reactStr+0x80>
    2696:	30 93 9c 39 	sts	0x399C, r19	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    269a:	8a ec       	ldi	r24, 0xCA	; 202
    269c:	96 e7       	ldi	r25, 0x76	; 118
    269e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    26a2:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    26a6:	82 e1       	ldi	r24, 0x12	; 18
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    26ae:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    26b2:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    26b6:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    26ba:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26c2:	84 ec       	ldi	r24, 0xC4	; 196
    26c4:	96 e7       	ldi	r25, 0x76	; 118
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    26c8:	82 30       	cpi	r24, 0x02	; 2
    26ca:	49 f4       	brne	.+18     	; 0x26de <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26cc:	81 ec       	ldi	r24, 0xC1	; 193
    26ce:	96 e7       	ldi	r25, 0x76	; 118
    26d0:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    26d4:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	1e c0       	rjmp	.+60     	; 0x271a <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    26de:	83 30       	cpi	r24, 0x03	; 3
    26e0:	49 f4       	brne	.+18     	; 0x26f4 <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26e2:	8b eb       	ldi	r24, 0xBB	; 187
    26e4:	96 e7       	ldi	r25, 0x76	; 118
    26e6:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    26ea:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    26ee:	86 e0       	ldi	r24, 0x06	; 6
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	13 c0       	rjmp	.+38     	; 0x271a <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    26f4:	84 30       	cpi	r24, 0x04	; 4
    26f6:	49 f4       	brne	.+18     	; 0x270a <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26f8:	86 eb       	ldi	r24, 0xB6	; 182
    26fa:	96 e7       	ldi	r25, 0x76	; 118
    26fc:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2700:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2704:	85 e0       	ldi	r24, 0x05	; 5
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	08 c0       	rjmp	.+16     	; 0x271a <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    270a:	8f e3       	ldi	r24, 0x3F	; 63
    270c:	96 e7       	ldi	r25, 0x76	; 118
    270e:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2712:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2716:	82 e4       	ldi	r24, 0x42	; 66
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    271e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2722:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    2726:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    272a:	8c e9       	ldi	r24, 0x9C	; 156
    272c:	96 e7       	ldi	r25, 0x76	; 118
    272e:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    2732:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    2736:	8a e1       	ldi	r24, 0x1A	; 26
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    273e:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    274a:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    274e:	84 e0       	ldi	r24, 0x04	; 4
    2750:	6e cf       	rjmp	.-292    	; 0x262e <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    2752:	81 37       	cpi	r24, 0x71	; 113
    2754:	d9 f4       	brne	.+54     	; 0x278c <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2756:	8b e5       	ldi	r24, 0x5B	; 91
    2758:	9a e7       	ldi	r25, 0x7A	; 122
    275a:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    275e:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    2762:	84 e0       	ldi	r24, 0x04	; 4
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    276a:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    2776:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    277a:	22 e0       	ldi	r18, 0x02	; 2
    277c:	3a e7       	ldi	r19, 0x7A	; 122
    277e:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2782:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2786:	25 e5       	ldi	r18, 0x55	; 85
    2788:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    278a:	48 cf       	rjmp	.-368    	; 0x261c <CheckInput+0x1fe>
    278c:	60 ee       	ldi	r22, 0xE0	; 224
    278e:	7d eb       	ldi	r23, 0xBD	; 189
    2790:	c8 01       	movw	r24, r16
    2792:	6c db       	rcall	.-2344   	; 0x1e6c <StartsWith>
    2794:	88 23       	and	r24, r24
    2796:	f9 f0       	breq	.+62     	; 0x27d6 <CheckInput+0x3b8>
    2798:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	81 2f       	mov	r24, r17
    279e:	0e 94 81 0a 	call	0x1502	; 0x1502 <WriteStatusBit>
    27a2:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    27a4:	12 37       	cpi	r17, 0x72	; 114
    27a6:	c9 f7       	brne	.-14     	; 0x279a <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    27a8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    27ac:	80 e2       	ldi	r24, 0x20	; 32
    27ae:	e3 e2       	ldi	r30, 0x23	; 35
    27b0:	fe eb       	ldi	r31, 0xBE	; 190
    27b2:	de 01       	movw	r26, r28
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	01 90       	ld	r0, Z+
    27b8:	0d 92       	st	X+, r0
    27ba:	8a 95       	dec	r24
    27bc:	e1 f7       	brne	.-8      	; 0x27b6 <CheckInput+0x398>
                SerSpeed(60);
    27be:	8c e3       	ldi	r24, 0x3C	; 60
    27c0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    27c4:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    27c8:	88 23       	and	r24, r24
    27ca:	e1 f3       	breq	.-8      	; 0x27c4 <CheckInput+0x3a6>
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    27d4:	f7 cf       	rjmp	.-18     	; 0x27c4 <CheckInput+0x3a6>
    27d6:	66 ee       	ldi	r22, 0xE6	; 230
    27d8:	7d eb       	ldi	r23, 0xBD	; 189
    27da:	c8 01       	movw	r24, r16
    27dc:	47 db       	rcall	.-2418   	; 0x1e6c <StartsWith>
    27de:	88 23       	and	r24, r24
    27e0:	61 f1       	breq	.+88     	; 0x283a <CheckInput+0x41c>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	89 a3       	std	Y+33, r24	; 0x21
    27e6:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	be 01       	movw	r22, r28
    27ec:	6f 5d       	subi	r22, 0xDF	; 223
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	81 2f       	mov	r24, r17
    27f2:	0e 94 b3 08 	call	0x1166	; 0x1166 <EEWrite>
    27f6:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    27f8:	10 32       	cpi	r17, 0x20	; 32
    27fa:	b1 f7       	brne	.-20     	; 0x27e8 <CheckInput+0x3ca>
    27fc:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	81 2f       	mov	r24, r17
    2802:	0e 94 81 0a 	call	0x1502	; 0x1502 <WriteStatusBit>
    2806:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2808:	12 37       	cpi	r17, 0x72	; 114
    280a:	c9 f7       	brne	.-14     	; 0x27fe <CheckInput+0x3e0>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    280c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    2810:	8f e0       	ldi	r24, 0x0F	; 15
    2812:	e3 e4       	ldi	r30, 0x43	; 67
    2814:	fe eb       	ldi	r31, 0xBE	; 190
    2816:	de 01       	movw	r26, r28
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	01 90       	ld	r0, Z+
    281c:	0d 92       	st	X+, r0
    281e:	8a 95       	dec	r24
    2820:	e1 f7       	brne	.-8      	; 0x281a <CheckInput+0x3fc>
                SerSpeed(60);
    2822:	8c e3       	ldi	r24, 0x3C	; 60
    2824:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2828:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    282c:	88 23       	and	r24, r24
    282e:	e1 f3       	breq	.-8      	; 0x2828 <CheckInput+0x40a>
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	0e 94 db 08 	call	0x11b6	; 0x11b6 <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    2838:	f7 cf       	rjmp	.-18     	; 0x2828 <CheckInput+0x40a>
    283a:	6d e1       	ldi	r22, 0x1D	; 29
    283c:	7e eb       	ldi	r23, 0xBE	; 190
    283e:	c8 01       	movw	r24, r16
    2840:	15 db       	rcall	.-2518   	; 0x1e6c <StartsWith>
    2842:	88 23       	and	r24, r24
    2844:	09 f4       	brne	.+2      	; 0x2848 <CheckInput+0x42a>
    2846:	2c ce       	rjmp	.-936    	; 0x24a0 <CheckInput+0x82>
    2848:	8b e1       	ldi	r24, 0x1B	; 27
    284a:	c8 2e       	mov	r12, r24
    284c:	89 e3       	ldi	r24, 0x39	; 57
    284e:	d8 2e       	mov	r13, r24
    2850:	9d e5       	ldi	r25, 0x5D	; 93
    2852:	e9 2e       	mov	r14, r25
    2854:	99 e3       	ldi	r25, 0x39	; 57
    2856:	f9 2e       	mov	r15, r25
    2858:	0d e9       	ldi	r16, 0x9D	; 157
    285a:	19 e3       	ldi	r17, 0x39	; 57
    285c:	28 e1       	ldi	r18, 0x18	; 24
    285e:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2860:	aa 24       	eor	r10, r10
    2862:	a3 94       	inc	r10
    2864:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2866:	49 e5       	ldi	r20, 0x59	; 89
    2868:	84 2e       	mov	r8, r20
    286a:	4a e7       	ldi	r20, 0x7A	; 122
    286c:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    286e:	52 e0       	ldi	r21, 0x02	; 2
    2870:	65 2e       	mov	r6, r21
    2872:	71 2c       	mov	r7, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	be 01       	movw	r22, r28
    2878:	6f 5d       	subi	r22, 0xDF	; 223
    287a:	7f 4f       	sbci	r23, 0xFF	; 255
    287c:	85 2d       	mov	r24, r5
    287e:	0e 94 a3 08 	call	0x1146	; 0x1146 <EERead>
                    bit = 0xff-bit;
    2882:	89 a1       	ldd	r24, Y+33	; 0x21
    2884:	80 95       	com	r24
    2886:	89 a3       	std	Y+33, r24	; 0x21
                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    } 
                    */
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
    2888:	98 2f       	mov	r25, r24
    288a:	92 95       	swap	r25
    288c:	9f 70       	andi	r25, 0x0F	; 15
    288e:	e1 e0       	ldi	r30, 0x01	; 1
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	ec 0f       	add	r30, r28
    2894:	fd 1f       	adc	r31, r29
    2896:	e9 0f       	add	r30, r25
    2898:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    289a:	20 81       	ld	r18, Z
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	2e 52       	subi	r18, 0x2E	; 46
    28a0:	3b 48       	sbci	r19, 0x8B	; 139
    28a2:	f6 01       	movw	r30, r12
    28a4:	22 83       	std	Z+2, r18	; 0x02
    28a6:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    28a8:	f7 01       	movw	r30, r14
    28aa:	a0 82       	st	Z, r10
    28ac:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    28ae:	f8 01       	movw	r30, r16
    28b0:	a0 82       	st	Z, r10
    28b2:	b1 82       	std	Z+1, r11	; 0x01
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    } 
                    */
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+digit[bit%16], 1, TEASER);
    28b4:	8f 70       	andi	r24, 0x0F	; 15
    28b6:	e1 e0       	ldi	r30, 0x01	; 1
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	ec 0f       	add	r30, r28
    28bc:	fd 1f       	adc	r31, r29
    28be:	e8 0f       	add	r30, r24
    28c0:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28c2:	80 81       	ld	r24, Z
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	8e 52       	subi	r24, 0x2E	; 46
    28c8:	9b 48       	sbci	r25, 0x8B	; 139
    28ca:	f6 01       	movw	r30, r12
    28cc:	84 83       	std	Z+4, r24	; 0x04
    28ce:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    28d0:	f7 01       	movw	r30, r14
    28d2:	a2 82       	std	Z+2, r10	; 0x02
    28d4:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    28d6:	f8 01       	movw	r30, r16
    28d8:	a2 82       	std	Z+2, r10	; 0x02
    28da:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28dc:	f6 01       	movw	r30, r12
    28de:	86 82       	std	Z+6, r8	; 0x06
    28e0:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    28e2:	f7 01       	movw	r30, r14
    28e4:	64 82       	std	Z+4, r6	; 0x04
    28e6:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    28e8:	f8 01       	movw	r30, r16
    28ea:	a4 82       	std	Z+4, r10	; 0x04
    28ec:	b5 82       	std	Z+5, r11	; 0x05
    28ee:	53 94       	inc	r5
    28f0:	f8 e0       	ldi	r31, 0x08	; 8
    28f2:	cf 0e       	add	r12, r31
    28f4:	d1 1c       	adc	r13, r1
    28f6:	88 e0       	ldi	r24, 0x08	; 8
    28f8:	e8 0e       	add	r14, r24
    28fa:	f1 1c       	adc	r15, r1
    28fc:	08 5f       	subi	r16, 0xF8	; 248
    28fe:	1f 4f       	sbci	r17, 0xFF	; 255
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2900:	e0 e2       	ldi	r30, 0x20	; 32
    2902:	5e 12       	cpse	r5, r30
    2904:	b7 cf       	rjmp	.-146    	; 0x2874 <CheckInput+0x456>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2906:	8b e5       	ldi	r24, 0x5B	; 91
    2908:	9a e7       	ldi	r25, 0x7A	; 122
    290a:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x3e>
    290e:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x3f>
    reactStr[1][number]=length;
    2912:	84 e0       	ldi	r24, 0x04	; 4
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x7e>
    291a:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x7f>
    reactStr[2][number]=type;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	80 93 d9 39 	sts	0x39D9, r24	; 0x8039d9 <reactStr+0xbe>
    2926:	90 93 da 39 	sts	0x39DA, r25	; 0x8039da <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+digit[bit%16], 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    292a:	50 92 1a 39 	sts	0x391A, r5	; 0x80391a <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    292e:	ff 24       	eor	r15, r15
    2930:	f3 94       	inc	r15
}
    2932:	8f 2d       	mov	r24, r15
    2934:	a1 96       	adiw	r28, 0x21	; 33
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	bf 90       	pop	r11
    294c:	af 90       	pop	r10
    294e:	9f 90       	pop	r9
    2950:	8f 90       	pop	r8
    2952:	7f 90       	pop	r7
    2954:	6f 90       	pop	r6
    2956:	5f 90       	pop	r5
    2958:	08 95       	ret

0000295a <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    295a:	4f 92       	push	r4
    295c:	5f 92       	push	r5
    295e:	6f 92       	push	r6
    2960:	7f 92       	push	r7
    2962:	8f 92       	push	r8
    2964:	9f 92       	push	r9
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	2a 97       	sbiw	r28, 0x0a	; 10
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2986:	73 dc       	rcall	.-1818   	; 0x226e <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2988:	c8 01       	movw	r24, r16
    298a:	71 dc       	rcall	.-1822   	; 0x226e <CleanInput>
    298c:	f8 2e       	mov	r15, r24

    if (inputLen) {
    298e:	88 23       	and	r24, r24
    2990:	09 f4       	brne	.+2      	; 0x2994 <ProcessInput+0x3a>
    2992:	ee c7       	rjmp	.+4060   	; 0x3970 <ProcessInput+0x1016>

        //eXit to previous location
        if (data[0] == 'x'){
    2994:	d8 01       	movw	r26, r16
    2996:	8c 91       	ld	r24, X
    2998:	88 37       	cpi	r24, 0x78	; 120
    299a:	09 f0       	breq	.+2      	; 0x299e <ProcessInput+0x44>
    299c:	45 c0       	rjmp	.+138    	; 0x2a28 <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    299e:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <currDepth>
    29a2:	e8 2f       	mov	r30, r24
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	e5 52       	subi	r30, 0x25	; 37
    29ac:	f6 4c       	sbci	r31, 0xC6	; 198
    29ae:	20 81       	ld	r18, Z
    29b0:	31 81       	ldd	r19, Z+1	; 0x01
    29b2:	23 2b       	or	r18, r19
    29b4:	11 f0       	breq	.+4      	; 0x29ba <ProcessInput+0x60>
    29b6:	81 11       	cpse	r24, r1
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29ba:	81 e8       	ldi	r24, 0x81	; 129
    29bc:	96 e7       	ldi	r25, 0x76	; 118
    29be:	a1 c5       	rjmp	.+2882   	; 0x3502 <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    29c0:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x6>
    29c4:	0e 94 a5 0a 	call	0x154a	; 0x154a <CheckState>
    29c8:	88 23       	and	r24, r24
    29ca:	b9 f0       	breq	.+46     	; 0x29fa <ProcessInput+0xa0>
                --currDepth;
    29cc:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    29d0:	e1 50       	subi	r30, 0x01	; 1
    29d2:	e0 93 2c 38 	sts	0x382C, r30	; 0x80382c <currDepth>
                PopulateObject(route[currDepth], &currObj);
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	ee 0f       	add	r30, r30
    29da:	ff 1f       	adc	r31, r31
    29dc:	e5 52       	subi	r30, 0x25	; 37
    29de:	f6 4c       	sbci	r31, 0xC6	; 198
    29e0:	6b e1       	ldi	r22, 0x1B	; 27
    29e2:	7a e3       	ldi	r23, 0x3A	; 58
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	0f db       	rcall	.-2530   	; 0x2008 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    29ea:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    29f4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    29f8:	31 c2       	rjmp	.+1122   	; 0x2e5c <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    29fa:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x22>
    29fe:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a02:	20 91 2f 3a 	lds	r18, 0x3A2F	; 0x803a2f <currObj+0x14>
    2a06:	30 91 30 3a 	lds	r19, 0x3A30	; 0x803a30 <currObj+0x15>
    2a0a:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2a0e:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2a12:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2a16:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2a1a:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2a1e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2a22:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <currObj+0x28>
    2a26:	3a c6       	rjmp	.+3188   	; 0x369c <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2a28:	85 36       	cpi	r24, 0x65	; 101
    2a2a:	19 f0       	breq	.+6      	; 0x2a32 <ProcessInput+0xd8>
    2a2c:	8f 36       	cpi	r24, 0x6F	; 111
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <ProcessInput+0xd8>
    2a30:	df c0       	rjmp	.+446    	; 0x2bf0 <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2a32:	b2 e0       	ldi	r27, 0x02	; 2
    2a34:	fb 12       	cpse	r15, r27
    2a36:	c1 cf       	rjmp	.-126    	; 0x29ba <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2a38:	e0 90 2c 38 	lds	r14, 0x382C	; 0x80382c <currDepth>
    2a3c:	f1 2c       	mov	r15, r1
    2a3e:	f7 01       	movw	r30, r14
    2a40:	ee 0f       	add	r30, r30
    2a42:	ff 1f       	adc	r31, r31
    2a44:	e5 52       	subi	r30, 0x25	; 37
    2a46:	f6 4c       	sbci	r31, 0xC6	; 198
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	d8 01       	movw	r26, r16
    2a4e:	11 96       	adiw	r26, 0x01	; 1
    2a50:	6c 91       	ld	r22, X
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	a3 db       	rcall	.-2234   	; 0x219e <FindChild>
    2a58:	f7 01       	movw	r30, r14
    2a5a:	ee 0f       	add	r30, r30
    2a5c:	ff 1f       	adc	r31, r31
    2a5e:	e3 52       	subi	r30, 0x23	; 35
    2a60:	f6 4c       	sbci	r31, 0xC6	; 198
    2a62:	80 83       	st	Z, r24
    2a64:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2a66:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <currDepth>
    2a6a:	29 2f       	mov	r18, r25
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	f9 01       	movw	r30, r18
    2a70:	ee 0f       	add	r30, r30
    2a72:	ff 1f       	adc	r31, r31
    2a74:	e3 52       	subi	r30, 0x23	; 35
    2a76:	f6 4c       	sbci	r31, 0xC6	; 198
    2a78:	40 81       	ld	r20, Z
    2a7a:	51 81       	ldd	r21, Z+1	; 0x01
    2a7c:	41 15       	cp	r20, r1
    2a7e:	51 05       	cpc	r21, r1
    2a80:	21 f0       	breq	.+8      	; 0x2a8a <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    2a82:	6a ed       	ldi	r22, 0xDA	; 218
    2a84:	78 e3       	ldi	r23, 0x38	; 56
    2a86:	ca 01       	movw	r24, r20
    2a88:	1c c0       	rjmp	.+56     	; 0x2ac2 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2a8a:	99 23       	and	r25, r25
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <ProcessInput+0x136>
    2a8e:	87 c7       	rjmp	.+3854   	; 0x399e <ProcessInput+0x1044>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2a90:	22 0f       	add	r18, r18
    2a92:	33 1f       	adc	r19, r19
    2a94:	f9 01       	movw	r30, r18
    2a96:	e7 52       	subi	r30, 0x27	; 39
    2a98:	f6 4c       	sbci	r31, 0xC6	; 198
    2a9a:	d8 01       	movw	r26, r16
    2a9c:	11 96       	adiw	r26, 0x01	; 1
    2a9e:	6c 91       	ld	r22, X
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	28 db       	rcall	.-2480   	; 0x20f6 <CheckLetter>
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <ProcessInput+0x152>
    2aaa:	79 c7       	rjmp	.+3826   	; 0x399e <ProcessInput+0x1044>
                        PopulateObject(route[currDepth-1], &actObj1);
    2aac:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	e7 52       	subi	r30, 0x27	; 39
    2ab8:	f6 4c       	sbci	r31, 0xC6	; 198
    2aba:	6a ed       	ldi	r22, 0xDA	; 218
    2abc:	78 e3       	ldi	r23, 0x38	; 56
    2abe:	80 81       	ld	r24, Z
    2ac0:	91 81       	ldd	r25, Z+1	; 0x01
    2ac2:	a2 da       	rcall	.-2748   	; 0x2008 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	80 81       	ld	r24, Z
    2ac8:	85 36       	cpi	r24, 0x65	; 101
    2aca:	c9 f4       	brne	.+50     	; 0x2afe <ProcessInput+0x1a4>
    2acc:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3993+0x8>
    2ad0:	80 fd       	sbrc	r24, 0
    2ad2:	1e c0       	rjmp	.+60     	; 0x2b10 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad4:	8f e9       	ldi	r24, 0x9F	; 159
    2ad6:	99 e7       	ldi	r25, 0x79	; 121
    2ad8:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2adc:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2ae0:	8e e1       	ldi	r24, 0x1E	; 30
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2ae8:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2af4:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2af8:	72 e0       	ldi	r23, 0x02	; 2
    2afa:	77 2e       	mov	r7, r23
    2afc:	1e c7       	rjmp	.+3644   	; 0x393a <ProcessInput+0xfe0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2afe:	8f 36       	cpi	r24, 0x6F	; 111
    2b00:	39 f4       	brne	.+14     	; 0x2b10 <ProcessInput+0x1b6>
    2b02:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3993+0x8>
    2b06:	81 fd       	sbrc	r24, 1
    2b08:	03 c0       	rjmp	.+6      	; 0x2b10 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b0a:	84 e8       	ldi	r24, 0x84	; 132
    2b0c:	99 e7       	ldi	r25, 0x79	; 121
    2b0e:	f9 c4       	rjmp	.+2546   	; 0x3502 <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2b10:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <actObj1.3993+0x6>
    2b14:	0e 94 a5 0a 	call	0x154a	; 0x154a <CheckState>
    2b18:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2b1c:	88 23       	and	r24, r24
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <ProcessInput+0x1c8>
    2b20:	49 c0       	rjmp	.+146    	; 0x2bb4 <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2b22:	ae 2f       	mov	r26, r30
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	aa 0f       	add	r26, r26
    2b28:	bb 1f       	adc	r27, r27
    2b2a:	a3 52       	subi	r26, 0x23	; 35
    2b2c:	b6 4c       	sbci	r27, 0xC6	; 198
    2b2e:	8d 91       	ld	r24, X+
    2b30:	9c 91       	ld	r25, X
    2b32:	89 2b       	or	r24, r25
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <ProcessInput+0x1e0>
    2b36:	ef 5f       	subi	r30, 0xFF	; 255
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <ProcessInput+0x1e2>
    2b3a:	e1 50       	subi	r30, 0x01	; 1
    2b3c:	e0 93 2c 38 	sts	0x382C, r30	; 0x80382c <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2b40:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	ee 0f       	add	r30, r30
    2b48:	ff 1f       	adc	r31, r31
    2b4a:	e5 52       	subi	r30, 0x25	; 37
    2b4c:	f6 4c       	sbci	r31, 0xC6	; 198
    2b4e:	6b e1       	ldi	r22, 0x1B	; 27
    2b50:	7a e3       	ldi	r23, 0x3A	; 58
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	58 da       	rcall	.-2896   	; 0x2008 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2b58:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2b5c:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b60:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    2b64:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    2b68:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2b6c:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2b70:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2b74:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2b78:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2b7c:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b80:	8b e5       	ldi	r24, 0x5B	; 91
    2b82:	9a e7       	ldi	r25, 0x7A	; 122
    2b84:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2b88:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    2b94:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    2ba0:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2ba4:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2bae:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2bb2:	8d c4       	rjmp	.+2330   	; 0x34ce <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	e3 52       	subi	r30, 0x23	; 35
    2bbc:	f6 4c       	sbci	r31, 0xC6	; 198
    2bbe:	10 82       	st	Z, r1
    2bc0:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2bc2:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3993+0x22>
    2bc6:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3993+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bca:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3993+0x14>
    2bce:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3993+0x15>
    2bd2:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2bd6:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2bda:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2bde:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2be2:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2be6:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2bea:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3993+0x28>
    2bee:	56 c5       	rjmp	.+2732   	; 0x369c <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2bf0:	8c 36       	cpi	r24, 0x6C	; 108
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <ProcessInput+0x29c>
    2bf4:	57 c1       	rjmp	.+686    	; 0x2ea4 <ProcessInput+0x54a>
    2bf6:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
            if (inputLen == 1) {
    2bfa:	b1 e0       	ldi	r27, 0x01	; 1
    2bfc:	fb 12       	cpse	r15, r27
    2bfe:	f6 c0       	rjmp	.+492    	; 0x2dec <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2c00:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2c04:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c08:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    2c0c:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    2c10:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2c14:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2c18:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2c1c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2c20:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2c24:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c28:	8b e5       	ldi	r24, 0x5B	; 91
    2c2a:	9a e7       	ldi	r25, 0x7A	; 122
    2c2c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2c30:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2c34:	82 e0       	ldi	r24, 0x02	; 2
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    2c3c:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    2c48:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c4c:	2d ee       	ldi	r18, 0xED	; 237
    2c4e:	39 e7       	ldi	r19, 0x79	; 121
    2c50:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    2c54:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    2c58:	25 e1       	ldi	r18, 0x15	; 21
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    2c60:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    2c64:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    2c68:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	e3 52       	subi	r30, 0x23	; 35
    2c74:	f6 4c       	sbci	r31, 0xC6	; 198
    2c76:	10 82       	st	Z, r1
    2c78:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2c7a:	84 e0       	ldi	r24, 0x04	; 4
    2c7c:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c7e:	99 e5       	ldi	r25, 0x59	; 89
    2c80:	c9 2e       	mov	r12, r25
    2c82:	9a e7       	ldi	r25, 0x7A	; 122
    2c84:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2c86:	22 e0       	ldi	r18, 0x02	; 2
    2c88:	a2 2e       	mov	r10, r18
    2c8a:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2c8c:	88 24       	eor	r8, r8
    2c8e:	83 94       	inc	r8
    2c90:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2c92:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <currDepth>
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9c 01       	movw	r18, r24
    2c9a:	22 0f       	add	r18, r18
    2c9c:	33 1f       	adc	r19, r19
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	e3 52       	subi	r30, 0x23	; 35
    2ca2:	f6 4c       	sbci	r31, 0xC6	; 198
    2ca4:	7f 01       	movw	r14, r30
    2ca6:	40 81       	ld	r20, Z
    2ca8:	51 81       	ldd	r21, Z+1	; 0x01
    2caa:	f9 01       	movw	r30, r18
    2cac:	e5 52       	subi	r30, 0x25	; 37
    2cae:	f6 4c       	sbci	r31, 0xC6	; 198
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	73 da       	rcall	.-2842   	; 0x219e <FindChild>
    2cb8:	d7 01       	movw	r26, r14
    2cba:	8d 93       	st	X+, r24
    2cbc:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2cbe:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	e3 52       	subi	r30, 0x23	; 35
    2cca:	f6 4c       	sbci	r31, 0xC6	; 198
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <ProcessInput+0x37c>
    2cd4:	4a c0       	rjmp	.+148    	; 0x2d6a <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2cd6:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    2cda:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    2cde:	82 17       	cp	r24, r18
    2ce0:	93 07       	cpc	r25, r19
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <ProcessInput+0x38c>
    2ce4:	42 c0       	rjmp	.+132    	; 0x2d6a <ProcessInput+0x410>
    2ce6:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    2cea:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    2cee:	82 17       	cp	r24, r18
    2cf0:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2cf2:	d9 f1       	breq	.+118    	; 0x2d6a <ProcessInput+0x410>
    2cf4:	6a ed       	ldi	r22, 0xDA	; 218
    2cf6:	78 e3       	ldi	r23, 0x38	; 56
    2cf8:	87 d9       	rcall	.-3314   	; 0x2008 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2cfa:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3993+0x1a>
    2cfe:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d02:	e6 2d       	mov	r30, r6
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	df 01       	movw	r26, r30
    2d08:	aa 0f       	add	r26, r26
    2d0a:	bb 1f       	adc	r27, r27
    2d0c:	a5 5e       	subi	r26, 0xE5	; 229
    2d0e:	b6 4c       	sbci	r27, 0xC6	; 198
    2d10:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3993+0xc>
    2d14:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3993+0xd>
    2d18:	2d 93       	st	X+, r18
    2d1a:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2d1c:	df 01       	movw	r26, r30
    2d1e:	aa 0f       	add	r26, r26
    2d20:	bb 1f       	adc	r27, r27
    2d22:	a5 5a       	subi	r26, 0xA5	; 165
    2d24:	b6 4c       	sbci	r27, 0xC6	; 198
    2d26:	8d 93       	st	X+, r24
    2d28:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2d2a:	ee 0f       	add	r30, r30
    2d2c:	ff 1f       	adc	r31, r31
    2d2e:	e5 56       	subi	r30, 0x65	; 101
    2d30:	f6 4c       	sbci	r31, 0xC6	; 198
    2d32:	10 82       	st	Z, r1
    2d34:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	86 0d       	add	r24, r6
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	63 94       	inc	r6
    2d3e:	63 94       	inc	r6
    2d40:	fc 01       	movw	r30, r24
    2d42:	ee 0f       	add	r30, r30
    2d44:	ff 1f       	adc	r31, r31
    2d46:	e5 5e       	subi	r30, 0xE5	; 229
    2d48:	f6 4c       	sbci	r31, 0xC6	; 198
    2d4a:	c0 82       	st	Z, r12
    2d4c:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2d4e:	fc 01       	movw	r30, r24
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	e5 5a       	subi	r30, 0xA5	; 165
    2d56:	f6 4c       	sbci	r31, 0xC6	; 198
    2d58:	a0 82       	st	Z, r10
    2d5a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	fc 01       	movw	r30, r24
    2d62:	e5 56       	subi	r30, 0x65	; 101
    2d64:	f6 4c       	sbci	r31, 0xC6	; 198
    2d66:	80 82       	st	Z, r8
    2d68:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2d6a:	20 91 2c 38 	lds	r18, 0x382C	; 0x80382c <currDepth>
    2d6e:	82 2f       	mov	r24, r18
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	fc 01       	movw	r30, r24
    2d74:	ee 0f       	add	r30, r30
    2d76:	ff 1f       	adc	r31, r31
    2d78:	e3 52       	subi	r30, 0x23	; 35
    2d7a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d7c:	40 81       	ld	r20, Z
    2d7e:	51 81       	ldd	r21, Z+1	; 0x01
    2d80:	45 2b       	or	r20, r21
    2d82:	09 f0       	breq	.+2      	; 0x2d86 <ProcessInput+0x42c>
    2d84:	86 cf       	rjmp	.-244    	; 0x2c92 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    2d86:	22 23       	and	r18, r18
                    PopulateObject(route[currDepth-1], &actObj1);
    2d88:	69 f1       	breq	.+90     	; 0x2de4 <ProcessInput+0x48a>
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	fc 01       	movw	r30, r24
    2d90:	e7 52       	subi	r30, 0x27	; 39
    2d92:	f6 4c       	sbci	r31, 0xC6	; 198
    2d94:	6a ed       	ldi	r22, 0xDA	; 218
    2d96:	78 e3       	ldi	r23, 0x38	; 56
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	35 d9       	rcall	.-3478   	; 0x2008 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2d9e:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3993+0x1a>
    2da2:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3993+0x1b>
    2da6:	77 24       	eor	r7, r7
    2da8:	73 94       	inc	r7
    2daa:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dac:	86 2d       	mov	r24, r6
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	fc 01       	movw	r30, r24
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	e5 5e       	subi	r30, 0xE5	; 229
    2db8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dba:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3993+0xc>
    2dbe:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3993+0xd>
    2dc2:	40 83       	st	Z, r20
    2dc4:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	ee 0f       	add	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	e5 5a       	subi	r30, 0xA5	; 165
    2dce:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd0:	20 83       	st	Z, r18
    2dd2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	fc 01       	movw	r30, r24
    2dda:	e5 56       	subi	r30, 0x65	; 101
    2ddc:	f6 4c       	sbci	r31, 0xC6	; 198
    2dde:	10 82       	st	Z, r1
    2de0:	11 82       	std	Z+1, r1	; 0x01
    2de2:	ab c5       	rjmp	.+2902   	; 0x393a <ProcessInput+0xfe0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2de4:	77 24       	eor	r7, r7
    2de6:	7a 94       	dec	r7
    2de8:	76 0c       	add	r7, r6
    2dea:	a7 c5       	rjmp	.+2894   	; 0x393a <ProcessInput+0xfe0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2dec:	ee 2e       	mov	r14, r30
    2dee:	f1 2c       	mov	r15, r1
    2df0:	f7 01       	movw	r30, r14
    2df2:	ee 0f       	add	r30, r30
    2df4:	ff 1f       	adc	r31, r31
    2df6:	e5 52       	subi	r30, 0x25	; 37
    2df8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	d8 01       	movw	r26, r16
    2e00:	11 96       	adiw	r26, 0x01	; 1
    2e02:	6c 91       	ld	r22, X
    2e04:	80 81       	ld	r24, Z
    2e06:	91 81       	ldd	r25, Z+1	; 0x01
    2e08:	ca d9       	rcall	.-3180   	; 0x219e <FindChild>
    2e0a:	f7 01       	movw	r30, r14
    2e0c:	ee 0f       	add	r30, r30
    2e0e:	ff 1f       	adc	r31, r31
    2e10:	e3 52       	subi	r30, 0x23	; 35
    2e12:	f6 4c       	sbci	r31, 0xC6	; 198
    2e14:	80 83       	st	Z, r24
    2e16:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2e18:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <currDepth>
    2e1c:	29 2f       	mov	r18, r25
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	f9 01       	movw	r30, r18
    2e22:	ee 0f       	add	r30, r30
    2e24:	ff 1f       	adc	r31, r31
    2e26:	e3 52       	subi	r30, 0x23	; 35
    2e28:	f6 4c       	sbci	r31, 0xC6	; 198
    2e2a:	40 81       	ld	r20, Z
    2e2c:	51 81       	ldd	r21, Z+1	; 0x01
    2e2e:	41 15       	cp	r20, r1
    2e30:	51 05       	cpc	r21, r1
    2e32:	21 f0       	breq	.+8      	; 0x2e3c <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    2e34:	6a ed       	ldi	r22, 0xDA	; 218
    2e36:	78 e3       	ldi	r23, 0x38	; 56
    2e38:	ca 01       	movw	r24, r20
    2e3a:	1e c0       	rjmp	.+60     	; 0x2e78 <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2e3c:	99 23       	and	r25, r25
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2e40:	ae c5       	rjmp	.+2908   	; 0x399e <ProcessInput+0x1044>
    2e42:	22 0f       	add	r18, r18
    2e44:	33 1f       	adc	r19, r19
    2e46:	f9 01       	movw	r30, r18
    2e48:	e7 52       	subi	r30, 0x27	; 39
    2e4a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e4c:	d8 01       	movw	r26, r16
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	6c 91       	ld	r22, X
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	4f d9       	rcall	.-3426   	; 0x20f6 <CheckLetter>
    2e58:	81 11       	cpse	r24, r1
    2e5a:	03 c0       	rjmp	.+6      	; 0x2e62 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2e5c:	77 24       	eor	r7, r7
    2e5e:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2e60:	6c c5       	rjmp	.+2776   	; 0x393a <ProcessInput+0xfe0>
    2e62:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	ee 0f       	add	r30, r30
    2e6a:	ff 1f       	adc	r31, r31
    2e6c:	e7 52       	subi	r30, 0x27	; 39
    2e6e:	f6 4c       	sbci	r31, 0xC6	; 198
    2e70:	6a ed       	ldi	r22, 0xDA	; 218
    2e72:	78 e3       	ldi	r23, 0x38	; 56
    2e74:	80 81       	ld	r24, Z
    2e76:	91 81       	ldd	r25, Z+1	; 0x01
    2e78:	c7 d8       	rcall	.-3698   	; 0x2008 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2e7a:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3993+0x1c>
    2e7e:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3993+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e82:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3993+0xe>
    2e86:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3993+0xf>
    2e8a:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2e8e:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2e92:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2e96:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2e9a:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2e9e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    2ea2:	2a ce       	rjmp	.-940    	; 0x2af8 <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2ea4:	80 37       	cpi	r24, 0x70	; 112
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <ProcessInput+0x550>
    2ea8:	96 c0       	rjmp	.+300    	; 0x2fd6 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    2eaa:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    2eae:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    2eb2:	89 2b       	or	r24, r25
    2eb4:	79 f0       	breq	.+30     	; 0x2ed4 <ProcessInput+0x57a>
    2eb6:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    2eba:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    2ebe:	89 2b       	or	r24, r25
    2ec0:	49 f0       	breq	.+18     	; 0x2ed4 <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ec2:	84 e4       	ldi	r24, 0x44	; 68
    2ec4:	98 e7       	ldi	r25, 0x78	; 120
    2ec6:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2eca:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2ece:	89 e5       	ldi	r24, 0x59	; 89
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	08 ce       	rjmp	.-1008   	; 0x2ae4 <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2ed4:	b2 e0       	ldi	r27, 0x02	; 2
    2ed6:	fb 12       	cpse	r15, r27
    2ed8:	70 cd       	rjmp	.-1312   	; 0x29ba <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2eda:	e0 90 2c 38 	lds	r14, 0x382C	; 0x80382c <currDepth>
    2ede:	f1 2c       	mov	r15, r1
    2ee0:	f7 01       	movw	r30, r14
    2ee2:	ee 0f       	add	r30, r30
    2ee4:	ff 1f       	adc	r31, r31
    2ee6:	e5 52       	subi	r30, 0x25	; 37
    2ee8:	f6 4c       	sbci	r31, 0xC6	; 198
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	d8 01       	movw	r26, r16
    2ef0:	11 96       	adiw	r26, 0x01	; 1
    2ef2:	6c 91       	ld	r22, X
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 81       	ldd	r25, Z+1	; 0x01
    2ef8:	52 d9       	rcall	.-3420   	; 0x219e <FindChild>
    2efa:	f7 01       	movw	r30, r14
    2efc:	ee 0f       	add	r30, r30
    2efe:	ff 1f       	adc	r31, r31
    2f00:	e3 52       	subi	r30, 0x23	; 35
    2f02:	f6 4c       	sbci	r31, 0xC6	; 198
    2f04:	80 83       	st	Z, r24
    2f06:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2f08:	20 91 2c 38 	lds	r18, 0x382C	; 0x80382c <currDepth>
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	2f 5f       	subi	r18, 0xFF	; 255
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	22 0f       	add	r18, r18
    2f14:	33 1f       	adc	r19, r19
    2f16:	f9 01       	movw	r30, r18
    2f18:	e5 52       	subi	r30, 0x25	; 37
    2f1a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	00 97       	sbiw	r24, 0x00	; 0
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <ProcessInput+0x5cc>
    2f24:	ca c3       	rjmp	.+1940   	; 0x36ba <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    2f26:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <inventory>
    2f2a:	50 91 3f 38 	lds	r21, 0x383F	; 0x80383f <inventory+0x1>
    2f2e:	84 17       	cp	r24, r20
    2f30:	95 07       	cpc	r25, r21
    2f32:	39 f0       	breq	.+14     	; 0x2f42 <ProcessInput+0x5e8>
    2f34:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory+0x2>
    2f38:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x3>
    2f3c:	84 17       	cp	r24, r20
    2f3e:	95 07       	cpc	r25, r21
    2f40:	c1 f4       	brne	.+48     	; 0x2f72 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f42:	8f e1       	ldi	r24, 0x1F	; 31
    2f44:	98 e7       	ldi	r25, 0x78	; 120
    2f46:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2f4a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2f4e:	85 e2       	ldi	r24, 0x25	; 37
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2f56:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2f62:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    2f66:	f9 01       	movw	r30, r18
    2f68:	e5 52       	subi	r30, 0x25	; 37
    2f6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f6c:	10 82       	st	Z, r1
    2f6e:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2f70:	c3 cd       	rjmp	.-1146   	; 0x2af8 <ProcessInput+0x19e>
    2f72:	6a ed       	ldi	r22, 0xDA	; 218
    2f74:	78 e3       	ldi	r23, 0x38	; 56
    2f76:	48 d8       	rcall	.-3952   	; 0x2008 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    2f78:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3993+0x7>
    2f7c:	0e 94 a5 0a 	call	0x154a	; 0x154a <CheckState>
    2f80:	88 23       	and	r24, r24
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <ProcessInput+0x62c>
    2f84:	75 c3       	rjmp	.+1770   	; 0x3670 <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    2f86:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3993+0xb>
    2f8a:	88 23       	and	r24, r24
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <ProcessInput+0x636>
    2f8e:	15 cd       	rjmp	.-1494   	; 0x29ba <ProcessInput+0x60>
                                if (inventory[0]) {
    2f90:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    2f94:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    2f98:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
                                    inventory[1] = route[currDepth+1];
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	ee 0f       	add	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	e3 52       	subi	r30, 0x23	; 35
    2fa4:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    2fa6:	89 2b       	or	r24, r25
    2fa8:	39 f0       	breq	.+14     	; 0x2fb8 <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    2fb2:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
    2fb6:	06 c0       	rjmp	.+12     	; 0x2fc4 <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    2fc0:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fc4:	89 e0       	ldi	r24, 0x09	; 9
    2fc6:	98 e7       	ldi	r25, 0x78	; 120
    2fc8:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2fcc:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2fd0:	86 e1       	ldi	r24, 0x16	; 22
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	5e c2       	rjmp	.+1212   	; 0x3492 <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    2fd6:	84 36       	cpi	r24, 0x64	; 100
    2fd8:	d9 f4       	brne	.+54     	; 0x3010 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2fda:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    2fde:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <ProcessInput+0x68e>
    2fe6:	de c4       	rjmp	.+2492   	; 0x39a4 <ProcessInput+0x104a>
    2fe8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    2fec:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    2ff0:	89 2b       	or	r24, r25
    2ff2:	49 f4       	brne	.+18     	; 0x3006 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ff4:	83 ee       	ldi	r24, 0xE3	; 227
    2ff6:	97 e7       	ldi	r25, 0x77	; 119
    2ff8:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2ffc:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3000:	86 e2       	ldi	r24, 0x26	; 38
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	6f cd       	rjmp	.-1314   	; 0x2ae4 <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3006:	b2 e0       	ldi	r27, 0x02	; 2
    3008:	fb 16       	cp	r15, r27
    300a:	09 f4       	brne	.+2      	; 0x300e <ProcessInput+0x6b4>
    300c:	31 c5       	rjmp	.+2658   	; 0x3a70 <ProcessInput+0x1116>
    300e:	d5 cc       	rjmp	.-1622   	; 0x29ba <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    3010:	89 36       	cpi	r24, 0x69	; 105
    3012:	09 f0       	breq	.+2      	; 0x3016 <ProcessInput+0x6bc>
    3014:	7b c0       	rjmp	.+246    	; 0x310c <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3016:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    301a:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    301e:	89 2b       	or	r24, r25
    3020:	31 f4       	brne	.+12     	; 0x302e <ProcessInput+0x6d4>
    3022:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3026:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    302a:	89 2b       	or	r24, r25
    302c:	19 f3       	breq	.-58     	; 0x2ff4 <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    302e:	89 e0       	ldi	r24, 0x09	; 9
    3030:	98 e7       	ldi	r25, 0x78	; 120
    3032:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3036:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    303a:	86 e1       	ldi	r24, 0x16	; 22
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3042:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    304e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3052:	2e e3       	ldi	r18, 0x3E	; 62
    3054:	e2 2e       	mov	r14, r18
    3056:	28 e3       	ldi	r18, 0x38	; 56
    3058:	f2 2e       	mov	r15, r18
    305a:	32 e4       	ldi	r19, 0x42	; 66
    305c:	63 2e       	mov	r6, r19
    305e:	38 e3       	ldi	r19, 0x38	; 56
    3060:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    3062:	42 e0       	ldi	r20, 0x02	; 2
    3064:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3066:	59 e5       	ldi	r21, 0x59	; 89
    3068:	c5 2e       	mov	r12, r21
    306a:	5a e7       	ldi	r21, 0x7A	; 122
    306c:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    306e:	62 e0       	ldi	r22, 0x02	; 2
    3070:	a6 2e       	mov	r10, r22
    3072:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3074:	88 24       	eor	r8, r8
    3076:	83 94       	inc	r8
    3078:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    307a:	d7 01       	movw	r26, r14
    307c:	8d 91       	ld	r24, X+
    307e:	9d 91       	ld	r25, X+
    3080:	7d 01       	movw	r14, r26
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	d9 f1       	breq	.+118    	; 0x30fc <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    3086:	6a ed       	ldi	r22, 0xDA	; 218
    3088:	78 e3       	ldi	r23, 0x38	; 56
    308a:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    308e:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3993+0x1a>
    3092:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3096:	e5 2d       	mov	r30, r5
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	df 01       	movw	r26, r30
    309c:	aa 0f       	add	r26, r26
    309e:	bb 1f       	adc	r27, r27
    30a0:	a5 5e       	subi	r26, 0xE5	; 229
    30a2:	b6 4c       	sbci	r27, 0xC6	; 198
    30a4:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3993+0xc>
    30a8:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3993+0xd>
    30ac:	2d 93       	st	X+, r18
    30ae:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    30b0:	df 01       	movw	r26, r30
    30b2:	aa 0f       	add	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	a5 5a       	subi	r26, 0xA5	; 165
    30b8:	b6 4c       	sbci	r27, 0xC6	; 198
    30ba:	8d 93       	st	X+, r24
    30bc:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    30be:	ee 0f       	add	r30, r30
    30c0:	ff 1f       	adc	r31, r31
    30c2:	e5 56       	subi	r30, 0x65	; 101
    30c4:	f6 4c       	sbci	r31, 0xC6	; 198
    30c6:	10 82       	st	Z, r1
    30c8:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ca:	e1 e0       	ldi	r30, 0x01	; 1
    30cc:	e5 0d       	add	r30, r5
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	53 94       	inc	r5
    30d2:	53 94       	inc	r5
    30d4:	df 01       	movw	r26, r30
    30d6:	aa 0f       	add	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	a5 5e       	subi	r26, 0xE5	; 229
    30dc:	b6 4c       	sbci	r27, 0xC6	; 198
    30de:	cd 92       	st	X+, r12
    30e0:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    30e2:	df 01       	movw	r26, r30
    30e4:	aa 0f       	add	r26, r26
    30e6:	bb 1f       	adc	r27, r27
    30e8:	a5 5a       	subi	r26, 0xA5	; 165
    30ea:	b6 4c       	sbci	r27, 0xC6	; 198
    30ec:	ad 92       	st	X+, r10
    30ee:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    30f0:	ee 0f       	add	r30, r30
    30f2:	ff 1f       	adc	r31, r31
    30f4:	e5 56       	subi	r30, 0x65	; 101
    30f6:	f6 4c       	sbci	r31, 0xC6	; 198
    30f8:	80 82       	st	Z, r8
    30fa:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    30fc:	6e 14       	cp	r6, r14
    30fe:	7f 04       	cpc	r7, r15
    3100:	09 f0       	breq	.+2      	; 0x3104 <ProcessInput+0x7aa>
    3102:	bb cf       	rjmp	.-138    	; 0x307a <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    3104:	77 24       	eor	r7, r7
    3106:	7a 94       	dec	r7
    3108:	75 0c       	add	r7, r5
    310a:	17 c4       	rjmp	.+2094   	; 0x393a <ProcessInput+0xfe0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    310c:	9c e8       	ldi	r25, 0x8C	; 140
    310e:	98 0f       	add	r25, r24
    3110:	92 30       	cpi	r25, 0x02	; 2
    3112:	28 f0       	brcs	.+10     	; 0x311e <ProcessInput+0x7c4>
    3114:	87 36       	cpi	r24, 0x67	; 103
    3116:	19 f0       	breq	.+6      	; 0x311e <ProcessInput+0x7c4>
    3118:	82 37       	cpi	r24, 0x72	; 114
    311a:	09 f0       	breq	.+2      	; 0x311e <ProcessInput+0x7c4>
    311c:	d7 c2       	rjmp	.+1454   	; 0x36cc <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    311e:	8e ef       	ldi	r24, 0xFE	; 254
    3120:	8f 0d       	add	r24, r15
    3122:	82 30       	cpi	r24, 0x02	; 2
    3124:	08 f0       	brcs	.+2      	; 0x3128 <ProcessInput+0x7ce>
    3126:	49 cc       	rjmp	.-1902   	; 0x29ba <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    3128:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    312c:	ce 2e       	mov	r12, r30
    312e:	d1 2c       	mov	r13, r1
    3130:	d8 01       	movw	r26, r16
    3132:	af 0d       	add	r26, r15
    3134:	b1 1d       	adc	r27, r1
    3136:	11 97       	sbiw	r26, 0x01	; 1
    3138:	f6 01       	movw	r30, r12
    313a:	ee 0f       	add	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	e5 52       	subi	r30, 0x25	; 37
    3140:	f6 4c       	sbci	r31, 0xC6	; 198
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	6c 91       	ld	r22, X
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	28 d8       	rcall	.-4016   	; 0x219e <FindChild>
    314e:	f6 01       	movw	r30, r12
    3150:	ee 0f       	add	r30, r30
    3152:	ff 1f       	adc	r31, r31
    3154:	e3 52       	subi	r30, 0x23	; 35
    3156:	f6 4c       	sbci	r31, 0xC6	; 198
    3158:	80 83       	st	Z, r24
    315a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    315c:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	e3 52       	subi	r30, 0x23	; 35
    3168:	f6 4c       	sbci	r31, 0xC6	; 198
    316a:	80 81       	ld	r24, Z
    316c:	91 81       	ldd	r25, Z+1	; 0x01
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	09 f4       	brne	.+2      	; 0x3174 <ProcessInput+0x81a>
    3172:	9a c2       	rjmp	.+1332   	; 0x36a8 <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    3174:	b3 e0       	ldi	r27, 0x03	; 3
    3176:	fb 12       	cpse	r15, r27
    3178:	78 c1       	rjmp	.+752    	; 0x346a <ProcessInput+0xb10>
    317a:	f8 01       	movw	r30, r16
    317c:	20 81       	ld	r18, Z
    317e:	25 37       	cpi	r18, 0x75	; 117
    3180:	19 f0       	breq	.+6      	; 0x3188 <ProcessInput+0x82e>
    3182:	27 36       	cpi	r18, 0x67	; 103
    3184:	09 f0       	breq	.+2      	; 0x3188 <ProcessInput+0x82e>
    3186:	71 c1       	rjmp	.+738    	; 0x346a <ProcessInput+0xb10>
    3188:	61 2c       	mov	r6, r1
    318a:	77 24       	eor	r7, r7
    318c:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    318e:	53 e6       	ldi	r21, 0x63	; 99
    3190:	c5 2e       	mov	r12, r21
    3192:	59 e7       	ldi	r21, 0x79	; 121
    3194:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    3196:	61 e2       	ldi	r22, 0x21	; 33
    3198:	a6 2e       	mov	r10, r22
    319a:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    319c:	88 24       	eor	r8, r8
    319e:	83 94       	inc	r8
    31a0:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    31a2:	e6 2c       	mov	r14, r6
    31a4:	f1 2c       	mov	r15, r1
    31a6:	c7 01       	movw	r24, r14
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	9c 01       	movw	r18, r24
    31ae:	22 5c       	subi	r18, 0xC2	; 194
    31b0:	37 4c       	sbci	r19, 0xC7	; 199
    31b2:	79 01       	movw	r14, r18
    31b4:	d9 01       	movw	r26, r18
    31b6:	8d 91       	ld	r24, X+
    31b8:	9c 91       	ld	r25, X
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	81 f0       	breq	.+32     	; 0x31de <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    31be:	f8 01       	movw	r30, r16
    31c0:	61 81       	ldd	r22, Z+1	; 0x01
    31c2:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <CheckLetter>
    31c6:	88 23       	and	r24, r24
    31c8:	51 f0       	breq	.+20     	; 0x31de <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    31ca:	6f ea       	ldi	r22, 0xAF	; 175
    31cc:	78 e3       	ldi	r23, 0x38	; 56
    31ce:	d7 01       	movw	r26, r14
    31d0:	8d 91       	ld	r24, X+
    31d2:	9c 91       	ld	r25, X
    31d4:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>
                                    x = 2;
    31d8:	32 e0       	ldi	r19, 0x02	; 2
    31da:	63 2e       	mov	r6, r19
    31dc:	1e c0       	rjmp	.+60     	; 0x321a <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    31de:	b1 e0       	ldi	r27, 0x01	; 1
    31e0:	6b 12       	cpse	r6, r27
    31e2:	1a c0       	rjmp	.+52     	; 0x3218 <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31e4:	e7 2d       	mov	r30, r7
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	df 01       	movw	r26, r30
    31ea:	aa 0f       	add	r26, r26
    31ec:	bb 1f       	adc	r27, r27
    31ee:	a5 5e       	subi	r26, 0xE5	; 229
    31f0:	b6 4c       	sbci	r27, 0xC6	; 198
    31f2:	cd 92       	st	X+, r12
    31f4:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    31f6:	df 01       	movw	r26, r30
    31f8:	aa 0f       	add	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	a5 5a       	subi	r26, 0xA5	; 165
    31fe:	b6 4c       	sbci	r27, 0xC6	; 198
    3200:	ad 92       	st	X+, r10
    3202:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	e5 56       	subi	r30, 0x65	; 101
    320a:	f6 4c       	sbci	r31, 0xC6	; 198
    320c:	80 82       	st	Z, r8
    320e:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3210:	f8 01       	movw	r30, r16
    3212:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3214:	73 94       	inc	r7
    3216:	01 c0       	rjmp	.+2      	; 0x321a <ProcessInput+0x8c0>
    3218:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    321a:	63 94       	inc	r6
    321c:	f1 e0       	ldi	r31, 0x01	; 1
    321e:	6f 16       	cp	r6, r31
    3220:	09 f4       	brne	.+2      	; 0x3224 <ProcessInput+0x8ca>
    3222:	bf cf       	rjmp	.-130    	; 0x31a2 <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3224:	d8 01       	movw	r26, r16
    3226:	8c 91       	ld	r24, X
    3228:	88 23       	and	r24, r24
    322a:	09 f4       	brne	.+2      	; 0x322e <ProcessInput+0x8d4>
    322c:	86 c3       	rjmp	.+1804   	; 0x393a <ProcessInput+0xfe0>
                            PopulateObject(route[currDepth+1], &actObj1);
    322e:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	ee 0f       	add	r30, r30
    3236:	ff 1f       	adc	r31, r31
    3238:	e3 52       	subi	r30, 0x23	; 35
    323a:	f6 4c       	sbci	r31, 0xC6	; 198
    323c:	6a ed       	ldi	r22, 0xDA	; 218
    323e:	78 e3       	ldi	r23, 0x38	; 56
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3248:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3993+0x1e>
    324c:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3993+0x1f>
    3250:	b1 e0       	ldi	r27, 0x01	; 1
    3252:	eb 16       	cp	r14, r27
    3254:	f1 04       	cpc	r15, r1
    3256:	09 f0       	breq	.+2      	; 0x325a <ProcessInput+0x900>
    3258:	9a c0       	rjmp	.+308    	; 0x338e <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    325a:	98 01       	movw	r18, r16
    325c:	2e 5f       	subi	r18, 0xFE	; 254
    325e:	3f 4f       	sbci	r19, 0xFF	; 255
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x10>
    3268:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3993+0x11>
    326c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <ExtEERead>
                                if (data[2] == '1') {
    3270:	f8 01       	movw	r30, r16
    3272:	42 81       	ldd	r20, Z+2	; 0x02
    3274:	21 e0       	ldi	r18, 0x01	; 1
    3276:	27 0d       	add	r18, r7
    3278:	87 2d       	mov	r24, r7
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	41 33       	cpi	r20, 0x31	; 49
    327e:	09 f0       	breq	.+2      	; 0x3282 <ProcessInput+0x928>
    3280:	6b c0       	rjmp	.+214    	; 0x3358 <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3282:	30 91 ba 38 	lds	r19, 0x38BA	; 0x8038ba <actObj2.3994+0xb>
                                    if ((item < 31)||(item > 34)) {
    3286:	51 ee       	ldi	r21, 0xE1	; 225
    3288:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    328a:	fc 01       	movw	r30, r24
    328c:	ee 0f       	add	r30, r30
    328e:	ff 1f       	adc	r31, r31
    3290:	e5 5e       	subi	r30, 0xE5	; 229
    3292:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3294:	54 30       	cpi	r21, 0x04	; 4
    3296:	60 f0       	brcs	.+24     	; 0x32b0 <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3298:	43 e0       	ldi	r20, 0x03	; 3
    329a:	59 e7       	ldi	r21, 0x79	; 121
    329c:	40 83       	st	Z, r20
    329e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    32a0:	fc 01       	movw	r30, r24
    32a2:	ee 0f       	add	r30, r30
    32a4:	ff 1f       	adc	r31, r31
    32a6:	e5 5a       	subi	r30, 0xA5	; 165
    32a8:	f6 4c       	sbci	r31, 0xC6	; 198
    32aa:	4a e1       	ldi	r20, 0x1A	; 26
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	64 c0       	rjmp	.+200    	; 0x3378 <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32b0:	6d e8       	ldi	r22, 0x8D	; 141
    32b2:	75 e7       	ldi	r23, 0x75	; 117
    32b4:	60 83       	st	Z, r22
    32b6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    32b8:	fc 01       	movw	r30, r24
    32ba:	ee 0f       	add	r30, r30
    32bc:	ff 1f       	adc	r31, r31
    32be:	e5 5a       	subi	r30, 0xA5	; 165
    32c0:	f6 4c       	sbci	r31, 0xC6	; 198
    32c2:	62 eb       	ldi	r22, 0xB2	; 178
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	60 83       	st	Z, r22
    32c8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	fc 01       	movw	r30, r24
    32d0:	e5 56       	subi	r30, 0x65	; 101
    32d2:	f6 4c       	sbci	r31, 0xC6	; 198
    32d4:	e0 82       	st	Z, r14
    32d6:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32d8:	82 2f       	mov	r24, r18
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	fc 01       	movw	r30, r24
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	e5 5e       	subi	r30, 0xE5	; 229
    32e4:	f6 4c       	sbci	r31, 0xC6	; 198
    32e6:	6b e5       	ldi	r22, 0x5B	; 91
    32e8:	7a e7       	ldi	r23, 0x7A	; 122
    32ea:	60 83       	st	Z, r22
    32ec:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    32ee:	fc 01       	movw	r30, r24
    32f0:	ee 0f       	add	r30, r30
    32f2:	ff 1f       	adc	r31, r31
    32f4:	e5 5a       	subi	r30, 0xA5	; 165
    32f6:	f6 4c       	sbci	r31, 0xC6	; 198
    32f8:	62 e0       	ldi	r22, 0x02	; 2
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	60 83       	st	Z, r22
    32fe:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	fc 01       	movw	r30, r24
    3306:	e5 56       	subi	r30, 0x65	; 101
    3308:	f6 4c       	sbci	r31, 0xC6	; 198
    330a:	e0 82       	st	Z, r14
    330c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    330e:	82 e0       	ldi	r24, 0x02	; 2
    3310:	87 0d       	add	r24, r7
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	f3 e0       	ldi	r31, 0x03	; 3
    3316:	7f 0e       	add	r7, r31
    3318:	fc 01       	movw	r30, r24
    331a:	ee 0f       	add	r30, r30
    331c:	ff 1f       	adc	r31, r31
    331e:	e5 5e       	subi	r30, 0xE5	; 229
    3320:	f6 4c       	sbci	r31, 0xC6	; 198
    3322:	6f ea       	ldi	r22, 0xAF	; 175
    3324:	78 e7       	ldi	r23, 0x78	; 120
    3326:	60 83       	st	Z, r22
    3328:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    332a:	fc 01       	movw	r30, r24
    332c:	ee 0f       	add	r30, r30
    332e:	ff 1f       	adc	r31, r31
    3330:	e5 5a       	subi	r30, 0xA5	; 165
    3332:	f6 4c       	sbci	r31, 0xC6	; 198
    3334:	62 e1       	ldi	r22, 0x12	; 18
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	60 83       	st	Z, r22
    333a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	fc 01       	movw	r30, r24
    3342:	e5 56       	subi	r30, 0x65	; 101
    3344:	f6 4c       	sbci	r31, 0xC6	; 198
    3346:	e0 82       	st	Z, r14
    3348:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    334a:	40 93 0a 39 	sts	0x390A, r20	; 0x80390a <specialInput>
                                        specialInput[1] = item;
    334e:	30 93 0b 39 	sts	0x390B, r19	; 0x80390b <specialInput+0x1>
                                        specialInput[2] = 0;
    3352:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput+0x2>
    3356:	f1 c2       	rjmp	.+1506   	; 0x393a <ProcessInput+0xfe0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3358:	fc 01       	movw	r30, r24
    335a:	ee 0f       	add	r30, r30
    335c:	ff 1f       	adc	r31, r31
    335e:	e5 5e       	subi	r30, 0xE5	; 229
    3360:	f6 4c       	sbci	r31, 0xC6	; 198
    3362:	4f e3       	ldi	r20, 0x3F	; 63
    3364:	56 e7       	ldi	r21, 0x76	; 118
    3366:	40 83       	st	Z, r20
    3368:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    336a:	fc 01       	movw	r30, r24
    336c:	ee 0f       	add	r30, r30
    336e:	ff 1f       	adc	r31, r31
    3370:	e5 5a       	subi	r30, 0xA5	; 165
    3372:	f6 4c       	sbci	r31, 0xC6	; 198
    3374:	42 e4       	ldi	r20, 0x42	; 66
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	40 83       	st	Z, r20
    337a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	fc 01       	movw	r30, r24
    3382:	e5 56       	subi	r30, 0x65	; 101
    3384:	f6 4c       	sbci	r31, 0xC6	; 198
    3386:	e0 82       	st	Z, r14
    3388:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    338a:	72 2e       	mov	r7, r18
    338c:	d6 c2       	rjmp	.+1452   	; 0x393a <ProcessInput+0xfe0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    338e:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3993+0x9>
    3392:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj2.3994+0xb>
    3396:	98 13       	cpse	r25, r24
    3398:	2f c0       	rjmp	.+94     	; 0x33f8 <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    339a:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3993+0x26>
    339e:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3993+0x27>
    33a2:	ff 24       	eor	r15, r15
    33a4:	f3 94       	inc	r15
    33a6:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33a8:	87 2d       	mov	r24, r7
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	fc 01       	movw	r30, r24
    33ae:	ee 0f       	add	r30, r30
    33b0:	ff 1f       	adc	r31, r31
    33b2:	e5 5e       	subi	r30, 0xE5	; 229
    33b4:	f6 4c       	sbci	r31, 0xC6	; 198
    33b6:	40 91 f2 38 	lds	r20, 0x38F2	; 0x8038f2 <actObj1.3993+0x18>
    33ba:	50 91 f3 38 	lds	r21, 0x38F3	; 0x8038f3 <actObj1.3993+0x19>
    33be:	40 83       	st	Z, r20
    33c0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    33c2:	fc 01       	movw	r30, r24
    33c4:	ee 0f       	add	r30, r30
    33c6:	ff 1f       	adc	r31, r31
    33c8:	e5 5a       	subi	r30, 0xA5	; 165
    33ca:	f6 4c       	sbci	r31, 0xC6	; 198
    33cc:	20 83       	st	Z, r18
    33ce:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    33d0:	88 0f       	add	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	fc 01       	movw	r30, r24
    33d6:	e5 56       	subi	r30, 0x65	; 101
    33d8:	f6 4c       	sbci	r31, 0xC6	; 198
    33da:	10 82       	st	Z, r1
    33dc:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    33de:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3993+0x2a>
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    33e8:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    33ec:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3993+0xa>
    33f0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    33f4:	7f 2c       	mov	r7, r15
    33f6:	a1 c2       	rjmp	.+1346   	; 0x393a <ProcessInput+0xfe0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    33f8:	d8 01       	movw	r26, r16
    33fa:	8c 91       	ld	r24, X
    33fc:	85 37       	cpi	r24, 0x75	; 117
    33fe:	99 f4       	brne	.+38     	; 0x3426 <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3400:	87 2d       	mov	r24, r7
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	fc 01       	movw	r30, r24
    3406:	ee 0f       	add	r30, r30
    3408:	ff 1f       	adc	r31, r31
    340a:	e5 5e       	subi	r30, 0xE5	; 229
    340c:	f6 4c       	sbci	r31, 0xC6	; 198
    340e:	23 e0       	ldi	r18, 0x03	; 3
    3410:	39 e7       	ldi	r19, 0x79	; 121
    3412:	20 83       	st	Z, r18
    3414:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3416:	fc 01       	movw	r30, r24
    3418:	ee 0f       	add	r30, r30
    341a:	ff 1f       	adc	r31, r31
    341c:	e5 5a       	subi	r30, 0xA5	; 165
    341e:	f6 4c       	sbci	r31, 0xC6	; 198
    3420:	2a e1       	ldi	r18, 0x1A	; 26
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	15 c0       	rjmp	.+42     	; 0x3450 <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3426:	87 36       	cpi	r24, 0x67	; 103
    3428:	09 f0       	breq	.+2      	; 0x342c <ProcessInput+0xad2>
    342a:	87 c2       	rjmp	.+1294   	; 0x393a <ProcessInput+0xfe0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    342c:	87 2d       	mov	r24, r7
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	fc 01       	movw	r30, r24
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	e5 5e       	subi	r30, 0xE5	; 229
    3438:	f6 4c       	sbci	r31, 0xC6	; 198
    343a:	2c ed       	ldi	r18, 0xDC	; 220
    343c:	36 e7       	ldi	r19, 0x76	; 118
    343e:	20 83       	st	Z, r18
    3440:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3442:	fc 01       	movw	r30, r24
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	e5 5a       	subi	r30, 0xA5	; 165
    344a:	f6 4c       	sbci	r31, 0xC6	; 198
    344c:	28 e2       	ldi	r18, 0x28	; 40
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	20 83       	st	Z, r18
    3452:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	fc 01       	movw	r30, r24
    345a:	e5 56       	subi	r30, 0x65	; 101
    345c:	f6 4c       	sbci	r31, 0xC6	; 198
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	80 83       	st	Z, r24
    3464:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3466:	73 94       	inc	r7
    3468:	68 c2       	rjmp	.+1232   	; 0x393a <ProcessInput+0xfe0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    346a:	6a ed       	ldi	r22, 0xDA	; 218
    346c:	78 e3       	ldi	r23, 0x38	; 56
    346e:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3472:	f8 01       	movw	r30, r16
    3474:	80 81       	ld	r24, Z
    3476:	84 37       	cpi	r24, 0x74	; 116
    3478:	69 f5       	brne	.+90     	; 0x34d4 <ProcessInput+0xb7a>
    347a:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3993+0x8>
    347e:	83 fd       	sbrc	r24, 3
    3480:	4a c0       	rjmp	.+148    	; 0x3516 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3482:	8d e1       	ldi	r24, 0x1D	; 29
    3484:	99 e7       	ldi	r25, 0x79	; 121
    3486:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    348a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    348e:	8e e1       	ldi	r24, 0x1E	; 30
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3496:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    34a2:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    34a6:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3993+0x1a>
    34aa:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34ae:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3993+0xc>
    34b2:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3993+0xd>
    34b6:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    34ba:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    34be:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    34c2:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    34c6:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    34ca:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    34ce:	a3 e0       	ldi	r26, 0x03	; 3
    34d0:	7a 2e       	mov	r7, r26
    34d2:	33 c2       	rjmp	.+1126   	; 0x393a <ProcessInput+0xfe0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    34d4:	85 37       	cpi	r24, 0x75	; 117
    34d6:	69 f4       	brne	.+26     	; 0x34f2 <ProcessInput+0xb98>
    34d8:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3993+0x8>
    34dc:	84 fd       	sbrc	r24, 4
    34de:	1b c0       	rjmp	.+54     	; 0x3516 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34e0:	83 e0       	ldi	r24, 0x03	; 3
    34e2:	99 e7       	ldi	r25, 0x79	; 121
    34e4:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    34e8:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    34ec:	8a e1       	ldi	r24, 0x1A	; 26
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	f9 ca       	rjmp	.-2574   	; 0x2ae4 <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    34f2:	82 37       	cpi	r24, 0x72	; 114
    34f4:	69 f4       	brne	.+26     	; 0x3510 <ProcessInput+0xbb6>
    34f6:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3993+0x8>
    34fa:	85 fd       	sbrc	r24, 5
    34fc:	0c c0       	rjmp	.+24     	; 0x3516 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34fe:	88 ee       	ldi	r24, 0xE8	; 232
    3500:	98 e7       	ldi	r25, 0x78	; 120
    3502:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3506:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    350a:	8b e1       	ldi	r24, 0x1B	; 27
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	ea ca       	rjmp	.-2604   	; 0x2ae4 <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3510:	87 36       	cpi	r24, 0x67	; 103
    3512:	09 f4       	brne	.+2      	; 0x3516 <ProcessInput+0xbbc>
    3514:	52 ca       	rjmp	.-2908   	; 0x29ba <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3516:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3993+0x1e>
    351a:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3993+0x1f>
    351e:	f1 e0       	ldi	r31, 0x01	; 1
    3520:	ef 16       	cp	r14, r31
    3522:	f1 04       	cpc	r15, r1
    3524:	11 f5       	brne	.+68     	; 0x356a <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3526:	98 01       	movw	r18, r16
    3528:	2e 5f       	subi	r18, 0xFE	; 254
    352a:	3f 4f       	sbci	r19, 0xFF	; 255
    352c:	40 e0       	ldi	r20, 0x00	; 0
    352e:	61 e0       	ldi	r22, 0x01	; 1
    3530:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x10>
    3534:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3993+0x11>
    3538:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <ExtEERead>
                                if (data[2] == '1') {
    353c:	d8 01       	movw	r26, r16
    353e:	12 96       	adiw	r26, 0x02	; 2
    3540:	8c 91       	ld	r24, X
    3542:	81 33       	cpi	r24, 0x31	; 49
    3544:	09 f0       	breq	.+2      	; 0x3548 <ProcessInput+0xbee>
    3546:	8a cc       	rjmp	.-1772   	; 0x2e5c <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3548:	82 e6       	ldi	r24, 0x62	; 98
    354a:	95 e7       	ldi	r25, 0x75	; 117
    354c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3550:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3554:	8b e2       	ldi	r24, 0x2B	; 43
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    355c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3560:	e0 92 9d 39 	sts	0x399D, r14	; 0x80399d <reactStr+0x82>
    3564:	f0 92 9e 39 	sts	0x399E, r15	; 0x80399e <reactStr+0x83>
    3568:	c7 ca       	rjmp	.-2674   	; 0x2af8 <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    356a:	e1 14       	cp	r14, r1
    356c:	f1 04       	cpc	r15, r1
    356e:	09 f4       	brne	.+2      	; 0x3572 <ProcessInput+0xc18>
    3570:	59 c0       	rjmp	.+178    	; 0x3624 <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3572:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x10>
    3576:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3993+0x11>
    357a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    357e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3582:	e0 92 5d 39 	sts	0x395D, r14	; 0x80395d <reactStr+0x42>
    3586:	f0 92 5e 39 	sts	0x395E, r15	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    358a:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    358e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3592:	8b e5       	ldi	r24, 0x5B	; 91
    3594:	9a e7       	ldi	r25, 0x7A	; 122
    3596:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    359a:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    359e:	82 e0       	ldi	r24, 0x02	; 2
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    35a6:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    35b2:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35b6:	2f ea       	ldi	r18, 0xAF	; 175
    35b8:	38 e7       	ldi	r19, 0x78	; 120
    35ba:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    35be:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    35c2:	22 e1       	ldi	r18, 0x12	; 18
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    35ca:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    35ce:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    35d2:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    35d6:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3993+0x20>
    35da:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3993+0x21>
    35de:	40 97       	sbiw	r24, 0x10	; 16
    35e0:	30 f0       	brcs	.+12     	; 0x35ee <ProcessInput+0xc94>
    35e2:	8f e0       	ldi	r24, 0x0F	; 15
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <actObj1.3993+0x20>
    35ea:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <actObj1.3993+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    35ee:	2a e0       	ldi	r18, 0x0A	; 10
    35f0:	39 e3       	ldi	r19, 0x39	; 57
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	60 91 fa 38 	lds	r22, 0x38FA	; 0x8038fa <actObj1.3993+0x20>
    35f8:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3993+0x12>
    35fc:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3993+0x13>
    3600:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3604:	6a e0       	ldi	r22, 0x0A	; 10
    3606:	79 e3       	ldi	r23, 0x39	; 57
    3608:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3993+0x20>
    360c:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3610:	e0 91 fa 38 	lds	r30, 0x38FA	; 0x8038fa <actObj1.3993+0x20>
    3614:	f0 91 fb 38 	lds	r31, 0x38FB	; 0x8038fb <actObj1.3993+0x21>
    3618:	e6 5f       	subi	r30, 0xF6	; 246
    361a:	f6 4c       	sbci	r31, 0xC6	; 198
    361c:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    361e:	f4 e0       	ldi	r31, 0x04	; 4
    3620:	7f 2e       	mov	r7, r31
    3622:	8b c1       	rjmp	.+790    	; 0x393a <ProcessInput+0xfe0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3624:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3993+0x7>
    3628:	0e 94 a5 0a 	call	0x154a	; 0x154a <CheckState>
    362c:	88 23       	and	r24, r24
    362e:	01 f1       	breq	.+64     	; 0x3670 <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3630:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3993+0x26>
    3634:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3638:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3993+0x18>
    363c:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3993+0x19>
    3640:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3644:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3648:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    364c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3650:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3654:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3658:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3993+0x2a>
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3662:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3666:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3993+0xa>
    366a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
    366e:	44 ca       	rjmp	.-2936   	; 0x2af8 <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3670:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3993+0x24>
    3674:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3678:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3993+0x16>
    367c:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3993+0x17>
    3680:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3684:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3688:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    368c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3690:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3694:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3698:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3993+0x29>
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    36a2:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    36a6:	28 ca       	rjmp	.-2992   	; 0x2af8 <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    36a8:	f8 01       	movw	r30, r16
    36aa:	80 81       	ld	r24, Z
    36ac:	84 37       	cpi	r24, 0x74	; 116
    36ae:	11 f0       	breq	.+4      	; 0x36b4 <ProcessInput+0xd5a>
    36b0:	87 36       	cpi	r24, 0x67	; 103
    36b2:	19 f4       	brne	.+6      	; 0x36ba <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b4:	8b e3       	ldi	r24, 0x3B	; 59
    36b6:	99 e7       	ldi	r25, 0x79	; 121
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <ProcessInput+0xd64>
    36ba:	8f e4       	ldi	r24, 0x4F	; 79
    36bc:	99 e7       	ldi	r25, 0x79	; 121
    36be:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    36c2:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    36c6:	84 e1       	ldi	r24, 0x14	; 20
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0c ca       	rjmp	.-3048   	; 0x2ae4 <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    36cc:	81 36       	cpi	r24, 0x61	; 97
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <ProcessInput+0xd78>
    36d0:	c5 cb       	rjmp	.-2166   	; 0x2e5c <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    36d2:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <specialPassed>
    36d6:	82 30       	cpi	r24, 0x02	; 2
    36d8:	08 f4       	brcc	.+2      	; 0x36dc <ProcessInput+0xd82>
    36da:	bd c0       	rjmp	.+378    	; 0x3856 <ProcessInput+0xefc>
                if (data[1] > 0) {
    36dc:	d8 01       	movw	r26, r16
    36de:	11 96       	adiw	r26, 0x01	; 1
    36e0:	2c 91       	ld	r18, X
    36e2:	22 23       	and	r18, r18
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <ProcessInput+0xd8e>
    36e6:	a4 c0       	rjmp	.+328    	; 0x3830 <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    36e8:	fe 01       	movw	r30, r28
    36ea:	31 96       	adiw	r30, 0x01	; 1
    36ec:	7f 01       	movw	r14, r30
    36ee:	8a e0       	ldi	r24, 0x0A	; 10
    36f0:	df 01       	movw	r26, r30
    36f2:	1d 92       	st	X+, r1
    36f4:	8a 95       	dec	r24
    36f6:	e9 f7       	brne	.-6      	; 0x36f2 <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    36f8:	21 53       	subi	r18, 0x31	; 49
    36fa:	f8 01       	movw	r30, r16
    36fc:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    36fe:	32 81       	ldd	r19, Z+2	; 0x02
    3700:	31 53       	subi	r19, 0x31	; 49
    3702:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3704:	83 81       	ldd	r24, Z+3	; 0x03
    3706:	81 36       	cpi	r24, 0x61	; 97
    3708:	11 f4       	brne	.+4      	; 0x370e <ProcessInput+0xdb4>
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	08 c0       	rjmp	.+16     	; 0x371e <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    370e:	85 36       	cpi	r24, 0x65	; 101
    3710:	11 f4       	brne	.+4      	; 0x3716 <ProcessInput+0xdbc>
    3712:	13 82       	std	Z+3, r1	; 0x03
    3714:	08 c0       	rjmp	.+16     	; 0x3726 <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    3716:	86 36       	cpi	r24, 0x66	; 102
    3718:	21 f4       	brne	.+8      	; 0x3722 <ProcessInput+0xdc8>
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	f8 01       	movw	r30, r16
    371e:	83 83       	std	Z+3, r24	; 0x03
    3720:	02 c0       	rjmp	.+4      	; 0x3726 <ProcessInput+0xdcc>
                    else data[3] = 2;
    3722:	82 e0       	ldi	r24, 0x02	; 2
    3724:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3726:	21 fd       	sbrc	r18, 1
    3728:	04 c0       	rjmp	.+8      	; 0x3732 <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	dc 01       	movw	r26, r24
    3730:	04 c0       	rjmp	.+8      	; 0x373a <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	a0 e1       	ldi	r26, 0x10	; 16
    3738:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    373a:	20 ff       	sbrs	r18, 0
    373c:	03 c0       	rjmp	.+6      	; 0x3744 <ProcessInput+0xdea>
    373e:	9f 5f       	subi	r25, 0xFF	; 255
    3740:	af 4f       	sbci	r26, 0xFF	; 255
    3742:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3744:	f8 01       	movw	r30, r16
    3746:	23 81       	ldd	r18, Z+3	; 0x03
    3748:	21 fd       	sbrc	r18, 1
    374a:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    374c:	20 ff       	sbrs	r18, 0
    374e:	03 c0       	rjmp	.+6      	; 0x3756 <ProcessInput+0xdfc>
    3750:	40 96       	adiw	r24, 0x10	; 16
    3752:	a1 1d       	adc	r26, r1
    3754:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3756:	31 ff       	sbrs	r19, 1
    3758:	03 c0       	rjmp	.+6      	; 0x3760 <ProcessInput+0xe06>
    375a:	90 5f       	subi	r25, 0xF0	; 240
    375c:	af 4f       	sbci	r26, 0xFF	; 255
    375e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3760:	30 ff       	sbrs	r19, 0
    3762:	03 c0       	rjmp	.+6      	; 0x376a <ProcessInput+0xe10>
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	a1 1d       	adc	r26, r1
    3768:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    376a:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <whoami>
    376e:	24 e0       	ldi	r18, 0x04	; 4
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	24 1b       	sub	r18, r20
    3774:	31 09       	sbc	r19, r1
    3776:	bc 01       	movw	r22, r24
    3778:	cd 01       	movw	r24, r26
    377a:	04 c0       	rjmp	.+8      	; 0x3784 <ProcessInput+0xe2a>
    377c:	66 0f       	add	r22, r22
    377e:	77 1f       	adc	r23, r23
    3780:	88 1f       	adc	r24, r24
    3782:	99 1f       	adc	r25, r25
    3784:	2a 95       	dec	r18
    3786:	d2 f7       	brpl	.-12     	; 0x377c <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3788:	25 e0       	ldi	r18, 0x05	; 5
    378a:	35 e7       	ldi	r19, 0x75	; 117
    378c:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3790:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3794:	20 e2       	ldi	r18, 0x20	; 32
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    379c:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    37a0:	21 e0       	ldi	r18, 0x01	; 1
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    37a8:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    37ac:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    37ae:	b5 2e       	mov	r11, r21
    37b0:	ea e0       	ldi	r30, 0x0A	; 10
    37b2:	4e 2e       	mov	r4, r30
    37b4:	51 2c       	mov	r5, r1
    37b6:	61 2c       	mov	r6, r1
    37b8:	71 2c       	mov	r7, r1
    37ba:	67 01       	movw	r12, r14
    37bc:	cb 0c       	add	r12, r11
    37be:	d1 1c       	adc	r13, r1
    37c0:	a3 01       	movw	r20, r6
    37c2:	92 01       	movw	r18, r4
    37c4:	a9 d2       	rcall	.+1362   	; 0x3d18 <__udivmodsi4>
    37c6:	d6 01       	movw	r26, r12
    37c8:	6c 93       	st	X, r22
                        answer /= 10;
    37ca:	b9 01       	movw	r22, r18
    37cc:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    37ce:	61 15       	cp	r22, r1
    37d0:	71 05       	cpc	r23, r1
    37d2:	81 05       	cpc	r24, r1
    37d4:	91 05       	cpc	r25, r1
    37d6:	51 f4       	brne	.+20     	; 0x37ec <ProcessInput+0xe92>
    37d8:	2b e1       	ldi	r18, 0x1B	; 27
    37da:	c2 2e       	mov	r12, r18
    37dc:	29 e3       	ldi	r18, 0x39	; 57
    37de:	d2 2e       	mov	r13, r18
    37e0:	32 e0       	ldi	r19, 0x02	; 2
    37e2:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    37e4:	88 24       	eor	r8, r8
    37e6:	83 94       	inc	r8
    37e8:	91 2c       	mov	r9, r1
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    37ec:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    37ee:	e5 cf       	rjmp	.-54     	; 0x37ba <ProcessInput+0xe60>
    37f0:	f2 e0       	ldi	r31, 0x02	; 2
    37f2:	cf 0e       	add	r12, r31
    37f4:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    37f6:	29 e0       	ldi	r18, 0x09	; 9
    37f8:	2b 15       	cp	r18, r11
    37fa:	08 f4       	brcc	.+2      	; 0x37fe <ProcessInput+0xea4>
    37fc:	9c c0       	rjmp	.+312    	; 0x3936 <ProcessInput+0xfdc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    37fe:	73 94       	inc	r7
    3800:	f7 01       	movw	r30, r14
    3802:	eb 0d       	add	r30, r11
    3804:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3806:	80 81       	ld	r24, Z
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	8e 52       	subi	r24, 0x2E	; 46
    380c:	9b 48       	sbci	r25, 0x8B	; 139
    380e:	f6 01       	movw	r30, r12
    3810:	82 83       	std	Z+2, r24	; 0x02
    3812:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    3814:	ee 5b       	subi	r30, 0xBE	; 190
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 82       	st	Z, r8
    381a:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    381c:	e0 5c       	subi	r30, 0xC0	; 192
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 82       	st	Z, r8
    3822:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3824:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3993+0xa>
    3828:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    382c:	b3 94       	inc	r11
    382e:	e0 cf       	rjmp	.-64     	; 0x37f0 <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3830:	85 e2       	ldi	r24, 0x25	; 37
    3832:	95 e7       	ldi	r25, 0x75	; 117
    3834:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3838:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    383c:	8d e3       	ldi	r24, 0x3D	; 61
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3844:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3850:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3854:	6e c0       	rjmp	.+220    	; 0x3932 <ProcessInput+0xfd8>
    3856:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	ee 0f       	add	r30, r30
    385e:	ff 1f       	adc	r31, r31
    3860:	e3 52       	subi	r30, 0x23	; 35
    3862:	f6 4c       	sbci	r31, 0xC6	; 198
    3864:	6a ed       	ldi	r22, 0xDA	; 218
    3866:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3868:	81 30       	cpi	r24, 0x01	; 1
    386a:	09 f0       	breq	.+2      	; 0x386e <ProcessInput+0xf14>
    386c:	46 c0       	rjmp	.+140    	; 0x38fa <ProcessInput+0xfa0>
                PopulateObject(route[currDepth+1], &actObj1);
    386e:	80 81       	ld	r24, Z
    3870:	91 81       	ldd	r25, Z+1	; 0x01
    3872:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3876:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3993+0x7>
    387a:	0e 94 a5 0a 	call	0x154a	; 0x154a <CheckState>
    387e:	88 23       	and	r24, r24
    3880:	01 f1       	breq	.+64     	; 0x38c2 <ProcessInput+0xf68>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3882:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3993+0x26>
    3886:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    388a:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3993+0x18>
    388e:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3993+0x19>
    3892:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3896:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    389a:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    389e:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    38a2:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    38a6:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    38aa:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3993+0x2a>
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    38b4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    38b8:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3993+0xa>
    38bc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <UpdateState>
    38c0:	38 c0       	rjmp	.+112    	; 0x3932 <ProcessInput+0xfd8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    38c2:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3993+0x24>
    38c6:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38ca:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3993+0x16>
    38ce:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3993+0x17>
    38d2:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    38d6:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    38da:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    38de:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    38e2:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    38e6:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    38ea:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3993+0x29>
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    38f4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    38f8:	1c c0       	rjmp	.+56     	; 0x3932 <ProcessInput+0xfd8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3902:	8d e9       	ldi	r24, 0x9D	; 157
    3904:	98 e7       	ldi	r25, 0x78	; 120
    3906:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    390a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    390e:	82 e1       	ldi	r24, 0x12	; 18
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3916:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3922:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3926:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <getClock>
    392a:	80 93 07 39 	sts	0x3907, r24	; 0x803907 <PunishmentTime>
    392e:	90 93 08 39 	sts	0x3908, r25	; 0x803908 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	78 2e       	mov	r7, r24
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3936:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    393a:	8b e5       	ldi	r24, 0x5B	; 91
    393c:	9a e7       	ldi	r25, 0x7A	; 122
    393e:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    3942:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    3946:	82 e0       	ldi	r24, 0x02	; 2
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    394e:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    395a:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    395e:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    3962:	88 23       	and	r24, r24
    3964:	19 f0       	breq	.+6      	; 0x396c <ProcessInput+0x1012>
    3966:	70 92 1a 39 	sts	0x391A, r7	; 0x80391a <responseList>
    396a:	9a c0       	rjmp	.+308    	; 0x3aa0 <ProcessInput+0x1146>
    396c:	87 2d       	mov	r24, r7
    396e:	12 c0       	rjmp	.+36     	; 0x3994 <ProcessInput+0x103a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3970:	8b e5       	ldi	r24, 0x5B	; 91
    3972:	9a e7       	ldi	r25, 0x7A	; 122
    3974:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    3978:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    3984:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    3990:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    3994:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <SetStandardResponse>
    3998:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    399c:	81 c0       	rjmp	.+258    	; 0x3aa0 <ProcessInput+0x1146>
    399e:	83 ed       	ldi	r24, 0xD3	; 211
    39a0:	99 e7       	ldi	r25, 0x79	; 121

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    39a2:	a0 cd       	rjmp	.-1216   	; 0x34e4 <ProcessInput+0xb8a>
    39a4:	b2 e0       	ldi	r27, 0x02	; 2
    39a6:	fb 12       	cpse	r15, r27
    39a8:	08 c8       	rjmp	.-4080   	; 0x29ba <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    39aa:	d8 01       	movw	r26, r16
    39ac:	11 96       	adiw	r26, 0x01	; 1
    39ae:	6c 91       	ld	r22, X
    39b0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <CheckLetter>
    39b4:	88 23       	and	r24, r24
    39b6:	09 f4       	brne	.+2      	; 0x39ba <ProcessInput+0x1060>
    39b8:	5b c0       	rjmp	.+182    	; 0x3a70 <ProcessInput+0x1116>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	9c 01       	movw	r18, r24
    39c4:	22 5c       	subi	r18, 0xC2	; 194
    39c6:	37 4c       	sbci	r19, 0xC7	; 199
    39c8:	79 01       	movw	r14, r18
    39ca:	6a ed       	ldi	r22, 0xDA	; 218
    39cc:	78 e3       	ldi	r23, 0x38	; 56
    39ce:	d9 01       	movw	r26, r18
    39d0:	8d 91       	ld	r24, X+
    39d2:	9c 91       	ld	r25, X
    39d4:	0e 94 04 10 	call	0x2008	; 0x2008 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39d8:	83 ed       	ldi	r24, 0xD3	; 211
    39da:	97 e7       	ldi	r25, 0x77	; 119
    39dc:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    39e0:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    39e4:	80 e1       	ldi	r24, 0x10	; 16
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    39ec:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    39f8:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    39fc:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3993+0x1a>
    3a00:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a04:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3993+0xc>
    3a08:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3993+0xd>
    3a0c:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3a10:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3a14:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x44>
    3a18:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3a1c:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    3a20:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a24:	2b e5       	ldi	r18, 0x5B	; 91
    3a26:	3a e7       	ldi	r19, 0x7A	; 122
    3a28:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3a2c:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3a30:	22 e0       	ldi	r18, 0x02	; 2
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3a38:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3a3c:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    3a40:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a44:	26 e9       	ldi	r18, 0x96	; 150
    3a46:	37 e7       	ldi	r19, 0x77	; 119
    3a48:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x8>
    3a4c:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x9>
    reactStr[1][number]=length;
    3a50:	2d e3       	ldi	r18, 0x3D	; 61
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x48>
    3a58:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x49>
    reactStr[2][number]=type;
    3a5c:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x88>
    3a60:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3a64:	f7 01       	movw	r30, r14
    3a66:	10 82       	st	Z, r1
    3a68:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3a6a:	f5 e0       	ldi	r31, 0x05	; 5
    3a6c:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3a6e:	65 cf       	rjmp	.-310    	; 0x393a <ProcessInput+0xfe0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3a70:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3a74:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	49 f0       	breq	.+18     	; 0x3a8e <ProcessInput+0x1134>
                        if (CheckLetter(inventory[x], data[1])) {
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	61 81       	ldd	r22, Z+1	; 0x01
    3a80:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <CheckLetter>
    3a84:	88 23       	and	r24, r24
    3a86:	19 f0       	breq	.+6      	; 0x3a8e <ProcessInput+0x1134>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	98 cf       	rjmp	.-208    	; 0x39be <ProcessInput+0x1064>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a8e:	83 e6       	ldi	r24, 0x63	; 99
    3a90:	99 e7       	ldi	r25, 0x79	; 121
    3a92:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3a96:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a9a:	81 e2       	ldi	r24, 0x21	; 33
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	22 c8       	rjmp	.-4028   	; 0x2ae4 <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3aa0:	d8 01       	movw	r26, r16
    3aa2:	1c 92       	st	X, r1
    serRxDone = 0;
    3aa4:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    RXCNT = 0;    
    3aa8:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	2a 96       	adiw	r28, 0x0a	; 10
    3aae:	cd bf       	out	0x3d, r28	; 61
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	ff 90       	pop	r15
    3abc:	ef 90       	pop	r14
    3abe:	df 90       	pop	r13
    3ac0:	cf 90       	pop	r12
    3ac2:	bf 90       	pop	r11
    3ac4:	af 90       	pop	r10
    3ac6:	9f 90       	pop	r9
    3ac8:	8f 90       	pop	r8
    3aca:	7f 90       	pop	r7
    3acc:	6f 90       	pop	r6
    3ace:	5f 90       	pop	r5
    3ad0:	4f 90       	pop	r4
    3ad2:	08 95       	ret

00003ad4 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3ad4:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3ad6:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3ada:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3ade:	89 2b       	or	r24, r25
    3ae0:	09 f1       	breq	.+66     	; 0x3b24 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3ae2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <getClock>
        if (PunishmentCount < PunishmentTime)
    3ae6:	20 91 07 39 	lds	r18, 0x3907	; 0x803907 <PunishmentTime>
    3aea:	30 91 08 39 	lds	r19, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3aee:	82 17       	cp	r24, r18
    3af0:	93 07       	cpc	r25, r19
    3af2:	08 f4       	brcc	.+2      	; 0x3af6 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3af4:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3af6:	ac 01       	movw	r20, r24
    3af8:	42 1b       	sub	r20, r18
    3afa:	53 0b       	sbc	r21, r19
    3afc:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3afe:	4b 30       	cpi	r20, 0x0B	; 11
    3b00:	51 05       	cpc	r21, r1
    3b02:	30 f0       	brcs	.+12     	; 0x3b10 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3b04:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <PunishmentTime>
    3b08:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3b0c:	2a e0       	ldi	r18, 0x0A	; 10
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3b10:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    3b14:	81 11       	cpse	r24, r1
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3b18:	65 e0       	ldi	r22, 0x05	; 5
    3b1a:	62 1b       	sub	r22, r18
    3b1c:	8a e0       	ldi	r24, 0x0A	; 10
    3b1e:	82 1b       	sub	r24, r18
    3b20:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3b24:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <CheckSend>
    3b28:	88 23       	and	r24, r24
    3b2a:	11 f0       	breq	.+4      	; 0x3b30 <TextAdventure+0x5c>
    3b2c:	c1 e0       	ldi	r28, 0x01	; 1
    3b2e:	18 c0       	rjmp	.+48     	; 0x3b60 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3b30:	0e 94 c8 11 	call	0x2390	; 0x2390 <CheckResponse>
    3b34:	c8 2f       	mov	r28, r24
    3b36:	81 11       	cpse	r24, r1
    3b38:	f9 cf       	rjmp	.-14     	; 0x3b2c <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3b3a:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3b3e:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3b42:	89 2b       	or	r24, r25
    3b44:	69 f4       	brne	.+26     	; 0x3b60 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3b46:	8e e6       	ldi	r24, 0x6E	; 110
    3b48:	98 e3       	ldi	r25, 0x38	; 56
    3b4a:	0e 94 0f 12 	call	0x241e	; 0x241e <CheckInput>
    3b4e:	c8 2f       	mov	r28, r24
    3b50:	81 11       	cpse	r24, r1
    3b52:	05 c0       	rjmp	.+10     	; 0x3b5e <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3b54:	8e e6       	ldi	r24, 0x6E	; 110
    3b56:	98 e3       	ldi	r25, 0x38	; 56
    3b58:	0e 94 ad 14 	call	0x295a	; 0x295a <ProcessInput>
    3b5c:	01 c0       	rjmp	.+2      	; 0x3b60 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3b5e:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3b60:	8c 2f       	mov	r24, r28
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3b66:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Setup>

    SerSpeed(0xff);
    3b6a:	8f ef       	ldi	r24, 0xFF	; 255
    3b6c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <SerSpeed>
    3b70:	aa e9       	ldi	r26, 0x9A	; 154
    3b72:	bd eb       	ldi	r27, 0xBD	; 189
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	ed 91       	ld	r30, X+
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	e6 53       	subi	r30, 0x36	; 54
    3b7c:	f5 4c       	sbci	r31, 0xC5	; 197
    3b7e:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    3b80:	15 96       	adiw	r26, 0x05	; 5
    3b82:	ec 91       	ld	r30, X
    3b84:	15 97       	sbiw	r26, 0x05	; 5
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	e6 53       	subi	r30, 0x36	; 54
    3b8a:	f5 4c       	sbci	r31, 0xC5	; 197
    3b8c:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    3b8e:	2d eb       	ldi	r18, 0xBD	; 189
    3b90:	a0 3a       	cpi	r26, 0xA0	; 160
    3b92:	b2 07       	cpc	r27, r18
    3b94:	81 f7       	brne	.-32     	; 0x3b76 <main+0x10>
    3b96:	ec e8       	ldi	r30, 0x8C	; 140
    3b98:	fd eb       	ldi	r31, 0xBD	; 189
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    3b9a:	91 e0       	ldi	r25, 0x01	; 1
    3b9c:	ef 01       	movw	r28, r30
    3b9e:	a5 81       	ldd	r26, Z+5	; 0x05
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	a6 53       	subi	r26, 0x36	; 54
    3ba4:	b5 4c       	sbci	r27, 0xC5	; 197
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	9c 93       	st	X, r25
    3baa:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    3bac:	a8 81       	ld	r26, Y
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	a6 53       	subi	r26, 0x36	; 54
    3bb2:	b5 4c       	sbci	r27, 0xC5	; 197
    3bb4:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    3bb6:	2d eb       	ldi	r18, 0xBD	; 189
    3bb8:	e1 39       	cpi	r30, 0x91	; 145
    3bba:	f2 07       	cpc	r31, r18
    3bbc:	79 f7       	brne	.-34     	; 0x3b9c <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }

    //"Others"
    iLED[EYE[G][R]] = 1;
    3bbe:	e0 91 98 bd 	lds	r30, 0xBD98	; 0x80bd98 <__bss_end+0x827e>
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	e6 53       	subi	r30, 0x36	; 54
    3bc6:	f5 4c       	sbci	r31, 0xC5	; 197
    3bc8:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    3bca:	e0 91 99 bd 	lds	r30, 0xBD99	; 0x80bd99 <__bss_end+0x827f>
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	e6 53       	subi	r30, 0x36	; 54
    3bd2:	f5 4c       	sbci	r31, 0xC5	; 197
    3bd4:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    3bd6:	e0 91 96 bd 	lds	r30, 0xBD96	; 0x80bd96 <__bss_end+0x827c>
    3bda:	f0 e0       	ldi	r31, 0x00	; 0
    3bdc:	e6 53       	subi	r30, 0x36	; 54
    3bde:	f5 4c       	sbci	r31, 0xC5	; 197
    3be0:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    3be2:	e0 91 97 bd 	lds	r30, 0xBD97	; 0x80bd97 <__bss_end+0x827d>
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	e6 53       	subi	r30, 0x36	; 54
    3bea:	f5 4c       	sbci	r31, 0xC5	; 197
    3bec:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    3bee:	e0 91 8a bd 	lds	r30, 0xBD8A	; 0x80bd8a <__bss_end+0x8270>
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	e6 53       	subi	r30, 0x36	; 54
    3bf6:	f5 4c       	sbci	r31, 0xC5	; 197
    3bf8:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    3bfa:	e0 91 8b bd 	lds	r30, 0xBD8B	; 0x80bd8b <__bss_end+0x8271>
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	e6 53       	subi	r30, 0x36	; 54
    3c02:	f5 4c       	sbci	r31, 0xC5	; 197
    3c04:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    3c06:	e0 91 89 bd 	lds	r30, 0xBD89	; 0x80bd89 <__bss_end+0x826f>
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	e6 53       	subi	r30, 0x36	; 54
    3c0e:	f5 4c       	sbci	r31, 0xC5	; 197
    3c10:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    3c12:	e0 91 88 bd 	lds	r30, 0xBD88	; 0x80bd88 <__bss_end+0x826e>
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	e6 53       	subi	r30, 0x36	; 54
    3c1a:	f5 4c       	sbci	r31, 0xC5	; 197
    3c1c:	80 83       	st	Z, r24

    LoadGameState();
    3c1e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LoadGameState>
    effect = 0x013f;
    3c22:	8f e3       	ldi	r24, 0x3F	; 63
    3c24:	91 e0       	ldi	r25, 0x01	; 1
    3c26:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3c2a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            SaveGameState();

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);
            dimValue = 0 - QSINE[31-(adcPhot>>7)];
    3c2e:	cf e1       	ldi	r28, 0x1F	; 31
    3c30:	d0 e0       	ldi	r29, 0x00	; 0

    LoadGameState();
    effect = 0x013f;

    while (TRUE) {
        if (GenerateAudio()) {
    3c32:	0e 94 0f 0c 	call	0x181e	; 0x181e <GenerateAudio>
    3c36:	88 23       	and	r24, r24
    3c38:	e1 f3       	breq	.-8      	; 0x3c32 <main+0xcc>
            buttonState = CheckButtons(buttonState);
    3c3a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
    3c3e:	0e 94 1b 09 	call	0x1236	; 0x1236 <CheckButtons>
    3c42:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <buttonState>
            buttonMark = 0;
    3c46:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3c4a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3c4e:	82 31       	cpi	r24, 0x12	; 18
    3c50:	19 f4       	brne	.+6      	; 0x3c58 <main+0xf2>
    3c52:	0e 94 0c 09 	call	0x1218	; 0x1218 <SelectAuIn>
    3c56:	02 c0       	rjmp	.+4      	; 0x3c5c <main+0xf6>
    3c58:	0e 94 fd 08 	call	0x11fa	; 0x11fa <SelectTSens>

            GenerateBlinks();
    3c5c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3c60:	39 df       	rcall	.-398    	; 0x3ad4 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3c62:	0e 94 70 04 	call	0x8e0	; 0x8e0 <MagnetMaze>
            LanyardCode();
    3c66:	0e 94 31 03 	call	0x662	; 0x662 <LanyardCode>
            BastetDictates();
    3c6a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <BastetDictates>
            MakeFriends();
    3c6e:	0e 94 7a 00 	call	0xf4	; 0xf4 <MakeFriends>

            //Save progress
            SaveGameState();
    3c72:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3c76:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3c7a:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3c7e:	0a 97       	sbiw	r24, 0x0a	; 10
    3c80:	20 f4       	brcc	.+8      	; 0x3c8a <main+0x124>
    3c82:	61 e0       	ldi	r22, 0x01	; 1
    3c84:	84 e7       	ldi	r24, 0x74	; 116
    3c86:	0e 94 81 0a 	call	0x1502	; 0x1502 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    3c8a:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3c8e:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3c92:	85 36       	cpi	r24, 0x65	; 101
    3c94:	91 05       	cpc	r25, r1
    3c96:	20 f0       	brcs	.+8      	; 0x3ca0 <main+0x13a>
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	84 e7       	ldi	r24, 0x74	; 116
    3c9c:	0e 94 81 0a 	call	0x1502	; 0x1502 <WriteStatusBit>
            dimValue = 0 - QSINE[31-(adcPhot>>7)];
    3ca0:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3ca4:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3ca8:	88 0f       	add	r24, r24
    3caa:	89 2f       	mov	r24, r25
    3cac:	88 1f       	adc	r24, r24
    3cae:	99 0b       	sbc	r25, r25
    3cb0:	91 95       	neg	r25
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e8 1b       	sub	r30, r24
    3cb6:	f9 0b       	sbc	r31, r25
    3cb8:	ea 55       	subi	r30, 0x5A	; 90
    3cba:	f2 44       	sbci	r31, 0x42	; 66
    3cbc:	80 81       	ld	r24, Z
    3cbe:	81 95       	neg	r24
    3cc0:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <dimValue>

            //Check temperature
            HotSummer();
    3cc4:	0e 94 19 0b 	call	0x1632	; 0x1632 <HotSummer>
    3cc8:	b4 cf       	rjmp	.-152    	; 0x3c32 <main+0xcc>

00003cca <__udivmodhi4>:
    3cca:	aa 1b       	sub	r26, r26
    3ccc:	bb 1b       	sub	r27, r27
    3cce:	51 e1       	ldi	r21, 0x11	; 17
    3cd0:	07 c0       	rjmp	.+14     	; 0x3ce0 <__udivmodhi4_ep>

00003cd2 <__udivmodhi4_loop>:
    3cd2:	aa 1f       	adc	r26, r26
    3cd4:	bb 1f       	adc	r27, r27
    3cd6:	a6 17       	cp	r26, r22
    3cd8:	b7 07       	cpc	r27, r23
    3cda:	10 f0       	brcs	.+4      	; 0x3ce0 <__udivmodhi4_ep>
    3cdc:	a6 1b       	sub	r26, r22
    3cde:	b7 0b       	sbc	r27, r23

00003ce0 <__udivmodhi4_ep>:
    3ce0:	88 1f       	adc	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	5a 95       	dec	r21
    3ce6:	a9 f7       	brne	.-22     	; 0x3cd2 <__udivmodhi4_loop>
    3ce8:	80 95       	com	r24
    3cea:	90 95       	com	r25
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	08 95       	ret

00003cf2 <__divmodhi4>:
    3cf2:	97 fb       	bst	r25, 7
    3cf4:	07 2e       	mov	r0, r23
    3cf6:	16 f4       	brtc	.+4      	; 0x3cfc <__divmodhi4+0xa>
    3cf8:	00 94       	com	r0
    3cfa:	06 d0       	rcall	.+12     	; 0x3d08 <__divmodhi4_neg1>
    3cfc:	77 fd       	sbrc	r23, 7
    3cfe:	08 d0       	rcall	.+16     	; 0x3d10 <__divmodhi4_neg2>
    3d00:	e4 df       	rcall	.-56     	; 0x3cca <__udivmodhi4>
    3d02:	07 fc       	sbrc	r0, 7
    3d04:	05 d0       	rcall	.+10     	; 0x3d10 <__divmodhi4_neg2>
    3d06:	3e f4       	brtc	.+14     	; 0x3d16 <__divmodhi4_exit>

00003d08 <__divmodhi4_neg1>:
    3d08:	90 95       	com	r25
    3d0a:	81 95       	neg	r24
    3d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0e:	08 95       	ret

00003d10 <__divmodhi4_neg2>:
    3d10:	70 95       	com	r23
    3d12:	61 95       	neg	r22
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255

00003d16 <__divmodhi4_exit>:
    3d16:	08 95       	ret

00003d18 <__udivmodsi4>:
    3d18:	a1 e2       	ldi	r26, 0x21	; 33
    3d1a:	1a 2e       	mov	r1, r26
    3d1c:	aa 1b       	sub	r26, r26
    3d1e:	bb 1b       	sub	r27, r27
    3d20:	fd 01       	movw	r30, r26
    3d22:	0d c0       	rjmp	.+26     	; 0x3d3e <__udivmodsi4_ep>

00003d24 <__udivmodsi4_loop>:
    3d24:	aa 1f       	adc	r26, r26
    3d26:	bb 1f       	adc	r27, r27
    3d28:	ee 1f       	adc	r30, r30
    3d2a:	ff 1f       	adc	r31, r31
    3d2c:	a2 17       	cp	r26, r18
    3d2e:	b3 07       	cpc	r27, r19
    3d30:	e4 07       	cpc	r30, r20
    3d32:	f5 07       	cpc	r31, r21
    3d34:	20 f0       	brcs	.+8      	; 0x3d3e <__udivmodsi4_ep>
    3d36:	a2 1b       	sub	r26, r18
    3d38:	b3 0b       	sbc	r27, r19
    3d3a:	e4 0b       	sbc	r30, r20
    3d3c:	f5 0b       	sbc	r31, r21

00003d3e <__udivmodsi4_ep>:
    3d3e:	66 1f       	adc	r22, r22
    3d40:	77 1f       	adc	r23, r23
    3d42:	88 1f       	adc	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	1a 94       	dec	r1
    3d48:	69 f7       	brne	.-38     	; 0x3d24 <__udivmodsi4_loop>
    3d4a:	60 95       	com	r22
    3d4c:	70 95       	com	r23
    3d4e:	80 95       	com	r24
    3d50:	90 95       	com	r25
    3d52:	9b 01       	movw	r18, r22
    3d54:	ac 01       	movw	r20, r24
    3d56:	bd 01       	movw	r22, r26
    3d58:	cf 01       	movw	r24, r30
    3d5a:	08 95       	ret

00003d5c <_exit>:
    3d5c:	f8 94       	cli

00003d5e <__stop_program>:
    3d5e:	ff cf       	rjmp	.-2      	; 0x3d5e <__stop_program>
