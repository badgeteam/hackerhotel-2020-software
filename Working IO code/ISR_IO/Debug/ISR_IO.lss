
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00803800  00003e7c  00003f30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d82  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fa  0000bd82  00003d82  00003e36  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002da  0080382e  0080382e  00003f5e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003f5e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f90  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00003fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006b88  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002772  00000000  00000000  0000ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a72  00000000  00000000  0000d5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000984  00000000  00000000  00011044  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019ec  00000000  00000000  000119c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004449  00000000  00000000  000133b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a0  00000000  00000000  000177fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	d9 c7       	rjmp	.+4018   	; 0xfcc <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_7>
      20:	08 c6       	rjmp	.+3088   	; 0xc32 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c6       	rjmp	.+3230   	; 0xcd4 <__vector_13>
      36:	00 00       	nop
      38:	80 c6       	rjmp	.+3328   	; 0xd3a <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c7       	rjmp	.+3708   	; 0xece <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	71 c7       	rjmp	.+3810   	; 0xf3c <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b9 c6       	rjmp	.+3442   	; 0xde0 <__vector_27>
      6e:	00 00       	nop
      70:	12 c7       	rjmp	.+3620   	; 0xe96 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 0b       	sbc	r31, r25
      7e:	27 0c       	add	r2, r7
      80:	2e 0c       	add	r2, r14
      82:	e4 0c       	add	r14, r4
      84:	e4 0c       	add	r14, r4
      86:	42 0c       	add	r4, r2
      88:	54 0c       	add	r5, r4
      8a:	88 0c       	add	r8, r8
      8c:	ac 0c       	add	r10, r12

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	ec e7       	ldi	r30, 0x7C	; 124
      a2:	fe e3       	ldi	r31, 0x3E	; 62
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	ae 32       	cpi	r26, 0x2E	; 46
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	ae e2       	ldi	r26, 0x2E	; 46
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a8 30       	cpi	r26, 0x08	; 8
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <main>
      c4:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <avgVolt.3782>
      ce:	85 e1       	ldi	r24, 0x15	; 21
      d0:	90 e0       	ldi	r25, 0x00	; 0
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      d2:	40 91 b0 3a 	lds	r20, 0x3AB0	; 0x803ab0 <auIn>
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	48 17       	cp	r20, r24
      da:	59 07       	cpc	r21, r25
      dc:	74 f0       	brlt	.+28     	; 0xfa <chkVolt250+0x30>
      de:	40 91 b0 3a 	lds	r20, 0x3AB0	; 0x803ab0 <auIn>
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	bc 01       	movw	r22, r24
      e6:	68 5f       	subi	r22, 0xF8	; 248
      e8:	7f 4f       	sbci	r23, 0xFF	; 255
      ea:	64 17       	cp	r22, r20
      ec:	75 07       	cpc	r23, r21
      ee:	2c f0       	brlt	.+10     	; 0xfa <chkVolt250+0x30>
      f0:	20 93 32 38 	sts	0x3832, r18	; 0x803832 <avgVolt.3782>
            break;
        }
        ++avgVolt;
    }
    return avgVolt;
      f4:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <avgVolt.3782>
      f8:	08 95       	ret
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            break;
        }
        ++avgVolt;
      fa:	2f 5f       	subi	r18, 0xFF	; 255
      fc:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
      fe:	86 3f       	cpi	r24, 0xF6	; 246
     100:	91 05       	cpc	r25, r1
     102:	39 f7       	brne	.-50     	; 0xd2 <chkVolt250+0x8>
     104:	f5 cf       	rjmp	.-22     	; 0xf0 <chkVolt250+0x26>

00000106 <MakeFriends>:
    }
    return avgVolt;
}

// Main game loop
uint8_t MakeFriends(){
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     114:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; x++){
        if (CheckState(100+x) == 0) foundAll = 0;
     116:	8c 2f       	mov	r24, r28
     118:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CheckState>
     11c:	81 11       	cpse	r24, r1
     11e:	01 c0       	rjmp	.+2      	; 0x122 <MakeFriends+0x1c>
     120:	d0 e0       	ldi	r29, 0x00	; 0
     122:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; x++){
     124:	c8 36       	cpi	r28, 0x68	; 104
     126:	b9 f7       	brne	.-18     	; 0x116 <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     128:	dd 23       	and	r29, r29
     12a:	19 f0       	breq	.+6      	; 0x132 <MakeFriends+0x2c>
     12c:	8c e7       	ldi	r24, 0x7C	; 124
     12e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>


    //Checking for headphones
    if (detHdPh) return 0;
     132:	80 91 ad 3a 	lds	r24, 0x3AAD	; 0x803aad <detHdPh>
     136:	81 11       	cpse	r24, r1
     138:	1e c1       	rjmp	.+572    	; 0x376 <MakeFriends+0x270>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     13a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <progress.3789>
     13e:	81 11       	cpse	r24, r1
     140:	11 c0       	rjmp	.+34     	; 0x164 <MakeFriends+0x5e>
        setDAC[0] = whoami * 50;
     142:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     146:	22 e3       	ldi	r18, 0x32	; 50
     148:	92 9f       	mul	r25, r18
     14a:	90 2d       	mov	r25, r0
     14c:	11 24       	eor	r1, r1
     14e:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	38 e3       	ldi	r19, 0x38	; 56
     156:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
     15a:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     15e:	9f ef       	ldi	r25, 0xFF	; 255
     160:	90 93 a4 3a 	sts	0x3AA4, r25	; 0x803aa4 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) ||((progress > FIRST_CONTACT))) {
     164:	40 91 b0 3a 	lds	r20, 0x3AB0	; 0x803ab0 <auIn>
     168:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	b9 01       	movw	r22, r18
     172:	65 50       	subi	r22, 0x05	; 5
     174:	71 09       	sbc	r23, r1
     176:	46 17       	cp	r20, r22
     178:	57 07       	cpc	r21, r23
     17a:	64 f0       	brlt	.+24     	; 0x194 <MakeFriends+0x8e>
     17c:	40 91 b0 3a 	lds	r20, 0x3AB0	; 0x803ab0 <auIn>
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	2b 5f       	subi	r18, 0xFB	; 251
     184:	3f 4f       	sbci	r19, 0xFF	; 255
     186:	24 17       	cp	r18, r20
     188:	35 07       	cpc	r19, r21
     18a:	24 f0       	brlt	.+8      	; 0x194 <MakeFriends+0x8e>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	08 f0       	brcs	.+2      	; 0x192 <MakeFriends+0x8c>
     190:	40 c0       	rjmp	.+128    	; 0x212 <MakeFriends+0x10c>
     192:	ef c0       	rjmp	.+478    	; 0x372 <MakeFriends+0x26c>
        if (progress == NO_OTHER) {
     194:	81 11       	cpse	r24, r1
     196:	0a c0       	rjmp	.+20     	; 0x1ac <MakeFriends+0xa6>
            ++chkTmr;
     198:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3791>
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3791>
            if (chkTmr >= 8) {
     1a2:	88 30       	cpi	r24, 0x08	; 8
     1a4:	08 f4       	brcc	.+2      	; 0x1a8 <MakeFriends+0xa2>
     1a6:	e7 c0       	rjmp	.+462    	; 0x376 <MakeFriends+0x270>
                progress = FIRST_CONTACT;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	81 c0       	rjmp	.+258    	; 0x2ae <MakeFriends+0x1a8>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	89 f5       	brne	.+98     	; 0x212 <MakeFriends+0x10c>
            jackIn = chkVolt250();
     1b0:	8c df       	rcall	.-232    	; 0xca <chkVolt250>
     1b2:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <jackIn.3792>
            if (jackIn) {
     1b6:	88 23       	and	r24, r24
     1b8:	49 f1       	breq	.+82     	; 0x20c <MakeFriends+0x106>
                ++chkTmr;
     1ba:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <chkTmr.3791>
     1be:	9f 5f       	subi	r25, 0xFF	; 255
     1c0:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <chkTmr.3791>
                if (chkTmr >= SHORT_WAIT){
     1c4:	98 30       	cpi	r25, 0x08	; 8
     1c6:	08 f4       	brcc	.+2      	; 0x1ca <MakeFriends+0xc4>
     1c8:	d6 c0       	rjmp	.+428    	; 0x376 <MakeFriends+0x270>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1ca:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     1ce:	91 30       	cpi	r25, 0x01	; 1
     1d0:	29 f4       	brne	.+10     	; 0x1dc <MakeFriends+0xd6>
     1d2:	83 50       	subi	r24, 0x03	; 3
     1d4:	83 30       	cpi	r24, 0x03	; 3
     1d6:	b8 f4       	brcc	.+46     	; 0x206 <MakeFriends+0x100>
                        progress = SECOND_LOVE; 
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	69 c0       	rjmp	.+210    	; 0x2ae <MakeFriends+0x1a8>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1dc:	92 30       	cpi	r25, 0x02	; 2
     1de:	31 f4       	brne	.+12     	; 0x1ec <MakeFriends+0xe6>
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	d1 f3       	breq	.-12     	; 0x1d8 <MakeFriends+0xd2>
     1e4:	85 50       	subi	r24, 0x05	; 5
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	70 f4       	brcc	.+28     	; 0x206 <MakeFriends+0x100>
     1ea:	f6 cf       	rjmp	.-20     	; 0x1d8 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1ec:	93 30       	cpi	r25, 0x03	; 3
     1ee:	39 f4       	brne	.+14     	; 0x1fe <MakeFriends+0xf8>
     1f0:	9c ef       	ldi	r25, 0xFC	; 252
     1f2:	98 0f       	add	r25, r24
     1f4:	92 30       	cpi	r25, 0x02	; 2
     1f6:	80 f3       	brcs	.-32     	; 0x1d8 <MakeFriends+0xd2>
     1f8:	87 30       	cpi	r24, 0x07	; 7
     1fa:	29 f4       	brne	.+10     	; 0x206 <MakeFriends+0x100>
     1fc:	ed cf       	rjmp	.-38     	; 0x1d8 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1fe:	94 30       	cpi	r25, 0x04	; 4
     200:	11 f4       	brne	.+4      	; 0x206 <MakeFriends+0x100>
     202:	85 50       	subi	r24, 0x05	; 5
     204:	e7 cf       	rjmp	.-50     	; 0x1d4 <MakeFriends+0xce>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     206:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <progress.3789>
     20a:	53 c0       	rjmp	.+166    	; 0x2b2 <MakeFriends+0x1ac>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     20c:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <chkTmr.3791>
     210:	b0 c0       	rjmp	.+352    	; 0x372 <MakeFriends+0x26c>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	09 f0       	breq	.+2      	; 0x218 <MakeFriends+0x112>
     216:	50 c0       	rjmp	.+160    	; 0x2b8 <MakeFriends+0x1b2>
            ++chkTmr;
     218:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3791>
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3791>
     222:	ce ea       	ldi	r28, 0xAE	; 174
     224:	dd eb       	ldi	r29, 0xBD	; 189
     226:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     228:	0d 81       	ldd	r16, Y+5	; 0x05
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	0e 94 40 09 	call	0x1280	; 0x1280 <lfsr>
     230:	87 ff       	sbrs	r24, 7
     232:	03 c0       	rjmp	.+6      	; 0x23a <MakeFriends+0x134>
     234:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     238:	01 c0       	rjmp	.+2      	; 0x23c <MakeFriends+0x136>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	f8 01       	movw	r30, r16
     23e:	e8 54       	subi	r30, 0x48	; 72
     240:	f5 4c       	sbci	r31, 0xC5	; 197
     242:	80 83       	st	Z, r24
     244:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     246:	f7 01       	movw	r30, r14
     248:	00 81       	ld	r16, Z
     24a:	10 e0       	ldi	r17, 0x00	; 0
     24c:	0e 94 40 09 	call	0x1280	; 0x1280 <lfsr>
     250:	87 ff       	sbrs	r24, 7
     252:	03 c0       	rjmp	.+6      	; 0x25a <MakeFriends+0x154>
     254:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     258:	01 c0       	rjmp	.+2      	; 0x25c <MakeFriends+0x156>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	f8 01       	movw	r30, r16
     25e:	e8 54       	subi	r30, 0x48	; 72
     260:	f5 4c       	sbci	r31, 0xC5	; 197
     262:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     264:	fd eb       	ldi	r31, 0xBD	; 189
     266:	c3 3b       	cpi	r28, 0xB3	; 179
     268:	df 07       	cpc	r29, r31
     26a:	e9 f6       	brne	.-70     	; 0x226 <MakeFriends+0x120>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     26c:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3791>
     270:	88 30       	cpi	r24, 0x08	; 8
     272:	40 f0       	brcs	.+16     	; 0x284 <MakeFriends+0x17e>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     274:	2f ef       	ldi	r18, 0xFF	; 255
     276:	44 e6       	ldi	r20, 0x64	; 100
     278:	68 e0       	ldi	r22, 0x08	; 8
     27a:	80 e8       	ldi	r24, 0x80	; 128
     27c:	0e 94 91 09 	call	0x1322	; 0x1322 <floatAround>
     280:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     284:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3791>
     288:	8a 3f       	cpi	r24, 0xFA	; 250
     28a:	08 f4       	brcc	.+2      	; 0x28e <MakeFriends+0x188>
     28c:	74 c0       	rjmp	.+232    	; 0x376 <MakeFriends+0x270>
                candidate = jackIn-whoami;
     28e:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     292:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <jackIn.3792>
     296:	89 1b       	sub	r24, r25
     298:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <__data_end>
                if (candidate > whoami) setDAC[0] = 250; else setDAC[0] = 0;
     29c:	98 17       	cp	r25, r24
     29e:	20 f4       	brcc	.+8      	; 0x2a8 <MakeFriends+0x1a2>
     2a0:	8a ef       	ldi	r24, 0xFA	; 250
     2a2:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <MakeFriends+0x1a6>
     2a8:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <progress.3789>
                chkTmr = 0;
     2b2:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <chkTmr.3791>
     2b6:	5f c0       	rjmp	.+190    	; 0x376 <MakeFriends+0x270>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2b8:	83 30       	cpi	r24, 0x03	; 3
     2ba:	e1 f5       	brne	.+120    	; 0x334 <MakeFriends+0x22e>
            chkTmr++;
     2bc:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3791>
     2c0:	8f 5f       	subi	r24, 0xFF	; 255
     2c2:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3791>
            if (chkTmr >= SHORT_WAIT) {
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	08 f4       	brcc	.+2      	; 0x2cc <MakeFriends+0x1c6>
                if (chkVolt250() == 5) {
     2ca:	55 c0       	rjmp	.+170    	; 0x376 <MakeFriends+0x270>
     2cc:	fe de       	rcall	.-516    	; 0xca <chkVolt250>
     2ce:	85 30       	cpi	r24, 0x05	; 5
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <MakeFriends+0x1ce>
     2d2:	99 cf       	rjmp	.-206    	; 0x206 <MakeFriends+0x100>
                    UpdateState(99+candidate);
     2d4:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <__data_end>
     2d8:	8d 59       	subi	r24, 0x9D	; 157
     2da:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
                    UpdateState(99+whoami);
     2de:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     2e2:	8d 59       	subi	r24, 0x9D	; 157
     2e4:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2e8:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <__data_end>
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     2ec:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <whoami>
     2f0:	ae ea       	ldi	r26, 0xAE	; 174
     2f2:	bd eb       	ldi	r27, 0xBD	; 189
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	ed 01       	movw	r28, r26
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2f8:	15 96       	adiw	r26, 0x05	; 5
     2fa:	ec 91       	ld	r30, X
     2fc:	15 97       	sbiw	r26, 0x05	; 5
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	82 17       	cp	r24, r18
     302:	18 f4       	brcc	.+6      	; 0x30a <MakeFriends+0x204>
     304:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     308:	01 c0       	rjmp	.+2      	; 0x30c <MakeFriends+0x206>
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	e8 54       	subi	r30, 0x48	; 72
     30e:	f5 4c       	sbci	r31, 0xC5	; 197
     310:	90 83       	st	Z, r25
     312:	11 96       	adiw	r26, 0x01	; 1
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     314:	e8 81       	ld	r30, Y
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	83 17       	cp	r24, r19
     31a:	18 f4       	brcc	.+6      	; 0x322 <MakeFriends+0x21c>
     31c:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     320:	01 c0       	rjmp	.+2      	; 0x324 <MakeFriends+0x21e>
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	e8 54       	subi	r30, 0x48	; 72
     326:	f5 4c       	sbci	r31, 0xC5	; 197
     328:	90 83       	st	Z, r25
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	85 30       	cpi	r24, 0x05	; 5
     32e:	19 f7       	brne	.-58     	; 0x2f6 <MakeFriends+0x1f0>
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
                    }   
                    progress = FOURTH_BASE;
     330:	84 e0       	ldi	r24, 0x04	; 4
     332:	bd cf       	rjmp	.-134    	; 0x2ae <MakeFriends+0x1a8>
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
     334:	84 30       	cpi	r24, 0x04	; 4
            if (chkVolt250() == 5) {
     336:	f9 f4       	brne	.+62     	; 0x376 <MakeFriends+0x270>
     338:	c8 de       	rcall	.-624    	; 0xca <chkVolt250>
     33a:	85 30       	cpi	r24, 0x05	; 5
     33c:	e1 f4       	brne	.+56     	; 0x376 <MakeFriends+0x270>
                chkTmr++;
     33e:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3791>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3791>
                if (chkTmr >= LONG_WAIT) {
     348:	8a 3f       	cpi	r24, 0xFA	; 250
     34a:	a8 f0       	brcs	.+42     	; 0x376 <MakeFriends+0x270>
     34c:	ee ea       	ldi	r30, 0xAE	; 174
     34e:	fd eb       	ldi	r31, 0xBD	; 189
     350:	83 eb       	ldi	r24, 0xB3	; 179
     352:	9d eb       	ldi	r25, 0xBD	; 189
     354:	ef 01       	movw	r28, r30
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = 0;
     356:	a5 81       	ldd	r26, Z+5	; 0x05
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	a8 54       	subi	r26, 0x48	; 72
     35c:	b5 4c       	sbci	r27, 0xC5	; 197
     35e:	1c 92       	st	X, r1
     360:	31 96       	adiw	r30, 0x01	; 1
                        iLED[WING[R][x]] = 0;
     362:	a8 81       	ld	r26, Y
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	a8 54       	subi	r26, 0x48	; 72
     368:	b5 4c       	sbci	r27, 0xC5	; 197
     36a:	1c 92       	st	X, r1
        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
            if (chkVolt250() == 5) {
                chkTmr++;
                if (chkTmr >= LONG_WAIT) {
                    for (uint8_t x=0; x<5; ++x){
     36c:	8e 17       	cp	r24, r30
     36e:	9f 07       	cpc	r25, r31
     370:	89 f7       	brne	.-30     	; 0x354 <MakeFriends+0x24e>
                    }                    
                }
            }
        }

    } else progress = NO_OTHER;
     372:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <progress.3789>
      
    return 0;
}
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     38c:	e6 e2       	ldi	r30, 0x26	; 38
     38e:	f4 e0       	ldi	r31, 0x04	; 4
     390:	80 83       	st	Z, r24
     392:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     396:	a1 e2       	ldi	r26, 0x21	; 33
     398:	b4 e0       	ldi	r27, 0x04	; 4
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	9c 93       	st	X, r25
     39e:	90 83       	st	Z, r25
     3a0:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     3a4:	e0 e1       	ldi	r30, 0x10	; 16
     3a6:	f8 e0       	ldi	r31, 0x08	; 8
     3a8:	97 e0       	ldi	r25, 0x07	; 7
     3aa:	96 83       	std	Z+6, r25	; 0x06
     3ac:	98 e0       	ldi	r25, 0x08	; 8
     3ae:	94 83       	std	Z+4, r25	; 0x04
     3b0:	83 83       	std	Z+3, r24	; 0x03
     3b2:	8c 93       	st	X, r24
     3b4:	85 81       	ldd	r24, Z+5	; 0x05
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	85 83       	std	Z+5, r24	; 0x05
     3ba:	85 81       	ldd	r24, Z+5	; 0x05
     3bc:	84 6c       	ori	r24, 0xC4	; 196
     3be:	85 83       	std	Z+5, r24	; 0x05
     3c0:	08 95       	ret

000003c2 <I2C_recover>:
     3c2:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3c6:	88 60       	ori	r24, 0x08	; 8
     3c8:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3cc:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3d6:	99 e0       	ldi	r25, 0x09	; 9
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3e0:	30 e1       	ldi	r19, 0x10	; 16
     3e2:	3a 95       	dec	r19
     3e4:	f1 f7       	brne	.-4      	; 0x3e2 <I2C_recover+0x20>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <I2C_recover+0x26>
     3e8:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3ec:	30 e1       	ldi	r19, 0x10	; 16
     3ee:	3a 95       	dec	r19
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <I2C_recover+0x2c>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <I2C_recover+0x32>
     3f4:	91 50       	subi	r25, 0x01	; 1
     3f6:	89 f7       	brne	.-30     	; 0x3da <I2C_recover+0x18>
     3f8:	28 e0       	ldi	r18, 0x08	; 8
     3fa:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3fe:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     408:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40c:	91 60       	ori	r25, 0x01	; 1
     40e:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     412:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     416:	94 6c       	ori	r25, 0xC4	; 196
     418:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     420:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     424:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     428:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     436:	84 6c       	ori	r24, 0xC4	; 196
     438:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43c:	08 95       	ret

0000043e <I2C_start>:
     43e:	28 2f       	mov	r18, r24
     440:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     444:	90 6c       	ori	r25, 0xC0	; 192
     446:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     44a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     44e:	89 2f       	mov	r24, r25
     450:	84 70       	andi	r24, 0x04	; 4
     452:	92 fd       	sbrc	r25, 2
     454:	03 c0       	rjmp	.+6      	; 0x45c <I2C_start+0x1e>
     456:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     45a:	08 95       	ret
     45c:	84 e0       	ldi	r24, 0x04	; 4
     45e:	08 95       	ret

00000460 <I2C_wait_ACK>:
     460:	8c e0       	ldi	r24, 0x0C	; 12
     462:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
     466:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     46a:	87 fd       	sbrc	r24, 7
     46c:	0a c0       	rjmp	.+20     	; 0x482 <I2C_wait_ACK+0x22>
     46e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     472:	86 fd       	sbrc	r24, 6
     474:	06 c0       	rjmp	.+12     	; 0x482 <I2C_wait_ACK+0x22>
     476:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     47a:	81 11       	cpse	r24, r1
     47c:	f4 cf       	rjmp	.-24     	; 0x466 <I2C_wait_ACK+0x6>
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	08 95       	ret
     482:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     486:	80 6c       	ori	r24, 0xC0	; 192
     488:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     490:	82 fd       	sbrc	r24, 2
     492:	09 c0       	rjmp	.+18     	; 0x4a6 <I2C_wait_ACK+0x46>
     494:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     498:	83 fd       	sbrc	r24, 3
     49a:	07 c0       	rjmp	.+14     	; 0x4aa <I2C_wait_ACK+0x4a>
     49c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a0:	82 95       	swap	r24
     4a2:	81 70       	andi	r24, 0x01	; 1
     4a4:	08 95       	ret
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	08 95       	ret
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	08 95       	ret

000004ae <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     4ae:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     4b0:	8c e0       	ldi	r24, 0x0C	; 12
     4b2:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4b6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ba:	89 2f       	mov	r24, r25
     4bc:	83 70       	andi	r24, 0x03	; 3
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4c2:	88 e0       	ldi	r24, 0x08	; 8
     4c4:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4c6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ca:	97 fd       	sbrc	r25, 7
     4cc:	06 c0       	rjmp	.+12     	; 0x4da <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4ce:	90 91 4e 3a 	lds	r25, 0x3A4E	; 0x803a4e <timeout_I2C>
     4d2:	91 11       	cpse	r25, r1
     4d4:	f8 cf       	rjmp	.-16     	; 0x4c6 <I2C_read+0x18>
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4da:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4de:	90 6c       	ori	r25, 0xC0	; 192
     4e0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4e4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e8:	92 fd       	sbrc	r25, 2
     4ea:	1e c0       	rjmp	.+60     	; 0x528 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4ec:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4f0:	93 fd       	sbrc	r25, 3
     4f2:	1d c0       	rjmp	.+58     	; 0x52e <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4f4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4f8:	89 2f       	mov	r24, r25
     4fa:	80 71       	andi	r24, 0x10	; 16
     4fc:	94 fd       	sbrc	r25, 4
     4fe:	16 c0       	rjmp	.+44     	; 0x52c <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     500:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     504:	61 11       	cpse	r22, r1
     506:	02 c0       	rjmp	.+4      	; 0x50c <I2C_read+0x5e>
     508:	9b 7f       	andi	r25, 0xFB	; 251
     50a:	01 c0       	rjmp	.+2      	; 0x50e <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     50c:	94 60       	ori	r25, 0x04	; 4
     50e:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     512:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     516:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     518:	61 11       	cpse	r22, r1
     51a:	09 c0       	rjmp	.+18     	; 0x52e <I2C_read+0x80>
     51c:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     520:	92 60       	ori	r25, 0x02	; 2
     522:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     526:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     52c:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     52e:	08 95       	ret

00000530 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     530:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     532:	8c e0       	ldi	r24, 0x0C	; 12
     534:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     538:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     53c:	93 70       	andi	r25, 0x03	; 3
     53e:	92 30       	cpi	r25, 0x02	; 2
     540:	b1 f4       	brne	.+44     	; 0x56e <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     542:	80 81       	ld	r24, Z
     544:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     548:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     54c:	86 fd       	sbrc	r24, 6
     54e:	06 c0       	rjmp	.+12     	; 0x55c <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     550:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     554:	81 11       	cpse	r24, r1
     556:	f8 cf       	rjmp	.-16     	; 0x548 <I2C_write+0x18>
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     55c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     560:	82 fd       	sbrc	r24, 2
     562:	07 c0       	rjmp	.+14     	; 0x572 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     564:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     568:	82 95       	swap	r24
     56a:	81 70       	andi	r24, 0x01	; 1
     56c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     56e:	88 e0       	ldi	r24, 0x08	; 8
     570:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     572:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     574:	08 95       	ret

00000576 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     576:	e0 e1       	ldi	r30, 0x10	; 16
     578:	f8 e0       	ldi	r31, 0x08	; 8
     57a:	84 81       	ldd	r24, Z+4	; 0x04
     57c:	83 60       	ori	r24, 0x03	; 3
     57e:	84 83       	std	Z+4, r24	; 0x04
     580:	08 95       	ret

00000582 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	6b 01       	movw	r12, r22
     592:	f4 2e       	mov	r15, r20
     594:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     596:	18 2f       	mov	r17, r24
     598:	11 0f       	add	r17, r17
     59a:	81 2f       	mov	r24, r17
     59c:	50 df       	rcall	.-352    	; 0x43e <I2C_start>
	if (status != 0) goto error;
     59e:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     5a0:	2b c0       	rjmp	.+86     	; 0x5f8 <I2C_read_bytes+0x76>
     5a2:	5e df       	rcall	.-324    	; 0x460 <I2C_wait_ACK>
	if (status == 1) {
     5a4:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     5a6:	19 f4       	brne	.+6      	; 0x5ae <I2C_read_bytes+0x2c>
     5a8:	e6 df       	rcall	.-52     	; 0x576 <I2C_stop>
		return 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	27 c0       	rjmp	.+78     	; 0x5fc <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     5ae:	81 11       	cpse	r24, r1
     5b0:	23 c0       	rjmp	.+70     	; 0x5f8 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     5b2:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     5b4:	49 f0       	breq	.+18     	; 0x5c8 <I2C_read_bytes+0x46>
     5b6:	c6 01       	movw	r24, r12
     5b8:	bb df       	rcall	.-138    	; 0x530 <I2C_write>
	    if (status != 0) goto error;
     5ba:	81 11       	cpse	r24, r1
     5bc:	1d c0       	rjmp	.+58     	; 0x5f8 <I2C_read_bytes+0x76>
        ++reg_ptr;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	c8 1a       	sub	r12, r24
     5c2:	d8 0a       	sbc	r13, r24
        --reg_len;
     5c4:	fa 94       	dec	r15
     5c6:	f5 cf       	rjmp	.-22     	; 0x5b2 <I2C_read_bytes+0x30>
     5c8:	01 34       	cpi	r16, 0x41	; 65
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <I2C_read_bytes+0x4c>
     5cc:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5ce:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5d0:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5d4:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5d6:	40 f0       	brcs	.+16     	; 0x5e8 <I2C_read_bytes+0x66>
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	ce 01       	movw	r24, r28
     5dc:	68 df       	rcall	.-304    	; 0x4ae <I2C_read>
		if (status != 0) goto error;
     5de:	81 11       	cpse	r24, r1
     5e0:	0b c0       	rjmp	.+22     	; 0x5f8 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5e2:	21 96       	adiw	r28, 0x01	; 1
     5e4:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5e6:	f6 cf       	rjmp	.-20     	; 0x5d4 <I2C_read_bytes+0x52>
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5ec:	60 df       	rcall	.-320    	; 0x4ae <I2C_read>
     5ee:	81 11       	cpse	r24, r1
	I2C_stop();
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <I2C_read_bytes+0x76>
     5f2:	c1 df       	rcall	.-126    	; 0x576 <I2C_stop>
	return 0;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5f8:	e4 de       	rcall	.-568    	; 0x3c2 <I2C_recover>
     5fa:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5fc:	df 91       	pop	r29
}
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     60c:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardPos>
    lanyardCnt      = 0;
     610:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <lanyardCnt>
    lanyardState    = TRUE;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    effect = 0;
     61a:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     61e:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
     622:	08 95       	ret

00000624 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     624:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     626:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     62a:	83 30       	cpi	r24, 0x03	; 3
     62c:	71 f4       	brne	.+28     	; 0x64a <LanyardCode+0x26>
     62e:	6a e0       	ldi	r22, 0x0A	; 10
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <lanyardLastActive>
     636:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <lanyardLastActive+0x1>
     63a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <idleTimeout>
     63e:	88 23       	and	r24, r24
     640:	21 f0       	breq	.+8      	; 0x64a <LanyardCode+0x26>
        /* clean up maze game and go back to text game */
        initLanyard();
     642:	e4 df       	rcall	.-56     	; 0x60c <initLanyard>
        gameNow = TEXT;
     644:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     648:	9b c0       	rjmp	.+310    	; 0x780 <LanyardCode+0x15c>
    }

    if (CheckState(LANYARD_COMPLETED))
     64a:	8b e7       	ldi	r24, 0x7B	; 123
     64c:	47 d7       	rcall	.+3726   	; 0x14dc <CheckState>
     64e:	81 11       	cpse	r24, r1
     650:	97 c0       	rjmp	.+302    	; 0x780 <LanyardCode+0x15c>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     652:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     656:	88 23       	and	r24, r24
     658:	19 f0       	breq	.+6      	; 0x660 <LanyardCode+0x3c>
     65a:	83 30       	cpi	r24, 0x03	; 3
     65c:	09 f0       	breq	.+2      	; 0x660 <LanyardCode+0x3c>
     65e:	90 c0       	rjmp	.+288    	; 0x780 <LanyardCode+0x15c>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     660:	c0 91 aa bd 	lds	r28, 0xBDAA	; 0x80bdaa <__bss_end+0x82a2>
     664:	ec 2f       	mov	r30, r28
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     66c:	8f 3f       	cpi	r24, 0xFF	; 255
     66e:	19 f0       	breq	.+6      	; 0x676 <LanyardCode+0x52>
     670:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     674:	01 c0       	rjmp	.+2      	; 0x678 <LanyardCode+0x54>
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	e8 54       	subi	r30, 0x48	; 72
     67a:	f5 4c       	sbci	r31, 0xC5	; 197
     67c:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     67e:	8f 3f       	cpi	r24, 0xFF	; 255
     680:	09 f4       	brne	.+2      	; 0x684 <LanyardCode+0x60>
     682:	7e c0       	rjmp	.+252    	; 0x780 <LanyardCode+0x15c>
        return 0;

    if (buttonState == lastButtonState)
     684:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     688:	89 17       	cp	r24, r25
     68a:	09 f4       	brne	.+2      	; 0x68e <LanyardCode+0x6a>
     68c:	79 c0       	rjmp	.+242    	; 0x780 <LanyardCode+0x15c>
        return 0;

    lanyardLastActive = getClock();
     68e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <getClock>
     692:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <lanyardLastActive>
     696:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     69a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     69e:	8f 3f       	cpi	r24, 0xFF	; 255
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <LanyardCode+0x80>
     6a2:	6e c0       	rjmp	.+220    	; 0x780 <LanyardCode+0x15c>
        effect = 0x13f + (buttonState << 5);
     6a4:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     6a8:	20 e2       	ldi	r18, 0x20	; 32
     6aa:	82 9f       	mul	r24, r18
     6ac:	c0 01       	movw	r24, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	81 5c       	subi	r24, 0xC1	; 193
     6b2:	9e 4f       	sbci	r25, 0xFE	; 254
     6b4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     6b8:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>

        if (gameNow != LANYARD)
     6bc:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     6c0:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <LanyardCode+0xa2>
     6c4:	a3 df       	rcall	.-186    	; 0x60c <initLanyard>
        gameNow = LANYARD;
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     6cc:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <lanyardPos>
     6d0:	e8 2f       	mov	r30, r24
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	ee 56       	subi	r30, 0x6E	; 110
     6d6:	f2 44       	sbci	r31, 0x42	; 66
     6d8:	20 81       	ld	r18, Z
     6da:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     6de:	29 13       	cpse	r18, r25
     6e0:	12 c0       	rjmp	.+36     	; 0x706 <LanyardCode+0xe2>
            lanyardState &= TRUE;
     6e2:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6e6:	91 70       	andi	r25, 0x01	; 1
     6e8:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     6ec:	e0 91 b9 bd 	lds	r30, 0xBDB9	; 0x80bdb9 <__bss_end+0x82b1>
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	e8 54       	subi	r30, 0x48	; 72
     6f4:	f5 4c       	sbci	r31, 0xC5	; 197
     6f6:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     6f8:	e0 91 b8 bd 	lds	r30, 0xBDB8	; 0x80bdb8 <__bss_end+0x82b0>
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	e8 54       	subi	r30, 0x48	; 72
     700:	f5 4c       	sbci	r31, 0xC5	; 197
     702:	10 82       	st	Z, r1
     704:	09 c0       	rjmp	.+18     	; 0x718 <LanyardCode+0xf4>
        } else {
            lanyardState = FALSE;
     706:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     70a:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     70c:	28 f4       	brcc	.+10     	; 0x718 <LanyardCode+0xf4>
     70e:	7e df       	rcall	.-260    	; 0x60c <initLanyard>
                gameNow         = BASTET;
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
                return 0;
     716:	34 c0       	rjmp	.+104    	; 0x780 <LanyardCode+0x15c>
            }
        }
        lanyardPos++;
     718:	8f 5f       	subi	r24, 0xFF	; 255
     71a:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <lanyardPos>
        lanyardCnt++;            
     71e:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardCnt>
     722:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     724:	94 30       	cpi	r25, 0x04	; 4
     726:	18 f4       	brcc	.+6      	; 0x72e <LanyardCode+0x10a>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     728:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardCnt>
     72c:	29 c0       	rjmp	.+82     	; 0x780 <LanyardCode+0x15c>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     72e:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <lanyardCnt>
            if (lanyardState == TRUE) {
     732:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     736:	91 30       	cpi	r25, 0x01	; 1
     738:	e1 f4       	brne	.+56     	; 0x772 <LanyardCode+0x14e>
                if ((lanyardPos % 4) == 0) {
     73a:	98 2f       	mov	r25, r24
     73c:	93 70       	andi	r25, 0x03	; 3
     73e:	69 f4       	brne	.+26     	; 0x75a <LanyardCode+0x136>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     740:	e8 2f       	mov	r30, r24
     742:	e6 95       	lsr	r30
     744:	e6 95       	lsr	r30
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	e4 54       	subi	r30, 0x44	; 68
     74a:	f2 44       	sbci	r31, 0x42	; 66
     74c:	e5 81       	ldd	r30, Z+5	; 0x05
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     754:	e8 54       	subi	r30, 0x48	; 72
     756:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     758:	90 83       	st	Z, r25
     75a:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     75c:	89 f4       	brne	.+34     	; 0x780 <LanyardCode+0x15c>
     75e:	8b e7       	ldi	r24, 0x7B	; 123
     760:	b3 d6       	rcall	.+3430   	; 0x14c8 <UpdateState>
                    iLED[CAT]       = 0;
     762:	ec 2f       	mov	r30, r28
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	e8 54       	subi	r30, 0x48	; 72
     768:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     76a:	10 82       	st	Z, r1
     76c:	82 e4       	ldi	r24, 0x42	; 66
     76e:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     770:	03 c0       	rjmp	.+6      	; 0x778 <LanyardCode+0x154>
     772:	4c df       	rcall	.-360    	; 0x60c <initLanyard>
                effect = 0x21;
     774:	81 e2       	ldi	r24, 0x21	; 33
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     77c:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            }
        }
    }

    return 0;
}
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     786:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeHckrPos>
    mazePos = 0;
     78a:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazePos>
    mazeCnt = 0;
     78e:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
    mazeState = TRUE;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     798:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <inverted>
    effect = 0;
     79c:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     7a0:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
     7a4:	08 95       	ret

000007a6 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     7a6:	97 ff       	sbrs	r25, 7
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <showFieldStrength+0xa>
     7aa:	91 95       	neg	r25
     7ac:	81 95       	neg	r24
     7ae:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     7b0:	9c 01       	movw	r18, r24
     7b2:	22 0f       	add	r18, r18
     7b4:	33 1f       	adc	r19, r19
     7b6:	29 37       	cpi	r18, 0x79	; 121
     7b8:	31 05       	cpc	r19, r1
     7ba:	1c f0       	brlt	.+6      	; 0x7c2 <showFieldStrength+0x1c>
        gameNow = MAZE;
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <gameNow>

    if (gameNow == MAZE) {
     7c2:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <gameNow>
     7c6:	41 30       	cpi	r20, 0x01	; 1
     7c8:	21 f5       	brne	.+72     	; 0x812 <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     7ca:	28 37       	cpi	r18, 0x78	; 120
     7cc:	31 05       	cpc	r19, r1
     7ce:	1c f4       	brge	.+6      	; 0x7d6 <showFieldStrength+0x30>
            WingBar(0,0);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	1d c0       	rjmp	.+58     	; 0x810 <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     7d6:	88 37       	cpi	r24, 0x78	; 120
     7d8:	91 05       	cpc	r25, r1
     7da:	1c f4       	brge	.+6      	; 0x7e2 <showFieldStrength+0x3c>
            WingBar(1,1);
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	17 c0       	rjmp	.+46     	; 0x810 <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     7e2:	2c 32       	cpi	r18, 0x2C	; 44
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	34 07       	cpc	r19, r20
     7e8:	1c f4       	brge	.+6      	; 0x7f0 <showFieldStrength+0x4a>
            WingBar(2,2);
     7ea:	62 e0       	ldi	r22, 0x02	; 2
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	10 c0       	rjmp	.+32     	; 0x810 <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     7f0:	28 0f       	add	r18, r24
     7f2:	39 1f       	adc	r19, r25
     7f4:	28 35       	cpi	r18, 0x58	; 88
     7f6:	32 40       	sbci	r19, 0x02	; 2
     7f8:	1c f4       	brge	.+6      	; 0x800 <showFieldStrength+0x5a>
            WingBar(3,3);
     7fa:	63 e0       	ldi	r22, 0x03	; 3
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     800:	8c 32       	cpi	r24, 0x2C	; 44
     802:	91 40       	sbci	r25, 0x01	; 1
     804:	1c f4       	brge	.+6      	; 0x80c <showFieldStrength+0x66>
            WingBar(4,4);
     806:	64 e0       	ldi	r22, 0x04	; 4
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	02 c0       	rjmp	.+4      	; 0x810 <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     80c:	65 e0       	ldi	r22, 0x05	; 5
     80e:	85 e0       	ldi	r24, 0x05	; 5
     810:	3f c7       	rjmp	.+3710   	; 0x1690 <WingBar>
     812:	08 95       	ret

00000814 <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     818:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	71 f4       	brne	.+28     	; 0x83c <MagnetMaze+0x28>
     820:	6a e0       	ldi	r22, 0x0A	; 10
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <mazeLastActive>
     828:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <mazeLastActive+0x1>
     82c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <idleTimeout>
     830:	88 23       	and	r24, r24
     832:	21 f0       	breq	.+8      	; 0x83c <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     834:	a8 df       	rcall	.-176    	; 0x786 <initMaze>
        gameNow = TEXT;
     836:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     83a:	e5 c0       	rjmp	.+458    	; 0xa06 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     83c:	87 ef       	ldi	r24, 0xF7	; 247
     83e:	4e d6       	rcall	.+3228   	; 0x14dc <CheckState>
     840:	81 11       	cpse	r24, r1
     842:	e1 c0       	rjmp	.+450    	; 0xa06 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     844:	8d e7       	ldi	r24, 0x7D	; 125
     846:	4a d6       	rcall	.+3220   	; 0x14dc <CheckState>
     848:	81 11       	cpse	r24, r1
     84a:	dd c0       	rjmp	.+442    	; 0xa06 <MagnetMaze+0x1f2>
     84c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	08 f0       	brcs	.+2      	; 0x856 <MagnetMaze+0x42>
     854:	d8 c0       	rjmp	.+432    	; 0xa06 <MagnetMaze+0x1f2>
     856:	80 91 e1 3a 	lds	r24, 0x3AE1	; 0x803ae1 <calHall>
        return 0;

    if (calHall == 0)
     85a:	90 91 e2 3a 	lds	r25, 0x3AE2	; 0x803ae2 <calHall+0x1>
     85e:	89 2b       	or	r24, r25
     860:	41 f4       	brne	.+16     	; 0x872 <MagnetMaze+0x5e>
     862:	80 91 a9 3a 	lds	r24, 0x3AA9	; 0x803aa9 <adcHall>
        calHall = adcHall;
     866:	90 91 aa 3a 	lds	r25, 0x3AAA	; 0x803aaa <adcHall+0x1>
     86a:	80 93 e1 3a 	sts	0x3AE1, r24	; 0x803ae1 <calHall>
     86e:	90 93 e2 3a 	sts	0x3AE2, r25	; 0x803ae2 <calHall+0x1>
     872:	c0 91 a9 3a 	lds	r28, 0x3AA9	; 0x803aa9 <adcHall>

    int16_t valHall = adcHall - calHall;
     876:	d0 91 aa 3a 	lds	r29, 0x3AAA	; 0x803aaa <adcHall+0x1>
     87a:	80 91 e1 3a 	lds	r24, 0x3AE1	; 0x803ae1 <calHall>
     87e:	90 91 e2 3a 	lds	r25, 0x3AE2	; 0x803ae2 <calHall+0x1>
     882:	c8 1b       	sub	r28, r24
     884:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     886:	ce 01       	movw	r24, r28
     888:	8e df       	rcall	.-228    	; 0x7a6 <showFieldStrength>
     88a:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <curHallState>

    switch (curHallState) {
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	89 f0       	breq	.+34     	; 0x8b4 <MagnetMaze+0xa0>
     892:	18 f0       	brcs	.+6      	; 0x89a <MagnetMaze+0x86>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	c1 f0       	breq	.+48     	; 0x8c8 <MagnetMaze+0xb4>
     898:	1f c0       	rjmp	.+62     	; 0x8d8 <MagnetMaze+0xc4>
     89a:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     89c:	9e ef       	ldi	r25, 0xFE	; 254
     89e:	d9 07       	cpc	r29, r25
     8a0:	14 f4       	brge	.+4      	; 0x8a6 <MagnetMaze+0x92>
     8a2:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <MagnetMaze+0x9a>
     8a6:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     8a8:	d1 40       	sbci	r29, 0x01	; 1
     8aa:	5c f0       	brlt	.+22     	; 0x8c2 <MagnetMaze+0xae>
     8ac:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     8ae:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <newHallState>
     8b2:	12 c0       	rjmp	.+36     	; 0x8d8 <MagnetMaze+0xc4>
     8b4:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	d9 07       	cpc	r29, r25
     8ba:	c4 f7       	brge	.-16     	; 0x8ac <MagnetMaze+0x98>
     8bc:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     8be:	df 4f       	sbci	r29, 0xFF	; 255
     8c0:	84 f3       	brlt	.-32     	; 0x8a2 <MagnetMaze+0x8e>
     8c2:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <MagnetMaze+0xc4>
     8c8:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     8ca:	9e ef       	ldi	r25, 0xFE	; 254
     8cc:	d9 07       	cpc	r29, r25
     8ce:	4c f3       	brlt	.-46     	; 0x8a2 <MagnetMaze+0x8e>
     8d0:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     8d2:	d1 05       	cpc	r29, r1
     8d4:	b4 f3       	brlt	.-20     	; 0x8c2 <MagnetMaze+0xae>
     8d6:	ea cf       	rjmp	.-44     	; 0x8ac <MagnetMaze+0x98>
     8d8:	c0 91 aa bd 	lds	r28, 0xBDAA	; 0x80bdaa <__bss_end+0x82a2>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     8dc:	ec 2f       	mov	r30, r28
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <newHallState>
     8e4:	99 23       	and	r25, r25
     8e6:	19 f0       	breq	.+6      	; 0x8ee <MagnetMaze+0xda>
     8e8:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <MagnetMaze+0xdc>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	e8 54       	subi	r30, 0x48	; 72
     8f2:	f5 4c       	sbci	r31, 0xC5	; 197
     8f4:	20 83       	st	Z, r18
     8f6:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     8f8:	31 e0       	ldi	r19, 0x01	; 1
     8fa:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     8fe:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
     902:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     904:	09 f4       	brne	.+2      	; 0x908 <MagnetMaze+0xf4>
     906:	7f c0       	rjmp	.+254    	; 0xa06 <MagnetMaze+0x1f2>
     908:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     90c:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazeLastActive>
     910:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <mazeLastActive+0x1>
     914:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     918:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <newHallState>
     91c:	91 11       	cpse	r25, r1
     91e:	08 c0       	rjmp	.+16     	; 0x930 <MagnetMaze+0x11c>
     920:	88 23       	and	r24, r24
     922:	31 f0       	breq	.+12     	; 0x930 <MagnetMaze+0x11c>
     924:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	09 f4       	brne	.+2      	; 0x92c <MagnetMaze+0x118>
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inverted>
     930:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <curHallState>

        curHallState = newHallState;
     934:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     936:	09 f4       	brne	.+2      	; 0x93a <MagnetMaze+0x126>
     938:	66 c0       	rjmp	.+204    	; 0xa06 <MagnetMaze+0x1f2>
     93a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
            if (gameNow == TEXT)
     93e:	81 11       	cpse	r24, r1
     940:	01 c0       	rjmp	.+2      	; 0x944 <MagnetMaze+0x130>
                initMaze();
     942:	21 df       	rcall	.-446    	; 0x786 <initMaze>
     944:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     946:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
     94a:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     94e:	20 91 4c 38 	lds	r18, 0x384C	; 0x80384c <curHallState>
     952:	88 23       	and	r24, r24
     954:	11 f0       	breq	.+4      	; 0x95a <MagnetMaze+0x146>
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	28 27       	eor	r18, r24
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <mazePos>
     960:	e8 2f       	mov	r30, r24
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e8 50       	subi	r30, 0x08	; 8
     966:	f2 44       	sbci	r31, 0x42	; 66
     968:	40 81       	ld	r20, Z
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	24 17       	cp	r18, r20
     96e:	35 07       	cpc	r19, r21
     970:	91 f4       	brne	.+36     	; 0x996 <MagnetMaze+0x182>
     972:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     976:	91 70       	andi	r25, 0x01	; 1
     978:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     97c:	e0 91 b9 bd 	lds	r30, 0xBDB9	; 0x80bdb9 <__bss_end+0x82b1>
                iLED[EYE[R][L]] = 0;
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	e8 54       	subi	r30, 0x48	; 72
     984:	f5 4c       	sbci	r31, 0xC5	; 197
     986:	10 82       	st	Z, r1
     988:	e0 91 b8 bd 	lds	r30, 0xBDB8	; 0x80bdb8 <__bss_end+0x82b0>
                iLED[EYE[R][R]] = 0;
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e8 54       	subi	r30, 0x48	; 72
     990:	f5 4c       	sbci	r31, 0xC5	; 197
     992:	10 82       	st	Z, r1
     994:	02 c0       	rjmp	.+4      	; 0x99a <MagnetMaze+0x186>
     996:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     99a:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     99c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <mazePos>
     9a0:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeCnt>
            mazeCnt++;            
     9a4:	9f 5f       	subi	r25, 0xFF	; 255
     9a6:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     9a8:	18 f4       	brcc	.+6      	; 0x9b0 <MagnetMaze+0x19c>
     9aa:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     9ae:	2b c0       	rjmp	.+86     	; 0xa06 <MagnetMaze+0x1f2>
     9b0:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     9b4:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     9b8:	91 30       	cpi	r25, 0x01	; 1
     9ba:	e1 f4       	brne	.+56     	; 0x9f4 <MagnetMaze+0x1e0>
     9bc:	90 91 49 38 	lds	r25, 0x3849	; 0x803849 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     9c0:	e9 2f       	mov	r30, r25
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	e4 54       	subi	r30, 0x44	; 68
     9c6:	f2 44       	sbci	r31, 0x42	; 66
     9c8:	e6 81       	ldd	r30, Z+6	; 0x06
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     9d0:	e8 54       	subi	r30, 0x48	; 72
     9d2:	f5 4c       	sbci	r31, 0xC5	; 197
     9d4:	20 83       	st	Z, r18
     9d6:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     9d8:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     9dc:	82 31       	cpi	r24, 0x12	; 18
     9de:	99 f4       	brne	.+38     	; 0xa06 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     9e0:	8d e7       	ldi	r24, 0x7D	; 125
     9e2:	72 d5       	rcall	.+2788   	; 0x14c8 <UpdateState>
     9e4:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	e8 54       	subi	r30, 0x48	; 72
     9ea:	f5 4c       	sbci	r31, 0xC5	; 197
     9ec:	10 82       	st	Z, r1
                        effect = 0x42;
     9ee:	82 e4       	ldi	r24, 0x42	; 66
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     9f4:	c8 de       	rcall	.-624    	; 0x786 <initMaze>
     9f6:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    gameNow   = TEXT;
     9fa:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     a02:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
     a06:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <Setup>:
     a0e:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     a10:	df 93       	push	r29
    cli();
     a12:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     a14:	88 ed       	ldi	r24, 0xD8	; 216
     a16:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     a18:	c1 e0       	ldi	r28, 0x01	; 1
     a1a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     a1e:	8a e4       	ldi	r24, 0x4A	; 74
     a20:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     a24:	8c e7       	ldi	r24, 0x7C	; 124
     a26:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     a2a:	9f e3       	ldi	r25, 0x3F	; 63
     a2c:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     a30:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     a3a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     a3e:	80 68       	ori	r24, 0x80	; 128
     a40:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     a44:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     a48:	80 68       	ori	r24, 0x80	; 128
     a4a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     a4e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     a52:	80 68       	ori	r24, 0x80	; 128
     a54:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     a58:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     a5c:	80 68       	ori	r24, 0x80	; 128
     a5e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     a62:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     a66:	80 68       	ori	r24, 0x80	; 128
     a68:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     a6c:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     a70:	d2 e0       	ldi	r29, 0x02	; 2
     a72:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     a76:	2b e5       	ldi	r18, 0x5B	; 91
     a78:	31 e0       	ldi	r19, 0x01	; 1
     a7a:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a7e:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     a82:	80 ea       	ldi	r24, 0xA0	; 160
     a84:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     a88:	80 ec       	ldi	r24, 0xC0	; 192
     a8a:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a94:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a96:	1d ba       	out	0x1d, r1	; 29
    AUPOS = 0;     //Used as audio input/output buffer counter
     a98:	1e ba       	out	0x1e, r1	; 30
    GPIOR3 = 0;    //
     a9a:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a9c:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     aa6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     aaa:	87 e7       	ldi	r24, 0x77	; 119
     aac:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     ab0:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     ab4:	8b e0       	ldi	r24, 0x0B	; 11
     ab6:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     aba:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     ac4:	85 e0       	ldi	r24, 0x05	; 5
     ac6:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     aca:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     ad6:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     ada:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     ade:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     ae2:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     ae6:	8b e8       	ldi	r24, 0x8B	; 139
     ae8:	93 e0       	ldi	r25, 0x03	; 3
     aea:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     aee:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     af2:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     af6:	47 dc       	rcall	.-1906   	; 0x386 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     af8:	82 e1       	ldi	r24, 0x12	; 18
     afa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     afe:	80 e2       	ldi	r24, 0x20	; 32
     b00:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     b04:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     b08:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     b0c:	84 e4       	ldi	r24, 0x44	; 68
     b0e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     b18:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     b1c:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b20:	81 60       	ori	r24, 0x01	; 1
     b22:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     b26:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     b2a:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     b2e:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     b32:	82 e5       	ldi	r24, 0x52	; 82
     b34:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     b3e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     b42:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     b46:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     b4a:	81 60       	ori	r24, 0x01	; 1
     b4c:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     b50:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     b60:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     b64:	81 60       	ori	r24, 0x01	; 1
     b66:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     b6a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b6e:	80 fd       	sbrc	r24, 0
     b70:	fc cf       	rjmp	.-8      	; 0xb6a <Setup+0x15c>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     b72:	80 e3       	ldi	r24, 0x30	; 48
     b74:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     b78:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     b7c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b80:	82 fd       	sbrc	r24, 2
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <Setup+0x16e>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	98 e7       	ldi	r25, 0x78	; 120
     b88:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b8c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b90:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b94:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b98:	82 96       	adiw	r24, 0x22	; 34
     b9a:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <tmp16bit>
     b9e:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     ba2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ba6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     baa:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
     bae:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
     bb2:	28 17       	cp	r18, r24
     bb4:	39 07       	cpc	r19, r25
     bb6:	70 f4       	brcc	.+28     	; 0xbd4 <Setup+0x1c6>
     bb8:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bbc:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     bc0:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
     bc4:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <tmp16bit>
     bd0:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     bd4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bd8:	83 fd       	sbrc	r24, 3
     bda:	fc cf       	rjmp	.-8      	; 0xbd4 <Setup+0x1c6>
    RTC_CMP            = tmp16bit;                         //Button timing
     bdc:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
     be0:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
     be4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     be8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     bf8:	88 e0       	ldi	r24, 0x08	; 8
     bfa:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     bfe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c02:	80 fd       	sbrc	r24, 0
     c04:	fc cf       	rjmp	.-8      	; 0xbfe <Setup+0x1f0>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     c06:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     c10:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     c1a:	10 92 63 3a 	sts	0x3A63, r1	; 0x803a63 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     c1e:	83 e6       	ldi	r24, 0x63	; 99
     c20:	9a e3       	ldi	r25, 0x3A	; 58
     c22:	80 93 a7 3a 	sts	0x3AA7, r24	; 0x803aa7 <serTxAddr>
     c26:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <serTxAddr+0x1>

    sei();
     c2a:	78 94       	sei
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     c4e:	84 e4       	ldi	r24, 0x44	; 68
     c50:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     c54:	ec b3       	in	r30, 0x1c	; 28
     c56:	88 e0       	ldi	r24, 0x08	; 8
     c58:	e8 9f       	mul	r30, r24
     c5a:	f0 01       	movw	r30, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	e8 54       	subi	r30, 0x48	; 72
     c60:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     c62:	a8 e2       	ldi	r26, 0x28	; 40
     c64:	ba e0       	ldi	r27, 0x0A	; 10
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	81 91       	ld	r24, Z+
     c6a:	8d 93       	st	X+, r24
     c6c:	9a 95       	dec	r25
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     c70:	8b e0       	ldi	r24, 0x0B	; 11
     c72:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     c76:	8c b3       	in	r24, 0x1c	; 28
     c78:	83 30       	cpi	r24, 0x03	; 3
     c7a:	58 f4       	brcc	.+22     	; 0xc92 <__vector_8+0x60>
        asm(
     c7c:	8c b3       	in	r24, 0x1c	; 28
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <__vector_8+0x52>
     c82:	99 0f       	add	r25, r25
     c84:	8a 95       	dec	r24
     c86:	ea f7       	brpl	.-6      	; 0xc82 <__vector_8+0x50>
     c88:	99 b9       	out	0x09, r25	; 9
     c8a:	8c b3       	in	r24, 0x1c	; 28
     c8c:	83 95       	inc	r24
     c8e:	8c bb       	out	0x1c, r24	; 28
     c90:	0a c0       	rjmp	.+20     	; 0xca6 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c92:	8c b3       	in	r24, 0x1c	; 28
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	21 f4       	brne	.+8      	; 0xca0 <__vector_8+0x6e>
     c98:	2a 9a       	sbi	0x05, 2	; 5
     c9a:	83 95       	inc	r24
     c9c:	8c bb       	out	0x1c, r24	; 28
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <__vector_8+0x74>
     ca0:	2e 9a       	sbi	0x05, 6	; 5
     ca2:	88 27       	eor	r24, r24
     ca4:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     ca6:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     caa:	88 23       	and	r24, r24
     cac:	29 f0       	breq	.+10     	; 0xcb8 <__vector_8+0x86>
     cae:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <timeout_I2C>
     cb2:	81 50       	subi	r24, 0x01	; 1
     cb4:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	0f 90       	pop	r0
     cd0:	1f 90       	pop	r1
     cd2:	18 95       	reti

00000cd4 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
    if (*serTxAddr) {
     ce6:	e0 91 a7 3a 	lds	r30, 0x3AA7	; 0x803aa7 <serTxAddr>
     cea:	f0 91 a8 3a 	lds	r31, 0x3AA8	; 0x803aa8 <serTxAddr+0x1>
     cee:	80 81       	ld	r24, Z
     cf0:	88 23       	and	r24, r24
     cf2:	91 f0       	breq	.+36     	; 0xd18 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     cf4:	80 81       	ld	r24, Z
     cf6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     cfa:	80 91 a7 3a 	lds	r24, 0x3AA7	; 0x803aa7 <serTxAddr>
     cfe:	90 91 a8 3a 	lds	r25, 0x3AA8	; 0x803aa8 <serTxAddr+0x1>
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	80 93 a7 3a 	sts	0x3AA7, r24	; 0x803aa7 <serTxAddr>
     d08:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     d0c:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     d1e:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	0f 90       	pop	r0
     d36:	1f 90       	pop	r1
     d38:	18 95       	reti

00000d3a <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     d3a:	1f 92       	push	r1
     d3c:	0f 92       	push	r0
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	0f 92       	push	r0
     d42:	11 24       	eor	r1, r1
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	ef 93       	push	r30
     d50:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     d52:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d56:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d5a:	80 81       	ld	r24, Z
     d5c:	81 11       	cpse	r24, r1
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <__vector_14+0x36>
     d60:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     d64:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     d68:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d6c:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     d70:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d74:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d78:	80 81       	ld	r24, Z
     d7a:	88 23       	and	r24, r24
     d7c:	e1 f0       	breq	.+56     	; 0xdb6 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     d7e:	20 81       	ld	r18, Z
     d80:	40 91 a4 3a 	lds	r20, 0x3AA4	; 0x803aa4 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	2f 57       	subi	r18, 0x7F	; 127
     d88:	31 09       	sbc	r19, r1
     d8a:	42 9f       	mul	r20, r18
     d8c:	c0 01       	movw	r24, r0
     d8e:	43 9f       	mul	r20, r19
     d90:	90 0d       	add	r25, r0
     d92:	11 24       	eor	r1, r1
     d94:	89 2f       	mov	r24, r25
     d96:	99 0f       	add	r25, r25
     d98:	99 0b       	sbc	r25, r25
     d9a:	80 58       	subi	r24, 0x80	; 128
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     da2:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     da6:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     db0:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <__vector_14+0x88>
    } else {
        DAC0_DATA = 0x80;
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        auPlayDone = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	80 93 e0 3a 	sts	0x3AE0, r24	; 0x803ae0 <auPlayDone>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	0f 90       	pop	r0
     ddc:	1f 90       	pop	r1
     dde:	18 95       	reti

00000de0 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	8f 93       	push	r24
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
    if (serRxDone == 0){
     df0:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
     df4:	81 11       	cpse	r24, r1
     df6:	44 c0       	rjmp	.+136    	; 0xe80 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     df8:	ed b3       	in	r30, 0x1d	; 29
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     e00:	ed 59       	subi	r30, 0x9D	; 157
     e02:	f5 4c       	sbci	r31, 0xC5	; 197
     e04:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     e06:	ed b3       	in	r30, 0x1d	; 29
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ed 59       	subi	r30, 0x9D	; 157
     e0c:	f5 4c       	sbci	r31, 0xC5	; 197
     e0e:	80 81       	ld	r24, Z
     e10:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     e14:	ed b3       	in	r30, 0x1d	; 29
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ed 59       	subi	r30, 0x9D	; 157
     e1a:	f5 4c       	sbci	r31, 0xC5	; 197
     e1c:	80 81       	ld	r24, Z
     e1e:	8a 30       	cpi	r24, 0x0A	; 10
     e20:	39 f0       	breq	.+14     	; 0xe30 <__vector_27+0x50>
     e22:	ed b3       	in	r30, 0x1d	; 29
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ed 59       	subi	r30, 0x9D	; 157
     e28:	f5 4c       	sbci	r31, 0xC5	; 197
     e2a:	80 81       	ld	r24, Z
     e2c:	8d 30       	cpi	r24, 0x0D	; 13
     e2e:	49 f4       	brne	.+18     	; 0xe42 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     e30:	ed b3       	in	r30, 0x1d	; 29
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	ed 59       	subi	r30, 0x9D	; 157
     e36:	f5 4c       	sbci	r31, 0xC5	; 197
     e38:	10 82       	st	Z, r1
            serRxDone = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <serRxDone>
     e40:	1f c0       	rjmp	.+62     	; 0xe80 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     e42:	ed b3       	in	r30, 0x1d	; 29
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	ed 59       	subi	r30, 0x9D	; 157
     e48:	f5 4c       	sbci	r31, 0xC5	; 197
     e4a:	80 81       	ld	r24, Z
     e4c:	88 30       	cpi	r24, 0x08	; 8
     e4e:	39 f0       	breq	.+14     	; 0xe5e <__vector_27+0x7e>
     e50:	ed b3       	in	r30, 0x1d	; 29
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ed 59       	subi	r30, 0x9D	; 157
     e56:	f5 4c       	sbci	r31, 0xC5	; 197
     e58:	80 81       	ld	r24, Z
     e5a:	8f 37       	cpi	r24, 0x7F	; 127
     e5c:	59 f4       	brne	.+22     	; 0xe74 <__vector_27+0x94>
     e5e:	8d b3       	in	r24, 0x1d	; 29
     e60:	88 23       	and	r24, r24
     e62:	41 f0       	breq	.+16     	; 0xe74 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     e64:	ed b3       	in	r30, 0x1d	; 29
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	ed 59       	subi	r30, 0x9D	; 157
     e6a:	f5 4c       	sbci	r31, 0xC5	; 197
     e6c:	10 82       	st	Z, r1
            --RXCNT;
     e6e:	8d b3       	in	r24, 0x1d	; 29
     e70:	81 50       	subi	r24, 0x01	; 1
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     e74:	8d b3       	in	r24, 0x1d	; 29
     e76:	80 34       	cpi	r24, 0x40	; 64
     e78:	18 f4       	brcc	.+6      	; 0xe80 <__vector_27+0xa0>
     e7a:	8d b3       	in	r24, 0x1d	; 29
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     e80:	80 e8       	ldi	r24, 0x80	; 128
     e82:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	8f 91       	pop	r24
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	8f 93       	push	r24
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
    TCB0_CNT = 0;
     ea6:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     eaa:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     eb4:	e5 e0       	ldi	r30, 0x05	; 5
     eb6:	f8 e0       	ldi	r31, 0x08	; 8
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7d       	andi	r24, 0xDF	; 223
     ebc:	80 83       	st	Z, r24
};
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	8f 91       	pop	r24
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	8f 93       	push	r24
     eda:	9f 93       	push	r25
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     ee0:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <adc0Chg>
     ee4:	81 11       	cpse	r24, r1
     ee6:	19 c0       	rjmp	.+50     	; 0xf1a <__vector_20+0x4c>
        AUPOS = (AUPOS+1)&(AULEN-1);
     ee8:	8e b3       	in	r24, 0x1e	; 30
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	87 70       	andi	r24, 0x07	; 7
     eee:	8e bb       	out	0x1e, r24	; 30
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn[AUPOS]=ADC0_RESL;
     ef0:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ef4:	8e 31       	cpi	r24, 0x1E	; 30
     ef6:	49 f4       	brne	.+18     	; 0xf0a <__vector_20+0x3c>
     ef8:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     efc:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     f00:	80 93 e3 3a 	sts	0x3AE3, r24	; 0x803ae3 <adcTemp>
     f04:	90 93 e4 3a 	sts	0x3AE4, r25	; 0x803ae4 <adcTemp+0x1>
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <__vector_20+0x56>
     f0a:	ee b3       	in	r30, 0x1e	; 30
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f12:	e0 55       	subi	r30, 0x50	; 80
     f14:	f5 4c       	sbci	r31, 0xC5	; 197
     f16:	80 83       	st	Z, r24
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <__vector_20+0x56>
    } else --adc0Chg;
     f1a:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <adc0Chg>
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     f2a:	ff 91       	pop	r31
     f2c:	ef 91       	pop	r30
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     f4a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f4e:	81 11       	cpse	r24, r1
     f50:	0a c0       	rjmp	.+20     	; 0xf66 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     f52:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f56:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f5a:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <adcPhot>
     f5e:	90 93 ac 3a 	sts	0x3AAC, r25	; 0x803aac <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     f66:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	79 f4       	brne	.+30     	; 0xf8c <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     f6e:	88 e0       	ldi	r24, 0x08	; 8
     f70:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     f74:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f78:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f7c:	80 93 a9 3a 	sts	0x3AA9, r24	; 0x803aa9 <adcHall>
     f80:	90 93 aa 3a 	sts	0x3AAA, r25	; 0x803aaa <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f8a:	10 c0       	rjmp	.+32     	; 0xfac <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     f8c:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f90:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f94:	80 93 a5 3a 	sts	0x3AA5, r24	; 0x803aa5 <adcBtns>
     f98:	90 93 a6 3a 	sts	0x3AA6, r25	; 0x803aa6 <adcBtns+0x1>
        if (A1CNT == 15){
     f9c:	8f b3       	in	r24, 0x1f	; 31
     f9e:	8f 30       	cpi	r24, 0x0F	; 15
     fa0:	29 f4       	brne	.+10     	; 0xfac <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     fa2:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     fa6:	88 e0       	ldi	r24, 0x08	; 8
     fa8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     fac:	8f b3       	in	r24, 0x1f	; 31
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	99 27       	eor	r25, r25
     fb6:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     fde:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fe2:	81 ff       	sbrs	r24, 1
     fe4:	39 c0       	rjmp	.+114    	; 0x1058 <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     fe6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     fea:	8f 3f       	cpi	r24, 0xFF	; 255
     fec:	29 f0       	breq	.+10     	; 0xff8 <__vector_6+0x2c>
     fee:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     ff8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     ffc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1000:	82 96       	adiw	r24, 0x22	; 34
    1002:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <tmp16bit>
    1006:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
    100a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    100e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    1012:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
    1016:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
    101a:	28 17       	cp	r18, r24
    101c:	39 07       	cpc	r19, r25
    101e:	70 f4       	brcc	.+28     	; 0x103c <__vector_6+0x70>
    1020:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1024:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    1028:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
    102c:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
    1030:	82 1b       	sub	r24, r18
    1032:	93 0b       	sbc	r25, r19
    1034:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <tmp16bit>
    1038:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    103c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1040:	83 fd       	sbrc	r24, 3
    1042:	fc cf       	rjmp	.-8      	; 0x103c <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    1044:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <tmp16bit>
    1048:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <tmp16bit+0x1>
    104c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1050:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    1058:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <minuteMark>
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    108c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    1090:	8f 91       	pop	r24
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    109c:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10a0:	91 fd       	sbrc	r25, 1
    10a2:	fc cf       	rjmp	.-8      	; 0x109c <EERead>
    10a4:	fb 01       	movw	r30, r22
    10a6:	48 0f       	add	r20, r24

    while(size){
    10a8:	84 17       	cp	r24, r20
    10aa:	39 f0       	breq	.+14     	; 0x10ba <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    10ac:	a8 2f       	mov	r26, r24
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	bc 5e       	subi	r27, 0xEC	; 236
    10b2:	9c 91       	ld	r25, X
    10b4:	91 93       	st	Z+, r25
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	f7 cf       	rjmp	.-18     	; 0x10a8 <EERead+0xc>
        --size;
    }
}
    10ba:	08 95       	ret

000010bc <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    10bc:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    10be:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10c0:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    10c2:	44 23       	and	r20, r20
    10c4:	09 f1       	breq	.+66     	; 0x1108 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    10c6:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10ca:	51 fd       	sbrc	r21, 1
    10cc:	fc cf       	rjmp	.-8      	; 0x10c6 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    10ce:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    10d0:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    10d4:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    10d6:	58 2f       	mov	r21, r24
    10d8:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	db 01       	movw	r26, r22
    10e2:	11 97       	sbiw	r26, 0x01	; 1
    10e4:	ac 91       	ld	r26, X
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	fc 5e       	subi	r31, 0xEC	; 236
    10ea:	a0 83       	st	Z, r26
            --size;
    10ec:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10f0:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10f2:	5f 31       	cpi	r21, 0x1F	; 31
    10f4:	81 f7       	brne	.-32     	; 0x10d6 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    10f6:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10f8:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    10fc:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1100:	52 ff       	sbrs	r21, 2
    1102:	df cf       	rjmp	.-66     	; 0x10c2 <EEWrite+0x6>
    1104:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    1106:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret

0000110c <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    110c:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    110e:	9c 01       	movw	r18, r24
    1110:	2e 1b       	sub	r18, r30
    1112:	3f 0b       	sbc	r19, r31
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	48 9f       	mul	r20, r24
    1118:	a0 01       	movw	r20, r0
    111a:	11 24       	eor	r1, r1
    111c:	48 51       	subi	r20, 0x18	; 24
    111e:	52 44       	sbci	r21, 0x42	; 66
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    1120:	66 23       	and	r22, r22
    1122:	69 f0       	breq	.+26     	; 0x113e <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1124:	df 01       	movw	r26, r30
    1126:	a2 0f       	add	r26, r18
    1128:	b3 1f       	adc	r27, r19
    112a:	a7 70       	andi	r26, 0x07	; 7
    112c:	bb 27       	eor	r27, r27
    112e:	a4 0f       	add	r26, r20
    1130:	b5 1f       	adc	r27, r21
    1132:	80 81       	ld	r24, Z
    1134:	9c 91       	ld	r25, X
    1136:	98 27       	eor	r25, r24
    1138:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    113a:	61 50       	subi	r22, 0x01	; 1
    113c:	f1 cf       	rjmp	.-30     	; 0x1120 <DecryptData+0x14>
    }
}
    113e:	08 95       	ret

00001140 <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	00 d0       	rcall	.+0      	; 0x1156 <ExtEERead+0x16>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	d6 2e       	mov	r13, r22
    115c:	c4 2e       	mov	r12, r20
    115e:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    1160:	7c 01       	movw	r14, r24
    1162:	e8 94       	clt
    1164:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    1166:	f9 82       	std	Y+1, r15	; 0x01
    1168:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    116a:	06 2f       	mov	r16, r22
    116c:	42 e0       	ldi	r20, 0x02	; 2
    116e:	be 01       	movw	r22, r28
    1170:	6f 5f       	subi	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	80 e5       	ldi	r24, 0x50	; 80
    1176:	05 da       	rcall	.-3062   	; 0x582 <I2C_read_bytes>
    1178:	18 2f       	mov	r17, r24
    if (error) return error;
    117a:	81 11       	cpse	r24, r1
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <ExtEERead+0x48>
    DecryptData(offset, length, type, data);
    117e:	95 01       	movw	r18, r10
    1180:	4c 2d       	mov	r20, r12
    1182:	6d 2d       	mov	r22, r13
    1184:	c7 01       	movw	r24, r14
    1186:	c2 df       	rcall	.-124    	; 0x110c <DecryptData>
    return 0;
}
    1188:	81 2f       	mov	r24, r17
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	bf 90       	pop	r11
    11a0:	af 90       	pop	r10
    11a2:	08 95       	ret

000011a4 <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    11a4:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    11a8:	22 23       	and	r18, r18
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <SerSend+0x1e>
        serTxAddr = addr;
    11ac:	80 93 a7 3a 	sts	0x3AA7, r24	; 0x803aa7 <serTxAddr>
    11b0:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <serTxAddr+0x1>
        serTxDone = 0;
    11b4:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	08 95       	ret
    } else return 1;    //Error: Still sending data
    11c2:	81 e0       	ldi	r24, 0x01	; 1
};
    11c4:	08 95       	ret

000011c6 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    11c6:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    11c8:	81 11       	cpse	r24, r1
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <SerSpeed+0x8>
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	82 1b       	sub	r24, r18
    11d4:	91 09       	sbc	r25, r1
    11d6:	98 2f       	mov	r25, r24
    11d8:	88 27       	eor	r24, r24
    11da:	81 50       	subi	r24, 0x01	; 1
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    11e2:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    11e6:	08 95       	ret

000011e8 <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11e8:	82 e1       	ldi	r24, 0x12	; 18
    11ea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    11ee:	e0 e0       	ldi	r30, 0x00	; 0
    11f0:	f6 e0       	ldi	r31, 0x06	; 6
    11f2:	80 81       	ld	r24, Z
    11f4:	8b 7f       	andi	r24, 0xFB	; 251
    11f6:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    11f8:	8e e1       	ldi	r24, 0x1E	; 30
    11fa:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    1204:	08 95       	ret

00001206 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    1206:	82 e2       	ldi	r24, 0x22	; 34
    1208:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    120c:	e0 e0       	ldi	r30, 0x00	; 0
    120e:	f6 e0       	ldi	r31, 0x06	; 6
    1210:	80 81       	ld	r24, Z
    1212:	84 60       	ori	r24, 0x04	; 4
    1214:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    1222:	08 95       	ret

00001224 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1224:	80 91 a5 3a 	lds	r24, 0x3AA5	; 0x803aa5 <adcBtns>
    1228:	90 91 a6 3a 	lds	r25, 0x3AA6	; 0x803aa6 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    122c:	24 e0       	ldi	r18, 0x04	; 4
    122e:	96 95       	lsr	r25
    1230:	87 95       	ror	r24
    1232:	2a 95       	dec	r18
    1234:	e1 f7       	brne	.-8      	; 0x122e <CheckButtons+0xa>
    1236:	99 27       	eor	r25, r25
    1238:	80 36       	cpi	r24, 0x60	; 96
    123a:	91 05       	cpc	r25, r1
    123c:	40 f4       	brcc	.+16     	; 0x124e <CheckButtons+0x2a>
    123e:	8f 34       	cpi	r24, 0x4F	; 79
    1240:	91 05       	cpc	r25, r1
    1242:	88 f4       	brcc	.+34     	; 0x1266 <CheckButtons+0x42>
    1244:	c0 97       	sbiw	r24, 0x30	; 48
    1246:	09 97       	sbiw	r24, 0x09	; 9
    1248:	90 f4       	brcc	.+36     	; 0x126e <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	11 c0       	rjmp	.+34     	; 0x1270 <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    124e:	85 37       	cpi	r24, 0x75	; 117
    1250:	91 05       	cpc	r25, r1
    1252:	68 f0       	brcs	.+26     	; 0x126e <CheckButtons+0x4a>
    1254:	8e 38       	cpi	r24, 0x8E	; 142
    1256:	91 05       	cpc	r25, r1
    1258:	40 f0       	brcs	.+16     	; 0x126a <CheckButtons+0x46>
    125a:	8e 59       	subi	r24, 0x9E	; 158
    125c:	91 09       	sbc	r25, r1
    125e:	81 97       	sbiw	r24, 0x21	; 33
    1260:	30 f4       	brcc	.+12     	; 0x126e <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    1262:	90 e0       	ldi	r25, 0x00	; 0
            break;
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    1266:	93 e0       	ldi	r25, 0x03	; 3
            break;
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    126a:	91 e0       	ldi	r25, 0x01	; 1
            break;
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    126e:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    1270:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <previousValue.3901>
    1274:	98 17       	cp	r25, r24
    1276:	19 f0       	breq	.+6      	; 0x127e <CheckButtons+0x5a>
            previousValue = button;
    1278:	90 93 24 38 	sts	0x3824, r25	; 0x803824 <previousValue.3901>
            return 0xFF;
    127c:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    127e:	08 95       	ret

00001280 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    1280:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <state.3911>
    1284:	90 91 23 38 	lds	r25, 0x3823	; 0x803823 <state.3911+0x1>
    1288:	9c 01       	movw	r18, r24
    128a:	32 2f       	mov	r19, r18
    128c:	22 27       	eor	r18, r18
    128e:	32 95       	swap	r19
    1290:	33 0f       	add	r19, r19
    1292:	30 7e       	andi	r19, 0xE0	; 224
    1294:	82 27       	eor	r24, r18
    1296:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    1298:	9c 01       	movw	r18, r24
    129a:	23 2f       	mov	r18, r19
    129c:	33 27       	eor	r19, r19
    129e:	26 95       	lsr	r18
    12a0:	82 27       	eor	r24, r18
    12a2:	93 27       	eor	r25, r19
    state ^= (state << 7);
    12a4:	9c 01       	movw	r18, r24
    12a6:	36 95       	lsr	r19
    12a8:	32 2f       	mov	r19, r18
    12aa:	22 27       	eor	r18, r18
    12ac:	37 95       	ror	r19
    12ae:	27 95       	ror	r18
    12b0:	82 27       	eor	r24, r18
    12b2:	93 27       	eor	r25, r19
    12b4:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <state.3911>
    12b8:	90 93 23 38 	sts	0x3823, r25	; 0x803823 <state.3911+0x1>
    return (state & 0xff);
}
    12bc:	08 95       	ret

000012be <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	7b 01       	movw	r14, r22
    12ce:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    12d0:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    12d4:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    12d8:	e8 2f       	mov	r30, r24
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	e7 70       	andi	r30, 0x07	; 7
    12e0:	ff 27       	eor	r31, r31
    12e2:	eb 5d       	subi	r30, 0xDB	; 219
    12e4:	f7 4c       	sbci	r31, 0xC7	; 199
    12e6:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    12e8:	cb df       	rcall	.-106    	; 0x1280 <lfsr>
    12ea:	8d 21       	and	r24, r13
    12ec:	c8 0f       	add	r28, r24
    12ee:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    12f0:	c7 df       	rcall	.-114    	; 0x1280 <lfsr>
    12f2:	8d 21       	and	r24, r13
    12f4:	c8 1b       	sub	r28, r24
    12f6:	d1 09       	sbc	r29, r1
    12f8:	0c 17       	cp	r16, r28
    12fa:	1d 07       	cpc	r17, r29
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <floatSpeed+0x42>
    12fe:	e8 01       	movw	r28, r16
    1300:	c7 01       	movw	r24, r14
    1302:	ec 16       	cp	r14, r28
    1304:	fd 06       	cpc	r15, r29
    1306:	08 f4       	brcc	.+2      	; 0x130a <floatSpeed+0x4c>
    1308:	ce 01       	movw	r24, r28
    130a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    130e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1312:	df 91       	pop	r29
}
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	08 95       	ret

00001322 <floatAround>:
    1322:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	c8 2f       	mov	r28, r24
    132c:	d4 2f       	mov	r29, r20
    132e:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1330:	e6 2f       	mov	r30, r22
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	31 97       	sbiw	r30, 0x01	; 1
    1336:	e7 70       	andi	r30, 0x07	; 7
    1338:	ff 27       	eor	r31, r31
    133a:	eb 5d       	subi	r30, 0xDB	; 219
    133c:	f7 4c       	sbci	r31, 0xC7	; 199
    133e:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    1340:	9f df       	rcall	.-194    	; 0x1280 <lfsr>
    1342:	81 23       	and	r24, r17
    1344:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1346:	9c df       	rcall	.-200    	; 0x1280 <lfsr>
    1348:	81 23       	and	r24, r17
    134a:	c8 1b       	sub	r28, r24
    134c:	8c 2f       	mov	r24, r28
    134e:	00 23       	and	r16, r16
    if (max){
    1350:	41 f0       	breq	.+16     	; 0x1362 <floatAround+0x40>
    1352:	9c 2f       	mov	r25, r28
    1354:	0c 17       	cp	r16, r28
    1356:	08 f4       	brcc	.+2      	; 0x135a <floatAround+0x38>
    1358:	90 2f       	mov	r25, r16
    135a:	8d 2f       	mov	r24, r29
    135c:	d9 17       	cp	r29, r25
    135e:	08 f4       	brcc	.+2      	; 0x1362 <floatAround+0x40>
    1360:	89 2f       	mov	r24, r25
    1362:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	8d 17       	cp	r24, r29
    1368:	10 f0       	brcs	.+4      	; 0x136e <floatAround+0x4c>
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	2d 2f       	mov	r18, r29
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	24 23       	and	r18, r20
    1374:	35 23       	and	r19, r21
    1376:	23 2b       	or	r18, r19
    1378:	09 f0       	breq	.+2      	; 0x137c <floatAround+0x5a>
    137a:	8d 2f       	mov	r24, r29
    137c:	df 91       	pop	r29

    return sample;
}
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <SaveGameState>:
    1386:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    1388:	df 92       	push	r13
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	64 97       	sbiw	r28, 0x14	; 20
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    139e:	44 e1       	ldi	r20, 0x14	; 20
    13a0:	be 01       	movw	r22, r28
    13a2:	6f 5f       	subi	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	79 de       	rcall	.-782    	; 0x109c <EERead>
    13aa:	8f e4       	ldi	r24, 0x4F	; 79
    13ac:	c8 2e       	mov	r12, r24
    13ae:	8a e3       	ldi	r24, 0x3A	; 58
    13b0:	d8 2e       	mov	r13, r24
    13b2:	8e 01       	movw	r16, r28
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    13b8:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    13ba:	f8 01       	movw	r30, r16
    13bc:	81 91       	ld	r24, Z+
    13be:	8f 01       	movw	r16, r30
    13c0:	f6 01       	movw	r30, r12
    13c2:	90 81       	ld	r25, Z
    13c4:	98 13       	cpse	r25, r24
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    13c8:	f3 94       	inc	r15
    13ca:	ff ef       	ldi	r31, 0xFF	; 255
    13cc:	cf 1a       	sub	r12, r31
    13ce:	df 0a       	sbc	r13, r31
    13d0:	80 e1       	ldi	r24, 0x10	; 16
    13d2:	f8 12       	cpse	r15, r24
    13d4:	f2 cf       	rjmp	.-28     	; 0x13ba <SaveGameState+0x34>
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	b6 01       	movw	r22, r12
    13dc:	8f 2d       	mov	r24, r15
    13de:	6e de       	rcall	.-804    	; 0x10bc <EEWrite>
    13e0:	88 23       	and	r24, r24
    13e2:	91 f3       	breq	.-28     	; 0x13c8 <SaveGameState+0x42>
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	36 c0       	rjmp	.+108    	; 0x1454 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    13e8:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    13ec:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    13f0:	30 93 5f 3a 	sts	0x3A5F, r19	; 0x803a5f <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    13f4:	20 93 60 3a 	sts	0x3A60, r18	; 0x803a60 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    13f8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    13fc:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    1400:	90 93 61 3a 	sts	0x3A61, r25	; 0x803a61 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    1404:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    1408:	89 89       	ldd	r24, Y+17	; 0x11
    140a:	9a 89       	ldd	r25, Y+18	; 0x12
    140c:	98 27       	eor	r25, r24
    140e:	89 27       	eor	r24, r25
    1410:	98 27       	eor	r25, r24
    1412:	28 17       	cp	r18, r24
    1414:	39 07       	cpc	r19, r25
    1416:	69 f4       	brne	.+26     	; 0x1432 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	98 27       	eor	r25, r24
    141e:	89 27       	eor	r24, r25
    1420:	98 27       	eor	r25, r24
    1422:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    1426:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	49 f4       	brne	.+18     	; 0x1442 <SaveGameState+0xbc>
    1430:	10 c0       	rjmp	.+32     	; 0x1452 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1432:	42 e0       	ldi	r20, 0x02	; 2
    1434:	6f e5       	ldi	r22, 0x5F	; 95
    1436:	7a e3       	ldi	r23, 0x3A	; 58
    1438:	80 e1       	ldi	r24, 0x10	; 16
    143a:	40 de       	rcall	.-896    	; 0x10bc <EEWrite>
    143c:	88 23       	and	r24, r24
    143e:	61 f3       	breq	.-40     	; 0x1418 <SaveGameState+0x92>
    1440:	d1 cf       	rjmp	.-94     	; 0x13e4 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1442:	42 e0       	ldi	r20, 0x02	; 2
    1444:	61 e6       	ldi	r22, 0x61	; 97
    1446:	7a e3       	ldi	r23, 0x3A	; 58
    1448:	82 e1       	ldi	r24, 0x12	; 18
    144a:	38 de       	rcall	.-912    	; 0x10bc <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	81 11       	cpse	r24, r1
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <SaveGameState+0xce>
    1452:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1454:	89 2f       	mov	r24, r25
    1456:	64 96       	adiw	r28, 0x14	; 20
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	08 95       	ret

0000146c <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    146c:	e8 2f       	mov	r30, r24
    146e:	ef 77       	andi	r30, 0x7F	; 127
    1470:	e6 95       	lsr	r30
    1472:	e6 95       	lsr	r30
    1474:	e6 95       	lsr	r30
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e1 5b       	subi	r30, 0xB1	; 177
    147a:	f5 4c       	sbci	r31, 0xC5	; 197
    147c:	20 81       	ld	r18, Z
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	87 70       	andi	r24, 0x07	; 7
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <ReadStatusBit+0x1e>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <ReadStatusBit+0x1a>
    148e:	ca 01       	movw	r24, r20
}
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	08 95       	ret

00001494 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    1494:	e8 2f       	mov	r30, r24
    1496:	ef 77       	andi	r30, 0x7F	; 127
    1498:	e6 95       	lsr	r30
    149a:	e6 95       	lsr	r30
    149c:	e6 95       	lsr	r30
    149e:	28 2f       	mov	r18, r24
    14a0:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	e1 5b       	subi	r30, 0xB1	; 177
    14a6:	f5 4c       	sbci	r31, 0xC5	; 197
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <WriteStatusBit+0x1c>
    14ae:	88 0f       	add	r24, r24
    14b0:	2a 95       	dec	r18
    14b2:	ea f7       	brpl	.-6      	; 0x14ae <WriteStatusBit+0x1a>
    14b4:	66 23       	and	r22, r22
    14b6:	19 f0       	breq	.+6      	; 0x14be <WriteStatusBit+0x2a>
    14b8:	90 81       	ld	r25, Z
    14ba:	89 2b       	or	r24, r25
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    14be:	80 95       	com	r24
    14c0:	90 81       	ld	r25, Z
    14c2:	89 23       	and	r24, r25
    14c4:	80 83       	st	Z, r24
    14c6:	08 95       	ret

000014c8 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    14c8:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    14ca:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    14cc:	31 f0       	breq	.+12     	; 0x14da <UpdateState+0x12>
        if (clearBit) {
    14ce:	97 ff       	sbrs	r25, 7
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	dd cf       	rjmp	.-70     	; 0x1494 <WriteStatusBit>
    14da:	08 95       	ret

000014dc <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    14dc:	cf 93       	push	r28
    14de:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    14e0:	8f 77       	andi	r24, 0x7F	; 127
    14e2:	c4 df       	rcall	.-120    	; 0x146c <ReadStatusBit>
    14e4:	2c 2f       	mov	r18, r28
    14e6:	22 1f       	adc	r18, r18
    14e8:	22 27       	eor	r18, r18
    14ea:	22 1f       	adc	r18, r18
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	81 11       	cpse	r24, r1
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <CheckState+0x18>
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    14f4:	82 2f       	mov	r24, r18
    14f6:	89 27       	eor	r24, r25
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    14fc:	e3 e0       	ldi	r30, 0x03	; 3
    14fe:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    1502:	91 91       	ld	r25, Z+
    1504:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    1506:	ed 30       	cpi	r30, 0x0D	; 13
    1508:	91 e1       	ldi	r25, 0x11	; 17
    150a:	f9 07       	cpc	r31, r25
    150c:	d1 f7       	brne	.-12     	; 0x1502 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    150e:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	98 0f       	add	r25, r24
    1514:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <whoami>
    return id;
}
    1518:	08 95       	ret

0000151a <Reset>:

void Reset(){
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    151e:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1520:	8a e3       	ldi	r24, 0x3A	; 58
    1522:	e3 36       	cpi	r30, 0x63	; 99
    1524:	f8 07       	cpc	r31, r24
    1526:	d9 f7       	brne	.-10     	; 0x151e <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1528:	e9 df       	rcall	.-46     	; 0x14fc <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    152a:	81 11       	cpse	r24, r1
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    152e:	80 91 5c 3a 	lds	r24, 0x3A5C	; 0x803a5c <gameState+0xd>
    1532:	80 64       	ori	r24, 0x40	; 64
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	31 f4       	brne	.+12     	; 0x1546 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    153a:	80 91 5c 3a 	lds	r24, 0x3A5C	; 0x803a5c <gameState+0xd>
    153e:	80 68       	ori	r24, 0x80	; 128
    1540:	80 93 5c 3a 	sts	0x3A5C, r24	; 0x803a5c <gameState+0xd>
    1544:	0d c0       	rjmp	.+26     	; 0x1560 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	21 f4       	brne	.+8      	; 0x1552 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    154a:	80 91 5d 3a 	lds	r24, 0x3A5D	; 0x803a5d <gameState+0xe>
    154e:	81 60       	ori	r24, 0x01	; 1
    1550:	05 c0       	rjmp	.+10     	; 0x155c <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	29 f4       	brne	.+10     	; 0x1560 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1556:	80 91 5d 3a 	lds	r24, 0x3A5D	; 0x803a5d <gameState+0xe>
    155a:	82 60       	ori	r24, 0x02	; 2
    155c:	80 93 5d 3a 	sts	0x3A5D, r24	; 0x803a5d <gameState+0xe>
    1560:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <gameState>
    1564:	81 60       	ori	r24, 0x01	; 1
    1566:	80 93 4f 3a 	sts	0x3A4F, r24	; 0x803a4f <gameState>
    156a:	08 95       	ret

0000156c <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1570:	44 e1       	ldi	r20, 0x14	; 20
    1572:	6f e4       	ldi	r22, 0x4F	; 79
    1574:	7a e3       	ldi	r23, 0x3A	; 58
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	91 dd       	rcall	.-1246   	; 0x109c <EERead>
    157a:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    157c:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    157e:	8c 2f       	mov	r24, r28
    1580:	75 df       	rcall	.-278    	; 0x146c <ReadStatusBit>
    1582:	d8 0f       	add	r29, r24
    1584:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    1586:	c2 37       	cpi	r28, 0x72	; 114
    1588:	d1 f7       	brne	.-12     	; 0x157e <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    158a:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    158c:	11 f0       	breq	.+4      	; 0x1592 <LoadGameState+0x26>
    158e:	c5 df       	rcall	.-118    	; 0x151a <Reset>
    } else getID();
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <LoadGameState+0x28>
    1592:	b4 df       	rcall	.-152    	; 0x14fc <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    1594:	80 91 5f 3a 	lds	r24, 0x3A5F	; 0x803a5f <gameState+0x10>
    1598:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <gameState+0x11>
    159c:	98 27       	eor	r25, r24
    159e:	89 27       	eor	r24, r25
    15a0:	98 27       	eor	r25, r24
    15a2:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    15a6:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    15aa:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <gameState+0x12>
    15ae:	90 91 62 3a 	lds	r25, 0x3A62	; 0x803a62 <gameState+0x13>
    15b2:	98 27       	eor	r25, r24
    15b4:	89 27       	eor	r24, r25
    15b6:	98 27       	eor	r25, r24
    15b8:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    15bc:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    15c6:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    15c8:	86 e7       	ldi	r24, 0x76	; 118
    15ca:	88 df       	rcall	.-240    	; 0x14dc <CheckState>
    15cc:	c8 2f       	mov	r28, r24
    15ce:	88 23       	and	r24, r24
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    15d2:	e0 91 ad bd 	lds	r30, 0xBDAD	; 0x80bdad <__bss_end+0x82a5>
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	e8 54       	subi	r30, 0x48	; 72
    15da:	f5 4c       	sbci	r31, 0xC5	; 197
    15dc:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    15de:	e0 91 ac bd 	lds	r30, 0xBDAC	; 0x80bdac <__bss_end+0x82a4>
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15e8:	e8 54       	subi	r30, 0x48	; 72
    15ea:	f5 4c       	sbci	r31, 0xC5	; 197
    15ec:	80 83       	st	Z, r24
        return 1;
    15ee:	c1 e0       	ldi	r28, 0x01	; 1
    15f0:	4c c0       	rjmp	.+152    	; 0x168a <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    15f2:	85 e7       	ldi	r24, 0x75	; 117
    15f4:	73 df       	rcall	.-282    	; 0x14dc <CheckState>
    15f6:	88 23       	and	r24, r24
    15f8:	59 f1       	breq	.+86     	; 0x1650 <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    15fa:	e0 91 ad bd 	lds	r30, 0xBDAD	; 0x80bdad <__bss_end+0x82a5>
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1604:	e8 54       	subi	r30, 0x48	; 72
    1606:	f5 4c       	sbci	r31, 0xC5	; 197
    1608:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    160a:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <cooledDown.3970>
    160e:	88 23       	and	r24, r24
    1610:	79 f0       	breq	.+30     	; 0x1630 <HotSummer+0x6a>
    1612:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1616:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    161a:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    161e:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1622:	80 96       	adiw	r24, 0x20	; 32
    1624:	28 17       	cp	r18, r24
    1626:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1628:	18 f0       	brcs	.+6      	; 0x1630 <HotSummer+0x6a>
    162a:	86 e7       	ldi	r24, 0x76	; 118
    162c:	4d df       	rcall	.-358    	; 0x14c8 <UpdateState>
            return 0;
    162e:	2d c0       	rjmp	.+90     	; 0x168a <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1630:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1634:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    1638:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    163c:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1640:	08 96       	adiw	r24, 0x08	; 8
    1642:	82 17       	cp	r24, r18
    1644:	93 07       	cpc	r25, r19
    1646:	08 f1       	brcs	.+66     	; 0x168a <HotSummer+0xc4>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <cooledDown.3970>
    164e:	1d c0       	rjmp	.+58     	; 0x168a <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1650:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1654:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    1658:	89 2b       	or	r24, r25
    165a:	41 f4       	brne	.+16     	; 0x166c <HotSummer+0xa6>
    165c:	80 91 e3 3a 	lds	r24, 0x3AE3	; 0x803ae3 <adcTemp>
    1660:	90 91 e4 3a 	lds	r25, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1664:	80 93 ae 3a 	sts	0x3AAE, r24	; 0x803aae <calTemp>
    1668:	90 93 af 3a 	sts	0x3AAF, r25	; 0x803aaf <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    166c:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <calTemp>
    1670:	90 91 af 3a 	lds	r25, 0x3AAF	; 0x803aaf <calTemp+0x1>
    1674:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    1678:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    167c:	80 96       	adiw	r24, 0x20	; 32
    167e:	28 17       	cp	r18, r24
    1680:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    1682:	18 f0       	brcs	.+6      	; 0x168a <HotSummer+0xc4>
    1684:	85 e7       	ldi	r24, 0x75	; 117
    1686:	20 df       	rcall	.-448    	; 0x14c8 <UpdateState>
        }
    }
    return 0;
    1688:	c0 e0       	ldi	r28, 0x00	; 0
}
    168a:	8c 2f       	mov	r24, r28
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    1690:	ee ea       	ldi	r30, 0xAE	; 174
    1692:	fd eb       	ldi	r31, 0xBD	; 189
    for (int8_t i=0; i<5; i++) {
    1694:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    1696:	a5 81       	ldd	r26, Z+5	; 0x05
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    169a:	98 17       	cp	r25, r24
    169c:	34 f4       	brge	.+12     	; 0x16aa <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    169e:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    16a2:	a8 54       	subi	r26, 0x48	; 72
    16a4:	b5 4c       	sbci	r27, 0xC5	; 197
    16a6:	2c 93       	st	X, r18
    16a8:	03 c0       	rjmp	.+6      	; 0x16b0 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    16aa:	a8 54       	subi	r26, 0x48	; 72
    16ac:	b5 4c       	sbci	r27, 0xC5	; 197
    16ae:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    16b0:	a0 81       	ld	r26, Z
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    16b4:	96 17       	cp	r25, r22
    16b6:	34 f4       	brge	.+12     	; 0x16c4 <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    16b8:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    16bc:	a8 54       	subi	r26, 0x48	; 72
    16be:	b5 4c       	sbci	r27, 0xC5	; 197
    16c0:	2c 93       	st	X, r18
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    16c4:	a8 54       	subi	r26, 0x48	; 72
    16c6:	b5 4c       	sbci	r27, 0xC5	; 197
    16c8:	1c 92       	st	X, r1
    16ca:	9f 5f       	subi	r25, 0xFF	; 255
    16cc:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    16ce:	95 30       	cpi	r25, 0x05	; 5
    16d0:	11 f7       	brne	.-60     	; 0x1696 <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    16d2:	08 95       	ret

000016d4 <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    16d4:	a8 eb       	ldi	r26, 0xB8	; 184
    16d6:	bd eb       	ldi	r27, 0xBD	; 189
    16d8:	ec 91       	ld	r30, X
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	e8 54       	subi	r30, 0x48	; 72
    16de:	f5 4c       	sbci	r31, 0xC5	; 197
    16e0:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16e2:	12 96       	adiw	r26, 0x02	; 2
    16e4:	ec 91       	ld	r30, X
    16e6:	12 97       	sbiw	r26, 0x02	; 2
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	e8 54       	subi	r30, 0x48	; 72
    16ec:	f5 4c       	sbci	r31, 0xC5	; 197
    16ee:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	ec 91       	ld	r30, X
    16f4:	11 97       	sbiw	r26, 0x01	; 1
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	e8 54       	subi	r30, 0x48	; 72
    16fa:	f5 4c       	sbci	r31, 0xC5	; 197
    16fc:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16fe:	13 96       	adiw	r26, 0x03	; 3
    1700:	ec 91       	ld	r30, X
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	e8 54       	subi	r30, 0x48	; 72
    1706:	f5 4c       	sbci	r31, 0xC5	; 197
    1708:	60 83       	st	Z, r22
    170a:	08 95       	ret

0000170c <GenerateBlinks>:
    }
}

void GenerateBlinks(){
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1718:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    171c:	88 23       	and	r24, r24
    171e:	29 f0       	breq	.+10     	; 0x172a <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    1720:	80 e4       	ldi	r24, 0x40	; 64
    1722:	dc de       	rcall	.-584    	; 0x14dc <CheckState>
    1724:	81 11       	cpse	r24, r1
    1726:	24 c0       	rjmp	.+72     	; 0x1770 <GenerateBlinks+0x64>
    1728:	50 c0       	rjmp	.+160    	; 0x17ca <GenerateBlinks+0xbe>
    172a:	cc eb       	ldi	r28, 0xBC	; 188
    172c:	dd eb       	ldi	r29, 0xBD	; 189
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    172e:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1730:	81 2f       	mov	r24, r17
    1732:	d4 de       	rcall	.-600    	; 0x14dc <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    1734:	ee 81       	ldd	r30, Y+6	; 0x06
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1738:	88 23       	and	r24, r24
    173a:	59 f0       	breq	.+22     	; 0x1752 <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    173c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1740:	e8 54       	subi	r30, 0x48	; 72
    1742:	f5 4c       	sbci	r31, 0xC5	; 197
    1744:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    1746:	e8 81       	ld	r30, Y
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	e8 54       	subi	r30, 0x48	; 72
    174c:	f5 4c       	sbci	r31, 0xC5	; 197
    174e:	10 82       	st	Z, r1
    1750:	0a c0       	rjmp	.+20     	; 0x1766 <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    1752:	e8 54       	subi	r30, 0x48	; 72
    1754:	f5 4c       	sbci	r31, 0xC5	; 197
    1756:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    1758:	e8 81       	ld	r30, Y
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1760:	e8 54       	subi	r30, 0x48	; 72
    1762:	f5 4c       	sbci	r31, 0xC5	; 197
    1764:	80 83       	st	Z, r24
    1766:	1f 5f       	subi	r17, 0xFF	; 255
    1768:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    176a:	10 38       	cpi	r17, 0x80	; 128
    176c:	09 f7       	brne	.-62     	; 0x1730 <GenerateBlinks+0x24>
    176e:	d8 cf       	rjmp	.-80     	; 0x1720 <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1770:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <HeartCount>
    1774:	98 2f       	mov	r25, r24
    1776:	9d 7f       	andi	r25, 0xFD	; 253
    1778:	e0 91 ab bd 	lds	r30, 0xBDAB	; 0x80bdab <__bss_end+0x82a3>
            iLED[BADGER] = dimValue>>1 ;
    177c:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    177e:	91 30       	cpi	r25, 0x01	; 1
    1780:	11 f0       	breq	.+4      	; 0x1786 <GenerateBlinks+0x7a>
    1782:	85 30       	cpi	r24, 0x05	; 5
    1784:	21 f4       	brne	.+8      	; 0x178e <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    1786:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    178a:	96 95       	lsr	r25
    178c:	06 c0       	rjmp	.+12     	; 0x179a <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	11 f0       	breq	.+4      	; 0x1796 <GenerateBlinks+0x8a>
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	31 f4       	brne	.+12     	; 0x17a2 <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    1796:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    179a:	e8 54       	subi	r30, 0x48	; 72
    179c:	f5 4c       	sbci	r31, 0xC5	; 197
    179e:	90 83       	st	Z, r25
    17a0:	0c c0       	rjmp	.+24     	; 0x17ba <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    17a2:	88 23       	and	r24, r24
    17a4:	11 f0       	breq	.+4      	; 0x17aa <GenerateBlinks+0x9e>
    17a6:	86 30       	cpi	r24, 0x06	; 6
    17a8:	29 f4       	brne	.+10     	; 0x17b4 <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    17aa:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    17ae:	96 95       	lsr	r25
    17b0:	96 95       	lsr	r25
    17b2:	f3 cf       	rjmp	.-26     	; 0x179a <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    17b4:	e8 54       	subi	r30, 0x48	; 72
    17b6:	f5 4c       	sbci	r31, 0xC5	; 197
    17b8:	10 82       	st	Z, r1
        if (HeartCount<32)
    17ba:	80 32       	cpi	r24, 0x20	; 32
    17bc:	20 f4       	brcc	.+8      	; 0x17c6 <GenerateBlinks+0xba>
            HeartCount++;
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <HeartCount>
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    17c6:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    17ca:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <LedCount>
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	28 0f       	add	r18, r24
    17d2:	20 93 5a 38 	sts	0x385A, r18	; 0x80385a <LedCount>

    switch (effect&0x1f) {
    17d6:	e0 91 3a 38 	lds	r30, 0x383A	; 0x80383a <effect>
    17da:	f0 91 3b 38 	lds	r31, 0x383B	; 0x80383b <effect+0x1>
    17de:	ef 71       	andi	r30, 0x1F	; 31
    17e0:	ff 27       	eor	r31, r31
    17e2:	e9 30       	cpi	r30, 0x09	; 9
    17e4:	f1 05       	cpc	r31, r1
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <GenerateBlinks+0xde>
    17e8:	ef c0       	rjmp	.+478    	; 0x19c8 <GenerateBlinks+0x2bc>
    17ea:	e2 5c       	subi	r30, 0xC2	; 194
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	4c df       	rcall	.-360    	; 0x1690 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17f8:	e0 91 b8 bd 	lds	r30, 0xBDB8	; 0x80bdb8 <__bss_end+0x82b0>
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	e8 54       	subi	r30, 0x48	; 72
    1800:	f5 4c       	sbci	r31, 0xC5	; 197
    1802:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1804:	e0 91 ba bd 	lds	r30, 0xBDBA	; 0x80bdba <__bss_end+0x82b2>
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	e8 54       	subi	r30, 0x48	; 72
    180c:	f5 4c       	sbci	r31, 0xC5	; 197
    180e:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1810:	e0 91 ac bd 	lds	r30, 0xBDAC	; 0x80bdac <__bss_end+0x82a4>
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	e8 54       	subi	r30, 0x48	; 72
    1818:	f5 4c       	sbci	r31, 0xC5	; 197
    181a:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    181c:	e0 91 b9 bd 	lds	r30, 0xBDB9	; 0x80bdb9 <__bss_end+0x82b1>
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	e8 54       	subi	r30, 0x48	; 72
    1824:	f5 4c       	sbci	r31, 0xC5	; 197
    1826:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1828:	e0 91 bb bd 	lds	r30, 0xBDBB	; 0x80bdbb <__bss_end+0x82b3>
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	e8 54       	subi	r30, 0x48	; 72
    1830:	f5 4c       	sbci	r31, 0xC5	; 197
    1832:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1834:	e0 91 ad bd 	lds	r30, 0xBDAD	; 0x80bdad <__bss_end+0x82a5>
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	e8 54       	subi	r30, 0x48	; 72
    183c:	f5 4c       	sbci	r31, 0xC5	; 197
    183e:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1840:	e0 91 aa bd 	lds	r30, 0xBDAA	; 0x80bdaa <__bss_end+0x82a2>
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	e8 54       	subi	r30, 0x48	; 72
    1848:	f5 4c       	sbci	r31, 0xC5	; 197
    184a:	10 82       	st	Z, r1
            break;
    184c:	bd c0       	rjmp	.+378    	; 0x19c8 <GenerateBlinks+0x2bc>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    184e:	82 2f       	mov	r24, r18
    1850:	81 70       	andi	r24, 0x01	; 1
    1852:	20 fd       	sbrc	r18, 0
    1854:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <GenerateBlinks+0x16a>
    185c:	62 2f       	mov	r22, r18
    185e:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1860:	23 ff       	sbrs	r18, 3
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GenerateBlinks+0x15c>
    1864:	60 95       	com	r22
    1866:	70 95       	com	r23
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	8a 95       	dec	r24
    1870:	e1 f7       	brne	.-8      	; 0x186a <GenerateBlinks+0x15e>
    1872:	61 5e       	subi	r22, 0xE1	; 225
    1874:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1880:	ef 90       	pop	r14
    1882:	28 cf       	rjmp	.-432    	; 0x16d4 <SetBothEyes>
            break;

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    1884:	82 2f       	mov	r24, r18
    1886:	83 70       	andi	r24, 0x03	; 3
    1888:	09 f0       	breq	.+2      	; 0x188c <GenerateBlinks+0x180>
    188a:	9e c0       	rjmp	.+316    	; 0x19c8 <GenerateBlinks+0x2bc>
                if (LedCount & 4)
    188c:	22 ff       	sbrs	r18, 2
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <GenerateBlinks+0x18a>
                    WingBar(5,5);
    1890:	65 e0       	ldi	r22, 0x05	; 5
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GenerateBlinks+0x18e>
                else
                    WingBar(0,0);
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
        case 5:
            if ((LedCount & 3) == 0) {
                if (LedCount & 4)
                    WingBar(5,5);
                else
                    WingBar(0,0);
    18a4:	ef 90       	pop	r14
    18a6:	f4 ce       	rjmp	.-536    	; 0x1690 <WingBar>
            }
            break;

        //'circle the wing leds'
        case 6:
            iLED[WING[L][LedCount%5]] = 0;
    18a8:	82 2f       	mov	r24, r18
    18aa:	65 e0       	ldi	r22, 0x05	; 5
    18ac:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <__udivmodqi4>
    18b0:	e9 2f       	mov	r30, r25
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	e2 55       	subi	r30, 0x52	; 82
    18b6:	f2 44       	sbci	r31, 0x42	; 66
    18b8:	e5 81       	ldd	r30, Z+5	; 0x05
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	e8 54       	subi	r30, 0x48	; 72
    18be:	f5 4c       	sbci	r31, 0xC5	; 197
    18c0:	10 82       	st	Z, r1
            iLED[WING[L][(LedCount+1)%5]] = dimValue;
    18c2:	82 2f       	mov	r24, r18
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	65 e0       	ldi	r22, 0x05	; 5
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__divmodhi4>
    18d0:	fc 01       	movw	r30, r24
    18d2:	e2 55       	subi	r30, 0x52	; 82
    18d4:	f2 44       	sbci	r31, 0x42	; 66
    18d6:	e5 81       	ldd	r30, Z+5	; 0x05
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18de:	e8 54       	subi	r30, 0x48	; 72
    18e0:	f5 4c       	sbci	r31, 0xC5	; 197
    18e2:	80 83       	st	Z, r24
    18e4:	8e ea       	ldi	r24, 0xAE	; 174
    18e6:	9d eb       	ldi	r25, 0xBD	; 189
    18e8:	c8 eb       	ldi	r28, 0xB8	; 184
    18ea:	dd eb       	ldi	r29, 0xBD	; 189
    18ec:	23 eb       	ldi	r18, 0xB3	; 179
    18ee:	3d eb       	ldi	r19, 0xBD	; 189

            for (uint8_t x=0; x<5; ++x){
                iLED[WING[R][x]] = iLED[WING[L][4-x]];
    18f0:	dc 01       	movw	r26, r24
    18f2:	ed 91       	ld	r30, X+
    18f4:	cd 01       	movw	r24, r26
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	aa 91       	ld	r26, -Y
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	a8 54       	subi	r26, 0x48	; 72
    18fe:	b5 4c       	sbci	r27, 0xC5	; 197
    1900:	4c 91       	ld	r20, X
    1902:	e8 54       	subi	r30, 0x48	; 72
    1904:	f5 4c       	sbci	r31, 0xC5	; 197
    1906:	40 83       	st	Z, r20
        //'circle the wing leds'
        case 6:
            iLED[WING[L][LedCount%5]] = 0;
            iLED[WING[L][(LedCount+1)%5]] = dimValue;

            for (uint8_t x=0; x<5; ++x){
    1908:	2c 17       	cp	r18, r28
    190a:	3d 07       	cpc	r19, r29
    190c:	89 f7       	brne	.-30     	; 0x18f0 <GenerateBlinks+0x1e4>
    190e:	5c c0       	rjmp	.+184    	; 0x19c8 <GenerateBlinks+0x2bc>
    1910:	ce ea       	ldi	r28, 0xAE	; 174
    1912:	dd eb       	ldi	r29, 0xBD	; 189
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    1914:	7e 01       	movw	r14, r28
    1916:	0d 81       	ldd	r16, Y+5	; 0x05
    1918:	10 e0       	ldi	r17, 0x00	; 0
    191a:	b2 dc       	rcall	.-1692   	; 0x1280 <lfsr>
    191c:	87 ff       	sbrs	r24, 7
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <GenerateBlinks+0x21a>
    1920:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <GenerateBlinks+0x21c>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	f8 01       	movw	r30, r16
    192a:	e8 54       	subi	r30, 0x48	; 72
    192c:	f5 4c       	sbci	r31, 0xC5	; 197
    192e:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    1930:	21 96       	adiw	r28, 0x01	; 1
    1932:	f7 01       	movw	r30, r14
    1934:	00 81       	ld	r16, Z
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	a3 dc       	rcall	.-1722   	; 0x1280 <lfsr>
    193a:	87 ff       	sbrs	r24, 7
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <GenerateBlinks+0x238>
    193e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <GenerateBlinks+0x23a>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	f8 01       	movw	r30, r16
    1948:	e8 54       	subi	r30, 0x48	; 72
    194a:	f5 4c       	sbci	r31, 0xC5	; 197
    194c:	80 83       	st	Z, r24
            }
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    194e:	fd eb       	ldi	r31, 0xBD	; 189
    1950:	c3 3b       	cpi	r28, 0xB3	; 179
    1952:	df 07       	cpc	r29, r31
    1954:	f9 f6       	brne	.-66     	; 0x1914 <GenerateBlinks+0x208>
    1956:	38 c0       	rjmp	.+112    	; 0x19c8 <GenerateBlinks+0x2bc>
    1958:	ee ea       	ldi	r30, 0xAE	; 174
    195a:	fd eb       	ldi	r31, 0xBD	; 189
    195c:	82 eb       	ldi	r24, 0xB2	; 178
    195e:	9d eb       	ldi	r25, 0xBD	; 189
    1960:	9f 01       	movw	r18, r30
            break;

        //'falling rain'
        case 8:
            for (uint8_t x=0; x<4; ++x){
                iLED[WING[L][x]] = iLED[WING[L][x+1]];
    1962:	a5 81       	ldd	r26, Z+5	; 0x05
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	c6 81       	ldd	r28, Z+6	; 0x06
    1968:	d0 e0       	ldi	r29, 0x00	; 0
    196a:	c8 54       	subi	r28, 0x48	; 72
    196c:	d5 4c       	sbci	r29, 0xC5	; 197
    196e:	48 81       	ld	r20, Y
    1970:	a8 54       	subi	r26, 0x48	; 72
    1972:	b5 4c       	sbci	r27, 0xC5	; 197
    1974:	4c 93       	st	X, r20
    1976:	31 96       	adiw	r30, 0x01	; 1
                iLED[WING[R][x]] = iLED[WING[R][x+1]];
    1978:	e9 01       	movw	r28, r18
    197a:	a8 81       	ld	r26, Y
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	c0 81       	ld	r28, Z
    1980:	d0 e0       	ldi	r29, 0x00	; 0
    1982:	c8 54       	subi	r28, 0x48	; 72
    1984:	d5 4c       	sbci	r29, 0xC5	; 197
    1986:	28 81       	ld	r18, Y
    1988:	a8 54       	subi	r26, 0x48	; 72
    198a:	b5 4c       	sbci	r27, 0xC5	; 197
            }
            break;

        //'falling rain'
        case 8:
            for (uint8_t x=0; x<4; ++x){
    198c:	2c 93       	st	X, r18
    198e:	8e 17       	cp	r24, r30
    1990:	9f 07       	cpc	r25, r31
                iLED[WING[L][x]] = iLED[WING[L][x+1]];
                iLED[WING[R][x]] = iLED[WING[R][x+1]];
            }
            iLED[WING[L][4]] = (lfsr() > 192)?dimValue:0;
    1992:	31 f7       	brne	.-52     	; 0x1960 <GenerateBlinks+0x254>
    1994:	c0 91 b7 bd 	lds	r28, 0xBDB7	; 0x80bdb7 <__bss_end+0x82af>
    1998:	d0 e0       	ldi	r29, 0x00	; 0
    199a:	72 dc       	rcall	.-1820   	; 0x1280 <lfsr>
    199c:	81 3c       	cpi	r24, 0xC1	; 193
    199e:	18 f0       	brcs	.+6      	; 0x19a6 <GenerateBlinks+0x29a>
    19a0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <GenerateBlinks+0x29c>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	c8 54       	subi	r28, 0x48	; 72
    19aa:	d5 4c       	sbci	r29, 0xC5	; 197
            iLED[WING[R][4]] = (lfsr() > 192)?dimValue:0;
    19ac:	88 83       	st	Y, r24
    19ae:	c0 91 b2 bd 	lds	r28, 0xBDB2	; 0x80bdb2 <__bss_end+0x82aa>
    19b2:	d0 e0       	ldi	r29, 0x00	; 0
    19b4:	65 dc       	rcall	.-1846   	; 0x1280 <lfsr>
    19b6:	81 3c       	cpi	r24, 0xC1	; 193
    19b8:	18 f0       	brcs	.+6      	; 0x19c0 <GenerateBlinks+0x2b4>
    19ba:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <GenerateBlinks+0x2b6>
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	c8 54       	subi	r28, 0x48	; 72
    19c4:	d5 4c       	sbci	r29, 0xC5	; 197
    19c6:	88 83       	st	Y, r24
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	08 95       	ret

000019d6 <GenerateAudio>:


uint8_t GenerateAudio(){
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28

    if (auIn[AULEN>>1] < HPLVL) {
    19dc:	80 91 b4 3a 	lds	r24, 0x3AB4	; 0x803ab4 <auIn+0x4>
    19e0:	89 31       	cpi	r24, 0x19	; 25
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <GenerateAudio+0x10>
    19e4:	27 c1       	rjmp	.+590    	; 0x1c34 <GenerateAudio+0x25e>

        detHdPh = 1;
    19e6:	c1 e0       	ldi	r28, 0x01	; 1
    19e8:	c0 93 ad 3a 	sts	0x3AAD, r28	; 0x803aad <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    19ec:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19f0:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19f4:	88 27       	eor	r24, r24
    19f6:	89 2b       	or	r24, r25
    19f8:	09 f0       	breq	.+2      	; 0x19fc <GenerateAudio+0x26>
    19fa:	bf c0       	rjmp	.+382    	; 0x1b7a <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    19fc:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a00:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a04:	80 7e       	andi	r24, 0xE0	; 224
    1a06:	99 27       	eor	r25, r25
    1a08:	89 2b       	or	r24, r25
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <GenerateAudio+0x42>
                auRepAddr = &zero;
    1a0c:	88 e3       	ldi	r24, 0x38	; 56
    1a0e:	98 e3       	ldi	r25, 0x38	; 56
    1a10:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a14:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    1a18:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a1c:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a20:	80 7e       	andi	r24, 0xE0	; 224
    1a22:	99 27       	eor	r25, r25
    1a24:	80 97       	sbiw	r24, 0x20	; 32
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <GenerateAudio+0x54>
    1a28:	59 c0       	rjmp	.+178    	; 0x1adc <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	52 e2       	ldi	r21, 0x22	; 34
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	70 e2       	ldi	r23, 0x20	; 32
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	44 dc       	rcall	.-1912   	; 0x12be <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	65 e0       	ldi	r22, 0x05	; 5
    1a3c:	80 e8       	ldi	r24, 0x80	; 128
    1a3e:	71 dc       	rcall	.-1822   	; 0x1322 <floatAround>
    1a40:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <auBuffer.4021+0x2>

                if (buttonMark) {
    1a44:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1a48:	88 23       	and	r24, r24
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <GenerateAudio+0x78>
    1a4c:	47 c0       	rjmp	.+142    	; 0x1adc <GenerateAudio+0x106>
                    if (start == 0) {
    1a4e:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <start.4024>
    1a52:	81 11       	cpse	r24, r1
    1a54:	15 c0       	rjmp	.+42     	; 0x1a80 <GenerateAudio+0xaa>
                        duration = 4;
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <duration.4023>
                        loudness = 0xff;
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4022>
                        TCB1_CCMP = 0x2000;
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e2       	ldi	r25, 0x20	; 32
    1a66:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a6a:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1a6e:	81 e1       	ldi	r24, 0x11	; 17
    1a70:	98 e3       	ldi	r25, 0x38	; 56
    1a72:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a76:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <start.4024>
                    }

                    if (loudness) {
    1a80:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4022>
    1a84:	88 23       	and	r24, r24
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <GenerateAudio+0xcc>
                        auVolume = loudness;
    1a88:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1a8c:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <duration.4023>
    1a90:	99 23       	and	r25, r25
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <GenerateAudio+0xc6>
    1a94:	91 50       	subi	r25, 0x01	; 1
    1a96:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <duration.4023>
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <GenerateAudio+0xcc>
    1a9c:	86 95       	lsr	r24
    1a9e:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4022>
                    } 

                    if (loudness == 0) {
    1aa2:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4022>
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	19 c0       	rjmp	.+50     	; 0x1adc <GenerateAudio+0x106>
                        effect &= 0x1f;
    1aaa:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1aae:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1ab2:	8f 71       	andi	r24, 0x1F	; 31
    1ab4:	99 27       	eor	r25, r25
    1ab6:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1aba:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1abe:	88 e3       	ldi	r24, 0x38	; 56
    1ac0:	98 e3       	ldi	r25, 0x38	; 56
    1ac2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ac6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1aca:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1ace:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                        start = 0;
    1ad8:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <start.4024>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1adc:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ae0:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1ae4:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1ae8:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1aec:	80 7e       	andi	r24, 0xE0	; 224
    1aee:	99 27       	eor	r25, r25
    1af0:	80 36       	cpi	r24, 0x60	; 96
    1af2:	91 05       	cpc	r25, r1
    1af4:	a9 f5       	brne	.+106    	; 0x1b60 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1af6:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <auBuffer.4025+0x6>
                auRepAddr = &auBuffer[0];
    1afa:	8f e4       	ldi	r24, 0x4F	; 79
    1afc:	98 e3       	ldi	r25, 0x38	; 56
    1afe:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b02:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1b06:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b08:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1b0a:	c3 30       	cpi	r28, 0x03	; 3
    1b0c:	39 f0       	breq	.+14     	; 0x1b1c <GenerateAudio+0x146>
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	65 e0       	ldi	r22, 0x05	; 5
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	05 dc       	rcall	.-2038   	; 0x1322 <floatAround>
    1b18:	f8 01       	movw	r30, r16
    1b1a:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b1c:	cf 5f       	subi	r28, 0xFF	; 255
    1b1e:	0f 5f       	subi	r16, 0xFF	; 255
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	c6 30       	cpi	r28, 0x06	; 6
    1b24:	91 f7       	brne	.-28     	; 0x1b0a <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b26:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1b2a:	88 23       	and	r24, r24
    1b2c:	c9 f0       	breq	.+50     	; 0x1b60 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	54 e0       	ldi	r21, 0x04	; 4
    1b32:	60 e8       	ldi	r22, 0x80	; 128
    1b34:	72 e0       	ldi	r23, 0x02	; 2
    1b36:	85 e0       	ldi	r24, 0x05	; 5
    1b38:	c2 db       	rcall	.-2172   	; 0x12be <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b3a:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <auVolume>
    1b3e:	20 ea       	ldi	r18, 0xA0	; 160
    1b40:	40 e1       	ldi	r20, 0x10	; 16
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	ee db       	rcall	.-2084   	; 0x1322 <floatAround>
    1b46:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b4a:	20 e9       	ldi	r18, 0x90	; 144
    1b4c:	40 e7       	ldi	r20, 0x70	; 112
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <auBuffer.4025>
    1b54:	e6 db       	rcall	.-2100   	; 0x1322 <floatAround>
    1b56:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <auBuffer.4025>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b5a:	80 95       	com	r24
    1b5c:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <auBuffer.4025+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1b60:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b64:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1b68:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b6c:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1b70:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b74:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b78:	5f c0       	rjmp	.+190    	; 0x1c38 <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1b7a:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b7e:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b82:	88 27       	eor	r24, r24
    1b84:	81 15       	cp	r24, r1
    1b86:	91 40       	sbci	r25, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <GenerateAudio+0x1b6>
    1b8a:	56 c0       	rjmp	.+172    	; 0x1c38 <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1b8c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b90:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b94:	80 7e       	andi	r24, 0xE0	; 224
    1b96:	99 27       	eor	r25, r25
    1b98:	81 39       	cpi	r24, 0x91	; 145
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <GenerateAudio+0x1ca>
    1b9e:	4c c0       	rjmp	.+152    	; 0x1c38 <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1ba0:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <effect>
    1ba4:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <effect+0x1>
    1ba8:	60 7e       	andi	r22, 0xE0	; 224
    1baa:	77 27       	eor	r23, r23
    1bac:	6f 5f       	subi	r22, 0xFF	; 255
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	86 e0       	ldi	r24, 0x06	; 6
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1bb8:	e1 f7       	brne	.-8      	; 0x1bb2 <GenerateAudio+0x1dc>
    1bba:	ab 01       	movw	r20, r22
    1bbc:	5d 5f       	subi	r21, 0xFD	; 253
    1bbe:	7e 5f       	subi	r23, 0xFE	; 254
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	7d db       	rcall	.-2310   	; 0x12be <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1bc4:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1bc8:	88 23       	and	r24, r24
    1bca:	b1 f1       	breq	.+108    	; 0x1c38 <GenerateAudio+0x262>
                    if (start == 0) {
    1bcc:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <start.4032>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	0e c0       	rjmp	.+28     	; 0x1bf0 <GenerateAudio+0x21a>
                        duration = 3;
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4031>
                        auRepAddr = &auBuffer[0];
    1bda:	8e e0       	ldi	r24, 0x0E	; 14
    1bdc:	98 e3       	ldi	r25, 0x38	; 56
    1bde:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1be2:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                        start = 1;
    1bec:	c0 93 4e 38 	sts	0x384E, r28	; 0x80384e <start.4032>
                    }   if (duration == 0) {
    1bf0:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <duration.4031>
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	1a c0       	rjmp	.+52     	; 0x1c2c <GenerateAudio+0x256>
                        effect &= 0x1f;
    1bf8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1bfc:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1c00:	8f 71       	andi	r24, 0x1F	; 31
    1c02:	99 27       	eor	r25, r25
    1c04:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1c08:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1c0c:	88 e3       	ldi	r24, 0x38	; 56
    1c0e:	98 e3       	ldi	r25, 0x38	; 56
    1c10:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c14:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1c18:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1c1c:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <auVolume>
                        start = 0;
    1c26:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <start.4032>
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <GenerateAudio+0x262>
                    } else duration--;
    1c2c:	81 50       	subi	r24, 0x01	; 1
    1c2e:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4031>
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1c34:	10 92 ad 3a 	sts	0x3AAD, r1	; 0x803aad <detHdPh>
    }
    return buttonMark;
    1c38:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
}
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1c44:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <minuteMark>
    1c48:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1c4c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1c50:	89 2f       	mov	r24, r25
    1c52:	99 27       	eor	r25, r25
    1c54:	86 95       	lsr	r24
}
    1c56:	3c e3       	ldi	r19, 0x3C	; 60
    1c58:	23 9f       	mul	r18, r19
    1c5a:	80 0d       	add	r24, r0
    1c5c:	91 1d       	adc	r25, r1
    1c5e:	11 24       	eor	r1, r1
    1c60:	08 95       	ret

00001c62 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	8c 01       	movw	r16, r24
    1c6c:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c6e:	ea df       	rcall	.-44     	; 0x1c44 <getClock>
    1c70:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1c72:	80 17       	cp	r24, r16
    1c74:	91 07       	cpc	r25, r17
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <idleTimeout+0x18>
        curClock += 256 * 60;
    1c78:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1c7a:	c0 0f       	add	r28, r16
    1c7c:	d1 1f       	adc	r29, r17
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	c2 17       	cp	r28, r18
    1c82:	d3 07       	cpc	r29, r19
    1c84:	08 f0       	brcs	.+2      	; 0x1c88 <idleTimeout+0x26>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
}
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	08 95       	ret

00001c92 <SelfTest>:

uint8_t SelfTest(){
    1c92:	df 92       	push	r13
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <SelfTest+0x10>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <SelfTest+0x12>
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    uint8_t tstVal[4] = {0x80, 0};
    1ca8:	19 82       	std	Y+1, r1	; 0x01
    1caa:	1a 82       	std	Y+2, r1	; 0x02
    1cac:	1b 82       	std	Y+3, r1	; 0x03
    1cae:	1c 82       	std	Y+4, r1	; 0x04
    1cb0:	80 e8       	ldi	r24, 0x80	; 128
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    //All LEDs on 25%
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0x40;
    1cb8:	20 e4       	ldi	r18, 0x40	; 64
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e8 54       	subi	r30, 0x48	; 72
    1cbe:	f5 4c       	sbci	r31, 0xC5	; 197
    1cc0:	20 83       	st	Z, r18
    1cc2:	01 96       	adiw	r24, 0x01	; 1
}

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x80, 0};
    //All LEDs on 25%
    for (uint8_t x=0; x<40; ++x) {
    1cc4:	88 32       	cpi	r24, 0x28	; 40
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	c1 f7       	brne	.-16     	; 0x1cba <SelfTest+0x28>
    1cca:	ac eb       	ldi	r26, 0xBC	; 188
    1ccc:	bd eb       	ldi	r27, 0xBD	; 189
        iLED[x]=0x40;
    }

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1cce:	8f ef       	ldi	r24, 0xFF	; 255
    1cd0:	ed 91       	ld	r30, X+
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	e8 54       	subi	r30, 0x48	; 72
    1cd6:	f5 4c       	sbci	r31, 0xC5	; 197
    1cd8:	80 83       	st	Z, r24
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0x40;
    }

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1cda:	2d eb       	ldi	r18, 0xBD	; 189
    1cdc:	a2 3c       	cpi	r26, 0xC2	; 194
    1cde:	b2 07       	cpc	r27, r18
    1ce0:	b9 f7       	brne	.-18     	; 0x1cd0 <SelfTest+0x3e>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Audio in/out
    SelectAuIn();
    1ce2:	91 da       	rcall	.-2782   	; 0x1206 <SelectAuIn>
    auRepAddr = &tstVal[0];
    while ((auIn[0] < 0x7A)||(auIn[0] > 0x85)) ;
    1ce4:	80 91 b0 3a 	lds	r24, 0x3AB0	; 0x803ab0 <auIn>
    1ce8:	8a 37       	cpi	r24, 0x7A	; 122
    1cea:	e0 f3       	brcs	.-8      	; 0x1ce4 <SelfTest+0x52>
    1cec:	80 91 b0 3a 	lds	r24, 0x3AB0	; 0x803ab0 <auIn>
    1cf0:	86 38       	cpi	r24, 0x86	; 134
    1cf2:	c0 f7       	brcc	.-16     	; 0x1ce4 <SelfTest+0x52>
    iLED[HCKR[R][0]] = 0x00;
    1cf4:	e0 91 bc bd 	lds	r30, 0xBDBC	; 0x80bdbc <__bss_end+0x82b4>
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	e8 54       	subi	r30, 0x48	; 72
    1cfc:	f5 4c       	sbci	r31, 0xC5	; 197
    1cfe:	10 82       	st	Z, r1
    iLED[HCKR[G][0]] = 0xff;
    1d00:	e0 91 c2 bd 	lds	r30, 0xBDC2	; 0x80bdc2 <__bss_end+0x82ba>
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	e8 54       	subi	r30, 0x48	; 72
    1d08:	f5 4c       	sbci	r31, 0xC5	; 197
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	80 83       	st	Z, r24
    auRepAddr = &zero;
    1d0e:	88 e3       	ldi	r24, 0x38	; 56
    1d10:	98 e3       	ldi	r25, 0x38	; 56
    1d12:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1d16:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1d1a:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <adcPhot>
    1d1e:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <adcPhot+0x1>
    while (tstVal[0] == (adcPhot&0xff)) ;
    1d22:	99 27       	eor	r25, r25
    1d24:	20 91 ab 3a 	lds	r18, 0x3AAB	; 0x803aab <adcPhot>
    1d28:	30 91 ac 3a 	lds	r19, 0x3AAC	; 0x803aac <adcPhot+0x1>
    1d2c:	33 27       	eor	r19, r19
    1d2e:	28 17       	cp	r18, r24
    1d30:	39 07       	cpc	r19, r25
    1d32:	c1 f3       	breq	.-16     	; 0x1d24 <SelfTest+0x92>
    iLED[HCKR[R][1]] = 0x00;
    1d34:	e0 91 bd bd 	lds	r30, 0xBDBD	; 0x80bdbd <__bss_end+0x82b5>
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	e8 54       	subi	r30, 0x48	; 72
    1d3c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d3e:	10 82       	st	Z, r1
    iLED[HCKR[G][1]] = 0xff;
    1d40:	e0 91 c3 bd 	lds	r30, 0xBDC3	; 0x80bdc3 <__bss_end+0x82bb>
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	e8 54       	subi	r30, 0x48	; 72
    1d48:	f5 4c       	sbci	r31, 0xC5	; 197
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	80 83       	st	Z, r24

    //Magnet
    tstVal[0] = adcHall&0xff;
    1d4e:	80 91 a9 3a 	lds	r24, 0x3AA9	; 0x803aa9 <adcHall>
    1d52:	90 91 aa 3a 	lds	r25, 0x3AAA	; 0x803aaa <adcHall+0x1>
    1d56:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcHall&0xff)) ;
    1d58:	99 27       	eor	r25, r25
    1d5a:	20 91 a9 3a 	lds	r18, 0x3AA9	; 0x803aa9 <adcHall>
    1d5e:	30 91 aa 3a 	lds	r19, 0x3AAA	; 0x803aaa <adcHall+0x1>
    1d62:	33 27       	eor	r19, r19
    1d64:	28 17       	cp	r18, r24
    1d66:	39 07       	cpc	r19, r25
    1d68:	c1 f3       	breq	.-16     	; 0x1d5a <SelfTest+0xc8>
    iLED[HCKR[R][2]] = 0x00;
    1d6a:	e0 91 be bd 	lds	r30, 0xBDBE	; 0x80bdbe <__bss_end+0x82b6>
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	e8 54       	subi	r30, 0x48	; 72
    1d72:	f5 4c       	sbci	r31, 0xC5	; 197
    1d74:	10 82       	st	Z, r1
    iLED[HCKR[G][2]] = 0xff;
    1d76:	e0 91 c4 bd 	lds	r30, 0xBDC4	; 0x80bdc4 <__bss_end+0x82bc>
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	e8 54       	subi	r30, 0x48	; 72
    1d7e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d80:	8f ef       	ldi	r24, 0xFF	; 255

    //Temperature
    SelectTSens();
    1d82:	80 83       	st	Z, r24
    1d84:	31 da       	rcall	.-2974   	; 0x11e8 <SelectTSens>
    tstVal[0] = adcTemp&0xff;
    1d86:	80 91 e3 3a 	lds	r24, 0x3AE3	; 0x803ae3 <adcTemp>
    1d8a:	90 91 e4 3a 	lds	r25, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcTemp&0xff)) ;
    1d90:	99 27       	eor	r25, r25
    1d92:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <adcTemp>
    1d96:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <adcTemp+0x1>
    1d9a:	33 27       	eor	r19, r19
    1d9c:	28 17       	cp	r18, r24
    1d9e:	39 07       	cpc	r19, r25
    1da0:	c1 f3       	breq	.-16     	; 0x1d92 <SelfTest+0x100>
    iLED[HCKR[R][3]] = 0x00;
    1da2:	e0 91 bf bd 	lds	r30, 0xBDBF	; 0x80bdbf <__bss_end+0x82b7>
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	e8 54       	subi	r30, 0x48	; 72
    1daa:	f5 4c       	sbci	r31, 0xC5	; 197
    1dac:	10 82       	st	Z, r1
    iLED[HCKR[G][3]] = 0xff;
    1dae:	e0 91 c5 bd 	lds	r30, 0xBDC5	; 0x80bdc5 <__bss_end+0x82bd>
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	e8 54       	subi	r30, 0x48	; 72
    1db6:	f5 4c       	sbci	r31, 0xC5	; 197
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	80 83       	st	Z, r24

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1dbc:	80 91 a5 3a 	lds	r24, 0x3AA5	; 0x803aa5 <adcBtns>
    1dc0:	90 91 a6 3a 	lds	r25, 0x3AA6	; 0x803aa6 <adcBtns+0x1>
    1dc4:	80 38       	cpi	r24, 0x80	; 128
    1dc6:	9c 40       	sbci	r25, 0x0C	; 12
    1dc8:	c8 f3       	brcs	.-14     	; 0x1dbc <SelfTest+0x12a>
    iLED[HCKR[R][4]] = 0x00;
    1dca:	e0 90 c0 bd 	lds	r14, 0xBDC0	; 0x80bdc0 <__bss_end+0x82b8>
    1dce:	8e 2d       	mov	r24, r14
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e8 54       	subi	r30, 0x48	; 72
    1dd6:	f5 4c       	sbci	r31, 0xC5	; 197
    1dd8:	7f 01       	movw	r14, r30
    1dda:	10 82       	st	Z, r1
    iLED[HCKR[G][4]] = 0xff;
    1ddc:	00 91 c6 bd 	lds	r16, 0xBDC6	; 0x80bdc6 <__bss_end+0x82be>
    1de0:	10 e0       	ldi	r17, 0x00	; 0
    1de2:	08 54       	subi	r16, 0x48	; 72
    1de4:	15 4c       	sbci	r17, 0xC5	; 197
    1de6:	dd 24       	eor	r13, r13
    1de8:	da 94       	dec	r13
    1dea:	f8 01       	movw	r30, r16
    1dec:	d0 82       	st	Z, r13
        0x3CCD              Level 6, open_acl=0
        0x3CCE              Level 6, action_acl=192
        0x3CCF              Level 6, action_mask=20
    */

    ExtEERead(0x3CCC, 4, 0, &tstVal[0]);
    1dee:	9e 01       	movw	r18, r28
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	64 e0       	ldi	r22, 0x04	; 4
    1df8:	8c ec       	ldi	r24, 0xCC	; 204
    1dfa:	9c e3       	ldi	r25, 0x3C	; 60
    1dfc:	a1 d9       	rcall	.-3262   	; 0x1140 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	8f 33       	cpi	r24, 0x3F	; 63
    1e02:	49 f4       	brne	.+18     	; 0x1e16 <SelfTest+0x184>
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	81 11       	cpse	r24, r1
    1e08:	06 c0       	rjmp	.+12     	; 0x1e16 <SelfTest+0x184>
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	80 3c       	cpi	r24, 0xC0	; 192
    1e0e:	19 f4       	brne	.+6      	; 0x1e16 <SelfTest+0x184>
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	84 31       	cpi	r24, 0x14	; 20
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <SelfTest+0x186>
    1e16:	ff cf       	rjmp	.-2      	; 0x1e16 <SelfTest+0x184>
        while(1);
    } else {
        iLED[HCKR[R][4]] = 0x00;
    1e18:	f7 01       	movw	r30, r14
    1e1a:	10 82       	st	Z, r1
        iLED[HCKR[G][4]] = 0xff;
    1e1c:	f8 01       	movw	r30, r16
    1e1e:	d0 82       	st	Z, r13
    }

    return 0;
}
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	24 96       	adiw	r28, 0x04	; 4
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	ff 90       	pop	r15
    1e32:	ef 90       	pop	r14
    1e34:	df 90       	pop	r13
    1e36:	08 95       	ret

00001e38 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	62 97       	sbiw	r28, 0x12	; 18
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	de bf       	out	0x3e, r29	; 62
    1e48:	8a 8b       	std	Y+18, r24	; 0x12
    1e4a:	80 e1       	ldi	r24, 0x10	; 16
    1e4c:	e2 e8       	ldi	r30, 0x82	; 130
    1e4e:	fd eb       	ldi	r31, 0xBD	; 189
    1e50:	de 01       	movw	r26, r28
    1e52:	11 96       	adiw	r26, 0x01	; 1
    1e54:	01 90       	ld	r0, Z+
    1e56:	0d 92       	st	X+, r0
    1e58:	8a 95       	dec	r24
    1e5a:	e1 f7       	brne	.-8      	; 0x1e54 <Cheat+0x1c>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	31 96       	adiw	r30, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	21 91       	ld	r18, Z+
    1e66:	31 91       	ld	r19, Z+
    1e68:	26 17       	cp	r18, r22
    1e6a:	37 07       	cpc	r19, r23
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <Cheat+0x38>
    1e6e:	89 2f       	mov	r24, r25
    1e70:	9f 5f       	subi	r25, 0xFF	; 255
    1e72:	98 30       	cpi	r25, 0x08	; 8
    1e74:	b9 f7       	brne	.-18     	; 0x1e64 <Cheat+0x2c>
    1e76:	88 30       	cpi	r24, 0x08	; 8
    1e78:	10 f0       	brcs	.+4      	; 0x1e7e <Cheat+0x46>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	12 c0       	rjmp	.+36     	; 0x1ea2 <Cheat+0x6a>
    1e7e:	18 e1       	ldi	r17, 0x18	; 24
    1e80:	18 0f       	add	r17, r24
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	be 01       	movw	r22, r28
    1e86:	6f 5e       	subi	r22, 0xEF	; 239
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	81 2f       	mov	r24, r17
    1e8c:	07 d9       	rcall	.-3570   	; 0x109c <EERead>
    1e8e:	89 89       	ldd	r24, Y+17	; 0x11
    1e90:	8f 3f       	cpi	r24, 0xFF	; 255
    1e92:	99 f7       	brne	.-26     	; 0x1e7a <Cheat+0x42>
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	be 01       	movw	r22, r28
    1e98:	6e 5e       	subi	r22, 0xEE	; 238
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	81 2f       	mov	r24, r17
    1e9e:	0e d9       	rcall	.-3556   	; 0x10bc <EEWrite>
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	62 96       	adiw	r28, 0x12	; 18
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	08 95       	ret

00001eb0 <UnflipData>:
    1eb0:	26 2f       	mov	r18, r22
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	35 e5       	ldi	r19, 0x55	; 85
    1eb6:	9e 2f       	mov	r25, r30
    1eb8:	92 1b       	sub	r25, r18
    1eba:	98 17       	cp	r25, r24
    1ebc:	28 f4       	brcc	.+10     	; 0x1ec8 <UnflipData+0x18>
    1ebe:	90 81       	ld	r25, Z
    1ec0:	92 95       	swap	r25
    1ec2:	93 27       	eor	r25, r19
    1ec4:	91 93       	st	Z+, r25
    1ec6:	f7 cf       	rjmp	.-18     	; 0x1eb6 <UnflipData+0x6>
    1ec8:	08 95       	ret

00001eca <ClearTxAfter>:
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	88 30       	cpi	r24, 0x08	; 8
    1ece:	30 f4       	brcc	.+12     	; 0x1edc <ClearTxAfter+0x12>
    1ed0:	e8 2f       	mov	r30, r24
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	ea 5c       	subi	r30, 0xCA	; 202
    1ed6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ed8:	10 82       	st	Z, r1
    1eda:	f7 cf       	rjmp	.-18     	; 0x1eca <ClearTxAfter>
    1edc:	08 95       	ret

00001ede <StartsWith>:
    1ede:	ac 01       	movw	r20, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	e9 2f       	mov	r30, r25
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	da 01       	movw	r26, r20
    1ee8:	ae 0f       	add	r26, r30
    1eea:	bf 1f       	adc	r27, r31
    1eec:	3c 91       	ld	r19, X
    1eee:	e6 0f       	add	r30, r22
    1ef0:	f7 1f       	adc	r31, r23
    1ef2:	31 11       	cpse	r19, r1
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <StartsWith+0x22>
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 81       	ld	r25, Z
    1efa:	99 23       	and	r25, r25
    1efc:	49 f0       	breq	.+18     	; 0x1f10 <StartsWith+0x32>
    1efe:	07 c0       	rjmp	.+14     	; 0x1f0e <StartsWith+0x30>
    1f00:	20 81       	ld	r18, Z
    1f02:	22 23       	and	r18, r18
    1f04:	c1 f3       	breq	.-16     	; 0x1ef6 <StartsWith+0x18>
    1f06:	32 13       	cpse	r19, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <StartsWith+0x30>
    1f0a:	9f 5f       	subi	r25, 0xFF	; 255
    1f0c:	ea cf       	rjmp	.-44     	; 0x1ee2 <StartsWith+0x4>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	08 95       	ret

00001f12 <PrepareSending>:
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
    1f16:	fc 01       	movw	r30, r24
    1f18:	61 15       	cp	r22, r1
    1f1a:	71 05       	cpc	r23, r1
    1f1c:	59 f1       	breq	.+86     	; 0x1f74 <PrepareSending+0x62>
    1f1e:	ae e3       	ldi	r26, 0x3E	; 62
    1f20:	ba e3       	ldi	r27, 0x3A	; 58
    1f22:	c6 e3       	ldi	r28, 0x36	; 54
    1f24:	da e3       	ldi	r29, 0x3A	; 58
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	6f 3f       	cpi	r22, 0xFF	; 255
    1f2c:	71 05       	cpc	r23, r1
    1f2e:	69 f0       	breq	.+26     	; 0x1f4a <PrepareSending+0x38>
    1f30:	60 f0       	brcs	.+24     	; 0x1f4a <PrepareSending+0x38>
    1f32:	ed 93       	st	X+, r30
    1f34:	fd 93       	st	X+, r31
    1f36:	99 93       	st	Y+, r25
    1f38:	e1 50       	subi	r30, 0x01	; 1
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	71 09       	sbc	r23, r1
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	87 30       	cpi	r24, 0x07	; 7
    1f44:	91 f7       	brne	.-28     	; 0x1f2a <PrepareSending+0x18>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	1e c0       	rjmp	.+60     	; 0x1f86 <PrepareSending+0x74>
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	d9 01       	movw	r26, r18
    1f50:	aa 0f       	add	r26, r26
    1f52:	bb 1f       	adc	r27, r27
    1f54:	a2 5c       	subi	r26, 0xC2	; 194
    1f56:	b5 4c       	sbci	r27, 0xC5	; 197
    1f58:	ed 93       	st	X+, r30
    1f5a:	fc 93       	st	X, r31
    1f5c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f5e:	71 05       	cpc	r23, r1
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <PrepareSending+0x54>
    1f62:	6e ef       	ldi	r22, 0xFE	; 254
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	f9 01       	movw	r30, r18
    1f68:	ea 5c       	subi	r30, 0xCA	; 202
    1f6a:	f5 4c       	sbci	r31, 0xC5	; 197
    1f6c:	60 83       	st	Z, r22
    1f6e:	40 93 34 3a 	sts	0x3A34, r20	; 0x803a34 <txTypeNow>
    1f72:	05 c0       	rjmp	.+10     	; 0x1f7e <PrepareSending+0x6c>
    1f74:	10 92 3e 3a 	sts	0x3A3E, r1	; 0x803a3e <txAddrList>
    1f78:	10 92 3f 3a 	sts	0x3A3F, r1	; 0x803a3f <txAddrList+0x1>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	a5 df       	rcall	.-182    	; 0x1eca <ClearTxAfter>
    1f80:	10 92 35 3a 	sts	0x3A35, r1	; 0x803a35 <txAddrNow>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	f9 01       	movw	r30, r18
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e7 5f       	subi	r30, 0xF7	; 247
    1f9c:	f6 4c       	sbci	r31, 0xC6	; 198
    1f9e:	a9 e5       	ldi	r26, 0x59	; 89
    1fa0:	ba e7       	ldi	r27, 0x7A	; 122
    1fa2:	a0 83       	st	Z, r26
    1fa4:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	e7 5b       	subi	r30, 0xB7	; 183
    1fae:	f6 4c       	sbci	r31, 0xC6	; 198
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	60 83       	st	Z, r22
    1fb6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	e7 57       	subi	r30, 0x77	; 119
    1fc0:	f6 4c       	sbci	r31, 0xC6	; 198
    1fc2:	41 e0       	ldi	r20, 0x01	; 1
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	40 83       	st	Z, r20
    1fc8:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fca:	21 e0       	ldi	r18, 0x01	; 1
    1fcc:	28 0f       	add	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	f9 01       	movw	r30, r18
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	e7 5f       	subi	r30, 0xF7	; 247
    1fd8:	f6 4c       	sbci	r31, 0xC6	; 198
    1fda:	c2 e6       	ldi	r28, 0x62	; 98
    1fdc:	da e7       	ldi	r29, 0x7A	; 122
    1fde:	c0 83       	st	Z, r28
    1fe0:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	ee 0f       	add	r30, r30
    1fe6:	ff 1f       	adc	r31, r31
    1fe8:	e7 5b       	subi	r30, 0xB7	; 183
    1fea:	f6 4c       	sbci	r31, 0xC6	; 198
    1fec:	cc e0       	ldi	r28, 0x0C	; 12
    1fee:	d0 e0       	ldi	r29, 0x00	; 0
    1ff0:	c0 83       	st	Z, r28
    1ff2:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    1ff4:	22 0f       	add	r18, r18
    1ff6:	33 1f       	adc	r19, r19
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	e7 57       	subi	r30, 0x77	; 119
    1ffc:	f6 4c       	sbci	r31, 0xC6	; 198
    1ffe:	40 83       	st	Z, r20
    2000:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2002:	e2 e0       	ldi	r30, 0x02	; 2
    2004:	e8 0f       	add	r30, r24
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	e7 5f       	subi	r30, 0xF7	; 247
    200e:	f6 4c       	sbci	r31, 0xC6	; 198
    2010:	20 ef       	ldi	r18, 0xF0	; 240
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	20 83       	st	Z, r18
    2016:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2018:	23 e0       	ldi	r18, 0x03	; 3
    201a:	28 0f       	add	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	f9 01       	movw	r30, r18
    2020:	ee 0f       	add	r30, r30
    2022:	ff 1f       	adc	r31, r31
    2024:	e7 5f       	subi	r30, 0xF7	; 247
    2026:	f6 4c       	sbci	r31, 0xC6	; 198
    2028:	a0 83       	st	Z, r26
    202a:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    202c:	f9 01       	movw	r30, r18
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	e7 5b       	subi	r30, 0xB7	; 183
    2034:	f6 4c       	sbci	r31, 0xC6	; 198
    2036:	60 83       	st	Z, r22
    2038:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	f9 01       	movw	r30, r18
    2040:	e7 57       	subi	r30, 0x77	; 119
    2042:	f6 4c       	sbci	r31, 0xC6	; 198
    2044:	40 83       	st	Z, r20
    2046:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2048:	24 e0       	ldi	r18, 0x04	; 4
    204a:	28 0f       	add	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	f9 01       	movw	r30, r18
    2050:	ee 0f       	add	r30, r30
    2052:	ff 1f       	adc	r31, r31
    2054:	e7 5f       	subi	r30, 0xF7	; 247
    2056:	f6 4c       	sbci	r31, 0xC6	; 198
    2058:	a5 e5       	ldi	r26, 0x55	; 85
    205a:	ba e7       	ldi	r27, 0x7A	; 122
    205c:	a0 83       	st	Z, r26
    205e:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2060:	f9 01       	movw	r30, r18
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	e7 5b       	subi	r30, 0xB7	; 183
    2068:	f6 4c       	sbci	r31, 0xC6	; 198
    206a:	60 83       	st	Z, r22
    206c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    206e:	22 0f       	add	r18, r18
    2070:	33 1f       	adc	r19, r19
    2072:	f9 01       	movw	r30, r18
    2074:	e7 57       	subi	r30, 0x77	; 119
    2076:	f6 4c       	sbci	r31, 0xC6	; 198
    2078:	40 83       	st	Z, r20
    207a:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    207c:	8b 5f       	subi	r24, 0xFB	; 251
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    2084:	af 92       	push	r10
    2086:	bf 92       	push	r11
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	2c 97       	sbiw	r28, 0x0c	; 12
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	7c 01       	movw	r14, r24
    20a2:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    20a4:	9e 01       	movw	r18, r28
    20a6:	2f 5f       	subi	r18, 0xFF	; 255
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	6c e0       	ldi	r22, 0x0C	; 12
    20ae:	80 96       	adiw	r24, 0x20	; 32
    20b0:	47 d8       	rcall	.-3954   	; 0x1140 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	98 27       	eor	r25, r24
    20b8:	89 27       	eor	r24, r25
    20ba:	98 27       	eor	r25, r24
    20bc:	80 96       	adiw	r24, 0x20	; 32
    20be:	f8 01       	movw	r30, r16
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	9c 81       	ldd	r25, Y+4	; 0x04
    20c8:	98 27       	eor	r25, r24
    20ca:	89 27       	eor	r24, r25
    20cc:	98 27       	eor	r25, r24
    20ce:	80 96       	adiw	r24, 0x20	; 32
    20d0:	82 83       	std	Z+2, r24	; 0x02
    20d2:	93 83       	std	Z+3, r25	; 0x03
    20d4:	de 01       	movw	r26, r28
    20d6:	15 96       	adiw	r26, 0x05	; 5
    20d8:	34 96       	adiw	r30, 0x04	; 4
    20da:	c8 01       	movw	r24, r16
    20dc:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    20de:	2d 91       	ld	r18, X+
    20e0:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    20e2:	e8 17       	cp	r30, r24
    20e4:	f9 07       	cpc	r31, r25
    20e6:	d9 f7       	brne	.-10     	; 0x20de <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    20e8:	fc e2       	ldi	r31, 0x2C	; 44
    20ea:	ef 0e       	add	r14, r31
    20ec:	f1 1c       	adc	r15, r1
    20ee:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    20f0:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    20f2:	9e 01       	movw	r18, r28
    20f4:	2f 5f       	subi	r18, 0xFF	; 255
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	63 e0       	ldi	r22, 0x03	; 3
    20fc:	c7 01       	movw	r24, r14
    20fe:	20 d8       	rcall	.-4032   	; 0x1140 <ExtEERead>
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	98 27       	eor	r25, r24
    2106:	89 27       	eor	r24, r25
    2108:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    210a:	97 01       	movw	r18, r14
    210c:	2e 5f       	subi	r18, 0xFE	; 254
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2110:	43 e0       	ldi	r20, 0x03	; 3
    2112:	4d 15       	cp	r20, r13
    2114:	80 f4       	brcc	.+32     	; 0x2136 <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    2116:	ac 01       	movw	r20, r24
    2118:	41 50       	subi	r20, 0x01	; 1
    211a:	51 09       	sbc	r21, r1
    211c:	f8 01       	movw	r30, r16
    211e:	42 8f       	std	Z+26, r20	; 0x1a
    2120:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2122:	f3 e0       	ldi	r31, 0x03	; 3
    2124:	ef 0e       	add	r14, r31
    2126:	f1 1c       	adc	r15, r1
    2128:	f8 01       	movw	r30, r16
    212a:	e4 86       	std	Z+12, r14	; 0x0c
    212c:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    212e:	4b 81       	ldd	r20, Y+3	; 0x03
    2130:	f5 01       	movw	r30, r10
    2132:	44 a3       	std	Z+36, r20	; 0x24
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    2136:	f8 01       	movw	r30, r16
    2138:	82 8f       	std	Z+26, r24	; 0x1a
    213a:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    213c:	24 87       	std	Z+12, r18	; 0x0c
    213e:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    2140:	7c 01       	movw	r14, r24
    2142:	e2 0e       	add	r14, r18
    2144:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2146:	d3 94       	inc	r13
    2148:	0e 5f       	subi	r16, 0xFE	; 254
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	ff ef       	ldi	r31, 0xFF	; 255
    214e:	af 1a       	sub	r10, r31
    2150:	bf 0a       	sbc	r11, r31
    2152:	47 e0       	ldi	r20, 0x07	; 7
    2154:	d4 12       	cpse	r13, r20
    2156:	cd cf       	rjmp	.-102    	; 0x20f2 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    2158:	2c 96       	adiw	r28, 0x0c	; 12
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	df 90       	pop	r13
    216c:	bf 90       	pop	r11
    216e:	af 90       	pop	r10
    2170:	08 95       	ret

00002172 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	a0 97       	sbiw	r28, 0x20	; 32
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    218e:	7c 01       	movw	r14, r24
    2190:	20 e2       	ldi	r18, 0x20	; 32
    2192:	e2 0e       	add	r14, r18
    2194:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    2196:	9e 01       	movw	r18, r28
    2198:	2f 5f       	subi	r18, 0xFF	; 255
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	62 e0       	ldi	r22, 0x02	; 2
    21a0:	8c 96       	adiw	r24, 0x2c	; 44
    21a2:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    21a6:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    21a8:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    21aa:	11 23       	and	r17, r17
    21ac:	59 f1       	breq	.+86     	; 0x2204 <CheckLetter+0x92>
    21ae:	01 2f       	mov	r16, r17
    21b0:	11 32       	cpi	r17, 0x21	; 33
    21b2:	08 f0       	brcs	.+2      	; 0x21b6 <CheckLetter+0x44>
    21b4:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    21b6:	9e 01       	movw	r18, r28
    21b8:	2f 5f       	subi	r18, 0xFF	; 255
    21ba:	3f 4f       	sbci	r19, 0xFF	; 255
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	60 2f       	mov	r22, r16
    21c0:	c7 01       	movw	r24, r14
    21c2:	0e 96       	adiw	r24, 0x0e	; 14
    21c4:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
    21c8:	fe 01       	movw	r30, r28
    21ca:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    21cc:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    21ce:	dd 20       	and	r13, r13
    21d0:	61 f0       	breq	.+24     	; 0x21ea <CheckLetter+0x78>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    21d2:	e1 e0       	ldi	r30, 0x01	; 1
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ec 0f       	add	r30, r28
    21d8:	fd 1f       	adc	r31, r29
    21da:	e8 0f       	add	r30, r24
    21dc:	f1 1d       	adc	r31, r1
    21de:	90 81       	ld	r25, Z
    21e0:	90 62       	ori	r25, 0x20	; 32
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	9c 11       	cpse	r25, r12
    21e6:	0e c0       	rjmp	.+28     	; 0x2204 <CheckLetter+0x92>
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <CheckLetter+0x94>
            }
            if (data[y] == '[') found = 1;
    21ea:	91 91       	ld	r25, Z+
    21ec:	dd 24       	eor	r13, r13
    21ee:	d3 94       	inc	r13
    21f0:	9b 35       	cpi	r25, 0x5B	; 91
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <CheckLetter+0x84>
    21f4:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	80 17       	cp	r24, r16
    21fa:	48 f3       	brcs	.-46     	; 0x21ce <CheckLetter+0x5c>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    21fc:	e0 0e       	add	r14, r16
    21fe:	f1 1c       	adc	r15, r1
        x -= max;
    2200:	10 1b       	sub	r17, r16
    2202:	d3 cf       	rjmp	.-90     	; 0x21aa <CheckLetter+0x38>
    }
    return 0;
    2204:	80 e0       	ldi	r24, 0x00	; 0
}
    2206:	a0 96       	adiw	r28, 0x20	; 32
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	cf 90       	pop	r12
    221c:	08 95       	ret

0000221e <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	00 d0       	rcall	.+0      	; 0x2232 <FindChild+0x14>
    2232:	00 d0       	rcall	.+0      	; 0x2234 <FindChild+0x16>
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	d6 2e       	mov	r13, r22
    223a:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    223c:	9e 01       	movw	r18, r28
    223e:	2f 5f       	subi	r18, 0xFF	; 255
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	64 e0       	ldi	r22, 0x04	; 4
    2246:	80 96       	adiw	r24, 0x20	; 32
    2248:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
    224c:	e9 80       	ldd	r14, Y+1	; 0x01
    224e:	fa 80       	ldd	r15, Y+2	; 0x02
    2250:	fe 24       	eor	r15, r14
    2252:	ef 24       	eor	r14, r15
    2254:	fe 24       	eor	r15, r14
    2256:	0b 81       	ldd	r16, Y+3	; 0x03
    2258:	1c 81       	ldd	r17, Y+4	; 0x04
    225a:	10 27       	eor	r17, r16
    225c:	01 27       	eor	r16, r17
    225e:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    2260:	0e 15       	cp	r16, r14
    2262:	1f 05       	cpc	r17, r15
    2264:	40 f5       	brcc	.+80     	; 0x22b6 <FindChild+0x98>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    2266:	a0 16       	cp	r10, r16
    2268:	b1 06       	cpc	r11, r17
    226a:	60 f0       	brcs	.+24     	; 0x2284 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    226c:	9e 01       	movw	r18, r28
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	c8 01       	movw	r24, r16
    2278:	80 96       	adiw	r24, 0x20	; 32
    227a:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
    227e:	09 81       	ldd	r16, Y+1	; 0x01
    2280:	1a 81       	ldd	r17, Y+2	; 0x02
    2282:	eb cf       	rjmp	.-42     	; 0x225a <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    2284:	9e 01       	movw	r18, r28
    2286:	2f 5f       	subi	r18, 0xFF	; 255
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	c8 01       	movw	r24, r16
    2290:	85 96       	adiw	r24, 0x25	; 37
    2292:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	81 11       	cpse	r24, r1
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    229c:	d1 10       	cpse	r13, r1
    229e:	05 c0       	rjmp	.+10     	; 0x22aa <FindChild+0x8c>
    22a0:	0d c0       	rjmp	.+26     	; 0x22bc <FindChild+0x9e>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    22a2:	1c d9       	rcall	.-3528   	; 0x14dc <CheckState>
    22a4:	81 11       	cpse	r24, r1
    22a6:	fa cf       	rjmp	.-12     	; 0x229c <FindChild+0x7e>
    22a8:	e1 cf       	rjmp	.-62     	; 0x226c <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    22aa:	6d 2d       	mov	r22, r13
    22ac:	c8 01       	movw	r24, r16
    22ae:	61 df       	rcall	.-318    	; 0x2172 <CheckLetter>
    22b0:	88 23       	and	r24, r24
    22b2:	e1 f2       	breq	.-72     	; 0x226c <FindChild+0x4e>
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <FindChild+0x9e>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <FindChild+0xa0>
    22bc:	c8 01       	movw	r24, r16
}
    22be:	24 96       	adiw	r28, 0x04	; 4
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	ff 90       	pop	r15
    22ce:	ef 90       	pop	r14
    22d0:	df 90       	pop	r13
    22d2:	bf 90       	pop	r11
    22d4:	af 90       	pop	r10
    22d6:	08 95       	ret

000022d8 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    22d8:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    22da:	9f e9       	ldi	r25, 0x9F	; 159
    22dc:	98 0f       	add	r25, r24
    22de:	9a 31       	cpi	r25, 0x1A	; 26
    22e0:	38 f0       	brcs	.+14     	; 0x22f0 <InpOkChk+0x18>
    22e2:	90 ed       	ldi	r25, 0xD0	; 208
    22e4:	98 0f       	add	r25, r24
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	9a 30       	cpi	r25, 0x0A	; 10
    22ea:	18 f0       	brcs	.+6      	; 0x22f2 <InpOkChk+0x1a>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	08 95       	ret
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    22f2:	08 95       	ret

000022f4 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    22fe:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2300:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2302:	f8 01       	movw	r30, r16
    2304:	ed 0f       	add	r30, r29
    2306:	f1 1d       	adc	r31, r1
    2308:	20 81       	ld	r18, Z
    230a:	8c 2f       	mov	r24, r28
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	22 23       	and	r18, r18
    2310:	51 f0       	breq	.+20     	; 0x2326 <CleanInput+0x32>
        data[cnt] = data[x];
    2312:	d8 01       	movw	r26, r16
    2314:	a8 0f       	add	r26, r24
    2316:	b9 1f       	adc	r27, r25
    2318:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    231a:	80 81       	ld	r24, Z
    231c:	dd df       	rcall	.-70     	; 0x22d8 <InpOkChk>
    231e:	81 11       	cpse	r24, r1
    2320:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2322:	df 5f       	subi	r29, 0xFF	; 255
    2324:	ee cf       	rjmp	.-36     	; 0x2302 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2326:	f8 01       	movw	r30, r16
    2328:	e8 0f       	add	r30, r24
    232a:	f9 1f       	adc	r31, r25
    232c:	10 82       	st	Z, r1
    return cnt;
}
    232e:	8c 2f       	mov	r24, r28
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    233a:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    233c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    2340:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    2344:	89 2b       	or	r24, r25
    2346:	99 f4       	brne	.+38     	; 0x236e <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    2348:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2352:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
        auStart = ((effect&0xE0)>0);
    2356:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    235a:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    235e:	80 7e       	andi	r24, 0xE0	; 224
    2360:	99 27       	eor	r25, r25
    2362:	21 e0       	ldi	r18, 0x01	; 1
    2364:	89 2b       	or	r24, r25
    2366:	09 f4       	brne	.+2      	; 0x236a <CheckSend+0x30>
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	20 93 39 38 	sts	0x3839, r18	; 0x803839 <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    236e:	20 91 35 3a 	lds	r18, 0x3A35	; 0x803a35 <txAddrNow>
    2372:	28 30       	cpi	r18, 0x08	; 8
    2374:	08 f0       	brcs	.+2      	; 0x2378 <CheckSend+0x3e>
    2376:	49 c0       	rjmp	.+146    	; 0x240a <CheckSend+0xd0>
    2378:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    237c:	88 23       	and	r24, r24
    237e:	09 f4       	brne	.+2      	; 0x2382 <CheckSend+0x48>
    2380:	44 c0       	rjmp	.+136    	; 0x240a <CheckSend+0xd0>
        if (txStrLen[txAddrNow] == 0){
    2382:	82 2f       	mov	r24, r18
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	fc 01       	movw	r30, r24
    2388:	ea 5c       	subi	r30, 0xCA	; 202
    238a:	f5 4c       	sbci	r31, 0xC5	; 197
    238c:	e0 81       	ld	r30, Z
    238e:	e1 11       	cpse	r30, r1
    2390:	06 c0       	rjmp	.+12     	; 0x239e <CheckSend+0x64>
            txPart = 0;
    2392:	10 92 f4 38 	sts	0x38F4, r1	; 0x8038f4 <txPart.3937>
            txAddrNow = TXLISTLEN;
    2396:	88 e0       	ldi	r24, 0x08	; 8
    2398:	80 93 35 3a 	sts	0x3A35, r24	; 0x803a35 <txAddrNow>
    239c:	2e c0       	rjmp	.+92     	; 0x23fa <CheckSend+0xc0>
        } else if (txPart < txStrLen[txAddrNow]){
    239e:	50 91 f4 38 	lds	r21, 0x38F4	; 0x8038f4 <txPart.3937>
    23a2:	5e 17       	cp	r21, r30
    23a4:	60 f5       	brcc	.+88     	; 0x23fe <CheckSend+0xc4>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    23a6:	ce 2f       	mov	r28, r30
    23a8:	c5 1b       	sub	r28, r21
    23aa:	c1 32       	cpi	r28, 0x21	; 33
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <CheckSend+0x76>
    23ae:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	fc 01       	movw	r30, r24
    23b6:	e2 5c       	subi	r30, 0xC2	; 194
    23b8:	f5 4c       	sbci	r31, 0xC5	; 197
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	27 ee       	ldi	r18, 0xE7	; 231
    23c0:	3a e3       	ldi	r19, 0x3A	; 58
    23c2:	40 91 34 3a 	lds	r20, 0x3A34	; 0x803a34 <txTypeNow>
    23c6:	6c 2f       	mov	r22, r28
    23c8:	85 0f       	add	r24, r21
    23ca:	91 1d       	adc	r25, r1
    23cc:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
            txPart += EEreadLength;
    23d0:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <txPart.3937>
    23d4:	8c 0f       	add	r24, r28
    23d6:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    23da:	ec 2f       	mov	r30, r28
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	e9 51       	subi	r30, 0x19	; 25
    23e0:	f5 4c       	sbci	r31, 0xC5	; 197
    23e2:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    23e4:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <txBuffer>
    23e8:	81 11       	cpse	r24, r1
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <CheckSend+0xb8>
    23ec:	8b ed       	ldi	r24, 0xDB	; 219
    23ee:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <txBuffer>
            SerSend(&txBuffer[0]);
    23f2:	87 ee       	ldi	r24, 0xE7	; 231
    23f4:	9a e3       	ldi	r25, 0x3A	; 58
    23f6:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	0b c0       	rjmp	.+22     	; 0x2414 <CheckSend+0xda>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    23fe:	10 92 f4 38 	sts	0x38F4, r1	; 0x8038f4 <txPart.3937>
            ++txAddrNow;
    2402:	2f 5f       	subi	r18, 0xFF	; 255
    2404:	20 93 35 3a 	sts	0x3A35, r18	; 0x803a35 <txAddrNow>
    2408:	f8 cf       	rjmp	.-16     	; 0x23fa <CheckSend+0xc0>
        }
    } else if (serTxDone) return 0; //All is sent!
    240a:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	91 11       	cpse	r25, r1
    2412:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2414:	cf 91       	pop	r28
    2416:	08 95       	ret

00002418 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    241c:	c0 91 08 39 	lds	r28, 0x3908	; 0x803908 <responseList>
    2420:	cc 23       	and	r28, r28
    2422:	e9 f1       	breq	.+122    	; 0x249e <CheckResponse+0x86>
        --responseList;
    2424:	c1 50       	subi	r28, 0x01	; 1
    2426:	c0 93 08 39 	sts	0x3908, r28	; 0x803908 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    242a:	d0 91 f3 38 	lds	r29, 0x38F3	; 0x8038f3 <number.3941>
    242e:	2d 2f       	mov	r18, r29
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	f9 01       	movw	r30, r18
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	e7 5f       	subi	r30, 0xF7	; 247
    243a:	f6 4c       	sbci	r31, 0xC6	; 198
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	80 3f       	cpi	r24, 0xF0	; 240
    2442:	4f ef       	ldi	r20, 0xFF	; 255
    2444:	94 07       	cpc	r25, r20
    2446:	51 f4       	brne	.+20     	; 0x245c <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2448:	60 91 23 3a 	lds	r22, 0x3A23	; 0x803a23 <currObj+0x1a>
    244c:	70 91 24 3a 	lds	r23, 0x3A24	; 0x803a24 <currObj+0x1b>
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	80 91 15 3a 	lds	r24, 0x3A15	; 0x803a15 <currObj+0xc>
    2456:	90 91 16 3a 	lds	r25, 0x3A16	; 0x803a16 <currObj+0xd>
    245a:	0d c0       	rjmp	.+26     	; 0x2476 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    245c:	d9 01       	movw	r26, r18
    245e:	aa 0f       	add	r26, r26
    2460:	bb 1f       	adc	r27, r27
    2462:	a7 57       	subi	r26, 0x77	; 119
    2464:	b6 4c       	sbci	r27, 0xC6	; 198
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	f9 01       	movw	r30, r18
    246c:	e7 5b       	subi	r30, 0xB7	; 183
    246e:	f6 4c       	sbci	r31, 0xC6	; 198
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	4c 91       	ld	r20, X
    2476:	4d dd       	rcall	.-1382   	; 0x1f12 <PrepareSending>
        }
        ++number;
    2478:	df 5f       	subi	r29, 0xFF	; 255
    247a:	d0 93 f3 38 	sts	0x38F3, r29	; 0x8038f3 <number.3941>

        if (responseList == 0) {
    247e:	c1 11       	cpse	r28, r1
    2480:	0d c0       	rjmp	.+26     	; 0x249c <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    2482:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    248c:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            RXCNT = 0;
    2490:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    2492:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
            number = 0;
    2496:	10 92 f3 38 	sts	0x38F3, r1	; 0x8038f3 <number.3941>
    249a:	01 c0       	rjmp	.+2      	; 0x249e <CheckResponse+0x86>
            return 0;
        }
        return 1;
    249c:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    249e:	8c 2f       	mov	r24, r28
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	08 95       	ret

000024a6 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    24a6:	3f 92       	push	r3
    24a8:	4f 92       	push	r4
    24aa:	5f 92       	push	r5
    24ac:	6f 92       	push	r6
    24ae:	7f 92       	push	r7
    24b0:	8f 92       	push	r8
    24b2:	9f 92       	push	r9
    24b4:	af 92       	push	r10
    24b6:	bf 92       	push	r11
    24b8:	cf 92       	push	r12
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	a1 97       	sbiw	r28, 0x21	; 33
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    24d4:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <currDepth>
    24d8:	8f 3f       	cpi	r24, 0xFF	; 255
    24da:	49 f4       	brne	.+18     	; 0x24ee <CheckInput+0x48>
        //Start at first location
        PopulateObject(route[0], &currObj);
    24dc:	69 e0       	ldi	r22, 0x09	; 9
    24de:	7a e3       	ldi	r23, 0x3A	; 58
    24e0:	80 91 c9 39 	lds	r24, 0x39C9	; 0x8039c9 <route>
    24e4:	90 91 ca 39 	lds	r25, 0x39CA	; 0x8039ca <route+0x1>
    24e8:	cd dd       	rcall	.-1126   	; 0x2084 <PopulateObject>
        currDepth = 0;
    24ea:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <currDepth>
    }

    if (serRxDone){
    24ee:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
    24f2:	88 23       	and	r24, r24
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <CheckInput+0x52>
    24f6:	60 c2       	rjmp	.+1216   	; 0x29b8 <CheckInput+0x512>

        //Special input requested from user by game
        if (specialInput[0]){
    24f8:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <specialInput>
    24fc:	88 23       	and	r24, r24
    24fe:	09 f4       	brne	.+2      	; 0x2502 <CheckInput+0x5c>
    2500:	57 c0       	rjmp	.+174    	; 0x25b0 <CheckInput+0x10a>
            specialPassed = 0;
    2502:	10 92 f7 38 	sts	0x38F7, r1	; 0x8038f7 <specialPassed>
            data[0] = 'a';
    2506:	81 e6       	ldi	r24, 0x61	; 97
    2508:	f8 01       	movw	r30, r16
    250a:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    250c:	68 ef       	ldi	r22, 0xF8	; 248
    250e:	78 e3       	ldi	r23, 0x38	; 56
    2510:	83 e6       	ldi	r24, 0x63	; 99
    2512:	9a e3       	ldi	r25, 0x3A	; 58
    2514:	e4 dc       	rcall	.-1592   	; 0x1ede <StartsWith>
    2516:	f8 2e       	mov	r15, r24
    2518:	88 23       	and	r24, r24
    251a:	21 f0       	breq	.+8      	; 0x2524 <CheckInput+0x7e>
                specialPassed = 1;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <specialPassed>
    2522:	04 c0       	rjmp	.+8      	; 0x252c <CheckInput+0x86>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2524:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <specialInput>
    2528:	81 33       	cpi	r24, 0x31	; 49
    252a:	11 f0       	breq	.+4      	; 0x2530 <CheckInput+0x8a>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    252c:	f1 2c       	mov	r15, r1
    252e:	46 c2       	rjmp	.+1164   	; 0x29bc <CheckInput+0x516>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2530:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <specialInput+0x2>
    2534:	81 11       	cpse	r24, r1
    2536:	fa cf       	rjmp	.-12     	; 0x252c <CheckInput+0x86>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2538:	83 e6       	ldi	r24, 0x63	; 99
    253a:	9a e3       	ldi	r25, 0x3A	; 58
    253c:	db de       	rcall	.-586    	; 0x22f4 <CleanInput>
                specialPassed = 2;
    253e:	92 e0       	ldi	r25, 0x02	; 2
    2540:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <specialPassed>
                data[1] = 0;
    2544:	f8 01       	movw	r30, r16
    2546:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	80 f3       	brcs	.-32     	; 0x252c <CheckInput+0x86>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    254c:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    2550:	81 33       	cpi	r24, 0x31	; 49
    2552:	61 f0       	breq	.+24     	; 0x256c <CheckInput+0xc6>
    2554:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    2558:	82 33       	cpi	r24, 0x32	; 50
    255a:	41 f0       	breq	.+16     	; 0x256c <CheckInput+0xc6>
    255c:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    2560:	83 33       	cpi	r24, 0x33	; 51
    2562:	21 f0       	breq	.+8      	; 0x256c <CheckInput+0xc6>
    2564:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    2568:	84 33       	cpi	r24, 0x34	; 52
    256a:	01 f7       	brne	.-64     	; 0x252c <CheckInput+0x86>
                        serRx[1] |= 0x20;
    256c:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    2570:	80 62       	ori	r24, 0x20	; 32
    2572:	80 93 64 3a 	sts	0x3A64, r24	; 0x803a64 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2576:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    257a:	81 36       	cpi	r24, 0x61	; 97
    257c:	61 f0       	breq	.+24     	; 0x2596 <CheckInput+0xf0>
    257e:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    2582:	85 36       	cpi	r24, 0x65	; 101
    2584:	41 f0       	breq	.+16     	; 0x2596 <CheckInput+0xf0>
    2586:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    258a:	86 36       	cpi	r24, 0x66	; 102
    258c:	21 f0       	breq	.+8      	; 0x2596 <CheckInput+0xf0>
    258e:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    2592:	87 37       	cpi	r24, 0x77	; 119
    2594:	59 f6       	brne	.-106    	; 0x252c <CheckInput+0x86>
                            data[1] = specialInput[1]+0x11;
    2596:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <specialInput+0x1>
    259a:	8f 5e       	subi	r24, 0xEF	; 239
    259c:	f8 01       	movw	r30, r16
    259e:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    25a0:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    25a4:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    25a6:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <serRx+0x1>
    25aa:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    25ac:	14 82       	std	Z+4, r1	; 0x04
    25ae:	06 c2       	rjmp	.+1036   	; 0x29bc <CheckInput+0x516>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    25b0:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
    25b4:	83 32       	cpi	r24, 0x23	; 35
    25b6:	89 f5       	brne	.+98     	; 0x261a <CheckInput+0x174>
    25b8:	8d b3       	in	r24, 0x1d	; 29
    25ba:	86 30       	cpi	r24, 0x06	; 6
    25bc:	71 f5       	brne	.+92     	; 0x261a <CheckInput+0x174>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    25c4:	fc 01       	movw	r30, r24
    25c6:	ed 59       	subi	r30, 0x9D	; 157
    25c8:	f5 4c       	sbci	r31, 0xC5	; 197
    25ca:	20 81       	ld	r18, Z
    25cc:	20 53       	subi	r18, 0x30	; 48
    25ce:	20 83       	st	Z, r18
                    bitNr *= 10;
    25d0:	11 0f       	add	r17, r17
    25d2:	21 2f       	mov	r18, r17
    25d4:	22 0f       	add	r18, r18
    25d6:	22 0f       	add	r18, r18
    25d8:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    25da:	20 91 64 3a 	lds	r18, 0x3A64	; 0x803a64 <serRx+0x1>
    25de:	23 30       	cpi	r18, 0x03	; 3
    25e0:	48 f4       	brcc	.+18     	; 0x25f4 <CheckInput+0x14e>
                    if (serRx[x] < 10) {
    25e2:	20 81       	ld	r18, Z
    25e4:	2a 30       	cpi	r18, 0x0A	; 10
    25e6:	b8 f4       	brcc	.+46     	; 0x2616 <CheckInput+0x170>
                        bitNr += serRx[x];
    25e8:	20 81       	ld	r18, Z
    25ea:	12 0f       	add	r17, r18
    25ec:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    25ee:	84 30       	cpi	r24, 0x04	; 4
    25f0:	91 05       	cpc	r25, r1
    25f2:	41 f7       	brne	.-48     	; 0x25c4 <CheckInput+0x11e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    25f4:	81 2f       	mov	r24, r17
    25f6:	8f 77       	andi	r24, 0x7F	; 127
    25f8:	71 f0       	breq	.+28     	; 0x2616 <CheckInput+0x170>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    25fa:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx+0x4>
    25fe:	60 91 68 3a 	lds	r22, 0x3A68	; 0x803a68 <serRx+0x5>
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	78 2b       	or	r23, r24
    2606:	81 2f       	mov	r24, r17
    2608:	80 95       	com	r24
    260a:	16 dc       	rcall	.-2004   	; 0x1e38 <Cheat>
    260c:	88 23       	and	r24, r24
    260e:	19 f0       	breq	.+6      	; 0x2616 <CheckInput+0x170>
    2610:	81 2f       	mov	r24, r17
    2612:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	50 c0       	rjmp	.+160    	; 0x26ba <CheckInput+0x214>
    261a:	d8 01       	movw	r26, r16
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2620:	fc 01       	movw	r30, r24
    2622:	ed 59       	subi	r30, 0x9D	; 157
    2624:	f5 4c       	sbci	r31, 0xC5	; 197
    2626:	20 81       	ld	r18, Z
    2628:	21 34       	cpi	r18, 0x41	; 65
    262a:	18 f0       	brcs	.+6      	; 0x2632 <CheckInput+0x18c>
    262c:	20 81       	ld	r18, Z
    262e:	2b 35       	cpi	r18, 0x5B	; 91
    2630:	10 f0       	brcs	.+4      	; 0x2636 <CheckInput+0x190>
    2632:	20 81       	ld	r18, Z
    2634:	02 c0       	rjmp	.+4      	; 0x263a <CheckInput+0x194>
    2636:	20 81       	ld	r18, Z
    2638:	20 62       	ori	r18, 0x20	; 32
    263a:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    263c:	20 81       	ld	r18, Z
    263e:	21 11       	cpse	r18, r1
    2640:	05 c0       	rjmp	.+10     	; 0x264c <CheckInput+0x1a6>
                    data[x] = 0;
    2642:	f8 01       	movw	r30, r16
    2644:	e8 0f       	add	r30, r24
    2646:	f1 1d       	adc	r31, r1
    2648:	10 82       	st	Z, r1
                    break;
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <CheckInput+0x1b0>
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2650:	81 34       	cpi	r24, 0x41	; 65
    2652:	91 05       	cpc	r25, r1
    2654:	29 f7       	brne	.-54     	; 0x2620 <CheckInput+0x17a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2656:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <serRx>
                data[0] = 0;
    265a:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    265c:	81 11       	cpse	r24, r1
    265e:	05 c0       	rjmp	.+10     	; 0x266a <CheckInput+0x1c4>
                data[0] = 0;
    2660:	10 82       	st	Z, r1
                RXCNT = 0;
    2662:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2664:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    2668:	a7 c1       	rjmp	.+846    	; 0x29b8 <CheckInput+0x512>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    266a:	80 81       	ld	r24, Z
    266c:	8f 33       	cpi	r24, 0x3F	; 63
    266e:	11 f0       	breq	.+4      	; 0x2674 <CheckInput+0x1ce>
    2670:	88 36       	cpi	r24, 0x68	; 104
    2672:	39 f5       	brne	.+78     	; 0x26c2 <CheckInput+0x21c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2674:	89 e5       	ldi	r24, 0x59	; 89
    2676:	9a e7       	ldi	r25, 0x7A	; 122
    2678:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    267c:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    2680:	84 e0       	ldi	r24, 0x04	; 4
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    2688:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    2694:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2698:	23 e9       	ldi	r18, 0x93	; 147
    269a:	3b e7       	ldi	r19, 0x7B	; 123
    269c:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    26a0:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    26a4:	2d e6       	ldi	r18, 0x6D	; 109
    26a6:	34 e0       	ldi	r19, 0x04	; 4
    26a8:	20 93 4b 39 	sts	0x394B, r18	; 0x80394b <reactStr+0x42>
    26ac:	30 93 4c 39 	sts	0x394C, r19	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    26b0:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    26b4:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	68 dc       	rcall	.-1840   	; 0x1f8c <SetStandardResponse>
    26bc:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <responseList>
    26c0:	7b c1       	rjmp	.+758    	; 0x29b8 <CheckInput+0x512>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    26c2:	81 36       	cpi	r24, 0x61	; 97
    26c4:	d9 f4       	brne	.+54     	; 0x26fc <CheckInput+0x256>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26c6:	89 e5       	ldi	r24, 0x59	; 89
    26c8:	9a e7       	ldi	r25, 0x7A	; 122
    26ca:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    26ce:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    26d2:	84 e0       	ldi	r24, 0x04	; 4
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    26da:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    26e6:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26ea:	2e e6       	ldi	r18, 0x6E	; 110
    26ec:	3a e7       	ldi	r19, 0x7A	; 122
    26ee:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    26f2:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    26f6:	25 e2       	ldi	r18, 0x25	; 37
    26f8:	31 e0       	ldi	r19, 0x01	; 1
    26fa:	d6 cf       	rjmp	.-84     	; 0x26a8 <CheckInput+0x202>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    26fc:	87 37       	cpi	r24, 0x77	; 119
    26fe:	09 f0       	breq	.+2      	; 0x2702 <CheckInput+0x25c>
    2700:	6e c0       	rjmp	.+220    	; 0x27de <CheckInput+0x338>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2702:	89 e5       	ldi	r24, 0x59	; 89
    2704:	9a e7       	ldi	r25, 0x7A	; 122
    2706:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    270a:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    270e:	84 e0       	ldi	r24, 0x04	; 4
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    2716:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    271a:	21 e0       	ldi	r18, 0x01	; 1
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	20 93 89 39 	sts	0x3989, r18	; 0x803989 <reactStr+0x80>
    2722:	30 93 8a 39 	sts	0x398A, r19	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2726:	8d e8       	ldi	r24, 0x8D	; 141
    2728:	96 e7       	ldi	r25, 0x76	; 118
    272a:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    272e:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2732:	82 e1       	ldi	r24, 0x12	; 18
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    273a:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    273e:	20 93 8b 39 	sts	0x398B, r18	; 0x80398b <reactStr+0x82>
    2742:	30 93 8c 39 	sts	0x398C, r19	; 0x80398c <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    2746:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	19 f4       	brne	.+6      	; 0x2754 <CheckInput+0x2ae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    274e:	87 e8       	ldi	r24, 0x87	; 135
    2750:	96 e7       	ldi	r25, 0x76	; 118
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <CheckInput+0x2cc>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    2754:	82 30       	cpi	r24, 0x02	; 2
    2756:	49 f4       	brne	.+18     	; 0x276a <CheckInput+0x2c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2758:	84 e8       	ldi	r24, 0x84	; 132
    275a:	96 e7       	ldi	r25, 0x76	; 118
    275c:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    2760:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	1e c0       	rjmp	.+60     	; 0x27a6 <CheckInput+0x300>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    276a:	83 30       	cpi	r24, 0x03	; 3
    276c:	49 f4       	brne	.+18     	; 0x2780 <CheckInput+0x2da>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    276e:	8e e7       	ldi	r24, 0x7E	; 126
    2770:	96 e7       	ldi	r25, 0x76	; 118
    2772:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    2776:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    277a:	86 e0       	ldi	r24, 0x06	; 6
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	13 c0       	rjmp	.+38     	; 0x27a6 <CheckInput+0x300>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    2780:	84 30       	cpi	r24, 0x04	; 4
    2782:	49 f4       	brne	.+18     	; 0x2796 <CheckInput+0x2f0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2784:	89 e7       	ldi	r24, 0x79	; 121
    2786:	96 e7       	ldi	r25, 0x76	; 118
    2788:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    278c:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2790:	85 e0       	ldi	r24, 0x05	; 5
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <CheckInput+0x300>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	96 e7       	ldi	r25, 0x76	; 118
    279a:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    279e:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    27a2:	82 e4       	ldi	r24, 0x42	; 66
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    27aa:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    27ae:	20 93 8d 39 	sts	0x398D, r18	; 0x80398d <reactStr+0x84>
    27b2:	30 93 8e 39 	sts	0x398E, r19	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27b6:	8f e5       	ldi	r24, 0x5F	; 95
    27b8:	96 e7       	ldi	r25, 0x76	; 118
    27ba:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x6>
    27be:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    27c2:	8a e1       	ldi	r24, 0x1A	; 26
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x46>
    27ca:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    27d6:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    27da:	84 e0       	ldi	r24, 0x04	; 4
    27dc:	6e cf       	rjmp	.-292    	; 0x26ba <CheckInput+0x214>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    27de:	81 37       	cpi	r24, 0x71	; 113
    27e0:	d9 f4       	brne	.+54     	; 0x2818 <CheckInput+0x372>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27e2:	89 e5       	ldi	r24, 0x59	; 89
    27e4:	9a e7       	ldi	r25, 0x7A	; 122
    27e6:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    27ea:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    27ee:	84 e0       	ldi	r24, 0x04	; 4
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    27f6:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    2802:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3a e7       	ldi	r19, 0x7A	; 122
    280a:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    280e:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2812:	25 e5       	ldi	r18, 0x55	; 85
    2814:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2816:	48 cf       	rjmp	.-368    	; 0x26a8 <CheckInput+0x202>
    2818:	6a e0       	ldi	r22, 0x0A	; 10
    281a:	7e eb       	ldi	r23, 0xBE	; 190
    281c:	c8 01       	movw	r24, r16
    281e:	5f db       	rcall	.-2370   	; 0x1ede <StartsWith>
    2820:	88 23       	and	r24, r24
    2822:	f9 f0       	breq	.+62     	; 0x2862 <CheckInput+0x3bc>
    2824:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	81 2f       	mov	r24, r17
    282a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <WriteStatusBit>
    282e:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2830:	12 37       	cpi	r17, 0x72	; 114
    2832:	c9 f7       	brne	.-14     	; 0x2826 <CheckInput+0x380>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    2834:	0e 94 c3 09 	call	0x1386	; 0x1386 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    2838:	80 e2       	ldi	r24, 0x20	; 32
    283a:	ed e4       	ldi	r30, 0x4D	; 77
    283c:	fe eb       	ldi	r31, 0xBE	; 190
    283e:	de 01       	movw	r26, r28
    2840:	11 96       	adiw	r26, 0x01	; 1
    2842:	01 90       	ld	r0, Z+
    2844:	0d 92       	st	X+, r0
    2846:	8a 95       	dec	r24
    2848:	e1 f7       	brne	.-8      	; 0x2842 <CheckInput+0x39c>
                SerSpeed(60);
    284a:	8c e3       	ldi	r24, 0x3C	; 60
    284c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2850:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2854:	88 23       	and	r24, r24
    2856:	e1 f3       	breq	.-8      	; 0x2850 <CheckInput+0x3aa>
    2858:	ce 01       	movw	r24, r28
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    2860:	f7 cf       	rjmp	.-18     	; 0x2850 <CheckInput+0x3aa>
    2862:	60 e1       	ldi	r22, 0x10	; 16
    2864:	7e eb       	ldi	r23, 0xBE	; 190
    2866:	c8 01       	movw	r24, r16
    2868:	3a db       	rcall	.-2444   	; 0x1ede <StartsWith>
    286a:	88 23       	and	r24, r24
    286c:	61 f1       	breq	.+88     	; 0x28c6 <CheckInput+0x420>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    286e:	8f ef       	ldi	r24, 0xFF	; 255
    2870:	89 a3       	std	Y+33, r24	; 0x21
    2872:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	be 01       	movw	r22, r28
    2878:	6f 5d       	subi	r22, 0xDF	; 223
    287a:	7f 4f       	sbci	r23, 0xFF	; 255
    287c:	81 2f       	mov	r24, r17
    287e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <EEWrite>
    2882:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2884:	10 32       	cpi	r17, 0x20	; 32
    2886:	b1 f7       	brne	.-20     	; 0x2874 <CheckInput+0x3ce>
    2888:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	81 2f       	mov	r24, r17
    288e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <WriteStatusBit>
    2892:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2894:	12 37       	cpi	r17, 0x72	; 114
    2896:	c9 f7       	brne	.-14     	; 0x288a <CheckInput+0x3e4>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    2898:	0e 94 c3 09 	call	0x1386	; 0x1386 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    289c:	8f e0       	ldi	r24, 0x0F	; 15
    289e:	ed e6       	ldi	r30, 0x6D	; 109
    28a0:	fe eb       	ldi	r31, 0xBE	; 190
    28a2:	de 01       	movw	r26, r28
    28a4:	11 96       	adiw	r26, 0x01	; 1
    28a6:	01 90       	ld	r0, Z+
    28a8:	0d 92       	st	X+, r0
    28aa:	8a 95       	dec	r24
    28ac:	e1 f7       	brne	.-8      	; 0x28a6 <CheckInput+0x400>
                SerSpeed(60);
    28ae:	8c e3       	ldi	r24, 0x3C	; 60
    28b0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    28b4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    28b8:	88 23       	and	r24, r24
    28ba:	e1 f3       	breq	.-8      	; 0x28b4 <CheckInput+0x40e>
    28bc:	ce 01       	movw	r24, r28
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    28c4:	f7 cf       	rjmp	.-18     	; 0x28b4 <CheckInput+0x40e>
    28c6:	67 e4       	ldi	r22, 0x47	; 71
    28c8:	7e eb       	ldi	r23, 0xBE	; 190
    28ca:	c8 01       	movw	r24, r16
    28cc:	08 db       	rcall	.-2544   	; 0x1ede <StartsWith>
    28ce:	88 23       	and	r24, r24
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <CheckInput+0x42e>
    28d2:	2c ce       	rjmp	.-936    	; 0x252c <CheckInput+0x86>
    28d4:	89 e0       	ldi	r24, 0x09	; 9
    28d6:	c8 2e       	mov	r12, r24
    28d8:	89 e3       	ldi	r24, 0x39	; 57
    28da:	d8 2e       	mov	r13, r24
    28dc:	99 e4       	ldi	r25, 0x49	; 73
    28de:	e9 2e       	mov	r14, r25
    28e0:	99 e3       	ldi	r25, 0x39	; 57
    28e2:	f9 2e       	mov	r15, r25
    28e4:	09 e8       	ldi	r16, 0x89	; 137
    28e6:	19 e3       	ldi	r17, 0x39	; 57
    28e8:	28 e1       	ldi	r18, 0x18	; 24
    28ea:	32 2e       	mov	r3, r18
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ec:	3d e9       	ldi	r19, 0x9D	; 157
    28ee:	63 2e       	mov	r6, r19
    28f0:	34 e7       	ldi	r19, 0x74	; 116
    28f2:	73 2e       	mov	r7, r19
    reactStr[1][number]=length;
    28f4:	42 e0       	ldi	r20, 0x02	; 2
    28f6:	84 2e       	mov	r8, r20
    28f8:	91 2c       	mov	r9, r1
    reactStr[2][number]=type;
    28fa:	aa 24       	eor	r10, r10
    28fc:	a3 94       	inc	r10
    28fe:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2900:	67 e5       	ldi	r22, 0x57	; 87
    2902:	46 2e       	mov	r4, r22
    2904:	6a e7       	ldi	r22, 0x7A	; 122
    2906:	56 2e       	mov	r5, r22
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	be 01       	movw	r22, r28
    290c:	6f 5f       	subi	r22, 0xFF	; 255
    290e:	7f 4f       	sbci	r23, 0xFF	; 255
    2910:	83 2d       	mov	r24, r3
    2912:	0e 94 4e 08 	call	0x109c	; 0x109c <EERead>
                    bit = 0xff-bit;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	80 95       	com	r24
    291a:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    291c:	f6 01       	movw	r30, r12
    291e:	60 82       	st	Z, r6
    2920:	71 82       	std	Z+1, r7	; 0x01
    reactStr[1][number]=length;
    2922:	f7 01       	movw	r30, r14
    2924:	80 82       	st	Z, r8
    2926:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2928:	f8 01       	movw	r30, r16
    292a:	a0 82       	st	Z, r10
    292c:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    292e:	28 2f       	mov	r18, r24
    2930:	22 95       	swap	r18
    2932:	2f 70       	andi	r18, 0x0F	; 15
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	23 57       	subi	r18, 0x73	; 115
    2938:	3b 48       	sbci	r19, 0x8B	; 139
    293a:	f6 01       	movw	r30, r12
    293c:	22 83       	std	Z+2, r18	; 0x02
    293e:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    2940:	f7 01       	movw	r30, r14
    2942:	a2 82       	std	Z+2, r10	; 0x02
    2944:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2946:	f8 01       	movw	r30, r16
    2948:	a2 82       	std	Z+2, r10	; 0x02
    294a:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    294c:	8f 70       	andi	r24, 0x0F	; 15
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	83 57       	subi	r24, 0x73	; 115
    2952:	9b 48       	sbci	r25, 0x8B	; 139
    2954:	f6 01       	movw	r30, r12
    2956:	84 83       	std	Z+4, r24	; 0x04
    2958:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    295a:	f7 01       	movw	r30, r14
    295c:	a4 82       	std	Z+4, r10	; 0x04
    295e:	b5 82       	std	Z+5, r11	; 0x05
    reactStr[2][number]=type;
    2960:	f8 01       	movw	r30, r16
    2962:	a4 82       	std	Z+4, r10	; 0x04
    2964:	b5 82       	std	Z+5, r11	; 0x05
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2966:	f6 01       	movw	r30, r12
    2968:	46 82       	std	Z+6, r4	; 0x06
    296a:	57 82       	std	Z+7, r5	; 0x07
    reactStr[1][number]=length;
    296c:	f7 01       	movw	r30, r14
    296e:	86 82       	std	Z+6, r8	; 0x06
    2970:	97 82       	std	Z+7, r9	; 0x07
    reactStr[2][number]=type;
    2972:	f8 01       	movw	r30, r16
    2974:	a6 82       	std	Z+6, r10	; 0x06
    2976:	b7 82       	std	Z+7, r11	; 0x07
    2978:	33 94       	inc	r3
    297a:	f8 e0       	ldi	r31, 0x08	; 8
    297c:	cf 0e       	add	r12, r31
    297e:	d1 1c       	adc	r13, r1
    2980:	88 e0       	ldi	r24, 0x08	; 8
    2982:	e8 0e       	add	r14, r24
    2984:	f1 1c       	adc	r15, r1
    2986:	08 5f       	subi	r16, 0xF8	; 248
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    298a:	e0 e2       	ldi	r30, 0x20	; 32
    298c:	3e 12       	cpse	r3, r30
    298e:	bc cf       	rjmp	.-136    	; 0x2908 <CheckInput+0x462>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2990:	89 e5       	ldi	r24, 0x59	; 89
    2992:	9a e7       	ldi	r25, 0x7A	; 122
    2994:	80 93 47 39 	sts	0x3947, r24	; 0x803947 <reactStr+0x3e>
    2998:	90 93 48 39 	sts	0x3948, r25	; 0x803948 <reactStr+0x3f>
    reactStr[1][number]=length;
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	80 93 87 39 	sts	0x3987, r24	; 0x803987 <reactStr+0x7e>
    29a4:	90 93 88 39 	sts	0x3988, r25	; 0x803988 <reactStr+0x7f>
    reactStr[2][number]=type;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	80 93 c7 39 	sts	0x39C7, r24	; 0x8039c7 <reactStr+0xbe>
    29b0:	90 93 c8 39 	sts	0x39C8, r25	; 0x8039c8 <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    29b4:	30 92 08 39 	sts	0x3908, r3	; 0x803908 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    29b8:	ff 24       	eor	r15, r15
    29ba:	f3 94       	inc	r15
}
    29bc:	8f 2d       	mov	r24, r15
    29be:	a1 96       	adiw	r28, 0x21	; 33
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	ff 90       	pop	r15
    29ce:	ef 90       	pop	r14
    29d0:	df 90       	pop	r13
    29d2:	cf 90       	pop	r12
    29d4:	bf 90       	pop	r11
    29d6:	af 90       	pop	r10
    29d8:	9f 90       	pop	r9
    29da:	8f 90       	pop	r8
    29dc:	7f 90       	pop	r7
    29de:	6f 90       	pop	r6
    29e0:	5f 90       	pop	r5
    29e2:	4f 90       	pop	r4
    29e4:	3f 90       	pop	r3
    29e6:	08 95       	ret

000029e8 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    29e8:	5f 92       	push	r5
    29ea:	6f 92       	push	r6
    29ec:	7f 92       	push	r7
    29ee:	8f 92       	push	r8
    29f0:	9f 92       	push	r9
    29f2:	af 92       	push	r10
    29f4:	bf 92       	push	r11
    29f6:	cf 92       	push	r12
    29f8:	df 92       	push	r13
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	28 97       	sbiw	r28, 0x08	; 8
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2a12:	70 dc       	rcall	.-1824   	; 0x22f4 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2a14:	c8 01       	movw	r24, r16
    2a16:	6e dc       	rcall	.-1828   	; 0x22f4 <CleanInput>
    2a18:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2a1a:	88 23       	and	r24, r24
    2a1c:	11 f4       	brne	.+4      	; 0x2a22 <ProcessInput+0x3a>
    2a1e:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <ProcessInput+0x103a>

        //eXit to previous location
        if (data[0] == 'x'){
    2a22:	d8 01       	movw	r26, r16
    2a24:	8c 91       	ld	r24, X
    2a26:	88 37       	cpi	r24, 0x78	; 120
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <ProcessInput+0x44>
    2a2a:	45 c0       	rjmp	.+138    	; 0x2ab6 <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2a2c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <currDepth>
    2a30:	e8 2f       	mov	r30, r24
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	ee 0f       	add	r30, r30
    2a36:	ff 1f       	adc	r31, r31
    2a38:	e7 53       	subi	r30, 0x37	; 55
    2a3a:	f6 4c       	sbci	r31, 0xC6	; 198
    2a3c:	20 81       	ld	r18, Z
    2a3e:	31 81       	ldd	r19, Z+1	; 0x01
    2a40:	23 2b       	or	r18, r19
    2a42:	11 f0       	breq	.+4      	; 0x2a48 <ProcessInput+0x60>
    2a44:	81 11       	cpse	r24, r1
    2a46:	03 c0       	rjmp	.+6      	; 0x2a4e <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a48:	84 e4       	ldi	r24, 0x44	; 68
    2a4a:	96 e7       	ldi	r25, 0x76	; 118
    2a4c:	a5 c5       	rjmp	.+2890   	; 0x3598 <ProcessInput+0xbb0>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2a4e:	80 91 0f 3a 	lds	r24, 0x3A0F	; 0x803a0f <currObj+0x6>
    2a52:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CheckState>
    2a56:	88 23       	and	r24, r24
    2a58:	b9 f0       	breq	.+46     	; 0x2a88 <ProcessInput+0xa0>
                --currDepth;
    2a5a:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    2a5e:	e1 50       	subi	r30, 0x01	; 1
    2a60:	e0 93 2d 38 	sts	0x382D, r30	; 0x80382d <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	ee 0f       	add	r30, r30
    2a68:	ff 1f       	adc	r31, r31
    2a6a:	e7 53       	subi	r30, 0x37	; 55
    2a6c:	f6 4c       	sbci	r31, 0xC6	; 198
    2a6e:	69 e0       	ldi	r22, 0x09	; 9
    2a70:	7a e3       	ldi	r23, 0x3A	; 58
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	06 db       	rcall	.-2548   	; 0x2084 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2a78:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2a82:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2a86:	31 c2       	rjmp	.+1122   	; 0x2eea <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2a88:	80 91 2b 3a 	lds	r24, 0x3A2B	; 0x803a2b <currObj+0x22>
    2a8c:	90 91 2c 3a 	lds	r25, 0x3A2C	; 0x803a2c <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a90:	20 91 1d 3a 	lds	r18, 0x3A1D	; 0x803a1d <currObj+0x14>
    2a94:	30 91 1e 3a 	lds	r19, 0x3A1E	; 0x803a1e <currObj+0x15>
    2a98:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2a9c:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2aa0:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2aa4:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2aa8:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2aac:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2ab0:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x28>
    2ab4:	3e c6       	rjmp	.+3196   	; 0x3732 <ProcessInput+0xd4a>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2ab6:	85 36       	cpi	r24, 0x65	; 101
    2ab8:	19 f0       	breq	.+6      	; 0x2ac0 <ProcessInput+0xd8>
    2aba:	8f 36       	cpi	r24, 0x6F	; 111
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <ProcessInput+0xd8>
    2abe:	df c0       	rjmp	.+446    	; 0x2c7e <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2ac0:	b2 e0       	ldi	r27, 0x02	; 2
    2ac2:	fb 12       	cpse	r15, r27
    2ac4:	c1 cf       	rjmp	.-126    	; 0x2a48 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2ac6:	e0 90 2d 38 	lds	r14, 0x382D	; 0x80382d <currDepth>
    2aca:	f1 2c       	mov	r15, r1
    2acc:	f7 01       	movw	r30, r14
    2ace:	ee 0f       	add	r30, r30
    2ad0:	ff 1f       	adc	r31, r31
    2ad2:	e7 53       	subi	r30, 0x37	; 55
    2ad4:	f6 4c       	sbci	r31, 0xC6	; 198
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	d8 01       	movw	r26, r16
    2adc:	11 96       	adiw	r26, 0x01	; 1
    2ade:	6c 91       	ld	r22, X
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	9c db       	rcall	.-2248   	; 0x221e <FindChild>
    2ae6:	f7 01       	movw	r30, r14
    2ae8:	ee 0f       	add	r30, r30
    2aea:	ff 1f       	adc	r31, r31
    2aec:	e5 53       	subi	r30, 0x35	; 53
    2aee:	f6 4c       	sbci	r31, 0xC6	; 198
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2af4:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <currDepth>
    2af8:	29 2f       	mov	r18, r25
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	f9 01       	movw	r30, r18
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	e5 53       	subi	r30, 0x35	; 53
    2b04:	f6 4c       	sbci	r31, 0xC6	; 198
    2b06:	40 81       	ld	r20, Z
    2b08:	51 81       	ldd	r21, Z+1	; 0x01
    2b0a:	41 15       	cp	r20, r1
    2b0c:	51 05       	cpc	r21, r1
    2b0e:	21 f0       	breq	.+8      	; 0x2b18 <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    2b10:	68 ec       	ldi	r22, 0xC8	; 200
    2b12:	78 e3       	ldi	r23, 0x38	; 56
    2b14:	ca 01       	movw	r24, r20
    2b16:	1c c0       	rjmp	.+56     	; 0x2b50 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2b18:	99 23       	and	r25, r25
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <ProcessInput+0x136>
    2b1c:	99 c7       	rjmp	.+3890   	; 0x3a50 <ProcessInput+0x1068>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2b1e:	22 0f       	add	r18, r18
    2b20:	33 1f       	adc	r19, r19
    2b22:	f9 01       	movw	r30, r18
    2b24:	e9 53       	subi	r30, 0x39	; 57
    2b26:	f6 4c       	sbci	r31, 0xC6	; 198
    2b28:	d8 01       	movw	r26, r16
    2b2a:	11 96       	adiw	r26, 0x01	; 1
    2b2c:	6c 91       	ld	r22, X
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	1f db       	rcall	.-2498   	; 0x2172 <CheckLetter>
    2b34:	88 23       	and	r24, r24
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <ProcessInput+0x152>
    2b38:	8b c7       	rjmp	.+3862   	; 0x3a50 <ProcessInput+0x1068>
                        PopulateObject(route[currDepth-1], &actObj1);
    2b3a:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	e9 53       	subi	r30, 0x39	; 57
    2b46:	f6 4c       	sbci	r31, 0xC6	; 198
    2b48:	68 ec       	ldi	r22, 0xC8	; 200
    2b4a:	78 e3       	ldi	r23, 0x38	; 56
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	99 da       	rcall	.-2766   	; 0x2084 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2b52:	f8 01       	movw	r30, r16
    2b54:	80 81       	ld	r24, Z
    2b56:	85 36       	cpi	r24, 0x65	; 101
    2b58:	c9 f4       	brne	.+50     	; 0x2b8c <ProcessInput+0x1a4>
    2b5a:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3981+0x8>
    2b5e:	80 fd       	sbrc	r24, 0
    2b60:	1e c0       	rjmp	.+60     	; 0x2b9e <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b62:	8d e9       	ldi	r24, 0x9D	; 157
    2b64:	99 e7       	ldi	r25, 0x79	; 121
    2b66:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2b6a:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2b6e:	8e e1       	ldi	r24, 0x1E	; 30
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2b76:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    2b82:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2b86:	72 e0       	ldi	r23, 0x02	; 2
    2b88:	77 2e       	mov	r7, r23
    2b8a:	30 c7       	rjmp	.+3680   	; 0x39ec <ProcessInput+0x1004>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2b8c:	8f 36       	cpi	r24, 0x6F	; 111
    2b8e:	39 f4       	brne	.+14     	; 0x2b9e <ProcessInput+0x1b6>
    2b90:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3981+0x8>
    2b94:	81 fd       	sbrc	r24, 1
    2b96:	03 c0       	rjmp	.+6      	; 0x2b9e <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b98:	82 e8       	ldi	r24, 0x82	; 130
    2b9a:	99 e7       	ldi	r25, 0x79	; 121
    2b9c:	fd c4       	rjmp	.+2554   	; 0x3598 <ProcessInput+0xbb0>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2b9e:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3981+0x6>
    2ba2:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CheckState>
    2ba6:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    2baa:	88 23       	and	r24, r24
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <ProcessInput+0x1c8>
    2bae:	49 c0       	rjmp	.+146    	; 0x2c42 <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2bb0:	ae 2f       	mov	r26, r30
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	aa 0f       	add	r26, r26
    2bb6:	bb 1f       	adc	r27, r27
    2bb8:	a5 53       	subi	r26, 0x35	; 53
    2bba:	b6 4c       	sbci	r27, 0xC6	; 198
    2bbc:	8d 91       	ld	r24, X+
    2bbe:	9c 91       	ld	r25, X
    2bc0:	89 2b       	or	r24, r25
    2bc2:	11 f0       	breq	.+4      	; 0x2bc8 <ProcessInput+0x1e0>
    2bc4:	ef 5f       	subi	r30, 0xFF	; 255
    2bc6:	01 c0       	rjmp	.+2      	; 0x2bca <ProcessInput+0x1e2>
    2bc8:	e1 50       	subi	r30, 0x01	; 1
    2bca:	e0 93 2d 38 	sts	0x382D, r30	; 0x80382d <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2bce:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	ee 0f       	add	r30, r30
    2bd6:	ff 1f       	adc	r31, r31
    2bd8:	e7 53       	subi	r30, 0x37	; 55
    2bda:	f6 4c       	sbci	r31, 0xC6	; 198
    2bdc:	69 e0       	ldi	r22, 0x09	; 9
    2bde:	7a e3       	ldi	r23, 0x3A	; 58
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	4f da       	rcall	.-2914   	; 0x2084 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2be6:	80 91 25 3a 	lds	r24, 0x3A25	; 0x803a25 <currObj+0x1c>
    2bea:	90 91 26 3a 	lds	r25, 0x3A26	; 0x803a26 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bee:	20 91 17 3a 	lds	r18, 0x3A17	; 0x803a17 <currObj+0xe>
    2bf2:	30 91 18 3a 	lds	r19, 0x3A18	; 0x803a18 <currObj+0xf>
    2bf6:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2bfa:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2bfe:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2c02:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2c06:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2c0a:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c0e:	89 e5       	ldi	r24, 0x59	; 89
    2c10:	9a e7       	ldi	r25, 0x7A	; 122
    2c12:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    2c16:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    2c22:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x84>
    2c2e:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2c32:	80 91 0d 3a 	lds	r24, 0x3A0D	; 0x803a0d <currObj+0x4>
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2c3c:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2c40:	91 c4       	rjmp	.+2338   	; 0x3564 <ProcessInput+0xb7c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	e5 53       	subi	r30, 0x35	; 53
    2c4a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c4c:	10 82       	st	Z, r1
    2c4e:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2c50:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3981+0x22>
    2c54:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3981+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c58:	20 91 dc 38 	lds	r18, 0x38DC	; 0x8038dc <actObj1.3981+0x14>
    2c5c:	30 91 dd 38 	lds	r19, 0x38DD	; 0x8038dd <actObj1.3981+0x15>
    2c60:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2c64:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2c68:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2c6c:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2c70:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2c74:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2c78:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3981+0x28>
    2c7c:	5a c5       	rjmp	.+2740   	; 0x3732 <ProcessInput+0xd4a>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2c7e:	8c 36       	cpi	r24, 0x6C	; 108
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <ProcessInput+0x29c>
    2c82:	57 c1       	rjmp	.+686    	; 0x2f32 <ProcessInput+0x54a>
    2c84:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
            if (inputLen == 1) {
    2c88:	b1 e0       	ldi	r27, 0x01	; 1
    2c8a:	fb 12       	cpse	r15, r27
    2c8c:	f6 c0       	rjmp	.+492    	; 0x2e7a <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2c8e:	80 91 25 3a 	lds	r24, 0x3A25	; 0x803a25 <currObj+0x1c>
    2c92:	90 91 26 3a 	lds	r25, 0x3A26	; 0x803a26 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c96:	20 91 17 3a 	lds	r18, 0x3A17	; 0x803a17 <currObj+0xe>
    2c9a:	30 91 18 3a 	lds	r19, 0x3A18	; 0x803a18 <currObj+0xf>
    2c9e:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2ca2:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2ca6:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2caa:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2cae:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2cb2:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cb6:	89 e5       	ldi	r24, 0x59	; 89
    2cb8:	9a e7       	ldi	r25, 0x7A	; 122
    2cba:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    2cbe:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    2cca:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x84>
    2cd6:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cda:	2b ee       	ldi	r18, 0xEB	; 235
    2cdc:	39 e7       	ldi	r19, 0x79	; 121
    2cde:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x6>
    2ce2:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    2ce6:	25 e1       	ldi	r18, 0x15	; 21
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x46>
    2cee:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    2cf2:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    2cf6:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	ee 0f       	add	r30, r30
    2cfe:	ff 1f       	adc	r31, r31
    2d00:	e5 53       	subi	r30, 0x35	; 53
    2d02:	f6 4c       	sbci	r31, 0xC6	; 198
    2d04:	10 82       	st	Z, r1
    2d06:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2d08:	84 e0       	ldi	r24, 0x04	; 4
    2d0a:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d0c:	97 e5       	ldi	r25, 0x57	; 87
    2d0e:	c9 2e       	mov	r12, r25
    2d10:	9a e7       	ldi	r25, 0x7A	; 122
    2d12:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2d14:	22 e0       	ldi	r18, 0x02	; 2
    2d16:	a2 2e       	mov	r10, r18
    2d18:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2d1a:	88 24       	eor	r8, r8
    2d1c:	83 94       	inc	r8
    2d1e:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2d20:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <currDepth>
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9c 01       	movw	r18, r24
    2d28:	22 0f       	add	r18, r18
    2d2a:	33 1f       	adc	r19, r19
    2d2c:	f9 01       	movw	r30, r18
    2d2e:	e5 53       	subi	r30, 0x35	; 53
    2d30:	f6 4c       	sbci	r31, 0xC6	; 198
    2d32:	7f 01       	movw	r14, r30
    2d34:	40 81       	ld	r20, Z
    2d36:	51 81       	ldd	r21, Z+1	; 0x01
    2d38:	f9 01       	movw	r30, r18
    2d3a:	e7 53       	subi	r30, 0x37	; 55
    2d3c:	f6 4c       	sbci	r31, 0xC6	; 198
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	6c da       	rcall	.-2856   	; 0x221e <FindChild>
    2d46:	d7 01       	movw	r26, r14
    2d48:	8d 93       	st	X+, r24
    2d4a:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2d4c:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	ee 0f       	add	r30, r30
    2d54:	ff 1f       	adc	r31, r31
    2d56:	e5 53       	subi	r30, 0x35	; 53
    2d58:	f6 4c       	sbci	r31, 0xC6	; 198
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <ProcessInput+0x37c>
    2d62:	4a c0       	rjmp	.+148    	; 0x2df8 <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2d64:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    2d68:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    2d6c:	82 17       	cp	r24, r18
    2d6e:	93 07       	cpc	r25, r19
    2d70:	09 f4       	brne	.+2      	; 0x2d74 <ProcessInput+0x38c>
    2d72:	42 c0       	rjmp	.+132    	; 0x2df8 <ProcessInput+0x410>
    2d74:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    2d78:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    2d7c:	82 17       	cp	r24, r18
    2d7e:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2d80:	d9 f1       	breq	.+118    	; 0x2df8 <ProcessInput+0x410>
    2d82:	68 ec       	ldi	r22, 0xC8	; 200
    2d84:	78 e3       	ldi	r23, 0x38	; 56
    2d86:	7e d9       	rcall	.-3332   	; 0x2084 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2d88:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3981+0x1a>
    2d8c:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d90:	e6 2d       	mov	r30, r6
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	df 01       	movw	r26, r30
    2d96:	aa 0f       	add	r26, r26
    2d98:	bb 1f       	adc	r27, r27
    2d9a:	a7 5f       	subi	r26, 0xF7	; 247
    2d9c:	b6 4c       	sbci	r27, 0xC6	; 198
    2d9e:	20 91 d4 38 	lds	r18, 0x38D4	; 0x8038d4 <actObj1.3981+0xc>
    2da2:	30 91 d5 38 	lds	r19, 0x38D5	; 0x8038d5 <actObj1.3981+0xd>
    2da6:	2d 93       	st	X+, r18
    2da8:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2daa:	df 01       	movw	r26, r30
    2dac:	aa 0f       	add	r26, r26
    2dae:	bb 1f       	adc	r27, r27
    2db0:	a7 5b       	subi	r26, 0xB7	; 183
    2db2:	b6 4c       	sbci	r27, 0xC6	; 198
    2db4:	8d 93       	st	X+, r24
    2db6:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2db8:	ee 0f       	add	r30, r30
    2dba:	ff 1f       	adc	r31, r31
    2dbc:	e7 57       	subi	r30, 0x77	; 119
    2dbe:	f6 4c       	sbci	r31, 0xC6	; 198
    2dc0:	10 82       	st	Z, r1
    2dc2:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	86 0d       	add	r24, r6
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	63 94       	inc	r6
    2dcc:	63 94       	inc	r6
    2dce:	fc 01       	movw	r30, r24
    2dd0:	ee 0f       	add	r30, r30
    2dd2:	ff 1f       	adc	r31, r31
    2dd4:	e7 5f       	subi	r30, 0xF7	; 247
    2dd6:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd8:	c0 82       	st	Z, r12
    2dda:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2ddc:	fc 01       	movw	r30, r24
    2dde:	ee 0f       	add	r30, r30
    2de0:	ff 1f       	adc	r31, r31
    2de2:	e7 5b       	subi	r30, 0xB7	; 183
    2de4:	f6 4c       	sbci	r31, 0xC6	; 198
    2de6:	a0 82       	st	Z, r10
    2de8:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	fc 01       	movw	r30, r24
    2df0:	e7 57       	subi	r30, 0x77	; 119
    2df2:	f6 4c       	sbci	r31, 0xC6	; 198
    2df4:	80 82       	st	Z, r8
    2df6:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2df8:	20 91 2d 38 	lds	r18, 0x382D	; 0x80382d <currDepth>
    2dfc:	82 2f       	mov	r24, r18
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	fc 01       	movw	r30, r24
    2e02:	ee 0f       	add	r30, r30
    2e04:	ff 1f       	adc	r31, r31
    2e06:	e5 53       	subi	r30, 0x35	; 53
    2e08:	f6 4c       	sbci	r31, 0xC6	; 198
    2e0a:	40 81       	ld	r20, Z
    2e0c:	51 81       	ldd	r21, Z+1	; 0x01
    2e0e:	45 2b       	or	r20, r21
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <ProcessInput+0x42c>
    2e12:	86 cf       	rjmp	.-244    	; 0x2d20 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    2e14:	22 23       	and	r18, r18
    2e16:	69 f1       	breq	.+90     	; 0x2e72 <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    2e18:	88 0f       	add	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	e9 53       	subi	r30, 0x39	; 57
    2e20:	f6 4c       	sbci	r31, 0xC6	; 198
    2e22:	68 ec       	ldi	r22, 0xC8	; 200
    2e24:	78 e3       	ldi	r23, 0x38	; 56
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	2c d9       	rcall	.-3496   	; 0x2084 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2e2c:	20 91 e2 38 	lds	r18, 0x38E2	; 0x8038e2 <actObj1.3981+0x1a>
    2e30:	30 91 e3 38 	lds	r19, 0x38E3	; 0x8038e3 <actObj1.3981+0x1b>
    2e34:	77 24       	eor	r7, r7
    2e36:	73 94       	inc	r7
    2e38:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e3a:	86 2d       	mov	r24, r6
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	fc 01       	movw	r30, r24
    2e40:	ee 0f       	add	r30, r30
    2e42:	ff 1f       	adc	r31, r31
    2e44:	e7 5f       	subi	r30, 0xF7	; 247
    2e46:	f6 4c       	sbci	r31, 0xC6	; 198
    2e48:	40 91 d4 38 	lds	r20, 0x38D4	; 0x8038d4 <actObj1.3981+0xc>
    2e4c:	50 91 d5 38 	lds	r21, 0x38D5	; 0x8038d5 <actObj1.3981+0xd>
    2e50:	40 83       	st	Z, r20
    2e52:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2e54:	fc 01       	movw	r30, r24
    2e56:	ee 0f       	add	r30, r30
    2e58:	ff 1f       	adc	r31, r31
    2e5a:	e7 5b       	subi	r30, 0xB7	; 183
    2e5c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e5e:	20 83       	st	Z, r18
    2e60:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	fc 01       	movw	r30, r24
    2e68:	e7 57       	subi	r30, 0x77	; 119
    2e6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e6c:	10 82       	st	Z, r1
    2e6e:	11 82       	std	Z+1, r1	; 0x01
    2e70:	bd c5       	rjmp	.+2938   	; 0x39ec <ProcessInput+0x1004>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2e72:	77 24       	eor	r7, r7
    2e74:	7a 94       	dec	r7
    2e76:	76 0c       	add	r7, r6
    2e78:	b9 c5       	rjmp	.+2930   	; 0x39ec <ProcessInput+0x1004>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2e7a:	ee 2e       	mov	r14, r30
    2e7c:	f1 2c       	mov	r15, r1
    2e7e:	f7 01       	movw	r30, r14
    2e80:	ee 0f       	add	r30, r30
    2e82:	ff 1f       	adc	r31, r31
    2e84:	e7 53       	subi	r30, 0x37	; 55
    2e86:	f6 4c       	sbci	r31, 0xC6	; 198
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	d8 01       	movw	r26, r16
    2e8e:	11 96       	adiw	r26, 0x01	; 1
    2e90:	6c 91       	ld	r22, X
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	c3 d9       	rcall	.-3194   	; 0x221e <FindChild>
    2e98:	f7 01       	movw	r30, r14
    2e9a:	ee 0f       	add	r30, r30
    2e9c:	ff 1f       	adc	r31, r31
    2e9e:	e5 53       	subi	r30, 0x35	; 53
    2ea0:	f6 4c       	sbci	r31, 0xC6	; 198
    2ea2:	80 83       	st	Z, r24
    2ea4:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2ea6:	90 91 2d 38 	lds	r25, 0x382D	; 0x80382d <currDepth>
    2eaa:	29 2f       	mov	r18, r25
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	f9 01       	movw	r30, r18
    2eb0:	ee 0f       	add	r30, r30
    2eb2:	ff 1f       	adc	r31, r31
    2eb4:	e5 53       	subi	r30, 0x35	; 53
    2eb6:	f6 4c       	sbci	r31, 0xC6	; 198
    2eb8:	40 81       	ld	r20, Z
    2eba:	51 81       	ldd	r21, Z+1	; 0x01
    2ebc:	41 15       	cp	r20, r1
    2ebe:	51 05       	cpc	r21, r1
    2ec0:	21 f0       	breq	.+8      	; 0x2eca <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    2ec2:	68 ec       	ldi	r22, 0xC8	; 200
    2ec4:	78 e3       	ldi	r23, 0x38	; 56
    2ec6:	ca 01       	movw	r24, r20
    2ec8:	1e c0       	rjmp	.+60     	; 0x2f06 <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2eca:	99 23       	and	r25, r25
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2ece:	c0 c5       	rjmp	.+2944   	; 0x3a50 <ProcessInput+0x1068>
    2ed0:	22 0f       	add	r18, r18
    2ed2:	33 1f       	adc	r19, r19
    2ed4:	f9 01       	movw	r30, r18
    2ed6:	e9 53       	subi	r30, 0x39	; 57
    2ed8:	f6 4c       	sbci	r31, 0xC6	; 198
    2eda:	d8 01       	movw	r26, r16
    2edc:	11 96       	adiw	r26, 0x01	; 1
    2ede:	6c 91       	ld	r22, X
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	46 d9       	rcall	.-3444   	; 0x2172 <CheckLetter>
    2ee6:	81 11       	cpse	r24, r1
    2ee8:	03 c0       	rjmp	.+6      	; 0x2ef0 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2eea:	77 24       	eor	r7, r7
    2eec:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2eee:	7e c5       	rjmp	.+2812   	; 0x39ec <ProcessInput+0x1004>
    2ef0:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	e9 53       	subi	r30, 0x39	; 57
    2efc:	f6 4c       	sbci	r31, 0xC6	; 198
    2efe:	68 ec       	ldi	r22, 0xC8	; 200
    2f00:	78 e3       	ldi	r23, 0x38	; 56
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	be d8       	rcall	.-3716   	; 0x2084 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2f08:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3981+0x1c>
    2f0c:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3981+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f10:	20 91 d6 38 	lds	r18, 0x38D6	; 0x8038d6 <actObj1.3981+0xe>
    2f14:	30 91 d7 38 	lds	r19, 0x38D7	; 0x8038d7 <actObj1.3981+0xf>
    2f18:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    2f1c:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2f20:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2f24:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2f28:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    2f2c:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    2f30:	2a ce       	rjmp	.-940    	; 0x2b86 <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2f32:	80 37       	cpi	r24, 0x70	; 112
    2f34:	09 f0       	breq	.+2      	; 0x2f38 <ProcessInput+0x550>
    2f36:	9a c0       	rjmp	.+308    	; 0x306c <ProcessInput+0x684>
            if (inventory[0]&&inventory[1]) {
    2f38:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    2f3c:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    2f40:	89 2b       	or	r24, r25
    2f42:	79 f0       	breq	.+30     	; 0x2f62 <ProcessInput+0x57a>
    2f44:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    2f48:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    2f4c:	89 2b       	or	r24, r25
    2f4e:	49 f0       	breq	.+18     	; 0x2f62 <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f50:	87 e0       	ldi	r24, 0x07	; 7
    2f52:	98 e7       	ldi	r25, 0x78	; 120
    2f54:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2f58:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2f5c:	89 e5       	ldi	r24, 0x59	; 89
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	08 ce       	rjmp	.-1008   	; 0x2b72 <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2f62:	b2 e0       	ldi	r27, 0x02	; 2
    2f64:	fb 12       	cpse	r15, r27
    2f66:	70 cd       	rjmp	.-1312   	; 0x2a48 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2f68:	e0 90 2d 38 	lds	r14, 0x382D	; 0x80382d <currDepth>
    2f6c:	f1 2c       	mov	r15, r1
    2f6e:	f7 01       	movw	r30, r14
    2f70:	ee 0f       	add	r30, r30
    2f72:	ff 1f       	adc	r31, r31
    2f74:	e7 53       	subi	r30, 0x37	; 55
    2f76:	f6 4c       	sbci	r31, 0xC6	; 198
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	d8 01       	movw	r26, r16
    2f7e:	11 96       	adiw	r26, 0x01	; 1
    2f80:	6c 91       	ld	r22, X
    2f82:	80 81       	ld	r24, Z
    2f84:	91 81       	ldd	r25, Z+1	; 0x01
    2f86:	4b d9       	rcall	.-3434   	; 0x221e <FindChild>
    2f88:	f7 01       	movw	r30, r14
    2f8a:	ee 0f       	add	r30, r30
    2f8c:	ff 1f       	adc	r31, r31
    2f8e:	e5 53       	subi	r30, 0x35	; 53
    2f90:	f6 4c       	sbci	r31, 0xC6	; 198
    2f92:	80 83       	st	Z, r24
    2f94:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2f96:	20 91 2d 38 	lds	r18, 0x382D	; 0x80382d <currDepth>
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	2f 5f       	subi	r18, 0xFF	; 255
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	22 0f       	add	r18, r18
    2fa2:	33 1f       	adc	r19, r19
    2fa4:	f9 01       	movw	r30, r18
    2fa6:	e7 53       	subi	r30, 0x37	; 55
    2fa8:	f6 4c       	sbci	r31, 0xC6	; 198
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <ProcessInput+0x5cc>
    2fb2:	ce c3       	rjmp	.+1948   	; 0x3750 <ProcessInput+0xd68>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    2fb4:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <inventory>
    2fb8:	50 91 3f 38 	lds	r21, 0x383F	; 0x80383f <inventory+0x1>
    2fbc:	84 17       	cp	r24, r20
    2fbe:	95 07       	cpc	r25, r21
    2fc0:	39 f0       	breq	.+14     	; 0x2fd0 <ProcessInput+0x5e8>
    2fc2:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory+0x2>
    2fc6:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x3>
    2fca:	84 17       	cp	r24, r20
    2fcc:	95 07       	cpc	r25, r21
    2fce:	c1 f4       	brne	.+48     	; 0x3000 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fd0:	82 ee       	ldi	r24, 0xE2	; 226
    2fd2:	97 e7       	ldi	r25, 0x77	; 119
    2fd4:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    2fd8:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    2fdc:	85 e2       	ldi	r24, 0x25	; 37
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    2fe4:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    2ff0:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    2ff4:	f9 01       	movw	r30, r18
    2ff6:	e7 53       	subi	r30, 0x37	; 55
    2ff8:	f6 4c       	sbci	r31, 0xC6	; 198
    2ffa:	10 82       	st	Z, r1
    2ffc:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2ffe:	c3 cd       	rjmp	.-1146   	; 0x2b86 <ProcessInput+0x19e>
    3000:	68 ec       	ldi	r22, 0xC8	; 200
    3002:	78 e3       	ldi	r23, 0x38	; 56
    3004:	3f d8       	rcall	.-3970   	; 0x2084 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    3006:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3981+0x7>
    300a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CheckState>
    300e:	88 23       	and	r24, r24
    3010:	09 f4       	brne	.+2      	; 0x3014 <ProcessInput+0x62c>
    3012:	79 c3       	rjmp	.+1778   	; 0x3706 <ProcessInput+0xd1e>
                            if (actObj1.byteField[ITEM_NR]) {
    3014:	80 91 d3 38 	lds	r24, 0x38D3	; 0x8038d3 <actObj1.3981+0xb>
    3018:	88 23       	and	r24, r24
    301a:	09 f4       	brne	.+2      	; 0x301e <ProcessInput+0x636>
    301c:	15 cd       	rjmp	.-1494   	; 0x2a48 <ProcessInput+0x60>
                                if (inventory[0]) {
    301e:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    3022:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3026:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
                                    inventory[1] = route[currDepth+1];
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	ee 0f       	add	r30, r30
    302e:	ff 1f       	adc	r31, r31
    3030:	e5 53       	subi	r30, 0x35	; 53
    3032:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    3034:	89 2b       	or	r24, r25
    3036:	39 f0       	breq	.+14     	; 0x3046 <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    3040:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
    3044:	06 c0       	rjmp	.+12     	; 0x3052 <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    304e:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3052:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3981+0xa>
    3056:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    305a:	8c ec       	ldi	r24, 0xCC	; 204
    305c:	97 e7       	ldi	r25, 0x77	; 119
    305e:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3062:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3066:	86 e1       	ldi	r24, 0x16	; 22
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	5e c2       	rjmp	.+1212   	; 0x3528 <ProcessInput+0xb40>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    306c:	84 36       	cpi	r24, 0x64	; 100
    306e:	d9 f4       	brne	.+54     	; 0x30a6 <ProcessInput+0x6be>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3070:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    3074:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	09 f0       	breq	.+2      	; 0x307e <ProcessInput+0x696>
    307c:	ec c4       	rjmp	.+2520   	; 0x3a56 <ProcessInput+0x106e>
    307e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3082:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3086:	89 2b       	or	r24, r25
    3088:	49 f4       	brne	.+18     	; 0x309c <ProcessInput+0x6b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    308a:	86 ea       	ldi	r24, 0xA6	; 166
    308c:	97 e7       	ldi	r25, 0x77	; 119
    308e:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3092:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3096:	86 e2       	ldi	r24, 0x26	; 38
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	6b cd       	rjmp	.-1322   	; 0x2b72 <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    309c:	b2 e0       	ldi	r27, 0x02	; 2
    309e:	fb 16       	cp	r15, r27
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <ProcessInput+0x6bc>
    30a2:	40 c5       	rjmp	.+2688   	; 0x3b24 <ProcessInput+0x113c>
    30a4:	d1 cc       	rjmp	.-1630   	; 0x2a48 <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    30a6:	89 36       	cpi	r24, 0x69	; 105
    30a8:	09 f0       	breq	.+2      	; 0x30ac <ProcessInput+0x6c4>
    30aa:	7b c0       	rjmp	.+246    	; 0x31a2 <ProcessInput+0x7ba>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    30ac:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    30b0:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    30b4:	89 2b       	or	r24, r25
    30b6:	31 f4       	brne	.+12     	; 0x30c4 <ProcessInput+0x6dc>
    30b8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    30bc:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    30c0:	89 2b       	or	r24, r25
    30c2:	19 f3       	breq	.-58     	; 0x308a <ProcessInput+0x6a2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30c4:	8c ec       	ldi	r24, 0xCC	; 204
    30c6:	97 e7       	ldi	r25, 0x77	; 119
    30c8:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    30cc:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    30d0:	86 e1       	ldi	r24, 0x16	; 22
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    30d8:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    30e4:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
    30e8:	2e e3       	ldi	r18, 0x3E	; 62
    30ea:	e2 2e       	mov	r14, r18
    30ec:	28 e3       	ldi	r18, 0x38	; 56
    30ee:	f2 2e       	mov	r15, r18
    30f0:	32 e4       	ldi	r19, 0x42	; 66
    30f2:	63 2e       	mov	r6, r19
    30f4:	38 e3       	ldi	r19, 0x38	; 56
    30f6:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    30f8:	42 e0       	ldi	r20, 0x02	; 2
    30fa:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30fc:	57 e5       	ldi	r21, 0x57	; 87
    30fe:	c5 2e       	mov	r12, r21
    3100:	5a e7       	ldi	r21, 0x7A	; 122
    3102:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	a6 2e       	mov	r10, r22
    3108:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    310a:	88 24       	eor	r8, r8
    310c:	83 94       	inc	r8
    310e:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3110:	d7 01       	movw	r26, r14
    3112:	8d 91       	ld	r24, X+
    3114:	9d 91       	ld	r25, X+
    3116:	7d 01       	movw	r14, r26
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	d9 f1       	breq	.+118    	; 0x3192 <ProcessInput+0x7aa>
                        PopulateObject(inventory[x], &actObj1);
    311c:	68 ec       	ldi	r22, 0xC8	; 200
    311e:	78 e3       	ldi	r23, 0x38	; 56
    3120:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3124:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3981+0x1a>
    3128:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    312c:	e5 2d       	mov	r30, r5
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	df 01       	movw	r26, r30
    3132:	aa 0f       	add	r26, r26
    3134:	bb 1f       	adc	r27, r27
    3136:	a7 5f       	subi	r26, 0xF7	; 247
    3138:	b6 4c       	sbci	r27, 0xC6	; 198
    313a:	20 91 d4 38 	lds	r18, 0x38D4	; 0x8038d4 <actObj1.3981+0xc>
    313e:	30 91 d5 38 	lds	r19, 0x38D5	; 0x8038d5 <actObj1.3981+0xd>
    3142:	2d 93       	st	X+, r18
    3144:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    3146:	df 01       	movw	r26, r30
    3148:	aa 0f       	add	r26, r26
    314a:	bb 1f       	adc	r27, r27
    314c:	a7 5b       	subi	r26, 0xB7	; 183
    314e:	b6 4c       	sbci	r27, 0xC6	; 198
    3150:	8d 93       	st	X+, r24
    3152:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    3154:	ee 0f       	add	r30, r30
    3156:	ff 1f       	adc	r31, r31
    3158:	e7 57       	subi	r30, 0x77	; 119
    315a:	f6 4c       	sbci	r31, 0xC6	; 198
    315c:	10 82       	st	Z, r1
    315e:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3160:	e1 e0       	ldi	r30, 0x01	; 1
    3162:	e5 0d       	add	r30, r5
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	53 94       	inc	r5
    3168:	53 94       	inc	r5
    316a:	df 01       	movw	r26, r30
    316c:	aa 0f       	add	r26, r26
    316e:	bb 1f       	adc	r27, r27
    3170:	a7 5f       	subi	r26, 0xF7	; 247
    3172:	b6 4c       	sbci	r27, 0xC6	; 198
    3174:	cd 92       	st	X+, r12
    3176:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    3178:	df 01       	movw	r26, r30
    317a:	aa 0f       	add	r26, r26
    317c:	bb 1f       	adc	r27, r27
    317e:	a7 5b       	subi	r26, 0xB7	; 183
    3180:	b6 4c       	sbci	r27, 0xC6	; 198
    3182:	ad 92       	st	X+, r10
    3184:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3186:	ee 0f       	add	r30, r30
    3188:	ff 1f       	adc	r31, r31
    318a:	e7 57       	subi	r30, 0x77	; 119
    318c:	f6 4c       	sbci	r31, 0xC6	; 198
    318e:	80 82       	st	Z, r8
    3190:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    3192:	6e 14       	cp	r6, r14
    3194:	7f 04       	cpc	r7, r15
    3196:	09 f0       	breq	.+2      	; 0x319a <ProcessInput+0x7b2>
    3198:	bb cf       	rjmp	.-138    	; 0x3110 <ProcessInput+0x728>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    319a:	77 24       	eor	r7, r7
    319c:	7a 94       	dec	r7
    319e:	75 0c       	add	r7, r5
    31a0:	25 c4       	rjmp	.+2122   	; 0x39ec <ProcessInput+0x1004>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    31a2:	9c e8       	ldi	r25, 0x8C	; 140
    31a4:	98 0f       	add	r25, r24
    31a6:	92 30       	cpi	r25, 0x02	; 2
    31a8:	28 f0       	brcs	.+10     	; 0x31b4 <ProcessInput+0x7cc>
    31aa:	87 36       	cpi	r24, 0x67	; 103
    31ac:	19 f0       	breq	.+6      	; 0x31b4 <ProcessInput+0x7cc>
    31ae:	82 37       	cpi	r24, 0x72	; 114
    31b0:	09 f0       	breq	.+2      	; 0x31b4 <ProcessInput+0x7cc>
    31b2:	d7 c2       	rjmp	.+1454   	; 0x3762 <ProcessInput+0xd7a>
            if ((inputLen<2)||(inputLen>3)) {
    31b4:	8e ef       	ldi	r24, 0xFE	; 254
    31b6:	8f 0d       	add	r24, r15
    31b8:	82 30       	cpi	r24, 0x02	; 2
    31ba:	08 f0       	brcs	.+2      	; 0x31be <ProcessInput+0x7d6>
    31bc:	45 cc       	rjmp	.-1910   	; 0x2a48 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    31be:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    31c2:	ce 2e       	mov	r12, r30
    31c4:	d1 2c       	mov	r13, r1
    31c6:	d8 01       	movw	r26, r16
    31c8:	af 0d       	add	r26, r15
    31ca:	b1 1d       	adc	r27, r1
    31cc:	11 97       	sbiw	r26, 0x01	; 1
    31ce:	f6 01       	movw	r30, r12
    31d0:	ee 0f       	add	r30, r30
    31d2:	ff 1f       	adc	r31, r31
    31d4:	e7 53       	subi	r30, 0x37	; 55
    31d6:	f6 4c       	sbci	r31, 0xC6	; 198
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	6c 91       	ld	r22, X
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	1d d8       	rcall	.-4038   	; 0x221e <FindChild>
    31e4:	f6 01       	movw	r30, r12
    31e6:	ee 0f       	add	r30, r30
    31e8:	ff 1f       	adc	r31, r31
    31ea:	e5 53       	subi	r30, 0x35	; 53
    31ec:	f6 4c       	sbci	r31, 0xC6	; 198
    31ee:	80 83       	st	Z, r24
    31f0:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    31f2:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	e5 53       	subi	r30, 0x35	; 53
    31fe:	f6 4c       	sbci	r31, 0xC6	; 198
    3200:	80 81       	ld	r24, Z
    3202:	91 81       	ldd	r25, Z+1	; 0x01
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	09 f4       	brne	.+2      	; 0x320a <ProcessInput+0x822>
    3208:	9a c2       	rjmp	.+1332   	; 0x373e <ProcessInput+0xd56>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    320a:	b3 e0       	ldi	r27, 0x03	; 3
    320c:	fb 12       	cpse	r15, r27
    320e:	78 c1       	rjmp	.+752    	; 0x3500 <ProcessInput+0xb18>
    3210:	f8 01       	movw	r30, r16
    3212:	20 81       	ld	r18, Z
    3214:	25 37       	cpi	r18, 0x75	; 117
    3216:	19 f0       	breq	.+6      	; 0x321e <ProcessInput+0x836>
    3218:	27 36       	cpi	r18, 0x67	; 103
    321a:	09 f0       	breq	.+2      	; 0x321e <ProcessInput+0x836>
    321c:	71 c1       	rjmp	.+738    	; 0x3500 <ProcessInput+0xb18>
    321e:	61 2c       	mov	r6, r1
    3220:	77 24       	eor	r7, r7
    3222:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3224:	51 e6       	ldi	r21, 0x61	; 97
    3226:	c5 2e       	mov	r12, r21
    3228:	59 e7       	ldi	r21, 0x79	; 121
    322a:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    322c:	61 e2       	ldi	r22, 0x21	; 33
    322e:	a6 2e       	mov	r10, r22
    3230:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3232:	88 24       	eor	r8, r8
    3234:	83 94       	inc	r8
    3236:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    3238:	e6 2c       	mov	r14, r6
    323a:	f1 2c       	mov	r15, r1
    323c:	c7 01       	movw	r24, r14
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	9c 01       	movw	r18, r24
    3244:	22 5c       	subi	r18, 0xC2	; 194
    3246:	37 4c       	sbci	r19, 0xC7	; 199
    3248:	79 01       	movw	r14, r18
    324a:	d9 01       	movw	r26, r18
    324c:	8d 91       	ld	r24, X+
    324e:	9c 91       	ld	r25, X
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	81 f0       	breq	.+32     	; 0x3274 <ProcessInput+0x88c>
                                if (CheckLetter(inventory[x], data[1])) {
    3254:	f8 01       	movw	r30, r16
    3256:	61 81       	ldd	r22, Z+1	; 0x01
    3258:	0e 94 b9 10 	call	0x2172	; 0x2172 <CheckLetter>
    325c:	88 23       	and	r24, r24
    325e:	51 f0       	breq	.+20     	; 0x3274 <ProcessInput+0x88c>
                                    PopulateObject(inventory[x], &actObj2);
    3260:	6d e9       	ldi	r22, 0x9D	; 157
    3262:	78 e3       	ldi	r23, 0x38	; 56
    3264:	d7 01       	movw	r26, r14
    3266:	8d 91       	ld	r24, X+
    3268:	9c 91       	ld	r25, X
    326a:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>
                                    x = 2;
    326e:	32 e0       	ldi	r19, 0x02	; 2
    3270:	63 2e       	mov	r6, r19
    3272:	1e c0       	rjmp	.+60     	; 0x32b0 <ProcessInput+0x8c8>
                                }
                            }
                            if (x == 1) { 
    3274:	b1 e0       	ldi	r27, 0x01	; 1
    3276:	6b 12       	cpse	r6, r27
    3278:	1a c0       	rjmp	.+52     	; 0x32ae <ProcessInput+0x8c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    327a:	e7 2d       	mov	r30, r7
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	df 01       	movw	r26, r30
    3280:	aa 0f       	add	r26, r26
    3282:	bb 1f       	adc	r27, r27
    3284:	a7 5f       	subi	r26, 0xF7	; 247
    3286:	b6 4c       	sbci	r27, 0xC6	; 198
    3288:	cd 92       	st	X+, r12
    328a:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    328c:	df 01       	movw	r26, r30
    328e:	aa 0f       	add	r26, r26
    3290:	bb 1f       	adc	r27, r27
    3292:	a7 5b       	subi	r26, 0xB7	; 183
    3294:	b6 4c       	sbci	r27, 0xC6	; 198
    3296:	ad 92       	st	X+, r10
    3298:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    329a:	ee 0f       	add	r30, r30
    329c:	ff 1f       	adc	r31, r31
    329e:	e7 57       	subi	r30, 0x77	; 119
    32a0:	f6 4c       	sbci	r31, 0xC6	; 198
    32a2:	80 82       	st	Z, r8
    32a4:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    32a6:	f8 01       	movw	r30, r16
    32a8:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    32aa:	73 94       	inc	r7
    32ac:	01 c0       	rjmp	.+2      	; 0x32b0 <ProcessInput+0x8c8>
    32ae:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    32b0:	63 94       	inc	r6
    32b2:	f1 e0       	ldi	r31, 0x01	; 1
    32b4:	6f 16       	cp	r6, r31
    32b6:	09 f4       	brne	.+2      	; 0x32ba <ProcessInput+0x8d2>
    32b8:	bf cf       	rjmp	.-130    	; 0x3238 <ProcessInput+0x850>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    32ba:	d8 01       	movw	r26, r16
    32bc:	8c 91       	ld	r24, X
    32be:	88 23       	and	r24, r24
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <ProcessInput+0x8dc>
    32c2:	94 c3       	rjmp	.+1832   	; 0x39ec <ProcessInput+0x1004>
                            PopulateObject(route[currDepth+1], &actObj1);
    32c4:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	ee 0f       	add	r30, r30
    32cc:	ff 1f       	adc	r31, r31
    32ce:	e5 53       	subi	r30, 0x35	; 53
    32d0:	f6 4c       	sbci	r31, 0xC6	; 198
    32d2:	68 ec       	ldi	r22, 0xC8	; 200
    32d4:	78 e3       	ldi	r23, 0x38	; 56
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    32de:	e0 90 e6 38 	lds	r14, 0x38E6	; 0x8038e6 <actObj1.3981+0x1e>
    32e2:	f0 90 e7 38 	lds	r15, 0x38E7	; 0x8038e7 <actObj1.3981+0x1f>
    32e6:	b1 e0       	ldi	r27, 0x01	; 1
    32e8:	eb 16       	cp	r14, r27
    32ea:	f1 04       	cpc	r15, r1
    32ec:	09 f0       	breq	.+2      	; 0x32f0 <ProcessInput+0x908>
    32ee:	9a c0       	rjmp	.+308    	; 0x3424 <ProcessInput+0xa3c>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    32f0:	98 01       	movw	r18, r16
    32f2:	2e 5f       	subi	r18, 0xFE	; 254
    32f4:	3f 4f       	sbci	r19, 0xFF	; 255
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	61 e0       	ldi	r22, 0x01	; 1
    32fa:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3981+0x10>
    32fe:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <actObj1.3981+0x11>
    3302:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
                                if (data[2] == '1') {
    3306:	f8 01       	movw	r30, r16
    3308:	42 81       	ldd	r20, Z+2	; 0x02
    330a:	21 e0       	ldi	r18, 0x01	; 1
    330c:	27 0d       	add	r18, r7
    330e:	87 2d       	mov	r24, r7
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	41 33       	cpi	r20, 0x31	; 49
    3314:	09 f0       	breq	.+2      	; 0x3318 <ProcessInput+0x930>
    3316:	6b c0       	rjmp	.+214    	; 0x33ee <ProcessInput+0xa06>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3318:	30 91 a8 38 	lds	r19, 0x38A8	; 0x8038a8 <actObj2.3982+0xb>
                                    if ((item < 31)||(item > 34)) {
    331c:	51 ee       	ldi	r21, 0xE1	; 225
    331e:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3320:	fc 01       	movw	r30, r24
    3322:	ee 0f       	add	r30, r30
    3324:	ff 1f       	adc	r31, r31
    3326:	e7 5f       	subi	r30, 0xF7	; 247
    3328:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    332a:	54 30       	cpi	r21, 0x04	; 4
    332c:	60 f0       	brcs	.+24     	; 0x3346 <ProcessInput+0x95e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	59 e7       	ldi	r21, 0x79	; 121
    3332:	40 83       	st	Z, r20
    3334:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3336:	fc 01       	movw	r30, r24
    3338:	ee 0f       	add	r30, r30
    333a:	ff 1f       	adc	r31, r31
    333c:	e7 5b       	subi	r30, 0xB7	; 183
    333e:	f6 4c       	sbci	r31, 0xC6	; 198
    3340:	4a e1       	ldi	r20, 0x1A	; 26
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	64 c0       	rjmp	.+200    	; 0x340e <ProcessInput+0xa26>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3346:	60 e5       	ldi	r22, 0x50	; 80
    3348:	75 e7       	ldi	r23, 0x75	; 117
    334a:	60 83       	st	Z, r22
    334c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    334e:	fc 01       	movw	r30, r24
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e7 5b       	subi	r30, 0xB7	; 183
    3356:	f6 4c       	sbci	r31, 0xC6	; 198
    3358:	62 eb       	ldi	r22, 0xB2	; 178
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	60 83       	st	Z, r22
    335e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3360:	88 0f       	add	r24, r24
    3362:	99 1f       	adc	r25, r25
    3364:	fc 01       	movw	r30, r24
    3366:	e7 57       	subi	r30, 0x77	; 119
    3368:	f6 4c       	sbci	r31, 0xC6	; 198
    336a:	e0 82       	st	Z, r14
    336c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    336e:	82 2f       	mov	r24, r18
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	fc 01       	movw	r30, r24
    3374:	ee 0f       	add	r30, r30
    3376:	ff 1f       	adc	r31, r31
    3378:	e7 5f       	subi	r30, 0xF7	; 247
    337a:	f6 4c       	sbci	r31, 0xC6	; 198
    337c:	69 e5       	ldi	r22, 0x59	; 89
    337e:	7a e7       	ldi	r23, 0x7A	; 122
    3380:	60 83       	st	Z, r22
    3382:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3384:	fc 01       	movw	r30, r24
    3386:	ee 0f       	add	r30, r30
    3388:	ff 1f       	adc	r31, r31
    338a:	e7 5b       	subi	r30, 0xB7	; 183
    338c:	f6 4c       	sbci	r31, 0xC6	; 198
    338e:	62 e0       	ldi	r22, 0x02	; 2
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	60 83       	st	Z, r22
    3394:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3396:	88 0f       	add	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	fc 01       	movw	r30, r24
    339c:	e7 57       	subi	r30, 0x77	; 119
    339e:	f6 4c       	sbci	r31, 0xC6	; 198
    33a0:	e0 82       	st	Z, r14
    33a2:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33a4:	82 e0       	ldi	r24, 0x02	; 2
    33a6:	87 0d       	add	r24, r7
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	f3 e0       	ldi	r31, 0x03	; 3
    33ac:	7f 0e       	add	r7, r31
    33ae:	fc 01       	movw	r30, r24
    33b0:	ee 0f       	add	r30, r30
    33b2:	ff 1f       	adc	r31, r31
    33b4:	e7 5f       	subi	r30, 0xF7	; 247
    33b6:	f6 4c       	sbci	r31, 0xC6	; 198
    33b8:	6d ea       	ldi	r22, 0xAD	; 173
    33ba:	78 e7       	ldi	r23, 0x78	; 120
    33bc:	60 83       	st	Z, r22
    33be:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    33c0:	fc 01       	movw	r30, r24
    33c2:	ee 0f       	add	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	e7 5b       	subi	r30, 0xB7	; 183
    33c8:	f6 4c       	sbci	r31, 0xC6	; 198
    33ca:	62 e1       	ldi	r22, 0x12	; 18
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	60 83       	st	Z, r22
    33d0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	fc 01       	movw	r30, r24
    33d8:	e7 57       	subi	r30, 0x77	; 119
    33da:	f6 4c       	sbci	r31, 0xC6	; 198
    33dc:	e0 82       	st	Z, r14
    33de:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    33e0:	40 93 f8 38 	sts	0x38F8, r20	; 0x8038f8 <specialInput>
                                        specialInput[1] = item;
    33e4:	30 93 f9 38 	sts	0x38F9, r19	; 0x8038f9 <specialInput+0x1>
                                        specialInput[2] = 0;
    33e8:	10 92 fa 38 	sts	0x38FA, r1	; 0x8038fa <specialInput+0x2>
    33ec:	ff c2       	rjmp	.+1534   	; 0x39ec <ProcessInput+0x1004>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33ee:	fc 01       	movw	r30, r24
    33f0:	ee 0f       	add	r30, r30
    33f2:	ff 1f       	adc	r31, r31
    33f4:	e7 5f       	subi	r30, 0xF7	; 247
    33f6:	f6 4c       	sbci	r31, 0xC6	; 198
    33f8:	42 e0       	ldi	r20, 0x02	; 2
    33fa:	56 e7       	ldi	r21, 0x76	; 118
    33fc:	40 83       	st	Z, r20
    33fe:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3400:	fc 01       	movw	r30, r24
    3402:	ee 0f       	add	r30, r30
    3404:	ff 1f       	adc	r31, r31
    3406:	e7 5b       	subi	r30, 0xB7	; 183
    3408:	f6 4c       	sbci	r31, 0xC6	; 198
    340a:	42 e4       	ldi	r20, 0x42	; 66
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	40 83       	st	Z, r20
    3410:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	fc 01       	movw	r30, r24
    3418:	e7 57       	subi	r30, 0x77	; 119
    341a:	f6 4c       	sbci	r31, 0xC6	; 198
    341c:	e0 82       	st	Z, r14
    341e:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    3420:	72 2e       	mov	r7, r18
    3422:	e4 c2       	rjmp	.+1480   	; 0x39ec <ProcessInput+0x1004>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    3424:	90 91 d1 38 	lds	r25, 0x38D1	; 0x8038d1 <actObj1.3981+0x9>
    3428:	80 91 a8 38 	lds	r24, 0x38A8	; 0x8038a8 <actObj2.3982+0xb>
    342c:	98 13       	cpse	r25, r24
    342e:	2f c0       	rjmp	.+94     	; 0x348e <ProcessInput+0xaa6>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3430:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3981+0x26>
    3434:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3981+0x27>
    3438:	ff 24       	eor	r15, r15
    343a:	f3 94       	inc	r15
    343c:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    343e:	87 2d       	mov	r24, r7
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	fc 01       	movw	r30, r24
    3444:	ee 0f       	add	r30, r30
    3446:	ff 1f       	adc	r31, r31
    3448:	e7 5f       	subi	r30, 0xF7	; 247
    344a:	f6 4c       	sbci	r31, 0xC6	; 198
    344c:	40 91 e0 38 	lds	r20, 0x38E0	; 0x8038e0 <actObj1.3981+0x18>
    3450:	50 91 e1 38 	lds	r21, 0x38E1	; 0x8038e1 <actObj1.3981+0x19>
    3454:	40 83       	st	Z, r20
    3456:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3458:	fc 01       	movw	r30, r24
    345a:	ee 0f       	add	r30, r30
    345c:	ff 1f       	adc	r31, r31
    345e:	e7 5b       	subi	r30, 0xB7	; 183
    3460:	f6 4c       	sbci	r31, 0xC6	; 198
    3462:	20 83       	st	Z, r18
    3464:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	fc 01       	movw	r30, r24
    346c:	e7 57       	subi	r30, 0x77	; 119
    346e:	f6 4c       	sbci	r31, 0xC6	; 198
    3470:	10 82       	st	Z, r1
    3472:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3474:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3981+0x2a>
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    347e:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3482:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3981+0xa>
    3486:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    348a:	7f 2c       	mov	r7, r15
    348c:	af c2       	rjmp	.+1374   	; 0x39ec <ProcessInput+0x1004>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    348e:	d8 01       	movw	r26, r16
    3490:	8c 91       	ld	r24, X
    3492:	85 37       	cpi	r24, 0x75	; 117
    3494:	99 f4       	brne	.+38     	; 0x34bc <ProcessInput+0xad4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3496:	87 2d       	mov	r24, r7
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	fc 01       	movw	r30, r24
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	e7 5f       	subi	r30, 0xF7	; 247
    34a2:	f6 4c       	sbci	r31, 0xC6	; 198
    34a4:	21 e0       	ldi	r18, 0x01	; 1
    34a6:	39 e7       	ldi	r19, 0x79	; 121
    34a8:	20 83       	st	Z, r18
    34aa:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    34ac:	fc 01       	movw	r30, r24
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	e7 5b       	subi	r30, 0xB7	; 183
    34b4:	f6 4c       	sbci	r31, 0xC6	; 198
    34b6:	2a e1       	ldi	r18, 0x1A	; 26
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	15 c0       	rjmp	.+42     	; 0x34e6 <ProcessInput+0xafe>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    34bc:	87 36       	cpi	r24, 0x67	; 103
    34be:	09 f0       	breq	.+2      	; 0x34c2 <ProcessInput+0xada>
    34c0:	95 c2       	rjmp	.+1322   	; 0x39ec <ProcessInput+0x1004>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c2:	87 2d       	mov	r24, r7
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	fc 01       	movw	r30, r24
    34c8:	ee 0f       	add	r30, r30
    34ca:	ff 1f       	adc	r31, r31
    34cc:	e7 5f       	subi	r30, 0xF7	; 247
    34ce:	f6 4c       	sbci	r31, 0xC6	; 198
    34d0:	2f e9       	ldi	r18, 0x9F	; 159
    34d2:	36 e7       	ldi	r19, 0x76	; 118
    34d4:	20 83       	st	Z, r18
    34d6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    34d8:	fc 01       	movw	r30, r24
    34da:	ee 0f       	add	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	e7 5b       	subi	r30, 0xB7	; 183
    34e0:	f6 4c       	sbci	r31, 0xC6	; 198
    34e2:	28 e2       	ldi	r18, 0x28	; 40
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	20 83       	st	Z, r18
    34e8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    34ea:	88 0f       	add	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	fc 01       	movw	r30, r24
    34f0:	e7 57       	subi	r30, 0x77	; 119
    34f2:	f6 4c       	sbci	r31, 0xC6	; 198
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	80 83       	st	Z, r24
    34fa:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    34fc:	73 94       	inc	r7
    34fe:	76 c2       	rjmp	.+1260   	; 0x39ec <ProcessInput+0x1004>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3500:	68 ec       	ldi	r22, 0xC8	; 200
    3502:	78 e3       	ldi	r23, 0x38	; 56
    3504:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3508:	f8 01       	movw	r30, r16
    350a:	80 81       	ld	r24, Z
    350c:	84 37       	cpi	r24, 0x74	; 116
    350e:	69 f5       	brne	.+90     	; 0x356a <ProcessInput+0xb82>
    3510:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3981+0x8>
    3514:	83 fd       	sbrc	r24, 3
    3516:	4a c0       	rjmp	.+148    	; 0x35ac <ProcessInput+0xbc4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3518:	8b e1       	ldi	r24, 0x1B	; 27
    351a:	99 e7       	ldi	r25, 0x79	; 121
    351c:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3520:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3524:	8e e1       	ldi	r24, 0x1E	; 30
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    352c:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    3538:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    353c:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3981+0x1a>
    3540:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3544:	20 91 d4 38 	lds	r18, 0x38D4	; 0x8038d4 <actObj1.3981+0xc>
    3548:	30 91 d5 38 	lds	r19, 0x38D5	; 0x8038d5 <actObj1.3981+0xd>
    354c:	20 93 0d 39 	sts	0x390D, r18	; 0x80390d <reactStr+0x4>
    3550:	30 93 0e 39 	sts	0x390E, r19	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    3554:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    3558:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    355c:	10 92 8d 39 	sts	0x398D, r1	; 0x80398d <reactStr+0x84>
    3560:	10 92 8e 39 	sts	0x398E, r1	; 0x80398e <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3564:	e3 e0       	ldi	r30, 0x03	; 3
    3566:	7e 2e       	mov	r7, r30
    3568:	41 c2       	rjmp	.+1154   	; 0x39ec <ProcessInput+0x1004>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    356a:	85 37       	cpi	r24, 0x75	; 117
    356c:	69 f4       	brne	.+26     	; 0x3588 <ProcessInput+0xba0>
    356e:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3981+0x8>
    3572:	84 fd       	sbrc	r24, 4
    3574:	1b c0       	rjmp	.+54     	; 0x35ac <ProcessInput+0xbc4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	99 e7       	ldi	r25, 0x79	; 121
    357a:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    357e:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3582:	8a e1       	ldi	r24, 0x1A	; 26
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	f5 ca       	rjmp	.-2582   	; 0x2b72 <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3588:	82 37       	cpi	r24, 0x72	; 114
    358a:	69 f4       	brne	.+26     	; 0x35a6 <ProcessInput+0xbbe>
    358c:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3981+0x8>
    3590:	85 fd       	sbrc	r24, 5
    3592:	0c c0       	rjmp	.+24     	; 0x35ac <ProcessInput+0xbc4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3594:	86 ee       	ldi	r24, 0xE6	; 230
    3596:	98 e7       	ldi	r25, 0x78	; 120
    3598:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    359c:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    35a0:	8b e1       	ldi	r24, 0x1B	; 27
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	e6 ca       	rjmp	.-2612   	; 0x2b72 <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    35a6:	87 36       	cpi	r24, 0x67	; 103
    35a8:	09 f4       	brne	.+2      	; 0x35ac <ProcessInput+0xbc4>
    35aa:	4e ca       	rjmp	.-2916   	; 0x2a48 <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    35ac:	e0 90 e6 38 	lds	r14, 0x38E6	; 0x8038e6 <actObj1.3981+0x1e>
    35b0:	f0 90 e7 38 	lds	r15, 0x38E7	; 0x8038e7 <actObj1.3981+0x1f>
    35b4:	f1 e0       	ldi	r31, 0x01	; 1
    35b6:	ef 16       	cp	r14, r31
    35b8:	f1 04       	cpc	r15, r1
    35ba:	11 f5       	brne	.+68     	; 0x3600 <ProcessInput+0xc18>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    35bc:	98 01       	movw	r18, r16
    35be:	2e 5f       	subi	r18, 0xFE	; 254
    35c0:	3f 4f       	sbci	r19, 0xFF	; 255
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	61 e0       	ldi	r22, 0x01	; 1
    35c6:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3981+0x10>
    35ca:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <actObj1.3981+0x11>
    35ce:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
                                if (data[2] == '1') {
    35d2:	d8 01       	movw	r26, r16
    35d4:	12 96       	adiw	r26, 0x02	; 2
    35d6:	8c 91       	ld	r24, X
    35d8:	81 33       	cpi	r24, 0x31	; 49
    35da:	09 f0       	breq	.+2      	; 0x35de <ProcessInput+0xbf6>
    35dc:	86 cc       	rjmp	.-1780   	; 0x2eea <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35de:	85 e2       	ldi	r24, 0x25	; 37
    35e0:	95 e7       	ldi	r25, 0x75	; 117
    35e2:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    35e6:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    35ea:	8b e2       	ldi	r24, 0x2B	; 43
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    35f2:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    35f6:	e0 92 8b 39 	sts	0x398B, r14	; 0x80398b <reactStr+0x82>
    35fa:	f0 92 8c 39 	sts	0x398C, r15	; 0x80398c <reactStr+0x83>
    35fe:	c3 ca       	rjmp	.-2682   	; 0x2b86 <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3600:	e1 14       	cp	r14, r1
    3602:	f1 04       	cpc	r15, r1
    3604:	09 f4       	brne	.+2      	; 0x3608 <ProcessInput+0xc20>
    3606:	59 c0       	rjmp	.+178    	; 0x36ba <ProcessInput+0xcd2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3608:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3981+0x10>
    360c:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <actObj1.3981+0x11>
    3610:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3614:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3618:	e0 92 4b 39 	sts	0x394B, r14	; 0x80394b <reactStr+0x42>
    361c:	f0 92 4c 39 	sts	0x394C, r15	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3620:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3624:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3628:	89 e5       	ldi	r24, 0x59	; 89
    362a:	9a e7       	ldi	r25, 0x7A	; 122
    362c:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr+0x4>
    3630:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    3634:	82 e0       	ldi	r24, 0x02	; 2
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x44>
    363c:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x84>
    3648:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    364c:	2d ea       	ldi	r18, 0xAD	; 173
    364e:	38 e7       	ldi	r19, 0x78	; 120
    3650:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x6>
    3654:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    3658:	22 e1       	ldi	r18, 0x12	; 18
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x46>
    3660:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    3664:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    3668:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    366c:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3981+0x20>
    3670:	90 91 e9 38 	lds	r25, 0x38E9	; 0x8038e9 <actObj1.3981+0x21>
    3674:	40 97       	sbiw	r24, 0x10	; 16
    3676:	30 f0       	brcs	.+12     	; 0x3684 <ProcessInput+0xc9c>
    3678:	8f e0       	ldi	r24, 0x0F	; 15
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	80 93 e8 38 	sts	0x38E8, r24	; 0x8038e8 <actObj1.3981+0x20>
    3680:	90 93 e9 38 	sts	0x38E9, r25	; 0x8038e9 <actObj1.3981+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3684:	28 ef       	ldi	r18, 0xF8	; 248
    3686:	38 e3       	ldi	r19, 0x38	; 56
    3688:	40 e0       	ldi	r20, 0x00	; 0
    368a:	60 91 e8 38 	lds	r22, 0x38E8	; 0x8038e8 <actObj1.3981+0x20>
    368e:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3981+0x12>
    3692:	90 91 db 38 	lds	r25, 0x38DB	; 0x8038db <actObj1.3981+0x13>
    3696:	0e 94 a0 08 	call	0x1140	; 0x1140 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    369a:	68 ef       	ldi	r22, 0xF8	; 248
    369c:	78 e3       	ldi	r23, 0x38	; 56
    369e:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3981+0x20>
    36a2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    36a6:	e0 91 e8 38 	lds	r30, 0x38E8	; 0x8038e8 <actObj1.3981+0x20>
    36aa:	f0 91 e9 38 	lds	r31, 0x38E9	; 0x8038e9 <actObj1.3981+0x21>
    36ae:	e8 50       	subi	r30, 0x08	; 8
    36b0:	f7 4c       	sbci	r31, 0xC7	; 199
    36b2:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    36b4:	74 e0       	ldi	r23, 0x04	; 4
    36b6:	77 2e       	mov	r7, r23
    36b8:	99 c1       	rjmp	.+818    	; 0x39ec <ProcessInput+0x1004>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    36ba:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3981+0x7>
    36be:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CheckState>
    36c2:	88 23       	and	r24, r24
    36c4:	01 f1       	breq	.+64     	; 0x3706 <ProcessInput+0xd1e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    36c6:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3981+0x26>
    36ca:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3981+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36ce:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3981+0x18>
    36d2:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3981+0x19>
    36d6:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    36da:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    36de:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    36e2:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    36e6:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    36ea:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    36ee:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3981+0x2a>
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    36f8:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    36fc:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3981+0xa>
    3700:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
    3704:	40 ca       	rjmp	.-2944   	; 0x2b86 <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3706:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3981+0x24>
    370a:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3981+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    370e:	20 91 de 38 	lds	r18, 0x38DE	; 0x8038de <actObj1.3981+0x16>
    3712:	30 91 df 38 	lds	r19, 0x38DF	; 0x8038df <actObj1.3981+0x17>
    3716:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    371a:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    371e:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3722:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3726:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    372a:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    372e:	80 91 f1 38 	lds	r24, 0x38F1	; 0x8038f1 <actObj1.3981+0x29>
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3738:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    373c:	24 ca       	rjmp	.-3000   	; 0x2b86 <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    373e:	f8 01       	movw	r30, r16
    3740:	80 81       	ld	r24, Z
    3742:	84 37       	cpi	r24, 0x74	; 116
    3744:	11 f0       	breq	.+4      	; 0x374a <ProcessInput+0xd62>
    3746:	87 36       	cpi	r24, 0x67	; 103
    3748:	19 f4       	brne	.+6      	; 0x3750 <ProcessInput+0xd68>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    374a:	89 e3       	ldi	r24, 0x39	; 57
    374c:	99 e7       	ldi	r25, 0x79	; 121
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <ProcessInput+0xd6c>
    3750:	8d e4       	ldi	r24, 0x4D	; 77
    3752:	99 e7       	ldi	r25, 0x79	; 121
    3754:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3758:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    375c:	84 e1       	ldi	r24, 0x14	; 20
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	08 ca       	rjmp	.-3056   	; 0x2b72 <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3762:	81 36       	cpi	r24, 0x61	; 97
    3764:	09 f0       	breq	.+2      	; 0x3768 <ProcessInput+0xd80>
    3766:	c1 cb       	rjmp	.-2174   	; 0x2eea <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3768:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <specialPassed>
    376c:	82 30       	cpi	r24, 0x02	; 2
    376e:	08 f4       	brcc	.+2      	; 0x3772 <ProcessInput+0xd8a>
    3770:	cb c0       	rjmp	.+406    	; 0x3908 <ProcessInput+0xf20>
                if (data[1] > 0) {
    3772:	d8 01       	movw	r26, r16
    3774:	11 96       	adiw	r26, 0x01	; 1
    3776:	2c 91       	ld	r18, X
    3778:	22 23       	and	r18, r18
    377a:	09 f4       	brne	.+2      	; 0x377e <ProcessInput+0xd96>
    377c:	b2 c0       	rjmp	.+356    	; 0x38e2 <ProcessInput+0xefa>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    377e:	fe 01       	movw	r30, r28
    3780:	31 96       	adiw	r30, 0x01	; 1
    3782:	7f 01       	movw	r14, r30
    3784:	88 e0       	ldi	r24, 0x08	; 8
    3786:	df 01       	movw	r26, r30
    3788:	1d 92       	st	X+, r1
    378a:	8a 95       	dec	r24
    378c:	e9 f7       	brne	.-6      	; 0x3788 <ProcessInput+0xda0>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    378e:	20 53       	subi	r18, 0x30	; 48
    3790:	f8 01       	movw	r30, r16
    3792:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3794:	32 81       	ldd	r19, Z+2	; 0x02
    3796:	31 53       	subi	r19, 0x31	; 49
    3798:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    379a:	83 81       	ldd	r24, Z+3	; 0x03
    379c:	81 36       	cpi	r24, 0x61	; 97
    379e:	11 f4       	brne	.+4      	; 0x37a4 <ProcessInput+0xdbc>
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	08 c0       	rjmp	.+16     	; 0x37b4 <ProcessInput+0xdcc>
                    else if (data[3] == 'e') data[3] = 0;
    37a4:	85 36       	cpi	r24, 0x65	; 101
    37a6:	11 f4       	brne	.+4      	; 0x37ac <ProcessInput+0xdc4>
    37a8:	13 82       	std	Z+3, r1	; 0x03
    37aa:	08 c0       	rjmp	.+16     	; 0x37bc <ProcessInput+0xdd4>
                    else if (data[3] == 'f') data[3] = 3;
    37ac:	86 36       	cpi	r24, 0x66	; 102
    37ae:	21 f4       	brne	.+8      	; 0x37b8 <ProcessInput+0xdd0>
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	f8 01       	movw	r30, r16
    37b4:	83 83       	std	Z+3, r24	; 0x03
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <ProcessInput+0xdd4>
                    else data[3] = 2;
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    37bc:	21 fd       	sbrc	r18, 1
    37be:	04 c0       	rjmp	.+8      	; 0x37c8 <ProcessInput+0xde0>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	dc 01       	movw	r26, r24
    37c6:	04 c0       	rjmp	.+8      	; 0x37d0 <ProcessInput+0xde8>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	a0 e1       	ldi	r26, 0x10	; 16
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    37d0:	20 ff       	sbrs	r18, 0
    37d2:	03 c0       	rjmp	.+6      	; 0x37da <ProcessInput+0xdf2>
    37d4:	9f 5f       	subi	r25, 0xFF	; 255
    37d6:	af 4f       	sbci	r26, 0xFF	; 255
    37d8:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    37da:	f8 01       	movw	r30, r16
    37dc:	23 81       	ldd	r18, Z+3	; 0x03
    37de:	21 fd       	sbrc	r18, 1
    37e0:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    37e2:	20 ff       	sbrs	r18, 0
    37e4:	03 c0       	rjmp	.+6      	; 0x37ec <ProcessInput+0xe04>
    37e6:	40 96       	adiw	r24, 0x10	; 16
    37e8:	a1 1d       	adc	r26, r1
    37ea:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    37ec:	31 ff       	sbrs	r19, 1
    37ee:	03 c0       	rjmp	.+6      	; 0x37f6 <ProcessInput+0xe0e>
    37f0:	90 5f       	subi	r25, 0xF0	; 240
    37f2:	af 4f       	sbci	r26, 0xFF	; 255
    37f4:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    37f6:	30 ff       	sbrs	r19, 0
    37f8:	03 c0       	rjmp	.+6      	; 0x3800 <ProcessInput+0xe18>
    37fa:	01 96       	adiw	r24, 0x01	; 1
    37fc:	a1 1d       	adc	r26, r1
    37fe:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3800:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <whoami>
    3804:	24 e0       	ldi	r18, 0x04	; 4
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	24 1b       	sub	r18, r20
    380a:	31 09       	sbc	r19, r1
    380c:	04 c0       	rjmp	.+8      	; 0x3816 <ProcessInput+0xe2e>
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	aa 1f       	adc	r26, r26
    3814:	bb 1f       	adc	r27, r27
    3816:	2a 95       	dec	r18
    3818:	d2 f7       	brpl	.-12     	; 0x380e <ProcessInput+0xe26>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    381a:	28 ec       	ldi	r18, 0xC8	; 200
    381c:	34 e7       	ldi	r19, 0x74	; 116
    381e:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    3822:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3826:	20 e2       	ldi	r18, 0x20	; 32
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	20 93 4b 39 	sts	0x394B, r18	; 0x80394b <reactStr+0x42>
    382e:	30 93 4c 39 	sts	0x394C, r19	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3832:	21 e0       	ldi	r18, 0x01	; 1
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	20 93 8b 39 	sts	0x398B, r18	; 0x80398b <reactStr+0x82>
    383a:	30 93 8c 39 	sts	0x398C, r19	; 0x80398c <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    383e:	4d e9       	ldi	r20, 0x9D	; 157
    3840:	54 e7       	ldi	r21, 0x74	; 116
    3842:	40 93 0d 39 	sts	0x390D, r20	; 0x80390d <reactStr+0x4>
    3846:	50 93 0e 39 	sts	0x390E, r21	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    384a:	42 e0       	ldi	r20, 0x02	; 2
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	40 93 4d 39 	sts	0x394D, r20	; 0x80394d <reactStr+0x44>
    3852:	50 93 4e 39 	sts	0x394E, r21	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    3856:	20 93 8d 39 	sts	0x398D, r18	; 0x80398d <reactStr+0x84>
    385a:	30 93 8e 39 	sts	0x398E, r19	; 0x80398e <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    385e:	67 e0       	ldi	r22, 0x07	; 7
    3860:	d6 2e       	mov	r13, r22
                        digit[n] = answer % 16;
    3862:	f7 01       	movw	r30, r14
    3864:	ed 0d       	add	r30, r13
    3866:	f1 1d       	adc	r31, r1
    3868:	28 2f       	mov	r18, r24
    386a:	2f 70       	andi	r18, 0x0F	; 15
    386c:	20 83       	st	Z, r18
                        answer /= 16;
    386e:	54 e0       	ldi	r21, 0x04	; 4
    3870:	b6 95       	lsr	r27
    3872:	a7 95       	ror	r26
    3874:	97 95       	ror	r25
    3876:	87 95       	ror	r24
    3878:	5a 95       	dec	r21
    387a:	d1 f7       	brne	.-12     	; 0x3870 <ProcessInput+0xe88>
                        if (answer == 0) break;
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	a1 05       	cpc	r26, r1
    3880:	b1 05       	cpc	r27, r1
    3882:	51 f4       	brne	.+20     	; 0x3898 <ProcessInput+0xeb0>
    3884:	29 e0       	ldi	r18, 0x09	; 9
    3886:	a2 2e       	mov	r10, r18
    3888:	29 e3       	ldi	r18, 0x39	; 57
    388a:	b2 2e       	mov	r11, r18
    388c:	33 e0       	ldi	r19, 0x03	; 3
    388e:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3890:	88 24       	eor	r8, r8
    3892:	83 94       	inc	r8
    3894:	91 2c       	mov	r9, r1
    3896:	02 c0       	rjmp	.+4      	; 0x389c <ProcessInput+0xeb4>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3898:	da 94       	dec	r13
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    389a:	e3 cf       	rjmp	.-58     	; 0x3862 <ProcessInput+0xe7a>
    389c:	b2 e0       	ldi	r27, 0x02	; 2
    389e:	ab 0e       	add	r10, r27
    38a0:	b1 1c       	adc	r11, r1

                    for (; n<8; ++n) {
    38a2:	e7 e0       	ldi	r30, 0x07	; 7
    38a4:	ed 15       	cp	r30, r13
    38a6:	08 f4       	brcc	.+2      	; 0x38aa <ProcessInput+0xec2>
    38a8:	9f c0       	rjmp	.+318    	; 0x39e8 <ProcessInput+0x1000>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    38aa:	73 94       	inc	r7
    38ac:	f7 01       	movw	r30, r14
    38ae:	ed 0d       	add	r30, r13
    38b0:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38b2:	80 81       	ld	r24, Z
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	83 57       	subi	r24, 0x73	; 115
    38b8:	9b 48       	sbci	r25, 0x8B	; 139
    38ba:	d5 01       	movw	r26, r10
    38bc:	14 96       	adiw	r26, 0x04	; 4
    38be:	8d 93       	st	X+, r24
    38c0:	9c 93       	st	X, r25
    38c2:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    38c4:	f5 01       	movw	r30, r10
    38c6:	ec 5b       	subi	r30, 0xBC	; 188
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 82       	st	Z, r8
    38cc:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    38ce:	e0 5c       	subi	r30, 0xC0	; 192
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	80 82       	st	Z, r8
    38d4:	91 82       	std	Z+1, r9	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    38d6:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3981+0xa>
    38da:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    38de:	d3 94       	inc	r13
    38e0:	dd cf       	rjmp	.-70     	; 0x389c <ProcessInput+0xeb4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38e2:	88 ee       	ldi	r24, 0xE8	; 232
    38e4:	94 e7       	ldi	r25, 0x74	; 116
    38e6:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    38ea:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    38ee:	8d e3       	ldi	r24, 0x3D	; 61
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    38f6:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    3902:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
    3906:	6e c0       	rjmp	.+220    	; 0x39e4 <ProcessInput+0xffc>
    3908:	e0 91 2d 38 	lds	r30, 0x382D	; 0x80382d <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	ee 0f       	add	r30, r30
    3910:	ff 1f       	adc	r31, r31
    3912:	e5 53       	subi	r30, 0x35	; 53
    3914:	f6 4c       	sbci	r31, 0xC6	; 198
    3916:	68 ec       	ldi	r22, 0xC8	; 200
    3918:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	09 f0       	breq	.+2      	; 0x3920 <ProcessInput+0xf38>
    391e:	46 c0       	rjmp	.+140    	; 0x39ac <ProcessInput+0xfc4>
                PopulateObject(route[currDepth+1], &actObj1);
    3920:	80 81       	ld	r24, Z
    3922:	91 81       	ldd	r25, Z+1	; 0x01
    3924:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3928:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3981+0x7>
    392c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <CheckState>
    3930:	88 23       	and	r24, r24
    3932:	01 f1       	breq	.+64     	; 0x3974 <ProcessInput+0xf8c>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3934:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3981+0x26>
    3938:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3981+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    393c:	20 91 e0 38 	lds	r18, 0x38E0	; 0x8038e0 <actObj1.3981+0x18>
    3940:	30 91 e1 38 	lds	r19, 0x38E1	; 0x8038e1 <actObj1.3981+0x19>
    3944:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    3948:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    394c:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3950:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3954:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3958:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    395c:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3981+0x2a>
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3966:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    396a:	80 91 d2 38 	lds	r24, 0x38D2	; 0x8038d2 <actObj1.3981+0xa>
    396e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <UpdateState>
    3972:	38 c0       	rjmp	.+112    	; 0x39e4 <ProcessInput+0xffc>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3974:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3981+0x24>
    3978:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3981+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    397c:	20 91 de 38 	lds	r18, 0x38DE	; 0x8038de <actObj1.3981+0x16>
    3980:	30 91 df 38 	lds	r19, 0x38DF	; 0x8038df <actObj1.3981+0x17>
    3984:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <reactStr+0x2>
    3988:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    398c:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3990:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3994:	10 92 8b 39 	sts	0x398B, r1	; 0x80398b <reactStr+0x82>
    3998:	10 92 8c 39 	sts	0x398C, r1	; 0x80398c <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    399c:	80 91 f1 38 	lds	r24, 0x38F1	; 0x8038f1 <actObj1.3981+0x29>
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    39a6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    39aa:	1c c0       	rjmp	.+56     	; 0x39e4 <ProcessInput+0xffc>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39b4:	80 e6       	ldi	r24, 0x60	; 96
    39b6:	98 e7       	ldi	r25, 0x78	; 120
    39b8:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    39bc:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    39c0:	8d e4       	ldi	r24, 0x4D	; 77
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    39c8:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    39d4:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    39d8:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <getClock>
    39dc:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <PunishmentTime>
    39e0:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	78 2e       	mov	r7, r24
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    39e8:	10 92 f8 38 	sts	0x38F8, r1	; 0x8038f8 <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39ec:	89 e5       	ldi	r24, 0x59	; 89
    39ee:	9a e7       	ldi	r25, 0x7A	; 122
    39f0:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    39f4:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    3a00:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    3a0c:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3a10:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <specialInput>
    3a14:	88 23       	and	r24, r24
    3a16:	19 f0       	breq	.+6      	; 0x3a1e <ProcessInput+0x1036>
    3a18:	70 92 08 39 	sts	0x3908, r7	; 0x803908 <responseList>
    3a1c:	9b c0       	rjmp	.+310    	; 0x3b54 <ProcessInput+0x116c>
    3a1e:	87 2d       	mov	r24, r7
    3a20:	12 c0       	rjmp	.+36     	; 0x3a46 <ProcessInput+0x105e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a22:	89 e5       	ldi	r24, 0x59	; 89
    3a24:	9a e7       	ldi	r25, 0x7A	; 122
    3a26:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <reactStr>
    3a2a:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <reactStr+0x1>
    reactStr[1][number]=length;
    3a2e:	82 e0       	ldi	r24, 0x02	; 2
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	80 93 49 39 	sts	0x3949, r24	; 0x803949 <reactStr+0x40>
    3a36:	90 93 4a 39 	sts	0x394A, r25	; 0x80394a <reactStr+0x41>
    reactStr[2][number]=type;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	80 93 89 39 	sts	0x3989, r24	; 0x803989 <reactStr+0x80>
    3a42:	90 93 8a 39 	sts	0x398A, r25	; 0x80398a <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    3a46:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <SetStandardResponse>
    3a4a:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <responseList>
    3a4e:	82 c0       	rjmp	.+260    	; 0x3b54 <ProcessInput+0x116c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a50:	81 ed       	ldi	r24, 0xD1	; 209
    3a52:	99 e7       	ldi	r25, 0x79	; 121
    3a54:	92 cd       	rjmp	.-1244   	; 0x357a <ProcessInput+0xb92>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3a56:	b2 e0       	ldi	r27, 0x02	; 2
    3a58:	fb 12       	cpse	r15, r27
    3a5a:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3a5e:	d8 01       	movw	r26, r16
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	6c 91       	ld	r22, X
    3a64:	0e 94 b9 10 	call	0x2172	; 0x2172 <CheckLetter>
    3a68:	88 23       	and	r24, r24
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <ProcessInput+0x1086>
    3a6c:	5b c0       	rjmp	.+182    	; 0x3b24 <ProcessInput+0x113c>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	9c 01       	movw	r18, r24
    3a78:	22 5c       	subi	r18, 0xC2	; 194
    3a7a:	37 4c       	sbci	r19, 0xC7	; 199
    3a7c:	79 01       	movw	r14, r18
    3a7e:	68 ec       	ldi	r22, 0xC8	; 200
    3a80:	78 e3       	ldi	r23, 0x38	; 56
    3a82:	d9 01       	movw	r26, r18
    3a84:	8d 91       	ld	r24, X+
    3a86:	9c 91       	ld	r25, X
    3a88:	0e 94 42 10 	call	0x2084	; 0x2084 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a8c:	86 e9       	ldi	r24, 0x96	; 150
    3a8e:	97 e7       	ldi	r25, 0x77	; 119
    3a90:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3a94:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3a98:	80 e1       	ldi	r24, 0x10	; 16
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x42>
    3aa0:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x43>
    reactStr[2][number]=type;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x82>
    3aac:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3ab0:	20 91 e2 38 	lds	r18, 0x38E2	; 0x8038e2 <actObj1.3981+0x1a>
    3ab4:	30 91 e3 38 	lds	r19, 0x38E3	; 0x8038e3 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ab8:	40 91 d4 38 	lds	r20, 0x38D4	; 0x8038d4 <actObj1.3981+0xc>
    3abc:	50 91 d5 38 	lds	r21, 0x38D5	; 0x8038d5 <actObj1.3981+0xd>
    3ac0:	40 93 0d 39 	sts	0x390D, r20	; 0x80390d <reactStr+0x4>
    3ac4:	50 93 0e 39 	sts	0x390E, r21	; 0x80390e <reactStr+0x5>
    reactStr[1][number]=length;
    3ac8:	20 93 4d 39 	sts	0x394D, r18	; 0x80394d <reactStr+0x44>
    3acc:	30 93 4e 39 	sts	0x394E, r19	; 0x80394e <reactStr+0x45>
    reactStr[2][number]=type;
    3ad0:	10 92 8d 39 	sts	0x398D, r1	; 0x80398d <reactStr+0x84>
    3ad4:	10 92 8e 39 	sts	0x398E, r1	; 0x80398e <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ad8:	29 e5       	ldi	r18, 0x59	; 89
    3ada:	3a e7       	ldi	r19, 0x7A	; 122
    3adc:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x6>
    3ae0:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x7>
    reactStr[1][number]=length;
    3ae4:	22 e0       	ldi	r18, 0x02	; 2
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x46>
    3aec:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x47>
    reactStr[2][number]=type;
    3af0:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x86>
    3af4:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3af8:	29 e5       	ldi	r18, 0x59	; 89
    3afa:	37 e7       	ldi	r19, 0x77	; 119
    3afc:	20 93 11 39 	sts	0x3911, r18	; 0x803911 <reactStr+0x8>
    3b00:	30 93 12 39 	sts	0x3912, r19	; 0x803912 <reactStr+0x9>
    reactStr[1][number]=length;
    3b04:	2d e3       	ldi	r18, 0x3D	; 61
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	20 93 51 39 	sts	0x3951, r18	; 0x803951 <reactStr+0x48>
    3b0c:	30 93 52 39 	sts	0x3952, r19	; 0x803952 <reactStr+0x49>
    reactStr[2][number]=type;
    3b10:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <reactStr+0x88>
    3b14:	90 93 92 39 	sts	0x3992, r25	; 0x803992 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3b18:	f7 01       	movw	r30, r14
    3b1a:	10 82       	st	Z, r1
    3b1c:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3b1e:	f5 e0       	ldi	r31, 0x05	; 5
    3b20:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3b22:	64 cf       	rjmp	.-312    	; 0x39ec <ProcessInput+0x1004>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b24:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3b28:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3b2c:	00 97       	sbiw	r24, 0x00	; 0
    3b2e:	49 f0       	breq	.+18     	; 0x3b42 <ProcessInput+0x115a>
                        if (CheckLetter(inventory[x], data[1])) {
    3b30:	f8 01       	movw	r30, r16
    3b32:	61 81       	ldd	r22, Z+1	; 0x01
    3b34:	0e 94 b9 10 	call	0x2172	; 0x2172 <CheckLetter>
    3b38:	88 23       	and	r24, r24
    3b3a:	19 f0       	breq	.+6      	; 0x3b42 <ProcessInput+0x115a>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	98 cf       	rjmp	.-208    	; 0x3a72 <ProcessInput+0x108a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b42:	81 e6       	ldi	r24, 0x61	; 97
    3b44:	99 e7       	ldi	r25, 0x79	; 121
    3b46:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <reactStr+0x2>
    3b4a:	90 93 0c 39 	sts	0x390C, r25	; 0x80390c <reactStr+0x3>
    reactStr[1][number]=length;
    3b4e:	81 e2       	ldi	r24, 0x21	; 33
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	0f c8       	rjmp	.-4066   	; 0x2b72 <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3b54:	d8 01       	movw	r26, r16
    3b56:	1c 92       	st	X, r1
    serRxDone = 0;
    3b58:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    RXCNT = 0;    
    3b5c:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	28 96       	adiw	r28, 0x08	; 8
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	ff 90       	pop	r15
    3b70:	ef 90       	pop	r14
    3b72:	df 90       	pop	r13
    3b74:	cf 90       	pop	r12
    3b76:	bf 90       	pop	r11
    3b78:	af 90       	pop	r10
    3b7a:	9f 90       	pop	r9
    3b7c:	8f 90       	pop	r8
    3b7e:	7f 90       	pop	r7
    3b80:	6f 90       	pop	r6
    3b82:	5f 90       	pop	r5
    3b84:	08 95       	ret

00003b86 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3b86:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3b88:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <PunishmentTime>
    3b8c:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <PunishmentTime+0x1>
    3b90:	89 2b       	or	r24, r25
    3b92:	09 f1       	breq	.+66     	; 0x3bd6 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3b94:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <getClock>
        if (PunishmentCount < PunishmentTime)
    3b98:	20 91 f5 38 	lds	r18, 0x38F5	; 0x8038f5 <PunishmentTime>
    3b9c:	30 91 f6 38 	lds	r19, 0x38F6	; 0x8038f6 <PunishmentTime+0x1>
    3ba0:	82 17       	cp	r24, r18
    3ba2:	93 07       	cpc	r25, r19
    3ba4:	08 f4       	brcc	.+2      	; 0x3ba8 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3ba6:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3ba8:	ac 01       	movw	r20, r24
    3baa:	42 1b       	sub	r20, r18
    3bac:	53 0b       	sbc	r21, r19
    3bae:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3bb0:	4b 30       	cpi	r20, 0x0B	; 11
    3bb2:	51 05       	cpc	r21, r1
    3bb4:	30 f0       	brcs	.+12     	; 0x3bc2 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3bb6:	10 92 f5 38 	sts	0x38F5, r1	; 0x8038f5 <PunishmentTime>
    3bba:	10 92 f6 38 	sts	0x38F6, r1	; 0x8038f6 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3bbe:	2a e0       	ldi	r18, 0x0A	; 10
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3bc2:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    3bc6:	81 11       	cpse	r24, r1
    3bc8:	06 c0       	rjmp	.+12     	; 0x3bd6 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3bca:	65 e0       	ldi	r22, 0x05	; 5
    3bcc:	62 1b       	sub	r22, r18
    3bce:	8a e0       	ldi	r24, 0x0A	; 10
    3bd0:	82 1b       	sub	r24, r18
    3bd2:	0e 94 48 0b 	call	0x1690	; 0x1690 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3bd6:	0e 94 9d 11 	call	0x233a	; 0x233a <CheckSend>
    3bda:	88 23       	and	r24, r24
    3bdc:	11 f0       	breq	.+4      	; 0x3be2 <TextAdventure+0x5c>
    3bde:	c1 e0       	ldi	r28, 0x01	; 1
    3be0:	18 c0       	rjmp	.+48     	; 0x3c12 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3be2:	0e 94 0c 12 	call	0x2418	; 0x2418 <CheckResponse>
    3be6:	c8 2f       	mov	r28, r24
    3be8:	81 11       	cpse	r24, r1
    3bea:	f9 cf       	rjmp	.-14     	; 0x3bde <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3bec:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <PunishmentTime>
    3bf0:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <PunishmentTime+0x1>
    3bf4:	89 2b       	or	r24, r25
    3bf6:	69 f4       	brne	.+26     	; 0x3c12 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3bf8:	8c e5       	ldi	r24, 0x5C	; 92
    3bfa:	98 e3       	ldi	r25, 0x38	; 56
    3bfc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <CheckInput>
    3c00:	c8 2f       	mov	r28, r24
    3c02:	81 11       	cpse	r24, r1
    3c04:	05 c0       	rjmp	.+10     	; 0x3c10 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3c06:	8c e5       	ldi	r24, 0x5C	; 92
    3c08:	98 e3       	ldi	r25, 0x38	; 56
    3c0a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <ProcessInput>
    3c0e:	01 c0       	rjmp	.+2      	; 0x3c12 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3c10:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3c12:	8c 2f       	mov	r24, r28
    3c14:	cf 91       	pop	r28
    3c16:	08 95       	ret

00003c18 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3c18:	0e 94 07 05 	call	0xa0e	; 0xa0e <Setup>
    LoadGameState();
    3c1c:	0e 94 b6 0a 	call	0x156c	; 0x156c <LoadGameState>
    SelfTest();
    3c20:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <SelfTest>
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);

            dimValueSum -= (dimValueSum>>8);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3c24:	cf e1       	ldi	r28, 0x1F	; 31
    3c26:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();
    LoadGameState();
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3c28:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <GenerateAudio>
    3c2c:	88 23       	and	r24, r24
    3c2e:	e1 f3       	breq	.-8      	; 0x3c28 <main+0x10>
            lastButtonState = buttonState;
    3c30:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3c34:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3c38:	0e 94 12 09 	call	0x1224	; 0x1224 <CheckButtons>
    3c3c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3c40:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3c44:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3c48:	82 31       	cpi	r24, 0x12	; 18
    3c4a:	19 f4       	brne	.+6      	; 0x3c52 <main+0x3a>
    3c4c:	0e 94 03 09 	call	0x1206	; 0x1206 <SelectAuIn>
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <main+0x3e>
    3c52:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <SelectTSens>

            GenerateBlinks();
    3c56:	0e 94 86 0b 	call	0x170c	; 0x170c <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3c5a:	95 df       	rcall	.-214    	; 0x3b86 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3c5c:	0e 94 0a 04 	call	0x814	; 0x814 <MagnetMaze>
            LanyardCode();
    3c60:	0e 94 12 03 	call	0x624	; 0x624 <LanyardCode>
            //BastetDictates();
            MakeFriends();
    3c64:	0e 94 83 00 	call	0x106	; 0x106 <MakeFriends>

            //Save progress
            SaveGameState();
    3c68:	0e 94 c3 09 	call	0x1386	; 0x1386 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3c6c:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <adcPhot>
    3c70:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <adcPhot+0x1>
    3c74:	0a 97       	sbiw	r24, 0x0a	; 10
    3c76:	20 f4       	brcc	.+8      	; 0x3c80 <main+0x68>
    3c78:	61 e0       	ldi	r22, 0x01	; 1
    3c7a:	84 e7       	ldi	r24, 0x74	; 116
    3c7c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    3c80:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <adcPhot>
    3c84:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <adcPhot+0x1>
    3c88:	85 36       	cpi	r24, 0x65	; 101
    3c8a:	91 05       	cpc	r25, r1
    3c8c:	20 f0       	brcs	.+8      	; 0x3c96 <main+0x7e>
    3c8e:	60 e0       	ldi	r22, 0x00	; 0
    3c90:	84 e7       	ldi	r24, 0x74	; 116
    3c92:	0e 94 4a 0a 	call	0x1494	; 0x1494 <WriteStatusBit>

            dimValueSum -= (dimValueSum>>8);
    3c96:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3c9a:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3c9e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3ca2:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3ca6:	23 2f       	mov	r18, r19
    3ca8:	33 27       	eor	r19, r19
    3caa:	82 1b       	sub	r24, r18
    3cac:	93 0b       	sbc	r25, r19
    3cae:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3cb2:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3cb6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3cba:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3cbe:	93 95       	inc	r25
    3cc0:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3cc4:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3cc8:	20 91 ab 3a 	lds	r18, 0x3AAB	; 0x803aab <adcPhot>
    3ccc:	30 91 ac 3a 	lds	r19, 0x3AAC	; 0x803aac <adcPhot+0x1>
    3cd0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3cd4:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3cd8:	22 0f       	add	r18, r18
    3cda:	23 2f       	mov	r18, r19
    3cdc:	22 1f       	adc	r18, r18
    3cde:	33 0b       	sbc	r19, r19
    3ce0:	31 95       	neg	r19
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e2 1b       	sub	r30, r18
    3ce6:	f3 0b       	sbc	r31, r19
    3ce8:	e8 53       	subi	r30, 0x38	; 56
    3cea:	f2 44       	sbci	r31, 0x42	; 66
    3cec:	20 81       	ld	r18, Z
    3cee:	82 1b       	sub	r24, r18
    3cf0:	91 09       	sbc	r25, r1
    3cf2:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3cf6:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>8;
    3cfa:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3cfe:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d02:	90 93 0c 38 	sts	0x380C, r25	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3d06:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <HotSummer>
    3d0a:	8e cf       	rjmp	.-228    	; 0x3c28 <main+0x10>

00003d0c <__udivmodqi4>:
    3d0c:	99 1b       	sub	r25, r25
    3d0e:	79 e0       	ldi	r23, 0x09	; 9
    3d10:	04 c0       	rjmp	.+8      	; 0x3d1a <__udivmodqi4_ep>

00003d12 <__udivmodqi4_loop>:
    3d12:	99 1f       	adc	r25, r25
    3d14:	96 17       	cp	r25, r22
    3d16:	08 f0       	brcs	.+2      	; 0x3d1a <__udivmodqi4_ep>
    3d18:	96 1b       	sub	r25, r22

00003d1a <__udivmodqi4_ep>:
    3d1a:	88 1f       	adc	r24, r24
    3d1c:	7a 95       	dec	r23
    3d1e:	c9 f7       	brne	.-14     	; 0x3d12 <__udivmodqi4_loop>
    3d20:	80 95       	com	r24
    3d22:	08 95       	ret

00003d24 <__divmodhi4>:
    3d24:	97 fb       	bst	r25, 7
    3d26:	07 2e       	mov	r0, r23
    3d28:	16 f4       	brtc	.+4      	; 0x3d2e <__divmodhi4+0xa>
    3d2a:	00 94       	com	r0
    3d2c:	06 d0       	rcall	.+12     	; 0x3d3a <__divmodhi4_neg1>
    3d2e:	77 fd       	sbrc	r23, 7
    3d30:	08 d0       	rcall	.+16     	; 0x3d42 <__divmodhi4_neg2>
    3d32:	11 d0       	rcall	.+34     	; 0x3d56 <__udivmodhi4>
    3d34:	07 fc       	sbrc	r0, 7
    3d36:	05 d0       	rcall	.+10     	; 0x3d42 <__divmodhi4_neg2>
    3d38:	3e f4       	brtc	.+14     	; 0x3d48 <__divmodhi4_exit>

00003d3a <__divmodhi4_neg1>:
    3d3a:	90 95       	com	r25
    3d3c:	81 95       	neg	r24
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	08 95       	ret

00003d42 <__divmodhi4_neg2>:
    3d42:	70 95       	com	r23
    3d44:	61 95       	neg	r22
    3d46:	7f 4f       	sbci	r23, 0xFF	; 255

00003d48 <__divmodhi4_exit>:
    3d48:	08 95       	ret

00003d4a <__tablejump2__>:
    3d4a:	ee 0f       	add	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	05 90       	lpm	r0, Z+
    3d50:	f4 91       	lpm	r31, Z
    3d52:	e0 2d       	mov	r30, r0
    3d54:	09 94       	ijmp

00003d56 <__udivmodhi4>:
    3d56:	aa 1b       	sub	r26, r26
    3d58:	bb 1b       	sub	r27, r27
    3d5a:	51 e1       	ldi	r21, 0x11	; 17
    3d5c:	07 c0       	rjmp	.+14     	; 0x3d6c <__udivmodhi4_ep>

00003d5e <__udivmodhi4_loop>:
    3d5e:	aa 1f       	adc	r26, r26
    3d60:	bb 1f       	adc	r27, r27
    3d62:	a6 17       	cp	r26, r22
    3d64:	b7 07       	cpc	r27, r23
    3d66:	10 f0       	brcs	.+4      	; 0x3d6c <__udivmodhi4_ep>
    3d68:	a6 1b       	sub	r26, r22
    3d6a:	b7 0b       	sbc	r27, r23

00003d6c <__udivmodhi4_ep>:
    3d6c:	88 1f       	adc	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	5a 95       	dec	r21
    3d72:	a9 f7       	brne	.-22     	; 0x3d5e <__udivmodhi4_loop>
    3d74:	80 95       	com	r24
    3d76:	90 95       	com	r25
    3d78:	bc 01       	movw	r22, r24
    3d7a:	cd 01       	movw	r24, r26
    3d7c:	08 95       	ret

00003d7e <_exit>:
    3d7e:	f8 94       	cli

00003d80 <__stop_program>:
    3d80:	ff cf       	rjmp	.-2      	; 0x3d80 <__stop_program>
