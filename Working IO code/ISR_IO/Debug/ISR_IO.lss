
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00803800  00002de2  00002e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d32  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0000ad32  00002d32  00002de6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002ce  00803890  00803890  00002f26  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000268  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a68  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000238d  00000000  00000000  00008c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a25  00000000  00000000  0000aff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007d4  00000000  00000000  0000da1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001791  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e5d  00000000  00000000  0000f981  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000308  00000000  00000000  000137de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c4       	rjmp	.+2220   	; 0x8c6 <__vector_6>
      1a:	00 00       	nop
      1c:	a2 c4       	rjmp	.+2372   	; 0x962 <__vector_7>
      1e:	00 00       	nop
      20:	8e c2       	rjmp	.+1308   	; 0x53e <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c2       	rjmp	.+1450   	; 0x5e0 <__vector_13>
      36:	00 00       	nop
      38:	06 c3       	rjmp	.+1548   	; 0x646 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c4 c3       	rjmp	.+1928   	; 0x7da <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ee c3       	rjmp	.+2012   	; 0x836 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3f c3       	rjmp	.+1662   	; 0x6ec <__vector_27>
      6e:	00 00       	nop
      70:	98 c3       	rjmp	.+1840   	; 0x7a2 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e2 ee       	ldi	r30, 0xE2	; 226
      90:	fd e2       	ldi	r31, 0x2D	; 45
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 39       	cpi	r26, 0x90	; 144
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a0 e9       	ldi	r26, 0x90	; 144
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 35       	cpi	r26, 0x5E	; 94
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <main>
      b2:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	80 83       	st	Z, r24
      c4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      c8:	a1 e2       	ldi	r26, 0x21	; 33
      ca:	b4 e0       	ldi	r27, 0x04	; 4
      cc:	92 e0       	ldi	r25, 0x02	; 2
      ce:	9c 93       	st	X, r25
      d0:	90 83       	st	Z, r25
      d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      d6:	e0 e1       	ldi	r30, 0x10	; 16
      d8:	f8 e0       	ldi	r31, 0x08	; 8
      da:	97 e0       	ldi	r25, 0x07	; 7
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	94 83       	std	Z+4, r25	; 0x04
      e2:	83 83       	std	Z+3, r24	; 0x03
      e4:	8c 93       	st	X, r24
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	85 81       	ldd	r24, Z+5	; 0x05
      ee:	84 6c       	ori	r24, 0xC4	; 196
      f0:	85 83       	std	Z+5, r24	; 0x05
      f2:	08 95       	ret

000000f4 <I2C_recover>:
      f4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     108:	99 e0       	ldi	r25, 0x09	; 9
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     112:	30 e1       	ldi	r19, 0x10	; 16
     114:	3a 95       	dec	r19
     116:	f1 f7       	brne	.-4      	; 0x114 <I2C_recover+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_recover+0x26>
     11a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     11e:	30 e1       	ldi	r19, 0x10	; 16
     120:	3a 95       	dec	r19
     122:	f1 f7       	brne	.-4      	; 0x120 <I2C_recover+0x2c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <I2C_recover+0x32>
     126:	91 50       	subi	r25, 0x01	; 1
     128:	89 f7       	brne	.-30     	; 0x10c <I2C_recover+0x18>
     12a:	28 e0       	ldi	r18, 0x08	; 8
     12c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     130:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     13e:	91 60       	ori	r25, 0x01	; 1
     140:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     144:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	94 6c       	ori	r25, 0xC4	; 196
     14a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     152:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     156:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	84 6c       	ori	r24, 0xC4	; 196
     16a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16e:	08 95       	ret

00000170 <I2C_start>:
     170:	28 2f       	mov	r18, r24
     172:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     176:	90 6c       	ori	r25, 0xC0	; 192
     178:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	89 2f       	mov	r24, r25
     182:	84 70       	andi	r24, 0x04	; 4
     184:	92 fd       	sbrc	r25, 2
     186:	03 c0       	rjmp	.+6      	; 0x18e <I2C_start+0x1e>
     188:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     18c:	08 95       	ret
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	08 95       	ret

00000192 <I2C_wait_ACK>:
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     19c:	87 fd       	sbrc	r24, 7
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a8:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     1ac:	81 11       	cpse	r24, r1
     1ae:	f4 cf       	rjmp	.-24     	; 0x198 <I2C_wait_ACK+0x6>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	82 fd       	sbrc	r24, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <I2C_wait_ACK+0x46>
     1c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ca:	83 fd       	sbrc	r24, 3
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <I2C_wait_ACK+0x4a>
     1ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d2:	82 95       	swap	r24
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret

000001e0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e2:	8c e0       	ldi	r24, 0x0C	; 12
     1e4:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1e8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ec:	89 2f       	mov	r24, r25
     1ee:	83 70       	andi	r24, 0x03	; 3
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1f8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1fc:	97 fd       	sbrc	r25, 7
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     200:	90 91 8e 3a 	lds	r25, 0x3A8E	; 0x803a8e <timeout_I2C>
     204:	91 11       	cpse	r25, r1
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <I2C_read+0x18>
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     20c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     210:	90 6c       	ori	r25, 0xC0	; 192
     212:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     216:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21a:	92 fd       	sbrc	r25, 2
     21c:	1e c0       	rjmp	.+60     	; 0x25a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     21e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     222:	93 fd       	sbrc	r25, 3
     224:	1d c0       	rjmp	.+58     	; 0x260 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     226:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22a:	89 2f       	mov	r24, r25
     22c:	80 71       	andi	r24, 0x10	; 16
     22e:	94 fd       	sbrc	r25, 4
     230:	16 c0       	rjmp	.+44     	; 0x25e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     232:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <I2C_read+0x5e>
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	01 c0       	rjmp	.+2      	; 0x240 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     23e:	94 60       	ori	r25, 0x04	; 4
     240:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     244:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     248:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24a:	61 11       	cpse	r22, r1
     24c:	09 c0       	rjmp	.+18     	; 0x260 <I2C_read+0x80>
     24e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     252:	92 60       	ori	r25, 0x02	; 2
     254:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     258:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     25e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     260:	08 95       	ret

00000262 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     262:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	b1 f4       	brne	.+44     	; 0x2a0 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     274:	80 81       	ld	r24, Z
     276:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     27e:	86 fd       	sbrc	r24, 6
     280:	06 c0       	rjmp	.+12     	; 0x28e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     282:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     286:	81 11       	cpse	r24, r1
     288:	f8 cf       	rjmp	.-16     	; 0x27a <I2C_write+0x18>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     28e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     292:	82 fd       	sbrc	r24, 2
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     296:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29a:	82 95       	swap	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a4:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2a6:	08 95       	ret

000002a8 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2a8:	e0 e1       	ldi	r30, 0x10	; 16
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 83       	std	Z+4, r24	; 0x04
     2b2:	08 95       	ret

000002b4 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	6b 01       	movw	r12, r22
     2c4:	f4 2e       	mov	r15, r20
     2c6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2c8:	18 2f       	mov	r17, r24
     2ca:	11 0f       	add	r17, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	50 df       	rcall	.-352    	; 0x170 <I2C_start>
	if (status != 0) goto error;
     2d0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d2:	2b c0       	rjmp	.+86     	; 0x32a <I2C_read_bytes+0x76>
     2d4:	5e df       	rcall	.-324    	; 0x192 <I2C_wait_ACK>
	if (status == 1) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <I2C_read_bytes+0x2c>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <I2C_stop>
		return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	27 c0       	rjmp	.+78     	; 0x32e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e0:	81 11       	cpse	r24, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2e6:	49 f0       	breq	.+18     	; 0x2fa <I2C_read_bytes+0x46>
     2e8:	c6 01       	movw	r24, r12
     2ea:	bb df       	rcall	.-138    	; 0x262 <I2C_write>
	    if (status != 0) goto error;
     2ec:	81 11       	cpse	r24, r1
     2ee:	1d c0       	rjmp	.+58     	; 0x32a <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	c8 1a       	sub	r12, r24
     2f4:	d8 0a       	sbc	r13, r24
        --reg_len;
     2f6:	fa 94       	dec	r15
     2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <I2C_read_bytes+0x30>
     2fa:	01 34       	cpi	r16, 0x41	; 65
     2fc:	08 f0       	brcs	.+2      	; 0x300 <I2C_read_bytes+0x4c>
     2fe:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     300:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     302:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     306:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     308:	40 f0       	brcs	.+16     	; 0x31a <I2C_read_bytes+0x66>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	ce 01       	movw	r24, r28
     30e:	68 df       	rcall	.-304    	; 0x1e0 <I2C_read>
		if (status != 0) goto error;
     310:	81 11       	cpse	r24, r1
     312:	0b c0       	rjmp	.+22     	; 0x32a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     318:	f6 cf       	rjmp	.-20     	; 0x306 <I2C_read_bytes+0x52>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     31e:	60 df       	rcall	.-320    	; 0x1e0 <I2C_read>
     320:	81 11       	cpse	r24, r1
	I2C_stop();
     322:	03 c0       	rjmp	.+6      	; 0x32a <I2C_read_bytes+0x76>
     324:	c1 df       	rcall	.-126    	; 0x2a8 <I2C_stop>
	return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32a:	e4 de       	rcall	.-568    	; 0xf4 <I2C_recover>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     32e:	df 91       	pop	r29
}
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <Setup>:
     33e:	cf 93       	push	r28
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     340:	df 93       	push	r29
     342:	f8 94       	cli
     344:	88 ed       	ldi	r24, 0xD8	; 216
     346:	84 bf       	out	0x34, r24	; 52
     348:	c1 e0       	ldi	r28, 0x01	; 1
     34a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     34e:	8a e4       	ldi	r24, 0x4A	; 74
     350:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     354:	8c e7       	ldi	r24, 0x7C	; 124
     356:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     35a:	9f e3       	ldi	r25, 0x3F	; 63
     35c:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     360:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     364:	80 68       	ori	r24, 0x80	; 128
     366:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     36a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     36e:	80 68       	ori	r24, 0x80	; 128
     370:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     374:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     37e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     382:	80 68       	ori	r24, 0x80	; 128
     384:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     388:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     392:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     396:	80 68       	ori	r24, 0x80	; 128
     398:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     39c:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     3a0:	d2 e0       	ldi	r29, 0x02	; 2
     3a2:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     3a6:	2b e5       	ldi	r18, 0x5B	; 91
     3a8:	31 e0       	ldi	r19, 0x01	; 1
     3aa:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     3ae:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     3b8:	80 ec       	ldi	r24, 0xC0	; 192
     3ba:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     3c4:	1c ba       	out	0x1c, r1	; 28
     3c6:	1d ba       	out	0x1d, r1	; 29
     3c8:	1e ba       	out	0x1e, r1	; 30
     3ca:	1f ba       	out	0x1f, r1	; 31
     3cc:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3d6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     3da:	87 e7       	ldi	r24, 0x77	; 119
     3dc:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     3e0:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     3e4:	8b e0       	ldi	r24, 0x0B	; 11
     3e6:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     3ea:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     3fa:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     406:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     40a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     40e:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     412:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     416:	8b e8       	ldi	r24, 0x8B	; 139
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     41e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     422:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     426:	48 de       	rcall	.-880    	; 0xb8 <I2C_init>
     428:	82 e1       	ldi	r24, 0x12	; 18
     42a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     434:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     438:	86 e0       	ldi	r24, 0x06	; 6
     43a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     43e:	84 e4       	ldi	r24, 0x44	; 68
     440:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     444:	8e e1       	ldi	r24, 0x1E	; 30
     446:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     44a:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     44e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     452:	81 60       	ori	r24, 0x01	; 1
     454:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     458:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     45c:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     460:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     464:	82 e5       	ldi	r24, 0x52	; 82
     466:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     470:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     474:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     478:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     482:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     486:	80 e4       	ldi	r24, 0x40	; 64
     488:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     48c:	80 e8       	ldi	r24, 0x80	; 128
     48e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     492:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     496:	81 60       	ori	r24, 0x01	; 1
     498:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     49c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     4a0:	80 fd       	sbrc	r24, 0
     4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a4:	80 e3       	ldi	r24, 0x30	; 48
     4a6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     4aa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     4ae:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     4b2:	82 fd       	sbrc	r24, 2
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	98 e7       	ldi	r25, 0x78	; 120
     4ba:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     4be:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     4c2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     4c6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     4ca:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     4ce:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     4d2:	82 96       	adiw	r24, 0x22	; 34
     4d4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodhi4>
     4d8:	80 93 3b 3b 	sts	0x3B3B, r24	; 0x803b3b <tmp16bit>
     4dc:	90 93 3c 3b 	sts	0x3B3C, r25	; 0x803b3c <tmp16bit+0x1>
     4e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     4e4:	83 fd       	sbrc	r24, 3
     4e6:	fc cf       	rjmp	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4e8:	80 91 3b 3b 	lds	r24, 0x3B3B	; 0x803b3b <tmp16bit>
     4ec:	90 91 3c 3b 	lds	r25, 0x3B3C	; 0x803b3c <tmp16bit+0x1>
     4f0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     4f4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     4f8:	83 e0       	ldi	r24, 0x03	; 3
     4fa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     504:	88 e0       	ldi	r24, 0x08	; 8
     506:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     50a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     50e:	80 fd       	sbrc	r24, 0
     510:	fc cf       	rjmp	.-8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     512:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     516:	81 60       	ori	r24, 0x01	; 1
     518:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     51c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     520:	81 60       	ori	r24, 0x01	; 1
     522:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     526:	10 92 a3 3a 	sts	0x3AA3, r1	; 0x803aa3 <serRx>
     52a:	83 ea       	ldi	r24, 0xA3	; 163
     52c:	9a e3       	ldi	r25, 0x3A	; 58
     52e:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <serTxAddr>
     532:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <serTxAddr+0x1>
     536:	78 94       	sei
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <__vector_8>:
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
     554:	87 e0       	ldi	r24, 0x07	; 7
     556:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     55a:	84 e4       	ldi	r24, 0x44	; 68
     55c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     560:	ec b3       	in	r30, 0x1c	; 28
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	e8 9f       	mul	r30, r24
     566:	f0 01       	movw	r30, r0
     568:	11 24       	eor	r1, r1
     56a:	e1 5f       	subi	r30, 0xF1	; 241
     56c:	f4 4c       	sbci	r31, 0xC4	; 196
     56e:	a8 e2       	ldi	r26, 0x28	; 40
     570:	ba e0       	ldi	r27, 0x0A	; 10
     572:	96 e0       	ldi	r25, 0x06	; 6
     574:	81 91       	ld	r24, Z+
     576:	8d 93       	st	X+, r24
     578:	9a 95       	dec	r25
     57a:	e1 f7       	brne	.-8      	; 0x574 <__vector_8+0x36>
     57c:	8b e0       	ldi	r24, 0x0B	; 11
     57e:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     582:	8c b3       	in	r24, 0x1c	; 28
     584:	83 30       	cpi	r24, 0x03	; 3
     586:	58 f4       	brcc	.+22     	; 0x59e <__vector_8+0x60>
     588:	8c b3       	in	r24, 0x1c	; 28
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	01 c0       	rjmp	.+2      	; 0x590 <__vector_8+0x52>
     58e:	99 0f       	add	r25, r25
     590:	8a 95       	dec	r24
     592:	ea f7       	brpl	.-6      	; 0x58e <__vector_8+0x50>
     594:	99 b9       	out	0x09, r25	; 9
     596:	8c b3       	in	r24, 0x1c	; 28
     598:	83 95       	inc	r24
     59a:	8c bb       	out	0x1c, r24	; 28
     59c:	0a c0       	rjmp	.+20     	; 0x5b2 <__vector_8+0x74>
     59e:	8c b3       	in	r24, 0x1c	; 28
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	21 f4       	brne	.+8      	; 0x5ac <__vector_8+0x6e>
     5a4:	2a 9a       	sbi	0x05, 2	; 5
     5a6:	83 95       	inc	r24
     5a8:	8c bb       	out	0x1c, r24	; 28
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <__vector_8+0x74>
     5ac:	2e 9a       	sbi	0x05, 6	; 5
     5ae:	88 27       	eor	r24, r24
     5b0:	8c bb       	out	0x1c, r24	; 28
     5b2:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     5b6:	88 23       	and	r24, r24
     5b8:	29 f0       	breq	.+10     	; 0x5c4 <__vector_8+0x86>
     5ba:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     5be:	81 50       	subi	r24, 0x01	; 1
     5c0:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     5ca:	ff 91       	pop	r31
     5cc:	ef 91       	pop	r30
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <__vector_13>:
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
     5f2:	e0 91 e7 3a 	lds	r30, 0x3AE7	; 0x803ae7 <serTxAddr>
     5f6:	f0 91 e8 3a 	lds	r31, 0x3AE8	; 0x803ae8 <serTxAddr+0x1>
     5fa:	80 81       	ld	r24, Z
     5fc:	88 23       	and	r24, r24
     5fe:	91 f0       	breq	.+36     	; 0x624 <__vector_13+0x44>
     600:	80 81       	ld	r24, Z
     602:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     606:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <serTxAddr>
     60a:	90 91 e8 3a 	lds	r25, 0x3AE8	; 0x803ae8 <serTxAddr+0x1>
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <serTxAddr>
     614:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <serTxAddr+0x1>
     618:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     61c:	80 62       	ori	r24, 0x20	; 32
     61e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     622:	05 c0       	rjmp	.+10     	; 0x62e <__vector_13+0x4e>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <serTxDone>
     62a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_14>:
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
     65e:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <auSmpAddr>
     662:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <auSmpAddr+0x1>
     666:	80 81       	ld	r24, Z
     668:	81 11       	cpse	r24, r1
     66a:	08 c0       	rjmp	.+16     	; 0x67c <__vector_14+0x36>
     66c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
     670:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__data_start+0x1>
     674:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <auSmpAddr>
     678:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <auSmpAddr+0x1>
     67c:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <auSmpAddr>
     680:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <auSmpAddr+0x1>
     684:	80 81       	ld	r24, Z
     686:	88 23       	and	r24, r24
     688:	e1 f0       	breq	.+56     	; 0x6c2 <__vector_14+0x7c>
     68a:	20 81       	ld	r18, Z
     68c:	40 91 e4 3a 	lds	r20, 0x3AE4	; 0x803ae4 <auVolume>
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	2f 57       	subi	r18, 0x7F	; 127
     694:	31 09       	sbc	r19, r1
     696:	42 9f       	mul	r20, r18
     698:	c0 01       	movw	r24, r0
     69a:	43 9f       	mul	r20, r19
     69c:	90 0d       	add	r25, r0
     69e:	11 24       	eor	r1, r1
     6a0:	89 2f       	mov	r24, r25
     6a2:	99 0f       	add	r25, r25
     6a4:	99 0b       	sbc	r25, r25
     6a6:	80 58       	subi	r24, 0x80	; 128
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     6ae:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <auSmpAddr>
     6b2:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <auSmpAddr+0x1>
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <auSmpAddr>
     6bc:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <auSmpAddr+0x1>
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <__vector_14+0x88>
     6c2:	80 e8       	ldi	r24, 0x80	; 128
     6c4:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 37 3b 	sts	0x3B37, r24	; 0x803b37 <auPlayDone>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_27>:
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	8f 93       	push	r24
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
     6fc:	80 91 9c 38 	lds	r24, 0x389C	; 0x80389c <serRxDone>
     700:	81 11       	cpse	r24, r1
     702:	44 c0       	rjmp	.+136    	; 0x78c <__vector_27+0xa0>
     704:	ed b3       	in	r30, 0x1d	; 29
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     70c:	ed 55       	subi	r30, 0x5D	; 93
     70e:	f5 4c       	sbci	r31, 0xC5	; 197
     710:	80 83       	st	Z, r24
     712:	ed b3       	in	r30, 0x1d	; 29
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ed 55       	subi	r30, 0x5D	; 93
     718:	f5 4c       	sbci	r31, 0xC5	; 197
     71a:	80 81       	ld	r24, Z
     71c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     720:	ed b3       	in	r30, 0x1d	; 29
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ed 55       	subi	r30, 0x5D	; 93
     726:	f5 4c       	sbci	r31, 0xC5	; 197
     728:	80 81       	ld	r24, Z
     72a:	8a 30       	cpi	r24, 0x0A	; 10
     72c:	39 f0       	breq	.+14     	; 0x73c <__vector_27+0x50>
     72e:	ed b3       	in	r30, 0x1d	; 29
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ed 55       	subi	r30, 0x5D	; 93
     734:	f5 4c       	sbci	r31, 0xC5	; 197
     736:	80 81       	ld	r24, Z
     738:	8d 30       	cpi	r24, 0x0D	; 13
     73a:	49 f4       	brne	.+18     	; 0x74e <__vector_27+0x62>
     73c:	ed b3       	in	r30, 0x1d	; 29
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ed 55       	subi	r30, 0x5D	; 93
     742:	f5 4c       	sbci	r31, 0xC5	; 197
     744:	10 82       	st	Z, r1
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <serRxDone>
     74c:	1f c0       	rjmp	.+62     	; 0x78c <__vector_27+0xa0>
     74e:	ed b3       	in	r30, 0x1d	; 29
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ed 55       	subi	r30, 0x5D	; 93
     754:	f5 4c       	sbci	r31, 0xC5	; 197
     756:	80 81       	ld	r24, Z
     758:	88 30       	cpi	r24, 0x08	; 8
     75a:	39 f0       	breq	.+14     	; 0x76a <__vector_27+0x7e>
     75c:	ed b3       	in	r30, 0x1d	; 29
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ed 55       	subi	r30, 0x5D	; 93
     762:	f5 4c       	sbci	r31, 0xC5	; 197
     764:	80 81       	ld	r24, Z
     766:	8f 37       	cpi	r24, 0x7F	; 127
     768:	59 f4       	brne	.+22     	; 0x780 <__vector_27+0x94>
     76a:	8d b3       	in	r24, 0x1d	; 29
     76c:	88 23       	and	r24, r24
     76e:	41 f0       	breq	.+16     	; 0x780 <__vector_27+0x94>
     770:	ed b3       	in	r30, 0x1d	; 29
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	ed 55       	subi	r30, 0x5D	; 93
     776:	f5 4c       	sbci	r31, 0xC5	; 197
     778:	10 82       	st	Z, r1
     77a:	8d b3       	in	r24, 0x1d	; 29
     77c:	81 50       	subi	r24, 0x01	; 1
     77e:	05 c0       	rjmp	.+10     	; 0x78a <__vector_27+0x9e>
     780:	8d b3       	in	r24, 0x1d	; 29
     782:	80 34       	cpi	r24, 0x40	; 64
     784:	18 f4       	brcc	.+6      	; 0x78c <__vector_27+0xa0>
     786:	8d b3       	in	r24, 0x1d	; 29
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	8d bb       	out	0x1d, r24	; 29
     78c:	80 e8       	ldi	r24, 0x80	; 128
     78e:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	8f 91       	pop	r24
     798:	0f 90       	pop	r0
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	0f 90       	pop	r0
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <__vector_28>:
     7a2:	1f 92       	push	r1
     7a4:	0f 92       	push	r0
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	0f 92       	push	r0
     7aa:	11 24       	eor	r1, r1
     7ac:	8f 93       	push	r24
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
     7b2:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     7b6:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     7c0:	e5 e0       	ldi	r30, 0x05	; 5
     7c2:	f8 e0       	ldi	r31, 0x08	; 8
     7c4:	80 81       	ld	r24, Z
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	80 83       	st	Z, r24
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	8f 91       	pop	r24
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <__vector_20>:
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	8f 93       	push	r24
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
     7ea:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <__data_end>
     7ee:	81 11       	cpse	r24, r1
     7f0:	15 c0       	rjmp	.+42     	; 0x81c <__vector_20+0x42>
     7f2:	8e b3       	in	r24, 0x1e	; 30
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	8f 71       	andi	r24, 0x1F	; 31
     7f8:	8e bb       	out	0x1e, r24	; 30
     7fa:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     7fe:	8e 31       	cpi	r24, 0x1E	; 30
     800:	29 f4       	brne	.+10     	; 0x80c <__vector_20+0x32>
     802:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     806:	80 93 3a 3b 	sts	0x3B3A, r24	; 0x803b3a <adcTemp>
     80a:	0a c0       	rjmp	.+20     	; 0x820 <__vector_20+0x46>
     80c:	ee b3       	in	r30, 0x1e	; 30
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     814:	e1 51       	subi	r30, 0x11	; 17
     816:	f5 4c       	sbci	r31, 0xC5	; 197
     818:	80 83       	st	Z, r24
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__vector_20+0x46>
     81c:	10 92 90 38 	sts	0x3890, r1	; 0x803890 <__data_end>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	8f 91       	pop	r24
     82c:	0f 90       	pop	r0
     82e:	0f be       	out	0x3f, r0	; 63
     830:	0f 90       	pop	r0
     832:	1f 90       	pop	r1
     834:	18 95       	reti

00000836 <__vector_22>:
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     848:	81 11       	cpse	r24, r1
     84a:	0a c0       	rjmp	.+20     	; 0x860 <__vector_22+0x2a>
     84c:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     850:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     854:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <adcPhot>
     858:	90 93 ec 3a 	sts	0x3AEC, r25	; 0x803aec <adcPhot+0x1>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	10 c0       	rjmp	.+32     	; 0x880 <__vector_22+0x4a>
     860:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	79 f4       	brne	.+30     	; 0x886 <__vector_22+0x50>
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     86e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     872:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     876:	80 93 e9 3a 	sts	0x3AE9, r24	; 0x803ae9 <adcHall>
     87a:	90 93 ea 3a 	sts	0x3AEA, r25	; 0x803aea <adcHall+0x1>
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     884:	10 c0       	rjmp	.+32     	; 0x8a6 <__vector_22+0x70>
     886:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     88a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     88e:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <adcBtns>
     892:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <adcBtns+0x1>
     896:	8f b3       	in	r24, 0x1f	; 31
     898:	8f 30       	cpi	r24, 0x0F	; 15
     89a:	29 f4       	brne	.+10     	; 0x8a6 <__vector_22+0x70>
     89c:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     8a6:	8f b3       	in	r24, 0x1f	; 31
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	8f 70       	andi	r24, 0x0F	; 15
     8ae:	99 27       	eor	r25, r25
     8b0:	8f bb       	out	0x1f, r24	; 31
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <__vector_6>:
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     8e2:	81 ff       	sbrs	r24, 1
     8e4:	26 c0       	rjmp	.+76     	; 0x932 <__vector_6+0x6c>
     8e6:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
     8ea:	8f 3f       	cpi	r24, 0xFF	; 255
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <__vector_6+0x32>
     8ee:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <buttonMark>
     8f8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8fc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     900:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     904:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     908:	82 96       	adiw	r24, 0x22	; 34
     90a:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodhi4>
     90e:	80 93 3b 3b 	sts	0x3B3B, r24	; 0x803b3b <tmp16bit>
     912:	90 93 3c 3b 	sts	0x3B3C, r25	; 0x803b3c <tmp16bit+0x1>
     916:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     91a:	83 fd       	sbrc	r24, 3
     91c:	fc cf       	rjmp	.-8      	; 0x916 <__vector_6+0x50>
     91e:	80 91 3b 3b 	lds	r24, 0x3B3B	; 0x803b3b <tmp16bit>
     922:	90 91 3c 3b 	lds	r25, 0x3B3C	; 0x803b3c <tmp16bit+0x1>
     926:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     92a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	0a c0       	rjmp	.+20     	; 0x946 <__vector_6+0x80>
     932:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <minuteMark>
     936:	8f 3f       	cpi	r24, 0xFF	; 255
     938:	29 f0       	breq	.+10     	; 0x944 <__vector_6+0x7e>
     93a:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <minuteMark>
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <minuteMark>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_7>:
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	8f 93       	push	r24
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     974:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     978:	8f 91       	pop	r24
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti

00000984 <EERead>:
     984:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     988:	91 fd       	sbrc	r25, 1
     98a:	fc cf       	rjmp	.-8      	; 0x984 <EERead>
     98c:	fb 01       	movw	r30, r22
     98e:	48 0f       	add	r20, r24
     990:	84 17       	cp	r24, r20
     992:	39 f0       	breq	.+14     	; 0x9a2 <EERead+0x1e>
     994:	a8 2f       	mov	r26, r24
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	bc 5e       	subi	r27, 0xEC	; 236
     99a:	9c 91       	ld	r25, X
     99c:	91 93       	st	Z+, r25
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	f7 cf       	rjmp	.-18     	; 0x990 <EERead+0xc>
     9a2:	08 95       	ret

000009a4 <EEWrite>:
     9a4:	9d e9       	ldi	r25, 0x9D	; 157
     9a6:	24 e0       	ldi	r18, 0x04	; 4
     9a8:	33 e0       	ldi	r19, 0x03	; 3
     9aa:	44 23       	and	r20, r20
     9ac:	09 f1       	breq	.+66     	; 0x9f0 <EEWrite+0x4c>
     9ae:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     9b2:	51 fd       	sbrc	r21, 1
     9b4:	fc cf       	rjmp	.-8      	; 0x9ae <EEWrite+0xa>
     9b6:	94 bf       	out	0x34, r25	; 52
     9b8:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     9bc:	e8 2f       	mov	r30, r24
     9be:	58 2f       	mov	r21, r24
     9c0:	5f 71       	andi	r21, 0x1F	; 31
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	6f 5f       	subi	r22, 0xFF	; 255
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	db 01       	movw	r26, r22
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	ac 91       	ld	r26, X
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	fc 5e       	subi	r31, 0xEC	; 236
     9d2:	a0 83       	st	Z, r26
     9d4:	41 50       	subi	r20, 0x01	; 1
     9d6:	19 f0       	breq	.+6      	; 0x9de <EEWrite+0x3a>
     9d8:	e8 2f       	mov	r30, r24
     9da:	5f 31       	cpi	r21, 0x1F	; 31
     9dc:	81 f7       	brne	.-32     	; 0x9be <EEWrite+0x1a>
     9de:	94 bf       	out	0x34, r25	; 52
     9e0:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     9e4:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     9e8:	52 ff       	sbrs	r21, 2
     9ea:	df cf       	rjmp	.-66     	; 0x9aa <EEWrite+0x6>
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	08 95       	ret
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 95       	ret

000009f4 <SerSend>:
     9f4:	20 91 04 38 	lds	r18, 0x3804	; 0x803804 <serTxDone>
     9f8:	22 23       	and	r18, r18
     9fa:	59 f0       	breq	.+22     	; 0xa12 <SerSend+0x1e>
     9fc:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <serTxAddr>
     a00:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <serTxAddr+0x1>
     a04:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <serTxDone>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	08 95       	ret
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret

00000a16 <SerSpeed>:
     a16:	28 2f       	mov	r18, r24
     a18:	81 11       	cpse	r24, r1
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <SerSpeed+0x8>
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	82 1b       	sub	r24, r18
     a24:	91 09       	sbc	r25, r1
     a26:	98 2f       	mov	r25, r24
     a28:	88 27       	eor	r24, r24
     a2a:	81 50       	subi	r24, 0x01	; 1
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a32:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     a36:	08 95       	ret

00000a38 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     a38:	20 91 e5 3a 	lds	r18, 0x3AE5	; 0x803ae5 <adcBtns>
     a3c:	30 91 e6 3a 	lds	r19, 0x3AE6	; 0x803ae6 <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	36 95       	lsr	r19
     a44:	27 95       	ror	r18
     a46:	9a 95       	dec	r25
     a48:	e1 f7       	brne	.-8      	; 0xa42 <CheckButtons+0xa>
     a4a:	33 27       	eor	r19, r19
     a4c:	2c 35       	cpi	r18, 0x5C	; 92
     a4e:	31 05       	cpc	r19, r1
     a50:	d0 f4       	brcc	.+52     	; 0xa86 <CheckButtons+0x4e>
     a52:	23 35       	cpi	r18, 0x53	; 83
     a54:	31 05       	cpc	r19, r1
     a56:	a8 f5       	brcc	.+106    	; 0xac2 <CheckButtons+0x8a>
     a58:	22 33       	cpi	r18, 0x32	; 50
     a5a:	31 05       	cpc	r19, r1
     a5c:	50 f4       	brcc	.+20     	; 0xa72 <CheckButtons+0x3a>
     a5e:	2d 32       	cpi	r18, 0x2D	; 45
     a60:	31 05       	cpc	r19, r1
     a62:	58 f5       	brcc	.+86     	; 0xaba <CheckButtons+0x82>
     a64:	23 52       	subi	r18, 0x23	; 35
     a66:	31 09       	sbc	r19, r1
     a68:	25 30       	cpi	r18, 0x05	; 5
     a6a:	31 05       	cpc	r19, r1
     a6c:	80 f5       	brcc	.+96     	; 0xace <CheckButtons+0x96>
        case 28 ... 32:         //30: All buttons pressed
        bNibble = 0b1111;
        break;

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     a6e:	9c e0       	ldi	r25, 0x0C	; 12
     a70:	2f c0       	rjmp	.+94     	; 0xad0 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a72:	27 33       	cpi	r18, 0x37	; 55
     a74:	31 05       	cpc	r19, r1
     a76:	18 f1       	brcs	.+70     	; 0xabe <CheckButtons+0x86>
     a78:	2e 53       	subi	r18, 0x3E	; 62
     a7a:	31 09       	sbc	r19, r1
     a7c:	27 30       	cpi	r18, 0x07	; 7
     a7e:	31 05       	cpc	r19, r1
     a80:	30 f5       	brcc	.+76     	; 0xace <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     a82:	96 e0       	ldi	r25, 0x06	; 6
        break;
     a84:	25 c0       	rjmp	.+74     	; 0xad0 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a86:	2a 38       	cpi	r18, 0x8A	; 138
     a88:	31 05       	cpc	r19, r1
     a8a:	50 f4       	brcc	.+20     	; 0xaa0 <CheckButtons+0x68>
     a8c:	29 37       	cpi	r18, 0x79	; 121
     a8e:	31 05       	cpc	r19, r1
     a90:	d0 f4       	brcc	.+52     	; 0xac6 <CheckButtons+0x8e>
     a92:	23 56       	subi	r18, 0x63	; 99
     a94:	31 09       	sbc	r19, r1
     a96:	2b 30       	cpi	r18, 0x0B	; 11
     a98:	31 05       	cpc	r19, r1
     a9a:	c8 f4       	brcc	.+50     	; 0xace <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     a9c:	93 e0       	ldi	r25, 0x03	; 3
        break;
     a9e:	18 c0       	rjmp	.+48     	; 0xad0 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     aa0:	22 3a       	cpi	r18, 0xA2	; 162
     aa2:	31 05       	cpc	r19, r1
     aa4:	a0 f0       	brcs	.+40     	; 0xace <CheckButtons+0x96>
     aa6:	2b 3b       	cpi	r18, 0xBB	; 187
     aa8:	31 05       	cpc	r19, r1
     aaa:	78 f0       	brcs	.+30     	; 0xaca <CheckButtons+0x92>
     aac:	20 5f       	subi	r18, 0xF0	; 240
     aae:	31 09       	sbc	r19, r1
     ab0:	20 31       	cpi	r18, 0x10	; 16
     ab2:	31 05       	cpc	r19, r1
     ab4:	60 f4       	brcc	.+24     	; 0xace <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     ab6:	90 e0       	ldi	r25, 0x00	; 0
        break;
     ab8:	0b c0       	rjmp	.+22     	; 0xad0 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     aba:	99 e0       	ldi	r25, 0x09	; 9
        break;
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     abe:	98 e0       	ldi	r25, 0x08	; 8
        break;
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     ac2:	94 e0       	ldi	r25, 0x04	; 4
        break;
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     ac6:	92 e0       	ldi	r25, 0x02	; 2
        break;
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     aca:	91 e0       	ldi	r25, 0x01	; 1
        break;
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     ace:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     ad0:	28 2f       	mov	r18, r24
     ad2:	2f 70       	andi	r18, 0x0F	; 15
     ad4:	92 13       	cpse	r25, r18
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     ad8:	98 2f       	mov	r25, r24
     ada:	90 7f       	andi	r25, 0xF0	; 240
     adc:	90 3f       	cpi	r25, 0xF0	; 240
     ade:	39 f0       	breq	.+14     	; 0xaee <CheckButtons+0xb6>
     ae0:	80 5f       	subi	r24, 0xF0	; 240
     ae2:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     ae4:	99 23       	and	r25, r25
     ae6:	11 f0       	breq	.+4      	; 0xaec <CheckButtons+0xb4>
     ae8:	89 2f       	mov	r24, r25
     aea:	08 95       	ret
     aec:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     aee:	08 95       	ret

00000af0 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     af0:	80 91 85 38 	lds	r24, 0x3885	; 0x803885 <state.3875>
     af4:	90 91 86 38 	lds	r25, 0x3886	; 0x803886 <state.3875+0x1>
     af8:	9c 01       	movw	r18, r24
     afa:	32 2f       	mov	r19, r18
     afc:	22 27       	eor	r18, r18
     afe:	32 95       	swap	r19
     b00:	33 0f       	add	r19, r19
     b02:	30 7e       	andi	r19, 0xE0	; 224
     b04:	82 27       	eor	r24, r18
     b06:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     b08:	9c 01       	movw	r18, r24
     b0a:	23 2f       	mov	r18, r19
     b0c:	33 27       	eor	r19, r19
     b0e:	26 95       	lsr	r18
     b10:	82 27       	eor	r24, r18
     b12:	93 27       	eor	r25, r19
    state ^= (state << 7);
     b14:	9c 01       	movw	r18, r24
     b16:	36 95       	lsr	r19
     b18:	32 2f       	mov	r19, r18
     b1a:	22 27       	eor	r18, r18
     b1c:	37 95       	ror	r19
     b1e:	27 95       	ror	r18
     b20:	82 27       	eor	r24, r18
     b22:	93 27       	eor	r25, r19
     b24:	80 93 85 38 	sts	0x3885, r24	; 0x803885 <state.3875>
     b28:	90 93 86 38 	sts	0x3886, r25	; 0x803886 <state.3875+0x1>
    return (state & 0xff);
}
     b2c:	08 95       	ret

00000b2e <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	7b 01       	movw	r14, r22
     b3e:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     b40:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     b44:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     b48:	e8 2f       	mov	r30, r24
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	e7 70       	andi	r30, 0x07	; 7
     b50:	ff 27       	eor	r31, r31
     b52:	e9 57       	subi	r30, 0x79	; 121
     b54:	f7 4c       	sbci	r31, 0xC7	; 199
     b56:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     b58:	cb df       	rcall	.-106    	; 0xaf0 <lfsr>
     b5a:	8d 21       	and	r24, r13
     b5c:	c8 0f       	add	r28, r24
     b5e:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     b60:	c7 df       	rcall	.-114    	; 0xaf0 <lfsr>
     b62:	8d 21       	and	r24, r13
     b64:	c8 1b       	sub	r28, r24
     b66:	d1 09       	sbc	r29, r1
     b68:	0c 17       	cp	r16, r28
     b6a:	1d 07       	cpc	r17, r29
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <floatSpeed+0x42>
     b6e:	e8 01       	movw	r28, r16
     b70:	c7 01       	movw	r24, r14
     b72:	ec 16       	cp	r14, r28
     b74:	fd 06       	cpc	r15, r29
     b76:	08 f4       	brcc	.+2      	; 0xb7a <floatSpeed+0x4c>
     b78:	ce 01       	movw	r24, r28
     b7a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    //0x038B is normal rate, for wind we need to be a bit slower
    if (val < min) val = min;  
    TCB1_CCMP = val;
     b7e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     b82:	df 91       	pop	r29
}
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	08 95       	ret

00000b92 <floatAround>:
     b92:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	c8 2f       	mov	r28, r24
     b9c:	04 2f       	mov	r16, r20
     b9e:	12 2f       	mov	r17, r18
    bits = mask[(bits-1)&0x07];
     ba0:	e6 2f       	mov	r30, r22
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	e7 70       	andi	r30, 0x07	; 7
     ba8:	ff 27       	eor	r31, r31
     baa:	e9 57       	subi	r30, 0x79	; 121
     bac:	f7 4c       	sbci	r31, 0xC7	; 199
     bae:	d0 81       	ld	r29, Z
    sample += lfsr()&bits;
     bb0:	9f df       	rcall	.-194    	; 0xaf0 <lfsr>
     bb2:	8d 23       	and	r24, r29
     bb4:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
     bb6:	9c df       	rcall	.-200    	; 0xaf0 <lfsr>
     bb8:	8d 23       	and	r24, r29
     bba:	c8 1b       	sub	r28, r24
     bbc:	8c 2f       	mov	r24, r28
     bbe:	11 23       	and	r17, r17
    if (max){
     bc0:	41 f0       	breq	.+16     	; 0xbd2 <floatAround+0x40>
     bc2:	9c 2f       	mov	r25, r28
     bc4:	1c 17       	cp	r17, r28
     bc6:	08 f4       	brcc	.+2      	; 0xbca <floatAround+0x38>
     bc8:	91 2f       	mov	r25, r17
     bca:	80 2f       	mov	r24, r16
     bcc:	09 17       	cp	r16, r25
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <floatAround+0x40>
     bd0:	89 2f       	mov	r24, r25
     bd2:	df 91       	pop	r29
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    return sample;
}
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <SaveGameState>:
     bdc:	cf 92       	push	r12

//Save changed data to EEPROM
uint8_t SaveGameState(){
     bde:	df 92       	push	r13
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	64 97       	sbiw	r28, 0x14	; 20
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
     bf4:	44 e1       	ldi	r20, 0x14	; 20
     bf6:	be 01       	movw	r22, r28
     bf8:	6f 5f       	subi	r22, 0xFF	; 255
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	c2 de       	rcall	.-636    	; 0x984 <EERead>
     c00:	8f e8       	ldi	r24, 0x8F	; 143
     c02:	c8 2e       	mov	r12, r24
     c04:	8a e3       	ldi	r24, 0x3A	; 58
     c06:	d8 2e       	mov	r13, r24
     c08:	8e 01       	movw	r16, r28
     c0a:	0f 5f       	subi	r16, 0xFF	; 255
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     c0e:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
     c10:	f8 01       	movw	r30, r16
     c12:	81 91       	ld	r24, Z+
     c14:	8f 01       	movw	r16, r30
     c16:	f6 01       	movw	r30, r12
     c18:	90 81       	ld	r25, Z
     c1a:	98 13       	cpse	r25, r24
     c1c:	08 c0       	rjmp	.+16     	; 0xc2e <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     c1e:	f3 94       	inc	r15
     c20:	ff ef       	ldi	r31, 0xFF	; 255
     c22:	cf 1a       	sub	r12, r31
     c24:	df 0a       	sbc	r13, r31
     c26:	80 e1       	ldi	r24, 0x10	; 16
     c28:	f8 12       	cpse	r15, r24
     c2a:	f2 cf       	rjmp	.-28     	; 0xc10 <SaveGameState+0x34>
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     c2e:	41 e0       	ldi	r20, 0x01	; 1
     c30:	b6 01       	movw	r22, r12
     c32:	8f 2d       	mov	r24, r15
     c34:	b7 de       	rcall	.-658    	; 0x9a4 <EEWrite>
     c36:	88 23       	and	r24, r24
     c38:	91 f3       	breq	.-28     	; 0xc1e <SaveGameState+0x42>
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	36 c0       	rjmp	.+108    	; 0xcaa <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
     c3e:	20 91 96 38 	lds	r18, 0x3896	; 0x803896 <inventory>
     c42:	30 91 97 38 	lds	r19, 0x3897	; 0x803897 <inventory+0x1>
     c46:	30 93 9f 3a 	sts	0x3A9F, r19	; 0x803a9f <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
     c4a:	20 93 a0 3a 	sts	0x3AA0, r18	; 0x803aa0 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
     c4e:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
     c52:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
     c56:	90 93 a1 3a 	sts	0x3AA1, r25	; 0x803aa1 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
     c5a:	80 93 a2 3a 	sts	0x3AA2, r24	; 0x803aa2 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
     c5e:	89 89       	ldd	r24, Y+17	; 0x11
     c60:	9a 89       	ldd	r25, Y+18	; 0x12
     c62:	98 27       	eor	r25, r24
     c64:	89 27       	eor	r24, r25
     c66:	98 27       	eor	r25, r24
     c68:	28 17       	cp	r18, r24
     c6a:	39 07       	cpc	r19, r25
     c6c:	69 f4       	brne	.+26     	; 0xc88 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
     c6e:	8b 89       	ldd	r24, Y+19	; 0x13
     c70:	9c 89       	ldd	r25, Y+20	; 0x14
     c72:	98 27       	eor	r25, r24
     c74:	89 27       	eor	r24, r25
     c76:	98 27       	eor	r25, r24
     c78:	20 91 98 38 	lds	r18, 0x3898	; 0x803898 <inventory+0x2>
     c7c:	30 91 99 38 	lds	r19, 0x3899	; 0x803899 <inventory+0x3>
     c80:	28 17       	cp	r18, r24
     c82:	39 07       	cpc	r19, r25
     c84:	49 f4       	brne	.+18     	; 0xc98 <SaveGameState+0xbc>
     c86:	10 c0       	rjmp	.+32     	; 0xca8 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
     c88:	42 e0       	ldi	r20, 0x02	; 2
     c8a:	6f e9       	ldi	r22, 0x9F	; 159
     c8c:	7a e3       	ldi	r23, 0x3A	; 58
     c8e:	80 e1       	ldi	r24, 0x10	; 16
     c90:	89 de       	rcall	.-750    	; 0x9a4 <EEWrite>
     c92:	88 23       	and	r24, r24
     c94:	61 f3       	breq	.-40     	; 0xc6e <SaveGameState+0x92>
     c96:	d1 cf       	rjmp	.-94     	; 0xc3a <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
     c98:	42 e0       	ldi	r20, 0x02	; 2
     c9a:	61 ea       	ldi	r22, 0xA1	; 161
     c9c:	7a e3       	ldi	r23, 0x3A	; 58
     c9e:	82 e1       	ldi	r24, 0x12	; 18
     ca0:	81 de       	rcall	.-766    	; 0x9a4 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	81 11       	cpse	r24, r1
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <SaveGameState+0xce>
     ca8:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
     caa:	89 2f       	mov	r24, r25
     cac:	64 96       	adiw	r28, 0x14	; 20
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	08 95       	ret

00000cc2 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
     cc2:	e8 2f       	mov	r30, r24
     cc4:	ef 77       	andi	r30, 0x7F	; 127
     cc6:	e6 95       	lsr	r30
     cc8:	e6 95       	lsr	r30
     cca:	e6 95       	lsr	r30
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	e1 57       	subi	r30, 0x71	; 113
     cd0:	f5 4c       	sbci	r31, 0xC5	; 197
     cd2:	20 81       	ld	r18, Z
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	87 70       	andi	r24, 0x07	; 7
     cd8:	a9 01       	movw	r20, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <ReadStatusBit+0x1e>
     cdc:	55 95       	asr	r21
     cde:	47 95       	ror	r20
     ce0:	8a 95       	dec	r24
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <ReadStatusBit+0x1a>
     ce4:	ca 01       	movw	r24, r20
}
     ce6:	81 70       	andi	r24, 0x01	; 1
     ce8:	08 95       	ret

00000cea <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
     cea:	e8 2f       	mov	r30, r24
     cec:	ef 77       	andi	r30, 0x7F	; 127
     cee:	e6 95       	lsr	r30
     cf0:	e6 95       	lsr	r30
     cf2:	e6 95       	lsr	r30
     cf4:	28 2f       	mov	r18, r24
     cf6:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e1 57       	subi	r30, 0x71	; 113
     cfc:	f5 4c       	sbci	r31, 0xC5	; 197
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <WriteStatusBit+0x1c>
     d04:	88 0f       	add	r24, r24
     d06:	2a 95       	dec	r18
     d08:	ea f7       	brpl	.-6      	; 0xd04 <WriteStatusBit+0x1a>
     d0a:	66 23       	and	r22, r22
     d0c:	19 f0       	breq	.+6      	; 0xd14 <WriteStatusBit+0x2a>
     d0e:	90 81       	ld	r25, Z
     d10:	89 2b       	or	r24, r25
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
     d14:	80 95       	com	r24
     d16:	90 81       	ld	r25, Z
     d18:	89 23       	and	r24, r25
     d1a:	80 83       	st	Z, r24
     d1c:	08 95       	ret

00000d1e <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
     d1e:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
     d20:	8f 77       	andi	r24, 0x7F	; 127
    if (clearBit) {
     d22:	97 ff       	sbrs	r25, 7
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <UpdateState+0xc>
        WriteStatusBit(num, 0);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <UpdateState+0xe>
    } else {
        WriteStatusBit(num, 1);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	de cf       	rjmp	.-68     	; 0xcea <WriteStatusBit>

00000d2e <CheckState>:
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
     d2e:	cf 93       	push	r28
     d30:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	c6 df       	rcall	.-116    	; 0xcc2 <ReadStatusBit>
     d36:	2c 2f       	mov	r18, r28
     d38:	22 1f       	adc	r18, r18
     d3a:	22 27       	eor	r18, r18
     d3c:	22 1f       	adc	r18, r18
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	81 11       	cpse	r24, r1
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <CheckState+0x18>
     d44:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
     d46:	82 2f       	mov	r24, r18
     d48:	89 27       	eor	r24, r25
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <getID>:
uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
     d4e:	e3 e0       	ldi	r30, 0x03	; 3
     d50:	f1 e1       	ldi	r31, 0x11	; 17
    }
    return 0;
}
uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
     d52:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
     d54:	91 91       	ld	r25, Z+
     d56:	89 0f       	add	r24, r25
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
     d58:	ed 30       	cpi	r30, 0x0D	; 13
     d5a:	91 e1       	ldi	r25, 0x11	; 17
     d5c:	f9 07       	cpc	r31, r25
     d5e:	d1 f7       	brne	.-12     	; 0xd54 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
     d60:	83 70       	andi	r24, 0x03	; 3
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <whoami>
    return whoami;
}
     d68:	08 95       	ret

00000d6a <Reset>:

void Reset(){
     d6a:	ef e8       	ldi	r30, 0x8F	; 143
     d6c:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
     d6e:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
     d70:	8a e3       	ldi	r24, 0x3A	; 58
     d72:	e3 3a       	cpi	r30, 0xA3	; 163
     d74:	f8 07       	cpc	r31, r24
     d76:	d9 f7       	brne	.-10     	; 0xd6e <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
     d78:	ea df       	rcall	.-44     	; 0xd4e <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
     d7a:	81 11       	cpse	r24, r1
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d7e:	80 91 9c 3a 	lds	r24, 0x3A9C	; 0x803a9c <gameState+0xd>
     d82:	80 64       	ori	r24, 0x40	; 64
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	31 f4       	brne	.+12     	; 0xd96 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d8a:	80 91 9c 3a 	lds	r24, 0x3A9C	; 0x803a9c <gameState+0xd>
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	80 93 9c 3a 	sts	0x3A9C, r24	; 0x803a9c <gameState+0xd>
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	21 f4       	brne	.+8      	; 0xda2 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d9a:	80 91 9d 3a 	lds	r24, 0x3A9D	; 0x803a9d <gameState+0xe>
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	05 c0       	rjmp	.+10     	; 0xdac <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	29 f4       	brne	.+10     	; 0xdb0 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     da6:	80 91 9d 3a 	lds	r24, 0x3A9D	; 0x803a9d <gameState+0xe>
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	80 93 9d 3a 	sts	0x3A9D, r24	; 0x803a9d <gameState+0xe>
     db0:	80 91 8f 3a 	lds	r24, 0x3A8F	; 0x803a8f <gameState>
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <gameState>
     dba:	08 95       	ret

00000dbc <GenerateAudio>:
    WriteStatusBit(0, 1);
}

//void setupSound(uint8_t number){

void GenerateAudio(){
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
    static uint8_t auBuffer[128] = {0x80, 0};
    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
     dc4:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     dc8:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
     dcc:	88 27       	eor	r24, r24
     dce:	89 2b       	or	r24, r25
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <GenerateAudio+0x18>
     dd2:	65 c0       	rjmp	.+202    	; 0xe9e <GenerateAudio+0xe2>

        //Silence
        if ((effect&0xE0)==0){
     dd4:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     dd8:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
     ddc:	80 7e       	andi	r24, 0xE0	; 224
     dde:	99 27       	eor	r25, r25
     de0:	89 2b       	or	r24, r25
     de2:	31 f4       	brne	.+12     	; 0xdf0 <GenerateAudio+0x34>
            auRepAddr = &zero;
     de4:	81 e9       	ldi	r24, 0x91	; 145
     de6:	98 e3       	ldi	r25, 0x38	; 56
     de8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     dec:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
     df0:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     df4:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        }

        //Good (bell)
        if ((effect&0xE0)==64){
     df8:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     dfc:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
     e00:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e04:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
     e08:	80 7e       	andi	r24, 0xE0	; 224
     e0a:	99 27       	eor	r25, r25
     e0c:	80 36       	cpi	r24, 0x60	; 96
     e0e:	91 05       	cpc	r25, r1
     e10:	d1 f5       	brne	.+116    	; 0xe86 <GenerateAudio+0xca>
            auBuffer[6]= 0;        
     e12:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <auBuffer.3927+0x6>
            auRepAddr = &auBuffer[0];
     e16:	85 e0       	ldi	r24, 0x05	; 5
     e18:	98 e3       	ldi	r25, 0x38	; 56
     e1a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     e1e:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
     e22:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
     e24:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
     e26:	d3 e0       	ldi	r29, 0x03	; 3
     e28:	8c 2f       	mov	r24, r28
     e2a:	6d 2f       	mov	r22, r29
     e2c:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodqi4>
     e30:	99 23       	and	r25, r25
     e32:	39 f0       	breq	.+14     	; 0xe42 <GenerateAudio+0x86>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	65 e0       	ldi	r22, 0x05	; 5
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	aa de       	rcall	.-684    	; 0xb92 <floatAround>
     e3e:	f8 01       	movw	r30, r16
     e40:	81 83       	std	Z+1, r24	; 0x01
        if ((effect&0xE0)==96){
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
     e42:	cf 5f       	subi	r28, 0xFF	; 255
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	c6 30       	cpi	r28, 0x06	; 6
     e4a:	71 f7       	brne	.-36     	; 0xe28 <GenerateAudio+0x6c>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
     e4c:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
     e50:	88 23       	and	r24, r24
     e52:	c9 f0       	breq	.+50     	; 0xe86 <GenerateAudio+0xca>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	54 e0       	ldi	r21, 0x04	; 4
     e58:	60 e8       	ldi	r22, 0x80	; 128
     e5a:	72 e0       	ldi	r23, 0x02	; 2
     e5c:	85 e0       	ldi	r24, 0x05	; 5
     e5e:	67 de       	rcall	.-818    	; 0xb2e <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
     e60:	80 91 e4 3a 	lds	r24, 0x3AE4	; 0x803ae4 <auVolume>
     e64:	20 ea       	ldi	r18, 0xA0	; 160
     e66:	40 e1       	ldi	r20, 0x10	; 16
     e68:	62 e0       	ldi	r22, 0x02	; 2
     e6a:	93 de       	rcall	.-730    	; 0xb92 <floatAround>
     e6c:	80 93 e4 3a 	sts	0x3AE4, r24	; 0x803ae4 <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
     e70:	20 e9       	ldi	r18, 0x90	; 144
     e72:	40 e7       	ldi	r20, 0x70	; 112
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auBuffer.3927>
     e7a:	8b de       	rcall	.-746    	; 0xb92 <floatAround>
     e7c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auBuffer.3927>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
     e80:	80 95       	com	r24
     e82:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <auBuffer.3927+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
     e86:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e8a:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
     e8e:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e92:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
     e96:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e9a:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        //Rain storm with whistling wind
        else {
        }
    }
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret

00000eac <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	62 97       	sbiw	r28, 0x12	; 18
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	8a 8b       	std	Y+18, r24	; 0x12
     ebe:	80 e1       	ldi	r24, 0x10	; 16
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	fd ea       	ldi	r31, 0xAD	; 173
     ec4:	de 01       	movw	r26, r28
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	01 90       	ld	r0, Z+
     eca:	0d 92       	st	X+, r0
     ecc:	8a 95       	dec	r24
     ece:	e1 f7       	brne	.-8      	; 0xec8 <Cheat+0x1c>
     ed0:	fe 01       	movw	r30, r28
     ed2:	31 96       	adiw	r30, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	21 91       	ld	r18, Z+
     eda:	31 91       	ld	r19, Z+
     edc:	26 17       	cp	r18, r22
     ede:	37 07       	cpc	r19, r23
     ee0:	09 f4       	brne	.+2      	; 0xee4 <Cheat+0x38>
     ee2:	89 2f       	mov	r24, r25
     ee4:	9f 5f       	subi	r25, 0xFF	; 255
     ee6:	98 30       	cpi	r25, 0x08	; 8
     ee8:	b9 f7       	brne	.-18     	; 0xed8 <Cheat+0x2c>
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	10 f0       	brcs	.+4      	; 0xef2 <Cheat+0x46>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	12 c0       	rjmp	.+36     	; 0xf16 <Cheat+0x6a>
     ef2:	18 e1       	ldi	r17, 0x18	; 24
     ef4:	18 0f       	add	r17, r24
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	be 01       	movw	r22, r28
     efa:	6f 5e       	subi	r22, 0xEF	; 239
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	81 2f       	mov	r24, r17
     f00:	41 dd       	rcall	.-1406   	; 0x984 <EERead>
     f02:	89 89       	ldd	r24, Y+17	; 0x11
     f04:	8f 3f       	cpi	r24, 0xFF	; 255
     f06:	99 f7       	brne	.-26     	; 0xeee <Cheat+0x42>
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	be 01       	movw	r22, r28
     f0c:	6e 5e       	subi	r22, 0xEE	; 238
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	81 2f       	mov	r24, r17
     f12:	48 dd       	rcall	.-1392   	; 0x9a4 <EEWrite>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	62 96       	adiw	r28, 0x12	; 18
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	08 95       	ret

00000f24 <DecryptData>:
     f24:	f9 01       	movw	r30, r18
     f26:	9c 01       	movw	r18, r24
     f28:	2e 1b       	sub	r18, r30
     f2a:	3f 0b       	sbc	r19, r31
     f2c:	88 e0       	ldi	r24, 0x08	; 8
     f2e:	48 9f       	mul	r20, r24
     f30:	a0 01       	movw	r20, r0
     f32:	11 24       	eor	r1, r1
     f34:	4e 52       	subi	r20, 0x2E	; 46
     f36:	52 45       	sbci	r21, 0x52	; 82
     f38:	66 23       	and	r22, r22
     f3a:	69 f0       	breq	.+26     	; 0xf56 <DecryptData+0x32>
     f3c:	df 01       	movw	r26, r30
     f3e:	a2 0f       	add	r26, r18
     f40:	b3 1f       	adc	r27, r19
     f42:	a7 70       	andi	r26, 0x07	; 7
     f44:	bb 27       	eor	r27, r27
     f46:	a4 0f       	add	r26, r20
     f48:	b5 1f       	adc	r27, r21
     f4a:	80 81       	ld	r24, Z
     f4c:	9c 91       	ld	r25, X
     f4e:	98 27       	eor	r25, r24
     f50:	91 93       	st	Z+, r25
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	f1 cf       	rjmp	.-30     	; 0xf38 <DecryptData+0x14>
     f56:	08 95       	ret

00000f58 <UnflipData>:
     f58:	26 2f       	mov	r18, r22
     f5a:	fb 01       	movw	r30, r22
     f5c:	35 e5       	ldi	r19, 0x55	; 85
     f5e:	9e 2f       	mov	r25, r30
     f60:	92 1b       	sub	r25, r18
     f62:	98 17       	cp	r25, r24
     f64:	28 f4       	brcc	.+10     	; 0xf70 <UnflipData+0x18>
     f66:	90 81       	ld	r25, Z
     f68:	92 95       	swap	r25
     f6a:	93 27       	eor	r25, r19
     f6c:	91 93       	st	Z+, r25
     f6e:	f7 cf       	rjmp	.-18     	; 0xf5e <UnflipData+0x6>
     f70:	08 95       	ret

00000f72 <ExtEERead>:
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	00 d0       	rcall	.+0      	; 0xf88 <ExtEERead+0x16>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	d6 2e       	mov	r13, r22
     f8e:	c4 2e       	mov	r12, r20
     f90:	59 01       	movw	r10, r18
     f92:	7c 01       	movw	r14, r24
     f94:	e8 94       	clt
     f96:	f7 f8       	bld	r15, 7
     f98:	f9 82       	std	Y+1, r15	; 0x01
     f9a:	ea 82       	std	Y+2, r14	; 0x02
     f9c:	06 2f       	mov	r16, r22
     f9e:	42 e0       	ldi	r20, 0x02	; 2
     fa0:	be 01       	movw	r22, r28
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	80 e5       	ldi	r24, 0x50	; 80
     fa8:	85 d9       	rcall	.-3318   	; 0x2b4 <I2C_read_bytes>
     faa:	18 2f       	mov	r17, r24
     fac:	81 11       	cpse	r24, r1
     fae:	05 c0       	rjmp	.+10     	; 0xfba <ExtEERead+0x48>
     fb0:	95 01       	movw	r18, r10
     fb2:	4c 2d       	mov	r20, r12
     fb4:	6d 2d       	mov	r22, r13
     fb6:	c7 01       	movw	r24, r14
     fb8:	b5 df       	rcall	.-150    	; 0xf24 <DecryptData>
     fba:	81 2f       	mov	r24, r17
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	08 95       	ret

00000fd6 <ClearTxAfter>:
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	88 30       	cpi	r24, 0x08	; 8
     fda:	30 f4       	brcc	.+12     	; 0xfe8 <ClearTxAfter+0x12>
     fdc:	e8 2f       	mov	r30, r24
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	eb 58       	subi	r30, 0x8B	; 139
     fe2:	f5 4c       	sbci	r31, 0xC5	; 197
     fe4:	10 82       	st	Z, r1
     fe6:	f7 cf       	rjmp	.-18     	; 0xfd6 <ClearTxAfter>
     fe8:	08 95       	ret

00000fea <StartsWith>:
     fea:	ac 01       	movw	r20, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	e9 2f       	mov	r30, r25
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	da 01       	movw	r26, r20
     ff4:	ae 0f       	add	r26, r30
     ff6:	bf 1f       	adc	r27, r31
     ff8:	3c 91       	ld	r19, X
     ffa:	e6 0f       	add	r30, r22
     ffc:	f7 1f       	adc	r31, r23
     ffe:	31 11       	cpse	r19, r1
    1000:	05 c0       	rjmp	.+10     	; 0x100c <StartsWith+0x22>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 81       	ld	r25, Z
    1006:	99 23       	and	r25, r25
    1008:	49 f0       	breq	.+18     	; 0x101c <StartsWith+0x32>
    100a:	07 c0       	rjmp	.+14     	; 0x101a <StartsWith+0x30>
    100c:	20 81       	ld	r18, Z
    100e:	22 23       	and	r18, r18
    1010:	c1 f3       	breq	.-16     	; 0x1002 <StartsWith+0x18>
    1012:	32 13       	cpse	r19, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <StartsWith+0x30>
    1016:	9f 5f       	subi	r25, 0xFF	; 255
    1018:	ea cf       	rjmp	.-44     	; 0xfee <StartsWith+0x4>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	08 95       	ret

0000101e <PrepareSending>:
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	51 f1       	breq	.+84     	; 0x1078 <PrepareSending+0x5a>
    1024:	ed e7       	ldi	r30, 0x7D	; 125
    1026:	fa e3       	ldi	r31, 0x3A	; 58
    1028:	a5 e7       	ldi	r26, 0x75	; 117
    102a:	ba e3       	ldi	r27, 0x3A	; 58
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	6f 3f       	cpi	r22, 0xFF	; 255
    1032:	71 05       	cpc	r23, r1
    1034:	69 f0       	breq	.+26     	; 0x1050 <PrepareSending+0x32>
    1036:	60 f0       	brcs	.+24     	; 0x1050 <PrepareSending+0x32>
    1038:	81 93       	st	Z+, r24
    103a:	91 93       	st	Z+, r25
    103c:	3d 93       	st	X+, r19
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	71 09       	sbc	r23, r1
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	27 30       	cpi	r18, 0x07	; 7
    104a:	91 f7       	brne	.-28     	; 0x1030 <PrepareSending+0x12>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	08 95       	ret
    1050:	e2 2f       	mov	r30, r18
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	df 01       	movw	r26, r30
    1056:	aa 0f       	add	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	a3 58       	subi	r26, 0x83	; 131
    105c:	b5 4c       	sbci	r27, 0xC5	; 197
    105e:	8d 93       	st	X+, r24
    1060:	9c 93       	st	X, r25
    1062:	eb 58       	subi	r30, 0x8B	; 139
    1064:	f5 4c       	sbci	r31, 0xC5	; 197
    1066:	cb 01       	movw	r24, r22
    1068:	6f ef       	ldi	r22, 0xFF	; 255
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__udivmodhi4>
    1070:	80 83       	st	Z, r24
    1072:	40 93 73 3a 	sts	0x3A73, r20	; 0x803a73 <txTypeNow>
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <PrepareSending+0x64>
    1078:	10 92 7d 3a 	sts	0x3A7D, r1	; 0x803a7d <txAddrList>
    107c:	10 92 7e 3a 	sts	0x3A7E, r1	; 0x803a7e <txAddrList+0x1>
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	82 2f       	mov	r24, r18
    1084:	a8 df       	rcall	.-176    	; 0xfd6 <ClearTxAfter>
    1086:	10 92 74 3a 	sts	0x3A74, r1	; 0x803a74 <txAddrNow>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	08 95       	ret

0000108e <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	f9 01       	movw	r30, r18
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	e8 5b       	subi	r30, 0xB8	; 184
    109e:	f6 4c       	sbci	r31, 0xC6	; 198
    10a0:	ab e5       	ldi	r26, 0x5B	; 91
    10a2:	ba e7       	ldi	r27, 0x7A	; 122
    10a4:	a0 83       	st	Z, r26
    10a6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    10a8:	f9 01       	movw	r30, r18
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	e8 57       	subi	r30, 0x78	; 120
    10b0:	f6 4c       	sbci	r31, 0xC6	; 198
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	60 83       	st	Z, r22
    10b8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	f9 01       	movw	r30, r18
    10c0:	e8 53       	subi	r30, 0x38	; 56
    10c2:	f6 4c       	sbci	r31, 0xC6	; 198
    10c4:	41 e0       	ldi	r20, 0x01	; 1
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	40 83       	st	Z, r20
    10ca:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	28 0f       	add	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	f9 01       	movw	r30, r18
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e8 5b       	subi	r30, 0xB8	; 184
    10da:	f6 4c       	sbci	r31, 0xC6	; 198
    10dc:	c4 e6       	ldi	r28, 0x64	; 100
    10de:	da e7       	ldi	r29, 0x7A	; 122
    10e0:	c0 83       	st	Z, r28
    10e2:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    10e4:	f9 01       	movw	r30, r18
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	e8 57       	subi	r30, 0x78	; 120
    10ec:	f6 4c       	sbci	r31, 0xC6	; 198
    10ee:	ca e0       	ldi	r28, 0x0A	; 10
    10f0:	d0 e0       	ldi	r29, 0x00	; 0
    10f2:	c0 83       	st	Z, r28
    10f4:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	f9 01       	movw	r30, r18
    10fc:	e8 53       	subi	r30, 0x38	; 56
    10fe:	f6 4c       	sbci	r31, 0xC6	; 198
    1100:	40 83       	st	Z, r20
    1102:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1104:	e2 e0       	ldi	r30, 0x02	; 2
    1106:	e8 0f       	add	r30, r24
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	e8 5b       	subi	r30, 0xB8	; 184
    1110:	f6 4c       	sbci	r31, 0xC6	; 198
    1112:	20 ef       	ldi	r18, 0xF0	; 240
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	20 83       	st	Z, r18
    1118:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    111a:	23 e0       	ldi	r18, 0x03	; 3
    111c:	28 0f       	add	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	f9 01       	movw	r30, r18
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	e8 5b       	subi	r30, 0xB8	; 184
    1128:	f6 4c       	sbci	r31, 0xC6	; 198
    112a:	a0 83       	st	Z, r26
    112c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    112e:	f9 01       	movw	r30, r18
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	e8 57       	subi	r30, 0x78	; 120
    1136:	f6 4c       	sbci	r31, 0xC6	; 198
    1138:	60 83       	st	Z, r22
    113a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    113c:	22 0f       	add	r18, r18
    113e:	33 1f       	adc	r19, r19
    1140:	f9 01       	movw	r30, r18
    1142:	e8 53       	subi	r30, 0x38	; 56
    1144:	f6 4c       	sbci	r31, 0xC6	; 198
    1146:	40 83       	st	Z, r20
    1148:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    114a:	24 e0       	ldi	r18, 0x04	; 4
    114c:	28 0f       	add	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	f9 01       	movw	r30, r18
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	e8 5b       	subi	r30, 0xB8	; 184
    1158:	f6 4c       	sbci	r31, 0xC6	; 198
    115a:	a7 e5       	ldi	r26, 0x57	; 87
    115c:	ba e7       	ldi	r27, 0x7A	; 122
    115e:	a0 83       	st	Z, r26
    1160:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1162:	f9 01       	movw	r30, r18
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	e8 57       	subi	r30, 0x78	; 120
    116a:	f6 4c       	sbci	r31, 0xC6	; 198
    116c:	60 83       	st	Z, r22
    116e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	f9 01       	movw	r30, r18
    1176:	e8 53       	subi	r30, 0x38	; 56
    1178:	f6 4c       	sbci	r31, 0xC6	; 198
    117a:	40 83       	st	Z, r20
    117c:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    117e:	8b 5f       	subi	r24, 0xFB	; 251
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1186:	af 92       	push	r10
    1188:	bf 92       	push	r11
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	2c 97       	sbiw	r28, 0x0c	; 12
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	7c 01       	movw	r14, r24
    11a4:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    11a6:	9e 01       	movw	r18, r28
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	6c e0       	ldi	r22, 0x0C	; 12
    11b0:	80 96       	adiw	r24, 0x20	; 32
    11b2:	df de       	rcall	.-578    	; 0xf72 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	98 27       	eor	r25, r24
    11ba:	89 27       	eor	r24, r25
    11bc:	98 27       	eor	r25, r24
    11be:	80 96       	adiw	r24, 0x20	; 32
    11c0:	f8 01       	movw	r30, r16
    11c2:	80 83       	st	Z, r24
    11c4:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	98 27       	eor	r25, r24
    11cc:	89 27       	eor	r24, r25
    11ce:	98 27       	eor	r25, r24
    11d0:	80 96       	adiw	r24, 0x20	; 32
    11d2:	82 83       	std	Z+2, r24	; 0x02
    11d4:	93 83       	std	Z+3, r25	; 0x03
    11d6:	de 01       	movw	r26, r28
    11d8:	15 96       	adiw	r26, 0x05	; 5
    11da:	34 96       	adiw	r30, 0x04	; 4
    11dc:	c8 01       	movw	r24, r16
    11de:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    11e0:	2d 91       	ld	r18, X+
    11e2:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    11e4:	e8 17       	cp	r30, r24
    11e6:	f9 07       	cpc	r31, r25
    11e8:	d9 f7       	brne	.-10     	; 0x11e0 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    11ea:	fc e2       	ldi	r31, 0x2C	; 44
    11ec:	ef 0e       	add	r14, r31
    11ee:	f1 1c       	adc	r15, r1
    11f0:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    11f2:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    11f4:	9e 01       	movw	r18, r28
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	63 e0       	ldi	r22, 0x03	; 3
    11fe:	c7 01       	movw	r24, r14
    1200:	b8 de       	rcall	.-656    	; 0xf72 <ExtEERead>
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	98 27       	eor	r25, r24
    1208:	89 27       	eor	r24, r25
    120a:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    120c:	97 01       	movw	r18, r14
    120e:	2e 5f       	subi	r18, 0xFE	; 254
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1212:	43 e0       	ldi	r20, 0x03	; 3
    1214:	4d 15       	cp	r20, r13
    1216:	80 f4       	brcc	.+32     	; 0x1238 <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1218:	ac 01       	movw	r20, r24
    121a:	41 50       	subi	r20, 0x01	; 1
    121c:	51 09       	sbc	r21, r1
    121e:	f8 01       	movw	r30, r16
    1220:	42 8f       	std	Z+26, r20	; 0x1a
    1222:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1224:	f3 e0       	ldi	r31, 0x03	; 3
    1226:	ef 0e       	add	r14, r31
    1228:	f1 1c       	adc	r15, r1
    122a:	f8 01       	movw	r30, r16
    122c:	e4 86       	std	Z+12, r14	; 0x0c
    122e:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1230:	4b 81       	ldd	r20, Y+3	; 0x03
    1232:	f5 01       	movw	r30, r10
    1234:	44 a3       	std	Z+36, r20	; 0x24
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1238:	f8 01       	movw	r30, r16
    123a:	82 8f       	std	Z+26, r24	; 0x1a
    123c:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    123e:	24 87       	std	Z+12, r18	; 0x0c
    1240:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1242:	7c 01       	movw	r14, r24
    1244:	e2 0e       	add	r14, r18
    1246:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1248:	d3 94       	inc	r13
    124a:	0e 5f       	subi	r16, 0xFE	; 254
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	ff ef       	ldi	r31, 0xFF	; 255
    1250:	af 1a       	sub	r10, r31
    1252:	bf 0a       	sbc	r11, r31
    1254:	47 e0       	ldi	r20, 0x07	; 7
    1256:	d4 12       	cpse	r13, r20
    1258:	cd cf       	rjmp	.-102    	; 0x11f4 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    125a:	2c 96       	adiw	r28, 0x0c	; 12
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	08 95       	ret

00001274 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	a0 97       	sbiw	r28, 0x20	; 32
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1290:	7c 01       	movw	r14, r24
    1292:	20 e2       	ldi	r18, 0x20	; 32
    1294:	e2 0e       	add	r14, r18
    1296:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1298:	9e 01       	movw	r18, r28
    129a:	2f 5f       	subi	r18, 0xFF	; 255
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	62 e0       	ldi	r22, 0x02	; 2
    12a2:	8c 96       	adiw	r24, 0x2c	; 44
    12a4:	66 de       	rcall	.-820    	; 0xf72 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    12a6:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    12a8:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    12aa:	11 23       	and	r17, r17
    12ac:	51 f1       	breq	.+84     	; 0x1302 <CheckLetter+0x8e>
    12ae:	01 2f       	mov	r16, r17
    12b0:	11 32       	cpi	r17, 0x21	; 33
    12b2:	08 f0       	brcs	.+2      	; 0x12b6 <CheckLetter+0x42>
    12b4:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    12b6:	9e 01       	movw	r18, r28
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	60 2f       	mov	r22, r16
    12c0:	c7 01       	movw	r24, r14
    12c2:	0e 96       	adiw	r24, 0x0e	; 14
    12c4:	56 de       	rcall	.-852    	; 0xf72 <ExtEERead>
    12c6:	fe 01       	movw	r30, r28
    12c8:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    12ca:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    12cc:	dd 20       	and	r13, r13
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    12d0:	e1 e0       	ldi	r30, 0x01	; 1
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	ec 0f       	add	r30, r28
    12d6:	fd 1f       	adc	r31, r29
    12d8:	e8 0f       	add	r30, r24
    12da:	f1 1d       	adc	r31, r1
    12dc:	90 81       	ld	r25, Z
    12de:	90 62       	ori	r25, 0x20	; 32
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	9c 11       	cpse	r25, r12
    12e4:	0e c0       	rjmp	.+28     	; 0x1302 <CheckLetter+0x8e>
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    12e8:	91 91       	ld	r25, Z+
    12ea:	dd 24       	eor	r13, r13
    12ec:	d3 94       	inc	r13
    12ee:	9b 35       	cpi	r25, 0x5B	; 91
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <CheckLetter+0x80>
    12f2:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    12f4:	8f 5f       	subi	r24, 0xFF	; 255
    12f6:	80 17       	cp	r24, r16
    12f8:	48 f3       	brcs	.-46     	; 0x12cc <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    12fa:	e0 0e       	add	r14, r16
    12fc:	f1 1c       	adc	r15, r1
        x -= max;
    12fe:	10 1b       	sub	r17, r16
    1300:	d4 cf       	rjmp	.-88     	; 0x12aa <CheckLetter+0x36>
    }
    return 0;
    1302:	80 e0       	ldi	r24, 0x00	; 0
}
    1304:	a0 96       	adiw	r28, 0x20	; 32
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	08 95       	ret

0000131c <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    131c:	af 92       	push	r10
    131e:	bf 92       	push	r11
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	00 d0       	rcall	.+0      	; 0x1330 <FindChild+0x14>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <FindChild+0x16>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	d6 2e       	mov	r13, r22
    1338:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    133a:	9e 01       	movw	r18, r28
    133c:	2f 5f       	subi	r18, 0xFF	; 255
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	64 e0       	ldi	r22, 0x04	; 4
    1344:	80 96       	adiw	r24, 0x20	; 32
    1346:	15 de       	rcall	.-982    	; 0xf72 <ExtEERead>
    1348:	e9 80       	ldd	r14, Y+1	; 0x01
    134a:	fa 80       	ldd	r15, Y+2	; 0x02
    134c:	fe 24       	eor	r15, r14
    134e:	ef 24       	eor	r14, r15
    1350:	fe 24       	eor	r15, r14
    1352:	0b 81       	ldd	r16, Y+3	; 0x03
    1354:	1c 81       	ldd	r17, Y+4	; 0x04
    1356:	10 27       	eor	r17, r16
    1358:	01 27       	eor	r16, r17
    135a:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    135c:	0e 15       	cp	r16, r14
    135e:	1f 05       	cpc	r17, r15
    1360:	30 f5       	brcc	.+76     	; 0x13ae <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    1362:	a0 16       	cp	r10, r16
    1364:	b1 06       	cpc	r11, r17
    1366:	58 f0       	brcs	.+22     	; 0x137e <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1368:	9e 01       	movw	r18, r28
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	c8 01       	movw	r24, r16
    1374:	80 96       	adiw	r24, 0x20	; 32
    1376:	fd dd       	rcall	.-1030   	; 0xf72 <ExtEERead>
    1378:	09 81       	ldd	r16, Y+1	; 0x01
    137a:	1a 81       	ldd	r17, Y+2	; 0x02
    137c:	ec cf       	rjmp	.-40     	; 0x1356 <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    137e:	9e 01       	movw	r18, r28
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	c8 01       	movw	r24, r16
    138a:	85 96       	adiw	r24, 0x25	; 37
    138c:	f2 dd       	rcall	.-1052   	; 0xf72 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	81 11       	cpse	r24, r1
    1392:	03 c0       	rjmp	.+6      	; 0x139a <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1394:	d1 10       	cpse	r13, r1
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <FindChild+0x98>
    139a:	c9 dc       	rcall	.-1646   	; 0xd2e <CheckState>
    139c:	81 11       	cpse	r24, r1
    139e:	fa cf       	rjmp	.-12     	; 0x1394 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    13a0:	e3 cf       	rjmp	.-58     	; 0x1368 <FindChild+0x4c>
    13a2:	6d 2d       	mov	r22, r13
    13a4:	c8 01       	movw	r24, r16
    13a6:	66 df       	rcall	.-308    	; 0x1274 <CheckLetter>
    13a8:	88 23       	and	r24, r24
    13aa:	f1 f2       	breq	.-68     	; 0x1368 <FindChild+0x4c>
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <FindChild+0x9a>
    13b4:	c8 01       	movw	r24, r16
}
    13b6:	24 96       	adiw	r28, 0x04	; 4
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	08 95       	ret

000013d0 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    13d0:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    13d2:	9f e9       	ldi	r25, 0x9F	; 159
    13d4:	98 0f       	add	r25, r24
    13d6:	9a 31       	cpi	r25, 0x1A	; 26
    13d8:	38 f0       	brcs	.+14     	; 0x13e8 <InpOkChk+0x18>
    13da:	90 ed       	ldi	r25, 0xD0	; 208
    13dc:	98 0f       	add	r25, r24
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	9a 30       	cpi	r25, 0x0A	; 10
    13e2:	18 f0       	brcs	.+6      	; 0x13ea <InpOkChk+0x1a>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    13ea:	08 95       	ret

000013ec <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    13f8:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    13fa:	f8 01       	movw	r30, r16
    13fc:	ed 0f       	add	r30, r29
    13fe:	f1 1d       	adc	r31, r1
    1400:	20 81       	ld	r18, Z
    1402:	8c 2f       	mov	r24, r28
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	22 23       	and	r18, r18
    1408:	51 f0       	breq	.+20     	; 0x141e <CleanInput+0x32>
        data[cnt] = data[x];
    140a:	d8 01       	movw	r26, r16
    140c:	a8 0f       	add	r26, r24
    140e:	b9 1f       	adc	r27, r25
    1410:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1412:	80 81       	ld	r24, Z
    1414:	dd df       	rcall	.-70     	; 0x13d0 <InpOkChk>
    1416:	81 11       	cpse	r24, r1
    1418:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    141a:	df 5f       	subi	r29, 0xFF	; 255
    141c:	ee cf       	rjmp	.-36     	; 0x13fa <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    141e:	f8 01       	movw	r30, r16
    1420:	e8 0f       	add	r30, r24
    1422:	f9 1f       	adc	r31, r25
    1424:	10 82       	st	Z, r1
    return cnt;
}
    1426:	8c 2f       	mov	r24, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1432:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    1434:	20 91 74 3a 	lds	r18, 0x3A74	; 0x803a74 <txAddrNow>
    1438:	28 30       	cpi	r18, 0x08	; 8
    143a:	08 f0       	brcs	.+2      	; 0x143e <CheckSend+0xc>
    143c:	47 c0       	rjmp	.+142    	; 0x14cc <CheckSend+0x9a>
    143e:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <serTxDone>
    1442:	88 23       	and	r24, r24
    1444:	09 f4       	brne	.+2      	; 0x1448 <CheckSend+0x16>
    1446:	42 c0       	rjmp	.+132    	; 0x14cc <CheckSend+0x9a>
        if (txStrLen[txAddrNow] == 0){
    1448:	82 2f       	mov	r24, r18
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	fc 01       	movw	r30, r24
    144e:	eb 58       	subi	r30, 0x8B	; 139
    1450:	f5 4c       	sbci	r31, 0xC5	; 197
    1452:	e0 81       	ld	r30, Z
    1454:	e1 11       	cpse	r30, r1
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <CheckSend+0x32>
            txPart = 0;
    1458:	10 92 35 39 	sts	0x3935, r1	; 0x803935 <txPart.3932>
            txAddrNow = TXLISTLEN;
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <txAddrNow>
    1462:	2c c0       	rjmp	.+88     	; 0x14bc <CheckSend+0x8a>
        } else if (txPart < txStrLen[txAddrNow]){
    1464:	50 91 35 39 	lds	r21, 0x3935	; 0x803935 <txPart.3932>
    1468:	5e 17       	cp	r21, r30
    146a:	50 f5       	brcc	.+84     	; 0x14c0 <CheckSend+0x8e>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    146c:	ce 2f       	mov	r28, r30
    146e:	c5 1b       	sub	r28, r21
    1470:	c1 32       	cpi	r28, 0x21	; 33
    1472:	08 f0       	brcs	.+2      	; 0x1476 <CheckSend+0x44>
    1474:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	fc 01       	movw	r30, r24
    147c:	e3 58       	subi	r30, 0x83	; 131
    147e:	f5 4c       	sbci	r31, 0xC5	; 197
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	2d e3       	ldi	r18, 0x3D	; 61
    1486:	3b e3       	ldi	r19, 0x3B	; 59
    1488:	40 91 73 3a 	lds	r20, 0x3A73	; 0x803a73 <txTypeNow>
    148c:	6c 2f       	mov	r22, r28
    148e:	85 0f       	add	r24, r21
    1490:	91 1d       	adc	r25, r1
    1492:	6f dd       	rcall	.-1314   	; 0xf72 <ExtEERead>
            txPart += EEreadLength;
    1494:	80 91 35 39 	lds	r24, 0x3935	; 0x803935 <txPart.3932>
    1498:	8c 0f       	add	r24, r28
    149a:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <txPart.3932>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    149e:	ec 2f       	mov	r30, r28
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	e3 5c       	subi	r30, 0xC3	; 195
    14a4:	f4 4c       	sbci	r31, 0xC4	; 196
    14a6:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    14a8:	80 91 3d 3b 	lds	r24, 0x3B3D	; 0x803b3d <txBuffer>
    14ac:	81 11       	cpse	r24, r1
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <CheckSend+0x84>
    14b0:	8b ed       	ldi	r24, 0xDB	; 219
    14b2:	80 93 3d 3b 	sts	0x3B3D, r24	; 0x803b3d <txBuffer>
            SerSend(&txBuffer[0]);
    14b6:	8d e3       	ldi	r24, 0x3D	; 61
    14b8:	9b e3       	ldi	r25, 0x3B	; 59
    14ba:	9c da       	rcall	.-2760   	; 0x9f4 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	0b c0       	rjmp	.+22     	; 0x14d6 <CheckSend+0xa4>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    14c0:	10 92 35 39 	sts	0x3935, r1	; 0x803935 <txPart.3932>
            ++txAddrNow;
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	20 93 74 3a 	sts	0x3A74, r18	; 0x803a74 <txAddrNow>
    14ca:	f8 cf       	rjmp	.-16     	; 0x14bc <CheckSend+0x8a>
        }
    } else if (serTxDone) return 0; //All is sent!
    14cc:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <serTxDone>
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	91 11       	cpse	r25, r1
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    14de:	c0 91 47 39 	lds	r28, 0x3947	; 0x803947 <responseList>
    14e2:	cc 23       	and	r28, r28
    14e4:	e9 f1       	breq	.+122    	; 0x1560 <CheckResponse+0x86>
        --responseList;
    14e6:	c1 50       	subi	r28, 0x01	; 1
    14e8:	c0 93 47 39 	sts	0x3947, r28	; 0x803947 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    14ec:	d0 91 34 39 	lds	r29, 0x3934	; 0x803934 <number.3936>
    14f0:	2d 2f       	mov	r18, r29
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	f9 01       	movw	r30, r18
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	e8 5b       	subi	r30, 0xB8	; 184
    14fc:	f6 4c       	sbci	r31, 0xC6	; 198
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	80 3f       	cpi	r24, 0xF0	; 240
    1504:	4f ef       	ldi	r20, 0xFF	; 255
    1506:	94 07       	cpc	r25, r20
    1508:	51 f4       	brne	.+20     	; 0x151e <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    150a:	60 91 62 3a 	lds	r22, 0x3A62	; 0x803a62 <currObj+0x1a>
    150e:	70 91 63 3a 	lds	r23, 0x3A63	; 0x803a63 <currObj+0x1b>
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	80 91 54 3a 	lds	r24, 0x3A54	; 0x803a54 <currObj+0xc>
    1518:	90 91 55 3a 	lds	r25, 0x3A55	; 0x803a55 <currObj+0xd>
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    151e:	d9 01       	movw	r26, r18
    1520:	aa 0f       	add	r26, r26
    1522:	bb 1f       	adc	r27, r27
    1524:	a8 53       	subi	r26, 0x38	; 56
    1526:	b6 4c       	sbci	r27, 0xC6	; 198
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	f9 01       	movw	r30, r18
    152e:	e8 57       	subi	r30, 0x78	; 120
    1530:	f6 4c       	sbci	r31, 0xC6	; 198
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	4c 91       	ld	r20, X
    1538:	72 dd       	rcall	.-1308   	; 0x101e <PrepareSending>
        }
        ++number;
    153a:	df 5f       	subi	r29, 0xFF	; 255
    153c:	d0 93 34 39 	sts	0x3934, r29	; 0x803934 <number.3936>

        if (responseList == 0) {
    1540:	c1 11       	cpse	r28, r1
    1542:	0d c0       	rjmp	.+26     	; 0x155e <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    1544:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <currObj+0x4>
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <effect>
    154e:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <effect+0x1>
            RXCNT = 0;
    1552:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    1554:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
            number = 0;
    1558:	10 92 34 39 	sts	0x3934, r1	; 0x803934 <number.3936>
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    155e:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    1560:	8c 2f       	mov	r24, r28
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    1568:	5f 92       	push	r5
    156a:	6f 92       	push	r6
    156c:	7f 92       	push	r7
    156e:	8f 92       	push	r8
    1570:	9f 92       	push	r9
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	a1 97       	sbiw	r28, 0x21	; 33
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    1592:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    1596:	8f 3f       	cpi	r24, 0xFF	; 255
    1598:	09 f0       	breq	.+2      	; 0x159c <CheckInput+0x34>
    159a:	57 c0       	rjmp	.+174    	; 0x164a <CheckInput+0xe2>
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    159c:	44 e1       	ldi	r20, 0x14	; 20
    159e:	6f e8       	ldi	r22, 0x8F	; 143
    15a0:	7a e3       	ldi	r23, 0x3A	; 58
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	ef d9       	rcall	.-3106   	; 0x984 <EERead>
    15a6:	2e e6       	ldi	r18, 0x6E	; 110
    15a8:	f2 2e       	mov	r15, r18

        uint8_t idSet = 0;
    15aa:	e1 2c       	mov	r14, r1
        for (uint8_t x=0; x<4; ++x){
            idSet += ReadStatusBit(110+x);
    15ac:	8f 2d       	mov	r24, r15
    15ae:	89 db       	rcall	.-2286   	; 0xcc2 <ReadStatusBit>
    15b0:	e8 0e       	add	r14, r24
    15b2:	f3 94       	inc	r15
    if (currDepth == 0xff) {
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

        uint8_t idSet = 0;
        for (uint8_t x=0; x<4; ++x){
    15b4:	82 e7       	ldi	r24, 0x72	; 114
    15b6:	f8 12       	cpse	r15, r24
    15b8:	f9 cf       	rjmp	.-14     	; 0x15ac <CheckInput+0x44>
            idSet += ReadStatusBit(110+x);
        }

        //Check if badge is reset(0 = cheated!) or new(3) or error(2)
        if (idSet != 1) {
    15ba:	e1 e0       	ldi	r30, 0x01	; 1
    15bc:	ee 16       	cp	r14, r30
            Reset();
    15be:	11 f0       	breq	.+4      	; 0x15c4 <CheckInput+0x5c>
    15c0:	d4 db       	rcall	.-2136   	; 0xd6a <Reset>
        } else getID();
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <CheckInput+0x5e>
    15c4:	c4 db       	rcall	.-2168   	; 0xd4e <getID>

        inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    15c6:	80 91 9f 3a 	lds	r24, 0x3A9F	; 0x803a9f <gameState+0x10>
    15ca:	90 91 a0 3a 	lds	r25, 0x3AA0	; 0x803aa0 <gameState+0x11>
    15ce:	98 27       	eor	r25, r24
    15d0:	89 27       	eor	r24, r25
    15d2:	98 27       	eor	r25, r24
    15d4:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <inventory>
    15d8:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <inventory+0x1>
        inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    15dc:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <gameState+0x12>
    15e0:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <gameState+0x13>
    15e4:	98 27       	eor	r25, r24
    15e6:	89 27       	eor	r24, r25
    15e8:	98 27       	eor	r25, r24
    15ea:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <inventory+0x2>
    15ee:	90 93 99 38 	sts	0x3899, r25	; 0x803899 <inventory+0x3>
        SaveGameState();
    15f2:	f4 da       	rcall	.-2584   	; 0xbdc <SaveGameState>

        //Start at first location
        PopulateObject(route[0], &currObj);
    15f4:	68 e4       	ldi	r22, 0x48	; 72
    15f6:	7a e3       	ldi	r23, 0x3A	; 58
    15f8:	80 91 08 3a 	lds	r24, 0x3A08	; 0x803a08 <route>
    15fc:	90 91 09 3a 	lds	r25, 0x3A09	; 0x803a09 <route+0x1>
    1600:	c2 dd       	rcall	.-1148   	; 0x1186 <PopulateObject>
        currDepth = 0;
    1602:	10 92 8f 38 	sts	0x388F, r1	; 0x80388f <currDepth>

        //Play an effect if configured
        if ((effect < 0x0100) && (effect ^ currObj.byteField[EFFECTS])){
    1606:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
    160a:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
    160e:	8f 3f       	cpi	r24, 0xFF	; 255
    1610:	91 05       	cpc	r25, r1
    1612:	09 f0       	breq	.+2      	; 0x1616 <CheckInput+0xae>
    1614:	d0 f4       	brcc	.+52     	; 0x164a <CheckInput+0xe2>
    1616:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <currObj+0x4>
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	20 91 93 38 	lds	r18, 0x3893	; 0x803893 <effect>
    1620:	30 91 94 38 	lds	r19, 0x3894	; 0x803894 <effect+0x1>
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	81 f0       	breq	.+32     	; 0x164a <CheckInput+0xe2>
            effect = currObj.byteField[EFFECTS];
    162a:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <effect>
    162e:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <effect+0x1>
            auStart = ((effect&0xE0)>0);
    1632:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
    1636:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
    163a:	80 7e       	andi	r24, 0xE0	; 224
    163c:	99 27       	eor	r25, r25
    163e:	21 e0       	ldi	r18, 0x01	; 1
    1640:	89 2b       	or	r24, r25
    1642:	09 f4       	brne	.+2      	; 0x1646 <CheckInput+0xde>
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	20 93 92 38 	sts	0x3892, r18	; 0x803892 <auStart>
        }
    }

    if (serRxDone){
    164a:	80 91 9c 38 	lds	r24, 0x389C	; 0x80389c <serRxDone>
    164e:	88 23       	and	r24, r24
    1650:	09 f4       	brne	.+2      	; 0x1654 <CheckInput+0xec>
    1652:	48 c2       	rjmp	.+1168   	; 0x1ae4 <CheckInput+0x57c>

        //Special input requested from user by game
        if (specialInput[0]){
    1654:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <specialInput>
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <CheckInput+0xf6>
    165c:	57 c0       	rjmp	.+174    	; 0x170c <CheckInput+0x1a4>
            specialPassed = 0;
    165e:	10 92 36 39 	sts	0x3936, r1	; 0x803936 <specialPassed>
            data[0] = 'a';
    1662:	81 e6       	ldi	r24, 0x61	; 97
    1664:	f8 01       	movw	r30, r16
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    1666:	80 83       	st	Z, r24
    1668:	67 e3       	ldi	r22, 0x37	; 55
    166a:	79 e3       	ldi	r23, 0x39	; 57
    166c:	83 ea       	ldi	r24, 0xA3	; 163
    166e:	9a e3       	ldi	r25, 0x3A	; 58
    1670:	bc dc       	rcall	.-1672   	; 0xfea <StartsWith>
    1672:	f8 2e       	mov	r15, r24
    1674:	88 23       	and	r24, r24
    1676:	21 f0       	breq	.+8      	; 0x1680 <CheckInput+0x118>
                specialPassed = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <specialPassed>
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <CheckInput+0x120>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1680:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <specialInput>
    1684:	81 33       	cpi	r24, 0x31	; 49
    1686:	11 f0       	breq	.+4      	; 0x168c <CheckInput+0x124>
                SetResponse(31, A_LF, 4, TEASER);
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1688:	f1 2c       	mov	r15, r1
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    168a:	2e c2       	rjmp	.+1116   	; 0x1ae8 <CheckInput+0x580>
    168c:	80 91 39 39 	lds	r24, 0x3939	; 0x803939 <specialInput+0x2>
    1690:	81 11       	cpse	r24, r1
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    1692:	fa cf       	rjmp	.-12     	; 0x1688 <CheckInput+0x120>
    1694:	83 ea       	ldi	r24, 0xA3	; 163
    1696:	9a e3       	ldi	r25, 0x3A	; 58
    1698:	a9 de       	rcall	.-686    	; 0x13ec <CleanInput>
                specialPassed = 2;
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <specialPassed>
                data[1] = 0;
    16a0:	f8 01       	movw	r30, r16
    16a2:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	80 f3       	brcs	.-32     	; 0x1688 <CheckInput+0x120>
                    if ((serRx[0] == '0')||(serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')) {
    16a8:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    16ac:	80 33       	cpi	r24, 0x30	; 48
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <CheckInput+0x160>
    16b0:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    16b4:	81 33       	cpi	r24, 0x31	; 49
    16b6:	41 f0       	breq	.+16     	; 0x16c8 <CheckInput+0x160>
    16b8:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    16bc:	82 33       	cpi	r24, 0x32	; 50
    16be:	21 f0       	breq	.+8      	; 0x16c8 <CheckInput+0x160>
    16c0:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    16c4:	83 33       	cpi	r24, 0x33	; 51
    16c6:	01 f7       	brne	.-64     	; 0x1688 <CheckInput+0x120>
                        serRx[1] |= 0x20;
    16c8:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    16cc:	80 62       	ori	r24, 0x20	; 32
    16ce:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    16d2:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    16d6:	81 36       	cpi	r24, 0x61	; 97
    16d8:	61 f0       	breq	.+24     	; 0x16f2 <CheckInput+0x18a>
    16da:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    16de:	85 36       	cpi	r24, 0x65	; 101
    16e0:	41 f0       	breq	.+16     	; 0x16f2 <CheckInput+0x18a>
    16e2:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    16e6:	86 36       	cpi	r24, 0x66	; 102
    16e8:	21 f0       	breq	.+8      	; 0x16f2 <CheckInput+0x18a>
    16ea:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    16ee:	87 37       	cpi	r24, 0x77	; 119
    16f0:	59 f6       	brne	.-106    	; 0x1688 <CheckInput+0x120>
                            data[1] = specialInput[1]+0x11;
    16f2:	80 91 38 39 	lds	r24, 0x3938	; 0x803938 <specialInput+0x1>
    16f6:	8f 5e       	subi	r24, 0xEF	; 239
    16f8:	f8 01       	movw	r30, r16
    16fa:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    16fc:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    1700:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1702:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    1706:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1708:	14 82       	std	Z+4, r1	; 0x04
    170a:	ee c1       	rjmp	.+988    	; 0x1ae8 <CheckInput+0x580>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    170c:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    1710:	83 32       	cpi	r24, 0x23	; 35
    1712:	79 f5       	brne	.+94     	; 0x1772 <CheckInput+0x20a>
    1714:	8d b3       	in	r24, 0x1d	; 29
    1716:	86 30       	cpi	r24, 0x06	; 6
    1718:	61 f5       	brne	.+88     	; 0x1772 <CheckInput+0x20a>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1720:	fc 01       	movw	r30, r24
    1722:	ed 55       	subi	r30, 0x5D	; 93
    1724:	f5 4c       	sbci	r31, 0xC5	; 197
    1726:	20 81       	ld	r18, Z
    1728:	20 53       	subi	r18, 0x30	; 48
    172a:	20 83       	st	Z, r18
                    bitNr *= 10;
    172c:	11 0f       	add	r17, r17
    172e:	21 2f       	mov	r18, r17
    1730:	22 0f       	add	r18, r18
    1732:	22 0f       	add	r18, r18
    1734:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    1736:	20 91 a4 3a 	lds	r18, 0x3AA4	; 0x803aa4 <serRx+0x1>
    173a:	23 30       	cpi	r18, 0x03	; 3
    173c:	48 f4       	brcc	.+18     	; 0x1750 <CheckInput+0x1e8>
                    if (serRx[x] < 10) {
    173e:	20 81       	ld	r18, Z
    1740:	2a 30       	cpi	r18, 0x0A	; 10
    1742:	a8 f4       	brcc	.+42     	; 0x176e <CheckInput+0x206>
                        bitNr += serRx[x];
    1744:	20 81       	ld	r18, Z
    1746:	12 0f       	add	r17, r18
    1748:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	91 05       	cpc	r25, r1
    174e:	41 f7       	brne	.-48     	; 0x1720 <CheckInput+0x1b8>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    1750:	81 2f       	mov	r24, r17
    1752:	8f 77       	andi	r24, 0x7F	; 127
                    if (Cheat(bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    1754:	61 f0       	breq	.+24     	; 0x176e <CheckInput+0x206>
    1756:	80 91 a7 3a 	lds	r24, 0x3AA7	; 0x803aa7 <serRx+0x4>
    175a:	60 91 a8 3a 	lds	r22, 0x3AA8	; 0x803aa8 <serRx+0x5>
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	78 2b       	or	r23, r24
    1762:	81 2f       	mov	r24, r17
    1764:	a3 db       	rcall	.-2234   	; 0xeac <Cheat>
    1766:	88 23       	and	r24, r24
    1768:	11 f0       	breq	.+4      	; 0x176e <CheckInput+0x206>
    176a:	81 2f       	mov	r24, r17
    176c:	d8 da       	rcall	.-2640   	; 0xd1e <UpdateState>
                }
                responseList = SetStandardResponse(0);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	4f c0       	rjmp	.+158    	; 0x1810 <CheckInput+0x2a8>
    1772:	d8 01       	movw	r26, r16
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    1778:	fc 01       	movw	r30, r24
    177a:	ed 55       	subi	r30, 0x5D	; 93
    177c:	f5 4c       	sbci	r31, 0xC5	; 197
    177e:	20 81       	ld	r18, Z
    1780:	21 34       	cpi	r18, 0x41	; 65
    1782:	18 f0       	brcs	.+6      	; 0x178a <CheckInput+0x222>
    1784:	20 81       	ld	r18, Z
    1786:	2b 35       	cpi	r18, 0x5B	; 91
    1788:	10 f0       	brcs	.+4      	; 0x178e <CheckInput+0x226>
    178a:	20 81       	ld	r18, Z
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <CheckInput+0x22a>
    178e:	20 81       	ld	r18, Z
    1790:	20 62       	ori	r18, 0x20	; 32
    1792:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1794:	20 81       	ld	r18, Z
    1796:	21 11       	cpse	r18, r1
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <CheckInput+0x23c>
                    data[x] = 0;
    179a:	f8 01       	movw	r30, r16
    179c:	e8 0f       	add	r30, r24
    179e:	f1 1d       	adc	r31, r1
    17a0:	10 82       	st	Z, r1
                    break;
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <CheckInput+0x246>
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    17a8:	81 34       	cpi	r24, 0x41	; 65
    17aa:	91 05       	cpc	r25, r1
    17ac:	29 f7       	brne	.-54     	; 0x1778 <CheckInput+0x210>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    17ae:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
                data[0] = 0;
    17b2:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    17b4:	81 11       	cpse	r24, r1
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <CheckInput+0x25a>
                data[0] = 0;
    17b8:	10 82       	st	Z, r1
                RXCNT = 0;
    17ba:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    17bc:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
    17c0:	91 c1       	rjmp	.+802    	; 0x1ae4 <CheckInput+0x57c>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    17c2:	80 81       	ld	r24, Z
    17c4:	8f 33       	cpi	r24, 0x3F	; 63
    17c6:	11 f0       	breq	.+4      	; 0x17cc <CheckInput+0x264>
    17c8:	88 36       	cpi	r24, 0x68	; 104
    17ca:	31 f5       	brne	.+76     	; 0x1818 <CheckInput+0x2b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    17cc:	8b e5       	ldi	r24, 0x5B	; 91
    17ce:	9a e7       	ldi	r25, 0x7A	; 122
    17d0:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    17d4:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    17e0:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    17ec:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    17f0:	23 e9       	ldi	r18, 0x93	; 147
    17f2:	3b e7       	ldi	r19, 0x7B	; 123
    17f4:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    17f8:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    17fc:	2d e6       	ldi	r18, 0x6D	; 109
    17fe:	34 e0       	ldi	r19, 0x04	; 4
    1800:	20 93 8a 39 	sts	0x398A, r18	; 0x80398a <reactStr+0x42>
    1804:	30 93 8b 39 	sts	0x398B, r19	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1808:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    180c:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(1);
    1810:	3e dc       	rcall	.-1924   	; 0x108e <SetStandardResponse>
    1812:	80 93 47 39 	sts	0x3947, r24	; 0x803947 <responseList>
    1816:	66 c1       	rjmp	.+716    	; 0x1ae4 <CheckInput+0x57c>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    1818:	81 36       	cpi	r24, 0x61	; 97
    181a:	d9 f4       	brne	.+54     	; 0x1852 <CheckInput+0x2ea>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    181c:	8b e5       	ldi	r24, 0x5B	; 91
    181e:	9a e7       	ldi	r25, 0x7A	; 122
    1820:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    1824:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    1828:	84 e0       	ldi	r24, 0x04	; 4
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    1830:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    183c:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1840:	2e e6       	ldi	r18, 0x6E	; 110
    1842:	3a e7       	ldi	r19, 0x7A	; 122
    1844:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1848:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    184c:	25 e2       	ldi	r18, 0x25	; 37
    184e:	31 e0       	ldi	r19, 0x01	; 1
    1850:	d7 cf       	rjmp	.-82     	; 0x1800 <CheckInput+0x298>
                responseList = SetStandardResponse(1);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    1852:	87 37       	cpi	r24, 0x77	; 119
    1854:	09 f0       	breq	.+2      	; 0x1858 <CheckInput+0x2f0>
    1856:	6e c0       	rjmp	.+220    	; 0x1934 <CheckInput+0x3cc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1858:	8b e5       	ldi	r24, 0x5B	; 91
    185a:	9a e7       	ldi	r25, 0x7A	; 122
    185c:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    1860:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    186c:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    1870:	21 e0       	ldi	r18, 0x01	; 1
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	20 93 c8 39 	sts	0x39C8, r18	; 0x8039c8 <reactStr+0x80>
    1878:	30 93 c9 39 	sts	0x39C9, r19	; 0x8039c9 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    187c:	8b ec       	ldi	r24, 0xCB	; 203
    187e:	96 e7       	ldi	r25, 0x76	; 118
    1880:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1884:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1888:	82 e1       	ldi	r24, 0x12	; 18
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1890:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1894:	20 93 ca 39 	sts	0x39CA, r18	; 0x8039ca <reactStr+0x82>
    1898:	30 93 cb 39 	sts	0x39CB, r19	; 0x8039cb <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    189c:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <whoami>
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	19 f4       	brne	.+6      	; 0x18aa <CheckInput+0x342>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18a4:	85 ec       	ldi	r24, 0xC5	; 197
    18a6:	96 e7       	ldi	r25, 0x76	; 118
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <CheckInput+0x360>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	49 f4       	brne	.+18     	; 0x18c0 <CheckInput+0x358>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18ae:	82 ec       	ldi	r24, 0xC2	; 194
    18b0:	96 e7       	ldi	r25, 0x76	; 118
    18b2:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    18b6:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	1e c0       	rjmp	.+60     	; 0x18fc <CheckInput+0x394>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	49 f4       	brne	.+18     	; 0x18d6 <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18c4:	8c eb       	ldi	r24, 0xBC	; 188
    18c6:	96 e7       	ldi	r25, 0x76	; 118
    18c8:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    18cc:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    18d0:	86 e0       	ldi	r24, 0x06	; 6
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	13 c0       	rjmp	.+38     	; 0x18fc <CheckInput+0x394>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	49 f4       	brne	.+18     	; 0x18ec <CheckInput+0x384>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18da:	87 eb       	ldi	r24, 0xB7	; 183
    18dc:	96 e7       	ldi	r25, 0x76	; 118
    18de:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    18e2:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <CheckInput+0x394>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18ec:	80 e4       	ldi	r24, 0x40	; 64
    18ee:	96 e7       	ldi	r25, 0x76	; 118
    18f0:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    18f4:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    18f8:	82 e4       	ldi	r24, 0x42	; 66
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    1900:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    1904:	20 93 cc 39 	sts	0x39CC, r18	; 0x8039cc <reactStr+0x84>
    1908:	30 93 cd 39 	sts	0x39CD, r19	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    190c:	8d e9       	ldi	r24, 0x9D	; 157
    190e:	96 e7       	ldi	r25, 0x76	; 118
    1910:	80 93 4e 39 	sts	0x394E, r24	; 0x80394e <reactStr+0x6>
    1914:	90 93 4f 39 	sts	0x394F, r25	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    1918:	8a e1       	ldi	r24, 0x1A	; 26
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	80 93 8e 39 	sts	0x398E, r24	; 0x80398e <reactStr+0x46>
    1920:	90 93 8f 39 	sts	0x398F, r25	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    192c:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(3);
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	6e cf       	rjmp	.-292    	; 0x1810 <CheckInput+0x2a8>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    1934:	81 37       	cpi	r24, 0x71	; 113
    1936:	d9 f4       	brne	.+54     	; 0x196e <CheckInput+0x406>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1938:	8b e5       	ldi	r24, 0x5B	; 91
    193a:	9a e7       	ldi	r25, 0x7A	; 122
    193c:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    1940:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    1944:	84 e0       	ldi	r24, 0x04	; 4
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    194c:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    1958:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    195c:	23 e0       	ldi	r18, 0x03	; 3
    195e:	3a e7       	ldi	r19, 0x7A	; 122
    1960:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1964:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1968:	24 e5       	ldi	r18, 0x54	; 84
                responseList = SetStandardResponse(1);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	49 cf       	rjmp	.-366    	; 0x1800 <CheckInput+0x298>
    196e:	60 e6       	ldi	r22, 0x60	; 96
    1970:	7d ea       	ldi	r23, 0xAD	; 173
    1972:	c8 01       	movw	r24, r16
    1974:	3a db       	rcall	.-2444   	; 0xfea <StartsWith>
    1976:	88 23       	and	r24, r24
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1978:	d9 f0       	breq	.+54     	; 0x19b0 <CheckInput+0x448>
    197a:	1e e6       	ldi	r17, 0x6E	; 110
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	81 2f       	mov	r24, r17
    1980:	b4 d9       	rcall	.-3224   	; 0xcea <WriteStatusBit>

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1982:	1f 5f       	subi	r17, 0xFF	; 255
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    1984:	12 37       	cpi	r17, 0x72	; 114
    1986:	d1 f7       	brne	.-12     	; 0x197c <CheckInput+0x414>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    1988:	29 d9       	rcall	.-3502   	; 0xbdc <SaveGameState>
    198a:	80 e2       	ldi	r24, 0x20	; 32
    198c:	e3 ea       	ldi	r30, 0xA3	; 163
    198e:	fd ea       	ldi	r31, 0xAD	; 173
    1990:	de 01       	movw	r26, r28
    1992:	11 96       	adiw	r26, 0x01	; 1
    1994:	01 90       	ld	r0, Z+
    1996:	0d 92       	st	X+, r0
                SerSpeed(60);
    1998:	8a 95       	dec	r24
    199a:	e1 f7       	brne	.-8      	; 0x1994 <CheckInput+0x42c>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    199c:	8c e3       	ldi	r24, 0x3C	; 60
    199e:	3b d8       	rcall	.-3978   	; 0xa16 <SerSpeed>
    19a0:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <serTxDone>
    19a4:	88 23       	and	r24, r24
    19a6:	e1 f3       	breq	.-8      	; 0x19a0 <CheckInput+0x438>
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	23 d8       	rcall	.-4026   	; 0x9f4 <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    19ae:	f8 cf       	rjmp	.-16     	; 0x19a0 <CheckInput+0x438>
    19b0:	66 e6       	ldi	r22, 0x66	; 102
    19b2:	7d ea       	ldi	r23, 0xAD	; 173
    19b4:	c8 01       	movw	r24, r16
    19b6:	19 db       	rcall	.-2510   	; 0xfea <StartsWith>
    19b8:	68 2e       	mov	r6, r24
    19ba:	88 23       	and	r24, r24
    19bc:	49 f1       	breq	.+82     	; 0x1a10 <CheckInput+0x4a8>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	89 a3       	std	Y+33, r24	; 0x21
                for (uint8_t x=0; x<MAXCHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    19c2:	18 e1       	ldi	r17, 0x18	; 24
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	be 01       	movw	r22, r28
    19c8:	6f 5d       	subi	r22, 0xDF	; 223
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	81 2f       	mov	r24, r17
    19ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <EEWrite>
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAXCHEATS; ++x){
    19d2:	1f 5f       	subi	r17, 0xFF	; 255
    19d4:	10 32       	cpi	r17, 0x20	; 32
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    19d6:	b1 f7       	brne	.-20     	; 0x19c4 <CheckInput+0x45c>
    19d8:	1e e6       	ldi	r17, 0x6E	; 110
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	81 2f       	mov	r24, r17
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAXCHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    19de:	85 d9       	rcall	.-3318   	; 0xcea <WriteStatusBit>
    19e0:	1f 5f       	subi	r17, 0xFF	; 255
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    19e2:	12 37       	cpi	r17, 0x72	; 114
    19e4:	d1 f7       	brne	.-12     	; 0x19da <CheckInput+0x472>

                uint8_t cheat[] = "Reset please! ";
    19e6:	fa d8       	rcall	.-3596   	; 0xbdc <SaveGameState>
    19e8:	8f e0       	ldi	r24, 0x0F	; 15
    19ea:	e3 ec       	ldi	r30, 0xC3	; 195
    19ec:	fd ea       	ldi	r31, 0xAD	; 173
    19ee:	de 01       	movw	r26, r28
    19f0:	11 96       	adiw	r26, 0x01	; 1
    19f2:	01 90       	ld	r0, Z+
    19f4:	0d 92       	st	X+, r0
                SerSpeed(60);
    19f6:	8a 95       	dec	r24
    19f8:	e1 f7       	brne	.-8      	; 0x19f2 <CheckInput+0x48a>
    19fa:	8c e3       	ldi	r24, 0x3C	; 60
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    19fc:	0c d8       	rcall	.-4072   	; 0xa16 <SerSpeed>
    19fe:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <serTxDone>
    1a02:	88 23       	and	r24, r24
    1a04:	e1 f3       	breq	.-8      	; 0x19fe <CheckInput+0x496>
    1a06:	ce 01       	movw	r24, r28
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    1a0e:	f7 cf       	rjmp	.-18     	; 0x19fe <CheckInput+0x496>
    1a10:	6d e9       	ldi	r22, 0x9D	; 157
    1a12:	7d ea       	ldi	r23, 0xAD	; 173
    1a14:	c8 01       	movw	r24, r16
    1a16:	e9 da       	rcall	.-2606   	; 0xfea <StartsWith>
    1a18:	88 23       	and	r24, r24
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <CheckInput+0x4b6>
    1a1c:	35 ce       	rjmp	.-918    	; 0x1688 <CheckInput+0x120>
    1a1e:	08 e4       	ldi	r16, 0x48	; 72
    1a20:	19 e3       	ldi	r17, 0x39	; 57
    1a22:	e8 e1       	ldi	r30, 0x18	; 24
    1a24:	7e 2e       	mov	r7, r30
                for (uint8_t x=0; x<MAXCHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1a26:	f4 e6       	ldi	r31, 0x64	; 100
    1a28:	5f 2e       	mov	r5, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    1a2a:	ee 24       	eor	r14, r14
    1a2c:	e3 94       	inc	r14
    1a2e:	f1 2c       	mov	r15, r1
    1a30:	cc 24       	eor	r12, r12
    1a32:	c3 94       	inc	r12
    1a34:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a36:	89 e5       	ldi	r24, 0x59	; 89
    1a38:	88 2e       	mov	r8, r24
    1a3a:	8a e7       	ldi	r24, 0x7A	; 122
    1a3c:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	a9 2e       	mov	r10, r25
    1a42:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAXCHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	be 01       	movw	r22, r28
    1a48:	6f 5f       	subi	r22, 0xFF	; 255
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	87 2d       	mov	r24, r7
    1a4e:	0e 94 c2 04 	call	0x984	; 0x984 <EERead>
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	19 82       	std	Y+1, r1	; 0x01
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1a56:	65 2d       	mov	r22, r5
    1a58:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodqi4>
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[0], 1, TEASER);
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	8d 52       	subi	r24, 0x2D	; 45
    1a60:	9b 48       	sbci	r25, 0x8B	; 139
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a64:	26 2d       	mov	r18, r6
    1a66:	24 0f       	add	r18, r20
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	e8 5b       	subi	r30, 0xB8	; 184
    1a72:	f6 4c       	sbci	r31, 0xC6	; 198
    1a74:	80 83       	st	Z, r24
    1a76:	91 83       	std	Z+1, r25	; 0x01
    reactStr[1][number]=length;
    1a78:	f9 01       	movw	r30, r18
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	e8 57       	subi	r30, 0x78	; 120
    1a80:	f6 4c       	sbci	r31, 0xC6	; 198
    1a82:	e0 82       	st	Z, r14
    1a84:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    1a86:	22 0f       	add	r18, r18
    1a88:	33 1f       	adc	r19, r19
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	e8 53       	subi	r30, 0x38	; 56
    1a8e:	f6 4c       	sbci	r31, 0xC6	; 198
    1a90:	e0 82       	st	Z, r14
    1a92:	f1 82       	std	Z+1, r15	; 0x01
    1a94:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    1a96:	43 30       	cpi	r20, 0x03	; 3
    1a98:	29 f7       	brne	.-54     	; 0x1a64 <CheckInput+0x4fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	86 82       	std	Z+6, r8	; 0x06
    1a9e:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    1aa0:	ea 5b       	subi	r30, 0xBA	; 186
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	a0 82       	st	Z, r10
    1aa6:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    1aa8:	e0 5c       	subi	r30, 0xC0	; 192
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	c0 82       	st	Z, r12
    1aae:	d1 82       	std	Z+1, r13	; 0x01
    1ab0:	73 94       	inc	r7
    1ab2:	08 5f       	subi	r16, 0xF8	; 248
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	f4 e0       	ldi	r31, 0x04	; 4
    1ab8:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAXCHEATS; ++x){
    1aba:	80 e2       	ldi	r24, 0x20	; 32
    1abc:	78 12       	cpse	r7, r24
    1abe:	c2 cf       	rjmp	.-124    	; 0x1a44 <CheckInput+0x4dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ac0:	8b e5       	ldi	r24, 0x5B	; 91
    1ac2:	9a e7       	ldi	r25, 0x7A	; 122
    1ac4:	80 93 86 39 	sts	0x3986, r24	; 0x803986 <reactStr+0x3e>
    1ac8:	90 93 87 39 	sts	0x3987, r25	; 0x803987 <reactStr+0x3f>
    reactStr[1][number]=length;
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	80 93 c6 39 	sts	0x39C6, r24	; 0x8039c6 <reactStr+0x7e>
    1ad4:	90 93 c7 39 	sts	0x39C7, r25	; 0x8039c7 <reactStr+0x7f>
    reactStr[2][number]=type;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	80 93 06 3a 	sts	0x3A06, r24	; 0x803a06 <reactStr+0xbe>
    1ae0:	90 93 07 3a 	sts	0x3A07, r25	; 0x803a07 <reactStr+0xbf>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    1ae4:	ff 24       	eor	r15, r15
    1ae6:	f3 94       	inc	r15
}
    1ae8:	8f 2d       	mov	r24, r15
    1aea:	a1 96       	adiw	r28, 0x21	; 33
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	bf 90       	pop	r11
    1b02:	af 90       	pop	r10
    1b04:	9f 90       	pop	r9
    1b06:	8f 90       	pop	r8
    1b08:	7f 90       	pop	r7
    1b0a:	6f 90       	pop	r6
    1b0c:	5f 90       	pop	r5
    1b0e:	08 95       	ret

00001b10 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	2a 97       	sbiw	r28, 0x0a	; 10
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    1b3c:	57 dc       	rcall	.-1874   	; 0x13ec <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    1b3e:	c8 01       	movw	r24, r16
    1b40:	55 dc       	rcall	.-1878   	; 0x13ec <CleanInput>
    1b42:	f8 2e       	mov	r15, r24

    if (inputLen) {

        //eXit to previous location
        if (data[0] == 'x'){
    1b44:	d8 01       	movw	r26, r16
    uint8_t elements = 1;

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);

    if (inputLen) {
    1b46:	88 23       	and	r24, r24
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <ProcessInput+0x3c>
    1b4a:	58 c7       	rjmp	.+3760   	; 0x29fc <ProcessInput+0xeec>

        //eXit to previous location
        if (data[0] == 'x'){
    1b4c:	8c 91       	ld	r24, X
    1b4e:	88 37       	cpi	r24, 0x78	; 120
    1b50:	79 f5       	brne	.+94     	; 0x1bb0 <ProcessInput+0xa0>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    1b52:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    1b56:	e8 2f       	mov	r30, r24
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	e8 5f       	subi	r30, 0xF8	; 248
    1b60:	f5 4c       	sbci	r31, 0xC5	; 197
    1b62:	20 81       	ld	r18, Z
    1b64:	31 81       	ldd	r19, Z+1	; 0x01
    1b66:	23 2b       	or	r18, r19
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <ProcessInput+0x5e>
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <ProcessInput+0x64>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b6e:	82 e8       	ldi	r24, 0x82	; 130
    1b70:	96 e7       	ldi	r25, 0x76	; 118
    1b72:	58 c5       	rjmp	.+2736   	; 0x2624 <ProcessInput+0xb14>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    1b74:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <currObj+0x6>
    1b78:	da d8       	rcall	.-3660   	; 0xd2e <CheckState>
    1b7a:	88 23       	and	r24, r24
    1b7c:	81 f0       	breq	.+32     	; 0x1b9e <ProcessInput+0x8e>
                --currDepth;
    1b7e:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1b82:	e1 50       	subi	r30, 0x01	; 1
    1b84:	e0 93 8f 38 	sts	0x388F, r30	; 0x80388f <currDepth>
                PopulateObject(route[currDepth], &currObj);
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	e8 5f       	subi	r30, 0xF8	; 248
    1b90:	f5 4c       	sbci	r31, 0xC5	; 197
    1b92:	68 e4       	ldi	r22, 0x48	; 72
    1b94:	7a e3       	ldi	r23, 0x3A	; 58
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	f5 da       	rcall	.-2582   	; 0x1186 <PopulateObject>
    1b9c:	0d c2       	rjmp	.+1050   	; 0x1fb8 <ProcessInput+0x4a8>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
    1b9e:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <currObj+0x22>
    1ba2:	90 91 6b 3a 	lds	r25, 0x3A6B	; 0x803a6b <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ba6:	20 91 5c 3a 	lds	r18, 0x3A5C	; 0x803a5c <currObj+0x14>
    1baa:	30 91 5d 3a 	lds	r19, 0x3A5D	; 0x803a5d <currObj+0x15>
    1bae:	f2 c5       	rjmp	.+3044   	; 0x2794 <ProcessInput+0xc84>
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    1bb0:	85 36       	cpi	r24, 0x65	; 101
    1bb2:	19 f0       	breq	.+6      	; 0x1bba <ProcessInput+0xaa>
    1bb4:	8f 36       	cpi	r24, 0x6F	; 111
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <ProcessInput+0xaa>
    1bb8:	c9 c0       	rjmp	.+402    	; 0x1d4c <ProcessInput+0x23c>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    1bba:	b2 e0       	ldi	r27, 0x02	; 2
    1bbc:	fb 12       	cpse	r15, r27
    1bbe:	d7 cf       	rjmp	.-82     	; 0x1b6e <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    1bc0:	e0 90 8f 38 	lds	r14, 0x388F	; 0x80388f <currDepth>
    1bc4:	f1 2c       	mov	r15, r1
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	e8 5f       	subi	r30, 0xF8	; 248
    1bce:	f5 4c       	sbci	r31, 0xC5	; 197
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	d8 01       	movw	r26, r16
    1bd6:	11 96       	adiw	r26, 0x01	; 1
    1bd8:	6c 91       	ld	r22, X
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	9e db       	rcall	.-2244   	; 0x131c <FindChild>
    1be0:	f7 01       	movw	r30, r14
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	e6 5f       	subi	r30, 0xF6	; 246
    1be8:	f5 4c       	sbci	r31, 0xC5	; 197
    1bea:	80 83       	st	Z, r24
    1bec:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    1bee:	90 91 8f 38 	lds	r25, 0x388F	; 0x80388f <currDepth>
    1bf2:	29 2f       	mov	r18, r25
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	ff 1f       	adc	r31, r31
    1bfc:	e6 5f       	subi	r30, 0xF6	; 246
    1bfe:	f5 4c       	sbci	r31, 0xC5	; 197
    1c00:	40 81       	ld	r20, Z
    1c02:	51 81       	ldd	r21, Z+1	; 0x01
    1c04:	41 15       	cp	r20, r1
    1c06:	51 05       	cpc	r21, r1
    1c08:	21 f0       	breq	.+8      	; 0x1c12 <ProcessInput+0x102>
                    PopulateObject(route[currDepth+1], &actObj1);
    1c0a:	69 e0       	ldi	r22, 0x09	; 9
    1c0c:	79 e3       	ldi	r23, 0x39	; 57
    1c0e:	ca 01       	movw	r24, r20
    1c10:	1c c0       	rjmp	.+56     	; 0x1c4a <ProcessInput+0x13a>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    1c12:	99 23       	and	r25, r25
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <ProcessInput+0x108>
    1c16:	0d c7       	rjmp	.+3610   	; 0x2a32 <ProcessInput+0xf22>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    1c18:	22 0f       	add	r18, r18
    1c1a:	33 1f       	adc	r19, r19
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	ea 5f       	subi	r30, 0xFA	; 250
    1c20:	f5 4c       	sbci	r31, 0xC5	; 197
    1c22:	d8 01       	movw	r26, r16
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	6c 91       	ld	r22, X
    1c28:	80 81       	ld	r24, Z
    1c2a:	91 81       	ldd	r25, Z+1	; 0x01
    1c2c:	23 db       	rcall	.-2490   	; 0x1274 <CheckLetter>
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <ProcessInput+0x124>
    1c32:	ff c6       	rjmp	.+3582   	; 0x2a32 <ProcessInput+0xf22>
                        PopulateObject(route[currDepth-1], &actObj1);
    1c34:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	ea 5f       	subi	r30, 0xFA	; 250
    1c40:	f5 4c       	sbci	r31, 0xC5	; 197
    1c42:	69 e0       	ldi	r22, 0x09	; 9
    1c44:	79 e3       	ldi	r23, 0x39	; 57
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	9d da       	rcall	.-2758   	; 0x1186 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	80 81       	ld	r24, Z
    1c50:	85 36       	cpi	r24, 0x65	; 101
    1c52:	c9 f4       	brne	.+50     	; 0x1c86 <ProcessInput+0x176>
    1c54:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3989+0x8>
    1c58:	80 fd       	sbrc	r24, 0
    1c5a:	1e c0       	rjmp	.+60     	; 0x1c98 <ProcessInput+0x188>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1c5c:	80 ea       	ldi	r24, 0xA0	; 160
    1c5e:	99 e7       	ldi	r25, 0x79	; 121
    1c60:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1c64:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1c68:	8e e1       	ldi	r24, 0x1E	; 30
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1c70:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    1c7c:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    1c80:	72 e0       	ldi	r23, 0x02	; 2
    1c82:	77 2e       	mov	r7, r23
    1c84:	9b c6       	rjmp	.+3382   	; 0x29bc <ProcessInput+0xeac>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    1c86:	8f 36       	cpi	r24, 0x6F	; 111
    1c88:	39 f4       	brne	.+14     	; 0x1c98 <ProcessInput+0x188>
    1c8a:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3989+0x8>
    1c8e:	81 fd       	sbrc	r24, 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <ProcessInput+0x188>
    1c92:	85 e8       	ldi	r24, 0x85	; 133
    1c94:	99 e7       	ldi	r25, 0x79	; 121
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    1c96:	c6 c4       	rjmp	.+2444   	; 0x2624 <ProcessInput+0xb14>
    1c98:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <actObj1.3989+0x6>
    1c9c:	48 d8       	rcall	.-3952   	; 0xd2e <CheckState>
    1c9e:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <ProcessInput+0x198>
    1ca6:	42 c0       	rjmp	.+132    	; 0x1d2c <ProcessInput+0x21c>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    1ca8:	ae 2f       	mov	r26, r30
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	aa 0f       	add	r26, r26
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	a6 5f       	subi	r26, 0xF6	; 246
    1cb2:	b5 4c       	sbci	r27, 0xC5	; 197
    1cb4:	8d 91       	ld	r24, X+
    1cb6:	9c 91       	ld	r25, X
    1cb8:	89 2b       	or	r24, r25
    1cba:	11 f0       	breq	.+4      	; 0x1cc0 <ProcessInput+0x1b0>
    1cbc:	ef 5f       	subi	r30, 0xFF	; 255
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <ProcessInput+0x1b2>
    1cc0:	e1 50       	subi	r30, 0x01	; 1
    1cc2:	e0 93 8f 38 	sts	0x388F, r30	; 0x80388f <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    1cc6:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	e8 5f       	subi	r30, 0xF8	; 248
    1cd2:	f5 4c       	sbci	r31, 0xC5	; 197
    1cd4:	68 e4       	ldi	r22, 0x48	; 72
    1cd6:	7a e3       	ldi	r23, 0x3A	; 58
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	54 da       	rcall	.-2904   	; 0x1186 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    1cde:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <currObj+0x1c>
    1ce2:	90 91 65 3a 	lds	r25, 0x3A65	; 0x803a65 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ce6:	20 91 56 3a 	lds	r18, 0x3A56	; 0x803a56 <currObj+0xe>
    1cea:	30 91 57 3a 	lds	r19, 0x3A57	; 0x803a57 <currObj+0xf>
    1cee:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1cf2:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1cf6:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1cfa:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1cfe:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    1d02:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d06:	8b e5       	ldi	r24, 0x5B	; 91
    1d08:	9a e7       	ldi	r25, 0x7A	; 122
    1d0a:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    1d0e:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    1d1a:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	80 93 cc 39 	sts	0x39CC, r24	; 0x8039cc <reactStr+0x84>
    1d26:	90 93 cd 39 	sts	0x39CD, r25	; 0x8039cd <reactStr+0x85>
    1d2a:	68 c4       	rjmp	.+2256   	; 0x25fc <ProcessInput+0xaec>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	ee 0f       	add	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	e6 5f       	subi	r30, 0xF6	; 246
    1d34:	f5 4c       	sbci	r31, 0xC5	; 197
    1d36:	10 82       	st	Z, r1
    1d38:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);                
    1d3a:	80 91 2b 39 	lds	r24, 0x392B	; 0x80392b <actObj1.3989+0x22>
    1d3e:	90 91 2c 39 	lds	r25, 0x392C	; 0x80392c <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d42:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <actObj1.3989+0x14>
    1d46:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <actObj1.3989+0x15>
    1d4a:	24 c5       	rjmp	.+2632   	; 0x2794 <ProcessInput+0xc84>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    1d4c:	8c 36       	cpi	r24, 0x6C	; 108
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <ProcessInput+0x242>
    1d50:	4b c1       	rjmp	.+662    	; 0x1fe8 <ProcessInput+0x4d8>
    1d52:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
            if (inputLen == 1) {
    1d56:	b1 e0       	ldi	r27, 0x01	; 1
    1d58:	fb 12       	cpse	r15, r27
    1d5a:	f6 c0       	rjmp	.+492    	; 0x1f48 <ProcessInput+0x438>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    1d5c:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <currObj+0x1c>
    1d60:	90 91 65 3a 	lds	r25, 0x3A65	; 0x803a65 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d64:	20 91 56 3a 	lds	r18, 0x3A56	; 0x803a56 <currObj+0xe>
    1d68:	30 91 57 3a 	lds	r19, 0x3A57	; 0x803a57 <currObj+0xf>
    1d6c:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1d70:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1d74:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1d78:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1d7c:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    1d80:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d84:	8b e5       	ldi	r24, 0x5B	; 91
    1d86:	9a e7       	ldi	r25, 0x7A	; 122
    1d88:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    1d8c:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    1d98:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	80 93 cc 39 	sts	0x39CC, r24	; 0x8039cc <reactStr+0x84>
    1da4:	90 93 cd 39 	sts	0x39CD, r25	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1da8:	2e ee       	ldi	r18, 0xEE	; 238
    1daa:	39 e7       	ldi	r19, 0x79	; 121
    1dac:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x6>
    1db0:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    1db4:	25 e1       	ldi	r18, 0x15	; 21
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	20 93 8e 39 	sts	0x398E, r18	; 0x80398e <reactStr+0x46>
    1dbc:	30 93 8f 39 	sts	0x398F, r19	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    1dc0:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    1dc4:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	e6 5f       	subi	r30, 0xF6	; 246
    1dd0:	f5 4c       	sbci	r31, 0xC5	; 197
    1dd2:	10 82       	st	Z, r1
    1dd4:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    1dd6:	84 e0       	ldi	r24, 0x04	; 4
    1dd8:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1dda:	99 e5       	ldi	r25, 0x59	; 89
    1ddc:	c9 2e       	mov	r12, r25
    1dde:	9a e7       	ldi	r25, 0x7A	; 122
    1de0:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    1de2:	22 e0       	ldi	r18, 0x02	; 2
    1de4:	a2 2e       	mov	r10, r18
    1de6:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    1de8:	88 24       	eor	r8, r8
    1dea:	83 94       	inc	r8
    1dec:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    1dee:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 01       	movw	r18, r24
    1df6:	22 0f       	add	r18, r18
    1df8:	33 1f       	adc	r19, r19
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	e6 5f       	subi	r30, 0xF6	; 246
    1dfe:	f5 4c       	sbci	r31, 0xC5	; 197
    1e00:	7f 01       	movw	r14, r30
    1e02:	40 81       	ld	r20, Z
    1e04:	51 81       	ldd	r21, Z+1	; 0x01
    1e06:	f9 01       	movw	r30, r18
    1e08:	e8 5f       	subi	r30, 0xF8	; 248
    1e0a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	84 da       	rcall	.-2808   	; 0x131c <FindChild>
    1e14:	d7 01       	movw	r26, r14
    1e16:	8d 93       	st	X+, r24
    1e18:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    1e1a:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	e6 5f       	subi	r30, 0xF6	; 246
    1e26:	f5 4c       	sbci	r31, 0xC5	; 197
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <ProcessInput+0x322>
    1e30:	4a c0       	rjmp	.+148    	; 0x1ec6 <ProcessInput+0x3b6>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    1e32:	20 91 96 38 	lds	r18, 0x3896	; 0x803896 <inventory>
    1e36:	30 91 97 38 	lds	r19, 0x3897	; 0x803897 <inventory+0x1>
    1e3a:	82 17       	cp	r24, r18
    1e3c:	93 07       	cpc	r25, r19
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <ProcessInput+0x332>
    1e40:	42 c0       	rjmp	.+132    	; 0x1ec6 <ProcessInput+0x3b6>
    1e42:	20 91 98 38 	lds	r18, 0x3898	; 0x803898 <inventory+0x2>
    1e46:	30 91 99 38 	lds	r19, 0x3899	; 0x803899 <inventory+0x3>
    1e4a:	82 17       	cp	r24, r18
    1e4c:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    1e4e:	d9 f1       	breq	.+118    	; 0x1ec6 <ProcessInput+0x3b6>
    1e50:	69 e0       	ldi	r22, 0x09	; 9
    1e52:	79 e3       	ldi	r23, 0x39	; 57
    1e54:	98 d9       	rcall	.-3280   	; 0x1186 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    1e56:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3989+0x1a>
    1e5a:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e5e:	e6 2d       	mov	r30, r6
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	df 01       	movw	r26, r30
    1e64:	aa 0f       	add	r26, r26
    1e66:	bb 1f       	adc	r27, r27
    1e68:	a8 5b       	subi	r26, 0xB8	; 184
    1e6a:	b6 4c       	sbci	r27, 0xC6	; 198
    1e6c:	20 91 15 39 	lds	r18, 0x3915	; 0x803915 <actObj1.3989+0xc>
    1e70:	30 91 16 39 	lds	r19, 0x3916	; 0x803916 <actObj1.3989+0xd>
    1e74:	2d 93       	st	X+, r18
    1e76:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    1e78:	df 01       	movw	r26, r30
    1e7a:	aa 0f       	add	r26, r26
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	a8 57       	subi	r26, 0x78	; 120
    1e80:	b6 4c       	sbci	r27, 0xC6	; 198
    1e82:	8d 93       	st	X+, r24
    1e84:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	e8 53       	subi	r30, 0x38	; 56
    1e8c:	f6 4c       	sbci	r31, 0xC6	; 198
    1e8e:	10 82       	st	Z, r1
    1e90:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	86 0d       	add	r24, r6
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	63 94       	inc	r6
    1e9a:	63 94       	inc	r6
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	e8 5b       	subi	r30, 0xB8	; 184
    1ea4:	f6 4c       	sbci	r31, 0xC6	; 198
    1ea6:	c0 82       	st	Z, r12
    1ea8:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    1eaa:	fc 01       	movw	r30, r24
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	e8 57       	subi	r30, 0x78	; 120
    1eb2:	f6 4c       	sbci	r31, 0xC6	; 198
    1eb4:	a0 82       	st	Z, r10
    1eb6:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e8 53       	subi	r30, 0x38	; 56
    1ec0:	f6 4c       	sbci	r31, 0xC6	; 198
    1ec2:	80 82       	st	Z, r8
    1ec4:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    1ec6:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <currDepth>
    1eca:	82 2f       	mov	r24, r18
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	fc 01       	movw	r30, r24
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	e6 5f       	subi	r30, 0xF6	; 246
    1ed6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ed8:	40 81       	ld	r20, Z
    1eda:	51 81       	ldd	r21, Z+1	; 0x01
    1edc:	45 2b       	or	r20, r21
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <ProcessInput+0x3d2>
    1ee0:	86 cf       	rjmp	.-244    	; 0x1dee <ProcessInput+0x2de>

                //Look back if not on level 0
                if (currDepth) {
    1ee2:	22 23       	and	r18, r18
                    PopulateObject(route[currDepth-1], &actObj1);
    1ee4:	69 f1       	breq	.+90     	; 0x1f40 <ProcessInput+0x430>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	fc 01       	movw	r30, r24
    1eec:	ea 5f       	subi	r30, 0xFA	; 250
    1eee:	f5 4c       	sbci	r31, 0xC5	; 197
    1ef0:	69 e0       	ldi	r22, 0x09	; 9
    1ef2:	79 e3       	ldi	r23, 0x39	; 57
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	46 d9       	rcall	.-3444   	; 0x1186 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    1efa:	20 91 23 39 	lds	r18, 0x3923	; 0x803923 <actObj1.3989+0x1a>
    1efe:	30 91 24 39 	lds	r19, 0x3924	; 0x803924 <actObj1.3989+0x1b>
    1f02:	77 24       	eor	r7, r7
    1f04:	73 94       	inc	r7
    1f06:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f08:	86 2d       	mov	r24, r6
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	e8 5b       	subi	r30, 0xB8	; 184
    1f14:	f6 4c       	sbci	r31, 0xC6	; 198
    1f16:	40 91 15 39 	lds	r20, 0x3915	; 0x803915 <actObj1.3989+0xc>
    1f1a:	50 91 16 39 	lds	r21, 0x3916	; 0x803916 <actObj1.3989+0xd>
    1f1e:	40 83       	st	Z, r20
    1f20:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    1f22:	fc 01       	movw	r30, r24
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	e8 57       	subi	r30, 0x78	; 120
    1f2a:	f6 4c       	sbci	r31, 0xC6	; 198
    1f2c:	20 83       	st	Z, r18
    1f2e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	fc 01       	movw	r30, r24
    1f36:	e8 53       	subi	r30, 0x38	; 56
    1f38:	f6 4c       	sbci	r31, 0xC6	; 198
    1f3a:	10 82       	st	Z, r1
    1f3c:	11 82       	std	Z+1, r1	; 0x01
    1f3e:	3e c5       	rjmp	.+2684   	; 0x29bc <ProcessInput+0xeac>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    1f40:	77 24       	eor	r7, r7
    1f42:	7a 94       	dec	r7
    1f44:	76 0c       	add	r7, r6
    1f46:	3a c5       	rjmp	.+2676   	; 0x29bc <ProcessInput+0xeac>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    1f48:	ee 2e       	mov	r14, r30
    1f4a:	f1 2c       	mov	r15, r1
    1f4c:	f7 01       	movw	r30, r14
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	e8 5f       	subi	r30, 0xF8	; 248
    1f54:	f5 4c       	sbci	r31, 0xC5	; 197
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	d8 01       	movw	r26, r16
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	6c 91       	ld	r22, X
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	db d9       	rcall	.-3146   	; 0x131c <FindChild>
    1f66:	f7 01       	movw	r30, r14
    1f68:	ee 0f       	add	r30, r30
    1f6a:	ff 1f       	adc	r31, r31
    1f6c:	e6 5f       	subi	r30, 0xF6	; 246
    1f6e:	f5 4c       	sbci	r31, 0xC5	; 197
    1f70:	80 83       	st	Z, r24
    1f72:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    1f74:	90 91 8f 38 	lds	r25, 0x388F	; 0x80388f <currDepth>
    1f78:	29 2f       	mov	r18, r25
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	e6 5f       	subi	r30, 0xF6	; 246
    1f84:	f5 4c       	sbci	r31, 0xC5	; 197
    1f86:	40 81       	ld	r20, Z
    1f88:	51 81       	ldd	r21, Z+1	; 0x01
    1f8a:	41 15       	cp	r20, r1
    1f8c:	51 05       	cpc	r21, r1
    1f8e:	21 f0       	breq	.+8      	; 0x1f98 <ProcessInput+0x488>
                    PopulateObject(route[currDepth+1], &actObj1);
    1f90:	69 e0       	ldi	r22, 0x09	; 9
    1f92:	79 e3       	ldi	r23, 0x39	; 57
    1f94:	ca 01       	movw	r24, r20
    1f96:	1e c0       	rjmp	.+60     	; 0x1fd4 <ProcessInput+0x4c4>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    1f98:	99 23       	and	r25, r25
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <ProcessInput+0x48e>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    1f9c:	4a c5       	rjmp	.+2708   	; 0x2a32 <ProcessInput+0xf22>
    1f9e:	22 0f       	add	r18, r18
    1fa0:	33 1f       	adc	r19, r19
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	ea 5f       	subi	r30, 0xFA	; 250
    1fa6:	f5 4c       	sbci	r31, 0xC5	; 197
    1fa8:	d8 01       	movw	r26, r16
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	6c 91       	ld	r22, X
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	60 d9       	rcall	.-3392   	; 0x1274 <CheckLetter>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <ProcessInput+0x4ae>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    1fb8:	77 24       	eor	r7, r7
    1fba:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    1fbc:	ff c4       	rjmp	.+2558   	; 0x29bc <ProcessInput+0xeac>
    1fbe:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ea 5f       	subi	r30, 0xFA	; 250
    1fca:	f5 4c       	sbci	r31, 0xC5	; 197
    1fcc:	69 e0       	ldi	r22, 0x09	; 9
    1fce:	79 e3       	ldi	r23, 0x39	; 57
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	d8 d8       	rcall	.-3664   	; 0x1186 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    1fd6:	80 91 25 39 	lds	r24, 0x3925	; 0x803925 <actObj1.3989+0x1c>
    1fda:	90 91 26 39 	lds	r25, 0x3926	; 0x803926 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fde:	20 91 17 39 	lds	r18, 0x3917	; 0x803917 <actObj1.3989+0xe>
    1fe2:	30 91 18 39 	lds	r19, 0x3918	; 0x803918 <actObj1.3989+0xf>
    1fe6:	d6 c3       	rjmp	.+1964   	; 0x2794 <ProcessInput+0xc84>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    1fe8:	80 37       	cpi	r24, 0x70	; 112
    1fea:	09 f0       	breq	.+2      	; 0x1fee <ProcessInput+0x4de>
    1fec:	96 c0       	rjmp	.+300    	; 0x211a <ProcessInput+0x60a>
            if (inventory[0]&&inventory[1]) {
    1fee:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    1ff2:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    1ff6:	89 2b       	or	r24, r25
    1ff8:	79 f0       	breq	.+30     	; 0x2018 <ProcessInput+0x508>
    1ffa:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    1ffe:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    2002:	89 2b       	or	r24, r25
    2004:	49 f0       	breq	.+18     	; 0x2018 <ProcessInput+0x508>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2006:	85 e4       	ldi	r24, 0x45	; 69
    2008:	98 e7       	ldi	r25, 0x78	; 120
    200a:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    200e:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2012:	89 e5       	ldi	r24, 0x59	; 89
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	2a ce       	rjmp	.-940    	; 0x1c6c <ProcessInput+0x15c>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2018:	b2 e0       	ldi	r27, 0x02	; 2
    201a:	fb 12       	cpse	r15, r27
    201c:	a8 cd       	rjmp	.-1200   	; 0x1b6e <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    201e:	e0 90 8f 38 	lds	r14, 0x388F	; 0x80388f <currDepth>
    2022:	f1 2c       	mov	r15, r1
    2024:	f7 01       	movw	r30, r14
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	e8 5f       	subi	r30, 0xF8	; 248
    202c:	f5 4c       	sbci	r31, 0xC5	; 197
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	d8 01       	movw	r26, r16
    2034:	11 96       	adiw	r26, 0x01	; 1
    2036:	6c 91       	ld	r22, X
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	6f d9       	rcall	.-3362   	; 0x131c <FindChild>
    203e:	f7 01       	movw	r30, r14
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	e6 5f       	subi	r30, 0xF6	; 246
    2046:	f5 4c       	sbci	r31, 0xC5	; 197
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    204c:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <currDepth>
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	2f 5f       	subi	r18, 0xFF	; 255
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	22 0f       	add	r18, r18
    2058:	33 1f       	adc	r19, r19
    205a:	f9 01       	movw	r30, r18
    205c:	e8 5f       	subi	r30, 0xF8	; 248
    205e:	f5 4c       	sbci	r31, 0xC5	; 197
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	09 f4       	brne	.+2      	; 0x206a <ProcessInput+0x55a>
    2068:	ab c3       	rjmp	.+1878   	; 0x27c0 <ProcessInput+0xcb0>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    206a:	40 91 96 38 	lds	r20, 0x3896	; 0x803896 <inventory>
    206e:	50 91 97 38 	lds	r21, 0x3897	; 0x803897 <inventory+0x1>
    2072:	84 17       	cp	r24, r20
    2074:	95 07       	cpc	r25, r21
    2076:	39 f0       	breq	.+14     	; 0x2086 <ProcessInput+0x576>
    2078:	40 91 98 38 	lds	r20, 0x3898	; 0x803898 <inventory+0x2>
    207c:	50 91 99 38 	lds	r21, 0x3899	; 0x803899 <inventory+0x3>
    2080:	84 17       	cp	r24, r20
    2082:	95 07       	cpc	r25, r21
    2084:	c1 f4       	brne	.+48     	; 0x20b6 <ProcessInput+0x5a6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	98 e7       	ldi	r25, 0x78	; 120
    208a:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    208e:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2092:	85 e2       	ldi	r24, 0x25	; 37
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    209a:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    20a6:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    20aa:	f9 01       	movw	r30, r18
    20ac:	e8 5f       	subi	r30, 0xF8	; 248
    20ae:	f5 4c       	sbci	r31, 0xC5	; 197
    20b0:	10 82       	st	Z, r1
    20b2:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    20b4:	e5 cd       	rjmp	.-1078   	; 0x1c80 <ProcessInput+0x170>
    20b6:	69 e0       	ldi	r22, 0x09	; 9
    20b8:	79 e3       	ldi	r23, 0x39	; 57
    20ba:	65 d8       	rcall	.-3894   	; 0x1186 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    20bc:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3989+0x7>
    20c0:	0e 94 97 06 	call	0xd2e	; 0xd2e <CheckState>
    20c4:	88 23       	and	r24, r24
    20c6:	09 f4       	brne	.+2      	; 0x20ca <ProcessInput+0x5ba>
    20c8:	5d c3       	rjmp	.+1722   	; 0x2784 <ProcessInput+0xc74>
                            if (actObj1.byteField[ITEM_NR]) {
    20ca:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <actObj1.3989+0xb>
    20ce:	88 23       	and	r24, r24
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <ProcessInput+0x5c4>
    20d2:	4d cd       	rjmp	.-1382   	; 0x1b6e <ProcessInput+0x5e>
                                if (inventory[0]) {
    20d4:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    20d8:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    20dc:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
                                    inventory[1] = route[currDepth+1];
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	e6 5f       	subi	r30, 0xF6	; 246
    20e8:	f5 4c       	sbci	r31, 0xC5	; 197
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    20ea:	89 2b       	or	r24, r25
    20ec:	39 f0       	breq	.+14     	; 0x20fc <ProcessInput+0x5ec>
                                    inventory[1] = route[currDepth+1];
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <inventory+0x2>
    20f6:	90 93 99 38 	sts	0x3899, r25	; 0x803899 <inventory+0x3>
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <ProcessInput+0x5f8>
                                } else {
                                    inventory[0] = route[currDepth+1];
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <inventory>
    2104:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2108:	8a e0       	ldi	r24, 0x0A	; 10
    210a:	98 e7       	ldi	r25, 0x78	; 120
    210c:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2110:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2114:	86 e1       	ldi	r24, 0x16	; 22
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	53 c2       	rjmp	.+1190   	; 0x25c0 <ProcessInput+0xab0>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    211a:	84 36       	cpi	r24, 0x64	; 100
    211c:	d9 f4       	brne	.+54     	; 0x2154 <ProcessInput+0x644>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    211e:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    2122:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	09 f0       	breq	.+2      	; 0x212c <ProcessInput+0x61c>
    212a:	8c c4       	rjmp	.+2328   	; 0x2a44 <ProcessInput+0xf34>
    212c:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    2130:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    2134:	89 2b       	or	r24, r25
    2136:	49 f4       	brne	.+18     	; 0x214a <ProcessInput+0x63a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2138:	84 ee       	ldi	r24, 0xE4	; 228
    213a:	97 e7       	ldi	r25, 0x77	; 119
    213c:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2140:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2144:	86 e2       	ldi	r24, 0x26	; 38
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	91 cd       	rjmp	.-1246   	; 0x1c6c <ProcessInput+0x15c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    214a:	b2 e0       	ldi	r27, 0x02	; 2
    214c:	fb 16       	cp	r15, r27
    214e:	09 f4       	brne	.+2      	; 0x2152 <ProcessInput+0x642>
    2150:	df c4       	rjmp	.+2494   	; 0x2b10 <ProcessInput+0x1000>
    2152:	0d cd       	rjmp	.-1510   	; 0x1b6e <ProcessInput+0x5e>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    2154:	89 36       	cpi	r24, 0x69	; 105
    2156:	09 f0       	breq	.+2      	; 0x215a <ProcessInput+0x64a>
    2158:	7b c0       	rjmp	.+246    	; 0x2250 <ProcessInput+0x740>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    215a:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    215e:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    2162:	89 2b       	or	r24, r25
    2164:	31 f4       	brne	.+12     	; 0x2172 <ProcessInput+0x662>
    2166:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    216a:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    216e:	89 2b       	or	r24, r25
    2170:	19 f3       	breq	.-58     	; 0x2138 <ProcessInput+0x628>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2172:	8a e0       	ldi	r24, 0x0A	; 10
    2174:	98 e7       	ldi	r25, 0x78	; 120
    2176:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    217a:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    217e:	86 e1       	ldi	r24, 0x16	; 22
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2186:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    2192:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
    2196:	26 e9       	ldi	r18, 0x96	; 150
    2198:	e2 2e       	mov	r14, r18
    219a:	28 e3       	ldi	r18, 0x38	; 56
    219c:	f2 2e       	mov	r15, r18
    219e:	3a e9       	ldi	r19, 0x9A	; 154
    21a0:	63 2e       	mov	r6, r19
    21a2:	38 e3       	ldi	r19, 0x38	; 56
    21a4:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    21a6:	42 e0       	ldi	r20, 0x02	; 2
    21a8:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21aa:	59 e5       	ldi	r21, 0x59	; 89
    21ac:	c5 2e       	mov	r12, r21
    21ae:	5a e7       	ldi	r21, 0x7A	; 122
    21b0:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	a6 2e       	mov	r10, r22
    21b6:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    21b8:	88 24       	eor	r8, r8
    21ba:	83 94       	inc	r8
    21bc:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    21be:	d7 01       	movw	r26, r14
    21c0:	8d 91       	ld	r24, X+
    21c2:	9d 91       	ld	r25, X+
    21c4:	7d 01       	movw	r14, r26
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	d9 f1       	breq	.+118    	; 0x2240 <ProcessInput+0x730>
                        PopulateObject(inventory[x], &actObj1);
    21ca:	69 e0       	ldi	r22, 0x09	; 9
    21cc:	79 e3       	ldi	r23, 0x39	; 57
    21ce:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    21d2:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3989+0x1a>
    21d6:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21da:	e5 2d       	mov	r30, r5
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	df 01       	movw	r26, r30
    21e0:	aa 0f       	add	r26, r26
    21e2:	bb 1f       	adc	r27, r27
    21e4:	a8 5b       	subi	r26, 0xB8	; 184
    21e6:	b6 4c       	sbci	r27, 0xC6	; 198
    21e8:	20 91 15 39 	lds	r18, 0x3915	; 0x803915 <actObj1.3989+0xc>
    21ec:	30 91 16 39 	lds	r19, 0x3916	; 0x803916 <actObj1.3989+0xd>
    21f0:	2d 93       	st	X+, r18
    21f2:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    21f4:	df 01       	movw	r26, r30
    21f6:	aa 0f       	add	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	a8 57       	subi	r26, 0x78	; 120
    21fc:	b6 4c       	sbci	r27, 0xC6	; 198
    21fe:	8d 93       	st	X+, r24
    2200:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	e8 53       	subi	r30, 0x38	; 56
    2208:	f6 4c       	sbci	r31, 0xC6	; 198
    220a:	10 82       	st	Z, r1
    220c:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    220e:	e1 e0       	ldi	r30, 0x01	; 1
    2210:	e5 0d       	add	r30, r5
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	53 94       	inc	r5
    2216:	53 94       	inc	r5
    2218:	df 01       	movw	r26, r30
    221a:	aa 0f       	add	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	a8 5b       	subi	r26, 0xB8	; 184
    2220:	b6 4c       	sbci	r27, 0xC6	; 198
    2222:	cd 92       	st	X+, r12
    2224:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2226:	df 01       	movw	r26, r30
    2228:	aa 0f       	add	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	a8 57       	subi	r26, 0x78	; 120
    222e:	b6 4c       	sbci	r27, 0xC6	; 198
    2230:	ad 92       	st	X+, r10
    2232:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	e8 53       	subi	r30, 0x38	; 56
    223a:	f6 4c       	sbci	r31, 0xC6	; 198
    223c:	80 82       	st	Z, r8
    223e:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    2240:	6e 14       	cp	r6, r14
    2242:	7f 04       	cpc	r7, r15
    2244:	09 f0       	breq	.+2      	; 0x2248 <ProcessInput+0x738>
    2246:	bb cf       	rjmp	.-138    	; 0x21be <ProcessInput+0x6ae>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2248:	77 24       	eor	r7, r7
    224a:	7a 94       	dec	r7
    224c:	75 0c       	add	r7, r5
    224e:	b6 c3       	rjmp	.+1900   	; 0x29bc <ProcessInput+0xeac>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    2250:	9c e8       	ldi	r25, 0x8C	; 140
    2252:	98 0f       	add	r25, r24
    2254:	92 30       	cpi	r25, 0x02	; 2
    2256:	28 f0       	brcs	.+10     	; 0x2262 <ProcessInput+0x752>
    2258:	87 36       	cpi	r24, 0x67	; 103
    225a:	19 f0       	breq	.+6      	; 0x2262 <ProcessInput+0x752>
    225c:	82 37       	cpi	r24, 0x72	; 114
    225e:	09 f0       	breq	.+2      	; 0x2262 <ProcessInput+0x752>
    2260:	b8 c2       	rjmp	.+1392   	; 0x27d2 <ProcessInput+0xcc2>
            if ((inputLen<2)||(inputLen>3)) {
    2262:	8e ef       	ldi	r24, 0xFE	; 254
    2264:	8f 0d       	add	r24, r15
    2266:	82 30       	cpi	r24, 0x02	; 2
    2268:	08 f0       	brcs	.+2      	; 0x226c <ProcessInput+0x75c>
    226a:	81 cc       	rjmp	.-1790   	; 0x1b6e <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    226c:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    2270:	ce 2e       	mov	r12, r30
    2272:	d1 2c       	mov	r13, r1
    2274:	d8 01       	movw	r26, r16
    2276:	af 0d       	add	r26, r15
    2278:	b1 1d       	adc	r27, r1
    227a:	11 97       	sbiw	r26, 0x01	; 1
    227c:	f6 01       	movw	r30, r12
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	e8 5f       	subi	r30, 0xF8	; 248
    2284:	f5 4c       	sbci	r31, 0xC5	; 197
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	6c 91       	ld	r22, X
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	45 d8       	rcall	.-3958   	; 0x131c <FindChild>
    2292:	f6 01       	movw	r30, r12
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	e6 5f       	subi	r30, 0xF6	; 246
    229a:	f5 4c       	sbci	r31, 0xC5	; 197
    229c:	80 83       	st	Z, r24
    229e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    22a0:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	e6 5f       	subi	r30, 0xF6	; 246
    22ac:	f5 4c       	sbci	r31, 0xC5	; 197
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <ProcessInput+0x7a8>
    22b6:	7b c2       	rjmp	.+1270   	; 0x27ae <ProcessInput+0xc9e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    22b8:	b3 e0       	ldi	r27, 0x03	; 3
    22ba:	fb 12       	cpse	r15, r27
    22bc:	6d c1       	rjmp	.+730    	; 0x2598 <ProcessInput+0xa88>
    22be:	f8 01       	movw	r30, r16
    22c0:	20 81       	ld	r18, Z
    22c2:	25 37       	cpi	r18, 0x75	; 117
    22c4:	19 f0       	breq	.+6      	; 0x22cc <ProcessInput+0x7bc>
    22c6:	27 36       	cpi	r18, 0x67	; 103
    22c8:	09 f0       	breq	.+2      	; 0x22cc <ProcessInput+0x7bc>
    22ca:	66 c1       	rjmp	.+716    	; 0x2598 <ProcessInput+0xa88>
    22cc:	61 2c       	mov	r6, r1
    22ce:	77 24       	eor	r7, r7
    22d0:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22d2:	54 e6       	ldi	r21, 0x64	; 100
    22d4:	c5 2e       	mov	r12, r21
    22d6:	59 e7       	ldi	r21, 0x79	; 121
    22d8:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    22da:	61 e2       	ldi	r22, 0x21	; 33
    22dc:	a6 2e       	mov	r10, r22
    22de:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    22e0:	88 24       	eor	r8, r8
    22e2:	83 94       	inc	r8
    22e4:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    22e6:	e6 2c       	mov	r14, r6
    22e8:	f1 2c       	mov	r15, r1
    22ea:	c7 01       	movw	r24, r14
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	9c 01       	movw	r18, r24
    22f2:	2a 56       	subi	r18, 0x6A	; 106
    22f4:	37 4c       	sbci	r19, 0xC7	; 199
    22f6:	79 01       	movw	r14, r18
    22f8:	d9 01       	movw	r26, r18
    22fa:	8d 91       	ld	r24, X+
    22fc:	9c 91       	ld	r25, X
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	81 f0       	breq	.+32     	; 0x2322 <ProcessInput+0x812>
                                if (CheckLetter(inventory[x], data[1])) {
    2302:	f8 01       	movw	r30, r16
    2304:	61 81       	ldd	r22, Z+1	; 0x01
    2306:	0e 94 3a 09 	call	0x1274	; 0x1274 <CheckLetter>
    230a:	88 23       	and	r24, r24
    230c:	51 f0       	breq	.+20     	; 0x2322 <ProcessInput+0x812>
                                    PopulateObject(inventory[x], &actObj2);
    230e:	6e ed       	ldi	r22, 0xDE	; 222
    2310:	78 e3       	ldi	r23, 0x38	; 56
    2312:	d7 01       	movw	r26, r14
    2314:	8d 91       	ld	r24, X+
    2316:	9c 91       	ld	r25, X
    2318:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>
                                    x = 2;
    231c:	32 e0       	ldi	r19, 0x02	; 2
    231e:	63 2e       	mov	r6, r19
    2320:	1e c0       	rjmp	.+60     	; 0x235e <ProcessInput+0x84e>
                                }
                            }
                            if (x == 1) { 
    2322:	b1 e0       	ldi	r27, 0x01	; 1
    2324:	6b 12       	cpse	r6, r27
    2326:	1a c0       	rjmp	.+52     	; 0x235c <ProcessInput+0x84c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2328:	e7 2d       	mov	r30, r7
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	df 01       	movw	r26, r30
    232e:	aa 0f       	add	r26, r26
    2330:	bb 1f       	adc	r27, r27
    2332:	a8 5b       	subi	r26, 0xB8	; 184
    2334:	b6 4c       	sbci	r27, 0xC6	; 198
    2336:	cd 92       	st	X+, r12
    2338:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    233a:	df 01       	movw	r26, r30
    233c:	aa 0f       	add	r26, r26
    233e:	bb 1f       	adc	r27, r27
    2340:	a8 57       	subi	r26, 0x78	; 120
    2342:	b6 4c       	sbci	r27, 0xC6	; 198
    2344:	ad 92       	st	X+, r10
    2346:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31
    234c:	e8 53       	subi	r30, 0x38	; 56
    234e:	f6 4c       	sbci	r31, 0xC6	; 198
    2350:	80 82       	st	Z, r8
    2352:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2354:	f8 01       	movw	r30, r16
    2356:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2358:	73 94       	inc	r7
    235a:	01 c0       	rjmp	.+2      	; 0x235e <ProcessInput+0x84e>
    235c:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    235e:	63 94       	inc	r6
    2360:	f1 e0       	ldi	r31, 0x01	; 1
    2362:	6f 16       	cp	r6, r31
    2364:	09 f4       	brne	.+2      	; 0x2368 <ProcessInput+0x858>
    2366:	bf cf       	rjmp	.-130    	; 0x22e6 <ProcessInput+0x7d6>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2368:	d8 01       	movw	r26, r16
    236a:	8c 91       	ld	r24, X
    236c:	88 23       	and	r24, r24
    236e:	09 f4       	brne	.+2      	; 0x2372 <ProcessInput+0x862>
    2370:	25 c3       	rjmp	.+1610   	; 0x29bc <ProcessInput+0xeac>
                            PopulateObject(route[currDepth+1], &actObj1);
    2372:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	e6 5f       	subi	r30, 0xF6	; 246
    237e:	f5 4c       	sbci	r31, 0xC5	; 197
    2380:	69 e0       	ldi	r22, 0x09	; 9
    2382:	79 e3       	ldi	r23, 0x39	; 57
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    238c:	e0 90 27 39 	lds	r14, 0x3927	; 0x803927 <actObj1.3989+0x1e>
    2390:	f0 90 28 39 	lds	r15, 0x3928	; 0x803928 <actObj1.3989+0x1f>
    2394:	b1 e0       	ldi	r27, 0x01	; 1
    2396:	eb 16       	cp	r14, r27
    2398:	f1 04       	cpc	r15, r1
    239a:	09 f0       	breq	.+2      	; 0x239e <ProcessInput+0x88e>
    239c:	9a c0       	rjmp	.+308    	; 0x24d2 <ProcessInput+0x9c2>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    239e:	98 01       	movw	r18, r16
    23a0:	2e 5f       	subi	r18, 0xFE	; 254
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x10>
    23ac:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3989+0x11>
    23b0:	0e 94 b9 07 	call	0xf72	; 0xf72 <ExtEERead>
                                if (data[2] == '1') {
    23b4:	f8 01       	movw	r30, r16
    23b6:	42 81       	ldd	r20, Z+2	; 0x02
    23b8:	21 e0       	ldi	r18, 0x01	; 1
    23ba:	27 0d       	add	r18, r7
    23bc:	87 2d       	mov	r24, r7
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	41 33       	cpi	r20, 0x31	; 49
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <ProcessInput+0x8b6>
    23c4:	6b c0       	rjmp	.+214    	; 0x249c <ProcessInput+0x98c>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    23c6:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    23ca:	51 ee       	ldi	r21, 0xE1	; 225
    23cc:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23ce:	fc 01       	movw	r30, r24
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	e8 5b       	subi	r30, 0xB8	; 184
    23d6:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    23d8:	54 30       	cpi	r21, 0x04	; 4
    23da:	60 f0       	brcs	.+24     	; 0x23f4 <ProcessInput+0x8e4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23dc:	44 e0       	ldi	r20, 0x04	; 4
    23de:	59 e7       	ldi	r21, 0x79	; 121
    23e0:	40 83       	st	Z, r20
    23e2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    23e4:	fc 01       	movw	r30, r24
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	e8 57       	subi	r30, 0x78	; 120
    23ec:	f6 4c       	sbci	r31, 0xC6	; 198
    23ee:	4a e1       	ldi	r20, 0x1A	; 26
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	64 c0       	rjmp	.+200    	; 0x24bc <ProcessInput+0x9ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23f4:	6e e8       	ldi	r22, 0x8E	; 142
    23f6:	75 e7       	ldi	r23, 0x75	; 117
    23f8:	60 83       	st	Z, r22
    23fa:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    23fc:	fc 01       	movw	r30, r24
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e8 57       	subi	r30, 0x78	; 120
    2404:	f6 4c       	sbci	r31, 0xC6	; 198
    2406:	62 eb       	ldi	r22, 0xB2	; 178
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	60 83       	st	Z, r22
    240c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	fc 01       	movw	r30, r24
    2414:	e8 53       	subi	r30, 0x38	; 56
    2416:	f6 4c       	sbci	r31, 0xC6	; 198
    2418:	e0 82       	st	Z, r14
    241a:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    241c:	82 2f       	mov	r24, r18
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	fc 01       	movw	r30, r24
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	e8 5b       	subi	r30, 0xB8	; 184
    2428:	f6 4c       	sbci	r31, 0xC6	; 198
    242a:	6b e5       	ldi	r22, 0x5B	; 91
    242c:	7a e7       	ldi	r23, 0x7A	; 122
    242e:	60 83       	st	Z, r22
    2430:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2432:	fc 01       	movw	r30, r24
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	e8 57       	subi	r30, 0x78	; 120
    243a:	f6 4c       	sbci	r31, 0xC6	; 198
    243c:	62 e0       	ldi	r22, 0x02	; 2
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	60 83       	st	Z, r22
    2442:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	fc 01       	movw	r30, r24
    244a:	e8 53       	subi	r30, 0x38	; 56
    244c:	f6 4c       	sbci	r31, 0xC6	; 198
    244e:	e0 82       	st	Z, r14
    2450:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	87 0d       	add	r24, r7
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	f3 e0       	ldi	r31, 0x03	; 3
    245a:	7f 0e       	add	r7, r31
    245c:	fc 01       	movw	r30, r24
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	e8 5b       	subi	r30, 0xB8	; 184
    2464:	f6 4c       	sbci	r31, 0xC6	; 198
    2466:	60 eb       	ldi	r22, 0xB0	; 176
    2468:	78 e7       	ldi	r23, 0x78	; 120
    246a:	60 83       	st	Z, r22
    246c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    246e:	fc 01       	movw	r30, r24
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	e8 57       	subi	r30, 0x78	; 120
    2476:	f6 4c       	sbci	r31, 0xC6	; 198
    2478:	62 e1       	ldi	r22, 0x12	; 18
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	60 83       	st	Z, r22
    247e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	fc 01       	movw	r30, r24
    2486:	e8 53       	subi	r30, 0x38	; 56
    2488:	f6 4c       	sbci	r31, 0xC6	; 198
    248a:	e0 82       	st	Z, r14
    248c:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    248e:	40 93 37 39 	sts	0x3937, r20	; 0x803937 <specialInput>
                                        specialInput[1] = item;
    2492:	30 93 38 39 	sts	0x3938, r19	; 0x803938 <specialInput+0x1>
                                        specialInput[2] = 0;
    2496:	10 92 39 39 	sts	0x3939, r1	; 0x803939 <specialInput+0x2>
    249a:	90 c2       	rjmp	.+1312   	; 0x29bc <ProcessInput+0xeac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    249c:	fc 01       	movw	r30, r24
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	e8 5b       	subi	r30, 0xB8	; 184
    24a4:	f6 4c       	sbci	r31, 0xC6	; 198
    24a6:	40 e4       	ldi	r20, 0x40	; 64
    24a8:	56 e7       	ldi	r21, 0x76	; 118
    24aa:	40 83       	st	Z, r20
    24ac:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    24ae:	fc 01       	movw	r30, r24
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e8 57       	subi	r30, 0x78	; 120
    24b6:	f6 4c       	sbci	r31, 0xC6	; 198
    24b8:	42 e4       	ldi	r20, 0x42	; 66
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	40 83       	st	Z, r20
    24be:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	fc 01       	movw	r30, r24
    24c6:	e8 53       	subi	r30, 0x38	; 56
    24c8:	f6 4c       	sbci	r31, 0xC6	; 198
    24ca:	e0 82       	st	Z, r14
    24cc:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    24ce:	72 2e       	mov	r7, r18
    24d0:	75 c2       	rjmp	.+1258   	; 0x29bc <ProcessInput+0xeac>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    24d2:	90 91 12 39 	lds	r25, 0x3912	; 0x803912 <actObj1.3989+0x9>
    24d6:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj2.3990+0xb>
    24da:	98 13       	cpse	r25, r24
    24dc:	24 c0       	rjmp	.+72     	; 0x2526 <ProcessInput+0xa16>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    24de:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <actObj1.3989+0xa>
    24e2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <UpdateState>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    24e6:	20 91 2f 39 	lds	r18, 0x392F	; 0x80392f <actObj1.3989+0x26>
    24ea:	30 91 30 39 	lds	r19, 0x3930	; 0x803930 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24ee:	87 2d       	mov	r24, r7
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	fc 01       	movw	r30, r24
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	e8 5b       	subi	r30, 0xB8	; 184
    24fa:	f6 4c       	sbci	r31, 0xC6	; 198
    24fc:	40 91 21 39 	lds	r20, 0x3921	; 0x803921 <actObj1.3989+0x18>
    2500:	50 91 22 39 	lds	r21, 0x3922	; 0x803922 <actObj1.3989+0x19>
    2504:	40 83       	st	Z, r20
    2506:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2508:	fc 01       	movw	r30, r24
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	e8 57       	subi	r30, 0x78	; 120
    2510:	f6 4c       	sbci	r31, 0xC6	; 198
    2512:	20 83       	st	Z, r18
    2514:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	fc 01       	movw	r30, r24
    251c:	e8 53       	subi	r30, 0x38	; 56
    251e:	f6 4c       	sbci	r31, 0xC6	; 198
    2520:	10 82       	st	Z, r1
    2522:	11 82       	std	Z+1, r1	; 0x01
    2524:	37 c0       	rjmp	.+110    	; 0x2594 <ProcessInput+0xa84>
                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
    2526:	d8 01       	movw	r26, r16
    2528:	8c 91       	ld	r24, X
    252a:	85 37       	cpi	r24, 0x75	; 117
    252c:	99 f4       	brne	.+38     	; 0x2554 <ProcessInput+0xa44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    252e:	87 2d       	mov	r24, r7
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	fc 01       	movw	r30, r24
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	e8 5b       	subi	r30, 0xB8	; 184
    253a:	f6 4c       	sbci	r31, 0xC6	; 198
    253c:	24 e0       	ldi	r18, 0x04	; 4
    253e:	39 e7       	ldi	r19, 0x79	; 121
    2540:	20 83       	st	Z, r18
    2542:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2544:	fc 01       	movw	r30, r24
    2546:	ee 0f       	add	r30, r30
    2548:	ff 1f       	adc	r31, r31
    254a:	e8 57       	subi	r30, 0x78	; 120
    254c:	f6 4c       	sbci	r31, 0xC6	; 198
    254e:	2a e1       	ldi	r18, 0x1A	; 26
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	15 c0       	rjmp	.+42     	; 0x257e <ProcessInput+0xa6e>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2554:	87 36       	cpi	r24, 0x67	; 103
    2556:	09 f0       	breq	.+2      	; 0x255a <ProcessInput+0xa4a>
    2558:	31 c2       	rjmp	.+1122   	; 0x29bc <ProcessInput+0xeac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    255a:	87 2d       	mov	r24, r7
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	fc 01       	movw	r30, r24
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	e8 5b       	subi	r30, 0xB8	; 184
    2566:	f6 4c       	sbci	r31, 0xC6	; 198
    2568:	2d ed       	ldi	r18, 0xDD	; 221
    256a:	36 e7       	ldi	r19, 0x76	; 118
    256c:	20 83       	st	Z, r18
    256e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2570:	fc 01       	movw	r30, r24
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31
    2576:	e8 57       	subi	r30, 0x78	; 120
    2578:	f6 4c       	sbci	r31, 0xC6	; 198
    257a:	28 e2       	ldi	r18, 0x28	; 40
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	20 83       	st	Z, r18
    2580:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	fc 01       	movw	r30, r24
    2588:	e8 53       	subi	r30, 0x38	; 56
    258a:	f6 4c       	sbci	r31, 0xC6	; 198
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	80 83       	st	Z, r24
    2592:	91 83       	std	Z+1, r25	; 0x01
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2594:	73 94       	inc	r7
    2596:	12 c2       	rjmp	.+1060   	; 0x29bc <ProcessInput+0xeac>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2598:	69 e0       	ldi	r22, 0x09	; 9
    259a:	79 e3       	ldi	r23, 0x39	; 57
    259c:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    25a0:	f8 01       	movw	r30, r16
    25a2:	80 81       	ld	r24, Z
    25a4:	84 37       	cpi	r24, 0x74	; 116
    25a6:	69 f5       	brne	.+90     	; 0x2602 <ProcessInput+0xaf2>
    25a8:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3989+0x8>
    25ac:	83 fd       	sbrc	r24, 3
    25ae:	44 c0       	rjmp	.+136    	; 0x2638 <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25b0:	8e e1       	ldi	r24, 0x1E	; 30
    25b2:	99 e7       	ldi	r25, 0x79	; 121
    25b4:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    25b8:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    25bc:	8e e1       	ldi	r24, 0x1E	; 30
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    25c4:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    25d0:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    25d4:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3989+0x1a>
    25d8:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25dc:	20 91 15 39 	lds	r18, 0x3915	; 0x803915 <actObj1.3989+0xc>
    25e0:	30 91 16 39 	lds	r19, 0x3916	; 0x803916 <actObj1.3989+0xd>
    25e4:	20 93 4c 39 	sts	0x394C, r18	; 0x80394c <reactStr+0x4>
    25e8:	30 93 4d 39 	sts	0x394D, r19	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    25ec:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    25f0:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    25f4:	10 92 cc 39 	sts	0x39CC, r1	; 0x8039cc <reactStr+0x84>
    25f8:	10 92 cd 39 	sts	0x39CD, r1	; 0x8039cd <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    25fc:	63 e0       	ldi	r22, 0x03	; 3
    25fe:	76 2e       	mov	r7, r22
    2600:	dd c1       	rjmp	.+954    	; 0x29bc <ProcessInput+0xeac>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    2602:	85 37       	cpi	r24, 0x75	; 117
    2604:	39 f4       	brne	.+14     	; 0x2614 <ProcessInput+0xb04>
    2606:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3989+0x8>
    260a:	84 fd       	sbrc	r24, 4
    260c:	15 c0       	rjmp	.+42     	; 0x2638 <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    260e:	84 e0       	ldi	r24, 0x04	; 4
    2610:	99 e7       	ldi	r25, 0x79	; 121
    2612:	11 c2       	rjmp	.+1058   	; 0x2a36 <ProcessInput+0xf26>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    2614:	82 37       	cpi	r24, 0x72	; 114
    2616:	69 f4       	brne	.+26     	; 0x2632 <ProcessInput+0xb22>
    2618:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3989+0x8>
    261c:	85 fd       	sbrc	r24, 5
    261e:	0c c0       	rjmp	.+24     	; 0x2638 <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2620:	89 ee       	ldi	r24, 0xE9	; 233
    2622:	98 e7       	ldi	r25, 0x78	; 120
    2624:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2628:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    262c:	8b e1       	ldi	r24, 0x1B	; 27
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	1d cb       	rjmp	.-2502   	; 0x1c6c <ProcessInput+0x15c>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    2632:	87 36       	cpi	r24, 0x67	; 103
    2634:	09 f4       	brne	.+2      	; 0x2638 <ProcessInput+0xb28>
    2636:	9b ca       	rjmp	.-2762   	; 0x1b6e <ProcessInput+0x5e>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2638:	e0 90 27 39 	lds	r14, 0x3927	; 0x803927 <actObj1.3989+0x1e>
    263c:	f0 90 28 39 	lds	r15, 0x3928	; 0x803928 <actObj1.3989+0x1f>
    2640:	f1 e0       	ldi	r31, 0x01	; 1
    2642:	ef 16       	cp	r14, r31
    2644:	f1 04       	cpc	r15, r1
    2646:	11 f5       	brne	.+68     	; 0x268c <ProcessInput+0xb7c>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2648:	98 01       	movw	r18, r16
    264a:	2e 5f       	subi	r18, 0xFE	; 254
    264c:	3f 4f       	sbci	r19, 0xFF	; 255
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x10>
    2656:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3989+0x11>
    265a:	0e 94 b9 07 	call	0xf72	; 0xf72 <ExtEERead>
                                if (data[2] == '1') {
    265e:	d8 01       	movw	r26, r16
    2660:	12 96       	adiw	r26, 0x02	; 2
    2662:	8c 91       	ld	r24, X
    2664:	81 33       	cpi	r24, 0x31	; 49
    2666:	09 f0       	breq	.+2      	; 0x266a <ProcessInput+0xb5a>
    2668:	a7 cc       	rjmp	.-1714   	; 0x1fb8 <ProcessInput+0x4a8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    266a:	83 e6       	ldi	r24, 0x63	; 99
    266c:	95 e7       	ldi	r25, 0x75	; 117
    266e:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2672:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2676:	8b e2       	ldi	r24, 0x2B	; 43
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    267e:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2682:	e0 92 ca 39 	sts	0x39CA, r14	; 0x8039ca <reactStr+0x82>
    2686:	f0 92 cb 39 	sts	0x39CB, r15	; 0x8039cb <reactStr+0x83>
    268a:	fa ca       	rjmp	.-2572   	; 0x1c80 <ProcessInput+0x170>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    268c:	e1 14       	cp	r14, r1
    268e:	f1 04       	cpc	r15, r1
    2690:	09 f4       	brne	.+2      	; 0x2694 <ProcessInput+0xb84>
    2692:	59 c0       	rjmp	.+178    	; 0x2746 <ProcessInput+0xc36>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2694:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x10>
    2698:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3989+0x11>
    269c:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    26a0:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    26a4:	e0 92 8a 39 	sts	0x398A, r14	; 0x80398a <reactStr+0x42>
    26a8:	f0 92 8b 39 	sts	0x398B, r15	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    26ac:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    26b0:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26b4:	8b e5       	ldi	r24, 0x5B	; 91
    26b6:	9a e7       	ldi	r25, 0x7A	; 122
    26b8:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    26bc:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    26c8:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	80 93 cc 39 	sts	0x39CC, r24	; 0x8039cc <reactStr+0x84>
    26d4:	90 93 cd 39 	sts	0x39CD, r25	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26d8:	20 eb       	ldi	r18, 0xB0	; 176
    26da:	38 e7       	ldi	r19, 0x78	; 120
    26dc:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x6>
    26e0:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    26e4:	22 e1       	ldi	r18, 0x12	; 18
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	20 93 8e 39 	sts	0x398E, r18	; 0x80398e <reactStr+0x46>
    26ec:	30 93 8f 39 	sts	0x398F, r19	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    26f0:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    26f4:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    26f8:	80 91 29 39 	lds	r24, 0x3929	; 0x803929 <actObj1.3989+0x20>
    26fc:	90 91 2a 39 	lds	r25, 0x392A	; 0x80392a <actObj1.3989+0x21>
    2700:	40 97       	sbiw	r24, 0x10	; 16
    2702:	30 f0       	brcs	.+12     	; 0x2710 <ProcessInput+0xc00>
    2704:	8f e0       	ldi	r24, 0x0F	; 15
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <actObj1.3989+0x20>
    270c:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    2710:	27 e3       	ldi	r18, 0x37	; 55
    2712:	39 e3       	ldi	r19, 0x39	; 57
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	60 91 29 39 	lds	r22, 0x3929	; 0x803929 <actObj1.3989+0x20>
    271a:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <actObj1.3989+0x12>
    271e:	90 91 1c 39 	lds	r25, 0x391C	; 0x80391c <actObj1.3989+0x13>
    2722:	0e 94 b9 07 	call	0xf72	; 0xf72 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    2726:	67 e3       	ldi	r22, 0x37	; 55
    2728:	79 e3       	ldi	r23, 0x39	; 57
    272a:	80 91 29 39 	lds	r24, 0x3929	; 0x803929 <actObj1.3989+0x20>
    272e:	0e 94 ac 07 	call	0xf58	; 0xf58 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    2732:	e0 91 29 39 	lds	r30, 0x3929	; 0x803929 <actObj1.3989+0x20>
    2736:	f0 91 2a 39 	lds	r31, 0x392A	; 0x80392a <actObj1.3989+0x21>
    273a:	e9 5c       	subi	r30, 0xC9	; 201
    273c:	f6 4c       	sbci	r31, 0xC6	; 198
    273e:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    2740:	54 e0       	ldi	r21, 0x04	; 4
    2742:	75 2e       	mov	r7, r21
    2744:	3b c1       	rjmp	.+630    	; 0x29bc <ProcessInput+0xeac>
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    2746:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3989+0x7>
    274a:	0e 94 97 06 	call	0xd2e	; 0xd2e <CheckState>
    274e:	88 23       	and	r24, r24
    2750:	c9 f0       	breq	.+50     	; 0x2784 <ProcessInput+0xc74>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2752:	80 91 2f 39 	lds	r24, 0x392F	; 0x80392f <actObj1.3989+0x26>
    2756:	90 91 30 39 	lds	r25, 0x3930	; 0x803930 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    275a:	20 91 21 39 	lds	r18, 0x3921	; 0x803921 <actObj1.3989+0x18>
    275e:	30 91 22 39 	lds	r19, 0x3922	; 0x803922 <actObj1.3989+0x19>
    2762:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    2766:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    276a:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    276e:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2772:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    2776:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    277a:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <actObj1.3989+0xa>
    277e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <UpdateState>
    2782:	7e ca       	rjmp	.-2820   	; 0x1c80 <ProcessInput+0x170>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    2784:	80 91 2d 39 	lds	r24, 0x392D	; 0x80392d <actObj1.3989+0x24>
    2788:	90 91 2e 39 	lds	r25, 0x392E	; 0x80392e <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    278c:	20 91 1f 39 	lds	r18, 0x391F	; 0x80391f <actObj1.3989+0x16>
    2790:	30 91 20 39 	lds	r19, 0x3920	; 0x803920 <actObj1.3989+0x17>
    2794:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    2798:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    279c:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    27a0:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    27a4:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    27a8:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    27ac:	69 ca       	rjmp	.-2862   	; 0x1c80 <ProcessInput+0x170>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    27ae:	f8 01       	movw	r30, r16
    27b0:	80 81       	ld	r24, Z
    27b2:	84 37       	cpi	r24, 0x74	; 116
    27b4:	11 f0       	breq	.+4      	; 0x27ba <ProcessInput+0xcaa>
    27b6:	87 36       	cpi	r24, 0x67	; 103
    27b8:	19 f4       	brne	.+6      	; 0x27c0 <ProcessInput+0xcb0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27ba:	8c e3       	ldi	r24, 0x3C	; 60
    27bc:	99 e7       	ldi	r25, 0x79	; 121
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <ProcessInput+0xcb4>
    27c0:	80 e5       	ldi	r24, 0x50	; 80
    27c2:	99 e7       	ldi	r25, 0x79	; 121
    27c4:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    27c8:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    27cc:	84 e1       	ldi	r24, 0x14	; 20
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	4d ca       	rjmp	.-2918   	; 0x1c6c <ProcessInput+0x15c>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    27d2:	81 36       	cpi	r24, 0x61	; 97
    27d4:	09 f0       	breq	.+2      	; 0x27d8 <ProcessInput+0xcc8>
    27d6:	f0 cb       	rjmp	.-2080   	; 0x1fb8 <ProcessInput+0x4a8>
            
            //Priest offerings
            if (specialPassed >= 2) {
    27d8:	80 91 36 39 	lds	r24, 0x3936	; 0x803936 <specialPassed>
    27dc:	82 30       	cpi	r24, 0x02	; 2
    27de:	08 f4       	brcc	.+2      	; 0x27e2 <ProcessInput+0xcd2>
    27e0:	ab c0       	rjmp	.+342    	; 0x2938 <ProcessInput+0xe28>
                if (data[1] > 0) {
    27e2:	d8 01       	movw	r26, r16
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	2c 91       	ld	r18, X
    27e8:	22 23       	and	r18, r18
    27ea:	09 f4       	brne	.+2      	; 0x27ee <ProcessInput+0xcde>
    27ec:	9c c0       	rjmp	.+312    	; 0x2926 <ProcessInput+0xe16>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    27ee:	fe 01       	movw	r30, r28
    27f0:	31 96       	adiw	r30, 0x01	; 1
    27f2:	7f 01       	movw	r14, r30
    27f4:	8a e0       	ldi	r24, 0x0A	; 10
    27f6:	df 01       	movw	r26, r30
    27f8:	1d 92       	st	X+, r1
    27fa:	8a 95       	dec	r24
    27fc:	e9 f7       	brne	.-6      	; 0x27f8 <ProcessInput+0xce8>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0';
    27fe:	20 53       	subi	r18, 0x30	; 48
    2800:	f8 01       	movw	r30, r16
    2802:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='0';
    2804:	32 81       	ldd	r19, Z+2	; 0x02
    2806:	30 53       	subi	r19, 0x30	; 48
    2808:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    280a:	83 81       	ldd	r24, Z+3	; 0x03
    280c:	81 36       	cpi	r24, 0x61	; 97
    280e:	11 f4       	brne	.+4      	; 0x2814 <ProcessInput+0xd04>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	08 c0       	rjmp	.+16     	; 0x2824 <ProcessInput+0xd14>
                    else if (data[3] == 'e') data[3] = 0;
    2814:	85 36       	cpi	r24, 0x65	; 101
    2816:	11 f4       	brne	.+4      	; 0x281c <ProcessInput+0xd0c>
    2818:	13 82       	std	Z+3, r1	; 0x03
    281a:	08 c0       	rjmp	.+16     	; 0x282c <ProcessInput+0xd1c>
                    else if (data[3] == 'f') data[3] = 3;
    281c:	86 36       	cpi	r24, 0x66	; 102
    281e:	21 f4       	brne	.+8      	; 0x2828 <ProcessInput+0xd18>
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	f8 01       	movw	r30, r16
    2824:	83 83       	std	Z+3, r24	; 0x03
    2826:	02 c0       	rjmp	.+4      	; 0x282c <ProcessInput+0xd1c>
                    else data[3] = 2;
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    282c:	21 fd       	sbrc	r18, 1
    282e:	04 c0       	rjmp	.+8      	; 0x2838 <ProcessInput+0xd28>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	dc 01       	movw	r26, r24
    2836:	04 c0       	rjmp	.+8      	; 0x2840 <ProcessInput+0xd30>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e1       	ldi	r26, 0x10	; 16
    283e:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    2840:	20 ff       	sbrs	r18, 0
    2842:	03 c0       	rjmp	.+6      	; 0x284a <ProcessInput+0xd3a>
    2844:	9f 5f       	subi	r25, 0xFF	; 255
    2846:	af 4f       	sbci	r26, 0xFF	; 255
    2848:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    284a:	f8 01       	movw	r30, r16
    284c:	23 81       	ldd	r18, Z+3	; 0x03
    284e:	21 fd       	sbrc	r18, 1
    2850:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    2852:	20 ff       	sbrs	r18, 0
    2854:	03 c0       	rjmp	.+6      	; 0x285c <ProcessInput+0xd4c>
    2856:	40 96       	adiw	r24, 0x10	; 16
    2858:	a1 1d       	adc	r26, r1
    285a:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    285c:	31 ff       	sbrs	r19, 1
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <ProcessInput+0xd56>
    2860:	90 5f       	subi	r25, 0xF0	; 240
    2862:	af 4f       	sbci	r26, 0xFF	; 255
    2864:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    2866:	30 ff       	sbrs	r19, 0
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <ProcessInput+0xd60>
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	a1 1d       	adc	r26, r1
    286e:	b1 1d       	adc	r27, r1
                    answer <<= (3 - whoami);            
    2870:	40 91 95 38 	lds	r20, 0x3895	; 0x803895 <whoami>
    2874:	23 e0       	ldi	r18, 0x03	; 3
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	24 1b       	sub	r18, r20
    287a:	31 09       	sbc	r19, r1
    287c:	bc 01       	movw	r22, r24
    287e:	cd 01       	movw	r24, r26
    2880:	04 c0       	rjmp	.+8      	; 0x288a <ProcessInput+0xd7a>
    2882:	66 0f       	add	r22, r22
    2884:	77 1f       	adc	r23, r23
    2886:	88 1f       	adc	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	2a 95       	dec	r18
    288c:	d2 f7       	brpl	.-12     	; 0x2882 <ProcessInput+0xd72>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    288e:	26 e0       	ldi	r18, 0x06	; 6
    2890:	35 e7       	ldi	r19, 0x75	; 117
    2892:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    2896:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    289a:	20 e2       	ldi	r18, 0x20	; 32
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	20 93 8a 39 	sts	0x398A, r18	; 0x80398a <reactStr+0x42>
    28a2:	30 93 8b 39 	sts	0x398B, r19	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    28a6:	21 e0       	ldi	r18, 0x01	; 1
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	20 93 ca 39 	sts	0x39CA, r18	; 0x8039ca <reactStr+0x82>
    28ae:	30 93 cb 39 	sts	0x39CB, r19	; 0x8039cb <reactStr+0x83>
                    answer <<= (3 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    28b2:	39 e0       	ldi	r19, 0x09	; 9
                        digit[n] = answer % 10;
    28b4:	b3 2e       	mov	r11, r19
    28b6:	4a e0       	ldi	r20, 0x0A	; 10
    28b8:	44 2e       	mov	r4, r20
    28ba:	51 2c       	mov	r5, r1
    28bc:	61 2c       	mov	r6, r1
    28be:	71 2c       	mov	r7, r1
    28c0:	67 01       	movw	r12, r14
    28c2:	cb 0c       	add	r12, r11
    28c4:	d1 1c       	adc	r13, r1
    28c6:	a3 01       	movw	r20, r6
    28c8:	92 01       	movw	r18, r4
    28ca:	0f d2       	rcall	.+1054   	; 0x2cea <__udivmodsi4>
    28cc:	d6 01       	movw	r26, r12
    28ce:	6c 93       	st	X, r22
                        answer /= 10;
    28d0:	b9 01       	movw	r22, r18
    28d2:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    28d4:	61 15       	cp	r22, r1
    28d6:	71 05       	cpc	r23, r1
    28d8:	81 05       	cpc	r24, r1
    28da:	91 05       	cpc	r25, r1
    28dc:	39 f4       	brne	.+14     	; 0x28ec <ProcessInput+0xddc>
    28de:	e8 e4       	ldi	r30, 0x48	; 72
    28e0:	f9 e3       	ldi	r31, 0x39	; 57
    28e2:	22 e0       	ldi	r18, 0x02	; 2
    28e4:	72 2e       	mov	r7, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    28e6:	21 e0       	ldi	r18, 0x01	; 1
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <ProcessInput+0xde0>
                    answer <<= (3 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    28ec:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    28ee:	e8 cf       	rjmp	.-48     	; 0x28c0 <ProcessInput+0xdb0>
    28f0:	32 96       	adiw	r30, 0x02	; 2
                    for (; n<10; ++n) {
    28f2:	b9 e0       	ldi	r27, 0x09	; 9
    28f4:	bb 15       	cp	r27, r11
    28f6:	08 f4       	brcc	.+2      	; 0x28fa <ProcessInput+0xdea>
    28f8:	5f c0       	rjmp	.+190    	; 0x29b8 <ProcessInput+0xea8>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    28fa:	73 94       	inc	r7
    28fc:	d7 01       	movw	r26, r14
    28fe:	ab 0d       	add	r26, r11
    2900:	b1 1d       	adc	r27, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2902:	8c 91       	ld	r24, X
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	8d 52       	subi	r24, 0x2D	; 45
    2908:	9b 48       	sbci	r25, 0x8B	; 139
    290a:	82 83       	std	Z+2, r24	; 0x02
    290c:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    290e:	df 01       	movw	r26, r30
    2910:	ae 5b       	subi	r26, 0xBE	; 190
    2912:	bf 4f       	sbci	r27, 0xFF	; 255
    2914:	2d 93       	st	X+, r18
    2916:	3c 93       	st	X, r19
    2918:	11 97       	sbiw	r26, 0x01	; 1
    reactStr[2][number]=type;
    291a:	a0 5c       	subi	r26, 0xC0	; 192
    291c:	bf 4f       	sbci	r27, 0xFF	; 255
    291e:	2d 93       	st	X+, r18
    2920:	3c 93       	st	X, r19
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    2922:	b3 94       	inc	r11
    2924:	e5 cf       	rjmp	.-54     	; 0x28f0 <ProcessInput+0xde0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2926:	86 e2       	ldi	r24, 0x26	; 38
    2928:	95 e7       	ldi	r25, 0x75	; 117
    292a:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    292e:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2932:	8d e3       	ldi	r24, 0x3D	; 61
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	34 c0       	rjmp	.+104    	; 0x29a0 <ProcessInput+0xe90>
    2938:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	e6 5f       	subi	r30, 0xF6	; 246
    2944:	f5 4c       	sbci	r31, 0xC5	; 197
    2946:	69 e0       	ldi	r22, 0x09	; 9
    2948:	79 e3       	ldi	r23, 0x39	; 57
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	e9 f4       	brne	.+58     	; 0x2988 <ProcessInput+0xe78>
                PopulateObject(route[currDepth+1], &actObj1);
    294e:	80 81       	ld	r24, Z
    2950:	91 81       	ldd	r25, Z+1	; 0x01
    2952:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2956:	80 91 2f 39 	lds	r24, 0x392F	; 0x80392f <actObj1.3989+0x26>
    295a:	90 91 30 39 	lds	r25, 0x3930	; 0x803930 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    295e:	20 91 21 39 	lds	r18, 0x3921	; 0x803921 <actObj1.3989+0x18>
    2962:	30 91 22 39 	lds	r19, 0x3922	; 0x803922 <actObj1.3989+0x19>
    2966:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    296a:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    296e:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2972:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2976:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    297a:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                UpdateState(actObj1.byteField[ACTION_STATE]);
    297e:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <actObj1.3989+0xa>
    2982:	0e 94 8f 06 	call	0xd1e	; 0xd1e <UpdateState>
    2986:	16 c0       	rjmp	.+44     	; 0x29b4 <ProcessInput+0xea4>
            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    2988:	80 81       	ld	r24, Z
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2990:	8e e9       	ldi	r24, 0x9E	; 158
    2992:	98 e7       	ldi	r25, 0x78	; 120
    2994:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2998:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    299c:	82 e1       	ldi	r24, 0x12	; 18
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    29a4:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    29b0:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                UpdateState(actObj1.byteField[ACTION_STATE]);
            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    29b8:	10 92 37 39 	sts	0x3937, r1	; 0x803937 <specialInput>
        } else {
               
        }
            
        //Input handled
        data[0] = 0;
    29bc:	f8 01       	movw	r30, r16
    29be:	10 82       	st	Z, r1
        serRxDone = 0;
    29c0:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
        RXCNT = 0;
    29c4:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29c6:	8b e5       	ldi	r24, 0x5B	; 91
    29c8:	9a e7       	ldi	r25, 0x7A	; 122
    29ca:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    29ce:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    29da:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    29e6:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
        //Input handled
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    29ea:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <specialInput>
    29ee:	88 23       	and	r24, r24
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <ProcessInput+0xee8>
    29f2:	70 92 47 39 	sts	0x3947, r7	; 0x803947 <responseList>
    29f6:	a4 c0       	rjmp	.+328    	; 0x2b40 <ProcessInput+0x1030>
    29f8:	87 2d       	mov	r24, r7
    29fa:	16 c0       	rjmp	.+44     	; 0x2a28 <ProcessInput+0xf18>

    } else {
        data[0] = 0;
    29fc:	1c 92       	st	X, r1
        serRxDone = 0;
    29fe:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
        RXCNT = 0;
    2a02:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a04:	8b e5       	ldi	r24, 0x5B	; 91
    2a06:	9a e7       	ldi	r25, 0x7A	; 122
    2a08:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    2a0c:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    2a10:	82 e0       	ldi	r24, 0x02	; 2
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    2a18:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    2a24:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
    } else {
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    2a28:	0e 94 47 08 	call	0x108e	; 0x108e <SetStandardResponse>
    2a2c:	80 93 47 39 	sts	0x3947, r24	; 0x803947 <responseList>
    }
    
    return 0;
    2a30:	87 c0       	rjmp	.+270    	; 0x2b40 <ProcessInput+0x1030>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a32:	84 ed       	ldi	r24, 0xD4	; 212
    2a34:	99 e7       	ldi	r25, 0x79	; 121
    2a36:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2a3a:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2a3e:	8a e1       	ldi	r24, 0x1A	; 26
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	14 c9       	rjmp	.-3544   	; 0x1c6c <ProcessInput+0x15c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2a44:	b2 e0       	ldi	r27, 0x02	; 2
    2a46:	fb 12       	cpse	r15, r27
    2a48:	92 c8       	rjmp	.-3804   	; 0x1b6e <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    2a4a:	d8 01       	movw	r26, r16
    2a4c:	11 96       	adiw	r26, 0x01	; 1
    2a4e:	6c 91       	ld	r22, X
    2a50:	0e 94 3a 09 	call	0x1274	; 0x1274 <CheckLetter>
    2a54:	88 23       	and	r24, r24
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <ProcessInput+0xf4a>
    2a58:	5b c0       	rjmp	.+182    	; 0x2b10 <ProcessInput+0x1000>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	9c 01       	movw	r18, r24
    2a64:	2a 56       	subi	r18, 0x6A	; 106
    2a66:	37 4c       	sbci	r19, 0xC7	; 199
    2a68:	79 01       	movw	r14, r18
    2a6a:	69 e0       	ldi	r22, 0x09	; 9
    2a6c:	79 e3       	ldi	r23, 0x39	; 57
    2a6e:	d9 01       	movw	r26, r18
    2a70:	8d 91       	ld	r24, X+
    2a72:	9c 91       	ld	r25, X
    2a74:	0e 94 c3 08 	call	0x1186	; 0x1186 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a78:	84 ed       	ldi	r24, 0xD4	; 212
    2a7a:	97 e7       	ldi	r25, 0x77	; 119
    2a7c:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2a80:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2a84:	80 e1       	ldi	r24, 0x10	; 16
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2a8c:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    2a98:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2a9c:	20 91 23 39 	lds	r18, 0x3923	; 0x803923 <actObj1.3989+0x1a>
    2aa0:	30 91 24 39 	lds	r19, 0x3924	; 0x803924 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aa4:	40 91 15 39 	lds	r20, 0x3915	; 0x803915 <actObj1.3989+0xc>
    2aa8:	50 91 16 39 	lds	r21, 0x3916	; 0x803916 <actObj1.3989+0xd>
    2aac:	40 93 4c 39 	sts	0x394C, r20	; 0x80394c <reactStr+0x4>
    2ab0:	50 93 4d 39 	sts	0x394D, r21	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    2ab4:	20 93 8c 39 	sts	0x398C, r18	; 0x80398c <reactStr+0x44>
    2ab8:	30 93 8d 39 	sts	0x398D, r19	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    2abc:	10 92 cc 39 	sts	0x39CC, r1	; 0x8039cc <reactStr+0x84>
    2ac0:	10 92 cd 39 	sts	0x39CD, r1	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ac4:	2b e5       	ldi	r18, 0x5B	; 91
    2ac6:	3a e7       	ldi	r19, 0x7A	; 122
    2ac8:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x6>
    2acc:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    2ad0:	22 e0       	ldi	r18, 0x02	; 2
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	20 93 8e 39 	sts	0x398E, r18	; 0x80398e <reactStr+0x46>
    2ad8:	30 93 8f 39 	sts	0x398F, r19	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    2adc:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    2ae0:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ae4:	27 e9       	ldi	r18, 0x97	; 151
    2ae6:	37 e7       	ldi	r19, 0x77	; 119
    2ae8:	20 93 50 39 	sts	0x3950, r18	; 0x803950 <reactStr+0x8>
    2aec:	30 93 51 39 	sts	0x3951, r19	; 0x803951 <reactStr+0x9>
    reactStr[1][number]=length;
    2af0:	2d e3       	ldi	r18, 0x3D	; 61
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	20 93 90 39 	sts	0x3990, r18	; 0x803990 <reactStr+0x48>
    2af8:	30 93 91 39 	sts	0x3991, r19	; 0x803991 <reactStr+0x49>
    reactStr[2][number]=type;
    2afc:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x88>
    2b00:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    2b04:	f7 01       	movw	r30, r14
    2b06:	10 82       	st	Z, r1
    2b08:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    2b0a:	f5 e0       	ldi	r31, 0x05	; 5
    2b0c:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    2b0e:	56 cf       	rjmp	.-340    	; 0x29bc <ProcessInput+0xeac>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2b10:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    2b14:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	49 f0       	breq	.+18     	; 0x2b2e <ProcessInput+0x101e>
                        if (CheckLetter(inventory[x], data[1])) {
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	61 81       	ldd	r22, Z+1	; 0x01
    2b20:	0e 94 3a 09 	call	0x1274	; 0x1274 <CheckLetter>
    2b24:	88 23       	and	r24, r24
    2b26:	19 f0       	breq	.+6      	; 0x2b2e <ProcessInput+0x101e>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	98 cf       	rjmp	.-208    	; 0x2a5e <ProcessInput+0xf4e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b2e:	84 e6       	ldi	r24, 0x64	; 100
    2b30:	99 e7       	ldi	r25, 0x79	; 121
    2b32:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2b36:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2b3a:	81 e2       	ldi	r24, 0x21	; 33
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	96 c8       	rjmp	.-3796   	; 0x1c6c <ProcessInput+0x15c>
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }
    
    return 0;
}
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	2a 96       	adiw	r28, 0x0a	; 10
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	df 90       	pop	r13
    2b56:	cf 90       	pop	r12
    2b58:	bf 90       	pop	r11
    2b5a:	af 90       	pop	r10
    2b5c:	9f 90       	pop	r9
    2b5e:	8f 90       	pop	r8
    2b60:	7f 90       	pop	r7
    2b62:	6f 90       	pop	r6
    2b64:	5f 90       	pop	r5
    2b66:	4f 90       	pop	r4
    2b68:	08 95       	ret

00002b6a <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    2b6a:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    2b6c:	0e 94 19 0a 	call	0x1432	; 0x1432 <CheckSend>
    2b70:	88 23       	and	r24, r24
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <TextAdventure+0xe>
    2b74:	c1 e0       	ldi	r28, 0x01	; 1
    2b76:	13 c0       	rjmp	.+38     	; 0x2b9e <TextAdventure+0x34>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    2b78:	0e 94 6d 0a 	call	0x14da	; 0x14da <CheckResponse>
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	fa cf       	rjmp	.-12     	; 0x2b74 <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    2b80:	8d e9       	ldi	r24, 0x9D	; 157
    2b82:	98 e3       	ldi	r25, 0x38	; 56
    2b84:	0e 94 b4 0a 	call	0x1568	; 0x1568 <CheckInput>
    2b88:	c8 2f       	mov	r28, r24
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	07 c0       	rjmp	.+14     	; 0x2b9c <TextAdventure+0x32>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    2b8e:	8d e9       	ldi	r24, 0x9D	; 157
    2b90:	98 e3       	ldi	r25, 0x38	; 56
    2b92:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ProcessInput>
    SaveGameState();
    2b96:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SaveGameState>

    return 0;
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <TextAdventure+0x34>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    2b9c:	c2 e0       	ldi	r28, 0x02	; 2
    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    SaveGameState();

    return 0;
    2b9e:	8c 2f       	mov	r24, r28
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    2ba4:	0e 94 9f 01 	call	0x33e	; 0x33e <Setup>

    SerSpeed(255);
    2ba8:	8f ef       	ldi	r24, 0xFF	; 255
    2baa:	0e 94 0b 05 	call	0xa16	; 0xa16 <SerSpeed>
    2bae:	a4 e5       	ldi	r26, 0x54	; 84
    2bb0:	bd ea       	ldi	r27, 0xAD	; 173
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	ed 91       	ld	r30, X+
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	e1 5f       	subi	r30, 0xF1	; 241
    2bba:	f4 4c       	sbci	r31, 0xC4	; 196
    2bbc:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    2bbe:	15 96       	adiw	r26, 0x05	; 5
    2bc0:	ec 91       	ld	r30, X
    2bc2:	15 97       	sbiw	r26, 0x05	; 5
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	e1 5f       	subi	r30, 0xF1	; 241
    2bc8:	f4 4c       	sbci	r31, 0xC4	; 196
    2bca:	80 83       	st	Z, r24

    SerSpeed(255);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    2bcc:	2d ea       	ldi	r18, 0xAD	; 173
    2bce:	aa 35       	cpi	r26, 0x5A	; 90
    2bd0:	b2 07       	cpc	r27, r18
    2bd2:	81 f7       	brne	.-32     	; 0x2bb4 <main+0x10>
    2bd4:	e6 e4       	ldi	r30, 0x46	; 70
    2bd6:	fd ea       	ldi	r31, 0xAD	; 173
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    2bd8:	91 e0       	ldi	r25, 0x01	; 1
    2bda:	ef 01       	movw	r28, r30
    2bdc:	a5 81       	ldd	r26, Z+5	; 0x05
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	a1 5f       	subi	r26, 0xF1	; 241
    2be2:	b4 4c       	sbci	r27, 0xC4	; 196
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	9c 93       	st	X, r25
    2be8:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    2bea:	a8 81       	ld	r26, Y
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	a1 5f       	subi	r26, 0xF1	; 241
    2bf0:	b4 4c       	sbci	r27, 0xC4	; 196
    2bf2:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    2bf4:	2d ea       	ldi	r18, 0xAD	; 173
    2bf6:	eb 34       	cpi	r30, 0x4B	; 75
    2bf8:	f2 07       	cpc	r31, r18
    2bfa:	79 f7       	brne	.-34     	; 0x2bda <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    2bfc:	e0 91 52 ad 	lds	r30, 0xAD52	; 0x80ad52 <__bss_end+0x71f4>
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	e1 5f       	subi	r30, 0xF1	; 241
    2c04:	f4 4c       	sbci	r31, 0xC4	; 196
    2c06:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    2c08:	e0 91 53 ad 	lds	r30, 0xAD53	; 0x80ad53 <__bss_end+0x71f5>
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	e1 5f       	subi	r30, 0xF1	; 241
    2c10:	f4 4c       	sbci	r31, 0xC4	; 196
    2c12:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    2c14:	e0 91 50 ad 	lds	r30, 0xAD50	; 0x80ad50 <__bss_end+0x71f2>
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	e1 5f       	subi	r30, 0xF1	; 241
    2c1c:	f4 4c       	sbci	r31, 0xC4	; 196
    2c1e:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    2c20:	e0 91 51 ad 	lds	r30, 0xAD51	; 0x80ad51 <__bss_end+0x71f3>
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	e1 5f       	subi	r30, 0xF1	; 241
    2c28:	f4 4c       	sbci	r31, 0xC4	; 196
    2c2a:	80 83       	st	Z, r24
    iLED[GEM[R]] = 1;
    2c2c:	e0 91 44 ad 	lds	r30, 0xAD44	; 0x80ad44 <__bss_end+0x71e6>
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	e1 5f       	subi	r30, 0xF1	; 241
    2c34:	f4 4c       	sbci	r31, 0xC4	; 196
    2c36:	80 83       	st	Z, r24
    iLED[GEM[G]] = 1;
    2c38:	e0 91 45 ad 	lds	r30, 0xAD45	; 0x80ad45 <__bss_end+0x71e7>
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	e1 5f       	subi	r30, 0xF1	; 241
    2c40:	f4 4c       	sbci	r31, 0xC4	; 196
    2c42:	80 83       	st	Z, r24
    iLED[RAT] = 1;
    2c44:	e0 91 43 ad 	lds	r30, 0xAD43	; 0x80ad43 <__bss_end+0x71e5>
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	e1 5f       	subi	r30, 0xF1	; 241
    2c4c:	f4 4c       	sbci	r31, 0xC4	; 196
    2c4e:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    2c50:	e0 91 42 ad 	lds	r30, 0xAD42	; 0x80ad42 <__bss_end+0x71e4>
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	e1 5f       	subi	r30, 0xF1	; 241
    2c58:	f4 4c       	sbci	r31, 0xC4	; 196
    2c5a:	80 83       	st	Z, r24

    while (1)
    {
        GenerateAudio();
    2c5c:	0e 94 de 06 	call	0xdbc	; 0xdbc <GenerateAudio>

        if (buttonMark){
    2c60:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
    2c64:	88 23       	and	r24, r24
    2c66:	d1 f3       	breq	.-12     	; 0x2c5c <main+0xb8>
            buttonState = CheckButtons(buttonState);
    2c68:	80 91 8d 3a 	lds	r24, 0x3A8D	; 0x803a8d <buttonState>
    2c6c:	0e 94 1c 05 	call	0xa38	; 0xa38 <CheckButtons>
    2c70:	80 93 8d 3a 	sts	0x3A8D, r24	; 0x803a8d <buttonState>
            buttonMark = 0;
    2c74:	10 92 9a 38 	sts	0x389A, r1	; 0x80389a <buttonMark>
            
            TextAdventure();
    2c78:	78 df       	rcall	.-272    	; 0x2b6a <TextAdventure>
          
            //Other games & user interaction checks
            //MagnetMaze();
            BastetDictates();
    2c7a:	0e 94 54 07 	call	0xea8	; 0xea8 <BastetDictates>
            //LanyardCode();
            //MakeFriends();
             
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    2c7e:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <adcPhot>
    2c82:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <adcPhot+0x1>
    2c86:	0a 97       	sbiw	r24, 0x0a	; 10
    2c88:	20 f4       	brcc	.+8      	; 0x2c92 <main+0xee>
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	84 e7       	ldi	r24, 0x74	; 116
    2c8e:	0e 94 75 06 	call	0xcea	; 0xcea <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    2c92:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <adcPhot>
    2c96:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <adcPhot+0x1>
    2c9a:	85 36       	cpi	r24, 0x65	; 101
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	f0 f2       	brcs	.-68     	; 0x2c5c <main+0xb8>
    2ca0:	60 e0       	ldi	r22, 0x00	; 0
    2ca2:	84 e7       	ldi	r24, 0x74	; 116
    2ca4:	0e 94 75 06 	call	0xcea	; 0xcea <WriteStatusBit>
    2ca8:	d9 cf       	rjmp	.-78     	; 0x2c5c <main+0xb8>

00002caa <__udivmodqi4>:
    2caa:	99 1b       	sub	r25, r25
    2cac:	79 e0       	ldi	r23, 0x09	; 9
    2cae:	04 c0       	rjmp	.+8      	; 0x2cb8 <__udivmodqi4_ep>

00002cb0 <__udivmodqi4_loop>:
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	96 17       	cp	r25, r22
    2cb4:	08 f0       	brcs	.+2      	; 0x2cb8 <__udivmodqi4_ep>
    2cb6:	96 1b       	sub	r25, r22

00002cb8 <__udivmodqi4_ep>:
    2cb8:	88 1f       	adc	r24, r24
    2cba:	7a 95       	dec	r23
    2cbc:	c9 f7       	brne	.-14     	; 0x2cb0 <__udivmodqi4_loop>
    2cbe:	80 95       	com	r24
    2cc0:	08 95       	ret

00002cc2 <__udivmodhi4>:
    2cc2:	aa 1b       	sub	r26, r26
    2cc4:	bb 1b       	sub	r27, r27
    2cc6:	51 e1       	ldi	r21, 0x11	; 17
    2cc8:	07 c0       	rjmp	.+14     	; 0x2cd8 <__udivmodhi4_ep>

00002cca <__udivmodhi4_loop>:
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	a6 17       	cp	r26, r22
    2cd0:	b7 07       	cpc	r27, r23
    2cd2:	10 f0       	brcs	.+4      	; 0x2cd8 <__udivmodhi4_ep>
    2cd4:	a6 1b       	sub	r26, r22
    2cd6:	b7 0b       	sbc	r27, r23

00002cd8 <__udivmodhi4_ep>:
    2cd8:	88 1f       	adc	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	5a 95       	dec	r21
    2cde:	a9 f7       	brne	.-22     	; 0x2cca <__udivmodhi4_loop>
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	08 95       	ret

00002cea <__udivmodsi4>:
    2cea:	a1 e2       	ldi	r26, 0x21	; 33
    2cec:	1a 2e       	mov	r1, r26
    2cee:	aa 1b       	sub	r26, r26
    2cf0:	bb 1b       	sub	r27, r27
    2cf2:	fd 01       	movw	r30, r26
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <__udivmodsi4_ep>

00002cf6 <__udivmodsi4_loop>:
    2cf6:	aa 1f       	adc	r26, r26
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	ee 1f       	adc	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	a2 17       	cp	r26, r18
    2d00:	b3 07       	cpc	r27, r19
    2d02:	e4 07       	cpc	r30, r20
    2d04:	f5 07       	cpc	r31, r21
    2d06:	20 f0       	brcs	.+8      	; 0x2d10 <__udivmodsi4_ep>
    2d08:	a2 1b       	sub	r26, r18
    2d0a:	b3 0b       	sbc	r27, r19
    2d0c:	e4 0b       	sbc	r30, r20
    2d0e:	f5 0b       	sbc	r31, r21

00002d10 <__udivmodsi4_ep>:
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	88 1f       	adc	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	1a 94       	dec	r1
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <__udivmodsi4_loop>
    2d1c:	60 95       	com	r22
    2d1e:	70 95       	com	r23
    2d20:	80 95       	com	r24
    2d22:	90 95       	com	r25
    2d24:	9b 01       	movw	r18, r22
    2d26:	ac 01       	movw	r20, r24
    2d28:	bd 01       	movw	r22, r26
    2d2a:	cf 01       	movw	r24, r30
    2d2c:	08 95       	ret

00002d2e <_exit>:
    2d2e:	f8 94       	cli

00002d30 <__stop_program>:
    2d30:	ff cf       	rjmp	.-2      	; 0x2d30 <__stop_program>
