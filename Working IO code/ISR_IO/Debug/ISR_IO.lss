
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00803800  00003520  000035d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003446  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000da  0000b446  00003446  000034fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00803828  00803828  000035fc  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  0000366c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000628e  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002648  00000000  00000000  00009bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003394  00000000  00000000  0000c21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  0000f5b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018ce  00000000  00000000  0000fe40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004055  00000000  00000000  0001170e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000348  00000000  00000000  00015763  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c6       	rjmp	.+3386   	; 0xd54 <__vector_6>
      1a:	00 00       	nop
      1c:	e5 c6       	rjmp	.+3530   	; 0xde8 <__vector_7>
      1e:	00 00       	nop
      20:	d0 c4       	rjmp	.+2464   	; 0x9c2 <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	17 c5       	rjmp	.+2606   	; 0xa64 <__vector_13>
      36:	00 00       	nop
      38:	48 c5       	rjmp	.+2704   	; 0xaca <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c6       	rjmp	.+3084   	; 0xc5e <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c6       	rjmp	.+3178   	; 0xcc4 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c5       	rjmp	.+2818   	; 0xb70 <__vector_27>
      6e:	00 00       	nop
      70:	da c5       	rjmp	.+2996   	; 0xc26 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e0 e2       	ldi	r30, 0x20	; 32
      90:	f5 e3       	ldi	r31, 0x35	; 53
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 32       	cpi	r26, 0x28	; 40
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a8 e2       	ldi	r26, 0x28	; 40
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 30       	cpi	r26, 0x0A	; 10
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 4c 19 	call	0x3298	; 0x3298 <main>
      b2:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
  
    return 0;
}
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	08 95       	ret

000000bc <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      c2:	e6 e2       	ldi	r30, 0x26	; 38
      c4:	f4 e0       	ldi	r31, 0x04	; 4
      c6:	80 83       	st	Z, r24
      c8:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      cc:	a1 e2       	ldi	r26, 0x21	; 33
      ce:	b4 e0       	ldi	r27, 0x04	; 4
      d0:	92 e0       	ldi	r25, 0x02	; 2
      d2:	9c 93       	st	X, r25
      d4:	90 83       	st	Z, r25
      d6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      da:	e0 e1       	ldi	r30, 0x10	; 16
      dc:	f8 e0       	ldi	r31, 0x08	; 8
      de:	97 e0       	ldi	r25, 0x07	; 7
      e0:	96 83       	std	Z+6, r25	; 0x06
      e2:	98 e0       	ldi	r25, 0x08	; 8
      e4:	94 83       	std	Z+4, r25	; 0x04
      e6:	83 83       	std	Z+3, r24	; 0x03
      e8:	8c 93       	st	X, r24
      ea:	85 81       	ldd	r24, Z+5	; 0x05
      ec:	81 60       	ori	r24, 0x01	; 1
      ee:	85 83       	std	Z+5, r24	; 0x05
      f0:	85 81       	ldd	r24, Z+5	; 0x05
      f2:	84 6c       	ori	r24, 0xC4	; 196
      f4:	85 83       	std	Z+5, r24	; 0x05
      f6:	08 95       	ret

000000f8 <I2C_recover>:
      f8:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fc:	88 60       	ori	r24, 0x08	; 8
      fe:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     102:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     10c:	99 e0       	ldi	r25, 0x09	; 9
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     116:	30 e1       	ldi	r19, 0x10	; 16
     118:	3a 95       	dec	r19
     11a:	f1 f7       	brne	.-4      	; 0x118 <I2C_recover+0x20>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <I2C_recover+0x26>
     11e:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     122:	30 e1       	ldi	r19, 0x10	; 16
     124:	3a 95       	dec	r19
     126:	f1 f7       	brne	.-4      	; 0x124 <I2C_recover+0x2c>
     128:	00 c0       	rjmp	.+0      	; 0x12a <I2C_recover+0x32>
     12a:	91 50       	subi	r25, 0x01	; 1
     12c:	89 f7       	brne	.-30     	; 0x110 <I2C_recover+0x18>
     12e:	28 e0       	ldi	r18, 0x08	; 8
     130:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     134:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     142:	91 60       	ori	r25, 0x01	; 1
     144:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14c:	94 6c       	ori	r25, 0xC4	; 196
     14e:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     152:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     156:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     15a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     162:	81 60       	ori	r24, 0x01	; 1
     164:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16c:	84 6c       	ori	r24, 0xC4	; 196
     16e:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     172:	08 95       	ret

00000174 <I2C_start>:
     174:	28 2f       	mov	r18, r24
     176:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17a:	90 6c       	ori	r25, 0xC0	; 192
     17c:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     184:	89 2f       	mov	r24, r25
     186:	84 70       	andi	r24, 0x04	; 4
     188:	92 fd       	sbrc	r25, 2
     18a:	03 c0       	rjmp	.+6      	; 0x192 <I2C_start+0x1e>
     18c:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     190:	08 95       	ret
     192:	84 e0       	ldi	r24, 0x04	; 4
     194:	08 95       	ret

00000196 <I2C_wait_ACK>:
     196:	8c e0       	ldi	r24, 0x0C	; 12
     198:	80 93 38 3a 	sts	0x3A38, r24	; 0x803a38 <timeout_I2C>
     19c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a0:	87 fd       	sbrc	r24, 7
     1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <I2C_wait_ACK+0x22>
     1a4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a8:	86 fd       	sbrc	r24, 6
     1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <I2C_wait_ACK+0x22>
     1ac:	80 91 38 3a 	lds	r24, 0x3A38	; 0x803a38 <timeout_I2C>
     1b0:	81 11       	cpse	r24, r1
     1b2:	f4 cf       	rjmp	.-24     	; 0x19c <I2C_wait_ACK+0x6>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	08 95       	ret
     1b8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1bc:	80 6c       	ori	r24, 0xC0	; 192
     1be:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c6:	82 fd       	sbrc	r24, 2
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <I2C_wait_ACK+0x46>
     1ca:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ce:	83 fd       	sbrc	r24, 3
     1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <I2C_wait_ACK+0x4a>
     1d2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d6:	82 95       	swap	r24
     1d8:	81 70       	andi	r24, 0x01	; 1
     1da:	08 95       	ret
     1dc:	84 e0       	ldi	r24, 0x04	; 4
     1de:	08 95       	ret
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	08 95       	ret

000001e4 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e4:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e6:	8c e0       	ldi	r24, 0x0C	; 12
     1e8:	80 93 38 3a 	sts	0x3A38, r24	; 0x803a38 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1ec:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1f0:	89 2f       	mov	r24, r25
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	82 30       	cpi	r24, 0x02	; 2
     1f6:	11 f0       	breq	.+4      	; 0x1fc <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f8:	88 e0       	ldi	r24, 0x08	; 8
     1fa:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1fc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     200:	97 fd       	sbrc	r25, 7
     202:	06 c0       	rjmp	.+12     	; 0x210 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     204:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <timeout_I2C>
     208:	91 11       	cpse	r25, r1
     20a:	f8 cf       	rjmp	.-16     	; 0x1fc <I2C_read+0x18>
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     210:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     214:	90 6c       	ori	r25, 0xC0	; 192
     216:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     21a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21e:	92 fd       	sbrc	r25, 2
     220:	1e c0       	rjmp	.+60     	; 0x25e <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     222:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     226:	93 fd       	sbrc	r25, 3
     228:	1d c0       	rjmp	.+58     	; 0x264 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     22a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22e:	89 2f       	mov	r24, r25
     230:	80 71       	andi	r24, 0x10	; 16
     232:	94 fd       	sbrc	r25, 4
     234:	16 c0       	rjmp	.+44     	; 0x262 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     236:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     23a:	61 11       	cpse	r22, r1
     23c:	02 c0       	rjmp	.+4      	; 0x242 <I2C_read+0x5e>
     23e:	9b 7f       	andi	r25, 0xFB	; 251
     240:	01 c0       	rjmp	.+2      	; 0x244 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     242:	94 60       	ori	r25, 0x04	; 4
     244:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     248:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     24c:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24e:	61 11       	cpse	r22, r1
     250:	09 c0       	rjmp	.+18     	; 0x264 <I2C_read+0x80>
     252:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     256:	92 60       	ori	r25, 0x02	; 2
     258:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     25c:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     262:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     264:	08 95       	ret

00000266 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     266:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     268:	8c e0       	ldi	r24, 0x0C	; 12
     26a:	80 93 38 3a 	sts	0x3A38, r24	; 0x803a38 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     272:	93 70       	andi	r25, 0x03	; 3
     274:	92 30       	cpi	r25, 0x02	; 2
     276:	b1 f4       	brne	.+44     	; 0x2a4 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     278:	80 81       	ld	r24, Z
     27a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     282:	86 fd       	sbrc	r24, 6
     284:	06 c0       	rjmp	.+12     	; 0x292 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     286:	80 91 38 3a 	lds	r24, 0x3A38	; 0x803a38 <timeout_I2C>
     28a:	81 11       	cpse	r24, r1
     28c:	f8 cf       	rjmp	.-16     	; 0x27e <I2C_write+0x18>
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     292:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     296:	82 fd       	sbrc	r24, 2
     298:	07 c0       	rjmp	.+14     	; 0x2a8 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     29a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29e:	82 95       	swap	r24
     2a0:	81 70       	andi	r24, 0x01	; 1
     2a2:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a8:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2aa:	08 95       	ret

000002ac <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2ac:	e0 e1       	ldi	r30, 0x10	; 16
     2ae:	f8 e0       	ldi	r31, 0x08	; 8
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	83 60       	ori	r24, 0x03	; 3
     2b4:	84 83       	std	Z+4, r24	; 0x04
     2b6:	08 95       	ret

000002b8 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	6b 01       	movw	r12, r22
     2c8:	f4 2e       	mov	r15, r20
     2ca:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2cc:	18 2f       	mov	r17, r24
     2ce:	11 0f       	add	r17, r17
     2d0:	81 2f       	mov	r24, r17
     2d2:	50 df       	rcall	.-352    	; 0x174 <I2C_start>
	if (status != 0) goto error;
     2d4:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d6:	2b c0       	rjmp	.+86     	; 0x32e <I2C_read_bytes+0x76>
     2d8:	5e df       	rcall	.-324    	; 0x196 <I2C_wait_ACK>
	if (status == 1) {
     2da:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <I2C_read_bytes+0x2c>
     2de:	e6 df       	rcall	.-52     	; 0x2ac <I2C_stop>
		return 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	27 c0       	rjmp	.+78     	; 0x332 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e4:	81 11       	cpse	r24, r1
     2e6:	23 c0       	rjmp	.+70     	; 0x32e <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e8:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2ea:	49 f0       	breq	.+18     	; 0x2fe <I2C_read_bytes+0x46>
     2ec:	c6 01       	movw	r24, r12
     2ee:	bb df       	rcall	.-138    	; 0x266 <I2C_write>
	    if (status != 0) goto error;
     2f0:	81 11       	cpse	r24, r1
     2f2:	1d c0       	rjmp	.+58     	; 0x32e <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	c8 1a       	sub	r12, r24
     2f8:	d8 0a       	sbc	r13, r24
        --reg_len;
     2fa:	fa 94       	dec	r15
     2fc:	f5 cf       	rjmp	.-22     	; 0x2e8 <I2C_read_bytes+0x30>
     2fe:	01 34       	cpi	r16, 0x41	; 65
     300:	08 f0       	brcs	.+2      	; 0x304 <I2C_read_bytes+0x4c>
     302:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     304:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     306:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     30a:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     30c:	40 f0       	brcs	.+16     	; 0x31e <I2C_read_bytes+0x66>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	ce 01       	movw	r24, r28
     312:	68 df       	rcall	.-304    	; 0x1e4 <I2C_read>
		if (status != 0) goto error;
     314:	81 11       	cpse	r24, r1
     316:	0b c0       	rjmp	.+22     	; 0x32e <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     318:	21 96       	adiw	r28, 0x01	; 1
     31a:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     31c:	f6 cf       	rjmp	.-20     	; 0x30a <I2C_read_bytes+0x52>
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     322:	60 df       	rcall	.-320    	; 0x1e4 <I2C_read>
     324:	81 11       	cpse	r24, r1
	I2C_stop();
     326:	03 c0       	rjmp	.+6      	; 0x32e <I2C_read_bytes+0x76>
     328:	c1 df       	rcall	.-126    	; 0x2ac <I2C_stop>
	return 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	02 c0       	rjmp	.+4      	; 0x332 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32e:	e4 de       	rcall	.-568    	; 0xf8 <I2C_recover>
     330:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     332:	df 91       	pop	r29
}
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	df 90       	pop	r13
     33e:	cf 90       	pop	r12
     340:	08 95       	ret

00000342 <LanyardCode>:
     342:	cf 93       	push	r28
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
    if (CheckState(LANYARD_COMPLETED)) {
     344:	8b e7       	ldi	r24, 0x7B	; 123
     346:	38 d7       	rcall	.+3696   	; 0x11b8 <CheckState>
     348:	81 11       	cpse	r24, r1
     34a:	f0 c0       	rjmp	.+480    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     34c:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     350:	88 23       	and	r24, r24
     352:	19 f0       	breq	.+6      	; 0x35a <LanyardCode+0x18>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	09 f0       	breq	.+2      	; 0x35a <LanyardCode+0x18>
     358:	e9 c0       	rjmp	.+466    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        return 0;

    /* activate led for buttonstate */
    iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);
     35a:	c0 91 71 b4 	lds	r28, 0xB471	; 0x80b471 <__bss_end+0x7967>
     35e:	ec 2f       	mov	r30, r28
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	19 f0       	breq	.+6      	; 0x370 <LanyardCode+0x2e>
     36a:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     36e:	01 c0       	rjmp	.+2      	; 0x372 <LanyardCode+0x30>
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	e6 54       	subi	r30, 0x46	; 70
     374:	f5 4c       	sbci	r31, 0xC5	; 197
     376:	90 83       	st	Z, r25

    if ( (buttonState & 0xf0) == 0)
     378:	98 2f       	mov	r25, r24
     37a:	90 7f       	andi	r25, 0xF0	; 240
     37c:	09 f4       	brne	.+2      	; 0x380 <LanyardCode+0x3e>
     37e:	d6 c0       	rjmp	.+428    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     380:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     384:	98 2f       	mov	r25, r24
     386:	92 27       	eor	r25, r18
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	09 f4       	brne	.+2      	; 0x38e <LanyardCode+0x4c>
     38c:	cf c0       	rjmp	.+414    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        return 0;

    if (lastButtonState == 0xff){
     38e:	2f 3f       	cpi	r18, 0xFF	; 255
     390:	09 f0       	breq	.+2      	; 0x394 <LanyardCode+0x52>
     392:	c8 c0       	rjmp	.+400    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
        switch (buttonState & 0x0f) {
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	61 f0       	breq	.+24     	; 0x3b2 <LanyardCode+0x70>
     39a:	28 f4       	brcc	.+10     	; 0x3a6 <LanyardCode+0x64>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	69 f4       	brne	.+26     	; 0x3ba <LanyardCode+0x78>
            case 0b0001: {
                digit = 0;
     3a0:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <LanyardCode+0x7e>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     3a6:	84 30       	cpi	r24, 0x04	; 4
     3a8:	31 f0       	breq	.+12     	; 0x3b6 <LanyardCode+0x74>
     3aa:	88 30       	cpi	r24, 0x08	; 8
     3ac:	31 f4       	brne	.+12     	; 0x3ba <LanyardCode+0x78>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <LanyardCode+0x7a>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc <LanyardCode+0x7a>
                break;
            }

            case 0b0100: {
                digit = 3;
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <LanyardCode+0x7a>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     3c6:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <lanyardPos>
     3ca:	e8 2f       	mov	r30, r24
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ea 5a       	subi	r30, 0xAA	; 170
     3d0:	fb 44       	sbci	r31, 0x4B	; 75
     3d2:	20 81       	ld	r18, Z
     3d4:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     3d8:	e0 91 6e b4 	lds	r30, 0xB46E	; 0x80b46e <__bss_end+0x7964>
     3dc:	29 13       	cpse	r18, r25
     3de:	17 c0       	rjmp	.+46     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
            lanyardState &= TRUE;
     3e0:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     3e4:	91 70       	andi	r25, 0x01	; 1
     3e6:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e6 54       	subi	r30, 0x46	; 70
     3ee:	f5 4c       	sbci	r31, 0xC5	; 197
     3f0:	90 e8       	ldi	r25, 0x80	; 128
     3f2:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     3f4:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	e6 54       	subi	r30, 0x46	; 70
     3fc:	f5 4c       	sbci	r31, 0xC5	; 197
     3fe:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     400:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	e6 54       	subi	r30, 0x46	; 70
     408:	f5 4c       	sbci	r31, 0xC5	; 197
     40a:	10 82       	st	Z, r1
     40c:	13 c0       	rjmp	.+38     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        } else {
            lanyardState = FALSE;
     40e:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	e6 54       	subi	r30, 0x46	; 70
     416:	f5 4c       	sbci	r31, 0xC5	; 197
     418:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	58 f4       	brcc	.+22     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     41e:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     422:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardCnt      = 0;
     426:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
                lanyardState    = TRUE;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	7a c0       	rjmp	.+244    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
                return 0;
            }
        }
        lanyardPos++;
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <lanyardPos>
        lanyardCnt++;            
     43a:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <__data_end>
     43e:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     440:	94 30       	cpi	r25, 0x04	; 4
     442:	18 f4       	brcc	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     444:	90 93 28 38 	sts	0x3828, r25	; 0x803828 <__data_end>
     448:	6d c0       	rjmp	.+218    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     44a:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
            if (lanyardState == TRUE) {
     44e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     452:	91 30       	cpi	r25, 0x01	; 1
     454:	a1 f5       	brne	.+104    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     456:	e8 2f       	mov	r30, r24
     458:	e6 95       	lsr	r30
     45a:	e6 95       	lsr	r30
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	e0 58       	subi	r30, 0x80	; 128
     460:	fb 44       	sbci	r31, 0x4B	; 75
     462:	e5 81       	ldd	r30, Z+5	; 0x05
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     46a:	e6 54       	subi	r30, 0x46	; 70
     46c:	f5 4c       	sbci	r31, 0xC5	; 197
     46e:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     470:	88 31       	cpi	r24, 0x18	; 24
     472:	09 f0       	breq	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	57 c0       	rjmp	.+174    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                    UpdateState(LANYARD_COMPLETED);
     476:	8b e7       	ldi	r24, 0x7B	; 123
     478:	95 d6       	rcall	.+3370   	; 0x11a4 <UpdateState>
                    iLED[SCARAB[G]] = 0;
     47a:	ec 2f       	mov	r30, r28
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	e6 54       	subi	r30, 0x46	; 70
     480:	f5 4c       	sbci	r31, 0xC5	; 197
     482:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     484:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	e6 54       	subi	r30, 0x46	; 70
     48c:	f5 4c       	sbci	r31, 0xC5	; 197
     48e:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     490:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	e6 54       	subi	r30, 0x46	; 70
     498:	f5 4c       	sbci	r31, 0xC5	; 197
     49a:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     49c:	e0 91 7f b4 	lds	r30, 0xB47F	; 0x80b47f <__bss_end+0x7975>
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4a6:	e6 54       	subi	r30, 0x46	; 70
     4a8:	f5 4c       	sbci	r31, 0xC5	; 197
     4aa:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     4ac:	e0 91 7e b4 	lds	r30, 0xB47E	; 0x80b47e <__bss_end+0x7974>
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4b6:	e6 54       	subi	r30, 0x46	; 70
     4b8:	f5 4c       	sbci	r31, 0xC5	; 197
     4ba:	80 83       	st	Z, r24
     4bc:	33 c0       	rjmp	.+102    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     4be:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     4c2:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardState    = TRUE;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                iLED[SCARAB[G]] = 0;
     4cc:	ec 2f       	mov	r30, r28
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	e6 54       	subi	r30, 0x46	; 70
     4d2:	f5 4c       	sbci	r31, 0xC5	; 197
     4d4:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     4d6:	e0 91 7f b4 	lds	r30, 0xB47F	; 0x80b47f <__bss_end+0x7975>
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	e6 54       	subi	r30, 0x46	; 70
     4de:	f5 4c       	sbci	r31, 0xC5	; 197
     4e0:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     4e2:	e0 91 7e b4 	lds	r30, 0xB47E	; 0x80b47e <__bss_end+0x7974>
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	e6 54       	subi	r30, 0x46	; 70
     4ea:	f5 4c       	sbci	r31, 0xC5	; 197
     4ec:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     4ee:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4f8:	e6 54       	subi	r30, 0x46	; 70
     4fa:	f5 4c       	sbci	r31, 0xC5	; 197
     4fc:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     4fe:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     508:	e6 54       	subi	r30, 0x46	; 70
     50a:	f5 4c       	sbci	r31, 0xC5	; 197
     50c:	80 83       	st	Z, r24
     50e:	a6 e8       	ldi	r26, 0x86	; 134
     510:	b4 eb       	ldi	r27, 0xB4	; 180
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     512:	ed 91       	ld	r30, X+
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	e6 54       	subi	r30, 0x46	; 70
     518:	f5 4c       	sbci	r31, 0xC5	; 197
     51a:	10 82       	st	Z, r1
                iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     51c:	84 eb       	ldi	r24, 0xB4	; 180
     51e:	ac 38       	cpi	r26, 0x8C	; 140
     520:	b8 07       	cpc	r27, r24
     522:	b9 f7       	brne	.-18     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     524:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     528:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     536:	87 ef       	ldi	r24, 0xF7	; 247
     538:	3f d6       	rcall	.+3198   	; 0x11b8 <CheckState>
     53a:	81 11       	cpse	r24, r1
     53c:	3e c1       	rjmp	.+636    	; 0x7ba <MagnetMaze+0x288>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     53e:	8d e7       	ldi	r24, 0x7D	; 125
     540:	3b d6       	rcall	.+3190   	; 0x11b8 <CheckState>
     542:	81 11       	cpse	r24, r1
     544:	3a c1       	rjmp	.+628    	; 0x7ba <MagnetMaze+0x288>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     546:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	08 f0       	brcs	.+2      	; 0x550 <MagnetMaze+0x1e>
     54e:	35 c1       	rjmp	.+618    	; 0x7ba <MagnetMaze+0x288>
        return 0;

    if (calHall == 0)
     550:	80 91 e3 3a 	lds	r24, 0x3AE3	; 0x803ae3 <calHall>
     554:	90 91 e4 3a 	lds	r25, 0x3AE4	; 0x803ae4 <calHall+0x1>
     558:	89 2b       	or	r24, r25
     55a:	41 f4       	brne	.+16     	; 0x56c <MagnetMaze+0x3a>
        calHall = adcHall;
     55c:	80 91 93 3a 	lds	r24, 0x3A93	; 0x803a93 <adcHall>
     560:	90 91 94 3a 	lds	r25, 0x3A94	; 0x803a94 <adcHall+0x1>
     564:	80 93 e3 3a 	sts	0x3AE3, r24	; 0x803ae3 <calHall>
     568:	90 93 e4 3a 	sts	0x3AE4, r25	; 0x803ae4 <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     56c:	80 91 93 3a 	lds	r24, 0x3A93	; 0x803a93 <adcHall>
     570:	90 91 94 3a 	lds	r25, 0x3A94	; 0x803a94 <adcHall+0x1>
     574:	20 91 e3 3a 	lds	r18, 0x3AE3	; 0x803ae3 <calHall>
     578:	30 91 e4 3a 	lds	r19, 0x3AE4	; 0x803ae4 <calHall+0x1>
     57c:	82 1b       	sub	r24, r18
     57e:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     580:	30 91 3c 38 	lds	r19, 0x383C	; 0x80383c <curHallState>
     584:	31 30       	cpi	r19, 0x01	; 1
     586:	89 f0       	breq	.+34     	; 0x5aa <MagnetMaze+0x78>
     588:	18 f0       	brcs	.+6      	; 0x590 <MagnetMaze+0x5e>
     58a:	32 30       	cpi	r19, 0x02	; 2
     58c:	c1 f0       	breq	.+48     	; 0x5be <MagnetMaze+0x8c>
     58e:	1f c0       	rjmp	.+62     	; 0x5ce <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     590:	84 3d       	cpi	r24, 0xD4	; 212
     592:	2e ef       	ldi	r18, 0xFE	; 254
     594:	92 07       	cpc	r25, r18
     596:	14 f4       	brge	.+4      	; 0x59c <MagnetMaze+0x6a>
                newHallState = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     59c:	8d 32       	cpi	r24, 0x2D	; 45
     59e:	91 40       	sbci	r25, 0x01	; 1
     5a0:	5c f0       	brlt	.+22     	; 0x5b8 <MagnetMaze+0x86>
                newHallState = 2;
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <newHallState>
     5a8:	12 c0       	rjmp	.+36     	; 0x5ce <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     5aa:	8d 32       	cpi	r24, 0x2D	; 45
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	92 07       	cpc	r25, r18
     5b0:	c4 f7       	brge	.-16     	; 0x5a2 <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5b2:	89 38       	cpi	r24, 0x89	; 137
     5b4:	9f 4f       	sbci	r25, 0xFF	; 255
     5b6:	84 f3       	brlt	.-32     	; 0x598 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5b8:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <newHallState>
     5bc:	08 c0       	rjmp	.+16     	; 0x5ce <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     5be:	84 3d       	cpi	r24, 0xD4	; 212
     5c0:	2e ef       	ldi	r18, 0xFE	; 254
     5c2:	92 07       	cpc	r25, r18
     5c4:	4c f3       	brlt	.-46     	; 0x598 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5c6:	88 37       	cpi	r24, 0x78	; 120
     5c8:	91 05       	cpc	r25, r1
     5ca:	b4 f3       	brlt	.-20     	; 0x5b8 <MagnetMaze+0x86>
     5cc:	ea cf       	rjmp	.-44     	; 0x5a2 <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     5ce:	c0 91 71 b4 	lds	r28, 0xB471	; 0x80b471 <__bss_end+0x7967>
     5d2:	ec 2f       	mov	r30, r28
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <newHallState>
     5da:	88 23       	and	r24, r24
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <MagnetMaze+0xb2>
     5de:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <MagnetMaze+0xb4>
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	e6 54       	subi	r30, 0x46	; 70
     5e8:	f5 4c       	sbci	r31, 0xC5	; 197
     5ea:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     5ec:	88 23       	and	r24, r24
     5ee:	59 f0       	breq	.+22     	; 0x606 <MagnetMaze+0xd4>
     5f0:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <mazePos>
     5f4:	21 11       	cpse	r18, r1
     5f6:	3d c0       	rjmp	.+122    	; 0x672 <MagnetMaze+0x140>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	09 f4       	brne	.+2      	; 0x600 <MagnetMaze+0xce>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <inverted>
     604:	36 c0       	rjmp	.+108    	; 0x672 <MagnetMaze+0x140>

    if (newHallState != curHallState) {
     606:	33 23       	and	r19, r19
     608:	09 f4       	brne	.+2      	; 0x60c <MagnetMaze+0xda>
     60a:	d7 c0       	rjmp	.+430    	; 0x7ba <MagnetMaze+0x288>
        curHallState = newHallState;
     60c:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     610:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <mazePos>
     614:	82 31       	cpi	r24, 0x12	; 18
     616:	09 f0       	breq	.+2      	; 0x61a <MagnetMaze+0xe8>
     618:	d0 c0       	rjmp	.+416    	; 0x7ba <MagnetMaze+0x288>
                gameNow   = TEXT;
     61a:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                mazePos   = 0;
     61e:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                mazeState = TRUE;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[SCARAB[G]]    = 0;
     628:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     62a:	e0 91 7f b4 	lds	r30, 0xB47F	; 0x80b47f <__bss_end+0x7975>
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	e6 54       	subi	r30, 0x46	; 70
     632:	f5 4c       	sbci	r31, 0xC5	; 197
     634:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     636:	e0 91 7e b4 	lds	r30, 0xB47E	; 0x80b47e <__bss_end+0x7974>
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	e6 54       	subi	r30, 0x46	; 70
     63e:	f5 4c       	sbci	r31, 0xC5	; 197
     640:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     642:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	e6 54       	subi	r30, 0x46	; 70
     64a:	f5 4c       	sbci	r31, 0xC5	; 197
     64c:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     64e:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	e6 54       	subi	r30, 0x46	; 70
     656:	f5 4c       	sbci	r31, 0xC5	; 197
     658:	10 82       	st	Z, r1
     65a:	a6 e8       	ldi	r26, 0x86	; 134
     65c:	b4 eb       	ldi	r27, 0xB4	; 180
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     65e:	ed 91       	ld	r30, X+
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	e6 54       	subi	r30, 0x46	; 70
     664:	f5 4c       	sbci	r31, 0xC5	; 197
     666:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     668:	24 eb       	ldi	r18, 0xB4	; 180
     66a:	ac 38       	cpi	r26, 0x8C	; 140
     66c:	b2 07       	cpc	r27, r18
     66e:	b9 f7       	brne	.-18     	; 0x65e <MagnetMaze+0x12c>
     670:	a4 c0       	rjmp	.+328    	; 0x7ba <MagnetMaze+0x288>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     672:	38 17       	cp	r19, r24
     674:	09 f4       	brne	.+2      	; 0x678 <MagnetMaze+0x146>
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <MagnetMaze+0x288>
        curHallState = newHallState;
     678:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     682:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inverted>
     686:	99 23       	and	r25, r25
     688:	11 f0       	breq	.+4      	; 0x68e <MagnetMaze+0x15c>
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	89 27       	eor	r24, r25
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	e2 2f       	mov	r30, r18
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	e4 57       	subi	r30, 0x74	; 116
     696:	fb 44       	sbci	r31, 0x4B	; 75
     698:	40 81       	ld	r20, Z
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	84 17       	cp	r24, r20
     69e:	95 07       	cpc	r25, r21
     6a0:	91 f4       	brne	.+36     	; 0x6c6 <MagnetMaze+0x194>
                mazeState &= TRUE;
     6a2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6a6:	81 70       	andi	r24, 0x01	; 1
     6a8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[EYE[R][L]] = 0;
     6ac:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	e6 54       	subi	r30, 0x46	; 70
     6b4:	f5 4c       	sbci	r31, 0xC5	; 197
     6b6:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     6b8:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e6 54       	subi	r30, 0x46	; 70
     6c0:	f5 4c       	sbci	r31, 0xC5	; 197
     6c2:	10 82       	st	Z, r1
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <MagnetMaze+0x198>
            } else {
                mazeState = FALSE;
     6c6:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <mazePos>
            mazeCnt++;            
     6d0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <mazeCnt>
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     6d6:	83 30       	cpi	r24, 0x03	; 3
     6d8:	18 f4       	brcc	.+6      	; 0x6e0 <MagnetMaze+0x1ae>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     6da:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <mazeCnt>
     6de:	6d c0       	rjmp	.+218    	; 0x7ba <MagnetMaze+0x288>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6e0:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <mazeCnt>
                if (mazeState == TRUE) {
     6e4:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	a9 f5       	brne	.+106    	; 0x756 <MagnetMaze+0x224>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     6ec:	eb ea       	ldi	r30, 0xAB	; 171
     6ee:	2e 9f       	mul	r18, r30
     6f0:	e1 2d       	mov	r30, r1
     6f2:	11 24       	eor	r1, r1
     6f4:	e6 95       	lsr	r30
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	e0 58       	subi	r30, 0x80	; 128
     6fa:	fb 44       	sbci	r31, 0x4B	; 75
     6fc:	e5 81       	ldd	r30, Z+5	; 0x05
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     704:	e6 54       	subi	r30, 0x46	; 70
     706:	f5 4c       	sbci	r31, 0xC5	; 197
     708:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     70a:	22 31       	cpi	r18, 0x12	; 18
     70c:	09 f0       	breq	.+2      	; 0x710 <MagnetMaze+0x1de>
                        UpdateState(MAZE_COMPLETED);
     70e:	55 c0       	rjmp	.+170    	; 0x7ba <MagnetMaze+0x288>
     710:	8d e7       	ldi	r24, 0x7D	; 125
     712:	48 d5       	rcall	.+2704   	; 0x11a4 <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	c6 54       	subi	r28, 0x46	; 70
     718:	d5 4c       	sbci	r29, 0xC5	; 197
     71a:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     71c:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	e6 54       	subi	r30, 0x46	; 70
     724:	f5 4c       	sbci	r31, 0xC5	; 197
     726:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     728:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	e6 54       	subi	r30, 0x46	; 70
     730:	f5 4c       	sbci	r31, 0xC5	; 197
     732:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     734:	e0 91 7f b4 	lds	r30, 0xB47F	; 0x80b47f <__bss_end+0x7975>
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     73e:	e6 54       	subi	r30, 0x46	; 70
     740:	f5 4c       	sbci	r31, 0xC5	; 197
     742:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     744:	e0 91 7e b4 	lds	r30, 0xB47E	; 0x80b47e <__bss_end+0x7974>
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     74e:	e6 54       	subi	r30, 0x46	; 70
     750:	f5 4c       	sbci	r31, 0xC5	; 197
     752:	80 83       	st	Z, r24
     754:	32 c0       	rjmp	.+100    	; 0x7ba <MagnetMaze+0x288>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     756:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                    mazePos   = 0;
     75a:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                    mazeState = TRUE;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                    iLED[SCARAB[G]]    = 0;
     764:	d0 e0       	ldi	r29, 0x00	; 0
     766:	c6 54       	subi	r28, 0x46	; 70
     768:	d5 4c       	sbci	r29, 0xC5	; 197
     76a:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     76c:	e0 91 7f b4 	lds	r30, 0xB47F	; 0x80b47f <__bss_end+0x7975>
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e6 54       	subi	r30, 0x46	; 70
     774:	f5 4c       	sbci	r31, 0xC5	; 197
     776:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     778:	e0 91 7e b4 	lds	r30, 0xB47E	; 0x80b47e <__bss_end+0x7974>
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	e6 54       	subi	r30, 0x46	; 70
     780:	f5 4c       	sbci	r31, 0xC5	; 197
     782:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     784:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     78e:	e6 54       	subi	r30, 0x46	; 70
     790:	f5 4c       	sbci	r31, 0xC5	; 197
     792:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     794:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     79e:	e6 54       	subi	r30, 0x46	; 70
     7a0:	f5 4c       	sbci	r31, 0xC5	; 197
     7a2:	80 83       	st	Z, r24
     7a4:	a6 e8       	ldi	r26, 0x86	; 134
     7a6:	b4 eb       	ldi	r27, 0xB4	; 180
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     7a8:	ed 91       	ld	r30, X+
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	e6 54       	subi	r30, 0x46	; 70
     7ae:	f5 4c       	sbci	r31, 0xC5	; 197
     7b0:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     7b2:	84 eb       	ldi	r24, 0xB4	; 180
     7b4:	ac 38       	cpi	r26, 0x8C	; 140
     7b6:	b8 07       	cpc	r27, r24
     7b8:	b9 f7       	brne	.-18     	; 0x7a8 <MagnetMaze+0x276>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <Setup>:
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	f8 94       	cli
     7c8:	88 ed       	ldi	r24, 0xD8	; 216
     7ca:	84 bf       	out	0x34, r24	; 52
     7cc:	c1 e0       	ldi	r28, 0x01	; 1
     7ce:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     7d2:	8a e4       	ldi	r24, 0x4A	; 74
     7d4:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     7d8:	8c e7       	ldi	r24, 0x7C	; 124
     7da:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     7de:	9f e3       	ldi	r25, 0x3F	; 63
     7e0:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     7e4:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7ee:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7f2:	80 68       	ori	r24, 0x80	; 128
     7f4:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7f8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     802:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     806:	80 68       	ori	r24, 0x80	; 128
     808:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     80c:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     810:	80 68       	ori	r24, 0x80	; 128
     812:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     816:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     820:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     824:	d2 e0       	ldi	r29, 0x02	; 2
     826:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     82a:	2b e5       	ldi	r18, 0x5B	; 91
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     832:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     836:	80 ea       	ldi	r24, 0xA0	; 160
     838:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     83c:	80 ec       	ldi	r24, 0xC0	; 192
     83e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     848:	1c ba       	out	0x1c, r1	; 28
     84a:	1d ba       	out	0x1d, r1	; 29
     84c:	1e ba       	out	0x1e, r1	; 30
     84e:	1f ba       	out	0x1f, r1	; 31
     850:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     854:	88 e0       	ldi	r24, 0x08	; 8
     856:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     85a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     85e:	87 e7       	ldi	r24, 0x77	; 119
     860:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     864:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     868:	8b e0       	ldi	r24, 0x0B	; 11
     86a:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     86e:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     872:	81 60       	ori	r24, 0x01	; 1
     874:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     87e:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     88a:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     88e:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     892:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     896:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     89a:	8b e8       	ldi	r24, 0x8B	; 139
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     8a2:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     8a6:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     8aa:	08 dc       	rcall	.-2032   	; 0xbc <I2C_init>
     8ac:	82 e1       	ldi	r24, 0x12	; 18
     8ae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b8:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     8bc:	86 e0       	ldi	r24, 0x06	; 6
     8be:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8c2:	84 e4       	ldi	r24, 0x44	; 68
     8c4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     8c8:	8e e1       	ldi	r24, 0x1E	; 30
     8ca:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     8ce:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     8d2:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8d6:	81 60       	ori	r24, 0x01	; 1
     8d8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8dc:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     8e0:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8e4:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     8e8:	82 e5       	ldi	r24, 0x52	; 82
     8ea:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     8f4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     8f8:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     8fc:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     900:	81 60       	ori	r24, 0x01	; 1
     902:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     906:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     916:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     920:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     924:	80 fd       	sbrc	r24, 0
     926:	fc cf       	rjmp	.-8      	; 0x920 <Setup+0x15e>
     928:	80 e3       	ldi	r24, 0x30	; 48
     92a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     92e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     932:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     936:	82 fd       	sbrc	r24, 2
     938:	fc cf       	rjmp	.-8      	; 0x932 <Setup+0x170>
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	98 e7       	ldi	r25, 0x78	; 120
     93e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     942:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     946:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     94a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     94e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     952:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     956:	82 96       	adiw	r24, 0x22	; 34
     958:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__udivmodhi4>
     95c:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <tmp16bit>
     960:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <tmp16bit+0x1>
     964:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     968:	83 fd       	sbrc	r24, 3
     96a:	fc cf       	rjmp	.-8      	; 0x964 <Setup+0x1a2>
     96c:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <tmp16bit>
     970:	90 91 e8 3a 	lds	r25, 0x3AE8	; 0x803ae8 <tmp16bit+0x1>
     974:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     978:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     988:	88 e0       	ldi	r24, 0x08	; 8
     98a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     98e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     992:	80 fd       	sbrc	r24, 0
     994:	fc cf       	rjmp	.-8      	; 0x98e <Setup+0x1cc>
     996:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     9a0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     9a4:	81 60       	ori	r24, 0x01	; 1
     9a6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     9aa:	10 92 4d 3a 	sts	0x3A4D, r1	; 0x803a4d <serRx>
     9ae:	8d e4       	ldi	r24, 0x4D	; 77
     9b0:	9a e3       	ldi	r25, 0x3A	; 58
     9b2:	80 93 91 3a 	sts	0x3A91, r24	; 0x803a91 <serTxAddr>
     9b6:	90 93 92 3a 	sts	0x3A92, r25	; 0x803a92 <serTxAddr+0x1>
     9ba:	78 94       	sei
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <__vector_8>:
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     9de:	84 e4       	ldi	r24, 0x44	; 68
     9e0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     9e4:	ec b3       	in	r30, 0x1c	; 28
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	e8 9f       	mul	r30, r24
     9ea:	f0 01       	movw	r30, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	e6 54       	subi	r30, 0x46	; 70
     9f0:	f5 4c       	sbci	r31, 0xC5	; 197
     9f2:	a8 e2       	ldi	r26, 0x28	; 40
     9f4:	ba e0       	ldi	r27, 0x0A	; 10
     9f6:	96 e0       	ldi	r25, 0x06	; 6
     9f8:	81 91       	ld	r24, Z+
     9fa:	8d 93       	st	X+, r24
     9fc:	9a 95       	dec	r25
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <__vector_8+0x36>
     a00:	8b e0       	ldi	r24, 0x0B	; 11
     a02:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a06:	8c b3       	in	r24, 0x1c	; 28
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	58 f4       	brcc	.+22     	; 0xa22 <__vector_8+0x60>
     a0c:	8c b3       	in	r24, 0x1c	; 28
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <__vector_8+0x52>
     a12:	99 0f       	add	r25, r25
     a14:	8a 95       	dec	r24
     a16:	ea f7       	brpl	.-6      	; 0xa12 <__vector_8+0x50>
     a18:	99 b9       	out	0x09, r25	; 9
     a1a:	8c b3       	in	r24, 0x1c	; 28
     a1c:	83 95       	inc	r24
     a1e:	8c bb       	out	0x1c, r24	; 28
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <__vector_8+0x74>
     a22:	8c b3       	in	r24, 0x1c	; 28
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	21 f4       	brne	.+8      	; 0xa30 <__vector_8+0x6e>
     a28:	2a 9a       	sbi	0x05, 2	; 5
     a2a:	83 95       	inc	r24
     a2c:	8c bb       	out	0x1c, r24	; 28
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__vector_8+0x74>
     a30:	2e 9a       	sbi	0x05, 6	; 5
     a32:	88 27       	eor	r24, r24
     a34:	8c bb       	out	0x1c, r24	; 28
     a36:	80 91 38 3a 	lds	r24, 0x3A38	; 0x803a38 <timeout_I2C>
     a3a:	88 23       	and	r24, r24
     a3c:	29 f0       	breq	.+10     	; 0xa48 <__vector_8+0x86>
     a3e:	80 91 38 3a 	lds	r24, 0x3A38	; 0x803a38 <timeout_I2C>
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	80 93 38 3a 	sts	0x3A38, r24	; 0x803a38 <timeout_I2C>
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_13>:
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
     a76:	e0 91 91 3a 	lds	r30, 0x3A91	; 0x803a91 <serTxAddr>
     a7a:	f0 91 92 3a 	lds	r31, 0x3A92	; 0x803a92 <serTxAddr+0x1>
     a7e:	80 81       	ld	r24, Z
     a80:	88 23       	and	r24, r24
     a82:	91 f0       	breq	.+36     	; 0xaa8 <__vector_13+0x44>
     a84:	80 81       	ld	r24, Z
     a86:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a8a:	80 91 91 3a 	lds	r24, 0x3A91	; 0x803a91 <serTxAddr>
     a8e:	90 91 92 3a 	lds	r25, 0x3A92	; 0x803a92 <serTxAddr+0x1>
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	80 93 91 3a 	sts	0x3A91, r24	; 0x803a91 <serTxAddr>
     a98:	90 93 92 3a 	sts	0x3A92, r25	; 0x803a92 <serTxAddr+0x1>
     a9c:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     aa0:	80 62       	ori	r24, 0x20	; 32
     aa2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__vector_13+0x4e>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     aae:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_14>:
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
     ae2:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ae6:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     aea:	80 81       	ld	r24, Z
     aec:	81 11       	cpse	r24, r1
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <__vector_14+0x36>
     af0:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     af4:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     af8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     afc:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b00:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     b04:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b08:	80 81       	ld	r24, Z
     b0a:	88 23       	and	r24, r24
     b0c:	e1 f0       	breq	.+56     	; 0xb46 <__vector_14+0x7c>
     b0e:	20 81       	ld	r18, Z
     b10:	40 91 8e 3a 	lds	r20, 0x3A8E	; 0x803a8e <auVolume>
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	2f 57       	subi	r18, 0x7F	; 127
     b18:	31 09       	sbc	r19, r1
     b1a:	42 9f       	mul	r20, r18
     b1c:	c0 01       	movw	r24, r0
     b1e:	43 9f       	mul	r20, r19
     b20:	90 0d       	add	r25, r0
     b22:	11 24       	eor	r1, r1
     b24:	89 2f       	mov	r24, r25
     b26:	99 0f       	add	r25, r25
     b28:	99 0b       	sbc	r25, r25
     b2a:	80 58       	subi	r24, 0x80	; 128
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b32:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     b36:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     b40:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b44:	06 c0       	rjmp	.+12     	; 0xb52 <__vector_14+0x88>
     b46:	80 e8       	ldi	r24, 0x80	; 128
     b48:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 e2 3a 	sts	0x3AE2, r24	; 0x803ae2 <auPlayDone>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	9f 91       	pop	r25
     b5e:	8f 91       	pop	r24
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_27>:
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	8f 93       	push	r24
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
     b84:	81 11       	cpse	r24, r1
     b86:	44 c0       	rjmp	.+136    	; 0xc10 <__vector_27+0xa0>
     b88:	ed b3       	in	r30, 0x1d	; 29
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     b90:	e3 5b       	subi	r30, 0xB3	; 179
     b92:	f5 4c       	sbci	r31, 0xC5	; 197
     b94:	80 83       	st	Z, r24
     b96:	ed b3       	in	r30, 0x1d	; 29
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	e3 5b       	subi	r30, 0xB3	; 179
     b9c:	f5 4c       	sbci	r31, 0xC5	; 197
     b9e:	80 81       	ld	r24, Z
     ba0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     ba4:	ed b3       	in	r30, 0x1d	; 29
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	e3 5b       	subi	r30, 0xB3	; 179
     baa:	f5 4c       	sbci	r31, 0xC5	; 197
     bac:	80 81       	ld	r24, Z
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	39 f0       	breq	.+14     	; 0xbc0 <__vector_27+0x50>
     bb2:	ed b3       	in	r30, 0x1d	; 29
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	e3 5b       	subi	r30, 0xB3	; 179
     bb8:	f5 4c       	sbci	r31, 0xC5	; 197
     bba:	80 81       	ld	r24, Z
     bbc:	8d 30       	cpi	r24, 0x0D	; 13
     bbe:	49 f4       	brne	.+18     	; 0xbd2 <__vector_27+0x62>
     bc0:	ed b3       	in	r30, 0x1d	; 29
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e3 5b       	subi	r30, 0xB3	; 179
     bc6:	f5 4c       	sbci	r31, 0xC5	; 197
     bc8:	10 82       	st	Z, r1
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <serRxDone>
     bd0:	1f c0       	rjmp	.+62     	; 0xc10 <__vector_27+0xa0>
     bd2:	ed b3       	in	r30, 0x1d	; 29
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	e3 5b       	subi	r30, 0xB3	; 179
     bd8:	f5 4c       	sbci	r31, 0xC5	; 197
     bda:	80 81       	ld	r24, Z
     bdc:	88 30       	cpi	r24, 0x08	; 8
     bde:	39 f0       	breq	.+14     	; 0xbee <__vector_27+0x7e>
     be0:	ed b3       	in	r30, 0x1d	; 29
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e3 5b       	subi	r30, 0xB3	; 179
     be6:	f5 4c       	sbci	r31, 0xC5	; 197
     be8:	80 81       	ld	r24, Z
     bea:	8f 37       	cpi	r24, 0x7F	; 127
     bec:	59 f4       	brne	.+22     	; 0xc04 <__vector_27+0x94>
     bee:	8d b3       	in	r24, 0x1d	; 29
     bf0:	88 23       	and	r24, r24
     bf2:	41 f0       	breq	.+16     	; 0xc04 <__vector_27+0x94>
     bf4:	ed b3       	in	r30, 0x1d	; 29
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	e3 5b       	subi	r30, 0xB3	; 179
     bfa:	f5 4c       	sbci	r31, 0xC5	; 197
     bfc:	10 82       	st	Z, r1
     bfe:	8d b3       	in	r24, 0x1d	; 29
     c00:	81 50       	subi	r24, 0x01	; 1
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__vector_27+0x9e>
     c04:	8d b3       	in	r24, 0x1d	; 29
     c06:	80 34       	cpi	r24, 0x40	; 64
     c08:	18 f4       	brcc	.+6      	; 0xc10 <__vector_27+0xa0>
     c0a:	8d b3       	in	r24, 0x1d	; 29
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	8d bb       	out	0x1d, r24	; 29
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	8f 91       	pop	r24
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_28>:
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	8f 93       	push	r24
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c3a:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c44:	e5 e0       	ldi	r30, 0x05	; 5
     c46:	f8 e0       	ldi	r31, 0x08	; 8
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	80 83       	st	Z, r24
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	8f 91       	pop	r24
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <__vector_20>:
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <adc0Chg>
     c74:	81 11       	cpse	r24, r1
     c76:	18 c0       	rjmp	.+48     	; 0xca8 <__vector_20+0x4a>
     c78:	8e b3       	in	r24, 0x1e	; 30
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	8f 71       	andi	r24, 0x1F	; 31
     c7e:	8e bb       	out	0x1e, r24	; 30
     c80:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     c84:	8e 31       	cpi	r24, 0x1E	; 30
     c86:	41 f4       	brne	.+16     	; 0xc98 <__vector_20+0x3a>
     c88:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <adcTemp>
     c92:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <adcTemp+0x1>
     c96:	0a c0       	rjmp	.+20     	; 0xcac <__vector_20+0x4e>
     c98:	ee b3       	in	r30, 0x1e	; 30
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ca0:	e6 56       	subi	r30, 0x66	; 102
     ca2:	f5 4c       	sbci	r31, 0xC5	; 197
     ca4:	80 83       	st	Z, r24
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <__vector_20+0x4e>
     ca8:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <adc0Chg>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__vector_22>:
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cd6:	81 11       	cpse	r24, r1
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <__vector_22+0x2a>
     cda:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cde:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ce2:	80 93 95 3a 	sts	0x3A95, r24	; 0x803a95 <adcPhot>
     ce6:	90 93 96 3a 	sts	0x3A96, r25	; 0x803a96 <adcPhot+0x1>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__vector_22+0x4a>
     cee:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	79 f4       	brne	.+30     	; 0xd14 <__vector_22+0x50>
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     cfc:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d00:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d04:	80 93 93 3a 	sts	0x3A93, r24	; 0x803a93 <adcHall>
     d08:	90 93 94 3a 	sts	0x3A94, r25	; 0x803a94 <adcHall+0x1>
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d12:	10 c0       	rjmp	.+32     	; 0xd34 <__vector_22+0x70>
     d14:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d18:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d1c:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <adcBtns>
     d20:	90 93 90 3a 	sts	0x3A90, r25	; 0x803a90 <adcBtns+0x1>
     d24:	8f b3       	in	r24, 0x1f	; 31
     d26:	8f 30       	cpi	r24, 0x0F	; 15
     d28:	29 f4       	brne	.+10     	; 0xd34 <__vector_22+0x70>
     d2a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d34:	8f b3       	in	r24, 0x1f	; 31
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	8f 70       	andi	r24, 0x0F	; 15
     d3c:	99 27       	eor	r25, r25
     d3e:	8f bb       	out	0x1f, r24	; 31
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_6>:
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d70:	81 ff       	sbrs	r24, 1
     d72:	26 c0       	rjmp	.+76     	; 0xdc0 <__vector_6+0x6c>
     d74:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d78:	8f 3f       	cpi	r24, 0xFF	; 255
     d7a:	29 f0       	breq	.+10     	; 0xd86 <__vector_6+0x32>
     d7c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <buttonMark>
     d86:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d8a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d8e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d92:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     d96:	82 96       	adiw	r24, 0x22	; 34
     d98:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__udivmodhi4>
     d9c:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <tmp16bit>
     da0:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <tmp16bit+0x1>
     da4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     da8:	83 fd       	sbrc	r24, 3
     daa:	fc cf       	rjmp	.-8      	; 0xda4 <__vector_6+0x50>
     dac:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <tmp16bit>
     db0:	90 91 e8 3a 	lds	r25, 0x3AE8	; 0x803ae8 <tmp16bit+0x1>
     db4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     db8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <__vector_6+0x78>
     dc0:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <minuteMark>
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
     dc6:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <minuteMark>
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_7>:
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	8f 93       	push	r24
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     dfa:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     dfe:	8f 91       	pop	r24
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <EERead>:
     e0a:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e0e:	91 fd       	sbrc	r25, 1
     e10:	fc cf       	rjmp	.-8      	; 0xe0a <EERead>
     e12:	fb 01       	movw	r30, r22
     e14:	48 0f       	add	r20, r24
     e16:	84 17       	cp	r24, r20
     e18:	39 f0       	breq	.+14     	; 0xe28 <EERead+0x1e>
     e1a:	a8 2f       	mov	r26, r24
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	bc 5e       	subi	r27, 0xEC	; 236
     e20:	9c 91       	ld	r25, X
     e22:	91 93       	st	Z+, r25
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	f7 cf       	rjmp	.-18     	; 0xe16 <EERead+0xc>
     e28:	08 95       	ret

00000e2a <EEWrite>:
     e2a:	9d e9       	ldi	r25, 0x9D	; 157
     e2c:	24 e0       	ldi	r18, 0x04	; 4
     e2e:	33 e0       	ldi	r19, 0x03	; 3
     e30:	44 23       	and	r20, r20
     e32:	09 f1       	breq	.+66     	; 0xe76 <EEWrite+0x4c>
     e34:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e38:	51 fd       	sbrc	r21, 1
     e3a:	fc cf       	rjmp	.-8      	; 0xe34 <EEWrite+0xa>
     e3c:	94 bf       	out	0x34, r25	; 52
     e3e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e42:	e8 2f       	mov	r30, r24
     e44:	58 2f       	mov	r21, r24
     e46:	5f 71       	andi	r21, 0x1F	; 31
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	db 01       	movw	r26, r22
     e50:	11 97       	sbiw	r26, 0x01	; 1
     e52:	ac 91       	ld	r26, X
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	fc 5e       	subi	r31, 0xEC	; 236
     e58:	a0 83       	st	Z, r26
     e5a:	41 50       	subi	r20, 0x01	; 1
     e5c:	19 f0       	breq	.+6      	; 0xe64 <EEWrite+0x3a>
     e5e:	e8 2f       	mov	r30, r24
     e60:	5f 31       	cpi	r21, 0x1F	; 31
     e62:	81 f7       	brne	.-32     	; 0xe44 <EEWrite+0x1a>
     e64:	94 bf       	out	0x34, r25	; 52
     e66:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e6a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e6e:	52 ff       	sbrs	r21, 2
     e70:	df cf       	rjmp	.-66     	; 0xe30 <EEWrite+0x6>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	08 95       	ret
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret

00000e7a <SerSend>:
     e7a:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <serTxDone>
     e7e:	22 23       	and	r18, r18
     e80:	59 f0       	breq	.+22     	; 0xe98 <SerSend+0x1e>
     e82:	80 93 91 3a 	sts	0x3A91, r24	; 0x803a91 <serTxAddr>
     e86:	90 93 92 3a 	sts	0x3A92, r25	; 0x803a92 <serTxAddr+0x1>
     e8a:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <serTxDone>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	08 95       	ret
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	08 95       	ret

00000e9c <SerSpeed>:
     e9c:	28 2f       	mov	r18, r24
     e9e:	81 11       	cpse	r24, r1
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <SerSpeed+0x8>
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	82 1b       	sub	r24, r18
     eaa:	91 09       	sbc	r25, r1
     eac:	98 2f       	mov	r25, r24
     eae:	88 27       	eor	r24, r24
     eb0:	81 50       	subi	r24, 0x01	; 1
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     eb8:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     ebc:	08 95       	ret

00000ebe <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     ebe:	20 91 8f 3a 	lds	r18, 0x3A8F	; 0x803a8f <adcBtns>
     ec2:	30 91 90 3a 	lds	r19, 0x3A90	; 0x803a90 <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	36 95       	lsr	r19
     eca:	27 95       	ror	r18
     ecc:	9a 95       	dec	r25
     ece:	e1 f7       	brne	.-8      	; 0xec8 <CheckButtons+0xa>
     ed0:	33 27       	eor	r19, r19
     ed2:	2c 35       	cpi	r18, 0x5C	; 92
     ed4:	31 05       	cpc	r19, r1
     ed6:	d0 f4       	brcc	.+52     	; 0xf0c <CheckButtons+0x4e>
     ed8:	23 35       	cpi	r18, 0x53	; 83
     eda:	31 05       	cpc	r19, r1
     edc:	a8 f5       	brcc	.+106    	; 0xf48 <CheckButtons+0x8a>
     ede:	22 33       	cpi	r18, 0x32	; 50
     ee0:	31 05       	cpc	r19, r1
     ee2:	50 f4       	brcc	.+20     	; 0xef8 <CheckButtons+0x3a>
     ee4:	2d 32       	cpi	r18, 0x2D	; 45
     ee6:	31 05       	cpc	r19, r1
     ee8:	58 f5       	brcc	.+86     	; 0xf40 <CheckButtons+0x82>
     eea:	23 52       	subi	r18, 0x23	; 35
     eec:	31 09       	sbc	r19, r1
     eee:	25 30       	cpi	r18, 0x05	; 5
     ef0:	31 05       	cpc	r19, r1
     ef2:	80 f5       	brcc	.+96     	; 0xf54 <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     ef4:	9c e0       	ldi	r25, 0x0C	; 12
     ef6:	2f c0       	rjmp	.+94     	; 0xf56 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ef8:	27 33       	cpi	r18, 0x37	; 55
     efa:	31 05       	cpc	r19, r1
     efc:	18 f1       	brcs	.+70     	; 0xf44 <CheckButtons+0x86>
     efe:	2e 53       	subi	r18, 0x3E	; 62
     f00:	31 09       	sbc	r19, r1
     f02:	27 30       	cpi	r18, 0x07	; 7
     f04:	31 05       	cpc	r19, r1
     f06:	30 f5       	brcc	.+76     	; 0xf54 <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     f08:	96 e0       	ldi	r25, 0x06	; 6
        break;
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     f0c:	2a 38       	cpi	r18, 0x8A	; 138
     f0e:	31 05       	cpc	r19, r1
     f10:	50 f4       	brcc	.+20     	; 0xf26 <CheckButtons+0x68>
     f12:	29 37       	cpi	r18, 0x79	; 121
     f14:	31 05       	cpc	r19, r1
     f16:	d0 f4       	brcc	.+52     	; 0xf4c <CheckButtons+0x8e>
     f18:	23 56       	subi	r18, 0x63	; 99
     f1a:	31 09       	sbc	r19, r1
     f1c:	2b 30       	cpi	r18, 0x0B	; 11
     f1e:	31 05       	cpc	r19, r1
     f20:	c8 f4       	brcc	.+50     	; 0xf54 <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     f22:	93 e0       	ldi	r25, 0x03	; 3
        break;
     f24:	18 c0       	rjmp	.+48     	; 0xf56 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     f26:	22 3a       	cpi	r18, 0xA2	; 162
     f28:	31 05       	cpc	r19, r1
     f2a:	a0 f0       	brcs	.+40     	; 0xf54 <CheckButtons+0x96>
     f2c:	2b 3b       	cpi	r18, 0xBB	; 187
     f2e:	31 05       	cpc	r19, r1
     f30:	78 f0       	brcs	.+30     	; 0xf50 <CheckButtons+0x92>
     f32:	20 5f       	subi	r18, 0xF0	; 240
     f34:	31 09       	sbc	r19, r1
     f36:	20 31       	cpi	r18, 0x10	; 16
     f38:	31 05       	cpc	r19, r1
     f3a:	60 f4       	brcc	.+24     	; 0xf54 <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     f3c:	90 e0       	ldi	r25, 0x00	; 0
        break;
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     f40:	99 e0       	ldi	r25, 0x09	; 9
        break;
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     f44:	98 e0       	ldi	r25, 0x08	; 8
        break;
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     f48:	94 e0       	ldi	r25, 0x04	; 4
        break;
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     f4c:	92 e0       	ldi	r25, 0x02	; 2
        break;
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     f50:	91 e0       	ldi	r25, 0x01	; 1
        break;
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     f54:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     f56:	28 2f       	mov	r18, r24
     f58:	2f 70       	andi	r18, 0x0F	; 15
     f5a:	92 13       	cpse	r25, r18
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     f5e:	98 2f       	mov	r25, r24
     f60:	90 7f       	andi	r25, 0xF0	; 240
     f62:	90 3f       	cpi	r25, 0xF0	; 240
     f64:	39 f0       	breq	.+14     	; 0xf74 <CheckButtons+0xb6>
     f66:	80 5f       	subi	r24, 0xF0	; 240
     f68:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     f6a:	99 23       	and	r25, r25
     f6c:	11 f0       	breq	.+4      	; 0xf72 <CheckButtons+0xb4>
     f6e:	89 2f       	mov	r24, r25
     f70:	08 95       	ret
     f72:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     f74:	08 95       	ret

00000f76 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     f76:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3878>
     f7a:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3878+0x1>
     f7e:	9c 01       	movw	r18, r24
     f80:	32 2f       	mov	r19, r18
     f82:	22 27       	eor	r18, r18
     f84:	32 95       	swap	r19
     f86:	33 0f       	add	r19, r19
     f88:	30 7e       	andi	r19, 0xE0	; 224
     f8a:	82 27       	eor	r24, r18
     f8c:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     f8e:	9c 01       	movw	r18, r24
     f90:	23 2f       	mov	r18, r19
     f92:	33 27       	eor	r19, r19
     f94:	26 95       	lsr	r18
     f96:	82 27       	eor	r24, r18
     f98:	93 27       	eor	r25, r19
    state ^= (state << 7);
     f9a:	9c 01       	movw	r18, r24
     f9c:	36 95       	lsr	r19
     f9e:	32 2f       	mov	r19, r18
     fa0:	22 27       	eor	r18, r18
     fa2:	37 95       	ror	r19
     fa4:	27 95       	ror	r18
     fa6:	82 27       	eor	r24, r18
     fa8:	93 27       	eor	r25, r19
     faa:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3878>
     fae:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3878+0x1>
    return (state & 0xff);
}
     fb2:	08 95       	ret

00000fb4 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	7b 01       	movw	r14, r22
     fc4:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     fc6:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     fca:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     fce:	e8 2f       	mov	r30, r24
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	31 97       	sbiw	r30, 0x01	; 1
     fd4:	e7 70       	andi	r30, 0x07	; 7
     fd6:	ff 27       	eor	r31, r31
     fd8:	e2 5e       	subi	r30, 0xE2	; 226
     fda:	f7 4c       	sbci	r31, 0xC7	; 199
     fdc:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     fde:	cb df       	rcall	.-106    	; 0xf76 <lfsr>
     fe0:	8d 21       	and	r24, r13
     fe2:	c8 0f       	add	r28, r24
     fe4:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     fe6:	c7 df       	rcall	.-114    	; 0xf76 <lfsr>
     fe8:	8d 21       	and	r24, r13
     fea:	c8 1b       	sub	r28, r24
     fec:	d1 09       	sbc	r29, r1
     fee:	0c 17       	cp	r16, r28
     ff0:	1d 07       	cpc	r17, r29
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <floatSpeed+0x42>
     ff4:	e8 01       	movw	r28, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	ec 16       	cp	r14, r28
     ffa:	fd 06       	cpc	r15, r29
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <floatSpeed+0x4c>
     ffe:	ce 01       	movw	r24, r28
    1000:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    //0x038B is normal rate, for wind we need to be a bit slower
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1004:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1008:	df 91       	pop	r29
}
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	08 95       	ret

00001018 <floatAround>:
    1018:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	c8 2f       	mov	r28, r24
    1022:	04 2f       	mov	r16, r20
    1024:	12 2f       	mov	r17, r18
    bits = mask[(bits-1)&0x07];
    1026:	e6 2f       	mov	r30, r22
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	31 97       	sbiw	r30, 0x01	; 1
    102c:	e7 70       	andi	r30, 0x07	; 7
    102e:	ff 27       	eor	r31, r31
    1030:	e2 5e       	subi	r30, 0xE2	; 226
    1032:	f7 4c       	sbci	r31, 0xC7	; 199
    1034:	d0 81       	ld	r29, Z
    sample += lfsr()&bits;
    1036:	9f df       	rcall	.-194    	; 0xf76 <lfsr>
    1038:	8d 23       	and	r24, r29
    103a:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    103c:	9c df       	rcall	.-200    	; 0xf76 <lfsr>
    103e:	8d 23       	and	r24, r29
    1040:	c8 1b       	sub	r28, r24
    1042:	8c 2f       	mov	r24, r28
    1044:	11 23       	and	r17, r17
    if (max){
    1046:	41 f0       	breq	.+16     	; 0x1058 <floatAround+0x40>
    1048:	9c 2f       	mov	r25, r28
    104a:	1c 17       	cp	r17, r28
    104c:	08 f4       	brcc	.+2      	; 0x1050 <floatAround+0x38>
    104e:	91 2f       	mov	r25, r17
    1050:	80 2f       	mov	r24, r16
    1052:	09 17       	cp	r16, r25
    1054:	08 f4       	brcc	.+2      	; 0x1058 <floatAround+0x40>
    1056:	89 2f       	mov	r24, r25
    1058:	df 91       	pop	r29
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    return sample;
}
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <SaveGameState>:
    1062:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    1064:	df 92       	push	r13
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	64 97       	sbiw	r28, 0x14	; 20
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    107a:	44 e1       	ldi	r20, 0x14	; 20
    107c:	be 01       	movw	r22, r28
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	c2 de       	rcall	.-636    	; 0xe0a <EERead>
    1086:	89 e3       	ldi	r24, 0x39	; 57
    1088:	c8 2e       	mov	r12, r24
    108a:	8a e3       	ldi	r24, 0x3A	; 58
    108c:	d8 2e       	mov	r13, r24
    108e:	8e 01       	movw	r16, r28
    1090:	0f 5f       	subi	r16, 0xFF	; 255
    1092:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1094:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    1096:	f8 01       	movw	r30, r16
    1098:	81 91       	ld	r24, Z+
    109a:	8f 01       	movw	r16, r30
    109c:	f6 01       	movw	r30, r12
    109e:	90 81       	ld	r25, Z
    10a0:	98 13       	cpse	r25, r24
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    10a4:	f3 94       	inc	r15
    10a6:	ff ef       	ldi	r31, 0xFF	; 255
    10a8:	cf 1a       	sub	r12, r31
    10aa:	df 0a       	sbc	r13, r31
    10ac:	80 e1       	ldi	r24, 0x10	; 16
    10ae:	f8 12       	cpse	r15, r24
    10b0:	f2 cf       	rjmp	.-28     	; 0x1096 <SaveGameState+0x34>
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    10b4:	41 e0       	ldi	r20, 0x01	; 1
    10b6:	b6 01       	movw	r22, r12
    10b8:	8f 2d       	mov	r24, r15
    10ba:	b7 de       	rcall	.-658    	; 0xe2a <EEWrite>
    10bc:	88 23       	and	r24, r24
    10be:	91 f3       	breq	.-28     	; 0x10a4 <SaveGameState+0x42>
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	36 c0       	rjmp	.+108    	; 0x1130 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    10c4:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    10c8:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    10cc:	30 93 49 3a 	sts	0x3A49, r19	; 0x803a49 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    10d0:	20 93 4a 3a 	sts	0x3A4A, r18	; 0x803a4a <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    10d4:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    10d8:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    10dc:	90 93 4b 3a 	sts	0x3A4B, r25	; 0x803a4b <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    10e0:	80 93 4c 3a 	sts	0x3A4C, r24	; 0x803a4c <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    10e4:	89 89       	ldd	r24, Y+17	; 0x11
    10e6:	9a 89       	ldd	r25, Y+18	; 0x12
    10e8:	98 27       	eor	r25, r24
    10ea:	89 27       	eor	r24, r25
    10ec:	98 27       	eor	r25, r24
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	69 f4       	brne	.+26     	; 0x110e <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    10f4:	8b 89       	ldd	r24, Y+19	; 0x13
    10f6:	9c 89       	ldd	r25, Y+20	; 0x14
    10f8:	98 27       	eor	r25, r24
    10fa:	89 27       	eor	r24, r25
    10fc:	98 27       	eor	r25, r24
    10fe:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    1102:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    1106:	28 17       	cp	r18, r24
    1108:	39 07       	cpc	r19, r25
    110a:	49 f4       	brne	.+18     	; 0x111e <SaveGameState+0xbc>
    110c:	10 c0       	rjmp	.+32     	; 0x112e <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    110e:	42 e0       	ldi	r20, 0x02	; 2
    1110:	69 e4       	ldi	r22, 0x49	; 73
    1112:	7a e3       	ldi	r23, 0x3A	; 58
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	89 de       	rcall	.-750    	; 0xe2a <EEWrite>
    1118:	88 23       	and	r24, r24
    111a:	61 f3       	breq	.-40     	; 0x10f4 <SaveGameState+0x92>
    111c:	d1 cf       	rjmp	.-94     	; 0x10c0 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    111e:	42 e0       	ldi	r20, 0x02	; 2
    1120:	6b e4       	ldi	r22, 0x4B	; 75
    1122:	7a e3       	ldi	r23, 0x3A	; 58
    1124:	82 e1       	ldi	r24, 0x12	; 18
    1126:	81 de       	rcall	.-766    	; 0xe2a <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	81 11       	cpse	r24, r1
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <SaveGameState+0xce>
    112e:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1130:	89 2f       	mov	r24, r25
    1132:	64 96       	adiw	r28, 0x14	; 20
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	08 95       	ret

00001148 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    1148:	e8 2f       	mov	r30, r24
    114a:	ef 77       	andi	r30, 0x7F	; 127
    114c:	e6 95       	lsr	r30
    114e:	e6 95       	lsr	r30
    1150:	e6 95       	lsr	r30
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	e7 5c       	subi	r30, 0xC7	; 199
    1156:	f5 4c       	sbci	r31, 0xC5	; 197
    1158:	20 81       	ld	r18, Z
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	87 70       	andi	r24, 0x07	; 7
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <ReadStatusBit+0x1e>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <ReadStatusBit+0x1a>
    116a:	ca 01       	movw	r24, r20
}
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	08 95       	ret

00001170 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    1170:	e8 2f       	mov	r30, r24
    1172:	ef 77       	andi	r30, 0x7F	; 127
    1174:	e6 95       	lsr	r30
    1176:	e6 95       	lsr	r30
    1178:	e6 95       	lsr	r30
    117a:	28 2f       	mov	r18, r24
    117c:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	e7 5c       	subi	r30, 0xC7	; 199
    1182:	f5 4c       	sbci	r31, 0xC5	; 197
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	01 c0       	rjmp	.+2      	; 0x118c <WriteStatusBit+0x1c>
    118a:	88 0f       	add	r24, r24
    118c:	2a 95       	dec	r18
    118e:	ea f7       	brpl	.-6      	; 0x118a <WriteStatusBit+0x1a>
    1190:	66 23       	and	r22, r22
    1192:	19 f0       	breq	.+6      	; 0x119a <WriteStatusBit+0x2a>
    1194:	90 81       	ld	r25, Z
    1196:	89 2b       	or	r24, r25
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    119a:	80 95       	com	r24
    119c:	90 81       	ld	r25, Z
    119e:	89 23       	and	r24, r25
    11a0:	80 83       	st	Z, r24
    11a2:	08 95       	ret

000011a4 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    11a4:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    11a6:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    11a8:	31 f0       	breq	.+12     	; 0x11b6 <UpdateState+0x12>
        if (clearBit) {
    11aa:	97 ff       	sbrs	r25, 7
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	dd cf       	rjmp	.-70     	; 0x1170 <WriteStatusBit>
    11b6:	08 95       	ret

000011b8 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    11b8:	cf 93       	push	r28
    11ba:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    11bc:	8f 77       	andi	r24, 0x7F	; 127
    11be:	c4 df       	rcall	.-120    	; 0x1148 <ReadStatusBit>
    11c0:	2c 2f       	mov	r18, r28
    11c2:	22 1f       	adc	r18, r18
    11c4:	22 27       	eor	r18, r18
    11c6:	22 1f       	adc	r18, r18
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	81 11       	cpse	r24, r1
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <CheckState+0x18>
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    11d0:	82 2f       	mov	r24, r18
    11d2:	89 27       	eor	r24, r25
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    11d8:	e3 e0       	ldi	r30, 0x03	; 3
    11da:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    11de:	91 91       	ld	r25, Z+
    11e0:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    11e2:	ed 30       	cpi	r30, 0x0D	; 13
    11e4:	91 e1       	ldi	r25, 0x11	; 17
    11e6:	f9 07       	cpc	r31, r25
    11e8:	d1 f7       	brne	.-12     	; 0x11de <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    11ea:	83 70       	andi	r24, 0x03	; 3
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <whoami>
    return whoami;
}
    11f2:	08 95       	ret

000011f4 <Reset>:

void Reset(){
    11f4:	e9 e3       	ldi	r30, 0x39	; 57
    11f6:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    11f8:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    11fa:	8a e3       	ldi	r24, 0x3A	; 58
    11fc:	ed 34       	cpi	r30, 0x4D	; 77
    11fe:	f8 07       	cpc	r31, r24
    1200:	d9 f7       	brne	.-10     	; 0x11f8 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1202:	ea df       	rcall	.-44     	; 0x11d8 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    1204:	81 11       	cpse	r24, r1
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1208:	80 91 46 3a 	lds	r24, 0x3A46	; 0x803a46 <gameState+0xd>
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	05 c0       	rjmp	.+10     	; 0x121a <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	31 f4       	brne	.+12     	; 0x1220 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1214:	80 91 46 3a 	lds	r24, 0x3A46	; 0x803a46 <gameState+0xd>
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	80 93 46 3a 	sts	0x3A46, r24	; 0x803a46 <gameState+0xd>
    121e:	0d c0       	rjmp	.+26     	; 0x123a <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	21 f4       	brne	.+8      	; 0x122c <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1224:	80 91 47 3a 	lds	r24, 0x3A47	; 0x803a47 <gameState+0xe>
    1228:	81 60       	ori	r24, 0x01	; 1
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	29 f4       	brne	.+10     	; 0x123a <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1230:	80 91 47 3a 	lds	r24, 0x3A47	; 0x803a47 <gameState+0xe>
    1234:	82 60       	ori	r24, 0x02	; 2
    1236:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <gameState+0xe>
    123a:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <gameState>
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	80 93 39 3a 	sts	0x3A39, r24	; 0x803a39 <gameState>
    1244:	08 95       	ret

00001246 <LoadGameState>:
    }
    return sample;
}

//Load game status
void LoadGameState(){
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    124a:	44 e1       	ldi	r20, 0x14	; 20
    124c:	69 e3       	ldi	r22, 0x39	; 57
    124e:	7a e3       	ldi	r23, 0x3A	; 58
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	db dd       	rcall	.-1098   	; 0xe0a <EERead>
    1254:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    1256:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    1258:	8c 2f       	mov	r24, r28
    125a:	76 df       	rcall	.-276    	; 0x1148 <ReadStatusBit>
    125c:	d8 0f       	add	r29, r24
    125e:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    1260:	c2 37       	cpi	r28, 0x72	; 114
    1262:	d1 f7       	brne	.-12     	; 0x1258 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    1264:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    1266:	11 f0       	breq	.+4      	; 0x126c <LoadGameState+0x26>
    1268:	c5 df       	rcall	.-118    	; 0x11f4 <Reset>
    } else getID();
    126a:	01 c0       	rjmp	.+2      	; 0x126e <LoadGameState+0x28>
    126c:	b5 df       	rcall	.-150    	; 0x11d8 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    126e:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <gameState+0x10>
    1272:	90 91 4a 3a 	lds	r25, 0x3A4A	; 0x803a4a <gameState+0x11>
    1276:	98 27       	eor	r25, r24
    1278:	89 27       	eor	r24, r25
    127a:	98 27       	eor	r25, r24
    127c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    1280:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1284:	80 91 4b 3a 	lds	r24, 0x3A4B	; 0x803a4b <gameState+0x12>
    1288:	90 91 4c 3a 	lds	r25, 0x3A4C	; 0x803a4c <gameState+0x13>
    128c:	98 27       	eor	r25, r24
    128e:	89 27       	eor	r24, r25
    1290:	98 27       	eor	r25, r24
    1292:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    1296:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    12a0:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    12a2:	86 e7       	ldi	r24, 0x76	; 118
    12a4:	89 df       	rcall	.-238    	; 0x11b8 <CheckState>
    12a6:	c8 2f       	mov	r28, r24
    12a8:	88 23       	and	r24, r24
    12aa:	81 f0       	breq	.+32     	; 0x12cc <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    12ac:	e0 91 71 b4 	lds	r30, 0xB471	; 0x80b471 <__bss_end+0x7967>
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	e6 54       	subi	r30, 0x46	; 70
    12b4:	f5 4c       	sbci	r31, 0xC5	; 197
    12b6:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    12b8:	e0 91 70 b4 	lds	r30, 0xB470	; 0x80b470 <__bss_end+0x7966>
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    12c2:	e6 54       	subi	r30, 0x46	; 70
    12c4:	f5 4c       	sbci	r31, 0xC5	; 197
    12c6:	80 83       	st	Z, r24
        return 1;
    12c8:	c1 e0       	ldi	r28, 0x01	; 1
    12ca:	4c c0       	rjmp	.+152    	; 0x1364 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    12cc:	85 e7       	ldi	r24, 0x75	; 117
    12ce:	74 df       	rcall	.-280    	; 0x11b8 <CheckState>
    12d0:	88 23       	and	r24, r24
    12d2:	59 f1       	breq	.+86     	; 0x132a <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    12d4:	e0 91 71 b4 	lds	r30, 0xB471	; 0x80b471 <__bss_end+0x7967>
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    12de:	e6 54       	subi	r30, 0x46	; 70
    12e0:	f5 4c       	sbci	r31, 0xC5	; 197
    12e2:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 8))) {
    12e4:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <cooledDown.3937>
    12e8:	88 23       	and	r24, r24
    12ea:	79 f0       	breq	.+30     	; 0x130a <HotSummer+0x6a>
    12ec:	80 91 98 3a 	lds	r24, 0x3A98	; 0x803a98 <calTemp>
    12f0:	90 91 99 3a 	lds	r25, 0x3A99	; 0x803a99 <calTemp+0x1>
    12f4:	20 91 e5 3a 	lds	r18, 0x3AE5	; 0x803ae5 <adcTemp>
    12f8:	30 91 e6 3a 	lds	r19, 0x3AE6	; 0x803ae6 <adcTemp+0x1>
    12fc:	08 96       	adiw	r24, 0x08	; 8
    12fe:	28 17       	cp	r18, r24
    1300:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1302:	18 f0       	brcs	.+6      	; 0x130a <HotSummer+0x6a>
    1304:	86 e7       	ldi	r24, 0x76	; 118
    1306:	4e df       	rcall	.-356    	; 0x11a4 <UpdateState>
            return 0;
    1308:	2d c0       	rjmp	.+90     	; 0x1364 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 2)) cooledDown = 1;
    130a:	80 91 98 3a 	lds	r24, 0x3A98	; 0x803a98 <calTemp>
    130e:	90 91 99 3a 	lds	r25, 0x3A99	; 0x803a99 <calTemp+0x1>
    1312:	20 91 e5 3a 	lds	r18, 0x3AE5	; 0x803ae5 <adcTemp>
    1316:	30 91 e6 3a 	lds	r19, 0x3AE6	; 0x803ae6 <adcTemp+0x1>
    131a:	02 96       	adiw	r24, 0x02	; 2
    131c:	82 17       	cp	r24, r18
    131e:	93 07       	cpc	r25, r19
    1320:	08 f1       	brcs	.+66     	; 0x1364 <HotSummer+0xc4>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <cooledDown.3937>
    1328:	1d c0       	rjmp	.+58     	; 0x1364 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    132a:	80 91 98 3a 	lds	r24, 0x3A98	; 0x803a98 <calTemp>
    132e:	90 91 99 3a 	lds	r25, 0x3A99	; 0x803a99 <calTemp+0x1>
    1332:	89 2b       	or	r24, r25
    1334:	41 f4       	brne	.+16     	; 0x1346 <HotSummer+0xa6>
    1336:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <adcTemp>
    133a:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <adcTemp+0x1>
    133e:	80 93 98 3a 	sts	0x3A98, r24	; 0x803a98 <calTemp>
    1342:	90 93 99 3a 	sts	0x3A99, r25	; 0x803a99 <calTemp+0x1>
        if (adcTemp >= (calTemp + 8)) {
    1346:	80 91 98 3a 	lds	r24, 0x3A98	; 0x803a98 <calTemp>
    134a:	90 91 99 3a 	lds	r25, 0x3A99	; 0x803a99 <calTemp+0x1>
    134e:	20 91 e5 3a 	lds	r18, 0x3AE5	; 0x803ae5 <adcTemp>
    1352:	30 91 e6 3a 	lds	r19, 0x3AE6	; 0x803ae6 <adcTemp+0x1>
    1356:	08 96       	adiw	r24, 0x08	; 8
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    135c:	18 f0       	brcs	.+6      	; 0x1364 <HotSummer+0xc4>
    135e:	85 e7       	ldi	r24, 0x75	; 117
    1360:	21 df       	rcall	.-446    	; 0x11a4 <UpdateState>
        }
    }
    return 0;
    1362:	c0 e0       	ldi	r28, 0x00	; 0
}
    1364:	8c 2f       	mov	r24, r28
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <GenerateAudio>:

uint8_t GenerateAudio(){
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29

    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
    1372:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1376:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    137a:	88 27       	eor	r24, r24
    137c:	89 2b       	or	r24, r25
    137e:	09 f0       	breq	.+2      	; 0x1382 <GenerateAudio+0x18>
    1380:	af c0       	rjmp	.+350    	; 0x14e0 <GenerateAudio+0x176>

        //Silence
        if ((effect&0xE0)==0){
    1382:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1386:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    138a:	80 7e       	andi	r24, 0xE0	; 224
    138c:	99 27       	eor	r25, r25
    138e:	89 2b       	or	r24, r25
    1390:	31 f4       	brne	.+12     	; 0x139e <GenerateAudio+0x34>
            auRepAddr = &zero;
    1392:	8b e2       	ldi	r24, 0x2B	; 43
    1394:	98 e3       	ldi	r25, 0x38	; 56
    1396:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    139a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
    139e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    13a2:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    13a6:	80 7e       	andi	r24, 0xE0	; 224
    13a8:	99 27       	eor	r25, r25
    13aa:	80 97       	sbiw	r24, 0x20	; 32
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <GenerateAudio+0x46>
    13ae:	45 c0       	rjmp	.+138    	; 0x143a <GenerateAudio+0xd0>
            static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 192, 255, 192, 128, 64, 1, 64, 1, 64, 128, 0}; 
            static uint8_t loudness, duration, start;

            if (buttonMark) {
    13b0:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    13b4:	88 23       	and	r24, r24
    13b6:	09 f4       	brne	.+2      	; 0x13ba <GenerateAudio+0x50>
    13b8:	40 c0       	rjmp	.+128    	; 0x143a <GenerateAudio+0xd0>
                if (start == 0) {
    13ba:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <start.3943>
    13be:	81 11       	cpse	r24, r1
    13c0:	15 c0       	rjmp	.+42     	; 0x13ec <GenerateAudio+0x82>
                    duration = 8;
    13c2:	88 e0       	ldi	r24, 0x08	; 8
    13c4:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <duration.3942>
                    loudness = 0xff;
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <loudness.3941>
                    TCB1_CCMP = 0x2000;
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e2       	ldi	r25, 0x20	; 32
    13d2:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    13d6:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    auRepAddr = &auBuffer[0];
    13da:	8b e0       	ldi	r24, 0x0B	; 11
    13dc:	98 e3       	ldi	r25, 0x38	; 56
    13de:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    13e2:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    start = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <start.3943>
                }

                if (loudness) {
    13ec:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <loudness.3941>
    13f0:	88 23       	and	r24, r24
    13f2:	71 f0       	breq	.+28     	; 0x1410 <GenerateAudio+0xa6>
                    auVolume = loudness;
    13f4:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <auVolume>
                    if (duration) duration--; else loudness <<= 1;
    13f8:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <duration.3942>
    13fc:	99 23       	and	r25, r25
    13fe:	21 f0       	breq	.+8      	; 0x1408 <GenerateAudio+0x9e>
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <duration.3942>
    1406:	19 c0       	rjmp	.+50     	; 0x143a <GenerateAudio+0xd0>
    1408:	88 0f       	add	r24, r24
    140a:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <loudness.3941>
    140e:	15 c0       	rjmp	.+42     	; 0x143a <GenerateAudio+0xd0>
                } else {
                    auRepAddr = &zero;
    1410:	8b e2       	ldi	r24, 0x2B	; 43
    1412:	98 e3       	ldi	r25, 0x38	; 56
    1414:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1418:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    effect &= 0x10;
    141c:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1420:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1424:	80 71       	andi	r24, 0x10	; 16
    1426:	99 27       	eor	r25, r25
    1428:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    142c:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                    auVolume = 255;
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <auVolume>
                    start = 0;
    1436:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <start.3943>
                }
            }
        }

        //Good (bell)
        if ((effect&0xE0)==64){
    143a:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    143e:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
    1442:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1446:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    144a:	80 7e       	andi	r24, 0xE0	; 224
    144c:	99 27       	eor	r25, r25
    144e:	80 36       	cpi	r24, 0x60	; 96
    1450:	91 05       	cpc	r25, r1
    1452:	d1 f5       	brne	.+116    	; 0x14c8 <GenerateAudio+0x15e>
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
    1454:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <auBuffer.3944+0x6>
            auRepAddr = &auBuffer[0];
    1458:	8d e3       	ldi	r24, 0x3D	; 61
    145a:	98 e3       	ldi	r25, 0x38	; 56
    145c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1460:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1464:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    1466:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1468:	d3 e0       	ldi	r29, 0x03	; 3
    146a:	8c 2f       	mov	r24, r28
    146c:	6d 2f       	mov	r22, r29
    146e:	0e 94 df 19 	call	0x33be	; 0x33be <__udivmodqi4>
    1472:	99 23       	and	r25, r25
    1474:	39 f0       	breq	.+14     	; 0x1484 <GenerateAudio+0x11a>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	41 e0       	ldi	r20, 0x01	; 1
    147a:	65 e0       	ldi	r22, 0x05	; 5
    147c:	80 e8       	ldi	r24, 0x80	; 128
    147e:	cc dd       	rcall	.-1128   	; 0x1018 <floatAround>
    1480:	f8 01       	movw	r30, r16
    1482:	81 83       	std	Z+1, r24	; 0x01
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    1484:	cf 5f       	subi	r28, 0xFF	; 255
    1486:	0f 5f       	subi	r16, 0xFF	; 255
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	c6 30       	cpi	r28, 0x06	; 6
    148c:	71 f7       	brne	.-36     	; 0x146a <GenerateAudio+0x100>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
    148e:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    1492:	88 23       	and	r24, r24
    1494:	c9 f0       	breq	.+50     	; 0x14c8 <GenerateAudio+0x15e>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	54 e0       	ldi	r21, 0x04	; 4
    149a:	60 e8       	ldi	r22, 0x80	; 128
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	85 e0       	ldi	r24, 0x05	; 5
    14a0:	89 dd       	rcall	.-1262   	; 0xfb4 <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    14a2:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <auVolume>
    14a6:	20 ea       	ldi	r18, 0xA0	; 160
    14a8:	40 e1       	ldi	r20, 0x10	; 16
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	b5 dd       	rcall	.-1174   	; 0x1018 <floatAround>
    14ae:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    14b2:	20 e9       	ldi	r18, 0x90	; 144
    14b4:	40 e7       	ldi	r20, 0x70	; 112
    14b6:	62 e0       	ldi	r22, 0x02	; 2
    14b8:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <auBuffer.3944>
    14bc:	ad dd       	rcall	.-1190   	; 0x1018 <floatAround>
    14be:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <auBuffer.3944>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    14c2:	80 95       	com	r24
    14c4:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <auBuffer.3944+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
    14c8:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14cc:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
    14d0:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14d4:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
    14d8:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14dc:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
        //Rain storm with whistling wind
        else {
        }
    }

    return buttonMark;
    14e0:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	08 95       	ret

000014f2 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	62 97       	sbiw	r28, 0x12	; 18
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	8a 8b       	std	Y+18, r24	; 0x12
    1504:	80 e1       	ldi	r24, 0x10	; 16
    1506:	e6 e4       	ldi	r30, 0x46	; 70
    1508:	f4 eb       	ldi	r31, 0xB4	; 180
    150a:	de 01       	movw	r26, r28
    150c:	11 96       	adiw	r26, 0x01	; 1
    150e:	01 90       	ld	r0, Z+
    1510:	0d 92       	st	X+, r0
    1512:	8a 95       	dec	r24
    1514:	e1 f7       	brne	.-8      	; 0x150e <Cheat+0x1c>
    1516:	fe 01       	movw	r30, r28
    1518:	31 96       	adiw	r30, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	21 91       	ld	r18, Z+
    1520:	31 91       	ld	r19, Z+
    1522:	26 17       	cp	r18, r22
    1524:	37 07       	cpc	r19, r23
    1526:	09 f4       	brne	.+2      	; 0x152a <Cheat+0x38>
    1528:	89 2f       	mov	r24, r25
    152a:	9f 5f       	subi	r25, 0xFF	; 255
    152c:	98 30       	cpi	r25, 0x08	; 8
    152e:	b9 f7       	brne	.-18     	; 0x151e <Cheat+0x2c>
    1530:	88 30       	cpi	r24, 0x08	; 8
    1532:	10 f0       	brcs	.+4      	; 0x1538 <Cheat+0x46>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	12 c0       	rjmp	.+36     	; 0x155c <Cheat+0x6a>
    1538:	18 e1       	ldi	r17, 0x18	; 24
    153a:	18 0f       	add	r17, r24
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	be 01       	movw	r22, r28
    1540:	6f 5e       	subi	r22, 0xEF	; 239
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	81 2f       	mov	r24, r17
    1546:	61 dc       	rcall	.-1854   	; 0xe0a <EERead>
    1548:	89 89       	ldd	r24, Y+17	; 0x11
    154a:	8f 3f       	cpi	r24, 0xFF	; 255
    154c:	99 f7       	brne	.-26     	; 0x1534 <Cheat+0x42>
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	be 01       	movw	r22, r28
    1552:	6e 5e       	subi	r22, 0xEE	; 238
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	81 2f       	mov	r24, r17
    1558:	68 dc       	rcall	.-1840   	; 0xe2a <EEWrite>
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	62 96       	adiw	r28, 0x12	; 18
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	08 95       	ret

0000156a <DecryptData>:
    156a:	f9 01       	movw	r30, r18
    156c:	9c 01       	movw	r18, r24
    156e:	2e 1b       	sub	r18, r30
    1570:	3f 0b       	sbc	r19, r31
    1572:	88 e0       	ldi	r24, 0x08	; 8
    1574:	48 9f       	mul	r20, r24
    1576:	a0 01       	movw	r20, r0
    1578:	11 24       	eor	r1, r1
    157a:	40 5f       	subi	r20, 0xF0	; 240
    157c:	5a 44       	sbci	r21, 0x4A	; 74
    157e:	66 23       	and	r22, r22
    1580:	69 f0       	breq	.+26     	; 0x159c <DecryptData+0x32>
    1582:	df 01       	movw	r26, r30
    1584:	a2 0f       	add	r26, r18
    1586:	b3 1f       	adc	r27, r19
    1588:	a7 70       	andi	r26, 0x07	; 7
    158a:	bb 27       	eor	r27, r27
    158c:	a4 0f       	add	r26, r20
    158e:	b5 1f       	adc	r27, r21
    1590:	80 81       	ld	r24, Z
    1592:	9c 91       	ld	r25, X
    1594:	98 27       	eor	r25, r24
    1596:	91 93       	st	Z+, r25
    1598:	61 50       	subi	r22, 0x01	; 1
    159a:	f1 cf       	rjmp	.-30     	; 0x157e <DecryptData+0x14>
    159c:	08 95       	ret

0000159e <UnflipData>:
    159e:	26 2f       	mov	r18, r22
    15a0:	fb 01       	movw	r30, r22
    15a2:	35 e5       	ldi	r19, 0x55	; 85
    15a4:	9e 2f       	mov	r25, r30
    15a6:	92 1b       	sub	r25, r18
    15a8:	98 17       	cp	r25, r24
    15aa:	28 f4       	brcc	.+10     	; 0x15b6 <UnflipData+0x18>
    15ac:	90 81       	ld	r25, Z
    15ae:	92 95       	swap	r25
    15b0:	93 27       	eor	r25, r19
    15b2:	91 93       	st	Z+, r25
    15b4:	f7 cf       	rjmp	.-18     	; 0x15a4 <UnflipData+0x6>
    15b6:	08 95       	ret

000015b8 <ExtEERead>:
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <ExtEERead+0x16>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	d6 2e       	mov	r13, r22
    15d4:	c4 2e       	mov	r12, r20
    15d6:	59 01       	movw	r10, r18
    15d8:	7c 01       	movw	r14, r24
    15da:	e8 94       	clt
    15dc:	f7 f8       	bld	r15, 7
    15de:	f9 82       	std	Y+1, r15	; 0x01
    15e0:	ea 82       	std	Y+2, r14	; 0x02
    15e2:	06 2f       	mov	r16, r22
    15e4:	42 e0       	ldi	r20, 0x02	; 2
    15e6:	be 01       	movw	r22, r28
    15e8:	6f 5f       	subi	r22, 0xFF	; 255
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	80 e5       	ldi	r24, 0x50	; 80
    15ee:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <I2C_read_bytes>
    15f2:	18 2f       	mov	r17, r24
    15f4:	81 11       	cpse	r24, r1
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <ExtEERead+0x4a>
    15f8:	95 01       	movw	r18, r10
    15fa:	4c 2d       	mov	r20, r12
    15fc:	6d 2d       	mov	r22, r13
    15fe:	c7 01       	movw	r24, r14
    1600:	b4 df       	rcall	.-152    	; 0x156a <DecryptData>
    1602:	81 2f       	mov	r24, r17
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
    1618:	bf 90       	pop	r11
    161a:	af 90       	pop	r10
    161c:	08 95       	ret

0000161e <ClearTxAfter>:
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	30 f4       	brcc	.+12     	; 0x1630 <ClearTxAfter+0x12>
    1624:	e8 2f       	mov	r30, r24
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	e0 5e       	subi	r30, 0xE0	; 224
    162a:	f5 4c       	sbci	r31, 0xC5	; 197
    162c:	10 82       	st	Z, r1
    162e:	f7 cf       	rjmp	.-18     	; 0x161e <ClearTxAfter>
    1630:	08 95       	ret

00001632 <StartsWith>:
    1632:	ac 01       	movw	r20, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	e9 2f       	mov	r30, r25
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	da 01       	movw	r26, r20
    163c:	ae 0f       	add	r26, r30
    163e:	bf 1f       	adc	r27, r31
    1640:	3c 91       	ld	r19, X
    1642:	e6 0f       	add	r30, r22
    1644:	f7 1f       	adc	r31, r23
    1646:	31 11       	cpse	r19, r1
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <StartsWith+0x22>
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 81       	ld	r25, Z
    164e:	99 23       	and	r25, r25
    1650:	49 f0       	breq	.+18     	; 0x1664 <StartsWith+0x32>
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <StartsWith+0x30>
    1654:	20 81       	ld	r18, Z
    1656:	22 23       	and	r18, r18
    1658:	c1 f3       	breq	.-16     	; 0x164a <StartsWith+0x18>
    165a:	32 13       	cpse	r19, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <StartsWith+0x30>
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	ea cf       	rjmp	.-44     	; 0x1636 <StartsWith+0x4>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	08 95       	ret

00001666 <PrepareSending>:
    1666:	61 15       	cp	r22, r1
    1668:	71 05       	cpc	r23, r1
    166a:	51 f1       	breq	.+84     	; 0x16c0 <PrepareSending+0x5a>
    166c:	e8 e2       	ldi	r30, 0x28	; 40
    166e:	fa e3       	ldi	r31, 0x3A	; 58
    1670:	a0 e2       	ldi	r26, 0x20	; 32
    1672:	ba e3       	ldi	r27, 0x3A	; 58
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	6f 3f       	cpi	r22, 0xFF	; 255
    167a:	71 05       	cpc	r23, r1
    167c:	69 f0       	breq	.+26     	; 0x1698 <PrepareSending+0x32>
    167e:	60 f0       	brcs	.+24     	; 0x1698 <PrepareSending+0x32>
    1680:	81 93       	st	Z+, r24
    1682:	91 93       	st	Z+, r25
    1684:	3d 93       	st	X+, r19
    1686:	81 50       	subi	r24, 0x01	; 1
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	6f 5f       	subi	r22, 0xFF	; 255
    168c:	71 09       	sbc	r23, r1
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	27 30       	cpi	r18, 0x07	; 7
    1692:	91 f7       	brne	.-28     	; 0x1678 <PrepareSending+0x12>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	08 95       	ret
    1698:	e2 2f       	mov	r30, r18
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	df 01       	movw	r26, r30
    169e:	aa 0f       	add	r26, r26
    16a0:	bb 1f       	adc	r27, r27
    16a2:	a8 5d       	subi	r26, 0xD8	; 216
    16a4:	b5 4c       	sbci	r27, 0xC5	; 197
    16a6:	8d 93       	st	X+, r24
    16a8:	9c 93       	st	X, r25
    16aa:	e0 5e       	subi	r30, 0xE0	; 224
    16ac:	f5 4c       	sbci	r31, 0xC5	; 197
    16ae:	cb 01       	movw	r24, r22
    16b0:	6f ef       	ldi	r22, 0xFF	; 255
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__udivmodhi4>
    16b8:	80 83       	st	Z, r24
    16ba:	40 93 1e 3a 	sts	0x3A1E, r20	; 0x803a1e <txTypeNow>
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <PrepareSending+0x64>
    16c0:	10 92 28 3a 	sts	0x3A28, r1	; 0x803a28 <txAddrList>
    16c4:	10 92 29 3a 	sts	0x3A29, r1	; 0x803a29 <txAddrList+0x1>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	82 2f       	mov	r24, r18
    16cc:	a8 df       	rcall	.-176    	; 0x161e <ClearTxAfter>
    16ce:	10 92 1f 3a 	sts	0x3A1F, r1	; 0x803a1f <txAddrNow>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	08 95       	ret

000016d6 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	f9 01       	movw	r30, r18
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	ed 50       	subi	r30, 0x0D	; 13
    16e6:	f7 4c       	sbci	r31, 0xC7	; 199
    16e8:	ab e5       	ldi	r26, 0x5B	; 91
    16ea:	ba e7       	ldi	r27, 0x7A	; 122
    16ec:	a0 83       	st	Z, r26
    16ee:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    16f0:	f9 01       	movw	r30, r18
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ed 5c       	subi	r30, 0xCD	; 205
    16f8:	f6 4c       	sbci	r31, 0xC6	; 198
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	60 83       	st	Z, r22
    1700:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	f9 01       	movw	r30, r18
    1708:	ed 58       	subi	r30, 0x8D	; 141
    170a:	f6 4c       	sbci	r31, 0xC6	; 198
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	40 83       	st	Z, r20
    1712:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1714:	21 e0       	ldi	r18, 0x01	; 1
    1716:	28 0f       	add	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	f9 01       	movw	r30, r18
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	ed 50       	subi	r30, 0x0D	; 13
    1722:	f7 4c       	sbci	r31, 0xC7	; 199
    1724:	c4 e6       	ldi	r28, 0x64	; 100
    1726:	da e7       	ldi	r29, 0x7A	; 122
    1728:	c0 83       	st	Z, r28
    172a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    172c:	f9 01       	movw	r30, r18
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	ed 5c       	subi	r30, 0xCD	; 205
    1734:	f6 4c       	sbci	r31, 0xC6	; 198
    1736:	ca e0       	ldi	r28, 0x0A	; 10
    1738:	d0 e0       	ldi	r29, 0x00	; 0
    173a:	c0 83       	st	Z, r28
    173c:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    173e:	22 0f       	add	r18, r18
    1740:	33 1f       	adc	r19, r19
    1742:	f9 01       	movw	r30, r18
    1744:	ed 58       	subi	r30, 0x8D	; 141
    1746:	f6 4c       	sbci	r31, 0xC6	; 198
    1748:	40 83       	st	Z, r20
    174a:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    174c:	e2 e0       	ldi	r30, 0x02	; 2
    174e:	e8 0f       	add	r30, r24
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	ed 50       	subi	r30, 0x0D	; 13
    1758:	f7 4c       	sbci	r31, 0xC7	; 199
    175a:	20 ef       	ldi	r18, 0xF0	; 240
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	20 83       	st	Z, r18
    1760:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1762:	23 e0       	ldi	r18, 0x03	; 3
    1764:	28 0f       	add	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	f9 01       	movw	r30, r18
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	ed 50       	subi	r30, 0x0D	; 13
    1770:	f7 4c       	sbci	r31, 0xC7	; 199
    1772:	a0 83       	st	Z, r26
    1774:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1776:	f9 01       	movw	r30, r18
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	ed 5c       	subi	r30, 0xCD	; 205
    177e:	f6 4c       	sbci	r31, 0xC6	; 198
    1780:	60 83       	st	Z, r22
    1782:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1784:	22 0f       	add	r18, r18
    1786:	33 1f       	adc	r19, r19
    1788:	f9 01       	movw	r30, r18
    178a:	ed 58       	subi	r30, 0x8D	; 141
    178c:	f6 4c       	sbci	r31, 0xC6	; 198
    178e:	40 83       	st	Z, r20
    1790:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1792:	24 e0       	ldi	r18, 0x04	; 4
    1794:	28 0f       	add	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	f9 01       	movw	r30, r18
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	ed 50       	subi	r30, 0x0D	; 13
    17a0:	f7 4c       	sbci	r31, 0xC7	; 199
    17a2:	a7 e5       	ldi	r26, 0x57	; 87
    17a4:	ba e7       	ldi	r27, 0x7A	; 122
    17a6:	a0 83       	st	Z, r26
    17a8:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    17aa:	f9 01       	movw	r30, r18
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	ed 5c       	subi	r30, 0xCD	; 205
    17b2:	f6 4c       	sbci	r31, 0xC6	; 198
    17b4:	60 83       	st	Z, r22
    17b6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	f9 01       	movw	r30, r18
    17be:	ed 58       	subi	r30, 0x8D	; 141
    17c0:	f6 4c       	sbci	r31, 0xC6	; 198
    17c2:	40 83       	st	Z, r20
    17c4:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    17c6:	8b 5f       	subi	r24, 0xFB	; 251
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    17ce:	af 92       	push	r10
    17d0:	bf 92       	push	r11
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	2c 97       	sbiw	r28, 0x0c	; 12
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	7c 01       	movw	r14, r24
    17ec:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    17ee:	9e 01       	movw	r18, r28
    17f0:	2f 5f       	subi	r18, 0xFF	; 255
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	6c e0       	ldi	r22, 0x0C	; 12
    17f8:	80 96       	adiw	r24, 0x20	; 32
    17fa:	de de       	rcall	.-580    	; 0x15b8 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	98 27       	eor	r25, r24
    1802:	89 27       	eor	r24, r25
    1804:	98 27       	eor	r25, r24
    1806:	80 96       	adiw	r24, 0x20	; 32
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	98 27       	eor	r25, r24
    1814:	89 27       	eor	r24, r25
    1816:	98 27       	eor	r25, r24
    1818:	80 96       	adiw	r24, 0x20	; 32
    181a:	82 83       	std	Z+2, r24	; 0x02
    181c:	93 83       	std	Z+3, r25	; 0x03
    181e:	de 01       	movw	r26, r28
    1820:	15 96       	adiw	r26, 0x05	; 5
    1822:	34 96       	adiw	r30, 0x04	; 4
    1824:	c8 01       	movw	r24, r16
    1826:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1828:	2d 91       	ld	r18, X+
    182a:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    182c:	e8 17       	cp	r30, r24
    182e:	f9 07       	cpc	r31, r25
    1830:	d9 f7       	brne	.-10     	; 0x1828 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1832:	fc e2       	ldi	r31, 0x2C	; 44
    1834:	ef 0e       	add	r14, r31
    1836:	f1 1c       	adc	r15, r1
    1838:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    183a:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    183c:	9e 01       	movw	r18, r28
    183e:	2f 5f       	subi	r18, 0xFF	; 255
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	63 e0       	ldi	r22, 0x03	; 3
    1846:	c7 01       	movw	r24, r14
    1848:	b7 de       	rcall	.-658    	; 0x15b8 <ExtEERead>
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	98 27       	eor	r25, r24
    1850:	89 27       	eor	r24, r25
    1852:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1854:	97 01       	movw	r18, r14
    1856:	2e 5f       	subi	r18, 0xFE	; 254
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    185a:	43 e0       	ldi	r20, 0x03	; 3
    185c:	4d 15       	cp	r20, r13
    185e:	80 f4       	brcc	.+32     	; 0x1880 <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1860:	ac 01       	movw	r20, r24
    1862:	41 50       	subi	r20, 0x01	; 1
    1864:	51 09       	sbc	r21, r1
    1866:	f8 01       	movw	r30, r16
    1868:	42 8f       	std	Z+26, r20	; 0x1a
    186a:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    186c:	f3 e0       	ldi	r31, 0x03	; 3
    186e:	ef 0e       	add	r14, r31
    1870:	f1 1c       	adc	r15, r1
    1872:	f8 01       	movw	r30, r16
    1874:	e4 86       	std	Z+12, r14	; 0x0c
    1876:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1878:	4b 81       	ldd	r20, Y+3	; 0x03
    187a:	f5 01       	movw	r30, r10
    187c:	44 a3       	std	Z+36, r20	; 0x24
    187e:	05 c0       	rjmp	.+10     	; 0x188a <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1880:	f8 01       	movw	r30, r16
    1882:	82 8f       	std	Z+26, r24	; 0x1a
    1884:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1886:	24 87       	std	Z+12, r18	; 0x0c
    1888:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    188a:	7c 01       	movw	r14, r24
    188c:	e2 0e       	add	r14, r18
    188e:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1890:	d3 94       	inc	r13
    1892:	0e 5f       	subi	r16, 0xFE	; 254
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	ff ef       	ldi	r31, 0xFF	; 255
    1898:	af 1a       	sub	r10, r31
    189a:	bf 0a       	sbc	r11, r31
    189c:	47 e0       	ldi	r20, 0x07	; 7
    189e:	d4 12       	cpse	r13, r20
    18a0:	cd cf       	rjmp	.-102    	; 0x183c <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    18a2:	2c 96       	adiw	r28, 0x0c	; 12
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	ff 90       	pop	r15
    18b2:	ef 90       	pop	r14
    18b4:	df 90       	pop	r13
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	08 95       	ret

000018bc <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	a0 97       	sbiw	r28, 0x20	; 32
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    18d8:	7c 01       	movw	r14, r24
    18da:	20 e2       	ldi	r18, 0x20	; 32
    18dc:	e2 0e       	add	r14, r18
    18de:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    18e0:	9e 01       	movw	r18, r28
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	62 e0       	ldi	r22, 0x02	; 2
    18ea:	8c 96       	adiw	r24, 0x2c	; 44
    18ec:	65 de       	rcall	.-822    	; 0x15b8 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    18ee:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    18f0:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    18f2:	11 23       	and	r17, r17
    18f4:	51 f1       	breq	.+84     	; 0x194a <CheckLetter+0x8e>
    18f6:	01 2f       	mov	r16, r17
    18f8:	11 32       	cpi	r17, 0x21	; 33
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <CheckLetter+0x42>
    18fc:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    18fe:	9e 01       	movw	r18, r28
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	60 2f       	mov	r22, r16
    1908:	c7 01       	movw	r24, r14
    190a:	0e 96       	adiw	r24, 0x0e	; 14
    190c:	55 de       	rcall	.-854    	; 0x15b8 <ExtEERead>
    190e:	fe 01       	movw	r30, r28
    1910:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1912:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1914:	dd 20       	and	r13, r13
    1916:	61 f0       	breq	.+24     	; 0x1930 <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1918:	e1 e0       	ldi	r30, 0x01	; 1
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	ec 0f       	add	r30, r28
    191e:	fd 1f       	adc	r31, r29
    1920:	e8 0f       	add	r30, r24
    1922:	f1 1d       	adc	r31, r1
    1924:	90 81       	ld	r25, Z
    1926:	90 62       	ori	r25, 0x20	; 32
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	9c 11       	cpse	r25, r12
    192c:	0e c0       	rjmp	.+28     	; 0x194a <CheckLetter+0x8e>
    192e:	0e c0       	rjmp	.+28     	; 0x194c <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    1930:	91 91       	ld	r25, Z+
    1932:	dd 24       	eor	r13, r13
    1934:	d3 94       	inc	r13
    1936:	9b 35       	cpi	r25, 0x5B	; 91
    1938:	09 f0       	breq	.+2      	; 0x193c <CheckLetter+0x80>
    193a:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 17       	cp	r24, r16
    1940:	48 f3       	brcs	.-46     	; 0x1914 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1942:	e0 0e       	add	r14, r16
    1944:	f1 1c       	adc	r15, r1
        x -= max;
    1946:	10 1b       	sub	r17, r16
    1948:	d4 cf       	rjmp	.-88     	; 0x18f2 <CheckLetter+0x36>
    }
    return 0;
    194a:	80 e0       	ldi	r24, 0x00	; 0
}
    194c:	a0 96       	adiw	r28, 0x20	; 32
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	08 95       	ret

00001964 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1964:	af 92       	push	r10
    1966:	bf 92       	push	r11
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	00 d0       	rcall	.+0      	; 0x1978 <FindChild+0x14>
    1978:	00 d0       	rcall	.+0      	; 0x197a <FindChild+0x16>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	d6 2e       	mov	r13, r22
    1980:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1982:	9e 01       	movw	r18, r28
    1984:	2f 5f       	subi	r18, 0xFF	; 255
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	64 e0       	ldi	r22, 0x04	; 4
    198c:	80 96       	adiw	r24, 0x20	; 32
    198e:	14 de       	rcall	.-984    	; 0x15b8 <ExtEERead>
    1990:	e9 80       	ldd	r14, Y+1	; 0x01
    1992:	fa 80       	ldd	r15, Y+2	; 0x02
    1994:	fe 24       	eor	r15, r14
    1996:	ef 24       	eor	r14, r15
    1998:	fe 24       	eor	r15, r14
    199a:	0b 81       	ldd	r16, Y+3	; 0x03
    199c:	1c 81       	ldd	r17, Y+4	; 0x04
    199e:	10 27       	eor	r17, r16
    19a0:	01 27       	eor	r16, r17
    19a2:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    19a4:	0e 15       	cp	r16, r14
    19a6:	1f 05       	cpc	r17, r15
    19a8:	30 f5       	brcc	.+76     	; 0x19f6 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    19aa:	a0 16       	cp	r10, r16
    19ac:	b1 06       	cpc	r11, r17
    19ae:	58 f0       	brcs	.+22     	; 0x19c6 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    19b0:	9e 01       	movw	r18, r28
    19b2:	2f 5f       	subi	r18, 0xFF	; 255
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	62 e0       	ldi	r22, 0x02	; 2
    19ba:	c8 01       	movw	r24, r16
    19bc:	80 96       	adiw	r24, 0x20	; 32
    19be:	fc dd       	rcall	.-1032   	; 0x15b8 <ExtEERead>
    19c0:	09 81       	ldd	r16, Y+1	; 0x01
    19c2:	1a 81       	ldd	r17, Y+2	; 0x02
    19c4:	ec cf       	rjmp	.-40     	; 0x199e <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    19c6:	9e 01       	movw	r18, r28
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	c8 01       	movw	r24, r16
    19d2:	85 96       	adiw	r24, 0x25	; 37
    19d4:	f1 dd       	rcall	.-1054   	; 0x15b8 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	81 11       	cpse	r24, r1
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    19dc:	d1 10       	cpse	r13, r1
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    19e0:	0d c0       	rjmp	.+26     	; 0x19fc <FindChild+0x98>
    19e2:	ea db       	rcall	.-2092   	; 0x11b8 <CheckState>
    19e4:	81 11       	cpse	r24, r1
    19e6:	fa cf       	rjmp	.-12     	; 0x19dc <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    19e8:	e3 cf       	rjmp	.-58     	; 0x19b0 <FindChild+0x4c>
    19ea:	6d 2d       	mov	r22, r13
    19ec:	c8 01       	movw	r24, r16
    19ee:	66 df       	rcall	.-308    	; 0x18bc <CheckLetter>
    19f0:	88 23       	and	r24, r24
    19f2:	f1 f2       	breq	.-68     	; 0x19b0 <FindChild+0x4c>
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <FindChild+0x9a>
    19fc:	c8 01       	movw	r24, r16
}
    19fe:	24 96       	adiw	r28, 0x04	; 4
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	df 90       	pop	r13
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	08 95       	ret

00001a18 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1a18:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1a1a:	9f e9       	ldi	r25, 0x9F	; 159
    1a1c:	98 0f       	add	r25, r24
    1a1e:	9a 31       	cpi	r25, 0x1A	; 26
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <InpOkChk+0x18>
    1a22:	90 ed       	ldi	r25, 0xD0	; 208
    1a24:	98 0f       	add	r25, r24
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	9a 30       	cpi	r25, 0x0A	; 10
    1a2a:	18 f0       	brcs	.+6      	; 0x1a32 <InpOkChk+0x1a>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	08 95       	ret
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1a32:	08 95       	ret

00001a34 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1a3e:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    1a40:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1a42:	f8 01       	movw	r30, r16
    1a44:	ed 0f       	add	r30, r29
    1a46:	f1 1d       	adc	r31, r1
    1a48:	20 81       	ld	r18, Z
    1a4a:	8c 2f       	mov	r24, r28
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	22 23       	and	r18, r18
    1a50:	51 f0       	breq	.+20     	; 0x1a66 <CleanInput+0x32>
        data[cnt] = data[x];
    1a52:	d8 01       	movw	r26, r16
    1a54:	a8 0f       	add	r26, r24
    1a56:	b9 1f       	adc	r27, r25
    1a58:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1a5a:	80 81       	ld	r24, Z
    1a5c:	dd df       	rcall	.-70     	; 0x1a18 <InpOkChk>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1a62:	df 5f       	subi	r29, 0xFF	; 255
    1a64:	ee cf       	rjmp	.-36     	; 0x1a42 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1a66:	f8 01       	movw	r30, r16
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	10 82       	st	Z, r1
    return cnt;
}
    1a6e:	8c 2f       	mov	r24, r28
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1a7a:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    1a7c:	20 91 1f 3a 	lds	r18, 0x3A1F	; 0x803a1f <txAddrNow>
    1a80:	28 30       	cpi	r18, 0x08	; 8
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <CheckSend+0xc>
    1a84:	47 c0       	rjmp	.+142    	; 0x1b14 <CheckSend+0x9a>
    1a86:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <CheckSend+0x16>
    1a8e:	42 c0       	rjmp	.+132    	; 0x1b14 <CheckSend+0x9a>
        if (txStrLen[txAddrNow] == 0){
    1a90:	82 2f       	mov	r24, r18
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	e0 5e       	subi	r30, 0xE0	; 224
    1a98:	f5 4c       	sbci	r31, 0xC5	; 197
    1a9a:	e0 81       	ld	r30, Z
    1a9c:	e1 11       	cpse	r30, r1
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <CheckSend+0x32>
            txPart = 0;
    1aa0:	10 92 e0 38 	sts	0x38E0, r1	; 0x8038e0 <txPart.3936>
            txAddrNow = TXLISTLEN;
    1aa4:	88 e0       	ldi	r24, 0x08	; 8
    1aa6:	80 93 1f 3a 	sts	0x3A1F, r24	; 0x803a1f <txAddrNow>
    1aaa:	2c c0       	rjmp	.+88     	; 0x1b04 <CheckSend+0x8a>
        } else if (txPart < txStrLen[txAddrNow]){
    1aac:	50 91 e0 38 	lds	r21, 0x38E0	; 0x8038e0 <txPart.3936>
    1ab0:	5e 17       	cp	r21, r30
    1ab2:	50 f5       	brcc	.+84     	; 0x1b08 <CheckSend+0x8e>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    1ab4:	ce 2f       	mov	r28, r30
    1ab6:	c5 1b       	sub	r28, r21
    1ab8:	c1 32       	cpi	r28, 0x21	; 33
    1aba:	08 f0       	brcs	.+2      	; 0x1abe <CheckSend+0x44>
    1abc:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	e8 5d       	subi	r30, 0xD8	; 216
    1ac6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	29 ee       	ldi	r18, 0xE9	; 233
    1ace:	3a e3       	ldi	r19, 0x3A	; 58
    1ad0:	40 91 1e 3a 	lds	r20, 0x3A1E	; 0x803a1e <txTypeNow>
    1ad4:	6c 2f       	mov	r22, r28
    1ad6:	85 0f       	add	r24, r21
    1ad8:	91 1d       	adc	r25, r1
    1ada:	6e dd       	rcall	.-1316   	; 0x15b8 <ExtEERead>
            txPart += EEreadLength;
    1adc:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <txPart.3936>
    1ae0:	8c 0f       	add	r24, r28
    1ae2:	80 93 e0 38 	sts	0x38E0, r24	; 0x8038e0 <txPart.3936>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1ae6:	ec 2f       	mov	r30, r28
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	e7 51       	subi	r30, 0x17	; 23
    1aec:	f5 4c       	sbci	r31, 0xC5	; 197
    1aee:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    1af0:	80 91 e9 3a 	lds	r24, 0x3AE9	; 0x803ae9 <txBuffer>
    1af4:	81 11       	cpse	r24, r1
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <CheckSend+0x84>
    1af8:	8b ed       	ldi	r24, 0xDB	; 219
    1afa:	80 93 e9 3a 	sts	0x3AE9, r24	; 0x803ae9 <txBuffer>
            SerSend(&txBuffer[0]);
    1afe:	89 ee       	ldi	r24, 0xE9	; 233
    1b00:	9a e3       	ldi	r25, 0x3A	; 58
    1b02:	bb d9       	rcall	.-3210   	; 0xe7a <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	0b c0       	rjmp	.+22     	; 0x1b1e <CheckSend+0xa4>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1b08:	10 92 e0 38 	sts	0x38E0, r1	; 0x8038e0 <txPart.3936>
            ++txAddrNow;
    1b0c:	2f 5f       	subi	r18, 0xFF	; 255
    1b0e:	20 93 1f 3a 	sts	0x3A1F, r18	; 0x803a1f <txAddrNow>
    1b12:	f8 cf       	rjmp	.-16     	; 0x1b04 <CheckSend+0x8a>
        }
    } else if (serTxDone) return 0; //All is sent!
    1b14:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <serTxDone>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	91 11       	cpse	r25, r1
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1b26:	c0 91 f2 38 	lds	r28, 0x38F2	; 0x8038f2 <responseList>
    1b2a:	cc 23       	and	r28, r28
    1b2c:	e9 f1       	breq	.+122    	; 0x1ba8 <CheckResponse+0x86>
        --responseList;
    1b2e:	c1 50       	subi	r28, 0x01	; 1
    1b30:	c0 93 f2 38 	sts	0x38F2, r28	; 0x8038f2 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1b34:	d0 91 df 38 	lds	r29, 0x38DF	; 0x8038df <number.3940>
    1b38:	2d 2f       	mov	r18, r29
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	ed 50       	subi	r30, 0x0D	; 13
    1b44:	f7 4c       	sbci	r31, 0xC7	; 199
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	80 3f       	cpi	r24, 0xF0	; 240
    1b4c:	4f ef       	ldi	r20, 0xFF	; 255
    1b4e:	94 07       	cpc	r25, r20
    1b50:	51 f4       	brne	.+20     	; 0x1b66 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    1b52:	60 91 0d 3a 	lds	r22, 0x3A0D	; 0x803a0d <currObj+0x1a>
    1b56:	70 91 0e 3a 	lds	r23, 0x3A0E	; 0x803a0e <currObj+0x1b>
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	80 91 ff 39 	lds	r24, 0x39FF	; 0x8039ff <currObj+0xc>
    1b60:	90 91 00 3a 	lds	r25, 0x3A00	; 0x803a00 <currObj+0xd>
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    1b66:	d9 01       	movw	r26, r18
    1b68:	aa 0f       	add	r26, r26
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	ad 58       	subi	r26, 0x8D	; 141
    1b6e:	b6 4c       	sbci	r27, 0xC6	; 198
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	f9 01       	movw	r30, r18
    1b76:	ed 5c       	subi	r30, 0xCD	; 205
    1b78:	f6 4c       	sbci	r31, 0xC6	; 198
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	4c 91       	ld	r20, X
    1b80:	72 dd       	rcall	.-1308   	; 0x1666 <PrepareSending>
        }
        ++number;
    1b82:	df 5f       	subi	r29, 0xFF	; 255
    1b84:	d0 93 df 38 	sts	0x38DF, r29	; 0x8038df <number.3940>

        if (responseList == 0) {
    1b88:	c1 11       	cpse	r28, r1
    1b8a:	0d c0       	rjmp	.+26     	; 0x1ba6 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    1b8c:	80 91 f7 39 	lds	r24, 0x39F7	; 0x8039f7 <currObj+0x4>
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1b96:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
            RXCNT = 0;
    1b9a:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    1b9c:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
            number = 0;
    1ba0:	10 92 df 38 	sts	0x38DF, r1	; 0x8038df <number.3940>
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    1ba6:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    1ba8:	8c 2f       	mov	r24, r28
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    1bb0:	4f 92       	push	r4
    1bb2:	5f 92       	push	r5
    1bb4:	6f 92       	push	r6
    1bb6:	7f 92       	push	r7
    1bb8:	8f 92       	push	r8
    1bba:	9f 92       	push	r9
    1bbc:	af 92       	push	r10
    1bbe:	bf 92       	push	r11
    1bc0:	cf 92       	push	r12
    1bc2:	df 92       	push	r13
    1bc4:	ef 92       	push	r14
    1bc6:	ff 92       	push	r15
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	cf 93       	push	r28
    1bce:	df 93       	push	r29
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	a1 97       	sbiw	r28, 0x21	; 33
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    1bdc:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    1be0:	8f 3f       	cpi	r24, 0xFF	; 255
    1be2:	49 f4       	brne	.+18     	; 0x1bf6 <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    1be4:	63 ef       	ldi	r22, 0xF3	; 243
    1be6:	79 e3       	ldi	r23, 0x39	; 57
    1be8:	80 91 b3 39 	lds	r24, 0x39B3	; 0x8039b3 <route>
    1bec:	90 91 b4 39 	lds	r25, 0x39B4	; 0x8039b4 <route+0x1>
    1bf0:	ee dd       	rcall	.-1060   	; 0x17ce <PopulateObject>
        currDepth = 0;
    1bf2:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <currDepth>
    }

    //Play effects if available and not already playing
    if (effect == 0){
    1bf6:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1bfa:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1bfe:	89 2b       	or	r24, r25
    1c00:	99 f4       	brne	.+38     	; 0x1c28 <CheckInput+0x78>
        effect = currObj.byteField[EFFECTS];
    1c02:	80 91 f7 39 	lds	r24, 0x39F7	; 0x8039f7 <currObj+0x4>
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1c0c:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
        auStart = ((effect&0xE0)>0);
    1c10:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1c14:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1c18:	80 7e       	andi	r24, 0xE0	; 224
    1c1a:	99 27       	eor	r25, r25
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	89 2b       	or	r24, r25
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <CheckInput+0x74>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	20 93 2c 38 	sts	0x382C, r18	; 0x80382c <auStart>
    }

    if (serRxDone){
    1c28:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <CheckInput+0x82>
    1c30:	5f c2       	rjmp	.+1214   	; 0x20f0 <CheckInput+0x540>

        //Special input requested from user by game
        if (specialInput[0]){
    1c32:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <specialInput>
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <CheckInput+0x8c>
    1c3a:	57 c0       	rjmp	.+174    	; 0x1cea <CheckInput+0x13a>
            specialPassed = 0;
    1c3c:	10 92 e1 38 	sts	0x38E1, r1	; 0x8038e1 <specialPassed>
            data[0] = 'a';
    1c40:	81 e6       	ldi	r24, 0x61	; 97
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    1c46:	62 ee       	ldi	r22, 0xE2	; 226
    1c48:	78 e3       	ldi	r23, 0x38	; 56
    1c4a:	8d e4       	ldi	r24, 0x4D	; 77
    1c4c:	9a e3       	ldi	r25, 0x3A	; 58
    1c4e:	f1 dc       	rcall	.-1566   	; 0x1632 <StartsWith>
    1c50:	f8 2e       	mov	r15, r24
    1c52:	88 23       	and	r24, r24
    1c54:	21 f0       	breq	.+8      	; 0x1c5e <CheckInput+0xae>
                specialPassed = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <specialPassed>
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <CheckInput+0xb6>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1c5e:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <specialInput>
    1c62:	81 33       	cpi	r24, 0x31	; 49
    1c64:	11 f0       	breq	.+4      	; 0x1c6a <CheckInput+0xba>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1c66:	f1 2c       	mov	r15, r1
    1c68:	45 c2       	rjmp	.+1162   	; 0x20f4 <CheckInput+0x544>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1c6a:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <specialInput+0x2>
    1c6e:	81 11       	cpse	r24, r1
    1c70:	fa cf       	rjmp	.-12     	; 0x1c66 <CheckInput+0xb6>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    1c72:	8d e4       	ldi	r24, 0x4D	; 77
    1c74:	9a e3       	ldi	r25, 0x3A	; 58
    1c76:	de de       	rcall	.-580    	; 0x1a34 <CleanInput>
                specialPassed = 2;
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	90 93 e1 38 	sts	0x38E1, r25	; 0x8038e1 <specialPassed>
                data[1] = 0;
    1c7e:	f8 01       	movw	r30, r16
    1c80:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	80 f3       	brcs	.-32     	; 0x1c66 <CheckInput+0xb6>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    1c86:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
    1c8a:	81 33       	cpi	r24, 0x31	; 49
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <CheckInput+0xf6>
    1c8e:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
    1c92:	82 33       	cpi	r24, 0x32	; 50
    1c94:	41 f0       	breq	.+16     	; 0x1ca6 <CheckInput+0xf6>
    1c96:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
    1c9a:	83 33       	cpi	r24, 0x33	; 51
    1c9c:	21 f0       	breq	.+8      	; 0x1ca6 <CheckInput+0xf6>
    1c9e:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
    1ca2:	84 33       	cpi	r24, 0x34	; 52
    1ca4:	01 f7       	brne	.-64     	; 0x1c66 <CheckInput+0xb6>
                        serRx[1] |= 0x20;
    1ca6:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx+0x1>
    1caa:	80 62       	ori	r24, 0x20	; 32
    1cac:	80 93 4e 3a 	sts	0x3A4E, r24	; 0x803a4e <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    1cb0:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx+0x1>
    1cb4:	81 36       	cpi	r24, 0x61	; 97
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <CheckInput+0x120>
    1cb8:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx+0x1>
    1cbc:	85 36       	cpi	r24, 0x65	; 101
    1cbe:	41 f0       	breq	.+16     	; 0x1cd0 <CheckInput+0x120>
    1cc0:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx+0x1>
    1cc4:	86 36       	cpi	r24, 0x66	; 102
    1cc6:	21 f0       	breq	.+8      	; 0x1cd0 <CheckInput+0x120>
    1cc8:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx+0x1>
    1ccc:	87 37       	cpi	r24, 0x77	; 119
    1cce:	59 f6       	brne	.-106    	; 0x1c66 <CheckInput+0xb6>
                            data[1] = specialInput[1]+0x11;
    1cd0:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <specialInput+0x1>
    1cd4:	8f 5e       	subi	r24, 0xEF	; 239
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1cda:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
    1cde:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1ce0:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx+0x1>
    1ce4:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1ce6:	14 82       	std	Z+4, r1	; 0x04
    1ce8:	05 c2       	rjmp	.+1034   	; 0x20f4 <CheckInput+0x544>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    1cea:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
    1cee:	83 32       	cpi	r24, 0x23	; 35
    1cf0:	81 f5       	brne	.+96     	; 0x1d52 <CheckInput+0x1a2>
    1cf2:	8d b3       	in	r24, 0x1d	; 29
    1cf4:	86 30       	cpi	r24, 0x06	; 6
    1cf6:	69 f5       	brne	.+90     	; 0x1d52 <CheckInput+0x1a2>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1cfe:	fc 01       	movw	r30, r24
    1d00:	e3 5b       	subi	r30, 0xB3	; 179
    1d02:	f5 4c       	sbci	r31, 0xC5	; 197
    1d04:	20 81       	ld	r18, Z
    1d06:	20 53       	subi	r18, 0x30	; 48
    1d08:	20 83       	st	Z, r18
                    bitNr *= 10;
    1d0a:	11 0f       	add	r17, r17
    1d0c:	21 2f       	mov	r18, r17
    1d0e:	22 0f       	add	r18, r18
    1d10:	22 0f       	add	r18, r18
    1d12:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    1d14:	20 91 4e 3a 	lds	r18, 0x3A4E	; 0x803a4e <serRx+0x1>
    1d18:	23 30       	cpi	r18, 0x03	; 3
    1d1a:	48 f4       	brcc	.+18     	; 0x1d2e <CheckInput+0x17e>
                    if (serRx[x] < 10) {
    1d1c:	20 81       	ld	r18, Z
    1d1e:	2a 30       	cpi	r18, 0x0A	; 10
    1d20:	b0 f4       	brcc	.+44     	; 0x1d4e <CheckInput+0x19e>
                        bitNr += serRx[x];
    1d22:	20 81       	ld	r18, Z
    1d24:	12 0f       	add	r17, r18
    1d26:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	41 f7       	brne	.-48     	; 0x1cfe <CheckInput+0x14e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    1d2e:	81 2f       	mov	r24, r17
    1d30:	8f 77       	andi	r24, 0x7F	; 127
    1d32:	69 f0       	breq	.+26     	; 0x1d4e <CheckInput+0x19e>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    1d34:	80 91 51 3a 	lds	r24, 0x3A51	; 0x803a51 <serRx+0x4>
    1d38:	60 91 52 3a 	lds	r22, 0x3A52	; 0x803a52 <serRx+0x5>
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	78 2b       	or	r23, r24
    1d40:	81 2f       	mov	r24, r17
    1d42:	80 95       	com	r24
    1d44:	d6 db       	rcall	.-2132   	; 0x14f2 <Cheat>
    1d46:	88 23       	and	r24, r24
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <CheckInput+0x19e>
    1d4a:	81 2f       	mov	r24, r17
    1d4c:	2b da       	rcall	.-2986   	; 0x11a4 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	50 c0       	rjmp	.+160    	; 0x1df2 <CheckInput+0x242>
    1d52:	d8 01       	movw	r26, r16
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e3 5b       	subi	r30, 0xB3	; 179
    1d5c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d5e:	20 81       	ld	r18, Z
    1d60:	21 34       	cpi	r18, 0x41	; 65
    1d62:	18 f0       	brcs	.+6      	; 0x1d6a <CheckInput+0x1ba>
    1d64:	20 81       	ld	r18, Z
    1d66:	2b 35       	cpi	r18, 0x5B	; 91
    1d68:	10 f0       	brcs	.+4      	; 0x1d6e <CheckInput+0x1be>
    1d6a:	20 81       	ld	r18, Z
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <CheckInput+0x1c2>
    1d6e:	20 81       	ld	r18, Z
    1d70:	20 62       	ori	r18, 0x20	; 32
    1d72:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1d74:	20 81       	ld	r18, Z
    1d76:	21 11       	cpse	r18, r1
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <CheckInput+0x1d4>
                    data[x] = 0;
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	e8 0f       	add	r30, r24
    1d7e:	f1 1d       	adc	r31, r1
    1d80:	10 82       	st	Z, r1
                    break;
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <CheckInput+0x1de>
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    1d88:	81 34       	cpi	r24, 0x41	; 65
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	29 f7       	brne	.-54     	; 0x1d58 <CheckInput+0x1a8>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1d8e:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <serRx>
                data[0] = 0;
    1d92:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1d94:	81 11       	cpse	r24, r1
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <CheckInput+0x1f2>
                data[0] = 0;
    1d98:	10 82       	st	Z, r1
                RXCNT = 0;
    1d9a:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    1d9c:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
    1da0:	a7 c1       	rjmp	.+846    	; 0x20f0 <CheckInput+0x540>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    1da2:	80 81       	ld	r24, Z
    1da4:	8f 33       	cpi	r24, 0x3F	; 63
    1da6:	11 f0       	breq	.+4      	; 0x1dac <CheckInput+0x1fc>
    1da8:	88 36       	cpi	r24, 0x68	; 104
    1daa:	39 f5       	brne	.+78     	; 0x1dfa <CheckInput+0x24a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1dac:	8b e5       	ldi	r24, 0x5B	; 91
    1dae:	9a e7       	ldi	r25, 0x7A	; 122
    1db0:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr>
    1db4:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x1>
    reactStr[1][number]=length;
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x40>
    1dc0:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x41>
    reactStr[2][number]=type;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x80>
    1dcc:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1dd0:	23 e9       	ldi	r18, 0x93	; 147
    1dd2:	3b e7       	ldi	r19, 0x7B	; 123
    1dd4:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    1dd8:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    1ddc:	2d e6       	ldi	r18, 0x6D	; 109
    1dde:	34 e0       	ldi	r19, 0x04	; 4
    1de0:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x42>
    1de4:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    1de8:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    1dec:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	71 dc       	rcall	.-1822   	; 0x16d6 <SetStandardResponse>
    1df4:	80 93 f2 38 	sts	0x38F2, r24	; 0x8038f2 <responseList>
    1df8:	7b c1       	rjmp	.+758    	; 0x20f0 <CheckInput+0x540>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    1dfa:	81 36       	cpi	r24, 0x61	; 97
    1dfc:	d9 f4       	brne	.+54     	; 0x1e34 <CheckInput+0x284>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1dfe:	8b e5       	ldi	r24, 0x5B	; 91
    1e00:	9a e7       	ldi	r25, 0x7A	; 122
    1e02:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr>
    1e06:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x1>
    reactStr[1][number]=length;
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x40>
    1e12:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x41>
    reactStr[2][number]=type;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x80>
    1e1e:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e22:	2e e6       	ldi	r18, 0x6E	; 110
    1e24:	3a e7       	ldi	r19, 0x7A	; 122
    1e26:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    1e2a:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    1e2e:	25 e2       	ldi	r18, 0x25	; 37
    1e30:	31 e0       	ldi	r19, 0x01	; 1
    1e32:	d6 cf       	rjmp	.-84     	; 0x1de0 <CheckInput+0x230>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    1e34:	87 37       	cpi	r24, 0x77	; 119
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <CheckInput+0x28a>
    1e38:	6e c0       	rjmp	.+220    	; 0x1f16 <CheckInput+0x366>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e3a:	8b e5       	ldi	r24, 0x5B	; 91
    1e3c:	9a e7       	ldi	r25, 0x7A	; 122
    1e3e:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr>
    1e42:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x1>
    reactStr[1][number]=length;
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x40>
    1e4e:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x41>
    reactStr[2][number]=type;
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	20 93 73 39 	sts	0x3973, r18	; 0x803973 <reactStr+0x80>
    1e5a:	30 93 74 39 	sts	0x3974, r19	; 0x803974 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e5e:	8b ec       	ldi	r24, 0xCB	; 203
    1e60:	96 e7       	ldi	r25, 0x76	; 118
    1e62:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    1e66:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    1e6a:	82 e1       	ldi	r24, 0x12	; 18
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    1e72:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    1e76:	20 93 75 39 	sts	0x3975, r18	; 0x803975 <reactStr+0x82>
    1e7a:	30 93 76 39 	sts	0x3976, r19	; 0x803976 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    1e7e:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <whoami>
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	19 f4       	brne	.+6      	; 0x1e8c <CheckInput+0x2dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e86:	85 ec       	ldi	r24, 0xC5	; 197
    1e88:	96 e7       	ldi	r25, 0x76	; 118
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <CheckInput+0x2fa>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	49 f4       	brne	.+18     	; 0x1ea2 <CheckInput+0x2f2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e90:	82 ec       	ldi	r24, 0xC2	; 194
    1e92:	96 e7       	ldi	r25, 0x76	; 118
    1e94:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    1e98:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	1e c0       	rjmp	.+60     	; 0x1ede <CheckInput+0x32e>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	49 f4       	brne	.+18     	; 0x1eb8 <CheckInput+0x308>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ea6:	8c eb       	ldi	r24, 0xBC	; 188
    1ea8:	96 e7       	ldi	r25, 0x76	; 118
    1eaa:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    1eae:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    1eb2:	86 e0       	ldi	r24, 0x06	; 6
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	13 c0       	rjmp	.+38     	; 0x1ede <CheckInput+0x32e>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    1eb8:	84 30       	cpi	r24, 0x04	; 4
    1eba:	49 f4       	brne	.+18     	; 0x1ece <CheckInput+0x31e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ebc:	87 eb       	ldi	r24, 0xB7	; 183
    1ebe:	96 e7       	ldi	r25, 0x76	; 118
    1ec0:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    1ec4:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	08 c0       	rjmp	.+16     	; 0x1ede <CheckInput+0x32e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ece:	80 e4       	ldi	r24, 0x40	; 64
    1ed0:	96 e7       	ldi	r25, 0x76	; 118
    1ed2:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    1ed6:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    1eda:	82 e4       	ldi	r24, 0x42	; 66
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 93 37 39 	sts	0x3937, r24	; 0x803937 <reactStr+0x44>
    1ee2:	90 93 38 39 	sts	0x3938, r25	; 0x803938 <reactStr+0x45>
    reactStr[2][number]=type;
    1ee6:	20 93 77 39 	sts	0x3977, r18	; 0x803977 <reactStr+0x84>
    1eea:	30 93 78 39 	sts	0x3978, r19	; 0x803978 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1eee:	8d e9       	ldi	r24, 0x9D	; 157
    1ef0:	96 e7       	ldi	r25, 0x76	; 118
    1ef2:	80 93 f9 38 	sts	0x38F9, r24	; 0x8038f9 <reactStr+0x6>
    1ef6:	90 93 fa 38 	sts	0x38FA, r25	; 0x8038fa <reactStr+0x7>
    reactStr[1][number]=length;
    1efa:	8a e1       	ldi	r24, 0x1A	; 26
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	80 93 39 39 	sts	0x3939, r24	; 0x803939 <reactStr+0x46>
    1f02:	90 93 3a 39 	sts	0x393A, r25	; 0x80393a <reactStr+0x47>
    reactStr[2][number]=type;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	80 93 79 39 	sts	0x3979, r24	; 0x803979 <reactStr+0x86>
    1f0e:	90 93 7a 39 	sts	0x397A, r25	; 0x80397a <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    1f12:	84 e0       	ldi	r24, 0x04	; 4
    1f14:	6e cf       	rjmp	.-292    	; 0x1df2 <CheckInput+0x242>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    1f16:	81 37       	cpi	r24, 0x71	; 113
    1f18:	d9 f4       	brne	.+54     	; 0x1f50 <CheckInput+0x3a0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f1a:	8b e5       	ldi	r24, 0x5B	; 91
    1f1c:	9a e7       	ldi	r25, 0x7A	; 122
    1f1e:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr>
    1f22:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x1>
    reactStr[1][number]=length;
    1f26:	84 e0       	ldi	r24, 0x04	; 4
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x40>
    1f2e:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x41>
    reactStr[2][number]=type;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x80>
    1f3a:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f3e:	23 e0       	ldi	r18, 0x03	; 3
    1f40:	3a e7       	ldi	r19, 0x7A	; 122
    1f42:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    1f46:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    1f4a:	24 e5       	ldi	r18, 0x54	; 84
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    1f4e:	48 cf       	rjmp	.-368    	; 0x1de0 <CheckInput+0x230>
    1f50:	6e e9       	ldi	r22, 0x9E	; 158
    1f52:	74 eb       	ldi	r23, 0xB4	; 180
    1f54:	c8 01       	movw	r24, r16
    1f56:	6d db       	rcall	.-2342   	; 0x1632 <StartsWith>
    1f58:	88 23       	and	r24, r24
    1f5a:	e9 f0       	breq	.+58     	; 0x1f96 <CheckInput+0x3e6>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1f5c:	1e e6       	ldi	r17, 0x6E	; 110
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	81 2f       	mov	r24, r17
    1f62:	06 d9       	rcall	.-3572   	; 0x1170 <WriteStatusBit>
    1f64:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1f66:	12 37       	cpi	r17, 0x72	; 114
    1f68:	d1 f7       	brne	.-12     	; 0x1f5e <CheckInput+0x3ae>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    1f6a:	7b d8       	rcall	.-3850   	; 0x1062 <SaveGameState>
    1f6c:	80 e2       	ldi	r24, 0x20	; 32

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    1f6e:	e1 ee       	ldi	r30, 0xE1	; 225
    1f70:	f4 eb       	ldi	r31, 0xB4	; 180
    1f72:	de 01       	movw	r26, r28
    1f74:	11 96       	adiw	r26, 0x01	; 1
    1f76:	01 90       	ld	r0, Z+
    1f78:	0d 92       	st	X+, r0
    1f7a:	8a 95       	dec	r24
    1f7c:	e1 f7       	brne	.-8      	; 0x1f76 <CheckInput+0x3c6>
    1f7e:	8c e3       	ldi	r24, 0x3C	; 60
                SerSpeed(60);
    1f80:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SerSpeed>
    1f84:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1f88:	88 23       	and	r24, r24
    1f8a:	e1 f3       	breq	.-8      	; 0x1f84 <CheckInput+0x3d4>
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SerSend>
    1f94:	f7 cf       	rjmp	.-18     	; 0x1f84 <CheckInput+0x3d4>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    1f96:	64 ea       	ldi	r22, 0xA4	; 164
    1f98:	74 eb       	ldi	r23, 0xB4	; 180
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	4a db       	rcall	.-2412   	; 0x1632 <StartsWith>
    1f9e:	68 2e       	mov	r6, r24
    1fa0:	88 23       	and	r24, r24
    1fa2:	51 f1       	breq	.+84     	; 0x1ff8 <CheckInput+0x448>
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    1fa6:	89 a3       	std	Y+33, r24	; 0x21
    1fa8:	18 e1       	ldi	r17, 0x18	; 24
    1faa:	41 e0       	ldi	r20, 0x01	; 1
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    1fac:	be 01       	movw	r22, r28
    1fae:	6f 5d       	subi	r22, 0xDF	; 223
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	81 2f       	mov	r24, r17
    1fb4:	0e 94 15 07 	call	0xe2a	; 0xe2a <EEWrite>
    1fb8:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    1fba:	10 32       	cpi	r17, 0x20	; 32
    1fbc:	b1 f7       	brne	.-20     	; 0x1faa <CheckInput+0x3fa>
    1fbe:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	81 2f       	mov	r24, r17
    1fc4:	d5 d8       	rcall	.-3670   	; 0x1170 <WriteStatusBit>
    1fc6:	1f 5f       	subi	r17, 0xFF	; 255
    1fc8:	12 37       	cpi	r17, 0x72	; 114
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1fca:	d1 f7       	brne	.-12     	; 0x1fc0 <CheckInput+0x410>
    1fcc:	4a d8       	rcall	.-3948   	; 0x1062 <SaveGameState>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    1fce:	8f e0       	ldi	r24, 0x0F	; 15
    1fd0:	e1 e0       	ldi	r30, 0x01	; 1

                uint8_t cheat[] = "Reset please! ";
    1fd2:	f5 eb       	ldi	r31, 0xB5	; 181
    1fd4:	de 01       	movw	r26, r28
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	01 90       	ld	r0, Z+
    1fda:	0d 92       	st	X+, r0
    1fdc:	8a 95       	dec	r24
    1fde:	e1 f7       	brne	.-8      	; 0x1fd8 <CheckInput+0x428>
    1fe0:	8c e3       	ldi	r24, 0x3C	; 60
    1fe2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SerSpeed>
                SerSpeed(60);
    1fe6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1fea:	88 23       	and	r24, r24
    1fec:	e1 f3       	breq	.-8      	; 0x1fe6 <CheckInput+0x436>
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SerSend>
    1ff6:	f7 cf       	rjmp	.-18     	; 0x1fe6 <CheckInput+0x436>
    1ff8:	6b ed       	ldi	r22, 0xDB	; 219
                }
            }
            if (StartsWith(&data[0], "cheat")){
    1ffa:	74 eb       	ldi	r23, 0xB4	; 180
    1ffc:	c8 01       	movw	r24, r16
    1ffe:	19 db       	rcall	.-2510   	; 0x1632 <StartsWith>
    2000:	88 23       	and	r24, r24
    2002:	09 f4       	brne	.+2      	; 0x2006 <CheckInput+0x456>
    2004:	30 ce       	rjmp	.-928    	; 0x1c66 <CheckInput+0xb6>
    2006:	03 ef       	ldi	r16, 0xF3	; 243
    2008:	18 e3       	ldi	r17, 0x38	; 56
    200a:	78 e1       	ldi	r23, 0x18	; 24
    200c:	77 2e       	mov	r7, r23
    200e:	ea e0       	ldi	r30, 0x0A	; 10
    2010:	5e 2e       	mov	r5, r30
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2012:	f4 e6       	ldi	r31, 0x64	; 100
    2014:	4f 2e       	mov	r4, r31
                        bit /= 10;
    2016:	ee 24       	eor	r14, r14
    2018:	e3 94       	inc	r14
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    201a:	f1 2c       	mov	r15, r1
    201c:	cc 24       	eor	r12, r12
    201e:	c3 94       	inc	r12
    2020:	d1 2c       	mov	r13, r1
    2022:	89 e5       	ldi	r24, 0x59	; 89
    2024:	88 2e       	mov	r8, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2026:	8a e7       	ldi	r24, 0x7A	; 122
    2028:	98 2e       	mov	r9, r24
    202a:	92 e0       	ldi	r25, 0x02	; 2
    202c:	a9 2e       	mov	r10, r25
    reactStr[1][number]=length;
    202e:	b1 2c       	mov	r11, r1
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	be 01       	movw	r22, r28
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2034:	6f 5d       	subi	r22, 0xDF	; 223
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	87 2d       	mov	r24, r7
    203a:	0e 94 05 07 	call	0xe0a	; 0xe0a <EERead>
    203e:	29 a1       	ldd	r18, Y+33	; 0x21
    2040:	20 95       	com	r18
                    bit = 0xff-bit;
    2042:	82 2f       	mov	r24, r18
    2044:	65 2d       	mov	r22, r5
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2046:	0e 94 df 19 	call	0x33be	; 0x33be <__udivmodqi4>
    204a:	9b 83       	std	Y+3, r25	; 0x03
    204c:	0e 94 df 19 	call	0x33be	; 0x33be <__udivmodqi4>
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	82 2f       	mov	r24, r18
    2054:	64 2d       	mov	r22, r4
                        bit /= 10;
    2056:	0e 94 df 19 	call	0x33be	; 0x33be <__udivmodqi4>
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	19 a2       	std	Y+33, r1	; 0x21
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    205e:	de 01       	movw	r26, r28
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	2d 91       	ld	r18, X+
    2066:	86 2d       	mov	r24, r6
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    2068:	84 0f       	add	r24, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	fc 01       	movw	r30, r24
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ed 50       	subi	r30, 0x0D	; 13
    2074:	f7 4c       	sbci	r31, 0xC7	; 199
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	2d 52       	subi	r18, 0x2D	; 45
    207a:	3b 48       	sbci	r19, 0x8B	; 139
    207c:	20 83       	st	Z, r18
    207e:	31 83       	std	Z+1, r19	; 0x01
    2080:	fc 01       	movw	r30, r24
    2082:	ee 0f       	add	r30, r30
    reactStr[1][number]=length;
    2084:	ff 1f       	adc	r31, r31
    2086:	ed 5c       	subi	r30, 0xCD	; 205
    2088:	f6 4c       	sbci	r31, 0xC6	; 198
    208a:	e0 82       	st	Z, r14
    208c:	f1 82       	std	Z+1, r15	; 0x01
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    reactStr[2][number]=type;
    2092:	fc 01       	movw	r30, r24
    2094:	ed 58       	subi	r30, 0x8D	; 141
    2096:	f6 4c       	sbci	r31, 0xC6	; 198
    2098:	e0 82       	st	Z, r14
    209a:	f1 82       	std	Z+1, r15	; 0x01
    209c:	4f 5f       	subi	r20, 0xFF	; 255
    209e:	43 30       	cpi	r20, 0x03	; 3
    20a0:	09 f7       	brne	.-62     	; 0x2064 <CheckInput+0x4b4>
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    20a2:	f8 01       	movw	r30, r16
    20a4:	86 82       	std	Z+6, r8	; 0x06
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20a6:	97 82       	std	Z+7, r9	; 0x07
    20a8:	ea 5b       	subi	r30, 0xBA	; 186
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    reactStr[1][number]=length;
    20ac:	a0 82       	st	Z, r10
    20ae:	b1 82       	std	Z+1, r11	; 0x01
    20b0:	e0 5c       	subi	r30, 0xC0	; 192
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    reactStr[2][number]=type;
    20b4:	c0 82       	st	Z, r12
    20b6:	d1 82       	std	Z+1, r13	; 0x01
    20b8:	73 94       	inc	r7
    20ba:	08 5f       	subi	r16, 0xF8	; 248
    20bc:	1f 4f       	sbci	r17, 0xFF	; 255
    20be:	f4 e0       	ldi	r31, 0x04	; 4
    20c0:	6f 0e       	add	r6, r31
    20c2:	80 e2       	ldi	r24, 0x20	; 32
    20c4:	78 12       	cpse	r7, r24
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    20c6:	b4 cf       	rjmp	.-152    	; 0x2030 <CheckInput+0x480>
    20c8:	8b e5       	ldi	r24, 0x5B	; 91
    20ca:	9a e7       	ldi	r25, 0x7A	; 122
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20cc:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x3e>
    20d0:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x3f>
    20d4:	84 e0       	ldi	r24, 0x04	; 4
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    reactStr[1][number]=length;
    20d8:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x7e>
    20dc:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x7f>
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    reactStr[2][number]=type;
    20e4:	80 93 b1 39 	sts	0x39B1, r24	; 0x8039b1 <reactStr+0xbe>
    20e8:	90 93 b2 39 	sts	0x39B2, r25	; 0x8039b2 <reactStr+0xbf>
    20ec:	70 92 f2 38 	sts	0x38F2, r7	; 0x8038f2 <responseList>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    20f0:	ff 24       	eor	r15, r15
    20f2:	f3 94       	inc	r15
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    20f4:	8f 2d       	mov	r24, r15
    20f6:	a1 96       	adiw	r28, 0x21	; 33
}
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	df 90       	pop	r13
    210a:	cf 90       	pop	r12
    210c:	bf 90       	pop	r11
    210e:	af 90       	pop	r10
    2110:	9f 90       	pop	r9
    2112:	8f 90       	pop	r8
    2114:	7f 90       	pop	r7
    2116:	6f 90       	pop	r6
    2118:	5f 90       	pop	r5
    211a:	4f 90       	pop	r4
    211c:	08 95       	ret

0000211e <ProcessInput>:
    211e:	4f 92       	push	r4
    2120:	5f 92       	push	r5

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2122:	6f 92       	push	r6
    2124:	7f 92       	push	r7
    2126:	8f 92       	push	r8
    2128:	9f 92       	push	r9
    212a:	af 92       	push	r10
    212c:	bf 92       	push	r11
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	2a 97       	sbiw	r28, 0x0a	; 10
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    214a:	74 dc       	rcall	.-1816   	; 0x1a34 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    214c:	c8 01       	movw	r24, r16
    214e:	72 dc       	rcall	.-1820   	; 0x1a34 <CleanInput>
    2150:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2152:	88 23       	and	r24, r24
    2154:	09 f4       	brne	.+2      	; 0x2158 <ProcessInput+0x3a>
    2156:	d4 c7       	rjmp	.+4008   	; 0x3100 <ProcessInput+0xfe2>

        //eXit to previous location
        if (data[0] == 'x'){
    2158:	d8 01       	movw	r26, r16
    215a:	8c 91       	ld	r24, X
    215c:	88 37       	cpi	r24, 0x78	; 120
    215e:	09 f0       	breq	.+2      	; 0x2162 <ProcessInput+0x44>
    2160:	3d c0       	rjmp	.+122    	; 0x21dc <ProcessInput+0xbe>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2162:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    2166:	e8 2f       	mov	r30, r24
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	ed 54       	subi	r30, 0x4D	; 77
    2170:	f6 4c       	sbci	r31, 0xC6	; 198
    2172:	20 81       	ld	r18, Z
    2174:	31 81       	ldd	r19, Z+1	; 0x01
    2176:	23 2b       	or	r18, r19
    2178:	11 f0       	breq	.+4      	; 0x217e <ProcessInput+0x60>
    217a:	81 11       	cpse	r24, r1
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    217e:	82 e8       	ldi	r24, 0x82	; 130
    2180:	96 e7       	ldi	r25, 0x76	; 118
    2182:	92 c5       	rjmp	.+2852   	; 0x2ca8 <ProcessInput+0xb8a>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2184:	80 91 f9 39 	lds	r24, 0x39F9	; 0x8039f9 <currObj+0x6>
    2188:	17 d8       	rcall	.-4050   	; 0x11b8 <CheckState>
    218a:	88 23       	and	r24, r24
    218c:	81 f0       	breq	.+32     	; 0x21ae <ProcessInput+0x90>
                --currDepth;
    218e:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2192:	e1 50       	subi	r30, 0x01	; 1
    2194:	e0 93 26 38 	sts	0x3826, r30	; 0x803826 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	ed 54       	subi	r30, 0x4D	; 77
    21a0:	f6 4c       	sbci	r31, 0xC6	; 198
    21a2:	63 ef       	ldi	r22, 0xF3	; 243
    21a4:	79 e3       	ldi	r23, 0x39	; 57
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	11 db       	rcall	.-2526   	; 0x17ce <PopulateObject>
    21ac:	2a c2       	rjmp	.+1108   	; 0x2602 <ProcessInput+0x4e4>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    21ae:	80 91 15 3a 	lds	r24, 0x3A15	; 0x803a15 <currObj+0x22>
    21b2:	90 91 16 3a 	lds	r25, 0x3A16	; 0x803a16 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21b6:	20 91 07 3a 	lds	r18, 0x3A07	; 0x803a07 <currObj+0x14>
    21ba:	30 91 08 3a 	lds	r19, 0x3A08	; 0x803a08 <currObj+0x15>
    21be:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    21c2:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    21c6:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    21ca:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    21ce:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    21d2:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
                PopulateObject(route[currDepth], &currObj);
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    21d6:	80 91 1b 3a 	lds	r24, 0x3A1B	; 0x803a1b <currObj+0x28>
    21da:	33 c6       	rjmp	.+3174   	; 0x2e42 <ProcessInput+0xd24>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    21dc:	85 36       	cpi	r24, 0x65	; 101
    21de:	19 f0       	breq	.+6      	; 0x21e6 <ProcessInput+0xc8>
    21e0:	8f 36       	cpi	r24, 0x6F	; 111
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <ProcessInput+0xc8>
    21e4:	d8 c0       	rjmp	.+432    	; 0x2396 <ProcessInput+0x278>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    21e6:	b2 e0       	ldi	r27, 0x02	; 2
    21e8:	fb 12       	cpse	r15, r27
    21ea:	c9 cf       	rjmp	.-110    	; 0x217e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    21ec:	e0 90 26 38 	lds	r14, 0x3826	; 0x803826 <currDepth>
    21f0:	f1 2c       	mov	r15, r1
    21f2:	f7 01       	movw	r30, r14
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	ed 54       	subi	r30, 0x4D	; 77
    21fa:	f6 4c       	sbci	r31, 0xC6	; 198
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	d8 01       	movw	r26, r16
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	6c 91       	ld	r22, X
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	ac db       	rcall	.-2216   	; 0x1964 <FindChild>
    220c:	f7 01       	movw	r30, r14
    220e:	ee 0f       	add	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	eb 54       	subi	r30, 0x4B	; 75
    2214:	f6 4c       	sbci	r31, 0xC6	; 198
    2216:	80 83       	st	Z, r24
    2218:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    221a:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <currDepth>
    221e:	29 2f       	mov	r18, r25
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	f9 01       	movw	r30, r18
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	eb 54       	subi	r30, 0x4B	; 75
    222a:	f6 4c       	sbci	r31, 0xC6	; 198
    222c:	40 81       	ld	r20, Z
    222e:	51 81       	ldd	r21, Z+1	; 0x01
    2230:	41 15       	cp	r20, r1
    2232:	51 05       	cpc	r21, r1
    2234:	21 f0       	breq	.+8      	; 0x223e <ProcessInput+0x120>
                    PopulateObject(route[currDepth+1], &actObj1);
    2236:	64 eb       	ldi	r22, 0xB4	; 180
    2238:	78 e3       	ldi	r23, 0x38	; 56
    223a:	ca 01       	movw	r24, r20
    223c:	1c c0       	rjmp	.+56     	; 0x2276 <ProcessInput+0x158>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    223e:	99 23       	and	r25, r25
    2240:	09 f4       	brne	.+2      	; 0x2244 <ProcessInput+0x126>
    2242:	7a c7       	rjmp	.+3828   	; 0x3138 <ProcessInput+0x101a>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	f9 01       	movw	r30, r18
    224a:	ef 54       	subi	r30, 0x4F	; 79
    224c:	f6 4c       	sbci	r31, 0xC6	; 198
    224e:	d8 01       	movw	r26, r16
    2250:	11 96       	adiw	r26, 0x01	; 1
    2252:	6c 91       	ld	r22, X
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	31 db       	rcall	.-2462   	; 0x18bc <CheckLetter>
    225a:	88 23       	and	r24, r24
    225c:	09 f4       	brne	.+2      	; 0x2260 <ProcessInput+0x142>
    225e:	6c c7       	rjmp	.+3800   	; 0x3138 <ProcessInput+0x101a>
                        PopulateObject(route[currDepth-1], &actObj1);
    2260:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	ef 54       	subi	r30, 0x4F	; 79
    226c:	f6 4c       	sbci	r31, 0xC6	; 198
    226e:	64 eb       	ldi	r22, 0xB4	; 180
    2270:	78 e3       	ldi	r23, 0x38	; 56
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	ab da       	rcall	.-2730   	; 0x17ce <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2278:	d8 01       	movw	r26, r16
    227a:	8c 91       	ld	r24, X
    227c:	85 36       	cpi	r24, 0x65	; 101
    227e:	c9 f4       	brne	.+50     	; 0x22b2 <ProcessInput+0x194>
    2280:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3988+0x8>
    2284:	80 fd       	sbrc	r24, 0
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <ProcessInput+0x1a6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2288:	80 ea       	ldi	r24, 0xA0	; 160
    228a:	99 e7       	ldi	r25, 0x79	; 121
    228c:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2290:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2294:	8e e1       	ldi	r24, 0x1E	; 30
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    229c:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    22a8:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    22ac:	72 e0       	ldi	r23, 0x02	; 2
    22ae:	77 2e       	mov	r7, r23
    22b0:	07 c7       	rjmp	.+3598   	; 0x30c0 <ProcessInput+0xfa2>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    22b2:	8f 36       	cpi	r24, 0x6F	; 111
    22b4:	39 f4       	brne	.+14     	; 0x22c4 <ProcessInput+0x1a6>
    22b6:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3988+0x8>
    22ba:	81 fd       	sbrc	r24, 1
    22bc:	03 c0       	rjmp	.+6      	; 0x22c4 <ProcessInput+0x1a6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22be:	85 e8       	ldi	r24, 0x85	; 133
    22c0:	99 e7       	ldi	r25, 0x79	; 121
    22c2:	f2 c4       	rjmp	.+2532   	; 0x2ca8 <ProcessInput+0xb8a>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    22c4:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj1.3988+0x6>
    22c8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <CheckState>
    22cc:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    22d0:	88 23       	and	r24, r24
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <ProcessInput+0x1b8>
    22d4:	42 c0       	rjmp	.+132    	; 0x235a <ProcessInput+0x23c>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    22d6:	ae 2f       	mov	r26, r30
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	aa 0f       	add	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	ab 54       	subi	r26, 0x4B	; 75
    22e0:	b6 4c       	sbci	r27, 0xC6	; 198
    22e2:	8d 91       	ld	r24, X+
    22e4:	9c 91       	ld	r25, X
    22e6:	89 2b       	or	r24, r25
    22e8:	11 f0       	breq	.+4      	; 0x22ee <ProcessInput+0x1d0>
    22ea:	ef 5f       	subi	r30, 0xFF	; 255
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <ProcessInput+0x1d2>
    22ee:	e1 50       	subi	r30, 0x01	; 1
    22f0:	e0 93 26 38 	sts	0x3826, r30	; 0x803826 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    22f4:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	ed 54       	subi	r30, 0x4D	; 77
    2300:	f6 4c       	sbci	r31, 0xC6	; 198
    2302:	63 ef       	ldi	r22, 0xF3	; 243
    2304:	79 e3       	ldi	r23, 0x39	; 57
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	61 da       	rcall	.-2878   	; 0x17ce <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    230c:	80 91 0f 3a 	lds	r24, 0x3A0F	; 0x803a0f <currObj+0x1c>
    2310:	90 91 10 3a 	lds	r25, 0x3A10	; 0x803a10 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2314:	20 91 01 3a 	lds	r18, 0x3A01	; 0x803a01 <currObj+0xe>
    2318:	30 91 02 3a 	lds	r19, 0x3A02	; 0x803a02 <currObj+0xf>
    231c:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    2320:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2324:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    2328:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    232c:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    2330:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2334:	8b e5       	ldi	r24, 0x5B	; 91
    2336:	9a e7       	ldi	r25, 0x7A	; 122
    2338:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    233c:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	80 93 37 39 	sts	0x3937, r24	; 0x803937 <reactStr+0x44>
    2348:	90 93 38 39 	sts	0x3938, r25	; 0x803938 <reactStr+0x45>
    reactStr[2][number]=type;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	80 93 77 39 	sts	0x3977, r24	; 0x803977 <reactStr+0x84>
    2354:	90 93 78 39 	sts	0x3978, r25	; 0x803978 <reactStr+0x85>
    2358:	8d c4       	rjmp	.+2330   	; 0x2c74 <ProcessInput+0xb56>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	eb 54       	subi	r30, 0x4B	; 75
    2362:	f6 4c       	sbci	r31, 0xC6	; 198
    2364:	10 82       	st	Z, r1
    2366:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2368:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3988+0x22>
    236c:	90 91 d7 38 	lds	r25, 0x38D7	; 0x8038d7 <actObj1.3988+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2370:	20 91 c8 38 	lds	r18, 0x38C8	; 0x8038c8 <actObj1.3988+0x14>
    2374:	30 91 c9 38 	lds	r19, 0x38C9	; 0x8038c9 <actObj1.3988+0x15>
    2378:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    237c:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2380:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    2384:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2388:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    238c:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2390:	80 91 dc 38 	lds	r24, 0x38DC	; 0x8038dc <actObj1.3988+0x28>
    2394:	56 c5       	rjmp	.+2732   	; 0x2e42 <ProcessInput+0xd24>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2396:	8c 36       	cpi	r24, 0x6C	; 108
    2398:	09 f0       	breq	.+2      	; 0x239c <ProcessInput+0x27e>
    239a:	57 c1       	rjmp	.+686    	; 0x264a <ProcessInput+0x52c>
    239c:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
            if (inputLen == 1) {
    23a0:	b1 e0       	ldi	r27, 0x01	; 1
    23a2:	fb 12       	cpse	r15, r27
    23a4:	f6 c0       	rjmp	.+492    	; 0x2592 <ProcessInput+0x474>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    23a6:	80 91 0f 3a 	lds	r24, 0x3A0F	; 0x803a0f <currObj+0x1c>
    23aa:	90 91 10 3a 	lds	r25, 0x3A10	; 0x803a10 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23ae:	20 91 01 3a 	lds	r18, 0x3A01	; 0x803a01 <currObj+0xe>
    23b2:	30 91 02 3a 	lds	r19, 0x3A02	; 0x803a02 <currObj+0xf>
    23b6:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    23ba:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    23be:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    23c2:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    23c6:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    23ca:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23ce:	8b e5       	ldi	r24, 0x5B	; 91
    23d0:	9a e7       	ldi	r25, 0x7A	; 122
    23d2:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    23d6:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	80 93 37 39 	sts	0x3937, r24	; 0x803937 <reactStr+0x44>
    23e2:	90 93 38 39 	sts	0x3938, r25	; 0x803938 <reactStr+0x45>
    reactStr[2][number]=type;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	80 93 77 39 	sts	0x3977, r24	; 0x803977 <reactStr+0x84>
    23ee:	90 93 78 39 	sts	0x3978, r25	; 0x803978 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23f2:	2e ee       	ldi	r18, 0xEE	; 238
    23f4:	39 e7       	ldi	r19, 0x79	; 121
    23f6:	20 93 f9 38 	sts	0x38F9, r18	; 0x8038f9 <reactStr+0x6>
    23fa:	30 93 fa 38 	sts	0x38FA, r19	; 0x8038fa <reactStr+0x7>
    reactStr[1][number]=length;
    23fe:	25 e1       	ldi	r18, 0x15	; 21
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	20 93 39 39 	sts	0x3939, r18	; 0x803939 <reactStr+0x46>
    2406:	30 93 3a 39 	sts	0x393A, r19	; 0x80393a <reactStr+0x47>
    reactStr[2][number]=type;
    240a:	80 93 79 39 	sts	0x3979, r24	; 0x803979 <reactStr+0x86>
    240e:	90 93 7a 39 	sts	0x397A, r25	; 0x80397a <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	eb 54       	subi	r30, 0x4B	; 75
    241a:	f6 4c       	sbci	r31, 0xC6	; 198
    241c:	10 82       	st	Z, r1
    241e:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2424:	99 e5       	ldi	r25, 0x59	; 89
    2426:	c9 2e       	mov	r12, r25
    2428:	9a e7       	ldi	r25, 0x7A	; 122
    242a:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    242c:	22 e0       	ldi	r18, 0x02	; 2
    242e:	a2 2e       	mov	r10, r18
    2430:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2432:	88 24       	eor	r8, r8
    2434:	83 94       	inc	r8
    2436:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2438:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 01       	movw	r18, r24
    2440:	22 0f       	add	r18, r18
    2442:	33 1f       	adc	r19, r19
    2444:	f9 01       	movw	r30, r18
    2446:	eb 54       	subi	r30, 0x4B	; 75
    2448:	f6 4c       	sbci	r31, 0xC6	; 198
    244a:	7f 01       	movw	r14, r30
    244c:	40 81       	ld	r20, Z
    244e:	51 81       	ldd	r21, Z+1	; 0x01
    2450:	f9 01       	movw	r30, r18
    2452:	ed 54       	subi	r30, 0x4D	; 77
    2454:	f6 4c       	sbci	r31, 0xC6	; 198
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	83 da       	rcall	.-2810   	; 0x1964 <FindChild>
    245e:	d7 01       	movw	r26, r14
    2460:	8d 93       	st	X+, r24
    2462:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2464:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	eb 54       	subi	r30, 0x4B	; 75
    2470:	f6 4c       	sbci	r31, 0xC6	; 198
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	09 f4       	brne	.+2      	; 0x247c <ProcessInput+0x35e>
    247a:	4a c0       	rjmp	.+148    	; 0x2510 <ProcessInput+0x3f2>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    247c:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    2480:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    2484:	82 17       	cp	r24, r18
    2486:	93 07       	cpc	r25, r19
    2488:	09 f4       	brne	.+2      	; 0x248c <ProcessInput+0x36e>
    248a:	42 c0       	rjmp	.+132    	; 0x2510 <ProcessInput+0x3f2>
    248c:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    2490:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    2494:	82 17       	cp	r24, r18
    2496:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2498:	d9 f1       	breq	.+118    	; 0x2510 <ProcessInput+0x3f2>
    249a:	64 eb       	ldi	r22, 0xB4	; 180
    249c:	78 e3       	ldi	r23, 0x38	; 56
    249e:	97 d9       	rcall	.-3282   	; 0x17ce <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    24a0:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3988+0x1a>
    24a4:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <actObj1.3988+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24a8:	e6 2d       	mov	r30, r6
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	df 01       	movw	r26, r30
    24ae:	aa 0f       	add	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	ad 50       	subi	r26, 0x0D	; 13
    24b4:	b7 4c       	sbci	r27, 0xC7	; 199
    24b6:	20 91 c0 38 	lds	r18, 0x38C0	; 0x8038c0 <actObj1.3988+0xc>
    24ba:	30 91 c1 38 	lds	r19, 0x38C1	; 0x8038c1 <actObj1.3988+0xd>
    24be:	2d 93       	st	X+, r18
    24c0:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    24c2:	df 01       	movw	r26, r30
    24c4:	aa 0f       	add	r26, r26
    24c6:	bb 1f       	adc	r27, r27
    24c8:	ad 5c       	subi	r26, 0xCD	; 205
    24ca:	b6 4c       	sbci	r27, 0xC6	; 198
    24cc:	8d 93       	st	X+, r24
    24ce:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	ed 58       	subi	r30, 0x8D	; 141
    24d6:	f6 4c       	sbci	r31, 0xC6	; 198
    24d8:	10 82       	st	Z, r1
    24da:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	86 0d       	add	r24, r6
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	63 94       	inc	r6
    24e4:	63 94       	inc	r6
    24e6:	fc 01       	movw	r30, r24
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	ed 50       	subi	r30, 0x0D	; 13
    24ee:	f7 4c       	sbci	r31, 0xC7	; 199
    24f0:	c0 82       	st	Z, r12
    24f2:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    24f4:	fc 01       	movw	r30, r24
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	ed 5c       	subi	r30, 0xCD	; 205
    24fc:	f6 4c       	sbci	r31, 0xC6	; 198
    24fe:	a0 82       	st	Z, r10
    2500:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	fc 01       	movw	r30, r24
    2508:	ed 58       	subi	r30, 0x8D	; 141
    250a:	f6 4c       	sbci	r31, 0xC6	; 198
    250c:	80 82       	st	Z, r8
    250e:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2510:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <currDepth>
    2514:	82 2f       	mov	r24, r18
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	fc 01       	movw	r30, r24
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	eb 54       	subi	r30, 0x4B	; 75
    2520:	f6 4c       	sbci	r31, 0xC6	; 198
    2522:	40 81       	ld	r20, Z
    2524:	51 81       	ldd	r21, Z+1	; 0x01
    2526:	45 2b       	or	r20, r21
    2528:	09 f0       	breq	.+2      	; 0x252c <ProcessInput+0x40e>
    252a:	86 cf       	rjmp	.-244    	; 0x2438 <ProcessInput+0x31a>

                //Look back if not on level 0
                if (currDepth) {
    252c:	22 23       	and	r18, r18
    252e:	69 f1       	breq	.+90     	; 0x258a <ProcessInput+0x46c>
                    PopulateObject(route[currDepth-1], &actObj1);
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	fc 01       	movw	r30, r24
    2536:	ef 54       	subi	r30, 0x4F	; 79
    2538:	f6 4c       	sbci	r31, 0xC6	; 198
    253a:	64 eb       	ldi	r22, 0xB4	; 180
    253c:	78 e3       	ldi	r23, 0x38	; 56
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	45 d9       	rcall	.-3446   	; 0x17ce <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2544:	20 91 ce 38 	lds	r18, 0x38CE	; 0x8038ce <actObj1.3988+0x1a>
    2548:	30 91 cf 38 	lds	r19, 0x38CF	; 0x8038cf <actObj1.3988+0x1b>
    254c:	77 24       	eor	r7, r7
    254e:	73 94       	inc	r7
    2550:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2552:	86 2d       	mov	r24, r6
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	fc 01       	movw	r30, r24
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	ed 50       	subi	r30, 0x0D	; 13
    255e:	f7 4c       	sbci	r31, 0xC7	; 199
    2560:	40 91 c0 38 	lds	r20, 0x38C0	; 0x8038c0 <actObj1.3988+0xc>
    2564:	50 91 c1 38 	lds	r21, 0x38C1	; 0x8038c1 <actObj1.3988+0xd>
    2568:	40 83       	st	Z, r20
    256a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    256c:	fc 01       	movw	r30, r24
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	ed 5c       	subi	r30, 0xCD	; 205
    2574:	f6 4c       	sbci	r31, 0xC6	; 198
    2576:	20 83       	st	Z, r18
    2578:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	fc 01       	movw	r30, r24
    2580:	ed 58       	subi	r30, 0x8D	; 141
    2582:	f6 4c       	sbci	r31, 0xC6	; 198
    2584:	10 82       	st	Z, r1
    2586:	11 82       	std	Z+1, r1	; 0x01
    2588:	9b c5       	rjmp	.+2870   	; 0x30c0 <ProcessInput+0xfa2>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    258a:	77 24       	eor	r7, r7
    258c:	7a 94       	dec	r7
    258e:	76 0c       	add	r7, r6
    2590:	97 c5       	rjmp	.+2862   	; 0x30c0 <ProcessInput+0xfa2>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2592:	ee 2e       	mov	r14, r30
    2594:	f1 2c       	mov	r15, r1
    2596:	f7 01       	movw	r30, r14
    2598:	ee 0f       	add	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	ed 54       	subi	r30, 0x4D	; 77
    259e:	f6 4c       	sbci	r31, 0xC6	; 198
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	d8 01       	movw	r26, r16
    25a6:	11 96       	adiw	r26, 0x01	; 1
    25a8:	6c 91       	ld	r22, X
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	da d9       	rcall	.-3148   	; 0x1964 <FindChild>
    25b0:	f7 01       	movw	r30, r14
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	eb 54       	subi	r30, 0x4B	; 75
    25b8:	f6 4c       	sbci	r31, 0xC6	; 198
    25ba:	80 83       	st	Z, r24
    25bc:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    25be:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <currDepth>
    25c2:	29 2f       	mov	r18, r25
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	f9 01       	movw	r30, r18
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	eb 54       	subi	r30, 0x4B	; 75
    25ce:	f6 4c       	sbci	r31, 0xC6	; 198
    25d0:	40 81       	ld	r20, Z
    25d2:	51 81       	ldd	r21, Z+1	; 0x01
    25d4:	41 15       	cp	r20, r1
    25d6:	51 05       	cpc	r21, r1
    25d8:	21 f0       	breq	.+8      	; 0x25e2 <ProcessInput+0x4c4>
                    PopulateObject(route[currDepth+1], &actObj1);
    25da:	64 eb       	ldi	r22, 0xB4	; 180
    25dc:	78 e3       	ldi	r23, 0x38	; 56
    25de:	ca 01       	movw	r24, r20
    25e0:	1e c0       	rjmp	.+60     	; 0x261e <ProcessInput+0x500>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    25e2:	99 23       	and	r25, r25
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <ProcessInput+0x4ca>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    25e6:	a8 c5       	rjmp	.+2896   	; 0x3138 <ProcessInput+0x101a>
    25e8:	22 0f       	add	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	f9 01       	movw	r30, r18
    25ee:	ef 54       	subi	r30, 0x4F	; 79
    25f0:	f6 4c       	sbci	r31, 0xC6	; 198
    25f2:	d8 01       	movw	r26, r16
    25f4:	11 96       	adiw	r26, 0x01	; 1
    25f6:	6c 91       	ld	r22, X
    25f8:	80 81       	ld	r24, Z
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	5f d9       	rcall	.-3394   	; 0x18bc <CheckLetter>
    25fe:	81 11       	cpse	r24, r1
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <ProcessInput+0x4ea>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2602:	77 24       	eor	r7, r7
    2604:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2606:	5c c5       	rjmp	.+2744   	; 0x30c0 <ProcessInput+0xfa2>
    2608:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	ef 54       	subi	r30, 0x4F	; 79
    2614:	f6 4c       	sbci	r31, 0xC6	; 198
    2616:	64 eb       	ldi	r22, 0xB4	; 180
    2618:	78 e3       	ldi	r23, 0x38	; 56
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	d7 d8       	rcall	.-3666   	; 0x17ce <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2620:	80 91 d0 38 	lds	r24, 0x38D0	; 0x8038d0 <actObj1.3988+0x1c>
    2624:	90 91 d1 38 	lds	r25, 0x38D1	; 0x8038d1 <actObj1.3988+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2628:	20 91 c2 38 	lds	r18, 0x38C2	; 0x8038c2 <actObj1.3988+0xe>
    262c:	30 91 c3 38 	lds	r19, 0x38C3	; 0x8038c3 <actObj1.3988+0xf>
    2630:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    2634:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2638:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    263c:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2640:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    2644:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
    2648:	31 ce       	rjmp	.-926    	; 0x22ac <ProcessInput+0x18e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    264a:	80 37       	cpi	r24, 0x70	; 112
    264c:	09 f0       	breq	.+2      	; 0x2650 <ProcessInput+0x532>
    264e:	96 c0       	rjmp	.+300    	; 0x277c <ProcessInput+0x65e>
            if (inventory[0]&&inventory[1]) {
    2650:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    2654:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2658:	89 2b       	or	r24, r25
    265a:	79 f0       	breq	.+30     	; 0x267a <ProcessInput+0x55c>
    265c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    2660:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    2664:	89 2b       	or	r24, r25
    2666:	49 f0       	breq	.+18     	; 0x267a <ProcessInput+0x55c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2668:	85 e4       	ldi	r24, 0x45	; 69
    266a:	98 e7       	ldi	r25, 0x78	; 120
    266c:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2670:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2674:	89 e5       	ldi	r24, 0x59	; 89
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0f ce       	rjmp	.-994    	; 0x2298 <ProcessInput+0x17a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    267a:	b2 e0       	ldi	r27, 0x02	; 2
    267c:	fb 12       	cpse	r15, r27
    267e:	7f cd       	rjmp	.-1282   	; 0x217e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2680:	e0 90 26 38 	lds	r14, 0x3826	; 0x803826 <currDepth>
    2684:	f1 2c       	mov	r15, r1
    2686:	f7 01       	movw	r30, r14
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	ed 54       	subi	r30, 0x4D	; 77
    268e:	f6 4c       	sbci	r31, 0xC6	; 198
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	d8 01       	movw	r26, r16
    2696:	11 96       	adiw	r26, 0x01	; 1
    2698:	6c 91       	ld	r22, X
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	62 d9       	rcall	.-3388   	; 0x1964 <FindChild>
    26a0:	f7 01       	movw	r30, r14
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	eb 54       	subi	r30, 0x4B	; 75
    26a8:	f6 4c       	sbci	r31, 0xC6	; 198
    26aa:	80 83       	st	Z, r24
    26ac:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    26ae:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <currDepth>
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	2f 5f       	subi	r18, 0xFF	; 255
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	22 0f       	add	r18, r18
    26ba:	33 1f       	adc	r19, r19
    26bc:	f9 01       	movw	r30, r18
    26be:	ed 54       	subi	r30, 0x4D	; 77
    26c0:	f6 4c       	sbci	r31, 0xC6	; 198
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	09 f4       	brne	.+2      	; 0x26cc <ProcessInput+0x5ae>
    26ca:	ca c3       	rjmp	.+1940   	; 0x2e60 <ProcessInput+0xd42>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    26cc:	40 91 31 38 	lds	r20, 0x3831	; 0x803831 <inventory>
    26d0:	50 91 32 38 	lds	r21, 0x3832	; 0x803832 <inventory+0x1>
    26d4:	84 17       	cp	r24, r20
    26d6:	95 07       	cpc	r25, r21
    26d8:	39 f0       	breq	.+14     	; 0x26e8 <ProcessInput+0x5ca>
    26da:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <inventory+0x2>
    26de:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <inventory+0x3>
    26e2:	84 17       	cp	r24, r20
    26e4:	95 07       	cpc	r25, r21
    26e6:	c1 f4       	brne	.+48     	; 0x2718 <ProcessInput+0x5fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26e8:	80 e2       	ldi	r24, 0x20	; 32
    26ea:	98 e7       	ldi	r25, 0x78	; 120
    26ec:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    26f0:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    26f4:	85 e2       	ldi	r24, 0x25	; 37
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    26fc:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    2708:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    270c:	f9 01       	movw	r30, r18
    270e:	ed 54       	subi	r30, 0x4D	; 77
    2710:	f6 4c       	sbci	r31, 0xC6	; 198
    2712:	10 82       	st	Z, r1
    2714:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2716:	ca cd       	rjmp	.-1132   	; 0x22ac <ProcessInput+0x18e>
    2718:	64 eb       	ldi	r22, 0xB4	; 180
    271a:	78 e3       	ldi	r23, 0x38	; 56
    271c:	58 d8       	rcall	.-3920   	; 0x17ce <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    271e:	80 91 bb 38 	lds	r24, 0x38BB	; 0x8038bb <actObj1.3988+0x7>
    2722:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <CheckState>
    2726:	88 23       	and	r24, r24
    2728:	09 f4       	brne	.+2      	; 0x272c <ProcessInput+0x60e>
    272a:	75 c3       	rjmp	.+1770   	; 0x2e16 <ProcessInput+0xcf8>
                            if (actObj1.byteField[ITEM_NR]) {
    272c:	80 91 bf 38 	lds	r24, 0x38BF	; 0x8038bf <actObj1.3988+0xb>
    2730:	88 23       	and	r24, r24
    2732:	09 f4       	brne	.+2      	; 0x2736 <ProcessInput+0x618>
    2734:	24 cd       	rjmp	.-1464   	; 0x217e <ProcessInput+0x60>
                                if (inventory[0]) {
    2736:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    273a:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    273e:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	eb 54       	subi	r30, 0x4B	; 75
    274a:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    274c:	89 2b       	or	r24, r25
    274e:	39 f0       	breq	.+14     	; 0x275e <ProcessInput+0x640>
                                    inventory[1] = route[currDepth+1];
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    2758:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
    275c:	06 c0       	rjmp	.+12     	; 0x276a <ProcessInput+0x64c>
                                } else {
                                    inventory[0] = route[currDepth+1];
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    2766:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    276a:	8a e0       	ldi	r24, 0x0A	; 10
    276c:	98 e7       	ldi	r25, 0x78	; 120
    276e:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2772:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2776:	86 e1       	ldi	r24, 0x16	; 22
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	5e c2       	rjmp	.+1212   	; 0x2c38 <ProcessInput+0xb1a>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    277c:	84 36       	cpi	r24, 0x64	; 100
    277e:	d9 f4       	brne	.+54     	; 0x27b6 <ProcessInput+0x698>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2780:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    2784:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	09 f0       	breq	.+2      	; 0x278e <ProcessInput+0x670>
    278c:	d8 c4       	rjmp	.+2480   	; 0x313e <ProcessInput+0x1020>
    278e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    2792:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    2796:	89 2b       	or	r24, r25
    2798:	49 f4       	brne	.+18     	; 0x27ac <ProcessInput+0x68e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    279a:	84 ee       	ldi	r24, 0xE4	; 228
    279c:	97 e7       	ldi	r25, 0x77	; 119
    279e:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    27a2:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    27a6:	86 e2       	ldi	r24, 0x26	; 38
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	76 cd       	rjmp	.-1300   	; 0x2298 <ProcessInput+0x17a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    27ac:	b2 e0       	ldi	r27, 0x02	; 2
    27ae:	fb 16       	cp	r15, r27
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <ProcessInput+0x696>
    27b2:	2a c5       	rjmp	.+2644   	; 0x3208 <ProcessInput+0x10ea>
    27b4:	e4 cc       	rjmp	.-1592   	; 0x217e <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    27b6:	89 36       	cpi	r24, 0x69	; 105
    27b8:	09 f0       	breq	.+2      	; 0x27bc <ProcessInput+0x69e>
    27ba:	7b c0       	rjmp	.+246    	; 0x28b2 <ProcessInput+0x794>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    27bc:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    27c0:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    27c4:	89 2b       	or	r24, r25
    27c6:	31 f4       	brne	.+12     	; 0x27d4 <ProcessInput+0x6b6>
    27c8:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    27cc:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    27d0:	89 2b       	or	r24, r25
    27d2:	19 f3       	breq	.-58     	; 0x279a <ProcessInput+0x67c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27d4:	8a e0       	ldi	r24, 0x0A	; 10
    27d6:	98 e7       	ldi	r25, 0x78	; 120
    27d8:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    27dc:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    27e0:	86 e1       	ldi	r24, 0x16	; 22
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    27e8:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    27f4:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>
    27f8:	21 e3       	ldi	r18, 0x31	; 49
    27fa:	e2 2e       	mov	r14, r18
    27fc:	28 e3       	ldi	r18, 0x38	; 56
    27fe:	f2 2e       	mov	r15, r18
    2800:	35 e3       	ldi	r19, 0x35	; 53
    2802:	63 2e       	mov	r6, r19
    2804:	38 e3       	ldi	r19, 0x38	; 56
    2806:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2808:	42 e0       	ldi	r20, 0x02	; 2
    280a:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    280c:	59 e5       	ldi	r21, 0x59	; 89
    280e:	c5 2e       	mov	r12, r21
    2810:	5a e7       	ldi	r21, 0x7A	; 122
    2812:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2814:	62 e0       	ldi	r22, 0x02	; 2
    2816:	a6 2e       	mov	r10, r22
    2818:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    281a:	88 24       	eor	r8, r8
    281c:	83 94       	inc	r8
    281e:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2820:	d7 01       	movw	r26, r14
    2822:	8d 91       	ld	r24, X+
    2824:	9d 91       	ld	r25, X+
    2826:	7d 01       	movw	r14, r26
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	d9 f1       	breq	.+118    	; 0x28a2 <ProcessInput+0x784>
                        PopulateObject(inventory[x], &actObj1);
    282c:	64 eb       	ldi	r22, 0xB4	; 180
    282e:	78 e3       	ldi	r23, 0x38	; 56
    2830:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2834:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3988+0x1a>
    2838:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <actObj1.3988+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    283c:	e5 2d       	mov	r30, r5
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	df 01       	movw	r26, r30
    2842:	aa 0f       	add	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	ad 50       	subi	r26, 0x0D	; 13
    2848:	b7 4c       	sbci	r27, 0xC7	; 199
    284a:	20 91 c0 38 	lds	r18, 0x38C0	; 0x8038c0 <actObj1.3988+0xc>
    284e:	30 91 c1 38 	lds	r19, 0x38C1	; 0x8038c1 <actObj1.3988+0xd>
    2852:	2d 93       	st	X+, r18
    2854:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2856:	df 01       	movw	r26, r30
    2858:	aa 0f       	add	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	ad 5c       	subi	r26, 0xCD	; 205
    285e:	b6 4c       	sbci	r27, 0xC6	; 198
    2860:	8d 93       	st	X+, r24
    2862:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	ed 58       	subi	r30, 0x8D	; 141
    286a:	f6 4c       	sbci	r31, 0xC6	; 198
    286c:	10 82       	st	Z, r1
    286e:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2870:	e1 e0       	ldi	r30, 0x01	; 1
    2872:	e5 0d       	add	r30, r5
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	53 94       	inc	r5
    2878:	53 94       	inc	r5
    287a:	df 01       	movw	r26, r30
    287c:	aa 0f       	add	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	ad 50       	subi	r26, 0x0D	; 13
    2882:	b7 4c       	sbci	r27, 0xC7	; 199
    2884:	cd 92       	st	X+, r12
    2886:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2888:	df 01       	movw	r26, r30
    288a:	aa 0f       	add	r26, r26
    288c:	bb 1f       	adc	r27, r27
    288e:	ad 5c       	subi	r26, 0xCD	; 205
    2890:	b6 4c       	sbci	r27, 0xC6	; 198
    2892:	ad 92       	st	X+, r10
    2894:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ed 58       	subi	r30, 0x8D	; 141
    289c:	f6 4c       	sbci	r31, 0xC6	; 198
    289e:	80 82       	st	Z, r8
    28a0:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    28a2:	6e 14       	cp	r6, r14
    28a4:	7f 04       	cpc	r7, r15
    28a6:	09 f0       	breq	.+2      	; 0x28aa <ProcessInput+0x78c>
    28a8:	bb cf       	rjmp	.-138    	; 0x2820 <ProcessInput+0x702>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    28aa:	77 24       	eor	r7, r7
    28ac:	7a 94       	dec	r7
    28ae:	75 0c       	add	r7, r5
    28b0:	07 c4       	rjmp	.+2062   	; 0x30c0 <ProcessInput+0xfa2>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    28b2:	9c e8       	ldi	r25, 0x8C	; 140
    28b4:	98 0f       	add	r25, r24
    28b6:	92 30       	cpi	r25, 0x02	; 2
    28b8:	28 f0       	brcs	.+10     	; 0x28c4 <ProcessInput+0x7a6>
    28ba:	87 36       	cpi	r24, 0x67	; 103
    28bc:	19 f0       	breq	.+6      	; 0x28c4 <ProcessInput+0x7a6>
    28be:	82 37       	cpi	r24, 0x72	; 114
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <ProcessInput+0x7a6>
    28c2:	d7 c2       	rjmp	.+1454   	; 0x2e72 <ProcessInput+0xd54>
            if ((inputLen<2)||(inputLen>3)) {
    28c4:	8e ef       	ldi	r24, 0xFE	; 254
    28c6:	8f 0d       	add	r24, r15
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <ProcessInput+0x7b0>
    28cc:	58 cc       	rjmp	.-1872   	; 0x217e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    28ce:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    28d2:	ce 2e       	mov	r12, r30
    28d4:	d1 2c       	mov	r13, r1
    28d6:	d8 01       	movw	r26, r16
    28d8:	af 0d       	add	r26, r15
    28da:	b1 1d       	adc	r27, r1
    28dc:	11 97       	sbiw	r26, 0x01	; 1
    28de:	f6 01       	movw	r30, r12
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	ed 54       	subi	r30, 0x4D	; 77
    28e6:	f6 4c       	sbci	r31, 0xC6	; 198
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	50 e0       	ldi	r21, 0x00	; 0
    28ec:	6c 91       	ld	r22, X
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	38 d8       	rcall	.-3984   	; 0x1964 <FindChild>
    28f4:	f6 01       	movw	r30, r12
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	eb 54       	subi	r30, 0x4B	; 75
    28fc:	f6 4c       	sbci	r31, 0xC6	; 198
    28fe:	80 83       	st	Z, r24
    2900:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2902:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	ee 0f       	add	r30, r30
    290a:	ff 1f       	adc	r31, r31
    290c:	eb 54       	subi	r30, 0x4B	; 75
    290e:	f6 4c       	sbci	r31, 0xC6	; 198
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	09 f4       	brne	.+2      	; 0x291a <ProcessInput+0x7fc>
    2918:	9a c2       	rjmp	.+1332   	; 0x2e4e <ProcessInput+0xd30>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    291a:	b3 e0       	ldi	r27, 0x03	; 3
    291c:	fb 12       	cpse	r15, r27
    291e:	78 c1       	rjmp	.+752    	; 0x2c10 <ProcessInput+0xaf2>
    2920:	f8 01       	movw	r30, r16
    2922:	20 81       	ld	r18, Z
    2924:	25 37       	cpi	r18, 0x75	; 117
    2926:	19 f0       	breq	.+6      	; 0x292e <ProcessInput+0x810>
    2928:	27 36       	cpi	r18, 0x67	; 103
    292a:	09 f0       	breq	.+2      	; 0x292e <ProcessInput+0x810>
    292c:	71 c1       	rjmp	.+738    	; 0x2c10 <ProcessInput+0xaf2>
    292e:	61 2c       	mov	r6, r1
    2930:	77 24       	eor	r7, r7
    2932:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2934:	54 e6       	ldi	r21, 0x64	; 100
    2936:	c5 2e       	mov	r12, r21
    2938:	59 e7       	ldi	r21, 0x79	; 121
    293a:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    293c:	61 e2       	ldi	r22, 0x21	; 33
    293e:	a6 2e       	mov	r10, r22
    2940:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2942:	88 24       	eor	r8, r8
    2944:	83 94       	inc	r8
    2946:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2948:	e6 2c       	mov	r14, r6
    294a:	f1 2c       	mov	r15, r1
    294c:	c7 01       	movw	r24, r14
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	9c 01       	movw	r18, r24
    2954:	2f 5c       	subi	r18, 0xCF	; 207
    2956:	37 4c       	sbci	r19, 0xC7	; 199
    2958:	79 01       	movw	r14, r18
    295a:	d9 01       	movw	r26, r18
    295c:	8d 91       	ld	r24, X+
    295e:	9c 91       	ld	r25, X
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	81 f0       	breq	.+32     	; 0x2984 <ProcessInput+0x866>
                                if (CheckLetter(inventory[x], data[1])) {
    2964:	f8 01       	movw	r30, r16
    2966:	61 81       	ldd	r22, Z+1	; 0x01
    2968:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <CheckLetter>
    296c:	88 23       	and	r24, r24
    296e:	51 f0       	breq	.+20     	; 0x2984 <ProcessInput+0x866>
                                    PopulateObject(inventory[x], &actObj2);
    2970:	69 e8       	ldi	r22, 0x89	; 137
    2972:	78 e3       	ldi	r23, 0x38	; 56
    2974:	d7 01       	movw	r26, r14
    2976:	8d 91       	ld	r24, X+
    2978:	9c 91       	ld	r25, X
    297a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>
                                    x = 2;
    297e:	32 e0       	ldi	r19, 0x02	; 2
    2980:	63 2e       	mov	r6, r19
    2982:	1e c0       	rjmp	.+60     	; 0x29c0 <ProcessInput+0x8a2>
                                }
                            }
                            if (x == 1) { 
    2984:	b1 e0       	ldi	r27, 0x01	; 1
    2986:	6b 12       	cpse	r6, r27
    2988:	1a c0       	rjmp	.+52     	; 0x29be <ProcessInput+0x8a0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    298a:	e7 2d       	mov	r30, r7
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	df 01       	movw	r26, r30
    2990:	aa 0f       	add	r26, r26
    2992:	bb 1f       	adc	r27, r27
    2994:	ad 50       	subi	r26, 0x0D	; 13
    2996:	b7 4c       	sbci	r27, 0xC7	; 199
    2998:	cd 92       	st	X+, r12
    299a:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    299c:	df 01       	movw	r26, r30
    299e:	aa 0f       	add	r26, r26
    29a0:	bb 1f       	adc	r27, r27
    29a2:	ad 5c       	subi	r26, 0xCD	; 205
    29a4:	b6 4c       	sbci	r27, 0xC6	; 198
    29a6:	ad 92       	st	X+, r10
    29a8:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	ed 58       	subi	r30, 0x8D	; 141
    29b0:	f6 4c       	sbci	r31, 0xC6	; 198
    29b2:	80 82       	st	Z, r8
    29b4:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    29b6:	f8 01       	movw	r30, r16
    29b8:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    29ba:	73 94       	inc	r7
    29bc:	01 c0       	rjmp	.+2      	; 0x29c0 <ProcessInput+0x8a2>
    29be:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    29c0:	63 94       	inc	r6
    29c2:	f1 e0       	ldi	r31, 0x01	; 1
    29c4:	6f 16       	cp	r6, r31
    29c6:	09 f4       	brne	.+2      	; 0x29ca <ProcessInput+0x8ac>
    29c8:	bf cf       	rjmp	.-130    	; 0x2948 <ProcessInput+0x82a>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    29ca:	d8 01       	movw	r26, r16
    29cc:	8c 91       	ld	r24, X
    29ce:	88 23       	and	r24, r24
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <ProcessInput+0x8b6>
    29d2:	76 c3       	rjmp	.+1772   	; 0x30c0 <ProcessInput+0xfa2>
                            PopulateObject(route[currDepth+1], &actObj1);
    29d4:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	ee 0f       	add	r30, r30
    29dc:	ff 1f       	adc	r31, r31
    29de:	eb 54       	subi	r30, 0x4B	; 75
    29e0:	f6 4c       	sbci	r31, 0xC6	; 198
    29e2:	64 eb       	ldi	r22, 0xB4	; 180
    29e4:	78 e3       	ldi	r23, 0x38	; 56
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    29ee:	e0 90 d2 38 	lds	r14, 0x38D2	; 0x8038d2 <actObj1.3988+0x1e>
    29f2:	f0 90 d3 38 	lds	r15, 0x38D3	; 0x8038d3 <actObj1.3988+0x1f>
    29f6:	b1 e0       	ldi	r27, 0x01	; 1
    29f8:	eb 16       	cp	r14, r27
    29fa:	f1 04       	cpc	r15, r1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <ProcessInput+0x8e2>
    29fe:	9a c0       	rjmp	.+308    	; 0x2b34 <ProcessInput+0xa16>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2a00:	98 01       	movw	r18, r16
    2a02:	2e 5f       	subi	r18, 0xFE	; 254
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	80 91 c4 38 	lds	r24, 0x38C4	; 0x8038c4 <actObj1.3988+0x10>
    2a0e:	90 91 c5 38 	lds	r25, 0x38C5	; 0x8038c5 <actObj1.3988+0x11>
    2a12:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <ExtEERead>
                                if (data[2] == '1') {
    2a16:	f8 01       	movw	r30, r16
    2a18:	42 81       	ldd	r20, Z+2	; 0x02
    2a1a:	21 e0       	ldi	r18, 0x01	; 1
    2a1c:	27 0d       	add	r18, r7
    2a1e:	87 2d       	mov	r24, r7
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	41 33       	cpi	r20, 0x31	; 49
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <ProcessInput+0x90a>
    2a26:	6b c0       	rjmp	.+214    	; 0x2afe <ProcessInput+0x9e0>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    2a28:	30 91 94 38 	lds	r19, 0x3894	; 0x803894 <actObj2.3989+0xb>
                                    if ((item < 31)||(item > 34)) {
    2a2c:	51 ee       	ldi	r21, 0xE1	; 225
    2a2e:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a30:	fc 01       	movw	r30, r24
    2a32:	ee 0f       	add	r30, r30
    2a34:	ff 1f       	adc	r31, r31
    2a36:	ed 50       	subi	r30, 0x0D	; 13
    2a38:	f7 4c       	sbci	r31, 0xC7	; 199
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    2a3a:	54 30       	cpi	r21, 0x04	; 4
    2a3c:	60 f0       	brcs	.+24     	; 0x2a56 <ProcessInput+0x938>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a3e:	44 e0       	ldi	r20, 0x04	; 4
    2a40:	59 e7       	ldi	r21, 0x79	; 121
    2a42:	40 83       	st	Z, r20
    2a44:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2a46:	fc 01       	movw	r30, r24
    2a48:	ee 0f       	add	r30, r30
    2a4a:	ff 1f       	adc	r31, r31
    2a4c:	ed 5c       	subi	r30, 0xCD	; 205
    2a4e:	f6 4c       	sbci	r31, 0xC6	; 198
    2a50:	4a e1       	ldi	r20, 0x1A	; 26
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	64 c0       	rjmp	.+200    	; 0x2b1e <ProcessInput+0xa00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a56:	6e e8       	ldi	r22, 0x8E	; 142
    2a58:	75 e7       	ldi	r23, 0x75	; 117
    2a5a:	60 83       	st	Z, r22
    2a5c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2a5e:	fc 01       	movw	r30, r24
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ed 5c       	subi	r30, 0xCD	; 205
    2a66:	f6 4c       	sbci	r31, 0xC6	; 198
    2a68:	62 eb       	ldi	r22, 0xB2	; 178
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	60 83       	st	Z, r22
    2a6e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	fc 01       	movw	r30, r24
    2a76:	ed 58       	subi	r30, 0x8D	; 141
    2a78:	f6 4c       	sbci	r31, 0xC6	; 198
    2a7a:	e0 82       	st	Z, r14
    2a7c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a7e:	82 2f       	mov	r24, r18
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	fc 01       	movw	r30, r24
    2a84:	ee 0f       	add	r30, r30
    2a86:	ff 1f       	adc	r31, r31
    2a88:	ed 50       	subi	r30, 0x0D	; 13
    2a8a:	f7 4c       	sbci	r31, 0xC7	; 199
    2a8c:	6b e5       	ldi	r22, 0x5B	; 91
    2a8e:	7a e7       	ldi	r23, 0x7A	; 122
    2a90:	60 83       	st	Z, r22
    2a92:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2a94:	fc 01       	movw	r30, r24
    2a96:	ee 0f       	add	r30, r30
    2a98:	ff 1f       	adc	r31, r31
    2a9a:	ed 5c       	subi	r30, 0xCD	; 205
    2a9c:	f6 4c       	sbci	r31, 0xC6	; 198
    2a9e:	62 e0       	ldi	r22, 0x02	; 2
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	60 83       	st	Z, r22
    2aa4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	fc 01       	movw	r30, r24
    2aac:	ed 58       	subi	r30, 0x8D	; 141
    2aae:	f6 4c       	sbci	r31, 0xC6	; 198
    2ab0:	e0 82       	st	Z, r14
    2ab2:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	87 0d       	add	r24, r7
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	f3 e0       	ldi	r31, 0x03	; 3
    2abc:	7f 0e       	add	r7, r31
    2abe:	fc 01       	movw	r30, r24
    2ac0:	ee 0f       	add	r30, r30
    2ac2:	ff 1f       	adc	r31, r31
    2ac4:	ed 50       	subi	r30, 0x0D	; 13
    2ac6:	f7 4c       	sbci	r31, 0xC7	; 199
    2ac8:	60 eb       	ldi	r22, 0xB0	; 176
    2aca:	78 e7       	ldi	r23, 0x78	; 120
    2acc:	60 83       	st	Z, r22
    2ace:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	ed 5c       	subi	r30, 0xCD	; 205
    2ad8:	f6 4c       	sbci	r31, 0xC6	; 198
    2ada:	62 e1       	ldi	r22, 0x12	; 18
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	60 83       	st	Z, r22
    2ae0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	ed 58       	subi	r30, 0x8D	; 141
    2aea:	f6 4c       	sbci	r31, 0xC6	; 198
    2aec:	e0 82       	st	Z, r14
    2aee:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2af0:	40 93 e2 38 	sts	0x38E2, r20	; 0x8038e2 <specialInput>
                                        specialInput[1] = item;
    2af4:	30 93 e3 38 	sts	0x38E3, r19	; 0x8038e3 <specialInput+0x1>
                                        specialInput[2] = 0;
    2af8:	10 92 e4 38 	sts	0x38E4, r1	; 0x8038e4 <specialInput+0x2>
    2afc:	e1 c2       	rjmp	.+1474   	; 0x30c0 <ProcessInput+0xfa2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2afe:	fc 01       	movw	r30, r24
    2b00:	ee 0f       	add	r30, r30
    2b02:	ff 1f       	adc	r31, r31
    2b04:	ed 50       	subi	r30, 0x0D	; 13
    2b06:	f7 4c       	sbci	r31, 0xC7	; 199
    2b08:	40 e4       	ldi	r20, 0x40	; 64
    2b0a:	56 e7       	ldi	r21, 0x76	; 118
    2b0c:	40 83       	st	Z, r20
    2b0e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2b10:	fc 01       	movw	r30, r24
    2b12:	ee 0f       	add	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	ed 5c       	subi	r30, 0xCD	; 205
    2b18:	f6 4c       	sbci	r31, 0xC6	; 198
    2b1a:	42 e4       	ldi	r20, 0x42	; 66
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	40 83       	st	Z, r20
    2b20:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	fc 01       	movw	r30, r24
    2b28:	ed 58       	subi	r30, 0x8D	; 141
    2b2a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b2c:	e0 82       	st	Z, r14
    2b2e:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    2b30:	72 2e       	mov	r7, r18
    2b32:	c6 c2       	rjmp	.+1420   	; 0x30c0 <ProcessInput+0xfa2>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    2b34:	90 91 bd 38 	lds	r25, 0x38BD	; 0x8038bd <actObj1.3988+0x9>
    2b38:	80 91 94 38 	lds	r24, 0x3894	; 0x803894 <actObj2.3989+0xb>
    2b3c:	98 13       	cpse	r25, r24
    2b3e:	2f c0       	rjmp	.+94     	; 0x2b9e <ProcessInput+0xa80>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2b40:	20 91 da 38 	lds	r18, 0x38DA	; 0x8038da <actObj1.3988+0x26>
    2b44:	30 91 db 38 	lds	r19, 0x38DB	; 0x8038db <actObj1.3988+0x27>
    2b48:	ff 24       	eor	r15, r15
    2b4a:	f3 94       	inc	r15
    2b4c:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b4e:	87 2d       	mov	r24, r7
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	fc 01       	movw	r30, r24
    2b54:	ee 0f       	add	r30, r30
    2b56:	ff 1f       	adc	r31, r31
    2b58:	ed 50       	subi	r30, 0x0D	; 13
    2b5a:	f7 4c       	sbci	r31, 0xC7	; 199
    2b5c:	40 91 cc 38 	lds	r20, 0x38CC	; 0x8038cc <actObj1.3988+0x18>
    2b60:	50 91 cd 38 	lds	r21, 0x38CD	; 0x8038cd <actObj1.3988+0x19>
    2b64:	40 83       	st	Z, r20
    2b66:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2b68:	fc 01       	movw	r30, r24
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	ed 5c       	subi	r30, 0xCD	; 205
    2b70:	f6 4c       	sbci	r31, 0xC6	; 198
    2b72:	20 83       	st	Z, r18
    2b74:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	ed 58       	subi	r30, 0x8D	; 141
    2b7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2b80:	10 82       	st	Z, r1
    2b82:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    2b84:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3988+0x2a>
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2b8e:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2b92:	80 91 be 38 	lds	r24, 0x38BE	; 0x8038be <actObj1.3988+0xa>
    2b96:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2b9a:	7f 2c       	mov	r7, r15
    2b9c:	91 c2       	rjmp	.+1314   	; 0x30c0 <ProcessInput+0xfa2>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    2b9e:	d8 01       	movw	r26, r16
    2ba0:	8c 91       	ld	r24, X
    2ba2:	85 37       	cpi	r24, 0x75	; 117
    2ba4:	99 f4       	brne	.+38     	; 0x2bcc <ProcessInput+0xaae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ba6:	87 2d       	mov	r24, r7
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	fc 01       	movw	r30, r24
    2bac:	ee 0f       	add	r30, r30
    2bae:	ff 1f       	adc	r31, r31
    2bb0:	ed 50       	subi	r30, 0x0D	; 13
    2bb2:	f7 4c       	sbci	r31, 0xC7	; 199
    2bb4:	24 e0       	ldi	r18, 0x04	; 4
    2bb6:	39 e7       	ldi	r19, 0x79	; 121
    2bb8:	20 83       	st	Z, r18
    2bba:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	ed 5c       	subi	r30, 0xCD	; 205
    2bc4:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc6:	2a e1       	ldi	r18, 0x1A	; 26
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	15 c0       	rjmp	.+42     	; 0x2bf6 <ProcessInput+0xad8>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2bcc:	87 36       	cpi	r24, 0x67	; 103
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <ProcessInput+0xab4>
    2bd0:	77 c2       	rjmp	.+1262   	; 0x30c0 <ProcessInput+0xfa2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bd2:	87 2d       	mov	r24, r7
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	ee 0f       	add	r30, r30
    2bda:	ff 1f       	adc	r31, r31
    2bdc:	ed 50       	subi	r30, 0x0D	; 13
    2bde:	f7 4c       	sbci	r31, 0xC7	; 199
    2be0:	2d ed       	ldi	r18, 0xDD	; 221
    2be2:	36 e7       	ldi	r19, 0x76	; 118
    2be4:	20 83       	st	Z, r18
    2be6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2be8:	fc 01       	movw	r30, r24
    2bea:	ee 0f       	add	r30, r30
    2bec:	ff 1f       	adc	r31, r31
    2bee:	ed 5c       	subi	r30, 0xCD	; 205
    2bf0:	f6 4c       	sbci	r31, 0xC6	; 198
    2bf2:	28 e2       	ldi	r18, 0x28	; 40
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	20 83       	st	Z, r18
    2bf8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	fc 01       	movw	r30, r24
    2c00:	ed 58       	subi	r30, 0x8D	; 141
    2c02:	f6 4c       	sbci	r31, 0xC6	; 198
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	80 83       	st	Z, r24
    2c0a:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2c0c:	73 94       	inc	r7
    2c0e:	58 c2       	rjmp	.+1200   	; 0x30c0 <ProcessInput+0xfa2>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2c10:	64 eb       	ldi	r22, 0xB4	; 180
    2c12:	78 e3       	ldi	r23, 0x38	; 56
    2c14:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    2c18:	f8 01       	movw	r30, r16
    2c1a:	80 81       	ld	r24, Z
    2c1c:	84 37       	cpi	r24, 0x74	; 116
    2c1e:	69 f5       	brne	.+90     	; 0x2c7a <ProcessInput+0xb5c>
    2c20:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3988+0x8>
    2c24:	83 fd       	sbrc	r24, 3
    2c26:	4a c0       	rjmp	.+148    	; 0x2cbc <ProcessInput+0xb9e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c28:	8e e1       	ldi	r24, 0x1E	; 30
    2c2a:	99 e7       	ldi	r25, 0x79	; 121
    2c2c:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2c30:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2c34:	8e e1       	ldi	r24, 0x1E	; 30
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    2c3c:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    2c48:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c4c:	80 91 ce 38 	lds	r24, 0x38CE	; 0x8038ce <actObj1.3988+0x1a>
    2c50:	90 91 cf 38 	lds	r25, 0x38CF	; 0x8038cf <actObj1.3988+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c54:	20 91 c0 38 	lds	r18, 0x38C0	; 0x8038c0 <actObj1.3988+0xc>
    2c58:	30 91 c1 38 	lds	r19, 0x38C1	; 0x8038c1 <actObj1.3988+0xd>
    2c5c:	20 93 f7 38 	sts	0x38F7, r18	; 0x8038f7 <reactStr+0x4>
    2c60:	30 93 f8 38 	sts	0x38F8, r19	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    2c64:	80 93 37 39 	sts	0x3937, r24	; 0x803937 <reactStr+0x44>
    2c68:	90 93 38 39 	sts	0x3938, r25	; 0x803938 <reactStr+0x45>
    reactStr[2][number]=type;
    2c6c:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x84>
    2c70:	10 92 78 39 	sts	0x3978, r1	; 0x803978 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c74:	a3 e0       	ldi	r26, 0x03	; 3
    2c76:	7a 2e       	mov	r7, r26
    2c78:	23 c2       	rjmp	.+1094   	; 0x30c0 <ProcessInput+0xfa2>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    2c7a:	85 37       	cpi	r24, 0x75	; 117
    2c7c:	69 f4       	brne	.+26     	; 0x2c98 <ProcessInput+0xb7a>
    2c7e:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3988+0x8>
    2c82:	84 fd       	sbrc	r24, 4
    2c84:	1b c0       	rjmp	.+54     	; 0x2cbc <ProcessInput+0xb9e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c86:	84 e0       	ldi	r24, 0x04	; 4
    2c88:	99 e7       	ldi	r25, 0x79	; 121
    2c8a:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2c8e:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2c92:	8a e1       	ldi	r24, 0x1A	; 26
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	00 cb       	rjmp	.-2560   	; 0x2298 <ProcessInput+0x17a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    2c98:	82 37       	cpi	r24, 0x72	; 114
    2c9a:	69 f4       	brne	.+26     	; 0x2cb6 <ProcessInput+0xb98>
    2c9c:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3988+0x8>
    2ca0:	85 fd       	sbrc	r24, 5
    2ca2:	0c c0       	rjmp	.+24     	; 0x2cbc <ProcessInput+0xb9e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ca4:	89 ee       	ldi	r24, 0xE9	; 233
    2ca6:	98 e7       	ldi	r25, 0x78	; 120
    2ca8:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2cac:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2cb0:	8b e1       	ldi	r24, 0x1B	; 27
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	f1 ca       	rjmp	.-2590   	; 0x2298 <ProcessInput+0x17a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    2cb6:	87 36       	cpi	r24, 0x67	; 103
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <ProcessInput+0xb9e>
    2cba:	61 ca       	rjmp	.-2878   	; 0x217e <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2cbc:	e0 90 d2 38 	lds	r14, 0x38D2	; 0x8038d2 <actObj1.3988+0x1e>
    2cc0:	f0 90 d3 38 	lds	r15, 0x38D3	; 0x8038d3 <actObj1.3988+0x1f>
    2cc4:	f1 e0       	ldi	r31, 0x01	; 1
    2cc6:	ef 16       	cp	r14, r31
    2cc8:	f1 04       	cpc	r15, r1
    2cca:	11 f5       	brne	.+68     	; 0x2d10 <ProcessInput+0xbf2>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2ccc:	98 01       	movw	r18, r16
    2cce:	2e 5f       	subi	r18, 0xFE	; 254
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	61 e0       	ldi	r22, 0x01	; 1
    2cd6:	80 91 c4 38 	lds	r24, 0x38C4	; 0x8038c4 <actObj1.3988+0x10>
    2cda:	90 91 c5 38 	lds	r25, 0x38C5	; 0x8038c5 <actObj1.3988+0x11>
    2cde:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <ExtEERead>
                                if (data[2] == '1') {
    2ce2:	d8 01       	movw	r26, r16
    2ce4:	12 96       	adiw	r26, 0x02	; 2
    2ce6:	8c 91       	ld	r24, X
    2ce8:	81 33       	cpi	r24, 0x31	; 49
    2cea:	09 f0       	breq	.+2      	; 0x2cee <ProcessInput+0xbd0>
    2cec:	8a cc       	rjmp	.-1772   	; 0x2602 <ProcessInput+0x4e4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cee:	83 e6       	ldi	r24, 0x63	; 99
    2cf0:	95 e7       	ldi	r25, 0x75	; 117
    2cf2:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2cf6:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2cfa:	8b e2       	ldi	r24, 0x2B	; 43
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    2d02:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2d06:	e0 92 75 39 	sts	0x3975, r14	; 0x803975 <reactStr+0x82>
    2d0a:	f0 92 76 39 	sts	0x3976, r15	; 0x803976 <reactStr+0x83>
    2d0e:	ce ca       	rjmp	.-2660   	; 0x22ac <ProcessInput+0x18e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    2d10:	e1 14       	cp	r14, r1
    2d12:	f1 04       	cpc	r15, r1
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <ProcessInput+0xbfa>
    2d16:	59 c0       	rjmp	.+178    	; 0x2dca <ProcessInput+0xcac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d18:	80 91 c4 38 	lds	r24, 0x38C4	; 0x8038c4 <actObj1.3988+0x10>
    2d1c:	90 91 c5 38 	lds	r25, 0x38C5	; 0x8038c5 <actObj1.3988+0x11>
    2d20:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2d24:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2d28:	e0 92 35 39 	sts	0x3935, r14	; 0x803935 <reactStr+0x42>
    2d2c:	f0 92 36 39 	sts	0x3936, r15	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2d30:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    2d34:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d38:	8b e5       	ldi	r24, 0x5B	; 91
    2d3a:	9a e7       	ldi	r25, 0x7A	; 122
    2d3c:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <reactStr+0x4>
    2d40:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	80 93 37 39 	sts	0x3937, r24	; 0x803937 <reactStr+0x44>
    2d4c:	90 93 38 39 	sts	0x3938, r25	; 0x803938 <reactStr+0x45>
    reactStr[2][number]=type;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	80 93 77 39 	sts	0x3977, r24	; 0x803977 <reactStr+0x84>
    2d58:	90 93 78 39 	sts	0x3978, r25	; 0x803978 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d5c:	20 eb       	ldi	r18, 0xB0	; 176
    2d5e:	38 e7       	ldi	r19, 0x78	; 120
    2d60:	20 93 f9 38 	sts	0x38F9, r18	; 0x8038f9 <reactStr+0x6>
    2d64:	30 93 fa 38 	sts	0x38FA, r19	; 0x8038fa <reactStr+0x7>
    reactStr[1][number]=length;
    2d68:	22 e1       	ldi	r18, 0x12	; 18
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	20 93 39 39 	sts	0x3939, r18	; 0x803939 <reactStr+0x46>
    2d70:	30 93 3a 39 	sts	0x393A, r19	; 0x80393a <reactStr+0x47>
    reactStr[2][number]=type;
    2d74:	80 93 79 39 	sts	0x3979, r24	; 0x803979 <reactStr+0x86>
    2d78:	90 93 7a 39 	sts	0x397A, r25	; 0x80397a <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    2d7c:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3988+0x20>
    2d80:	90 91 d5 38 	lds	r25, 0x38D5	; 0x8038d5 <actObj1.3988+0x21>
    2d84:	40 97       	sbiw	r24, 0x10	; 16
    2d86:	30 f0       	brcs	.+12     	; 0x2d94 <ProcessInput+0xc76>
    2d88:	8f e0       	ldi	r24, 0x0F	; 15
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	80 93 d4 38 	sts	0x38D4, r24	; 0x8038d4 <actObj1.3988+0x20>
    2d90:	90 93 d5 38 	sts	0x38D5, r25	; 0x8038d5 <actObj1.3988+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    2d94:	22 ee       	ldi	r18, 0xE2	; 226
    2d96:	38 e3       	ldi	r19, 0x38	; 56
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	60 91 d4 38 	lds	r22, 0x38D4	; 0x8038d4 <actObj1.3988+0x20>
    2d9e:	80 91 c6 38 	lds	r24, 0x38C6	; 0x8038c6 <actObj1.3988+0x12>
    2da2:	90 91 c7 38 	lds	r25, 0x38C7	; 0x8038c7 <actObj1.3988+0x13>
    2da6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    2daa:	62 ee       	ldi	r22, 0xE2	; 226
    2dac:	78 e3       	ldi	r23, 0x38	; 56
    2dae:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3988+0x20>
    2db2:	0e 94 cf 0a 	call	0x159e	; 0x159e <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    2db6:	e0 91 d4 38 	lds	r30, 0x38D4	; 0x8038d4 <actObj1.3988+0x20>
    2dba:	f0 91 d5 38 	lds	r31, 0x38D5	; 0x8038d5 <actObj1.3988+0x21>
    2dbe:	ee 51       	subi	r30, 0x1E	; 30
    2dc0:	f7 4c       	sbci	r31, 0xC7	; 199
    2dc2:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    2dc4:	f4 e0       	ldi	r31, 0x04	; 4
    2dc6:	7f 2e       	mov	r7, r31
    2dc8:	7b c1       	rjmp	.+758    	; 0x30c0 <ProcessInput+0xfa2>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    2dca:	80 91 bb 38 	lds	r24, 0x38BB	; 0x8038bb <actObj1.3988+0x7>
    2dce:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <CheckState>
    2dd2:	88 23       	and	r24, r24
    2dd4:	01 f1       	breq	.+64     	; 0x2e16 <ProcessInput+0xcf8>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2dd6:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3988+0x26>
    2dda:	90 91 db 38 	lds	r25, 0x38DB	; 0x8038db <actObj1.3988+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dde:	20 91 cc 38 	lds	r18, 0x38CC	; 0x8038cc <actObj1.3988+0x18>
    2de2:	30 91 cd 38 	lds	r19, 0x38CD	; 0x8038cd <actObj1.3988+0x19>
    2de6:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    2dea:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2dee:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    2df2:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2df6:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    2dfa:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    2dfe:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3988+0x2a>
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2e08:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2e0c:	80 91 be 38 	lds	r24, 0x38BE	; 0x8038be <actObj1.3988+0xa>
    2e10:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <UpdateState>
    2e14:	4b ca       	rjmp	.-2922   	; 0x22ac <ProcessInput+0x18e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    2e16:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3988+0x24>
    2e1a:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <actObj1.3988+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e1e:	20 91 ca 38 	lds	r18, 0x38CA	; 0x8038ca <actObj1.3988+0x16>
    2e22:	30 91 cb 38 	lds	r19, 0x38CB	; 0x8038cb <actObj1.3988+0x17>
    2e26:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    2e2a:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2e2e:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    2e32:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2e36:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    2e3a:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    2e3e:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3988+0x29>
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2e48:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    2e4c:	2f ca       	rjmp	.-2978   	; 0x22ac <ProcessInput+0x18e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    2e4e:	f8 01       	movw	r30, r16
    2e50:	80 81       	ld	r24, Z
    2e52:	84 37       	cpi	r24, 0x74	; 116
    2e54:	11 f0       	breq	.+4      	; 0x2e5a <ProcessInput+0xd3c>
    2e56:	87 36       	cpi	r24, 0x67	; 103
    2e58:	19 f4       	brne	.+6      	; 0x2e60 <ProcessInput+0xd42>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e5a:	8c e3       	ldi	r24, 0x3C	; 60
    2e5c:	99 e7       	ldi	r25, 0x79	; 121
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <ProcessInput+0xd46>
    2e60:	80 e5       	ldi	r24, 0x50	; 80
    2e62:	99 e7       	ldi	r25, 0x79	; 121
    2e64:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2e68:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2e6c:	84 e1       	ldi	r24, 0x14	; 20
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	13 ca       	rjmp	.-3034   	; 0x2298 <ProcessInput+0x17a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    2e72:	81 36       	cpi	r24, 0x61	; 97
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <ProcessInput+0xd5a>
    2e76:	c5 cb       	rjmp	.-2166   	; 0x2602 <ProcessInput+0x4e4>
            
            //Priest offerings
            if (specialPassed >= 2) {
    2e78:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <specialPassed>
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	08 f4       	brcc	.+2      	; 0x2e82 <ProcessInput+0xd64>
    2e80:	b3 c0       	rjmp	.+358    	; 0x2fe8 <ProcessInput+0xeca>
                if (data[1] > 0) {
    2e82:	d8 01       	movw	r26, r16
    2e84:	11 96       	adiw	r26, 0x01	; 1
    2e86:	2c 91       	ld	r18, X
    2e88:	22 23       	and	r18, r18
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <ProcessInput+0xd70>
    2e8c:	a4 c0       	rjmp	.+328    	; 0x2fd6 <ProcessInput+0xeb8>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    2e8e:	fe 01       	movw	r30, r28
    2e90:	31 96       	adiw	r30, 0x01	; 1
    2e92:	7f 01       	movw	r14, r30
    2e94:	8a e0       	ldi	r24, 0x0A	; 10
    2e96:	df 01       	movw	r26, r30
    2e98:	1d 92       	st	X+, r1
    2e9a:	8a 95       	dec	r24
    2e9c:	e9 f7       	brne	.-6      	; 0x2e98 <ProcessInput+0xd7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    2e9e:	21 53       	subi	r18, 0x31	; 49
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    2ea4:	32 81       	ldd	r19, Z+2	; 0x02
    2ea6:	31 53       	subi	r19, 0x31	; 49
    2ea8:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    2eaa:	83 81       	ldd	r24, Z+3	; 0x03
    2eac:	81 36       	cpi	r24, 0x61	; 97
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <ProcessInput+0xd96>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <ProcessInput+0xda6>
                    else if (data[3] == 'e') data[3] = 0;
    2eb4:	85 36       	cpi	r24, 0x65	; 101
    2eb6:	11 f4       	brne	.+4      	; 0x2ebc <ProcessInput+0xd9e>
    2eb8:	13 82       	std	Z+3, r1	; 0x03
    2eba:	08 c0       	rjmp	.+16     	; 0x2ecc <ProcessInput+0xdae>
                    else if (data[3] == 'f') data[3] = 3;
    2ebc:	86 36       	cpi	r24, 0x66	; 102
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <ProcessInput+0xdaa>
    2ec0:	83 e0       	ldi	r24, 0x03	; 3
    2ec2:	f8 01       	movw	r30, r16
    2ec4:	83 83       	std	Z+3, r24	; 0x03
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <ProcessInput+0xdae>
                    else data[3] = 2;
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    2ecc:	21 fd       	sbrc	r18, 1
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <ProcessInput+0xdba>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <ProcessInput+0xdc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e1       	ldi	r26, 0x10	; 16
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    2ee0:	20 ff       	sbrs	r18, 0
    2ee2:	03 c0       	rjmp	.+6      	; 0x2eea <ProcessInput+0xdcc>
    2ee4:	9f 5f       	subi	r25, 0xFF	; 255
    2ee6:	af 4f       	sbci	r26, 0xFF	; 255
    2ee8:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    2eea:	f8 01       	movw	r30, r16
    2eec:	23 81       	ldd	r18, Z+3	; 0x03
    2eee:	21 fd       	sbrc	r18, 1
    2ef0:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    2ef2:	20 ff       	sbrs	r18, 0
    2ef4:	03 c0       	rjmp	.+6      	; 0x2efc <ProcessInput+0xdde>
    2ef6:	40 96       	adiw	r24, 0x10	; 16
    2ef8:	a1 1d       	adc	r26, r1
    2efa:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    2efc:	31 ff       	sbrs	r19, 1
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <ProcessInput+0xde8>
    2f00:	90 5f       	subi	r25, 0xF0	; 240
    2f02:	af 4f       	sbci	r26, 0xFF	; 255
    2f04:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    2f06:	30 ff       	sbrs	r19, 0
    2f08:	03 c0       	rjmp	.+6      	; 0x2f10 <ProcessInput+0xdf2>
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	a1 1d       	adc	r26, r1
    2f0e:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    2f10:	40 91 30 38 	lds	r20, 0x3830	; 0x803830 <whoami>
    2f14:	24 e0       	ldi	r18, 0x04	; 4
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	24 1b       	sub	r18, r20
    2f1a:	31 09       	sbc	r19, r1
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	cd 01       	movw	r24, r26
    2f20:	04 c0       	rjmp	.+8      	; 0x2f2a <ProcessInput+0xe0c>
    2f22:	66 0f       	add	r22, r22
    2f24:	77 1f       	adc	r23, r23
    2f26:	88 1f       	adc	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	2a 95       	dec	r18
    2f2c:	d2 f7       	brpl	.-12     	; 0x2f22 <ProcessInput+0xe04>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f2e:	26 e0       	ldi	r18, 0x06	; 6
    2f30:	35 e7       	ldi	r19, 0x75	; 117
    2f32:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    2f36:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2f3a:	20 e2       	ldi	r18, 0x20	; 32
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x42>
    2f42:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    2f46:	21 e0       	ldi	r18, 0x01	; 1
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	20 93 75 39 	sts	0x3975, r18	; 0x803975 <reactStr+0x82>
    2f4e:	30 93 76 39 	sts	0x3976, r19	; 0x803976 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    2f52:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    2f54:	b5 2e       	mov	r11, r21
    2f56:	ea e0       	ldi	r30, 0x0A	; 10
    2f58:	4e 2e       	mov	r4, r30
    2f5a:	51 2c       	mov	r5, r1
    2f5c:	61 2c       	mov	r6, r1
    2f5e:	71 2c       	mov	r7, r1
    2f60:	67 01       	movw	r12, r14
    2f62:	cb 0c       	add	r12, r11
    2f64:	d1 1c       	adc	r13, r1
    2f66:	a3 01       	movw	r20, r6
    2f68:	92 01       	movw	r18, r4
    2f6a:	49 d2       	rcall	.+1170   	; 0x33fe <__udivmodsi4>
    2f6c:	d6 01       	movw	r26, r12
    2f6e:	6c 93       	st	X, r22
                        answer /= 10;
    2f70:	b9 01       	movw	r22, r18
    2f72:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    2f74:	61 15       	cp	r22, r1
    2f76:	71 05       	cpc	r23, r1
    2f78:	81 05       	cpc	r24, r1
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	51 f4       	brne	.+20     	; 0x2f92 <ProcessInput+0xe74>
    2f7e:	23 ef       	ldi	r18, 0xF3	; 243
    2f80:	c2 2e       	mov	r12, r18
    2f82:	28 e3       	ldi	r18, 0x38	; 56
    2f84:	d2 2e       	mov	r13, r18
    2f86:	32 e0       	ldi	r19, 0x02	; 2
    2f88:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2f8a:	88 24       	eor	r8, r8
    2f8c:	83 94       	inc	r8
    2f8e:	91 2c       	mov	r9, r1
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <ProcessInput+0xe78>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    2f92:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    2f94:	e5 cf       	rjmp	.-54     	; 0x2f60 <ProcessInput+0xe42>
    2f96:	f2 e0       	ldi	r31, 0x02	; 2
    2f98:	cf 0e       	add	r12, r31
    2f9a:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    2f9c:	29 e0       	ldi	r18, 0x09	; 9
    2f9e:	2b 15       	cp	r18, r11
    2fa0:	08 f4       	brcc	.+2      	; 0x2fa4 <ProcessInput+0xe86>
    2fa2:	8c c0       	rjmp	.+280    	; 0x30bc <ProcessInput+0xf9e>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    2fa4:	73 94       	inc	r7
    2fa6:	f7 01       	movw	r30, r14
    2fa8:	eb 0d       	add	r30, r11
    2faa:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fac:	80 81       	ld	r24, Z
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	8d 52       	subi	r24, 0x2D	; 45
    2fb2:	9b 48       	sbci	r25, 0x8B	; 139
    2fb4:	f6 01       	movw	r30, r12
    2fb6:	82 83       	std	Z+2, r24	; 0x02
    2fb8:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2fba:	ee 5b       	subi	r30, 0xBE	; 190
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 82       	st	Z, r8
    2fc0:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2fc2:	e0 5c       	subi	r30, 0xC0	; 192
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 82       	st	Z, r8
    2fc8:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    2fca:	80 91 be 38 	lds	r24, 0x38BE	; 0x8038be <actObj1.3988+0xa>
    2fce:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    2fd2:	b3 94       	inc	r11
    2fd4:	e0 cf       	rjmp	.-64     	; 0x2f96 <ProcessInput+0xe78>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fd6:	86 e2       	ldi	r24, 0x26	; 38
    2fd8:	95 e7       	ldi	r25, 0x75	; 117
    2fda:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    2fde:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    2fe2:	8d e3       	ldi	r24, 0x3D	; 61
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	5e c0       	rjmp	.+188    	; 0x30a4 <ProcessInput+0xf86>
    2fe8:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	ee 0f       	add	r30, r30
    2ff0:	ff 1f       	adc	r31, r31
    2ff2:	eb 54       	subi	r30, 0x4B	; 75
    2ff4:	f6 4c       	sbci	r31, 0xC6	; 198
    2ff6:	64 eb       	ldi	r22, 0xB4	; 180
    2ff8:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <ProcessInput+0xee2>
    2ffe:	46 c0       	rjmp	.+140    	; 0x308c <ProcessInput+0xf6e>
                PopulateObject(route[currDepth+1], &actObj1);
    3000:	80 81       	ld	r24, Z
    3002:	91 81       	ldd	r25, Z+1	; 0x01
    3004:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3008:	80 91 bb 38 	lds	r24, 0x38BB	; 0x8038bb <actObj1.3988+0x7>
    300c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <CheckState>
    3010:	88 23       	and	r24, r24
    3012:	01 f1       	breq	.+64     	; 0x3054 <ProcessInput+0xf36>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3014:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3988+0x26>
    3018:	90 91 db 38 	lds	r25, 0x38DB	; 0x8038db <actObj1.3988+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    301c:	20 91 cc 38 	lds	r18, 0x38CC	; 0x8038cc <actObj1.3988+0x18>
    3020:	30 91 cd 38 	lds	r19, 0x38CD	; 0x8038cd <actObj1.3988+0x19>
    3024:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    3028:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    302c:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    3030:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    3034:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    3038:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    303c:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3988+0x2a>
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3046:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    304a:	80 91 be 38 	lds	r24, 0x38BE	; 0x8038be <actObj1.3988+0xa>
    304e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <UpdateState>
    3052:	32 c0       	rjmp	.+100    	; 0x30b8 <ProcessInput+0xf9a>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3054:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3988+0x24>
    3058:	90 91 d9 38 	lds	r25, 0x38D9	; 0x8038d9 <actObj1.3988+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    305c:	20 91 ca 38 	lds	r18, 0x38CA	; 0x8038ca <actObj1.3988+0x16>
    3060:	30 91 cb 38 	lds	r19, 0x38CB	; 0x8038cb <actObj1.3988+0x17>
    3064:	20 93 f5 38 	sts	0x38F5, r18	; 0x8038f5 <reactStr+0x2>
    3068:	30 93 f6 38 	sts	0x38F6, r19	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    306c:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    3070:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    3074:	10 92 75 39 	sts	0x3975, r1	; 0x803975 <reactStr+0x82>
    3078:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    307c:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3988+0x29>
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3086:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    308a:	16 c0       	rjmp	.+44     	; 0x30b8 <ProcessInput+0xf9a>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3094:	8e e9       	ldi	r24, 0x9E	; 158
    3096:	98 e7       	ldi	r25, 0x78	; 120
    3098:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    309c:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    30a0:	82 e1       	ldi	r24, 0x12	; 18
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    30a8:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    30b4:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    30b8:	82 e0       	ldi	r24, 0x02	; 2
    30ba:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    30bc:	10 92 e2 38 	sts	0x38E2, r1	; 0x8038e2 <specialInput>
        } else {
               
        }
            
        //Input handled
        data[0] = 0;
    30c0:	d8 01       	movw	r26, r16
    30c2:	1c 92       	st	X, r1
        serRxDone = 0;
    30c4:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
        RXCNT = 0;
    30c8:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ca:	8b e5       	ldi	r24, 0x5B	; 91
    30cc:	9a e7       	ldi	r25, 0x7A	; 122
    30ce:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr>
    30d2:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x1>
    reactStr[1][number]=length;
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x40>
    30de:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x41>
    reactStr[2][number]=type;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x80>
    30ea:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x81>
        //Input handled
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    30ee:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <specialInput>
    30f2:	88 23       	and	r24, r24
    30f4:	19 f0       	breq	.+6      	; 0x30fc <ProcessInput+0xfde>
    30f6:	70 92 f2 38 	sts	0x38F2, r7	; 0x8038f2 <responseList>
    30fa:	9e c0       	rjmp	.+316    	; 0x3238 <ProcessInput+0x111a>
    30fc:	87 2d       	mov	r24, r7
    30fe:	17 c0       	rjmp	.+46     	; 0x312e <ProcessInput+0x1010>

    } else {
        data[0] = 0;
    3100:	f8 01       	movw	r30, r16
    3102:	10 82       	st	Z, r1
        serRxDone = 0;
    3104:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
        RXCNT = 0;
    3108:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    310a:	8b e5       	ldi	r24, 0x5B	; 91
    310c:	9a e7       	ldi	r25, 0x7A	; 122
    310e:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <reactStr>
    3112:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <reactStr+0x1>
    reactStr[1][number]=length;
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x40>
    311e:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x41>
    reactStr[2][number]=type;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x80>
    312a:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x81>
    } else {
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    312e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <SetStandardResponse>
    3132:	80 93 f2 38 	sts	0x38F2, r24	; 0x8038f2 <responseList>
    }
    
    return 0;
    3136:	80 c0       	rjmp	.+256    	; 0x3238 <ProcessInput+0x111a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3138:	84 ed       	ldi	r24, 0xD4	; 212
    313a:	99 e7       	ldi	r25, 0x79	; 121
    313c:	a6 cd       	rjmp	.-1204   	; 0x2c8a <ProcessInput+0xb6c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    313e:	f2 e0       	ldi	r31, 0x02	; 2
    3140:	ff 12       	cpse	r15, r31
    3142:	1d c8       	rjmp	.-4038   	; 0x217e <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3144:	f8 01       	movw	r30, r16
    3146:	61 81       	ldd	r22, Z+1	; 0x01
    3148:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <CheckLetter>
    314c:	88 23       	and	r24, r24
    314e:	09 f4       	brne	.+2      	; 0x3152 <ProcessInput+0x1034>
    3150:	5b c0       	rjmp	.+182    	; 0x3208 <ProcessInput+0x10ea>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	9c 01       	movw	r18, r24
    315c:	2f 5c       	subi	r18, 0xCF	; 207
    315e:	37 4c       	sbci	r19, 0xC7	; 199
    3160:	79 01       	movw	r14, r18
    3162:	64 eb       	ldi	r22, 0xB4	; 180
    3164:	78 e3       	ldi	r23, 0x38	; 56
    3166:	d9 01       	movw	r26, r18
    3168:	8d 91       	ld	r24, X+
    316a:	9c 91       	ld	r25, X
    316c:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3170:	84 ed       	ldi	r24, 0xD4	; 212
    3172:	97 e7       	ldi	r25, 0x77	; 119
    3174:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    3178:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    317c:	80 e1       	ldi	r24, 0x10	; 16
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <reactStr+0x42>
    3184:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <reactStr+0x43>
    reactStr[2][number]=type;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	80 93 75 39 	sts	0x3975, r24	; 0x803975 <reactStr+0x82>
    3190:	90 93 76 39 	sts	0x3976, r25	; 0x803976 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3194:	20 91 ce 38 	lds	r18, 0x38CE	; 0x8038ce <actObj1.3988+0x1a>
    3198:	30 91 cf 38 	lds	r19, 0x38CF	; 0x8038cf <actObj1.3988+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    319c:	40 91 c0 38 	lds	r20, 0x38C0	; 0x8038c0 <actObj1.3988+0xc>
    31a0:	50 91 c1 38 	lds	r21, 0x38C1	; 0x8038c1 <actObj1.3988+0xd>
    31a4:	40 93 f7 38 	sts	0x38F7, r20	; 0x8038f7 <reactStr+0x4>
    31a8:	50 93 f8 38 	sts	0x38F8, r21	; 0x8038f8 <reactStr+0x5>
    reactStr[1][number]=length;
    31ac:	20 93 37 39 	sts	0x3937, r18	; 0x803937 <reactStr+0x44>
    31b0:	30 93 38 39 	sts	0x3938, r19	; 0x803938 <reactStr+0x45>
    reactStr[2][number]=type;
    31b4:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x84>
    31b8:	10 92 78 39 	sts	0x3978, r1	; 0x803978 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31bc:	2b e5       	ldi	r18, 0x5B	; 91
    31be:	3a e7       	ldi	r19, 0x7A	; 122
    31c0:	20 93 f9 38 	sts	0x38F9, r18	; 0x8038f9 <reactStr+0x6>
    31c4:	30 93 fa 38 	sts	0x38FA, r19	; 0x8038fa <reactStr+0x7>
    reactStr[1][number]=length;
    31c8:	22 e0       	ldi	r18, 0x02	; 2
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	20 93 39 39 	sts	0x3939, r18	; 0x803939 <reactStr+0x46>
    31d0:	30 93 3a 39 	sts	0x393A, r19	; 0x80393a <reactStr+0x47>
    reactStr[2][number]=type;
    31d4:	80 93 79 39 	sts	0x3979, r24	; 0x803979 <reactStr+0x86>
    31d8:	90 93 7a 39 	sts	0x397A, r25	; 0x80397a <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31dc:	27 e9       	ldi	r18, 0x97	; 151
    31de:	37 e7       	ldi	r19, 0x77	; 119
    31e0:	20 93 fb 38 	sts	0x38FB, r18	; 0x8038fb <reactStr+0x8>
    31e4:	30 93 fc 38 	sts	0x38FC, r19	; 0x8038fc <reactStr+0x9>
    reactStr[1][number]=length;
    31e8:	2d e3       	ldi	r18, 0x3D	; 61
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	20 93 3b 39 	sts	0x393B, r18	; 0x80393b <reactStr+0x48>
    31f0:	30 93 3c 39 	sts	0x393C, r19	; 0x80393c <reactStr+0x49>
    reactStr[2][number]=type;
    31f4:	80 93 7b 39 	sts	0x397B, r24	; 0x80397b <reactStr+0x88>
    31f8:	90 93 7c 39 	sts	0x397C, r25	; 0x80397c <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    31fc:	f7 01       	movw	r30, r14
    31fe:	10 82       	st	Z, r1
    3200:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3202:	f5 e0       	ldi	r31, 0x05	; 5
    3204:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3206:	5c cf       	rjmp	.-328    	; 0x30c0 <ProcessInput+0xfa2>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3208:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    320c:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	49 f0       	breq	.+18     	; 0x3226 <ProcessInput+0x1108>
                        if (CheckLetter(inventory[x], data[1])) {
    3214:	f8 01       	movw	r30, r16
    3216:	61 81       	ldd	r22, Z+1	; 0x01
    3218:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <CheckLetter>
    321c:	88 23       	and	r24, r24
    321e:	19 f0       	breq	.+6      	; 0x3226 <ProcessInput+0x1108>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	98 cf       	rjmp	.-208    	; 0x3156 <ProcessInput+0x1038>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3226:	84 e6       	ldi	r24, 0x64	; 100
    3228:	99 e7       	ldi	r25, 0x79	; 121
    322a:	80 93 f5 38 	sts	0x38F5, r24	; 0x8038f5 <reactStr+0x2>
    322e:	90 93 f6 38 	sts	0x38F6, r25	; 0x8038f6 <reactStr+0x3>
    reactStr[1][number]=length;
    3232:	81 e2       	ldi	r24, 0x21	; 33
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	30 c8       	rjmp	.-4000   	; 0x2298 <ProcessInput+0x17a>
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }
    
    return 0;
}
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	2a 96       	adiw	r28, 0x0a	; 10
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	df 90       	pop	r13
    324e:	cf 90       	pop	r12
    3250:	bf 90       	pop	r11
    3252:	af 90       	pop	r10
    3254:	9f 90       	pop	r9
    3256:	8f 90       	pop	r8
    3258:	7f 90       	pop	r7
    325a:	6f 90       	pop	r6
    325c:	5f 90       	pop	r5
    325e:	4f 90       	pop	r4
    3260:	08 95       	ret

00003262 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3262:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    3264:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <CheckSend>
    3268:	88 23       	and	r24, r24
    326a:	11 f0       	breq	.+4      	; 0x3270 <TextAdventure+0xe>
    326c:	c1 e0       	ldi	r28, 0x01	; 1
    326e:	11 c0       	rjmp	.+34     	; 0x3292 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3270:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CheckResponse>
    3274:	81 11       	cpse	r24, r1
    3276:	fa cf       	rjmp	.-12     	; 0x326c <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    3278:	88 e4       	ldi	r24, 0x48	; 72
    327a:	98 e3       	ldi	r25, 0x38	; 56
    327c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <CheckInput>
    3280:	c8 2f       	mov	r28, r24
    3282:	81 11       	cpse	r24, r1
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <TextAdventure+0x2e>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    3286:	88 e4       	ldi	r24, 0x48	; 72
    3288:	98 e3       	ldi	r25, 0x38	; 56
    328a:	0e 94 8f 10 	call	0x211e	; 0x211e <ProcessInput>

    return 0;
    328e:	01 c0       	rjmp	.+2      	; 0x3292 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    3290:	c2 e0       	ldi	r28, 0x02	; 2

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);

    return 0;
    3292:	8c 2f       	mov	r24, r28
    3294:	cf 91       	pop	r28
    3296:	08 95       	ret

00003298 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3298:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Setup>

    SerSpeed(0xff);
    329c:	8f ef       	ldi	r24, 0xFF	; 255
    329e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SerSpeed>
    32a2:	a0 e8       	ldi	r26, 0x80	; 128
    32a4:	b4 eb       	ldi	r27, 0xB4	; 180
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	ed 91       	ld	r30, X+
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	e6 54       	subi	r30, 0x46	; 70
    32ae:	f5 4c       	sbci	r31, 0xC5	; 197
    32b0:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    32b2:	15 96       	adiw	r26, 0x05	; 5
    32b4:	ec 91       	ld	r30, X
    32b6:	15 97       	sbiw	r26, 0x05	; 5
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	e6 54       	subi	r30, 0x46	; 70
    32bc:	f5 4c       	sbci	r31, 0xC5	; 197
    32be:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    32c0:	24 eb       	ldi	r18, 0xB4	; 180
    32c2:	a6 38       	cpi	r26, 0x86	; 134
    32c4:	b2 07       	cpc	r27, r18
    32c6:	81 f7       	brne	.-32     	; 0x32a8 <main+0x10>
    32c8:	e2 e7       	ldi	r30, 0x72	; 114
    32ca:	f4 eb       	ldi	r31, 0xB4	; 180
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    32cc:	91 e0       	ldi	r25, 0x01	; 1
    32ce:	ef 01       	movw	r28, r30
    32d0:	a5 81       	ldd	r26, Z+5	; 0x05
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	a6 54       	subi	r26, 0x46	; 70
    32d6:	b5 4c       	sbci	r27, 0xC5	; 197
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	9c 93       	st	X, r25
    32dc:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    32de:	a8 81       	ld	r26, Y
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	a6 54       	subi	r26, 0x46	; 70
    32e4:	b5 4c       	sbci	r27, 0xC5	; 197
    32e6:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    32e8:	24 eb       	ldi	r18, 0xB4	; 180
    32ea:	e7 37       	cpi	r30, 0x77	; 119
    32ec:	f2 07       	cpc	r31, r18
    32ee:	79 f7       	brne	.-34     	; 0x32ce <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    32f0:	e0 91 7e b4 	lds	r30, 0xB47E	; 0x80b47e <__bss_end+0x7974>
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	e6 54       	subi	r30, 0x46	; 70
    32f8:	f5 4c       	sbci	r31, 0xC5	; 197
    32fa:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    32fc:	e0 91 7f b4 	lds	r30, 0xB47F	; 0x80b47f <__bss_end+0x7975>
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	e6 54       	subi	r30, 0x46	; 70
    3304:	f5 4c       	sbci	r31, 0xC5	; 197
    3306:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    3308:	e0 91 7c b4 	lds	r30, 0xB47C	; 0x80b47c <__bss_end+0x7972>
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	e6 54       	subi	r30, 0x46	; 70
    3310:	f5 4c       	sbci	r31, 0xC5	; 197
    3312:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    3314:	e0 91 7d b4 	lds	r30, 0xB47D	; 0x80b47d <__bss_end+0x7973>
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	e6 54       	subi	r30, 0x46	; 70
    331c:	f5 4c       	sbci	r31, 0xC5	; 197
    331e:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    3320:	e0 91 70 b4 	lds	r30, 0xB470	; 0x80b470 <__bss_end+0x7966>
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	e6 54       	subi	r30, 0x46	; 70
    3328:	f5 4c       	sbci	r31, 0xC5	; 197
    332a:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    332c:	e0 91 71 b4 	lds	r30, 0xB471	; 0x80b471 <__bss_end+0x7967>
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	e6 54       	subi	r30, 0x46	; 70
    3334:	f5 4c       	sbci	r31, 0xC5	; 197
    3336:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    3338:	e0 91 6f b4 	lds	r30, 0xB46F	; 0x80b46f <__bss_end+0x7965>
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	e6 54       	subi	r30, 0x46	; 70
    3340:	f5 4c       	sbci	r31, 0xC5	; 197
    3342:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    3344:	e0 91 6e b4 	lds	r30, 0xB46E	; 0x80b46e <__bss_end+0x7964>
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	e6 54       	subi	r30, 0x46	; 70
    334c:	f5 4c       	sbci	r31, 0xC5	; 197
    334e:	80 83       	st	Z, r24

    effect = 32;
    3350:	80 e2       	ldi	r24, 0x20	; 32
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3358:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    LoadGameState();
    335c:	0e 94 23 09 	call	0x1246	; 0x1246 <LoadGameState>
    while (1)
    {
        


        if (GenerateAudio()){
    3360:	0e 94 b5 09 	call	0x136a	; 0x136a <GenerateAudio>
    3364:	88 23       	and	r24, r24
    3366:	e1 f3       	breq	.-8      	; 0x3360 <main+0xc8>
            buttonState = CheckButtons(buttonState);
    3368:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    336c:	0e 94 5f 07 	call	0xebe	; 0xebe <CheckButtons>
    3370:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    3374:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <buttonMark>
            
            //GenerateBlinks();           
            
            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3378:	74 df       	rcall	.-280    	; 0x3262 <TextAdventure>
          
            //Other games & user interaction checks
            MagnetMaze();
    337a:	0e 94 99 02 	call	0x532	; 0x532 <MagnetMaze>
            BastetDictates();
    337e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <BastetDictates>
            LanyardCode();
    3382:	0e 94 a1 01 	call	0x342	; 0x342 <LanyardCode>
            MakeFriends();
    3386:	0e 94 5c 00 	call	0xb8	; 0xb8 <MakeFriends>
            SaveGameState(); 
    338a:	0e 94 31 08 	call	0x1062	; 0x1062 <SaveGameState>
            
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    338e:	80 91 95 3a 	lds	r24, 0x3A95	; 0x803a95 <adcPhot>
    3392:	90 91 96 3a 	lds	r25, 0x3A96	; 0x803a96 <adcPhot+0x1>
    3396:	0a 97       	sbiw	r24, 0x0a	; 10
    3398:	20 f4       	brcc	.+8      	; 0x33a2 <main+0x10a>
    339a:	61 e0       	ldi	r22, 0x01	; 1
    339c:	84 e7       	ldi	r24, 0x74	; 116
    339e:	0e 94 b8 08 	call	0x1170	; 0x1170 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    33a2:	80 91 95 3a 	lds	r24, 0x3A95	; 0x803a95 <adcPhot>
    33a6:	90 91 96 3a 	lds	r25, 0x3A96	; 0x803a96 <adcPhot+0x1>
    33aa:	85 36       	cpi	r24, 0x65	; 101
    33ac:	91 05       	cpc	r25, r1
    33ae:	20 f0       	brcs	.+8      	; 0x33b8 <main+0x120>
    33b0:	60 e0       	ldi	r22, 0x00	; 0
    33b2:	84 e7       	ldi	r24, 0x74	; 116
    33b4:	0e 94 b8 08 	call	0x1170	; 0x1170 <WriteStatusBit>

            //Check temperature 
            HotSummer();
    33b8:	0e 94 50 09 	call	0x12a0	; 0x12a0 <HotSummer>
    33bc:	d1 cf       	rjmp	.-94     	; 0x3360 <main+0xc8>

000033be <__udivmodqi4>:
    33be:	99 1b       	sub	r25, r25
    33c0:	79 e0       	ldi	r23, 0x09	; 9
    33c2:	04 c0       	rjmp	.+8      	; 0x33cc <__udivmodqi4_ep>

000033c4 <__udivmodqi4_loop>:
    33c4:	99 1f       	adc	r25, r25
    33c6:	96 17       	cp	r25, r22
    33c8:	08 f0       	brcs	.+2      	; 0x33cc <__udivmodqi4_ep>
    33ca:	96 1b       	sub	r25, r22

000033cc <__udivmodqi4_ep>:
    33cc:	88 1f       	adc	r24, r24
    33ce:	7a 95       	dec	r23
    33d0:	c9 f7       	brne	.-14     	; 0x33c4 <__udivmodqi4_loop>
    33d2:	80 95       	com	r24
    33d4:	08 95       	ret

000033d6 <__udivmodhi4>:
    33d6:	aa 1b       	sub	r26, r26
    33d8:	bb 1b       	sub	r27, r27
    33da:	51 e1       	ldi	r21, 0x11	; 17
    33dc:	07 c0       	rjmp	.+14     	; 0x33ec <__udivmodhi4_ep>

000033de <__udivmodhi4_loop>:
    33de:	aa 1f       	adc	r26, r26
    33e0:	bb 1f       	adc	r27, r27
    33e2:	a6 17       	cp	r26, r22
    33e4:	b7 07       	cpc	r27, r23
    33e6:	10 f0       	brcs	.+4      	; 0x33ec <__udivmodhi4_ep>
    33e8:	a6 1b       	sub	r26, r22
    33ea:	b7 0b       	sbc	r27, r23

000033ec <__udivmodhi4_ep>:
    33ec:	88 1f       	adc	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	5a 95       	dec	r21
    33f2:	a9 f7       	brne	.-22     	; 0x33de <__udivmodhi4_loop>
    33f4:	80 95       	com	r24
    33f6:	90 95       	com	r25
    33f8:	bc 01       	movw	r22, r24
    33fa:	cd 01       	movw	r24, r26
    33fc:	08 95       	ret

000033fe <__udivmodsi4>:
    33fe:	a1 e2       	ldi	r26, 0x21	; 33
    3400:	1a 2e       	mov	r1, r26
    3402:	aa 1b       	sub	r26, r26
    3404:	bb 1b       	sub	r27, r27
    3406:	fd 01       	movw	r30, r26
    3408:	0d c0       	rjmp	.+26     	; 0x3424 <__udivmodsi4_ep>

0000340a <__udivmodsi4_loop>:
    340a:	aa 1f       	adc	r26, r26
    340c:	bb 1f       	adc	r27, r27
    340e:	ee 1f       	adc	r30, r30
    3410:	ff 1f       	adc	r31, r31
    3412:	a2 17       	cp	r26, r18
    3414:	b3 07       	cpc	r27, r19
    3416:	e4 07       	cpc	r30, r20
    3418:	f5 07       	cpc	r31, r21
    341a:	20 f0       	brcs	.+8      	; 0x3424 <__udivmodsi4_ep>
    341c:	a2 1b       	sub	r26, r18
    341e:	b3 0b       	sbc	r27, r19
    3420:	e4 0b       	sbc	r30, r20
    3422:	f5 0b       	sbc	r31, r21

00003424 <__udivmodsi4_ep>:
    3424:	66 1f       	adc	r22, r22
    3426:	77 1f       	adc	r23, r23
    3428:	88 1f       	adc	r24, r24
    342a:	99 1f       	adc	r25, r25
    342c:	1a 94       	dec	r1
    342e:	69 f7       	brne	.-38     	; 0x340a <__udivmodsi4_loop>
    3430:	60 95       	com	r22
    3432:	70 95       	com	r23
    3434:	80 95       	com	r24
    3436:	90 95       	com	r25
    3438:	9b 01       	movw	r18, r22
    343a:	ac 01       	movw	r20, r24
    343c:	bd 01       	movw	r22, r26
    343e:	cf 01       	movw	r24, r30
    3440:	08 95       	ret

00003442 <_exit>:
    3442:	f8 94       	cli

00003444 <__stop_program>:
    3444:	ff cf       	rjmp	.-2      	; 0x3444 <__stop_program>
