
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00803800  00003eec  00003fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e5c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0000be5c  00003e5c  00003f10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e7  00803836  00803836  00003fd6  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003fd6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004008  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a14  00000000  00000000  00004340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000269b  00000000  00000000  0000ad54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000039cc  00000000  00000000  0000d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  00010dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018d8  00000000  00000000  0001164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000038ec  00000000  00000000  00012f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000378  00000000  00000000  00016810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c0 c6       	rjmp	.+3456   	; 0xd9a <__vector_6>
      1a:	00 00       	nop
      1c:	12 c7       	rjmp	.+3620   	; 0xe42 <__vector_7>
      1e:	00 00       	nop
      20:	9f c4       	rjmp	.+2366   	; 0x960 <__vector_8>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	dd c4       	rjmp	.+2490   	; 0x9f0 <__vector_13>
      36:	00 00       	nop
      38:	0e c5       	rjmp	.+2588   	; 0xa56 <__vector_14>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	30 c6       	rjmp	.+3168   	; 0xcb2 <__vector_20>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	58 c6       	rjmp	.+3248   	; 0xd0a <__vector_22>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	4b c5       	rjmp	.+2710   	; 0xafc <__vector_25>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ab c5       	rjmp	.+2902   	; 0xbc4 <__vector_27>
      6e:	00 00       	nop
      70:	04 c6       	rjmp	.+3080   	; 0xc7a <__vector_28>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1d 0b       	sbc	r17, r29
      7e:	24 0b       	sbc	r18, r20
      80:	2d 0b       	sbc	r18, r29
      82:	24 0b       	sbc	r18, r20
      84:	2d 0b       	sbc	r18, r29
      86:	24 0b       	sbc	r18, r20
      88:	1d 0b       	sbc	r17, r29
      8a:	52 0b       	sbc	r21, r18
      8c:	6c 0b       	sbc	r22, r28
      8e:	7e 0b       	sbc	r23, r30
      90:	39 0c       	add	r3, r9
      92:	39 0c       	add	r3, r9
      94:	8d 0b       	sbc	r24, r29
      96:	9a 0b       	sbc	r25, r26
      98:	d8 0b       	sbc	r29, r24
      9a:	ff 0b       	sbc	r31, r31
      9c:	39 0c       	add	r3, r9
      9e:	39 0c       	add	r3, r9
      a0:	39 0c       	add	r3, r9
      a2:	39 0c       	add	r3, r9
      a4:	39 0c       	add	r3, r9
      a6:	39 0c       	add	r3, r9
      a8:	39 0c       	add	r3, r9
      aa:	52 0b       	sbc	r21, r18
      ac:	6c 0b       	sbc	r22, r28

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	df e3       	ldi	r29, 0x3F	; 63
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_copy_data>:
      ba:	18 e3       	ldi	r17, 0x38	; 56
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b8 e3       	ldi	r27, 0x38	; 56
      c0:	ec ee       	ldi	r30, 0xEC	; 236
      c2:	fe e3       	ldi	r31, 0x3E	; 62
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a6 33       	cpi	r26, 0x36	; 54
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	2b e3       	ldi	r18, 0x3B	; 59
      d2:	a6 e3       	ldi	r26, 0x36	; 54
      d4:	b8 e3       	ldi	r27, 0x38	; 56
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ad 31       	cpi	r26, 0x1D	; 29
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <main>
      e4:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <chkVolt250>:
#include <friends.h>
#include <main_def.h>
#include <resources.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ea:	28 ed       	ldi	r18, 0xD8	; 216
      ec:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ee:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      f0:	40 91 cd 3a 	lds	r20, 0x3ACD	; 0x803acd <auIn>
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	42 17       	cp	r20, r18
      f8:	53 07       	cpc	r21, r19
      fa:	4c f0       	brlt	.+18     	; 0x10e <chkVolt250+0x24>
      fc:	40 91 cd 3a 	lds	r20, 0x3ACD	; 0x803acd <auIn>
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	b9 01       	movw	r22, r18
     104:	6e 5e       	subi	r22, 0xEE	; 238
     106:	7f 4f       	sbci	r23, 0xFF	; 255
     108:	64 17       	cp	r22, r20
     10a:	75 07       	cpc	r23, r21
     10c:	2c f4       	brge	.+10     	; 0x118 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	29 51       	subi	r18, 0x19	; 25
     112:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
     114:	81 11       	cpse	r24, r1
     116:	ec cf       	rjmp	.-40     	; 0xf0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
     118:	08 95       	ret

0000011a <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
     11e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3770>
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <chkTmr.3770>
     128:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends, if true, don't accept any new connections!
    uint8_t foundAll = 1;
     12a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
     132:	81 11       	cpse	r24, r1
     134:	01 c0       	rjmp	.+2      	; 0x138 <MakeFriends+0x1e>
     136:	d0 e0       	ldi	r29, 0x00	; 0
     138:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends, if true, don't accept any new connections!
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     13a:	c8 36       	cpi	r28, 0x68	; 104
     13c:	b9 f7       	brne	.-18     	; 0x12c <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) {
     13e:	dd 23       	and	r29, r29
     140:	21 f0       	breq	.+8      	; 0x14a <MakeFriends+0x30>
        UpdateState(124);
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
        return 0;
     148:	ee c0       	rjmp	.+476    	; 0x326 <MakeFriends+0x20c>
    }

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     14a:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3768>
     14e:	82 30       	cpi	r24, 0x02	; 2
     150:	20 f0       	brcs	.+8      	; 0x15a <MakeFriends+0x40>
        gameNow = FRIENDS; 
     152:	94 e0       	ldi	r25, 0x04	; 4
     154:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <gameNow>
     158:	0d c0       	rjmp	.+26     	; 0x174 <MakeFriends+0x5a>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     15a:	81 11       	cpse	r24, r1
     15c:	0b c0       	rjmp	.+22     	; 0x174 <MakeFriends+0x5a>
     15e:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <gameNow>
     162:	94 30       	cpi	r25, 0x04	; 4
     164:	61 f4       	brne	.+24     	; 0x17e <MakeFriends+0x64>
        gameNow = TEXT; 
     166:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     16a:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     16e:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
     172:	05 c0       	rjmp	.+10     	; 0x17e <MakeFriends+0x64>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     174:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <detHdPh>
     178:	91 11       	cpse	r25, r1
     17a:	f1 cf       	rjmp	.-30     	; 0x15e <MakeFriends+0x44>
     17c:	18 c0       	rjmp	.+48     	; 0x1ae <MakeFriends+0x94>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     17e:	81 11       	cpse	r24, r1
     180:	16 c0       	rjmp	.+44     	; 0x1ae <MakeFriends+0x94>
     182:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <detHdPh>
     186:	91 11       	cpse	r25, r1
     188:	12 c0       	rjmp	.+36     	; 0x1ae <MakeFriends+0x94>
        setDAC[0] = whoami * 51;
     18a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     18e:	93 e3       	ldi	r25, 0x33	; 51
     190:	89 9f       	mul	r24, r25
     192:	80 2d       	mov	r24, r0
     194:	11 24       	eor	r1, r1
     196:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	98 e3       	ldi	r25, 0x38	; 56
     19e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     1a2:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
     1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <MakeFriends+0xa6>
    } else {
        if (progress & NEXT){
     1ae:	98 2f       	mov	r25, r24
     1b0:	90 7f       	andi	r25, 0xF0	; 240
     1b2:	31 f0       	breq	.+12     	; 0x1c0 <MakeFriends+0xa6>
            progress++;
            progress&=0x0f;
     1b4:	8f 5f       	subi	r24, 0xFF	; 255
     1b6:	8f 70       	andi	r24, 0x0F	; 15
     1b8:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3768>
            chkTmr = 0;
     1bc:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <chkTmr.3770>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     1c0:	40 91 cd 3a 	lds	r20, 0x3ACD	; 0x803acd <auIn>
     1c4:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	b9 01       	movw	r22, r18
     1ce:	6a 50       	subi	r22, 0x0A	; 10
     1d0:	71 09       	sbc	r23, r1
     1d2:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3768>
     1d6:	46 17       	cp	r20, r22
     1d8:	57 07       	cpc	r21, r23
     1da:	5c f0       	brlt	.+22     	; 0x1f2 <MakeFriends+0xd8>
     1dc:	40 91 cd 3a 	lds	r20, 0x3ACD	; 0x803acd <auIn>
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	26 5f       	subi	r18, 0xF6	; 246
     1e4:	3f 4f       	sbci	r19, 0xFF	; 255
     1e6:	24 17       	cp	r18, r20
     1e8:	35 07       	cpc	r19, r21
     1ea:	1c f0       	brlt	.+6      	; 0x1f2 <MakeFriends+0xd8>
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	08 f4       	brcc	.+2      	; 0x1f2 <MakeFriends+0xd8>
     1f0:	43 c0       	rjmp	.+134    	; 0x278 <MakeFriends+0x15e>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     1f2:	81 11       	cpse	r24, r1
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <MakeFriends+0xf2>
     1f6:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <detHdPh>
     1fa:	81 11       	cpse	r24, r1
     1fc:	94 c0       	rjmp	.+296    	; 0x326 <MakeFriends+0x20c>
            if (chkTmr >= 8) {
     1fe:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3770>
     202:	88 30       	cpi	r24, 0x08	; 8
     204:	08 f4       	brcc	.+2      	; 0x208 <MakeFriends+0xee>
     206:	8f c0       	rjmp	.+286    	; 0x326 <MakeFriends+0x20c>
                progress |= NEXT;
     208:	80 ef       	ldi	r24, 0xF0	; 240
     20a:	63 c0       	rjmp	.+198    	; 0x2d2 <MakeFriends+0x1b8>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	41 f5       	brne	.+80     	; 0x260 <MakeFriends+0x146>
            jackIn = chkVolt250();
     210:	6c df       	rcall	.-296    	; 0xea <chkVolt250>
     212:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3771>
            if (jackIn) {
     216:	88 23       	and	r24, r24
     218:	79 f1       	breq	.+94     	; 0x278 <MakeFriends+0x15e>
                if (chkTmr >= SHORT_WAIT){
     21a:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <chkTmr.3770>
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	08 f4       	brcc	.+2      	; 0x224 <MakeFriends+0x10a>
     222:	81 c0       	rjmp	.+258    	; 0x326 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     224:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <whoami>
     228:	91 30       	cpi	r25, 0x01	; 1
     22a:	11 f4       	brne	.+4      	; 0x230 <MakeFriends+0x116>
     22c:	83 50       	subi	r24, 0x03	; 3
     22e:	14 c0       	rjmp	.+40     	; 0x258 <MakeFriends+0x13e>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	31 f4       	brne	.+12     	; 0x240 <MakeFriends+0x126>
     234:	83 30       	cpi	r24, 0x03	; 3
     236:	91 f0       	breq	.+36     	; 0x25c <MakeFriends+0x142>
     238:	85 50       	subi	r24, 0x05	; 5
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	e8 f4       	brcc	.+58     	; 0x278 <MakeFriends+0x15e>
     23e:	0e c0       	rjmp	.+28     	; 0x25c <MakeFriends+0x142>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     240:	93 30       	cpi	r25, 0x03	; 3
     242:	39 f4       	brne	.+14     	; 0x252 <MakeFriends+0x138>
     244:	9c ef       	ldi	r25, 0xFC	; 252
     246:	98 0f       	add	r25, r24
     248:	92 30       	cpi	r25, 0x02	; 2
     24a:	40 f0       	brcs	.+16     	; 0x25c <MakeFriends+0x142>
     24c:	87 30       	cpi	r24, 0x07	; 7
     24e:	a1 f4       	brne	.+40     	; 0x278 <MakeFriends+0x15e>
     250:	05 c0       	rjmp	.+10     	; 0x25c <MakeFriends+0x142>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     252:	94 30       	cpi	r25, 0x04	; 4
     254:	89 f4       	brne	.+34     	; 0x278 <MakeFriends+0x15e>
     256:	85 50       	subi	r24, 0x05	; 5
     258:	83 30       	cpi	r24, 0x03	; 3
     25a:	70 f4       	brcc	.+28     	; 0x278 <MakeFriends+0x15e>
                        progress |= NEXT;
     25c:	81 ef       	ldi	r24, 0xF1	; 241
     25e:	39 c0       	rjmp	.+114    	; 0x2d2 <MakeFriends+0x1b8>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	69 f0       	breq	.+26     	; 0x27e <MakeFriends+0x164>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     264:	83 30       	cpi	r24, 0x03	; 3
     266:	c1 f1       	breq	.+112    	; 0x2d8 <MakeFriends+0x1be>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     268:	84 30       	cpi	r24, 0x04	; 4
     26a:	09 f0       	breq	.+2      	; 0x26e <MakeFriends+0x154>
     26c:	5c c0       	rjmp	.+184    	; 0x326 <MakeFriends+0x20c>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     26e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3770>
     272:	80 34       	cpi	r24, 0x40	; 64
     274:	08 f4       	brcc	.+2      	; 0x278 <MakeFriends+0x15e>
     276:	57 c0       	rjmp	.+174    	; 0x326 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     278:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <progress.3768>
     27c:	54 c0       	rjmp	.+168    	; 0x326 <MakeFriends+0x20c>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     27e:	87 e0       	ldi	r24, 0x07	; 7
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     286:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     28a:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3770>
     28e:	88 30       	cpi	r24, 0x08	; 8
     290:	38 f0       	brcs	.+14     	; 0x2a0 <MakeFriends+0x186>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     292:	2f ef       	ldi	r18, 0xFF	; 255
     294:	44 e6       	ldi	r20, 0x64	; 100
     296:	68 e0       	ldi	r22, 0x08	; 8
     298:	80 e8       	ldi	r24, 0x80	; 128
     29a:	40 d7       	rcall	.+3712   	; 0x111c <floatAround>
     29c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     2a0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3770>
     2a4:	8a 3f       	cpi	r24, 0xFA	; 250
     2a6:	08 f4       	brcc	.+2      	; 0x2aa <MakeFriends+0x190>
     2a8:	3e c0       	rjmp	.+124    	; 0x326 <MakeFriends+0x20c>
                candidate = jackIn-whoami;
     2aa:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     2ae:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <jackIn.3771>
     2b2:	98 1b       	sub	r25, r24
     2b4:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <__data_end>
                if (candidate > whoami) {
     2b8:	89 17       	cp	r24, r25
     2ba:	10 f4       	brcc	.+4      	; 0x2c0 <MakeFriends+0x1a6>
                    setDAC[0] = 249;
     2bc:	89 ef       	ldi	r24, 0xF9	; 249
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <MakeFriends+0x1ae>
                } else {
                    setDAC[0] = whoami * 51;
     2c0:	93 e3       	ldi	r25, 0x33	; 51
     2c2:	89 9f       	mul	r24, r25
     2c4:	80 2d       	mov	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2cc:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3768>
     2d0:	80 6f       	ori	r24, 0xF0	; 240
     2d2:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3768>
     2d6:	27 c0       	rjmp	.+78     	; 0x326 <MakeFriends+0x20c>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2d8:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3770>
     2dc:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2de:	18 f1       	brcs	.+70     	; 0x326 <MakeFriends+0x20c>
     2e0:	04 df       	rcall	.-504    	; 0xea <chkVolt250>
     2e2:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3771>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2e6:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <__data_end>
     2ea:	48 2f       	mov	r20, r24
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <whoami>
     2f2:	29 17       	cp	r18, r25
     2f4:	08 f4       	brcc	.+2      	; 0x2f8 <MakeFriends+0x1de>
     2f6:	29 2f       	mov	r18, r25
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	2b 5f       	subi	r18, 0xFB	; 251
     2fc:	3f 4f       	sbci	r19, 0xFF	; 255
     2fe:	42 17       	cp	r20, r18
     300:	53 07       	cpc	r21, r19
     302:	09 f0       	breq	.+2      	; 0x306 <MakeFriends+0x1ec>
                    UpdateState(99+candidate);
     304:	b9 cf       	rjmp	.-142    	; 0x278 <MakeFriends+0x15e>
     306:	83 e6       	ldi	r24, 0x63	; 99
     308:	89 0f       	add	r24, r25
     30a:	c1 d7       	rcall	.+3970   	; 0x128e <UpdateState>
                 
                    effect = 31;
     30c:	8f e1       	ldi	r24, 0x1F	; 31
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     314:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    WingBar(candidate, whoami);
     318:	60 91 43 38 	lds	r22, 0x3843	; 0x803843 <whoami>
     31c:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <__data_end>
     320:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <WingBar>
     324:	d3 cf       	rjmp	.-90     	; 0x2cc <MakeFriends+0x1b2>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <LanyardCode>:
uint16_t        lanyardLastActive = 0;


// Main game loop
uint8_t LanyardCode(){
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     32e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     332:	83 30       	cpi	r24, 0x03	; 3
     334:	89 f4       	brne	.+34     	; 0x358 <LanyardCode+0x2a>
     336:	6a e0       	ldi	r22, 0x0A	; 10
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <lanyardLastActive>
     33e:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <lanyardLastActive+0x1>
     342:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <idleTimeout>
     346:	88 23       	and	r24, r24
     348:	39 f0       	breq	.+14     	; 0x358 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        gameNow = TEXT;
     34a:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     34e:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     352:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
        return 0;
     356:	95 c0       	rjmp	.+298    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
    }

    if (CheckState(LANYARD_COMPLETED))
     358:	8b e7       	ldi	r24, 0x7B	; 123
     35a:	ba d7       	rcall	.+3956   	; 0x12d0 <CheckState>
     35c:	81 11       	cpse	r24, r1
     35e:	91 c0       	rjmp	.+290    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     360:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     364:	88 23       	and	r24, r24
     366:	19 f0       	breq	.+6      	; 0x36e <LanyardCode+0x40>
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	09 f0       	breq	.+2      	; 0x36e <LanyardCode+0x40>
     36c:	8a c0       	rjmp	.+276    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        return 0;

    if (buttonState == 0xff)
     36e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     372:	8f 3f       	cpi	r24, 0xFF	; 255
     374:	09 f4       	brne	.+2      	; 0x378 <LanyardCode+0x4a>
     376:	85 c0       	rjmp	.+266    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        return 0;

    if (buttonState == lastButtonState)
     378:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     37c:	89 17       	cp	r24, r25
     37e:	09 f4       	brne	.+2      	; 0x382 <LanyardCode+0x54>
     380:	80 c0       	rjmp	.+256    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        return 0;

    lanyardLastActive = getClock();
     382:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <getClock>
     386:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <lanyardLastActive>
     38a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     38e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     392:	8f 3f       	cpi	r24, 0xFF	; 255
     394:	09 f0       	breq	.+2      	; 0x398 <LanyardCode+0x6a>
     396:	75 c0       	rjmp	.+234    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        if ((gameNow != LANYARD) || (lanyardState == LANYARD_GAMEOVER)) {
     398:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     39c:	83 30       	cpi	r24, 0x03	; 3
     39e:	21 f4       	brne	.+8      	; 0x3a8 <LanyardCode+0x7a>
     3a0:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	a1 f4       	brne	.+40     	; 0x3d0 <LanyardCode+0xa2>
            // init Lanyard game
            gameNow         = LANYARD;
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
            lanyardPos      = 0;
     3ae:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <lanyardPos>
            lanyardCnt      = 0;
     3b2:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            lanyardState    = LANYARD_GOOD;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
            SetHackerLeds(0,0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <SetHackerLeds>
            effect = 16;
     3c4:	80 e1       	ldi	r24, 0x10	; 16
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     3cc:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
        }

        if (buttonState != lanyardCode[lanyardPos]) {
     3d0:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	e4 59       	subi	r30, 0x94	; 148
     3da:	f1 44       	sbci	r31, 0x41	; 65
     3dc:	20 81       	ld	r18, Z
     3de:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     3e2:	29 17       	cp	r18, r25
     3e4:	41 f0       	breq	.+16     	; 0x3f6 <LanyardCode+0xc8>
            if (lanyardPos == 0 ) {
     3e6:	81 11       	cpse	r24, r1
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LanyardCode+0xc2>
                gameNow = TEXT;
     3ea:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                return 0;
     3ee:	49 c0       	rjmp	.+146    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
            }
            lanyardState = LANYARD_MISTAKE;
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
        }
        lanyardPos++;
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <lanyardPos>
        lanyardCnt++;            
     3fc:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <lanyardCnt>
        WingBar(lanyardCnt,lanyardCnt);
     406:	68 2f       	mov	r22, r24
     408:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <WingBar>
        if (lanyardCnt >= 4) {
     40c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	b8 f1       	brcs	.+110    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
            lanyardCnt = 0;
     414:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            if (lanyardState == LANYARD_GOOD) {
     418:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	21 f5       	brne	.+72     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
                if (lanyardCnt == 0) {
                    WingBar(0,0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <WingBar>
                    iLED[HCKR[G][(lanyardPos>>1)-2]] = dimValue;
     428:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     42c:	e8 2f       	mov	r30, r24
     42e:	e6 95       	lsr	r30
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	e6 57       	subi	r30, 0x76	; 118
     434:	f1 44       	sbci	r31, 0x41	; 65
     436:	a4 81       	ldd	r26, Z+4	; 0x04
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     43e:	a2 53       	subi	r26, 0x32	; 50
     440:	b5 4c       	sbci	r27, 0xC5	; 197
     442:	9c 93       	st	X, r25
                    iLED[HCKR[G][(lanyardPos>>1)-1]] = dimValue;
     444:	e5 81       	ldd	r30, Z+5	; 0x05
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     44c:	e2 53       	subi	r30, 0x32	; 50
     44e:	f5 4c       	sbci	r31, 0xC5	; 197
     450:	90 83       	st	Z, r25
                }
                if (lanyardPos == LANYARD_LEN) {
     452:	8c 30       	cpi	r24, 0x0C	; 12
     454:	b1 f4       	brne	.+44     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
                    UpdateState(LANYARD_COMPLETED);
     456:	8b e7       	ldi	r24, 0x7B	; 123
     458:	1a d7       	rcall	.+3636   	; 0x128e <UpdateState>
                    effect    = 0x42;
     45a:	82 e4       	ldi	r24, 0x42	; 66
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     462:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     466:	0d c0       	rjmp	.+26     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                lanyardState = LANYARD_GAMEOVER;
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                effect  = 0x31;
     46e:	81 e3       	ldi	r24, 0x31	; 49
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     476:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                WingBar(0,0);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <WingBar>
            }
        }
    }

    return 0;
}
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret

00000486 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     486:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeHckrPos>
    mazePos = 0;
     48a:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <mazePos>
    mazeCnt = 0;
     48e:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <mazeCnt>
    mazeState = TRUE;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     498:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <inverted>
    effect = 16;
     49c:	80 e1       	ldi	r24, 0x10	; 16
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     4a4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    SetHackerLeds(0,0);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <SetHackerLeds>
     4b0:	08 95       	ret

000004b2 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     4b8:	97 ff       	sbrs	r25, 7
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <showFieldStrength+0x10>
     4bc:	d1 95       	neg	r29
     4be:	c1 95       	neg	r28
     4c0:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     4c2:	cd 33       	cpi	r28, 0x3D	; 61
     4c4:	d1 05       	cpc	r29, r1
     4c6:	44 f0       	brlt	.+16     	; 0x4d8 <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     4c8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     4cc:	81 11       	cpse	r24, r1
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <showFieldStrength+0x26>
            initMaze();
     4d0:	da df       	rcall	.-76     	; 0x486 <initMaze>
            gameNow = MAZE;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
        }
    }

    if (gameNow == MAZE) {
     4d8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	09 f5       	brne	.+66     	; 0x522 <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     4e0:	cc 33       	cpi	r28, 0x3C	; 60
     4e2:	d1 05       	cpc	r29, r1
     4e4:	1c f4       	brge	.+6      	; 0x4ec <showFieldStrength+0x3a>
            WingBar(0,0);
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	1a c0       	rjmp	.+52     	; 0x520 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     4ec:	c8 37       	cpi	r28, 0x78	; 120
     4ee:	d1 05       	cpc	r29, r1
     4f0:	1c f4       	brge	.+6      	; 0x4f8 <showFieldStrength+0x46>
            WingBar(1,1);
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	14 c0       	rjmp	.+40     	; 0x520 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     4f8:	c6 39       	cpi	r28, 0x96	; 150
     4fa:	d1 05       	cpc	r29, r1
     4fc:	1c f4       	brge	.+6      	; 0x504 <showFieldStrength+0x52>
            WingBar(2,2);
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e c0       	rjmp	.+28     	; 0x520 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     504:	c8 3c       	cpi	r28, 0xC8	; 200
     506:	d1 05       	cpc	r29, r1
     508:	1c f4       	brge	.+6      	; 0x510 <showFieldStrength+0x5e>
            WingBar(3,3);
     50a:	63 e0       	ldi	r22, 0x03	; 3
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	08 c0       	rjmp	.+16     	; 0x520 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     510:	cc 32       	cpi	r28, 0x2C	; 44
     512:	d1 40       	sbci	r29, 0x01	; 1
     514:	1c f4       	brge	.+6      	; 0x51c <showFieldStrength+0x6a>
            WingBar(4,4);
     516:	64 e0       	ldi	r22, 0x04	; 4
     518:	84 e0       	ldi	r24, 0x04	; 4
     51a:	02 c0       	rjmp	.+4      	; 0x520 <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     51c:	65 e0       	ldi	r22, 0x05	; 5
     51e:	85 e0       	ldi	r24, 0x05	; 5
     520:	d2 d7       	rcall	.+4004   	; 0x14c6 <WingBar>
    }
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     52c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	71 f4       	brne	.+28     	; 0x550 <MagnetMaze+0x28>
     534:	6a e0       	ldi	r22, 0x0A	; 10
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <mazeLastActive>
     53c:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <mazeLastActive+0x1>
     540:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <idleTimeout>
     544:	88 23       	and	r24, r24
     546:	21 f0       	breq	.+8      	; 0x550 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     548:	9e df       	rcall	.-196    	; 0x486 <initMaze>
        gameNow = TEXT;
     54a:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        return 0;
     54e:	e5 c0       	rjmp	.+458    	; 0x71a <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     550:	87 ef       	ldi	r24, 0xF7	; 247
     552:	be d6       	rcall	.+3452   	; 0x12d0 <CheckState>
     554:	81 11       	cpse	r24, r1
     556:	e1 c0       	rjmp	.+450    	; 0x71a <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     558:	8d e7       	ldi	r24, 0x7D	; 125
     55a:	ba d6       	rcall	.+3444   	; 0x12d0 <CheckState>
     55c:	81 11       	cpse	r24, r1
     55e:	dd c0       	rjmp	.+442    	; 0x71a <MagnetMaze+0x1f2>
     560:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	08 f0       	brcs	.+2      	; 0x56a <MagnetMaze+0x42>
     568:	d8 c0       	rjmp	.+432    	; 0x71a <MagnetMaze+0x1f2>
     56a:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <calHall>
        return 0;

    if (calHall == 0)
     56e:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <calHall+0x1>
     572:	89 2b       	or	r24, r25
     574:	41 f4       	brne	.+16     	; 0x586 <MagnetMaze+0x5e>
     576:	80 91 c5 3a 	lds	r24, 0x3AC5	; 0x803ac5 <adcHall>
        calHall = adcHall;
     57a:	90 91 c6 3a 	lds	r25, 0x3AC6	; 0x803ac6 <adcHall+0x1>
     57e:	80 93 f6 3a 	sts	0x3AF6, r24	; 0x803af6 <calHall>
     582:	90 93 f7 3a 	sts	0x3AF7, r25	; 0x803af7 <calHall+0x1>
     586:	c0 91 c5 3a 	lds	r28, 0x3AC5	; 0x803ac5 <adcHall>

    int16_t valHall = adcHall - calHall;
     58a:	d0 91 c6 3a 	lds	r29, 0x3AC6	; 0x803ac6 <adcHall+0x1>
     58e:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <calHall>
     592:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <calHall+0x1>
     596:	c8 1b       	sub	r28, r24
     598:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     59a:	ce 01       	movw	r24, r28
     59c:	8a df       	rcall	.-236    	; 0x4b2 <showFieldStrength>
     59e:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <curHallState>

    switch (curHallState) {
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	89 f0       	breq	.+34     	; 0x5c8 <MagnetMaze+0xa0>
     5a6:	18 f0       	brcs	.+6      	; 0x5ae <MagnetMaze+0x86>
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	c1 f0       	breq	.+48     	; 0x5dc <MagnetMaze+0xb4>
     5ac:	1f c0       	rjmp	.+62     	; 0x5ec <MagnetMaze+0xc4>
     5ae:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     5b0:	9e ef       	ldi	r25, 0xFE	; 254
     5b2:	d9 07       	cpc	r29, r25
     5b4:	14 f4       	brge	.+4      	; 0x5ba <MagnetMaze+0x92>
     5b6:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <MagnetMaze+0x9a>
     5ba:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     5bc:	d1 40       	sbci	r29, 0x01	; 1
     5be:	5c f0       	brlt	.+22     	; 0x5d6 <MagnetMaze+0xae>
     5c0:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     5c2:	90 93 52 38 	sts	0x3852, r25	; 0x803852 <newHallState>
     5c6:	12 c0       	rjmp	.+36     	; 0x5ec <MagnetMaze+0xc4>
     5c8:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	d9 07       	cpc	r29, r25
     5ce:	c4 f7       	brge	.-16     	; 0x5c0 <MagnetMaze+0x98>
     5d0:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5d2:	df 4f       	sbci	r29, 0xFF	; 255
     5d4:	84 f3       	brlt	.-32     	; 0x5b6 <MagnetMaze+0x8e>
     5d6:	10 92 52 38 	sts	0x3852, r1	; 0x803852 <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <MagnetMaze+0xc4>
     5dc:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     5de:	9e ef       	ldi	r25, 0xFE	; 254
     5e0:	d9 07       	cpc	r29, r25
     5e2:	4c f3       	brlt	.-46     	; 0x5b6 <MagnetMaze+0x8e>
     5e4:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5e6:	d1 05       	cpc	r29, r1
     5e8:	b4 f3       	brlt	.-20     	; 0x5d6 <MagnetMaze+0xae>
     5ea:	ea cf       	rjmp	.-44     	; 0x5c0 <MagnetMaze+0x98>
     5ec:	c0 91 78 be 	lds	r28, 0xBE78	; 0x80be78 <__bss_end+0x835b>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     5f0:	ec 2f       	mov	r30, r28
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <newHallState>
     5f8:	99 23       	and	r25, r25
     5fa:	19 f0       	breq	.+6      	; 0x602 <MagnetMaze+0xda>
     5fc:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     600:	01 c0       	rjmp	.+2      	; 0x604 <MagnetMaze+0xdc>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	e2 53       	subi	r30, 0x32	; 50
     606:	f5 4c       	sbci	r31, 0xC5	; 197
     608:	20 83       	st	Z, r18
     60a:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     60c:	09 f4       	brne	.+2      	; 0x610 <MagnetMaze+0xe8>
     60e:	85 c0       	rjmp	.+266    	; 0x71a <MagnetMaze+0x1f2>
     610:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     614:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <mazeLastActive>
     618:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <mazeLastActive+0x1>
     61c:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     620:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <newHallState>
     624:	91 11       	cpse	r25, r1
     626:	08 c0       	rjmp	.+16     	; 0x638 <MagnetMaze+0x110>
     628:	88 23       	and	r24, r24
     62a:	31 f0       	breq	.+12     	; 0x638 <MagnetMaze+0x110>
     62c:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	09 f4       	brne	.+2      	; 0x634 <MagnetMaze+0x10c>
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	90 93 4e 38 	sts	0x384E, r25	; 0x80384e <inverted>
     638:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <curHallState>

        curHallState = newHallState;
     63c:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     63e:	09 f4       	brne	.+2      	; 0x642 <MagnetMaze+0x11a>
     640:	6c c0       	rjmp	.+216    	; 0x71a <MagnetMaze+0x1f2>
     642:	8f e9       	ldi	r24, 0x9F	; 159
            effect = 0x19f;
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     64a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     64e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
            if (gameNow == TEXT)
     652:	81 11       	cpse	r24, r1
     654:	01 c0       	rjmp	.+2      	; 0x658 <MagnetMaze+0x130>
                initMaze();
     656:	17 df       	rcall	.-466    	; 0x486 <initMaze>
     658:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     65a:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
     65e:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     662:	20 91 53 38 	lds	r18, 0x3853	; 0x803853 <curHallState>
     666:	88 23       	and	r24, r24
     668:	11 f0       	breq	.+4      	; 0x66e <MagnetMaze+0x146>
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	28 27       	eor	r18, r24
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <mazePos>
     674:	e8 2f       	mov	r30, r24
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ea 55       	subi	r30, 0x5A	; 90
     67a:	f1 44       	sbci	r31, 0x41	; 65
     67c:	40 81       	ld	r20, Z
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	24 17       	cp	r18, r20
     682:	35 07       	cpc	r19, r21
     684:	91 f4       	brne	.+36     	; 0x6aa <MagnetMaze+0x182>
     686:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     68a:	91 70       	andi	r25, 0x01	; 1
     68c:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     690:	e0 91 87 be 	lds	r30, 0xBE87	; 0x80be87 <__bss_end+0x836a>
                iLED[EYE[R][L]] = 0;
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	e2 53       	subi	r30, 0x32	; 50
     698:	f5 4c       	sbci	r31, 0xC5	; 197
     69a:	10 82       	st	Z, r1
     69c:	e0 91 86 be 	lds	r30, 0xBE86	; 0x80be86 <__bss_end+0x8369>
                iLED[EYE[R][R]] = 0;
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	e2 53       	subi	r30, 0x32	; 50
     6a4:	f5 4c       	sbci	r31, 0xC5	; 197
     6a6:	10 82       	st	Z, r1
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <MagnetMaze+0x186>
     6aa:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     6b0:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <mazePos>
     6b4:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <mazeCnt>
            mazeCnt++;            
     6b8:	9f 5f       	subi	r25, 0xFF	; 255
     6ba:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     6bc:	18 f4       	brcc	.+6      	; 0x6c4 <MagnetMaze+0x19c>
     6be:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     6c2:	2b c0       	rjmp	.+86     	; 0x71a <MagnetMaze+0x1f2>
     6c4:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6c8:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     6cc:	91 30       	cpi	r25, 0x01	; 1
     6ce:	e1 f4       	brne	.+56     	; 0x708 <MagnetMaze+0x1e0>
     6d0:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     6d4:	e9 2f       	mov	r30, r25
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	e6 57       	subi	r30, 0x76	; 118
     6da:	f1 44       	sbci	r31, 0x41	; 65
     6dc:	e6 81       	ldd	r30, Z+6	; 0x06
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     6e4:	e2 53       	subi	r30, 0x32	; 50
     6e6:	f5 4c       	sbci	r31, 0xC5	; 197
     6e8:	20 83       	st	Z, r18
     6ea:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     6ec:	90 93 50 38 	sts	0x3850, r25	; 0x803850 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     6f0:	82 31       	cpi	r24, 0x12	; 18
     6f2:	99 f4       	brne	.+38     	; 0x71a <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     6f4:	8d e7       	ldi	r24, 0x7D	; 125
     6f6:	cb d5       	rcall	.+2966   	; 0x128e <UpdateState>
     6f8:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	e2 53       	subi	r30, 0x32	; 50
     6fe:	f5 4c       	sbci	r31, 0xC5	; 197
     700:	10 82       	st	Z, r1
                        effect = 0x42;
     702:	82 e4       	ldi	r24, 0x42	; 66
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	05 c0       	rjmp	.+10     	; 0x712 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     708:	be de       	rcall	.-644    	; 0x486 <initMaze>
     70a:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                    gameNow   = TEXT;
     70e:	81 e3       	ldi	r24, 0x31	; 49
                    effect = 0x31;
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     716:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     71a:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <Setup>:
     722:	f8 94       	cli
    TCB1_CCMP = pitch;
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    auVolume = volume;
    return 1;
}
     724:	88 ed       	ldi	r24, 0xD8	; 216
     726:	84 bf       	out	0x34, r24	; 52
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     72e:	9a e4       	ldi	r25, 0x4A	; 74
     730:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     734:	9c e7       	ldi	r25, 0x7C	; 124
     736:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     73a:	2f e3       	ldi	r18, 0x3F	; 63
     73c:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     740:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     744:	90 68       	ori	r25, 0x80	; 128
     746:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     74a:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     74e:	90 68       	ori	r25, 0x80	; 128
     750:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     754:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     758:	90 68       	ori	r25, 0x80	; 128
     75a:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     75e:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     762:	90 68       	ori	r25, 0x80	; 128
     764:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     768:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     76c:	90 68       	ori	r25, 0x80	; 128
     76e:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     772:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     776:	90 68       	ori	r25, 0x80	; 128
     778:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     77c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     786:	4b e5       	ldi	r20, 0x5B	; 91
     788:	51 e0       	ldi	r21, 0x01	; 1
     78a:	40 93 08 08 	sts	0x0808, r20	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     78e:	50 93 09 08 	sts	0x0809, r21	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     792:	30 ea       	ldi	r19, 0xA0	; 160
     794:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     798:	30 ec       	ldi	r19, 0xC0	; 192
     79a:	30 93 06 08 	sts	0x0806, r19	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     79e:	33 e0       	ldi	r19, 0x03	; 3
     7a0:	30 93 07 08 	sts	0x0807, r19	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     7a4:	1c ba       	out	0x1c, r1	; 28
     7a6:	1d ba       	out	0x1d, r1	; 29
     7a8:	1f ba       	out	0x1f, r1	; 31
     7aa:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     7ae:	38 e0       	ldi	r19, 0x08	; 8
     7b0:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7b4:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     7b8:	27 e7       	ldi	r18, 0x77	; 119
     7ba:	20 93 01 0a 	sts	0x0A01, r18	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     7be:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     7c2:	2b e0       	ldi	r18, 0x0B	; 11
     7c4:	20 93 05 0a 	sts	0x0A05, r18	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     7c8:	20 91 00 0a 	lds	r18, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7cc:	21 60       	ori	r18, 0x01	; 1
     7ce:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7d2:	25 e0       	ldi	r18, 0x05	; 5
     7d4:	20 93 40 0a 	sts	0x0A40, r18	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     7d8:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	31 e0       	ldi	r19, 0x01	; 1
     7e0:	20 93 4c 0a 	sts	0x0A4C, r18	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     7e4:	30 93 4d 0a 	sts	0x0A4D, r19	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     7e8:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     7ec:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     7f0:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     7f4:	2b e8       	ldi	r18, 0x8B	; 139
     7f6:	33 e0       	ldi	r19, 0x03	; 3
     7f8:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     7fc:	30 93 5d 0a 	sts	0x0A5D, r19	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     800:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     804:	2c e0       	ldi	r18, 0x0C	; 12
     806:	20 93 16 08 	sts	0x0816, r18	; 0x800816 <__TEXT_REGION_LENGTH__+0x700816>
     80a:	23 ec       	ldi	r18, 0xC3	; 195
     80c:	20 93 13 08 	sts	0x0813, r18	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     810:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     814:	21 60       	ori	r18, 0x01	; 1
     816:	20 93 15 08 	sts	0x0815, r18	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     81a:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     81e:	24 6c       	ori	r18, 0xC4	; 196
     820:	20 93 15 08 	sts	0x0815, r18	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     824:	22 e1       	ldi	r18, 0x12	; 18
     826:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     82a:	20 e2       	ldi	r18, 0x20	; 32
     82c:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     830:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     834:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     838:	24 e4       	ldi	r18, 0x44	; 68
     83a:	20 93 02 06 	sts	0x0602, r18	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     83e:	2e e1       	ldi	r18, 0x1E	; 30
     840:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     844:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     848:	20 91 00 06 	lds	r18, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     84c:	21 60       	ori	r18, 0x01	; 1
     84e:	20 93 00 06 	sts	0x0600, r18	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     852:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     856:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     85a:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     85e:	92 e5       	ldi	r25, 0x52	; 82
     860:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     864:	94 e0       	ldi	r25, 0x04	; 4
     866:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     86a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     86e:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     872:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     876:	91 60       	ori	r25, 0x01	; 1
     878:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     87c:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     880:	80 e4       	ldi	r24, 0x40	; 64
     882:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     88c:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     890:	81 60       	ori	r24, 0x01	; 1
     892:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     896:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     89a:	80 fd       	sbrc	r24, 0
     89c:	fc cf       	rjmp	.-8      	; 0x896 <Setup+0x174>
     89e:	80 e3       	ldi	r24, 0x30	; 48
     8a0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     8a4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     8a8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8ac:	82 fd       	sbrc	r24, 2
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <Setup+0x186>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	98 e7       	ldi	r25, 0x78	; 120
     8b4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8b8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8bc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8c0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     8c4:	82 96       	adiw	r24, 0x22	; 34
     8c6:	80 93 fa 3a 	sts	0x3AFA, r24	; 0x803afa <tmp16bit>
     8ca:	90 93 fb 3a 	sts	0x3AFB, r25	; 0x803afb <tmp16bit+0x1>
     8ce:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8d2:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8d6:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <tmp16bit>
     8da:	90 91 fb 3a 	lds	r25, 0x3AFB	; 0x803afb <tmp16bit+0x1>
     8de:	28 17       	cp	r18, r24
     8e0:	39 07       	cpc	r19, r25
     8e2:	70 f4       	brcc	.+28     	; 0x900 <Setup+0x1de>
     8e4:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8e8:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8ec:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <tmp16bit>
     8f0:	90 91 fb 3a 	lds	r25, 0x3AFB	; 0x803afb <tmp16bit+0x1>
     8f4:	82 1b       	sub	r24, r18
     8f6:	93 0b       	sbc	r25, r19
     8f8:	80 93 fa 3a 	sts	0x3AFA, r24	; 0x803afa <tmp16bit>
     8fc:	90 93 fb 3a 	sts	0x3AFB, r25	; 0x803afb <tmp16bit+0x1>
     900:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     904:	83 fd       	sbrc	r24, 3
     906:	fc cf       	rjmp	.-8      	; 0x900 <Setup+0x1de>
     908:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <tmp16bit>
     90c:	90 91 fb 3a 	lds	r25, 0x3AFB	; 0x803afb <tmp16bit+0x1>
     910:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     914:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     924:	88 e0       	ldi	r24, 0x08	; 8
     926:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     92a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     92e:	80 fd       	sbrc	r24, 0
     930:	fc cf       	rjmp	.-8      	; 0x92a <Setup+0x208>
     932:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     936:	81 60       	ori	r24, 0x01	; 1
     938:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     93c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     940:	81 60       	ori	r24, 0x01	; 1
     942:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     946:	10 92 7d 3a 	sts	0x3A7D, r1	; 0x803a7d <serRx>
     94a:	8d e7       	ldi	r24, 0x7D	; 125
     94c:	9a e3       	ldi	r25, 0x3A	; 58
     94e:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <serTxAddr>
     952:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <serTxAddr+0x1>
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     95c:	78 94       	sei
     95e:	08 95       	ret

00000960 <__vector_8>:
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     97c:	84 e4       	ldi	r24, 0x44	; 68
     97e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     982:	ec b3       	in	r30, 0x1c	; 28
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	e8 9f       	mul	r30, r24
     988:	f0 01       	movw	r30, r0
     98a:	11 24       	eor	r1, r1
     98c:	e2 53       	subi	r30, 0x32	; 50
     98e:	f5 4c       	sbci	r31, 0xC5	; 197
     990:	a8 e2       	ldi	r26, 0x28	; 40
     992:	ba e0       	ldi	r27, 0x0A	; 10
     994:	96 e0       	ldi	r25, 0x06	; 6
     996:	81 91       	ld	r24, Z+
     998:	8d 93       	st	X+, r24
     99a:	9a 95       	dec	r25
     99c:	e1 f7       	brne	.-8      	; 0x996 <__vector_8+0x36>
     99e:	8b e0       	ldi	r24, 0x0B	; 11
     9a0:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     9a4:	8c b3       	in	r24, 0x1c	; 28
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	58 f4       	brcc	.+22     	; 0x9c0 <__vector_8+0x60>
     9aa:	8c b3       	in	r24, 0x1c	; 28
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <__vector_8+0x52>
     9b0:	99 0f       	add	r25, r25
     9b2:	8a 95       	dec	r24
     9b4:	ea f7       	brpl	.-6      	; 0x9b0 <__vector_8+0x50>
     9b6:	99 b9       	out	0x09, r25	; 9
     9b8:	8c b3       	in	r24, 0x1c	; 28
     9ba:	83 95       	inc	r24
     9bc:	8c bb       	out	0x1c, r24	; 28
     9be:	0a c0       	rjmp	.+20     	; 0x9d4 <__vector_8+0x74>
     9c0:	8c b3       	in	r24, 0x1c	; 28
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	21 f4       	brne	.+8      	; 0x9ce <__vector_8+0x6e>
     9c6:	2a 9a       	sbi	0x05, 2	; 5
     9c8:	83 95       	inc	r24
     9ca:	8c bb       	out	0x1c, r24	; 28
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <__vector_8+0x74>
     9ce:	2e 9a       	sbi	0x05, 6	; 5
     9d0:	88 27       	eor	r24, r24
     9d2:	8c bb       	out	0x1c, r24	; 28
     9d4:	8f ef       	ldi	r24, 0xFF	; 255
     9d6:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_13>:
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31
     a02:	e0 91 c3 3a 	lds	r30, 0x3AC3	; 0x803ac3 <serTxAddr>
     a06:	f0 91 c4 3a 	lds	r31, 0x3AC4	; 0x803ac4 <serTxAddr+0x1>
     a0a:	80 81       	ld	r24, Z
     a0c:	88 23       	and	r24, r24
     a0e:	91 f0       	breq	.+36     	; 0xa34 <__vector_13+0x44>
     a10:	80 81       	ld	r24, Z
     a12:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a16:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <serTxAddr>
     a1a:	90 91 c4 3a 	lds	r25, 0x3AC4	; 0x803ac4 <serTxAddr+0x1>
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <serTxAddr>
     a24:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <serTxAddr+0x1>
     a28:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a2c:	80 62       	ori	r24, 0x20	; 32
     a2e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a32:	05 c0       	rjmp	.+10     	; 0xa3e <__vector_13+0x4e>
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
     a3a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_14>:
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
     a6e:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     a72:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     a76:	80 81       	ld	r24, Z
     a78:	81 11       	cpse	r24, r1
     a7a:	08 c0       	rjmp	.+16     	; 0xa8c <__vector_14+0x36>
     a7c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     a80:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     a84:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     a88:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     a8c:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     a90:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     a94:	80 81       	ld	r24, Z
     a96:	88 23       	and	r24, r24
     a98:	e1 f0       	breq	.+56     	; 0xad2 <__vector_14+0x7c>
     a9a:	20 81       	ld	r18, Z
     a9c:	40 91 c0 3a 	lds	r20, 0x3AC0	; 0x803ac0 <auVolume>
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	2f 57       	subi	r18, 0x7F	; 127
     aa4:	31 09       	sbc	r19, r1
     aa6:	42 9f       	mul	r20, r18
     aa8:	c0 01       	movw	r24, r0
     aaa:	43 9f       	mul	r20, r19
     aac:	90 0d       	add	r25, r0
     aae:	11 24       	eor	r1, r1
     ab0:	89 2f       	mov	r24, r25
     ab2:	99 0f       	add	r25, r25
     ab4:	99 0b       	sbc	r25, r25
     ab6:	80 58       	subi	r24, 0x80	; 128
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     abe:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     ac2:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     acc:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     ad0:	06 c0       	rjmp	.+12     	; 0xade <__vector_14+0x88>
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
     ad8:	80 e8       	ldi	r24, 0x80	; 128
     ada:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	9f 91       	pop	r25
     aea:	8f 91       	pop	r24
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <__vector_25>:
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
     b0e:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     b12:	88 23       	and	r24, r24
     b14:	29 f0       	breq	.+10     	; 0xb20 <__vector_25+0x24>
     b16:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     b1a:	81 50       	subi	r24, 0x01	; 1
     b1c:	80 93 c9 3a 	sts	0x3AC9, r24	; 0x803ac9 <bytesLeftI2C>
     b20:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     b24:	87 ff       	sbrs	r24, 7
     b26:	18 c0       	rjmp	.+48     	; 0xb58 <__vector_25+0x5c>
     b28:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     b2c:	88 23       	and	r24, r24
     b2e:	81 f0       	breq	.+32     	; 0xb50 <__vector_25+0x54>
     b30:	e0 91 be 3a 	lds	r30, 0x3ABE	; 0x803abe <addrDataI2C>
     b34:	f0 91 bf 3a 	lds	r31, 0x3ABF	; 0x803abf <addrDataI2C+0x1>
     b38:	cf 01       	movw	r24, r30
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	80 93 be 3a 	sts	0x3ABE, r24	; 0x803abe <addrDataI2C>
     b40:	90 93 bf 3a 	sts	0x3ABF, r25	; 0x803abf <addrDataI2C+0x1>
     b44:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     b48:	80 83       	st	Z, r24
     b4a:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     b4e:	26 c0       	rjmp	.+76     	; 0xb9c <__vector_25+0xa0>
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     b56:	22 c0       	rjmp	.+68     	; 0xb9c <__vector_25+0xa0>
     b58:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     b5c:	8c 70       	andi	r24, 0x0C	; 12
     b5e:	19 f0       	breq	.+6      	; 0xb66 <__vector_25+0x6a>
     b60:	10 92 c9 3a 	sts	0x3AC9, r1	; 0x803ac9 <bytesLeftI2C>
     b64:	1b c0       	rjmp	.+54     	; 0xb9c <__vector_25+0xa0>
     b66:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	31 f4       	brne	.+12     	; 0xb7a <__vector_25+0x7e>
     b6e:	e0 91 be 3a 	lds	r30, 0x3ABE	; 0x803abe <addrDataI2C>
     b72:	f0 91 bf 3a 	lds	r31, 0x3ABF	; 0x803abf <addrDataI2C+0x1>
     b76:	80 81       	ld	r24, Z
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <__vector_25+0x90>
     b7a:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	41 f4       	brne	.+16     	; 0xb92 <__vector_25+0x96>
     b82:	e0 91 be 3a 	lds	r30, 0x3ABE	; 0x803abe <addrDataI2C>
     b86:	f0 91 bf 3a 	lds	r31, 0x3ABF	; 0x803abf <addrDataI2C+0x1>
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <__vector_25+0xa0>
     b92:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     b9c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     ba0:	87 ff       	sbrs	r24, 7
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <__vector_25+0xb6>
     ba4:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     ba8:	81 11       	cpse	r24, r1
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <__vector_25+0xb6>
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_27>:
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	8f 93       	push	r24
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31
     bd4:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <serRxDone>
     bd8:	81 11       	cpse	r24, r1
     bda:	44 c0       	rjmp	.+136    	; 0xc64 <__vector_27+0xa0>
     bdc:	ed b3       	in	r30, 0x1d	; 29
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     be4:	e3 58       	subi	r30, 0x83	; 131
     be6:	f5 4c       	sbci	r31, 0xC5	; 197
     be8:	80 83       	st	Z, r24
     bea:	ed b3       	in	r30, 0x1d	; 29
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	e3 58       	subi	r30, 0x83	; 131
     bf0:	f5 4c       	sbci	r31, 0xC5	; 197
     bf2:	80 81       	ld	r24, Z
     bf4:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     bf8:	ed b3       	in	r30, 0x1d	; 29
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e3 58       	subi	r30, 0x83	; 131
     bfe:	f5 4c       	sbci	r31, 0xC5	; 197
     c00:	80 81       	ld	r24, Z
     c02:	8a 30       	cpi	r24, 0x0A	; 10
     c04:	39 f0       	breq	.+14     	; 0xc14 <__vector_27+0x50>
     c06:	ed b3       	in	r30, 0x1d	; 29
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	e3 58       	subi	r30, 0x83	; 131
     c0c:	f5 4c       	sbci	r31, 0xC5	; 197
     c0e:	80 81       	ld	r24, Z
     c10:	8d 30       	cpi	r24, 0x0D	; 13
     c12:	49 f4       	brne	.+18     	; 0xc26 <__vector_27+0x62>
     c14:	ed b3       	in	r30, 0x1d	; 29
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	e3 58       	subi	r30, 0x83	; 131
     c1a:	f5 4c       	sbci	r31, 0xC5	; 197
     c1c:	10 82       	st	Z, r1
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <serRxDone>
     c24:	1f c0       	rjmp	.+62     	; 0xc64 <__vector_27+0xa0>
     c26:	ed b3       	in	r30, 0x1d	; 29
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	e3 58       	subi	r30, 0x83	; 131
     c2c:	f5 4c       	sbci	r31, 0xC5	; 197
     c2e:	80 81       	ld	r24, Z
     c30:	88 30       	cpi	r24, 0x08	; 8
     c32:	39 f0       	breq	.+14     	; 0xc42 <__vector_27+0x7e>
     c34:	ed b3       	in	r30, 0x1d	; 29
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	e3 58       	subi	r30, 0x83	; 131
     c3a:	f5 4c       	sbci	r31, 0xC5	; 197
     c3c:	80 81       	ld	r24, Z
     c3e:	8f 37       	cpi	r24, 0x7F	; 127
     c40:	59 f4       	brne	.+22     	; 0xc58 <__vector_27+0x94>
     c42:	8d b3       	in	r24, 0x1d	; 29
     c44:	88 23       	and	r24, r24
     c46:	41 f0       	breq	.+16     	; 0xc58 <__vector_27+0x94>
     c48:	ed b3       	in	r30, 0x1d	; 29
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	e3 58       	subi	r30, 0x83	; 131
     c4e:	f5 4c       	sbci	r31, 0xC5	; 197
     c50:	10 82       	st	Z, r1
     c52:	8d b3       	in	r24, 0x1d	; 29
     c54:	81 50       	subi	r24, 0x01	; 1
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <__vector_27+0x9e>
     c58:	8d b3       	in	r24, 0x1d	; 29
     c5a:	80 34       	cpi	r24, 0x40	; 64
     c5c:	18 f4       	brcc	.+6      	; 0xc64 <__vector_27+0xa0>
     c5e:	8d b3       	in	r24, 0x1d	; 29
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	8d bb       	out	0x1d, r24	; 29
     c64:	80 e8       	ldi	r24, 0x80	; 128
     c66:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	8f 91       	pop	r24
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <__vector_28>:
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	8f 93       	push	r24
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c8e:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c98:	e5 e0       	ldi	r30, 0x05	; 5
     c9a:	f8 e0       	ldi	r31, 0x08	; 8
     c9c:	80 81       	ld	r24, Z
     c9e:	8f 7d       	andi	r24, 0xDF	; 223
     ca0:	80 83       	st	Z, r24
     ca2:	ff 91       	pop	r31
     ca4:	ef 91       	pop	r30
     ca6:	8f 91       	pop	r24
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_20>:
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     cc4:	81 11       	cpse	r24, r1
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <__vector_20+0x3a>
     cc8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ccc:	8e 31       	cpi	r24, 0x1E	; 30
     cce:	49 f4       	brne	.+18     	; 0xce2 <__vector_20+0x30>
     cd0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     cd4:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     cd8:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <adcTemp>
     cdc:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <adcTemp+0x1>
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <__vector_20+0x44>
     ce2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ce6:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <auIn>
     cea:	05 c0       	rjmp	.+10     	; 0xcf6 <__vector_20+0x44>
     cec:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     cf0:	81 50       	subi	r24, 0x01	; 1
     cf2:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <__vector_22>:
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d1c:	81 11       	cpse	r24, r1
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <__vector_22+0x2a>
     d20:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d24:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d28:	80 93 c7 3a 	sts	0x3AC7, r24	; 0x803ac7 <adcPhot>
     d2c:	90 93 c8 3a 	sts	0x3AC8, r25	; 0x803ac8 <adcPhot+0x1>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	10 c0       	rjmp	.+32     	; 0xd54 <__vector_22+0x4a>
     d34:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	79 f4       	brne	.+30     	; 0xd5a <__vector_22+0x50>
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     d42:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d46:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d4a:	80 93 c5 3a 	sts	0x3AC5, r24	; 0x803ac5 <adcHall>
     d4e:	90 93 c6 3a 	sts	0x3AC6, r25	; 0x803ac6 <adcHall+0x1>
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d58:	10 c0       	rjmp	.+32     	; 0xd7a <__vector_22+0x70>
     d5a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d5e:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d62:	80 93 c1 3a 	sts	0x3AC1, r24	; 0x803ac1 <adcBtns>
     d66:	90 93 c2 3a 	sts	0x3AC2, r25	; 0x803ac2 <adcBtns+0x1>
     d6a:	8f b3       	in	r24, 0x1f	; 31
     d6c:	8f 30       	cpi	r24, 0x0F	; 15
     d6e:	29 f4       	brne	.+10     	; 0xd7a <__vector_22+0x70>
     d70:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d74:	88 e0       	ldi	r24, 0x08	; 8
     d76:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d7a:	8f b3       	in	r24, 0x1f	; 31
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	8f 70       	andi	r24, 0x0F	; 15
     d82:	99 27       	eor	r25, r25
     d84:	8f bb       	out	0x1f, r24	; 31
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_6>:
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	2f 93       	push	r18
     da6:	3f 93       	push	r19
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     db0:	81 ff       	sbrs	r24, 1
     db2:	36 c0       	rjmp	.+108    	; 0xe20 <__vector_6+0x86>
     db4:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     db8:	8f 3f       	cpi	r24, 0xFF	; 255
     dba:	29 f0       	breq	.+10     	; 0xdc6 <__vector_6+0x2c>
     dbc:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>
     dc6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     dca:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     dce:	82 96       	adiw	r24, 0x22	; 34
     dd0:	80 93 fa 3a 	sts	0x3AFA, r24	; 0x803afa <tmp16bit>
     dd4:	90 93 fb 3a 	sts	0x3AFB, r25	; 0x803afb <tmp16bit+0x1>
     dd8:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ddc:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     de0:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <tmp16bit>
     de4:	90 91 fb 3a 	lds	r25, 0x3AFB	; 0x803afb <tmp16bit+0x1>
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	58 f4       	brcc	.+22     	; 0xe04 <__vector_6+0x6a>
     dee:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     df2:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     df6:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <tmp16bit>
     dfa:	90 91 fb 3a 	lds	r25, 0x3AFB	; 0x803afb <tmp16bit+0x1>
     dfe:	82 1b       	sub	r24, r18
     e00:	93 0b       	sbc	r25, r19
     e02:	e6 cf       	rjmp	.-52     	; 0xdd0 <__vector_6+0x36>
     e04:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e08:	83 fd       	sbrc	r24, 3
     e0a:	fc cf       	rjmp	.-8      	; 0xe04 <__vector_6+0x6a>
     e0c:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <tmp16bit>
     e10:	90 91 fb 3a 	lds	r25, 0x3AFB	; 0x803afb <tmp16bit+0x1>
     e14:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e18:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <__vector_6+0x92>
     e20:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <minuteMark>
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <minuteMark>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_7>:
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     e56:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <fastTicker>
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <fastTicker>
     e60:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <I2C_read_bytes>:
     e72:	0f 93       	push	r16
     e74:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     e78:	83 70       	andi	r24, 0x03	; 3
     e7a:	11 f4       	brne	.+4      	; 0xe80 <I2C_read_bytes+0xe>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	1d c0       	rjmp	.+58     	; 0xeba <I2C_read_bytes+0x48>
     e80:	60 93 be 3a 	sts	0x3ABE, r22	; 0x803abe <addrDataI2C>
     e84:	70 93 bf 3a 	sts	0x3ABF, r23	; 0x803abf <addrDataI2C+0x1>
     e88:	67 2b       	or	r22, r23
     e8a:	c1 f3       	breq	.-16     	; 0xe7c <I2C_read_bytes+0xa>
     e8c:	80 ea       	ldi	r24, 0xA0	; 160
     e8e:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     e92:	4f 5f       	subi	r20, 0xFF	; 255
     e94:	40 93 c9 3a 	sts	0x3AC9, r20	; 0x803ac9 <bytesLeftI2C>
     e98:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     e9c:	81 11       	cpse	r24, r1
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <I2C_read_bytes+0x26>
     ea0:	20 93 be 3a 	sts	0x3ABE, r18	; 0x803abe <addrDataI2C>
     ea4:	30 93 bf 3a 	sts	0x3ABF, r19	; 0x803abf <addrDataI2C+0x1>
     ea8:	23 2b       	or	r18, r19
     eaa:	41 f3       	breq	.-48     	; 0xe7c <I2C_read_bytes+0xa>
     eac:	0f 5f       	subi	r16, 0xFF	; 255
     eae:	00 93 c9 3a 	sts	0x3AC9, r16	; 0x803ac9 <bytesLeftI2C>
     eb2:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <bytesLeftI2C>
     eb6:	81 11       	cpse	r24, r1
     eb8:	fc cf       	rjmp	.-8      	; 0xeb2 <I2C_read_bytes+0x40>
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <EERead>:
     ebe:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     ec2:	91 fd       	sbrc	r25, 1
     ec4:	fc cf       	rjmp	.-8      	; 0xebe <EERead>
     ec6:	fb 01       	movw	r30, r22
     ec8:	48 0f       	add	r20, r24
     eca:	84 17       	cp	r24, r20
     ecc:	39 f0       	breq	.+14     	; 0xedc <EERead+0x1e>
     ece:	a8 2f       	mov	r26, r24
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	bc 5e       	subi	r27, 0xEC	; 236
     ed4:	9c 91       	ld	r25, X
     ed6:	91 93       	st	Z+, r25
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <EERead+0xc>
     edc:	08 95       	ret

00000ede <EEWrite>:
     ede:	9d e9       	ldi	r25, 0x9D	; 157
     ee0:	24 e0       	ldi	r18, 0x04	; 4
     ee2:	33 e0       	ldi	r19, 0x03	; 3
     ee4:	44 23       	and	r20, r20
     ee6:	09 f1       	breq	.+66     	; 0xf2a <EEWrite+0x4c>
     ee8:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     eec:	51 fd       	sbrc	r21, 1
     eee:	fc cf       	rjmp	.-8      	; 0xee8 <EEWrite+0xa>
     ef0:	94 bf       	out	0x34, r25	; 52
     ef2:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     ef6:	e8 2f       	mov	r30, r24
     ef8:	58 2f       	mov	r21, r24
     efa:	5f 71       	andi	r21, 0x1F	; 31
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	db 01       	movw	r26, r22
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	ac 91       	ld	r26, X
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	fc 5e       	subi	r31, 0xEC	; 236
     f0c:	a0 83       	st	Z, r26
     f0e:	41 50       	subi	r20, 0x01	; 1
     f10:	19 f0       	breq	.+6      	; 0xf18 <EEWrite+0x3a>
     f12:	e8 2f       	mov	r30, r24
     f14:	5f 31       	cpi	r21, 0x1F	; 31
     f16:	81 f7       	brne	.-32     	; 0xef8 <EEWrite+0x1a>
     f18:	94 bf       	out	0x34, r25	; 52
     f1a:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     f1e:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     f22:	52 ff       	sbrs	r21, 2
     f24:	df cf       	rjmp	.-66     	; 0xee4 <EEWrite+0x6>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	08 95       	ret
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	08 95       	ret

00000f2e <DecryptData>:
     f2e:	f9 01       	movw	r30, r18
     f30:	9c 01       	movw	r18, r24
     f32:	2e 1b       	sub	r18, r30
     f34:	3f 0b       	sbc	r19, r31
     f36:	88 e0       	ldi	r24, 0x08	; 8
     f38:	48 9f       	mul	r20, r24
     f3a:	a0 01       	movw	r20, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	4a 56       	subi	r20, 0x6A	; 106
     f40:	51 44       	sbci	r21, 0x41	; 65
     f42:	66 23       	and	r22, r22
     f44:	69 f0       	breq	.+26     	; 0xf60 <DecryptData+0x32>
     f46:	df 01       	movw	r26, r30
     f48:	a2 0f       	add	r26, r18
     f4a:	b3 1f       	adc	r27, r19
     f4c:	a7 70       	andi	r26, 0x07	; 7
     f4e:	bb 27       	eor	r27, r27
     f50:	a4 0f       	add	r26, r20
     f52:	b5 1f       	adc	r27, r21
     f54:	80 81       	ld	r24, Z
     f56:	9c 91       	ld	r25, X
     f58:	98 27       	eor	r25, r24
     f5a:	91 93       	st	Z+, r25
     f5c:	61 50       	subi	r22, 0x01	; 1
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <DecryptData+0x14>
     f60:	08 95       	ret

00000f62 <ExtEERead>:
     f62:	a2 e0       	ldi	r26, 0x02	; 2
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 eb       	ldi	r30, 0xB7	; 183
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__+0x10>
     f6e:	d6 2e       	mov	r13, r22
     f70:	c4 2e       	mov	r12, r20
     f72:	59 01       	movw	r10, r18
     f74:	7c 01       	movw	r14, r24
     f76:	e8 94       	clt
     f78:	f7 f8       	bld	r15, 7
     f7a:	f9 82       	std	Y+1, r15	; 0x01
     f7c:	ea 82       	std	Y+2, r14	; 0x02
     f7e:	06 2f       	mov	r16, r22
     f80:	42 e0       	ldi	r20, 0x02	; 2
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	80 e5       	ldi	r24, 0x50	; 80
     f8a:	73 df       	rcall	.-282    	; 0xe72 <I2C_read_bytes>
     f8c:	18 2f       	mov	r17, r24
     f8e:	81 11       	cpse	r24, r1
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <ExtEERead+0x3a>
     f92:	95 01       	movw	r18, r10
     f94:	4c 2d       	mov	r20, r12
     f96:	6d 2d       	mov	r22, r13
     f98:	c7 01       	movw	r24, r14
     f9a:	c9 df       	rcall	.-110    	; 0xf2e <DecryptData>
     f9c:	81 2f       	mov	r24, r17
     f9e:	22 96       	adiw	r28, 0x02	; 2
     fa0:	ea e0       	ldi	r30, 0x0A	; 10
     fa2:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__epilogue_restores__+0x10>

00000fa6 <SerSend>:
     fa6:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
     faa:	22 23       	and	r18, r18
     fac:	59 f0       	breq	.+22     	; 0xfc4 <SerSend+0x1e>
     fae:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <serTxAddr>
     fb2:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <serTxAddr+0x1>
     fb6:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	08 95       	ret
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	08 95       	ret

00000fc8 <SerSpeed>:
     fc8:	28 2f       	mov	r18, r24
     fca:	81 11       	cpse	r24, r1
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <SerSpeed+0x8>
     fce:	21 e0       	ldi	r18, 0x01	; 1
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	82 1b       	sub	r24, r18
     fd6:	91 09       	sbc	r25, r1
     fd8:	98 2f       	mov	r25, r24
     fda:	88 27       	eor	r24, r24
     fdc:	81 50       	subi	r24, 0x01	; 1
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     fe4:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     fe8:	08 95       	ret

00000fea <SelectTSens>:
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     ff0:	82 e1       	ldi	r24, 0x12	; 18
     ff2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ff6:	e0 e0       	ldi	r30, 0x00	; 0
     ff8:	f6 e0       	ldi	r31, 0x06	; 6
     ffa:	80 81       	ld	r24, Z
     ffc:	8b 7f       	andi	r24, 0xFB	; 251
     ffe:	80 83       	st	Z, r24
    1000:	8e e1       	ldi	r24, 0x1E	; 30
    1002:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1006:	08 95       	ret

00001008 <SelectAuIn>:
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    100e:	82 e2       	ldi	r24, 0x22	; 34
    1010:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1014:	e0 e0       	ldi	r30, 0x00	; 0
    1016:	f6 e0       	ldi	r31, 0x06	; 6
    1018:	80 81       	ld	r24, Z
    101a:	84 60       	ori	r24, 0x04	; 4
    101c:	80 83       	st	Z, r24
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1024:	08 95       	ret

00001026 <CheckButtons>:
    1026:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <adcBtns>
    102a:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <adcBtns+0x1>
    102e:	24 e0       	ldi	r18, 0x04	; 4
    1030:	96 95       	lsr	r25
    1032:	87 95       	ror	r24
    1034:	2a 95       	dec	r18
    1036:	e1 f7       	brne	.-8      	; 0x1030 <CheckButtons+0xa>
    1038:	99 27       	eor	r25, r25
    103a:	80 36       	cpi	r24, 0x60	; 96
    103c:	91 05       	cpc	r25, r1
    103e:	40 f4       	brcc	.+16     	; 0x1050 <CheckButtons+0x2a>
    1040:	8f 34       	cpi	r24, 0x4F	; 79
    1042:	91 05       	cpc	r25, r1
    1044:	88 f4       	brcc	.+34     	; 0x1068 <CheckButtons+0x42>
    1046:	c0 97       	sbiw	r24, 0x30	; 48
    1048:	09 97       	sbiw	r24, 0x09	; 9
    104a:	90 f4       	brcc	.+36     	; 0x1070 <CheckButtons+0x4a>
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	11 c0       	rjmp	.+34     	; 0x1072 <CheckButtons+0x4c>
    1050:	85 37       	cpi	r24, 0x75	; 117
    1052:	91 05       	cpc	r25, r1
    1054:	68 f0       	brcs	.+26     	; 0x1070 <CheckButtons+0x4a>
    1056:	8e 38       	cpi	r24, 0x8E	; 142
    1058:	91 05       	cpc	r25, r1
    105a:	40 f0       	brcs	.+16     	; 0x106c <CheckButtons+0x46>
    105c:	8e 59       	subi	r24, 0x9E	; 158
    105e:	91 09       	sbc	r25, r1
    1060:	81 97       	sbiw	r24, 0x21	; 33
    1062:	30 f4       	brcc	.+12     	; 0x1070 <CheckButtons+0x4a>
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <CheckButtons+0x4c>
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <CheckButtons+0x4c>
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <CheckButtons+0x4c>
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <previousValue.3902>
    1076:	98 17       	cp	r25, r24
    1078:	19 f0       	breq	.+6      	; 0x1080 <CheckButtons+0x5a>
    107a:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <previousValue.3902>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	08 95       	ret

00001082 <lfsr>:
    1082:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <lfsrSeed>
    1086:	90 91 63 38 	lds	r25, 0x3863	; 0x803863 <lfsrSeed+0x1>
    108a:	9c 01       	movw	r18, r24
    108c:	32 2f       	mov	r19, r18
    108e:	22 27       	eor	r18, r18
    1090:	32 95       	swap	r19
    1092:	33 0f       	add	r19, r19
    1094:	30 7e       	andi	r19, 0xE0	; 224
    1096:	82 27       	eor	r24, r18
    1098:	93 27       	eor	r25, r19
    109a:	9c 01       	movw	r18, r24
    109c:	23 2f       	mov	r18, r19
    109e:	33 27       	eor	r19, r19
    10a0:	26 95       	lsr	r18
    10a2:	82 27       	eor	r24, r18
    10a4:	93 27       	eor	r25, r19
    10a6:	9c 01       	movw	r18, r24
    10a8:	36 95       	lsr	r19
    10aa:	32 2f       	mov	r19, r18
    10ac:	22 27       	eor	r18, r18
    10ae:	37 95       	ror	r19
    10b0:	27 95       	ror	r18
    10b2:	82 27       	eor	r24, r18
    10b4:	93 27       	eor	r25, r19
    10b6:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <lfsrSeed>
    10ba:	90 93 63 38 	sts	0x3863, r25	; 0x803863 <lfsrSeed+0x1>
    10be:	08 95       	ret

000010c0 <floatSpeed>:
    10c0:	a0 e0       	ldi	r26, 0x00	; 0
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e6 e6       	ldi	r30, 0x66	; 102
    10c6:	f8 e0       	ldi	r31, 0x08	; 8
    10c8:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <__prologue_saves__+0x16>
    10cc:	7b 01       	movw	r14, r22
    10ce:	8a 01       	movw	r16, r20
    10d0:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    10d4:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    10d8:	e8 2f       	mov	r30, r24
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	e7 70       	andi	r30, 0x07	; 7
    10e0:	ff 27       	eor	r31, r31
    10e2:	e4 5d       	subi	r30, 0xD4	; 212
    10e4:	f7 4c       	sbci	r31, 0xC7	; 199
    10e6:	d0 80       	ld	r13, Z
    10e8:	cc df       	rcall	.-104    	; 0x1082 <lfsr>
    10ea:	8d 21       	and	r24, r13
    10ec:	c8 0f       	add	r28, r24
    10ee:	d1 1d       	adc	r29, r1
    10f0:	c8 df       	rcall	.-112    	; 0x1082 <lfsr>
    10f2:	8d 21       	and	r24, r13
    10f4:	c8 1b       	sub	r28, r24
    10f6:	d1 09       	sbc	r29, r1
    10f8:	0c 17       	cp	r16, r28
    10fa:	1d 07       	cpc	r17, r29
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <floatSpeed+0x40>
    10fe:	e8 01       	movw	r28, r16
    1100:	c7 01       	movw	r24, r14
    1102:	ec 16       	cp	r14, r28
    1104:	fd 06       	cpc	r15, r29
    1106:	08 f4       	brcc	.+2      	; 0x110a <floatSpeed+0x4a>
    1108:	ce 01       	movw	r24, r28
    110a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    110e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	e7 e0       	ldi	r30, 0x07	; 7
    1118:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__+0x16>

0000111c <floatAround>:
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	c8 2f       	mov	r28, r24
    1126:	d4 2f       	mov	r29, r20
    1128:	02 2f       	mov	r16, r18
    112a:	e6 2f       	mov	r30, r22
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	31 97       	sbiw	r30, 0x01	; 1
    1130:	e7 70       	andi	r30, 0x07	; 7
    1132:	ff 27       	eor	r31, r31
    1134:	e4 5d       	subi	r30, 0xD4	; 212
    1136:	f7 4c       	sbci	r31, 0xC7	; 199
    1138:	10 81       	ld	r17, Z
    113a:	a3 df       	rcall	.-186    	; 0x1082 <lfsr>
    113c:	81 23       	and	r24, r17
    113e:	c8 0f       	add	r28, r24
    1140:	a0 df       	rcall	.-192    	; 0x1082 <lfsr>
    1142:	81 23       	and	r24, r17
    1144:	c8 1b       	sub	r28, r24
    1146:	8c 2f       	mov	r24, r28
    1148:	00 23       	and	r16, r16
    114a:	41 f0       	breq	.+16     	; 0x115c <floatAround+0x40>
    114c:	9c 2f       	mov	r25, r28
    114e:	0c 17       	cp	r16, r28
    1150:	08 f4       	brcc	.+2      	; 0x1154 <floatAround+0x38>
    1152:	90 2f       	mov	r25, r16
    1154:	8d 2f       	mov	r24, r29
    1156:	d9 17       	cp	r29, r25
    1158:	08 f4       	brcc	.+2      	; 0x115c <floatAround+0x40>
    115a:	89 2f       	mov	r24, r25
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	8d 17       	cp	r24, r29
    1162:	10 f0       	brcs	.+4      	; 0x1168 <floatAround+0x4c>
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	2d 2f       	mov	r18, r29
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	24 23       	and	r18, r20
    116e:	35 23       	and	r19, r21
    1170:	23 2b       	or	r18, r19
    1172:	09 f0       	breq	.+2      	; 0x1176 <floatAround+0x5a>
    1174:	8d 2f       	mov	r24, r29
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	08 95       	ret

00001180 <SaveGameState>:
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	64 97       	sbiw	r28, 0x14	; 20
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	44 e1       	ldi	r20, 0x14	; 20
    119a:	be 01       	movw	r22, r28
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	8d de       	rcall	.-742    	; 0xebe <EERead>
    11a4:	89 e6       	ldi	r24, 0x69	; 105
    11a6:	c8 2e       	mov	r12, r24
    11a8:	8a e3       	ldi	r24, 0x3A	; 58
    11aa:	d8 2e       	mov	r13, r24
    11ac:	8e 01       	movw	r16, r28
    11ae:	0f 5f       	subi	r16, 0xFF	; 255
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	f1 2c       	mov	r15, r1
    11b4:	f8 01       	movw	r30, r16
    11b6:	81 91       	ld	r24, Z+
    11b8:	8f 01       	movw	r16, r30
    11ba:	f6 01       	movw	r30, r12
    11bc:	90 81       	ld	r25, Z
    11be:	98 13       	cpse	r25, r24
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <SaveGameState+0x52>
    11c2:	f3 94       	inc	r15
    11c4:	ff ef       	ldi	r31, 0xFF	; 255
    11c6:	cf 1a       	sub	r12, r31
    11c8:	df 0a       	sbc	r13, r31
    11ca:	80 e1       	ldi	r24, 0x10	; 16
    11cc:	f8 12       	cpse	r15, r24
    11ce:	f2 cf       	rjmp	.-28     	; 0x11b4 <SaveGameState+0x34>
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <SaveGameState+0x62>
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	b6 01       	movw	r22, r12
    11d6:	8f 2d       	mov	r24, r15
    11d8:	82 de       	rcall	.-764    	; 0xede <EEWrite>
    11da:	88 23       	and	r24, r24
    11dc:	91 f3       	breq	.-28     	; 0x11c2 <SaveGameState+0x42>
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	36 c0       	rjmp	.+108    	; 0x124e <SaveGameState+0xce>
    11e2:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    11e6:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    11ea:	30 93 79 3a 	sts	0x3A79, r19	; 0x803a79 <gameState+0x10>
    11ee:	20 93 7a 3a 	sts	0x3A7A, r18	; 0x803a7a <gameState+0x11>
    11f2:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    11f6:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    11fa:	90 93 7b 3a 	sts	0x3A7B, r25	; 0x803a7b <gameState+0x12>
    11fe:	80 93 7c 3a 	sts	0x3A7C, r24	; 0x803a7c <gameState+0x13>
    1202:	89 89       	ldd	r24, Y+17	; 0x11
    1204:	9a 89       	ldd	r25, Y+18	; 0x12
    1206:	98 27       	eor	r25, r24
    1208:	89 27       	eor	r24, r25
    120a:	98 27       	eor	r25, r24
    120c:	28 17       	cp	r18, r24
    120e:	39 07       	cpc	r19, r25
    1210:	69 f4       	brne	.+26     	; 0x122c <SaveGameState+0xac>
    1212:	8b 89       	ldd	r24, Y+19	; 0x13
    1214:	9c 89       	ldd	r25, Y+20	; 0x14
    1216:	98 27       	eor	r25, r24
    1218:	89 27       	eor	r24, r25
    121a:	98 27       	eor	r25, r24
    121c:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    1220:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    1224:	28 17       	cp	r18, r24
    1226:	39 07       	cpc	r19, r25
    1228:	49 f4       	brne	.+18     	; 0x123c <SaveGameState+0xbc>
    122a:	10 c0       	rjmp	.+32     	; 0x124c <SaveGameState+0xcc>
    122c:	42 e0       	ldi	r20, 0x02	; 2
    122e:	69 e7       	ldi	r22, 0x79	; 121
    1230:	7a e3       	ldi	r23, 0x3A	; 58
    1232:	80 e1       	ldi	r24, 0x10	; 16
    1234:	54 de       	rcall	.-856    	; 0xede <EEWrite>
    1236:	88 23       	and	r24, r24
    1238:	61 f3       	breq	.-40     	; 0x1212 <SaveGameState+0x92>
    123a:	d1 cf       	rjmp	.-94     	; 0x11de <SaveGameState+0x5e>
    123c:	42 e0       	ldi	r20, 0x02	; 2
    123e:	6b e7       	ldi	r22, 0x7B	; 123
    1240:	7a e3       	ldi	r23, 0x3A	; 58
    1242:	82 e1       	ldi	r24, 0x12	; 18
    1244:	4c de       	rcall	.-872    	; 0xede <EEWrite>
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	81 11       	cpse	r24, r1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <SaveGameState+0xce>
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	89 2f       	mov	r24, r25
    1250:	64 96       	adiw	r28, 0x14	; 20
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	08 95       	ret

00001266 <ReadStatusBit>:
    1266:	e8 2f       	mov	r30, r24
    1268:	ef 77       	andi	r30, 0x7F	; 127
    126a:	e6 95       	lsr	r30
    126c:	e6 95       	lsr	r30
    126e:	e6 95       	lsr	r30
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	e7 59       	subi	r30, 0x97	; 151
    1274:	f5 4c       	sbci	r31, 0xC5	; 197
    1276:	20 81       	ld	r18, Z
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	87 70       	andi	r24, 0x07	; 7
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <ReadStatusBit+0x1e>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <ReadStatusBit+0x1a>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	08 95       	ret

0000128e <UpdateState>:
    128e:	e8 2f       	mov	r30, r24
    1290:	ef 77       	andi	r30, 0x7F	; 127
    1292:	e9 f0       	breq	.+58     	; 0x12ce <UpdateState+0x40>
    1294:	e6 95       	lsr	r30
    1296:	e6 95       	lsr	r30
    1298:	e6 95       	lsr	r30
    129a:	28 2f       	mov	r18, r24
    129c:	27 70       	andi	r18, 0x07	; 7
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	e7 59       	subi	r30, 0x97	; 151
    12a2:	f5 4c       	sbci	r31, 0xC5	; 197
    12a4:	87 ff       	sbrs	r24, 7
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <UpdateState+0x2e>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <UpdateState+0x22>
    12ae:	88 0f       	add	r24, r24
    12b0:	2a 95       	dec	r18
    12b2:	ea f7       	brpl	.-6      	; 0x12ae <UpdateState+0x20>
    12b4:	80 95       	com	r24
    12b6:	90 81       	ld	r25, Z
    12b8:	89 23       	and	r24, r25
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <UpdateState+0x3e>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <UpdateState+0x36>
    12c2:	88 0f       	add	r24, r24
    12c4:	2a 95       	dec	r18
    12c6:	ea f7       	brpl	.-6      	; 0x12c2 <UpdateState+0x34>
    12c8:	90 81       	ld	r25, Z
    12ca:	89 2b       	or	r24, r25
    12cc:	80 83       	st	Z, r24
    12ce:	08 95       	ret

000012d0 <CheckState>:
    12d0:	cf 93       	push	r28
    12d2:	c8 2f       	mov	r28, r24
    12d4:	8f 77       	andi	r24, 0x7F	; 127
    12d6:	c7 df       	rcall	.-114    	; 0x1266 <ReadStatusBit>
    12d8:	2c 2f       	mov	r18, r28
    12da:	22 1f       	adc	r18, r18
    12dc:	22 27       	eor	r18, r18
    12de:	22 1f       	adc	r18, r18
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	81 11       	cpse	r24, r1
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <CheckState+0x18>
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	82 2f       	mov	r24, r18
    12ea:	89 27       	eor	r24, r25
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <getID>:
    12f0:	e3 e0       	ldi	r30, 0x03	; 3
    12f2:	f1 e1       	ldi	r31, 0x11	; 17
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	91 91       	ld	r25, Z+
    12f8:	89 0f       	add	r24, r25
    12fa:	ed 30       	cpi	r30, 0x0D	; 13
    12fc:	91 e1       	ldi	r25, 0x11	; 17
    12fe:	f9 07       	cpc	r31, r25
    1300:	d1 f7       	brne	.-12     	; 0x12f6 <getID+0x6>
    1302:	83 70       	andi	r24, 0x03	; 3
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	98 0f       	add	r25, r24
    1308:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <whoami>
    130c:	08 95       	ret

0000130e <WipeAfterBoot>:
    130e:	a1 e0       	ldi	r26, 0x01	; 1
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ed e8       	ldi	r30, 0x8D	; 141
    1314:	f9 e0       	ldi	r31, 0x09	; 9
    1316:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x1e>
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	99 83       	std	Y+1, r25	; 0x01
    131e:	81 11       	cpse	r24, r1
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <WipeAfterBoot+0x24>
    1322:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
    1326:	83 51       	subi	r24, 0x13	; 19
    1328:	b2 df       	rcall	.-156    	; 0x128e <UpdateState>
    132a:	21 96       	adiw	r28, 0x01	; 1
    132c:	e3 e0       	ldi	r30, 0x03	; 3
    132e:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x1e>
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	be 01       	movw	r22, r28
    1338:	6f 5f       	subi	r22, 0xFF	; 255
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	81 2f       	mov	r24, r17
    133e:	cf dd       	rcall	.-1122   	; 0xede <EEWrite>
    1340:	1f 5f       	subi	r17, 0xFF	; 255
    1342:	10 32       	cpi	r17, 0x20	; 32
    1344:	b9 f7       	brne	.-18     	; 0x1334 <WipeAfterBoot+0x26>
    1346:	ed cf       	rjmp	.-38     	; 0x1322 <WipeAfterBoot+0x14>

00001348 <Reset>:
    1348:	cf 93       	push	r28
    134a:	e9 e6       	ldi	r30, 0x69	; 105
    134c:	fa e3       	ldi	r31, 0x3A	; 58
    134e:	11 92       	st	Z+, r1
    1350:	8a e3       	ldi	r24, 0x3A	; 58
    1352:	ed 37       	cpi	r30, 0x7D	; 125
    1354:	f8 07       	cpc	r31, r24
    1356:	d9 f7       	brne	.-10     	; 0x134e <Reset+0x6>
    1358:	cb df       	rcall	.-106    	; 0x12f0 <getID>
    135a:	c8 2f       	mov	r28, r24
    135c:	81 11       	cpse	r24, r1
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <Reset+0x1c>
    1360:	8e e6       	ldi	r24, 0x6E	; 110
    1362:	0b c0       	rjmp	.+22     	; 0x137a <Reset+0x32>
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	11 f4       	brne	.+4      	; 0x136c <Reset+0x24>
    1368:	8f e6       	ldi	r24, 0x6F	; 111
    136a:	07 c0       	rjmp	.+14     	; 0x137a <Reset+0x32>
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	11 f4       	brne	.+4      	; 0x1374 <Reset+0x2c>
    1370:	80 e7       	ldi	r24, 0x70	; 112
    1372:	03 c0       	rjmp	.+6      	; 0x137a <Reset+0x32>
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	11 f4       	brne	.+4      	; 0x137c <Reset+0x34>
    1378:	81 e7       	ldi	r24, 0x71	; 113
    137a:	89 df       	rcall	.-238    	; 0x128e <UpdateState>
    137c:	84 e6       	ldi	r24, 0x64	; 100
    137e:	8c 0f       	add	r24, r28
    1380:	86 df       	rcall	.-244    	; 0x128e <UpdateState>
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <LoadGameState>:
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	20 91 c7 3a 	lds	r18, 0x3AC7	; 0x803ac7 <adcPhot>
    138e:	30 91 c8 3a 	lds	r19, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    1392:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <adcTemp>
    1396:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <lfsrSeed>
    13a8:	90 93 63 38 	sts	0x3863, r25	; 0x803863 <lfsrSeed+0x1>
    13ac:	44 e1       	ldi	r20, 0x14	; 20
    13ae:	69 e6       	ldi	r22, 0x69	; 105
    13b0:	7a e3       	ldi	r23, 0x3A	; 58
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	84 dd       	rcall	.-1272   	; 0xebe <EERead>
    13b6:	ce e6       	ldi	r28, 0x6E	; 110
    13b8:	d0 e0       	ldi	r29, 0x00	; 0
    13ba:	8c 2f       	mov	r24, r28
    13bc:	54 df       	rcall	.-344    	; 0x1266 <ReadStatusBit>
    13be:	d8 0f       	add	r29, r24
    13c0:	cf 5f       	subi	r28, 0xFF	; 255
    13c2:	c2 37       	cpi	r28, 0x72	; 114
    13c4:	d1 f7       	brne	.-12     	; 0x13ba <LoadGameState+0x34>
    13c6:	d1 30       	cpi	r29, 0x01	; 1
    13c8:	11 f0       	breq	.+4      	; 0x13ce <LoadGameState+0x48>
    13ca:	be df       	rcall	.-132    	; 0x1348 <Reset>
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <LoadGameState+0x4a>
    13ce:	90 df       	rcall	.-224    	; 0x12f0 <getID>
    13d0:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <gameState+0x10>
    13d4:	90 91 7a 3a 	lds	r25, 0x3A7A	; 0x803a7a <gameState+0x11>
    13d8:	98 27       	eor	r25, r24
    13da:	89 27       	eor	r24, r25
    13dc:	98 27       	eor	r25, r24
    13de:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    13e2:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
    13e6:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <gameState+0x12>
    13ea:	90 91 7c 3a 	lds	r25, 0x3A7C	; 0x803a7c <gameState+0x13>
    13ee:	98 27       	eor	r25, r24
    13f0:	89 27       	eor	r24, r25
    13f2:	98 27       	eor	r25, r24
    13f4:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    13f8:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <HotSummer>:
    1402:	cf 93       	push	r28
    1404:	86 e7       	ldi	r24, 0x76	; 118
    1406:	64 df       	rcall	.-312    	; 0x12d0 <CheckState>
    1408:	c8 2f       	mov	r28, r24
    140a:	88 23       	and	r24, r24
    140c:	81 f0       	breq	.+32     	; 0x142e <HotSummer+0x2c>
    140e:	e0 91 7a be 	lds	r30, 0xBE7A	; 0x80be7a <__bss_end+0x835d>
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	e2 53       	subi	r30, 0x32	; 50
    1416:	f5 4c       	sbci	r31, 0xC5	; 197
    1418:	10 82       	st	Z, r1
    141a:	e0 91 7b be 	lds	r30, 0xBE7B	; 0x80be7b <__bss_end+0x835e>
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1424:	e2 53       	subi	r30, 0x32	; 50
    1426:	f5 4c       	sbci	r31, 0xC5	; 197
    1428:	80 83       	st	Z, r24
    142a:	c1 e0       	ldi	r28, 0x01	; 1
    142c:	49 c0       	rjmp	.+146    	; 0x14c0 <HotSummer+0xbe>
    142e:	85 e7       	ldi	r24, 0x75	; 117
    1430:	4f df       	rcall	.-354    	; 0x12d0 <CheckState>
    1432:	88 23       	and	r24, r24
    1434:	49 f1       	breq	.+82     	; 0x1488 <HotSummer+0x86>
    1436:	e0 91 7a be 	lds	r30, 0xBE7A	; 0x80be7a <__bss_end+0x835d>
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1440:	e2 53       	subi	r30, 0x32	; 50
    1442:	f5 4c       	sbci	r31, 0xC5	; 197
    1444:	80 83       	st	Z, r24
    1446:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <cooledDown.3974>
    144a:	88 23       	and	r24, r24
    144c:	71 f0       	breq	.+28     	; 0x146a <HotSummer+0x68>
    144e:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <calTemp>
    1452:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <calTemp+0x1>
    1456:	20 91 f8 3a 	lds	r18, 0x3AF8	; 0x803af8 <adcTemp>
    145a:	30 91 f9 3a 	lds	r19, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    145e:	80 96       	adiw	r24, 0x20	; 32
    1460:	28 17       	cp	r18, r24
    1462:	39 07       	cpc	r19, r25
    1464:	10 f0       	brcs	.+4      	; 0x146a <HotSummer+0x68>
    1466:	86 e7       	ldi	r24, 0x76	; 118
    1468:	2a c0       	rjmp	.+84     	; 0x14be <HotSummer+0xbc>
    146a:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <calTemp>
    146e:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <calTemp+0x1>
    1472:	20 91 f8 3a 	lds	r18, 0x3AF8	; 0x803af8 <adcTemp>
    1476:	30 91 f9 3a 	lds	r19, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    147a:	08 96       	adiw	r24, 0x08	; 8
    147c:	82 17       	cp	r24, r18
    147e:	93 07       	cpc	r25, r19
    1480:	18 f0       	brcs	.+6      	; 0x1488 <HotSummer+0x86>
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <cooledDown.3974>
    1488:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <calTemp>
    148c:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <calTemp+0x1>
    1490:	89 2b       	or	r24, r25
    1492:	41 f4       	brne	.+16     	; 0x14a4 <HotSummer+0xa2>
    1494:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <adcTemp>
    1498:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    149c:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <calTemp>
    14a0:	90 93 cc 3a 	sts	0x3ACC, r25	; 0x803acc <calTemp+0x1>
    14a4:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <calTemp>
    14a8:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <calTemp+0x1>
    14ac:	20 91 f8 3a 	lds	r18, 0x3AF8	; 0x803af8 <adcTemp>
    14b0:	30 91 f9 3a 	lds	r19, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    14b4:	80 96       	adiw	r24, 0x20	; 32
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	10 f0       	brcs	.+4      	; 0x14c0 <HotSummer+0xbe>
    14bc:	85 e7       	ldi	r24, 0x75	; 117
    14be:	e7 de       	rcall	.-562    	; 0x128e <UpdateState>
    14c0:	8c 2f       	mov	r24, r28
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <WingBar>:
    14c6:	ec e7       	ldi	r30, 0x7C	; 124
    14c8:	fe eb       	ldi	r31, 0xBE	; 190
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a5 81       	ldd	r26, Z+5	; 0x05
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	98 17       	cp	r25, r24
    14d2:	34 f4       	brge	.+12     	; 0x14e0 <WingBar+0x1a>
    14d4:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    14d8:	a2 53       	subi	r26, 0x32	; 50
    14da:	b5 4c       	sbci	r27, 0xC5	; 197
    14dc:	2c 93       	st	X, r18
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <WingBar+0x20>
    14e0:	a2 53       	subi	r26, 0x32	; 50
    14e2:	b5 4c       	sbci	r27, 0xC5	; 197
    14e4:	1c 92       	st	X, r1
    14e6:	a0 81       	ld	r26, Z
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	96 17       	cp	r25, r22
    14ec:	34 f4       	brge	.+12     	; 0x14fa <WingBar+0x34>
    14ee:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    14f2:	a2 53       	subi	r26, 0x32	; 50
    14f4:	b5 4c       	sbci	r27, 0xC5	; 197
    14f6:	2c 93       	st	X, r18
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <WingBar+0x3a>
    14fa:	a2 53       	subi	r26, 0x32	; 50
    14fc:	b5 4c       	sbci	r27, 0xC5	; 197
    14fe:	1c 92       	st	X, r1
    1500:	9f 5f       	subi	r25, 0xFF	; 255
    1502:	31 96       	adiw	r30, 0x01	; 1
    1504:	95 30       	cpi	r25, 0x05	; 5
    1506:	11 f7       	brne	.-60     	; 0x14cc <WingBar+0x6>
    1508:	08 95       	ret

0000150a <SetBothEyes>:
    150a:	a6 e8       	ldi	r26, 0x86	; 134
    150c:	be eb       	ldi	r27, 0xBE	; 190
    150e:	ec 91       	ld	r30, X
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	e2 53       	subi	r30, 0x32	; 50
    1514:	f5 4c       	sbci	r31, 0xC5	; 197
    1516:	80 83       	st	Z, r24
    1518:	12 96       	adiw	r26, 0x02	; 2
    151a:	ec 91       	ld	r30, X
    151c:	12 97       	sbiw	r26, 0x02	; 2
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e2 53       	subi	r30, 0x32	; 50
    1522:	f5 4c       	sbci	r31, 0xC5	; 197
    1524:	60 83       	st	Z, r22
    1526:	11 96       	adiw	r26, 0x01	; 1
    1528:	ec 91       	ld	r30, X
    152a:	11 97       	sbiw	r26, 0x01	; 1
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	e2 53       	subi	r30, 0x32	; 50
    1530:	f5 4c       	sbci	r31, 0xC5	; 197
    1532:	80 83       	st	Z, r24
    1534:	13 96       	adiw	r26, 0x03	; 3
    1536:	ec 91       	ld	r30, X
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	e2 53       	subi	r30, 0x32	; 50
    153c:	f5 4c       	sbci	r31, 0xC5	; 197
    153e:	60 83       	st	Z, r22
    1540:	08 95       	ret

00001542 <SetHackerLeds>:
    1542:	aa e8       	ldi	r26, 0x8A	; 138
    1544:	be eb       	ldi	r27, 0xBE	; 190
    1546:	ed 91       	ld	r30, X+
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	e2 53       	subi	r30, 0x32	; 50
    154c:	f5 4c       	sbci	r31, 0xC5	; 197
    154e:	80 83       	st	Z, r24
    1550:	15 96       	adiw	r26, 0x05	; 5
    1552:	ec 91       	ld	r30, X
    1554:	15 97       	sbiw	r26, 0x05	; 5
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	e2 53       	subi	r30, 0x32	; 50
    155a:	f5 4c       	sbci	r31, 0xC5	; 197
    155c:	60 83       	st	Z, r22
    155e:	9e eb       	ldi	r25, 0xBE	; 190
    1560:	a0 39       	cpi	r26, 0x90	; 144
    1562:	b9 07       	cpc	r27, r25
    1564:	81 f7       	brne	.-32     	; 0x1546 <SetHackerLeds+0x4>
    1566:	08 95       	ret

00001568 <VictoryDance>:
    1568:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <dimValue>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	cd df       	rcall	.-102    	; 0x150a <SetBothEyes>
    1570:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1574:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1578:	89 2f       	mov	r24, r25
    157a:	99 27       	eor	r25, r25
    157c:	82 95       	swap	r24
    157e:	8f 70       	andi	r24, 0x0F	; 15
    1580:	87 70       	andi	r24, 0x07	; 7
    1582:	99 27       	eor	r25, r25
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	91 05       	cpc	r25, r1
    1588:	59 f0       	breq	.+22     	; 0x15a0 <VictoryDance+0x38>
    158a:	28 f4       	brcc	.+10     	; 0x1596 <VictoryDance+0x2e>
    158c:	03 97       	sbiw	r24, 0x03	; 3
    158e:	58 f4       	brcc	.+22     	; 0x15a6 <VictoryDance+0x3e>
    1590:	88 e0       	ldi	r24, 0x08	; 8
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0d c0       	rjmp	.+26     	; 0x15b0 <VictoryDance+0x48>
    1596:	06 97       	sbiw	r24, 0x06	; 6
    1598:	31 f4       	brne	.+12     	; 0x15a6 <VictoryDance+0x3e>
    159a:	87 e0       	ldi	r24, 0x07	; 7
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <VictoryDance+0x48>
    15a0:	86 e0       	ldi	r24, 0x06	; 6
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <VictoryDance+0x48>
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	8d df       	rcall	.-230    	; 0x14c6 <WingBar>
    15ac:	82 e0       	ldi	r24, 0x02	; 2
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    15b4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    15b8:	08 95       	ret

000015ba <GenerateBlinks>:
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 ee       	ldi	r30, 0xE3	; 227
    15c0:	fa e0       	ldi	r31, 0x0A	; 10
    15c2:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__prologue_saves__+0x14>
    15c6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    15ca:	88 23       	and	r24, r24
    15cc:	29 f0       	breq	.+10     	; 0x15d8 <GenerateBlinks+0x1e>
    15ce:	80 e4       	ldi	r24, 0x40	; 64
    15d0:	7f de       	rcall	.-770    	; 0x12d0 <CheckState>
    15d2:	81 11       	cpse	r24, r1
    15d4:	24 c0       	rjmp	.+72     	; 0x161e <GenerateBlinks+0x64>
    15d6:	53 c0       	rjmp	.+166    	; 0x167e <GenerateBlinks+0xc4>
    15d8:	ca e8       	ldi	r28, 0x8A	; 138
    15da:	de eb       	ldi	r29, 0xBE	; 190
    15dc:	1a e7       	ldi	r17, 0x7A	; 122
    15de:	81 2f       	mov	r24, r17
    15e0:	77 de       	rcall	.-786    	; 0x12d0 <CheckState>
    15e2:	ee 81       	ldd	r30, Y+6	; 0x06
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	88 23       	and	r24, r24
    15e8:	59 f0       	breq	.+22     	; 0x1600 <GenerateBlinks+0x46>
    15ea:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15ee:	e2 53       	subi	r30, 0x32	; 50
    15f0:	f5 4c       	sbci	r31, 0xC5	; 197
    15f2:	80 83       	st	Z, r24
    15f4:	e8 81       	ld	r30, Y
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	e2 53       	subi	r30, 0x32	; 50
    15fa:	f5 4c       	sbci	r31, 0xC5	; 197
    15fc:	10 82       	st	Z, r1
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <GenerateBlinks+0x5a>
    1600:	e2 53       	subi	r30, 0x32	; 50
    1602:	f5 4c       	sbci	r31, 0xC5	; 197
    1604:	10 82       	st	Z, r1
    1606:	e8 81       	ld	r30, Y
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    160e:	e2 53       	subi	r30, 0x32	; 50
    1610:	f5 4c       	sbci	r31, 0xC5	; 197
    1612:	80 83       	st	Z, r24
    1614:	1f 5f       	subi	r17, 0xFF	; 255
    1616:	21 96       	adiw	r28, 0x01	; 1
    1618:	10 38       	cpi	r17, 0x80	; 128
    161a:	09 f7       	brne	.-62     	; 0x15de <GenerateBlinks+0x24>
    161c:	d8 cf       	rjmp	.-80     	; 0x15ce <GenerateBlinks+0x14>
    161e:	90 91 61 38 	lds	r25, 0x3861	; 0x803861 <HeartCount>
    1622:	49 2f       	mov	r20, r25
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	80 91 79 be 	lds	r24, 0xBE79	; 0x80be79 <__bss_end+0x835c>
    162a:	47 30       	cpi	r20, 0x07	; 7
    162c:	51 05       	cpc	r21, r1
    162e:	d0 f4       	brcc	.+52     	; 0x1664 <GenerateBlinks+0xaa>
    1630:	fa 01       	movw	r30, r20
    1632:	e2 5c       	subi	r30, 0xC2	; 194
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__tablejump2__>
    163a:	e8 2f       	mov	r30, r24
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1642:	86 95       	lsr	r24
    1644:	86 95       	lsr	r24
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <GenerateBlinks+0x98>
    1648:	e8 2f       	mov	r30, r24
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1650:	86 95       	lsr	r24
    1652:	e2 53       	subi	r30, 0x32	; 50
    1654:	f5 4c       	sbci	r31, 0xC5	; 197
    1656:	80 83       	st	Z, r24
    1658:	0a c0       	rjmp	.+20     	; 0x166e <GenerateBlinks+0xb4>
    165a:	e8 2f       	mov	r30, r24
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1662:	f7 cf       	rjmp	.-18     	; 0x1652 <GenerateBlinks+0x98>
    1664:	e8 2f       	mov	r30, r24
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	e2 53       	subi	r30, 0x32	; 50
    166a:	f5 4c       	sbci	r31, 0xC5	; 197
    166c:	10 82       	st	Z, r1
    166e:	90 32       	cpi	r25, 0x20	; 32
    1670:	20 f4       	brcc	.+8      	; 0x167a <GenerateBlinks+0xc0>
    1672:	9f 5f       	subi	r25, 0xFF	; 255
    1674:	90 93 61 38 	sts	0x3861, r25	; 0x803861 <HeartCount>
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GenerateBlinks+0xc4>
    167a:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <HeartCount>
    167e:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <LedCount>
    1682:	9f 5f       	subi	r25, 0xFF	; 255
    1684:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <LedCount>
    1688:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <effect>
    168c:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <effect+0x1>
    1690:	ef 71       	andi	r30, 0x1F	; 31
    1692:	ff 27       	eor	r31, r31
    1694:	e2 31       	cpi	r30, 0x12	; 18
    1696:	f1 05       	cpc	r31, r1
    1698:	08 f0       	brcs	.+2      	; 0x169c <GenerateBlinks+0xe2>
    169a:	eb c0       	rjmp	.+470    	; 0x1872 <GenerateBlinks+0x2b8>
    169c:	eb 5b       	subi	r30, 0xBB	; 187
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__tablejump2__>
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	30 df       	rcall	.-416    	; 0x150a <SetBothEyes>
    16aa:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    16ae:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    16b2:	84 fd       	sbrc	r24, 4
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <GenerateBlinks+0x110>
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	05 df       	rcall	.-502    	; 0x14c6 <WingBar>
    16bc:	e0 91 78 be 	lds	r30, 0xBE78	; 0x80be78 <__bss_end+0x835b>
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	e2 53       	subi	r30, 0x32	; 50
    16c4:	f5 4c       	sbci	r31, 0xC5	; 197
    16c6:	10 82       	st	Z, r1
    16c8:	d4 c0       	rjmp	.+424    	; 0x1872 <GenerateBlinks+0x2b8>
    16ca:	8f e1       	ldi	r24, 0x1F	; 31
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    16d2:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    16d6:	cd c0       	rjmp	.+410    	; 0x1872 <GenerateBlinks+0x2b8>
    16d8:	89 2f       	mov	r24, r25
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	90 fd       	sbrc	r25, 0
    16de:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	12 df       	rcall	.-476    	; 0x150a <SetBothEyes>
    16e6:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    16ea:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    16ee:	84 ff       	sbrs	r24, 4
    16f0:	c0 c0       	rjmp	.+384    	; 0x1872 <GenerateBlinks+0x2b8>
    16f2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	24 df       	rcall	.-440    	; 0x1542 <SetHackerLeds>
    16fa:	bb c0       	rjmp	.+374    	; 0x1872 <GenerateBlinks+0x2b8>
    16fc:	69 2f       	mov	r22, r25
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	93 ff       	sbrs	r25, 3
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GenerateBlinks+0x14e>
    1704:	60 95       	com	r22
    1706:	70 95       	com	r23
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	66 0f       	add	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	9a 95       	dec	r25
    1710:	e1 f7       	brne	.-8      	; 0x170a <GenerateBlinks+0x150>
    1712:	61 5e       	subi	r22, 0xE1	; 225
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	f9 de       	rcall	.-526    	; 0x150a <SetBothEyes>
    1718:	ac c0       	rjmp	.+344    	; 0x1872 <GenerateBlinks+0x2b8>
    171a:	89 2f       	mov	r24, r25
    171c:	83 70       	andi	r24, 0x03	; 3
    171e:	09 f0       	breq	.+2      	; 0x1722 <GenerateBlinks+0x168>
    1720:	a8 c0       	rjmp	.+336    	; 0x1872 <GenerateBlinks+0x2b8>
    1722:	92 ff       	sbrs	r25, 2
    1724:	03 c0       	rjmp	.+6      	; 0x172c <GenerateBlinks+0x172>
    1726:	65 e0       	ldi	r22, 0x05	; 5
    1728:	85 e0       	ldi	r24, 0x05	; 5
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GenerateBlinks+0x176>
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	ca de       	rcall	.-620    	; 0x14c6 <WingBar>
    1732:	9f c0       	rjmp	.+318    	; 0x1872 <GenerateBlinks+0x2b8>
    1734:	95 30       	cpi	r25, 0x05	; 5
    1736:	10 f0       	brcs	.+4      	; 0x173c <GenerateBlinks+0x182>
    1738:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <LedCount>
    173c:	40 91 60 38 	lds	r20, 0x3860	; 0x803860 <LedCount>
    1740:	24 2f       	mov	r18, r20
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	f9 01       	movw	r30, r18
    1746:	e4 58       	subi	r30, 0x84	; 132
    1748:	f1 44       	sbci	r31, 0x41	; 65
    174a:	e5 81       	ldd	r30, Z+5	; 0x05
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	e2 53       	subi	r30, 0x32	; 50
    1750:	f5 4c       	sbci	r31, 0xC5	; 197
    1752:	10 82       	st	Z, r1
    1754:	44 30       	cpi	r20, 0x04	; 4
    1756:	19 f0       	breq	.+6      	; 0x175e <GenerateBlinks+0x1a4>
    1758:	c9 01       	movw	r24, r18
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GenerateBlinks+0x1a8>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	fc 01       	movw	r30, r24
    1764:	e4 58       	subi	r30, 0x84	; 132
    1766:	f1 44       	sbci	r31, 0x41	; 65
    1768:	e5 81       	ldd	r30, Z+5	; 0x05
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1770:	e2 53       	subi	r30, 0x32	; 50
    1772:	f5 4c       	sbci	r31, 0xC5	; 197
    1774:	80 83       	st	Z, r24
    1776:	e0 e8       	ldi	r30, 0x80	; 128
    1778:	fe eb       	ldi	r31, 0xBE	; 190
    177a:	e2 1b       	sub	r30, r18
    177c:	f3 0b       	sbc	r31, r19
    177e:	e0 81       	ld	r30, Z
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	e2 53       	subi	r30, 0x32	; 50
    1784:	f5 4c       	sbci	r31, 0xC5	; 197
    1786:	10 82       	st	Z, r1
    1788:	44 30       	cpi	r20, 0x04	; 4
    178a:	29 f0       	breq	.+10     	; 0x1796 <GenerateBlinks+0x1dc>
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	82 1b       	sub	r24, r18
    1792:	93 0b       	sbc	r25, r19
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GenerateBlinks+0x1e0>
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	e4 58       	subi	r30, 0x84	; 132
    179e:	f1 44       	sbci	r31, 0x41	; 65
    17a0:	e0 81       	ld	r30, Z
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17a8:	e2 53       	subi	r30, 0x32	; 50
    17aa:	f5 4c       	sbci	r31, 0xC5	; 197
    17ac:	80 83       	st	Z, r24
    17ae:	61 c0       	rjmp	.+194    	; 0x1872 <GenerateBlinks+0x2b8>
    17b0:	cc e7       	ldi	r28, 0x7C	; 124
    17b2:	de eb       	ldi	r29, 0xBE	; 190
    17b4:	81 e8       	ldi	r24, 0x81	; 129
    17b6:	e8 2e       	mov	r14, r24
    17b8:	8e eb       	ldi	r24, 0xBE	; 190
    17ba:	f8 2e       	mov	r15, r24
    17bc:	6e 01       	movw	r12, r28
    17be:	0d 81       	ldd	r16, Y+5	; 0x05
    17c0:	10 e0       	ldi	r17, 0x00	; 0
    17c2:	5f dc       	rcall	.-1858   	; 0x1082 <lfsr>
    17c4:	87 ff       	sbrs	r24, 7
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <GenerateBlinks+0x214>
    17c8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <GenerateBlinks+0x216>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	f8 01       	movw	r30, r16
    17d2:	e2 53       	subi	r30, 0x32	; 50
    17d4:	f5 4c       	sbci	r31, 0xC5	; 197
    17d6:	80 83       	st	Z, r24
    17d8:	21 96       	adiw	r28, 0x01	; 1
    17da:	f6 01       	movw	r30, r12
    17dc:	00 81       	ld	r16, Z
    17de:	10 e0       	ldi	r17, 0x00	; 0
    17e0:	50 dc       	rcall	.-1888   	; 0x1082 <lfsr>
    17e2:	87 ff       	sbrs	r24, 7
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <GenerateBlinks+0x232>
    17e6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <GenerateBlinks+0x234>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	f8 01       	movw	r30, r16
    17f0:	e2 53       	subi	r30, 0x32	; 50
    17f2:	f5 4c       	sbci	r31, 0xC5	; 197
    17f4:	80 83       	st	Z, r24
    17f6:	ec 16       	cp	r14, r28
    17f8:	fd 06       	cpc	r15, r29
    17fa:	01 f7       	brne	.-64     	; 0x17bc <GenerateBlinks+0x202>
    17fc:	3a c0       	rjmp	.+116    	; 0x1872 <GenerateBlinks+0x2b8>
    17fe:	90 fd       	sbrc	r25, 0
    1800:	38 c0       	rjmp	.+112    	; 0x1872 <GenerateBlinks+0x2b8>
    1802:	ec e7       	ldi	r30, 0x7C	; 124
    1804:	fe eb       	ldi	r31, 0xBE	; 190
    1806:	80 e8       	ldi	r24, 0x80	; 128
    1808:	9e eb       	ldi	r25, 0xBE	; 190
    180a:	9f 01       	movw	r18, r30
    180c:	a5 81       	ldd	r26, Z+5	; 0x05
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	c6 81       	ldd	r28, Z+6	; 0x06
    1812:	d0 e0       	ldi	r29, 0x00	; 0
    1814:	c2 53       	subi	r28, 0x32	; 50
    1816:	d5 4c       	sbci	r29, 0xC5	; 197
    1818:	48 81       	ld	r20, Y
    181a:	a2 53       	subi	r26, 0x32	; 50
    181c:	b5 4c       	sbci	r27, 0xC5	; 197
    181e:	4c 93       	st	X, r20
    1820:	31 96       	adiw	r30, 0x01	; 1
    1822:	e9 01       	movw	r28, r18
    1824:	a8 81       	ld	r26, Y
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	c0 81       	ld	r28, Z
    182a:	d0 e0       	ldi	r29, 0x00	; 0
    182c:	c2 53       	subi	r28, 0x32	; 50
    182e:	d5 4c       	sbci	r29, 0xC5	; 197
    1830:	28 81       	ld	r18, Y
    1832:	a2 53       	subi	r26, 0x32	; 50
    1834:	b5 4c       	sbci	r27, 0xC5	; 197
    1836:	2c 93       	st	X, r18
    1838:	8e 17       	cp	r24, r30
    183a:	9f 07       	cpc	r25, r31
    183c:	31 f7       	brne	.-52     	; 0x180a <GenerateBlinks+0x250>
    183e:	c0 91 85 be 	lds	r28, 0xBE85	; 0x80be85 <__bss_end+0x8368>
    1842:	d0 e0       	ldi	r29, 0x00	; 0
    1844:	1e dc       	rcall	.-1988   	; 0x1082 <lfsr>
    1846:	81 3e       	cpi	r24, 0xE1	; 225
    1848:	18 f0       	brcs	.+6      	; 0x1850 <GenerateBlinks+0x296>
    184a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <GenerateBlinks+0x298>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	c2 53       	subi	r28, 0x32	; 50
    1854:	d5 4c       	sbci	r29, 0xC5	; 197
    1856:	88 83       	st	Y, r24
    1858:	c0 91 80 be 	lds	r28, 0xBE80	; 0x80be80 <__bss_end+0x8363>
    185c:	d0 e0       	ldi	r29, 0x00	; 0
    185e:	11 dc       	rcall	.-2014   	; 0x1082 <lfsr>
    1860:	81 3e       	cpi	r24, 0xE1	; 225
    1862:	18 f0       	brcs	.+6      	; 0x186a <GenerateBlinks+0x2b0>
    1864:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1868:	01 c0       	rjmp	.+2      	; 0x186c <GenerateBlinks+0x2b2>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	c2 53       	subi	r28, 0x32	; 50
    186e:	d5 4c       	sbci	r29, 0xC5	; 197
    1870:	88 83       	st	Y, r24
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	e8 e0       	ldi	r30, 0x08	; 8
    1878:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__epilogue_restores__+0x14>

0000187c <FadeOut>:
    187c:	e0 91 03 38 	lds	r30, 0x3803	; 0x803803 <auRepAddr>
    1880:	f0 91 04 38 	lds	r31, 0x3804	; 0x803804 <auRepAddr+0x1>
    1884:	90 81       	ld	r25, Z
    1886:	99 23       	and	r25, r25
    1888:	71 f1       	breq	.+92     	; 0x18e6 <FadeOut+0x6a>
    188a:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <fastTicker>
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	80 95       	com	r24
    1892:	87 70       	andi	r24, 0x07	; 7
    1894:	a9 01       	movw	r20, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <FadeOut+0x20>
    1898:	55 95       	asr	r21
    189a:	47 95       	ror	r20
    189c:	8a 95       	dec	r24
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <FadeOut+0x1c>
    18a0:	ca 01       	movw	r24, r20
    18a2:	44 23       	and	r20, r20
    18a4:	01 f1       	breq	.+64     	; 0x18e6 <FadeOut+0x6a>
    18a6:	30 91 c0 3a 	lds	r19, 0x3AC0	; 0x803ac0 <auVolume>
    18aa:	43 17       	cp	r20, r19
    18ac:	30 f4       	brcc	.+12     	; 0x18ba <FadeOut+0x3e>
    18ae:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <auVolume>
    18b2:	98 1b       	sub	r25, r24
    18b4:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <auVolume>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <FadeOut+0x66>
    18ba:	10 92 c0 3a 	sts	0x3AC0, r1	; 0x803ac0 <auVolume>
    18be:	66 23       	and	r22, r22
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <FadeOut+0x66>
    18c2:	8f e3       	ldi	r24, 0x3F	; 63
    18c4:	98 e3       	ldi	r25, 0x38	; 56
    18c6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    18ca:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    18ce:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    18d2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    18d6:	8f 71       	andi	r24, 0x1F	; 31
    18d8:	99 27       	eor	r25, r25
    18da:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    18de:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    18e2:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <fastTicker>
    18e6:	08 95       	ret

000018e8 <GenerateAudio>:

uint8_t GenerateAudio(){
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    static uint8_t start = 0;
    static uint8_t duration;

    //Headphones detected?
    if (auIn < HPLVL) {
    18f0:	80 91 cd 3a 	lds	r24, 0x3ACD	; 0x803acd <auIn>
    18f4:	89 31       	cpi	r24, 0x19	; 25
    18f6:	08 f0       	brcs	.+2      	; 0x18fa <GenerateAudio+0x12>
    18f8:	6c c1       	rjmp	.+728    	; 0x1bd2 <GenerateAudio+0x2ea>

        detHdPh = 1;
    18fa:	c1 e0       	ldi	r28, 0x01	; 1
    18fc:	c0 93 ca 3a 	sts	0x3ACA, r28	; 0x803aca <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1900:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1904:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1908:	88 27       	eor	r24, r24
    190a:	89 2b       	or	r24, r25
    190c:	09 f0       	breq	.+2      	; 0x1910 <GenerateAudio+0x28>
    190e:	17 c1       	rjmp	.+558    	; 0x1b3e <GenerateAudio+0x256>
        
            //Silence, I kill u
            if ((effect&0xE0)==0){
    1910:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1914:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1918:	80 7e       	andi	r24, 0xE0	; 224
    191a:	99 27       	eor	r25, r25
    191c:	89 2b       	or	r24, r25
    191e:	49 f4       	brne	.+18     	; 0x1932 <GenerateAudio+0x4a>
                auRepAddr = &zero;
    1920:	8f e3       	ldi	r24, 0x3F	; 63
    1922:	98 e3       	ldi	r25, 0x38	; 56
    1924:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1928:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                start = 0;
    192c:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <start.4056>
    1930:	52 c1       	rjmp	.+676    	; 0x1bd6 <GenerateAudio+0x2ee>
            }

            //Bad answer (buzzer, also used in other games)
            else if ((effect&0xE0)==32){
    1932:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1936:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    193a:	80 7e       	andi	r24, 0xE0	; 224
    193c:	99 27       	eor	r25, r25
    193e:	80 97       	sbiw	r24, 0x20	; 32
    1940:	61 f5       	brne	.+88     	; 0x199a <GenerateAudio+0xb2>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	80 e8       	ldi	r24, 0x80	; 128
    194a:	e8 db       	rcall	.-2096   	; 0x111c <floatAround>
    194c:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <auBuffer.4058+0x2>

                if (start == 0) {
    1950:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <start.4056>
    1954:	81 11       	cpse	r24, r1
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <GenerateAudio+0x98>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	91 e2       	ldi	r25, 0x21	; 33
    195c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1960:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1964:	8a e1       	ldi	r24, 0x1A	; 26
    1966:	98 e3       	ldi	r25, 0x38	; 56
    1968:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    196c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
            else if ((effect&0xE0)==32){
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2100, 0xff);
    1976:	c0 93 5e 38 	sts	0x385E, r28	; 0x80385e <start.4056>
                    duration = 8;
    197a:	88 e0       	ldi	r24, 0x08	; 8
    197c:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4057>
                }

                if (duration == 0) FadeOut(4, start);
    1980:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4057>
    1984:	81 11       	cpse	r24, r1
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <GenerateAudio+0xa8>
    1988:	60 91 5e 38 	lds	r22, 0x385E	; 0x80385e <start.4056>
    198c:	84 e0       	ldi	r24, 0x04	; 4
    198e:	76 df       	rcall	.-276    	; 0x187c <FadeOut>
                floatSpeed(1, 0x2000, 0x2200);
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	52 e2       	ldi	r21, 0x22	; 34
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e2       	ldi	r23, 0x20	; 32
    1998:	19 c1       	rjmp	.+562    	; 0x1bcc <GenerateAudio+0x2e4>
            }

            //Good (bell)
            else if ((effect&0xE0)==64){
    199a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    199e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19a2:	80 7e       	andi	r24, 0xE0	; 224
    19a4:	99 27       	eor	r25, r25
    19a6:	80 34       	cpi	r24, 0x40	; 64
    19a8:	91 05       	cpc	r25, r1
    19aa:	c1 f5       	brne	.+112    	; 0x1a1c <GenerateAudio+0x134>
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
    19ac:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <start.4056>
    19b0:	81 11       	cpse	r24, r1
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <GenerateAudio+0xf4>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	9a e0       	ldi	r25, 0x0A	; 10
    19b8:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19bc:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    19c0:	87 e1       	ldi	r24, 0x17	; 23
    19c2:	98 e3       	ldi	r25, 0x38	; 56
    19c4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19c8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
            //Good (bell)
            else if ((effect&0xE0)==64){
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x0a00, 0xff);
    19d2:	c0 93 5e 38 	sts	0x385E, r28	; 0x80385e <start.4056>
                    duration = 6;
    19d6:	86 e0       	ldi	r24, 0x06	; 6
    19d8:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4057>
                }

                if (duration == 0) FadeOut(4, start);
    19dc:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4057>
    19e0:	81 11       	cpse	r24, r1
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <GenerateAudio+0x104>
    19e4:	60 91 5e 38 	lds	r22, 0x385E	; 0x80385e <start.4056>
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	48 df       	rcall	.-368    	; 0x187c <FadeOut>
                if (buttonMark){
    19ec:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    19f0:	88 23       	and	r24, r24
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <GenerateAudio+0x10e>
    19f4:	f0 c0       	rjmp	.+480    	; 0x1bd6 <GenerateAudio+0x2ee>
                    TCB1_CCMP -= 0x080;                    
    19f6:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19fa:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    19fe:	80 58       	subi	r24, 0x80	; 128
    1a00:	91 09       	sbc	r25, r1
    1a02:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a06:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume == 0) effect = 0;
    1a0a:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1a0e:	81 11       	cpse	r24, r1
    1a10:	e2 c0       	rjmp	.+452    	; 0x1bd6 <GenerateAudio+0x2ee>
    1a12:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1a16:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    1a1a:	dd c0       	rjmp	.+442    	; 0x1bd6 <GenerateAudio+0x2ee>
                }
            }

            //Rain storm with whistling wind
            else if ((effect&0xE0)==96){
    1a1c:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a20:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a24:	80 7e       	andi	r24, 0xE0	; 224
    1a26:	99 27       	eor	r25, r25
    1a28:	80 36       	cpi	r24, 0x60	; 96
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	b9 f5       	brne	.+110    	; 0x1a9c <GenerateAudio+0x1b4>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1a2e:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <auBuffer.4060+0x6>
                auRepAddr = &auBuffer[0];
    1a32:	86 e5       	ldi	r24, 0x56	; 86
    1a34:	98 e3       	ldi	r25, 0x38	; 56
    1a36:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a3a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1a3e:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a40:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1a42:	c3 30       	cpi	r28, 0x03	; 3
    1a44:	39 f0       	breq	.+14     	; 0x1a54 <GenerateAudio+0x16c>
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	65 e0       	ldi	r22, 0x05	; 5
    1a4c:	80 e8       	ldi	r24, 0x80	; 128
    1a4e:	66 db       	rcall	.-2356   	; 0x111c <floatAround>
    1a50:	f8 01       	movw	r30, r16
    1a52:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a54:	cf 5f       	subi	r28, 0xFF	; 255
    1a56:	0f 5f       	subi	r16, 0xFF	; 255
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	c6 30       	cpi	r28, 0x06	; 6
    1a5c:	91 f7       	brne	.-28     	; 0x1a42 <GenerateAudio+0x15a>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1a5e:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1a62:	88 23       	and	r24, r24
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <GenerateAudio+0x180>
    1a66:	b7 c0       	rjmp	.+366    	; 0x1bd6 <GenerateAudio+0x2ee>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	54 e0       	ldi	r21, 0x04	; 4
    1a6c:	60 e8       	ldi	r22, 0x80	; 128
    1a6e:	72 e0       	ldi	r23, 0x02	; 2
    1a70:	85 e0       	ldi	r24, 0x05	; 5
    1a72:	26 db       	rcall	.-2484   	; 0x10c0 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1a74:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1a78:	20 ea       	ldi	r18, 0xA0	; 160
    1a7a:	40 e1       	ldi	r20, 0x10	; 16
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	4e db       	rcall	.-2404   	; 0x111c <floatAround>
    1a80:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1a84:	20 e9       	ldi	r18, 0x90	; 144
    1a86:	40 e7       	ldi	r20, 0x70	; 112
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <auBuffer.4060>
    1a8e:	46 db       	rcall	.-2420   	; 0x111c <floatAround>
    1a90:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <auBuffer.4060>
    1a94:	80 95       	com	r24
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1a96:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <auBuffer.4060+0x3>
    1a9a:	9d c0       	rjmp	.+314    	; 0x1bd6 <GenerateAudio+0x2ee>
    1a9c:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                }
            }

            //Footsteps
            else if ((effect&0xE0)==128){
    1aa0:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1aa4:	80 7e       	andi	r24, 0xE0	; 224
    1aa6:	99 27       	eor	r25, r25
    1aa8:	80 38       	cpi	r24, 0x80	; 128
    1aaa:	91 05       	cpc	r25, r1
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <GenerateAudio+0x1c8>
    1aae:	93 c0       	rjmp	.+294    	; 0x1bd6 <GenerateAudio+0x2ee>
    1ab0:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>

            }

            //Bleeps
            else if ((effect&0xE0)==160){
    1ab4:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1ab8:	80 7e       	andi	r24, 0xE0	; 224
    1aba:	99 27       	eor	r25, r25
    1abc:	80 3a       	cpi	r24, 0xA0	; 160
    1abe:	91 05       	cpc	r25, r1
    1ac0:	c9 f5       	brne	.+114    	; 0x1b34 <GenerateAudio+0x24c>
    1ac2:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <start.4056>
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                if (start == 0) {
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <GenerateAudio+0x20a>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1acc:	90 e2       	ldi	r25, 0x20	; 32
    1ace:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ad2:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1ad6:	81 e1       	ldi	r24, 0x11	; 17
    if (repeat) auRepAddr = auBuffer;
    1ad8:	98 e3       	ldi	r25, 0x38	; 56
    1ada:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ade:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1ae4:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
    1ae8:	c0 93 5e 38 	sts	0x385E, r28	; 0x80385e <start.4056>
            //Bleeps
            else if ((effect&0xE0)==160){
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2000, 0xff);
    1aec:	8a e0       	ldi	r24, 0x0A	; 10
                    duration = 10;
    1aee:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4057>
    1af2:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4057>
                }

                if (duration == 0) FadeOut(2, start);
    1af6:	81 11       	cpse	r24, r1
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <GenerateAudio+0x21a>
    1afa:	60 91 5e 38 	lds	r22, 0x385E	; 0x80385e <start.4056>
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	bd de       	rcall	.-646    	; 0x187c <FadeOut>
                if (buttonMark){
    1b02:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1b06:	88 23       	and	r24, r24
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <GenerateAudio+0x224>
    1b0a:	65 c0       	rjmp	.+202    	; 0x1bd6 <GenerateAudio+0x2ee>
                    TCB1_CCMP = 0x0400 + (lfsr()<<5);
    1b0c:	ba da       	rcall	.-2700   	; 0x1082 <lfsr>
    1b0e:	f0 e2       	ldi	r31, 0x20	; 32
    1b10:	8f 9f       	mul	r24, r31
    1b12:	c0 01       	movw	r24, r0
    1b14:	11 24       	eor	r1, r1
    1b16:	9c 5f       	subi	r25, 0xFC	; 252
    1b18:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b1c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1b20:	c1 e1       	ldi	r28, 0x11	; 17
    1b22:	d8 e3       	ldi	r29, 0x38	; 56
                    for(uint8_t x=0; x<6; ++x){
                        auBuffer[x]=lfsr()|0x01;
    1b24:	ae da       	rcall	.-2724   	; 0x1082 <lfsr>
    1b26:	81 60       	ori	r24, 0x01	; 1
    1b28:	89 93       	st	Y+, r24
    1b2a:	28 e3       	ldi	r18, 0x38	; 56
                }

                if (duration == 0) FadeOut(2, start);
                if (buttonMark){
                    TCB1_CCMP = 0x0400 + (lfsr()<<5);
                    for(uint8_t x=0; x<6; ++x){
    1b2c:	c7 31       	cpi	r28, 0x17	; 23
    1b2e:	d2 07       	cpc	r29, r18
    1b30:	c9 f7       	brne	.-14     	; 0x1b24 <GenerateAudio+0x23c>
    1b32:	51 c0       	rjmp	.+162    	; 0x1bd6 <GenerateAudio+0x2ee>
    1b34:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                    }
                }
            }

            //
            else if ((effect&0xE0)==192){
    1b38:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b3c:	4c c0       	rjmp	.+152    	; 0x1bd6 <GenerateAudio+0x2ee>
    1b3e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1b42:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b46:	88 27       	eor	r24, r24
    1b48:	81 15       	cp	r24, r1
    1b4a:	91 40       	sbci	r25, 0x01	; 1
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <GenerateAudio+0x268>
    1b4e:	43 c0       	rjmp	.+134    	; 0x1bd6 <GenerateAudio+0x2ee>
    1b50:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
            if ((effect&0xE0) <= 0x90) {
    1b54:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b58:	80 7e       	andi	r24, 0xE0	; 224
    1b5a:	99 27       	eor	r25, r25
    1b5c:	81 39       	cpi	r24, 0x91	; 145
    1b5e:	91 05       	cpc	r25, r1
    1b60:	d0 f5       	brcc	.+116    	; 0x1bd6 <GenerateAudio+0x2ee>
    1b62:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <start.4056>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
    1b66:	81 11       	cpse	r24, r1
    1b68:	22 c0       	rjmp	.+68     	; 0x1bae <GenerateAudio+0x2c6>
    1b6a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                    freq = ((effect&0xE0)+1)<<6;
    1b6e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b72:	80 7e       	andi	r24, 0xE0	; 224
    1b74:	99 27       	eor	r25, r25
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	26 e0       	ldi	r18, 0x06	; 6
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	2a 95       	dec	r18
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <GenerateAudio+0x292>
    1b82:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <freq.4071>
    1b86:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <freq.4071+0x1>
    1b8a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1b8e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1b92:	8e e0       	ldi	r24, 0x0E	; 14
    if (repeat) auRepAddr = auBuffer;
    1b94:	98 e3       	ldi	r25, 0x38	; 56
    1b96:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b9a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1ba0:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
    1ba4:	c0 93 5e 38 	sts	0x385E, r28	; 0x80385e <start.4056>
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
                    freq = ((effect&0xE0)+1)<<6;
                    start = Play(&auBuffer[0], 1, freq, 0xff);
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
                    duration = 3;
    1baa:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4057>
                }

                if (duration == 0) FadeOut(7, start);
    1bae:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4057>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	04 c0       	rjmp	.+8      	; 0x1bbe <GenerateAudio+0x2d6>
    1bb6:	60 91 5e 38 	lds	r22, 0x385E	; 0x80385e <start.4056>
    1bba:	87 e0       	ldi	r24, 0x07	; 7
    1bbc:	5f de       	rcall	.-834    	; 0x187c <FadeOut>
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1bbe:	60 91 54 38 	lds	r22, 0x3854	; 0x803854 <freq.4071>
    1bc2:	70 91 55 38 	lds	r23, 0x3855	; 0x803855 <freq.4071+0x1>
    1bc6:	ab 01       	movw	r20, r22
    1bc8:	5d 5f       	subi	r21, 0xFD	; 253
    1bca:	7e 5f       	subi	r23, 0xFE	; 254
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	78 da       	rcall	.-2832   	; 0x10c0 <floatSpeed>
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <GenerateAudio+0x2ee>
    1bd2:	10 92 ca 3a 	sts	0x3ACA, r1	; 0x803aca <detHdPh>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);
            }
        }
    } else {
        detHdPh = 0;
    1bd6:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    }

    if (buttonMark && duration) --duration;
    1bda:	88 23       	and	r24, r24
    1bdc:	39 f0       	breq	.+14     	; 0x1bec <GenerateAudio+0x304>
    1bde:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4057>
    1be2:	88 23       	and	r24, r24
    1be4:	19 f0       	breq	.+6      	; 0x1bec <GenerateAudio+0x304>
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4057>
    1bec:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>

    return buttonMark;
    1bf0:	df 91       	pop	r29
}
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <getClock>:
    1bfa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1bfe:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1c02:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <minuteMark>
    1c06:	89 2f       	mov	r24, r25
    1c08:	99 27       	eor	r25, r25
    1c0a:	86 95       	lsr	r24
}
    1c0c:	3c e3       	ldi	r19, 0x3C	; 60
    1c0e:	23 9f       	mul	r18, r19
    1c10:	80 0d       	add	r24, r0
    1c12:	91 1d       	adc	r25, r1
    1c14:	11 24       	eor	r1, r1
    1c16:	08 95       	ret

00001c18 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	8c 01       	movw	r16, r24
    1c22:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c24:	ea df       	rcall	.-44     	; 0x1bfa <getClock>
    1c26:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1c28:	80 17       	cp	r24, r16
    1c2a:	91 07       	cpc	r25, r17
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <idleTimeout+0x18>
        curClock += 256 * 60;
    1c2e:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1c30:	c0 0f       	add	r28, r16
    1c32:	d1 1f       	adc	r29, r17
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	c2 17       	cp	r28, r18
    1c38:	d3 07       	cpc	r29, r19
    1c3a:	08 f0       	brcs	.+2      	; 0x1c3e <idleTimeout+0x26>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
}
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <SelfTest>:

uint8_t SelfTest(){
    1c48:	a4 e0       	ldi	r26, 0x04	; 4
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ea e2       	ldi	r30, 0x2A	; 42
    1c4e:	fe e0       	ldi	r31, 0x0E	; 14
    1c50:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <__prologue_saves__+0x12>
    uint8_t tstVal[4] = {0, 0, 0, 0};
    1c54:	19 82       	std	Y+1, r1	; 0x01
    1c56:	1a 82       	std	Y+2, r1	; 0x02
    1c58:	1b 82       	std	Y+3, r1	; 0x03
    1c5a:	1c 82       	std	Y+4, r1	; 0x04

    while (adcTemp == 0) ;
    1c5c:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <adcTemp>
    1c60:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    1c64:	89 2b       	or	r24, r25
    1c66:	d1 f3       	breq	.-12     	; 0x1c5c <SelfTest+0x14>
    EERead(BOOTCHK, &tstVal[0], 4);
    1c68:	44 e0       	ldi	r20, 0x04	; 4
    1c6a:	be 01       	movw	r22, r28
    1c6c:	6f 5f       	subi	r22, 0xFF	; 255
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	84 e1       	ldi	r24, 0x14	; 20
    1c72:	25 d9       	rcall	.-3510   	; 0xebe <EERead>
    //already checked and ok, skip test, can be reset by using "ikillu" command.
    if (tstVal[0] == 0xA5) {
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	85 3a       	cpi	r24, 0xA5	; 165
    1c78:	a1 f4       	brne	.+40     	; 0x1ca2 <SelfTest+0x5a>
        calTemp =  tstVal[1]<<8;
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	98 2f       	mov	r25, r24
    1c80:	88 27       	eor	r24, r24
    1c82:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <calTemp>
    1c86:	90 93 cc 3a 	sts	0x3ACC, r25	; 0x803acc <calTemp+0x1>
        calTemp |= tstVal[2];
    1c8a:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <calTemp>
    1c8e:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <calTemp+0x1>
    1c92:	2b 81       	ldd	r18, Y+3	; 0x03
    1c94:	82 2b       	or	r24, r18
    1c96:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <calTemp>
    1c9a:	90 93 cc 3a 	sts	0x3ACC, r25	; 0x803acc <calTemp+0x1>
        return 0; 
    1c9e:	b1 2c       	mov	r11, r1
    1ca0:	7c c0       	rjmp	.+248    	; 0x1d9a <SelfTest+0x152>
    } 

    //Old data in EEPROM, wipe!
    if (tstVal[3] != 0xff) return 1;
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <SelfTest+0x62>
    1ca8:	76 c0       	rjmp	.+236    	; 0x1d96 <SelfTest+0x14e>

    //Red BADGER, CAT, EYEs and SCARAB LED on 100% = error
    iLED[BADGER] = 255;
    1caa:	00 91 79 be 	lds	r16, 0xBE79	; 0x80be79 <__bss_end+0x835c>
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	02 53       	subi	r16, 0x32	; 50
    1cb2:	15 4c       	sbci	r17, 0xC5	; 197
    1cb4:	d8 01       	movw	r26, r16
    1cb6:	8c 93       	st	X, r24
    iLED[CAT] = 255;
    1cb8:	e0 91 78 be 	lds	r30, 0xBE78	; 0x80be78 <__bss_end+0x835b>
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	e2 53       	subi	r30, 0x32	; 50
    1cc0:	f5 4c       	sbci	r31, 0xC5	; 197
    1cc2:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 255;    
    1cc4:	c0 90 86 be 	lds	r12, 0xBE86	; 0x80be86 <__bss_end+0x8369>
    1cc8:	2c 2d       	mov	r18, r12
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	a9 01       	movw	r20, r18
    1cce:	42 53       	subi	r20, 0x32	; 50
    1cd0:	55 4c       	sbci	r21, 0xC5	; 197
    1cd2:	6a 01       	movw	r12, r20
    1cd4:	da 01       	movw	r26, r20
    1cd6:	8c 93       	st	X, r24
    iLED[EYE[R][L]] = 255;
    1cd8:	e0 90 87 be 	lds	r14, 0xBE87	; 0x80be87 <__bss_end+0x836a>
    1cdc:	2e 2d       	mov	r18, r14
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	42 53       	subi	r20, 0x32	; 50
    1ce4:	55 4c       	sbci	r21, 0xC5	; 197
    1ce6:	7a 01       	movw	r14, r20
    1ce8:	da 01       	movw	r26, r20
    1cea:	8c 93       	st	X, r24
    iLED[SCARAB[R]] = 255;
    1cec:	a0 91 7a be 	lds	r26, 0xBE7A	; 0x80be7a <__bss_end+0x835d>
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	a2 53       	subi	r26, 0x32	; 50
    1cf4:	b5 4c       	sbci	r27, 0xC5	; 197
    1cf6:	8c 93       	st	X, r24

    //Light sensor OK, scarab off
    tstVal[0] = adcPhot&0xff;
    1cf8:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    1cfc:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    1d00:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1d02:	99 27       	eor	r25, r25
    1d04:	20 91 c7 3a 	lds	r18, 0x3AC7	; 0x803ac7 <adcPhot>
    1d08:	30 91 c8 3a 	lds	r19, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    1d0c:	33 27       	eor	r19, r19
    1d0e:	28 17       	cp	r18, r24
    1d10:	39 07       	cpc	r19, r25
    1d12:	c1 f3       	breq	.-16     	; 0x1d04 <SelfTest+0xbc>
    iLED[SCARAB[R]] = 0x00;
    1d14:	1c 92       	st	X, r1

    //Buttons OK (none pressed / shorted), cat forehead off
    while ((adcBtns>>4) < 200) ;
    1d16:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <adcBtns>
    1d1a:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <adcBtns+0x1>
    1d1e:	80 38       	cpi	r24, 0x80	; 128
    1d20:	9c 40       	sbci	r25, 0x0C	; 12
    1d22:	c8 f3       	brcs	.-14     	; 0x1d16 <SelfTest+0xce>
    iLED[CAT] = 0x00;
    1d24:	10 82       	st	Z, r1

    //Right ROM?
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    1d26:	9e 01       	movw	r18, r28
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	8c ec       	ldi	r24, 0xCC	; 204
    1d32:	9c e3       	ldi	r25, 0x3C	; 60
    1d34:	16 d9       	rcall	.-3540   	; 0xf62 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 33       	cpi	r24, 0x3F	; 63
    1d3a:	49 f4       	brne	.+18     	; 0x1d4e <SelfTest+0x106>
    1d3c:	ba 80       	ldd	r11, Y+2	; 0x02
    1d3e:	b1 10       	cpse	r11, r1
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <SelfTest+0x106>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	80 3c       	cpi	r24, 0xC0	; 192
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <SelfTest+0x106>
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	84 31       	cpi	r24, 0x14	; 20
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <SelfTest+0x108>
        while(1);
    }
    
    SelectAuIn();
    1d4e:	ff cf       	rjmp	.-2      	; 0x1d4e <SelfTest+0x106>
    1d50:	5b d9       	rcall	.-3402   	; 0x1008 <SelectAuIn>
    //Audio in/out OK, eyes off
    while ((auIn < 0x78) || (auIn > 0x88)) ;
    1d52:	80 91 cd 3a 	lds	r24, 0x3ACD	; 0x803acd <auIn>
    1d56:	88 37       	cpi	r24, 0x78	; 120
    1d58:	e0 f3       	brcs	.-8      	; 0x1d52 <SelfTest+0x10a>
    1d5a:	80 91 cd 3a 	lds	r24, 0x3ACD	; 0x803acd <auIn>
    1d5e:	89 38       	cpi	r24, 0x89	; 137
    1d60:	c0 f7       	brcc	.-16     	; 0x1d52 <SelfTest+0x10a>
    iLED[EYE[R][R]] = 0x00;
    1d62:	f6 01       	movw	r30, r12
    1d64:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0x00;
    1d66:	d7 01       	movw	r26, r14
    1d68:	1c 92       	st	X, r1
    
    //All ok!
    tstVal[0] = 0xA5;
    1d6a:	85 ea       	ldi	r24, 0xA5	; 165
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    tstVal[1] = adcTemp>>8;
    1d6e:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <adcTemp>
    1d72:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    tstVal[2] = adcTemp&0xff;
    1d78:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <adcTemp>
    1d7c:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <adcTemp+0x1>
    1d80:	8b 83       	std	Y+3, r24	; 0x03

    EEWrite(BOOTCHK, &tstVal[0], 3);
    1d82:	43 e0       	ldi	r20, 0x03	; 3
    1d84:	be 01       	movw	r22, r28
    1d86:	6f 5f       	subi	r22, 0xFF	; 255
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	84 e1       	ldi	r24, 0x14	; 20
    1d8c:	a8 d8       	rcall	.-3760   	; 0xede <EEWrite>
    iLED[BADGER] = 0x08;
    1d8e:	88 e0       	ldi	r24, 0x08	; 8
    1d90:	f8 01       	movw	r30, r16
    1d92:	80 83       	st	Z, r24
    return 0;
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <SelfTest+0x152>
        calTemp |= tstVal[2];
        return 0; 
    } 

    //Old data in EEPROM, wipe!
    if (tstVal[3] != 0xff) return 1;
    1d96:	bb 24       	eor	r11, r11
    1d98:	b3 94       	inc	r11
    tstVal[2] = adcTemp&0xff;

    EEWrite(BOOTCHK, &tstVal[0], 3);
    iLED[BADGER] = 0x08;
    return 0;
}
    1d9a:	8b 2d       	mov	r24, r11
    1d9c:	24 96       	adiw	r28, 0x04	; 4
    1d9e:	e9 e0       	ldi	r30, 0x09	; 9
    1da0:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__epilogue_restores__+0x12>

00001da4 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1da4:	cf 93       	push	r28
    1da6:	c8 2f       	mov	r28, r24
    WingBar(0,0);
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	8c db       	rcall	.-2280   	; 0x14c6 <WingBar>
    if (val==0)
    1dae:	cc 23       	and	r28, r28
    1db0:	51 f1       	breq	.+84     	; 0x1e06 <simonLed+0x62>
        return;

    if ((effect & 0xffe0)==0)
    1db2:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1db6:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1dba:	80 7e       	andi	r24, 0xE0	; 224
    1dbc:	89 2b       	or	r24, r25
    1dbe:	51 f4       	brne	.+20     	; 0x1dd4 <simonLed+0x30>
        effect = 0x13f + ((val-1)<<5);
    1dc0:	20 e2       	ldi	r18, 0x20	; 32
    1dc2:	c2 9f       	mul	r28, r18
    1dc4:	c0 01       	movw	r24, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	81 5e       	subi	r24, 0xE1	; 225
    1dca:	9e 4f       	sbci	r25, 0xFE	; 254
    1dcc:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1dd0:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>

    if (val == 1) {                     //
    1dd4:	c1 30       	cpi	r28, 0x01	; 1
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <simonLed+0x3a>
        iLED[WING[L][4]] = dimValue;
    1dd8:	e0 91 85 be 	lds	r30, 0xBE85	; 0x80be85 <__bss_end+0x8368>
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <simonLed+0x56>
    } else if (val == 2) {              // I
    1dde:	c2 30       	cpi	r28, 0x02	; 2
    1de0:	19 f4       	brne	.+6      	; 0x1de8 <simonLed+0x44>
        iLED[WING[R][4]] = dimValue;
    1de2:	e0 91 80 be 	lds	r30, 0xBE80	; 0x80be80 <__bss_end+0x8363>
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <simonLed+0x56>
    } else if (val == 3) {              // II
    1de8:	c3 30       	cpi	r28, 0x03	; 3
    1dea:	19 f4       	brne	.+6      	; 0x1df2 <simonLed+0x4e>
        iLED[WING[L][2]] = dimValue;
    1dec:	e0 91 83 be 	lds	r30, 0xBE83	; 0x80be83 <__bss_end+0x8366>
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <simonLed+0x56>
    } else if (val == 4) {              // III
    1df2:	c4 30       	cpi	r28, 0x04	; 4
    1df4:	41 f4       	brne	.+16     	; 0x1e06 <simonLed+0x62>
        iLED[WING[R][2]] = dimValue;
    1df6:	e0 91 7e be 	lds	r30, 0xBE7E	; 0x80be7e <__bss_end+0x8361>
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e00:	e2 53       	subi	r30, 0x32	; 50
    1e02:	f5 4c       	sbci	r31, 0xC5	; 197
    1e04:	80 83       	st	Z, r24
    }
}
    1e06:	cf 91       	pop	r28
    1e08:	08 95       	ret

00001e0a <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1e12:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1e16:	88 23       	and	r24, r24
    1e18:	21 f0       	breq	.+8      	; 0x1e22 <BastetDictates+0x18>
    1e1a:	82 30       	cpi	r24, 0x02	; 2
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <BastetDictates+0x16>
    1e1e:	6b c1       	rjmp	.+726    	; 0x20f6 <BastetDictates+0x2ec>
    1e20:	0a c0       	rjmp	.+20     	; 0x1e36 <BastetDictates+0x2c>
        return 0;
    }
    */

    if (TEXT == gameNow)
        if (buttonState!=0xff) {
    1e22:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1e26:	8f 3f       	cpi	r24, 0xFF	; 255
    1e28:	31 f0       	breq	.+12     	; 0x1e36 <BastetDictates+0x2c>
            WingBar(0,0);
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	4b db       	rcall	.-2410   	; 0x14c6 <WingBar>
            gameNow = BASTET;
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
        }

    if (BASTET_BOOT == simonGameState) {
    1e36:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <simonGameState>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <BastetDictates+0x4e>
    1e3e:	ca e6       	ldi	r28, 0x6A	; 106
    1e40:	d8 e3       	ldi	r29, 0x38	; 56
    1e42:	06 e7       	ldi	r16, 0x76	; 118
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1e44:	18 e3       	ldi	r17, 0x38	; 56
    1e46:	1d d9       	rcall	.-3526   	; 0x1082 <lfsr>
    1e48:	83 70       	andi	r24, 0x03	; 3
    1e4a:	89 93       	st	Y+, r24
            WingBar(0,0);
            gameNow = BASTET;
        }

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1e4c:	0c 17       	cp	r16, r28
    1e4e:	1d 07       	cpc	r17, r29
    1e50:	d1 f7       	brne	.-12     	; 0x1e46 <BastetDictates+0x3c>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1e58:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <simonGameState>
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 f4       	brne	.+36     	; 0x1e84 <BastetDictates+0x7a>
    1e60:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1e64:	82 30       	cpi	r24, 0x02	; 2
    1e66:	71 f4       	brne	.+28     	; 0x1e84 <BastetDictates+0x7a>
        simonGameState = BASTET_GAME_INTRO;
    1e68:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
        simonPos = 0;
    1e6c:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonPos>
        simonInputPos = 0;
    1e70:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonInputPos>
        simonTimer = 0;
    1e74:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
        simonCounter = 0;
    1e78:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
        effect = 0;
    1e7c:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1e80:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1e84:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <simonGameState>
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	51 f5       	brne	.+84     	; 0x1ee0 <BastetDictates+0xd6>
        if (simonTimer > 3) {   // ±? seconds
    1e8c:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	38 f0       	brcs	.+14     	; 0x1ea2 <BastetDictates+0x98>
            simonCounter++;
    1e94:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonCounter>
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonCounter>
            simonTimer = 0;
    1e9e:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
        }
        if (simonCounter > 5) {
    1ea2:	e0 91 65 38 	lds	r30, 0x3865	; 0x803865 <simonCounter>
    1ea6:	e6 30       	cpi	r30, 0x06	; 6
    1ea8:	58 f0       	brcs	.+22     	; 0x1ec0 <BastetDictates+0xb6>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1eaa:	83 e0       	ldi	r24, 0x03	; 3
    1eac:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
            simonTimer = 0;
    1eb0:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
            simonCounter = 0;
    1eb4:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
            SetHackerLeds(0,0);
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	42 db       	rcall	.-2428   	; 0x1542 <SetHackerLeds>
            return 0;
    1ebe:	1b c1       	rjmp	.+566    	; 0x20f6 <BastetDictates+0x2ec>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	e6 57       	subi	r30, 0x76	; 118
    1ec4:	f1 44       	sbci	r31, 0x41	; 65
    1ec6:	a0 81       	ld	r26, Z
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ece:	a2 53       	subi	r26, 0x32	; 50
    1ed0:	b5 4c       	sbci	r27, 0xC5	; 197
    1ed2:	8c 93       	st	X, r24
        iLED[HCKR[G][simonCounter]] = 0;
    1ed4:	e6 81       	ldd	r30, Z+6	; 0x06
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	e2 53       	subi	r30, 0x32	; 50
    1eda:	f5 4c       	sbci	r31, 0xC5	; 197
    1edc:	10 82       	st	Z, r1
    1ede:	2a c0       	rjmp	.+84     	; 0x1f34 <BastetDictates+0x12a>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	41 f5       	brne	.+80     	; 0x1f34 <BastetDictates+0x12a>
        if (simonTimer > 8) {   // ±.6 second
    1ee4:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    1ee8:	89 30       	cpi	r24, 0x09	; 9
    1eea:	38 f0       	brcs	.+14     	; 0x1efa <BastetDictates+0xf0>
            simonCounter++;
    1eec:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonCounter>
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonCounter>
            simonTimer = 0;
    1ef6:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1efa:	e0 91 65 38 	lds	r30, 0x3865	; 0x803865 <simonCounter>
    1efe:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonPos>
    1f02:	8e 17       	cp	r24, r30
    1f04:	40 f4       	brcc	.+16     	; 0x1f16 <BastetDictates+0x10c>
            simonInputPos = 0;
    1f06:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1f0a:	85 e0       	ldi	r24, 0x05	; 5
    1f0c:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
            simonLed(0);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	48 df       	rcall	.-368    	; 0x1da4 <simonLed>
    1f14:	98 c0       	rjmp	.+304    	; 0x2046 <BastetDictates+0x23c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer > 7 ) {
    1f16:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    1f1a:	88 30       	cpi	r24, 0x08	; 8
    1f1c:	10 f0       	brcs	.+4      	; 0x1f22 <BastetDictates+0x118>
            simonLed(0);
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	08 c0       	rjmp	.+16     	; 0x1f32 <BastetDictates+0x128>
        } else if (simonTimer > 5) {
    1f22:	86 30       	cpi	r24, 0x06	; 6
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <BastetDictates+0x11e>
    1f26:	92 c0       	rjmp	.+292    	; 0x204c <BastetDictates+0x242>
            simonLed(simonState[simonCounter] + 1);
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	e6 59       	subi	r30, 0x96	; 150
    1f2c:	f7 4c       	sbci	r31, 0xC7	; 199
    1f2e:	80 81       	ld	r24, Z
    1f30:	8f 5f       	subi	r24, 0xFF	; 255
    1f32:	38 df       	rcall	.-400    	; 0x1da4 <simonLed>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1f34:	c0 91 64 38 	lds	r28, 0x3864	; 0x803864 <simonGameState>
    1f38:	c5 30       	cpi	r28, 0x05	; 5
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <BastetDictates+0x134>
    1f3c:	87 c0       	rjmp	.+270    	; 0x204c <BastetDictates+0x242>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1f3e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1f42:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1f46:	98 17       	cp	r25, r24
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <BastetDictates+0x142>
    1f4a:	72 c0       	rjmp	.+228    	; 0x2030 <BastetDictates+0x226>
            if (simonWait == 0 && buttonState < 4) {
    1f4c:	90 91 66 38 	lds	r25, 0x3866	; 0x803866 <simonWait>
    1f50:	91 11       	cpse	r25, r1
    1f52:	70 c0       	rjmp	.+224    	; 0x2034 <BastetDictates+0x22a>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <BastetDictates+0x150>
    1f58:	6d c0       	rjmp	.+218    	; 0x2034 <BastetDictates+0x22a>
                simonWait = 1;
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	90 93 66 38 	sts	0x3866, r25	; 0x803866 <simonWait>
                simonTimer = 0;
    1f60:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
                simonLed(buttonState+1);
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	1e df       	rcall	.-452    	; 0x1da4 <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    1f6e:	c0 93 34 38 	sts	0x3834, r28	; 0x803834 <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    1f72:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonInputPos>
    1f76:	e8 2f       	mov	r30, r24
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	e6 59       	subi	r30, 0x96	; 150
    1f7c:	f7 4c       	sbci	r31, 0xC7	; 199
    1f7e:	20 81       	ld	r18, Z
    1f80:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1f84:	29 13       	cpse	r18, r25
    1f86:	1d c0       	rjmp	.+58     	; 0x1fc2 <BastetDictates+0x1b8>
                    simonInputPos++;
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <simonInputPos>
                    if (simonInputPos > simonPos) {
    1f8e:	e0 91 69 38 	lds	r30, 0x3869	; 0x803869 <simonPos>
    1f92:	e8 17       	cp	r30, r24
    1f94:	a8 f5       	brcc	.+106    	; 0x2000 <BastetDictates+0x1f6>
                        simonPos++;
    1f96:	ef 5f       	subi	r30, 0xFF	; 255
    1f98:	e0 93 69 38 	sts	0x3869, r30	; 0x803869 <simonPos>
                        simonTimer = 0;
    1f9c:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
                        simonCounter = 0;
    1fa0:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    1fa4:	e1 30       	cpi	r30, 0x01	; 1
    1fa6:	59 f0       	breq	.+22     	; 0x1fbe <BastetDictates+0x1b4>
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    1fa8:	e6 95       	lsr	r30
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	e6 57       	subi	r30, 0x76	; 118
    1fae:	f1 44       	sbci	r31, 0x41	; 65
    1fb0:	e5 81       	ldd	r30, Z+5	; 0x05
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1fb8:	e2 53       	subi	r30, 0x32	; 50
    1fba:	f5 4c       	sbci	r31, 0xC5	; 197
    1fbc:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	1d c0       	rjmp	.+58     	; 0x1ffc <BastetDictates+0x1f2>
                    }
                } else {
                    effect = 32|1;
    1fc2:	81 e2       	ldi	r24, 0x21	; 33
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1fca:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    1fce:	aa e8       	ldi	r26, 0x8A	; 138
    1fd0:	be eb       	ldi	r27, 0xBE	; 190
    1fd2:	80 e9       	ldi	r24, 0x90	; 144
    1fd4:	9e eb       	ldi	r25, 0xBE	; 190
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    1fd6:	ed 91       	ld	r30, X+
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1fde:	e2 53       	subi	r30, 0x32	; 50
    1fe0:	f5 4c       	sbci	r31, 0xC5	; 197
    1fe2:	20 83       	st	Z, r18
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32|1;
                    for (uint8_t n=0; n<6; n++){
    1fe4:	8a 17       	cp	r24, r26
    1fe6:	9b 07       	cpc	r25, r27
    1fe8:	b1 f7       	brne	.-20     	; 0x1fd6 <BastetDictates+0x1cc>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    1fea:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonInputPos>
                    simonPos = 0;
    1fee:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonPos>
                    simonTimer = 0;
    1ff2:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
                    simonCounter = 0;
    1ff6:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    2000:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonInputPos>
    2004:	8c 30       	cpi	r24, 0x0C	; 12
    2006:	20 f4       	brcc	.+8      	; 0x2010 <BastetDictates+0x206>
    2008:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonPos>
    200c:	8c 30       	cpi	r24, 0x0C	; 12
    200e:	90 f0       	brcs	.+36     	; 0x2034 <BastetDictates+0x22a>
                    effect = 64|2;
    2010:	82 e4       	ldi	r24, 0x42	; 66
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2018:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    201c:	8a e7       	ldi	r24, 0x7A	; 122
    201e:	37 d9       	rcall	.-3474   	; 0x128e <UpdateState>
                    simonTimer = 0;
    2020:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
                    simonCounter = 0;
    2024:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    2028:	87 e0       	ldi	r24, 0x07	; 7
    202a:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <BastetDictates+0x22a>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    2030:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonWait>
        }

        if (simonTimer == 75) {    // did you forget about Bastet?
    2034:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    2038:	8b 34       	cpi	r24, 0x4B	; 75
    203a:	41 f4       	brne	.+16     	; 0x204c <BastetDictates+0x242>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
            simonCounter = 0;
    2042:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
            simonTimer = 0;
    2046:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
            return 0;
    204a:	55 c0       	rjmp	.+170    	; 0x20f6 <BastetDictates+0x2ec>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    204c:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <simonGameState>
    2050:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 3) {
    2052:	81 f4       	brne	.+32     	; 0x2074 <BastetDictates+0x26a>
    2054:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    2058:	83 30       	cpi	r24, 0x03	; 3
            // on to next state after ±.2 second
            simonLed(0);  // LEDs off
    205a:	60 f0       	brcs	.+24     	; 0x2074 <BastetDictates+0x26a>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	a2 de       	rcall	.-700    	; 0x1da4 <simonLed>
            simonWait = 0;
    2060:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonWait>
            simonTimer = 0;
    2064:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
            simonCounter = 0;
    2068:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
            simonGameState = simonNextGameState;
    206c:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <simonNextGameState>
    2070:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2074:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <simonGameState>
    2078:	86 30       	cpi	r24, 0x06	; 6
    207a:	61 f5       	brne	.+88     	; 0x20d4 <BastetDictates+0x2ca>
        if (simonTimer > 3) {
    207c:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	38 f0       	brcs	.+14     	; 0x2092 <BastetDictates+0x288>
            simonCounter++;
    2084:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonCounter>
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonCounter>
            simonTimer = 0;
    208e:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
        }
        if (simonCounter > 5) {
    2092:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonCounter>
    2096:	86 30       	cpi	r24, 0x06	; 6
    2098:	60 f0       	brcs	.+24     	; 0x20b2 <BastetDictates+0x2a8>
            simonTimer = 0;
    209a:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonTimer>
            simonCounter = 0;
    209e:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    20a2:	87 e0       	ldi	r24, 0x07	; 7
    20a4:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <simonGameState>
            effect = 0;
    20a8:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    20ac:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
            return 0;
    20b0:	22 c0       	rjmp	.+68     	; 0x20f6 <BastetDictates+0x2ec>
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    20b2:	e5 e0       	ldi	r30, 0x05	; 5
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	e8 1b       	sub	r30, r24
    20b8:	f1 09       	sbc	r31, r1
    20ba:	e6 57       	subi	r30, 0x76	; 118
    20bc:	f1 44       	sbci	r31, 0x41	; 65
    20be:	a0 81       	ld	r26, Z
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	a2 53       	subi	r26, 0x32	; 50
    20c4:	b5 4c       	sbci	r27, 0xC5	; 197
    20c6:	1c 92       	st	X, r1
        iLED[HCKR[G][5-simonCounter]] = 0;
    20c8:	e6 81       	ldd	r30, Z+6	; 0x06
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	e2 53       	subi	r30, 0x32	; 50
    20ce:	f5 4c       	sbci	r31, 0xC5	; 197
    20d0:	10 82       	st	Z, r1
    20d2:	0c c0       	rjmp	.+24     	; 0x20ec <BastetDictates+0x2e2>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    20d4:	87 30       	cpi	r24, 0x07	; 7
    20d6:	51 f4       	brne	.+20     	; 0x20ec <BastetDictates+0x2e2>
        simonInputPos = 0;
    20d8:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonInputPos>
        simonPos = 0;
    20dc:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    20e0:	10 92 64 38 	sts	0x3864, r1	; 0x803864 <simonGameState>
        gameNow = TEXT;
    20e4:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        simonLed(0);
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	5c de       	rcall	.-840    	; 0x1da4 <simonLed>
    }

    ++simonTimer;
    20ec:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonTimer>
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <simonTimer>
    return 0;
}
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    2102:	a2 e1       	ldi	r26, 0x12	; 18
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e7 e8       	ldi	r30, 0x87	; 135
    2108:	f0 e1       	ldi	r31, 0x10	; 16
    210a:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__prologue_saves__+0x1e>
    210e:	8a 8b       	std	Y+18, r24	; 0x12
    2110:	80 e1       	ldi	r24, 0x10	; 16
    2112:	ec e5       	ldi	r30, 0x5C	; 92
    2114:	fe eb       	ldi	r31, 0xBE	; 190
    2116:	de 01       	movw	r26, r28
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	01 90       	ld	r0, Z+
    211c:	0d 92       	st	X+, r0
    211e:	8a 95       	dec	r24
    2120:	e1 f7       	brne	.-8      	; 0x211a <Cheat+0x18>
    2122:	fe 01       	movw	r30, r28
    2124:	31 96       	adiw	r30, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	21 91       	ld	r18, Z+
    212c:	31 91       	ld	r19, Z+
    212e:	26 17       	cp	r18, r22
    2130:	37 07       	cpc	r19, r23
    2132:	09 f4       	brne	.+2      	; 0x2136 <Cheat+0x34>
    2134:	89 2f       	mov	r24, r25
    2136:	9f 5f       	subi	r25, 0xFF	; 255
    2138:	98 30       	cpi	r25, 0x08	; 8
    213a:	b9 f7       	brne	.-18     	; 0x212a <Cheat+0x28>
    213c:	88 30       	cpi	r24, 0x08	; 8
    213e:	10 f0       	brcs	.+4      	; 0x2144 <Cheat+0x42>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	14 c0       	rjmp	.+40     	; 0x216c <Cheat+0x6a>
    2144:	18 e1       	ldi	r17, 0x18	; 24
    2146:	18 0f       	add	r17, r24
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	be 01       	movw	r22, r28
    214c:	6f 5e       	subi	r22, 0xEF	; 239
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	81 2f       	mov	r24, r17
    2152:	0e 94 5f 07 	call	0xebe	; 0xebe <EERead>
    2156:	89 89       	ldd	r24, Y+17	; 0x11
    2158:	8f 3f       	cpi	r24, 0xFF	; 255
    215a:	91 f7       	brne	.-28     	; 0x2140 <Cheat+0x3e>
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	be 01       	movw	r22, r28
    2160:	6e 5e       	subi	r22, 0xEE	; 238
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	81 2f       	mov	r24, r17
    2166:	0e 94 6f 07 	call	0xede	; 0xede <EEWrite>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	62 96       	adiw	r28, 0x12	; 18
    216e:	e3 e0       	ldi	r30, 0x03	; 3
    2170:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__epilogue_restores__+0x1e>

00002174 <UnflipData>:
    2174:	26 2f       	mov	r18, r22
    2176:	fb 01       	movw	r30, r22
    2178:	35 e5       	ldi	r19, 0x55	; 85
    217a:	9e 2f       	mov	r25, r30
    217c:	92 1b       	sub	r25, r18
    217e:	98 17       	cp	r25, r24
    2180:	28 f4       	brcc	.+10     	; 0x218c <UnflipData+0x18>
    2182:	90 81       	ld	r25, Z
    2184:	92 95       	swap	r25
    2186:	93 27       	eor	r25, r19
    2188:	91 93       	st	Z+, r25
    218a:	f7 cf       	rjmp	.-18     	; 0x217a <UnflipData+0x6>
    218c:	08 95       	ret

0000218e <ClearTxAfter>:
    218e:	8f 5f       	subi	r24, 0xFF	; 255
    2190:	88 30       	cpi	r24, 0x08	; 8
    2192:	30 f4       	brcc	.+12     	; 0x21a0 <ClearTxAfter+0x12>
    2194:	e8 2f       	mov	r30, r24
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	e0 5b       	subi	r30, 0xB0	; 176
    219a:	f5 4c       	sbci	r31, 0xC5	; 197
    219c:	10 82       	st	Z, r1
    219e:	f7 cf       	rjmp	.-18     	; 0x218e <ClearTxAfter>
    21a0:	08 95       	ret

000021a2 <StartsWith>:
    21a2:	ac 01       	movw	r20, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	e9 2f       	mov	r30, r25
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	da 01       	movw	r26, r20
    21ac:	ae 0f       	add	r26, r30
    21ae:	bf 1f       	adc	r27, r31
    21b0:	3c 91       	ld	r19, X
    21b2:	e6 0f       	add	r30, r22
    21b4:	f7 1f       	adc	r31, r23
    21b6:	31 11       	cpse	r19, r1
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <StartsWith+0x22>
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 81       	ld	r25, Z
    21be:	99 23       	and	r25, r25
    21c0:	49 f0       	breq	.+18     	; 0x21d4 <StartsWith+0x32>
    21c2:	07 c0       	rjmp	.+14     	; 0x21d2 <StartsWith+0x30>
    21c4:	20 81       	ld	r18, Z
    21c6:	22 23       	and	r18, r18
    21c8:	c1 f3       	breq	.-16     	; 0x21ba <StartsWith+0x18>
    21ca:	32 13       	cpse	r19, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <StartsWith+0x30>
    21ce:	9f 5f       	subi	r25, 0xFF	; 255
    21d0:	ea cf       	rjmp	.-44     	; 0x21a6 <StartsWith+0x4>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	08 95       	ret

000021d6 <PrepareSending>:
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	fc 01       	movw	r30, r24
    21dc:	61 15       	cp	r22, r1
    21de:	71 05       	cpc	r23, r1
    21e0:	59 f1       	breq	.+86     	; 0x2238 <PrepareSending+0x62>
    21e2:	a8 e5       	ldi	r26, 0x58	; 88
    21e4:	ba e3       	ldi	r27, 0x3A	; 58
    21e6:	c0 e5       	ldi	r28, 0x50	; 80
    21e8:	da e3       	ldi	r29, 0x3A	; 58
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	9f ef       	ldi	r25, 0xFF	; 255
    21ee:	6f 3f       	cpi	r22, 0xFF	; 255
    21f0:	71 05       	cpc	r23, r1
    21f2:	69 f0       	breq	.+26     	; 0x220e <PrepareSending+0x38>
    21f4:	60 f0       	brcs	.+24     	; 0x220e <PrepareSending+0x38>
    21f6:	ed 93       	st	X+, r30
    21f8:	fd 93       	st	X+, r31
    21fa:	99 93       	st	Y+, r25
    21fc:	e1 50       	subi	r30, 0x01	; 1
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	6f 5f       	subi	r22, 0xFF	; 255
    2202:	71 09       	sbc	r23, r1
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	87 30       	cpi	r24, 0x07	; 7
    2208:	91 f7       	brne	.-28     	; 0x21ee <PrepareSending+0x18>
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	1e c0       	rjmp	.+60     	; 0x224a <PrepareSending+0x74>
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	d9 01       	movw	r26, r18
    2214:	aa 0f       	add	r26, r26
    2216:	bb 1f       	adc	r27, r27
    2218:	a8 5a       	subi	r26, 0xA8	; 168
    221a:	b5 4c       	sbci	r27, 0xC5	; 197
    221c:	ed 93       	st	X+, r30
    221e:	fc 93       	st	X, r31
    2220:	6f 3f       	cpi	r22, 0xFF	; 255
    2222:	71 05       	cpc	r23, r1
    2224:	11 f4       	brne	.+4      	; 0x222a <PrepareSending+0x54>
    2226:	6e ef       	ldi	r22, 0xFE	; 254
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	f9 01       	movw	r30, r18
    222c:	e0 5b       	subi	r30, 0xB0	; 176
    222e:	f5 4c       	sbci	r31, 0xC5	; 197
    2230:	60 83       	st	Z, r22
    2232:	40 93 4e 3a 	sts	0x3A4E, r20	; 0x803a4e <txTypeNow>
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <PrepareSending+0x6c>
    2238:	10 92 58 3a 	sts	0x3A58, r1	; 0x803a58 <txAddrList>
    223c:	10 92 59 3a 	sts	0x3A59, r1	; 0x803a59 <txAddrList+0x1>
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	a5 df       	rcall	.-182    	; 0x218e <ClearTxAfter>
    2244:	10 92 4f 3a 	sts	0x3A4F, r1	; 0x803a4f <txAddrNow>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	08 95       	ret

00002250 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	f9 01       	movw	r30, r18
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	ed 5d       	subi	r30, 0xDD	; 221
    2260:	f6 4c       	sbci	r31, 0xC6	; 198
    2262:	a9 e5       	ldi	r26, 0x59	; 89
    2264:	ba e7       	ldi	r27, 0x7A	; 122
    2266:	a0 83       	st	Z, r26
    2268:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    226a:	f9 01       	movw	r30, r18
    226c:	ee 0f       	add	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	ed 59       	subi	r30, 0x9D	; 157
    2272:	f6 4c       	sbci	r31, 0xC6	; 198
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	60 83       	st	Z, r22
    227a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	f9 01       	movw	r30, r18
    2282:	ed 55       	subi	r30, 0x5D	; 93
    2284:	f6 4c       	sbci	r31, 0xC6	; 198
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	40 83       	st	Z, r20
    228c:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    228e:	21 e0       	ldi	r18, 0x01	; 1
    2290:	28 0f       	add	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	f9 01       	movw	r30, r18
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ed 5d       	subi	r30, 0xDD	; 221
    229c:	f6 4c       	sbci	r31, 0xC6	; 198
    229e:	c2 e6       	ldi	r28, 0x62	; 98
    22a0:	da e7       	ldi	r29, 0x7A	; 122
    22a2:	c0 83       	st	Z, r28
    22a4:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    22a6:	f9 01       	movw	r30, r18
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	ed 59       	subi	r30, 0x9D	; 157
    22ae:	f6 4c       	sbci	r31, 0xC6	; 198
    22b0:	cc e0       	ldi	r28, 0x0C	; 12
    22b2:	d0 e0       	ldi	r29, 0x00	; 0
    22b4:	c0 83       	st	Z, r28
    22b6:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    22b8:	22 0f       	add	r18, r18
    22ba:	33 1f       	adc	r19, r19
    22bc:	f9 01       	movw	r30, r18
    22be:	ed 55       	subi	r30, 0x5D	; 93
    22c0:	f6 4c       	sbci	r31, 0xC6	; 198
    22c2:	40 83       	st	Z, r20
    22c4:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    22c6:	e2 e0       	ldi	r30, 0x02	; 2
    22c8:	e8 0f       	add	r30, r24
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	ee 0f       	add	r30, r30
    22ce:	ff 1f       	adc	r31, r31
    22d0:	ed 5d       	subi	r30, 0xDD	; 221
    22d2:	f6 4c       	sbci	r31, 0xC6	; 198
    22d4:	20 ef       	ldi	r18, 0xF0	; 240
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	20 83       	st	Z, r18
    22da:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22dc:	23 e0       	ldi	r18, 0x03	; 3
    22de:	28 0f       	add	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	f9 01       	movw	r30, r18
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	ed 5d       	subi	r30, 0xDD	; 221
    22ea:	f6 4c       	sbci	r31, 0xC6	; 198
    22ec:	a0 83       	st	Z, r26
    22ee:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    22f0:	f9 01       	movw	r30, r18
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	ed 59       	subi	r30, 0x9D	; 157
    22f8:	f6 4c       	sbci	r31, 0xC6	; 198
    22fa:	60 83       	st	Z, r22
    22fc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	f9 01       	movw	r30, r18
    2304:	ed 55       	subi	r30, 0x5D	; 93
    2306:	f6 4c       	sbci	r31, 0xC6	; 198
    2308:	40 83       	st	Z, r20
    230a:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    230c:	24 e0       	ldi	r18, 0x04	; 4
    230e:	28 0f       	add	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	f9 01       	movw	r30, r18
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	ed 5d       	subi	r30, 0xDD	; 221
    231a:	f6 4c       	sbci	r31, 0xC6	; 198
    231c:	a5 e5       	ldi	r26, 0x55	; 85
    231e:	ba e7       	ldi	r27, 0x7A	; 122
    2320:	a0 83       	st	Z, r26
    2322:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2324:	f9 01       	movw	r30, r18
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	ed 59       	subi	r30, 0x9D	; 157
    232c:	f6 4c       	sbci	r31, 0xC6	; 198
    232e:	60 83       	st	Z, r22
    2330:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2332:	22 0f       	add	r18, r18
    2334:	33 1f       	adc	r19, r19
    2336:	f9 01       	movw	r30, r18
    2338:	ed 55       	subi	r30, 0x5D	; 93
    233a:	f6 4c       	sbci	r31, 0xC6	; 198
    233c:	40 83       	st	Z, r20
    233e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    2340:	8b 5f       	subi	r24, 0xFB	; 251
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	08 95       	ret

00002348 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	df 92       	push	r13
    234e:	ef 92       	push	r14
    2350:	ff 92       	push	r15
    2352:	0f 93       	push	r16
    2354:	1f 93       	push	r17
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	2c 97       	sbiw	r28, 0x0c	; 12
    2360:	cd bf       	out	0x3d, r28	; 61
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	7c 01       	movw	r14, r24
    2366:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2368:	9e 01       	movw	r18, r28
    236a:	2f 5f       	subi	r18, 0xFF	; 255
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	6c e0       	ldi	r22, 0x0C	; 12
    2372:	80 96       	adiw	r24, 0x20	; 32
    2374:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	98 27       	eor	r25, r24
    237e:	89 27       	eor	r24, r25
    2380:	98 27       	eor	r25, r24
    2382:	80 96       	adiw	r24, 0x20	; 32
    2384:	f8 01       	movw	r30, r16
    2386:	80 83       	st	Z, r24
    2388:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	98 27       	eor	r25, r24
    2390:	89 27       	eor	r24, r25
    2392:	98 27       	eor	r25, r24
    2394:	80 96       	adiw	r24, 0x20	; 32
    2396:	82 83       	std	Z+2, r24	; 0x02
    2398:	93 83       	std	Z+3, r25	; 0x03
    239a:	de 01       	movw	r26, r28
    239c:	15 96       	adiw	r26, 0x05	; 5
    239e:	34 96       	adiw	r30, 0x04	; 4
    23a0:	c8 01       	movw	r24, r16
    23a2:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    23a4:	2d 91       	ld	r18, X+
    23a6:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    23a8:	e8 17       	cp	r30, r24
    23aa:	f9 07       	cpc	r31, r25
    23ac:	d9 f7       	brne	.-10     	; 0x23a4 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    23ae:	fc e2       	ldi	r31, 0x2C	; 44
    23b0:	ef 0e       	add	r14, r31
    23b2:	f1 1c       	adc	r15, r1
    23b4:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    23b6:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    23b8:	9e 01       	movw	r18, r28
    23ba:	2f 5f       	subi	r18, 0xFF	; 255
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	63 e0       	ldi	r22, 0x03	; 3
    23c2:	c7 01       	movw	r24, r14
    23c4:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	98 27       	eor	r25, r24
    23ce:	89 27       	eor	r24, r25
    23d0:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    23d2:	97 01       	movw	r18, r14
    23d4:	2e 5f       	subi	r18, 0xFE	; 254
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    23d8:	43 e0       	ldi	r20, 0x03	; 3
    23da:	4d 15       	cp	r20, r13
    23dc:	80 f4       	brcc	.+32     	; 0x23fe <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    23de:	ac 01       	movw	r20, r24
    23e0:	41 50       	subi	r20, 0x01	; 1
    23e2:	51 09       	sbc	r21, r1
    23e4:	f8 01       	movw	r30, r16
    23e6:	42 8f       	std	Z+26, r20	; 0x1a
    23e8:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    23ea:	f3 e0       	ldi	r31, 0x03	; 3
    23ec:	ef 0e       	add	r14, r31
    23ee:	f1 1c       	adc	r15, r1
    23f0:	f8 01       	movw	r30, r16
    23f2:	e4 86       	std	Z+12, r14	; 0x0c
    23f4:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    23f6:	4b 81       	ldd	r20, Y+3	; 0x03
    23f8:	f5 01       	movw	r30, r10
    23fa:	44 a3       	std	Z+36, r20	; 0x24
    23fc:	05 c0       	rjmp	.+10     	; 0x2408 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    23fe:	f8 01       	movw	r30, r16
    2400:	82 8f       	std	Z+26, r24	; 0x1a
    2402:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    2404:	24 87       	std	Z+12, r18	; 0x0c
    2406:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    2408:	7c 01       	movw	r14, r24
    240a:	e2 0e       	add	r14, r18
    240c:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    240e:	d3 94       	inc	r13
    2410:	0e 5f       	subi	r16, 0xFE	; 254
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	ff ef       	ldi	r31, 0xFF	; 255
    2416:	af 1a       	sub	r10, r31
    2418:	bf 0a       	sbc	r11, r31
    241a:	47 e0       	ldi	r20, 0x07	; 7
    241c:	d4 12       	cpse	r13, r20
    241e:	cc cf       	rjmp	.-104    	; 0x23b8 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    2420:	2c 96       	adiw	r28, 0x0c	; 12
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	08 95       	ret

0000243a <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    243a:	a0 e2       	ldi	r26, 0x20	; 32
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e3 e2       	ldi	r30, 0x23	; 35
    2440:	f2 e1       	ldi	r31, 0x12	; 18
    2442:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__prologue_saves__+0x14>
    2446:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2448:	7c 01       	movw	r14, r24
    244a:	20 e2       	ldi	r18, 0x20	; 32
    244c:	e2 0e       	add	r14, r18
    244e:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    2450:	9e 01       	movw	r18, r28
    2452:	2f 5f       	subi	r18, 0xFF	; 255
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	62 e0       	ldi	r22, 0x02	; 2
    245a:	8c 96       	adiw	r24, 0x2c	; 44
    245c:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    2460:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    2462:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2464:	11 23       	and	r17, r17
    2466:	59 f1       	breq	.+86     	; 0x24be <CheckLetter+0x84>
    2468:	01 2f       	mov	r16, r17
    246a:	11 32       	cpi	r17, 0x21	; 33
    246c:	08 f0       	brcs	.+2      	; 0x2470 <CheckLetter+0x36>
    246e:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    2470:	9e 01       	movw	r18, r28
    2472:	2f 5f       	subi	r18, 0xFF	; 255
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	60 2f       	mov	r22, r16
    247a:	c7 01       	movw	r24, r14
    247c:	0e 96       	adiw	r24, 0x0e	; 14
    247e:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
    2482:	fe 01       	movw	r30, r28
    2484:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2486:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2488:	dd 20       	and	r13, r13
    248a:	61 f0       	breq	.+24     	; 0x24a4 <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    248c:	e1 e0       	ldi	r30, 0x01	; 1
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	ec 0f       	add	r30, r28
    2492:	fd 1f       	adc	r31, r29
    2494:	e8 0f       	add	r30, r24
    2496:	f1 1d       	adc	r31, r1
    2498:	90 81       	ld	r25, Z
    249a:	90 62       	ori	r25, 0x20	; 32
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	9c 11       	cpse	r25, r12
    24a0:	0e c0       	rjmp	.+28     	; 0x24be <CheckLetter+0x84>
    24a2:	0e c0       	rjmp	.+28     	; 0x24c0 <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    24a4:	91 91       	ld	r25, Z+
    24a6:	dd 24       	eor	r13, r13
    24a8:	d3 94       	inc	r13
    24aa:	9b 35       	cpi	r25, 0x5B	; 91
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <CheckLetter+0x76>
    24ae:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	80 17       	cp	r24, r16
    24b4:	48 f3       	brcs	.-46     	; 0x2488 <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    24b6:	e0 0e       	add	r14, r16
    24b8:	f1 1c       	adc	r15, r1
        x -= max;
    24ba:	10 1b       	sub	r17, r16
    24bc:	d3 cf       	rjmp	.-90     	; 0x2464 <CheckLetter+0x2a>
    }
    return 0;
    24be:	80 e0       	ldi	r24, 0x00	; 0
}
    24c0:	a0 96       	adiw	r28, 0x20	; 32
    24c2:	e8 e0       	ldi	r30, 0x08	; 8
    24c4:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__epilogue_restores__+0x14>

000024c8 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    24c8:	af 92       	push	r10
    24ca:	bf 92       	push	r11
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	00 d0       	rcall	.+0      	; 0x24dc <FindChild+0x14>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <FindChild+0x16>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	d6 2e       	mov	r13, r22
    24e4:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    24e6:	9e 01       	movw	r18, r28
    24e8:	2f 5f       	subi	r18, 0xFF	; 255
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	64 e0       	ldi	r22, 0x04	; 4
    24f0:	80 96       	adiw	r24, 0x20	; 32
    24f2:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
    24f6:	e9 80       	ldd	r14, Y+1	; 0x01
    24f8:	fa 80       	ldd	r15, Y+2	; 0x02
    24fa:	fe 24       	eor	r15, r14
    24fc:	ef 24       	eor	r14, r15
    24fe:	fe 24       	eor	r15, r14
    2500:	0b 81       	ldd	r16, Y+3	; 0x03
    2502:	1c 81       	ldd	r17, Y+4	; 0x04
    2504:	10 27       	eor	r17, r16
    2506:	01 27       	eor	r16, r17
    2508:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    250a:	0e 15       	cp	r16, r14
    250c:	1f 05       	cpc	r17, r15
    250e:	48 f5       	brcc	.+82     	; 0x2562 <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    2510:	a0 16       	cp	r10, r16
    2512:	b1 06       	cpc	r11, r17
    2514:	60 f0       	brcs	.+24     	; 0x252e <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    2516:	9e 01       	movw	r18, r28
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	62 e0       	ldi	r22, 0x02	; 2
    2520:	c8 01       	movw	r24, r16
    2522:	80 96       	adiw	r24, 0x20	; 32
    2524:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
    2528:	09 81       	ldd	r16, Y+1	; 0x01
    252a:	1a 81       	ldd	r17, Y+2	; 0x02
    252c:	eb cf       	rjmp	.-42     	; 0x2504 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    252e:	9e 01       	movw	r18, r28
    2530:	2f 5f       	subi	r18, 0xFF	; 255
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	c8 01       	movw	r24, r16
    253a:	85 96       	adiw	r24, 0x25	; 37
    253c:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	81 11       	cpse	r24, r1
    2544:	03 c0       	rjmp	.+6      	; 0x254c <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2546:	d1 10       	cpse	r13, r1
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <FindChild+0x8e>
    254a:	0e c0       	rjmp	.+28     	; 0x2568 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    254c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
    2550:	81 11       	cpse	r24, r1
    2552:	f9 cf       	rjmp	.-14     	; 0x2546 <FindChild+0x7e>
    2554:	e0 cf       	rjmp	.-64     	; 0x2516 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2556:	6d 2d       	mov	r22, r13
    2558:	c8 01       	movw	r24, r16
    255a:	6f df       	rcall	.-290    	; 0x243a <CheckLetter>
    255c:	88 23       	and	r24, r24
    255e:	d9 f2       	breq	.-74     	; 0x2516 <FindChild+0x4e>
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	01 c0       	rjmp	.+2      	; 0x256a <FindChild+0xa2>
    2568:	c8 01       	movw	r24, r16
}
    256a:	24 96       	adiw	r28, 0x04	; 4
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	bf 90       	pop	r11
    2580:	af 90       	pop	r10
    2582:	08 95       	ret

00002584 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2584:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2586:	9f e9       	ldi	r25, 0x9F	; 159
    2588:	98 0f       	add	r25, r24
    258a:	9a 31       	cpi	r25, 0x1A	; 26
    258c:	38 f0       	brcs	.+14     	; 0x259c <InpOkChk+0x18>
    258e:	90 ed       	ldi	r25, 0xD0	; 208
    2590:	98 0f       	add	r25, r24
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	9a 30       	cpi	r25, 0x0A	; 10
    2596:	18 f0       	brcs	.+6      	; 0x259e <InpOkChk+0x1a>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	08 95       	ret
    259c:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    259e:	08 95       	ret

000025a0 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    25aa:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    25ac:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    25ae:	f8 01       	movw	r30, r16
    25b0:	ed 0f       	add	r30, r29
    25b2:	f1 1d       	adc	r31, r1
    25b4:	80 81       	ld	r24, Z
    25b6:	2c 2f       	mov	r18, r28
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	88 23       	and	r24, r24
    25bc:	61 f0       	breq	.+24     	; 0x25d6 <CleanInput+0x36>
        data[cnt] = data[x];
    25be:	d8 01       	movw	r26, r16
    25c0:	a2 0f       	add	r26, r18
    25c2:	b3 1f       	adc	r27, r19
    25c4:	8c 93       	st	X, r24
        if (data[x] == 0x1b) break; //Escape characters are not supported!
    25c6:	80 81       	ld	r24, Z
    25c8:	8b 31       	cpi	r24, 0x1B	; 27
    25ca:	29 f0       	breq	.+10     	; 0x25d6 <CleanInput+0x36>
        if (InpOkChk(data[x])) ++cnt;
    25cc:	db df       	rcall	.-74     	; 0x2584 <InpOkChk>
    25ce:	81 11       	cpse	r24, r1
    25d0:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    25d2:	df 5f       	subi	r29, 0xFF	; 255
    25d4:	ec cf       	rjmp	.-40     	; 0x25ae <CleanInput+0xe>
        data[cnt] = data[x];
        if (data[x] == 0x1b) break; //Escape characters are not supported!
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    25d6:	f8 01       	movw	r30, r16
    25d8:	e2 0f       	add	r30, r18
    25da:	f3 1f       	adc	r31, r19
    25dc:	10 82       	st	Z, r1
    return cnt;
}
    25de:	8c 2f       	mov	r24, r28
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	08 95       	ret

000025ea <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    25ea:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    25ec:	20 91 4f 3a 	lds	r18, 0x3A4F	; 0x803a4f <txAddrNow>
    25f0:	28 30       	cpi	r18, 0x08	; 8
    25f2:	08 f0       	brcs	.+2      	; 0x25f6 <CheckSend+0xc>
    25f4:	49 c0       	rjmp	.+146    	; 0x2688 <CheckSend+0x9e>
    25f6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    25fa:	88 23       	and	r24, r24
    25fc:	09 f4       	brne	.+2      	; 0x2600 <CheckSend+0x16>
    25fe:	44 c0       	rjmp	.+136    	; 0x2688 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    2600:	82 2f       	mov	r24, r18
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	fc 01       	movw	r30, r24
    2606:	e0 5b       	subi	r30, 0xB0	; 176
    2608:	f5 4c       	sbci	r31, 0xC5	; 197
    260a:	e0 81       	ld	r30, Z
    260c:	e1 11       	cpse	r30, r1
    260e:	06 c0       	rjmp	.+12     	; 0x261c <CheckSend+0x32>
            txPart = 0;
    2610:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <txPart.3917>
            txAddrNow = TXLISTLEN;
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	80 93 4f 3a 	sts	0x3A4F, r24	; 0x803a4f <txAddrNow>
    261a:	2e c0       	rjmp	.+92     	; 0x2678 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    261c:	50 91 0e 39 	lds	r21, 0x390E	; 0x80390e <txPart.3917>
    2620:	5e 17       	cp	r21, r30
    2622:	60 f5       	brcc	.+88     	; 0x267c <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2624:	ce 2f       	mov	r28, r30
    2626:	c5 1b       	sub	r28, r21
    2628:	c1 32       	cpi	r28, 0x21	; 33
    262a:	08 f0       	brcs	.+2      	; 0x262e <CheckSend+0x44>
    262c:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	fc 01       	movw	r30, r24
    2634:	e8 5a       	subi	r30, 0xA8	; 168
    2636:	f5 4c       	sbci	r31, 0xC5	; 197
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	2c ef       	ldi	r18, 0xFC	; 252
    263e:	3a e3       	ldi	r19, 0x3A	; 58
    2640:	40 91 4e 3a 	lds	r20, 0x3A4E	; 0x803a4e <txTypeNow>
    2644:	6c 2f       	mov	r22, r28
    2646:	85 0f       	add	r24, r21
    2648:	91 1d       	adc	r25, r1
    264a:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
            txPart += EEreadLength;
    264e:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <txPart.3917>
    2652:	8c 0f       	add	r24, r28
    2654:	80 93 0e 39 	sts	0x390E, r24	; 0x80390e <txPart.3917>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2658:	ec 2f       	mov	r30, r28
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	e4 50       	subi	r30, 0x04	; 4
    265e:	f5 4c       	sbci	r31, 0xC5	; 197
    2660:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    2662:	80 91 fc 3a 	lds	r24, 0x3AFC	; 0x803afc <txBuffer>
    2666:	81 11       	cpse	r24, r1
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <CheckSend+0x86>
    266a:	8b ed       	ldi	r24, 0xDB	; 219
    266c:	80 93 fc 3a 	sts	0x3AFC, r24	; 0x803afc <txBuffer>
            SerSend(&txBuffer[0]);
    2670:	8c ef       	ldi	r24, 0xFC	; 252
    2672:	9a e3       	ldi	r25, 0x3A	; 58
    2674:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	0b c0       	rjmp	.+22     	; 0x2692 <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    267c:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <txPart.3917>
            ++txAddrNow;
    2680:	2f 5f       	subi	r18, 0xFF	; 255
    2682:	20 93 4f 3a 	sts	0x3A4F, r18	; 0x803a4f <txAddrNow>
    2686:	f8 cf       	rjmp	.-16     	; 0x2678 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2688:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	91 11       	cpse	r25, r1
    2690:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2692:	cf 91       	pop	r28
    2694:	08 95       	ret

00002696 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    269a:	c0 91 22 39 	lds	r28, 0x3922	; 0x803922 <responseList>
    269e:	cc 23       	and	r28, r28
    26a0:	b1 f1       	breq	.+108    	; 0x270e <CheckResponse+0x78>
        --responseList;
    26a2:	c1 50       	subi	r28, 0x01	; 1
    26a4:	c0 93 22 39 	sts	0x3922, r28	; 0x803922 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    26a8:	d0 91 0d 39 	lds	r29, 0x390D	; 0x80390d <number.3921>
    26ac:	2d 2f       	mov	r18, r29
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	f9 01       	movw	r30, r18
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	ed 5d       	subi	r30, 0xDD	; 221
    26b8:	f6 4c       	sbci	r31, 0xC6	; 198
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	80 3f       	cpi	r24, 0xF0	; 240
    26c0:	4f ef       	ldi	r20, 0xFF	; 255
    26c2:	94 07       	cpc	r25, r20
    26c4:	51 f4       	brne	.+20     	; 0x26da <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    26c6:	60 91 3d 3a 	lds	r22, 0x3A3D	; 0x803a3d <currObj+0x1a>
    26ca:	70 91 3e 3a 	lds	r23, 0x3A3E	; 0x803a3e <currObj+0x1b>
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	80 91 2f 3a 	lds	r24, 0x3A2F	; 0x803a2f <currObj+0xc>
    26d4:	90 91 30 3a 	lds	r25, 0x3A30	; 0x803a30 <currObj+0xd>
    26d8:	0d c0       	rjmp	.+26     	; 0x26f4 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    26da:	d9 01       	movw	r26, r18
    26dc:	aa 0f       	add	r26, r26
    26de:	bb 1f       	adc	r27, r27
    26e0:	ad 55       	subi	r26, 0x5D	; 93
    26e2:	b6 4c       	sbci	r27, 0xC6	; 198
    26e4:	22 0f       	add	r18, r18
    26e6:	33 1f       	adc	r19, r19
    26e8:	f9 01       	movw	r30, r18
    26ea:	ed 59       	subi	r30, 0x9D	; 157
    26ec:	f6 4c       	sbci	r31, 0xC6	; 198
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	4c 91       	ld	r20, X
    26f4:	70 dd       	rcall	.-1312   	; 0x21d6 <PrepareSending>
        }
        ++number;
    26f6:	df 5f       	subi	r29, 0xFF	; 255
    26f8:	d0 93 0d 39 	sts	0x390D, r29	; 0x80390d <number.3921>

        if (responseList == 0) {
    26fc:	c1 11       	cpse	r28, r1
    26fe:	06 c0       	rjmp	.+12     	; 0x270c <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    2700:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    2702:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <serRxDone>
            number = 0;
    2706:	10 92 0d 39 	sts	0x390D, r1	; 0x80390d <number.3921>
    270a:	01 c0       	rjmp	.+2      	; 0x270e <CheckResponse+0x78>
            return 0;
        }
        return 1;
    270c:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    270e:	8c 2f       	mov	r24, r28
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	08 95       	ret

00002716 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2716:	a9 e0       	ldi	r26, 0x09	; 9
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e1 e9       	ldi	r30, 0x91	; 145
    271c:	f3 e1       	ldi	r31, 0x13	; 19
    271e:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <__prologue_saves__+0x6>
    2722:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    2724:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2728:	8f 3f       	cpi	r24, 0xFF	; 255
    272a:	49 f4       	brne	.+18     	; 0x273e <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    272c:	63 e2       	ldi	r22, 0x23	; 35
    272e:	7a e3       	ldi	r23, 0x3A	; 58
    2730:	80 91 e3 39 	lds	r24, 0x39E3	; 0x8039e3 <route>
    2734:	90 91 e4 39 	lds	r25, 0x39E4	; 0x8039e4 <route+0x1>
    2738:	07 de       	rcall	.-1010   	; 0x2348 <PopulateObject>
        currDepth = 0;
    273a:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <currDepth>
    }

    if (serRxDone){
    273e:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <serRxDone>
    2742:	88 23       	and	r24, r24
    2744:	09 f4       	brne	.+2      	; 0x2748 <CheckInput+0x32>
    2746:	b5 c1       	rjmp	.+874    	; 0x2ab2 <CheckInput+0x39c>

        //Special input requested from user by game
        if (specialInput[0]){
    2748:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <specialInput>
    274c:	88 23       	and	r24, r24
    274e:	09 f4       	brne	.+2      	; 0x2752 <CheckInput+0x3c>
    2750:	4f c0       	rjmp	.+158    	; 0x27f0 <CheckInput+0xda>
            specialPassed = 0;
    2752:	10 92 11 39 	sts	0x3911, r1	; 0x803911 <specialPassed>
            data[0] = 'a';
    2756:	81 e6       	ldi	r24, 0x61	; 97
    2758:	f8 01       	movw	r30, r16
    275a:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    275c:	62 e1       	ldi	r22, 0x12	; 18
    275e:	79 e3       	ldi	r23, 0x39	; 57
    2760:	8d e7       	ldi	r24, 0x7D	; 125
    2762:	9a e3       	ldi	r25, 0x3A	; 58
    2764:	1e dd       	rcall	.-1476   	; 0x21a2 <StartsWith>
    2766:	f8 2e       	mov	r15, r24
    2768:	88 23       	and	r24, r24
    276a:	21 f0       	breq	.+8      	; 0x2774 <CheckInput+0x5e>
                specialPassed = 1;
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <specialPassed>
    2772:	04 c0       	rjmp	.+8      	; 0x277c <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2774:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <specialInput>
    2778:	81 33       	cpi	r24, 0x31	; 49
    277a:	11 f0       	breq	.+4      	; 0x2780 <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    277c:	f1 2c       	mov	r15, r1
    277e:	9b c1       	rjmp	.+822    	; 0x2ab6 <CheckInput+0x3a0>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2780:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <specialInput+0x2>
    2784:	81 11       	cpse	r24, r1
    2786:	fa cf       	rjmp	.-12     	; 0x277c <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2788:	8d e7       	ldi	r24, 0x7D	; 125
    278a:	9a e3       	ldi	r25, 0x3A	; 58
    278c:	09 df       	rcall	.-494    	; 0x25a0 <CleanInput>
                specialPassed = 2;
    278e:	92 e0       	ldi	r25, 0x02	; 2
    2790:	90 93 11 39 	sts	0x3911, r25	; 0x803911 <specialPassed>
                data[1] = 0;
    2794:	f8 01       	movw	r30, r16
    2796:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2798:	82 30       	cpi	r24, 0x02	; 2
    279a:	80 f3       	brcs	.-32     	; 0x277c <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    279c:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <serRx>
    27a0:	81 33       	cpi	r24, 0x31	; 49
    27a2:	60 f3       	brcs	.-40     	; 0x277c <CheckInput+0x66>
    27a4:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <serRx>
    27a8:	85 33       	cpi	r24, 0x35	; 53
    27aa:	40 f7       	brcc	.-48     	; 0x277c <CheckInput+0x66>
                        serRx[1] |= 0x20;
    27ac:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx+0x1>
    27b0:	80 62       	ori	r24, 0x20	; 32
    27b2:	80 93 7e 3a 	sts	0x3A7E, r24	; 0x803a7e <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    27b6:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx+0x1>
    27ba:	81 36       	cpi	r24, 0x61	; 97
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <CheckInput+0xc0>
    27be:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx+0x1>
    27c2:	85 36       	cpi	r24, 0x65	; 101
    27c4:	41 f0       	breq	.+16     	; 0x27d6 <CheckInput+0xc0>
    27c6:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx+0x1>
    27ca:	86 36       	cpi	r24, 0x66	; 102
    27cc:	21 f0       	breq	.+8      	; 0x27d6 <CheckInput+0xc0>
    27ce:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx+0x1>
    27d2:	87 37       	cpi	r24, 0x77	; 119
    27d4:	99 f6       	brne	.-90     	; 0x277c <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    27d6:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput+0x1>
    27da:	8f 5e       	subi	r24, 0xEF	; 239
    27dc:	f8 01       	movw	r30, r16
    27de:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    27e0:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <serRx>
    27e4:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    27e6:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx+0x1>
    27ea:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    27ec:	14 82       	std	Z+4, r1	; 0x04
    27ee:	63 c1       	rjmp	.+710    	; 0x2ab6 <CheckInput+0x3a0>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    27f0:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <serRx>
    27f4:	83 32       	cpi	r24, 0x23	; 35
    27f6:	89 f5       	brne	.+98     	; 0x285a <CheckInput+0x144>
    27f8:	8d b3       	in	r24, 0x1d	; 29
    27fa:	86 30       	cpi	r24, 0x06	; 6
    27fc:	71 f5       	brne	.+92     	; 0x285a <CheckInput+0x144>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    2804:	fc 01       	movw	r30, r24
    2806:	e3 58       	subi	r30, 0x83	; 131
    2808:	f5 4c       	sbci	r31, 0xC5	; 197
    280a:	20 81       	ld	r18, Z
    280c:	20 53       	subi	r18, 0x30	; 48
    280e:	20 83       	st	Z, r18
                    bitNr *= 10;
    2810:	11 0f       	add	r17, r17
    2812:	21 2f       	mov	r18, r17
    2814:	22 0f       	add	r18, r18
    2816:	22 0f       	add	r18, r18
    2818:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    281a:	20 91 7e 3a 	lds	r18, 0x3A7E	; 0x803a7e <serRx+0x1>
    281e:	23 30       	cpi	r18, 0x03	; 3
    2820:	48 f4       	brcc	.+18     	; 0x2834 <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    2822:	20 81       	ld	r18, Z
    2824:	2a 30       	cpi	r18, 0x0A	; 10
    2826:	b8 f4       	brcc	.+46     	; 0x2856 <CheckInput+0x140>
                        bitNr += serRx[x];
    2828:	20 81       	ld	r18, Z
    282a:	12 0f       	add	r17, r18
    282c:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    282e:	84 30       	cpi	r24, 0x04	; 4
    2830:	91 05       	cpc	r25, r1
    2832:	41 f7       	brne	.-48     	; 0x2804 <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    2834:	81 2f       	mov	r24, r17
    2836:	8f 77       	andi	r24, 0x7F	; 127
    2838:	71 f0       	breq	.+28     	; 0x2856 <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    283a:	80 91 81 3a 	lds	r24, 0x3A81	; 0x803a81 <serRx+0x4>
    283e:	60 91 82 3a 	lds	r22, 0x3A82	; 0x803a82 <serRx+0x5>
    2842:	70 e0       	ldi	r23, 0x00	; 0
    2844:	78 2b       	or	r23, r24
    2846:	81 2f       	mov	r24, r17
    2848:	80 95       	com	r24
    284a:	5b dc       	rcall	.-1866   	; 0x2102 <Cheat>
    284c:	88 23       	and	r24, r24
    284e:	19 f0       	breq	.+6      	; 0x2856 <CheckInput+0x140>
    2850:	81 2f       	mov	r24, r17
    2852:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	29 c1       	rjmp	.+594    	; 0x2aac <CheckInput+0x396>
    285a:	d8 01       	movw	r26, r16
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2860:	fc 01       	movw	r30, r24
    2862:	e3 58       	subi	r30, 0x83	; 131
    2864:	f5 4c       	sbci	r31, 0xC5	; 197
    2866:	20 81       	ld	r18, Z
    2868:	21 34       	cpi	r18, 0x41	; 65
    286a:	18 f0       	brcs	.+6      	; 0x2872 <CheckInput+0x15c>
    286c:	20 81       	ld	r18, Z
    286e:	2b 35       	cpi	r18, 0x5B	; 91
    2870:	10 f0       	brcs	.+4      	; 0x2876 <CheckInput+0x160>
    2872:	20 81       	ld	r18, Z
    2874:	02 c0       	rjmp	.+4      	; 0x287a <CheckInput+0x164>
    2876:	20 81       	ld	r18, Z
    2878:	20 62       	ori	r18, 0x20	; 32
    287a:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    287c:	20 81       	ld	r18, Z
    287e:	21 11       	cpse	r18, r1
    2880:	05 c0       	rjmp	.+10     	; 0x288c <CheckInput+0x176>
                    data[x] = 0;
    2882:	f8 01       	movw	r30, r16
    2884:	e8 0f       	add	r30, r24
    2886:	f1 1d       	adc	r31, r1
    2888:	10 82       	st	Z, r1
                    break;
    288a:	05 c0       	rjmp	.+10     	; 0x2896 <CheckInput+0x180>
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2890:	81 34       	cpi	r24, 0x41	; 65
    2892:	91 05       	cpc	r25, r1
    2894:	29 f7       	brne	.-54     	; 0x2860 <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2896:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <serRx>
                data[0] = 0;
    289a:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    289c:	81 11       	cpse	r24, r1
    289e:	05 c0       	rjmp	.+10     	; 0x28aa <CheckInput+0x194>
                data[0] = 0;
    28a0:	10 82       	st	Z, r1
                RXCNT = 0;
    28a2:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    28a4:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <serRxDone>
    28a8:	04 c1       	rjmp	.+520    	; 0x2ab2 <CheckInput+0x39c>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    28aa:	80 81       	ld	r24, Z
    28ac:	8f 33       	cpi	r24, 0x3F	; 63
    28ae:	11 f0       	breq	.+4      	; 0x28b4 <CheckInput+0x19e>
    28b0:	88 36       	cpi	r24, 0x68	; 104
    28b2:	49 f4       	brne	.+18     	; 0x28c6 <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28b4:	83 e9       	ldi	r24, 0x93	; 147
    28b6:	9b e7       	ldi	r25, 0x7B	; 123
    28b8:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    28bc:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    28c0:	8d e6       	ldi	r24, 0x6D	; 109
    28c2:	94 e0       	ldi	r25, 0x04	; 4
    28c4:	0a c0       	rjmp	.+20     	; 0x28da <CheckInput+0x1c4>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    28c6:	81 36       	cpi	r24, 0x61	; 97
    28c8:	a1 f4       	brne	.+40     	; 0x28f2 <CheckInput+0x1dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ca:	8e e6       	ldi	r24, 0x6E	; 110
    28cc:	9a e7       	ldi	r25, 0x7A	; 122
    28ce:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    28d2:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    28d6:	85 e2       	ldi	r24, 0x25	; 37
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    28de:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    28ea:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	dd c0       	rjmp	.+442    	; 0x2aac <CheckInput+0x396>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    28f2:	87 37       	cpi	r24, 0x77	; 119
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <CheckInput+0x1e2>
    28f6:	41 c0       	rjmp	.+130    	; 0x297a <CheckInput+0x264>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28f8:	8d e8       	ldi	r24, 0x8D	; 141
    28fa:	96 e7       	ldi	r25, 0x76	; 118
    28fc:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    2900:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    2904:	82 e1       	ldi	r24, 0x12	; 18
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    290c:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    2910:	21 e0       	ldi	r18, 0x01	; 1
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	20 93 a5 39 	sts	0x39A5, r18	; 0x8039a5 <reactStr+0x82>
    2918:	30 93 a6 39 	sts	0x39A6, r19	; 0x8039a6 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    291c:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	fc 01       	movw	r30, r24
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	ee 51       	subi	r30, 0x1E	; 30
    292a:	f1 44       	sbci	r31, 0x41	; 65
    292c:	40 81       	ld	r20, Z
    292e:	51 81       	ldd	r21, Z+1	; 0x01
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	fc 01       	movw	r30, r24
    2936:	e6 52       	subi	r30, 0x26	; 38
    2938:	f1 44       	sbci	r31, 0x41	; 65
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x4>
    2942:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    2946:	40 93 67 39 	sts	0x3967, r20	; 0x803967 <reactStr+0x44>
    294a:	50 93 68 39 	sts	0x3968, r21	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    294e:	20 93 a7 39 	sts	0x39A7, r18	; 0x8039a7 <reactStr+0x84>
    2952:	30 93 a8 39 	sts	0x39A8, r19	; 0x8039a8 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2956:	8f e5       	ldi	r24, 0x5F	; 95
    2958:	96 e7       	ldi	r25, 0x76	; 118
    295a:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <reactStr+0x6>
    295e:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <reactStr+0x7>
    reactStr[1][number]=length;
    2962:	8a e1       	ldi	r24, 0x1A	; 26
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	80 93 69 39 	sts	0x3969, r24	; 0x803969 <reactStr+0x46>
    296a:	90 93 6a 39 	sts	0x396A, r25	; 0x80396a <reactStr+0x47>
    reactStr[2][number]=type;
    296e:	20 93 a9 39 	sts	0x39A9, r18	; 0x8039a9 <reactStr+0x86>
    2972:	30 93 aa 39 	sts	0x39AA, r19	; 0x8039aa <reactStr+0x87>
            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2976:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2978:	99 c0       	rjmp	.+306    	; 0x2aac <CheckInput+0x396>
    297a:	68 eb       	ldi	r22, 0xB8	; 184
    297c:	7e eb       	ldi	r23, 0xBE	; 190
    297e:	c8 01       	movw	r24, r16
    2980:	10 dc       	rcall	.-2016   	; 0x21a2 <StartsWith>
    2982:	88 23       	and	r24, r24
    2984:	d1 f0       	breq	.+52     	; 0x29ba <CheckInput+0x2a4>
            
                //Wipe, but not the cheat data, hidden easter egg in ext. eeprom. ;)
                WipeAfterBoot(0);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	0e 94 87 09 	call	0x130e	; 0x130e <WipeAfterBoot>
                SaveGameState();
    298c:	0e 94 c0 08 	call	0x1180	; 0x1180 <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2990:	89 e0       	ldi	r24, 0x09	; 9
    2992:	eb ec       	ldi	r30, 0xCB	; 203
    2994:	fe eb       	ldi	r31, 0xBE	; 190
    2996:	de 01       	movw	r26, r28
    2998:	11 96       	adiw	r26, 0x01	; 1
    299a:	01 90       	ld	r0, Z+
    299c:	0d 92       	st	X+, r0
    299e:	8a 95       	dec	r24
    29a0:	e1 f7       	brne	.-8      	; 0x299a <CheckInput+0x284>
                SerSpeed(60);
    29a2:	8c e3       	ldi	r24, 0x3C	; 60
    29a4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    29a8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    29ac:	88 23       	and	r24, r24
    29ae:	e1 f3       	breq	.-8      	; 0x29a8 <CheckInput+0x292>
    29b0:	ce 01       	movw	r24, r28
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    29b8:	f7 cf       	rjmp	.-18     	; 0x29a8 <CheckInput+0x292>
    29ba:	6e eb       	ldi	r22, 0xBE	; 190
    29bc:	7e eb       	ldi	r23, 0xBE	; 190
    29be:	c8 01       	movw	r24, r16
    29c0:	f0 db       	rcall	.-2080   	; 0x21a2 <StartsWith>
    29c2:	88 23       	and	r24, r24
    29c4:	d1 f0       	breq	.+52     	; 0x29fa <CheckInput+0x2e4>
                
                //Full wipe, including cheats, for badge.team use only!
                WipeAfterBoot(1);
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	0e 94 87 09 	call	0x130e	; 0x130e <WipeAfterBoot>
                SaveGameState();
    29cc:	0e 94 c0 08 	call	0x1180	; 0x1180 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    29d0:	88 e0       	ldi	r24, 0x08	; 8
    29d2:	e4 ed       	ldi	r30, 0xD4	; 212
    29d4:	fe eb       	ldi	r31, 0xBE	; 190
    29d6:	de 01       	movw	r26, r28
    29d8:	11 96       	adiw	r26, 0x01	; 1
    29da:	01 90       	ld	r0, Z+
    29dc:	0d 92       	st	X+, r0
    29de:	8a 95       	dec	r24
    29e0:	e1 f7       	brne	.-8      	; 0x29da <CheckInput+0x2c4>
                SerSpeed(60);
    29e2:	8c e3       	ldi	r24, 0x3C	; 60
    29e4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    29e8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    29ec:	88 23       	and	r24, r24
    29ee:	e1 f3       	breq	.-8      	; 0x29e8 <CheckInput+0x2d2>
    29f0:	ce 01       	movw	r24, r28
    29f2:	01 96       	adiw	r24, 0x01	; 1
    29f4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    29f8:	f7 cf       	rjmp	.-18     	; 0x29e8 <CheckInput+0x2d2>
    29fa:	65 ec       	ldi	r22, 0xC5	; 197
    29fc:	7e eb       	ldi	r23, 0xBE	; 190
    29fe:	c8 01       	movw	r24, r16
    2a00:	d0 db       	rcall	.-2144   	; 0x21a2 <StartsWith>
    2a02:	88 23       	and	r24, r24
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <CheckInput+0x2f2>
    2a06:	ba ce       	rjmp	.-652    	; 0x277c <CheckInput+0x66>
    2a08:	83 e2       	ldi	r24, 0x23	; 35
    2a0a:	c8 2e       	mov	r12, r24
    2a0c:	89 e3       	ldi	r24, 0x39	; 57
    2a0e:	d8 2e       	mov	r13, r24
    2a10:	93 e6       	ldi	r25, 0x63	; 99
    2a12:	e9 2e       	mov	r14, r25
    2a14:	99 e3       	ldi	r25, 0x39	; 57
    2a16:	f9 2e       	mov	r15, r25
    2a18:	03 ea       	ldi	r16, 0xA3	; 163
    2a1a:	19 e3       	ldi	r17, 0x39	; 57
    2a1c:	28 e1       	ldi	r18, 0x18	; 24
    2a1e:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2a20:	aa 24       	eor	r10, r10
    2a22:	a3 94       	inc	r10
    2a24:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a26:	47 e5       	ldi	r20, 0x57	; 87
    2a28:	84 2e       	mov	r8, r20
    2a2a:	4a e7       	ldi	r20, 0x7A	; 122
    2a2c:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2a2e:	52 e0       	ldi	r21, 0x02	; 2
    2a30:	65 2e       	mov	r6, r21
    2a32:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	be 01       	movw	r22, r28
    2a38:	6f 5f       	subi	r22, 0xFF	; 255
    2a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3c:	85 2d       	mov	r24, r5
    2a3e:	0e 94 5f 07 	call	0xebe	; 0xebe <EERead>
                    bit = 0xff-bit;
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	80 95       	com	r24
    2a46:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a48:	28 2f       	mov	r18, r24
    2a4a:	22 95       	swap	r18
    2a4c:	2f 70       	andi	r18, 0x0F	; 15
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	23 57       	subi	r18, 0x73	; 115
    2a52:	3b 48       	sbci	r19, 0x8B	; 139
    2a54:	f6 01       	movw	r30, r12
    2a56:	20 83       	st	Z, r18
    2a58:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2a5a:	f7 01       	movw	r30, r14
    2a5c:	a0 82       	st	Z, r10
    2a5e:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2a60:	f8 01       	movw	r30, r16
    2a62:	a0 82       	st	Z, r10
    2a64:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a66:	8f 70       	andi	r24, 0x0F	; 15
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	83 57       	subi	r24, 0x73	; 115
    2a6c:	9b 48       	sbci	r25, 0x8B	; 139
    2a6e:	f6 01       	movw	r30, r12
    2a70:	82 83       	std	Z+2, r24	; 0x02
    2a72:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2a74:	f7 01       	movw	r30, r14
    2a76:	a2 82       	std	Z+2, r10	; 0x02
    2a78:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	a2 82       	std	Z+2, r10	; 0x02
    2a7e:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a80:	f6 01       	movw	r30, r12
    2a82:	84 82       	std	Z+4, r8	; 0x04
    2a84:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2a86:	f7 01       	movw	r30, r14
    2a88:	64 82       	std	Z+4, r6	; 0x04
    2a8a:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	a4 82       	std	Z+4, r10	; 0x04
    2a90:	b5 82       	std	Z+5, r11	; 0x05
    2a92:	53 94       	inc	r5
    2a94:	f6 e0       	ldi	r31, 0x06	; 6
    2a96:	cf 0e       	add	r12, r31
    2a98:	d1 1c       	adc	r13, r1
    2a9a:	86 e0       	ldi	r24, 0x06	; 6
    2a9c:	e8 0e       	add	r14, r24
    2a9e:	f1 1c       	adc	r15, r1
    2aa0:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa4:	e0 e2       	ldi	r30, 0x20	; 32
    2aa6:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2aa8:	c5 cf       	rjmp	.-118    	; 0x2a34 <CheckInput+0x31e>
    2aaa:	88 e1       	ldi	r24, 0x18	; 24
    2aac:	d1 db       	rcall	.-2142   	; 0x2250 <SetStandardResponse>
    2aae:	80 93 22 39 	sts	0x3922, r24	; 0x803922 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2ab2:	ff 24       	eor	r15, r15
    2ab4:	f3 94       	inc	r15
}
    2ab6:	8f 2d       	mov	r24, r15
    2ab8:	29 96       	adiw	r28, 0x09	; 9
    2aba:	ef e0       	ldi	r30, 0x0F	; 15
    2abc:	0c 94 17 1f 	jmp	0x3e2e	; 0x3e2e <__epilogue_restores__+0x6>

00002ac0 <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2ac0:	ab e2       	ldi	r26, 0x2B	; 43
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e6 e6       	ldi	r30, 0x66	; 102
    2ac6:	f5 e1       	ldi	r31, 0x15	; 21
    2ac8:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2acc:	99 24       	eor	r9, r9
    2ace:	93 94       	inc	r9
    2ad0:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	ed 5d       	subi	r30, 0xDD	; 221
    2adc:	f6 4c       	sbci	r31, 0xC6	; 198
    2ade:	2c ec       	ldi	r18, 0xCC	; 204
    2ae0:	37 e7       	ldi	r19, 0x77	; 119
    2ae2:	20 83       	st	Z, r18
    2ae4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	ee 0f       	add	r30, r30
    2aea:	ff 1f       	adc	r31, r31
    2aec:	ed 59       	subi	r30, 0x9D	; 157
    2aee:	f6 4c       	sbci	r31, 0xC6	; 198
    2af0:	26 e1       	ldi	r18, 0x16	; 22
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	20 83       	st	Z, r18
    2af6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	fc 01       	movw	r30, r24
    2afe:	ed 55       	subi	r30, 0x5D	; 93
    2b00:	f6 4c       	sbci	r31, 0xC6	; 198
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	80 83       	st	Z, r24
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	04 e4       	ldi	r16, 0x44	; 68
    2b0c:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b0e:	37 e5       	ldi	r19, 0x57	; 87
    2b10:	e3 2e       	mov	r14, r19
    2b12:	3a e7       	ldi	r19, 0x7A	; 122
    2b14:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2b16:	42 e0       	ldi	r20, 0x02	; 2
    2b18:	c4 2e       	mov	r12, r20
    2b1a:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2b1c:	aa 24       	eor	r10, r10
    2b1e:	a3 94       	inc	r10
    2b20:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2b22:	f8 01       	movw	r30, r16
    2b24:	81 91       	ld	r24, Z+
    2b26:	91 91       	ld	r25, Z+
    2b28:	8f 01       	movw	r16, r30
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	c9 f1       	breq	.+114    	; 0x2ba0 <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2b2e:	be 01       	movw	r22, r28
    2b30:	6f 5f       	subi	r22, 0xFF	; 255
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	09 dc       	rcall	.-2030   	; 0x2348 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2b36:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2b38:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3a:	89 2d       	mov	r24, r9
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	fc 01       	movw	r30, r24
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	ed 5d       	subi	r30, 0xDD	; 221
    2b46:	f6 4c       	sbci	r31, 0xC6	; 198
    2b48:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b4a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b4c:	40 83       	st	Z, r20
    2b4e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2b50:	fc 01       	movw	r30, r24
    2b52:	ee 0f       	add	r30, r30
    2b54:	ff 1f       	adc	r31, r31
    2b56:	ed 59       	subi	r30, 0x9D	; 157
    2b58:	f6 4c       	sbci	r31, 0xC6	; 198
    2b5a:	20 83       	st	Z, r18
    2b5c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2b5e:	88 0f       	add	r24, r24
    2b60:	99 1f       	adc	r25, r25
    2b62:	fc 01       	movw	r30, r24
    2b64:	ed 55       	subi	r30, 0x5D	; 93
    2b66:	f6 4c       	sbci	r31, 0xC6	; 198
    2b68:	10 82       	st	Z, r1
    2b6a:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	89 0d       	add	r24, r9
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	93 94       	inc	r9
    2b74:	93 94       	inc	r9
    2b76:	fc 01       	movw	r30, r24
    2b78:	ee 0f       	add	r30, r30
    2b7a:	ff 1f       	adc	r31, r31
    2b7c:	ed 5d       	subi	r30, 0xDD	; 221
    2b7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2b80:	e0 82       	st	Z, r14
    2b82:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2b84:	fc 01       	movw	r30, r24
    2b86:	ee 0f       	add	r30, r30
    2b88:	ff 1f       	adc	r31, r31
    2b8a:	ed 59       	subi	r30, 0x9D	; 157
    2b8c:	f6 4c       	sbci	r31, 0xC6	; 198
    2b8e:	c0 82       	st	Z, r12
    2b90:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	fc 01       	movw	r30, r24
    2b98:	ed 55       	subi	r30, 0x5D	; 93
    2b9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b9c:	a0 82       	st	Z, r10
    2b9e:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2ba0:	f8 e3       	ldi	r31, 0x38	; 56
    2ba2:	08 34       	cpi	r16, 0x48	; 72
    2ba4:	1f 07       	cpc	r17, r31
    2ba6:	09 f0       	breq	.+2      	; 0x2baa <ShowInventory+0xea>
    2ba8:	bc cf       	rjmp	.-136    	; 0x2b22 <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	89 0d       	add	r24, r9
    2bae:	ab 96       	adiw	r28, 0x2b	; 43
    2bb0:	eb e0       	ldi	r30, 0x0B	; 11
    2bb2:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__epilogue_restores__+0xe>

00002bb6 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2bb6:	a8 e0       	ldi	r26, 0x08	; 8
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e1 ee       	ldi	r30, 0xE1	; 225
    2bbc:	f5 e1       	ldi	r31, 0x15	; 21
    2bbe:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__prologue_saves__+0x8>
    2bc2:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2bc4:	ed dc       	rcall	.-1574   	; 0x25a0 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2bc6:	c3 01       	movw	r24, r6
    2bc8:	eb dc       	rcall	.-1578   	; 0x25a0 <CleanInput>
    2bca:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bcc:	29 e5       	ldi	r18, 0x59	; 89
    2bce:	3a e7       	ldi	r19, 0x7A	; 122
    2bd0:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr>
    2bd4:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x1>
    reactStr[1][number]=length;
    2bd8:	84 e0       	ldi	r24, 0x04	; 4
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x40>
    2be0:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x41>
    reactStr[2][number]=type;
    2be4:	01 e0       	ldi	r16, 0x01	; 1
    2be6:	10 e0       	ldi	r17, 0x00	; 0
    2be8:	00 93 a3 39 	sts	0x39A3, r16	; 0x8039a3 <reactStr+0x80>
    2bec:	10 93 a4 39 	sts	0x39A4, r17	; 0x8039a4 <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2bf0:	ff 20       	and	r15, r15
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <ProcessInput+0x40>
    2bf4:	54 c7       	rjmp	.+3752   	; 0x3a9e <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2bf6:	d3 01       	movw	r26, r6
    2bf8:	8c 91       	ld	r24, X
    2bfa:	88 37       	cpi	r24, 0x78	; 120
    2bfc:	09 f0       	breq	.+2      	; 0x2c00 <ProcessInput+0x4a>
    2bfe:	45 c0       	rjmp	.+138    	; 0x2c8a <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2c00:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2c04:	e8 2f       	mov	r30, r24
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	ee 0f       	add	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	ed 51       	subi	r30, 0x1D	; 29
    2c0e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c10:	20 81       	ld	r18, Z
    2c12:	31 81       	ldd	r19, Z+1	; 0x01
    2c14:	23 2b       	or	r18, r19
    2c16:	11 f0       	breq	.+4      	; 0x2c1c <ProcessInput+0x66>
    2c18:	81 11       	cpse	r24, r1
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c1c:	84 e4       	ldi	r24, 0x44	; 68
    2c1e:	96 e7       	ldi	r25, 0x76	; 118
    2c20:	13 c5       	rjmp	.+2598   	; 0x3648 <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2c22:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0x6>
    2c26:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
    2c2a:	88 23       	and	r24, r24
    2c2c:	b9 f0       	breq	.+46     	; 0x2c5c <ProcessInput+0xa6>
                --currDepth;
    2c2e:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2c32:	e1 50       	subi	r30, 0x01	; 1
    2c34:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	ee 0f       	add	r30, r30
    2c3c:	ff 1f       	adc	r31, r31
    2c3e:	ed 51       	subi	r30, 0x1D	; 29
    2c40:	f6 4c       	sbci	r31, 0xC6	; 198
    2c42:	63 e2       	ldi	r22, 0x23	; 35
    2c44:	7a e3       	ldi	r23, 0x3A	; 58
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	7e db       	rcall	.-2308   	; 0x2348 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2c4c:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0x4>
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2c56:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2c5a:	2a c2       	rjmp	.+1108   	; 0x30b0 <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2c5c:	80 91 45 3a 	lds	r24, 0x3A45	; 0x803a45 <currObj+0x22>
    2c60:	90 91 46 3a 	lds	r25, 0x3A46	; 0x803a46 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c64:	20 91 37 3a 	lds	r18, 0x3A37	; 0x803a37 <currObj+0x14>
    2c68:	30 91 38 3a 	lds	r19, 0x3A38	; 0x803a38 <currObj+0x15>
    2c6c:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    2c70:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    2c74:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    2c78:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    2c7c:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    2c80:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2c84:	80 91 4b 3a 	lds	r24, 0x3A4B	; 0x803a4b <currObj+0x28>
    2c88:	a9 c5       	rjmp	.+2898   	; 0x37dc <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2c8a:	85 36       	cpi	r24, 0x65	; 101
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <ProcessInput+0xde>
    2c8e:	8f 36       	cpi	r24, 0x6F	; 111
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <ProcessInput+0xde>
    2c92:	de c0       	rjmp	.+444    	; 0x2e50 <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2c94:	b2 e0       	ldi	r27, 0x02	; 2
    2c96:	fb 12       	cpse	r15, r27
    2c98:	c1 cf       	rjmp	.-126    	; 0x2c1c <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2c9a:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	f8 01       	movw	r30, r16
    2ca2:	ee 0f       	add	r30, r30
    2ca4:	ff 1f       	adc	r31, r31
    2ca6:	ed 51       	subi	r30, 0x1D	; 29
    2ca8:	f6 4c       	sbci	r31, 0xC6	; 198
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	d3 01       	movw	r26, r6
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	6c 91       	ld	r22, X
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	07 dc       	rcall	.-2034   	; 0x24c8 <FindChild>
    2cba:	00 0f       	add	r16, r16
    2cbc:	11 1f       	adc	r17, r17
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	eb 51       	subi	r30, 0x1B	; 27
    2cc2:	f6 4c       	sbci	r31, 0xC6	; 198
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2cc8:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    2ccc:	29 2f       	mov	r18, r25
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	f9 01       	movw	r30, r18
    2cd2:	ee 0f       	add	r30, r30
    2cd4:	ff 1f       	adc	r31, r31
    2cd6:	eb 51       	subi	r30, 0x1B	; 27
    2cd8:	f6 4c       	sbci	r31, 0xC6	; 198
    2cda:	40 81       	ld	r20, Z
    2cdc:	51 81       	ldd	r21, Z+1	; 0x01
    2cde:	41 15       	cp	r20, r1
    2ce0:	51 05       	cpc	r21, r1
    2ce2:	21 f0       	breq	.+8      	; 0x2cec <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2ce4:	62 ee       	ldi	r22, 0xE2	; 226
    2ce6:	78 e3       	ldi	r23, 0x38	; 56
    2ce8:	ca 01       	movw	r24, r20
    2cea:	1c c0       	rjmp	.+56     	; 0x2d24 <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2cec:	99 23       	and	r25, r25
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <ProcessInput+0x13c>
    2cf0:	dc c6       	rjmp	.+3512   	; 0x3aaa <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2cf2:	22 0f       	add	r18, r18
    2cf4:	33 1f       	adc	r19, r19
    2cf6:	f9 01       	movw	r30, r18
    2cf8:	ef 51       	subi	r30, 0x1F	; 31
    2cfa:	f6 4c       	sbci	r31, 0xC6	; 198
    2cfc:	d3 01       	movw	r26, r6
    2cfe:	11 96       	adiw	r26, 0x01	; 1
    2d00:	6c 91       	ld	r22, X
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	99 db       	rcall	.-2254   	; 0x243a <CheckLetter>
    2d08:	88 23       	and	r24, r24
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <ProcessInput+0x158>
    2d0c:	ce c6       	rjmp	.+3484   	; 0x3aaa <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2d0e:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	ee 0f       	add	r30, r30
    2d16:	ff 1f       	adc	r31, r31
    2d18:	ef 51       	subi	r30, 0x1F	; 31
    2d1a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d1c:	62 ee       	ldi	r22, 0xE2	; 226
    2d1e:	78 e3       	ldi	r23, 0x38	; 56
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	11 db       	rcall	.-2526   	; 0x2348 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2d26:	d3 01       	movw	r26, r6
    2d28:	8c 91       	ld	r24, X
    2d2a:	85 36       	cpi	r24, 0x65	; 101
    2d2c:	c1 f4       	brne	.+48     	; 0x2d5e <ProcessInput+0x1a8>
    2d2e:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3956+0x8>
    2d32:	80 fd       	sbrc	r24, 0
    2d34:	1d c0       	rjmp	.+58     	; 0x2d70 <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d36:	8d e9       	ldi	r24, 0x9D	; 157
    2d38:	99 e7       	ldi	r25, 0x79	; 121
    2d3a:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    2d3e:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    2d42:	8e e1       	ldi	r24, 0x1E	; 30
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    2d4a:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    2d56:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2d5a:	12 e0       	ldi	r17, 0x02	; 2
    2d5c:	97 c6       	rjmp	.+3374   	; 0x3a8c <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2d5e:	8f 36       	cpi	r24, 0x6F	; 111
    2d60:	39 f4       	brne	.+14     	; 0x2d70 <ProcessInput+0x1ba>
    2d62:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3956+0x8>
    2d66:	81 fd       	sbrc	r24, 1
    2d68:	03 c0       	rjmp	.+6      	; 0x2d70 <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d6a:	82 e8       	ldi	r24, 0x82	; 130
    2d6c:	99 e7       	ldi	r25, 0x79	; 121
    2d6e:	6c c4       	rjmp	.+2264   	; 0x3648 <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2d70:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3956+0x6>
    2d74:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
    2d78:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <ProcessInput+0x1cc>
    2d80:	49 c0       	rjmp	.+146    	; 0x2e14 <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2d82:	ae 2f       	mov	r26, r30
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	aa 0f       	add	r26, r26
    2d88:	bb 1f       	adc	r27, r27
    2d8a:	ab 51       	subi	r26, 0x1B	; 27
    2d8c:	b6 4c       	sbci	r27, 0xC6	; 198
    2d8e:	8d 91       	ld	r24, X+
    2d90:	9c 91       	ld	r25, X
    2d92:	89 2b       	or	r24, r25
    2d94:	11 f0       	breq	.+4      	; 0x2d9a <ProcessInput+0x1e4>
    2d96:	ef 5f       	subi	r30, 0xFF	; 255
    2d98:	01 c0       	rjmp	.+2      	; 0x2d9c <ProcessInput+0x1e6>
    2d9a:	e1 50       	subi	r30, 0x01	; 1
    2d9c:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2da0:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	ee 0f       	add	r30, r30
    2da8:	ff 1f       	adc	r31, r31
    2daa:	ed 51       	subi	r30, 0x1D	; 29
    2dac:	f6 4c       	sbci	r31, 0xC6	; 198
    2dae:	63 e2       	ldi	r22, 0x23	; 35
    2db0:	7a e3       	ldi	r23, 0x3A	; 58
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	c8 da       	rcall	.-2672   	; 0x2348 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2db8:	80 91 3f 3a 	lds	r24, 0x3A3F	; 0x803a3f <currObj+0x1c>
    2dbc:	90 91 40 3a 	lds	r25, 0x3A40	; 0x803a40 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dc0:	20 91 31 3a 	lds	r18, 0x3A31	; 0x803a31 <currObj+0xe>
    2dc4:	30 91 32 3a 	lds	r19, 0x3A32	; 0x803a32 <currObj+0xf>
    2dc8:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    2dcc:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    2dd0:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    2dd4:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    2dd8:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    2ddc:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2de0:	89 e5       	ldi	r24, 0x59	; 89
    2de2:	9a e7       	ldi	r25, 0x7A	; 122
    2de4:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x4>
    2de8:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x44>
    2df4:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x84>
    2e00:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2e04:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0x4>
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2e0e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2e12:	07 c4       	rjmp	.+2062   	; 0x3622 <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	ee 0f       	add	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	eb 51       	subi	r30, 0x1B	; 27
    2e1c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e1e:	10 82       	st	Z, r1
    2e20:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2e22:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3956+0x22>
    2e26:	90 91 05 39 	lds	r25, 0x3905	; 0x803905 <actObj1.3956+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e2a:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3956+0x14>
    2e2e:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3956+0x15>
    2e32:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    2e36:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    2e3a:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    2e3e:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    2e42:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    2e46:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2e4a:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <actObj1.3956+0x28>
    2e4e:	c6 c4       	rjmp	.+2444   	; 0x37dc <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2e50:	8c 36       	cpi	r24, 0x6C	; 108
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <ProcessInput+0x2a0>
    2e54:	59 c1       	rjmp	.+690    	; 0x3108 <ProcessInput+0x552>
    2e56:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
            if (inputLen == 1) {
    2e5a:	b1 e0       	ldi	r27, 0x01	; 1
    2e5c:	fb 12       	cpse	r15, r27
    2e5e:	f1 c0       	rjmp	.+482    	; 0x3042 <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e60:	80 91 3f 3a 	lds	r24, 0x3A3F	; 0x803a3f <currObj+0x1c>
    2e64:	90 91 40 3a 	lds	r25, 0x3A40	; 0x803a40 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e68:	40 91 31 3a 	lds	r20, 0x3A31	; 0x803a31 <currObj+0xe>
    2e6c:	50 91 32 3a 	lds	r21, 0x3A32	; 0x803a32 <currObj+0xf>
    2e70:	40 93 25 39 	sts	0x3925, r20	; 0x803925 <reactStr+0x2>
    2e74:	50 93 26 39 	sts	0x3926, r21	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    2e78:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    2e7c:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    2e80:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    2e84:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e88:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x4>
    2e8c:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x44>
    2e98:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    2e9c:	00 93 a7 39 	sts	0x39A7, r16	; 0x8039a7 <reactStr+0x84>
    2ea0:	10 93 a8 39 	sts	0x39A8, r17	; 0x8039a8 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ea4:	8b ee       	ldi	r24, 0xEB	; 235
    2ea6:	99 e7       	ldi	r25, 0x79	; 121
    2ea8:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <reactStr+0x6>
    2eac:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <reactStr+0x7>
    reactStr[1][number]=length;
    2eb0:	85 e1       	ldi	r24, 0x15	; 21
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	80 93 69 39 	sts	0x3969, r24	; 0x803969 <reactStr+0x46>
    2eb8:	90 93 6a 39 	sts	0x396A, r25	; 0x80396a <reactStr+0x47>
    reactStr[2][number]=type;
    2ebc:	00 93 a9 39 	sts	0x39A9, r16	; 0x8039a9 <reactStr+0x86>
    2ec0:	10 93 aa 39 	sts	0x39AA, r17	; 0x8039aa <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	ee 0f       	add	r30, r30
    2ec8:	ff 1f       	adc	r31, r31
    2eca:	eb 51       	subi	r30, 0x1B	; 27
    2ecc:	f6 4c       	sbci	r31, 0xC6	; 198
    2ece:	10 82       	st	Z, r1
    2ed0:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2ed2:	14 e0       	ldi	r17, 0x04	; 4
    2ed4:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ed6:	07 e5       	ldi	r16, 0x57	; 87
    2ed8:	e0 2e       	mov	r14, r16
    2eda:	0a e7       	ldi	r16, 0x7A	; 122
    2edc:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	c8 2e       	mov	r12, r24
    2ee2:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2ee4:	aa 24       	eor	r10, r10
    2ee6:	a3 94       	inc	r10
    2ee8:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2eea:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	8c 01       	movw	r16, r24
    2ef2:	00 0f       	add	r16, r16
    2ef4:	11 1f       	adc	r17, r17
    2ef6:	0b 51       	subi	r16, 0x1B	; 27
    2ef8:	16 4c       	sbci	r17, 0xC6	; 198
    2efa:	f8 01       	movw	r30, r16
    2efc:	40 81       	ld	r20, Z
    2efe:	51 81       	ldd	r21, Z+1	; 0x01
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	fc 01       	movw	r30, r24
    2f06:	ed 51       	subi	r30, 0x1D	; 29
    2f08:	f6 4c       	sbci	r31, 0xC6	; 198
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	db da       	rcall	.-2634   	; 0x24c8 <FindChild>
    2f12:	d8 01       	movw	r26, r16
    2f14:	8d 93       	st	X+, r24
    2f16:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2f18:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	ee 0f       	add	r30, r30
    2f20:	ff 1f       	adc	r31, r31
    2f22:	eb 51       	subi	r30, 0x1B	; 27
    2f24:	f6 4c       	sbci	r31, 0xC6	; 198
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <ProcessInput+0x37a>
    2f2e:	4a c0       	rjmp	.+148    	; 0x2fc4 <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2f30:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    2f34:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    2f38:	82 17       	cp	r24, r18
    2f3a:	93 07       	cpc	r25, r19
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <ProcessInput+0x38a>
    2f3e:	42 c0       	rjmp	.+132    	; 0x2fc4 <ProcessInput+0x40e>
    2f40:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    2f44:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    2f48:	82 17       	cp	r24, r18
    2f4a:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2f4c:	d9 f1       	breq	.+118    	; 0x2fc4 <ProcessInput+0x40e>
    2f4e:	62 ee       	ldi	r22, 0xE2	; 226
    2f50:	78 e3       	ldi	r23, 0x38	; 56
    2f52:	fa d9       	rcall	.-3084   	; 0x2348 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2f54:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x1a>
    2f58:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f5c:	e9 2d       	mov	r30, r9
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	df 01       	movw	r26, r30
    2f62:	aa 0f       	add	r26, r26
    2f64:	bb 1f       	adc	r27, r27
    2f66:	ad 5d       	subi	r26, 0xDD	; 221
    2f68:	b6 4c       	sbci	r27, 0xC6	; 198
    2f6a:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3956+0xc>
    2f6e:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3956+0xd>
    2f72:	2d 93       	st	X+, r18
    2f74:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2f76:	df 01       	movw	r26, r30
    2f78:	aa 0f       	add	r26, r26
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	ad 59       	subi	r26, 0x9D	; 157
    2f7e:	b6 4c       	sbci	r27, 0xC6	; 198
    2f80:	8d 93       	st	X+, r24
    2f82:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2f84:	ee 0f       	add	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	ed 55       	subi	r30, 0x5D	; 93
    2f8a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f8c:	10 82       	st	Z, r1
    2f8e:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	89 0d       	add	r24, r9
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	93 94       	inc	r9
    2f98:	93 94       	inc	r9
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	ee 0f       	add	r30, r30
    2f9e:	ff 1f       	adc	r31, r31
    2fa0:	ed 5d       	subi	r30, 0xDD	; 221
    2fa2:	f6 4c       	sbci	r31, 0xC6	; 198
    2fa4:	e0 82       	st	Z, r14
    2fa6:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2fa8:	fc 01       	movw	r30, r24
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	ed 59       	subi	r30, 0x9D	; 157
    2fb0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fb2:	c0 82       	st	Z, r12
    2fb4:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	fc 01       	movw	r30, r24
    2fbc:	ed 55       	subi	r30, 0x5D	; 93
    2fbe:	f6 4c       	sbci	r31, 0xC6	; 198
    2fc0:	a0 82       	st	Z, r10
    2fc2:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2fc4:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    2fc8:	82 2f       	mov	r24, r18
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	fc 01       	movw	r30, r24
    2fce:	ee 0f       	add	r30, r30
    2fd0:	ff 1f       	adc	r31, r31
    2fd2:	eb 51       	subi	r30, 0x1B	; 27
    2fd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fd6:	40 81       	ld	r20, Z
    2fd8:	51 81       	ldd	r21, Z+1	; 0x01
    2fda:	45 2b       	or	r20, r21
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <ProcessInput+0x42a>
    2fde:	85 cf       	rjmp	.-246    	; 0x2eea <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    2fe0:	22 23       	and	r18, r18
    2fe2:	61 f1       	breq	.+88     	; 0x303c <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    2fe4:	88 0f       	add	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	fc 01       	movw	r30, r24
    2fea:	ef 51       	subi	r30, 0x1F	; 31
    2fec:	f6 4c       	sbci	r31, 0xC6	; 198
    2fee:	62 ee       	ldi	r22, 0xE2	; 226
    2ff0:	78 e3       	ldi	r23, 0x38	; 56
    2ff2:	80 81       	ld	r24, Z
    2ff4:	91 81       	ldd	r25, Z+1	; 0x01
    2ff6:	a8 d9       	rcall	.-3248   	; 0x2348 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2ff8:	20 91 fc 38 	lds	r18, 0x38FC	; 0x8038fc <actObj1.3956+0x1a>
    2ffc:	30 91 fd 38 	lds	r19, 0x38FD	; 0x8038fd <actObj1.3956+0x1b>
    3000:	11 e0       	ldi	r17, 0x01	; 1
    3002:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3004:	89 2d       	mov	r24, r9
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	fc 01       	movw	r30, r24
    300a:	ee 0f       	add	r30, r30
    300c:	ff 1f       	adc	r31, r31
    300e:	ed 5d       	subi	r30, 0xDD	; 221
    3010:	f6 4c       	sbci	r31, 0xC6	; 198
    3012:	40 91 ee 38 	lds	r20, 0x38EE	; 0x8038ee <actObj1.3956+0xc>
    3016:	50 91 ef 38 	lds	r21, 0x38EF	; 0x8038ef <actObj1.3956+0xd>
    301a:	40 83       	st	Z, r20
    301c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    301e:	fc 01       	movw	r30, r24
    3020:	ee 0f       	add	r30, r30
    3022:	ff 1f       	adc	r31, r31
    3024:	ed 59       	subi	r30, 0x9D	; 157
    3026:	f6 4c       	sbci	r31, 0xC6	; 198
    3028:	20 83       	st	Z, r18
    302a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	fc 01       	movw	r30, r24
    3032:	ed 55       	subi	r30, 0x5D	; 93
    3034:	f6 4c       	sbci	r31, 0xC6	; 198
    3036:	10 82       	st	Z, r1
    3038:	11 82       	std	Z+1, r1	; 0x01
    303a:	28 c5       	rjmp	.+2640   	; 0x3a8c <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    303c:	1f ef       	ldi	r17, 0xFF	; 255
    303e:	19 0d       	add	r17, r9
    3040:	25 c5       	rjmp	.+2634   	; 0x3a8c <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3042:	ee 2e       	mov	r14, r30
    3044:	f1 2c       	mov	r15, r1
    3046:	f7 01       	movw	r30, r14
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	ed 51       	subi	r30, 0x1D	; 29
    304e:	f6 4c       	sbci	r31, 0xC6	; 198
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	d3 01       	movw	r26, r6
    3056:	11 96       	adiw	r26, 0x01	; 1
    3058:	6c 91       	ld	r22, X
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	34 da       	rcall	.-2968   	; 0x24c8 <FindChild>
    3060:	f7 01       	movw	r30, r14
    3062:	ee 0f       	add	r30, r30
    3064:	ff 1f       	adc	r31, r31
    3066:	eb 51       	subi	r30, 0x1B	; 27
    3068:	f6 4c       	sbci	r31, 0xC6	; 198
    306a:	80 83       	st	Z, r24
    306c:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    306e:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    3072:	29 2f       	mov	r18, r25
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	f9 01       	movw	r30, r18
    3078:	ee 0f       	add	r30, r30
    307a:	ff 1f       	adc	r31, r31
    307c:	eb 51       	subi	r30, 0x1B	; 27
    307e:	f6 4c       	sbci	r31, 0xC6	; 198
    3080:	40 81       	ld	r20, Z
    3082:	51 81       	ldd	r21, Z+1	; 0x01
    3084:	41 15       	cp	r20, r1
    3086:	51 05       	cpc	r21, r1
    3088:	21 f0       	breq	.+8      	; 0x3092 <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    308a:	62 ee       	ldi	r22, 0xE2	; 226
    308c:	78 e3       	ldi	r23, 0x38	; 56
    308e:	ca 01       	movw	r24, r20
    3090:	1c c0       	rjmp	.+56     	; 0x30ca <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    3092:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    3094:	81 f1       	breq	.+96     	; 0x30f6 <ProcessInput+0x540>
    3096:	22 0f       	add	r18, r18
    3098:	33 1f       	adc	r19, r19
    309a:	f9 01       	movw	r30, r18
    309c:	ef 51       	subi	r30, 0x1F	; 31
    309e:	f6 4c       	sbci	r31, 0xC6	; 198
    30a0:	d3 01       	movw	r26, r6
    30a2:	11 96       	adiw	r26, 0x01	; 1
    30a4:	6c 91       	ld	r22, X
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	c7 d9       	rcall	.-3186   	; 0x243a <CheckLetter>
    30ac:	81 11       	cpse	r24, r1
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    30b0:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    30b2:	ec c4       	rjmp	.+2520   	; 0x3a8c <ProcessInput+0xed6>
    30b4:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	ee 0f       	add	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	ef 51       	subi	r30, 0x1F	; 31
    30c0:	f6 4c       	sbci	r31, 0xC6	; 198
    30c2:	62 ee       	ldi	r22, 0xE2	; 226
    30c4:	78 e3       	ldi	r23, 0x38	; 56
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	3e d9       	rcall	.-3460   	; 0x2348 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    30cc:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3956+0x1c>
    30d0:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3956+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30d4:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3956+0xe>
    30d8:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3956+0xf>
    30dc:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    30e0:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    30e4:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    30e8:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    30ec:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    30f0:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
    30f4:	32 ce       	rjmp	.-924    	; 0x2d5a <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30f6:	81 ed       	ldi	r24, 0xD1	; 209
    30f8:	99 e7       	ldi	r25, 0x79	; 121
    30fa:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    30fe:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3102:	8a e1       	ldi	r24, 0x1A	; 26
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	c9 c2       	rjmp	.+1426   	; 0x369a <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    3108:	80 37       	cpi	r24, 0x70	; 112
    310a:	09 f0       	breq	.+2      	; 0x310e <ProcessInput+0x558>
    310c:	92 c0       	rjmp	.+292    	; 0x3232 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    310e:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3112:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3116:	89 2b       	or	r24, r25
    3118:	79 f0       	breq	.+30     	; 0x3138 <ProcessInput+0x582>
    311a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    311e:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3122:	89 2b       	or	r24, r25
    3124:	49 f0       	breq	.+18     	; 0x3138 <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3126:	87 e0       	ldi	r24, 0x07	; 7
    3128:	98 e7       	ldi	r25, 0x78	; 120
    312a:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    312e:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3132:	89 e5       	ldi	r24, 0x59	; 89
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	b1 c2       	rjmp	.+1378   	; 0x369a <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    3138:	b2 e0       	ldi	r27, 0x02	; 2
    313a:	fb 12       	cpse	r15, r27
    313c:	6f cd       	rjmp	.-1314   	; 0x2c1c <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    313e:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    3142:	10 e0       	ldi	r17, 0x00	; 0
    3144:	f8 01       	movw	r30, r16
    3146:	ee 0f       	add	r30, r30
    3148:	ff 1f       	adc	r31, r31
    314a:	ed 51       	subi	r30, 0x1D	; 29
    314c:	f6 4c       	sbci	r31, 0xC6	; 198
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	50 e0       	ldi	r21, 0x00	; 0
    3152:	d3 01       	movw	r26, r6
    3154:	11 96       	adiw	r26, 0x01	; 1
    3156:	6c 91       	ld	r22, X
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	b5 d9       	rcall	.-3222   	; 0x24c8 <FindChild>
    315e:	00 0f       	add	r16, r16
    3160:	11 1f       	adc	r17, r17
    3162:	f8 01       	movw	r30, r16
    3164:	eb 51       	subi	r30, 0x1B	; 27
    3166:	f6 4c       	sbci	r31, 0xC6	; 198
    3168:	80 83       	st	Z, r24
    316a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    316c:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	2f 5f       	subi	r18, 0xFF	; 255
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	22 0f       	add	r18, r18
    3178:	33 1f       	adc	r19, r19
    317a:	f9 01       	movw	r30, r18
    317c:	ed 51       	subi	r30, 0x1D	; 29
    317e:	f6 4c       	sbci	r31, 0xC6	; 198
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	09 f4       	brne	.+2      	; 0x318a <ProcessInput+0x5d4>
    3188:	38 c3       	rjmp	.+1648   	; 0x37fa <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    318a:	40 91 44 38 	lds	r20, 0x3844	; 0x803844 <inventory>
    318e:	50 91 45 38 	lds	r21, 0x3845	; 0x803845 <inventory+0x1>
    3192:	84 17       	cp	r24, r20
    3194:	95 07       	cpc	r25, r21
    3196:	39 f0       	breq	.+14     	; 0x31a6 <ProcessInput+0x5f0>
    3198:	40 91 46 38 	lds	r20, 0x3846	; 0x803846 <inventory+0x2>
    319c:	50 91 47 38 	lds	r21, 0x3847	; 0x803847 <inventory+0x3>
    31a0:	84 17       	cp	r24, r20
    31a2:	95 07       	cpc	r25, r21
    31a4:	c1 f4       	brne	.+48     	; 0x31d6 <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31a6:	82 ee       	ldi	r24, 0xE2	; 226
    31a8:	97 e7       	ldi	r25, 0x77	; 119
    31aa:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    31ae:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    31b2:	85 e2       	ldi	r24, 0x25	; 37
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    31ba:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    31c6:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    31ca:	f9 01       	movw	r30, r18
    31cc:	ed 51       	subi	r30, 0x1D	; 29
    31ce:	f6 4c       	sbci	r31, 0xC6	; 198
    31d0:	10 82       	st	Z, r1
    31d2:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    31d4:	c2 cd       	rjmp	.-1148   	; 0x2d5a <ProcessInput+0x1a4>
    31d6:	62 ee       	ldi	r22, 0xE2	; 226
    31d8:	78 e3       	ldi	r23, 0x38	; 56
    31da:	b6 d8       	rcall	.-3732   	; 0x2348 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    31dc:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj1.3956+0x7>
    31e0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
    31e4:	88 23       	and	r24, r24
    31e6:	09 f4       	brne	.+2      	; 0x31ea <ProcessInput+0x634>
    31e8:	e3 c2       	rjmp	.+1478   	; 0x37b0 <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    31ea:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3956+0xb>
    31ee:	88 23       	and	r24, r24
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <ProcessInput+0x63e>
    31f2:	14 cd       	rjmp	.-1496   	; 0x2c1c <ProcessInput+0x66>
                                if (inventory[0]) {
    31f4:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    31f8:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    31fc:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                                    inventory[1] = route[currDepth+1];
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	ee 0f       	add	r30, r30
    3204:	ff 1f       	adc	r31, r31
    3206:	eb 51       	subi	r30, 0x1B	; 27
    3208:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    320a:	89 2b       	or	r24, r25
    320c:	39 f0       	breq	.+14     	; 0x321c <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    3216:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    321a:	06 c0       	rjmp	.+12     	; 0x3228 <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    321c:	80 81       	ld	r24, Z
    321e:	91 81       	ldd	r25, Z+1	; 0x01
    3220:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    3224:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3228:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3956+0xa>
    322c:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
    3230:	2b c0       	rjmp	.+86     	; 0x3288 <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    3232:	84 36       	cpi	r24, 0x64	; 100
    3234:	d9 f4       	brne	.+54     	; 0x326c <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3236:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    323a:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	09 f0       	breq	.+2      	; 0x3244 <ProcessInput+0x68e>
    3242:	3c c4       	rjmp	.+2168   	; 0x3abc <ProcessInput+0xf06>
    3244:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3248:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    324c:	89 2b       	or	r24, r25
    324e:	49 f4       	brne	.+18     	; 0x3262 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3250:	86 ea       	ldi	r24, 0xA6	; 166
    3252:	97 e7       	ldi	r25, 0x77	; 119
    3254:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3258:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    325c:	86 e2       	ldi	r24, 0x26	; 38
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	72 cd       	rjmp	.-1308   	; 0x2d46 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3262:	b2 e0       	ldi	r27, 0x02	; 2
    3264:	fb 16       	cp	r15, r27
    3266:	09 f4       	brne	.+2      	; 0x326a <ProcessInput+0x6b4>
    3268:	8b c4       	rjmp	.+2326   	; 0x3b80 <ProcessInput+0xfca>
    326a:	d8 cc       	rjmp	.-1616   	; 0x2c1c <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    326c:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    326e:	81 f4       	brne	.+32     	; 0x3290 <ProcessInput+0x6da>
    3270:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3274:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3278:	89 2b       	or	r24, r25
    327a:	31 f4       	brne	.+12     	; 0x3288 <ProcessInput+0x6d2>
    327c:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3280:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3284:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    3286:	21 f3       	breq	.-56     	; 0x3250 <ProcessInput+0x69a>
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	1a dc       	rcall	.-1996   	; 0x2ac0 <ShowInventory>
    328c:	18 2f       	mov	r17, r24
    328e:	fe c3       	rjmp	.+2044   	; 0x3a8c <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3290:	9c e8       	ldi	r25, 0x8C	; 140
    3292:	98 0f       	add	r25, r24
    3294:	92 30       	cpi	r25, 0x02	; 2
    3296:	28 f0       	brcs	.+10     	; 0x32a2 <ProcessInput+0x6ec>
    3298:	87 36       	cpi	r24, 0x67	; 103
    329a:	19 f0       	breq	.+6      	; 0x32a2 <ProcessInput+0x6ec>
    329c:	82 37       	cpi	r24, 0x72	; 114
    329e:	09 f0       	breq	.+2      	; 0x32a2 <ProcessInput+0x6ec>
    32a0:	b5 c2       	rjmp	.+1386   	; 0x380c <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    32a2:	8e ef       	ldi	r24, 0xFE	; 254
    32a4:	8f 0d       	add	r24, r15
    32a6:	82 30       	cpi	r24, 0x02	; 2
    32a8:	08 f0       	brcs	.+2      	; 0x32ac <ProcessInput+0x6f6>
    32aa:	b8 cc       	rjmp	.-1680   	; 0x2c1c <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    32ac:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    32b0:	0e 2f       	mov	r16, r30
    32b2:	10 e0       	ldi	r17, 0x00	; 0
    32b4:	d3 01       	movw	r26, r6
    32b6:	af 0d       	add	r26, r15
    32b8:	b1 1d       	adc	r27, r1
    32ba:	11 97       	sbiw	r26, 0x01	; 1
    32bc:	f8 01       	movw	r30, r16
    32be:	ee 0f       	add	r30, r30
    32c0:	ff 1f       	adc	r31, r31
    32c2:	ed 51       	subi	r30, 0x1D	; 29
    32c4:	f6 4c       	sbci	r31, 0xC6	; 198
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	6c 91       	ld	r22, X
    32cc:	80 81       	ld	r24, Z
    32ce:	91 81       	ldd	r25, Z+1	; 0x01
    32d0:	fb d8       	rcall	.-3594   	; 0x24c8 <FindChild>
    32d2:	f8 01       	movw	r30, r16
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	eb 51       	subi	r30, 0x1B	; 27
    32da:	f6 4c       	sbci	r31, 0xC6	; 198
    32dc:	80 83       	st	Z, r24
    32de:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    32e0:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	ee 0f       	add	r30, r30
    32e8:	ff 1f       	adc	r31, r31
    32ea:	eb 51       	subi	r30, 0x1B	; 27
    32ec:	f6 4c       	sbci	r31, 0xC6	; 198
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <ProcessInput+0x742>
    32f6:	78 c2       	rjmp	.+1264   	; 0x37e8 <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    32f8:	f3 e0       	ldi	r31, 0x03	; 3
    32fa:	ff 12       	cpse	r15, r31
    32fc:	60 c1       	rjmp	.+704    	; 0x35be <ProcessInput+0xa08>
    32fe:	d3 01       	movw	r26, r6
    3300:	2c 91       	ld	r18, X
    3302:	25 37       	cpi	r18, 0x75	; 117
    3304:	19 f0       	breq	.+6      	; 0x330c <ProcessInput+0x756>
    3306:	27 36       	cpi	r18, 0x67	; 103
    3308:	09 f0       	breq	.+2      	; 0x330c <ProcessInput+0x756>
    330a:	59 c1       	rjmp	.+690    	; 0x35be <ProcessInput+0xa08>
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3310:	41 e6       	ldi	r20, 0x61	; 97
    3312:	c4 2e       	mov	r12, r20
    3314:	49 e7       	ldi	r20, 0x79	; 121
    3316:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    3318:	51 e2       	ldi	r21, 0x21	; 33
    331a:	a5 2e       	mov	r10, r21
    331c:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    331e:	88 24       	eor	r8, r8
    3320:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    3322:	91 2c       	mov	r9, r1
    3324:	e0 2e       	mov	r14, r16
    3326:	f1 2c       	mov	r15, r1
    3328:	c7 01       	movw	r24, r14
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	fc 01       	movw	r30, r24
    3330:	ec 5b       	subi	r30, 0xBC	; 188
    3332:	f7 4c       	sbci	r31, 0xC7	; 199
    3334:	7f 01       	movw	r14, r30
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
    333a:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    333c:	79 f0       	breq	.+30     	; 0x335c <ProcessInput+0x7a6>
    333e:	d3 01       	movw	r26, r6
    3340:	11 96       	adiw	r26, 0x01	; 1
    3342:	6c 91       	ld	r22, X
    3344:	7a d8       	rcall	.-3852   	; 0x243a <CheckLetter>
    3346:	88 23       	and	r24, r24
    3348:	49 f0       	breq	.+18     	; 0x335c <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    334a:	67 eb       	ldi	r22, 0xB7	; 183
    334c:	78 e3       	ldi	r23, 0x38	; 56
    334e:	f7 01       	movw	r30, r14
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	0e 94 a4 11 	call	0x2348	; 0x2348 <PopulateObject>
                                    x = 2;
    3358:	02 e0       	ldi	r16, 0x02	; 2
    335a:	1d c0       	rjmp	.+58     	; 0x3396 <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    335c:	01 30       	cpi	r16, 0x01	; 1
    335e:	d1 f4       	brne	.+52     	; 0x3394 <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3360:	e1 2f       	mov	r30, r17
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	df 01       	movw	r26, r30
    3366:	aa 0f       	add	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	ad 5d       	subi	r26, 0xDD	; 221
    336c:	b6 4c       	sbci	r27, 0xC6	; 198
    336e:	cd 92       	st	X+, r12
    3370:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    3372:	df 01       	movw	r26, r30
    3374:	aa 0f       	add	r26, r26
    3376:	bb 1f       	adc	r27, r27
    3378:	ad 59       	subi	r26, 0x9D	; 157
    337a:	b6 4c       	sbci	r27, 0xC6	; 198
    337c:	ad 92       	st	X+, r10
    337e:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3380:	ee 0f       	add	r30, r30
    3382:	ff 1f       	adc	r31, r31
    3384:	ed 55       	subi	r30, 0x5D	; 93
    3386:	f6 4c       	sbci	r31, 0xC6	; 198
    3388:	80 82       	st	Z, r8
    338a:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    338c:	d3 01       	movw	r26, r6
    338e:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3390:	1f 5f       	subi	r17, 0xFF	; 255
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <ProcessInput+0x7e0>
    3394:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    3396:	0f 5f       	subi	r16, 0xFF	; 255
    3398:	01 30       	cpi	r16, 0x01	; 1
    339a:	21 f2       	breq	.-120    	; 0x3324 <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    339c:	f3 01       	movw	r30, r6
    339e:	80 81       	ld	r24, Z
    33a0:	88 23       	and	r24, r24
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <ProcessInput+0x7f0>
    33a4:	73 c3       	rjmp	.+1766   	; 0x3a8c <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    33a6:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	ee 0f       	add	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	eb 51       	subi	r30, 0x1B	; 27
    33b2:	f6 4c       	sbci	r31, 0xC6	; 198
    33b4:	62 ee       	ldi	r22, 0xE2	; 226
    33b6:	78 e3       	ldi	r23, 0x38	; 56
    33b8:	80 81       	ld	r24, Z
    33ba:	91 81       	ldd	r25, Z+1	; 0x01
    33bc:	0e 94 a4 11 	call	0x2348	; 0x2348 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    33c0:	e0 90 00 39 	lds	r14, 0x3900	; 0x803900 <actObj1.3956+0x1e>
    33c4:	f0 90 01 39 	lds	r15, 0x3901	; 0x803901 <actObj1.3956+0x1f>
    33c8:	f1 e0       	ldi	r31, 0x01	; 1
    33ca:	ef 16       	cp	r14, r31
    33cc:	f1 04       	cpc	r15, r1
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <ProcessInput+0x81c>
    33d0:	89 c0       	rjmp	.+274    	; 0x34e4 <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    33d2:	93 01       	movw	r18, r6
    33d4:	2e 5f       	subi	r18, 0xFE	; 254
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	61 e0       	ldi	r22, 0x01	; 1
    33dc:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3956+0x10>
    33e0:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <actObj1.3956+0x11>
    33e4:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
                                if (data[2] == '1') {
    33e8:	d3 01       	movw	r26, r6
    33ea:	12 96       	adiw	r26, 0x02	; 2
    33ec:	3c 91       	ld	r19, X
    33ee:	31 33       	cpi	r19, 0x31	; 49
    33f0:	09 f0       	breq	.+2      	; 0x33f4 <ProcessInput+0x83e>
    33f2:	4c c3       	rjmp	.+1688   	; 0x3a8c <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    33f4:	20 91 c2 38 	lds	r18, 0x38C2	; 0x8038c2 <actObj2.3957+0xb>
                                    if ((item < 31)||(item > 34)) {
    33f8:	51 ee       	ldi	r21, 0xE1	; 225
    33fa:	52 0f       	add	r21, r18
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	41 0f       	add	r20, r17
    3400:	81 2f       	mov	r24, r17
    3402:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3404:	fc 01       	movw	r30, r24
    3406:	ee 0f       	add	r30, r30
    3408:	ff 1f       	adc	r31, r31
    340a:	ed 5d       	subi	r30, 0xDD	; 221
    340c:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    340e:	54 30       	cpi	r21, 0x04	; 4
    3410:	b0 f0       	brcs	.+44     	; 0x343e <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3412:	21 e0       	ldi	r18, 0x01	; 1
    3414:	39 e7       	ldi	r19, 0x79	; 121
    3416:	20 83       	st	Z, r18
    3418:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    341a:	fc 01       	movw	r30, r24
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31
    3420:	ed 59       	subi	r30, 0x9D	; 157
    3422:	f6 4c       	sbci	r31, 0xC6	; 198
    3424:	2a e1       	ldi	r18, 0x1A	; 26
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	20 83       	st	Z, r18
    342a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	fc 01       	movw	r30, r24
    3432:	ed 55       	subi	r30, 0x5D	; 93
    3434:	f6 4c       	sbci	r31, 0xC6	; 198
    3436:	e0 82       	st	Z, r14
    3438:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    343a:	14 2f       	mov	r17, r20
    343c:	27 c3       	rjmp	.+1614   	; 0x3a8c <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    343e:	60 e5       	ldi	r22, 0x50	; 80
    3440:	75 e7       	ldi	r23, 0x75	; 117
    3442:	60 83       	st	Z, r22
    3444:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3446:	fc 01       	movw	r30, r24
    3448:	ee 0f       	add	r30, r30
    344a:	ff 1f       	adc	r31, r31
    344c:	ed 59       	subi	r30, 0x9D	; 157
    344e:	f6 4c       	sbci	r31, 0xC6	; 198
    3450:	62 eb       	ldi	r22, 0xB2	; 178
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	60 83       	st	Z, r22
    3456:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	fc 01       	movw	r30, r24
    345e:	ed 55       	subi	r30, 0x5D	; 93
    3460:	f6 4c       	sbci	r31, 0xC6	; 198
    3462:	e0 82       	st	Z, r14
    3464:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3466:	84 2f       	mov	r24, r20
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	fc 01       	movw	r30, r24
    346c:	ee 0f       	add	r30, r30
    346e:	ff 1f       	adc	r31, r31
    3470:	ed 5d       	subi	r30, 0xDD	; 221
    3472:	f6 4c       	sbci	r31, 0xC6	; 198
    3474:	49 e5       	ldi	r20, 0x59	; 89
    3476:	5a e7       	ldi	r21, 0x7A	; 122
    3478:	40 83       	st	Z, r20
    347a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    347c:	fc 01       	movw	r30, r24
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	ed 59       	subi	r30, 0x9D	; 157
    3484:	f6 4c       	sbci	r31, 0xC6	; 198
    3486:	42 e0       	ldi	r20, 0x02	; 2
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	40 83       	st	Z, r20
    348c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	fc 01       	movw	r30, r24
    3494:	ed 55       	subi	r30, 0x5D	; 93
    3496:	f6 4c       	sbci	r31, 0xC6	; 198
    3498:	e0 82       	st	Z, r14
    349a:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	81 0f       	add	r24, r17
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	1d 5f       	subi	r17, 0xFD	; 253
    34a4:	fc 01       	movw	r30, r24
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	ed 5d       	subi	r30, 0xDD	; 221
    34ac:	f6 4c       	sbci	r31, 0xC6	; 198
    34ae:	4d ea       	ldi	r20, 0xAD	; 173
    34b0:	58 e7       	ldi	r21, 0x78	; 120
    34b2:	40 83       	st	Z, r20
    34b4:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    34b6:	fc 01       	movw	r30, r24
    34b8:	ee 0f       	add	r30, r30
    34ba:	ff 1f       	adc	r31, r31
    34bc:	ed 59       	subi	r30, 0x9D	; 157
    34be:	f6 4c       	sbci	r31, 0xC6	; 198
    34c0:	42 e1       	ldi	r20, 0x12	; 18
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	40 83       	st	Z, r20
    34c6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    34c8:	88 0f       	add	r24, r24
    34ca:	99 1f       	adc	r25, r25
    34cc:	fc 01       	movw	r30, r24
    34ce:	ed 55       	subi	r30, 0x5D	; 93
    34d0:	f6 4c       	sbci	r31, 0xC6	; 198
    34d2:	e0 82       	st	Z, r14
    34d4:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    34d6:	30 93 12 39 	sts	0x3912, r19	; 0x803912 <specialInput>
                                        specialInput[1] = item;
    34da:	20 93 13 39 	sts	0x3913, r18	; 0x803913 <specialInput+0x1>
                                        specialInput[2] = 0;
    34de:	10 92 14 39 	sts	0x3914, r1	; 0x803914 <specialInput+0x2>
    34e2:	d4 c2       	rjmp	.+1448   	; 0x3a8c <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    34e4:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3956+0x9>
    34e8:	80 91 c2 38 	lds	r24, 0x38C2	; 0x8038c2 <actObj2.3957+0xb>
    34ec:	98 13       	cpse	r25, r24
    34ee:	2e c0       	rjmp	.+92     	; 0x354c <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    34f0:	20 91 08 39 	lds	r18, 0x3908	; 0x803908 <actObj1.3956+0x26>
    34f4:	30 91 09 39 	lds	r19, 0x3909	; 0x803909 <actObj1.3956+0x27>
    34f8:	01 e0       	ldi	r16, 0x01	; 1
    34fa:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34fc:	81 2f       	mov	r24, r17
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	fc 01       	movw	r30, r24
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	ed 5d       	subi	r30, 0xDD	; 221
    3508:	f6 4c       	sbci	r31, 0xC6	; 198
    350a:	40 91 fa 38 	lds	r20, 0x38FA	; 0x8038fa <actObj1.3956+0x18>
    350e:	50 91 fb 38 	lds	r21, 0x38FB	; 0x8038fb <actObj1.3956+0x19>
    3512:	40 83       	st	Z, r20
    3514:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3516:	fc 01       	movw	r30, r24
    3518:	ee 0f       	add	r30, r30
    351a:	ff 1f       	adc	r31, r31
    351c:	ed 59       	subi	r30, 0x9D	; 157
    351e:	f6 4c       	sbci	r31, 0xC6	; 198
    3520:	20 83       	st	Z, r18
    3522:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3524:	88 0f       	add	r24, r24
    3526:	99 1f       	adc	r25, r25
    3528:	fc 01       	movw	r30, r24
    352a:	ed 55       	subi	r30, 0x5D	; 93
    352c:	f6 4c       	sbci	r31, 0xC6	; 198
    352e:	10 82       	st	Z, r1
    3530:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3532:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x2a>
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    353c:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3540:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3956+0xa>
    3544:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3548:	10 2f       	mov	r17, r16
    354a:	a0 c2       	rjmp	.+1344   	; 0x3a8c <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    354c:	f3 01       	movw	r30, r6
    354e:	80 81       	ld	r24, Z
    3550:	85 37       	cpi	r24, 0x75	; 117
    3552:	99 f4       	brne	.+38     	; 0x357a <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3554:	81 2f       	mov	r24, r17
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	fc 01       	movw	r30, r24
    355a:	ee 0f       	add	r30, r30
    355c:	ff 1f       	adc	r31, r31
    355e:	ed 5d       	subi	r30, 0xDD	; 221
    3560:	f6 4c       	sbci	r31, 0xC6	; 198
    3562:	21 e0       	ldi	r18, 0x01	; 1
    3564:	39 e7       	ldi	r19, 0x79	; 121
    3566:	20 83       	st	Z, r18
    3568:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    356a:	fc 01       	movw	r30, r24
    356c:	ee 0f       	add	r30, r30
    356e:	ff 1f       	adc	r31, r31
    3570:	ed 59       	subi	r30, 0x9D	; 157
    3572:	f6 4c       	sbci	r31, 0xC6	; 198
    3574:	2a e1       	ldi	r18, 0x1A	; 26
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	15 c0       	rjmp	.+42     	; 0x35a4 <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    357a:	87 36       	cpi	r24, 0x67	; 103
    357c:	09 f0       	breq	.+2      	; 0x3580 <ProcessInput+0x9ca>
    357e:	86 c2       	rjmp	.+1292   	; 0x3a8c <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3580:	81 2f       	mov	r24, r17
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	fc 01       	movw	r30, r24
    3586:	ee 0f       	add	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	ed 5d       	subi	r30, 0xDD	; 221
    358c:	f6 4c       	sbci	r31, 0xC6	; 198
    358e:	2f e9       	ldi	r18, 0x9F	; 159
    3590:	36 e7       	ldi	r19, 0x76	; 118
    3592:	20 83       	st	Z, r18
    3594:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3596:	fc 01       	movw	r30, r24
    3598:	ee 0f       	add	r30, r30
    359a:	ff 1f       	adc	r31, r31
    359c:	ed 59       	subi	r30, 0x9D	; 157
    359e:	f6 4c       	sbci	r31, 0xC6	; 198
    35a0:	28 e2       	ldi	r18, 0x28	; 40
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	20 83       	st	Z, r18
    35a6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35a8:	88 0f       	add	r24, r24
    35aa:	99 1f       	adc	r25, r25
    35ac:	fc 01       	movw	r30, r24
    35ae:	ed 55       	subi	r30, 0x5D	; 93
    35b0:	f6 4c       	sbci	r31, 0xC6	; 198
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	80 83       	st	Z, r24
    35b8:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    35ba:	1f 5f       	subi	r17, 0xFF	; 255
    35bc:	67 c2       	rjmp	.+1230   	; 0x3a8c <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    35be:	62 ee       	ldi	r22, 0xE2	; 226
    35c0:	78 e3       	ldi	r23, 0x38	; 56
    35c2:	0e 94 a4 11 	call	0x2348	; 0x2348 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    35c6:	d3 01       	movw	r26, r6
    35c8:	8c 91       	ld	r24, X
    35ca:	84 37       	cpi	r24, 0x74	; 116
    35cc:	61 f5       	brne	.+88     	; 0x3626 <ProcessInput+0xa70>
    35ce:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3956+0x8>
    35d2:	83 fd       	sbrc	r24, 3
    35d4:	43 c0       	rjmp	.+134    	; 0x365c <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35d6:	8b e1       	ldi	r24, 0x1B	; 27
    35d8:	99 e7       	ldi	r25, 0x79	; 121
    35da:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    35de:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    35e2:	8e e1       	ldi	r24, 0x1E	; 30
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    35ea:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    35f6:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    35fa:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x1a>
    35fe:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3602:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3956+0xc>
    3606:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3956+0xd>
    360a:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x4>
    360e:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    3612:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x44>
    3616:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    361a:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x84>
    361e:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3622:	13 e0       	ldi	r17, 0x03	; 3
    3624:	33 c2       	rjmp	.+1126   	; 0x3a8c <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    3626:	85 37       	cpi	r24, 0x75	; 117
    3628:	39 f4       	brne	.+14     	; 0x3638 <ProcessInput+0xa82>
    362a:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3956+0x8>
    362e:	84 fd       	sbrc	r24, 4
    3630:	15 c0       	rjmp	.+42     	; 0x365c <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	99 e7       	ldi	r25, 0x79	; 121
    3636:	3b c2       	rjmp	.+1142   	; 0x3aae <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3638:	82 37       	cpi	r24, 0x72	; 114
    363a:	69 f4       	brne	.+26     	; 0x3656 <ProcessInput+0xaa0>
    363c:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3956+0x8>
    3640:	85 fd       	sbrc	r24, 5
    3642:	0c c0       	rjmp	.+24     	; 0x365c <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3644:	86 ee       	ldi	r24, 0xE6	; 230
    3646:	98 e7       	ldi	r25, 0x78	; 120
    3648:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    364c:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3650:	8b e1       	ldi	r24, 0x1B	; 27
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	78 cb       	rjmp	.-2320   	; 0x2d46 <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3656:	87 36       	cpi	r24, 0x67	; 103
    3658:	09 f4       	brne	.+2      	; 0x365c <ProcessInput+0xaa6>
    365a:	e0 ca       	rjmp	.-2624   	; 0x2c1c <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    365c:	00 91 00 39 	lds	r16, 0x3900	; 0x803900 <actObj1.3956+0x1e>
    3660:	10 91 01 39 	lds	r17, 0x3901	; 0x803901 <actObj1.3956+0x1f>
    3664:	01 30       	cpi	r16, 0x01	; 1
    3666:	11 05       	cpc	r17, r1
    3668:	09 f5       	brne	.+66     	; 0x36ac <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    366a:	93 01       	movw	r18, r6
    366c:	2e 5f       	subi	r18, 0xFE	; 254
    366e:	3f 4f       	sbci	r19, 0xFF	; 255
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	61 e0       	ldi	r22, 0x01	; 1
    3674:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3956+0x10>
    3678:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <actObj1.3956+0x11>
    367c:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
                                if (data[2] == '1') {
    3680:	f3 01       	movw	r30, r6
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	81 33       	cpi	r24, 0x31	; 49
    3686:	09 f0       	breq	.+2      	; 0x368a <ProcessInput+0xad4>
    3688:	13 cd       	rjmp	.-1498   	; 0x30b0 <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    368a:	85 e2       	ldi	r24, 0x25	; 37
    368c:	95 e7       	ldi	r25, 0x75	; 117
    368e:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3692:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3696:	8b e2       	ldi	r24, 0x2B	; 43
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    369e:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    36a2:	00 93 a5 39 	sts	0x39A5, r16	; 0x8039a5 <reactStr+0x82>
    36a6:	10 93 a6 39 	sts	0x39A6, r17	; 0x8039a6 <reactStr+0x83>
    36aa:	57 cb       	rjmp	.-2386   	; 0x2d5a <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    36ac:	01 15       	cp	r16, r1
    36ae:	11 05       	cpc	r17, r1
    36b0:	09 f4       	brne	.+2      	; 0x36b4 <ProcessInput+0xafe>
    36b2:	58 c0       	rjmp	.+176    	; 0x3764 <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b4:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3956+0x10>
    36b8:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <actObj1.3956+0x11>
    36bc:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    36c0:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    36c4:	00 93 65 39 	sts	0x3965, r16	; 0x803965 <reactStr+0x42>
    36c8:	10 93 66 39 	sts	0x3966, r17	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    36cc:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    36d0:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36d4:	89 e5       	ldi	r24, 0x59	; 89
    36d6:	9a e7       	ldi	r25, 0x7A	; 122
    36d8:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x4>
    36dc:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    36e0:	82 e0       	ldi	r24, 0x02	; 2
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x44>
    36e8:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x84>
    36f4:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36f8:	2d ea       	ldi	r18, 0xAD	; 173
    36fa:	38 e7       	ldi	r19, 0x78	; 120
    36fc:	20 93 29 39 	sts	0x3929, r18	; 0x803929 <reactStr+0x6>
    3700:	30 93 2a 39 	sts	0x392A, r19	; 0x80392a <reactStr+0x7>
    reactStr[1][number]=length;
    3704:	22 e1       	ldi	r18, 0x12	; 18
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	20 93 69 39 	sts	0x3969, r18	; 0x803969 <reactStr+0x46>
    370c:	30 93 6a 39 	sts	0x396A, r19	; 0x80396a <reactStr+0x47>
    reactStr[2][number]=type;
    3710:	80 93 a9 39 	sts	0x39A9, r24	; 0x8039a9 <reactStr+0x86>
    3714:	90 93 aa 39 	sts	0x39AA, r25	; 0x8039aa <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    3718:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3956+0x20>
    371c:	90 91 03 39 	lds	r25, 0x3903	; 0x803903 <actObj1.3956+0x21>
    3720:	40 97       	sbiw	r24, 0x10	; 16
    3722:	30 f0       	brcs	.+12     	; 0x3730 <ProcessInput+0xb7a>
    3724:	8f e0       	ldi	r24, 0x0F	; 15
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	80 93 02 39 	sts	0x3902, r24	; 0x803902 <actObj1.3956+0x20>
    372c:	90 93 03 39 	sts	0x3903, r25	; 0x803903 <actObj1.3956+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3730:	22 e1       	ldi	r18, 0x12	; 18
    3732:	39 e3       	ldi	r19, 0x39	; 57
    3734:	40 e0       	ldi	r20, 0x00	; 0
    3736:	60 91 02 39 	lds	r22, 0x3902	; 0x803902 <actObj1.3956+0x20>
    373a:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x12>
    373e:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3956+0x13>
    3742:	0e 94 b1 07 	call	0xf62	; 0xf62 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3746:	62 e1       	ldi	r22, 0x12	; 18
    3748:	79 e3       	ldi	r23, 0x39	; 57
    374a:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3956+0x20>
    374e:	0e 94 ba 10 	call	0x2174	; 0x2174 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3752:	e0 91 02 39 	lds	r30, 0x3902	; 0x803902 <actObj1.3956+0x20>
    3756:	f0 91 03 39 	lds	r31, 0x3903	; 0x803903 <actObj1.3956+0x21>
    375a:	ee 5e       	subi	r30, 0xEE	; 238
    375c:	f6 4c       	sbci	r31, 0xC6	; 198
    375e:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3760:	14 e0       	ldi	r17, 0x04	; 4
    3762:	94 c1       	rjmp	.+808    	; 0x3a8c <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3764:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj1.3956+0x7>
    3768:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
    376c:	88 23       	and	r24, r24
    376e:	01 f1       	breq	.+64     	; 0x37b0 <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3770:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3956+0x26>
    3774:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <actObj1.3956+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3778:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3956+0x18>
    377c:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3956+0x19>
    3780:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    3784:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3788:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    378c:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    3790:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    3794:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3798:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x2a>
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    37a2:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    37a6:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3956+0xa>
    37aa:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
    37ae:	d5 ca       	rjmp	.-2646   	; 0x2d5a <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    37b0:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3956+0x24>
    37b4:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3956+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37b8:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3956+0x16>
    37bc:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3956+0x17>
    37c0:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    37c4:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    37c8:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    37cc:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    37d0:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    37d4:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    37d8:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <actObj1.3956+0x29>
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    37e2:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    37e6:	b9 ca       	rjmp	.-2702   	; 0x2d5a <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    37e8:	d3 01       	movw	r26, r6
    37ea:	8c 91       	ld	r24, X
    37ec:	84 37       	cpi	r24, 0x74	; 116
    37ee:	11 f0       	breq	.+4      	; 0x37f4 <ProcessInput+0xc3e>
    37f0:	87 36       	cpi	r24, 0x67	; 103
    37f2:	19 f4       	brne	.+6      	; 0x37fa <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37f4:	89 e3       	ldi	r24, 0x39	; 57
    37f6:	99 e7       	ldi	r25, 0x79	; 121
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <ProcessInput+0xc48>
    37fa:	8d e4       	ldi	r24, 0x4D	; 77
    37fc:	99 e7       	ldi	r25, 0x79	; 121
    37fe:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3802:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3806:	84 e1       	ldi	r24, 0x14	; 20
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	9d ca       	rjmp	.-2758   	; 0x2d46 <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    380c:	81 36       	cpi	r24, 0x61	; 97
    380e:	09 f0       	breq	.+2      	; 0x3812 <ProcessInput+0xc5c>
    3810:	4f cc       	rjmp	.-1890   	; 0x30b0 <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3812:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <specialPassed>
    3816:	82 30       	cpi	r24, 0x02	; 2
    3818:	08 f4       	brcc	.+2      	; 0x381c <ProcessInput+0xc66>
    381a:	c7 c0       	rjmp	.+398    	; 0x39aa <ProcessInput+0xdf4>
                if (data[1] > 0) {
    381c:	f3 01       	movw	r30, r6
    381e:	21 81       	ldd	r18, Z+1	; 0x01
    3820:	22 23       	and	r18, r18
    3822:	09 f4       	brne	.+2      	; 0x3826 <ProcessInput+0xc70>
    3824:	af c0       	rjmp	.+350    	; 0x3984 <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3826:	ce 01       	movw	r24, r28
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	7c 01       	movw	r14, r24
    382c:	88 e0       	ldi	r24, 0x08	; 8
    382e:	d7 01       	movw	r26, r14
    3830:	1d 92       	st	X+, r1
    3832:	8a 95       	dec	r24
    3834:	e9 f7       	brne	.-6      	; 0x3830 <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3836:	20 53       	subi	r18, 0x30	; 48
    3838:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    383a:	32 81       	ldd	r19, Z+2	; 0x02
    383c:	31 53       	subi	r19, 0x31	; 49
    383e:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3840:	83 81       	ldd	r24, Z+3	; 0x03
    3842:	81 36       	cpi	r24, 0x61	; 97
    3844:	11 f4       	brne	.+4      	; 0x384a <ProcessInput+0xc94>
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	0c c0       	rjmp	.+24     	; 0x3862 <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    384a:	85 36       	cpi	r24, 0x65	; 101
    384c:	19 f4       	brne	.+6      	; 0x3854 <ProcessInput+0xc9e>
    384e:	f3 01       	movw	r30, r6
    3850:	13 82       	std	Z+3, r1	; 0x03
    3852:	08 c0       	rjmp	.+16     	; 0x3864 <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    3854:	86 36       	cpi	r24, 0x66	; 102
    3856:	19 f4       	brne	.+6      	; 0x385e <ProcessInput+0xca8>
    3858:	83 e0       	ldi	r24, 0x03	; 3
    385a:	83 83       	std	Z+3, r24	; 0x03
    385c:	03 c0       	rjmp	.+6      	; 0x3864 <ProcessInput+0xcae>
                    else data[3] = 2;
    385e:	82 e0       	ldi	r24, 0x02	; 2
    3860:	f3 01       	movw	r30, r6
    3862:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3864:	21 fd       	sbrc	r18, 1
    3866:	04 c0       	rjmp	.+8      	; 0x3870 <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	dc 01       	movw	r26, r24
    386e:	04 c0       	rjmp	.+8      	; 0x3878 <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	a0 e1       	ldi	r26, 0x10	; 16
    3876:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3878:	20 ff       	sbrs	r18, 0
    387a:	03 c0       	rjmp	.+6      	; 0x3882 <ProcessInput+0xccc>
    387c:	9f 5f       	subi	r25, 0xFF	; 255
    387e:	af 4f       	sbci	r26, 0xFF	; 255
    3880:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3882:	f3 01       	movw	r30, r6
    3884:	23 81       	ldd	r18, Z+3	; 0x03
    3886:	21 fd       	sbrc	r18, 1
    3888:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    388a:	20 ff       	sbrs	r18, 0
    388c:	03 c0       	rjmp	.+6      	; 0x3894 <ProcessInput+0xcde>
    388e:	40 96       	adiw	r24, 0x10	; 16
    3890:	a1 1d       	adc	r26, r1
    3892:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3894:	31 ff       	sbrs	r19, 1
    3896:	03 c0       	rjmp	.+6      	; 0x389e <ProcessInput+0xce8>
    3898:	90 5f       	subi	r25, 0xF0	; 240
    389a:	af 4f       	sbci	r26, 0xFF	; 255
    389c:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    389e:	30 ff       	sbrs	r19, 0
    38a0:	03 c0       	rjmp	.+6      	; 0x38a8 <ProcessInput+0xcf2>
    38a2:	01 96       	adiw	r24, 0x01	; 1
    38a4:	a1 1d       	adc	r26, r1
    38a6:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    38a8:	40 91 43 38 	lds	r20, 0x3843	; 0x803843 <whoami>
    38ac:	24 e0       	ldi	r18, 0x04	; 4
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	24 1b       	sub	r18, r20
    38b2:	31 09       	sbc	r19, r1
    38b4:	04 c0       	rjmp	.+8      	; 0x38be <ProcessInput+0xd08>
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	aa 1f       	adc	r26, r26
    38bc:	bb 1f       	adc	r27, r27
    38be:	2a 95       	dec	r18
    38c0:	d2 f7       	brpl	.-12     	; 0x38b6 <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38c2:	28 ec       	ldi	r18, 0xC8	; 200
    38c4:	34 e7       	ldi	r19, 0x74	; 116
    38c6:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    38ca:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    38ce:	20 e2       	ldi	r18, 0x20	; 32
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	20 93 65 39 	sts	0x3965, r18	; 0x803965 <reactStr+0x42>
    38d6:	30 93 66 39 	sts	0x3966, r19	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    38da:	21 e0       	ldi	r18, 0x01	; 1
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	20 93 a5 39 	sts	0x39A5, r18	; 0x8039a5 <reactStr+0x82>
    38e2:	30 93 a6 39 	sts	0x39A6, r19	; 0x8039a6 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38e6:	4d e9       	ldi	r20, 0x9D	; 157
    38e8:	54 e7       	ldi	r21, 0x74	; 116
    38ea:	40 93 27 39 	sts	0x3927, r20	; 0x803927 <reactStr+0x4>
    38ee:	50 93 28 39 	sts	0x3928, r21	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    38f2:	42 e0       	ldi	r20, 0x02	; 2
    38f4:	50 e0       	ldi	r21, 0x00	; 0
    38f6:	40 93 67 39 	sts	0x3967, r20	; 0x803967 <reactStr+0x44>
    38fa:	50 93 68 39 	sts	0x3968, r21	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    38fe:	20 93 a7 39 	sts	0x39A7, r18	; 0x8039a7 <reactStr+0x84>
    3902:	30 93 a8 39 	sts	0x39A8, r19	; 0x8039a8 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3906:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3908:	f7 01       	movw	r30, r14
    390a:	e0 0f       	add	r30, r16
    390c:	f1 1d       	adc	r31, r1
    390e:	28 2f       	mov	r18, r24
    3910:	2f 70       	andi	r18, 0x0F	; 15
    3912:	20 83       	st	Z, r18
                        answer /= 16;
    3914:	44 e0       	ldi	r20, 0x04	; 4
    3916:	b6 95       	lsr	r27
    3918:	a7 95       	ror	r26
    391a:	97 95       	ror	r25
    391c:	87 95       	ror	r24
    391e:	4a 95       	dec	r20
    3920:	d1 f7       	brne	.-12     	; 0x3916 <ProcessInput+0xd60>
                        if (answer == 0) break;
    3922:	00 97       	sbiw	r24, 0x00	; 0
    3924:	a1 05       	cpc	r26, r1
    3926:	b1 05       	cpc	r27, r1
    3928:	49 f4       	brne	.+18     	; 0x393c <ProcessInput+0xd86>
    392a:	23 e2       	ldi	r18, 0x23	; 35
    392c:	c2 2e       	mov	r12, r18
    392e:	29 e3       	ldi	r18, 0x39	; 57
    3930:	d2 2e       	mov	r13, r18
    3932:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3934:	aa 24       	eor	r10, r10
    3936:	a3 94       	inc	r10
    3938:	b1 2c       	mov	r11, r1
    393a:	02 c0       	rjmp	.+4      	; 0x3940 <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    393c:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    393e:	e4 cf       	rjmp	.-56     	; 0x3908 <ProcessInput+0xd52>
    3940:	b2 e0       	ldi	r27, 0x02	; 2
    3942:	cb 0e       	add	r12, r27
    3944:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3946:	08 30       	cpi	r16, 0x08	; 8
    3948:	08 f0       	brcs	.+2      	; 0x394c <ProcessInput+0xd96>
    394a:	9e c0       	rjmp	.+316    	; 0x3a88 <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    394c:	1f 5f       	subi	r17, 0xFF	; 255
    394e:	f7 01       	movw	r30, r14
    3950:	e0 0f       	add	r30, r16
    3952:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3954:	80 81       	ld	r24, Z
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	83 57       	subi	r24, 0x73	; 115
    395a:	9b 48       	sbci	r25, 0x8B	; 139
    395c:	d6 01       	movw	r26, r12
    395e:	14 96       	adiw	r26, 0x04	; 4
    3960:	8d 93       	st	X+, r24
    3962:	9c 93       	st	X, r25
    3964:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3966:	f6 01       	movw	r30, r12
    3968:	ec 5b       	subi	r30, 0xBC	; 188
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	a0 82       	st	Z, r10
    396e:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3970:	e0 5c       	subi	r30, 0xC0	; 192
    3972:	ff 4f       	sbci	r31, 0xFF	; 255
    3974:	a0 82       	st	Z, r10
    3976:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3978:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3956+0xa>
    397c:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3980:	0f 5f       	subi	r16, 0xFF	; 255
    3982:	de cf       	rjmp	.-68     	; 0x3940 <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3984:	88 ee       	ldi	r24, 0xE8	; 232
    3986:	94 e7       	ldi	r25, 0x74	; 116
    3988:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    398c:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3990:	8d e3       	ldi	r24, 0x3D	; 61
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    3998:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    39a4:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
    39a8:	6e c0       	rjmp	.+220    	; 0x3a86 <ProcessInput+0xed0>
    39aa:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	ee 0f       	add	r30, r30
    39b2:	ff 1f       	adc	r31, r31
    39b4:	eb 51       	subi	r30, 0x1B	; 27
    39b6:	f6 4c       	sbci	r31, 0xC6	; 198
    39b8:	62 ee       	ldi	r22, 0xE2	; 226
    39ba:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	09 f0       	breq	.+2      	; 0x39c2 <ProcessInput+0xe0c>
    39c0:	46 c0       	rjmp	.+140    	; 0x3a4e <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	0e 94 a4 11 	call	0x2348	; 0x2348 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    39ca:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj1.3956+0x7>
    39ce:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
    39d2:	88 23       	and	r24, r24
    39d4:	01 f1       	breq	.+64     	; 0x3a16 <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    39d6:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3956+0x26>
    39da:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <actObj1.3956+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39de:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3956+0x18>
    39e2:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3956+0x19>
    39e6:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    39ea:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    39ee:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    39f2:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    39f6:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    39fa:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    39fe:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x2a>
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3a08:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3a0c:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3956+0xa>
    3a10:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
    3a14:	38 c0       	rjmp	.+112    	; 0x3a86 <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3a16:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3956+0x24>
    3a1a:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3956+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a1e:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3956+0x16>
    3a22:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3956+0x17>
    3a26:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x2>
    3a2a:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3a2e:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    3a32:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    3a36:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x82>
    3a3a:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3a3e:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <actObj1.3956+0x29>
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3a48:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3a4c:	1c c0       	rjmp	.+56     	; 0x3a86 <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3a4e:	80 81       	ld	r24, Z
    3a50:	91 81       	ldd	r25, Z+1	; 0x01
    3a52:	0e 94 a4 11 	call	0x2348	; 0x2348 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a56:	80 e6       	ldi	r24, 0x60	; 96
    3a58:	98 e7       	ldi	r25, 0x78	; 120
    3a5a:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3a5e:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3a62:	8d e4       	ldi	r24, 0x4D	; 77
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    3a6a:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    3a76:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3a7a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <getClock>
    3a7e:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <PunishmentTime>
    3a82:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3a86:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3a88:	10 92 12 39 	sts	0x3912, r1	; 0x803912 <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3a8c:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <specialInput>
    3a90:	88 23       	and	r24, r24
    3a92:	19 f0       	breq	.+6      	; 0x3a9a <ProcessInput+0xee4>
    3a94:	10 93 22 39 	sts	0x3922, r17	; 0x803922 <responseList>
    3a98:	8b c0       	rjmp	.+278    	; 0x3bb0 <ProcessInput+0xffa>
    3a9a:	81 2f       	mov	r24, r17
    3a9c:	01 c0       	rjmp	.+2      	; 0x3aa0 <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	0e 94 28 11 	call	0x2250	; 0x2250 <SetStandardResponse>
    3aa4:	80 93 22 39 	sts	0x3922, r24	; 0x803922 <responseList>
    3aa8:	83 c0       	rjmp	.+262    	; 0x3bb0 <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3aaa:	81 ed       	ldi	r24, 0xD1	; 209
    3aac:	99 e7       	ldi	r25, 0x79	; 121
    3aae:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3ab2:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3ab6:	8a e1       	ldi	r24, 0x1A	; 26
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	45 c9       	rjmp	.-3446   	; 0x2d46 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3abc:	f2 e0       	ldi	r31, 0x02	; 2
    3abe:	ff 12       	cpse	r15, r31
    3ac0:	ad c8       	rjmp	.-3750   	; 0x2c1c <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3ac2:	f3 01       	movw	r30, r6
    3ac4:	61 81       	ldd	r22, Z+1	; 0x01
    3ac6:	0e 94 1d 12 	call	0x243a	; 0x243a <CheckLetter>
    3aca:	88 23       	and	r24, r24
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <ProcessInput+0xf1a>
    3ace:	58 c0       	rjmp	.+176    	; 0x3b80 <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3ad0:	00 e0       	ldi	r16, 0x00	; 0
    3ad2:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3ad4:	00 0f       	add	r16, r16
    3ad6:	11 1f       	adc	r17, r17
    3ad8:	0c 5b       	subi	r16, 0xBC	; 188
    3ada:	17 4c       	sbci	r17, 0xC7	; 199
    3adc:	62 ee       	ldi	r22, 0xE2	; 226
    3ade:	78 e3       	ldi	r23, 0x38	; 56
    3ae0:	d8 01       	movw	r26, r16
    3ae2:	8d 91       	ld	r24, X+
    3ae4:	9c 91       	ld	r25, X
    3ae6:	0e 94 a4 11 	call	0x2348	; 0x2348 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3aea:	86 e9       	ldi	r24, 0x96	; 150
    3aec:	97 e7       	ldi	r25, 0x77	; 119
    3aee:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3af2:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3af6:	80 e1       	ldi	r24, 0x10	; 16
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x42>
    3afe:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x43>
    reactStr[2][number]=type;
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x82>
    3b0a:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3b0e:	20 91 fc 38 	lds	r18, 0x38FC	; 0x8038fc <actObj1.3956+0x1a>
    3b12:	30 91 fd 38 	lds	r19, 0x38FD	; 0x8038fd <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b16:	40 91 ee 38 	lds	r20, 0x38EE	; 0x8038ee <actObj1.3956+0xc>
    3b1a:	50 91 ef 38 	lds	r21, 0x38EF	; 0x8038ef <actObj1.3956+0xd>
    3b1e:	40 93 27 39 	sts	0x3927, r20	; 0x803927 <reactStr+0x4>
    3b22:	50 93 28 39 	sts	0x3928, r21	; 0x803928 <reactStr+0x5>
    reactStr[1][number]=length;
    3b26:	20 93 67 39 	sts	0x3967, r18	; 0x803967 <reactStr+0x44>
    3b2a:	30 93 68 39 	sts	0x3968, r19	; 0x803968 <reactStr+0x45>
    reactStr[2][number]=type;
    3b2e:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x84>
    3b32:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b36:	29 e5       	ldi	r18, 0x59	; 89
    3b38:	3a e7       	ldi	r19, 0x7A	; 122
    3b3a:	20 93 29 39 	sts	0x3929, r18	; 0x803929 <reactStr+0x6>
    3b3e:	30 93 2a 39 	sts	0x392A, r19	; 0x80392a <reactStr+0x7>
    reactStr[1][number]=length;
    3b42:	22 e0       	ldi	r18, 0x02	; 2
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	20 93 69 39 	sts	0x3969, r18	; 0x803969 <reactStr+0x46>
    3b4a:	30 93 6a 39 	sts	0x396A, r19	; 0x80396a <reactStr+0x47>
    reactStr[2][number]=type;
    3b4e:	80 93 a9 39 	sts	0x39A9, r24	; 0x8039a9 <reactStr+0x86>
    3b52:	90 93 aa 39 	sts	0x39AA, r25	; 0x8039aa <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b56:	29 e5       	ldi	r18, 0x59	; 89
    3b58:	37 e7       	ldi	r19, 0x77	; 119
    3b5a:	20 93 2b 39 	sts	0x392B, r18	; 0x80392b <reactStr+0x8>
    3b5e:	30 93 2c 39 	sts	0x392C, r19	; 0x80392c <reactStr+0x9>
    reactStr[1][number]=length;
    3b62:	2d e3       	ldi	r18, 0x3D	; 61
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	20 93 6b 39 	sts	0x396B, r18	; 0x80396b <reactStr+0x48>
    3b6a:	30 93 6c 39 	sts	0x396C, r19	; 0x80396c <reactStr+0x49>
    reactStr[2][number]=type;
    3b6e:	80 93 ab 39 	sts	0x39AB, r24	; 0x8039ab <reactStr+0x88>
    3b72:	90 93 ac 39 	sts	0x39AC, r25	; 0x8039ac <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3b76:	f8 01       	movw	r30, r16
    3b78:	10 82       	st	Z, r1
    3b7a:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3b7c:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3b7e:	86 cf       	rjmp	.-244    	; 0x3a8c <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b80:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3b84:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	49 f0       	breq	.+18     	; 0x3b9e <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3b8c:	f3 01       	movw	r30, r6
    3b8e:	61 81       	ldd	r22, Z+1	; 0x01
    3b90:	0e 94 1d 12 	call	0x243a	; 0x243a <CheckLetter>
    3b94:	88 23       	and	r24, r24
    3b96:	19 f0       	breq	.+6      	; 0x3b9e <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b98:	01 e0       	ldi	r16, 0x01	; 1
    3b9a:	10 e0       	ldi	r17, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b9c:	9b cf       	rjmp	.-202    	; 0x3ad4 <ProcessInput+0xf1e>
    3b9e:	81 e6       	ldi	r24, 0x61	; 97
    3ba0:	99 e7       	ldi	r25, 0x79	; 121
    3ba2:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x2>
    3ba6:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x3>
    reactStr[1][number]=length;
    3baa:	81 e2       	ldi	r24, 0x21	; 33
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3bae:	cb c8       	rjmp	.-3690   	; 0x2d46 <ProcessInput+0x190>
    3bb0:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3bb2:	10 82       	st	Z, r1
    3bb4:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3bb8:	1d ba       	out	0x1d, r1	; 29
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	28 96       	adiw	r28, 0x08	; 8
    3bbe:	ee e0       	ldi	r30, 0x0E	; 14
    3bc0:	37 c1       	rjmp	.+622    	; 0x3e30 <__epilogue_restores__+0x8>

00003bc2 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3bc2:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3bc4:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <PunishmentTime>
    3bc8:	90 91 10 39 	lds	r25, 0x3910	; 0x803910 <PunishmentTime+0x1>
    3bcc:	89 2b       	or	r24, r25
    3bce:	09 f1       	breq	.+66     	; 0x3c12 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3bd0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <getClock>
        if (PunishmentCount < PunishmentTime)
    3bd4:	20 91 0f 39 	lds	r18, 0x390F	; 0x80390f <PunishmentTime>
    3bd8:	30 91 10 39 	lds	r19, 0x3910	; 0x803910 <PunishmentTime+0x1>
    3bdc:	82 17       	cp	r24, r18
    3bde:	93 07       	cpc	r25, r19
    3be0:	08 f4       	brcc	.+2      	; 0x3be4 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3be2:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3be4:	ac 01       	movw	r20, r24
    3be6:	42 1b       	sub	r20, r18
    3be8:	53 0b       	sbc	r21, r19
    3bea:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3bec:	4b 30       	cpi	r20, 0x0B	; 11
    3bee:	51 05       	cpc	r21, r1
    3bf0:	30 f0       	brcs	.+12     	; 0x3bfe <TextAdventure+0x3c>
            PunishmentTime = 0;
    3bf2:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <PunishmentTime>
    3bf6:	10 92 10 39 	sts	0x3910, r1	; 0x803910 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3bfa:	2a e0       	ldi	r18, 0x0A	; 10
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3bfe:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    3c02:	81 11       	cpse	r24, r1
    3c04:	06 c0       	rjmp	.+12     	; 0x3c12 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3c06:	65 e0       	ldi	r22, 0x05	; 5
    3c08:	62 1b       	sub	r22, r18
    3c0a:	8a e0       	ldi	r24, 0x0A	; 10
    3c0c:	82 1b       	sub	r24, r18
    3c0e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3c12:	0e 94 f5 12 	call	0x25ea	; 0x25ea <CheckSend>
    3c16:	88 23       	and	r24, r24
    3c18:	11 f0       	breq	.+4      	; 0x3c1e <TextAdventure+0x5c>
    3c1a:	c1 e0       	ldi	r28, 0x01	; 1
    3c1c:	18 c0       	rjmp	.+48     	; 0x3c4e <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3c1e:	0e 94 4b 13 	call	0x2696	; 0x2696 <CheckResponse>
    3c22:	c8 2f       	mov	r28, r24
    3c24:	81 11       	cpse	r24, r1
    3c26:	f9 cf       	rjmp	.-14     	; 0x3c1a <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3c28:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <PunishmentTime>
    3c2c:	90 91 10 39 	lds	r25, 0x3910	; 0x803910 <PunishmentTime+0x1>
    3c30:	89 2b       	or	r24, r25
    3c32:	69 f4       	brne	.+26     	; 0x3c4e <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3c34:	86 e7       	ldi	r24, 0x76	; 118
    3c36:	98 e3       	ldi	r25, 0x38	; 56
    3c38:	0e 94 8b 13 	call	0x2716	; 0x2716 <CheckInput>
    3c3c:	c8 2f       	mov	r28, r24
    3c3e:	81 11       	cpse	r24, r1
    3c40:	05 c0       	rjmp	.+10     	; 0x3c4c <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3c42:	86 e7       	ldi	r24, 0x76	; 118
    3c44:	98 e3       	ldi	r25, 0x38	; 56
    3c46:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <ProcessInput>
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3c4c:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3c4e:	8c 2f       	mov	r24, r28
    3c50:	cf 91       	pop	r28
    3c52:	08 95       	ret

00003c54 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3c54:	0e 94 91 03 	call	0x722	; 0x722 <Setup>
    LoadGameState();
    3c58:	0e 94 c3 09 	call	0x1386	; 0x1386 <LoadGameState>
    gameState[0]|=1;
    3c5c:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <gameState>
    3c60:	81 60       	ori	r24, 0x01	; 1
    3c62:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <gameState>

    //Check if fine
    if (SelfTest()) {
    3c66:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <SelfTest>
    3c6a:	88 23       	and	r24, r24
    3c6c:	21 f0       	breq	.+8      	; 0x3c76 <main+0x22>
        WipeAfterBoot(1);
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	0e 94 87 09 	call	0x130e	; 0x130e <WipeAfterBoot>
    3c74:	ff cf       	rjmp	.-2      	; 0x3c74 <main+0x20>
    3c76:	c0 91 78 be 	lds	r28, 0xBE78	; 0x80be78 <__bss_end+0x835b>
                if (buttonState != 0xff) {
                    iLED[CAT] = dimValue;
                    if ((effect & 0xffe0)==0)
                        effect = 0x13f + (buttonState << 5);
                } else {
                    iLED[CAT] = 0;
    3c7a:	d0 e0       	ldi	r29, 0x00	; 0
    3c7c:	c2 53       	subi	r28, 0x32	; 50
    3c7e:	d5 4c       	sbci	r29, 0xC5	; 197
                if (lightsensorSum>>6 < 128) {
                    dimValue = lightsensorSum>>5;
                    if (dimValue < 8)
                        dimValue = 8;
                } else {
                    dimValue = 255;
    3c80:	1f ef       	ldi	r17, 0xFF	; 255
                lightsensorSum -= (lightsensorSum>>6);
                lightsensorSum += adcPhot>>4;
                if (lightsensorSum>>6 < 128) {
                    dimValue = lightsensorSum>>5;
                    if (dimValue < 8)
                        dimValue = 8;
    3c82:	08 e0       	ldi	r16, 0x08	; 8

    //Startup
    } else {

        while (TRUE) {
            if (GenerateAudio()) {
    3c84:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <GenerateAudio>
    3c88:	88 23       	and	r24, r24
    3c8a:	e1 f3       	breq	.-8      	; 0x3c84 <main+0x30>

                //Some sound effects and button readout 
                lastButtonState = buttonState;
    3c8c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3c90:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
                buttonState = CheckButtons();
    3c94:	0e 94 13 08 	call	0x1026	; 0x1026 <CheckButtons>
    3c98:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
                if (buttonState != 0xff) {
    3c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c9e:	a9 f0       	breq	.+42     	; 0x3cca <main+0x76>
                    iLED[CAT] = dimValue;
    3ca0:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    3ca4:	98 83       	st	Y, r25
                    if ((effect & 0xffe0)==0)
    3ca6:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <effect>
    3caa:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <effect+0x1>
    3cae:	20 7e       	andi	r18, 0xE0	; 224
    3cb0:	23 2b       	or	r18, r19
    3cb2:	61 f4       	brne	.+24     	; 0x3ccc <main+0x78>
                        effect = 0x13f + (buttonState << 5);
    3cb4:	20 e2       	ldi	r18, 0x20	; 32
    3cb6:	82 9f       	mul	r24, r18
    3cb8:	c0 01       	movw	r24, r0
    3cba:	11 24       	eor	r1, r1
    3cbc:	81 5c       	subi	r24, 0xC1	; 193
    3cbe:	9e 4f       	sbci	r25, 0xFE	; 254
    3cc0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3cc4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3cc8:	01 c0       	rjmp	.+2      	; 0x3ccc <main+0x78>
                } else {
                    iLED[CAT] = 0;
    3cca:	18 82       	st	Y, r1
                }
                --buttonMark;
    3ccc:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    3cd0:	81 50       	subi	r24, 0x01	; 1
    3cd2:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>

                //Switch between audio port input (badge to badge comms) and onboard temperature sensor
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3cd6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3cda:	82 31       	cpi	r24, 0x12	; 18
    3cdc:	19 f4       	brne	.+6      	; 0x3ce4 <main+0x90>
    3cde:	0e 94 04 08 	call	0x1008	; 0x1008 <SelectAuIn>
    3ce2:	02 c0       	rjmp	.+4      	; 0x3ce8 <main+0x94>
    3ce4:	0e 94 f5 07 	call	0xfea	; 0xfea <SelectTSens>

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
    3ce8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    3cec:	81 11       	cpse	r24, r1
    3cee:	19 c0       	rjmp	.+50     	; 0x3d22 <main+0xce>
    3cf0:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0xa>
    3cf4:	81 11       	cpse	r24, r1
    3cf6:	15 c0       	rjmp	.+42     	; 0x3d22 <main+0xce>
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
    3cf8:	8a e7       	ldi	r24, 0x7A	; 122
    3cfa:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
                //Switch between audio port input (badge to badge comms) and onboard temperature sensor
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
    3cfe:	88 23       	and	r24, r24
    3d00:	81 f0       	breq	.+32     	; 0x3d22 <main+0xce>
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
    3d02:	8b e7       	ldi	r24, 0x7B	; 123
    3d04:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
    3d08:	88 23       	and	r24, r24
    3d0a:	59 f0       	breq	.+22     	; 0x3d22 <main+0xce>
                     CheckState(123) &&         // Finished Lanyard
                     CheckState(124) &&         // Connected to 3 others
    3d0c:	8c e7       	ldi	r24, 0x7C	; 124
    3d0e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
    3d12:	88 23       	and	r24, r24
    3d14:	31 f0       	breq	.+12     	; 0x3d22 <main+0xce>
                     CheckState(124) &&         // Connected to 3 others
                     CheckState(127)) {         // Finished the text adventure (implies state 125 and 126)
    3d16:	8f e7       	ldi	r24, 0x7F	; 127
    3d18:	0e 94 68 09 	call	0x12d0	; 0x12d0 <CheckState>
                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
                     CheckState(124) &&         // Connected to 3 others
    3d1c:	81 11       	cpse	r24, r1
                     CheckState(127)) {         // Finished the text adventure (implies state 125 and 126)
                
                    //Completed!!!
                    VictoryDance();
    3d1e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <VictoryDance>
                }

                //Light effects
                GenerateBlinks();
    3d22:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GenerateBlinks>

                //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
                TextAdventure();
    3d26:	4d df       	rcall	.-358    	; 0x3bc2 <TextAdventure>

                //Other games & user interaction checks
                MagnetMaze();
    3d28:	0e 94 94 02 	call	0x528	; 0x528 <MagnetMaze>
                LanyardCode();
    3d2c:	0e 94 97 01 	call	0x32e	; 0x32e <LanyardCode>
                BastetDictates();
    3d30:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <BastetDictates>
                MakeFriends();
    3d34:	0e 94 8d 00 	call	0x11a	; 0x11a <MakeFriends>

                //Save progress
                SaveGameState();
    3d38:	0e 94 c0 08 	call	0x1180	; 0x1180 <SaveGameState>

                //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
                if (adcPhot < 10) UpdateState(116);
    3d3c:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    3d40:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    3d44:	0a 97       	sbiw	r24, 0x0a	; 10
    3d46:	18 f4       	brcc	.+6      	; 0x3d4e <main+0xfa>
    3d48:	84 e7       	ldi	r24, 0x74	; 116
    3d4a:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>
                if (adcPhot > 100) UpdateState(128+116);
    3d4e:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    3d52:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    3d56:	85 36       	cpi	r24, 0x65	; 101
    3d58:	91 05       	cpc	r25, r1
    3d5a:	18 f0       	brcs	.+6      	; 0x3d62 <main+0x10e>
    3d5c:	84 ef       	ldi	r24, 0xF4	; 244
    3d5e:	0e 94 47 09 	call	0x128e	; 0x128e <UpdateState>

                lightsensorSum -= (lightsensorSum>>6);
    3d62:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <lightsensorSum>
    3d66:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3d6a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3d6e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3d72:	46 e0       	ldi	r20, 0x06	; 6
    3d74:	36 95       	lsr	r19
    3d76:	27 95       	ror	r18
    3d78:	4a 95       	dec	r20
    3d7a:	e1 f7       	brne	.-8      	; 0x3d74 <main+0x120>
    3d7c:	82 1b       	sub	r24, r18
    3d7e:	93 0b       	sbc	r25, r19
    3d80:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <lightsensorSum>
    3d84:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <lightsensorSum+0x1>
                lightsensorSum += adcPhot>>4;
    3d88:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    3d8c:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    3d90:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <lightsensorSum>
    3d94:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3d98:	54 e0       	ldi	r21, 0x04	; 4
    3d9a:	96 95       	lsr	r25
    3d9c:	87 95       	ror	r24
    3d9e:	5a 95       	dec	r21
    3da0:	e1 f7       	brne	.-8      	; 0x3d9a <main+0x146>
    3da2:	82 0f       	add	r24, r18
    3da4:	93 1f       	adc	r25, r19
    3da6:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <lightsensorSum>
    3daa:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <lightsensorSum+0x1>
                if (lightsensorSum>>6 < 128) {
    3dae:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3db2:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3db6:	81 15       	cp	r24, r1
    3db8:	90 42       	sbci	r25, 0x20	; 32
    3dba:	90 f4       	brcc	.+36     	; 0x3de0 <main+0x18c>
                    dimValue = lightsensorSum>>5;
    3dbc:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3dc0:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3dc4:	25 e0       	ldi	r18, 0x05	; 5
    3dc6:	96 95       	lsr	r25
    3dc8:	87 95       	ror	r24
    3dca:	2a 95       	dec	r18
    3dcc:	e1 f7       	brne	.-8      	; 0x3dc6 <main+0x172>
    3dce:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>
                    if (dimValue < 8)
    3dd2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    3dd6:	88 30       	cpi	r24, 0x08	; 8
    3dd8:	28 f4       	brcc	.+10     	; 0x3de4 <main+0x190>
                        dimValue = 8;
    3dda:	00 93 0c 38 	sts	0x380C, r16	; 0x80380c <dimValue>
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <main+0x190>
                } else {
                    dimValue = 255;
    3de0:	10 93 0c 38 	sts	0x380C, r17	; 0x80380c <dimValue>
                }

                //Check temperature
                HotSummer();
    3de4:	0e 94 01 0a 	call	0x1402	; 0x1402 <HotSummer>
    3de8:	4d cf       	rjmp	.-358    	; 0x3c84 <main+0x30>

00003dea <__tablejump2__>:
    3dea:	ee 0f       	add	r30, r30
    3dec:	ff 1f       	adc	r31, r31
    3dee:	05 90       	lpm	r0, Z+
    3df0:	f4 91       	lpm	r31, Z
    3df2:	e0 2d       	mov	r30, r0
    3df4:	09 94       	ijmp

00003df6 <__prologue_saves__>:
    3df6:	2f 92       	push	r2
    3df8:	3f 92       	push	r3
    3dfa:	4f 92       	push	r4
    3dfc:	5f 92       	push	r5
    3dfe:	6f 92       	push	r6
    3e00:	7f 92       	push	r7
    3e02:	8f 92       	push	r8
    3e04:	9f 92       	push	r9
    3e06:	af 92       	push	r10
    3e08:	bf 92       	push	r11
    3e0a:	cf 92       	push	r12
    3e0c:	df 92       	push	r13
    3e0e:	ef 92       	push	r14
    3e10:	ff 92       	push	r15
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	ca 1b       	sub	r28, r26
    3e20:	db 0b       	sbc	r29, r27
    3e22:	cd bf       	out	0x3d, r28	; 61
    3e24:	de bf       	out	0x3e, r29	; 62
    3e26:	09 94       	ijmp

00003e28 <__epilogue_restores__>:
    3e28:	2a 88       	ldd	r2, Y+18	; 0x12
    3e2a:	39 88       	ldd	r3, Y+17	; 0x11
    3e2c:	48 88       	ldd	r4, Y+16	; 0x10
    3e2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e30:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e32:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e34:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e36:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e38:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e3a:	b9 84       	ldd	r11, Y+9	; 0x09
    3e3c:	c8 84       	ldd	r12, Y+8	; 0x08
    3e3e:	df 80       	ldd	r13, Y+7	; 0x07
    3e40:	ee 80       	ldd	r14, Y+6	; 0x06
    3e42:	fd 80       	ldd	r15, Y+5	; 0x05
    3e44:	0c 81       	ldd	r16, Y+4	; 0x04
    3e46:	1b 81       	ldd	r17, Y+3	; 0x03
    3e48:	aa 81       	ldd	r26, Y+2	; 0x02
    3e4a:	b9 81       	ldd	r27, Y+1	; 0x01
    3e4c:	ce 0f       	add	r28, r30
    3e4e:	d1 1d       	adc	r29, r1
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	ed 01       	movw	r28, r26
    3e56:	08 95       	ret

00003e58 <_exit>:
    3e58:	f8 94       	cli

00003e5a <__stop_program>:
    3e5a:	ff cf       	rjmp	.-2      	; 0x3e5a <__stop_program>
