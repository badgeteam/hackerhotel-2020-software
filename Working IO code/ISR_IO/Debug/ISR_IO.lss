
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00803800  00003f00  00003fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e06  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fa  0000be06  00003e06  00003eba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002ec  00803830  00803830  00003fe4  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004014  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006e4f  00000000  00000000  00004384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028a3  00000000  00000000  0000b1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003cb7  00000000  00000000  0000da76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000994  00000000  00000000  00011730  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a80  00000000  00000000  000120c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000044bb  00000000  00000000  00013b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  00017fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ce c7       	rjmp	.+3996   	; 0xfb6 <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_7>
      20:	fd c5       	rjmp	.+3066   	; 0xc1c <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	44 c6       	rjmp	.+3208   	; 0xcbe <__vector_13>
      36:	00 00       	nop
      38:	75 c6       	rjmp	.+3306   	; 0xd24 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c7       	rjmp	.+3686   	; 0xeb8 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c7       	rjmp	.+3788   	; 0xf26 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c6       	rjmp	.+3420   	; 0xdca <__vector_27>
      6e:	00 00       	nop
      70:	07 c7       	rjmp	.+3598   	; 0xe80 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e0 e0       	ldi	r30, 0x00	; 0
      90:	ff e3       	ldi	r31, 0x3F	; 63
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 33       	cpi	r26, 0x30	; 48
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a0 e3       	ldi	r26, 0x30	; 48
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 31       	cpi	r26, 0x1C	; 28
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <main>
      b2:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      b8:	20 91 34 38 	lds	r18, 0x3834	; 0x803834 <avgVolt.3776>
      bc:	85 e1       	ldi	r24, 0x15	; 21
      be:	90 e0       	ldi	r25, 0x00	; 0
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      c0:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
      c4:	50 e0       	ldi	r21, 0x00	; 0
      c6:	48 17       	cp	r20, r24
      c8:	59 07       	cpc	r21, r25
      ca:	74 f0       	brlt	.+28     	; 0xe8 <chkVolt250+0x30>
      cc:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	bc 01       	movw	r22, r24
      d4:	68 5f       	subi	r22, 0xF8	; 248
      d6:	7f 4f       	sbci	r23, 0xFF	; 255
      d8:	64 17       	cp	r22, r20
      da:	75 07       	cpc	r23, r21
      dc:	2c f0       	brlt	.+10     	; 0xe8 <chkVolt250+0x30>
      de:	20 93 34 38 	sts	0x3834, r18	; 0x803834 <avgVolt.3776>
            break;
        }
        ++avgVolt;
    }
    return avgVolt;
      e2:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <avgVolt.3776>
      e6:	08 95       	ret
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            break;
        }
        ++avgVolt;
      e8:	2f 5f       	subi	r18, 0xFF	; 255
      ea:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
      ec:	86 3f       	cpi	r24, 0xF6	; 246
      ee:	91 05       	cpc	r25, r1
      f0:	39 f7       	brne	.-50     	; 0xc0 <chkVolt250+0x8>
      f2:	f5 cf       	rjmp	.-22     	; 0xde <chkVolt250+0x26>

000000f4 <MakeFriends>:
    }
    return avgVolt;
}

// Main game loop
uint8_t MakeFriends(){
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     102:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; x++){
        if (CheckState(100+x) == 0) foundAll = 0;
     104:	8c 2f       	mov	r24, r28
     106:	0e 94 17 0a 	call	0x142e	; 0x142e <CheckState>
     10a:	81 11       	cpse	r24, r1
     10c:	01 c0       	rjmp	.+2      	; 0x110 <MakeFriends+0x1c>
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; x++){
     112:	c8 36       	cpi	r28, 0x68	; 104
     114:	b9 f7       	brne	.-18     	; 0x104 <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     116:	dd 23       	and	r29, r29
     118:	19 f0       	breq	.+6      	; 0x120 <MakeFriends+0x2c>
     11a:	8c e7       	ldi	r24, 0x7C	; 124
     11c:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>


    //Checking for headphones
    if (detHdPh) return 0;
     120:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <detHdPh>
     124:	81 11       	cpse	r24, r1
     126:	1c c1       	rjmp	.+568    	; 0x360 <MakeFriends+0x26c>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     128:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3783>
     12c:	81 11       	cpse	r24, r1
     12e:	11 c0       	rjmp	.+34     	; 0x152 <MakeFriends+0x5e>
        setDAC[0] = whoami * 50;
     130:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <whoami>
     134:	22 e3       	ldi	r18, 0x32	; 50
     136:	92 9f       	mul	r25, r18
     138:	90 2d       	mov	r25, r0
     13a:	11 24       	eor	r1, r1
     13c:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	38 e3       	ldi	r19, 0x38	; 56
     144:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
     148:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     14c:	9f ef       	ldi	r25, 0xFF	; 255
     14e:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) ||((progress > FIRST_CONTACT))) {
     152:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
     156:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	65 50       	subi	r22, 0x05	; 5
     162:	71 09       	sbc	r23, r1
     164:	46 17       	cp	r20, r22
     166:	57 07       	cpc	r21, r23
     168:	64 f0       	brlt	.+24     	; 0x182 <MakeFriends+0x8e>
     16a:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	2b 5f       	subi	r18, 0xFB	; 251
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	24 17       	cp	r18, r20
     176:	35 07       	cpc	r19, r21
     178:	24 f0       	brlt	.+8      	; 0x182 <MakeFriends+0x8e>
     17a:	82 30       	cpi	r24, 0x02	; 2
     17c:	08 f0       	brcs	.+2      	; 0x180 <MakeFriends+0x8c>
     17e:	40 c0       	rjmp	.+128    	; 0x200 <MakeFriends+0x10c>
     180:	ed c0       	rjmp	.+474    	; 0x35c <MakeFriends+0x268>
        if (progress == NO_OTHER) {
     182:	81 11       	cpse	r24, r1
     184:	0a c0       	rjmp	.+20     	; 0x19a <MakeFriends+0xa6>
            ++chkTmr;
     186:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3785>
     18a:	8f 5f       	subi	r24, 0xFF	; 255
     18c:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3785>
            if (chkTmr >= 8) {
     190:	88 30       	cpi	r24, 0x08	; 8
     192:	08 f4       	brcc	.+2      	; 0x196 <MakeFriends+0xa2>
     194:	e5 c0       	rjmp	.+458    	; 0x360 <MakeFriends+0x26c>
                progress = FIRST_CONTACT;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	7f c0       	rjmp	.+254    	; 0x298 <MakeFriends+0x1a4>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	89 f5       	brne	.+98     	; 0x200 <MakeFriends+0x10c>
            jackIn = chkVolt250();
     19e:	8c df       	rcall	.-232    	; 0xb8 <chkVolt250>
     1a0:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3786>
            if (jackIn) {
     1a4:	88 23       	and	r24, r24
     1a6:	49 f1       	breq	.+82     	; 0x1fa <MakeFriends+0x106>
                ++chkTmr;
     1a8:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3785>
     1ac:	9f 5f       	subi	r25, 0xFF	; 255
     1ae:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <chkTmr.3785>
                if (chkTmr >= SHORT_WAIT){
     1b2:	98 30       	cpi	r25, 0x08	; 8
     1b4:	08 f4       	brcc	.+2      	; 0x1b8 <MakeFriends+0xc4>
     1b6:	d4 c0       	rjmp	.+424    	; 0x360 <MakeFriends+0x26c>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1b8:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <whoami>
     1bc:	91 30       	cpi	r25, 0x01	; 1
     1be:	29 f4       	brne	.+10     	; 0x1ca <MakeFriends+0xd6>
     1c0:	83 50       	subi	r24, 0x03	; 3
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	b8 f4       	brcc	.+46     	; 0x1f4 <MakeFriends+0x100>
                        progress = SECOND_LOVE; 
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	67 c0       	rjmp	.+206    	; 0x298 <MakeFriends+0x1a4>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1ca:	92 30       	cpi	r25, 0x02	; 2
     1cc:	31 f4       	brne	.+12     	; 0x1da <MakeFriends+0xe6>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	d1 f3       	breq	.-12     	; 0x1c6 <MakeFriends+0xd2>
     1d2:	85 50       	subi	r24, 0x05	; 5
     1d4:	82 30       	cpi	r24, 0x02	; 2
     1d6:	70 f4       	brcc	.+28     	; 0x1f4 <MakeFriends+0x100>
     1d8:	f6 cf       	rjmp	.-20     	; 0x1c6 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1da:	93 30       	cpi	r25, 0x03	; 3
     1dc:	39 f4       	brne	.+14     	; 0x1ec <MakeFriends+0xf8>
     1de:	9c ef       	ldi	r25, 0xFC	; 252
     1e0:	98 0f       	add	r25, r24
     1e2:	92 30       	cpi	r25, 0x02	; 2
     1e4:	80 f3       	brcs	.-32     	; 0x1c6 <MakeFriends+0xd2>
     1e6:	87 30       	cpi	r24, 0x07	; 7
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <MakeFriends+0x100>
     1ea:	ed cf       	rjmp	.-38     	; 0x1c6 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1ec:	94 30       	cpi	r25, 0x04	; 4
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <MakeFriends+0x100>
     1f0:	85 50       	subi	r24, 0x05	; 5
     1f2:	e7 cf       	rjmp	.-50     	; 0x1c2 <MakeFriends+0xce>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     1f4:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3783>
     1f8:	51 c0       	rjmp	.+162    	; 0x29c <MakeFriends+0x1a8>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     1fa:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3785>
     1fe:	ae c0       	rjmp	.+348    	; 0x35c <MakeFriends+0x268>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	09 f0       	breq	.+2      	; 0x206 <MakeFriends+0x112>
     204:	4e c0       	rjmp	.+156    	; 0x2a2 <MakeFriends+0x1ae>
            ++chkTmr;
     206:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3785>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3785>
     210:	c2 e3       	ldi	r28, 0x32	; 50
     212:	de eb       	ldi	r29, 0xBE	; 190
     214:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     216:	0d 81       	ldd	r16, Y+5	; 0x05
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	db d7       	rcall	.+4022   	; 0x11d2 <lfsr>
     21c:	87 ff       	sbrs	r24, 7
     21e:	03 c0       	rjmp	.+6      	; 0x226 <MakeFriends+0x132>
     220:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     224:	01 c0       	rjmp	.+2      	; 0x228 <MakeFriends+0x134>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	f8 01       	movw	r30, r16
     22a:	e4 53       	subi	r30, 0x34	; 52
     22c:	f5 4c       	sbci	r31, 0xC5	; 197
     22e:	80 83       	st	Z, r24
     230:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     232:	f7 01       	movw	r30, r14
     234:	00 81       	ld	r16, Z
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	cc d7       	rcall	.+3992   	; 0x11d2 <lfsr>
     23a:	87 ff       	sbrs	r24, 7
     23c:	03 c0       	rjmp	.+6      	; 0x244 <MakeFriends+0x150>
     23e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     242:	01 c0       	rjmp	.+2      	; 0x246 <MakeFriends+0x152>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	f8 01       	movw	r30, r16
     248:	e4 53       	subi	r30, 0x34	; 52
     24a:	f5 4c       	sbci	r31, 0xC5	; 197
     24c:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     24e:	fe eb       	ldi	r31, 0xBE	; 190
     250:	c7 33       	cpi	r28, 0x37	; 55
     252:	df 07       	cpc	r29, r31
     254:	f9 f6       	brne	.-66     	; 0x214 <MakeFriends+0x120>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     256:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3785>
     25a:	88 30       	cpi	r24, 0x08	; 8
     25c:	40 f0       	brcs	.+16     	; 0x26e <MakeFriends+0x17a>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     25e:	2f ef       	ldi	r18, 0xFF	; 255
     260:	44 e6       	ldi	r20, 0x64	; 100
     262:	68 e0       	ldi	r22, 0x08	; 8
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	0e 94 3a 09 	call	0x1274	; 0x1274 <floatAround>
     26a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     26e:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3785>
     272:	8a 3f       	cpi	r24, 0xFA	; 250
     274:	08 f4       	brcc	.+2      	; 0x278 <MakeFriends+0x184>
     276:	74 c0       	rjmp	.+232    	; 0x360 <MakeFriends+0x26c>
                candidate = jackIn-whoami;
     278:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <whoami>
     27c:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <jackIn.3786>
     280:	89 1b       	sub	r24, r25
     282:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <__data_end>
                if (candidate > whoami) setDAC[0] = 250; else setDAC[0] = 0;
     286:	98 17       	cp	r25, r24
     288:	20 f4       	brcc	.+8      	; 0x292 <MakeFriends+0x19e>
     28a:	8a ef       	ldi	r24, 0xFA	; 250
     28c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     290:	02 c0       	rjmp	.+4      	; 0x296 <MakeFriends+0x1a2>
     292:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     296:	83 e0       	ldi	r24, 0x03	; 3
     298:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3783>
                chkTmr = 0;
     29c:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3785>
     2a0:	5f c0       	rjmp	.+190    	; 0x360 <MakeFriends+0x26c>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2a2:	83 30       	cpi	r24, 0x03	; 3
     2a4:	e1 f5       	brne	.+120    	; 0x31e <MakeFriends+0x22a>
            chkTmr++;
     2a6:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3785>
     2aa:	8f 5f       	subi	r24, 0xFF	; 255
     2ac:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3785>
            if (chkTmr >= SHORT_WAIT) {
     2b0:	88 30       	cpi	r24, 0x08	; 8
     2b2:	08 f4       	brcc	.+2      	; 0x2b6 <MakeFriends+0x1c2>
                if (chkVolt250() == 5) {
     2b4:	55 c0       	rjmp	.+170    	; 0x360 <MakeFriends+0x26c>
     2b6:	00 df       	rcall	.-512    	; 0xb8 <chkVolt250>
     2b8:	85 30       	cpi	r24, 0x05	; 5
     2ba:	09 f0       	breq	.+2      	; 0x2be <MakeFriends+0x1ca>
     2bc:	9b cf       	rjmp	.-202    	; 0x1f4 <MakeFriends+0x100>
                    UpdateState(99+candidate);
     2be:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     2c2:	8d 59       	subi	r24, 0x9D	; 157
     2c4:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
                    UpdateState(99+whoami);
     2c8:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <whoami>
     2cc:	8d 59       	subi	r24, 0x9D	; 157
     2ce:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2d2:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <__data_end>
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     2d6:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <whoami>
     2da:	a2 e3       	ldi	r26, 0x32	; 50
     2dc:	be eb       	ldi	r27, 0xBE	; 190
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	ed 01       	movw	r28, r26
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2e2:	15 96       	adiw	r26, 0x05	; 5
     2e4:	ec 91       	ld	r30, X
     2e6:	15 97       	sbiw	r26, 0x05	; 5
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	82 17       	cp	r24, r18
     2ec:	18 f4       	brcc	.+6      	; 0x2f4 <MakeFriends+0x200>
     2ee:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <MakeFriends+0x202>
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	e4 53       	subi	r30, 0x34	; 52
     2f8:	f5 4c       	sbci	r31, 0xC5	; 197
     2fa:	90 83       	st	Z, r25
     2fc:	11 96       	adiw	r26, 0x01	; 1
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     2fe:	e8 81       	ld	r30, Y
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	83 17       	cp	r24, r19
     304:	18 f4       	brcc	.+6      	; 0x30c <MakeFriends+0x218>
     306:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     30a:	01 c0       	rjmp	.+2      	; 0x30e <MakeFriends+0x21a>
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	e4 53       	subi	r30, 0x34	; 52
     310:	f5 4c       	sbci	r31, 0xC5	; 197
     312:	90 83       	st	Z, r25
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	85 30       	cpi	r24, 0x05	; 5
     318:	19 f7       	brne	.-58     	; 0x2e0 <MakeFriends+0x1ec>
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
                    }   
                    progress = FOURTH_BASE;
     31a:	84 e0       	ldi	r24, 0x04	; 4
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
     31c:	bd cf       	rjmp	.-134    	; 0x298 <MakeFriends+0x1a4>
     31e:	84 30       	cpi	r24, 0x04	; 4
            if (chkVolt250() == 5) {
     320:	f9 f4       	brne	.+62     	; 0x360 <MakeFriends+0x26c>
     322:	ca de       	rcall	.-620    	; 0xb8 <chkVolt250>
     324:	85 30       	cpi	r24, 0x05	; 5
     326:	e1 f4       	brne	.+56     	; 0x360 <MakeFriends+0x26c>
                chkTmr++;
     328:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3785>
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3785>
                if (chkTmr >= LONG_WAIT) {
     332:	8a 3f       	cpi	r24, 0xFA	; 250
     334:	a8 f0       	brcs	.+42     	; 0x360 <MakeFriends+0x26c>
     336:	e2 e3       	ldi	r30, 0x32	; 50
     338:	fe eb       	ldi	r31, 0xBE	; 190
     33a:	87 e3       	ldi	r24, 0x37	; 55
     33c:	9e eb       	ldi	r25, 0xBE	; 190
     33e:	ef 01       	movw	r28, r30
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = 0;
     340:	a5 81       	ldd	r26, Z+5	; 0x05
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	a4 53       	subi	r26, 0x34	; 52
     346:	b5 4c       	sbci	r27, 0xC5	; 197
     348:	1c 92       	st	X, r1
     34a:	31 96       	adiw	r30, 0x01	; 1
                        iLED[WING[R][x]] = 0;
     34c:	a8 81       	ld	r26, Y
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	a4 53       	subi	r26, 0x34	; 52
     352:	b5 4c       	sbci	r27, 0xC5	; 197
     354:	1c 92       	st	X, r1
        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
            if (chkVolt250() == 5) {
                chkTmr++;
                if (chkTmr >= LONG_WAIT) {
                    for (uint8_t x=0; x<5; ++x){
     356:	8e 17       	cp	r24, r30
     358:	9f 07       	cpc	r25, r31
     35a:	89 f7       	brne	.-30     	; 0x33e <MakeFriends+0x24a>
                    }                    
                }
            }
        }

    } else progress = NO_OTHER;
     35c:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3783>
      
    return 0;
}
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	08 95       	ret

00000370 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     376:	e6 e2       	ldi	r30, 0x26	; 38
     378:	f4 e0       	ldi	r31, 0x04	; 4
     37a:	80 83       	st	Z, r24
     37c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     380:	a1 e2       	ldi	r26, 0x21	; 33
     382:	b4 e0       	ldi	r27, 0x04	; 4
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	9c 93       	st	X, r25
     388:	90 83       	st	Z, r25
     38a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     38e:	e0 e1       	ldi	r30, 0x10	; 16
     390:	f8 e0       	ldi	r31, 0x08	; 8
     392:	97 e0       	ldi	r25, 0x07	; 7
     394:	96 83       	std	Z+6, r25	; 0x06
     396:	98 e0       	ldi	r25, 0x08	; 8
     398:	94 83       	std	Z+4, r25	; 0x04
     39a:	83 83       	std	Z+3, r24	; 0x03
     39c:	8c 93       	st	X, r24
     39e:	85 81       	ldd	r24, Z+5	; 0x05
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	85 83       	std	Z+5, r24	; 0x05
     3a4:	85 81       	ldd	r24, Z+5	; 0x05
     3a6:	84 6c       	ori	r24, 0xC4	; 196
     3a8:	85 83       	std	Z+5, r24	; 0x05
     3aa:	08 95       	ret

000003ac <I2C_recover>:
     3ac:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3b0:	88 60       	ori	r24, 0x08	; 8
     3b2:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3b6:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3c0:	99 e0       	ldi	r25, 0x09	; 9
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3ca:	30 e1       	ldi	r19, 0x10	; 16
     3cc:	3a 95       	dec	r19
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <I2C_recover+0x20>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <I2C_recover+0x26>
     3d2:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3d6:	30 e1       	ldi	r19, 0x10	; 16
     3d8:	3a 95       	dec	r19
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <I2C_recover+0x2c>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <I2C_recover+0x32>
     3de:	91 50       	subi	r25, 0x01	; 1
     3e0:	89 f7       	brne	.-30     	; 0x3c4 <I2C_recover+0x18>
     3e2:	28 e0       	ldi	r18, 0x08	; 8
     3e4:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3e8:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3f2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f6:	91 60       	ori	r25, 0x01	; 1
     3f8:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     400:	94 6c       	ori	r25, 0xC4	; 196
     402:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     406:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     40a:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     40e:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     412:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     416:	81 60       	ori	r24, 0x01	; 1
     418:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	84 6c       	ori	r24, 0xC4	; 196
     422:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     426:	08 95       	ret

00000428 <I2C_start>:
     428:	28 2f       	mov	r18, r24
     42a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42e:	90 6c       	ori	r25, 0xC0	; 192
     430:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     434:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     438:	89 2f       	mov	r24, r25
     43a:	84 70       	andi	r24, 0x04	; 4
     43c:	92 fd       	sbrc	r25, 2
     43e:	03 c0       	rjmp	.+6      	; 0x446 <I2C_start+0x1e>
     440:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     444:	08 95       	ret
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	08 95       	ret

0000044a <I2C_wait_ACK>:
     44a:	8c e0       	ldi	r24, 0x0C	; 12
     44c:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
     450:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     454:	87 fd       	sbrc	r24, 7
     456:	0a c0       	rjmp	.+20     	; 0x46c <I2C_wait_ACK+0x22>
     458:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     45c:	86 fd       	sbrc	r24, 6
     45e:	06 c0       	rjmp	.+12     	; 0x46c <I2C_wait_ACK+0x22>
     460:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     464:	81 11       	cpse	r24, r1
     466:	f4 cf       	rjmp	.-24     	; 0x450 <I2C_wait_ACK+0x6>
     468:	8f ef       	ldi	r24, 0xFF	; 255
     46a:	08 95       	ret
     46c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     470:	80 6c       	ori	r24, 0xC0	; 192
     472:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     476:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47a:	82 fd       	sbrc	r24, 2
     47c:	09 c0       	rjmp	.+18     	; 0x490 <I2C_wait_ACK+0x46>
     47e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     482:	83 fd       	sbrc	r24, 3
     484:	07 c0       	rjmp	.+14     	; 0x494 <I2C_wait_ACK+0x4a>
     486:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48a:	82 95       	swap	r24
     48c:	81 70       	andi	r24, 0x01	; 1
     48e:	08 95       	ret
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	08 95       	ret
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	08 95       	ret

00000498 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     498:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     49a:	8c e0       	ldi	r24, 0x0C	; 12
     49c:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4a0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a4:	89 2f       	mov	r24, r25
     4a6:	83 70       	andi	r24, 0x03	; 3
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4b0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b4:	97 fd       	sbrc	r25, 7
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4b8:	90 91 62 3a 	lds	r25, 0x3A62	; 0x803a62 <timeout_I2C>
     4bc:	91 11       	cpse	r25, r1
     4be:	f8 cf       	rjmp	.-16     	; 0x4b0 <I2C_read+0x18>
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4c4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c8:	90 6c       	ori	r25, 0xC0	; 192
     4ca:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4ce:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d2:	92 fd       	sbrc	r25, 2
     4d4:	1e c0       	rjmp	.+60     	; 0x512 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4d6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4da:	93 fd       	sbrc	r25, 3
     4dc:	1d c0       	rjmp	.+58     	; 0x518 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4de:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e2:	89 2f       	mov	r24, r25
     4e4:	80 71       	andi	r24, 0x10	; 16
     4e6:	94 fd       	sbrc	r25, 4
     4e8:	16 c0       	rjmp	.+44     	; 0x516 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     4ea:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4ee:	61 11       	cpse	r22, r1
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <I2C_read+0x5e>
     4f2:	9b 7f       	andi	r25, 0xFB	; 251
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4f6:	94 60       	ori	r25, 0x04	; 4
     4f8:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     4fc:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     500:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     502:	61 11       	cpse	r22, r1
     504:	09 c0       	rjmp	.+18     	; 0x518 <I2C_read+0x80>
     506:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     50a:	92 60       	ori	r25, 0x02	; 2
     50c:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     510:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     516:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     518:	08 95       	ret

0000051a <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     51a:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     51c:	8c e0       	ldi	r24, 0x0C	; 12
     51e:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     522:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     526:	93 70       	andi	r25, 0x03	; 3
     528:	92 30       	cpi	r25, 0x02	; 2
     52a:	b1 f4       	brne	.+44     	; 0x558 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     52c:	80 81       	ld	r24, Z
     52e:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     532:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     536:	86 fd       	sbrc	r24, 6
     538:	06 c0       	rjmp	.+12     	; 0x546 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     53a:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     53e:	81 11       	cpse	r24, r1
     540:	f8 cf       	rjmp	.-16     	; 0x532 <I2C_write+0x18>
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     546:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     54a:	82 fd       	sbrc	r24, 2
     54c:	07 c0       	rjmp	.+14     	; 0x55c <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     54e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     552:	82 95       	swap	r24
     554:	81 70       	andi	r24, 0x01	; 1
     556:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     558:	88 e0       	ldi	r24, 0x08	; 8
     55a:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     55c:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     55e:	08 95       	ret

00000560 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     560:	e0 e1       	ldi	r30, 0x10	; 16
     562:	f8 e0       	ldi	r31, 0x08	; 8
     564:	84 81       	ldd	r24, Z+4	; 0x04
     566:	83 60       	ori	r24, 0x03	; 3
     568:	84 83       	std	Z+4, r24	; 0x04
     56a:	08 95       	ret

0000056c <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	6b 01       	movw	r12, r22
     57c:	f4 2e       	mov	r15, r20
     57e:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     580:	18 2f       	mov	r17, r24
     582:	11 0f       	add	r17, r17
     584:	81 2f       	mov	r24, r17
     586:	50 df       	rcall	.-352    	; 0x428 <I2C_start>
	if (status != 0) goto error;
     588:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     58a:	2b c0       	rjmp	.+86     	; 0x5e2 <I2C_read_bytes+0x76>
     58c:	5e df       	rcall	.-324    	; 0x44a <I2C_wait_ACK>
	if (status == 1) {
     58e:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     590:	19 f4       	brne	.+6      	; 0x598 <I2C_read_bytes+0x2c>
     592:	e6 df       	rcall	.-52     	; 0x560 <I2C_stop>
		return 1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	27 c0       	rjmp	.+78     	; 0x5e6 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     598:	81 11       	cpse	r24, r1
     59a:	23 c0       	rjmp	.+70     	; 0x5e2 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     59c:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     59e:	49 f0       	breq	.+18     	; 0x5b2 <I2C_read_bytes+0x46>
     5a0:	c6 01       	movw	r24, r12
     5a2:	bb df       	rcall	.-138    	; 0x51a <I2C_write>
	    if (status != 0) goto error;
     5a4:	81 11       	cpse	r24, r1
     5a6:	1d c0       	rjmp	.+58     	; 0x5e2 <I2C_read_bytes+0x76>
        ++reg_ptr;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	c8 1a       	sub	r12, r24
     5ac:	d8 0a       	sbc	r13, r24
        --reg_len;
     5ae:	fa 94       	dec	r15
     5b0:	f5 cf       	rjmp	.-22     	; 0x59c <I2C_read_bytes+0x30>
     5b2:	01 34       	cpi	r16, 0x41	; 65
     5b4:	08 f0       	brcs	.+2      	; 0x5b8 <I2C_read_bytes+0x4c>
     5b6:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5b8:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5ba:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5be:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5c0:	40 f0       	brcs	.+16     	; 0x5d2 <I2C_read_bytes+0x66>
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	ce 01       	movw	r24, r28
     5c6:	68 df       	rcall	.-304    	; 0x498 <I2C_read>
		if (status != 0) goto error;
     5c8:	81 11       	cpse	r24, r1
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5cc:	21 96       	adiw	r28, 0x01	; 1
     5ce:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5d0:	f6 cf       	rjmp	.-20     	; 0x5be <I2C_read_bytes+0x52>
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5d6:	60 df       	rcall	.-320    	; 0x498 <I2C_read>
     5d8:	81 11       	cpse	r24, r1
	I2C_stop();
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <I2C_read_bytes+0x76>
     5dc:	c1 df       	rcall	.-126    	; 0x560 <I2C_stop>
	return 0;
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5e2:	e4 de       	rcall	.-568    	; 0x3ac <I2C_recover>
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5e6:	df 91       	pop	r29
}
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	08 95       	ret

000005f6 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     5f6:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <lanyardPos>
    lanyardCnt      = 0;
     5fa:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <lanyardCnt>
    lanyardState    = TRUE;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    effect = 0;
     604:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect>
     608:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <effect+0x1>
     60c:	08 95       	ret

0000060e <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     60e:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     610:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	71 f4       	brne	.+28     	; 0x634 <LanyardCode+0x26>
     618:	6a e0       	ldi	r22, 0x0A	; 10
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <lanyardLastActive>
     620:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <lanyardLastActive+0x1>
     624:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <idleTimeout>
     628:	88 23       	and	r24, r24
     62a:	21 f0       	breq	.+8      	; 0x634 <LanyardCode+0x26>
        /* clean up maze game and go back to text game */
        initLanyard();
     62c:	e4 df       	rcall	.-56     	; 0x5f6 <initLanyard>
        gameNow = TEXT;
     62e:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
        return 0;
     632:	9b c0       	rjmp	.+310    	; 0x76a <LanyardCode+0x15c>
    }

    if (CheckState(LANYARD_COMPLETED))
     634:	8b e7       	ldi	r24, 0x7B	; 123
     636:	fb d6       	rcall	.+3574   	; 0x142e <CheckState>
     638:	81 11       	cpse	r24, r1
     63a:	97 c0       	rjmp	.+302    	; 0x76a <LanyardCode+0x15c>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     63c:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     640:	88 23       	and	r24, r24
     642:	19 f0       	breq	.+6      	; 0x64a <LanyardCode+0x3c>
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	09 f0       	breq	.+2      	; 0x64a <LanyardCode+0x3c>
     648:	90 c0       	rjmp	.+288    	; 0x76a <LanyardCode+0x15c>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     64a:	c0 91 2e be 	lds	r28, 0xBE2E	; 0x80be2e <__bss_end+0x8312>
     64e:	ec 2f       	mov	r30, r28
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     656:	8f 3f       	cpi	r24, 0xFF	; 255
     658:	19 f0       	breq	.+6      	; 0x660 <LanyardCode+0x52>
     65a:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     65e:	01 c0       	rjmp	.+2      	; 0x662 <LanyardCode+0x54>
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	e4 53       	subi	r30, 0x34	; 52
     664:	f5 4c       	sbci	r31, 0xC5	; 197
     666:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     668:	8f 3f       	cpi	r24, 0xFF	; 255
     66a:	09 f4       	brne	.+2      	; 0x66e <LanyardCode+0x60>
     66c:	7e c0       	rjmp	.+252    	; 0x76a <LanyardCode+0x15c>
        return 0;

    if (buttonState == lastButtonState)
     66e:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     672:	89 17       	cp	r24, r25
     674:	09 f4       	brne	.+2      	; 0x678 <LanyardCode+0x6a>
     676:	79 c0       	rjmp	.+242    	; 0x76a <LanyardCode+0x15c>
        return 0;

    lanyardLastActive = getClock();
     678:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <getClock>
     67c:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <lanyardLastActive>
     680:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     684:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     688:	8f 3f       	cpi	r24, 0xFF	; 255
     68a:	09 f0       	breq	.+2      	; 0x68e <LanyardCode+0x80>
     68c:	6e c0       	rjmp	.+220    	; 0x76a <LanyardCode+0x15c>
        effect = 0x13f + (buttonState << 5);
     68e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     692:	20 e2       	ldi	r18, 0x20	; 32
     694:	82 9f       	mul	r24, r18
     696:	c0 01       	movw	r24, r0
     698:	11 24       	eor	r1, r1
     69a:	81 5c       	subi	r24, 0xC1	; 193
     69c:	9e 4f       	sbci	r25, 0xFE	; 254
     69e:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     6a2:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>

        if (gameNow != LANYARD)
     6a6:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     6aa:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <LanyardCode+0xa2>
     6ae:	a3 df       	rcall	.-186    	; 0x5f6 <initLanyard>
        gameNow = LANYARD;
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     6b6:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <lanyardPos>
     6ba:	e8 2f       	mov	r30, r24
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	ea 5e       	subi	r30, 0xEA	; 234
     6c0:	f1 44       	sbci	r31, 0x41	; 65
     6c2:	20 81       	ld	r18, Z
     6c4:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     6c8:	29 13       	cpse	r18, r25
     6ca:	12 c0       	rjmp	.+36     	; 0x6f0 <LanyardCode+0xe2>
            lanyardState &= TRUE;
     6cc:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6d0:	91 70       	andi	r25, 0x01	; 1
     6d2:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     6d6:	e0 91 3d be 	lds	r30, 0xBE3D	; 0x80be3d <__bss_end+0x8321>
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e4 53       	subi	r30, 0x34	; 52
     6de:	f5 4c       	sbci	r31, 0xC5	; 197
     6e0:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     6e2:	e0 91 3c be 	lds	r30, 0xBE3C	; 0x80be3c <__bss_end+0x8320>
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	e4 53       	subi	r30, 0x34	; 52
     6ea:	f5 4c       	sbci	r31, 0xC5	; 197
     6ec:	10 82       	st	Z, r1
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <LanyardCode+0xf4>
        } else {
            lanyardState = FALSE;
     6f0:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     6f4:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     6f6:	28 f4       	brcc	.+10     	; 0x702 <LanyardCode+0xf4>
     6f8:	7e df       	rcall	.-260    	; 0x5f6 <initLanyard>
                gameNow         = BASTET;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>
                return 0;
     700:	34 c0       	rjmp	.+104    	; 0x76a <LanyardCode+0x15c>
            }
        }
        lanyardPos++;
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <lanyardPos>
        lanyardCnt++;            
     708:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <lanyardCnt>
     70c:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     70e:	94 30       	cpi	r25, 0x04	; 4
     710:	18 f4       	brcc	.+6      	; 0x718 <LanyardCode+0x10a>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     712:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <lanyardCnt>
     716:	29 c0       	rjmp	.+82     	; 0x76a <LanyardCode+0x15c>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     718:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <lanyardCnt>
            if (lanyardState == TRUE) {
     71c:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     720:	91 30       	cpi	r25, 0x01	; 1
     722:	e1 f4       	brne	.+56     	; 0x75c <LanyardCode+0x14e>
                if ((lanyardPos % 4) == 0) {
     724:	98 2f       	mov	r25, r24
     726:	93 70       	andi	r25, 0x03	; 3
     728:	69 f4       	brne	.+26     	; 0x744 <LanyardCode+0x136>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     72a:	e8 2f       	mov	r30, r24
     72c:	e6 95       	lsr	r30
     72e:	e6 95       	lsr	r30
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	e0 5c       	subi	r30, 0xC0	; 192
     734:	f1 44       	sbci	r31, 0x41	; 65
     736:	e5 81       	ldd	r30, Z+5	; 0x05
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     73e:	e4 53       	subi	r30, 0x34	; 52
     740:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     742:	90 83       	st	Z, r25
     744:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     746:	89 f4       	brne	.+34     	; 0x76a <LanyardCode+0x15c>
     748:	8b e7       	ldi	r24, 0x7B	; 123
     74a:	67 d6       	rcall	.+3278   	; 0x141a <UpdateState>
                    iLED[CAT]       = 0;
     74c:	ec 2f       	mov	r30, r28
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	e4 53       	subi	r30, 0x34	; 52
     752:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     754:	10 82       	st	Z, r1
     756:	82 e4       	ldi	r24, 0x42	; 66
     758:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     75a:	03 c0       	rjmp	.+6      	; 0x762 <LanyardCode+0x154>
     75c:	4c df       	rcall	.-360    	; 0x5f6 <initLanyard>
                effect = 0x21;
     75e:	81 e2       	ldi	r24, 0x21	; 33
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     766:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
            }
        }
    }

    return 0;
}
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     770:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <mazeHckrPos>
    mazePos = 0;
     774:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <mazePos>
    mazeCnt = 0;
     778:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazeCnt>
    mazeState = TRUE;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     782:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <inverted>
    effect = 0;
     786:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect>
     78a:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <effect+0x1>
     78e:	08 95       	ret

00000790 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     790:	97 ff       	sbrs	r25, 7
     792:	03 c0       	rjmp	.+6      	; 0x79a <showFieldStrength+0xa>
     794:	91 95       	neg	r25
     796:	81 95       	neg	r24
     798:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     79a:	9c 01       	movw	r18, r24
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	29 37       	cpi	r18, 0x79	; 121
     7a2:	31 05       	cpc	r19, r1
     7a4:	1c f0       	brlt	.+6      	; 0x7ac <showFieldStrength+0x1c>
        gameNow = MAZE;
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	40 93 3e 38 	sts	0x383E, r20	; 0x80383e <gameNow>

    if (gameNow == MAZE) {
     7ac:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <gameNow>
     7b0:	41 30       	cpi	r20, 0x01	; 1
     7b2:	21 f5       	brne	.+72     	; 0x7fc <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     7b4:	28 37       	cpi	r18, 0x78	; 120
     7b6:	31 05       	cpc	r19, r1
     7b8:	1c f4       	brge	.+6      	; 0x7c0 <showFieldStrength+0x30>
            WingBar(0,0);
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	1d c0       	rjmp	.+58     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     7c0:	88 37       	cpi	r24, 0x78	; 120
     7c2:	91 05       	cpc	r25, r1
     7c4:	1c f4       	brge	.+6      	; 0x7cc <showFieldStrength+0x3c>
            WingBar(1,1);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	17 c0       	rjmp	.+46     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     7cc:	2c 32       	cpi	r18, 0x2C	; 44
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	34 07       	cpc	r19, r20
     7d2:	1c f4       	brge	.+6      	; 0x7da <showFieldStrength+0x4a>
            WingBar(2,2);
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	10 c0       	rjmp	.+32     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     7da:	28 0f       	add	r18, r24
     7dc:	39 1f       	adc	r19, r25
     7de:	28 35       	cpi	r18, 0x58	; 88
     7e0:	32 40       	sbci	r19, 0x02	; 2
     7e2:	1c f4       	brge	.+6      	; 0x7ea <showFieldStrength+0x5a>
            WingBar(3,3);
     7e4:	63 e0       	ldi	r22, 0x03	; 3
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	08 c0       	rjmp	.+16     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     7ea:	8c 32       	cpi	r24, 0x2C	; 44
     7ec:	91 40       	sbci	r25, 0x01	; 1
     7ee:	1c f4       	brge	.+6      	; 0x7f6 <showFieldStrength+0x66>
            WingBar(4,4);
     7f0:	64 e0       	ldi	r22, 0x04	; 4
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	f2 c6       	rjmp	.+3556   	; 0x15e0 <WingBar>
     7fc:	08 95       	ret

000007fe <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     802:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	71 f4       	brne	.+28     	; 0x826 <MagnetMaze+0x28>
     80a:	6a e0       	ldi	r22, 0x0A	; 10
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <mazeLastActive>
     812:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeLastActive+0x1>
     816:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <idleTimeout>
     81a:	88 23       	and	r24, r24
     81c:	21 f0       	breq	.+8      	; 0x826 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     81e:	a8 df       	rcall	.-176    	; 0x770 <initMaze>
        gameNow = TEXT;
     820:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
        return 0;
     824:	e5 c0       	rjmp	.+458    	; 0x9f0 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     826:	87 ef       	ldi	r24, 0xF7	; 247
     828:	02 d6       	rcall	.+3076   	; 0x142e <CheckState>
     82a:	81 11       	cpse	r24, r1
     82c:	e1 c0       	rjmp	.+450    	; 0x9f0 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     82e:	8d e7       	ldi	r24, 0x7D	; 125
     830:	fe d5       	rcall	.+3068   	; 0x142e <CheckState>
     832:	81 11       	cpse	r24, r1
     834:	dd c0       	rjmp	.+442    	; 0x9f0 <MagnetMaze+0x1f2>
     836:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	08 f0       	brcs	.+2      	; 0x840 <MagnetMaze+0x42>
     83e:	d8 c0       	rjmp	.+432    	; 0x9f0 <MagnetMaze+0x1f2>
     840:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <calHall>
        return 0;

    if (calHall == 0)
     844:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <calHall+0x1>
     848:	89 2b       	or	r24, r25
     84a:	41 f4       	brne	.+16     	; 0x85c <MagnetMaze+0x5e>
     84c:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcHall>
        calHall = adcHall;
     850:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcHall+0x1>
     854:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <calHall>
     858:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <calHall+0x1>
     85c:	c0 91 bd 3a 	lds	r28, 0x3ABD	; 0x803abd <adcHall>

    int16_t valHall = adcHall - calHall;
     860:	d0 91 be 3a 	lds	r29, 0x3ABE	; 0x803abe <adcHall+0x1>
     864:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <calHall>
     868:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <calHall+0x1>
     86c:	c8 1b       	sub	r28, r24
     86e:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     870:	ce 01       	movw	r24, r28
     872:	8e df       	rcall	.-228    	; 0x790 <showFieldStrength>
     874:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <curHallState>

    switch (curHallState) {
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	89 f0       	breq	.+34     	; 0x89e <MagnetMaze+0xa0>
     87c:	18 f0       	brcs	.+6      	; 0x884 <MagnetMaze+0x86>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	c1 f0       	breq	.+48     	; 0x8b2 <MagnetMaze+0xb4>
     882:	1f c0       	rjmp	.+62     	; 0x8c2 <MagnetMaze+0xc4>
     884:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     886:	9e ef       	ldi	r25, 0xFE	; 254
     888:	d9 07       	cpc	r29, r25
     88a:	14 f4       	brge	.+4      	; 0x890 <MagnetMaze+0x92>
     88c:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     88e:	04 c0       	rjmp	.+8      	; 0x898 <MagnetMaze+0x9a>
     890:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     892:	d1 40       	sbci	r29, 0x01	; 1
     894:	5c f0       	brlt	.+22     	; 0x8ac <MagnetMaze+0xae>
     896:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     898:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <newHallState>
     89c:	12 c0       	rjmp	.+36     	; 0x8c2 <MagnetMaze+0xc4>
     89e:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	d9 07       	cpc	r29, r25
     8a4:	c4 f7       	brge	.-16     	; 0x896 <MagnetMaze+0x98>
     8a6:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     8a8:	df 4f       	sbci	r29, 0xFF	; 255
     8aa:	84 f3       	brlt	.-32     	; 0x88c <MagnetMaze+0x8e>
     8ac:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <MagnetMaze+0xc4>
     8b2:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     8b4:	9e ef       	ldi	r25, 0xFE	; 254
     8b6:	d9 07       	cpc	r29, r25
     8b8:	4c f3       	brlt	.-46     	; 0x88c <MagnetMaze+0x8e>
     8ba:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     8bc:	d1 05       	cpc	r29, r1
     8be:	b4 f3       	brlt	.-20     	; 0x8ac <MagnetMaze+0xae>
     8c0:	ea cf       	rjmp	.-44     	; 0x896 <MagnetMaze+0x98>
     8c2:	c0 91 2e be 	lds	r28, 0xBE2E	; 0x80be2e <__bss_end+0x8312>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     8c6:	ec 2f       	mov	r30, r28
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <newHallState>
     8ce:	99 23       	and	r25, r25
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <MagnetMaze+0xda>
     8d2:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <MagnetMaze+0xdc>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	e4 53       	subi	r30, 0x34	; 52
     8dc:	f5 4c       	sbci	r31, 0xC5	; 197
     8de:	20 83       	st	Z, r18
     8e0:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <effect>
     8e8:	30 93 3d 38 	sts	0x383D, r19	; 0x80383d <effect+0x1>
     8ec:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <MagnetMaze+0xf4>
     8f0:	7f c0       	rjmp	.+254    	; 0x9f0 <MagnetMaze+0x1f2>
     8f2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     8f6:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <mazeLastActive>
     8fa:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeLastActive+0x1>
     8fe:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     902:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <newHallState>
     906:	91 11       	cpse	r25, r1
     908:	08 c0       	rjmp	.+16     	; 0x91a <MagnetMaze+0x11c>
     90a:	88 23       	and	r24, r24
     90c:	31 f0       	breq	.+12     	; 0x91a <MagnetMaze+0x11c>
     90e:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	09 f4       	brne	.+2      	; 0x916 <MagnetMaze+0x118>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <inverted>
     91a:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <curHallState>

        curHallState = newHallState;
     91e:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     920:	09 f4       	brne	.+2      	; 0x924 <MagnetMaze+0x126>
     922:	66 c0       	rjmp	.+204    	; 0x9f0 <MagnetMaze+0x1f2>
     924:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
            if (gameNow == TEXT)
     928:	81 11       	cpse	r24, r1
     92a:	01 c0       	rjmp	.+2      	; 0x92e <MagnetMaze+0x130>
                initMaze();
     92c:	21 df       	rcall	.-446    	; 0x770 <initMaze>
     92e:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     930:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>
     934:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     938:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <curHallState>
     93c:	88 23       	and	r24, r24
     93e:	11 f0       	breq	.+4      	; 0x944 <MagnetMaze+0x146>
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	28 27       	eor	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <mazePos>
     94a:	e8 2f       	mov	r30, r24
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e4 59       	subi	r30, 0x94	; 148
     950:	f1 44       	sbci	r31, 0x41	; 65
     952:	40 81       	ld	r20, Z
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	24 17       	cp	r18, r20
     958:	35 07       	cpc	r19, r21
     95a:	91 f4       	brne	.+36     	; 0x980 <MagnetMaze+0x182>
     95c:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     960:	91 70       	andi	r25, 0x01	; 1
     962:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     966:	e0 91 3d be 	lds	r30, 0xBE3D	; 0x80be3d <__bss_end+0x8321>
                iLED[EYE[R][L]] = 0;
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	e4 53       	subi	r30, 0x34	; 52
     96e:	f5 4c       	sbci	r31, 0xC5	; 197
     970:	10 82       	st	Z, r1
     972:	e0 91 3c be 	lds	r30, 0xBE3C	; 0x80be3c <__bss_end+0x8320>
                iLED[EYE[R][R]] = 0;
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e4 53       	subi	r30, 0x34	; 52
     97a:	f5 4c       	sbci	r31, 0xC5	; 197
     97c:	10 82       	st	Z, r1
     97e:	02 c0       	rjmp	.+4      	; 0x984 <MagnetMaze+0x186>
     980:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     984:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     986:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <mazePos>
     98a:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazeCnt>
            mazeCnt++;            
     98e:	9f 5f       	subi	r25, 0xFF	; 255
     990:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     992:	18 f4       	brcc	.+6      	; 0x99a <MagnetMaze+0x19c>
     994:	90 93 4a 38 	sts	0x384A, r25	; 0x80384a <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     998:	2b c0       	rjmp	.+86     	; 0x9f0 <MagnetMaze+0x1f2>
     99a:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     99e:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     9a2:	91 30       	cpi	r25, 0x01	; 1
     9a4:	e1 f4       	brne	.+56     	; 0x9de <MagnetMaze+0x1e0>
     9a6:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     9aa:	e9 2f       	mov	r30, r25
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e0 5c       	subi	r30, 0xC0	; 192
     9b0:	f1 44       	sbci	r31, 0x41	; 65
     9b2:	e6 81       	ldd	r30, Z+6	; 0x06
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     9ba:	e4 53       	subi	r30, 0x34	; 52
     9bc:	f5 4c       	sbci	r31, 0xC5	; 197
     9be:	20 83       	st	Z, r18
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     9c2:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     9c6:	82 31       	cpi	r24, 0x12	; 18
     9c8:	99 f4       	brne	.+38     	; 0x9f0 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     9ca:	8d e7       	ldi	r24, 0x7D	; 125
     9cc:	26 d5       	rcall	.+2636   	; 0x141a <UpdateState>
     9ce:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	e4 53       	subi	r30, 0x34	; 52
     9d4:	f5 4c       	sbci	r31, 0xC5	; 197
     9d6:	10 82       	st	Z, r1
                        effect = 0x42;
     9d8:	82 e4       	ldi	r24, 0x42	; 66
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     9de:	c8 de       	rcall	.-624    	; 0x770 <initMaze>
     9e0:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
                    gameNow   = TEXT;
     9e4:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     9ec:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <Setup>:
     9f8:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     9fa:	df 93       	push	r29
    cli();
     9fc:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     9fe:	88 ed       	ldi	r24, 0xD8	; 216
     a00:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     a02:	c1 e0       	ldi	r28, 0x01	; 1
     a04:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     a08:	8a e4       	ldi	r24, 0x4A	; 74
     a0a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     a0e:	8c e7       	ldi	r24, 0x7C	; 124
     a10:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     a14:	9f e3       	ldi	r25, 0x3F	; 63
     a16:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     a1a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     a1e:	80 68       	ori	r24, 0x80	; 128
     a20:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     a24:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     a2e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     a32:	80 68       	ori	r24, 0x80	; 128
     a34:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     a38:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     a42:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     a46:	80 68       	ori	r24, 0x80	; 128
     a48:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     a4c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     a50:	80 68       	ori	r24, 0x80	; 128
     a52:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     a56:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     a5a:	d2 e0       	ldi	r29, 0x02	; 2
     a5c:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     a60:	2b e5       	ldi	r18, 0x5B	; 91
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a68:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
     a6e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     a72:	80 ec       	ldi	r24, 0xC0	; 192
     a74:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a7e:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a80:	1d ba       	out	0x1d, r1	; 29
    AUPOS = 0;     //Used as audio input/output buffer counter
     a82:	1e ba       	out	0x1e, r1	; 30
    GPIOR3 = 0;    //
     a84:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a86:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a90:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a94:	87 e7       	ldi	r24, 0x77	; 119
     a96:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a9a:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a9e:	8b e0       	ldi	r24, 0x0B	; 11
     aa0:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     aa4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     aae:	85 e0       	ldi	r24, 0x05	; 5
     ab0:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     ab4:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     ac0:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     ac4:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     ac8:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     acc:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     ad0:	8b e8       	ldi	r24, 0x8B	; 139
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     ad8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     adc:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     ae0:	47 dc       	rcall	.-1906   	; 0x370 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ae2:	82 e1       	ldi	r24, 0x12	; 18
     ae4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     ae8:	80 e2       	ldi	r24, 0x20	; 32
     aea:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     aee:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     af2:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     af6:	84 e4       	ldi	r24, 0x44	; 68
     af8:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     afc:	8e e1       	ldi	r24, 0x1E	; 30
     afe:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     b02:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     b06:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b0a:	81 60       	ori	r24, 0x01	; 1
     b0c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     b10:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     b14:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     b18:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     b1c:	82 e5       	ldi	r24, 0x52	; 82
     b1e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     b28:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     b2c:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     b30:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     b3a:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     b3e:	80 e4       	ldi	r24, 0x40	; 64
     b40:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     b44:	80 e8       	ldi	r24, 0x80	; 128
     b46:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     b4a:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     b54:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b58:	80 fd       	sbrc	r24, 0
     b5a:	fc cf       	rjmp	.-8      	; 0xb54 <Setup+0x15c>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     b5c:	80 e3       	ldi	r24, 0x30	; 48
     b5e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     b62:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     b66:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b6a:	82 fd       	sbrc	r24, 2
     b6c:	fc cf       	rjmp	.-8      	; 0xb66 <Setup+0x16e>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	98 e7       	ldi	r25, 0x78	; 120
     b72:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b76:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b7a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b7e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b82:	82 96       	adiw	r24, 0x22	; 34
     b84:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
     b88:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b8c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b90:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b94:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     b98:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     b9c:	28 17       	cp	r18, r24
     b9e:	39 07       	cpc	r19, r25
     ba0:	70 f4       	brcc	.+28     	; 0xbbe <Setup+0x1c6>
     ba2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ba6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     baa:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     bae:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     bb2:	82 1b       	sub	r24, r18
     bb4:	93 0b       	sbc	r25, r19
     bb6:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
     bba:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     bbe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bc2:	83 fd       	sbrc	r24, 3
     bc4:	fc cf       	rjmp	.-8      	; 0xbbe <Setup+0x1c6>
    RTC_CMP            = tmp16bit;                         //Button timing
     bc6:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     bca:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     bce:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bd2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     be2:	88 e0       	ldi	r24, 0x08	; 8
     be4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     be8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bec:	80 fd       	sbrc	r24, 0
     bee:	fc cf       	rjmp	.-8      	; 0xbe8 <Setup+0x1f0>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     bf0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     bfa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     bfe:	81 60       	ori	r24, 0x01	; 1
     c00:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     c04:	10 92 77 3a 	sts	0x3A77, r1	; 0x803a77 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     c08:	87 e7       	ldi	r24, 0x77	; 119
     c0a:	9a e3       	ldi	r25, 0x3A	; 58
     c0c:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <serTxAddr>
     c10:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <serTxAddr+0x1>

    sei();
     c14:	78 94       	sei
}
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     c32:	87 e0       	ldi	r24, 0x07	; 7
     c34:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     c38:	84 e4       	ldi	r24, 0x44	; 68
     c3a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     c3e:	ec b3       	in	r30, 0x1c	; 28
     c40:	88 e0       	ldi	r24, 0x08	; 8
     c42:	e8 9f       	mul	r30, r24
     c44:	f0 01       	movw	r30, r0
     c46:	11 24       	eor	r1, r1
     c48:	e4 53       	subi	r30, 0x34	; 52
     c4a:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     c4c:	a8 e2       	ldi	r26, 0x28	; 40
     c4e:	ba e0       	ldi	r27, 0x0A	; 10
     c50:	96 e0       	ldi	r25, 0x06	; 6
     c52:	81 91       	ld	r24, Z+
     c54:	8d 93       	st	X+, r24
     c56:	9a 95       	dec	r25
     c58:	e1 f7       	brne	.-8      	; 0xc52 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     c5a:	8b e0       	ldi	r24, 0x0B	; 11
     c5c:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     c60:	8c b3       	in	r24, 0x1c	; 28
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	58 f4       	brcc	.+22     	; 0xc7c <__vector_8+0x60>
        asm(
     c66:	8c b3       	in	r24, 0x1c	; 28
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <__vector_8+0x52>
     c6c:	99 0f       	add	r25, r25
     c6e:	8a 95       	dec	r24
     c70:	ea f7       	brpl	.-6      	; 0xc6c <__vector_8+0x50>
     c72:	99 b9       	out	0x09, r25	; 9
     c74:	8c b3       	in	r24, 0x1c	; 28
     c76:	83 95       	inc	r24
     c78:	8c bb       	out	0x1c, r24	; 28
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c7c:	8c b3       	in	r24, 0x1c	; 28
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	21 f4       	brne	.+8      	; 0xc8a <__vector_8+0x6e>
     c82:	2a 9a       	sbi	0x05, 2	; 5
     c84:	83 95       	inc	r24
     c86:	8c bb       	out	0x1c, r24	; 28
     c88:	03 c0       	rjmp	.+6      	; 0xc90 <__vector_8+0x74>
     c8a:	2e 9a       	sbi	0x05, 6	; 5
     c8c:	88 27       	eor	r24, r24
     c8e:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c90:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     c94:	88 23       	and	r24, r24
     c96:	29 f0       	breq	.+10     	; 0xca2 <__vector_8+0x86>
     c98:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     c9c:	81 50       	subi	r24, 0x01	; 1
     c9e:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
    if (*serTxAddr) {
     cd0:	e0 91 bb 3a 	lds	r30, 0x3ABB	; 0x803abb <serTxAddr>
     cd4:	f0 91 bc 3a 	lds	r31, 0x3ABC	; 0x803abc <serTxAddr+0x1>
     cd8:	80 81       	ld	r24, Z
     cda:	88 23       	and	r24, r24
     cdc:	91 f0       	breq	.+36     	; 0xd02 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     cde:	80 81       	ld	r24, Z
     ce0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     ce4:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <serTxAddr>
     ce8:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <serTxAddr+0x1>
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <serTxAddr>
     cf2:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     cf6:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cfa:	80 62       	ori	r24, 0x20	; 32
     cfc:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     d08:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	9f 91       	pop	r25
     d18:	8f 91       	pop	r24
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     d3c:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d40:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d44:	80 81       	ld	r24, Z
     d46:	81 11       	cpse	r24, r1
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <__vector_14+0x36>
     d4a:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     d4e:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     d52:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d56:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     d5a:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d5e:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d62:	80 81       	ld	r24, Z
     d64:	88 23       	and	r24, r24
     d66:	e1 f0       	breq	.+56     	; 0xda0 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     d68:	20 81       	ld	r18, Z
     d6a:	40 91 b8 3a 	lds	r20, 0x3AB8	; 0x803ab8 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	2f 57       	subi	r18, 0x7F	; 127
     d72:	31 09       	sbc	r19, r1
     d74:	42 9f       	mul	r20, r18
     d76:	c0 01       	movw	r24, r0
     d78:	43 9f       	mul	r20, r19
     d7a:	90 0d       	add	r25, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	89 2f       	mov	r24, r25
     d80:	99 0f       	add	r25, r25
     d82:	99 0b       	sbc	r25, r25
     d84:	80 58       	subi	r24, 0x80	; 128
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d8c:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d90:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d9a:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <__vector_14+0x88>
    } else {
        DAC0_DATA = 0x80;
     da0:	80 e8       	ldi	r24, 0x80	; 128
     da2:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        auPlayDone = 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 f4 3a 	sts	0x3AF4, r24	; 0x803af4 <auPlayDone>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	8f 93       	push	r24
     dd6:	ef 93       	push	r30
     dd8:	ff 93       	push	r31
    if (serRxDone == 0){
     dda:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <serRxDone>
     dde:	81 11       	cpse	r24, r1
     de0:	44 c0       	rjmp	.+136    	; 0xe6a <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     de2:	ed b3       	in	r30, 0x1d	; 29
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     dea:	e9 58       	subi	r30, 0x89	; 137
     dec:	f5 4c       	sbci	r31, 0xC5	; 197
     dee:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     df0:	ed b3       	in	r30, 0x1d	; 29
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	e9 58       	subi	r30, 0x89	; 137
     df6:	f5 4c       	sbci	r31, 0xC5	; 197
     df8:	80 81       	ld	r24, Z
     dfa:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     dfe:	ed b3       	in	r30, 0x1d	; 29
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	e9 58       	subi	r30, 0x89	; 137
     e04:	f5 4c       	sbci	r31, 0xC5	; 197
     e06:	80 81       	ld	r24, Z
     e08:	8a 30       	cpi	r24, 0x0A	; 10
     e0a:	39 f0       	breq	.+14     	; 0xe1a <__vector_27+0x50>
     e0c:	ed b3       	in	r30, 0x1d	; 29
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	e9 58       	subi	r30, 0x89	; 137
     e12:	f5 4c       	sbci	r31, 0xC5	; 197
     e14:	80 81       	ld	r24, Z
     e16:	8d 30       	cpi	r24, 0x0D	; 13
     e18:	49 f4       	brne	.+18     	; 0xe2c <__vector_27+0x62>
            serRx[RXCNT] = 0;
     e1a:	ed b3       	in	r30, 0x1d	; 29
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	e9 58       	subi	r30, 0x89	; 137
     e20:	f5 4c       	sbci	r31, 0xC5	; 197
     e22:	10 82       	st	Z, r1
            serRxDone = 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <serRxDone>
     e2a:	1f c0       	rjmp	.+62     	; 0xe6a <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     e2c:	ed b3       	in	r30, 0x1d	; 29
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	e9 58       	subi	r30, 0x89	; 137
     e32:	f5 4c       	sbci	r31, 0xC5	; 197
     e34:	80 81       	ld	r24, Z
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	39 f0       	breq	.+14     	; 0xe48 <__vector_27+0x7e>
     e3a:	ed b3       	in	r30, 0x1d	; 29
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	e9 58       	subi	r30, 0x89	; 137
     e40:	f5 4c       	sbci	r31, 0xC5	; 197
     e42:	80 81       	ld	r24, Z
     e44:	8f 37       	cpi	r24, 0x7F	; 127
     e46:	59 f4       	brne	.+22     	; 0xe5e <__vector_27+0x94>
     e48:	8d b3       	in	r24, 0x1d	; 29
     e4a:	88 23       	and	r24, r24
     e4c:	41 f0       	breq	.+16     	; 0xe5e <__vector_27+0x94>
            serRx[RXCNT] = 0;
     e4e:	ed b3       	in	r30, 0x1d	; 29
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	e9 58       	subi	r30, 0x89	; 137
     e54:	f5 4c       	sbci	r31, 0xC5	; 197
     e56:	10 82       	st	Z, r1
            --RXCNT;
     e58:	8d b3       	in	r24, 0x1d	; 29
     e5a:	81 50       	subi	r24, 0x01	; 1
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     e5e:	8d b3       	in	r24, 0x1d	; 29
     e60:	80 34       	cpi	r24, 0x40	; 64
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__vector_27+0xa0>
     e64:	8d b3       	in	r24, 0x1d	; 29
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     e6a:	80 e8       	ldi	r24, 0x80	; 128
     e6c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	8f 91       	pop	r24
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	8f 93       	push	r24
     e8c:	ef 93       	push	r30
     e8e:	ff 93       	push	r31
    TCB0_CNT = 0;
     e90:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e94:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e9e:	e5 e0       	ldi	r30, 0x05	; 5
     ea0:	f8 e0       	ldi	r31, 0x08	; 8
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	80 83       	st	Z, r24
};
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	8f 91       	pop	r24
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     eca:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <adc0Chg>
     ece:	81 11       	cpse	r24, r1
     ed0:	19 c0       	rjmp	.+50     	; 0xf04 <__vector_20+0x4c>
        AUPOS = (AUPOS+1)&(AULEN-1);
     ed2:	8e b3       	in	r24, 0x1e	; 30
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	87 70       	andi	r24, 0x07	; 7
     ed8:	8e bb       	out	0x1e, r24	; 30
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn[AUPOS]=ADC0_RESL;
     eda:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ede:	8e 31       	cpi	r24, 0x1E	; 30
     ee0:	49 f4       	brne	.+18     	; 0xef4 <__vector_20+0x3c>
     ee2:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ee6:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     eea:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <adcTemp>
     eee:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <adcTemp+0x1>
     ef2:	0d c0       	rjmp	.+26     	; 0xf0e <__vector_20+0x56>
     ef4:	ee b3       	in	r30, 0x1e	; 30
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     efc:	ec 53       	subi	r30, 0x3C	; 60
     efe:	f5 4c       	sbci	r31, 0xC5	; 197
     f00:	80 83       	st	Z, r24
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <__vector_20+0x56>
    } else --adc0Chg;
     f04:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <adc0Chg>
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     f34:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f38:	81 11       	cpse	r24, r1
     f3a:	0a c0       	rjmp	.+20     	; 0xf50 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     f3c:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f40:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f44:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <adcPhot>
     f48:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	10 c0       	rjmp	.+32     	; 0xf70 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     f50:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	79 f4       	brne	.+30     	; 0xf76 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     f58:	88 e0       	ldi	r24, 0x08	; 8
     f5a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     f5e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f62:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f66:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcHall>
     f6a:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f74:	10 c0       	rjmp	.+32     	; 0xf96 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     f76:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f7a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f7e:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <adcBtns>
     f82:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <adcBtns+0x1>
        if (A1CNT == 15){
     f86:	8f b3       	in	r24, 0x1f	; 31
     f88:	8f 30       	cpi	r24, 0x0F	; 15
     f8a:	29 f4       	brne	.+10     	; 0xf96 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     f8c:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     f90:	88 e0       	ldi	r24, 0x08	; 8
     f92:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f96:	8f b3       	in	r24, 0x1f	; 31
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	99 27       	eor	r25, r25
     fa0:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     fc8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fcc:	81 ff       	sbrs	r24, 1
     fce:	39 c0       	rjmp	.+114    	; 0x1042 <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     fd0:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	29 f0       	breq	.+10     	; 0xfe2 <__vector_6+0x2c>
     fd8:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     fe2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     fe6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     fea:	82 96       	adiw	r24, 0x22	; 34
     fec:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
     ff0:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     ff4:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ff8:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     ffc:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
    1000:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
    1004:	28 17       	cp	r18, r24
    1006:	39 07       	cpc	r19, r25
    1008:	70 f4       	brcc	.+28     	; 0x1026 <__vector_6+0x70>
    100a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    100e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    1012:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
    1016:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
    101a:	82 1b       	sub	r24, r18
    101c:	93 0b       	sbc	r25, r19
    101e:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
    1022:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    1026:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    102a:	83 fd       	sbrc	r24, 3
    102c:	fc cf       	rjmp	.-8      	; 0x1026 <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    102e:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
    1032:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
    1036:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    103a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	06 c0       	rjmp	.+12     	; 0x104e <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    1042:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <minuteMark>
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    1052:	9f 91       	pop	r25
    1054:	8f 91       	pop	r24
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f 90       	pop	r0
    1060:	1f 90       	pop	r1
    1062:	18 95       	reti

00001064 <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    1076:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    107a:	8f 91       	pop	r24
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1086:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    108a:	91 fd       	sbrc	r25, 1
    108c:	fc cf       	rjmp	.-8      	; 0x1086 <EERead>
    108e:	fb 01       	movw	r30, r22
    1090:	48 0f       	add	r20, r24

    while(size){
    1092:	84 17       	cp	r24, r20
    1094:	39 f0       	breq	.+14     	; 0x10a4 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    1096:	a8 2f       	mov	r26, r24
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	bc 5e       	subi	r27, 0xEC	; 236
    109c:	9c 91       	ld	r25, X
    109e:	91 93       	st	Z+, r25
    10a0:	8f 5f       	subi	r24, 0xFF	; 255
    10a2:	f7 cf       	rjmp	.-18     	; 0x1092 <EERead+0xc>
        --size;
    }
}
    10a4:	08 95       	ret

000010a6 <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    10a6:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    10a8:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10aa:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    10ac:	44 23       	and	r20, r20
    10ae:	09 f1       	breq	.+66     	; 0x10f2 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    10b0:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10b4:	51 fd       	sbrc	r21, 1
    10b6:	fc cf       	rjmp	.-8      	; 0x10b0 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    10b8:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    10ba:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    10be:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    10c0:	58 2f       	mov	r21, r24
    10c2:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	db 01       	movw	r26, r22
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	ac 91       	ld	r26, X
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	fc 5e       	subi	r31, 0xEC	; 236
    10d4:	a0 83       	st	Z, r26
            --size;
    10d6:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10da:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10dc:	5f 31       	cpi	r21, 0x1F	; 31
    10de:	81 f7       	brne	.-32     	; 0x10c0 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    10e0:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10e2:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    10e6:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10ea:	52 ff       	sbrs	r21, 2
    10ec:	df cf       	rjmp	.-66     	; 0x10ac <EEWrite+0x6>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    10f0:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	08 95       	ret

000010f6 <SerSend>:
}

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    10f6:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    10fa:	22 23       	and	r18, r18
    10fc:	59 f0       	breq	.+22     	; 0x1114 <SerSend+0x1e>
        serTxAddr = addr;
    10fe:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <serTxAddr>
    1102:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <serTxAddr+0x1>
        serTxDone = 0;
    1106:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	08 95       	ret
    } else return 1;    //Error: Still sending data
    1114:	81 e0       	ldi	r24, 0x01	; 1
};
    1116:	08 95       	ret

00001118 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    1118:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    111a:	81 11       	cpse	r24, r1
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <SerSpeed+0x8>
    111e:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	82 1b       	sub	r24, r18
    1126:	91 09       	sbc	r25, r1
    1128:	98 2f       	mov	r25, r24
    112a:	88 27       	eor	r24, r24
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1134:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    1138:	08 95       	ret

0000113a <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    113a:	82 e1       	ldi	r24, 0x12	; 18
    113c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1140:	e0 e0       	ldi	r30, 0x00	; 0
    1142:	f6 e0       	ldi	r31, 0x06	; 6
    1144:	80 81       	ld	r24, Z
    1146:	8b 7f       	andi	r24, 0xFB	; 251
    1148:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    114a:	8e e1       	ldi	r24, 0x1E	; 30
    114c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1150:	83 e0       	ldi	r24, 0x03	; 3
    1152:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <adc0Chg>
    1156:	08 95       	ret

00001158 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    1158:	82 e2       	ldi	r24, 0x22	; 34
    115a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    115e:	e0 e0       	ldi	r30, 0x00	; 0
    1160:	f6 e0       	ldi	r31, 0x06	; 6
    1162:	80 81       	ld	r24, Z
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1168:	87 e0       	ldi	r24, 0x07	; 7
    116a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <adc0Chg>
    1174:	08 95       	ret

00001176 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1176:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <adcBtns>
    117a:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    117e:	24 e0       	ldi	r18, 0x04	; 4
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	2a 95       	dec	r18
    1186:	e1 f7       	brne	.-8      	; 0x1180 <CheckButtons+0xa>
    1188:	99 27       	eor	r25, r25
    118a:	80 36       	cpi	r24, 0x60	; 96
    118c:	91 05       	cpc	r25, r1
    118e:	40 f4       	brcc	.+16     	; 0x11a0 <CheckButtons+0x2a>
    1190:	8f 34       	cpi	r24, 0x4F	; 79
    1192:	91 05       	cpc	r25, r1
    1194:	88 f4       	brcc	.+34     	; 0x11b8 <CheckButtons+0x42>
    1196:	c0 97       	sbiw	r24, 0x30	; 48
    1198:	09 97       	sbiw	r24, 0x09	; 9
    119a:	90 f4       	brcc	.+36     	; 0x11c0 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    11a0:	85 37       	cpi	r24, 0x75	; 117
    11a2:	91 05       	cpc	r25, r1
    11a4:	68 f0       	brcs	.+26     	; 0x11c0 <CheckButtons+0x4a>
    11a6:	8e 38       	cpi	r24, 0x8E	; 142
    11a8:	91 05       	cpc	r25, r1
    11aa:	40 f0       	brcs	.+16     	; 0x11bc <CheckButtons+0x46>
    11ac:	8e 59       	subi	r24, 0x9E	; 158
    11ae:	91 09       	sbc	r25, r1
    11b0:	81 97       	sbiw	r24, 0x21	; 33
    11b2:	30 f4       	brcc	.+12     	; 0x11c0 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    11b4:	90 e0       	ldi	r25, 0x00	; 0
            break;
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    11b8:	93 e0       	ldi	r25, 0x03	; 3
            break;
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    11bc:	91 e0       	ldi	r25, 0x01	; 1
            break;
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    11c2:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <previousValue.3878>
    11c6:	98 17       	cp	r25, r24
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <CheckButtons+0x5a>
            previousValue = button;
    11ca:	90 93 24 38 	sts	0x3824, r25	; 0x803824 <previousValue.3878>
            return 0xFF;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    11d0:	08 95       	ret

000011d2 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    11d2:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <state.3888>
    11d6:	90 91 23 38 	lds	r25, 0x3823	; 0x803823 <state.3888+0x1>
    11da:	9c 01       	movw	r18, r24
    11dc:	32 2f       	mov	r19, r18
    11de:	22 27       	eor	r18, r18
    11e0:	32 95       	swap	r19
    11e2:	33 0f       	add	r19, r19
    11e4:	30 7e       	andi	r19, 0xE0	; 224
    11e6:	82 27       	eor	r24, r18
    11e8:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    11ea:	9c 01       	movw	r18, r24
    11ec:	23 2f       	mov	r18, r19
    11ee:	33 27       	eor	r19, r19
    11f0:	26 95       	lsr	r18
    11f2:	82 27       	eor	r24, r18
    11f4:	93 27       	eor	r25, r19
    state ^= (state << 7);
    11f6:	9c 01       	movw	r18, r24
    11f8:	36 95       	lsr	r19
    11fa:	32 2f       	mov	r19, r18
    11fc:	22 27       	eor	r18, r18
    11fe:	37 95       	ror	r19
    1200:	27 95       	ror	r18
    1202:	82 27       	eor	r24, r18
    1204:	93 27       	eor	r25, r19
    1206:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <state.3888>
    120a:	90 93 23 38 	sts	0x3823, r25	; 0x803823 <state.3888+0x1>
    return (state & 0xff);
}
    120e:	08 95       	ret

00001210 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	7b 01       	movw	r14, r22
    1220:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    1222:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1226:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    122a:	e8 2f       	mov	r30, r24
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	31 97       	sbiw	r30, 0x01	; 1
    1230:	e7 70       	andi	r30, 0x07	; 7
    1232:	ff 27       	eor	r31, r31
    1234:	eb 5d       	subi	r30, 0xDB	; 219
    1236:	f7 4c       	sbci	r31, 0xC7	; 199
    1238:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    123a:	cb df       	rcall	.-106    	; 0x11d2 <lfsr>
    123c:	8d 21       	and	r24, r13
    123e:	c8 0f       	add	r28, r24
    1240:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    1242:	c7 df       	rcall	.-114    	; 0x11d2 <lfsr>
    1244:	8d 21       	and	r24, r13
    1246:	c8 1b       	sub	r28, r24
    1248:	d1 09       	sbc	r29, r1
    124a:	0c 17       	cp	r16, r28
    124c:	1d 07       	cpc	r17, r29
    124e:	08 f4       	brcc	.+2      	; 0x1252 <floatSpeed+0x42>
    1250:	e8 01       	movw	r28, r16
    1252:	c7 01       	movw	r24, r14
    1254:	ec 16       	cp	r14, r28
    1256:	fd 06       	cpc	r15, r29
    1258:	08 f4       	brcc	.+2      	; 0x125c <floatSpeed+0x4c>
    125a:	ce 01       	movw	r24, r28
    125c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1260:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1264:	df 91       	pop	r29
}
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	08 95       	ret

00001274 <floatAround>:
    1274:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	c8 2f       	mov	r28, r24
    127e:	d4 2f       	mov	r29, r20
    1280:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1282:	e6 2f       	mov	r30, r22
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	e7 70       	andi	r30, 0x07	; 7
    128a:	ff 27       	eor	r31, r31
    128c:	eb 5d       	subi	r30, 0xDB	; 219
    128e:	f7 4c       	sbci	r31, 0xC7	; 199
    1290:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    1292:	9f df       	rcall	.-194    	; 0x11d2 <lfsr>
    1294:	81 23       	and	r24, r17
    1296:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1298:	9c df       	rcall	.-200    	; 0x11d2 <lfsr>
    129a:	81 23       	and	r24, r17
    129c:	c8 1b       	sub	r28, r24
    129e:	8c 2f       	mov	r24, r28
    12a0:	00 23       	and	r16, r16
    if (max){
    12a2:	41 f0       	breq	.+16     	; 0x12b4 <floatAround+0x40>
    12a4:	9c 2f       	mov	r25, r28
    12a6:	0c 17       	cp	r16, r28
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <floatAround+0x38>
    12aa:	90 2f       	mov	r25, r16
    12ac:	8d 2f       	mov	r24, r29
    12ae:	d9 17       	cp	r29, r25
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <floatAround+0x40>
    12b2:	89 2f       	mov	r24, r25
    12b4:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	8d 17       	cp	r24, r29
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <floatAround+0x4c>
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	2d 2f       	mov	r18, r29
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	24 23       	and	r18, r20
    12c6:	35 23       	and	r19, r21
    12c8:	23 2b       	or	r18, r19
    12ca:	09 f0       	breq	.+2      	; 0x12ce <floatAround+0x5a>
    12cc:	8d 2f       	mov	r24, r29
    12ce:	df 91       	pop	r29

    return sample;
}
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <SaveGameState>:
    12d8:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    12da:	df 92       	push	r13
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	64 97       	sbiw	r28, 0x14	; 20
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    12f0:	44 e1       	ldi	r20, 0x14	; 20
    12f2:	be 01       	movw	r22, r28
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	c5 de       	rcall	.-630    	; 0x1086 <EERead>
    12fc:	83 e6       	ldi	r24, 0x63	; 99
    12fe:	c8 2e       	mov	r12, r24
    1300:	8a e3       	ldi	r24, 0x3A	; 58
    1302:	d8 2e       	mov	r13, r24
    1304:	8e 01       	movw	r16, r28
    1306:	0f 5f       	subi	r16, 0xFF	; 255
    1308:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    130a:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    130c:	f8 01       	movw	r30, r16
    130e:	81 91       	ld	r24, Z+
    1310:	8f 01       	movw	r16, r30
    1312:	f6 01       	movw	r30, r12
    1314:	90 81       	ld	r25, Z
    1316:	98 13       	cpse	r25, r24
    1318:	08 c0       	rjmp	.+16     	; 0x132a <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    131a:	f3 94       	inc	r15
    131c:	ff ef       	ldi	r31, 0xFF	; 255
    131e:	cf 1a       	sub	r12, r31
    1320:	df 0a       	sbc	r13, r31
    1322:	80 e1       	ldi	r24, 0x10	; 16
    1324:	f8 12       	cpse	r15, r24
    1326:	f2 cf       	rjmp	.-28     	; 0x130c <SaveGameState+0x34>
    1328:	08 c0       	rjmp	.+16     	; 0x133a <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	b6 01       	movw	r22, r12
    132e:	8f 2d       	mov	r24, r15
    1330:	ba de       	rcall	.-652    	; 0x10a6 <EEWrite>
    1332:	88 23       	and	r24, r24
    1334:	91 f3       	breq	.-28     	; 0x131a <SaveGameState+0x42>
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	36 c0       	rjmp	.+108    	; 0x13a6 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    133a:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory>
    133e:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x1>
    1342:	30 93 73 3a 	sts	0x3A73, r19	; 0x803a73 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    1346:	20 93 74 3a 	sts	0x3A74, r18	; 0x803a74 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    134a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    134e:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    1352:	90 93 75 3a 	sts	0x3A75, r25	; 0x803a75 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    1356:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    135a:	89 89       	ldd	r24, Y+17	; 0x11
    135c:	9a 89       	ldd	r25, Y+18	; 0x12
    135e:	98 27       	eor	r25, r24
    1360:	89 27       	eor	r24, r25
    1362:	98 27       	eor	r25, r24
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	69 f4       	brne	.+26     	; 0x1384 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    136a:	8b 89       	ldd	r24, Y+19	; 0x13
    136c:	9c 89       	ldd	r25, Y+20	; 0x14
    136e:	98 27       	eor	r25, r24
    1370:	89 27       	eor	r24, r25
    1372:	98 27       	eor	r25, r24
    1374:	20 91 42 38 	lds	r18, 0x3842	; 0x803842 <inventory+0x2>
    1378:	30 91 43 38 	lds	r19, 0x3843	; 0x803843 <inventory+0x3>
    137c:	28 17       	cp	r18, r24
    137e:	39 07       	cpc	r19, r25
    1380:	49 f4       	brne	.+18     	; 0x1394 <SaveGameState+0xbc>
    1382:	10 c0       	rjmp	.+32     	; 0x13a4 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1384:	42 e0       	ldi	r20, 0x02	; 2
    1386:	63 e7       	ldi	r22, 0x73	; 115
    1388:	7a e3       	ldi	r23, 0x3A	; 58
    138a:	80 e1       	ldi	r24, 0x10	; 16
    138c:	8c de       	rcall	.-744    	; 0x10a6 <EEWrite>
    138e:	88 23       	and	r24, r24
    1390:	61 f3       	breq	.-40     	; 0x136a <SaveGameState+0x92>
    1392:	d1 cf       	rjmp	.-94     	; 0x1336 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1394:	42 e0       	ldi	r20, 0x02	; 2
    1396:	65 e7       	ldi	r22, 0x75	; 117
    1398:	7a e3       	ldi	r23, 0x3A	; 58
    139a:	82 e1       	ldi	r24, 0x12	; 18
    139c:	84 de       	rcall	.-760    	; 0x10a6 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	81 11       	cpse	r24, r1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <SaveGameState+0xce>
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    13a6:	89 2f       	mov	r24, r25
    13a8:	64 96       	adiw	r28, 0x14	; 20
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	08 95       	ret

000013be <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    13be:	e8 2f       	mov	r30, r24
    13c0:	ef 77       	andi	r30, 0x7F	; 127
    13c2:	e6 95       	lsr	r30
    13c4:	e6 95       	lsr	r30
    13c6:	e6 95       	lsr	r30
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	ed 59       	subi	r30, 0x9D	; 157
    13cc:	f5 4c       	sbci	r31, 0xC5	; 197
    13ce:	20 81       	ld	r18, Z
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	87 70       	andi	r24, 0x07	; 7
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <ReadStatusBit+0x1e>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <ReadStatusBit+0x1a>
    13e0:	ca 01       	movw	r24, r20
}
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	08 95       	ret

000013e6 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    13e6:	e8 2f       	mov	r30, r24
    13e8:	ef 77       	andi	r30, 0x7F	; 127
    13ea:	e6 95       	lsr	r30
    13ec:	e6 95       	lsr	r30
    13ee:	e6 95       	lsr	r30
    13f0:	28 2f       	mov	r18, r24
    13f2:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	ed 59       	subi	r30, 0x9D	; 157
    13f8:	f5 4c       	sbci	r31, 0xC5	; 197
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <WriteStatusBit+0x1c>
    1400:	88 0f       	add	r24, r24
    1402:	2a 95       	dec	r18
    1404:	ea f7       	brpl	.-6      	; 0x1400 <WriteStatusBit+0x1a>
    1406:	66 23       	and	r22, r22
    1408:	19 f0       	breq	.+6      	; 0x1410 <WriteStatusBit+0x2a>
    140a:	90 81       	ld	r25, Z
    140c:	89 2b       	or	r24, r25
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    1410:	80 95       	com	r24
    1412:	90 81       	ld	r25, Z
    1414:	89 23       	and	r24, r25
    1416:	80 83       	st	Z, r24
    1418:	08 95       	ret

0000141a <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    141a:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    141c:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    141e:	31 f0       	breq	.+12     	; 0x142c <UpdateState+0x12>
        if (clearBit) {
    1420:	97 ff       	sbrs	r25, 7
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	01 c0       	rjmp	.+2      	; 0x142a <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	dd cf       	rjmp	.-70     	; 0x13e6 <WriteStatusBit>
    142c:	08 95       	ret

0000142e <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    142e:	cf 93       	push	r28
    1430:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    1432:	8f 77       	andi	r24, 0x7F	; 127
    1434:	c4 df       	rcall	.-120    	; 0x13be <ReadStatusBit>
    1436:	2c 2f       	mov	r18, r28
    1438:	22 1f       	adc	r18, r18
    143a:	22 27       	eor	r18, r18
    143c:	22 1f       	adc	r18, r18
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	81 11       	cpse	r24, r1
    1442:	01 c0       	rjmp	.+2      	; 0x1446 <CheckState+0x18>
    1444:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1446:	82 2f       	mov	r24, r18
    1448:	89 27       	eor	r24, r25
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    144e:	e3 e0       	ldi	r30, 0x03	; 3
    1450:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    1452:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    1454:	91 91       	ld	r25, Z+
    1456:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    1458:	ed 30       	cpi	r30, 0x0D	; 13
    145a:	91 e1       	ldi	r25, 0x11	; 17
    145c:	f9 07       	cpc	r31, r25
    145e:	d1 f7       	brne	.-12     	; 0x1454 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    1460:	83 70       	andi	r24, 0x03	; 3
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <whoami>
    return whoami;
}
    1468:	08 95       	ret

0000146a <Reset>:

void Reset(){
    146a:	e3 e6       	ldi	r30, 0x63	; 99
    146c:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    146e:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1470:	8a e3       	ldi	r24, 0x3A	; 58
    1472:	e7 37       	cpi	r30, 0x77	; 119
    1474:	f8 07       	cpc	r31, r24
    1476:	d9 f7       	brne	.-10     	; 0x146e <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1478:	ea df       	rcall	.-44     	; 0x144e <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    147a:	81 11       	cpse	r24, r1
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    147e:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <gameState+0xd>
    1482:	80 64       	ori	r24, 0x40	; 64
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	31 f4       	brne	.+12     	; 0x1496 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    148a:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <gameState+0xd>
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	80 93 70 3a 	sts	0x3A70, r24	; 0x803a70 <gameState+0xd>
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	21 f4       	brne	.+8      	; 0x14a2 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    149a:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0xe>
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    14a6:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0xe>
    14aa:	82 60       	ori	r24, 0x02	; 2
    14ac:	80 93 71 3a 	sts	0x3A71, r24	; 0x803a71 <gameState+0xe>
    14b0:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <gameState>
    14b4:	81 60       	ori	r24, 0x01	; 1
    14b6:	80 93 63 3a 	sts	0x3A63, r24	; 0x803a63 <gameState>
    14ba:	08 95       	ret

000014bc <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    14c0:	44 e1       	ldi	r20, 0x14	; 20
    14c2:	63 e6       	ldi	r22, 0x63	; 99
    14c4:	7a e3       	ldi	r23, 0x3A	; 58
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	de dd       	rcall	.-1092   	; 0x1086 <EERead>
    14ca:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    14cc:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    14ce:	8c 2f       	mov	r24, r28
    14d0:	76 df       	rcall	.-276    	; 0x13be <ReadStatusBit>
    14d2:	d8 0f       	add	r29, r24
    14d4:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    14d6:	c2 37       	cpi	r28, 0x72	; 114
    14d8:	d1 f7       	brne	.-12     	; 0x14ce <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    14da:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <LoadGameState+0x26>
    14de:	c5 df       	rcall	.-118    	; 0x146a <Reset>
    } else getID();
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <LoadGameState+0x28>
    14e2:	b5 df       	rcall	.-150    	; 0x144e <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    14e4:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x10>
    14e8:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x11>
    14ec:	98 27       	eor	r25, r24
    14ee:	89 27       	eor	r24, r25
    14f0:	98 27       	eor	r25, r24
    14f2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory>
    14f6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    14fa:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <gameState+0x12>
    14fe:	90 91 76 3a 	lds	r25, 0x3A76	; 0x803a76 <gameState+0x13>
    1502:	98 27       	eor	r25, r24
    1504:	89 27       	eor	r24, r25
    1506:	98 27       	eor	r25, r24
    1508:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <inventory+0x2>
    150c:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <inventory+0x3>
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    1516:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1518:	86 e7       	ldi	r24, 0x76	; 118
    151a:	89 df       	rcall	.-238    	; 0x142e <CheckState>
    151c:	c8 2f       	mov	r28, r24
    151e:	88 23       	and	r24, r24
    1520:	81 f0       	breq	.+32     	; 0x1542 <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    1522:	e0 91 31 be 	lds	r30, 0xBE31	; 0x80be31 <__bss_end+0x8315>
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	e4 53       	subi	r30, 0x34	; 52
    152a:	f5 4c       	sbci	r31, 0xC5	; 197
    152c:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    152e:	e0 91 30 be 	lds	r30, 0xBE30	; 0x80be30 <__bss_end+0x8314>
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1538:	e4 53       	subi	r30, 0x34	; 52
    153a:	f5 4c       	sbci	r31, 0xC5	; 197
    153c:	80 83       	st	Z, r24
        return 1;
    153e:	c1 e0       	ldi	r28, 0x01	; 1
    1540:	4c c0       	rjmp	.+152    	; 0x15da <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    1542:	85 e7       	ldi	r24, 0x75	; 117
    1544:	74 df       	rcall	.-280    	; 0x142e <CheckState>
    1546:	88 23       	and	r24, r24
    1548:	59 f1       	breq	.+86     	; 0x15a0 <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    154a:	e0 91 31 be 	lds	r30, 0xBE31	; 0x80be31 <__bss_end+0x8315>
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1554:	e4 53       	subi	r30, 0x34	; 52
    1556:	f5 4c       	sbci	r31, 0xC5	; 197
    1558:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    155a:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <cooledDown.3947>
    155e:	88 23       	and	r24, r24
    1560:	79 f0       	breq	.+30     	; 0x1580 <HotSummer+0x6a>
    1562:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    1566:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    156a:	20 91 f7 3a 	lds	r18, 0x3AF7	; 0x803af7 <adcTemp>
    156e:	30 91 f8 3a 	lds	r19, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    1572:	80 96       	adiw	r24, 0x20	; 32
    1574:	28 17       	cp	r18, r24
    1576:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1578:	18 f0       	brcs	.+6      	; 0x1580 <HotSummer+0x6a>
    157a:	86 e7       	ldi	r24, 0x76	; 118
    157c:	4e df       	rcall	.-356    	; 0x141a <UpdateState>
            return 0;
    157e:	2d c0       	rjmp	.+90     	; 0x15da <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1580:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    1584:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    1588:	20 91 f7 3a 	lds	r18, 0x3AF7	; 0x803af7 <adcTemp>
    158c:	30 91 f8 3a 	lds	r19, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    1590:	08 96       	adiw	r24, 0x08	; 8
    1592:	82 17       	cp	r24, r18
    1594:	93 07       	cpc	r25, r19
    1596:	08 f1       	brcs	.+66     	; 0x15da <HotSummer+0xc4>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <cooledDown.3947>
    159e:	1d c0       	rjmp	.+58     	; 0x15da <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    15a0:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    15a4:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    15a8:	89 2b       	or	r24, r25
    15aa:	41 f4       	brne	.+16     	; 0x15bc <HotSummer+0xa6>
    15ac:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <adcTemp>
    15b0:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    15b4:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <calTemp>
    15b8:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    15bc:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    15c0:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    15c4:	20 91 f7 3a 	lds	r18, 0x3AF7	; 0x803af7 <adcTemp>
    15c8:	30 91 f8 3a 	lds	r19, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    15cc:	80 96       	adiw	r24, 0x20	; 32
    15ce:	28 17       	cp	r18, r24
    15d0:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    15d2:	18 f0       	brcs	.+6      	; 0x15da <HotSummer+0xc4>
    15d4:	85 e7       	ldi	r24, 0x75	; 117
    15d6:	21 df       	rcall	.-446    	; 0x141a <UpdateState>
        }
    }
    return 0;
    15d8:	c0 e0       	ldi	r28, 0x00	; 0
}
    15da:	8c 2f       	mov	r24, r28
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    15e0:	e2 e3       	ldi	r30, 0x32	; 50
    15e2:	fe eb       	ldi	r31, 0xBE	; 190
    for (int8_t i=0; i<5; i++) {
    15e4:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    15e6:	a5 81       	ldd	r26, Z+5	; 0x05
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    15ea:	98 17       	cp	r25, r24
    15ec:	34 f4       	brge	.+12     	; 0x15fa <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    15ee:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15f2:	a4 53       	subi	r26, 0x34	; 52
    15f4:	b5 4c       	sbci	r27, 0xC5	; 197
    15f6:	2c 93       	st	X, r18
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    15fa:	a4 53       	subi	r26, 0x34	; 52
    15fc:	b5 4c       	sbci	r27, 0xC5	; 197
    15fe:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    1600:	a0 81       	ld	r26, Z
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    1604:	96 17       	cp	r25, r22
    1606:	34 f4       	brge	.+12     	; 0x1614 <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    1608:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    160c:	a4 53       	subi	r26, 0x34	; 52
    160e:	b5 4c       	sbci	r27, 0xC5	; 197
    1610:	2c 93       	st	X, r18
    1612:	03 c0       	rjmp	.+6      	; 0x161a <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    1614:	a4 53       	subi	r26, 0x34	; 52
    1616:	b5 4c       	sbci	r27, 0xC5	; 197
    1618:	1c 92       	st	X, r1
    161a:	9f 5f       	subi	r25, 0xFF	; 255
    161c:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    161e:	95 30       	cpi	r25, 0x05	; 5
    1620:	11 f7       	brne	.-60     	; 0x15e6 <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    1622:	08 95       	ret

00001624 <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1624:	ac e3       	ldi	r26, 0x3C	; 60
    1626:	be eb       	ldi	r27, 0xBE	; 190
    1628:	ec 91       	ld	r30, X
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	e4 53       	subi	r30, 0x34	; 52
    162e:	f5 4c       	sbci	r31, 0xC5	; 197
    1630:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	ec 91       	ld	r30, X
    1636:	12 97       	sbiw	r26, 0x02	; 2
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	e4 53       	subi	r30, 0x34	; 52
    163c:	f5 4c       	sbci	r31, 0xC5	; 197
    163e:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	ec 91       	ld	r30, X
    1644:	11 97       	sbiw	r26, 0x01	; 1
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	e4 53       	subi	r30, 0x34	; 52
    164a:	f5 4c       	sbci	r31, 0xC5	; 197
    164c:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    164e:	13 96       	adiw	r26, 0x03	; 3
    1650:	ec 91       	ld	r30, X
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e4 53       	subi	r30, 0x34	; 52
    1656:	f5 4c       	sbci	r31, 0xC5	; 197
    1658:	60 83       	st	Z, r22
    165a:	08 95       	ret

0000165c <GenerateBlinks>:
    }
}

void GenerateBlinks(){
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1662:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1666:	88 23       	and	r24, r24
    1668:	29 f0       	breq	.+10     	; 0x1674 <GenerateBlinks+0x18>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    166a:	80 e4       	ldi	r24, 0x40	; 64
    166c:	e0 de       	rcall	.-576    	; 0x142e <CheckState>
    166e:	81 11       	cpse	r24, r1
    1670:	24 c0       	rjmp	.+72     	; 0x16ba <GenerateBlinks+0x5e>
    1672:	50 c0       	rjmp	.+160    	; 0x1714 <GenerateBlinks+0xb8>
    1674:	c0 e4       	ldi	r28, 0x40	; 64
    1676:	de eb       	ldi	r29, 0xBE	; 190
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1678:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    167a:	81 2f       	mov	r24, r17
    167c:	d8 de       	rcall	.-592    	; 0x142e <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    167e:	ee 81       	ldd	r30, Y+6	; 0x06
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1682:	88 23       	and	r24, r24
    1684:	59 f0       	breq	.+22     	; 0x169c <GenerateBlinks+0x40>
                iLED[HCKR[G][i]] = dimValue;
    1686:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    168a:	e4 53       	subi	r30, 0x34	; 52
    168c:	f5 4c       	sbci	r31, 0xC5	; 197
    168e:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    1690:	e8 81       	ld	r30, Y
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	e4 53       	subi	r30, 0x34	; 52
    1696:	f5 4c       	sbci	r31, 0xC5	; 197
    1698:	10 82       	st	Z, r1
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <GenerateBlinks+0x54>
            } else {
                iLED[HCKR[G][i]] = 0;
    169c:	e4 53       	subi	r30, 0x34	; 52
    169e:	f5 4c       	sbci	r31, 0xC5	; 197
    16a0:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    16a2:	e8 81       	ld	r30, Y
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16aa:	e4 53       	subi	r30, 0x34	; 52
    16ac:	f5 4c       	sbci	r31, 0xC5	; 197
    16ae:	80 83       	st	Z, r24
    16b0:	1f 5f       	subi	r17, 0xFF	; 255
    16b2:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    16b4:	10 38       	cpi	r17, 0x80	; 128
    16b6:	09 f7       	brne	.-62     	; 0x167a <GenerateBlinks+0x1e>
    16b8:	d8 cf       	rjmp	.-80     	; 0x166a <GenerateBlinks+0xe>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16ba:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <HeartCount>
    16be:	98 2f       	mov	r25, r24
    16c0:	9d 7f       	andi	r25, 0xFD	; 253
    16c2:	e0 91 2f be 	lds	r30, 0xBE2F	; 0x80be2f <__bss_end+0x8313>
            iLED[BADGER] = dimValue>>1 ;
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16c8:	91 30       	cpi	r25, 0x01	; 1
    16ca:	11 f0       	breq	.+4      	; 0x16d0 <GenerateBlinks+0x74>
    16cc:	85 30       	cpi	r24, 0x05	; 5
    16ce:	21 f4       	brne	.+8      	; 0x16d8 <GenerateBlinks+0x7c>
            iLED[BADGER] = dimValue>>1 ;
    16d0:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16d4:	96 95       	lsr	r25
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <GenerateBlinks+0x88>
        else if ( HeartCount == 2 || HeartCount == 4 )
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	11 f0       	breq	.+4      	; 0x16e0 <GenerateBlinks+0x84>
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	31 f4       	brne	.+12     	; 0x16ec <GenerateBlinks+0x90>
            iLED[BADGER] = dimValue;
    16e0:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16e4:	e4 53       	subi	r30, 0x34	; 52
    16e6:	f5 4c       	sbci	r31, 0xC5	; 197
    16e8:	90 83       	st	Z, r25
    16ea:	0c c0       	rjmp	.+24     	; 0x1704 <GenerateBlinks+0xa8>
        else if ( HeartCount == 0 || HeartCount == 6 )
    16ec:	88 23       	and	r24, r24
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <GenerateBlinks+0x98>
    16f0:	86 30       	cpi	r24, 0x06	; 6
    16f2:	29 f4       	brne	.+10     	; 0x16fe <GenerateBlinks+0xa2>
            iLED[BADGER] = dimValue>>2;
    16f4:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16f8:	96 95       	lsr	r25
    16fa:	96 95       	lsr	r25
    16fc:	f3 cf       	rjmp	.-26     	; 0x16e4 <GenerateBlinks+0x88>
        else
            iLED[BADGER] = 0;
    16fe:	e4 53       	subi	r30, 0x34	; 52
    1700:	f5 4c       	sbci	r31, 0xC5	; 197
    1702:	10 82       	st	Z, r1
        if (HeartCount<32)
    1704:	80 32       	cpi	r24, 0x20	; 32
    1706:	20 f4       	brcc	.+8      	; 0x1710 <GenerateBlinks+0xb4>
            HeartCount++;
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <HeartCount>
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <GenerateBlinks+0xb8>
        else
            HeartCount = 0;
    1710:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    1714:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <LedCount>
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <LedCount>

    switch (effect&0x1f) {
    171e:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <effect>
    1722:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <effect+0x1>
    1726:	2f 71       	andi	r18, 0x1F	; 31
    1728:	33 27       	eor	r19, r19
    172a:	21 30       	cpi	r18, 0x01	; 1
    172c:	31 05       	cpc	r19, r1
    172e:	99 f1       	breq	.+102    	; 0x1796 <GenerateBlinks+0x13a>
    1730:	20 f0       	brcs	.+8      	; 0x173a <GenerateBlinks+0xde>
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	b1 f1       	breq	.+108    	; 0x17a4 <GenerateBlinks+0x148>
    1738:	46 c0       	rjmp	.+140    	; 0x17c6 <GenerateBlinks+0x16a>
        // All LEDs off
        case 0:
            WingBar(0,0);
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	50 df       	rcall	.-352    	; 0x15e0 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1740:	e0 91 3c be 	lds	r30, 0xBE3C	; 0x80be3c <__bss_end+0x8320>
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	e4 53       	subi	r30, 0x34	; 52
    1748:	f5 4c       	sbci	r31, 0xC5	; 197
    174a:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    174c:	e0 91 3e be 	lds	r30, 0xBE3E	; 0x80be3e <__bss_end+0x8322>
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	e4 53       	subi	r30, 0x34	; 52
    1754:	f5 4c       	sbci	r31, 0xC5	; 197
    1756:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1758:	e0 91 30 be 	lds	r30, 0xBE30	; 0x80be30 <__bss_end+0x8314>
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	e4 53       	subi	r30, 0x34	; 52
    1760:	f5 4c       	sbci	r31, 0xC5	; 197
    1762:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1764:	e0 91 3d be 	lds	r30, 0xBE3D	; 0x80be3d <__bss_end+0x8321>
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	e4 53       	subi	r30, 0x34	; 52
    176c:	f5 4c       	sbci	r31, 0xC5	; 197
    176e:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1770:	e0 91 3f be 	lds	r30, 0xBE3F	; 0x80be3f <__bss_end+0x8323>
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	e4 53       	subi	r30, 0x34	; 52
    1778:	f5 4c       	sbci	r31, 0xC5	; 197
    177a:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    177c:	e0 91 31 be 	lds	r30, 0xBE31	; 0x80be31 <__bss_end+0x8315>
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	e4 53       	subi	r30, 0x34	; 52
    1784:	f5 4c       	sbci	r31, 0xC5	; 197
    1786:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1788:	e0 91 2e be 	lds	r30, 0xBE2E	; 0x80be2e <__bss_end+0x8312>
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	e4 53       	subi	r30, 0x34	; 52
    1790:	f5 4c       	sbci	r31, 0xC5	; 197
    1792:	10 82       	st	Z, r1
            break;
    1794:	18 c0       	rjmp	.+48     	; 0x17c6 <GenerateBlinks+0x16a>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    1796:	89 2f       	mov	r24, r25
    1798:	81 70       	andi	r24, 0x01	; 1
    179a:	90 fd       	sbrc	r25, 0
    179c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <GenerateBlinks+0x162>
    17a4:	69 2f       	mov	r22, r25
    17a6:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17a8:	93 ff       	sbrs	r25, 3
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GenerateBlinks+0x154>
    17ac:	60 95       	com	r22
    17ae:	70 95       	com	r23
    17b0:	85 e0       	ldi	r24, 0x05	; 5
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	8a 95       	dec	r24
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <GenerateBlinks+0x156>
    17ba:	61 5e       	subi	r22, 0xE1	; 225
    17bc:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17c2:	1f 91       	pop	r17
    17c4:	2f cf       	rjmp	.-418    	; 0x1624 <SetBothEyes>
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	08 95       	ret

000017ce <GenerateAudio>:


uint8_t GenerateAudio(){
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28

    if (auIn[AULEN>>1] < HPLVL) {
    17d4:	80 91 c8 3a 	lds	r24, 0x3AC8	; 0x803ac8 <auIn+0x4>
    17d8:	89 31       	cpi	r24, 0x19	; 25
    17da:	08 f0       	brcs	.+2      	; 0x17de <GenerateAudio+0x10>
    17dc:	27 c1       	rjmp	.+590    	; 0x1a2c <GenerateAudio+0x25e>

        detHdPh = 1;
    17de:	c1 e0       	ldi	r28, 0x01	; 1
    17e0:	c0 93 c1 3a 	sts	0x3AC1, r28	; 0x803ac1 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    17e4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    17e8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    17ec:	88 27       	eor	r24, r24
    17ee:	89 2b       	or	r24, r25
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <GenerateAudio+0x26>
    17f2:	bf c0       	rjmp	.+382    	; 0x1972 <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    17f4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    17f8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    17fc:	80 7e       	andi	r24, 0xE0	; 224
    17fe:	99 27       	eor	r25, r25
    1800:	89 2b       	or	r24, r25
    1802:	31 f4       	brne	.+12     	; 0x1810 <GenerateAudio+0x42>
                auRepAddr = &zero;
    1804:	8a e3       	ldi	r24, 0x3A	; 58
    1806:	98 e3       	ldi	r25, 0x38	; 56
    1808:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    180c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    1810:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1814:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1818:	80 7e       	andi	r24, 0xE0	; 224
    181a:	99 27       	eor	r25, r25
    181c:	80 97       	sbiw	r24, 0x20	; 32
    181e:	09 f0       	breq	.+2      	; 0x1822 <GenerateAudio+0x54>
    1820:	59 c0       	rjmp	.+178    	; 0x18d4 <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	52 e2       	ldi	r21, 0x22	; 34
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e2       	ldi	r23, 0x20	; 32
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	f1 dc       	rcall	.-1566   	; 0x1210 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	65 e0       	ldi	r22, 0x05	; 5
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	1e dd       	rcall	.-1476   	; 0x1274 <floatAround>
    1838:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <auBuffer.3982+0x2>

                if (buttonMark) {
    183c:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    1840:	88 23       	and	r24, r24
    1842:	09 f4       	brne	.+2      	; 0x1846 <GenerateAudio+0x78>
    1844:	47 c0       	rjmp	.+142    	; 0x18d4 <GenerateAudio+0x106>
                    if (start == 0) {
    1846:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <start.3985>
    184a:	81 11       	cpse	r24, r1
    184c:	15 c0       	rjmp	.+42     	; 0x1878 <GenerateAudio+0xaa>
                        duration = 4;
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <duration.3984>
                        loudness = 0xff;
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <loudness.3983>
                        TCB1_CCMP = 0x2000;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e2       	ldi	r25, 0x20	; 32
    185e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1862:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1866:	81 e1       	ldi	r24, 0x11	; 17
    1868:	98 e3       	ldi	r25, 0x38	; 56
    186a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    186e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <start.3985>
                    }

                    if (loudness) {
    1878:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <loudness.3983>
    187c:	88 23       	and	r24, r24
    187e:	69 f0       	breq	.+26     	; 0x189a <GenerateAudio+0xcc>
                        auVolume = loudness;
    1880:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1884:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <duration.3984>
    1888:	99 23       	and	r25, r25
    188a:	21 f0       	breq	.+8      	; 0x1894 <GenerateAudio+0xc6>
    188c:	91 50       	subi	r25, 0x01	; 1
    188e:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <duration.3984>
    1892:	03 c0       	rjmp	.+6      	; 0x189a <GenerateAudio+0xcc>
    1894:	86 95       	lsr	r24
    1896:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <loudness.3983>
                    } 

                    if (loudness == 0) {
    189a:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <loudness.3983>
    189e:	81 11       	cpse	r24, r1
    18a0:	19 c0       	rjmp	.+50     	; 0x18d4 <GenerateAudio+0x106>
                        effect &= 0x1f;
    18a2:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    18a6:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    18aa:	8f 71       	andi	r24, 0x1F	; 31
    18ac:	99 27       	eor	r25, r25
    18ae:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    18b2:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                        auRepAddr = &zero;
    18b6:	8a e3       	ldi	r24, 0x3A	; 58
    18b8:	98 e3       	ldi	r25, 0x38	; 56
    18ba:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    18be:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    18c2:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    18c6:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        start = 0;
    18d0:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <start.3985>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    18d4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    18d8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    18dc:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    18e0:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    18e4:	80 7e       	andi	r24, 0xE0	; 224
    18e6:	99 27       	eor	r25, r25
    18e8:	80 36       	cpi	r24, 0x60	; 96
    18ea:	91 05       	cpc	r25, r1
    18ec:	a9 f5       	brne	.+106    	; 0x1958 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    18ee:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <auBuffer.3986+0x6>
                auRepAddr = &auBuffer[0];
    18f2:	81 e5       	ldi	r24, 0x51	; 81
    18f4:	98 e3       	ldi	r25, 0x38	; 56
    18f6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    18fa:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    18fe:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1900:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1902:	c3 30       	cpi	r28, 0x03	; 3
    1904:	39 f0       	breq	.+14     	; 0x1914 <GenerateAudio+0x146>
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	65 e0       	ldi	r22, 0x05	; 5
    190c:	80 e8       	ldi	r24, 0x80	; 128
    190e:	b2 dc       	rcall	.-1692   	; 0x1274 <floatAround>
    1910:	f8 01       	movw	r30, r16
    1912:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1914:	cf 5f       	subi	r28, 0xFF	; 255
    1916:	0f 5f       	subi	r16, 0xFF	; 255
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	c6 30       	cpi	r28, 0x06	; 6
    191c:	91 f7       	brne	.-28     	; 0x1902 <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    191e:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    1922:	88 23       	and	r24, r24
    1924:	c9 f0       	breq	.+50     	; 0x1958 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	54 e0       	ldi	r21, 0x04	; 4
    192a:	60 e8       	ldi	r22, 0x80	; 128
    192c:	72 e0       	ldi	r23, 0x02	; 2
    192e:	85 e0       	ldi	r24, 0x05	; 5
    1930:	6f dc       	rcall	.-1826   	; 0x1210 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1932:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1936:	20 ea       	ldi	r18, 0xA0	; 160
    1938:	40 e1       	ldi	r20, 0x10	; 16
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	9b dc       	rcall	.-1738   	; 0x1274 <floatAround>
    193e:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1942:	20 e9       	ldi	r18, 0x90	; 144
    1944:	40 e7       	ldi	r20, 0x70	; 112
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <auBuffer.3986>
    194c:	93 dc       	rcall	.-1754   	; 0x1274 <floatAround>
    194e:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <auBuffer.3986>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1952:	80 95       	com	r24
    1954:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <auBuffer.3986+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1958:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    195c:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1960:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1964:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1968:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    196c:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1970:	5f c0       	rjmp	.+190    	; 0x1a30 <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1972:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1976:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    197a:	88 27       	eor	r24, r24
    197c:	81 15       	cp	r24, r1
    197e:	91 40       	sbci	r25, 0x01	; 1
    1980:	09 f0       	breq	.+2      	; 0x1984 <GenerateAudio+0x1b6>
    1982:	56 c0       	rjmp	.+172    	; 0x1a30 <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1984:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1988:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    198c:	80 7e       	andi	r24, 0xE0	; 224
    198e:	99 27       	eor	r25, r25
    1990:	81 39       	cpi	r24, 0x91	; 145
    1992:	91 05       	cpc	r25, r1
    1994:	08 f0       	brcs	.+2      	; 0x1998 <GenerateAudio+0x1ca>
    1996:	4c c0       	rjmp	.+152    	; 0x1a30 <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1998:	60 91 3c 38 	lds	r22, 0x383C	; 0x80383c <effect>
    199c:	70 91 3d 38 	lds	r23, 0x383D	; 0x80383d <effect+0x1>
    19a0:	60 7e       	andi	r22, 0xE0	; 224
    19a2:	77 27       	eor	r23, r23
    19a4:	6f 5f       	subi	r22, 0xFF	; 255
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	86 e0       	ldi	r24, 0x06	; 6
    19aa:	66 0f       	add	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <GenerateAudio+0x1dc>
    19b2:	ab 01       	movw	r20, r22
    19b4:	5d 5f       	subi	r21, 0xFD	; 253
    19b6:	7e 5f       	subi	r23, 0xFE	; 254
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	2a dc       	rcall	.-1964   	; 0x1210 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    19bc:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    19c0:	88 23       	and	r24, r24
    19c2:	b1 f1       	breq	.+108    	; 0x1a30 <GenerateAudio+0x262>
                    if (start == 0) {
    19c4:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <start.3993>
    19c8:	81 11       	cpse	r24, r1
    19ca:	0e c0       	rjmp	.+28     	; 0x19e8 <GenerateAudio+0x21a>
                        duration = 3;
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <duration.3992>
                        auRepAddr = &auBuffer[0];
    19d2:	8e e0       	ldi	r24, 0x0E	; 14
    19d4:	98 e3       	ldi	r25, 0x38	; 56
    19d6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19da:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        start = 1;
    19e4:	c0 93 50 38 	sts	0x3850, r28	; 0x803850 <start.3993>
                    }   if (duration == 0) {
    19e8:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <duration.3992>
    19ec:	81 11       	cpse	r24, r1
    19ee:	1a c0       	rjmp	.+52     	; 0x1a24 <GenerateAudio+0x256>
                        effect &= 0x1f;
    19f0:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    19f4:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    19f8:	8f 71       	andi	r24, 0x1F	; 31
    19fa:	99 27       	eor	r25, r25
    19fc:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1a00:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                        auRepAddr = &zero;
    1a04:	8a e3       	ldi	r24, 0x3A	; 58
    1a06:	98 e3       	ldi	r25, 0x38	; 56
    1a08:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a0c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1a10:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1a14:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        start = 0;
    1a1e:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <start.3993>
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <GenerateAudio+0x262>
                    } else duration--;
    1a24:	81 50       	subi	r24, 0x01	; 1
    1a26:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <duration.3992>
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1a2c:	10 92 c1 3a 	sts	0x3AC1, r1	; 0x803ac1 <detHdPh>
    }
    return buttonMark;
    1a30:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
}
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1a3c:	20 91 45 38 	lds	r18, 0x3845	; 0x803845 <minuteMark>
    1a40:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1a44:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1a48:	89 2f       	mov	r24, r25
    1a4a:	99 27       	eor	r25, r25
    1a4c:	86 95       	lsr	r24
}
    1a4e:	3c e3       	ldi	r19, 0x3C	; 60
    1a50:	23 9f       	mul	r18, r19
    1a52:	80 0d       	add	r24, r0
    1a54:	91 1d       	adc	r25, r1
    1a56:	11 24       	eor	r1, r1
    1a58:	08 95       	ret

00001a5a <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	8c 01       	movw	r16, r24
    1a64:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1a66:	ea df       	rcall	.-44     	; 0x1a3c <getClock>
    1a68:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1a6a:	80 17       	cp	r24, r16
    1a6c:	91 07       	cpc	r25, r17
    1a6e:	08 f4       	brcc	.+2      	; 0x1a72 <idleTimeout+0x18>
        curClock += 256 * 60;
    1a70:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1a72:	c0 0f       	add	r28, r16
    1a74:	d1 1f       	adc	r29, r17
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	c2 17       	cp	r28, r18
    1a7a:	d3 07       	cpc	r29, r19
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <idleTimeout+0x26>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <SelfTest>:
    //Light
    //Magnet
    //Temperature
    //Ext EEPROM
    return 0;
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	08 95       	ret

00001a8e <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	e2 e3       	ldi	r30, 0x32	; 50
    1a94:	fe eb       	ldi	r31, 0xBE	; 190
    1a96:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1a98:	a5 81       	ldd	r26, Z+5	; 0x05
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	a4 53       	subi	r26, 0x34	; 52
    1a9e:	b5 4c       	sbci	r27, 0xC5	; 197
    1aa0:	1c 92       	st	X, r1
    1aa2:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1aa4:	a8 81       	ld	r26, Y
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	a4 53       	subi	r26, 0x34	; 52
    1aaa:	b5 4c       	sbci	r27, 0xC5	; 197
    1aac:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1aae:	9e eb       	ldi	r25, 0xBE	; 190
    1ab0:	e7 33       	cpi	r30, 0x37	; 55
    1ab2:	f9 07       	cpc	r31, r25
    1ab4:	81 f7       	brne	.-32     	; 0x1a96 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	d9 f4       	brne	.+54     	; 0x1af0 <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1aba:	e0 91 37 be 	lds	r30, 0xBE37	; 0x80be37 <__bss_end+0x831b>
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ac4:	e4 53       	subi	r30, 0x34	; 52
    1ac6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ac8:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1aca:	e0 91 38 be 	lds	r30, 0xBE38	; 0x80be38 <__bss_end+0x831c>
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ad4:	e4 53       	subi	r30, 0x34	; 52
    1ad6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ad8:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1ada:	e0 91 39 be 	lds	r30, 0xBE39	; 0x80be39 <__bss_end+0x831d>
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ae4:	e4 53       	subi	r30, 0x34	; 52
    1ae6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ae8:	80 83       	st	Z, r24
        effect = 0x013f;
    1aea:	8f e3       	ldi	r24, 0x3F	; 63
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	46 c0       	rjmp	.+140    	; 0x1b7c <simonLed+0xee>
    } else if (val == 1) {  //
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	99 f4       	brne	.+38     	; 0x1b1a <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1af4:	e0 91 3a be 	lds	r30, 0xBE3A	; 0x80be3a <__bss_end+0x831e>
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1afe:	e4 53       	subi	r30, 0x34	; 52
    1b00:	f5 4c       	sbci	r31, 0xC5	; 197
    1b02:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1b04:	e0 91 3b be 	lds	r30, 0xBE3B	; 0x80be3b <__bss_end+0x831f>
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1b0e:	e4 53       	subi	r30, 0x34	; 52
    1b10:	f5 4c       	sbci	r31, 0xC5	; 197
    1b12:	80 83       	st	Z, r24
        effect = 0x015f;
    1b14:	8f e5       	ldi	r24, 0x5F	; 95
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	31 c0       	rjmp	.+98     	; 0x1b7c <simonLed+0xee>
    } else if (val == 4) {  // III
    1b1a:	84 30       	cpi	r24, 0x04	; 4
    1b1c:	d9 f4       	brne	.+54     	; 0x1b54 <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1b1e:	e0 91 32 be 	lds	r30, 0xBE32	; 0x80be32 <__bss_end+0x8316>
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1b28:	e4 53       	subi	r30, 0x34	; 52
    1b2a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b2c:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1b2e:	e0 91 33 be 	lds	r30, 0xBE33	; 0x80be33 <__bss_end+0x8317>
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1b38:	e4 53       	subi	r30, 0x34	; 52
    1b3a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b3c:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1b3e:	e0 91 34 be 	lds	r30, 0xBE34	; 0x80be34 <__bss_end+0x8318>
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1b48:	e4 53       	subi	r30, 0x34	; 52
    1b4a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b4c:	80 83       	st	Z, r24
        effect = 0x017f;
    1b4e:	8f e7       	ldi	r24, 0x7F	; 127
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <simonLed+0xee>
    } else if (val == 2) {  // I
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	b1 f4       	brne	.+44     	; 0x1b84 <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1b58:	e0 91 35 be 	lds	r30, 0xBE35	; 0x80be35 <__bss_end+0x8319>
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1b62:	e4 53       	subi	r30, 0x34	; 52
    1b64:	f5 4c       	sbci	r31, 0xC5	; 197
    1b66:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1b68:	e0 91 36 be 	lds	r30, 0xBE36	; 0x80be36 <__bss_end+0x831a>
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1b72:	e4 53       	subi	r30, 0x34	; 52
    1b74:	f5 4c       	sbci	r31, 0xC5	; 197
    1b76:	80 83       	st	Z, r24
        effect = 0x019f;
    1b78:	8f e9       	ldi	r24, 0x9F	; 159
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1b80:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    }
}
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    if (CheckState(BASTET_COMPLETED))
    1b8e:	8a e7       	ldi	r24, 0x7A	; 122
    1b90:	4e dc       	rcall	.-1892   	; 0x142e <CheckState>
    1b92:	81 11       	cpse	r24, r1
    1b94:	73 c1       	rjmp	.+742    	; 0x1e7c <BastetDictates+0x2f2>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1b96:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1b9a:	8d 7f       	andi	r24, 0xFD	; 253
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <BastetDictates+0x16>
    1b9e:	6e c1       	rjmp	.+732    	; 0x1e7c <BastetDictates+0x2f2>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    1ba0:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	20 c0       	rjmp	.+64     	; 0x1be8 <BastetDictates+0x5e>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    1ba8:	20 91 bf 3a 	lds	r18, 0x3ABF	; 0x803abf <adcPhot>
    1bac:	30 91 c0 3a 	lds	r19, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    1bb0:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <adcTemp>
    1bb4:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    1bb8:	82 0f       	add	r24, r18
    1bba:	8f 73       	andi	r24, 0x3F	; 63
    1bbc:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1bc0:	c0 e0       	ldi	r28, 0x00	; 0
    1bc2:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonPos>
    1bc6:	c8 17       	cp	r28, r24
    1bc8:	18 f4       	brcc	.+6      	; 0x1bd0 <BastetDictates+0x46>
    1bca:	03 db       	rcall	.-2554   	; 0x11d2 <lfsr>
    1bcc:	cf 5f       	subi	r28, 0xFF	; 255
    1bce:	f9 cf       	rjmp	.-14     	; 0x1bc2 <BastetDictates+0x38>
    1bd0:	c4 e6       	ldi	r28, 0x64	; 100

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1bd2:	d8 e3       	ldi	r29, 0x38	; 56
    1bd4:	fe da       	rcall	.-2564   	; 0x11d2 <lfsr>
    1bd6:	83 70       	andi	r24, 0x03	; 3
    1bd8:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1bda:	88 e3       	ldi	r24, 0x38	; 56
    1bdc:	c0 37       	cpi	r28, 0x70	; 112
    1bde:	d8 07       	cpc	r29, r24
    1be0:	c9 f7       	brne	.-14     	; 0x1bd4 <BastetDictates+0x4a>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1be8:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	71 f4       	brne	.+28     	; 0x1c0c <BastetDictates+0x82>
    1bf0:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	51 f4       	brne	.+20     	; 0x1c0c <BastetDictates+0x82>
        simonGameState = BASTET_GAME_INTRO;
    1bf8:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
        simonPos = 0;
    1bfc:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonPos>
        simonInputPos = 0;
    1c00:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
        simonTimer = 0;
    1c04:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        simonCounter = 0;
    1c08:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1c0c:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	79 f5       	brne	.+94     	; 0x1c72 <BastetDictates+0xe8>
        if (simonTimer > 5) {   // ±.33 seconds
    1c14:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1c18:	86 30       	cpi	r24, 0x06	; 6
    1c1a:	38 f0       	brcs	.+14     	; 0x1c2a <BastetDictates+0xa0>
            simonCounter++;
    1c1c:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonCounter>
            simonTimer = 0;
    1c26:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        }
        if (simonCounter > 5) {
    1c2a:	e0 91 5f 38 	lds	r30, 0x385F	; 0x80385f <simonCounter>
    1c2e:	e6 30       	cpi	r30, 0x06	; 6
    1c30:	a8 f0       	brcs	.+42     	; 0x1c5c <BastetDictates+0xd2>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
            simonTimer = 0;
    1c38:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonCounter = 0;
    1c3c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
    1c40:	a6 e4       	ldi	r26, 0x46	; 70
    1c42:	be eb       	ldi	r27, 0xBE	; 190
    1c44:	8c e4       	ldi	r24, 0x4C	; 76
    1c46:	9e eb       	ldi	r25, 0xBE	; 190
            for (uint8_t n=0; n<6; n++){
                iLED[HCKR[G][n]] = 1;
    1c48:	21 e0       	ldi	r18, 0x01	; 1
    1c4a:	ed 91       	ld	r30, X+
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	e4 53       	subi	r30, 0x34	; 52
    1c50:	f5 4c       	sbci	r31, 0xC5	; 197
    1c52:	20 83       	st	Z, r18
        }
        if (simonCounter > 5) {
            simonGameState = BASTET_GAME_SHOW_PATTERN;
            simonTimer = 0;
            simonCounter = 0;
            for (uint8_t n=0; n<6; n++){
    1c54:	8a 17       	cp	r24, r26
    1c56:	9b 07       	cpc	r25, r27
    1c58:	c1 f7       	brne	.-16     	; 0x1c4a <BastetDictates+0xc0>
    1c5a:	10 c1       	rjmp	.+544    	; 0x1e7c <BastetDictates+0x2f2>
                iLED[HCKR[G][n]] = 1;
            }
            return 0;
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	e0 5c       	subi	r30, 0xC0	; 192
    1c60:	f1 44       	sbci	r31, 0x41	; 65
    1c62:	e0 81       	ld	r30, Z
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1c6a:	e4 53       	subi	r30, 0x34	; 52
    1c6c:	f5 4c       	sbci	r31, 0xC5	; 197
    1c6e:	80 83       	st	Z, r24
    1c70:	23 c0       	rjmp	.+70     	; 0x1cb8 <BastetDictates+0x12e>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1c72:	83 30       	cpi	r24, 0x03	; 3
    1c74:	09 f5       	brne	.+66     	; 0x1cb8 <BastetDictates+0x12e>

        if (simonTimer > 7) {   // ±.5 second
    1c76:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1c7a:	88 30       	cpi	r24, 0x08	; 8
    1c7c:	38 f0       	brcs	.+14     	; 0x1c8c <BastetDictates+0x102>
            simonCounter++;
    1c7e:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
    1c82:	8f 5f       	subi	r24, 0xFF	; 255
    1c84:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonCounter>
            simonTimer = 0;
    1c88:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1c8c:	e0 91 5f 38 	lds	r30, 0x385F	; 0x80385f <simonCounter>
    1c90:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonPos>
    1c94:	8e 17       	cp	r24, r30
    1c96:	50 f4       	brcc	.+20     	; 0x1cac <BastetDictates+0x122>
            simonInputPos = 0;
    1c98:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1c9c:	85 e0       	ldi	r24, 0x05	; 5
    1c9e:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
            simonLed(0);
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	f4 de       	rcall	.-536    	; 0x1a8e <simonLed>
            simonTimer = 0;
    1ca6:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            return 0;
    1caa:	e8 c0       	rjmp	.+464    	; 0x1e7c <BastetDictates+0x2f2>
        }
        simonLed(simonState[simonCounter]+1);
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	ec 59       	subi	r30, 0x9C	; 156
    1cb0:	f7 4c       	sbci	r31, 0xC7	; 199
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8f 5f       	subi	r24, 0xFF	; 255
    1cb6:	eb de       	rcall	.-554    	; 0x1a8e <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1cb8:	c0 91 5e 38 	lds	r28, 0x385E	; 0x80385e <simonGameState>
    1cbc:	c5 30       	cpi	r28, 0x05	; 5
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <BastetDictates+0x138>
    1cc0:	7e c0       	rjmp	.+252    	; 0x1dbe <BastetDictates+0x234>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1cc2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1cc6:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1cca:	98 17       	cp	r25, r24
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <BastetDictates+0x146>
    1cce:	75 c0       	rjmp	.+234    	; 0x1dba <BastetDictates+0x230>
            if (simonWait == 0) {
    1cd0:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <simonWait>
    1cd4:	91 11       	cpse	r25, r1
    1cd6:	87 c0       	rjmp	.+270    	; 0x1de6 <BastetDictates+0x25c>
                simonWait = 1;
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <simonWait>
                simonTimer = 0;
    1cde:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                simonLed(buttonState+1);
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	d4 de       	rcall	.-600    	; 0x1a8e <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    1cec:	c0 93 2d 38 	sts	0x382D, r28	; 0x80382d <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    1cf0:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonInputPos>
    1cf4:	e8 2f       	mov	r30, r24
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	ec 59       	subi	r30, 0x9C	; 156
    1cfa:	f7 4c       	sbci	r31, 0xC7	; 199
    1cfc:	20 81       	ld	r18, Z
    1cfe:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1d02:	29 13       	cpse	r18, r25
    1d04:	23 c0       	rjmp	.+70     	; 0x1d4c <BastetDictates+0x1c2>
                    simonInputPos++;
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonInputPos>
                    if (simonInputPos > simonPos) {
    1d0c:	e0 91 63 38 	lds	r30, 0x3863	; 0x803863 <simonPos>
    1d10:	e8 17       	cp	r30, r24
    1d12:	d8 f5       	brcc	.+118    	; 0x1d8a <BastetDictates+0x200>
                        effect = 0x42;
    1d14:	82 e4       	ldi	r24, 0x42	; 66
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1d1c:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                        simonPos++;
    1d20:	ef 5f       	subi	r30, 0xFF	; 255
    1d22:	e0 93 63 38 	sts	0x3863, r30	; 0x803863 <simonPos>
                        simonTimer = 0;
    1d26:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                        simonCounter = 0;
    1d2a:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    1d2e:	e1 30       	cpi	r30, 0x01	; 1
    1d30:	59 f0       	breq	.+22     	; 0x1d48 <BastetDictates+0x1be>
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    1d32:	e6 95       	lsr	r30
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	e0 5c       	subi	r30, 0xC0	; 192
    1d38:	f1 44       	sbci	r31, 0x41	; 65
    1d3a:	e5 81       	ldd	r30, Z+5	; 0x05
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1d42:	e4 53       	subi	r30, 0x34	; 52
    1d44:	f5 4c       	sbci	r31, 0xC5	; 197
    1d46:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	1d c0       	rjmp	.+58     	; 0x1d86 <BastetDictates+0x1fc>
                    }
                } else {
                    effect = 0x0105;    // TODO fail sound
    1d4c:	85 e0       	ldi	r24, 0x05	; 5
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1d54:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    1d58:	a0 e4       	ldi	r26, 0x40	; 64
    1d5a:	be eb       	ldi	r27, 0xBE	; 190
    1d5c:	86 e4       	ldi	r24, 0x46	; 70
    1d5e:	9e eb       	ldi	r25, 0xBE	; 190
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    1d60:	ed 91       	ld	r30, X+
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1d68:	e4 53       	subi	r30, 0x34	; 52
    1d6a:	f5 4c       	sbci	r31, 0xC5	; 197
    1d6c:	20 83       	st	Z, r18
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 0x0105;    // TODO fail sound
                    for (uint8_t n=0; n<6; n++){
    1d6e:	8a 17       	cp	r24, r26
    1d70:	9b 07       	cpc	r25, r27
    1d72:	b1 f7       	brne	.-20     	; 0x1d60 <BastetDictates+0x1d6>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    1d74:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
                    simonPos = 0;
    1d78:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonPos>
                    simonTimer = 0;
    1d7c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                    simonCounter = 0;
    1d80:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    1d84:	86 e0       	ldi	r24, 0x06	; 6
    1d86:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    1d8a:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonInputPos>
    1d8e:	8c 30       	cpi	r24, 0x0C	; 12
    1d90:	20 f4       	brcc	.+8      	; 0x1d9a <BastetDictates+0x210>
    1d92:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonPos>
    1d96:	8c 30       	cpi	r24, 0x0C	; 12
    1d98:	90 f0       	brcs	.+36     	; 0x1dbe <BastetDictates+0x234>
                    // TODO win animu ?!
                    effect = 0x0106;    // TODO win sound ?!
    1d9a:	86 e0       	ldi	r24, 0x06	; 6
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1da2:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    1da6:	8a e7       	ldi	r24, 0x7A	; 122
    1da8:	38 db       	rcall	.-2448   	; 0x141a <UpdateState>
                    simonTimer = 0;
    1daa:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                    simonCounter = 0;
    1dae:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    1db2:	87 e0       	ldi	r24, 0x07	; 7
    1db4:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <BastetDictates+0x234>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    1dba:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonWait>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    1dbe:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1dc2:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    1dc4:	81 f4       	brne	.+32     	; 0x1de6 <BastetDictates+0x25c>
    1dc6:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1dca:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    1dcc:	60 f0       	brcs	.+24     	; 0x1de6 <BastetDictates+0x25c>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	5e de       	rcall	.-836    	; 0x1a8e <simonLed>
            simonWait = 0;
    1dd2:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonWait>
            simonTimer = 0;
    1dd6:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonCounter = 0;
    1dda:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
            simonGameState = simonNextGameState;
    1dde:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <simonNextGameState>
    1de2:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    1de6:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1dea:	86 30       	cpi	r24, 0x06	; 6
    1dec:	21 f5       	brne	.+72     	; 0x1e36 <BastetDictates+0x2ac>
        if (simonTimer > 5) {   // ±.33 second
    1dee:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1df2:	86 30       	cpi	r24, 0x06	; 6
    1df4:	38 f0       	brcs	.+14     	; 0x1e04 <BastetDictates+0x27a>
            simonCounter++;
    1df6:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonCounter>
            simonTimer = 0;
    1e00:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        }
        if (simonCounter > 6) {
    1e04:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
    1e08:	87 30       	cpi	r24, 0x07	; 7
    1e0a:	40 f0       	brcs	.+16     	; 0x1e1c <BastetDictates+0x292>
            simonTimer = 0;
    1e0c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonCounter = 0;
    1e10:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    1e14:	87 e0       	ldi	r24, 0x07	; 7
    1e16:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
            return 0;
    1e1a:	30 c0       	rjmp	.+96     	; 0x1e7c <BastetDictates+0x2f2>
        }
        iLED[HCKR[R][5-simonCounter]] = 1;
    1e1c:	e5 e0       	ldi	r30, 0x05	; 5
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	e8 1b       	sub	r30, r24
    1e22:	f1 09       	sbc	r31, r1
    1e24:	e0 5c       	subi	r30, 0xC0	; 192
    1e26:	f1 44       	sbci	r31, 0x41	; 65
    1e28:	e0 81       	ld	r30, Z
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	e4 53       	subi	r30, 0x34	; 52
    1e2e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	80 83       	st	Z, r24
    1e34:	1e c0       	rjmp	.+60     	; 0x1e72 <BastetDictates+0x2e8>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    1e36:	87 30       	cpi	r24, 0x07	; 7
    1e38:	e1 f4       	brne	.+56     	; 0x1e72 <BastetDictates+0x2e8>
        simonInputPos = 0;
    1e3a:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
        simonPos = 0;
    1e3e:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonPos>
        simonGameState = BASTET_GAME_START; // BASTET_BOOT for fresh "field" ??
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
        gameNow = TEXT;
    1e48:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
    1e4c:	e2 e3       	ldi	r30, 0x32	; 50
    1e4e:	fe eb       	ldi	r31, 0xBE	; 190
    1e50:	27 e3       	ldi	r18, 0x37	; 55
    1e52:	3e eb       	ldi	r19, 0xBE	; 190
    1e54:	ef 01       	movw	r28, r30
        for (uint8_t n=0; n<5; n++){
            iLED[WING[L][n]] = 1;
    1e56:	a5 81       	ldd	r26, Z+5	; 0x05
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	a4 53       	subi	r26, 0x34	; 52
    1e5c:	b5 4c       	sbci	r27, 0xC5	; 197
    1e5e:	8c 93       	st	X, r24
    1e60:	31 96       	adiw	r30, 0x01	; 1
            iLED[WING[R][n]] = 1;
    1e62:	a8 81       	ld	r26, Y
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	a4 53       	subi	r26, 0x34	; 52
    1e68:	b5 4c       	sbci	r27, 0xC5	; 197
    1e6a:	8c 93       	st	X, r24
    if (BASTET_GAME_OVER == simonGameState) {
        simonInputPos = 0;
        simonPos = 0;
        simonGameState = BASTET_GAME_START; // BASTET_BOOT for fresh "field" ??
        gameNow = TEXT;
        for (uint8_t n=0; n<5; n++){
    1e6c:	2e 17       	cp	r18, r30
    1e6e:	3f 07       	cpc	r19, r31
    1e70:	89 f7       	brne	.-30     	; 0x1e54 <BastetDictates+0x2ca>
            iLED[WING[L][n]] = 1;
            iLED[WING[R][n]] = 1;
        }
    }

    ++simonTimer;
    1e72:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <simonTimer>
    return 0;
}
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	62 97       	sbiw	r28, 0x12	; 18
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	8a 8b       	std	Y+18, r24	; 0x12
    1e96:	80 e1       	ldi	r24, 0x10	; 16
    1e98:	e6 e0       	ldi	r30, 0x06	; 6
    1e9a:	fe eb       	ldi	r31, 0xBE	; 190
    1e9c:	de 01       	movw	r26, r28
    1e9e:	11 96       	adiw	r26, 0x01	; 1
    1ea0:	01 90       	ld	r0, Z+
    1ea2:	0d 92       	st	X+, r0
    1ea4:	8a 95       	dec	r24
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <Cheat+0x1c>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	31 96       	adiw	r30, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	21 91       	ld	r18, Z+
    1eb2:	31 91       	ld	r19, Z+
    1eb4:	26 17       	cp	r18, r22
    1eb6:	37 07       	cpc	r19, r23
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <Cheat+0x38>
    1eba:	89 2f       	mov	r24, r25
    1ebc:	9f 5f       	subi	r25, 0xFF	; 255
    1ebe:	98 30       	cpi	r25, 0x08	; 8
    1ec0:	b9 f7       	brne	.-18     	; 0x1eb0 <Cheat+0x2c>
    1ec2:	88 30       	cpi	r24, 0x08	; 8
    1ec4:	10 f0       	brcs	.+4      	; 0x1eca <Cheat+0x46>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	12 c0       	rjmp	.+36     	; 0x1eee <Cheat+0x6a>
    1eca:	18 e1       	ldi	r17, 0x18	; 24
    1ecc:	18 0f       	add	r17, r24
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	be 01       	movw	r22, r28
    1ed2:	6f 5e       	subi	r22, 0xEF	; 239
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	81 2f       	mov	r24, r17
    1ed8:	d6 d8       	rcall	.-3668   	; 0x1086 <EERead>
    1eda:	89 89       	ldd	r24, Y+17	; 0x11
    1edc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ede:	99 f7       	brne	.-26     	; 0x1ec6 <Cheat+0x42>
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	be 01       	movw	r22, r28
    1ee4:	6e 5e       	subi	r22, 0xEE	; 238
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	81 2f       	mov	r24, r17
    1eea:	dd d8       	rcall	.-3654   	; 0x10a6 <EEWrite>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	62 96       	adiw	r28, 0x12	; 18
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	08 95       	ret

00001efc <DecryptData>:
    1efc:	f9 01       	movw	r30, r18
    1efe:	9c 01       	movw	r18, r24
    1f00:	2e 1b       	sub	r18, r30
    1f02:	3f 0b       	sbc	r19, r31
    1f04:	88 e0       	ldi	r24, 0x08	; 8
    1f06:	48 9f       	mul	r20, r24
    1f08:	a0 01       	movw	r20, r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	40 51       	subi	r20, 0x10	; 16
    1f0e:	51 44       	sbci	r21, 0x41	; 65
    1f10:	66 23       	and	r22, r22
    1f12:	69 f0       	breq	.+26     	; 0x1f2e <DecryptData+0x32>
    1f14:	df 01       	movw	r26, r30
    1f16:	a2 0f       	add	r26, r18
    1f18:	b3 1f       	adc	r27, r19
    1f1a:	a7 70       	andi	r26, 0x07	; 7
    1f1c:	bb 27       	eor	r27, r27
    1f1e:	a4 0f       	add	r26, r20
    1f20:	b5 1f       	adc	r27, r21
    1f22:	80 81       	ld	r24, Z
    1f24:	9c 91       	ld	r25, X
    1f26:	98 27       	eor	r25, r24
    1f28:	91 93       	st	Z+, r25
    1f2a:	61 50       	subi	r22, 0x01	; 1
    1f2c:	f1 cf       	rjmp	.-30     	; 0x1f10 <DecryptData+0x14>
    1f2e:	08 95       	ret

00001f30 <UnflipData>:
    1f30:	26 2f       	mov	r18, r22
    1f32:	fb 01       	movw	r30, r22
    1f34:	35 e5       	ldi	r19, 0x55	; 85
    1f36:	9e 2f       	mov	r25, r30
    1f38:	92 1b       	sub	r25, r18
    1f3a:	98 17       	cp	r25, r24
    1f3c:	28 f4       	brcc	.+10     	; 0x1f48 <UnflipData+0x18>
    1f3e:	90 81       	ld	r25, Z
    1f40:	92 95       	swap	r25
    1f42:	93 27       	eor	r25, r19
    1f44:	91 93       	st	Z+, r25
    1f46:	f7 cf       	rjmp	.-18     	; 0x1f36 <UnflipData+0x6>
    1f48:	08 95       	ret

00001f4a <ExtEERead>:
    1f4a:	af 92       	push	r10
    1f4c:	bf 92       	push	r11
    1f4e:	cf 92       	push	r12
    1f50:	df 92       	push	r13
    1f52:	ef 92       	push	r14
    1f54:	ff 92       	push	r15
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <ExtEERead+0x16>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	d6 2e       	mov	r13, r22
    1f66:	c4 2e       	mov	r12, r20
    1f68:	59 01       	movw	r10, r18
    1f6a:	7c 01       	movw	r14, r24
    1f6c:	e8 94       	clt
    1f6e:	f7 f8       	bld	r15, 7
    1f70:	f9 82       	std	Y+1, r15	; 0x01
    1f72:	ea 82       	std	Y+2, r14	; 0x02
    1f74:	06 2f       	mov	r16, r22
    1f76:	42 e0       	ldi	r20, 0x02	; 2
    1f78:	be 01       	movw	r22, r28
    1f7a:	6f 5f       	subi	r22, 0xFF	; 255
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	80 e5       	ldi	r24, 0x50	; 80
    1f80:	0e 94 b6 02 	call	0x56c	; 0x56c <I2C_read_bytes>
    1f84:	18 2f       	mov	r17, r24
    1f86:	81 11       	cpse	r24, r1
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <ExtEERead+0x4a>
    1f8a:	95 01       	movw	r18, r10
    1f8c:	4c 2d       	mov	r20, r12
    1f8e:	6d 2d       	mov	r22, r13
    1f90:	c7 01       	movw	r24, r14
    1f92:	b4 df       	rcall	.-152    	; 0x1efc <DecryptData>
    1f94:	81 2f       	mov	r24, r17
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	bf 90       	pop	r11
    1fac:	af 90       	pop	r10
    1fae:	08 95       	ret

00001fb0 <ClearTxAfter>:
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	88 30       	cpi	r24, 0x08	; 8
    1fb4:	30 f4       	brcc	.+12     	; 0x1fc2 <ClearTxAfter+0x12>
    1fb6:	e8 2f       	mov	r30, r24
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	e6 5b       	subi	r30, 0xB6	; 182
    1fbc:	f5 4c       	sbci	r31, 0xC5	; 197
    1fbe:	10 82       	st	Z, r1
    1fc0:	f7 cf       	rjmp	.-18     	; 0x1fb0 <ClearTxAfter>
    1fc2:	08 95       	ret

00001fc4 <StartsWith>:
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	e9 2f       	mov	r30, r25
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	da 01       	movw	r26, r20
    1fce:	ae 0f       	add	r26, r30
    1fd0:	bf 1f       	adc	r27, r31
    1fd2:	3c 91       	ld	r19, X
    1fd4:	e6 0f       	add	r30, r22
    1fd6:	f7 1f       	adc	r31, r23
    1fd8:	31 11       	cpse	r19, r1
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <StartsWith+0x22>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 81       	ld	r25, Z
    1fe0:	99 23       	and	r25, r25
    1fe2:	49 f0       	breq	.+18     	; 0x1ff6 <StartsWith+0x32>
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <StartsWith+0x30>
    1fe6:	20 81       	ld	r18, Z
    1fe8:	22 23       	and	r18, r18
    1fea:	c1 f3       	breq	.-16     	; 0x1fdc <StartsWith+0x18>
    1fec:	32 13       	cpse	r19, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <StartsWith+0x30>
    1ff0:	9f 5f       	subi	r25, 0xFF	; 255
    1ff2:	ea cf       	rjmp	.-44     	; 0x1fc8 <StartsWith+0x4>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	08 95       	ret

00001ff8 <PrepareSending>:
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	61 15       	cp	r22, r1
    2000:	71 05       	cpc	r23, r1
    2002:	59 f1       	breq	.+86     	; 0x205a <PrepareSending+0x62>
    2004:	a2 e5       	ldi	r26, 0x52	; 82
    2006:	ba e3       	ldi	r27, 0x3A	; 58
    2008:	ca e4       	ldi	r28, 0x4A	; 74
    200a:	da e3       	ldi	r29, 0x3A	; 58
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	9f ef       	ldi	r25, 0xFF	; 255
    2010:	6f 3f       	cpi	r22, 0xFF	; 255
    2012:	71 05       	cpc	r23, r1
    2014:	69 f0       	breq	.+26     	; 0x2030 <PrepareSending+0x38>
    2016:	60 f0       	brcs	.+24     	; 0x2030 <PrepareSending+0x38>
    2018:	ed 93       	st	X+, r30
    201a:	fd 93       	st	X+, r31
    201c:	99 93       	st	Y+, r25
    201e:	e1 50       	subi	r30, 0x01	; 1
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	6f 5f       	subi	r22, 0xFF	; 255
    2024:	71 09       	sbc	r23, r1
    2026:	8f 5f       	subi	r24, 0xFF	; 255
    2028:	87 30       	cpi	r24, 0x07	; 7
    202a:	91 f7       	brne	.-28     	; 0x2010 <PrepareSending+0x18>
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	1e c0       	rjmp	.+60     	; 0x206c <PrepareSending+0x74>
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	d9 01       	movw	r26, r18
    2036:	aa 0f       	add	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	ae 5a       	subi	r26, 0xAE	; 174
    203c:	b5 4c       	sbci	r27, 0xC5	; 197
    203e:	ed 93       	st	X+, r30
    2040:	fc 93       	st	X, r31
    2042:	6f 3f       	cpi	r22, 0xFF	; 255
    2044:	71 05       	cpc	r23, r1
    2046:	11 f4       	brne	.+4      	; 0x204c <PrepareSending+0x54>
    2048:	6e ef       	ldi	r22, 0xFE	; 254
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	f9 01       	movw	r30, r18
    204e:	e6 5b       	subi	r30, 0xB6	; 182
    2050:	f5 4c       	sbci	r31, 0xC5	; 197
    2052:	60 83       	st	Z, r22
    2054:	40 93 48 3a 	sts	0x3A48, r20	; 0x803a48 <txTypeNow>
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <PrepareSending+0x6c>
    205a:	10 92 52 3a 	sts	0x3A52, r1	; 0x803a52 <txAddrList>
    205e:	10 92 53 3a 	sts	0x3A53, r1	; 0x803a53 <txAddrList+0x1>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	a5 df       	rcall	.-182    	; 0x1fb0 <ClearTxAfter>
    2066:	10 92 49 3a 	sts	0x3A49, r1	; 0x803a49 <txAddrNow>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	f9 01       	movw	r30, r18
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	e3 5e       	subi	r30, 0xE3	; 227
    2082:	f6 4c       	sbci	r31, 0xC6	; 198
    2084:	a9 e5       	ldi	r26, 0x59	; 89
    2086:	ba e7       	ldi	r27, 0x7A	; 122
    2088:	a0 83       	st	Z, r26
    208a:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    208c:	f9 01       	movw	r30, r18
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	e3 5a       	subi	r30, 0xA3	; 163
    2094:	f6 4c       	sbci	r31, 0xC6	; 198
    2096:	62 e0       	ldi	r22, 0x02	; 2
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	60 83       	st	Z, r22
    209c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    209e:	22 0f       	add	r18, r18
    20a0:	33 1f       	adc	r19, r19
    20a2:	f9 01       	movw	r30, r18
    20a4:	e3 56       	subi	r30, 0x63	; 99
    20a6:	f6 4c       	sbci	r31, 0xC6	; 198
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	40 83       	st	Z, r20
    20ae:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20b0:	21 e0       	ldi	r18, 0x01	; 1
    20b2:	28 0f       	add	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	f9 01       	movw	r30, r18
    20b8:	ee 0f       	add	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	e3 5e       	subi	r30, 0xE3	; 227
    20be:	f6 4c       	sbci	r31, 0xC6	; 198
    20c0:	c2 e6       	ldi	r28, 0x62	; 98
    20c2:	da e7       	ldi	r29, 0x7A	; 122
    20c4:	c0 83       	st	Z, r28
    20c6:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    20c8:	f9 01       	movw	r30, r18
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	e3 5a       	subi	r30, 0xA3	; 163
    20d0:	f6 4c       	sbci	r31, 0xC6	; 198
    20d2:	cc e0       	ldi	r28, 0x0C	; 12
    20d4:	d0 e0       	ldi	r29, 0x00	; 0
    20d6:	c0 83       	st	Z, r28
    20d8:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	f9 01       	movw	r30, r18
    20e0:	e3 56       	subi	r30, 0x63	; 99
    20e2:	f6 4c       	sbci	r31, 0xC6	; 198
    20e4:	40 83       	st	Z, r20
    20e6:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    20e8:	e2 e0       	ldi	r30, 0x02	; 2
    20ea:	e8 0f       	add	r30, r24
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	e3 5e       	subi	r30, 0xE3	; 227
    20f4:	f6 4c       	sbci	r31, 0xC6	; 198
    20f6:	20 ef       	ldi	r18, 0xF0	; 240
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	20 83       	st	Z, r18
    20fc:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20fe:	23 e0       	ldi	r18, 0x03	; 3
    2100:	28 0f       	add	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	f9 01       	movw	r30, r18
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e3 5e       	subi	r30, 0xE3	; 227
    210c:	f6 4c       	sbci	r31, 0xC6	; 198
    210e:	a0 83       	st	Z, r26
    2110:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2112:	f9 01       	movw	r30, r18
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	e3 5a       	subi	r30, 0xA3	; 163
    211a:	f6 4c       	sbci	r31, 0xC6	; 198
    211c:	60 83       	st	Z, r22
    211e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2120:	22 0f       	add	r18, r18
    2122:	33 1f       	adc	r19, r19
    2124:	f9 01       	movw	r30, r18
    2126:	e3 56       	subi	r30, 0x63	; 99
    2128:	f6 4c       	sbci	r31, 0xC6	; 198
    212a:	40 83       	st	Z, r20
    212c:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    212e:	24 e0       	ldi	r18, 0x04	; 4
    2130:	28 0f       	add	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	f9 01       	movw	r30, r18
    2136:	ee 0f       	add	r30, r30
    2138:	ff 1f       	adc	r31, r31
    213a:	e3 5e       	subi	r30, 0xE3	; 227
    213c:	f6 4c       	sbci	r31, 0xC6	; 198
    213e:	a5 e5       	ldi	r26, 0x55	; 85
    2140:	ba e7       	ldi	r27, 0x7A	; 122
    2142:	a0 83       	st	Z, r26
    2144:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2146:	f9 01       	movw	r30, r18
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	e3 5a       	subi	r30, 0xA3	; 163
    214e:	f6 4c       	sbci	r31, 0xC6	; 198
    2150:	60 83       	st	Z, r22
    2152:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	f9 01       	movw	r30, r18
    215a:	e3 56       	subi	r30, 0x63	; 99
    215c:	f6 4c       	sbci	r31, 0xC6	; 198
    215e:	40 83       	st	Z, r20
    2160:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    2162:	8b 5f       	subi	r24, 0xFB	; 251
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	08 95       	ret

0000216a <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    216a:	af 92       	push	r10
    216c:	bf 92       	push	r11
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	2c 97       	sbiw	r28, 0x0c	; 12
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	7c 01       	movw	r14, r24
    2188:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    218a:	9e 01       	movw	r18, r28
    218c:	2f 5f       	subi	r18, 0xFF	; 255
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	6c e0       	ldi	r22, 0x0C	; 12
    2194:	80 96       	adiw	r24, 0x20	; 32
    2196:	d9 de       	rcall	.-590    	; 0x1f4a <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	98 27       	eor	r25, r24
    219e:	89 27       	eor	r24, r25
    21a0:	98 27       	eor	r25, r24
    21a2:	80 96       	adiw	r24, 0x20	; 32
    21a4:	f8 01       	movw	r30, r16
    21a6:	80 83       	st	Z, r24
    21a8:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	98 27       	eor	r25, r24
    21b0:	89 27       	eor	r24, r25
    21b2:	98 27       	eor	r25, r24
    21b4:	80 96       	adiw	r24, 0x20	; 32
    21b6:	82 83       	std	Z+2, r24	; 0x02
    21b8:	93 83       	std	Z+3, r25	; 0x03
    21ba:	de 01       	movw	r26, r28
    21bc:	15 96       	adiw	r26, 0x05	; 5
    21be:	34 96       	adiw	r30, 0x04	; 4
    21c0:	c8 01       	movw	r24, r16
    21c2:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    21c4:	2d 91       	ld	r18, X+
    21c6:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    21c8:	e8 17       	cp	r30, r24
    21ca:	f9 07       	cpc	r31, r25
    21cc:	d9 f7       	brne	.-10     	; 0x21c4 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    21ce:	fc e2       	ldi	r31, 0x2C	; 44
    21d0:	ef 0e       	add	r14, r31
    21d2:	f1 1c       	adc	r15, r1
    21d4:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    21d6:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    21d8:	9e 01       	movw	r18, r28
    21da:	2f 5f       	subi	r18, 0xFF	; 255
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	63 e0       	ldi	r22, 0x03	; 3
    21e2:	c7 01       	movw	r24, r14
    21e4:	b2 de       	rcall	.-668    	; 0x1f4a <ExtEERead>
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	98 27       	eor	r25, r24
    21ec:	89 27       	eor	r24, r25
    21ee:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    21f0:	97 01       	movw	r18, r14
    21f2:	2e 5f       	subi	r18, 0xFE	; 254
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    21f6:	43 e0       	ldi	r20, 0x03	; 3
    21f8:	4d 15       	cp	r20, r13
    21fa:	80 f4       	brcc	.+32     	; 0x221c <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    21fc:	ac 01       	movw	r20, r24
    21fe:	41 50       	subi	r20, 0x01	; 1
    2200:	51 09       	sbc	r21, r1
    2202:	f8 01       	movw	r30, r16
    2204:	42 8f       	std	Z+26, r20	; 0x1a
    2206:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2208:	f3 e0       	ldi	r31, 0x03	; 3
    220a:	ef 0e       	add	r14, r31
    220c:	f1 1c       	adc	r15, r1
    220e:	f8 01       	movw	r30, r16
    2210:	e4 86       	std	Z+12, r14	; 0x0c
    2212:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    2214:	4b 81       	ldd	r20, Y+3	; 0x03
    2216:	f5 01       	movw	r30, r10
    2218:	44 a3       	std	Z+36, r20	; 0x24
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    221c:	f8 01       	movw	r30, r16
    221e:	82 8f       	std	Z+26, r24	; 0x1a
    2220:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    2222:	24 87       	std	Z+12, r18	; 0x0c
    2224:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    2226:	7c 01       	movw	r14, r24
    2228:	e2 0e       	add	r14, r18
    222a:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    222c:	d3 94       	inc	r13
    222e:	0e 5f       	subi	r16, 0xFE	; 254
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	ff ef       	ldi	r31, 0xFF	; 255
    2234:	af 1a       	sub	r10, r31
    2236:	bf 0a       	sbc	r11, r31
    2238:	47 e0       	ldi	r20, 0x07	; 7
    223a:	d4 12       	cpse	r13, r20
    223c:	cd cf       	rjmp	.-102    	; 0x21d8 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    223e:	2c 96       	adiw	r28, 0x0c	; 12
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	ef 90       	pop	r14
    2250:	df 90       	pop	r13
    2252:	bf 90       	pop	r11
    2254:	af 90       	pop	r10
    2256:	08 95       	ret

00002258 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	a0 97       	sbiw	r28, 0x20	; 32
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2274:	7c 01       	movw	r14, r24
    2276:	20 e2       	ldi	r18, 0x20	; 32
    2278:	e2 0e       	add	r14, r18
    227a:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    227c:	9e 01       	movw	r18, r28
    227e:	2f 5f       	subi	r18, 0xFF	; 255
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	8c 96       	adiw	r24, 0x2c	; 44
    2288:	60 de       	rcall	.-832    	; 0x1f4a <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    228a:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    228c:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    228e:	11 23       	and	r17, r17
    2290:	51 f1       	breq	.+84     	; 0x22e6 <CheckLetter+0x8e>
    2292:	01 2f       	mov	r16, r17
    2294:	11 32       	cpi	r17, 0x21	; 33
    2296:	08 f0       	brcs	.+2      	; 0x229a <CheckLetter+0x42>
    2298:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    229a:	9e 01       	movw	r18, r28
    229c:	2f 5f       	subi	r18, 0xFF	; 255
    229e:	3f 4f       	sbci	r19, 0xFF	; 255
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	60 2f       	mov	r22, r16
    22a4:	c7 01       	movw	r24, r14
    22a6:	0e 96       	adiw	r24, 0x0e	; 14
    22a8:	50 de       	rcall	.-864    	; 0x1f4a <ExtEERead>
    22aa:	fe 01       	movw	r30, r28
    22ac:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    22ae:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    22b0:	dd 20       	and	r13, r13
    22b2:	61 f0       	breq	.+24     	; 0x22cc <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    22b4:	e1 e0       	ldi	r30, 0x01	; 1
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	ec 0f       	add	r30, r28
    22ba:	fd 1f       	adc	r31, r29
    22bc:	e8 0f       	add	r30, r24
    22be:	f1 1d       	adc	r31, r1
    22c0:	90 81       	ld	r25, Z
    22c2:	90 62       	ori	r25, 0x20	; 32
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	9c 11       	cpse	r25, r12
    22c8:	0e c0       	rjmp	.+28     	; 0x22e6 <CheckLetter+0x8e>
    22ca:	0e c0       	rjmp	.+28     	; 0x22e8 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    22cc:	91 91       	ld	r25, Z+
    22ce:	dd 24       	eor	r13, r13
    22d0:	d3 94       	inc	r13
    22d2:	9b 35       	cpi	r25, 0x5B	; 91
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <CheckLetter+0x80>
    22d6:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	80 17       	cp	r24, r16
    22dc:	48 f3       	brcs	.-46     	; 0x22b0 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    22de:	e0 0e       	add	r14, r16
    22e0:	f1 1c       	adc	r15, r1
        x -= max;
    22e2:	10 1b       	sub	r17, r16
    22e4:	d4 cf       	rjmp	.-88     	; 0x228e <CheckLetter+0x36>
    }
    return 0;
    22e6:	80 e0       	ldi	r24, 0x00	; 0
}
    22e8:	a0 96       	adiw	r28, 0x20	; 32
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	08 95       	ret

00002300 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2300:	af 92       	push	r10
    2302:	bf 92       	push	r11
    2304:	df 92       	push	r13
    2306:	ef 92       	push	r14
    2308:	ff 92       	push	r15
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	00 d0       	rcall	.+0      	; 0x2314 <FindChild+0x14>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <FindChild+0x16>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	d6 2e       	mov	r13, r22
    231c:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    231e:	9e 01       	movw	r18, r28
    2320:	2f 5f       	subi	r18, 0xFF	; 255
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	64 e0       	ldi	r22, 0x04	; 4
    2328:	80 96       	adiw	r24, 0x20	; 32
    232a:	0f de       	rcall	.-994    	; 0x1f4a <ExtEERead>
    232c:	e9 80       	ldd	r14, Y+1	; 0x01
    232e:	fa 80       	ldd	r15, Y+2	; 0x02
    2330:	fe 24       	eor	r15, r14
    2332:	ef 24       	eor	r14, r15
    2334:	fe 24       	eor	r15, r14
    2336:	0b 81       	ldd	r16, Y+3	; 0x03
    2338:	1c 81       	ldd	r17, Y+4	; 0x04
    233a:	10 27       	eor	r17, r16
    233c:	01 27       	eor	r16, r17
    233e:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    2340:	0e 15       	cp	r16, r14
    2342:	1f 05       	cpc	r17, r15
    2344:	30 f5       	brcc	.+76     	; 0x2392 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    2346:	a0 16       	cp	r10, r16
    2348:	b1 06       	cpc	r11, r17
    234a:	58 f0       	brcs	.+22     	; 0x2362 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    234c:	9e 01       	movw	r18, r28
    234e:	2f 5f       	subi	r18, 0xFF	; 255
    2350:	3f 4f       	sbci	r19, 0xFF	; 255
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	c8 01       	movw	r24, r16
    2358:	80 96       	adiw	r24, 0x20	; 32
    235a:	f7 dd       	rcall	.-1042   	; 0x1f4a <ExtEERead>
    235c:	09 81       	ldd	r16, Y+1	; 0x01
    235e:	1a 81       	ldd	r17, Y+2	; 0x02
    2360:	ec cf       	rjmp	.-40     	; 0x233a <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    2362:	9e 01       	movw	r18, r28
    2364:	2f 5f       	subi	r18, 0xFF	; 255
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	c8 01       	movw	r24, r16
    236e:	85 96       	adiw	r24, 0x25	; 37
    2370:	ec dd       	rcall	.-1064   	; 0x1f4a <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	81 11       	cpse	r24, r1
    2376:	03 c0       	rjmp	.+6      	; 0x237e <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2378:	d1 10       	cpse	r13, r1
    237a:	05 c0       	rjmp	.+10     	; 0x2386 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    237c:	0d c0       	rjmp	.+26     	; 0x2398 <FindChild+0x98>
    237e:	57 d8       	rcall	.-3922   	; 0x142e <CheckState>
    2380:	81 11       	cpse	r24, r1
    2382:	fa cf       	rjmp	.-12     	; 0x2378 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2384:	e3 cf       	rjmp	.-58     	; 0x234c <FindChild+0x4c>
    2386:	6d 2d       	mov	r22, r13
    2388:	c8 01       	movw	r24, r16
    238a:	66 df       	rcall	.-308    	; 0x2258 <CheckLetter>
    238c:	88 23       	and	r24, r24
    238e:	f1 f2       	breq	.-68     	; 0x234c <FindChild+0x4c>
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	01 c0       	rjmp	.+2      	; 0x239a <FindChild+0x9a>
    2398:	c8 01       	movw	r24, r16
}
    239a:	24 96       	adiw	r28, 0x04	; 4
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	bf 90       	pop	r11
    23b0:	af 90       	pop	r10
    23b2:	08 95       	ret

000023b4 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    23b4:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    23b6:	9f e9       	ldi	r25, 0x9F	; 159
    23b8:	98 0f       	add	r25, r24
    23ba:	9a 31       	cpi	r25, 0x1A	; 26
    23bc:	38 f0       	brcs	.+14     	; 0x23cc <InpOkChk+0x18>
    23be:	90 ed       	ldi	r25, 0xD0	; 208
    23c0:	98 0f       	add	r25, r24
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	9a 30       	cpi	r25, 0x0A	; 10
    23c6:	18 f0       	brcs	.+6      	; 0x23ce <InpOkChk+0x1a>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	08 95       	ret
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    23ce:	08 95       	ret

000023d0 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    23da:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    23dc:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    23de:	f8 01       	movw	r30, r16
    23e0:	ed 0f       	add	r30, r29
    23e2:	f1 1d       	adc	r31, r1
    23e4:	20 81       	ld	r18, Z
    23e6:	8c 2f       	mov	r24, r28
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	22 23       	and	r18, r18
    23ec:	51 f0       	breq	.+20     	; 0x2402 <CleanInput+0x32>
        data[cnt] = data[x];
    23ee:	d8 01       	movw	r26, r16
    23f0:	a8 0f       	add	r26, r24
    23f2:	b9 1f       	adc	r27, r25
    23f4:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    23f6:	80 81       	ld	r24, Z
    23f8:	dd df       	rcall	.-70     	; 0x23b4 <InpOkChk>
    23fa:	81 11       	cpse	r24, r1
    23fc:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    23fe:	df 5f       	subi	r29, 0xFF	; 255
    2400:	ee cf       	rjmp	.-36     	; 0x23de <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2402:	f8 01       	movw	r30, r16
    2404:	e8 0f       	add	r30, r24
    2406:	f9 1f       	adc	r31, r25
    2408:	10 82       	st	Z, r1
    return cnt;
}
    240a:	8c 2f       	mov	r24, r28
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	08 95       	ret

00002416 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2416:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    2418:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    241c:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    2420:	89 2b       	or	r24, r25
    2422:	99 f4       	brne	.+38     	; 0x244a <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    2424:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x4>
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    242e:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
        auStart = ((effect&0xE0)>0);
    2432:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    2436:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    243a:	80 7e       	andi	r24, 0xE0	; 224
    243c:	99 27       	eor	r25, r25
    243e:	21 e0       	ldi	r18, 0x01	; 1
    2440:	89 2b       	or	r24, r25
    2442:	09 f4       	brne	.+2      	; 0x2446 <CheckSend+0x30>
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	20 93 3b 38 	sts	0x383B, r18	; 0x80383b <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    244a:	20 91 49 3a 	lds	r18, 0x3A49	; 0x803a49 <txAddrNow>
    244e:	28 30       	cpi	r18, 0x08	; 8
    2450:	08 f0       	brcs	.+2      	; 0x2454 <CheckSend+0x3e>
    2452:	48 c0       	rjmp	.+144    	; 0x24e4 <CheckSend+0xce>
    2454:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2458:	88 23       	and	r24, r24
    245a:	09 f4       	brne	.+2      	; 0x245e <CheckSend+0x48>
    245c:	43 c0       	rjmp	.+134    	; 0x24e4 <CheckSend+0xce>
        if (txStrLen[txAddrNow] == 0){
    245e:	82 2f       	mov	r24, r18
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	fc 01       	movw	r30, r24
    2464:	e6 5b       	subi	r30, 0xB6	; 182
    2466:	f5 4c       	sbci	r31, 0xC5	; 197
    2468:	e0 81       	ld	r30, Z
    246a:	e1 11       	cpse	r30, r1
    246c:	06 c0       	rjmp	.+12     	; 0x247a <CheckSend+0x64>
            txPart = 0;
    246e:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <txPart.3950>
            txAddrNow = TXLISTLEN;
    2472:	88 e0       	ldi	r24, 0x08	; 8
    2474:	80 93 49 3a 	sts	0x3A49, r24	; 0x803a49 <txAddrNow>
    2478:	2d c0       	rjmp	.+90     	; 0x24d4 <CheckSend+0xbe>
        } else if (txPart < txStrLen[txAddrNow]){
    247a:	50 91 08 39 	lds	r21, 0x3908	; 0x803908 <txPart.3950>
    247e:	5e 17       	cp	r21, r30
    2480:	58 f5       	brcc	.+86     	; 0x24d8 <CheckSend+0xc2>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2482:	ce 2f       	mov	r28, r30
    2484:	c5 1b       	sub	r28, r21
    2486:	c1 32       	cpi	r28, 0x21	; 33
    2488:	08 f0       	brcs	.+2      	; 0x248c <CheckSend+0x76>
    248a:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	fc 01       	movw	r30, r24
    2492:	ee 5a       	subi	r30, 0xAE	; 174
    2494:	f5 4c       	sbci	r31, 0xC5	; 197
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	2b ef       	ldi	r18, 0xFB	; 251
    249c:	3a e3       	ldi	r19, 0x3A	; 58
    249e:	40 91 48 3a 	lds	r20, 0x3A48	; 0x803a48 <txTypeNow>
    24a2:	6c 2f       	mov	r22, r28
    24a4:	85 0f       	add	r24, r21
    24a6:	91 1d       	adc	r25, r1
    24a8:	50 dd       	rcall	.-1376   	; 0x1f4a <ExtEERead>
            txPart += EEreadLength;
    24aa:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <txPart.3950>
    24ae:	8c 0f       	add	r24, r28
    24b0:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <txPart.3950>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    24b4:	ec 2f       	mov	r30, r28
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	e5 50       	subi	r30, 0x05	; 5
    24ba:	f5 4c       	sbci	r31, 0xC5	; 197
    24bc:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    24be:	80 91 fb 3a 	lds	r24, 0x3AFB	; 0x803afb <txBuffer>
    24c2:	81 11       	cpse	r24, r1
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <CheckSend+0xb6>
    24c6:	8b ed       	ldi	r24, 0xDB	; 219
    24c8:	80 93 fb 3a 	sts	0x3AFB, r24	; 0x803afb <txBuffer>
            SerSend(&txBuffer[0]);
    24cc:	8b ef       	ldi	r24, 0xFB	; 251
    24ce:	9a e3       	ldi	r25, 0x3A	; 58
    24d0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	0b c0       	rjmp	.+22     	; 0x24ee <CheckSend+0xd8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    24d8:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <txPart.3950>
            ++txAddrNow;
    24dc:	2f 5f       	subi	r18, 0xFF	; 255
    24de:	20 93 49 3a 	sts	0x3A49, r18	; 0x803a49 <txAddrNow>
    24e2:	f8 cf       	rjmp	.-16     	; 0x24d4 <CheckSend+0xbe>
        }
    } else if (serTxDone) return 0; //All is sent!
    24e4:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	91 11       	cpse	r25, r1
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    24f6:	c0 91 1c 39 	lds	r28, 0x391C	; 0x80391c <responseList>
    24fa:	cc 23       	and	r28, r28
    24fc:	e9 f1       	breq	.+122    	; 0x2578 <CheckResponse+0x86>
        --responseList;
    24fe:	c1 50       	subi	r28, 0x01	; 1
    2500:	c0 93 1c 39 	sts	0x391C, r28	; 0x80391c <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2504:	d0 91 07 39 	lds	r29, 0x3907	; 0x803907 <number.3954>
    2508:	2d 2f       	mov	r18, r29
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	f9 01       	movw	r30, r18
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	e3 5e       	subi	r30, 0xE3	; 227
    2514:	f6 4c       	sbci	r31, 0xC6	; 198
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	80 3f       	cpi	r24, 0xF0	; 240
    251c:	4f ef       	ldi	r20, 0xFF	; 255
    251e:	94 07       	cpc	r25, r20
    2520:	51 f4       	brne	.+20     	; 0x2536 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2522:	60 91 37 3a 	lds	r22, 0x3A37	; 0x803a37 <currObj+0x1a>
    2526:	70 91 38 3a 	lds	r23, 0x3A38	; 0x803a38 <currObj+0x1b>
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0xc>
    2530:	90 91 2a 3a 	lds	r25, 0x3A2A	; 0x803a2a <currObj+0xd>
    2534:	0d c0       	rjmp	.+26     	; 0x2550 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2536:	d9 01       	movw	r26, r18
    2538:	aa 0f       	add	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	a3 56       	subi	r26, 0x63	; 99
    253e:	b6 4c       	sbci	r27, 0xC6	; 198
    2540:	22 0f       	add	r18, r18
    2542:	33 1f       	adc	r19, r19
    2544:	f9 01       	movw	r30, r18
    2546:	e3 5a       	subi	r30, 0xA3	; 163
    2548:	f6 4c       	sbci	r31, 0xC6	; 198
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	4c 91       	ld	r20, X
    2550:	53 dd       	rcall	.-1370   	; 0x1ff8 <PrepareSending>
        }
        ++number;
    2552:	df 5f       	subi	r29, 0xFF	; 255
    2554:	d0 93 07 39 	sts	0x3907, r29	; 0x803907 <number.3954>

        if (responseList == 0) {
    2558:	c1 11       	cpse	r28, r1
    255a:	0d c0       	rjmp	.+26     	; 0x2576 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    255c:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x4>
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    2566:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
            RXCNT = 0;
    256a:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    256c:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <serRxDone>
            number = 0;
    2570:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <number.3954>
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    2576:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    2578:	8c 2f       	mov	r24, r28
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2580:	3f 92       	push	r3
    2582:	4f 92       	push	r4
    2584:	5f 92       	push	r5
    2586:	6f 92       	push	r6
    2588:	7f 92       	push	r7
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	a1 97       	sbiw	r28, 0x21	; 33
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    25ae:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    25b2:	8f 3f       	cpi	r24, 0xFF	; 255
    25b4:	49 f4       	brne	.+18     	; 0x25c8 <CheckInput+0x48>
        //Start at first location
        PopulateObject(route[0], &currObj);
    25b6:	6d e1       	ldi	r22, 0x1D	; 29
    25b8:	7a e3       	ldi	r23, 0x3A	; 58
    25ba:	80 91 dd 39 	lds	r24, 0x39DD	; 0x8039dd <route>
    25be:	90 91 de 39 	lds	r25, 0x39DE	; 0x8039de <route+0x1>
    25c2:	d3 dd       	rcall	.-1114   	; 0x216a <PopulateObject>
        currDepth = 0;
    25c4:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <currDepth>
    }

    if (serRxDone){
    25c8:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <serRxDone>
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <CheckInput+0x52>
    25d0:	71 c2       	rjmp	.+1250   	; 0x2ab4 <CheckInput+0x534>

        //Special input requested from user by game
        if (specialInput[0]){
    25d2:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput>
    25d6:	88 23       	and	r24, r24
    25d8:	09 f4       	brne	.+2      	; 0x25dc <CheckInput+0x5c>
    25da:	57 c0       	rjmp	.+174    	; 0x268a <CheckInput+0x10a>
            specialPassed = 0;
    25dc:	10 92 0b 39 	sts	0x390B, r1	; 0x80390b <specialPassed>
            data[0] = 'a';
    25e0:	81 e6       	ldi	r24, 0x61	; 97
    25e2:	f8 01       	movw	r30, r16
    25e4:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    25e6:	6c e0       	ldi	r22, 0x0C	; 12
    25e8:	79 e3       	ldi	r23, 0x39	; 57
    25ea:	87 e7       	ldi	r24, 0x77	; 119
    25ec:	9a e3       	ldi	r25, 0x3A	; 58
    25ee:	ea dc       	rcall	.-1580   	; 0x1fc4 <StartsWith>
    25f0:	f8 2e       	mov	r15, r24
    25f2:	88 23       	and	r24, r24
    25f4:	21 f0       	breq	.+8      	; 0x25fe <CheckInput+0x7e>
                specialPassed = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <specialPassed>
    25fc:	04 c0       	rjmp	.+8      	; 0x2606 <CheckInput+0x86>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    25fe:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput>
    2602:	81 33       	cpi	r24, 0x31	; 49
    2604:	11 f0       	breq	.+4      	; 0x260a <CheckInput+0x8a>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2606:	f1 2c       	mov	r15, r1
    2608:	57 c2       	rjmp	.+1198   	; 0x2ab8 <CheckInput+0x538>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    260a:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <specialInput+0x2>
    260e:	81 11       	cpse	r24, r1
    2610:	fa cf       	rjmp	.-12     	; 0x2606 <CheckInput+0x86>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2612:	87 e7       	ldi	r24, 0x77	; 119
    2614:	9a e3       	ldi	r25, 0x3A	; 58
    2616:	dc de       	rcall	.-584    	; 0x23d0 <CleanInput>
                specialPassed = 2;
    2618:	92 e0       	ldi	r25, 0x02	; 2
    261a:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <specialPassed>
                data[1] = 0;
    261e:	f8 01       	movw	r30, r16
    2620:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2622:	82 30       	cpi	r24, 0x02	; 2
    2624:	80 f3       	brcs	.-32     	; 0x2606 <CheckInput+0x86>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    2626:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    262a:	81 33       	cpi	r24, 0x31	; 49
    262c:	61 f0       	breq	.+24     	; 0x2646 <CheckInput+0xc6>
    262e:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    2632:	82 33       	cpi	r24, 0x32	; 50
    2634:	41 f0       	breq	.+16     	; 0x2646 <CheckInput+0xc6>
    2636:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    263a:	83 33       	cpi	r24, 0x33	; 51
    263c:	21 f0       	breq	.+8      	; 0x2646 <CheckInput+0xc6>
    263e:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    2642:	84 33       	cpi	r24, 0x34	; 52
    2644:	01 f7       	brne	.-64     	; 0x2606 <CheckInput+0x86>
                        serRx[1] |= 0x20;
    2646:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    264a:	80 62       	ori	r24, 0x20	; 32
    264c:	80 93 78 3a 	sts	0x3A78, r24	; 0x803a78 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2650:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    2654:	81 36       	cpi	r24, 0x61	; 97
    2656:	61 f0       	breq	.+24     	; 0x2670 <CheckInput+0xf0>
    2658:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    265c:	85 36       	cpi	r24, 0x65	; 101
    265e:	41 f0       	breq	.+16     	; 0x2670 <CheckInput+0xf0>
    2660:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    2664:	86 36       	cpi	r24, 0x66	; 102
    2666:	21 f0       	breq	.+8      	; 0x2670 <CheckInput+0xf0>
    2668:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    266c:	87 37       	cpi	r24, 0x77	; 119
    266e:	59 f6       	brne	.-106    	; 0x2606 <CheckInput+0x86>
                            data[1] = specialInput[1]+0x11;
    2670:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <specialInput+0x1>
    2674:	8f 5e       	subi	r24, 0xEF	; 239
    2676:	f8 01       	movw	r30, r16
    2678:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    267a:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    267e:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2680:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    2684:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2686:	14 82       	std	Z+4, r1	; 0x04
    2688:	17 c2       	rjmp	.+1070   	; 0x2ab8 <CheckInput+0x538>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    268a:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    268e:	83 32       	cpi	r24, 0x23	; 35
    2690:	89 f5       	brne	.+98     	; 0x26f4 <CheckInput+0x174>
    2692:	8d b3       	in	r24, 0x1d	; 29
    2694:	86 30       	cpi	r24, 0x06	; 6
    2696:	71 f5       	brne	.+92     	; 0x26f4 <CheckInput+0x174>
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    269e:	fc 01       	movw	r30, r24
    26a0:	e9 58       	subi	r30, 0x89	; 137
    26a2:	f5 4c       	sbci	r31, 0xC5	; 197
    26a4:	20 81       	ld	r18, Z
    26a6:	20 53       	subi	r18, 0x30	; 48
    26a8:	20 83       	st	Z, r18
                    bitNr *= 10;
    26aa:	11 0f       	add	r17, r17
    26ac:	21 2f       	mov	r18, r17
    26ae:	22 0f       	add	r18, r18
    26b0:	22 0f       	add	r18, r18
    26b2:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    26b4:	20 91 78 3a 	lds	r18, 0x3A78	; 0x803a78 <serRx+0x1>
    26b8:	23 30       	cpi	r18, 0x03	; 3
    26ba:	48 f4       	brcc	.+18     	; 0x26ce <CheckInput+0x14e>
                    if (serRx[x] < 10) {
    26bc:	20 81       	ld	r18, Z
    26be:	2a 30       	cpi	r18, 0x0A	; 10
    26c0:	b8 f4       	brcc	.+46     	; 0x26f0 <CheckInput+0x170>
                        bitNr += serRx[x];
    26c2:	20 81       	ld	r18, Z
    26c4:	12 0f       	add	r17, r18
    26c6:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    26c8:	84 30       	cpi	r24, 0x04	; 4
    26ca:	91 05       	cpc	r25, r1
    26cc:	41 f7       	brne	.-48     	; 0x269e <CheckInput+0x11e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    26ce:	81 2f       	mov	r24, r17
    26d0:	8f 77       	andi	r24, 0x7F	; 127
    26d2:	71 f0       	breq	.+28     	; 0x26f0 <CheckInput+0x170>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    26d4:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx+0x4>
    26d8:	60 91 7c 3a 	lds	r22, 0x3A7C	; 0x803a7c <serRx+0x5>
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	78 2b       	or	r23, r24
    26e0:	81 2f       	mov	r24, r17
    26e2:	80 95       	com	r24
    26e4:	cf db       	rcall	.-2146   	; 0x1e84 <Cheat>
    26e6:	88 23       	and	r24, r24
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <CheckInput+0x170>
    26ea:	81 2f       	mov	r24, r17
    26ec:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
                }
                responseList = SetStandardResponse(0);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	50 c0       	rjmp	.+160    	; 0x2794 <CheckInput+0x214>
    26f4:	d8 01       	movw	r26, r16
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    26fa:	fc 01       	movw	r30, r24
    26fc:	e9 58       	subi	r30, 0x89	; 137
    26fe:	f5 4c       	sbci	r31, 0xC5	; 197
    2700:	20 81       	ld	r18, Z
    2702:	21 34       	cpi	r18, 0x41	; 65
    2704:	18 f0       	brcs	.+6      	; 0x270c <CheckInput+0x18c>
    2706:	20 81       	ld	r18, Z
    2708:	2b 35       	cpi	r18, 0x5B	; 91
    270a:	10 f0       	brcs	.+4      	; 0x2710 <CheckInput+0x190>
    270c:	20 81       	ld	r18, Z
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <CheckInput+0x194>
    2710:	20 81       	ld	r18, Z
    2712:	20 62       	ori	r18, 0x20	; 32
    2714:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2716:	20 81       	ld	r18, Z
    2718:	21 11       	cpse	r18, r1
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <CheckInput+0x1a6>
                    data[x] = 0;
    271c:	f8 01       	movw	r30, r16
    271e:	e8 0f       	add	r30, r24
    2720:	f1 1d       	adc	r31, r1
    2722:	10 82       	st	Z, r1
                    break;
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <CheckInput+0x1b0>
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    272a:	81 34       	cpi	r24, 0x41	; 65
    272c:	91 05       	cpc	r25, r1
    272e:	29 f7       	brne	.-54     	; 0x26fa <CheckInput+0x17a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2730:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
                data[0] = 0;
    2734:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2736:	81 11       	cpse	r24, r1
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <CheckInput+0x1c4>
                data[0] = 0;
    273a:	10 82       	st	Z, r1
                RXCNT = 0;
    273c:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    273e:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <serRxDone>
    2742:	b8 c1       	rjmp	.+880    	; 0x2ab4 <CheckInput+0x534>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2744:	80 81       	ld	r24, Z
    2746:	8f 33       	cpi	r24, 0x3F	; 63
    2748:	11 f0       	breq	.+4      	; 0x274e <CheckInput+0x1ce>
    274a:	88 36       	cpi	r24, 0x68	; 104
    274c:	39 f5       	brne	.+78     	; 0x279c <CheckInput+0x21c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    274e:	89 e5       	ldi	r24, 0x59	; 89
    2750:	9a e7       	ldi	r25, 0x7A	; 122
    2752:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr>
    2756:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    275a:	84 e0       	ldi	r24, 0x04	; 4
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    2762:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x80>
    276e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2772:	23 e9       	ldi	r18, 0x93	; 147
    2774:	3b e7       	ldi	r19, 0x7B	; 123
    2776:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    277a:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    277e:	2d e6       	ldi	r18, 0x6D	; 109
    2780:	34 e0       	ldi	r19, 0x04	; 4
    2782:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x42>
    2786:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    278a:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    278e:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	6e dc       	rcall	.-1828   	; 0x2072 <SetStandardResponse>
    2796:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <responseList>
    279a:	8c c1       	rjmp	.+792    	; 0x2ab4 <CheckInput+0x534>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    279c:	81 36       	cpi	r24, 0x61	; 97
    279e:	d9 f4       	brne	.+54     	; 0x27d6 <CheckInput+0x256>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27a0:	89 e5       	ldi	r24, 0x59	; 89
    27a2:	9a e7       	ldi	r25, 0x7A	; 122
    27a4:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr>
    27a8:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    27ac:	84 e0       	ldi	r24, 0x04	; 4
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    27b4:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x80>
    27c0:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27c4:	2e e6       	ldi	r18, 0x6E	; 110
    27c6:	3a e7       	ldi	r19, 0x7A	; 122
    27c8:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    27cc:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    27d0:	25 e2       	ldi	r18, 0x25	; 37
    27d2:	31 e0       	ldi	r19, 0x01	; 1
    27d4:	d6 cf       	rjmp	.-84     	; 0x2782 <CheckInput+0x202>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    27d6:	87 37       	cpi	r24, 0x77	; 119
    27d8:	09 f0       	breq	.+2      	; 0x27dc <CheckInput+0x25c>
    27da:	6e c0       	rjmp	.+220    	; 0x28b8 <CheckInput+0x338>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27dc:	89 e5       	ldi	r24, 0x59	; 89
    27de:	9a e7       	ldi	r25, 0x7A	; 122
    27e0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr>
    27e4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    27e8:	84 e0       	ldi	r24, 0x04	; 4
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    27f0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    27f4:	21 e0       	ldi	r18, 0x01	; 1
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x80>
    27fc:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2800:	8d e8       	ldi	r24, 0x8D	; 141
    2802:	96 e7       	ldi	r25, 0x76	; 118
    2804:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    2808:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    280c:	82 e1       	ldi	r24, 0x12	; 18
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2814:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2818:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x82>
    281c:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    2820:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <whoami>
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	19 f4       	brne	.+6      	; 0x282e <CheckInput+0x2ae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2828:	87 e8       	ldi	r24, 0x87	; 135
    282a:	96 e7       	ldi	r25, 0x76	; 118
    282c:	0f c0       	rjmp	.+30     	; 0x284c <CheckInput+0x2cc>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	49 f4       	brne	.+18     	; 0x2844 <CheckInput+0x2c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2832:	84 e8       	ldi	r24, 0x84	; 132
    2834:	96 e7       	ldi	r25, 0x76	; 118
    2836:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    283a:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	1e c0       	rjmp	.+60     	; 0x2880 <CheckInput+0x300>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    2844:	83 30       	cpi	r24, 0x03	; 3
    2846:	49 f4       	brne	.+18     	; 0x285a <CheckInput+0x2da>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2848:	8e e7       	ldi	r24, 0x7E	; 126
    284a:	96 e7       	ldi	r25, 0x76	; 118
    284c:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2850:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    2854:	86 e0       	ldi	r24, 0x06	; 6
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	13 c0       	rjmp	.+38     	; 0x2880 <CheckInput+0x300>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    285a:	84 30       	cpi	r24, 0x04	; 4
    285c:	49 f4       	brne	.+18     	; 0x2870 <CheckInput+0x2f0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    285e:	89 e7       	ldi	r24, 0x79	; 121
    2860:	96 e7       	ldi	r25, 0x76	; 118
    2862:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2866:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    286a:	85 e0       	ldi	r24, 0x05	; 5
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	08 c0       	rjmp	.+16     	; 0x2880 <CheckInput+0x300>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2870:	82 e0       	ldi	r24, 0x02	; 2
    2872:	96 e7       	ldi	r25, 0x76	; 118
    2874:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2878:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    287c:	82 e4       	ldi	r24, 0x42	; 66
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    2884:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    2888:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x84>
    288c:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2890:	8f e5       	ldi	r24, 0x5F	; 95
    2892:	96 e7       	ldi	r25, 0x76	; 118
    2894:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x6>
    2898:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    289c:	8a e1       	ldi	r24, 0x1A	; 26
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x46>
    28a4:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x86>
    28b0:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    28b4:	84 e0       	ldi	r24, 0x04	; 4
    28b6:	6e cf       	rjmp	.-292    	; 0x2794 <CheckInput+0x214>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    28b8:	81 37       	cpi	r24, 0x71	; 113
    28ba:	d9 f4       	brne	.+54     	; 0x28f2 <CheckInput+0x372>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28bc:	89 e5       	ldi	r24, 0x59	; 89
    28be:	9a e7       	ldi	r25, 0x7A	; 122
    28c0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr>
    28c4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    28c8:	84 e0       	ldi	r24, 0x04	; 4
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    28d0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x80>
    28dc:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3a e7       	ldi	r19, 0x7A	; 122
    28e4:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    28e8:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    28ec:	25 e5       	ldi	r18, 0x55	; 85
    28ee:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    28f0:	48 cf       	rjmp	.-368    	; 0x2782 <CheckInput+0x202>
    28f2:	6e e7       	ldi	r22, 0x7E	; 126
    28f4:	7e eb       	ldi	r23, 0xBE	; 190
    28f6:	c8 01       	movw	r24, r16
    28f8:	65 db       	rcall	.-2358   	; 0x1fc4 <StartsWith>
    28fa:	88 23       	and	r24, r24
    28fc:	f9 f0       	breq	.+62     	; 0x293c <CheckInput+0x3bc>
    28fe:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	81 2f       	mov	r24, r17
    2904:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <WriteStatusBit>
    2908:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    290a:	12 37       	cpi	r17, 0x72	; 114
    290c:	c9 f7       	brne	.-14     	; 0x2900 <CheckInput+0x380>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    290e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    2912:	80 e2       	ldi	r24, 0x20	; 32
    2914:	e1 ec       	ldi	r30, 0xC1	; 193
    2916:	fe eb       	ldi	r31, 0xBE	; 190
    2918:	de 01       	movw	r26, r28
    291a:	11 96       	adiw	r26, 0x01	; 1
    291c:	01 90       	ld	r0, Z+
    291e:	0d 92       	st	X+, r0
    2920:	8a 95       	dec	r24
    2922:	e1 f7       	brne	.-8      	; 0x291c <CheckInput+0x39c>
                SerSpeed(60);
    2924:	8c e3       	ldi	r24, 0x3C	; 60
    2926:	0e 94 8c 08 	call	0x1118	; 0x1118 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    292a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    292e:	88 23       	and	r24, r24
    2930:	e1 f3       	breq	.-8      	; 0x292a <CheckInput+0x3aa>
    2932:	ce 01       	movw	r24, r28
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    293a:	f7 cf       	rjmp	.-18     	; 0x292a <CheckInput+0x3aa>
    293c:	64 e8       	ldi	r22, 0x84	; 132
    293e:	7e eb       	ldi	r23, 0xBE	; 190
    2940:	c8 01       	movw	r24, r16
    2942:	40 db       	rcall	.-2432   	; 0x1fc4 <StartsWith>
    2944:	88 23       	and	r24, r24
    2946:	61 f1       	breq	.+88     	; 0x29a0 <CheckInput+0x420>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	89 a3       	std	Y+33, r24	; 0x21
    294c:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	be 01       	movw	r22, r28
    2952:	6f 5d       	subi	r22, 0xDF	; 223
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	81 2f       	mov	r24, r17
    2958:	0e 94 53 08 	call	0x10a6	; 0x10a6 <EEWrite>
    295c:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    295e:	10 32       	cpi	r17, 0x20	; 32
    2960:	b1 f7       	brne	.-20     	; 0x294e <CheckInput+0x3ce>
    2962:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	81 2f       	mov	r24, r17
    2968:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <WriteStatusBit>
    296c:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    296e:	12 37       	cpi	r17, 0x72	; 114
    2970:	c9 f7       	brne	.-14     	; 0x2964 <CheckInput+0x3e4>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    2972:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    2976:	8f e0       	ldi	r24, 0x0F	; 15
    2978:	e1 ee       	ldi	r30, 0xE1	; 225
    297a:	fe eb       	ldi	r31, 0xBE	; 190
    297c:	de 01       	movw	r26, r28
    297e:	11 96       	adiw	r26, 0x01	; 1
    2980:	01 90       	ld	r0, Z+
    2982:	0d 92       	st	X+, r0
    2984:	8a 95       	dec	r24
    2986:	e1 f7       	brne	.-8      	; 0x2980 <CheckInput+0x400>
                SerSpeed(60);
    2988:	8c e3       	ldi	r24, 0x3C	; 60
    298a:	0e 94 8c 08 	call	0x1118	; 0x1118 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    298e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2992:	88 23       	and	r24, r24
    2994:	e1 f3       	breq	.-8      	; 0x298e <CheckInput+0x40e>
    2996:	ce 01       	movw	r24, r28
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    299e:	f7 cf       	rjmp	.-18     	; 0x298e <CheckInput+0x40e>
    29a0:	6b eb       	ldi	r22, 0xBB	; 187
    29a2:	7e eb       	ldi	r23, 0xBE	; 190
    29a4:	c8 01       	movw	r24, r16
    29a6:	0e db       	rcall	.-2532   	; 0x1fc4 <StartsWith>
    29a8:	88 23       	and	r24, r24
    29aa:	09 f4       	brne	.+2      	; 0x29ae <CheckInput+0x42e>
    29ac:	2c ce       	rjmp	.-936    	; 0x2606 <CheckInput+0x86>
                //int8_t n;
                uint8_t bit, digit[3] = {0,0,0};
    29ae:	19 82       	std	Y+1, r1	; 0x01
    29b0:	1a 82       	std	Y+2, r1	; 0x02
    29b2:	1b 82       	std	Y+3, r1	; 0x03
    29b4:	8d e1       	ldi	r24, 0x1D	; 29
    29b6:	c8 2e       	mov	r12, r24
    29b8:	89 e3       	ldi	r24, 0x39	; 57
    29ba:	d8 2e       	mov	r13, r24
    29bc:	9d e5       	ldi	r25, 0x5D	; 93
    29be:	e9 2e       	mov	r14, r25
    29c0:	99 e3       	ldi	r25, 0x39	; 57
    29c2:	f9 2e       	mov	r15, r25
    29c4:	0d e9       	ldi	r16, 0x9D	; 157
    29c6:	19 e3       	ldi	r17, 0x39	; 57
    29c8:	28 e1       	ldi	r18, 0x18	; 24
    29ca:	32 2e       	mov	r3, r18
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29cc:	3d e9       	ldi	r19, 0x9D	; 157
    29ce:	63 2e       	mov	r6, r19
    29d0:	34 e7       	ldi	r19, 0x74	; 116
    29d2:	73 2e       	mov	r7, r19
    reactStr[1][number]=length;
    29d4:	42 e0       	ldi	r20, 0x02	; 2
    29d6:	84 2e       	mov	r8, r20
    29d8:	91 2c       	mov	r9, r1
    reactStr[2][number]=type;
    29da:	aa 24       	eor	r10, r10
    29dc:	a3 94       	inc	r10
    29de:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29e0:	67 e5       	ldi	r22, 0x57	; 87
    29e2:	46 2e       	mov	r4, r22
    29e4:	6a e7       	ldi	r22, 0x7A	; 122
    29e6:	56 2e       	mov	r5, r22
                uint8_t bit, digit[3] = {0,0,0};

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	be 01       	movw	r22, r28
    29ec:	6f 5d       	subi	r22, 0xDF	; 223
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	83 2d       	mov	r24, r3
    29f2:	0e 94 43 08 	call	0x1086	; 0x1086 <EERead>
                    bit = 0xff-bit;
    29f6:	89 a1       	ldd	r24, Y+33	; 0x21
    29f8:	80 95       	com	r24
    29fa:	89 a3       	std	Y+33, r24	; 0x21
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29fc:	f6 01       	movw	r30, r12
    29fe:	60 82       	st	Z, r6
    2a00:	71 82       	std	Z+1, r7	; 0x01
    reactStr[1][number]=length;
    2a02:	f7 01       	movw	r30, r14
    2a04:	80 82       	st	Z, r8
    2a06:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2a08:	f8 01       	movw	r30, r16
    2a0a:	a0 82       	st	Z, r10
    2a0c:	b1 82       	std	Z+1, r11	; 0x01
                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    } 
                    */
                    SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
    2a0e:	98 2f       	mov	r25, r24
    2a10:	92 95       	swap	r25
    2a12:	9f 70       	andi	r25, 0x0F	; 15
    2a14:	e1 e0       	ldi	r30, 0x01	; 1
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	ec 0f       	add	r30, r28
    2a1a:	fd 1f       	adc	r31, r29
    2a1c:	e9 0f       	add	r30, r25
    2a1e:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a20:	20 81       	ld	r18, Z
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	23 57       	subi	r18, 0x73	; 115
    2a26:	3b 48       	sbci	r19, 0x8B	; 139
    2a28:	f6 01       	movw	r30, r12
    2a2a:	22 83       	std	Z+2, r18	; 0x02
    2a2c:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    2a2e:	f7 01       	movw	r30, r14
    2a30:	a2 82       	std	Z+2, r10	; 0x02
    2a32:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2a34:	f8 01       	movw	r30, r16
    2a36:	a2 82       	std	Z+2, r10	; 0x02
    2a38:	b3 82       	std	Z+3, r11	; 0x03
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    } 
                    */
                    SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+digit[bit%16], 1, TEASER);
    2a3a:	8f 70       	andi	r24, 0x0F	; 15
    2a3c:	e1 e0       	ldi	r30, 0x01	; 1
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	ec 0f       	add	r30, r28
    2a42:	fd 1f       	adc	r31, r29
    2a44:	e8 0f       	add	r30, r24
    2a46:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a48:	80 81       	ld	r24, Z
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	83 57       	subi	r24, 0x73	; 115
    2a4e:	9b 48       	sbci	r25, 0x8B	; 139
    2a50:	f6 01       	movw	r30, r12
    2a52:	84 83       	std	Z+4, r24	; 0x04
    2a54:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    2a56:	f7 01       	movw	r30, r14
    2a58:	a4 82       	std	Z+4, r10	; 0x04
    2a5a:	b5 82       	std	Z+5, r11	; 0x05
    reactStr[2][number]=type;
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	a4 82       	std	Z+4, r10	; 0x04
    2a60:	b5 82       	std	Z+5, r11	; 0x05
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a62:	f6 01       	movw	r30, r12
    2a64:	46 82       	std	Z+6, r4	; 0x06
    2a66:	57 82       	std	Z+7, r5	; 0x07
    reactStr[1][number]=length;
    2a68:	f7 01       	movw	r30, r14
    2a6a:	86 82       	std	Z+6, r8	; 0x06
    2a6c:	97 82       	std	Z+7, r9	; 0x07
    reactStr[2][number]=type;
    2a6e:	f8 01       	movw	r30, r16
    2a70:	a6 82       	std	Z+6, r10	; 0x06
    2a72:	b7 82       	std	Z+7, r11	; 0x07
    2a74:	33 94       	inc	r3
    2a76:	f8 e0       	ldi	r31, 0x08	; 8
    2a78:	cf 0e       	add	r12, r31
    2a7a:	d1 1c       	adc	r13, r1
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	e8 0e       	add	r14, r24
    2a80:	f1 1c       	adc	r15, r1
    2a82:	08 5f       	subi	r16, 0xF8	; 248
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
            }
            if (StartsWith(&data[0], "cheat")){
                //int8_t n;
                uint8_t bit, digit[3] = {0,0,0};

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2a86:	e0 e2       	ldi	r30, 0x20	; 32
    2a88:	3e 12       	cpse	r3, r30
    2a8a:	ae cf       	rjmp	.-164    	; 0x29e8 <CheckInput+0x468>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a8c:	89 e5       	ldi	r24, 0x59	; 89
    2a8e:	9a e7       	ldi	r25, 0x7A	; 122
    2a90:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x3e>
    2a94:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x3f>
    reactStr[1][number]=length;
    2a98:	84 e0       	ldi	r24, 0x04	; 4
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x7e>
    2aa0:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x7f>
    reactStr[2][number]=type;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	80 93 db 39 	sts	0x39DB, r24	; 0x8039db <reactStr+0xbe>
    2aac:	90 93 dc 39 	sts	0x39DC, r25	; 0x8039dc <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+digit[bit%16], 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2ab0:	30 92 1c 39 	sts	0x391C, r3	; 0x80391c <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2ab4:	ff 24       	eor	r15, r15
    2ab6:	f3 94       	inc	r15
}
    2ab8:	8f 2d       	mov	r24, r15
    2aba:	a1 96       	adiw	r28, 0x21	; 33
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	bf 90       	pop	r11
    2ad2:	af 90       	pop	r10
    2ad4:	9f 90       	pop	r9
    2ad6:	8f 90       	pop	r8
    2ad8:	7f 90       	pop	r7
    2ada:	6f 90       	pop	r6
    2adc:	5f 90       	pop	r5
    2ade:	4f 90       	pop	r4
    2ae0:	3f 90       	pop	r3
    2ae2:	08 95       	ret

00002ae4 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2ae4:	5f 92       	push	r5
    2ae6:	6f 92       	push	r6
    2ae8:	7f 92       	push	r7
    2aea:	8f 92       	push	r8
    2aec:	9f 92       	push	r9
    2aee:	af 92       	push	r10
    2af0:	bf 92       	push	r11
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	28 97       	sbiw	r28, 0x08	; 8
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2b0e:	60 dc       	rcall	.-1856   	; 0x23d0 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2b10:	c8 01       	movw	r24, r16
    2b12:	5e dc       	rcall	.-1860   	; 0x23d0 <CleanInput>
    2b14:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2b16:	88 23       	and	r24, r24
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <ProcessInput+0x38>
    2b1a:	fc c7       	rjmp	.+4088   	; 0x3b14 <ProcessInput+0x1030>

        //eXit to previous location
        if (data[0] == 'x'){
    2b1c:	d8 01       	movw	r26, r16
    2b1e:	8c 91       	ld	r24, X
    2b20:	88 37       	cpi	r24, 0x78	; 120
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <ProcessInput+0x42>
    2b24:	45 c0       	rjmp	.+138    	; 0x2bb0 <ProcessInput+0xcc>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2b26:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2b2a:	e8 2f       	mov	r30, r24
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	ee 0f       	add	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	e3 52       	subi	r30, 0x23	; 35
    2b34:	f6 4c       	sbci	r31, 0xC6	; 198
    2b36:	20 81       	ld	r18, Z
    2b38:	31 81       	ldd	r19, Z+1	; 0x01
    2b3a:	23 2b       	or	r18, r19
    2b3c:	11 f0       	breq	.+4      	; 0x2b42 <ProcessInput+0x5e>
    2b3e:	81 11       	cpse	r24, r1
    2b40:	03 c0       	rjmp	.+6      	; 0x2b48 <ProcessInput+0x64>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b42:	84 e4       	ldi	r24, 0x44	; 68
    2b44:	96 e7       	ldi	r25, 0x76	; 118
    2b46:	a1 c5       	rjmp	.+2882   	; 0x368a <ProcessInput+0xba6>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2b48:	80 91 23 3a 	lds	r24, 0x3A23	; 0x803a23 <currObj+0x6>
    2b4c:	0e 94 17 0a 	call	0x142e	; 0x142e <CheckState>
    2b50:	88 23       	and	r24, r24
    2b52:	b9 f0       	breq	.+46     	; 0x2b82 <ProcessInput+0x9e>
                --currDepth;
    2b54:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2b58:	e1 50       	subi	r30, 0x01	; 1
    2b5a:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	ee 0f       	add	r30, r30
    2b62:	ff 1f       	adc	r31, r31
    2b64:	e3 52       	subi	r30, 0x23	; 35
    2b66:	f6 4c       	sbci	r31, 0xC6	; 198
    2b68:	6d e1       	ldi	r22, 0x1D	; 29
    2b6a:	7a e3       	ldi	r23, 0x3A	; 58
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	fc da       	rcall	.-2568   	; 0x216a <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2b72:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x4>
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    2b7c:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    2b80:	31 c2       	rjmp	.+1122   	; 0x2fe4 <ProcessInput+0x500>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2b82:	80 91 3f 3a 	lds	r24, 0x3A3F	; 0x803a3f <currObj+0x22>
    2b86:	90 91 40 3a 	lds	r25, 0x3A40	; 0x803a40 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b8a:	20 91 31 3a 	lds	r18, 0x3A31	; 0x803a31 <currObj+0x14>
    2b8e:	30 91 32 3a 	lds	r19, 0x3A32	; 0x803a32 <currObj+0x15>
    2b92:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2b96:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2b9a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2b9e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2ba2:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2ba6:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2baa:	80 91 45 3a 	lds	r24, 0x3A45	; 0x803a45 <currObj+0x28>
    2bae:	3a c6       	rjmp	.+3188   	; 0x3824 <ProcessInput+0xd40>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2bb0:	85 36       	cpi	r24, 0x65	; 101
    2bb2:	19 f0       	breq	.+6      	; 0x2bba <ProcessInput+0xd6>
    2bb4:	8f 36       	cpi	r24, 0x6F	; 111
    2bb6:	09 f0       	breq	.+2      	; 0x2bba <ProcessInput+0xd6>
    2bb8:	df c0       	rjmp	.+446    	; 0x2d78 <ProcessInput+0x294>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2bba:	b2 e0       	ldi	r27, 0x02	; 2
    2bbc:	fb 12       	cpse	r15, r27
    2bbe:	c1 cf       	rjmp	.-126    	; 0x2b42 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2bc0:	e0 90 2e 38 	lds	r14, 0x382E	; 0x80382e <currDepth>
    2bc4:	f1 2c       	mov	r15, r1
    2bc6:	f7 01       	movw	r30, r14
    2bc8:	ee 0f       	add	r30, r30
    2bca:	ff 1f       	adc	r31, r31
    2bcc:	e3 52       	subi	r30, 0x23	; 35
    2bce:	f6 4c       	sbci	r31, 0xC6	; 198
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	d8 01       	movw	r26, r16
    2bd6:	11 96       	adiw	r26, 0x01	; 1
    2bd8:	6c 91       	ld	r22, X
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	90 db       	rcall	.-2272   	; 0x2300 <FindChild>
    2be0:	f7 01       	movw	r30, r14
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	e1 52       	subi	r30, 0x21	; 33
    2be8:	f6 4c       	sbci	r31, 0xC6	; 198
    2bea:	80 83       	st	Z, r24
    2bec:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2bee:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    2bf2:	29 2f       	mov	r18, r25
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	f9 01       	movw	r30, r18
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	ff 1f       	adc	r31, r31
    2bfc:	e1 52       	subi	r30, 0x21	; 33
    2bfe:	f6 4c       	sbci	r31, 0xC6	; 198
    2c00:	40 81       	ld	r20, Z
    2c02:	51 81       	ldd	r21, Z+1	; 0x01
    2c04:	41 15       	cp	r20, r1
    2c06:	51 05       	cpc	r21, r1
    2c08:	21 f0       	breq	.+8      	; 0x2c12 <ProcessInput+0x12e>
                    PopulateObject(route[currDepth+1], &actObj1);
    2c0a:	6c ed       	ldi	r22, 0xDC	; 220
    2c0c:	78 e3       	ldi	r23, 0x38	; 56
    2c0e:	ca 01       	movw	r24, r20
    2c10:	1c c0       	rjmp	.+56     	; 0x2c4a <ProcessInput+0x166>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2c12:	99 23       	and	r25, r25
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <ProcessInput+0x134>
    2c16:	95 c7       	rjmp	.+3882   	; 0x3b42 <ProcessInput+0x105e>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2c18:	22 0f       	add	r18, r18
    2c1a:	33 1f       	adc	r19, r19
    2c1c:	f9 01       	movw	r30, r18
    2c1e:	e5 52       	subi	r30, 0x25	; 37
    2c20:	f6 4c       	sbci	r31, 0xC6	; 198
    2c22:	d8 01       	movw	r26, r16
    2c24:	11 96       	adiw	r26, 0x01	; 1
    2c26:	6c 91       	ld	r22, X
    2c28:	80 81       	ld	r24, Z
    2c2a:	91 81       	ldd	r25, Z+1	; 0x01
    2c2c:	15 db       	rcall	.-2518   	; 0x2258 <CheckLetter>
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <ProcessInput+0x150>
    2c32:	87 c7       	rjmp	.+3854   	; 0x3b42 <ProcessInput+0x105e>
                        PopulateObject(route[currDepth-1], &actObj1);
    2c34:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	ee 0f       	add	r30, r30
    2c3c:	ff 1f       	adc	r31, r31
    2c3e:	e5 52       	subi	r30, 0x25	; 37
    2c40:	f6 4c       	sbci	r31, 0xC6	; 198
    2c42:	6c ed       	ldi	r22, 0xDC	; 220
    2c44:	78 e3       	ldi	r23, 0x38	; 56
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	8f da       	rcall	.-2786   	; 0x216a <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	80 81       	ld	r24, Z
    2c50:	85 36       	cpi	r24, 0x65	; 101
    2c52:	c9 f4       	brne	.+50     	; 0x2c86 <ProcessInput+0x1a2>
    2c54:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0x8>
    2c58:	80 fd       	sbrc	r24, 0
    2c5a:	1e c0       	rjmp	.+60     	; 0x2c98 <ProcessInput+0x1b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c5c:	8d e9       	ldi	r24, 0x9D	; 157
    2c5e:	99 e7       	ldi	r25, 0x79	; 121
    2c60:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    2c64:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2c68:	8e e1       	ldi	r24, 0x1E	; 30
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2c70:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    2c7c:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2c80:	72 e0       	ldi	r23, 0x02	; 2
    2c82:	77 2e       	mov	r7, r23
    2c84:	2c c7       	rjmp	.+3672   	; 0x3ade <ProcessInput+0xffa>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2c86:	8f 36       	cpi	r24, 0x6F	; 111
    2c88:	39 f4       	brne	.+14     	; 0x2c98 <ProcessInput+0x1b4>
    2c8a:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0x8>
    2c8e:	81 fd       	sbrc	r24, 1
    2c90:	03 c0       	rjmp	.+6      	; 0x2c98 <ProcessInput+0x1b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c92:	82 e8       	ldi	r24, 0x82	; 130
    2c94:	99 e7       	ldi	r25, 0x79	; 121
    2c96:	f9 c4       	rjmp	.+2546   	; 0x368a <ProcessInput+0xba6>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2c98:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3995+0x6>
    2c9c:	0e 94 17 0a 	call	0x142e	; 0x142e <CheckState>
    2ca0:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2ca4:	88 23       	and	r24, r24
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <ProcessInput+0x1c6>
    2ca8:	49 c0       	rjmp	.+146    	; 0x2d3c <ProcessInput+0x258>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2caa:	ae 2f       	mov	r26, r30
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	aa 0f       	add	r26, r26
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	a1 52       	subi	r26, 0x21	; 33
    2cb4:	b6 4c       	sbci	r27, 0xC6	; 198
    2cb6:	8d 91       	ld	r24, X+
    2cb8:	9c 91       	ld	r25, X
    2cba:	89 2b       	or	r24, r25
    2cbc:	11 f0       	breq	.+4      	; 0x2cc2 <ProcessInput+0x1de>
    2cbe:	ef 5f       	subi	r30, 0xFF	; 255
    2cc0:	01 c0       	rjmp	.+2      	; 0x2cc4 <ProcessInput+0x1e0>
    2cc2:	e1 50       	subi	r30, 0x01	; 1
    2cc4:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2cc8:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	e3 52       	subi	r30, 0x23	; 35
    2cd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2cd6:	6d e1       	ldi	r22, 0x1D	; 29
    2cd8:	7a e3       	ldi	r23, 0x3A	; 58
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	45 da       	rcall	.-2934   	; 0x216a <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2ce0:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <currObj+0x1c>
    2ce4:	90 91 3a 3a 	lds	r25, 0x3A3A	; 0x803a3a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ce8:	20 91 2b 3a 	lds	r18, 0x3A2B	; 0x803a2b <currObj+0xe>
    2cec:	30 91 2c 3a 	lds	r19, 0x3A2C	; 0x803a2c <currObj+0xf>
    2cf0:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2cf4:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2cf8:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2cfc:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2d00:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2d04:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d08:	89 e5       	ldi	r24, 0x59	; 89
    2d0a:	9a e7       	ldi	r25, 0x7A	; 122
    2d0c:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2d10:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    2d1c:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x84>
    2d28:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2d2c:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x4>
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    2d36:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    2d3a:	8d c4       	rjmp	.+2330   	; 0x3656 <ProcessInput+0xb72>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	ee 0f       	add	r30, r30
    2d40:	ff 1f       	adc	r31, r31
    2d42:	e1 52       	subi	r30, 0x21	; 33
    2d44:	f6 4c       	sbci	r31, 0xC6	; 198
    2d46:	10 82       	st	Z, r1
    2d48:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2d4a:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3995+0x22>
    2d4e:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3995+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d52:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3995+0x14>
    2d56:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3995+0x15>
    2d5a:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2d5e:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2d62:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2d66:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2d6a:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2d6e:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2d72:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3995+0x28>
    2d76:	56 c5       	rjmp	.+2732   	; 0x3824 <ProcessInput+0xd40>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2d78:	8c 36       	cpi	r24, 0x6C	; 108
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <ProcessInput+0x29a>
    2d7c:	57 c1       	rjmp	.+686    	; 0x302c <ProcessInput+0x548>
    2d7e:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
            if (inputLen == 1) {
    2d82:	b1 e0       	ldi	r27, 0x01	; 1
    2d84:	fb 12       	cpse	r15, r27
    2d86:	f6 c0       	rjmp	.+492    	; 0x2f74 <ProcessInput+0x490>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2d88:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <currObj+0x1c>
    2d8c:	90 91 3a 3a 	lds	r25, 0x3A3A	; 0x803a3a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d90:	20 91 2b 3a 	lds	r18, 0x3A2B	; 0x803a2b <currObj+0xe>
    2d94:	30 91 2c 3a 	lds	r19, 0x3A2C	; 0x803a2c <currObj+0xf>
    2d98:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2d9c:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2da0:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2da4:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2da8:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2dac:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2db0:	89 e5       	ldi	r24, 0x59	; 89
    2db2:	9a e7       	ldi	r25, 0x7A	; 122
    2db4:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2db8:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    2dc4:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x84>
    2dd0:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dd4:	2b ee       	ldi	r18, 0xEB	; 235
    2dd6:	39 e7       	ldi	r19, 0x79	; 121
    2dd8:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x6>
    2ddc:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    2de0:	25 e1       	ldi	r18, 0x15	; 21
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x46>
    2de8:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    2dec:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x86>
    2df0:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	ee 0f       	add	r30, r30
    2df8:	ff 1f       	adc	r31, r31
    2dfa:	e1 52       	subi	r30, 0x21	; 33
    2dfc:	f6 4c       	sbci	r31, 0xC6	; 198
    2dfe:	10 82       	st	Z, r1
    2e00:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2e02:	84 e0       	ldi	r24, 0x04	; 4
    2e04:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e06:	97 e5       	ldi	r25, 0x57	; 87
    2e08:	c9 2e       	mov	r12, r25
    2e0a:	9a e7       	ldi	r25, 0x7A	; 122
    2e0c:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2e0e:	22 e0       	ldi	r18, 0x02	; 2
    2e10:	a2 2e       	mov	r10, r18
    2e12:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2e14:	88 24       	eor	r8, r8
    2e16:	83 94       	inc	r8
    2e18:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2e1a:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9c 01       	movw	r18, r24
    2e22:	22 0f       	add	r18, r18
    2e24:	33 1f       	adc	r19, r19
    2e26:	f9 01       	movw	r30, r18
    2e28:	e1 52       	subi	r30, 0x21	; 33
    2e2a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e2c:	7f 01       	movw	r14, r30
    2e2e:	40 81       	ld	r20, Z
    2e30:	51 81       	ldd	r21, Z+1	; 0x01
    2e32:	f9 01       	movw	r30, r18
    2e34:	e3 52       	subi	r30, 0x23	; 35
    2e36:	f6 4c       	sbci	r31, 0xC6	; 198
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	91 81       	ldd	r25, Z+1	; 0x01
    2e3e:	60 da       	rcall	.-2880   	; 0x2300 <FindChild>
    2e40:	d7 01       	movw	r26, r14
    2e42:	8d 93       	st	X+, r24
    2e44:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2e46:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	ee 0f       	add	r30, r30
    2e4e:	ff 1f       	adc	r31, r31
    2e50:	e1 52       	subi	r30, 0x21	; 33
    2e52:	f6 4c       	sbci	r31, 0xC6	; 198
    2e54:	80 81       	ld	r24, Z
    2e56:	91 81       	ldd	r25, Z+1	; 0x01
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <ProcessInput+0x37a>
    2e5c:	4a c0       	rjmp	.+148    	; 0x2ef2 <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2e5e:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory>
    2e62:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x1>
    2e66:	82 17       	cp	r24, r18
    2e68:	93 07       	cpc	r25, r19
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <ProcessInput+0x38a>
    2e6c:	42 c0       	rjmp	.+132    	; 0x2ef2 <ProcessInput+0x40e>
    2e6e:	20 91 42 38 	lds	r18, 0x3842	; 0x803842 <inventory+0x2>
    2e72:	30 91 43 38 	lds	r19, 0x3843	; 0x803843 <inventory+0x3>
    2e76:	82 17       	cp	r24, r18
    2e78:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2e7a:	d9 f1       	breq	.+118    	; 0x2ef2 <ProcessInput+0x40e>
    2e7c:	6c ed       	ldi	r22, 0xDC	; 220
    2e7e:	78 e3       	ldi	r23, 0x38	; 56
    2e80:	74 d9       	rcall	.-3352   	; 0x216a <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2e82:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3995+0x1a>
    2e86:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e8a:	e6 2d       	mov	r30, r6
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	df 01       	movw	r26, r30
    2e90:	aa 0f       	add	r26, r26
    2e92:	bb 1f       	adc	r27, r27
    2e94:	a3 5e       	subi	r26, 0xE3	; 227
    2e96:	b6 4c       	sbci	r27, 0xC6	; 198
    2e98:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3995+0xc>
    2e9c:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3995+0xd>
    2ea0:	2d 93       	st	X+, r18
    2ea2:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2ea4:	df 01       	movw	r26, r30
    2ea6:	aa 0f       	add	r26, r26
    2ea8:	bb 1f       	adc	r27, r27
    2eaa:	a3 5a       	subi	r26, 0xA3	; 163
    2eac:	b6 4c       	sbci	r27, 0xC6	; 198
    2eae:	8d 93       	st	X+, r24
    2eb0:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2eb2:	ee 0f       	add	r30, r30
    2eb4:	ff 1f       	adc	r31, r31
    2eb6:	e3 56       	subi	r30, 0x63	; 99
    2eb8:	f6 4c       	sbci	r31, 0xC6	; 198
    2eba:	10 82       	st	Z, r1
    2ebc:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	86 0d       	add	r24, r6
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	63 94       	inc	r6
    2ec6:	63 94       	inc	r6
    2ec8:	fc 01       	movw	r30, r24
    2eca:	ee 0f       	add	r30, r30
    2ecc:	ff 1f       	adc	r31, r31
    2ece:	e3 5e       	subi	r30, 0xE3	; 227
    2ed0:	f6 4c       	sbci	r31, 0xC6	; 198
    2ed2:	c0 82       	st	Z, r12
    2ed4:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	ee 0f       	add	r30, r30
    2eda:	ff 1f       	adc	r31, r31
    2edc:	e3 5a       	subi	r30, 0xA3	; 163
    2ede:	f6 4c       	sbci	r31, 0xC6	; 198
    2ee0:	a0 82       	st	Z, r10
    2ee2:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	fc 01       	movw	r30, r24
    2eea:	e3 56       	subi	r30, 0x63	; 99
    2eec:	f6 4c       	sbci	r31, 0xC6	; 198
    2eee:	80 82       	st	Z, r8
    2ef0:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2ef2:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    2ef6:	82 2f       	mov	r24, r18
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	fc 01       	movw	r30, r24
    2efc:	ee 0f       	add	r30, r30
    2efe:	ff 1f       	adc	r31, r31
    2f00:	e1 52       	subi	r30, 0x21	; 33
    2f02:	f6 4c       	sbci	r31, 0xC6	; 198
    2f04:	40 81       	ld	r20, Z
    2f06:	51 81       	ldd	r21, Z+1	; 0x01
    2f08:	45 2b       	or	r20, r21
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <ProcessInput+0x42a>
    2f0c:	86 cf       	rjmp	.-244    	; 0x2e1a <ProcessInput+0x336>

                //Look back if not on level 0
                if (currDepth) {
    2f0e:	22 23       	and	r18, r18
    2f10:	69 f1       	breq	.+90     	; 0x2f6c <ProcessInput+0x488>
                    PopulateObject(route[currDepth-1], &actObj1);
    2f12:	88 0f       	add	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	fc 01       	movw	r30, r24
    2f18:	e5 52       	subi	r30, 0x25	; 37
    2f1a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f1c:	6c ed       	ldi	r22, 0xDC	; 220
    2f1e:	78 e3       	ldi	r23, 0x38	; 56
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	22 d9       	rcall	.-3516   	; 0x216a <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2f26:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3995+0x1a>
    2f2a:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3995+0x1b>
    2f2e:	77 24       	eor	r7, r7
    2f30:	73 94       	inc	r7
    2f32:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f34:	86 2d       	mov	r24, r6
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	fc 01       	movw	r30, r24
    2f3a:	ee 0f       	add	r30, r30
    2f3c:	ff 1f       	adc	r31, r31
    2f3e:	e3 5e       	subi	r30, 0xE3	; 227
    2f40:	f6 4c       	sbci	r31, 0xC6	; 198
    2f42:	40 91 e8 38 	lds	r20, 0x38E8	; 0x8038e8 <actObj1.3995+0xc>
    2f46:	50 91 e9 38 	lds	r21, 0x38E9	; 0x8038e9 <actObj1.3995+0xd>
    2f4a:	40 83       	st	Z, r20
    2f4c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2f4e:	fc 01       	movw	r30, r24
    2f50:	ee 0f       	add	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	e3 5a       	subi	r30, 0xA3	; 163
    2f56:	f6 4c       	sbci	r31, 0xC6	; 198
    2f58:	20 83       	st	Z, r18
    2f5a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	fc 01       	movw	r30, r24
    2f62:	e3 56       	subi	r30, 0x63	; 99
    2f64:	f6 4c       	sbci	r31, 0xC6	; 198
    2f66:	10 82       	st	Z, r1
    2f68:	11 82       	std	Z+1, r1	; 0x01
    2f6a:	b9 c5       	rjmp	.+2930   	; 0x3ade <ProcessInput+0xffa>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2f6c:	77 24       	eor	r7, r7
    2f6e:	7a 94       	dec	r7
    2f70:	76 0c       	add	r7, r6
    2f72:	b5 c5       	rjmp	.+2922   	; 0x3ade <ProcessInput+0xffa>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2f74:	ee 2e       	mov	r14, r30
    2f76:	f1 2c       	mov	r15, r1
    2f78:	f7 01       	movw	r30, r14
    2f7a:	ee 0f       	add	r30, r30
    2f7c:	ff 1f       	adc	r31, r31
    2f7e:	e3 52       	subi	r30, 0x23	; 35
    2f80:	f6 4c       	sbci	r31, 0xC6	; 198
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	50 e0       	ldi	r21, 0x00	; 0
    2f86:	d8 01       	movw	r26, r16
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	6c 91       	ld	r22, X
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	b7 d9       	rcall	.-3218   	; 0x2300 <FindChild>
    2f92:	f7 01       	movw	r30, r14
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	e1 52       	subi	r30, 0x21	; 33
    2f9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f9c:	80 83       	st	Z, r24
    2f9e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2fa0:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    2fa4:	29 2f       	mov	r18, r25
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	f9 01       	movw	r30, r18
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	e1 52       	subi	r30, 0x21	; 33
    2fb0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fb2:	40 81       	ld	r20, Z
    2fb4:	51 81       	ldd	r21, Z+1	; 0x01
    2fb6:	41 15       	cp	r20, r1
    2fb8:	51 05       	cpc	r21, r1
    2fba:	21 f0       	breq	.+8      	; 0x2fc4 <ProcessInput+0x4e0>
                    PopulateObject(route[currDepth+1], &actObj1);
    2fbc:	6c ed       	ldi	r22, 0xDC	; 220
    2fbe:	78 e3       	ldi	r23, 0x38	; 56
    2fc0:	ca 01       	movw	r24, r20
    2fc2:	1e c0       	rjmp	.+60     	; 0x3000 <ProcessInput+0x51c>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2fc4:	99 23       	and	r25, r25
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <ProcessInput+0x4e6>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2fc8:	bc c5       	rjmp	.+2936   	; 0x3b42 <ProcessInput+0x105e>
    2fca:	22 0f       	add	r18, r18
    2fcc:	33 1f       	adc	r19, r19
    2fce:	f9 01       	movw	r30, r18
    2fd0:	e5 52       	subi	r30, 0x25	; 37
    2fd2:	f6 4c       	sbci	r31, 0xC6	; 198
    2fd4:	d8 01       	movw	r26, r16
    2fd6:	11 96       	adiw	r26, 0x01	; 1
    2fd8:	6c 91       	ld	r22, X
    2fda:	80 81       	ld	r24, Z
    2fdc:	91 81       	ldd	r25, Z+1	; 0x01
    2fde:	3c d9       	rcall	.-3464   	; 0x2258 <CheckLetter>
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <ProcessInput+0x506>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2fe4:	77 24       	eor	r7, r7
    2fe6:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2fe8:	7a c5       	rjmp	.+2804   	; 0x3ade <ProcessInput+0xffa>
    2fea:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	ee 0f       	add	r30, r30
    2ff2:	ff 1f       	adc	r31, r31
    2ff4:	e5 52       	subi	r30, 0x25	; 37
    2ff6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ff8:	6c ed       	ldi	r22, 0xDC	; 220
    2ffa:	78 e3       	ldi	r23, 0x38	; 56
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	b4 d8       	rcall	.-3736   	; 0x216a <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    3002:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3995+0x1c>
    3006:	90 91 f9 38 	lds	r25, 0x38F9	; 0x8038f9 <actObj1.3995+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    300a:	20 91 ea 38 	lds	r18, 0x38EA	; 0x8038ea <actObj1.3995+0xe>
    300e:	30 91 eb 38 	lds	r19, 0x38EB	; 0x8038eb <actObj1.3995+0xf>
    3012:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3016:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    301a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    301e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3022:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3026:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    302a:	2a ce       	rjmp	.-940    	; 0x2c80 <ProcessInput+0x19c>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    302c:	80 37       	cpi	r24, 0x70	; 112
    302e:	09 f0       	breq	.+2      	; 0x3032 <ProcessInput+0x54e>
    3030:	96 c0       	rjmp	.+300    	; 0x315e <ProcessInput+0x67a>
            if (inventory[0]&&inventory[1]) {
    3032:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    3036:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    303a:	89 2b       	or	r24, r25
    303c:	79 f0       	breq	.+30     	; 0x305c <ProcessInput+0x578>
    303e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    3042:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    3046:	89 2b       	or	r24, r25
    3048:	49 f0       	breq	.+18     	; 0x305c <ProcessInput+0x578>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    304a:	87 e0       	ldi	r24, 0x07	; 7
    304c:	98 e7       	ldi	r25, 0x78	; 120
    304e:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3052:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3056:	89 e5       	ldi	r24, 0x59	; 89
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	08 ce       	rjmp	.-1008   	; 0x2c6c <ProcessInput+0x188>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    305c:	b2 e0       	ldi	r27, 0x02	; 2
    305e:	fb 12       	cpse	r15, r27
    3060:	70 cd       	rjmp	.-1312   	; 0x2b42 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3062:	e0 90 2e 38 	lds	r14, 0x382E	; 0x80382e <currDepth>
    3066:	f1 2c       	mov	r15, r1
    3068:	f7 01       	movw	r30, r14
    306a:	ee 0f       	add	r30, r30
    306c:	ff 1f       	adc	r31, r31
    306e:	e3 52       	subi	r30, 0x23	; 35
    3070:	f6 4c       	sbci	r31, 0xC6	; 198
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	d8 01       	movw	r26, r16
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	6c 91       	ld	r22, X
    307c:	80 81       	ld	r24, Z
    307e:	91 81       	ldd	r25, Z+1	; 0x01
    3080:	3f d9       	rcall	.-3458   	; 0x2300 <FindChild>
    3082:	f7 01       	movw	r30, r14
    3084:	ee 0f       	add	r30, r30
    3086:	ff 1f       	adc	r31, r31
    3088:	e1 52       	subi	r30, 0x21	; 33
    308a:	f6 4c       	sbci	r31, 0xC6	; 198
    308c:	80 83       	st	Z, r24
    308e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3090:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	2f 5f       	subi	r18, 0xFF	; 255
    3098:	3f 4f       	sbci	r19, 0xFF	; 255
    309a:	22 0f       	add	r18, r18
    309c:	33 1f       	adc	r19, r19
    309e:	f9 01       	movw	r30, r18
    30a0:	e3 52       	subi	r30, 0x23	; 35
    30a2:	f6 4c       	sbci	r31, 0xC6	; 198
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	09 f4       	brne	.+2      	; 0x30ae <ProcessInput+0x5ca>
    30ac:	ca c3       	rjmp	.+1940   	; 0x3842 <ProcessInput+0xd5e>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    30ae:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory>
    30b2:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x1>
    30b6:	84 17       	cp	r24, r20
    30b8:	95 07       	cpc	r25, r21
    30ba:	39 f0       	breq	.+14     	; 0x30ca <ProcessInput+0x5e6>
    30bc:	40 91 42 38 	lds	r20, 0x3842	; 0x803842 <inventory+0x2>
    30c0:	50 91 43 38 	lds	r21, 0x3843	; 0x803843 <inventory+0x3>
    30c4:	84 17       	cp	r24, r20
    30c6:	95 07       	cpc	r25, r21
    30c8:	c1 f4       	brne	.+48     	; 0x30fa <ProcessInput+0x616>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ca:	82 ee       	ldi	r24, 0xE2	; 226
    30cc:	97 e7       	ldi	r25, 0x77	; 119
    30ce:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    30d2:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    30d6:	85 e2       	ldi	r24, 0x25	; 37
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    30de:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    30ea:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    30ee:	f9 01       	movw	r30, r18
    30f0:	e3 52       	subi	r30, 0x23	; 35
    30f2:	f6 4c       	sbci	r31, 0xC6	; 198
    30f4:	10 82       	st	Z, r1
    30f6:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    30f8:	c3 cd       	rjmp	.-1146   	; 0x2c80 <ProcessInput+0x19c>
    30fa:	6c ed       	ldi	r22, 0xDC	; 220
    30fc:	78 e3       	ldi	r23, 0x38	; 56
    30fe:	35 d8       	rcall	.-3990   	; 0x216a <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    3100:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3995+0x7>
    3104:	0e 94 17 0a 	call	0x142e	; 0x142e <CheckState>
    3108:	88 23       	and	r24, r24
    310a:	09 f4       	brne	.+2      	; 0x310e <ProcessInput+0x62a>
    310c:	75 c3       	rjmp	.+1770   	; 0x37f8 <ProcessInput+0xd14>
                            if (actObj1.byteField[ITEM_NR]) {
    310e:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3995+0xb>
    3112:	88 23       	and	r24, r24
    3114:	09 f4       	brne	.+2      	; 0x3118 <ProcessInput+0x634>
    3116:	15 cd       	rjmp	.-1494   	; 0x2b42 <ProcessInput+0x5e>
                                if (inventory[0]) {
    3118:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    311c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    3120:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                                    inventory[1] = route[currDepth+1];
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	ee 0f       	add	r30, r30
    3128:	ff 1f       	adc	r31, r31
    312a:	e1 52       	subi	r30, 0x21	; 33
    312c:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    312e:	89 2b       	or	r24, r25
    3130:	39 f0       	breq	.+14     	; 0x3140 <ProcessInput+0x65c>
                                    inventory[1] = route[currDepth+1];
    3132:	80 81       	ld	r24, Z
    3134:	91 81       	ldd	r25, Z+1	; 0x01
    3136:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <inventory+0x2>
    313a:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <inventory+0x3>
    313e:	06 c0       	rjmp	.+12     	; 0x314c <ProcessInput+0x668>
                                } else {
                                    inventory[0] = route[currDepth+1];
    3140:	80 81       	ld	r24, Z
    3142:	91 81       	ldd	r25, Z+1	; 0x01
    3144:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory>
    3148:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    314c:	8c ec       	ldi	r24, 0xCC	; 204
    314e:	97 e7       	ldi	r25, 0x77	; 119
    3150:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3154:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3158:	86 e1       	ldi	r24, 0x16	; 22
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	5e c2       	rjmp	.+1212   	; 0x361a <ProcessInput+0xb36>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    315e:	84 36       	cpi	r24, 0x64	; 100
    3160:	d9 f4       	brne	.+54     	; 0x3198 <ProcessInput+0x6b4>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3162:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    3166:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	09 f0       	breq	.+2      	; 0x3170 <ProcessInput+0x68c>
    316e:	ec c4       	rjmp	.+2520   	; 0x3b48 <ProcessInput+0x1064>
    3170:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    3174:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    3178:	89 2b       	or	r24, r25
    317a:	49 f4       	brne	.+18     	; 0x318e <ProcessInput+0x6aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    317c:	86 ea       	ldi	r24, 0xA6	; 166
    317e:	97 e7       	ldi	r25, 0x77	; 119
    3180:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3184:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3188:	86 e2       	ldi	r24, 0x26	; 38
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	6f cd       	rjmp	.-1314   	; 0x2c6c <ProcessInput+0x188>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    318e:	b2 e0       	ldi	r27, 0x02	; 2
    3190:	fb 16       	cp	r15, r27
    3192:	09 f4       	brne	.+2      	; 0x3196 <ProcessInput+0x6b2>
    3194:	40 c5       	rjmp	.+2688   	; 0x3c16 <ProcessInput+0x1132>
    3196:	d5 cc       	rjmp	.-1622   	; 0x2b42 <ProcessInput+0x5e>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    3198:	89 36       	cpi	r24, 0x69	; 105
    319a:	09 f0       	breq	.+2      	; 0x319e <ProcessInput+0x6ba>
    319c:	7b c0       	rjmp	.+246    	; 0x3294 <ProcessInput+0x7b0>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    319e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    31a2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    31a6:	89 2b       	or	r24, r25
    31a8:	31 f4       	brne	.+12     	; 0x31b6 <ProcessInput+0x6d2>
    31aa:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    31ae:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    31b2:	89 2b       	or	r24, r25
    31b4:	19 f3       	breq	.-58     	; 0x317c <ProcessInput+0x698>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31b6:	8c ec       	ldi	r24, 0xCC	; 204
    31b8:	97 e7       	ldi	r25, 0x77	; 119
    31ba:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    31be:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    31c2:	86 e1       	ldi	r24, 0x16	; 22
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    31ca:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    31d6:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
    31da:	20 e4       	ldi	r18, 0x40	; 64
    31dc:	e2 2e       	mov	r14, r18
    31de:	28 e3       	ldi	r18, 0x38	; 56
    31e0:	f2 2e       	mov	r15, r18
    31e2:	34 e4       	ldi	r19, 0x44	; 68
    31e4:	63 2e       	mov	r6, r19
    31e6:	38 e3       	ldi	r19, 0x38	; 56
    31e8:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    31ea:	42 e0       	ldi	r20, 0x02	; 2
    31ec:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31ee:	57 e5       	ldi	r21, 0x57	; 87
    31f0:	c5 2e       	mov	r12, r21
    31f2:	5a e7       	ldi	r21, 0x7A	; 122
    31f4:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    31f6:	62 e0       	ldi	r22, 0x02	; 2
    31f8:	a6 2e       	mov	r10, r22
    31fa:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    31fc:	88 24       	eor	r8, r8
    31fe:	83 94       	inc	r8
    3200:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3202:	d7 01       	movw	r26, r14
    3204:	8d 91       	ld	r24, X+
    3206:	9d 91       	ld	r25, X+
    3208:	7d 01       	movw	r14, r26
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	d9 f1       	breq	.+118    	; 0x3284 <ProcessInput+0x7a0>
                        PopulateObject(inventory[x], &actObj1);
    320e:	6c ed       	ldi	r22, 0xDC	; 220
    3210:	78 e3       	ldi	r23, 0x38	; 56
    3212:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3216:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3995+0x1a>
    321a:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    321e:	e5 2d       	mov	r30, r5
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	df 01       	movw	r26, r30
    3224:	aa 0f       	add	r26, r26
    3226:	bb 1f       	adc	r27, r27
    3228:	a3 5e       	subi	r26, 0xE3	; 227
    322a:	b6 4c       	sbci	r27, 0xC6	; 198
    322c:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3995+0xc>
    3230:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3995+0xd>
    3234:	2d 93       	st	X+, r18
    3236:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    3238:	df 01       	movw	r26, r30
    323a:	aa 0f       	add	r26, r26
    323c:	bb 1f       	adc	r27, r27
    323e:	a3 5a       	subi	r26, 0xA3	; 163
    3240:	b6 4c       	sbci	r27, 0xC6	; 198
    3242:	8d 93       	st	X+, r24
    3244:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    3246:	ee 0f       	add	r30, r30
    3248:	ff 1f       	adc	r31, r31
    324a:	e3 56       	subi	r30, 0x63	; 99
    324c:	f6 4c       	sbci	r31, 0xC6	; 198
    324e:	10 82       	st	Z, r1
    3250:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3252:	e1 e0       	ldi	r30, 0x01	; 1
    3254:	e5 0d       	add	r30, r5
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	53 94       	inc	r5
    325a:	53 94       	inc	r5
    325c:	df 01       	movw	r26, r30
    325e:	aa 0f       	add	r26, r26
    3260:	bb 1f       	adc	r27, r27
    3262:	a3 5e       	subi	r26, 0xE3	; 227
    3264:	b6 4c       	sbci	r27, 0xC6	; 198
    3266:	cd 92       	st	X+, r12
    3268:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    326a:	df 01       	movw	r26, r30
    326c:	aa 0f       	add	r26, r26
    326e:	bb 1f       	adc	r27, r27
    3270:	a3 5a       	subi	r26, 0xA3	; 163
    3272:	b6 4c       	sbci	r27, 0xC6	; 198
    3274:	ad 92       	st	X+, r10
    3276:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3278:	ee 0f       	add	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	e3 56       	subi	r30, 0x63	; 99
    327e:	f6 4c       	sbci	r31, 0xC6	; 198
    3280:	80 82       	st	Z, r8
    3282:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    3284:	6e 14       	cp	r6, r14
    3286:	7f 04       	cpc	r7, r15
    3288:	09 f0       	breq	.+2      	; 0x328c <ProcessInput+0x7a8>
    328a:	bb cf       	rjmp	.-138    	; 0x3202 <ProcessInput+0x71e>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    328c:	77 24       	eor	r7, r7
    328e:	7a 94       	dec	r7
    3290:	75 0c       	add	r7, r5
    3292:	25 c4       	rjmp	.+2122   	; 0x3ade <ProcessInput+0xffa>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3294:	9c e8       	ldi	r25, 0x8C	; 140
    3296:	98 0f       	add	r25, r24
    3298:	92 30       	cpi	r25, 0x02	; 2
    329a:	28 f0       	brcs	.+10     	; 0x32a6 <ProcessInput+0x7c2>
    329c:	87 36       	cpi	r24, 0x67	; 103
    329e:	19 f0       	breq	.+6      	; 0x32a6 <ProcessInput+0x7c2>
    32a0:	82 37       	cpi	r24, 0x72	; 114
    32a2:	09 f0       	breq	.+2      	; 0x32a6 <ProcessInput+0x7c2>
    32a4:	d7 c2       	rjmp	.+1454   	; 0x3854 <ProcessInput+0xd70>
            if ((inputLen<2)||(inputLen>3)) {
    32a6:	8e ef       	ldi	r24, 0xFE	; 254
    32a8:	8f 0d       	add	r24, r15
    32aa:	82 30       	cpi	r24, 0x02	; 2
    32ac:	08 f0       	brcs	.+2      	; 0x32b0 <ProcessInput+0x7cc>
    32ae:	49 cc       	rjmp	.-1902   	; 0x2b42 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    32b0:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    32b4:	ce 2e       	mov	r12, r30
    32b6:	d1 2c       	mov	r13, r1
    32b8:	d8 01       	movw	r26, r16
    32ba:	af 0d       	add	r26, r15
    32bc:	b1 1d       	adc	r27, r1
    32be:	11 97       	sbiw	r26, 0x01	; 1
    32c0:	f6 01       	movw	r30, r12
    32c2:	ee 0f       	add	r30, r30
    32c4:	ff 1f       	adc	r31, r31
    32c6:	e3 52       	subi	r30, 0x23	; 35
    32c8:	f6 4c       	sbci	r31, 0xC6	; 198
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	6c 91       	ld	r22, X
    32d0:	80 81       	ld	r24, Z
    32d2:	91 81       	ldd	r25, Z+1	; 0x01
    32d4:	15 d8       	rcall	.-4054   	; 0x2300 <FindChild>
    32d6:	f6 01       	movw	r30, r12
    32d8:	ee 0f       	add	r30, r30
    32da:	ff 1f       	adc	r31, r31
    32dc:	e1 52       	subi	r30, 0x21	; 33
    32de:	f6 4c       	sbci	r31, 0xC6	; 198
    32e0:	80 83       	st	Z, r24
    32e2:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    32e4:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	ee 0f       	add	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	e1 52       	subi	r30, 0x21	; 33
    32f0:	f6 4c       	sbci	r31, 0xC6	; 198
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	00 97       	sbiw	r24, 0x00	; 0
    32f8:	09 f4       	brne	.+2      	; 0x32fc <ProcessInput+0x818>
    32fa:	9a c2       	rjmp	.+1332   	; 0x3830 <ProcessInput+0xd4c>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    32fc:	b3 e0       	ldi	r27, 0x03	; 3
    32fe:	fb 12       	cpse	r15, r27
    3300:	78 c1       	rjmp	.+752    	; 0x35f2 <ProcessInput+0xb0e>
    3302:	f8 01       	movw	r30, r16
    3304:	20 81       	ld	r18, Z
    3306:	25 37       	cpi	r18, 0x75	; 117
    3308:	19 f0       	breq	.+6      	; 0x3310 <ProcessInput+0x82c>
    330a:	27 36       	cpi	r18, 0x67	; 103
    330c:	09 f0       	breq	.+2      	; 0x3310 <ProcessInput+0x82c>
    330e:	71 c1       	rjmp	.+738    	; 0x35f2 <ProcessInput+0xb0e>
    3310:	61 2c       	mov	r6, r1
    3312:	77 24       	eor	r7, r7
    3314:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3316:	51 e6       	ldi	r21, 0x61	; 97
    3318:	c5 2e       	mov	r12, r21
    331a:	59 e7       	ldi	r21, 0x79	; 121
    331c:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    331e:	61 e2       	ldi	r22, 0x21	; 33
    3320:	a6 2e       	mov	r10, r22
    3322:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3324:	88 24       	eor	r8, r8
    3326:	83 94       	inc	r8
    3328:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    332a:	e6 2c       	mov	r14, r6
    332c:	f1 2c       	mov	r15, r1
    332e:	c7 01       	movw	r24, r14
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	9c 01       	movw	r18, r24
    3336:	20 5c       	subi	r18, 0xC0	; 192
    3338:	37 4c       	sbci	r19, 0xC7	; 199
    333a:	79 01       	movw	r14, r18
    333c:	d9 01       	movw	r26, r18
    333e:	8d 91       	ld	r24, X+
    3340:	9c 91       	ld	r25, X
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	81 f0       	breq	.+32     	; 0x3366 <ProcessInput+0x882>
                                if (CheckLetter(inventory[x], data[1])) {
    3346:	f8 01       	movw	r30, r16
    3348:	61 81       	ldd	r22, Z+1	; 0x01
    334a:	0e 94 2c 11 	call	0x2258	; 0x2258 <CheckLetter>
    334e:	88 23       	and	r24, r24
    3350:	51 f0       	breq	.+20     	; 0x3366 <ProcessInput+0x882>
                                    PopulateObject(inventory[x], &actObj2);
    3352:	61 eb       	ldi	r22, 0xB1	; 177
    3354:	78 e3       	ldi	r23, 0x38	; 56
    3356:	d7 01       	movw	r26, r14
    3358:	8d 91       	ld	r24, X+
    335a:	9c 91       	ld	r25, X
    335c:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>
                                    x = 2;
    3360:	32 e0       	ldi	r19, 0x02	; 2
    3362:	63 2e       	mov	r6, r19
    3364:	1e c0       	rjmp	.+60     	; 0x33a2 <ProcessInput+0x8be>
                                }
                            }
                            if (x == 1) { 
    3366:	b1 e0       	ldi	r27, 0x01	; 1
    3368:	6b 12       	cpse	r6, r27
    336a:	1a c0       	rjmp	.+52     	; 0x33a0 <ProcessInput+0x8bc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    336c:	e7 2d       	mov	r30, r7
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	df 01       	movw	r26, r30
    3372:	aa 0f       	add	r26, r26
    3374:	bb 1f       	adc	r27, r27
    3376:	a3 5e       	subi	r26, 0xE3	; 227
    3378:	b6 4c       	sbci	r27, 0xC6	; 198
    337a:	cd 92       	st	X+, r12
    337c:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    337e:	df 01       	movw	r26, r30
    3380:	aa 0f       	add	r26, r26
    3382:	bb 1f       	adc	r27, r27
    3384:	a3 5a       	subi	r26, 0xA3	; 163
    3386:	b6 4c       	sbci	r27, 0xC6	; 198
    3388:	ad 92       	st	X+, r10
    338a:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    338c:	ee 0f       	add	r30, r30
    338e:	ff 1f       	adc	r31, r31
    3390:	e3 56       	subi	r30, 0x63	; 99
    3392:	f6 4c       	sbci	r31, 0xC6	; 198
    3394:	80 82       	st	Z, r8
    3396:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3398:	f8 01       	movw	r30, r16
    339a:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    339c:	73 94       	inc	r7
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <ProcessInput+0x8be>
    33a0:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    33a2:	63 94       	inc	r6
    33a4:	f1 e0       	ldi	r31, 0x01	; 1
    33a6:	6f 16       	cp	r6, r31
    33a8:	09 f4       	brne	.+2      	; 0x33ac <ProcessInput+0x8c8>
    33aa:	bf cf       	rjmp	.-130    	; 0x332a <ProcessInput+0x846>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    33ac:	d8 01       	movw	r26, r16
    33ae:	8c 91       	ld	r24, X
    33b0:	88 23       	and	r24, r24
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <ProcessInput+0x8d2>
    33b4:	94 c3       	rjmp	.+1832   	; 0x3ade <ProcessInput+0xffa>
                            PopulateObject(route[currDepth+1], &actObj1);
    33b6:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	ee 0f       	add	r30, r30
    33be:	ff 1f       	adc	r31, r31
    33c0:	e1 52       	subi	r30, 0x21	; 33
    33c2:	f6 4c       	sbci	r31, 0xC6	; 198
    33c4:	6c ed       	ldi	r22, 0xDC	; 220
    33c6:	78 e3       	ldi	r23, 0x38	; 56
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    33d0:	e0 90 fa 38 	lds	r14, 0x38FA	; 0x8038fa <actObj1.3995+0x1e>
    33d4:	f0 90 fb 38 	lds	r15, 0x38FB	; 0x8038fb <actObj1.3995+0x1f>
    33d8:	b1 e0       	ldi	r27, 0x01	; 1
    33da:	eb 16       	cp	r14, r27
    33dc:	f1 04       	cpc	r15, r1
    33de:	09 f0       	breq	.+2      	; 0x33e2 <ProcessInput+0x8fe>
    33e0:	9a c0       	rjmp	.+308    	; 0x3516 <ProcessInput+0xa32>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    33e2:	98 01       	movw	r18, r16
    33e4:	2e 5f       	subi	r18, 0xFE	; 254
    33e6:	3f 4f       	sbci	r19, 0xFF	; 255
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	61 e0       	ldi	r22, 0x01	; 1
    33ec:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3995+0x10>
    33f0:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3995+0x11>
    33f4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <ExtEERead>
                                if (data[2] == '1') {
    33f8:	f8 01       	movw	r30, r16
    33fa:	42 81       	ldd	r20, Z+2	; 0x02
    33fc:	21 e0       	ldi	r18, 0x01	; 1
    33fe:	27 0d       	add	r18, r7
    3400:	87 2d       	mov	r24, r7
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	41 33       	cpi	r20, 0x31	; 49
    3406:	09 f0       	breq	.+2      	; 0x340a <ProcessInput+0x926>
    3408:	6b c0       	rjmp	.+214    	; 0x34e0 <ProcessInput+0x9fc>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    340a:	30 91 bc 38 	lds	r19, 0x38BC	; 0x8038bc <actObj2.3996+0xb>
                                    if ((item < 31)||(item > 34)) {
    340e:	51 ee       	ldi	r21, 0xE1	; 225
    3410:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3412:	fc 01       	movw	r30, r24
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	e3 5e       	subi	r30, 0xE3	; 227
    341a:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    341c:	54 30       	cpi	r21, 0x04	; 4
    341e:	60 f0       	brcs	.+24     	; 0x3438 <ProcessInput+0x954>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3420:	41 e0       	ldi	r20, 0x01	; 1
    3422:	59 e7       	ldi	r21, 0x79	; 121
    3424:	40 83       	st	Z, r20
    3426:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3428:	fc 01       	movw	r30, r24
    342a:	ee 0f       	add	r30, r30
    342c:	ff 1f       	adc	r31, r31
    342e:	e3 5a       	subi	r30, 0xA3	; 163
    3430:	f6 4c       	sbci	r31, 0xC6	; 198
    3432:	4a e1       	ldi	r20, 0x1A	; 26
    3434:	50 e0       	ldi	r21, 0x00	; 0
    3436:	64 c0       	rjmp	.+200    	; 0x3500 <ProcessInput+0xa1c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3438:	60 e5       	ldi	r22, 0x50	; 80
    343a:	75 e7       	ldi	r23, 0x75	; 117
    343c:	60 83       	st	Z, r22
    343e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3440:	fc 01       	movw	r30, r24
    3442:	ee 0f       	add	r30, r30
    3444:	ff 1f       	adc	r31, r31
    3446:	e3 5a       	subi	r30, 0xA3	; 163
    3448:	f6 4c       	sbci	r31, 0xC6	; 198
    344a:	62 eb       	ldi	r22, 0xB2	; 178
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	60 83       	st	Z, r22
    3450:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	fc 01       	movw	r30, r24
    3458:	e3 56       	subi	r30, 0x63	; 99
    345a:	f6 4c       	sbci	r31, 0xC6	; 198
    345c:	e0 82       	st	Z, r14
    345e:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3460:	82 2f       	mov	r24, r18
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	fc 01       	movw	r30, r24
    3466:	ee 0f       	add	r30, r30
    3468:	ff 1f       	adc	r31, r31
    346a:	e3 5e       	subi	r30, 0xE3	; 227
    346c:	f6 4c       	sbci	r31, 0xC6	; 198
    346e:	69 e5       	ldi	r22, 0x59	; 89
    3470:	7a e7       	ldi	r23, 0x7A	; 122
    3472:	60 83       	st	Z, r22
    3474:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3476:	fc 01       	movw	r30, r24
    3478:	ee 0f       	add	r30, r30
    347a:	ff 1f       	adc	r31, r31
    347c:	e3 5a       	subi	r30, 0xA3	; 163
    347e:	f6 4c       	sbci	r31, 0xC6	; 198
    3480:	62 e0       	ldi	r22, 0x02	; 2
    3482:	70 e0       	ldi	r23, 0x00	; 0
    3484:	60 83       	st	Z, r22
    3486:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	fc 01       	movw	r30, r24
    348e:	e3 56       	subi	r30, 0x63	; 99
    3490:	f6 4c       	sbci	r31, 0xC6	; 198
    3492:	e0 82       	st	Z, r14
    3494:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	87 0d       	add	r24, r7
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	f3 e0       	ldi	r31, 0x03	; 3
    349e:	7f 0e       	add	r7, r31
    34a0:	fc 01       	movw	r30, r24
    34a2:	ee 0f       	add	r30, r30
    34a4:	ff 1f       	adc	r31, r31
    34a6:	e3 5e       	subi	r30, 0xE3	; 227
    34a8:	f6 4c       	sbci	r31, 0xC6	; 198
    34aa:	6d ea       	ldi	r22, 0xAD	; 173
    34ac:	78 e7       	ldi	r23, 0x78	; 120
    34ae:	60 83       	st	Z, r22
    34b0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    34b2:	fc 01       	movw	r30, r24
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	e3 5a       	subi	r30, 0xA3	; 163
    34ba:	f6 4c       	sbci	r31, 0xC6	; 198
    34bc:	62 e1       	ldi	r22, 0x12	; 18
    34be:	70 e0       	ldi	r23, 0x00	; 0
    34c0:	60 83       	st	Z, r22
    34c2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	fc 01       	movw	r30, r24
    34ca:	e3 56       	subi	r30, 0x63	; 99
    34cc:	f6 4c       	sbci	r31, 0xC6	; 198
    34ce:	e0 82       	st	Z, r14
    34d0:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    34d2:	40 93 0c 39 	sts	0x390C, r20	; 0x80390c <specialInput>
                                        specialInput[1] = item;
    34d6:	30 93 0d 39 	sts	0x390D, r19	; 0x80390d <specialInput+0x1>
                                        specialInput[2] = 0;
    34da:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <specialInput+0x2>
    34de:	ff c2       	rjmp	.+1534   	; 0x3ade <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34e0:	fc 01       	movw	r30, r24
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	e3 5e       	subi	r30, 0xE3	; 227
    34e8:	f6 4c       	sbci	r31, 0xC6	; 198
    34ea:	42 e0       	ldi	r20, 0x02	; 2
    34ec:	56 e7       	ldi	r21, 0x76	; 118
    34ee:	40 83       	st	Z, r20
    34f0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    34f2:	fc 01       	movw	r30, r24
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	e3 5a       	subi	r30, 0xA3	; 163
    34fa:	f6 4c       	sbci	r31, 0xC6	; 198
    34fc:	42 e4       	ldi	r20, 0x42	; 66
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	40 83       	st	Z, r20
    3502:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	fc 01       	movw	r30, r24
    350a:	e3 56       	subi	r30, 0x63	; 99
    350c:	f6 4c       	sbci	r31, 0xC6	; 198
    350e:	e0 82       	st	Z, r14
    3510:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    3512:	72 2e       	mov	r7, r18
    3514:	e4 c2       	rjmp	.+1480   	; 0x3ade <ProcessInput+0xffa>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    3516:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3995+0x9>
    351a:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj2.3996+0xb>
    351e:	98 13       	cpse	r25, r24
    3520:	2f c0       	rjmp	.+94     	; 0x3580 <ProcessInput+0xa9c>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3522:	20 91 02 39 	lds	r18, 0x3902	; 0x803902 <actObj1.3995+0x26>
    3526:	30 91 03 39 	lds	r19, 0x3903	; 0x803903 <actObj1.3995+0x27>
    352a:	ff 24       	eor	r15, r15
    352c:	f3 94       	inc	r15
    352e:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3530:	87 2d       	mov	r24, r7
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	fc 01       	movw	r30, r24
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	e3 5e       	subi	r30, 0xE3	; 227
    353c:	f6 4c       	sbci	r31, 0xC6	; 198
    353e:	40 91 f4 38 	lds	r20, 0x38F4	; 0x8038f4 <actObj1.3995+0x18>
    3542:	50 91 f5 38 	lds	r21, 0x38F5	; 0x8038f5 <actObj1.3995+0x19>
    3546:	40 83       	st	Z, r20
    3548:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    354a:	fc 01       	movw	r30, r24
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	e3 5a       	subi	r30, 0xA3	; 163
    3552:	f6 4c       	sbci	r31, 0xC6	; 198
    3554:	20 83       	st	Z, r18
    3556:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	fc 01       	movw	r30, r24
    355e:	e3 56       	subi	r30, 0x63	; 99
    3560:	f6 4c       	sbci	r31, 0xC6	; 198
    3562:	10 82       	st	Z, r1
    3564:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3566:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3995+0x2a>
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3570:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3574:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3995+0xa>
    3578:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    357c:	7f 2c       	mov	r7, r15
    357e:	af c2       	rjmp	.+1374   	; 0x3ade <ProcessInput+0xffa>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3580:	d8 01       	movw	r26, r16
    3582:	8c 91       	ld	r24, X
    3584:	85 37       	cpi	r24, 0x75	; 117
    3586:	99 f4       	brne	.+38     	; 0x35ae <ProcessInput+0xaca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3588:	87 2d       	mov	r24, r7
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	fc 01       	movw	r30, r24
    358e:	ee 0f       	add	r30, r30
    3590:	ff 1f       	adc	r31, r31
    3592:	e3 5e       	subi	r30, 0xE3	; 227
    3594:	f6 4c       	sbci	r31, 0xC6	; 198
    3596:	21 e0       	ldi	r18, 0x01	; 1
    3598:	39 e7       	ldi	r19, 0x79	; 121
    359a:	20 83       	st	Z, r18
    359c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    359e:	fc 01       	movw	r30, r24
    35a0:	ee 0f       	add	r30, r30
    35a2:	ff 1f       	adc	r31, r31
    35a4:	e3 5a       	subi	r30, 0xA3	; 163
    35a6:	f6 4c       	sbci	r31, 0xC6	; 198
    35a8:	2a e1       	ldi	r18, 0x1A	; 26
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	15 c0       	rjmp	.+42     	; 0x35d8 <ProcessInput+0xaf4>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    35ae:	87 36       	cpi	r24, 0x67	; 103
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <ProcessInput+0xad0>
    35b2:	95 c2       	rjmp	.+1322   	; 0x3ade <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35b4:	87 2d       	mov	r24, r7
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	fc 01       	movw	r30, r24
    35ba:	ee 0f       	add	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	e3 5e       	subi	r30, 0xE3	; 227
    35c0:	f6 4c       	sbci	r31, 0xC6	; 198
    35c2:	2f e9       	ldi	r18, 0x9F	; 159
    35c4:	36 e7       	ldi	r19, 0x76	; 118
    35c6:	20 83       	st	Z, r18
    35c8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    35ca:	fc 01       	movw	r30, r24
    35cc:	ee 0f       	add	r30, r30
    35ce:	ff 1f       	adc	r31, r31
    35d0:	e3 5a       	subi	r30, 0xA3	; 163
    35d2:	f6 4c       	sbci	r31, 0xC6	; 198
    35d4:	28 e2       	ldi	r18, 0x28	; 40
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	20 83       	st	Z, r18
    35da:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35dc:	88 0f       	add	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	fc 01       	movw	r30, r24
    35e2:	e3 56       	subi	r30, 0x63	; 99
    35e4:	f6 4c       	sbci	r31, 0xC6	; 198
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	80 83       	st	Z, r24
    35ec:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    35ee:	73 94       	inc	r7
    35f0:	76 c2       	rjmp	.+1260   	; 0x3ade <ProcessInput+0xffa>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    35f2:	6c ed       	ldi	r22, 0xDC	; 220
    35f4:	78 e3       	ldi	r23, 0x38	; 56
    35f6:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    35fa:	f8 01       	movw	r30, r16
    35fc:	80 81       	ld	r24, Z
    35fe:	84 37       	cpi	r24, 0x74	; 116
    3600:	69 f5       	brne	.+90     	; 0x365c <ProcessInput+0xb78>
    3602:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0x8>
    3606:	83 fd       	sbrc	r24, 3
    3608:	4a c0       	rjmp	.+148    	; 0x369e <ProcessInput+0xbba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    360a:	8b e1       	ldi	r24, 0x1B	; 27
    360c:	99 e7       	ldi	r25, 0x79	; 121
    360e:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3612:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3616:	8e e1       	ldi	r24, 0x1E	; 30
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    361e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    362a:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    362e:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3995+0x1a>
    3632:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3636:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3995+0xc>
    363a:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3995+0xd>
    363e:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x4>
    3642:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3646:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    364a:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    364e:	10 92 a1 39 	sts	0x39A1, r1	; 0x8039a1 <reactStr+0x84>
    3652:	10 92 a2 39 	sts	0x39A2, r1	; 0x8039a2 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3656:	e3 e0       	ldi	r30, 0x03	; 3
    3658:	7e 2e       	mov	r7, r30
    365a:	41 c2       	rjmp	.+1154   	; 0x3ade <ProcessInput+0xffa>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    365c:	85 37       	cpi	r24, 0x75	; 117
    365e:	69 f4       	brne	.+26     	; 0x367a <ProcessInput+0xb96>
    3660:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0x8>
    3664:	84 fd       	sbrc	r24, 4
    3666:	1b c0       	rjmp	.+54     	; 0x369e <ProcessInput+0xbba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	99 e7       	ldi	r25, 0x79	; 121
    366c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3670:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3674:	8a e1       	ldi	r24, 0x1A	; 26
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	f9 ca       	rjmp	.-2574   	; 0x2c6c <ProcessInput+0x188>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    367a:	82 37       	cpi	r24, 0x72	; 114
    367c:	69 f4       	brne	.+26     	; 0x3698 <ProcessInput+0xbb4>
    367e:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0x8>
    3682:	85 fd       	sbrc	r24, 5
    3684:	0c c0       	rjmp	.+24     	; 0x369e <ProcessInput+0xbba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3686:	86 ee       	ldi	r24, 0xE6	; 230
    3688:	98 e7       	ldi	r25, 0x78	; 120
    368a:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    368e:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3692:	8b e1       	ldi	r24, 0x1B	; 27
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	ea ca       	rjmp	.-2604   	; 0x2c6c <ProcessInput+0x188>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3698:	87 36       	cpi	r24, 0x67	; 103
    369a:	09 f4       	brne	.+2      	; 0x369e <ProcessInput+0xbba>
    369c:	52 ca       	rjmp	.-2908   	; 0x2b42 <ProcessInput+0x5e>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    369e:	e0 90 fa 38 	lds	r14, 0x38FA	; 0x8038fa <actObj1.3995+0x1e>
    36a2:	f0 90 fb 38 	lds	r15, 0x38FB	; 0x8038fb <actObj1.3995+0x1f>
    36a6:	f1 e0       	ldi	r31, 0x01	; 1
    36a8:	ef 16       	cp	r14, r31
    36aa:	f1 04       	cpc	r15, r1
    36ac:	11 f5       	brne	.+68     	; 0x36f2 <ProcessInput+0xc0e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    36ae:	98 01       	movw	r18, r16
    36b0:	2e 5f       	subi	r18, 0xFE	; 254
    36b2:	3f 4f       	sbci	r19, 0xFF	; 255
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	61 e0       	ldi	r22, 0x01	; 1
    36b8:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3995+0x10>
    36bc:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3995+0x11>
    36c0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <ExtEERead>
                                if (data[2] == '1') {
    36c4:	d8 01       	movw	r26, r16
    36c6:	12 96       	adiw	r26, 0x02	; 2
    36c8:	8c 91       	ld	r24, X
    36ca:	81 33       	cpi	r24, 0x31	; 49
    36cc:	09 f0       	breq	.+2      	; 0x36d0 <ProcessInput+0xbec>
    36ce:	8a cc       	rjmp	.-1772   	; 0x2fe4 <ProcessInput+0x500>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36d0:	85 e2       	ldi	r24, 0x25	; 37
    36d2:	95 e7       	ldi	r25, 0x75	; 117
    36d4:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    36d8:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    36dc:	8b e2       	ldi	r24, 0x2B	; 43
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    36e4:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    36e8:	e0 92 9f 39 	sts	0x399F, r14	; 0x80399f <reactStr+0x82>
    36ec:	f0 92 a0 39 	sts	0x39A0, r15	; 0x8039a0 <reactStr+0x83>
    36f0:	c7 ca       	rjmp	.-2674   	; 0x2c80 <ProcessInput+0x19c>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    36f2:	e1 14       	cp	r14, r1
    36f4:	f1 04       	cpc	r15, r1
    36f6:	09 f4       	brne	.+2      	; 0x36fa <ProcessInput+0xc16>
    36f8:	59 c0       	rjmp	.+178    	; 0x37ac <ProcessInput+0xcc8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36fa:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3995+0x10>
    36fe:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3995+0x11>
    3702:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3706:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    370a:	e0 92 5f 39 	sts	0x395F, r14	; 0x80395f <reactStr+0x42>
    370e:	f0 92 60 39 	sts	0x3960, r15	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3712:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3716:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    371a:	89 e5       	ldi	r24, 0x59	; 89
    371c:	9a e7       	ldi	r25, 0x7A	; 122
    371e:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    3722:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3726:	82 e0       	ldi	r24, 0x02	; 2
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    372e:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x84>
    373a:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    373e:	2d ea       	ldi	r18, 0xAD	; 173
    3740:	38 e7       	ldi	r19, 0x78	; 120
    3742:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x6>
    3746:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    374a:	22 e1       	ldi	r18, 0x12	; 18
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x46>
    3752:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    3756:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x86>
    375a:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    375e:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3995+0x20>
    3762:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3995+0x21>
    3766:	40 97       	sbiw	r24, 0x10	; 16
    3768:	30 f0       	brcs	.+12     	; 0x3776 <ProcessInput+0xc92>
    376a:	8f e0       	ldi	r24, 0x0F	; 15
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	80 93 fc 38 	sts	0x38FC, r24	; 0x8038fc <actObj1.3995+0x20>
    3772:	90 93 fd 38 	sts	0x38FD, r25	; 0x8038fd <actObj1.3995+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3776:	2c e0       	ldi	r18, 0x0C	; 12
    3778:	39 e3       	ldi	r19, 0x39	; 57
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	60 91 fc 38 	lds	r22, 0x38FC	; 0x8038fc <actObj1.3995+0x20>
    3780:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3995+0x12>
    3784:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3995+0x13>
    3788:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    378c:	6c e0       	ldi	r22, 0x0C	; 12
    378e:	79 e3       	ldi	r23, 0x39	; 57
    3790:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3995+0x20>
    3794:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3798:	e0 91 fc 38 	lds	r30, 0x38FC	; 0x8038fc <actObj1.3995+0x20>
    379c:	f0 91 fd 38 	lds	r31, 0x38FD	; 0x8038fd <actObj1.3995+0x21>
    37a0:	e4 5f       	subi	r30, 0xF4	; 244
    37a2:	f6 4c       	sbci	r31, 0xC6	; 198
    37a4:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    37a6:	74 e0       	ldi	r23, 0x04	; 4
    37a8:	77 2e       	mov	r7, r23
    37aa:	99 c1       	rjmp	.+818    	; 0x3ade <ProcessInput+0xffa>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    37ac:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3995+0x7>
    37b0:	0e 94 17 0a 	call	0x142e	; 0x142e <CheckState>
    37b4:	88 23       	and	r24, r24
    37b6:	01 f1       	breq	.+64     	; 0x37f8 <ProcessInput+0xd14>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    37b8:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3995+0x26>
    37bc:	90 91 03 39 	lds	r25, 0x3903	; 0x803903 <actObj1.3995+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37c0:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3995+0x18>
    37c4:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3995+0x19>
    37c8:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    37cc:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    37d0:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    37d4:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    37d8:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    37dc:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    37e0:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3995+0x2a>
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    37ea:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    37ee:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3995+0xa>
    37f2:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
    37f6:	44 ca       	rjmp	.-2936   	; 0x2c80 <ProcessInput+0x19c>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    37f8:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3995+0x24>
    37fc:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3995+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3800:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3995+0x16>
    3804:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3995+0x17>
    3808:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    380c:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3810:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3814:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3818:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    381c:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3820:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3995+0x29>
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    382a:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    382e:	28 ca       	rjmp	.-2992   	; 0x2c80 <ProcessInput+0x19c>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3830:	f8 01       	movw	r30, r16
    3832:	80 81       	ld	r24, Z
    3834:	84 37       	cpi	r24, 0x74	; 116
    3836:	11 f0       	breq	.+4      	; 0x383c <ProcessInput+0xd58>
    3838:	87 36       	cpi	r24, 0x67	; 103
    383a:	19 f4       	brne	.+6      	; 0x3842 <ProcessInput+0xd5e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    383c:	89 e3       	ldi	r24, 0x39	; 57
    383e:	99 e7       	ldi	r25, 0x79	; 121
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <ProcessInput+0xd62>
    3842:	8d e4       	ldi	r24, 0x4D	; 77
    3844:	99 e7       	ldi	r25, 0x79	; 121
    3846:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    384a:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    384e:	84 e1       	ldi	r24, 0x14	; 20
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	0c ca       	rjmp	.-3048   	; 0x2c6c <ProcessInput+0x188>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3854:	81 36       	cpi	r24, 0x61	; 97
    3856:	09 f0       	breq	.+2      	; 0x385a <ProcessInput+0xd76>
    3858:	c5 cb       	rjmp	.-2166   	; 0x2fe4 <ProcessInput+0x500>
            
            //Priest offerings
            if (specialPassed >= 2) {
    385a:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialPassed>
    385e:	82 30       	cpi	r24, 0x02	; 2
    3860:	08 f4       	brcc	.+2      	; 0x3864 <ProcessInput+0xd80>
    3862:	cb c0       	rjmp	.+406    	; 0x39fa <ProcessInput+0xf16>
                if (data[1] > 0) {
    3864:	d8 01       	movw	r26, r16
    3866:	11 96       	adiw	r26, 0x01	; 1
    3868:	2c 91       	ld	r18, X
    386a:	22 23       	and	r18, r18
    386c:	09 f4       	brne	.+2      	; 0x3870 <ProcessInput+0xd8c>
    386e:	b2 c0       	rjmp	.+356    	; 0x39d4 <ProcessInput+0xef0>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3870:	fe 01       	movw	r30, r28
    3872:	31 96       	adiw	r30, 0x01	; 1
    3874:	7f 01       	movw	r14, r30
    3876:	88 e0       	ldi	r24, 0x08	; 8
    3878:	df 01       	movw	r26, r30
    387a:	1d 92       	st	X+, r1
    387c:	8a 95       	dec	r24
    387e:	e9 f7       	brne	.-6      	; 0x387a <ProcessInput+0xd96>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3880:	20 53       	subi	r18, 0x30	; 48
    3882:	f8 01       	movw	r30, r16
    3884:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3886:	32 81       	ldd	r19, Z+2	; 0x02
    3888:	31 53       	subi	r19, 0x31	; 49
    388a:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    388c:	83 81       	ldd	r24, Z+3	; 0x03
    388e:	81 36       	cpi	r24, 0x61	; 97
    3890:	11 f4       	brne	.+4      	; 0x3896 <ProcessInput+0xdb2>
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	08 c0       	rjmp	.+16     	; 0x38a6 <ProcessInput+0xdc2>
                    else if (data[3] == 'e') data[3] = 0;
    3896:	85 36       	cpi	r24, 0x65	; 101
    3898:	11 f4       	brne	.+4      	; 0x389e <ProcessInput+0xdba>
    389a:	13 82       	std	Z+3, r1	; 0x03
    389c:	08 c0       	rjmp	.+16     	; 0x38ae <ProcessInput+0xdca>
                    else if (data[3] == 'f') data[3] = 3;
    389e:	86 36       	cpi	r24, 0x66	; 102
    38a0:	21 f4       	brne	.+8      	; 0x38aa <ProcessInput+0xdc6>
    38a2:	83 e0       	ldi	r24, 0x03	; 3
    38a4:	f8 01       	movw	r30, r16
    38a6:	83 83       	std	Z+3, r24	; 0x03
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <ProcessInput+0xdca>
                    else data[3] = 2;
    38aa:	82 e0       	ldi	r24, 0x02	; 2
    38ac:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    38ae:	21 fd       	sbrc	r18, 1
    38b0:	04 c0       	rjmp	.+8      	; 0x38ba <ProcessInput+0xdd6>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	dc 01       	movw	r26, r24
    38b8:	04 c0       	rjmp	.+8      	; 0x38c2 <ProcessInput+0xdde>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    38ba:	80 e0       	ldi	r24, 0x00	; 0
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	a0 e1       	ldi	r26, 0x10	; 16
    38c0:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    38c2:	20 ff       	sbrs	r18, 0
    38c4:	03 c0       	rjmp	.+6      	; 0x38cc <ProcessInput+0xde8>
    38c6:	9f 5f       	subi	r25, 0xFF	; 255
    38c8:	af 4f       	sbci	r26, 0xFF	; 255
    38ca:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    38cc:	f8 01       	movw	r30, r16
    38ce:	23 81       	ldd	r18, Z+3	; 0x03
    38d0:	21 fd       	sbrc	r18, 1
    38d2:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    38d4:	20 ff       	sbrs	r18, 0
    38d6:	03 c0       	rjmp	.+6      	; 0x38de <ProcessInput+0xdfa>
    38d8:	40 96       	adiw	r24, 0x10	; 16
    38da:	a1 1d       	adc	r26, r1
    38dc:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    38de:	31 ff       	sbrs	r19, 1
    38e0:	03 c0       	rjmp	.+6      	; 0x38e8 <ProcessInput+0xe04>
    38e2:	90 5f       	subi	r25, 0xF0	; 240
    38e4:	af 4f       	sbci	r26, 0xFF	; 255
    38e6:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    38e8:	30 ff       	sbrs	r19, 0
    38ea:	03 c0       	rjmp	.+6      	; 0x38f2 <ProcessInput+0xe0e>
    38ec:	01 96       	adiw	r24, 0x01	; 1
    38ee:	a1 1d       	adc	r26, r1
    38f0:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    38f2:	40 91 3f 38 	lds	r20, 0x383F	; 0x80383f <whoami>
    38f6:	24 e0       	ldi	r18, 0x04	; 4
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	24 1b       	sub	r18, r20
    38fc:	31 09       	sbc	r19, r1
    38fe:	04 c0       	rjmp	.+8      	; 0x3908 <ProcessInput+0xe24>
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	aa 1f       	adc	r26, r26
    3906:	bb 1f       	adc	r27, r27
    3908:	2a 95       	dec	r18
    390a:	d2 f7       	brpl	.-12     	; 0x3900 <ProcessInput+0xe1c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    390c:	28 ec       	ldi	r18, 0xC8	; 200
    390e:	34 e7       	ldi	r19, 0x74	; 116
    3910:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3914:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3918:	20 e2       	ldi	r18, 0x20	; 32
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x42>
    3920:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3924:	21 e0       	ldi	r18, 0x01	; 1
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x82>
    392c:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3930:	4d e9       	ldi	r20, 0x9D	; 157
    3932:	54 e7       	ldi	r21, 0x74	; 116
    3934:	40 93 21 39 	sts	0x3921, r20	; 0x803921 <reactStr+0x4>
    3938:	50 93 22 39 	sts	0x3922, r21	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    393c:	42 e0       	ldi	r20, 0x02	; 2
    393e:	50 e0       	ldi	r21, 0x00	; 0
    3940:	40 93 61 39 	sts	0x3961, r20	; 0x803961 <reactStr+0x44>
    3944:	50 93 62 39 	sts	0x3962, r21	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    3948:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x84>
    394c:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3950:	67 e0       	ldi	r22, 0x07	; 7
    3952:	d6 2e       	mov	r13, r22
                        digit[n] = answer % 16;
    3954:	f7 01       	movw	r30, r14
    3956:	ed 0d       	add	r30, r13
    3958:	f1 1d       	adc	r31, r1
    395a:	28 2f       	mov	r18, r24
    395c:	2f 70       	andi	r18, 0x0F	; 15
    395e:	20 83       	st	Z, r18
                        answer /= 16;
    3960:	54 e0       	ldi	r21, 0x04	; 4
    3962:	b6 95       	lsr	r27
    3964:	a7 95       	ror	r26
    3966:	97 95       	ror	r25
    3968:	87 95       	ror	r24
    396a:	5a 95       	dec	r21
    396c:	d1 f7       	brne	.-12     	; 0x3962 <ProcessInput+0xe7e>
                        if (answer == 0) break;
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	a1 05       	cpc	r26, r1
    3972:	b1 05       	cpc	r27, r1
    3974:	51 f4       	brne	.+20     	; 0x398a <ProcessInput+0xea6>
    3976:	2d e1       	ldi	r18, 0x1D	; 29
    3978:	a2 2e       	mov	r10, r18
    397a:	29 e3       	ldi	r18, 0x39	; 57
    397c:	b2 2e       	mov	r11, r18
    397e:	33 e0       	ldi	r19, 0x03	; 3
    3980:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3982:	88 24       	eor	r8, r8
    3984:	83 94       	inc	r8
    3986:	91 2c       	mov	r9, r1
    3988:	02 c0       	rjmp	.+4      	; 0x398e <ProcessInput+0xeaa>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    398a:	da 94       	dec	r13
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    398c:	e3 cf       	rjmp	.-58     	; 0x3954 <ProcessInput+0xe70>
    398e:	b2 e0       	ldi	r27, 0x02	; 2
    3990:	ab 0e       	add	r10, r27
    3992:	b1 1c       	adc	r11, r1

                    for (; n<8; ++n) {
    3994:	e7 e0       	ldi	r30, 0x07	; 7
    3996:	ed 15       	cp	r30, r13
    3998:	08 f4       	brcc	.+2      	; 0x399c <ProcessInput+0xeb8>
    399a:	9f c0       	rjmp	.+318    	; 0x3ada <ProcessInput+0xff6>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    399c:	73 94       	inc	r7
    399e:	f7 01       	movw	r30, r14
    39a0:	ed 0d       	add	r30, r13
    39a2:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39a4:	80 81       	ld	r24, Z
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	83 57       	subi	r24, 0x73	; 115
    39aa:	9b 48       	sbci	r25, 0x8B	; 139
    39ac:	d5 01       	movw	r26, r10
    39ae:	14 96       	adiw	r26, 0x04	; 4
    39b0:	8d 93       	st	X+, r24
    39b2:	9c 93       	st	X, r25
    39b4:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    39b6:	f5 01       	movw	r30, r10
    39b8:	ec 5b       	subi	r30, 0xBC	; 188
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	80 82       	st	Z, r8
    39be:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    39c0:	e0 5c       	subi	r30, 0xC0	; 192
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 82       	st	Z, r8
    39c6:	91 82       	std	Z+1, r9	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    39c8:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3995+0xa>
    39cc:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    39d0:	d3 94       	inc	r13
    39d2:	dd cf       	rjmp	.-70     	; 0x398e <ProcessInput+0xeaa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39d4:	88 ee       	ldi	r24, 0xE8	; 232
    39d6:	94 e7       	ldi	r25, 0x74	; 116
    39d8:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    39dc:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    39e0:	8d e3       	ldi	r24, 0x3D	; 61
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    39e8:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    39f4:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
    39f8:	6e c0       	rjmp	.+220    	; 0x3ad6 <ProcessInput+0xff2>
    39fa:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	ee 0f       	add	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	e1 52       	subi	r30, 0x21	; 33
    3a06:	f6 4c       	sbci	r31, 0xC6	; 198
    3a08:	6c ed       	ldi	r22, 0xDC	; 220
    3a0a:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3a0c:	81 30       	cpi	r24, 0x01	; 1
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <ProcessInput+0xf2e>
    3a10:	46 c0       	rjmp	.+140    	; 0x3a9e <ProcessInput+0xfba>
                PopulateObject(route[currDepth+1], &actObj1);
    3a12:	80 81       	ld	r24, Z
    3a14:	91 81       	ldd	r25, Z+1	; 0x01
    3a16:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3a1a:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3995+0x7>
    3a1e:	0e 94 17 0a 	call	0x142e	; 0x142e <CheckState>
    3a22:	88 23       	and	r24, r24
    3a24:	01 f1       	breq	.+64     	; 0x3a66 <ProcessInput+0xf82>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3a26:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3995+0x26>
    3a2a:	90 91 03 39 	lds	r25, 0x3903	; 0x803903 <actObj1.3995+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a2e:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3995+0x18>
    3a32:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3995+0x19>
    3a36:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3a3a:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3a3e:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3a42:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3a46:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3a4a:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3a4e:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3995+0x2a>
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3a58:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3a5c:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3995+0xa>
    3a60:	0e 94 0d 0a 	call	0x141a	; 0x141a <UpdateState>
    3a64:	38 c0       	rjmp	.+112    	; 0x3ad6 <ProcessInput+0xff2>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3a66:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3995+0x24>
    3a6a:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3995+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a6e:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3995+0x16>
    3a72:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3995+0x17>
    3a76:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3a7a:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3a7e:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3a82:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3a86:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3a8a:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3a8e:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3995+0x29>
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3a98:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    3a9c:	1c c0       	rjmp	.+56     	; 0x3ad6 <ProcessInput+0xff2>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3a9e:	80 81       	ld	r24, Z
    3aa0:	91 81       	ldd	r25, Z+1	; 0x01
    3aa2:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3aa6:	80 e6       	ldi	r24, 0x60	; 96
    3aa8:	98 e7       	ldi	r25, 0x78	; 120
    3aaa:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3aae:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3ab2:	8d e4       	ldi	r24, 0x4D	; 77
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3aba:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3ac6:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3aca:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <getClock>
    3ace:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <PunishmentTime>
    3ad2:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	78 2e       	mov	r7, r24
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3ada:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ade:	89 e5       	ldi	r24, 0x59	; 89
    3ae0:	9a e7       	ldi	r25, 0x7A	; 122
    3ae2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr>
    3ae6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    3aea:	82 e0       	ldi	r24, 0x02	; 2
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    3af2:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x80>
    3afe:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b02:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput>
    3b06:	88 23       	and	r24, r24
    3b08:	19 f0       	breq	.+6      	; 0x3b10 <ProcessInput+0x102c>
    3b0a:	70 92 1c 39 	sts	0x391C, r7	; 0x80391c <responseList>
    3b0e:	9b c0       	rjmp	.+310    	; 0x3c46 <ProcessInput+0x1162>
    3b10:	87 2d       	mov	r24, r7
    3b12:	12 c0       	rjmp	.+36     	; 0x3b38 <ProcessInput+0x1054>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b14:	89 e5       	ldi	r24, 0x59	; 89
    3b16:	9a e7       	ldi	r25, 0x7A	; 122
    3b18:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr>
    3b1c:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    3b20:	82 e0       	ldi	r24, 0x02	; 2
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    3b28:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x80>
    3b34:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    3b38:	0e 94 39 10 	call	0x2072	; 0x2072 <SetStandardResponse>
    3b3c:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <responseList>
    3b40:	82 c0       	rjmp	.+260    	; 0x3c46 <ProcessInput+0x1162>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b42:	81 ed       	ldi	r24, 0xD1	; 209
    3b44:	99 e7       	ldi	r25, 0x79	; 121
    3b46:	92 cd       	rjmp	.-1244   	; 0x366c <ProcessInput+0xb88>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3b48:	b2 e0       	ldi	r27, 0x02	; 2
    3b4a:	fb 12       	cpse	r15, r27
    3b4c:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3b50:	d8 01       	movw	r26, r16
    3b52:	11 96       	adiw	r26, 0x01	; 1
    3b54:	6c 91       	ld	r22, X
    3b56:	0e 94 2c 11 	call	0x2258	; 0x2258 <CheckLetter>
    3b5a:	88 23       	and	r24, r24
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <ProcessInput+0x107c>
    3b5e:	5b c0       	rjmp	.+182    	; 0x3c16 <ProcessInput+0x1132>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	9c 01       	movw	r18, r24
    3b6a:	20 5c       	subi	r18, 0xC0	; 192
    3b6c:	37 4c       	sbci	r19, 0xC7	; 199
    3b6e:	79 01       	movw	r14, r18
    3b70:	6c ed       	ldi	r22, 0xDC	; 220
    3b72:	78 e3       	ldi	r23, 0x38	; 56
    3b74:	d9 01       	movw	r26, r18
    3b76:	8d 91       	ld	r24, X+
    3b78:	9c 91       	ld	r25, X
    3b7a:	0e 94 b5 10 	call	0x216a	; 0x216a <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b7e:	86 e9       	ldi	r24, 0x96	; 150
    3b80:	97 e7       	ldi	r25, 0x77	; 119
    3b82:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3b86:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3b8a:	80 e1       	ldi	r24, 0x10	; 16
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3b92:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3b9e:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3ba2:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3995+0x1a>
    3ba6:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3baa:	40 91 e8 38 	lds	r20, 0x38E8	; 0x8038e8 <actObj1.3995+0xc>
    3bae:	50 91 e9 38 	lds	r21, 0x38E9	; 0x8038e9 <actObj1.3995+0xd>
    3bb2:	40 93 21 39 	sts	0x3921, r20	; 0x803921 <reactStr+0x4>
    3bb6:	50 93 22 39 	sts	0x3922, r21	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3bba:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x44>
    3bbe:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    3bc2:	10 92 a1 39 	sts	0x39A1, r1	; 0x8039a1 <reactStr+0x84>
    3bc6:	10 92 a2 39 	sts	0x39A2, r1	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bca:	29 e5       	ldi	r18, 0x59	; 89
    3bcc:	3a e7       	ldi	r19, 0x7A	; 122
    3bce:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x6>
    3bd2:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    3bd6:	22 e0       	ldi	r18, 0x02	; 2
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x46>
    3bde:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    3be2:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x86>
    3be6:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bea:	29 e5       	ldi	r18, 0x59	; 89
    3bec:	37 e7       	ldi	r19, 0x77	; 119
    3bee:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x8>
    3bf2:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x9>
    reactStr[1][number]=length;
    3bf6:	2d e3       	ldi	r18, 0x3D	; 61
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	20 93 65 39 	sts	0x3965, r18	; 0x803965 <reactStr+0x48>
    3bfe:	30 93 66 39 	sts	0x3966, r19	; 0x803966 <reactStr+0x49>
    reactStr[2][number]=type;
    3c02:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x88>
    3c06:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c0a:	f7 01       	movw	r30, r14
    3c0c:	10 82       	st	Z, r1
    3c0e:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c10:	f5 e0       	ldi	r31, 0x05	; 5
    3c12:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3c14:	64 cf       	rjmp	.-312    	; 0x3ade <ProcessInput+0xffa>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c16:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    3c1a:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	49 f0       	breq	.+18     	; 0x3c34 <ProcessInput+0x1150>
                        if (CheckLetter(inventory[x], data[1])) {
    3c22:	f8 01       	movw	r30, r16
    3c24:	61 81       	ldd	r22, Z+1	; 0x01
    3c26:	0e 94 2c 11 	call	0x2258	; 0x2258 <CheckLetter>
    3c2a:	88 23       	and	r24, r24
    3c2c:	19 f0       	breq	.+6      	; 0x3c34 <ProcessInput+0x1150>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	98 cf       	rjmp	.-208    	; 0x3b64 <ProcessInput+0x1080>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c34:	81 e6       	ldi	r24, 0x61	; 97
    3c36:	99 e7       	ldi	r25, 0x79	; 121
    3c38:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3c3c:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3c40:	81 e2       	ldi	r24, 0x21	; 33
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	13 c8       	rjmp	.-4058   	; 0x2c6c <ProcessInput+0x188>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3c46:	d8 01       	movw	r26, r16
    3c48:	1c 92       	st	X, r1
    serRxDone = 0;
    3c4a:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <serRxDone>
    RXCNT = 0;    
    3c4e:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	28 96       	adiw	r28, 0x08	; 8
    3c54:	cd bf       	out	0x3d, r28	; 61
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	ff 90       	pop	r15
    3c62:	ef 90       	pop	r14
    3c64:	df 90       	pop	r13
    3c66:	cf 90       	pop	r12
    3c68:	bf 90       	pop	r11
    3c6a:	af 90       	pop	r10
    3c6c:	9f 90       	pop	r9
    3c6e:	8f 90       	pop	r8
    3c70:	7f 90       	pop	r7
    3c72:	6f 90       	pop	r6
    3c74:	5f 90       	pop	r5
    3c76:	08 95       	ret

00003c78 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3c78:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3c7a:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <PunishmentTime>
    3c7e:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <PunishmentTime+0x1>
    3c82:	89 2b       	or	r24, r25
    3c84:	09 f1       	breq	.+66     	; 0x3cc8 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3c86:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <getClock>
        if (PunishmentCount < PunishmentTime)
    3c8a:	20 91 09 39 	lds	r18, 0x3909	; 0x803909 <PunishmentTime>
    3c8e:	30 91 0a 39 	lds	r19, 0x390A	; 0x80390a <PunishmentTime+0x1>
    3c92:	82 17       	cp	r24, r18
    3c94:	93 07       	cpc	r25, r19
    3c96:	08 f4       	brcc	.+2      	; 0x3c9a <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3c98:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3c9a:	ac 01       	movw	r20, r24
    3c9c:	42 1b       	sub	r20, r18
    3c9e:	53 0b       	sbc	r21, r19
    3ca0:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3ca2:	4b 30       	cpi	r20, 0x0B	; 11
    3ca4:	51 05       	cpc	r21, r1
    3ca6:	30 f0       	brcs	.+12     	; 0x3cb4 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3ca8:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <PunishmentTime>
    3cac:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <PunishmentTime+0x1>
            PunishmentCount = 10;
    3cb0:	2a e0       	ldi	r18, 0x0A	; 10
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3cb4:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    3cb8:	81 11       	cpse	r24, r1
    3cba:	06 c0       	rjmp	.+12     	; 0x3cc8 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3cbc:	65 e0       	ldi	r22, 0x05	; 5
    3cbe:	62 1b       	sub	r22, r18
    3cc0:	8a e0       	ldi	r24, 0x0A	; 10
    3cc2:	82 1b       	sub	r24, r18
    3cc4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3cc8:	0e 94 0b 12 	call	0x2416	; 0x2416 <CheckSend>
    3ccc:	88 23       	and	r24, r24
    3cce:	11 f0       	breq	.+4      	; 0x3cd4 <TextAdventure+0x5c>
    3cd0:	c1 e0       	ldi	r28, 0x01	; 1
    3cd2:	18 c0       	rjmp	.+48     	; 0x3d04 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3cd4:	0e 94 79 12 	call	0x24f2	; 0x24f2 <CheckResponse>
    3cd8:	c8 2f       	mov	r28, r24
    3cda:	81 11       	cpse	r24, r1
    3cdc:	f9 cf       	rjmp	.-14     	; 0x3cd0 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3cde:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <PunishmentTime>
    3ce2:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <PunishmentTime+0x1>
    3ce6:	89 2b       	or	r24, r25
    3ce8:	69 f4       	brne	.+26     	; 0x3d04 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3cea:	80 e7       	ldi	r24, 0x70	; 112
    3cec:	98 e3       	ldi	r25, 0x38	; 56
    3cee:	0e 94 c0 12 	call	0x2580	; 0x2580 <CheckInput>
    3cf2:	c8 2f       	mov	r28, r24
    3cf4:	81 11       	cpse	r24, r1
    3cf6:	05 c0       	rjmp	.+10     	; 0x3d02 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3cf8:	80 e7       	ldi	r24, 0x70	; 112
    3cfa:	98 e3       	ldi	r25, 0x38	; 56
    3cfc:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <ProcessInput>
    3d00:	01 c0       	rjmp	.+2      	; 0x3d04 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d02:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d04:	8c 2f       	mov	r24, r28
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d0a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Setup>
    LoadGameState();
    3d0e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LoadGameState>
    SelfTest();
    3d12:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <SelfTest>
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);

            dimValueSum -= (dimValueSum>>8);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3d16:	cf e1       	ldi	r28, 0x1F	; 31
    3d18:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();
    LoadGameState();
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3d1a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GenerateAudio>
    3d1e:	88 23       	and	r24, r24
    3d20:	e1 f3       	breq	.-8      	; 0x3d1a <main+0x10>
            lastButtonState = buttonState;
    3d22:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3d26:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3d2a:	0e 94 bb 08 	call	0x1176	; 0x1176 <CheckButtons>
    3d2e:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3d32:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3d36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3d3a:	82 31       	cpi	r24, 0x12	; 18
    3d3c:	19 f4       	brne	.+6      	; 0x3d44 <main+0x3a>
    3d3e:	0e 94 ac 08 	call	0x1158	; 0x1158 <SelectAuIn>
    3d42:	02 c0       	rjmp	.+4      	; 0x3d48 <main+0x3e>
    3d44:	0e 94 9d 08 	call	0x113a	; 0x113a <SelectTSens>

            GenerateBlinks();
    3d48:	0e 94 2e 0b 	call	0x165c	; 0x165c <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3d4c:	95 df       	rcall	.-214    	; 0x3c78 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3d4e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <MagnetMaze>
            LanyardCode();
    3d52:	0e 94 07 03 	call	0x60e	; 0x60e <LanyardCode>
            BastetDictates();
    3d56:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <BastetDictates>
            MakeFriends();
    3d5a:	0e 94 7a 00 	call	0xf4	; 0xf4 <MakeFriends>

            //Save progress
            SaveGameState();
    3d5e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3d62:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <adcPhot>
    3d66:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    3d6a:	0a 97       	sbiw	r24, 0x0a	; 10
    3d6c:	20 f4       	brcc	.+8      	; 0x3d76 <main+0x6c>
    3d6e:	61 e0       	ldi	r22, 0x01	; 1
    3d70:	84 e7       	ldi	r24, 0x74	; 116
    3d72:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    3d76:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <adcPhot>
    3d7a:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    3d7e:	85 36       	cpi	r24, 0x65	; 101
    3d80:	91 05       	cpc	r25, r1
    3d82:	20 f0       	brcs	.+8      	; 0x3d8c <main+0x82>
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	84 e7       	ldi	r24, 0x74	; 116
    3d88:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <WriteStatusBit>

            dimValueSum -= (dimValueSum>>8);
    3d8c:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3d90:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d94:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3d98:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d9c:	23 2f       	mov	r18, r19
    3d9e:	33 27       	eor	r19, r19
    3da0:	82 1b       	sub	r24, r18
    3da2:	93 0b       	sbc	r25, r19
    3da4:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3da8:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3dac:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3db0:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3db4:	93 95       	inc	r25
    3db6:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dba:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3dbe:	20 91 bf 3a 	lds	r18, 0x3ABF	; 0x803abf <adcPhot>
    3dc2:	30 91 c0 3a 	lds	r19, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    3dc6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3dca:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3dce:	22 0f       	add	r18, r18
    3dd0:	23 2f       	mov	r18, r19
    3dd2:	22 1f       	adc	r18, r18
    3dd4:	33 0b       	sbc	r19, r19
    3dd6:	31 95       	neg	r19
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e2 1b       	sub	r30, r18
    3ddc:	f3 0b       	sbc	r31, r19
    3dde:	e4 5b       	subi	r30, 0xB4	; 180
    3de0:	f1 44       	sbci	r31, 0x41	; 65
    3de2:	20 81       	ld	r18, Z
    3de4:	82 1b       	sub	r24, r18
    3de6:	91 09       	sbc	r25, r1
    3de8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dec:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>8;
    3df0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3df4:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3df8:	90 93 0c 38 	sts	0x380C, r25	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3dfc:	0e 94 8b 0a 	call	0x1516	; 0x1516 <HotSummer>
    3e00:	8c cf       	rjmp	.-232    	; 0x3d1a <main+0x10>

00003e02 <_exit>:
    3e02:	f8 94       	cli

00003e04 <__stop_program>:
    3e04:	ff cf       	rjmp	.-2      	; 0x3e04 <__stop_program>
