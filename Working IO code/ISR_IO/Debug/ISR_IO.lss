
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00803800  00003fbe  00004072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f2e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0000bf2e  00003f2e  00003fe2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e7  00803840  00803840  000040b2  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000040b2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006a68  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002660  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a54  00000000  00000000  0000d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000890  00000000  00000000  00010f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018e1  00000000  00000000  000117c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000391b  00000000  00000000  000130a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000378  00000000  00000000  000169c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
       2:	00 00       	nop
       4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
       a:	00 00       	nop
       c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c6       	rjmp	.+3470   	; 0xda8 <__vector_6>
      1a:	00 00       	nop
      1c:	19 c7       	rjmp	.+3634   	; 0xe50 <__vector_7>
      1e:	00 00       	nop
      20:	a6 c4       	rjmp	.+2380   	; 0x96e <__vector_8>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e4 c4       	rjmp	.+2504   	; 0x9fe <__vector_13>
      36:	00 00       	nop
      38:	15 c5       	rjmp	.+2602   	; 0xa64 <__vector_14>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c6       	rjmp	.+3182   	; 0xcc0 <__vector_20>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c6       	rjmp	.+3262   	; 0xd18 <__vector_22>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	52 c5       	rjmp	.+2724   	; 0xb0a <__vector_25>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b2 c5       	rjmp	.+2916   	; 0xbd2 <__vector_27>
      6e:	00 00       	nop
      70:	0b c6       	rjmp	.+3094   	; 0xc88 <__vector_28>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 0b       	sbc	r18, r20
      7e:	2b 0b       	sbc	r18, r27
      80:	34 0b       	sbc	r19, r20
      82:	2b 0b       	sbc	r18, r27
      84:	34 0b       	sbc	r19, r20
      86:	2b 0b       	sbc	r18, r27
      88:	24 0b       	sbc	r18, r20
      8a:	59 0b       	sbc	r21, r25
      8c:	73 0b       	sbc	r23, r19
      8e:	85 0b       	sbc	r24, r21
      90:	40 0c       	add	r4, r0
      92:	40 0c       	add	r4, r0
      94:	94 0b       	sbc	r25, r20
      96:	a1 0b       	sbc	r26, r17
      98:	df 0b       	sbc	r29, r31
      9a:	06 0c       	add	r0, r6
      9c:	40 0c       	add	r4, r0
      9e:	40 0c       	add	r4, r0
      a0:	40 0c       	add	r4, r0
      a2:	40 0c       	add	r4, r0
      a4:	40 0c       	add	r4, r0
      a6:	40 0c       	add	r4, r0
      a8:	40 0c       	add	r4, r0
      aa:	59 0b       	sbc	r21, r25
      ac:	73 0b       	sbc	r23, r19

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	df e3       	ldi	r29, 0x3F	; 63
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_copy_data>:
      ba:	18 e3       	ldi	r17, 0x38	; 56
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b8 e3       	ldi	r27, 0x38	; 56
      c0:	ee eb       	ldi	r30, 0xBE	; 190
      c2:	ff e3       	ldi	r31, 0x3F	; 63
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a0 34       	cpi	r26, 0x40	; 64
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	2b e3       	ldi	r18, 0x3B	; 59
      d2:	a0 e4       	ldi	r26, 0x40	; 64
      d4:	b8 e3       	ldi	r27, 0x38	; 56
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	a7 32       	cpi	r26, 0x27	; 39
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <main>
      e4:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <chkVolt250>:
#include <friends.h>
#include <main_def.h>
#include <resources.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ea:	28 ed       	ldi	r18, 0xD8	; 216
      ec:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ee:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      f0:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	42 17       	cp	r20, r18
      f8:	53 07       	cpc	r21, r19
      fa:	4c f0       	brlt	.+18     	; 0x10e <chkVolt250+0x24>
      fc:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	b9 01       	movw	r22, r18
     104:	6e 5e       	subi	r22, 0xEE	; 238
     106:	7f 4f       	sbci	r23, 0xFF	; 255
     108:	64 17       	cp	r22, r20
     10a:	75 07       	cpc	r23, r21
     10c:	2c f4       	brge	.+10     	; 0x118 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	29 51       	subi	r18, 0x19	; 25
     112:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
     114:	81 11       	cpse	r24, r1
     116:	ec cf       	rjmp	.-40     	; 0xf0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
     118:	08 95       	ret

0000011a <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
     11e:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <chkTmr.3770>
     128:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends, if true, don't accept any new connections!
    uint8_t foundAll = 1;
     12a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
     132:	81 11       	cpse	r24, r1
     134:	01 c0       	rjmp	.+2      	; 0x138 <MakeFriends+0x1e>
     136:	d0 e0       	ldi	r29, 0x00	; 0
     138:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends, if true, don't accept any new connections!
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     13a:	c8 36       	cpi	r28, 0x68	; 104
     13c:	b9 f7       	brne	.-18     	; 0x12c <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) {
     13e:	dd 23       	and	r29, r29
     140:	59 f0       	breq	.+22     	; 0x158 <MakeFriends+0x3e>
        UpdateState(124);
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
        if (gameNow == FRIENDS) gameNow = TEXT; 
     148:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     14c:	84 30       	cpi	r24, 0x04	; 4
     14e:	09 f0       	breq	.+2      	; 0x152 <MakeFriends+0x38>
     150:	f1 c0       	rjmp	.+482    	; 0x334 <MakeFriends+0x21a>
     152:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
     156:	ee c0       	rjmp	.+476    	; 0x334 <MakeFriends+0x21a>
        return 0;
    }

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     158:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <progress.3768>
     15c:	82 30       	cpi	r24, 0x02	; 2
     15e:	20 f0       	brcs	.+8      	; 0x168 <MakeFriends+0x4e>
        gameNow = FRIENDS; 
     160:	94 e0       	ldi	r25, 0x04	; 4
     162:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <gameNow>
     166:	0d c0       	rjmp	.+26     	; 0x182 <MakeFriends+0x68>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     168:	81 11       	cpse	r24, r1
     16a:	0b c0       	rjmp	.+22     	; 0x182 <MakeFriends+0x68>
     16c:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <gameNow>
     170:	94 30       	cpi	r25, 0x04	; 4
     172:	61 f4       	brne	.+24     	; 0x18c <MakeFriends+0x72>
        gameNow = TEXT; 
     174:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        effect = 0;
     178:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
     17c:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
     180:	05 c0       	rjmp	.+10     	; 0x18c <MakeFriends+0x72>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     182:	90 91 d4 3a 	lds	r25, 0x3AD4	; 0x803ad4 <detHdPh>
     186:	91 11       	cpse	r25, r1
     188:	f1 cf       	rjmp	.-30     	; 0x16c <MakeFriends+0x52>
     18a:	18 c0       	rjmp	.+48     	; 0x1bc <MakeFriends+0xa2>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     18c:	81 11       	cpse	r24, r1
     18e:	16 c0       	rjmp	.+44     	; 0x1bc <MakeFriends+0xa2>
     190:	90 91 d4 3a 	lds	r25, 0x3AD4	; 0x803ad4 <detHdPh>
     194:	91 11       	cpse	r25, r1
     196:	12 c0       	rjmp	.+36     	; 0x1bc <MakeFriends+0xa2>
        setDAC[0] = whoami * 51;
     198:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
     19c:	93 e3       	ldi	r25, 0x33	; 51
     19e:	89 9f       	mul	r24, r25
     1a0:	80 2d       	mov	r24, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	98 e3       	ldi	r25, 0x38	; 56
     1ac:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     1b0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
     1ba:	09 c0       	rjmp	.+18     	; 0x1ce <MakeFriends+0xb4>
    } else {
        if (progress & NEXT){
     1bc:	98 2f       	mov	r25, r24
     1be:	90 7f       	andi	r25, 0xF0	; 240
     1c0:	31 f0       	breq	.+12     	; 0x1ce <MakeFriends+0xb4>
            progress++;
            progress&=0x0f;
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	8f 70       	andi	r24, 0x0F	; 15
     1c6:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <progress.3768>
            chkTmr = 0;
     1ca:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <chkTmr.3770>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     1ce:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
     1d2:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	b9 01       	movw	r22, r18
     1dc:	6a 50       	subi	r22, 0x0A	; 10
     1de:	71 09       	sbc	r23, r1
     1e0:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <progress.3768>
     1e4:	46 17       	cp	r20, r22
     1e6:	57 07       	cpc	r21, r23
     1e8:	5c f0       	brlt	.+22     	; 0x200 <MakeFriends+0xe6>
     1ea:	40 91 d7 3a 	lds	r20, 0x3AD7	; 0x803ad7 <auIn>
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	26 5f       	subi	r18, 0xF6	; 246
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	24 17       	cp	r18, r20
     1f6:	35 07       	cpc	r19, r21
     1f8:	1c f0       	brlt	.+6      	; 0x200 <MakeFriends+0xe6>
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f4       	brcc	.+2      	; 0x200 <MakeFriends+0xe6>
     1fe:	43 c0       	rjmp	.+134    	; 0x286 <MakeFriends+0x16c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     200:	81 11       	cpse	r24, r1
     202:	0b c0       	rjmp	.+22     	; 0x21a <MakeFriends+0x100>
     204:	80 91 d4 3a 	lds	r24, 0x3AD4	; 0x803ad4 <detHdPh>
     208:	81 11       	cpse	r24, r1
     20a:	94 c0       	rjmp	.+296    	; 0x334 <MakeFriends+0x21a>
            if (chkTmr >= 8) {
     20c:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     210:	88 30       	cpi	r24, 0x08	; 8
     212:	08 f4       	brcc	.+2      	; 0x216 <MakeFriends+0xfc>
     214:	8f c0       	rjmp	.+286    	; 0x334 <MakeFriends+0x21a>
                progress |= NEXT;
     216:	80 ef       	ldi	r24, 0xF0	; 240
     218:	63 c0       	rjmp	.+198    	; 0x2e0 <MakeFriends+0x1c6>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	41 f5       	brne	.+80     	; 0x26e <MakeFriends+0x154>
            jackIn = chkVolt250();
     21e:	65 df       	rcall	.-310    	; 0xea <chkVolt250>
     220:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <jackIn.3771>
            if (jackIn) {
     224:	88 23       	and	r24, r24
     226:	79 f1       	breq	.+94     	; 0x286 <MakeFriends+0x16c>
                if (chkTmr >= SHORT_WAIT){
     228:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <chkTmr.3770>
     22c:	98 30       	cpi	r25, 0x08	; 8
     22e:	08 f4       	brcc	.+2      	; 0x232 <MakeFriends+0x118>
     230:	81 c0       	rjmp	.+258    	; 0x334 <MakeFriends+0x21a>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     232:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <whoami>
     236:	91 30       	cpi	r25, 0x01	; 1
     238:	11 f4       	brne	.+4      	; 0x23e <MakeFriends+0x124>
     23a:	83 50       	subi	r24, 0x03	; 3
     23c:	14 c0       	rjmp	.+40     	; 0x266 <MakeFriends+0x14c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     23e:	92 30       	cpi	r25, 0x02	; 2
     240:	31 f4       	brne	.+12     	; 0x24e <MakeFriends+0x134>
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	91 f0       	breq	.+36     	; 0x26a <MakeFriends+0x150>
     246:	85 50       	subi	r24, 0x05	; 5
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	e8 f4       	brcc	.+58     	; 0x286 <MakeFriends+0x16c>
     24c:	0e c0       	rjmp	.+28     	; 0x26a <MakeFriends+0x150>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     24e:	93 30       	cpi	r25, 0x03	; 3
     250:	39 f4       	brne	.+14     	; 0x260 <MakeFriends+0x146>
     252:	9c ef       	ldi	r25, 0xFC	; 252
     254:	98 0f       	add	r25, r24
     256:	92 30       	cpi	r25, 0x02	; 2
     258:	40 f0       	brcs	.+16     	; 0x26a <MakeFriends+0x150>
     25a:	87 30       	cpi	r24, 0x07	; 7
     25c:	a1 f4       	brne	.+40     	; 0x286 <MakeFriends+0x16c>
     25e:	05 c0       	rjmp	.+10     	; 0x26a <MakeFriends+0x150>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     260:	94 30       	cpi	r25, 0x04	; 4
     262:	89 f4       	brne	.+34     	; 0x286 <MakeFriends+0x16c>
     264:	85 50       	subi	r24, 0x05	; 5
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	70 f4       	brcc	.+28     	; 0x286 <MakeFriends+0x16c>
                        progress |= NEXT;
     26a:	81 ef       	ldi	r24, 0xF1	; 241
     26c:	39 c0       	rjmp	.+114    	; 0x2e0 <MakeFriends+0x1c6>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     26e:	82 30       	cpi	r24, 0x02	; 2
     270:	69 f0       	breq	.+26     	; 0x28c <MakeFriends+0x172>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     272:	83 30       	cpi	r24, 0x03	; 3
     274:	c1 f1       	breq	.+112    	; 0x2e6 <MakeFriends+0x1cc>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     276:	84 30       	cpi	r24, 0x04	; 4
     278:	09 f0       	breq	.+2      	; 0x27c <MakeFriends+0x162>
     27a:	5c c0       	rjmp	.+184    	; 0x334 <MakeFriends+0x21a>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     27c:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     280:	80 34       	cpi	r24, 0x40	; 64
     282:	08 f4       	brcc	.+2      	; 0x286 <MakeFriends+0x16c>
     284:	57 c0       	rjmp	.+174    	; 0x334 <MakeFriends+0x21a>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     286:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <progress.3768>
     28a:	54 c0       	rjmp	.+168    	; 0x334 <MakeFriends+0x21a>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     28c:	87 e0       	ldi	r24, 0x07	; 7
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     294:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     298:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     29c:	88 30       	cpi	r24, 0x08	; 8
     29e:	38 f0       	brcs	.+14     	; 0x2ae <MakeFriends+0x194>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	44 e6       	ldi	r20, 0x64	; 100
     2a4:	68 e0       	ldi	r22, 0x08	; 8
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	40 d7       	rcall	.+3712   	; 0x112a <floatAround>
     2aa:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     2ae:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     2b2:	8a 3f       	cpi	r24, 0xFA	; 250
     2b4:	08 f4       	brcc	.+2      	; 0x2b8 <MakeFriends+0x19e>
     2b6:	3e c0       	rjmp	.+124    	; 0x334 <MakeFriends+0x21a>
                candidate = jackIn-whoami;
     2b8:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
     2bc:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <jackIn.3771>
     2c0:	98 1b       	sub	r25, r24
     2c2:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <__data_end>
                if (candidate > whoami) {
     2c6:	89 17       	cp	r24, r25
     2c8:	10 f4       	brcc	.+4      	; 0x2ce <MakeFriends+0x1b4>
                    setDAC[0] = 249;
     2ca:	89 ef       	ldi	r24, 0xF9	; 249
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <MakeFriends+0x1bc>
                } else {
                    setDAC[0] = whoami * 51;
     2ce:	93 e3       	ldi	r25, 0x33	; 51
     2d0:	89 9f       	mul	r24, r25
     2d2:	80 2d       	mov	r24, r0
     2d4:	11 24       	eor	r1, r1
     2d6:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2da:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <progress.3768>
     2de:	80 6f       	ori	r24, 0xF0	; 240
     2e0:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <progress.3768>
     2e4:	27 c0       	rjmp	.+78     	; 0x334 <MakeFriends+0x21a>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2e6:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <chkTmr.3770>
     2ea:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2ec:	18 f1       	brcs	.+70     	; 0x334 <MakeFriends+0x21a>
     2ee:	fd de       	rcall	.-518    	; 0xea <chkVolt250>
     2f0:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <jackIn.3771>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2f4:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <__data_end>
     2f8:	48 2f       	mov	r20, r24
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	20 91 4d 38 	lds	r18, 0x384D	; 0x80384d <whoami>
     300:	29 17       	cp	r18, r25
     302:	08 f4       	brcc	.+2      	; 0x306 <MakeFriends+0x1ec>
     304:	29 2f       	mov	r18, r25
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	2b 5f       	subi	r18, 0xFB	; 251
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	42 17       	cp	r20, r18
     30e:	53 07       	cpc	r21, r19
     310:	09 f0       	breq	.+2      	; 0x314 <MakeFriends+0x1fa>
                    UpdateState(99+candidate);
     312:	b9 cf       	rjmp	.-142    	; 0x286 <MakeFriends+0x16c>
     314:	83 e6       	ldi	r24, 0x63	; 99
     316:	89 0f       	add	r24, r25
     318:	c1 d7       	rcall	.+3970   	; 0x129c <UpdateState>
                 
                    effect = 31;
     31a:	8f e1       	ldi	r24, 0x1F	; 31
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     322:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                    WingBar(candidate, whoami);
     326:	60 91 4d 38 	lds	r22, 0x384D	; 0x80384d <whoami>
     32a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <__data_end>
     32e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <WingBar>
     332:	d3 cf       	rjmp	.-90     	; 0x2da <MakeFriends+0x1c0>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <LanyardCode>:
uint16_t        lanyardLastActive = 0;


// Main game loop
uint8_t LanyardCode(){
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     33c:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	89 f4       	brne	.+34     	; 0x366 <LanyardCode+0x2a>
     344:	6a e0       	ldi	r22, 0x0A	; 10
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <lanyardLastActive>
     34c:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <lanyardLastActive+0x1>
     350:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <idleTimeout>
     354:	88 23       	and	r24, r24
     356:	39 f0       	breq	.+14     	; 0x366 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        gameNow = TEXT;
     358:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        effect = 0;
     35c:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
     360:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
        return 0;
     364:	95 c0       	rjmp	.+298    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
    }

    if (CheckState(LANYARD_COMPLETED))
     366:	8b e7       	ldi	r24, 0x7B	; 123
     368:	ba d7       	rcall	.+3956   	; 0x12de <CheckState>
     36a:	81 11       	cpse	r24, r1
     36c:	91 c0       	rjmp	.+290    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     36e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     372:	88 23       	and	r24, r24
     374:	19 f0       	breq	.+6      	; 0x37c <LanyardCode+0x40>
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	09 f0       	breq	.+2      	; 0x37c <LanyardCode+0x40>
     37a:	8a c0       	rjmp	.+276    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    if (buttonState == 0xff)
     37c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     380:	8f 3f       	cpi	r24, 0xFF	; 255
     382:	09 f4       	brne	.+2      	; 0x386 <LanyardCode+0x4a>
     384:	85 c0       	rjmp	.+266    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    if (buttonState == lastButtonState)
     386:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     38a:	89 17       	cp	r24, r25
     38c:	09 f4       	brne	.+2      	; 0x390 <LanyardCode+0x54>
     38e:	80 c0       	rjmp	.+256    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        return 0;

    lanyardLastActive = getClock();
     390:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <getClock>
     394:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <lanyardLastActive>
     398:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     39c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     3a0:	8f 3f       	cpi	r24, 0xFF	; 255
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <LanyardCode+0x6a>
     3a4:	75 c0       	rjmp	.+234    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
        if ((gameNow != LANYARD) || (lanyardState == LANYARD_GAMEOVER)) {
     3a6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     3aa:	83 30       	cpi	r24, 0x03	; 3
     3ac:	21 f4       	brne	.+8      	; 0x3b6 <LanyardCode+0x7a>
     3ae:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     3b2:	83 30       	cpi	r24, 0x03	; 3
     3b4:	a1 f4       	brne	.+40     	; 0x3de <LanyardCode+0xa2>
            // init Lanyard game
            gameNow         = LANYARD;
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
            lanyardPos      = 0;
     3bc:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <lanyardPos>
            lanyardCnt      = 0;
     3c0:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <lanyardCnt>
            lanyardState    = LANYARD_GOOD;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
            SetHackerLeds(0,0);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 a8 0a 	call	0x1550	; 0x1550 <SetHackerLeds>
            effect = 16;
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     3da:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
        }

        if (buttonState != lanyardCode[lanyardPos]) {
     3de:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <lanyardPos>
     3e2:	e8 2f       	mov	r30, r24
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e2 5c       	subi	r30, 0xC2	; 194
     3e8:	f0 44       	sbci	r31, 0x40	; 64
     3ea:	20 81       	ld	r18, Z
     3ec:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     3f0:	29 17       	cp	r18, r25
     3f2:	41 f0       	breq	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
            if (lanyardPos == 0 ) {
     3f4:	81 11       	cpse	r24, r1
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <LanyardCode+0xc2>
                gameNow = TEXT;
     3f8:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
                return 0;
     3fc:	49 c0       	rjmp	.+146    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
            }
            lanyardState = LANYARD_MISTAKE;
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
        }
        lanyardPos++;
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <lanyardPos>
        lanyardCnt++;            
     40a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <lanyardCnt>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <lanyardCnt>
        WingBar(lanyardCnt,lanyardCnt);
     414:	68 2f       	mov	r22, r24
     416:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <WingBar>
        if (lanyardCnt >= 4) {
     41a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <lanyardCnt>
     41e:	84 30       	cpi	r24, 0x04	; 4
     420:	b8 f1       	brcs	.+110    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
            lanyardCnt = 0;
     422:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <lanyardCnt>
            if (lanyardState == LANYARD_GOOD) {
     426:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	21 f5       	brne	.+72     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
                if (lanyardCnt == 0) {
                    WingBar(0,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <WingBar>
                    iLED[HCKR[G][(lanyardPos>>1)-2]] = dimValue;
     436:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <lanyardPos>
     43a:	e8 2f       	mov	r30, r24
     43c:	e6 95       	lsr	r30
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e4 5a       	subi	r30, 0xA4	; 164
     442:	f0 44       	sbci	r31, 0x40	; 64
     444:	a4 81       	ldd	r26, Z+4	; 0x04
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     44c:	a8 52       	subi	r26, 0x28	; 40
     44e:	b5 4c       	sbci	r27, 0xC5	; 197
     450:	9c 93       	st	X, r25
                    iLED[HCKR[G][(lanyardPos>>1)-1]] = dimValue;
     452:	e5 81       	ldd	r30, Z+5	; 0x05
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     45a:	e8 52       	subi	r30, 0x28	; 40
     45c:	f5 4c       	sbci	r31, 0xC5	; 197
     45e:	90 83       	st	Z, r25
                }
                if (lanyardPos == LANYARD_LEN) {
     460:	8c 30       	cpi	r24, 0x0C	; 12
     462:	b1 f4       	brne	.+44     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
                    UpdateState(LANYARD_COMPLETED);
     464:	8b e7       	ldi	r24, 0x7B	; 123
     466:	1a d7       	rcall	.+3636   	; 0x129c <UpdateState>
                    effect    = 0x42;
     468:	82 e4       	ldi	r24, 0x42	; 66
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     470:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
     474:	0d c0       	rjmp	.+26     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                lanyardState = LANYARD_GAMEOVER;
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                effect  = 0x31;
     47c:	81 e3       	ldi	r24, 0x31	; 49
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     484:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                WingBar(0,0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <WingBar>
            }
        }
    }

    return 0;
}
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	08 95       	ret

00000494 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     494:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <mazeHckrPos>
    mazePos = 0;
     498:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <mazePos>
    mazeCnt = 0;
     49c:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <mazeCnt>
    mazeState = TRUE;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     4a6:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <inverted>
    effect = 16;
     4aa:	80 e1       	ldi	r24, 0x10	; 16
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     4b2:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    SetHackerLeds(0,0);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <SetHackerLeds>
     4be:	08 95       	ret

000004c0 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     4c6:	97 ff       	sbrs	r25, 7
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <showFieldStrength+0x10>
     4ca:	d1 95       	neg	r29
     4cc:	c1 95       	neg	r28
     4ce:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     4d0:	cd 33       	cpi	r28, 0x3D	; 61
     4d2:	d1 05       	cpc	r29, r1
     4d4:	44 f0       	brlt	.+16     	; 0x4e6 <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     4d6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     4da:	81 11       	cpse	r24, r1
     4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <showFieldStrength+0x26>
            initMaze();
     4de:	da df       	rcall	.-76     	; 0x494 <initMaze>
            gameNow = MAZE;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
        }
    }

    if (gameNow == MAZE) {
     4e6:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	09 f5       	brne	.+66     	; 0x530 <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     4ee:	cc 33       	cpi	r28, 0x3C	; 60
     4f0:	d1 05       	cpc	r29, r1
     4f2:	1c f4       	brge	.+6      	; 0x4fa <showFieldStrength+0x3a>
            WingBar(0,0);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	1a c0       	rjmp	.+52     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     4fa:	c8 37       	cpi	r28, 0x78	; 120
     4fc:	d1 05       	cpc	r29, r1
     4fe:	1c f4       	brge	.+6      	; 0x506 <showFieldStrength+0x46>
            WingBar(1,1);
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	14 c0       	rjmp	.+40     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     506:	c6 39       	cpi	r28, 0x96	; 150
     508:	d1 05       	cpc	r29, r1
     50a:	1c f4       	brge	.+6      	; 0x512 <showFieldStrength+0x52>
            WingBar(2,2);
     50c:	62 e0       	ldi	r22, 0x02	; 2
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e c0       	rjmp	.+28     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     512:	c8 3c       	cpi	r28, 0xC8	; 200
     514:	d1 05       	cpc	r29, r1
     516:	1c f4       	brge	.+6      	; 0x51e <showFieldStrength+0x5e>
            WingBar(3,3);
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	08 c0       	rjmp	.+16     	; 0x52e <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     51e:	cc 32       	cpi	r28, 0x2C	; 44
     520:	d1 40       	sbci	r29, 0x01	; 1
     522:	1c f4       	brge	.+6      	; 0x52a <showFieldStrength+0x6a>
            WingBar(4,4);
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	02 c0       	rjmp	.+4      	; 0x52e <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     52a:	65 e0       	ldi	r22, 0x05	; 5
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	d2 d7       	rcall	.+4004   	; 0x14d4 <WingBar>
    }
}
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     53a:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	71 f4       	brne	.+28     	; 0x55e <MagnetMaze+0x28>
     542:	6a e0       	ldi	r22, 0x0A	; 10
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <mazeLastActive>
     54a:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <mazeLastActive+0x1>
     54e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <idleTimeout>
     552:	88 23       	and	r24, r24
     554:	21 f0       	breq	.+8      	; 0x55e <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     556:	9e df       	rcall	.-196    	; 0x494 <initMaze>
        gameNow = TEXT;
     558:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        return 0;
     55c:	e5 c0       	rjmp	.+458    	; 0x728 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     55e:	87 ef       	ldi	r24, 0xF7	; 247
     560:	be d6       	rcall	.+3452   	; 0x12de <CheckState>
     562:	81 11       	cpse	r24, r1
     564:	e1 c0       	rjmp	.+450    	; 0x728 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     566:	8d e7       	ldi	r24, 0x7D	; 125
     568:	ba d6       	rcall	.+3444   	; 0x12de <CheckState>
     56a:	81 11       	cpse	r24, r1
     56c:	dd c0       	rjmp	.+442    	; 0x728 <MagnetMaze+0x1f2>
     56e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     572:	82 30       	cpi	r24, 0x02	; 2
     574:	08 f0       	brcs	.+2      	; 0x578 <MagnetMaze+0x42>
     576:	d8 c0       	rjmp	.+432    	; 0x728 <MagnetMaze+0x1f2>
     578:	80 91 00 3b 	lds	r24, 0x3B00	; 0x803b00 <calHall>
        return 0;

    if (calHall == 0)
     57c:	90 91 01 3b 	lds	r25, 0x3B01	; 0x803b01 <calHall+0x1>
     580:	89 2b       	or	r24, r25
     582:	41 f4       	brne	.+16     	; 0x594 <MagnetMaze+0x5e>
     584:	80 91 cf 3a 	lds	r24, 0x3ACF	; 0x803acf <adcHall>
        calHall = adcHall;
     588:	90 91 d0 3a 	lds	r25, 0x3AD0	; 0x803ad0 <adcHall+0x1>
     58c:	80 93 00 3b 	sts	0x3B00, r24	; 0x803b00 <calHall>
     590:	90 93 01 3b 	sts	0x3B01, r25	; 0x803b01 <calHall+0x1>
     594:	c0 91 cf 3a 	lds	r28, 0x3ACF	; 0x803acf <adcHall>

    int16_t valHall = adcHall - calHall;
     598:	d0 91 d0 3a 	lds	r29, 0x3AD0	; 0x803ad0 <adcHall+0x1>
     59c:	80 91 00 3b 	lds	r24, 0x3B00	; 0x803b00 <calHall>
     5a0:	90 91 01 3b 	lds	r25, 0x3B01	; 0x803b01 <calHall+0x1>
     5a4:	c8 1b       	sub	r28, r24
     5a6:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     5a8:	ce 01       	movw	r24, r28
     5aa:	8a df       	rcall	.-236    	; 0x4c0 <showFieldStrength>
     5ac:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <curHallState>

    switch (curHallState) {
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	89 f0       	breq	.+34     	; 0x5d6 <MagnetMaze+0xa0>
     5b4:	18 f0       	brcs	.+6      	; 0x5bc <MagnetMaze+0x86>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	c1 f0       	breq	.+48     	; 0x5ea <MagnetMaze+0xb4>
     5ba:	1f c0       	rjmp	.+62     	; 0x5fa <MagnetMaze+0xc4>
     5bc:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     5be:	9e ef       	ldi	r25, 0xFE	; 254
     5c0:	d9 07       	cpc	r29, r25
     5c2:	14 f4       	brge	.+4      	; 0x5c8 <MagnetMaze+0x92>
     5c4:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <MagnetMaze+0x9a>
     5c8:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     5ca:	d1 40       	sbci	r29, 0x01	; 1
     5cc:	5c f0       	brlt	.+22     	; 0x5e4 <MagnetMaze+0xae>
     5ce:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     5d0:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <newHallState>
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <MagnetMaze+0xc4>
     5d6:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	d9 07       	cpc	r29, r25
     5dc:	c4 f7       	brge	.-16     	; 0x5ce <MagnetMaze+0x98>
     5de:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5e0:	df 4f       	sbci	r29, 0xFF	; 255
     5e2:	84 f3       	brlt	.-32     	; 0x5c4 <MagnetMaze+0x8e>
     5e4:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <MagnetMaze+0xc4>
     5ea:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     5ec:	9e ef       	ldi	r25, 0xFE	; 254
     5ee:	d9 07       	cpc	r29, r25
     5f0:	4c f3       	brlt	.-46     	; 0x5c4 <MagnetMaze+0x8e>
     5f2:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5f4:	d1 05       	cpc	r29, r1
     5f6:	b4 f3       	brlt	.-20     	; 0x5e4 <MagnetMaze+0xae>
     5f8:	ea cf       	rjmp	.-44     	; 0x5ce <MagnetMaze+0x98>
     5fa:	c0 91 4a bf 	lds	r28, 0xBF4A	; 0x80bf4a <__bss_end+0x8423>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     5fe:	ec 2f       	mov	r30, r28
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <newHallState>
     606:	99 23       	and	r25, r25
     608:	19 f0       	breq	.+6      	; 0x610 <MagnetMaze+0xda>
     60a:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     60e:	01 c0       	rjmp	.+2      	; 0x612 <MagnetMaze+0xdc>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	e8 52       	subi	r30, 0x28	; 40
     614:	f5 4c       	sbci	r31, 0xC5	; 197
     616:	20 83       	st	Z, r18
     618:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     61a:	09 f4       	brne	.+2      	; 0x61e <MagnetMaze+0xe8>
     61c:	85 c0       	rjmp	.+266    	; 0x728 <MagnetMaze+0x1f2>
     61e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     622:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <mazeLastActive>
     626:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <mazeLastActive+0x1>
     62a:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     62e:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <newHallState>
     632:	91 11       	cpse	r25, r1
     634:	08 c0       	rjmp	.+16     	; 0x646 <MagnetMaze+0x110>
     636:	88 23       	and	r24, r24
     638:	31 f0       	breq	.+12     	; 0x646 <MagnetMaze+0x110>
     63a:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	09 f4       	brne	.+2      	; 0x642 <MagnetMaze+0x10c>
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	90 93 58 38 	sts	0x3858, r25	; 0x803858 <inverted>
     646:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <curHallState>

        curHallState = newHallState;
     64a:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     64c:	09 f4       	brne	.+2      	; 0x650 <MagnetMaze+0x11a>
     64e:	6c c0       	rjmp	.+216    	; 0x728 <MagnetMaze+0x1f2>
     650:	8f e9       	ldi	r24, 0x9F	; 159
            effect = 0x19f;
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     658:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
     65c:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
            if (gameNow == TEXT)
     660:	81 11       	cpse	r24, r1
     662:	01 c0       	rjmp	.+2      	; 0x666 <MagnetMaze+0x130>
                initMaze();
     664:	17 df       	rcall	.-466    	; 0x494 <initMaze>
     666:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     668:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
     66c:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     670:	20 91 5d 38 	lds	r18, 0x385D	; 0x80385d <curHallState>
     674:	88 23       	and	r24, r24
     676:	11 f0       	breq	.+4      	; 0x67c <MagnetMaze+0x146>
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	28 27       	eor	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <mazePos>
     682:	e8 2f       	mov	r30, r24
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	e8 58       	subi	r30, 0x88	; 136
     688:	f0 44       	sbci	r31, 0x40	; 64
     68a:	40 81       	ld	r20, Z
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	24 17       	cp	r18, r20
     690:	35 07       	cpc	r19, r21
     692:	91 f4       	brne	.+36     	; 0x6b8 <MagnetMaze+0x182>
     694:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     698:	91 70       	andi	r25, 0x01	; 1
     69a:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     69e:	e0 91 59 bf 	lds	r30, 0xBF59	; 0x80bf59 <__bss_end+0x8432>
                iLED[EYE[R][L]] = 0;
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	e8 52       	subi	r30, 0x28	; 40
     6a6:	f5 4c       	sbci	r31, 0xC5	; 197
     6a8:	10 82       	st	Z, r1
     6aa:	e0 91 58 bf 	lds	r30, 0xBF58	; 0x80bf58 <__bss_end+0x8431>
                iLED[EYE[R][R]] = 0;
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	e8 52       	subi	r30, 0x28	; 40
     6b2:	f5 4c       	sbci	r31, 0xC5	; 197
     6b4:	10 82       	st	Z, r1
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <MagnetMaze+0x186>
     6b8:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     6be:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <mazePos>
     6c2:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <mazeCnt>
            mazeCnt++;            
     6c6:	9f 5f       	subi	r25, 0xFF	; 255
     6c8:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     6ca:	18 f4       	brcc	.+6      	; 0x6d2 <MagnetMaze+0x19c>
     6cc:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     6d0:	2b c0       	rjmp	.+86     	; 0x728 <MagnetMaze+0x1f2>
     6d2:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6d6:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     6da:	91 30       	cpi	r25, 0x01	; 1
     6dc:	e1 f4       	brne	.+56     	; 0x716 <MagnetMaze+0x1e0>
     6de:	90 91 5a 38 	lds	r25, 0x385A	; 0x80385a <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     6e2:	e9 2f       	mov	r30, r25
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	e4 5a       	subi	r30, 0xA4	; 164
     6e8:	f0 44       	sbci	r31, 0x40	; 64
     6ea:	e6 81       	ldd	r30, Z+6	; 0x06
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     6f2:	e8 52       	subi	r30, 0x28	; 40
     6f4:	f5 4c       	sbci	r31, 0xC5	; 197
     6f6:	20 83       	st	Z, r18
     6f8:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     6fa:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     6fe:	82 31       	cpi	r24, 0x12	; 18
     700:	99 f4       	brne	.+38     	; 0x728 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     702:	8d e7       	ldi	r24, 0x7D	; 125
     704:	cb d5       	rcall	.+2966   	; 0x129c <UpdateState>
     706:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	e8 52       	subi	r30, 0x28	; 40
     70c:	f5 4c       	sbci	r31, 0xC5	; 197
     70e:	10 82       	st	Z, r1
                        effect = 0x42;
     710:	82 e4       	ldi	r24, 0x42	; 66
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	05 c0       	rjmp	.+10     	; 0x720 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     716:	be de       	rcall	.-644    	; 0x494 <initMaze>
     718:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
                    gameNow   = TEXT;
     71c:	81 e3       	ldi	r24, 0x31	; 49
                    effect = 0x31;
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
     724:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
     728:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <Setup>:
     730:	f8 94       	cli
    TCB1_CCMP = pitch;
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    auVolume = volume;
    return 1;
}
     732:	88 ed       	ldi	r24, 0xD8	; 216
     734:	84 bf       	out	0x34, r24	; 52
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     73c:	9a e4       	ldi	r25, 0x4A	; 74
     73e:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     742:	9c e7       	ldi	r25, 0x7C	; 124
     744:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     748:	2f e3       	ldi	r18, 0x3F	; 63
     74a:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     74e:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     752:	90 68       	ori	r25, 0x80	; 128
     754:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     758:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     75c:	90 68       	ori	r25, 0x80	; 128
     75e:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     762:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     766:	90 68       	ori	r25, 0x80	; 128
     768:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     76c:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     770:	90 68       	ori	r25, 0x80	; 128
     772:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     776:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     77a:	90 68       	ori	r25, 0x80	; 128
     77c:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     780:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     784:	90 68       	ori	r25, 0x80	; 128
     786:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     78a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     794:	4b e5       	ldi	r20, 0x5B	; 91
     796:	51 e0       	ldi	r21, 0x01	; 1
     798:	40 93 08 08 	sts	0x0808, r20	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     79c:	50 93 09 08 	sts	0x0809, r21	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     7a0:	30 ea       	ldi	r19, 0xA0	; 160
     7a2:	30 93 05 08 	sts	0x0805, r19	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     7a6:	30 ec       	ldi	r19, 0xC0	; 192
     7a8:	30 93 06 08 	sts	0x0806, r19	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     7ac:	33 e0       	ldi	r19, 0x03	; 3
     7ae:	30 93 07 08 	sts	0x0807, r19	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     7b2:	1c ba       	out	0x1c, r1	; 28
     7b4:	1d ba       	out	0x1d, r1	; 29
     7b6:	1f ba       	out	0x1f, r1	; 31
     7b8:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     7bc:	38 e0       	ldi	r19, 0x08	; 8
     7be:	30 93 00 0a 	sts	0x0A00, r19	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7c2:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     7c6:	27 e7       	ldi	r18, 0x77	; 119
     7c8:	20 93 01 0a 	sts	0x0A01, r18	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     7cc:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     7d0:	2b e0       	ldi	r18, 0x0B	; 11
     7d2:	20 93 05 0a 	sts	0x0A05, r18	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     7d6:	20 91 00 0a 	lds	r18, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7da:	21 60       	ori	r18, 0x01	; 1
     7dc:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     7e0:	25 e0       	ldi	r18, 0x05	; 5
     7e2:	20 93 40 0a 	sts	0x0A40, r18	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     7e6:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     7ea:	2f ef       	ldi	r18, 0xFF	; 255
     7ec:	31 e0       	ldi	r19, 0x01	; 1
     7ee:	20 93 4c 0a 	sts	0x0A4C, r18	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     7f2:	30 93 4d 0a 	sts	0x0A4D, r19	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     7f6:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     7fa:	80 93 50 0a 	sts	0x0A50, r24	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     7fe:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     802:	2b e8       	ldi	r18, 0x8B	; 139
     804:	33 e0       	ldi	r19, 0x03	; 3
     806:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     80a:	30 93 5d 0a 	sts	0x0A5D, r19	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     80e:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     812:	2c e0       	ldi	r18, 0x0C	; 12
     814:	20 93 16 08 	sts	0x0816, r18	; 0x800816 <__TEXT_REGION_LENGTH__+0x700816>
     818:	23 ec       	ldi	r18, 0xC3	; 195
     81a:	20 93 13 08 	sts	0x0813, r18	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     81e:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     822:	21 60       	ori	r18, 0x01	; 1
     824:	20 93 15 08 	sts	0x0815, r18	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     828:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     82c:	24 6c       	ori	r18, 0xC4	; 196
     82e:	20 93 15 08 	sts	0x0815, r18	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     832:	22 e1       	ldi	r18, 0x12	; 18
     834:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     838:	20 e2       	ldi	r18, 0x20	; 32
     83a:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     83e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     842:	90 93 00 06 	sts	0x0600, r25	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     846:	24 e4       	ldi	r18, 0x44	; 68
     848:	20 93 02 06 	sts	0x0602, r18	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     84c:	2e e1       	ldi	r18, 0x1E	; 30
     84e:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     852:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     856:	20 91 00 06 	lds	r18, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     85a:	21 60       	ori	r18, 0x01	; 1
     85c:	20 93 00 06 	sts	0x0600, r18	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     860:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     864:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     868:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     86c:	92 e5       	ldi	r25, 0x52	; 82
     86e:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     872:	94 e0       	ldi	r25, 0x04	; 4
     874:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     878:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     87c:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     880:	90 91 40 06 	lds	r25, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     884:	91 60       	ori	r25, 0x01	; 1
     886:	90 93 40 06 	sts	0x0640, r25	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     88a:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     88e:	80 e4       	ldi	r24, 0x40	; 64
     890:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     894:	80 e8       	ldi	r24, 0x80	; 128
     896:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     89a:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     8a4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8a8:	80 fd       	sbrc	r24, 0
     8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <Setup+0x174>
     8ac:	80 e3       	ldi	r24, 0x30	; 48
     8ae:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     8b2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     8b6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8ba:	82 fd       	sbrc	r24, 2
     8bc:	fc cf       	rjmp	.-8      	; 0x8b6 <Setup+0x186>
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	98 e7       	ldi	r25, 0x78	; 120
     8c2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8c6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8ce:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     8d2:	82 96       	adiw	r24, 0x22	; 34
     8d4:	80 93 04 3b 	sts	0x3B04, r24	; 0x803b04 <tmp16bit>
     8d8:	90 93 05 3b 	sts	0x3B05, r25	; 0x803b05 <tmp16bit+0x1>
     8dc:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8e0:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8e4:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     8e8:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     8ec:	28 17       	cp	r18, r24
     8ee:	39 07       	cpc	r19, r25
     8f0:	70 f4       	brcc	.+28     	; 0x90e <Setup+0x1de>
     8f2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8f6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8fa:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     8fe:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     902:	82 1b       	sub	r24, r18
     904:	93 0b       	sbc	r25, r19
     906:	80 93 04 3b 	sts	0x3B04, r24	; 0x803b04 <tmp16bit>
     90a:	90 93 05 3b 	sts	0x3B05, r25	; 0x803b05 <tmp16bit+0x1>
     90e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     912:	83 fd       	sbrc	r24, 3
     914:	fc cf       	rjmp	.-8      	; 0x90e <Setup+0x1de>
     916:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     91a:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     91e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     922:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     938:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     93c:	80 fd       	sbrc	r24, 0
     93e:	fc cf       	rjmp	.-8      	; 0x938 <Setup+0x208>
     940:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     944:	81 60       	ori	r24, 0x01	; 1
     946:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     94a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     94e:	81 60       	ori	r24, 0x01	; 1
     950:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     954:	10 92 87 3a 	sts	0x3A87, r1	; 0x803a87 <serRx>
     958:	87 e8       	ldi	r24, 0x87	; 135
     95a:	9a e3       	ldi	r25, 0x3A	; 58
     95c:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <serTxAddr>
     960:	90 93 ce 3a 	sts	0x3ACE, r25	; 0x803ace <serTxAddr+0x1>
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     96a:	78 94       	sei
     96c:	08 95       	ret

0000096e <__vector_8>:
     96e:	1f 92       	push	r1
     970:	0f 92       	push	r0
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	0f 92       	push	r0
     976:	11 24       	eor	r1, r1
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	af 93       	push	r26
     97e:	bf 93       	push	r27
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
     984:	87 e0       	ldi	r24, 0x07	; 7
     986:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     98a:	84 e4       	ldi	r24, 0x44	; 68
     98c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     990:	ec b3       	in	r30, 0x1c	; 28
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	e8 9f       	mul	r30, r24
     996:	f0 01       	movw	r30, r0
     998:	11 24       	eor	r1, r1
     99a:	e8 52       	subi	r30, 0x28	; 40
     99c:	f5 4c       	sbci	r31, 0xC5	; 197
     99e:	a8 e2       	ldi	r26, 0x28	; 40
     9a0:	ba e0       	ldi	r27, 0x0A	; 10
     9a2:	96 e0       	ldi	r25, 0x06	; 6
     9a4:	81 91       	ld	r24, Z+
     9a6:	8d 93       	st	X+, r24
     9a8:	9a 95       	dec	r25
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__vector_8+0x36>
     9ac:	8b e0       	ldi	r24, 0x0B	; 11
     9ae:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     9b2:	8c b3       	in	r24, 0x1c	; 28
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	58 f4       	brcc	.+22     	; 0x9ce <__vector_8+0x60>
     9b8:	8c b3       	in	r24, 0x1c	; 28
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <__vector_8+0x52>
     9be:	99 0f       	add	r25, r25
     9c0:	8a 95       	dec	r24
     9c2:	ea f7       	brpl	.-6      	; 0x9be <__vector_8+0x50>
     9c4:	99 b9       	out	0x09, r25	; 9
     9c6:	8c b3       	in	r24, 0x1c	; 28
     9c8:	83 95       	inc	r24
     9ca:	8c bb       	out	0x1c, r24	; 28
     9cc:	0a c0       	rjmp	.+20     	; 0x9e2 <__vector_8+0x74>
     9ce:	8c b3       	in	r24, 0x1c	; 28
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__vector_8+0x6e>
     9d4:	2a 9a       	sbi	0x05, 2	; 5
     9d6:	83 95       	inc	r24
     9d8:	8c bb       	out	0x1c, r24	; 28
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <__vector_8+0x74>
     9dc:	2e 9a       	sbi	0x05, 6	; 5
     9de:	88 27       	eor	r24, r24
     9e0:	8c bb       	out	0x1c, r24	; 28
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     9e8:	ff 91       	pop	r31
     9ea:	ef 91       	pop	r30
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_13>:
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	e0 91 cd 3a 	lds	r30, 0x3ACD	; 0x803acd <serTxAddr>
     a14:	f0 91 ce 3a 	lds	r31, 0x3ACE	; 0x803ace <serTxAddr+0x1>
     a18:	80 81       	ld	r24, Z
     a1a:	88 23       	and	r24, r24
     a1c:	91 f0       	breq	.+36     	; 0xa42 <__vector_13+0x44>
     a1e:	80 81       	ld	r24, Z
     a20:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a24:	80 91 cd 3a 	lds	r24, 0x3ACD	; 0x803acd <serTxAddr>
     a28:	90 91 ce 3a 	lds	r25, 0x3ACE	; 0x803ace <serTxAddr+0x1>
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <serTxAddr>
     a32:	90 93 ce 3a 	sts	0x3ACE, r25	; 0x803ace <serTxAddr+0x1>
     a36:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a3a:	80 62       	ori	r24, 0x20	; 32
     a3c:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <__vector_13+0x4e>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
     a48:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_14>:
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	8f 93       	push	r24
     a76:	9f 93       	push	r25
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
     a7c:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     a80:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     a84:	80 81       	ld	r24, Z
     a86:	81 11       	cpse	r24, r1
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <__vector_14+0x36>
     a8a:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     a8e:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     a92:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     a96:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     a9a:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     a9e:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     aa2:	80 81       	ld	r24, Z
     aa4:	88 23       	and	r24, r24
     aa6:	e1 f0       	breq	.+56     	; 0xae0 <__vector_14+0x7c>
     aa8:	20 81       	ld	r18, Z
     aaa:	40 91 ca 3a 	lds	r20, 0x3ACA	; 0x803aca <auVolume>
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	2f 57       	subi	r18, 0x7F	; 127
     ab2:	31 09       	sbc	r19, r1
     ab4:	42 9f       	mul	r20, r18
     ab6:	c0 01       	movw	r24, r0
     ab8:	43 9f       	mul	r20, r19
     aba:	90 0d       	add	r25, r0
     abc:	11 24       	eor	r1, r1
     abe:	89 2f       	mov	r24, r25
     ac0:	99 0f       	add	r25, r25
     ac2:	99 0b       	sbc	r25, r25
     ac4:	80 58       	subi	r24, 0x80	; 128
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     acc:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     ad0:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     ada:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     ade:	06 c0       	rjmp	.+12     	; 0xaec <__vector_14+0x88>
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
     ae6:	80 e8       	ldi	r24, 0x80	; 128
     ae8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	4f 91       	pop	r20
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <__vector_25>:
     b0a:	1f 92       	push	r1
     b0c:	0f 92       	push	r0
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
     b1c:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b20:	88 23       	and	r24, r24
     b22:	29 f0       	breq	.+10     	; 0xb2e <__vector_25+0x24>
     b24:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	80 93 d3 3a 	sts	0x3AD3, r24	; 0x803ad3 <bytesLeftI2C>
     b2e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     b32:	87 ff       	sbrs	r24, 7
     b34:	18 c0       	rjmp	.+48     	; 0xb66 <__vector_25+0x5c>
     b36:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b3a:	88 23       	and	r24, r24
     b3c:	81 f0       	breq	.+32     	; 0xb5e <__vector_25+0x54>
     b3e:	e0 91 c8 3a 	lds	r30, 0x3AC8	; 0x803ac8 <addrDataI2C>
     b42:	f0 91 c9 3a 	lds	r31, 0x3AC9	; 0x803ac9 <addrDataI2C+0x1>
     b46:	cf 01       	movw	r24, r30
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	80 93 c8 3a 	sts	0x3AC8, r24	; 0x803ac8 <addrDataI2C>
     b4e:	90 93 c9 3a 	sts	0x3AC9, r25	; 0x803ac9 <addrDataI2C+0x1>
     b52:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     b56:	80 83       	st	Z, r24
     b58:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     b5c:	26 c0       	rjmp	.+76     	; 0xbaa <__vector_25+0xa0>
     b5e:	84 e0       	ldi	r24, 0x04	; 4
     b60:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     b64:	22 c0       	rjmp	.+68     	; 0xbaa <__vector_25+0xa0>
     b66:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     b6a:	8c 70       	andi	r24, 0x0C	; 12
     b6c:	19 f0       	breq	.+6      	; 0xb74 <__vector_25+0x6a>
     b6e:	10 92 d3 3a 	sts	0x3AD3, r1	; 0x803ad3 <bytesLeftI2C>
     b72:	1b c0       	rjmp	.+54     	; 0xbaa <__vector_25+0xa0>
     b74:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	31 f4       	brne	.+12     	; 0xb88 <__vector_25+0x7e>
     b7c:	e0 91 c8 3a 	lds	r30, 0x3AC8	; 0x803ac8 <addrDataI2C>
     b80:	f0 91 c9 3a 	lds	r31, 0x3AC9	; 0x803ac9 <addrDataI2C+0x1>
     b84:	80 81       	ld	r24, Z
     b86:	09 c0       	rjmp	.+18     	; 0xb9a <__vector_25+0x90>
     b88:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	41 f4       	brne	.+16     	; 0xba0 <__vector_25+0x96>
     b90:	e0 91 c8 3a 	lds	r30, 0x3AC8	; 0x803ac8 <addrDataI2C>
     b94:	f0 91 c9 3a 	lds	r31, 0x3AC9	; 0x803ac9 <addrDataI2C+0x1>
     b98:	81 81       	ldd	r24, Z+1	; 0x01
     b9a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <__vector_25+0xa0>
     ba0:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     baa:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     bae:	87 ff       	sbrs	r24, 7
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <__vector_25+0xb6>
     bb2:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     bb6:	81 11       	cpse	r24, r1
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <__vector_25+0xb6>
     bba:	87 e0       	ldi	r24, 0x07	; 7
     bbc:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	9f 91       	pop	r25
     bc6:	8f 91       	pop	r24
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_27>:
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	8f 93       	push	r24
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
     be2:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <serRxDone>
     be6:	81 11       	cpse	r24, r1
     be8:	44 c0       	rjmp	.+136    	; 0xc72 <__vector_27+0xa0>
     bea:	ed b3       	in	r30, 0x1d	; 29
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     bf2:	e9 57       	subi	r30, 0x79	; 121
     bf4:	f5 4c       	sbci	r31, 0xC5	; 197
     bf6:	80 83       	st	Z, r24
     bf8:	ed b3       	in	r30, 0x1d	; 29
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e9 57       	subi	r30, 0x79	; 121
     bfe:	f5 4c       	sbci	r31, 0xC5	; 197
     c00:	80 81       	ld	r24, Z
     c02:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     c06:	ed b3       	in	r30, 0x1d	; 29
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	e9 57       	subi	r30, 0x79	; 121
     c0c:	f5 4c       	sbci	r31, 0xC5	; 197
     c0e:	80 81       	ld	r24, Z
     c10:	8a 30       	cpi	r24, 0x0A	; 10
     c12:	39 f0       	breq	.+14     	; 0xc22 <__vector_27+0x50>
     c14:	ed b3       	in	r30, 0x1d	; 29
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	e9 57       	subi	r30, 0x79	; 121
     c1a:	f5 4c       	sbci	r31, 0xC5	; 197
     c1c:	80 81       	ld	r24, Z
     c1e:	8d 30       	cpi	r24, 0x0D	; 13
     c20:	49 f4       	brne	.+18     	; 0xc34 <__vector_27+0x62>
     c22:	ed b3       	in	r30, 0x1d	; 29
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	e9 57       	subi	r30, 0x79	; 121
     c28:	f5 4c       	sbci	r31, 0xC5	; 197
     c2a:	10 82       	st	Z, r1
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <serRxDone>
     c32:	1f c0       	rjmp	.+62     	; 0xc72 <__vector_27+0xa0>
     c34:	ed b3       	in	r30, 0x1d	; 29
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	e9 57       	subi	r30, 0x79	; 121
     c3a:	f5 4c       	sbci	r31, 0xC5	; 197
     c3c:	80 81       	ld	r24, Z
     c3e:	88 30       	cpi	r24, 0x08	; 8
     c40:	39 f0       	breq	.+14     	; 0xc50 <__vector_27+0x7e>
     c42:	ed b3       	in	r30, 0x1d	; 29
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	e9 57       	subi	r30, 0x79	; 121
     c48:	f5 4c       	sbci	r31, 0xC5	; 197
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 37       	cpi	r24, 0x7F	; 127
     c4e:	59 f4       	brne	.+22     	; 0xc66 <__vector_27+0x94>
     c50:	8d b3       	in	r24, 0x1d	; 29
     c52:	88 23       	and	r24, r24
     c54:	41 f0       	breq	.+16     	; 0xc66 <__vector_27+0x94>
     c56:	ed b3       	in	r30, 0x1d	; 29
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	e9 57       	subi	r30, 0x79	; 121
     c5c:	f5 4c       	sbci	r31, 0xC5	; 197
     c5e:	10 82       	st	Z, r1
     c60:	8d b3       	in	r24, 0x1d	; 29
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <__vector_27+0x9e>
     c66:	8d b3       	in	r24, 0x1d	; 29
     c68:	80 34       	cpi	r24, 0x40	; 64
     c6a:	18 f4       	brcc	.+6      	; 0xc72 <__vector_27+0xa0>
     c6c:	8d b3       	in	r24, 0x1d	; 29
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	8d bb       	out	0x1d, r24	; 29
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	8f 91       	pop	r24
     c7e:	0f 90       	pop	r0
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	0f 90       	pop	r0
     c84:	1f 90       	pop	r1
     c86:	18 95       	reti

00000c88 <__vector_28>:
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	8f 93       	push	r24
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c9c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     ca6:	e5 e0       	ldi	r30, 0x05	; 5
     ca8:	f8 e0       	ldi	r31, 0x08	; 8
     caa:	80 81       	ld	r24, Z
     cac:	8f 7d       	andi	r24, 0xDF	; 223
     cae:	80 83       	st	Z, r24
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	8f 91       	pop	r24
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_20>:
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <adc0Chg>
     cd2:	81 11       	cpse	r24, r1
     cd4:	12 c0       	rjmp	.+36     	; 0xcfa <__vector_20+0x3a>
     cd6:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     cda:	8e 31       	cpi	r24, 0x1E	; 30
     cdc:	49 f4       	brne	.+18     	; 0xcf0 <__vector_20+0x30>
     cde:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ce2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     ce6:	80 93 02 3b 	sts	0x3B02, r24	; 0x803b02 <adcTemp>
     cea:	90 93 03 3b 	sts	0x3B03, r25	; 0x803b03 <adcTemp+0x1>
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <__vector_20+0x44>
     cf0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     cf4:	80 93 d7 3a 	sts	0x3AD7, r24	; 0x803ad7 <auIn>
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__vector_20+0x44>
     cfa:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <adc0Chg>
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_22>:
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d2a:	81 11       	cpse	r24, r1
     d2c:	0a c0       	rjmp	.+20     	; 0xd42 <__vector_22+0x2a>
     d2e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d32:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d36:	80 93 d1 3a 	sts	0x3AD1, r24	; 0x803ad1 <adcPhot>
     d3a:	90 93 d2 3a 	sts	0x3AD2, r25	; 0x803ad2 <adcPhot+0x1>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	10 c0       	rjmp	.+32     	; 0xd62 <__vector_22+0x4a>
     d42:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__vector_22+0x50>
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     d50:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d54:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d58:	80 93 cf 3a 	sts	0x3ACF, r24	; 0x803acf <adcHall>
     d5c:	90 93 d0 3a 	sts	0x3AD0, r25	; 0x803ad0 <adcHall+0x1>
     d60:	84 e0       	ldi	r24, 0x04	; 4
     d62:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__vector_22+0x70>
     d68:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d6c:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d70:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <adcBtns>
     d74:	90 93 cc 3a 	sts	0x3ACC, r25	; 0x803acc <adcBtns+0x1>
     d78:	8f b3       	in	r24, 0x1f	; 31
     d7a:	8f 30       	cpi	r24, 0x0F	; 15
     d7c:	29 f4       	brne	.+10     	; 0xd88 <__vector_22+0x70>
     d7e:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d82:	88 e0       	ldi	r24, 0x08	; 8
     d84:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d88:	8f b3       	in	r24, 0x1f	; 31
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	8f 70       	andi	r24, 0x0F	; 15
     d90:	99 27       	eor	r25, r25
     d92:	8f bb       	out	0x1f, r24	; 31
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__vector_6>:
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dbe:	81 ff       	sbrs	r24, 1
     dc0:	36 c0       	rjmp	.+108    	; 0xe2e <__vector_6+0x86>
     dc2:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
     dc6:	8f 3f       	cpi	r24, 0xFF	; 255
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <__vector_6+0x2c>
     dca:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <buttonMark>
     dd4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     dd8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     ddc:	82 96       	adiw	r24, 0x22	; 34
     dde:	80 93 04 3b 	sts	0x3B04, r24	; 0x803b04 <tmp16bit>
     de2:	90 93 05 3b 	sts	0x3B05, r25	; 0x803b05 <tmp16bit+0x1>
     de6:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     dea:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     dee:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     df2:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	58 f4       	brcc	.+22     	; 0xe12 <__vector_6+0x6a>
     dfc:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     e00:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     e04:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     e08:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     e0c:	82 1b       	sub	r24, r18
     e0e:	93 0b       	sbc	r25, r19
     e10:	e6 cf       	rjmp	.-52     	; 0xdde <__vector_6+0x36>
     e12:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     e16:	83 fd       	sbrc	r24, 3
     e18:	fc cf       	rjmp	.-8      	; 0xe12 <__vector_6+0x6a>
     e1a:	80 91 04 3b 	lds	r24, 0x3B04	; 0x803b04 <tmp16bit>
     e1e:	90 91 05 3b 	lds	r25, 0x3B05	; 0x803b05 <tmp16bit+0x1>
     e22:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     e26:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <__vector_6+0x92>
     e2e:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <minuteMark>
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <minuteMark>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_7>:
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     e64:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <fastTicker>
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <fastTicker>
     e6e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <I2C_read_bytes>:
     e80:	0f 93       	push	r16
     e82:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     e86:	83 70       	andi	r24, 0x03	; 3
     e88:	11 f4       	brne	.+4      	; 0xe8e <I2C_read_bytes+0xe>
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	1d c0       	rjmp	.+58     	; 0xec8 <I2C_read_bytes+0x48>
     e8e:	60 93 c8 3a 	sts	0x3AC8, r22	; 0x803ac8 <addrDataI2C>
     e92:	70 93 c9 3a 	sts	0x3AC9, r23	; 0x803ac9 <addrDataI2C+0x1>
     e96:	67 2b       	or	r22, r23
     e98:	c1 f3       	breq	.-16     	; 0xe8a <I2C_read_bytes+0xa>
     e9a:	80 ea       	ldi	r24, 0xA0	; 160
     e9c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     ea0:	4f 5f       	subi	r20, 0xFF	; 255
     ea2:	40 93 d3 3a 	sts	0x3AD3, r20	; 0x803ad3 <bytesLeftI2C>
     ea6:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     eaa:	81 11       	cpse	r24, r1
     eac:	fc cf       	rjmp	.-8      	; 0xea6 <I2C_read_bytes+0x26>
     eae:	20 93 c8 3a 	sts	0x3AC8, r18	; 0x803ac8 <addrDataI2C>
     eb2:	30 93 c9 3a 	sts	0x3AC9, r19	; 0x803ac9 <addrDataI2C+0x1>
     eb6:	23 2b       	or	r18, r19
     eb8:	41 f3       	breq	.-48     	; 0xe8a <I2C_read_bytes+0xa>
     eba:	0f 5f       	subi	r16, 0xFF	; 255
     ebc:	00 93 d3 3a 	sts	0x3AD3, r16	; 0x803ad3 <bytesLeftI2C>
     ec0:	80 91 d3 3a 	lds	r24, 0x3AD3	; 0x803ad3 <bytesLeftI2C>
     ec4:	81 11       	cpse	r24, r1
     ec6:	fc cf       	rjmp	.-8      	; 0xec0 <I2C_read_bytes+0x40>
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <EERead>:
     ecc:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     ed0:	91 fd       	sbrc	r25, 1
     ed2:	fc cf       	rjmp	.-8      	; 0xecc <EERead>
     ed4:	fb 01       	movw	r30, r22
     ed6:	48 0f       	add	r20, r24
     ed8:	84 17       	cp	r24, r20
     eda:	39 f0       	breq	.+14     	; 0xeea <EERead+0x1e>
     edc:	a8 2f       	mov	r26, r24
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	bc 5e       	subi	r27, 0xEC	; 236
     ee2:	9c 91       	ld	r25, X
     ee4:	91 93       	st	Z+, r25
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	f7 cf       	rjmp	.-18     	; 0xed8 <EERead+0xc>
     eea:	08 95       	ret

00000eec <EEWrite>:
     eec:	9d e9       	ldi	r25, 0x9D	; 157
     eee:	24 e0       	ldi	r18, 0x04	; 4
     ef0:	33 e0       	ldi	r19, 0x03	; 3
     ef2:	44 23       	and	r20, r20
     ef4:	09 f1       	breq	.+66     	; 0xf38 <EEWrite+0x4c>
     ef6:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     efa:	51 fd       	sbrc	r21, 1
     efc:	fc cf       	rjmp	.-8      	; 0xef6 <EEWrite+0xa>
     efe:	94 bf       	out	0x34, r25	; 52
     f00:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     f04:	e8 2f       	mov	r30, r24
     f06:	58 2f       	mov	r21, r24
     f08:	5f 71       	andi	r21, 0x1F	; 31
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	db 01       	movw	r26, r22
     f12:	11 97       	sbiw	r26, 0x01	; 1
     f14:	ac 91       	ld	r26, X
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	fc 5e       	subi	r31, 0xEC	; 236
     f1a:	a0 83       	st	Z, r26
     f1c:	41 50       	subi	r20, 0x01	; 1
     f1e:	19 f0       	breq	.+6      	; 0xf26 <EEWrite+0x3a>
     f20:	e8 2f       	mov	r30, r24
     f22:	5f 31       	cpi	r21, 0x1F	; 31
     f24:	81 f7       	brne	.-32     	; 0xf06 <EEWrite+0x1a>
     f26:	94 bf       	out	0x34, r25	; 52
     f28:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     f2c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     f30:	52 ff       	sbrs	r21, 2
     f32:	df cf       	rjmp	.-66     	; 0xef2 <EEWrite+0x6>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	08 95       	ret

00000f3c <DecryptData>:
     f3c:	f9 01       	movw	r30, r18
     f3e:	9c 01       	movw	r18, r24
     f40:	2e 1b       	sub	r18, r30
     f42:	3f 0b       	sbc	r19, r31
     f44:	88 e0       	ldi	r24, 0x08	; 8
     f46:	48 9f       	mul	r20, r24
     f48:	a0 01       	movw	r20, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	48 59       	subi	r20, 0x98	; 152
     f4e:	50 44       	sbci	r21, 0x40	; 64
     f50:	66 23       	and	r22, r22
     f52:	69 f0       	breq	.+26     	; 0xf6e <DecryptData+0x32>
     f54:	df 01       	movw	r26, r30
     f56:	a2 0f       	add	r26, r18
     f58:	b3 1f       	adc	r27, r19
     f5a:	a7 70       	andi	r26, 0x07	; 7
     f5c:	bb 27       	eor	r27, r27
     f5e:	a4 0f       	add	r26, r20
     f60:	b5 1f       	adc	r27, r21
     f62:	80 81       	ld	r24, Z
     f64:	9c 91       	ld	r25, X
     f66:	98 27       	eor	r25, r24
     f68:	91 93       	st	Z+, r25
     f6a:	61 50       	subi	r22, 0x01	; 1
     f6c:	f1 cf       	rjmp	.-30     	; 0xf50 <DecryptData+0x14>
     f6e:	08 95       	ret

00000f70 <ExtEERead>:
     f70:	a2 e0       	ldi	r26, 0x02	; 2
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ee eb       	ldi	r30, 0xBE	; 190
     f76:	f7 e0       	ldi	r31, 0x07	; 7
     f78:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__prologue_saves__+0x10>
     f7c:	d6 2e       	mov	r13, r22
     f7e:	c4 2e       	mov	r12, r20
     f80:	59 01       	movw	r10, r18
     f82:	7c 01       	movw	r14, r24
     f84:	e8 94       	clt
     f86:	f7 f8       	bld	r15, 7
     f88:	f9 82       	std	Y+1, r15	; 0x01
     f8a:	ea 82       	std	Y+2, r14	; 0x02
     f8c:	06 2f       	mov	r16, r22
     f8e:	42 e0       	ldi	r20, 0x02	; 2
     f90:	be 01       	movw	r22, r28
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	80 e5       	ldi	r24, 0x50	; 80
     f98:	73 df       	rcall	.-282    	; 0xe80 <I2C_read_bytes>
     f9a:	18 2f       	mov	r17, r24
     f9c:	81 11       	cpse	r24, r1
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <ExtEERead+0x3a>
     fa0:	95 01       	movw	r18, r10
     fa2:	4c 2d       	mov	r20, r12
     fa4:	6d 2d       	mov	r22, r13
     fa6:	c7 01       	movw	r24, r14
     fa8:	c9 df       	rcall	.-110    	; 0xf3c <DecryptData>
     faa:	81 2f       	mov	r24, r17
     fac:	22 96       	adiw	r28, 0x02	; 2
     fae:	ea e0       	ldi	r30, 0x0A	; 10
     fb0:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__epilogue_restores__+0x10>

00000fb4 <SerSend>:
     fb4:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
     fb8:	22 23       	and	r18, r18
     fba:	59 f0       	breq	.+22     	; 0xfd2 <SerSend+0x1e>
     fbc:	80 93 cd 3a 	sts	0x3ACD, r24	; 0x803acd <serTxAddr>
     fc0:	90 93 ce 3a 	sts	0x3ACE, r25	; 0x803ace <serTxAddr+0x1>
     fc4:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	08 95       	ret
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	08 95       	ret

00000fd6 <SerSpeed>:
     fd6:	28 2f       	mov	r18, r24
     fd8:	81 11       	cpse	r24, r1
     fda:	01 c0       	rjmp	.+2      	; 0xfde <SerSpeed+0x8>
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	82 1b       	sub	r24, r18
     fe4:	91 09       	sbc	r25, r1
     fe6:	98 2f       	mov	r25, r24
     fe8:	88 27       	eor	r24, r24
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     ff2:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     ff6:	08 95       	ret

00000ff8 <SelectTSens>:
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
     ffe:	82 e1       	ldi	r24, 0x12	; 18
    1000:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1004:	e0 e0       	ldi	r30, 0x00	; 0
    1006:	f6 e0       	ldi	r31, 0x06	; 6
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	80 83       	st	Z, r24
    100e:	8e e1       	ldi	r24, 0x1E	; 30
    1010:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1014:	08 95       	ret

00001016 <SelectAuIn>:
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <adc0Chg>
    101c:	82 e2       	ldi	r24, 0x22	; 34
    101e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1022:	e0 e0       	ldi	r30, 0x00	; 0
    1024:	f6 e0       	ldi	r31, 0x06	; 6
    1026:	80 81       	ld	r24, Z
    1028:	84 60       	ori	r24, 0x04	; 4
    102a:	80 83       	st	Z, r24
    102c:	87 e0       	ldi	r24, 0x07	; 7
    102e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1032:	08 95       	ret

00001034 <CheckButtons>:
    1034:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <adcBtns>
    1038:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <adcBtns+0x1>
    103c:	24 e0       	ldi	r18, 0x04	; 4
    103e:	96 95       	lsr	r25
    1040:	87 95       	ror	r24
    1042:	2a 95       	dec	r18
    1044:	e1 f7       	brne	.-8      	; 0x103e <CheckButtons+0xa>
    1046:	99 27       	eor	r25, r25
    1048:	80 36       	cpi	r24, 0x60	; 96
    104a:	91 05       	cpc	r25, r1
    104c:	40 f4       	brcc	.+16     	; 0x105e <CheckButtons+0x2a>
    104e:	8f 34       	cpi	r24, 0x4F	; 79
    1050:	91 05       	cpc	r25, r1
    1052:	88 f4       	brcc	.+34     	; 0x1076 <CheckButtons+0x42>
    1054:	c0 97       	sbiw	r24, 0x30	; 48
    1056:	09 97       	sbiw	r24, 0x09	; 9
    1058:	90 f4       	brcc	.+36     	; 0x107e <CheckButtons+0x4a>
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <CheckButtons+0x4c>
    105e:	85 37       	cpi	r24, 0x75	; 117
    1060:	91 05       	cpc	r25, r1
    1062:	68 f0       	brcs	.+26     	; 0x107e <CheckButtons+0x4a>
    1064:	8e 38       	cpi	r24, 0x8E	; 142
    1066:	91 05       	cpc	r25, r1
    1068:	40 f0       	brcs	.+16     	; 0x107a <CheckButtons+0x46>
    106a:	8e 59       	subi	r24, 0x9E	; 158
    106c:	91 09       	sbc	r25, r1
    106e:	81 97       	sbiw	r24, 0x21	; 33
    1070:	30 f4       	brcc	.+12     	; 0x107e <CheckButtons+0x4a>
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <CheckButtons+0x4c>
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	03 c0       	rjmp	.+6      	; 0x1080 <CheckButtons+0x4c>
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <CheckButtons+0x4c>
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <previousValue.3902>
    1084:	98 17       	cp	r25, r24
    1086:	19 f0       	breq	.+6      	; 0x108e <CheckButtons+0x5a>
    1088:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <previousValue.3902>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	08 95       	ret

00001090 <lfsr>:
    1090:	80 91 6c 38 	lds	r24, 0x386C	; 0x80386c <lfsrSeed>
    1094:	90 91 6d 38 	lds	r25, 0x386D	; 0x80386d <lfsrSeed+0x1>
    1098:	9c 01       	movw	r18, r24
    109a:	32 2f       	mov	r19, r18
    109c:	22 27       	eor	r18, r18
    109e:	32 95       	swap	r19
    10a0:	33 0f       	add	r19, r19
    10a2:	30 7e       	andi	r19, 0xE0	; 224
    10a4:	82 27       	eor	r24, r18
    10a6:	93 27       	eor	r25, r19
    10a8:	9c 01       	movw	r18, r24
    10aa:	23 2f       	mov	r18, r19
    10ac:	33 27       	eor	r19, r19
    10ae:	26 95       	lsr	r18
    10b0:	82 27       	eor	r24, r18
    10b2:	93 27       	eor	r25, r19
    10b4:	9c 01       	movw	r18, r24
    10b6:	36 95       	lsr	r19
    10b8:	32 2f       	mov	r19, r18
    10ba:	22 27       	eor	r18, r18
    10bc:	37 95       	ror	r19
    10be:	27 95       	ror	r18
    10c0:	82 27       	eor	r24, r18
    10c2:	93 27       	eor	r25, r19
    10c4:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <lfsrSeed>
    10c8:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <lfsrSeed+0x1>
    10cc:	08 95       	ret

000010ce <floatSpeed>:
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e6       	ldi	r30, 0x6D	; 109
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__prologue_saves__+0x16>
    10da:	7b 01       	movw	r14, r22
    10dc:	8a 01       	movw	r16, r20
    10de:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    10e2:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    10e6:	e8 2f       	mov	r30, r24
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	e7 70       	andi	r30, 0x07	; 7
    10ee:	ff 27       	eor	r31, r31
    10f0:	eb 5c       	subi	r30, 0xCB	; 203
    10f2:	f7 4c       	sbci	r31, 0xC7	; 199
    10f4:	d0 80       	ld	r13, Z
    10f6:	cc df       	rcall	.-104    	; 0x1090 <lfsr>
    10f8:	8d 21       	and	r24, r13
    10fa:	c8 0f       	add	r28, r24
    10fc:	d1 1d       	adc	r29, r1
    10fe:	c8 df       	rcall	.-112    	; 0x1090 <lfsr>
    1100:	8d 21       	and	r24, r13
    1102:	c8 1b       	sub	r28, r24
    1104:	d1 09       	sbc	r29, r1
    1106:	0c 17       	cp	r16, r28
    1108:	1d 07       	cpc	r17, r29
    110a:	08 f4       	brcc	.+2      	; 0x110e <floatSpeed+0x40>
    110c:	e8 01       	movw	r28, r16
    110e:	c7 01       	movw	r24, r14
    1110:	ec 16       	cp	r14, r28
    1112:	fd 06       	cpc	r15, r29
    1114:	08 f4       	brcc	.+2      	; 0x1118 <floatSpeed+0x4a>
    1116:	ce 01       	movw	r24, r28
    1118:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    111c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	e7 e0       	ldi	r30, 0x07	; 7
    1126:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <__epilogue_restores__+0x16>

0000112a <floatAround>:
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	c8 2f       	mov	r28, r24
    1134:	d4 2f       	mov	r29, r20
    1136:	02 2f       	mov	r16, r18
    1138:	e6 2f       	mov	r30, r22
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	31 97       	sbiw	r30, 0x01	; 1
    113e:	e7 70       	andi	r30, 0x07	; 7
    1140:	ff 27       	eor	r31, r31
    1142:	eb 5c       	subi	r30, 0xCB	; 203
    1144:	f7 4c       	sbci	r31, 0xC7	; 199
    1146:	10 81       	ld	r17, Z
    1148:	a3 df       	rcall	.-186    	; 0x1090 <lfsr>
    114a:	81 23       	and	r24, r17
    114c:	c8 0f       	add	r28, r24
    114e:	a0 df       	rcall	.-192    	; 0x1090 <lfsr>
    1150:	81 23       	and	r24, r17
    1152:	c8 1b       	sub	r28, r24
    1154:	8c 2f       	mov	r24, r28
    1156:	00 23       	and	r16, r16
    1158:	41 f0       	breq	.+16     	; 0x116a <floatAround+0x40>
    115a:	9c 2f       	mov	r25, r28
    115c:	0c 17       	cp	r16, r28
    115e:	08 f4       	brcc	.+2      	; 0x1162 <floatAround+0x38>
    1160:	90 2f       	mov	r25, r16
    1162:	8d 2f       	mov	r24, r29
    1164:	d9 17       	cp	r29, r25
    1166:	08 f4       	brcc	.+2      	; 0x116a <floatAround+0x40>
    1168:	89 2f       	mov	r24, r25
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	8d 17       	cp	r24, r29
    1170:	10 f0       	brcs	.+4      	; 0x1176 <floatAround+0x4c>
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	2d 2f       	mov	r18, r29
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	24 23       	and	r18, r20
    117c:	35 23       	and	r19, r21
    117e:	23 2b       	or	r18, r19
    1180:	09 f0       	breq	.+2      	; 0x1184 <floatAround+0x5a>
    1182:	8d 2f       	mov	r24, r29
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	08 95       	ret

0000118e <SaveGameState>:
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	64 97       	sbiw	r28, 0x14	; 20
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	44 e1       	ldi	r20, 0x14	; 20
    11a8:	be 01       	movw	r22, r28
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	8d de       	rcall	.-742    	; 0xecc <EERead>
    11b2:	83 e7       	ldi	r24, 0x73	; 115
    11b4:	c8 2e       	mov	r12, r24
    11b6:	8a e3       	ldi	r24, 0x3A	; 58
    11b8:	d8 2e       	mov	r13, r24
    11ba:	8e 01       	movw	r16, r28
    11bc:	0f 5f       	subi	r16, 0xFF	; 255
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	f1 2c       	mov	r15, r1
    11c2:	f8 01       	movw	r30, r16
    11c4:	81 91       	ld	r24, Z+
    11c6:	8f 01       	movw	r16, r30
    11c8:	f6 01       	movw	r30, r12
    11ca:	90 81       	ld	r25, Z
    11cc:	98 13       	cpse	r25, r24
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <SaveGameState+0x52>
    11d0:	f3 94       	inc	r15
    11d2:	ff ef       	ldi	r31, 0xFF	; 255
    11d4:	cf 1a       	sub	r12, r31
    11d6:	df 0a       	sbc	r13, r31
    11d8:	80 e1       	ldi	r24, 0x10	; 16
    11da:	f8 12       	cpse	r15, r24
    11dc:	f2 cf       	rjmp	.-28     	; 0x11c2 <SaveGameState+0x34>
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <SaveGameState+0x62>
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	b6 01       	movw	r22, r12
    11e4:	8f 2d       	mov	r24, r15
    11e6:	82 de       	rcall	.-764    	; 0xeec <EEWrite>
    11e8:	88 23       	and	r24, r24
    11ea:	91 f3       	breq	.-28     	; 0x11d0 <SaveGameState+0x42>
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	36 c0       	rjmp	.+108    	; 0x125c <SaveGameState+0xce>
    11f0:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <inventory>
    11f4:	30 91 4f 38 	lds	r19, 0x384F	; 0x80384f <inventory+0x1>
    11f8:	30 93 83 3a 	sts	0x3A83, r19	; 0x803a83 <gameState+0x10>
    11fc:	20 93 84 3a 	sts	0x3A84, r18	; 0x803a84 <gameState+0x11>
    1200:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    1204:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    1208:	90 93 85 3a 	sts	0x3A85, r25	; 0x803a85 <gameState+0x12>
    120c:	80 93 86 3a 	sts	0x3A86, r24	; 0x803a86 <gameState+0x13>
    1210:	89 89       	ldd	r24, Y+17	; 0x11
    1212:	9a 89       	ldd	r25, Y+18	; 0x12
    1214:	98 27       	eor	r25, r24
    1216:	89 27       	eor	r24, r25
    1218:	98 27       	eor	r25, r24
    121a:	28 17       	cp	r18, r24
    121c:	39 07       	cpc	r19, r25
    121e:	69 f4       	brne	.+26     	; 0x123a <SaveGameState+0xac>
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	98 27       	eor	r25, r24
    1226:	89 27       	eor	r24, r25
    1228:	98 27       	eor	r25, r24
    122a:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <inventory+0x2>
    122e:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <inventory+0x3>
    1232:	28 17       	cp	r18, r24
    1234:	39 07       	cpc	r19, r25
    1236:	49 f4       	brne	.+18     	; 0x124a <SaveGameState+0xbc>
    1238:	10 c0       	rjmp	.+32     	; 0x125a <SaveGameState+0xcc>
    123a:	42 e0       	ldi	r20, 0x02	; 2
    123c:	63 e8       	ldi	r22, 0x83	; 131
    123e:	7a e3       	ldi	r23, 0x3A	; 58
    1240:	80 e1       	ldi	r24, 0x10	; 16
    1242:	54 de       	rcall	.-856    	; 0xeec <EEWrite>
    1244:	88 23       	and	r24, r24
    1246:	61 f3       	breq	.-40     	; 0x1220 <SaveGameState+0x92>
    1248:	d1 cf       	rjmp	.-94     	; 0x11ec <SaveGameState+0x5e>
    124a:	42 e0       	ldi	r20, 0x02	; 2
    124c:	65 e8       	ldi	r22, 0x85	; 133
    124e:	7a e3       	ldi	r23, 0x3A	; 58
    1250:	82 e1       	ldi	r24, 0x12	; 18
    1252:	4c de       	rcall	.-872    	; 0xeec <EEWrite>
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	81 11       	cpse	r24, r1
    1258:	01 c0       	rjmp	.+2      	; 0x125c <SaveGameState+0xce>
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	89 2f       	mov	r24, r25
    125e:	64 96       	adiw	r28, 0x14	; 20
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <ReadStatusBit>:
    1274:	e8 2f       	mov	r30, r24
    1276:	ef 77       	andi	r30, 0x7F	; 127
    1278:	e6 95       	lsr	r30
    127a:	e6 95       	lsr	r30
    127c:	e6 95       	lsr	r30
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ed 58       	subi	r30, 0x8D	; 141
    1282:	f5 4c       	sbci	r31, 0xC5	; 197
    1284:	20 81       	ld	r18, Z
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	87 70       	andi	r24, 0x07	; 7
    128a:	a9 01       	movw	r20, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <ReadStatusBit+0x1e>
    128e:	55 95       	asr	r21
    1290:	47 95       	ror	r20
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <ReadStatusBit+0x1a>
    1296:	ca 01       	movw	r24, r20
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	08 95       	ret

0000129c <UpdateState>:
    129c:	e8 2f       	mov	r30, r24
    129e:	ef 77       	andi	r30, 0x7F	; 127
    12a0:	e9 f0       	breq	.+58     	; 0x12dc <UpdateState+0x40>
    12a2:	e6 95       	lsr	r30
    12a4:	e6 95       	lsr	r30
    12a6:	e6 95       	lsr	r30
    12a8:	28 2f       	mov	r18, r24
    12aa:	27 70       	andi	r18, 0x07	; 7
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	ed 58       	subi	r30, 0x8D	; 141
    12b0:	f5 4c       	sbci	r31, 0xC5	; 197
    12b2:	87 ff       	sbrs	r24, 7
    12b4:	0a c0       	rjmp	.+20     	; 0x12ca <UpdateState+0x2e>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <UpdateState+0x22>
    12bc:	88 0f       	add	r24, r24
    12be:	2a 95       	dec	r18
    12c0:	ea f7       	brpl	.-6      	; 0x12bc <UpdateState+0x20>
    12c2:	80 95       	com	r24
    12c4:	90 81       	ld	r25, Z
    12c6:	89 23       	and	r24, r25
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <UpdateState+0x3e>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <UpdateState+0x36>
    12d0:	88 0f       	add	r24, r24
    12d2:	2a 95       	dec	r18
    12d4:	ea f7       	brpl	.-6      	; 0x12d0 <UpdateState+0x34>
    12d6:	90 81       	ld	r25, Z
    12d8:	89 2b       	or	r24, r25
    12da:	80 83       	st	Z, r24
    12dc:	08 95       	ret

000012de <CheckState>:
    12de:	cf 93       	push	r28
    12e0:	c8 2f       	mov	r28, r24
    12e2:	8f 77       	andi	r24, 0x7F	; 127
    12e4:	c7 df       	rcall	.-114    	; 0x1274 <ReadStatusBit>
    12e6:	2c 2f       	mov	r18, r28
    12e8:	22 1f       	adc	r18, r18
    12ea:	22 27       	eor	r18, r18
    12ec:	22 1f       	adc	r18, r18
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	81 11       	cpse	r24, r1
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <CheckState+0x18>
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	82 2f       	mov	r24, r18
    12f8:	89 27       	eor	r24, r25
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <getID>:
    12fe:	e3 e0       	ldi	r30, 0x03	; 3
    1300:	f1 e1       	ldi	r31, 0x11	; 17
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	91 91       	ld	r25, Z+
    1306:	89 0f       	add	r24, r25
    1308:	ed 30       	cpi	r30, 0x0D	; 13
    130a:	91 e1       	ldi	r25, 0x11	; 17
    130c:	f9 07       	cpc	r31, r25
    130e:	d1 f7       	brne	.-12     	; 0x1304 <getID+0x6>
    1310:	83 70       	andi	r24, 0x03	; 3
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	98 0f       	add	r25, r24
    1316:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <whoami>
    131a:	08 95       	ret

0000131c <WipeAfterBoot>:
    131c:	a1 e0       	ldi	r26, 0x01	; 1
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e9       	ldi	r30, 0x94	; 148
    1322:	f9 e0       	ldi	r31, 0x09	; 9
    1324:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x1e>
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	81 11       	cpse	r24, r1
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <WipeAfterBoot+0x24>
    1330:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
    1334:	83 51       	subi	r24, 0x13	; 19
    1336:	b2 df       	rcall	.-156    	; 0x129c <UpdateState>
    1338:	21 96       	adiw	r28, 0x01	; 1
    133a:	e3 e0       	ldi	r30, 0x03	; 3
    133c:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__epilogue_restores__+0x1e>
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	be 01       	movw	r22, r28
    1346:	6f 5f       	subi	r22, 0xFF	; 255
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	81 2f       	mov	r24, r17
    134c:	cf dd       	rcall	.-1122   	; 0xeec <EEWrite>
    134e:	1f 5f       	subi	r17, 0xFF	; 255
    1350:	10 32       	cpi	r17, 0x20	; 32
    1352:	b9 f7       	brne	.-18     	; 0x1342 <WipeAfterBoot+0x26>
    1354:	ed cf       	rjmp	.-38     	; 0x1330 <WipeAfterBoot+0x14>

00001356 <Reset>:
    1356:	cf 93       	push	r28
    1358:	e3 e7       	ldi	r30, 0x73	; 115
    135a:	fa e3       	ldi	r31, 0x3A	; 58
    135c:	11 92       	st	Z+, r1
    135e:	8a e3       	ldi	r24, 0x3A	; 58
    1360:	e7 38       	cpi	r30, 0x87	; 135
    1362:	f8 07       	cpc	r31, r24
    1364:	d9 f7       	brne	.-10     	; 0x135c <Reset+0x6>
    1366:	cb df       	rcall	.-106    	; 0x12fe <getID>
    1368:	c8 2f       	mov	r28, r24
    136a:	81 11       	cpse	r24, r1
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <Reset+0x1c>
    136e:	8e e6       	ldi	r24, 0x6E	; 110
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <Reset+0x32>
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	11 f4       	brne	.+4      	; 0x137a <Reset+0x24>
    1376:	8f e6       	ldi	r24, 0x6F	; 111
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <Reset+0x32>
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	11 f4       	brne	.+4      	; 0x1382 <Reset+0x2c>
    137e:	80 e7       	ldi	r24, 0x70	; 112
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <Reset+0x32>
    1382:	83 30       	cpi	r24, 0x03	; 3
    1384:	11 f4       	brne	.+4      	; 0x138a <Reset+0x34>
    1386:	81 e7       	ldi	r24, 0x71	; 113
    1388:	89 df       	rcall	.-238    	; 0x129c <UpdateState>
    138a:	84 e6       	ldi	r24, 0x64	; 100
    138c:	8c 0f       	add	r24, r28
    138e:	86 df       	rcall	.-244    	; 0x129c <UpdateState>
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <LoadGameState>:
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	20 91 d1 3a 	lds	r18, 0x3AD1	; 0x803ad1 <adcPhot>
    139c:	30 91 d2 3a 	lds	r19, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    13a0:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    13a4:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	80 93 6c 38 	sts	0x386C, r24	; 0x80386c <lfsrSeed>
    13b6:	90 93 6d 38 	sts	0x386D, r25	; 0x80386d <lfsrSeed+0x1>
    13ba:	44 e1       	ldi	r20, 0x14	; 20
    13bc:	63 e7       	ldi	r22, 0x73	; 115
    13be:	7a e3       	ldi	r23, 0x3A	; 58
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	84 dd       	rcall	.-1272   	; 0xecc <EERead>
    13c4:	ce e6       	ldi	r28, 0x6E	; 110
    13c6:	d0 e0       	ldi	r29, 0x00	; 0
    13c8:	8c 2f       	mov	r24, r28
    13ca:	54 df       	rcall	.-344    	; 0x1274 <ReadStatusBit>
    13cc:	d8 0f       	add	r29, r24
    13ce:	cf 5f       	subi	r28, 0xFF	; 255
    13d0:	c2 37       	cpi	r28, 0x72	; 114
    13d2:	d1 f7       	brne	.-12     	; 0x13c8 <LoadGameState+0x34>
    13d4:	d1 30       	cpi	r29, 0x01	; 1
    13d6:	11 f0       	breq	.+4      	; 0x13dc <LoadGameState+0x48>
    13d8:	be df       	rcall	.-132    	; 0x1356 <Reset>
    13da:	01 c0       	rjmp	.+2      	; 0x13de <LoadGameState+0x4a>
    13dc:	90 df       	rcall	.-224    	; 0x12fe <getID>
    13de:	80 91 83 3a 	lds	r24, 0x3A83	; 0x803a83 <gameState+0x10>
    13e2:	90 91 84 3a 	lds	r25, 0x3A84	; 0x803a84 <gameState+0x11>
    13e6:	98 27       	eor	r25, r24
    13e8:	89 27       	eor	r24, r25
    13ea:	98 27       	eor	r25, r24
    13ec:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <inventory>
    13f0:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inventory+0x1>
    13f4:	80 91 85 3a 	lds	r24, 0x3A85	; 0x803a85 <gameState+0x12>
    13f8:	90 91 86 3a 	lds	r25, 0x3A86	; 0x803a86 <gameState+0x13>
    13fc:	98 27       	eor	r25, r24
    13fe:	89 27       	eor	r24, r25
    1400:	98 27       	eor	r25, r24
    1402:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <inventory+0x2>
    1406:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <inventory+0x3>
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <HotSummer>:
    1410:	cf 93       	push	r28
    1412:	86 e7       	ldi	r24, 0x76	; 118
    1414:	64 df       	rcall	.-312    	; 0x12de <CheckState>
    1416:	c8 2f       	mov	r28, r24
    1418:	88 23       	and	r24, r24
    141a:	81 f0       	breq	.+32     	; 0x143c <HotSummer+0x2c>
    141c:	e0 91 4c bf 	lds	r30, 0xBF4C	; 0x80bf4c <__bss_end+0x8425>
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	e8 52       	subi	r30, 0x28	; 40
    1424:	f5 4c       	sbci	r31, 0xC5	; 197
    1426:	10 82       	st	Z, r1
    1428:	e0 91 4d bf 	lds	r30, 0xBF4D	; 0x80bf4d <__bss_end+0x8426>
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1432:	e8 52       	subi	r30, 0x28	; 40
    1434:	f5 4c       	sbci	r31, 0xC5	; 197
    1436:	80 83       	st	Z, r24
    1438:	c1 e0       	ldi	r28, 0x01	; 1
    143a:	49 c0       	rjmp	.+146    	; 0x14ce <HotSummer+0xbe>
    143c:	85 e7       	ldi	r24, 0x75	; 117
    143e:	4f df       	rcall	.-354    	; 0x12de <CheckState>
    1440:	88 23       	and	r24, r24
    1442:	49 f1       	breq	.+82     	; 0x1496 <HotSummer+0x86>
    1444:	e0 91 4c bf 	lds	r30, 0xBF4C	; 0x80bf4c <__bss_end+0x8425>
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    144e:	e8 52       	subi	r30, 0x28	; 40
    1450:	f5 4c       	sbci	r31, 0xC5	; 197
    1452:	80 83       	st	Z, r24
    1454:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <cooledDown.3974>
    1458:	88 23       	and	r24, r24
    145a:	71 f0       	breq	.+28     	; 0x1478 <HotSummer+0x68>
    145c:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    1460:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    1464:	20 91 02 3b 	lds	r18, 0x3B02	; 0x803b02 <adcTemp>
    1468:	30 91 03 3b 	lds	r19, 0x3B03	; 0x803b03 <adcTemp+0x1>
    146c:	80 96       	adiw	r24, 0x20	; 32
    146e:	28 17       	cp	r18, r24
    1470:	39 07       	cpc	r19, r25
    1472:	10 f0       	brcs	.+4      	; 0x1478 <HotSummer+0x68>
    1474:	86 e7       	ldi	r24, 0x76	; 118
    1476:	2a c0       	rjmp	.+84     	; 0x14cc <HotSummer+0xbc>
    1478:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    147c:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    1480:	20 91 02 3b 	lds	r18, 0x3B02	; 0x803b02 <adcTemp>
    1484:	30 91 03 3b 	lds	r19, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1488:	08 96       	adiw	r24, 0x08	; 8
    148a:	82 17       	cp	r24, r18
    148c:	93 07       	cpc	r25, r19
    148e:	18 f0       	brcs	.+6      	; 0x1496 <HotSummer+0x86>
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <cooledDown.3974>
    1496:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    149a:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    149e:	89 2b       	or	r24, r25
    14a0:	41 f4       	brne	.+16     	; 0x14b2 <HotSummer+0xa2>
    14a2:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    14a6:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    14aa:	80 93 d5 3a 	sts	0x3AD5, r24	; 0x803ad5 <calTemp>
    14ae:	90 93 d6 3a 	sts	0x3AD6, r25	; 0x803ad6 <calTemp+0x1>
    14b2:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    14b6:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    14ba:	20 91 02 3b 	lds	r18, 0x3B02	; 0x803b02 <adcTemp>
    14be:	30 91 03 3b 	lds	r19, 0x3B03	; 0x803b03 <adcTemp+0x1>
    14c2:	80 96       	adiw	r24, 0x20	; 32
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	10 f0       	brcs	.+4      	; 0x14ce <HotSummer+0xbe>
    14ca:	85 e7       	ldi	r24, 0x75	; 117
    14cc:	e7 de       	rcall	.-562    	; 0x129c <UpdateState>
    14ce:	8c 2f       	mov	r24, r28
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <WingBar>:
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	ff eb       	ldi	r31, 0xBF	; 191
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a5 81       	ldd	r26, Z+5	; 0x05
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	98 17       	cp	r25, r24
    14e0:	34 f4       	brge	.+12     	; 0x14ee <WingBar+0x1a>
    14e2:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    14e6:	a8 52       	subi	r26, 0x28	; 40
    14e8:	b5 4c       	sbci	r27, 0xC5	; 197
    14ea:	2c 93       	st	X, r18
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <WingBar+0x20>
    14ee:	a8 52       	subi	r26, 0x28	; 40
    14f0:	b5 4c       	sbci	r27, 0xC5	; 197
    14f2:	1c 92       	st	X, r1
    14f4:	a0 81       	ld	r26, Z
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	96 17       	cp	r25, r22
    14fa:	34 f4       	brge	.+12     	; 0x1508 <WingBar+0x34>
    14fc:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1500:	a8 52       	subi	r26, 0x28	; 40
    1502:	b5 4c       	sbci	r27, 0xC5	; 197
    1504:	2c 93       	st	X, r18
    1506:	03 c0       	rjmp	.+6      	; 0x150e <WingBar+0x3a>
    1508:	a8 52       	subi	r26, 0x28	; 40
    150a:	b5 4c       	sbci	r27, 0xC5	; 197
    150c:	1c 92       	st	X, r1
    150e:	9f 5f       	subi	r25, 0xFF	; 255
    1510:	31 96       	adiw	r30, 0x01	; 1
    1512:	95 30       	cpi	r25, 0x05	; 5
    1514:	11 f7       	brne	.-60     	; 0x14da <WingBar+0x6>
    1516:	08 95       	ret

00001518 <SetBothEyes>:
    1518:	a8 e5       	ldi	r26, 0x58	; 88
    151a:	bf eb       	ldi	r27, 0xBF	; 191
    151c:	ec 91       	ld	r30, X
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e8 52       	subi	r30, 0x28	; 40
    1522:	f5 4c       	sbci	r31, 0xC5	; 197
    1524:	80 83       	st	Z, r24
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	ec 91       	ld	r30, X
    152a:	12 97       	sbiw	r26, 0x02	; 2
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	e8 52       	subi	r30, 0x28	; 40
    1530:	f5 4c       	sbci	r31, 0xC5	; 197
    1532:	60 83       	st	Z, r22
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	ec 91       	ld	r30, X
    1538:	11 97       	sbiw	r26, 0x01	; 1
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	e8 52       	subi	r30, 0x28	; 40
    153e:	f5 4c       	sbci	r31, 0xC5	; 197
    1540:	80 83       	st	Z, r24
    1542:	13 96       	adiw	r26, 0x03	; 3
    1544:	ec 91       	ld	r30, X
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	e8 52       	subi	r30, 0x28	; 40
    154a:	f5 4c       	sbci	r31, 0xC5	; 197
    154c:	60 83       	st	Z, r22
    154e:	08 95       	ret

00001550 <SetHackerLeds>:
    1550:	ac e5       	ldi	r26, 0x5C	; 92
    1552:	bf eb       	ldi	r27, 0xBF	; 191
    1554:	ed 91       	ld	r30, X+
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	e8 52       	subi	r30, 0x28	; 40
    155a:	f5 4c       	sbci	r31, 0xC5	; 197
    155c:	80 83       	st	Z, r24
    155e:	15 96       	adiw	r26, 0x05	; 5
    1560:	ec 91       	ld	r30, X
    1562:	15 97       	sbiw	r26, 0x05	; 5
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	e8 52       	subi	r30, 0x28	; 40
    1568:	f5 4c       	sbci	r31, 0xC5	; 197
    156a:	60 83       	st	Z, r22
    156c:	9f eb       	ldi	r25, 0xBF	; 191
    156e:	a2 36       	cpi	r26, 0x62	; 98
    1570:	b9 07       	cpc	r27, r25
    1572:	81 f7       	brne	.-32     	; 0x1554 <SetHackerLeds+0x4>
    1574:	08 95       	ret

00001576 <VictoryDance>:
    1576:	60 91 0c 38 	lds	r22, 0x380C	; 0x80380c <dimValue>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	cd df       	rcall	.-102    	; 0x1518 <SetBothEyes>
    157e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1582:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1586:	89 2f       	mov	r24, r25
    1588:	99 27       	eor	r25, r25
    158a:	82 95       	swap	r24
    158c:	8f 70       	andi	r24, 0x0F	; 15
    158e:	87 70       	andi	r24, 0x07	; 7
    1590:	99 27       	eor	r25, r25
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	91 05       	cpc	r25, r1
    1596:	59 f0       	breq	.+22     	; 0x15ae <VictoryDance+0x38>
    1598:	28 f4       	brcc	.+10     	; 0x15a4 <VictoryDance+0x2e>
    159a:	03 97       	sbiw	r24, 0x03	; 3
    159c:	58 f4       	brcc	.+22     	; 0x15b4 <VictoryDance+0x3e>
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <VictoryDance+0x48>
    15a4:	06 97       	sbiw	r24, 0x06	; 6
    15a6:	31 f4       	brne	.+12     	; 0x15b4 <VictoryDance+0x3e>
    15a8:	87 e0       	ldi	r24, 0x07	; 7
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <VictoryDance+0x48>
    15ae:	86 e0       	ldi	r24, 0x06	; 6
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	05 c0       	rjmp	.+10     	; 0x15be <VictoryDance+0x48>
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	8d df       	rcall	.-230    	; 0x14d4 <WingBar>
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    15c2:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    15c6:	08 95       	ret

000015c8 <GenerateBlinks>:
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ea ee       	ldi	r30, 0xEA	; 234
    15ce:	fa e0       	ldi	r31, 0x0A	; 10
    15d0:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__prologue_saves__+0x14>
    15d4:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    15d8:	88 23       	and	r24, r24
    15da:	29 f0       	breq	.+10     	; 0x15e6 <GenerateBlinks+0x1e>
    15dc:	80 e4       	ldi	r24, 0x40	; 64
    15de:	7f de       	rcall	.-770    	; 0x12de <CheckState>
    15e0:	81 11       	cpse	r24, r1
    15e2:	24 c0       	rjmp	.+72     	; 0x162c <GenerateBlinks+0x64>
    15e4:	53 c0       	rjmp	.+166    	; 0x168c <GenerateBlinks+0xc4>
    15e6:	cc e5       	ldi	r28, 0x5C	; 92
    15e8:	df eb       	ldi	r29, 0xBF	; 191
    15ea:	1a e7       	ldi	r17, 0x7A	; 122
    15ec:	81 2f       	mov	r24, r17
    15ee:	77 de       	rcall	.-786    	; 0x12de <CheckState>
    15f0:	ee 81       	ldd	r30, Y+6	; 0x06
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	88 23       	and	r24, r24
    15f6:	59 f0       	breq	.+22     	; 0x160e <GenerateBlinks+0x46>
    15f8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15fc:	e8 52       	subi	r30, 0x28	; 40
    15fe:	f5 4c       	sbci	r31, 0xC5	; 197
    1600:	80 83       	st	Z, r24
    1602:	e8 81       	ld	r30, Y
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	e8 52       	subi	r30, 0x28	; 40
    1608:	f5 4c       	sbci	r31, 0xC5	; 197
    160a:	10 82       	st	Z, r1
    160c:	0a c0       	rjmp	.+20     	; 0x1622 <GenerateBlinks+0x5a>
    160e:	e8 52       	subi	r30, 0x28	; 40
    1610:	f5 4c       	sbci	r31, 0xC5	; 197
    1612:	10 82       	st	Z, r1
    1614:	e8 81       	ld	r30, Y
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    161c:	e8 52       	subi	r30, 0x28	; 40
    161e:	f5 4c       	sbci	r31, 0xC5	; 197
    1620:	80 83       	st	Z, r24
    1622:	1f 5f       	subi	r17, 0xFF	; 255
    1624:	21 96       	adiw	r28, 0x01	; 1
    1626:	10 38       	cpi	r17, 0x80	; 128
    1628:	09 f7       	brne	.-62     	; 0x15ec <GenerateBlinks+0x24>
    162a:	d8 cf       	rjmp	.-80     	; 0x15dc <GenerateBlinks+0x14>
    162c:	90 91 6b 38 	lds	r25, 0x386B	; 0x80386b <HeartCount>
    1630:	49 2f       	mov	r20, r25
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	80 91 4b bf 	lds	r24, 0xBF4B	; 0x80bf4b <__bss_end+0x8424>
    1638:	47 30       	cpi	r20, 0x07	; 7
    163a:	51 05       	cpc	r21, r1
    163c:	d0 f4       	brcc	.+52     	; 0x1672 <GenerateBlinks+0xaa>
    163e:	fa 01       	movw	r30, r20
    1640:	e2 5c       	subi	r30, 0xC2	; 194
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__tablejump2__>
    1648:	e8 2f       	mov	r30, r24
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1650:	86 95       	lsr	r24
    1652:	86 95       	lsr	r24
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <GenerateBlinks+0x98>
    1656:	e8 2f       	mov	r30, r24
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    165e:	86 95       	lsr	r24
    1660:	e8 52       	subi	r30, 0x28	; 40
    1662:	f5 4c       	sbci	r31, 0xC5	; 197
    1664:	80 83       	st	Z, r24
    1666:	0a c0       	rjmp	.+20     	; 0x167c <GenerateBlinks+0xb4>
    1668:	e8 2f       	mov	r30, r24
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1670:	f7 cf       	rjmp	.-18     	; 0x1660 <GenerateBlinks+0x98>
    1672:	e8 2f       	mov	r30, r24
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	e8 52       	subi	r30, 0x28	; 40
    1678:	f5 4c       	sbci	r31, 0xC5	; 197
    167a:	10 82       	st	Z, r1
    167c:	90 32       	cpi	r25, 0x20	; 32
    167e:	20 f4       	brcc	.+8      	; 0x1688 <GenerateBlinks+0xc0>
    1680:	9f 5f       	subi	r25, 0xFF	; 255
    1682:	90 93 6b 38 	sts	0x386B, r25	; 0x80386b <HeartCount>
    1686:	02 c0       	rjmp	.+4      	; 0x168c <GenerateBlinks+0xc4>
    1688:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <HeartCount>
    168c:	90 91 6a 38 	lds	r25, 0x386A	; 0x80386a <LedCount>
    1690:	9f 5f       	subi	r25, 0xFF	; 255
    1692:	90 93 6a 38 	sts	0x386A, r25	; 0x80386a <LedCount>
    1696:	e0 91 4a 38 	lds	r30, 0x384A	; 0x80384a <effect>
    169a:	f0 91 4b 38 	lds	r31, 0x384B	; 0x80384b <effect+0x1>
    169e:	ef 71       	andi	r30, 0x1F	; 31
    16a0:	ff 27       	eor	r31, r31
    16a2:	e2 31       	cpi	r30, 0x12	; 18
    16a4:	f1 05       	cpc	r31, r1
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <GenerateBlinks+0xe2>
    16a8:	eb c0       	rjmp	.+470    	; 0x1880 <GenerateBlinks+0x2b8>
    16aa:	eb 5b       	subi	r30, 0xBB	; 187
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <__tablejump2__>
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	30 df       	rcall	.-416    	; 0x1518 <SetBothEyes>
    16b8:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    16bc:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    16c0:	84 fd       	sbrc	r24, 4
    16c2:	0a c0       	rjmp	.+20     	; 0x16d8 <GenerateBlinks+0x110>
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	05 df       	rcall	.-502    	; 0x14d4 <WingBar>
    16ca:	e0 91 4a bf 	lds	r30, 0xBF4A	; 0x80bf4a <__bss_end+0x8423>
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	e8 52       	subi	r30, 0x28	; 40
    16d2:	f5 4c       	sbci	r31, 0xC5	; 197
    16d4:	10 82       	st	Z, r1
    16d6:	d4 c0       	rjmp	.+424    	; 0x1880 <GenerateBlinks+0x2b8>
    16d8:	8f e1       	ldi	r24, 0x1F	; 31
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    16e0:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    16e4:	cd c0       	rjmp	.+410    	; 0x1880 <GenerateBlinks+0x2b8>
    16e6:	89 2f       	mov	r24, r25
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	90 fd       	sbrc	r25, 0
    16ec:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	12 df       	rcall	.-476    	; 0x1518 <SetBothEyes>
    16f4:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    16f8:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    16fc:	84 ff       	sbrs	r24, 4
    16fe:	c0 c0       	rjmp	.+384    	; 0x1880 <GenerateBlinks+0x2b8>
    1700:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	24 df       	rcall	.-440    	; 0x1550 <SetHackerLeds>
    1708:	bb c0       	rjmp	.+374    	; 0x1880 <GenerateBlinks+0x2b8>
    170a:	69 2f       	mov	r22, r25
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	93 ff       	sbrs	r25, 3
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GenerateBlinks+0x14e>
    1712:	60 95       	com	r22
    1714:	70 95       	com	r23
    1716:	95 e0       	ldi	r25, 0x05	; 5
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	9a 95       	dec	r25
    171e:	e1 f7       	brne	.-8      	; 0x1718 <GenerateBlinks+0x150>
    1720:	61 5e       	subi	r22, 0xE1	; 225
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	f9 de       	rcall	.-526    	; 0x1518 <SetBothEyes>
    1726:	ac c0       	rjmp	.+344    	; 0x1880 <GenerateBlinks+0x2b8>
    1728:	89 2f       	mov	r24, r25
    172a:	83 70       	andi	r24, 0x03	; 3
    172c:	09 f0       	breq	.+2      	; 0x1730 <GenerateBlinks+0x168>
    172e:	a8 c0       	rjmp	.+336    	; 0x1880 <GenerateBlinks+0x2b8>
    1730:	92 ff       	sbrs	r25, 2
    1732:	03 c0       	rjmp	.+6      	; 0x173a <GenerateBlinks+0x172>
    1734:	65 e0       	ldi	r22, 0x05	; 5
    1736:	85 e0       	ldi	r24, 0x05	; 5
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GenerateBlinks+0x176>
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	ca de       	rcall	.-620    	; 0x14d4 <WingBar>
    1740:	9f c0       	rjmp	.+318    	; 0x1880 <GenerateBlinks+0x2b8>
    1742:	95 30       	cpi	r25, 0x05	; 5
    1744:	10 f0       	brcs	.+4      	; 0x174a <GenerateBlinks+0x182>
    1746:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <LedCount>
    174a:	40 91 6a 38 	lds	r20, 0x386A	; 0x80386a <LedCount>
    174e:	24 2f       	mov	r18, r20
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	f9 01       	movw	r30, r18
    1754:	e2 5b       	subi	r30, 0xB2	; 178
    1756:	f0 44       	sbci	r31, 0x40	; 64
    1758:	e5 81       	ldd	r30, Z+5	; 0x05
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	e8 52       	subi	r30, 0x28	; 40
    175e:	f5 4c       	sbci	r31, 0xC5	; 197
    1760:	10 82       	st	Z, r1
    1762:	44 30       	cpi	r20, 0x04	; 4
    1764:	19 f0       	breq	.+6      	; 0x176c <GenerateBlinks+0x1a4>
    1766:	c9 01       	movw	r24, r18
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GenerateBlinks+0x1a8>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	fc 01       	movw	r30, r24
    1772:	e2 5b       	subi	r30, 0xB2	; 178
    1774:	f0 44       	sbci	r31, 0x40	; 64
    1776:	e5 81       	ldd	r30, Z+5	; 0x05
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    177e:	e8 52       	subi	r30, 0x28	; 40
    1780:	f5 4c       	sbci	r31, 0xC5	; 197
    1782:	80 83       	st	Z, r24
    1784:	e2 e5       	ldi	r30, 0x52	; 82
    1786:	ff eb       	ldi	r31, 0xBF	; 191
    1788:	e2 1b       	sub	r30, r18
    178a:	f3 0b       	sbc	r31, r19
    178c:	e0 81       	ld	r30, Z
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	e8 52       	subi	r30, 0x28	; 40
    1792:	f5 4c       	sbci	r31, 0xC5	; 197
    1794:	10 82       	st	Z, r1
    1796:	44 30       	cpi	r20, 0x04	; 4
    1798:	29 f0       	breq	.+10     	; 0x17a4 <GenerateBlinks+0x1dc>
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	82 1b       	sub	r24, r18
    17a0:	93 0b       	sbc	r25, r19
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GenerateBlinks+0x1e0>
    17a4:	84 e0       	ldi	r24, 0x04	; 4
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	e2 5b       	subi	r30, 0xB2	; 178
    17ac:	f0 44       	sbci	r31, 0x40	; 64
    17ae:	e0 81       	ld	r30, Z
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17b6:	e8 52       	subi	r30, 0x28	; 40
    17b8:	f5 4c       	sbci	r31, 0xC5	; 197
    17ba:	80 83       	st	Z, r24
    17bc:	61 c0       	rjmp	.+194    	; 0x1880 <GenerateBlinks+0x2b8>
    17be:	ce e4       	ldi	r28, 0x4E	; 78
    17c0:	df eb       	ldi	r29, 0xBF	; 191
    17c2:	83 e5       	ldi	r24, 0x53	; 83
    17c4:	e8 2e       	mov	r14, r24
    17c6:	8f eb       	ldi	r24, 0xBF	; 191
    17c8:	f8 2e       	mov	r15, r24
    17ca:	6e 01       	movw	r12, r28
    17cc:	0d 81       	ldd	r16, Y+5	; 0x05
    17ce:	10 e0       	ldi	r17, 0x00	; 0
    17d0:	5f dc       	rcall	.-1858   	; 0x1090 <lfsr>
    17d2:	87 ff       	sbrs	r24, 7
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <GenerateBlinks+0x214>
    17d6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17da:	01 c0       	rjmp	.+2      	; 0x17de <GenerateBlinks+0x216>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	f8 01       	movw	r30, r16
    17e0:	e8 52       	subi	r30, 0x28	; 40
    17e2:	f5 4c       	sbci	r31, 0xC5	; 197
    17e4:	80 83       	st	Z, r24
    17e6:	21 96       	adiw	r28, 0x01	; 1
    17e8:	f6 01       	movw	r30, r12
    17ea:	00 81       	ld	r16, Z
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	50 dc       	rcall	.-1888   	; 0x1090 <lfsr>
    17f0:	87 ff       	sbrs	r24, 7
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <GenerateBlinks+0x232>
    17f4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <GenerateBlinks+0x234>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	f8 01       	movw	r30, r16
    17fe:	e8 52       	subi	r30, 0x28	; 40
    1800:	f5 4c       	sbci	r31, 0xC5	; 197
    1802:	80 83       	st	Z, r24
    1804:	ec 16       	cp	r14, r28
    1806:	fd 06       	cpc	r15, r29
    1808:	01 f7       	brne	.-64     	; 0x17ca <GenerateBlinks+0x202>
    180a:	3a c0       	rjmp	.+116    	; 0x1880 <GenerateBlinks+0x2b8>
    180c:	90 fd       	sbrc	r25, 0
    180e:	38 c0       	rjmp	.+112    	; 0x1880 <GenerateBlinks+0x2b8>
    1810:	ee e4       	ldi	r30, 0x4E	; 78
    1812:	ff eb       	ldi	r31, 0xBF	; 191
    1814:	82 e5       	ldi	r24, 0x52	; 82
    1816:	9f eb       	ldi	r25, 0xBF	; 191
    1818:	9f 01       	movw	r18, r30
    181a:	a5 81       	ldd	r26, Z+5	; 0x05
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	c6 81       	ldd	r28, Z+6	; 0x06
    1820:	d0 e0       	ldi	r29, 0x00	; 0
    1822:	c8 52       	subi	r28, 0x28	; 40
    1824:	d5 4c       	sbci	r29, 0xC5	; 197
    1826:	48 81       	ld	r20, Y
    1828:	a8 52       	subi	r26, 0x28	; 40
    182a:	b5 4c       	sbci	r27, 0xC5	; 197
    182c:	4c 93       	st	X, r20
    182e:	31 96       	adiw	r30, 0x01	; 1
    1830:	e9 01       	movw	r28, r18
    1832:	a8 81       	ld	r26, Y
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	c0 81       	ld	r28, Z
    1838:	d0 e0       	ldi	r29, 0x00	; 0
    183a:	c8 52       	subi	r28, 0x28	; 40
    183c:	d5 4c       	sbci	r29, 0xC5	; 197
    183e:	28 81       	ld	r18, Y
    1840:	a8 52       	subi	r26, 0x28	; 40
    1842:	b5 4c       	sbci	r27, 0xC5	; 197
    1844:	2c 93       	st	X, r18
    1846:	8e 17       	cp	r24, r30
    1848:	9f 07       	cpc	r25, r31
    184a:	31 f7       	brne	.-52     	; 0x1818 <GenerateBlinks+0x250>
    184c:	c0 91 57 bf 	lds	r28, 0xBF57	; 0x80bf57 <__bss_end+0x8430>
    1850:	d0 e0       	ldi	r29, 0x00	; 0
    1852:	1e dc       	rcall	.-1988   	; 0x1090 <lfsr>
    1854:	81 3e       	cpi	r24, 0xE1	; 225
    1856:	18 f0       	brcs	.+6      	; 0x185e <GenerateBlinks+0x296>
    1858:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <GenerateBlinks+0x298>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	c8 52       	subi	r28, 0x28	; 40
    1862:	d5 4c       	sbci	r29, 0xC5	; 197
    1864:	88 83       	st	Y, r24
    1866:	c0 91 52 bf 	lds	r28, 0xBF52	; 0x80bf52 <__bss_end+0x842b>
    186a:	d0 e0       	ldi	r29, 0x00	; 0
    186c:	11 dc       	rcall	.-2014   	; 0x1090 <lfsr>
    186e:	81 3e       	cpi	r24, 0xE1	; 225
    1870:	18 f0       	brcs	.+6      	; 0x1878 <GenerateBlinks+0x2b0>
    1872:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1876:	01 c0       	rjmp	.+2      	; 0x187a <GenerateBlinks+0x2b2>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	c8 52       	subi	r28, 0x28	; 40
    187c:	d5 4c       	sbci	r29, 0xC5	; 197
    187e:	88 83       	st	Y, r24
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	e8 e0       	ldi	r30, 0x08	; 8
    1886:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x14>

0000188a <FadeOut>:
    188a:	80 95       	com	r24
    188c:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <fastTicker>
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	87 70       	andi	r24, 0x07	; 7
    1894:	a9 01       	movw	r20, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <FadeOut+0x12>
    1898:	55 95       	asr	r21
    189a:	47 95       	ror	r20
    189c:	8a 95       	dec	r24
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <FadeOut+0xe>
    18a0:	ca 01       	movw	r24, r20
    18a2:	44 23       	and	r20, r20
    18a4:	01 f1       	breq	.+64     	; 0x18e6 <FadeOut+0x5c>
    18a6:	30 91 ca 3a 	lds	r19, 0x3ACA	; 0x803aca <auVolume>
    18aa:	43 17       	cp	r20, r19
    18ac:	30 f4       	brcc	.+12     	; 0x18ba <FadeOut+0x30>
    18ae:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <auVolume>
    18b2:	98 1b       	sub	r25, r24
    18b4:	90 93 ca 3a 	sts	0x3ACA, r25	; 0x803aca <auVolume>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <FadeOut+0x58>
    18ba:	10 92 ca 3a 	sts	0x3ACA, r1	; 0x803aca <auVolume>
    18be:	66 23       	and	r22, r22
    18c0:	81 f0       	breq	.+32     	; 0x18e2 <FadeOut+0x58>
    18c2:	89 e4       	ldi	r24, 0x49	; 73
    18c4:	98 e3       	ldi	r25, 0x38	; 56
    18c6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    18ca:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    18ce:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    18d2:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    18d6:	8f 71       	andi	r24, 0x1F	; 31
    18d8:	99 27       	eor	r25, r25
    18da:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    18de:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    18e2:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <fastTicker>
    18e6:	08 95       	ret

000018e8 <GenerateAudio>:

uint8_t GenerateAudio(){
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    static uint8_t start = 0;
    static uint8_t duration;

    //Headphones detected?
    if (auIn < HPLVL) {
    18f0:	80 91 d7 3a 	lds	r24, 0x3AD7	; 0x803ad7 <auIn>
    18f4:	89 31       	cpi	r24, 0x19	; 25
    18f6:	08 f0       	brcs	.+2      	; 0x18fa <GenerateAudio+0x12>
    18f8:	ca c1       	rjmp	.+916    	; 0x1c8e <GenerateAudio+0x3a6>

        detHdPh = 1;
    18fa:	c1 e0       	ldi	r28, 0x01	; 1
    18fc:	c0 93 d4 3a 	sts	0x3AD4, r28	; 0x803ad4 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1900:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1904:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1908:	88 27       	eor	r24, r24
    190a:	89 2b       	or	r24, r25
    190c:	09 f0       	breq	.+2      	; 0x1910 <GenerateAudio+0x28>
    190e:	75 c1       	rjmp	.+746    	; 0x1bfa <GenerateAudio+0x312>
        
            //Silence, I kill u
            if ((effect&0xE0)==0){
    1910:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1914:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1918:	80 7e       	andi	r24, 0xE0	; 224
    191a:	99 27       	eor	r25, r25
    191c:	89 2b       	or	r24, r25
    191e:	39 f4       	brne	.+14     	; 0x192e <GenerateAudio+0x46>
                auRepAddr = &zero;
    1920:	89 e4       	ldi	r24, 0x49	; 73
    1922:	98 e3       	ldi	r25, 0x38	; 56
    1924:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1928:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    192c:	63 c1       	rjmp	.+710    	; 0x1bf4 <GenerateAudio+0x30c>
                start = 0;
            }

            //Bad answer (buzzer, also used in other games)
            else if ((effect&0xE0)==32){
    192e:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1932:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1936:	80 7e       	andi	r24, 0xE0	; 224
    1938:	99 27       	eor	r25, r25
    193a:	80 97       	sbiw	r24, 0x20	; 32
    193c:	61 f5       	brne	.+88     	; 0x1996 <GenerateAudio+0xae>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	65 e0       	ldi	r22, 0x05	; 5
    1944:	80 e8       	ldi	r24, 0x80	; 128
    1946:	f1 db       	rcall	.-2078   	; 0x112a <floatAround>
    1948:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <auBuffer.4058+0x2>

                if (start == 0) {
    194c:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    1950:	81 11       	cpse	r24, r1
    1952:	14 c0       	rjmp	.+40     	; 0x197c <GenerateAudio+0x94>
    //}
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	91 e2       	ldi	r25, 0x21	; 33
    1958:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    195c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1960:	83 e2       	ldi	r24, 0x23	; 35
    1962:	98 e3       	ldi	r25, 0x38	; 56
    1964:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1968:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
            else if ((effect&0xE0)==32){
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2100, 0xff);
    1972:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>
                    duration = 8;
    1976:	88 e0       	ldi	r24, 0x08	; 8
    1978:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>
                }

                if (duration == 0) FadeOut(4, start);
    197c:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    1980:	81 11       	cpse	r24, r1
    1982:	04 c0       	rjmp	.+8      	; 0x198c <GenerateAudio+0xa4>
    1984:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	7f df       	rcall	.-258    	; 0x188a <FadeOut>
                floatSpeed(1, 0x2000, 0x2200);
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	52 e2       	ldi	r21, 0x22	; 34
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e2       	ldi	r23, 0x20	; 32
    1994:	79 c1       	rjmp	.+754    	; 0x1c88 <GenerateAudio+0x3a0>
            }

            //Good (bell)
            else if ((effect&0xE0)==64){   //64
    1996:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    199a:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    199e:	80 7e       	andi	r24, 0xE0	; 224
    19a0:	99 27       	eor	r25, r25
    19a2:	80 34       	cpi	r24, 0x40	; 64
    19a4:	91 05       	cpc	r25, r1
    19a6:	c1 f5       	brne	.+112    	; 0x1a18 <GenerateAudio+0x130>
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
    19a8:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    19ac:	81 11       	cpse	r24, r1
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <GenerateAudio+0xf0>
    //}
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	9a e0       	ldi	r25, 0x0A	; 10
    19b4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19b8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    19bc:	80 e2       	ldi	r24, 0x20	; 32
    19be:	98 e3       	ldi	r25, 0x38	; 56
    19c0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19c4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
            //Good (bell)
            else if ((effect&0xE0)==64){   //64
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x0a00, 0xff);
    19ce:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>
                    duration = 6;
    19d2:	86 e0       	ldi	r24, 0x06	; 6
    19d4:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>
                }

                if (duration == 0) FadeOut(4, start);
    19d8:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    19dc:	81 11       	cpse	r24, r1
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <GenerateAudio+0x100>
    19e0:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    19e4:	84 e0       	ldi	r24, 0x04	; 4
    19e6:	51 df       	rcall	.-350    	; 0x188a <FadeOut>
                if (buttonMark){
    19e8:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    19ec:	88 23       	and	r24, r24
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <GenerateAudio+0x10a>
    19f0:	50 c1       	rjmp	.+672    	; 0x1c92 <GenerateAudio+0x3aa>
                    TCB1_CCMP -= 0x080;                    
    19f2:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    19f6:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    19fa:	80 58       	subi	r24, 0x80	; 128
    19fc:	91 09       	sbc	r25, r1
    19fe:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a02:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume == 0) effect = 0;
    1a06:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	42 c1       	rjmp	.+644    	; 0x1c92 <GenerateAudio+0x3aa>
    1a0e:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
    1a12:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
    1a16:	3d c1       	rjmp	.+634    	; 0x1c92 <GenerateAudio+0x3aa>
                }
            }

            //Rain storm with whistling wind and ghostly 
            else if (((effect&0xE0)==128)||((effect&0xE0)==96)){
    1a18:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a1c:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a20:	80 7e       	andi	r24, 0xE0	; 224
    1a22:	99 27       	eor	r25, r25
    1a24:	80 38       	cpi	r24, 0x80	; 128
    1a26:	91 05       	cpc	r25, r1
    1a28:	51 f0       	breq	.+20     	; 0x1a3e <GenerateAudio+0x156>
    1a2a:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a2e:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a32:	80 7e       	andi	r24, 0xE0	; 224
    1a34:	99 27       	eor	r25, r25
    1a36:	80 36       	cpi	r24, 0x60	; 96
    1a38:	91 05       	cpc	r25, r1
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <GenerateAudio+0x156>
    1a3c:	55 c0       	rjmp	.+170    	; 0x1ae8 <GenerateAudio+0x200>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1a3e:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <auBuffer.4060+0x6>
                auRepAddr = &auBuffer[0];
    1a42:	80 e6       	ldi	r24, 0x60	; 96
    1a44:	98 e3       	ldi	r25, 0x38	; 56
    1a46:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a4a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1a4e:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a50:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) {
                        auBuffer[x] = floatAround(0x80, 6-((effect&0xa0)>>5), 0x01, 0x00);
    1a52:	d6 e0       	ldi	r29, 0x06	; 6
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
                    if ((x>0) && (x!=3)) {
    1a54:	c3 30       	cpi	r28, 0x03	; 3
    1a56:	99 f0       	breq	.+38     	; 0x1a7e <GenerateAudio+0x196>
                        auBuffer[x] = floatAround(0x80, 6-((effect&0xa0)>>5), 0x01, 0x00);
    1a58:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a5c:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a60:	80 7a       	andi	r24, 0xA0	; 160
    1a62:	99 27       	eor	r25, r25
    1a64:	35 e0       	ldi	r19, 0x05	; 5
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	3a 95       	dec	r19
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <GenerateAudio+0x17e>
    1a6e:	6d 2f       	mov	r22, r29
    1a70:	68 1b       	sub	r22, r24
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	80 e8       	ldi	r24, 0x80	; 128
    1a78:	58 db       	rcall	.-2384   	; 0x112a <floatAround>
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1a7e:	cf 5f       	subi	r28, 0xFF	; 255
    1a80:	0f 5f       	subi	r16, 0xFF	; 255
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	c6 30       	cpi	r28, 0x06	; 6
    1a86:	31 f7       	brne	.-52     	; 0x1a54 <GenerateAudio+0x16c>
                    if ((x>0) && (x!=3)) {
                        auBuffer[x] = floatAround(0x80, 6-((effect&0xa0)>>5), 0x01, 0x00);
                    }
                }

                if (buttonMark){
    1a88:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1a8c:	88 23       	and	r24, r24
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <GenerateAudio+0x1aa>
    1a90:	00 c1       	rjmp	.+512    	; 0x1c92 <GenerateAudio+0x3aa>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    if (effect & 128) floatSpeed(6, 0x0800, 0x2000); 
    1a92:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1a96:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1a9a:	87 ff       	sbrs	r24, 7
    1a9c:	06 c0       	rjmp	.+12     	; 0x1aaa <GenerateAudio+0x1c2>
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e2       	ldi	r21, 0x20	; 32
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	78 e0       	ldi	r23, 0x08	; 8
    1aa6:	86 e0       	ldi	r24, 0x06	; 6
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <GenerateAudio+0x1cc>
                    else              floatSpeed(5, 0x0280, 0x0400);
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	54 e0       	ldi	r21, 0x04	; 4
    1aae:	60 e8       	ldi	r22, 0x80	; 128
    1ab0:	72 e0       	ldi	r23, 0x02	; 2
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	0c db       	rcall	.-2536   	; 0x10ce <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1ab6:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    1aba:	20 ea       	ldi	r18, 0xA0	; 160
    1abc:	40 e1       	ldi	r20, 0x10	; 16
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	34 db       	rcall	.-2456   	; 0x112a <floatAround>
    1ac2:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0xD0-effect, 0x90);
    1ac6:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1aca:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1ace:	40 ed       	ldi	r20, 0xD0	; 208
    1ad0:	48 1b       	sub	r20, r24
    1ad2:	20 e9       	ldi	r18, 0x90	; 144
    1ad4:	62 e0       	ldi	r22, 0x02	; 2
    1ad6:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <auBuffer.4060>
    1ada:	27 db       	rcall	.-2482   	; 0x112a <floatAround>
    1adc:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <auBuffer.4060>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1ae0:	80 95       	com	r24
    1ae2:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <auBuffer.4060+0x3>
    1ae6:	d5 c0       	rjmp	.+426    	; 0x1c92 <GenerateAudio+0x3aa>
                }
            }

            //AAAhhhh failed sound effect, too tired...
            else if ((effect&0xE0)==192){ //128//192
    1ae8:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1aec:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1af0:	80 7e       	andi	r24, 0xE0	; 224
    1af2:	99 27       	eor	r25, r25
    1af4:	80 3c       	cpi	r24, 0xC0	; 192
    1af6:	91 05       	cpc	r25, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <GenerateAudio+0x214>
    1afa:	cb c0       	rjmp	.+406    	; 0x1c92 <GenerateAudio+0x3aa>
                FadeOut(1, start);         
                */
            }

            //Bleeps
            else if ((effect&0xE0)==160){
    1afc:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1b00:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1b04:	80 7e       	andi	r24, 0xE0	; 224
    1b06:	99 27       	eor	r25, r25
    1b08:	80 3a       	cpi	r24, 0xA0	; 160
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	81 f5       	brne	.+96     	; 0x1b6e <GenerateAudio+0x286>
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                start = Play(&auBuffer[0], 1, TCB1_CCMP, auVolume);
    1b0e:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    1b12:	20 91 5c 0a 	lds	r18, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b16:	30 91 5d 0a 	lds	r19, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    //}
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1b1a:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b1e:	30 93 5d 0a 	sts	0x0A5D, r19	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1b22:	2a e1       	ldi	r18, 0x1A	; 26
    1b24:	38 e3       	ldi	r19, 0x38	; 56
    1b26:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
    1b2a:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1b2e:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>

            //Bleeps
            else if ((effect&0xE0)==160){
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                start = Play(&auBuffer[0], 1, TCB1_CCMP, auVolume);
    1b32:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>

                FadeOut(0, start);
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	80 e0       	ldi	r24, 0x00	; 0
                if (buttonMark){
    1b3a:	a7 de       	rcall	.-690    	; 0x188a <FadeOut>
    1b3c:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <GenerateAudio+0x25e>
                    TCB1_CCMP = 0x0400 + (lfsr()<<5);
    1b44:	a6 c0       	rjmp	.+332    	; 0x1c92 <GenerateAudio+0x3aa>
    1b46:	a4 da       	rcall	.-2744   	; 0x1090 <lfsr>
    1b48:	f0 e2       	ldi	r31, 0x20	; 32
    1b4a:	8f 9f       	mul	r24, r31
    1b4c:	c0 01       	movw	r24, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	9c 5f       	subi	r25, 0xFC	; 252
    1b52:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b56:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1b5a:	ca e1       	ldi	r28, 0x1A	; 26
                    for(uint8_t x=0; x<5; ++x){
                        auBuffer[x]=lfsr()|0x01;
    1b5c:	d8 e3       	ldi	r29, 0x38	; 56
    1b5e:	98 da       	rcall	.-2768   	; 0x1090 <lfsr>
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	89 93       	st	Y+, r24
                start = Play(&auBuffer[0], 1, TCB1_CCMP, auVolume);

                FadeOut(0, start);
                if (buttonMark){
                    TCB1_CCMP = 0x0400 + (lfsr()<<5);
                    for(uint8_t x=0; x<5; ++x){
    1b64:	28 e3       	ldi	r18, 0x38	; 56
    1b66:	cf 31       	cpi	r28, 0x1F	; 31
    1b68:	d2 07       	cpc	r29, r18
    1b6a:	c9 f7       	brne	.-14     	; 0x1b5e <GenerateAudio+0x276>
    1b6c:	92 c0       	rjmp	.+292    	; 0x1c92 <GenerateAudio+0x3aa>
                    }
                }
            }

            //Footsteps
            else if ((effect&0xE0)==224){//224){
    1b6e:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1b72:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1b76:	80 7e       	andi	r24, 0xE0	; 224
    1b78:	99 27       	eor	r25, r25
    1b7a:	80 3e       	cpi	r24, 0xE0	; 224
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <GenerateAudio+0x29a>
    1b80:	88 c0       	rjmp	.+272    	; 0x1c92 <GenerateAudio+0x3aa>
                static uint8_t auBuffer[8] = {64, 200, 240, 128, 64, 32, 16, 0};
                static uint8_t interval = 6;

                
                if (start == 0) {
    1b82:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    1b86:	81 11       	cpse	r24, r1
    1b88:	19 c0       	rjmp	.+50     	; 0x1bbc <GenerateAudio+0x2d4>
                    auRepAddr = &auBuffer[6];
    1b8a:	88 e1       	ldi	r24, 0x18	; 24
    1b8c:	98 e3       	ldi	r25, 0x38	; 56
    1b8e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b92:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    start = Play(&auBuffer[0], 0, 0x6000, auVolume);
    1b96:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <auVolume>
    //}
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e6       	ldi	r19, 0x60	; 96
    1b9e:	20 93 5c 0a 	sts	0x0A5C, r18	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ba2:	30 93 5d 0a 	sts	0x0A5D, r19	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    1ba6:	22 e1       	ldi	r18, 0x12	; 18
    1ba8:	38 e3       	ldi	r19, 0x38	; 56
    1baa:	20 93 05 38 	sts	0x3805, r18	; 0x803805 <auSmpAddr>
    1bae:	30 93 06 38 	sts	0x3806, r19	; 0x803806 <auSmpAddr+0x1>
    auVolume = volume;
    1bb2:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
                static uint8_t interval = 6;

                
                if (start == 0) {
                    auRepAddr = &auBuffer[6];
                    start = Play(&auBuffer[0], 0, 0x6000, auVolume);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <start.4056>
                }

                FadeOut(0, start);
    1bbc:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	63 de       	rcall	.-826    	; 0x188a <FadeOut>
                if (buttonMark){
    1bc4:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1bc8:	88 23       	and	r24, r24
    1bca:	09 f4       	brne	.+2      	; 0x1bce <GenerateAudio+0x2e6>
    1bcc:	62 c0       	rjmp	.+196    	; 0x1c92 <GenerateAudio+0x3aa>
                    --interval;
    1bce:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <interval.4071>
    1bd2:	81 50       	subi	r24, 0x01	; 1
    1bd4:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <interval.4071>
                    if (interval == 0){
    1bd8:	81 11       	cpse	r24, r1
    1bda:	5b c0       	rjmp	.+182    	; 0x1c92 <GenerateAudio+0x3aa>
                        TCB1_CCMP += 0x0300;
    1bdc:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1be0:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1be4:	9d 5f       	subi	r25, 0xFD	; 253
    1be6:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1bea:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        interval = 6;
    1bee:	86 e0       	ldi	r24, 0x06	; 6
    1bf0:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <interval.4071>
                        start = 0;
    1bf4:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <start.4056>
    1bf8:	4c c0       	rjmp	.+152    	; 0x1c92 <GenerateAudio+0x3aa>
                    }
                }
            }

        } else if ((effect&0xff00)==0x0100) {
    1bfa:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1bfe:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1c02:	88 27       	eor	r24, r24
    1c04:	81 15       	cp	r24, r1
    1c06:	91 40       	sbci	r25, 0x01	; 1
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <GenerateAudio+0x324>
    1c0a:	43 c0       	rjmp	.+134    	; 0x1c92 <GenerateAudio+0x3aa>
            if ((effect&0xE0) <= 0x90) {
    1c0c:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1c10:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1c14:	80 7e       	andi	r24, 0xE0	; 224
    1c16:	99 27       	eor	r25, r25
    1c18:	81 39       	cpi	r24, 0x91	; 145
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	d0 f5       	brcc	.+116    	; 0x1c92 <GenerateAudio+0x3aa>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
    1c1e:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <start.4056>
    1c22:	81 11       	cpse	r24, r1
    1c24:	22 c0       	rjmp	.+68     	; 0x1c6a <GenerateAudio+0x382>
                    freq = ((effect&0xE0)+1)<<6;
    1c26:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1c2a:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1c2e:	80 7e       	andi	r24, 0xE0	; 224
    1c30:	99 27       	eor	r25, r25
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	26 e0       	ldi	r18, 0x06	; 6
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	2a 95       	dec	r18
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <GenerateAudio+0x34e>
    1c3e:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <freq.4073>
    1c42:	90 93 5f 38 	sts	0x385F, r25	; 0x80385f <freq.4073+0x1>
    //}
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1c46:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1c4a:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1c4e:	8e e0       	ldi	r24, 0x0E	; 14
    1c50:	98 e3       	ldi	r25, 0x38	; 56
    1c52:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c56:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <auVolume>
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
                    freq = ((effect&0xE0)+1)<<6;
                    start = Play(&auBuffer[0], 1, freq, 0xff);
    1c60:	c0 93 68 38 	sts	0x3868, r28	; 0x803868 <start.4056>
                    duration = 3;
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>
                }

                if (duration == 0) FadeOut(7, start);
    1c6a:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    1c6e:	81 11       	cpse	r24, r1
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <GenerateAudio+0x392>
    1c72:	60 91 68 38 	lds	r22, 0x3868	; 0x803868 <start.4056>
    1c76:	87 e0       	ldi	r24, 0x07	; 7
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1c78:	08 de       	rcall	.-1008   	; 0x188a <FadeOut>
    1c7a:	60 91 5e 38 	lds	r22, 0x385E	; 0x80385e <freq.4073>
    1c7e:	70 91 5f 38 	lds	r23, 0x385F	; 0x80385f <freq.4073+0x1>
    1c82:	ab 01       	movw	r20, r22
    1c84:	5d 5f       	subi	r21, 0xFD	; 253
    1c86:	7e 5f       	subi	r23, 0xFE	; 254
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	21 da       	rcall	.-3006   	; 0x10ce <floatSpeed>
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <GenerateAudio+0x3aa>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);
            }
        }
    } else {
        detHdPh = 0;
    1c8e:	10 92 d4 3a 	sts	0x3AD4, r1	; 0x803ad4 <detHdPh>
    }

    if (buttonMark && duration) --duration;
    1c92:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    1c96:	88 23       	and	r24, r24
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <GenerateAudio+0x3c0>
    1c9a:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <duration.4057>
    1c9e:	88 23       	and	r24, r24
    1ca0:	19 f0       	breq	.+6      	; 0x1ca8 <GenerateAudio+0x3c0>
    1ca2:	81 50       	subi	r24, 0x01	; 1
    1ca4:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <duration.4057>

    return buttonMark;
    1ca8:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <getClock>:

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1cb6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1cba:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1cbe:	20 91 53 38 	lds	r18, 0x3853	; 0x803853 <minuteMark>
    1cc2:	89 2f       	mov	r24, r25
    1cc4:	99 27       	eor	r25, r25
    1cc6:	86 95       	lsr	r24
}
    1cc8:	3c e3       	ldi	r19, 0x3C	; 60
    1cca:	23 9f       	mul	r18, r19
    1ccc:	80 0d       	add	r24, r0
    1cce:	91 1d       	adc	r25, r1
    1cd0:	11 24       	eor	r1, r1
    1cd2:	08 95       	ret

00001cd4 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	8c 01       	movw	r16, r24
    1cde:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1ce0:	ea df       	rcall	.-44     	; 0x1cb6 <getClock>
    1ce2:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1ce4:	80 17       	cp	r24, r16
    1ce6:	91 07       	cpc	r25, r17
    1ce8:	08 f4       	brcc	.+2      	; 0x1cec <idleTimeout+0x18>
        curClock += 256 * 60;
    1cea:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1cec:	c0 0f       	add	r28, r16
    1cee:	d1 1f       	adc	r29, r17
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	c2 17       	cp	r28, r18
    1cf4:	d3 07       	cpc	r29, r19
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <idleTimeout+0x26>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
}
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <SelfTest>:

uint8_t SelfTest(){
    1d04:	a4 e0       	ldi	r26, 0x04	; 4
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e8 e8       	ldi	r30, 0x88	; 136
    1d0a:	fe e0       	ldi	r31, 0x0E	; 14
    1d0c:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__prologue_saves__+0x12>
    uint8_t tstVal[4] = {0, 0, 0, 0};
    1d10:	19 82       	std	Y+1, r1	; 0x01
    1d12:	1a 82       	std	Y+2, r1	; 0x02
    1d14:	1b 82       	std	Y+3, r1	; 0x03
    1d16:	1c 82       	std	Y+4, r1	; 0x04

    while (adcTemp == 0) ;
    1d18:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1d1c:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1d20:	89 2b       	or	r24, r25
    1d22:	d1 f3       	breq	.-12     	; 0x1d18 <SelfTest+0x14>
    EERead(BOOTCHK, &tstVal[0], 4);
    1d24:	44 e0       	ldi	r20, 0x04	; 4
    1d26:	be 01       	movw	r22, r28
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	84 e1       	ldi	r24, 0x14	; 20
    1d2e:	ce d8       	rcall	.-3684   	; 0xecc <EERead>
    //already checked and ok, skip test, can be reset by using "ikillu" command.
    if (tstVal[0] == 0xA5) {
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	85 3a       	cpi	r24, 0xA5	; 165
    1d34:	a1 f4       	brne	.+40     	; 0x1d5e <SelfTest+0x5a>
        calTemp =  tstVal[1]<<8;
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	88 27       	eor	r24, r24
    1d3e:	80 93 d5 3a 	sts	0x3AD5, r24	; 0x803ad5 <calTemp>
    1d42:	90 93 d6 3a 	sts	0x3AD6, r25	; 0x803ad6 <calTemp+0x1>
        calTemp |= tstVal[2];
    1d46:	80 91 d5 3a 	lds	r24, 0x3AD5	; 0x803ad5 <calTemp>
    1d4a:	90 91 d6 3a 	lds	r25, 0x3AD6	; 0x803ad6 <calTemp+0x1>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	82 2b       	or	r24, r18
    1d52:	80 93 d5 3a 	sts	0x3AD5, r24	; 0x803ad5 <calTemp>
    1d56:	90 93 d6 3a 	sts	0x3AD6, r25	; 0x803ad6 <calTemp+0x1>
        return 0; 
    1d5a:	b1 2c       	mov	r11, r1
    1d5c:	7c c0       	rjmp	.+248    	; 0x1e56 <SelfTest+0x152>
    } 

    //Old data in EEPROM, wipe!
    if (tstVal[3] != 0xff) return 1;
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	8f 3f       	cpi	r24, 0xFF	; 255
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <SelfTest+0x62>
    1d64:	76 c0       	rjmp	.+236    	; 0x1e52 <SelfTest+0x14e>

    //Red BADGER, CAT, EYEs and SCARAB LED on 100% = error
    iLED[BADGER] = 255;
    1d66:	00 91 4b bf 	lds	r16, 0xBF4B	; 0x80bf4b <__bss_end+0x8424>
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	08 52       	subi	r16, 0x28	; 40
    1d6e:	15 4c       	sbci	r17, 0xC5	; 197
    1d70:	d8 01       	movw	r26, r16
    1d72:	8c 93       	st	X, r24
    iLED[CAT] = 255;
    1d74:	e0 91 4a bf 	lds	r30, 0xBF4A	; 0x80bf4a <__bss_end+0x8423>
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	e8 52       	subi	r30, 0x28	; 40
    1d7c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d7e:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 255;    
    1d80:	c0 90 58 bf 	lds	r12, 0xBF58	; 0x80bf58 <__bss_end+0x8431>
    1d84:	2c 2d       	mov	r18, r12
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	48 52       	subi	r20, 0x28	; 40
    1d8c:	55 4c       	sbci	r21, 0xC5	; 197
    1d8e:	6a 01       	movw	r12, r20
    1d90:	da 01       	movw	r26, r20
    1d92:	8c 93       	st	X, r24
    iLED[EYE[R][L]] = 255;
    1d94:	e0 90 59 bf 	lds	r14, 0xBF59	; 0x80bf59 <__bss_end+0x8432>
    1d98:	2e 2d       	mov	r18, r14
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	a9 01       	movw	r20, r18
    1d9e:	48 52       	subi	r20, 0x28	; 40
    1da0:	55 4c       	sbci	r21, 0xC5	; 197
    1da2:	7a 01       	movw	r14, r20
    1da4:	da 01       	movw	r26, r20
    1da6:	8c 93       	st	X, r24
    iLED[SCARAB[R]] = 255;
    1da8:	a0 91 4c bf 	lds	r26, 0xBF4C	; 0x80bf4c <__bss_end+0x8425>
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	a8 52       	subi	r26, 0x28	; 40
    1db0:	b5 4c       	sbci	r27, 0xC5	; 197
    1db2:	8c 93       	st	X, r24

    //Light sensor OK, scarab off
    tstVal[0] = adcPhot&0xff;
    1db4:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    1db8:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1dbe:	99 27       	eor	r25, r25
    1dc0:	20 91 d1 3a 	lds	r18, 0x3AD1	; 0x803ad1 <adcPhot>
    1dc4:	30 91 d2 3a 	lds	r19, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    1dc8:	33 27       	eor	r19, r19
    1dca:	28 17       	cp	r18, r24
    1dcc:	39 07       	cpc	r19, r25
    1dce:	c1 f3       	breq	.-16     	; 0x1dc0 <SelfTest+0xbc>
    iLED[SCARAB[R]] = 0x00;
    1dd0:	1c 92       	st	X, r1

    //Buttons OK (none pressed / shorted), cat forehead off
    while ((adcBtns>>4) < 200) ;
    1dd2:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <adcBtns>
    1dd6:	90 91 cc 3a 	lds	r25, 0x3ACC	; 0x803acc <adcBtns+0x1>
    1dda:	80 38       	cpi	r24, 0x80	; 128
    1ddc:	9c 40       	sbci	r25, 0x0C	; 12
    1dde:	c8 f3       	brcs	.-14     	; 0x1dd2 <SelfTest+0xce>
    iLED[CAT] = 0x00;
    1de0:	10 82       	st	Z, r1
    //Right ROM?
    //ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    //if ((tstVal[0] != 0x3F) || (tstVal[1] != 0x00) || (tstVal[2] != 0xC0) || (tstVal[3] != 0x14)){   //Finalfinalwellmaybenotthatfinal ROM @ 0x3CCC: 0x3F, 0x00, 0xC0, 0x14

    //Righter ROM?
    ExtEERead(0x34D2, 4, 0, (uint8_t *)&tstVal[0]);
    1de2:	9e 01       	movw	r18, r28
    1de4:	2f 5f       	subi	r18, 0xFF	; 255
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	64 e0       	ldi	r22, 0x04	; 4
    1dec:	82 ed       	ldi	r24, 0xD2	; 210
    1dee:	94 e3       	ldi	r25, 0x34	; 52
    1df0:	bf d8       	rcall	.-3714   	; 0xf70 <ExtEERead>
    if ((tstVal[0] != 0x02) || (tstVal[1] != 0xfe) || (tstVal[2] != 0x00) || (tstVal[3] != 0x54)){  //Newestest ROM @ 0x34D2: 0x02, 0xfe, 0x00, 0x54
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	82 30       	cpi	r24, 0x02	; 2
    1df6:	49 f4       	brne	.+18     	; 0x1e0a <SelfTest+0x106>
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	8e 3f       	cpi	r24, 0xFE	; 254
    1dfc:	31 f4       	brne	.+12     	; 0x1e0a <SelfTest+0x106>
    1dfe:	bb 80       	ldd	r11, Y+3	; 0x03
    1e00:	b1 10       	cpse	r11, r1
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <SelfTest+0x106>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	84 35       	cpi	r24, 0x54	; 84
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <SelfTest+0x108>
        while(1);
    }
    
    SelectAuIn();
    1e0a:	ff cf       	rjmp	.-2      	; 0x1e0a <SelfTest+0x106>
    1e0c:	04 d9       	rcall	.-3576   	; 0x1016 <SelectAuIn>
    //Audio in/out OK, eyes off
    while ((auIn < 0x78) || (auIn > 0x88)) ;
    1e0e:	80 91 d7 3a 	lds	r24, 0x3AD7	; 0x803ad7 <auIn>
    1e12:	88 37       	cpi	r24, 0x78	; 120
    1e14:	e0 f3       	brcs	.-8      	; 0x1e0e <SelfTest+0x10a>
    1e16:	80 91 d7 3a 	lds	r24, 0x3AD7	; 0x803ad7 <auIn>
    1e1a:	89 38       	cpi	r24, 0x89	; 137
    1e1c:	c0 f7       	brcc	.-16     	; 0x1e0e <SelfTest+0x10a>
    iLED[EYE[R][R]] = 0x00;
    1e1e:	f6 01       	movw	r30, r12
    1e20:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0x00;
    1e22:	d7 01       	movw	r26, r14
    1e24:	1c 92       	st	X, r1
    
    //All ok!
    tstVal[0] = 0xA5;
    1e26:	85 ea       	ldi	r24, 0xA5	; 165
    1e28:	89 83       	std	Y+1, r24	; 0x01
    tstVal[1] = adcTemp>>8;
    1e2a:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1e2e:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    tstVal[2] = adcTemp&0xff;
    1e34:	80 91 02 3b 	lds	r24, 0x3B02	; 0x803b02 <adcTemp>
    1e38:	90 91 03 3b 	lds	r25, 0x3B03	; 0x803b03 <adcTemp+0x1>
    1e3c:	8b 83       	std	Y+3, r24	; 0x03

    EEWrite(BOOTCHK, &tstVal[0], 3);
    1e3e:	43 e0       	ldi	r20, 0x03	; 3
    1e40:	be 01       	movw	r22, r28
    1e42:	6f 5f       	subi	r22, 0xFF	; 255
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	84 e1       	ldi	r24, 0x14	; 20
    1e48:	51 d8       	rcall	.-3934   	; 0xeec <EEWrite>
    iLED[BADGER] = 0x08;
    1e4a:	88 e0       	ldi	r24, 0x08	; 8
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 83       	st	Z, r24
    return 0;
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <SelfTest+0x152>
        calTemp |= tstVal[2];
        return 0; 
    } 

    //Old data in EEPROM, wipe!
    if (tstVal[3] != 0xff) return 1;
    1e52:	bb 24       	eor	r11, r11
    1e54:	b3 94       	inc	r11
    tstVal[2] = adcTemp&0xff;

    EEWrite(BOOTCHK, &tstVal[0], 3);
    iLED[BADGER] = 0x08;
    return 0;
}
    1e56:	8b 2d       	mov	r24, r11
    1e58:	24 96       	adiw	r28, 0x04	; 4
    1e5a:	e9 e0       	ldi	r30, 0x09	; 9
    1e5c:	0c 94 86 1f 	jmp	0x3f0c	; 0x3f0c <__epilogue_restores__+0x12>

00001e60 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1e60:	cf 93       	push	r28
    1e62:	c8 2f       	mov	r28, r24
    WingBar(0,0);
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	35 db       	rcall	.-2454   	; 0x14d4 <WingBar>
    if (val==0)
    1e6a:	cc 23       	and	r28, r28
    1e6c:	51 f1       	breq	.+84     	; 0x1ec2 <simonLed+0x62>
        return;

    if ((effect & 0xffe0)==0)
    1e6e:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <effect>
    1e72:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <effect+0x1>
    1e76:	80 7e       	andi	r24, 0xE0	; 224
    1e78:	89 2b       	or	r24, r25
    1e7a:	51 f4       	brne	.+20     	; 0x1e90 <simonLed+0x30>
        effect = 0x13f + ((val-1)<<5);
    1e7c:	20 e2       	ldi	r18, 0x20	; 32
    1e7e:	c2 9f       	mul	r28, r18
    1e80:	c0 01       	movw	r24, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	81 5e       	subi	r24, 0xE1	; 225
    1e86:	9e 4f       	sbci	r25, 0xFE	; 254
    1e88:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    1e8c:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>

    if (val == 1) {                     //
    1e90:	c1 30       	cpi	r28, 0x01	; 1
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <simonLed+0x3a>
        iLED[WING[L][4]] = dimValue;
    1e94:	e0 91 57 bf 	lds	r30, 0xBF57	; 0x80bf57 <__bss_end+0x8430>
    1e98:	0e c0       	rjmp	.+28     	; 0x1eb6 <simonLed+0x56>
    } else if (val == 2) {              // I
    1e9a:	c2 30       	cpi	r28, 0x02	; 2
    1e9c:	19 f4       	brne	.+6      	; 0x1ea4 <simonLed+0x44>
        iLED[WING[R][4]] = dimValue;
    1e9e:	e0 91 52 bf 	lds	r30, 0xBF52	; 0x80bf52 <__bss_end+0x842b>
    1ea2:	09 c0       	rjmp	.+18     	; 0x1eb6 <simonLed+0x56>
    } else if (val == 3) {              // II
    1ea4:	c3 30       	cpi	r28, 0x03	; 3
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <simonLed+0x4e>
        iLED[WING[L][2]] = dimValue;
    1ea8:	e0 91 55 bf 	lds	r30, 0xBF55	; 0x80bf55 <__bss_end+0x842e>
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <simonLed+0x56>
    } else if (val == 4) {              // III
    1eae:	c4 30       	cpi	r28, 0x04	; 4
    1eb0:	41 f4       	brne	.+16     	; 0x1ec2 <simonLed+0x62>
        iLED[WING[R][2]] = dimValue;
    1eb2:	e0 91 50 bf 	lds	r30, 0xBF50	; 0x80bf50 <__bss_end+0x8429>
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ebc:	e8 52       	subi	r30, 0x28	; 40
    1ebe:	f5 4c       	sbci	r31, 0xC5	; 197
    1ec0:	80 83       	st	Z, r24
    }
}
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1ece:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    1ed2:	88 23       	and	r24, r24
    1ed4:	21 f0       	breq	.+8      	; 0x1ede <BastetDictates+0x18>
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <BastetDictates+0x16>
    1eda:	6b c1       	rjmp	.+726    	; 0x21b2 <BastetDictates+0x2ec>
    1edc:	0a c0       	rjmp	.+20     	; 0x1ef2 <BastetDictates+0x2c>
        return 0;
    }
    */

    if (TEXT == gameNow)
        if (buttonState!=0xff) {
    1ede:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1ee2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee4:	31 f0       	breq	.+12     	; 0x1ef2 <BastetDictates+0x2c>
            WingBar(0,0);
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	f4 da       	rcall	.-2584   	; 0x14d4 <WingBar>
            gameNow = BASTET;
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <gameNow>
        }

    if (BASTET_BOOT == simonGameState) {
    1ef2:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	0d c0       	rjmp	.+26     	; 0x1f14 <BastetDictates+0x4e>
    1efa:	c4 e7       	ldi	r28, 0x74	; 116
    1efc:	d8 e3       	ldi	r29, 0x38	; 56
    1efe:	00 e8       	ldi	r16, 0x80	; 128
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1f00:	18 e3       	ldi	r17, 0x38	; 56
    1f02:	c6 d8       	rcall	.-3700   	; 0x1090 <lfsr>
    1f04:	83 70       	andi	r24, 0x03	; 3
    1f06:	89 93       	st	Y+, r24
            WingBar(0,0);
            gameNow = BASTET;
        }

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1f08:	0c 17       	cp	r16, r28
    1f0a:	1d 07       	cpc	r17, r29
    1f0c:	d1 f7       	brne	.-12     	; 0x1f02 <BastetDictates+0x3c>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f14:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 f4       	brne	.+36     	; 0x1f40 <BastetDictates+0x7a>
    1f1c:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    1f20:	82 30       	cpi	r24, 0x02	; 2
    1f22:	71 f4       	brne	.+28     	; 0x1f40 <BastetDictates+0x7a>
        simonGameState = BASTET_GAME_INTRO;
    1f24:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
        simonPos = 0;
    1f28:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <simonPos>
        simonInputPos = 0;
    1f2c:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
        simonTimer = 0;
    1f30:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        simonCounter = 0;
    1f34:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
        effect = 0;
    1f38:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
    1f3c:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f40:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	51 f5       	brne	.+84     	; 0x1f9c <BastetDictates+0xd6>
        if (simonTimer > 3) {   // ±? seconds
    1f48:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    1f4c:	84 30       	cpi	r24, 0x04	; 4
    1f4e:	38 f0       	brcs	.+14     	; 0x1f5e <BastetDictates+0x98>
            simonCounter++;
    1f50:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <simonCounter>
            simonTimer = 0;
    1f5a:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        }
        if (simonCounter > 5) {
    1f5e:	e0 91 6f 38 	lds	r30, 0x386F	; 0x80386f <simonCounter>
    1f62:	e6 30       	cpi	r30, 0x06	; 6
    1f64:	58 f0       	brcs	.+22     	; 0x1f7c <BastetDictates+0xb6>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            simonTimer = 0;
    1f6c:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            simonCounter = 0;
    1f70:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            SetHackerLeds(0,0);
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	eb da       	rcall	.-2602   	; 0x1550 <SetHackerLeds>
            return 0;
    1f7a:	1b c1       	rjmp	.+566    	; 0x21b2 <BastetDictates+0x2ec>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	e4 5a       	subi	r30, 0xA4	; 164
    1f80:	f0 44       	sbci	r31, 0x40	; 64
    1f82:	a0 81       	ld	r26, Z
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f8a:	a8 52       	subi	r26, 0x28	; 40
    1f8c:	b5 4c       	sbci	r27, 0xC5	; 197
    1f8e:	8c 93       	st	X, r24
        iLED[HCKR[G][simonCounter]] = 0;
    1f90:	e6 81       	ldd	r30, Z+6	; 0x06
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	e8 52       	subi	r30, 0x28	; 40
    1f96:	f5 4c       	sbci	r31, 0xC5	; 197
    1f98:	10 82       	st	Z, r1
    1f9a:	2a c0       	rjmp	.+84     	; 0x1ff0 <BastetDictates+0x12a>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	41 f5       	brne	.+80     	; 0x1ff0 <BastetDictates+0x12a>
        if (simonTimer > 8) {   // ±.6 second
    1fa0:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    1fa4:	89 30       	cpi	r24, 0x09	; 9
    1fa6:	38 f0       	brcs	.+14     	; 0x1fb6 <BastetDictates+0xf0>
            simonCounter++;
    1fa8:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <simonCounter>
            simonTimer = 0;
    1fb2:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1fb6:	e0 91 6f 38 	lds	r30, 0x386F	; 0x80386f <simonCounter>
    1fba:	80 91 73 38 	lds	r24, 0x3873	; 0x803873 <simonPos>
    1fbe:	8e 17       	cp	r24, r30
    1fc0:	40 f4       	brcc	.+16     	; 0x1fd2 <BastetDictates+0x10c>
            simonInputPos = 0;
    1fc2:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1fc6:	85 e0       	ldi	r24, 0x05	; 5
    1fc8:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            simonLed(0);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	48 df       	rcall	.-368    	; 0x1e60 <simonLed>
    1fd0:	98 c0       	rjmp	.+304    	; 0x2102 <BastetDictates+0x23c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer > 7 ) {
    1fd2:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    1fd6:	88 30       	cpi	r24, 0x08	; 8
    1fd8:	10 f0       	brcs	.+4      	; 0x1fde <BastetDictates+0x118>
            simonLed(0);
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <BastetDictates+0x128>
        } else if (simonTimer > 5) {
    1fde:	86 30       	cpi	r24, 0x06	; 6
    1fe0:	08 f4       	brcc	.+2      	; 0x1fe4 <BastetDictates+0x11e>
    1fe2:	92 c0       	rjmp	.+292    	; 0x2108 <BastetDictates+0x242>
            simonLed(simonState[simonCounter] + 1);
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	ec 58       	subi	r30, 0x8C	; 140
    1fe8:	f7 4c       	sbci	r31, 0xC7	; 199
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	38 df       	rcall	.-400    	; 0x1e60 <simonLed>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1ff0:	c0 91 6e 38 	lds	r28, 0x386E	; 0x80386e <simonGameState>
    1ff4:	c5 30       	cpi	r28, 0x05	; 5
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <BastetDictates+0x134>
    1ff8:	87 c0       	rjmp	.+270    	; 0x2108 <BastetDictates+0x242>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1ffa:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1ffe:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    2002:	98 17       	cp	r25, r24
    2004:	09 f4       	brne	.+2      	; 0x2008 <BastetDictates+0x142>
    2006:	72 c0       	rjmp	.+228    	; 0x20ec <BastetDictates+0x226>
            if (simonWait == 0 && buttonState < 4) {
    2008:	90 91 70 38 	lds	r25, 0x3870	; 0x803870 <simonWait>
    200c:	91 11       	cpse	r25, r1
    200e:	70 c0       	rjmp	.+224    	; 0x20f0 <BastetDictates+0x22a>
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	08 f0       	brcs	.+2      	; 0x2016 <BastetDictates+0x150>
    2014:	6d c0       	rjmp	.+218    	; 0x20f0 <BastetDictates+0x22a>
                simonWait = 1;
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	90 93 70 38 	sts	0x3870, r25	; 0x803870 <simonWait>
                simonTimer = 0;
    201c:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                simonLed(buttonState+1);
    2020:	8f 5f       	subi	r24, 0xFF	; 255
    2022:	1e df       	rcall	.-452    	; 0x1e60 <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2024:	84 e0       	ldi	r24, 0x04	; 4
    2026:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    202a:	c0 93 3d 38 	sts	0x383D, r28	; 0x80383d <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    202e:	80 91 72 38 	lds	r24, 0x3872	; 0x803872 <simonInputPos>
    2032:	e8 2f       	mov	r30, r24
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	ec 58       	subi	r30, 0x8C	; 140
    2038:	f7 4c       	sbci	r31, 0xC7	; 199
    203a:	20 81       	ld	r18, Z
    203c:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    2040:	29 13       	cpse	r18, r25
    2042:	1d c0       	rjmp	.+58     	; 0x207e <BastetDictates+0x1b8>
                    simonInputPos++;
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	80 93 72 38 	sts	0x3872, r24	; 0x803872 <simonInputPos>
                    if (simonInputPos > simonPos) {
    204a:	e0 91 73 38 	lds	r30, 0x3873	; 0x803873 <simonPos>
    204e:	e8 17       	cp	r30, r24
    2050:	a8 f5       	brcc	.+106    	; 0x20bc <BastetDictates+0x1f6>
                        simonPos++;
    2052:	ef 5f       	subi	r30, 0xFF	; 255
    2054:	e0 93 73 38 	sts	0x3873, r30	; 0x803873 <simonPos>
                        simonTimer = 0;
    2058:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                        simonCounter = 0;
    205c:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    2060:	e1 30       	cpi	r30, 0x01	; 1
    2062:	59 f0       	breq	.+22     	; 0x207a <BastetDictates+0x1b4>
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2064:	e6 95       	lsr	r30
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	e4 5a       	subi	r30, 0xA4	; 164
    206a:	f0 44       	sbci	r31, 0x40	; 64
    206c:	e5 81       	ldd	r30, Z+5	; 0x05
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2074:	e8 52       	subi	r30, 0x28	; 40
    2076:	f5 4c       	sbci	r31, 0xC5	; 197
    2078:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	1d c0       	rjmp	.+58     	; 0x20b8 <BastetDictates+0x1f2>
                    }
                } else {
                    effect = 32|1;
    207e:	81 e2       	ldi	r24, 0x21	; 33
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    2086:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    208a:	ac e5       	ldi	r26, 0x5C	; 92
    208c:	bf eb       	ldi	r27, 0xBF	; 191
    208e:	82 e6       	ldi	r24, 0x62	; 98
    2090:	9f eb       	ldi	r25, 0xBF	; 191
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    2092:	ed 91       	ld	r30, X+
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    209a:	e8 52       	subi	r30, 0x28	; 40
    209c:	f5 4c       	sbci	r31, 0xC5	; 197
    209e:	20 83       	st	Z, r18
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32|1;
                    for (uint8_t n=0; n<6; n++){
    20a0:	8a 17       	cp	r24, r26
    20a2:	9b 07       	cpc	r25, r27
    20a4:	b1 f7       	brne	.-20     	; 0x2092 <BastetDictates+0x1cc>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    20a6:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
                    simonPos = 0;
    20aa:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <simonPos>
                    simonTimer = 0;
    20ae:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                    simonCounter = 0;
    20b2:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    20b6:	86 e0       	ldi	r24, 0x06	; 6
    20b8:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    20bc:	80 91 72 38 	lds	r24, 0x3872	; 0x803872 <simonInputPos>
    20c0:	8c 30       	cpi	r24, 0x0C	; 12
    20c2:	20 f4       	brcc	.+8      	; 0x20cc <BastetDictates+0x206>
    20c4:	80 91 73 38 	lds	r24, 0x3873	; 0x803873 <simonPos>
    20c8:	8c 30       	cpi	r24, 0x0C	; 12
    20ca:	90 f0       	brcs	.+36     	; 0x20f0 <BastetDictates+0x22a>
                    effect = 64|2;
    20cc:	82 e4       	ldi	r24, 0x42	; 66
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    20d4:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20d8:	8a e7       	ldi	r24, 0x7A	; 122
    20da:	e0 d8       	rcall	.-3648   	; 0x129c <UpdateState>
                    simonTimer = 0;
    20dc:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
                    simonCounter = 0;
    20e0:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    20e4:	87 e0       	ldi	r24, 0x07	; 7
    20e6:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <simonNextGameState>
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <BastetDictates+0x22a>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20ec:	10 92 70 38 	sts	0x3870, r1	; 0x803870 <simonWait>
        }

        if (simonTimer == 75) {    // did you forget about Bastet?
    20f0:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    20f4:	8b 34       	cpi	r24, 0x4B	; 75
    20f6:	41 f4       	brne	.+16     	; 0x2108 <BastetDictates+0x242>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            simonCounter = 0;
    20fe:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            simonTimer = 0;
    2102:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            return 0;
    2106:	55 c0       	rjmp	.+170    	; 0x21b2 <BastetDictates+0x2ec>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    2108:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    210c:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 3) {
    210e:	81 f4       	brne	.+32     	; 0x2130 <BastetDictates+0x26a>
    2110:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    2114:	83 30       	cpi	r24, 0x03	; 3
            // on to next state after ±.2 second
            simonLed(0);  // LEDs off
    2116:	60 f0       	brcs	.+24     	; 0x2130 <BastetDictates+0x26a>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	a2 de       	rcall	.-700    	; 0x1e60 <simonLed>
            simonWait = 0;
    211c:	10 92 70 38 	sts	0x3870, r1	; 0x803870 <simonWait>
            simonTimer = 0;
    2120:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            simonCounter = 0;
    2124:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            simonGameState = simonNextGameState;
    2128:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <simonNextGameState>
    212c:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2130:	80 91 6e 38 	lds	r24, 0x386E	; 0x80386e <simonGameState>
    2134:	86 30       	cpi	r24, 0x06	; 6
    2136:	61 f5       	brne	.+88     	; 0x2190 <BastetDictates+0x2ca>
        if (simonTimer > 3) {
    2138:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    213c:	84 30       	cpi	r24, 0x04	; 4
    213e:	38 f0       	brcs	.+14     	; 0x214e <BastetDictates+0x288>
            simonCounter++;
    2140:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    2144:	8f 5f       	subi	r24, 0xFF	; 255
    2146:	80 93 6f 38 	sts	0x386F, r24	; 0x80386f <simonCounter>
            simonTimer = 0;
    214a:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
        }
        if (simonCounter > 5) {
    214e:	80 91 6f 38 	lds	r24, 0x386F	; 0x80386f <simonCounter>
    2152:	86 30       	cpi	r24, 0x06	; 6
    2154:	60 f0       	brcs	.+24     	; 0x216e <BastetDictates+0x2a8>
            simonTimer = 0;
    2156:	10 92 71 38 	sts	0x3871, r1	; 0x803871 <simonTimer>
            simonCounter = 0;
    215a:	10 92 6f 38 	sts	0x386F, r1	; 0x80386f <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    215e:	87 e0       	ldi	r24, 0x07	; 7
    2160:	80 93 6e 38 	sts	0x386E, r24	; 0x80386e <simonGameState>
            effect = 0;
    2164:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <effect>
    2168:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <effect+0x1>
            return 0;
    216c:	22 c0       	rjmp	.+68     	; 0x21b2 <BastetDictates+0x2ec>
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    216e:	e5 e0       	ldi	r30, 0x05	; 5
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	e8 1b       	sub	r30, r24
    2174:	f1 09       	sbc	r31, r1
    2176:	e4 5a       	subi	r30, 0xA4	; 164
    2178:	f0 44       	sbci	r31, 0x40	; 64
    217a:	a0 81       	ld	r26, Z
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	a8 52       	subi	r26, 0x28	; 40
    2180:	b5 4c       	sbci	r27, 0xC5	; 197
    2182:	1c 92       	st	X, r1
        iLED[HCKR[G][5-simonCounter]] = 0;
    2184:	e6 81       	ldd	r30, Z+6	; 0x06
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	e8 52       	subi	r30, 0x28	; 40
    218a:	f5 4c       	sbci	r31, 0xC5	; 197
    218c:	10 82       	st	Z, r1
    218e:	0c c0       	rjmp	.+24     	; 0x21a8 <BastetDictates+0x2e2>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    2190:	87 30       	cpi	r24, 0x07	; 7
    2192:	51 f4       	brne	.+20     	; 0x21a8 <BastetDictates+0x2e2>
        simonInputPos = 0;
    2194:	10 92 72 38 	sts	0x3872, r1	; 0x803872 <simonInputPos>
        simonPos = 0;
    2198:	10 92 73 38 	sts	0x3873, r1	; 0x803873 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツ
    219c:	10 92 6e 38 	sts	0x386E, r1	; 0x80386e <simonGameState>
        gameNow = TEXT;
    21a0:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <gameNow>
        simonLed(0);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	5c de       	rcall	.-840    	; 0x1e60 <simonLed>
    }

    ++simonTimer;
    21a8:	80 91 71 38 	lds	r24, 0x3871	; 0x803871 <simonTimer>
    21ac:	8f 5f       	subi	r24, 0xFF	; 255
    21ae:	80 93 71 38 	sts	0x3871, r24	; 0x803871 <simonTimer>
    return 0;
}
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	08 95       	ret

000021be <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    21be:	a2 e1       	ldi	r26, 0x12	; 18
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 ee       	ldi	r30, 0xE5	; 229
    21c4:	f0 e1       	ldi	r31, 0x10	; 16
    21c6:	0c 94 73 1f 	jmp	0x3ee6	; 0x3ee6 <__prologue_saves__+0x1e>
    21ca:	8a 8b       	std	Y+18, r24	; 0x12
    21cc:	80 e1       	ldi	r24, 0x10	; 16
    21ce:	ee e2       	ldi	r30, 0x2E	; 46
    21d0:	ff eb       	ldi	r31, 0xBF	; 191
    21d2:	de 01       	movw	r26, r28
    21d4:	11 96       	adiw	r26, 0x01	; 1
    21d6:	01 90       	ld	r0, Z+
    21d8:	0d 92       	st	X+, r0
    21da:	8a 95       	dec	r24
    21dc:	e1 f7       	brne	.-8      	; 0x21d6 <Cheat+0x18>
    21de:	fe 01       	movw	r30, r28
    21e0:	31 96       	adiw	r30, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	21 91       	ld	r18, Z+
    21e8:	31 91       	ld	r19, Z+
    21ea:	26 17       	cp	r18, r22
    21ec:	37 07       	cpc	r19, r23
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <Cheat+0x34>
    21f0:	89 2f       	mov	r24, r25
    21f2:	9f 5f       	subi	r25, 0xFF	; 255
    21f4:	98 30       	cpi	r25, 0x08	; 8
    21f6:	b9 f7       	brne	.-18     	; 0x21e6 <Cheat+0x28>
    21f8:	88 30       	cpi	r24, 0x08	; 8
    21fa:	10 f0       	brcs	.+4      	; 0x2200 <Cheat+0x42>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <Cheat+0x6a>
    2200:	18 e1       	ldi	r17, 0x18	; 24
    2202:	18 0f       	add	r17, r24
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	be 01       	movw	r22, r28
    2208:	6f 5e       	subi	r22, 0xEF	; 239
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	81 2f       	mov	r24, r17
    220e:	0e 94 66 07 	call	0xecc	; 0xecc <EERead>
    2212:	89 89       	ldd	r24, Y+17	; 0x11
    2214:	8f 3f       	cpi	r24, 0xFF	; 255
    2216:	91 f7       	brne	.-28     	; 0x21fc <Cheat+0x3e>
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	be 01       	movw	r22, r28
    221c:	6e 5e       	subi	r22, 0xEE	; 238
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	81 2f       	mov	r24, r17
    2222:	0e 94 76 07 	call	0xeec	; 0xeec <EEWrite>
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	62 96       	adiw	r28, 0x12	; 18
    222a:	e3 e0       	ldi	r30, 0x03	; 3
    222c:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <__epilogue_restores__+0x1e>

00002230 <UnflipData>:
    2230:	26 2f       	mov	r18, r22
    2232:	fb 01       	movw	r30, r22
    2234:	35 e5       	ldi	r19, 0x55	; 85
    2236:	9e 2f       	mov	r25, r30
    2238:	92 1b       	sub	r25, r18
    223a:	98 17       	cp	r25, r24
    223c:	28 f4       	brcc	.+10     	; 0x2248 <UnflipData+0x18>
    223e:	90 81       	ld	r25, Z
    2240:	92 95       	swap	r25
    2242:	93 27       	eor	r25, r19
    2244:	91 93       	st	Z+, r25
    2246:	f7 cf       	rjmp	.-18     	; 0x2236 <UnflipData+0x6>
    2248:	08 95       	ret

0000224a <ClearTxAfter>:
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	88 30       	cpi	r24, 0x08	; 8
    224e:	30 f4       	brcc	.+12     	; 0x225c <ClearTxAfter+0x12>
    2250:	e8 2f       	mov	r30, r24
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	e6 5a       	subi	r30, 0xA6	; 166
    2256:	f5 4c       	sbci	r31, 0xC5	; 197
    2258:	10 82       	st	Z, r1
    225a:	f7 cf       	rjmp	.-18     	; 0x224a <ClearTxAfter>
    225c:	08 95       	ret

0000225e <StartsWith>:
    225e:	ac 01       	movw	r20, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	e9 2f       	mov	r30, r25
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	da 01       	movw	r26, r20
    2268:	ae 0f       	add	r26, r30
    226a:	bf 1f       	adc	r27, r31
    226c:	3c 91       	ld	r19, X
    226e:	e6 0f       	add	r30, r22
    2270:	f7 1f       	adc	r31, r23
    2272:	31 11       	cpse	r19, r1
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <StartsWith+0x22>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 81       	ld	r25, Z
    227a:	99 23       	and	r25, r25
    227c:	49 f0       	breq	.+18     	; 0x2290 <StartsWith+0x32>
    227e:	07 c0       	rjmp	.+14     	; 0x228e <StartsWith+0x30>
    2280:	20 81       	ld	r18, Z
    2282:	22 23       	and	r18, r18
    2284:	c1 f3       	breq	.-16     	; 0x2276 <StartsWith+0x18>
    2286:	32 13       	cpse	r19, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <StartsWith+0x30>
    228a:	9f 5f       	subi	r25, 0xFF	; 255
    228c:	ea cf       	rjmp	.-44     	; 0x2262 <StartsWith+0x4>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	08 95       	ret

00002292 <PrepareSending>:
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	fc 01       	movw	r30, r24
    2298:	61 15       	cp	r22, r1
    229a:	71 05       	cpc	r23, r1
    229c:	59 f1       	breq	.+86     	; 0x22f4 <PrepareSending+0x62>
    229e:	a2 e6       	ldi	r26, 0x62	; 98
    22a0:	ba e3       	ldi	r27, 0x3A	; 58
    22a2:	ca e5       	ldi	r28, 0x5A	; 90
    22a4:	da e3       	ldi	r29, 0x3A	; 58
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	9f ef       	ldi	r25, 0xFF	; 255
    22aa:	6f 3f       	cpi	r22, 0xFF	; 255
    22ac:	71 05       	cpc	r23, r1
    22ae:	69 f0       	breq	.+26     	; 0x22ca <PrepareSending+0x38>
    22b0:	60 f0       	brcs	.+24     	; 0x22ca <PrepareSending+0x38>
    22b2:	ed 93       	st	X+, r30
    22b4:	fd 93       	st	X+, r31
    22b6:	99 93       	st	Y+, r25
    22b8:	e1 50       	subi	r30, 0x01	; 1
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	6f 5f       	subi	r22, 0xFF	; 255
    22be:	71 09       	sbc	r23, r1
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	87 30       	cpi	r24, 0x07	; 7
    22c4:	91 f7       	brne	.-28     	; 0x22aa <PrepareSending+0x18>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	1e c0       	rjmp	.+60     	; 0x2306 <PrepareSending+0x74>
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	d9 01       	movw	r26, r18
    22d0:	aa 0f       	add	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	ae 59       	subi	r26, 0x9E	; 158
    22d6:	b5 4c       	sbci	r27, 0xC5	; 197
    22d8:	ed 93       	st	X+, r30
    22da:	fc 93       	st	X, r31
    22dc:	6f 3f       	cpi	r22, 0xFF	; 255
    22de:	71 05       	cpc	r23, r1
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <PrepareSending+0x54>
    22e2:	6e ef       	ldi	r22, 0xFE	; 254
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	f9 01       	movw	r30, r18
    22e8:	e6 5a       	subi	r30, 0xA6	; 166
    22ea:	f5 4c       	sbci	r31, 0xC5	; 197
    22ec:	60 83       	st	Z, r22
    22ee:	40 93 58 3a 	sts	0x3A58, r20	; 0x803a58 <txTypeNow>
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <PrepareSending+0x6c>
    22f4:	10 92 62 3a 	sts	0x3A62, r1	; 0x803a62 <txAddrList>
    22f8:	10 92 63 3a 	sts	0x3A63, r1	; 0x803a63 <txAddrList+0x1>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	a5 df       	rcall	.-182    	; 0x224a <ClearTxAfter>
    2300:	10 92 59 3a 	sts	0x3A59, r1	; 0x803a59 <txAddrNow>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	f9 01       	movw	r30, r18
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	e3 5d       	subi	r30, 0xD3	; 211
    231c:	f6 4c       	sbci	r31, 0xC6	; 198
    231e:	a9 e5       	ldi	r26, 0x59	; 89
    2320:	ba e7       	ldi	r27, 0x7A	; 122
    2322:	a0 83       	st	Z, r26
    2324:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2326:	f9 01       	movw	r30, r18
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	e3 59       	subi	r30, 0x93	; 147
    232e:	f6 4c       	sbci	r31, 0xC6	; 198
    2330:	62 e0       	ldi	r22, 0x02	; 2
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	60 83       	st	Z, r22
    2336:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2338:	22 0f       	add	r18, r18
    233a:	33 1f       	adc	r19, r19
    233c:	f9 01       	movw	r30, r18
    233e:	e3 55       	subi	r30, 0x53	; 83
    2340:	f6 4c       	sbci	r31, 0xC6	; 198
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	40 83       	st	Z, r20
    2348:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    234a:	21 e0       	ldi	r18, 0x01	; 1
    234c:	28 0f       	add	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	f9 01       	movw	r30, r18
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	e3 5d       	subi	r30, 0xD3	; 211
    2358:	f6 4c       	sbci	r31, 0xC6	; 198
    235a:	c2 e6       	ldi	r28, 0x62	; 98
    235c:	da e7       	ldi	r29, 0x7A	; 122
    235e:	c0 83       	st	Z, r28
    2360:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2362:	f9 01       	movw	r30, r18
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	e3 59       	subi	r30, 0x93	; 147
    236a:	f6 4c       	sbci	r31, 0xC6	; 198
    236c:	cc e0       	ldi	r28, 0x0C	; 12
    236e:	d0 e0       	ldi	r29, 0x00	; 0
    2370:	c0 83       	st	Z, r28
    2372:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	f9 01       	movw	r30, r18
    237a:	e3 55       	subi	r30, 0x53	; 83
    237c:	f6 4c       	sbci	r31, 0xC6	; 198
    237e:	40 83       	st	Z, r20
    2380:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2382:	e2 e0       	ldi	r30, 0x02	; 2
    2384:	e8 0f       	add	r30, r24
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	e3 5d       	subi	r30, 0xD3	; 211
    238e:	f6 4c       	sbci	r31, 0xC6	; 198
    2390:	20 ef       	ldi	r18, 0xF0	; 240
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	20 83       	st	Z, r18
    2396:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2398:	23 e0       	ldi	r18, 0x03	; 3
    239a:	28 0f       	add	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	f9 01       	movw	r30, r18
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	e3 5d       	subi	r30, 0xD3	; 211
    23a6:	f6 4c       	sbci	r31, 0xC6	; 198
    23a8:	a0 83       	st	Z, r26
    23aa:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23ac:	f9 01       	movw	r30, r18
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e3 59       	subi	r30, 0x93	; 147
    23b4:	f6 4c       	sbci	r31, 0xC6	; 198
    23b6:	60 83       	st	Z, r22
    23b8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23ba:	22 0f       	add	r18, r18
    23bc:	33 1f       	adc	r19, r19
    23be:	f9 01       	movw	r30, r18
    23c0:	e3 55       	subi	r30, 0x53	; 83
    23c2:	f6 4c       	sbci	r31, 0xC6	; 198
    23c4:	40 83       	st	Z, r20
    23c6:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23c8:	24 e0       	ldi	r18, 0x04	; 4
    23ca:	28 0f       	add	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	f9 01       	movw	r30, r18
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	e3 5d       	subi	r30, 0xD3	; 211
    23d6:	f6 4c       	sbci	r31, 0xC6	; 198
    23d8:	a5 e5       	ldi	r26, 0x55	; 85
    23da:	ba e7       	ldi	r27, 0x7A	; 122
    23dc:	a0 83       	st	Z, r26
    23de:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23e0:	f9 01       	movw	r30, r18
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	e3 59       	subi	r30, 0x93	; 147
    23e8:	f6 4c       	sbci	r31, 0xC6	; 198
    23ea:	60 83       	st	Z, r22
    23ec:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23ee:	22 0f       	add	r18, r18
    23f0:	33 1f       	adc	r19, r19
    23f2:	f9 01       	movw	r30, r18
    23f4:	e3 55       	subi	r30, 0x53	; 83
    23f6:	f6 4c       	sbci	r31, 0xC6	; 198
    23f8:	40 83       	st	Z, r20
    23fa:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23fc:	8b 5f       	subi	r24, 0xFB	; 251
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	2c 97       	sbiw	r28, 0x0c	; 12
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	7c 01       	movw	r14, r24
    2422:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2424:	9e 01       	movw	r18, r28
    2426:	2f 5f       	subi	r18, 0xFF	; 255
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	6c e0       	ldi	r22, 0x0C	; 12
    242e:	80 96       	adiw	r24, 0x20	; 32
    2430:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	98 27       	eor	r25, r24
    243a:	89 27       	eor	r24, r25
    243c:	98 27       	eor	r25, r24
    243e:	80 96       	adiw	r24, 0x20	; 32
    2440:	f8 01       	movw	r30, r16
    2442:	80 83       	st	Z, r24
    2444:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	98 27       	eor	r25, r24
    244c:	89 27       	eor	r24, r25
    244e:	98 27       	eor	r25, r24
    2450:	80 96       	adiw	r24, 0x20	; 32
    2452:	82 83       	std	Z+2, r24	; 0x02
    2454:	93 83       	std	Z+3, r25	; 0x03
    2456:	de 01       	movw	r26, r28
    2458:	15 96       	adiw	r26, 0x05	; 5
    245a:	34 96       	adiw	r30, 0x04	; 4
    245c:	c8 01       	movw	r24, r16
    245e:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2460:	2d 91       	ld	r18, X+
    2462:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2464:	e8 17       	cp	r30, r24
    2466:	f9 07       	cpc	r31, r25
    2468:	d9 f7       	brne	.-10     	; 0x2460 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    246a:	fc e2       	ldi	r31, 0x2C	; 44
    246c:	ef 0e       	add	r14, r31
    246e:	f1 1c       	adc	r15, r1
    2470:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2472:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2474:	9e 01       	movw	r18, r28
    2476:	2f 5f       	subi	r18, 0xFF	; 255
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	63 e0       	ldi	r22, 0x03	; 3
    247e:	c7 01       	movw	r24, r14
    2480:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	98 27       	eor	r25, r24
    248a:	89 27       	eor	r24, r25
    248c:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    248e:	97 01       	movw	r18, r14
    2490:	2e 5f       	subi	r18, 0xFE	; 254
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2494:	43 e0       	ldi	r20, 0x03	; 3
    2496:	4d 15       	cp	r20, r13
    2498:	80 f4       	brcc	.+32     	; 0x24ba <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    249a:	ac 01       	movw	r20, r24
    249c:	41 50       	subi	r20, 0x01	; 1
    249e:	51 09       	sbc	r21, r1
    24a0:	f8 01       	movw	r30, r16
    24a2:	42 8f       	std	Z+26, r20	; 0x1a
    24a4:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    24a6:	f3 e0       	ldi	r31, 0x03	; 3
    24a8:	ef 0e       	add	r14, r31
    24aa:	f1 1c       	adc	r15, r1
    24ac:	f8 01       	movw	r30, r16
    24ae:	e4 86       	std	Z+12, r14	; 0x0c
    24b0:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    24b2:	4b 81       	ldd	r20, Y+3	; 0x03
    24b4:	f5 01       	movw	r30, r10
    24b6:	44 a3       	std	Z+36, r20	; 0x24
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    24ba:	f8 01       	movw	r30, r16
    24bc:	82 8f       	std	Z+26, r24	; 0x1a
    24be:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    24c0:	24 87       	std	Z+12, r18	; 0x0c
    24c2:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    24c4:	7c 01       	movw	r14, r24
    24c6:	e2 0e       	add	r14, r18
    24c8:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24ca:	d3 94       	inc	r13
    24cc:	0e 5f       	subi	r16, 0xFE	; 254
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	ff ef       	ldi	r31, 0xFF	; 255
    24d2:	af 1a       	sub	r10, r31
    24d4:	bf 0a       	sbc	r11, r31
    24d6:	47 e0       	ldi	r20, 0x07	; 7
    24d8:	d4 12       	cpse	r13, r20
    24da:	cc cf       	rjmp	.-104    	; 0x2474 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24dc:	2c 96       	adiw	r28, 0x0c	; 12
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	08 95       	ret

000024f6 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24f6:	a0 e2       	ldi	r26, 0x20	; 32
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e1 e8       	ldi	r30, 0x81	; 129
    24fc:	f2 e1       	ldi	r31, 0x12	; 18
    24fe:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__prologue_saves__+0x14>
    2502:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2504:	7c 01       	movw	r14, r24
    2506:	20 e2       	ldi	r18, 0x20	; 32
    2508:	e2 0e       	add	r14, r18
    250a:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    250c:	9e 01       	movw	r18, r28
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	8c 96       	adiw	r24, 0x2c	; 44
    2518:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    251c:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    251e:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2520:	11 23       	and	r17, r17
    2522:	59 f1       	breq	.+86     	; 0x257a <CheckLetter+0x84>
    2524:	01 2f       	mov	r16, r17
    2526:	11 32       	cpi	r17, 0x21	; 33
    2528:	08 f0       	brcs	.+2      	; 0x252c <CheckLetter+0x36>
    252a:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    252c:	9e 01       	movw	r18, r28
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	60 2f       	mov	r22, r16
    2536:	c7 01       	movw	r24, r14
    2538:	0e 96       	adiw	r24, 0x0e	; 14
    253a:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
    253e:	fe 01       	movw	r30, r28
    2540:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2542:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2544:	dd 20       	and	r13, r13
    2546:	61 f0       	breq	.+24     	; 0x2560 <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2548:	e1 e0       	ldi	r30, 0x01	; 1
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	ec 0f       	add	r30, r28
    254e:	fd 1f       	adc	r31, r29
    2550:	e8 0f       	add	r30, r24
    2552:	f1 1d       	adc	r31, r1
    2554:	90 81       	ld	r25, Z
    2556:	90 62       	ori	r25, 0x20	; 32
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	9c 11       	cpse	r25, r12
    255c:	0e c0       	rjmp	.+28     	; 0x257a <CheckLetter+0x84>
    255e:	0e c0       	rjmp	.+28     	; 0x257c <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    2560:	91 91       	ld	r25, Z+
    2562:	dd 24       	eor	r13, r13
    2564:	d3 94       	inc	r13
    2566:	9b 35       	cpi	r25, 0x5B	; 91
    2568:	09 f0       	breq	.+2      	; 0x256c <CheckLetter+0x76>
    256a:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	80 17       	cp	r24, r16
    2570:	48 f3       	brcs	.-46     	; 0x2544 <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2572:	e0 0e       	add	r14, r16
    2574:	f1 1c       	adc	r15, r1
        x -= max;
    2576:	10 1b       	sub	r17, r16
    2578:	d3 cf       	rjmp	.-90     	; 0x2520 <CheckLetter+0x2a>
    }
    return 0;
    257a:	80 e0       	ldi	r24, 0x00	; 0
}
    257c:	a0 96       	adiw	r28, 0x20	; 32
    257e:	e8 e0       	ldi	r30, 0x08	; 8
    2580:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x14>

00002584 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2584:	af 92       	push	r10
    2586:	bf 92       	push	r11
    2588:	df 92       	push	r13
    258a:	ef 92       	push	r14
    258c:	ff 92       	push	r15
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	00 d0       	rcall	.+0      	; 0x2598 <FindChild+0x14>
    2598:	00 d0       	rcall	.+0      	; 0x259a <FindChild+0x16>
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	d6 2e       	mov	r13, r22
    25a0:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    25a2:	9e 01       	movw	r18, r28
    25a4:	2f 5f       	subi	r18, 0xFF	; 255
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	64 e0       	ldi	r22, 0x04	; 4
    25ac:	80 96       	adiw	r24, 0x20	; 32
    25ae:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
    25b2:	e9 80       	ldd	r14, Y+1	; 0x01
    25b4:	fa 80       	ldd	r15, Y+2	; 0x02
    25b6:	fe 24       	eor	r15, r14
    25b8:	ef 24       	eor	r14, r15
    25ba:	fe 24       	eor	r15, r14
    25bc:	0b 81       	ldd	r16, Y+3	; 0x03
    25be:	1c 81       	ldd	r17, Y+4	; 0x04
    25c0:	10 27       	eor	r17, r16
    25c2:	01 27       	eor	r16, r17
    25c4:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25c6:	0e 15       	cp	r16, r14
    25c8:	1f 05       	cpc	r17, r15
    25ca:	48 f5       	brcc	.+82     	; 0x261e <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25cc:	a0 16       	cp	r10, r16
    25ce:	b1 06       	cpc	r11, r17
    25d0:	60 f0       	brcs	.+24     	; 0x25ea <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25d2:	9e 01       	movw	r18, r28
    25d4:	2f 5f       	subi	r18, 0xFF	; 255
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	c8 01       	movw	r24, r16
    25de:	80 96       	adiw	r24, 0x20	; 32
    25e0:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
    25e4:	09 81       	ldd	r16, Y+1	; 0x01
    25e6:	1a 81       	ldd	r17, Y+2	; 0x02
    25e8:	eb cf       	rjmp	.-42     	; 0x25c0 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25ea:	9e 01       	movw	r18, r28
    25ec:	2f 5f       	subi	r18, 0xFF	; 255
    25ee:	3f 4f       	sbci	r19, 0xFF	; 255
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	c8 01       	movw	r24, r16
    25f6:	85 96       	adiw	r24, 0x25	; 37
    25f8:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	81 11       	cpse	r24, r1
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2602:	d1 10       	cpse	r13, r1
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <FindChild+0x8e>
    2606:	0e c0       	rjmp	.+28     	; 0x2624 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2608:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
    260c:	81 11       	cpse	r24, r1
    260e:	f9 cf       	rjmp	.-14     	; 0x2602 <FindChild+0x7e>
    2610:	e0 cf       	rjmp	.-64     	; 0x25d2 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2612:	6d 2d       	mov	r22, r13
    2614:	c8 01       	movw	r24, r16
    2616:	6f df       	rcall	.-290    	; 0x24f6 <CheckLetter>
    2618:	88 23       	and	r24, r24
    261a:	d9 f2       	breq	.-74     	; 0x25d2 <FindChild+0x4e>
    261c:	03 c0       	rjmp	.+6      	; 0x2624 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <FindChild+0xa2>
    2624:	c8 01       	movw	r24, r16
}
    2626:	24 96       	adiw	r28, 0x04	; 4
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	08 95       	ret

00002640 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2640:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2642:	9f e9       	ldi	r25, 0x9F	; 159
    2644:	98 0f       	add	r25, r24
    2646:	9a 31       	cpi	r25, 0x1A	; 26
    2648:	38 f0       	brcs	.+14     	; 0x2658 <InpOkChk+0x18>
    264a:	90 ed       	ldi	r25, 0xD0	; 208
    264c:	98 0f       	add	r25, r24
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	9a 30       	cpi	r25, 0x0A	; 10
    2652:	18 f0       	brcs	.+6      	; 0x265a <InpOkChk+0x1a>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	08 95       	ret
    2658:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    265a:	08 95       	ret

0000265c <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2666:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2668:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    266a:	f8 01       	movw	r30, r16
    266c:	ed 0f       	add	r30, r29
    266e:	f1 1d       	adc	r31, r1
    2670:	80 81       	ld	r24, Z
    2672:	2c 2f       	mov	r18, r28
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	88 23       	and	r24, r24
    2678:	61 f0       	breq	.+24     	; 0x2692 <CleanInput+0x36>
        data[cnt] = data[x];
    267a:	d8 01       	movw	r26, r16
    267c:	a2 0f       	add	r26, r18
    267e:	b3 1f       	adc	r27, r19
    2680:	8c 93       	st	X, r24
        if (data[x] == 0x1b) break; //Escape characters are not supported!
    2682:	80 81       	ld	r24, Z
    2684:	8b 31       	cpi	r24, 0x1B	; 27
    2686:	29 f0       	breq	.+10     	; 0x2692 <CleanInput+0x36>
        if (InpOkChk(data[x])) ++cnt;
    2688:	db df       	rcall	.-74     	; 0x2640 <InpOkChk>
    268a:	81 11       	cpse	r24, r1
    268c:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    268e:	df 5f       	subi	r29, 0xFF	; 255
    2690:	ec cf       	rjmp	.-40     	; 0x266a <CleanInput+0xe>
        data[cnt] = data[x];
        if (data[x] == 0x1b) break; //Escape characters are not supported!
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2692:	f8 01       	movw	r30, r16
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	10 82       	st	Z, r1
    return cnt;
}
    269a:	8c 2f       	mov	r24, r28
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    26a6:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    26a8:	20 91 59 3a 	lds	r18, 0x3A59	; 0x803a59 <txAddrNow>
    26ac:	28 30       	cpi	r18, 0x08	; 8
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <CheckSend+0xc>
    26b0:	49 c0       	rjmp	.+146    	; 0x2744 <CheckSend+0x9e>
    26b2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    26b6:	88 23       	and	r24, r24
    26b8:	09 f4       	brne	.+2      	; 0x26bc <CheckSend+0x16>
    26ba:	44 c0       	rjmp	.+136    	; 0x2744 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    26bc:	82 2f       	mov	r24, r18
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	fc 01       	movw	r30, r24
    26c2:	e6 5a       	subi	r30, 0xA6	; 166
    26c4:	f5 4c       	sbci	r31, 0xC5	; 197
    26c6:	e0 81       	ld	r30, Z
    26c8:	e1 11       	cpse	r30, r1
    26ca:	06 c0       	rjmp	.+12     	; 0x26d8 <CheckSend+0x32>
            txPart = 0;
    26cc:	10 92 18 39 	sts	0x3918, r1	; 0x803918 <txPart.3917>
            txAddrNow = TXLISTLEN;
    26d0:	88 e0       	ldi	r24, 0x08	; 8
    26d2:	80 93 59 3a 	sts	0x3A59, r24	; 0x803a59 <txAddrNow>
    26d6:	2e c0       	rjmp	.+92     	; 0x2734 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    26d8:	50 91 18 39 	lds	r21, 0x3918	; 0x803918 <txPart.3917>
    26dc:	5e 17       	cp	r21, r30
    26de:	60 f5       	brcc	.+88     	; 0x2738 <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    26e0:	ce 2f       	mov	r28, r30
    26e2:	c5 1b       	sub	r28, r21
    26e4:	c1 32       	cpi	r28, 0x21	; 33
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <CheckSend+0x44>
    26e8:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	fc 01       	movw	r30, r24
    26f0:	ee 59       	subi	r30, 0x9E	; 158
    26f2:	f5 4c       	sbci	r31, 0xC5	; 197
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	26 e0       	ldi	r18, 0x06	; 6
    26fa:	3b e3       	ldi	r19, 0x3B	; 59
    26fc:	40 91 58 3a 	lds	r20, 0x3A58	; 0x803a58 <txTypeNow>
    2700:	6c 2f       	mov	r22, r28
    2702:	85 0f       	add	r24, r21
    2704:	91 1d       	adc	r25, r1
    2706:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
            txPart += EEreadLength;
    270a:	80 91 18 39 	lds	r24, 0x3918	; 0x803918 <txPart.3917>
    270e:	8c 0f       	add	r24, r28
    2710:	80 93 18 39 	sts	0x3918, r24	; 0x803918 <txPart.3917>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2714:	ec 2f       	mov	r30, r28
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	ea 5f       	subi	r30, 0xFA	; 250
    271a:	f4 4c       	sbci	r31, 0xC4	; 196
    271c:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    271e:	80 91 06 3b 	lds	r24, 0x3B06	; 0x803b06 <txBuffer>
    2722:	81 11       	cpse	r24, r1
    2724:	03 c0       	rjmp	.+6      	; 0x272c <CheckSend+0x86>
    2726:	8b ed       	ldi	r24, 0xDB	; 219
    2728:	80 93 06 3b 	sts	0x3B06, r24	; 0x803b06 <txBuffer>
            SerSend(&txBuffer[0]);
    272c:	86 e0       	ldi	r24, 0x06	; 6
    272e:	9b e3       	ldi	r25, 0x3B	; 59
    2730:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	0b c0       	rjmp	.+22     	; 0x274e <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2738:	10 92 18 39 	sts	0x3918, r1	; 0x803918 <txPart.3917>
            ++txAddrNow;
    273c:	2f 5f       	subi	r18, 0xFF	; 255
    273e:	20 93 59 3a 	sts	0x3A59, r18	; 0x803a59 <txAddrNow>
    2742:	f8 cf       	rjmp	.-16     	; 0x2734 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2744:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	91 11       	cpse	r25, r1
    274c:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2756:	c0 91 2c 39 	lds	r28, 0x392C	; 0x80392c <responseList>
    275a:	cc 23       	and	r28, r28
    275c:	b1 f1       	breq	.+108    	; 0x27ca <CheckResponse+0x78>
        --responseList;
    275e:	c1 50       	subi	r28, 0x01	; 1
    2760:	c0 93 2c 39 	sts	0x392C, r28	; 0x80392c <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2764:	d0 91 17 39 	lds	r29, 0x3917	; 0x803917 <number.3921>
    2768:	2d 2f       	mov	r18, r29
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	f9 01       	movw	r30, r18
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	e3 5d       	subi	r30, 0xD3	; 211
    2774:	f6 4c       	sbci	r31, 0xC6	; 198
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	80 3f       	cpi	r24, 0xF0	; 240
    277c:	4f ef       	ldi	r20, 0xFF	; 255
    277e:	94 07       	cpc	r25, r20
    2780:	51 f4       	brne	.+20     	; 0x2796 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2782:	60 91 47 3a 	lds	r22, 0x3A47	; 0x803a47 <currObj+0x1a>
    2786:	70 91 48 3a 	lds	r23, 0x3A48	; 0x803a48 <currObj+0x1b>
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <currObj+0xc>
    2790:	90 91 3a 3a 	lds	r25, 0x3A3A	; 0x803a3a <currObj+0xd>
    2794:	0d c0       	rjmp	.+26     	; 0x27b0 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2796:	d9 01       	movw	r26, r18
    2798:	aa 0f       	add	r26, r26
    279a:	bb 1f       	adc	r27, r27
    279c:	a3 55       	subi	r26, 0x53	; 83
    279e:	b6 4c       	sbci	r27, 0xC6	; 198
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	f9 01       	movw	r30, r18
    27a6:	e3 59       	subi	r30, 0x93	; 147
    27a8:	f6 4c       	sbci	r31, 0xC6	; 198
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	4c 91       	ld	r20, X
    27b0:	70 dd       	rcall	.-1312   	; 0x2292 <PrepareSending>
        }
        ++number;
    27b2:	df 5f       	subi	r29, 0xFF	; 255
    27b4:	d0 93 17 39 	sts	0x3917, r29	; 0x803917 <number.3921>

        if (responseList == 0) {
    27b8:	c1 11       	cpse	r28, r1
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    27bc:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    27be:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRxDone>
            number = 0;
    27c2:	10 92 17 39 	sts	0x3917, r1	; 0x803917 <number.3921>
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27c8:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27ca:	8c 2f       	mov	r24, r28
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27d2:	a9 e0       	ldi	r26, 0x09	; 9
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef ee       	ldi	r30, 0xEF	; 239
    27d8:	f3 e1       	ldi	r31, 0x13	; 19
    27da:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__prologue_saves__+0x6>
    27de:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    27e0:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <currDepth>
    27e4:	8f 3f       	cpi	r24, 0xFF	; 255
    27e6:	49 f4       	brne	.+18     	; 0x27fa <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    27e8:	6d e2       	ldi	r22, 0x2D	; 45
    27ea:	7a e3       	ldi	r23, 0x3A	; 58
    27ec:	80 91 ed 39 	lds	r24, 0x39ED	; 0x8039ed <route>
    27f0:	90 91 ee 39 	lds	r25, 0x39EE	; 0x8039ee <route+0x1>
    27f4:	07 de       	rcall	.-1010   	; 0x2404 <PopulateObject>
        currDepth = 0;
    27f6:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <currDepth>
    }

    if (serRxDone){
    27fa:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <serRxDone>
    27fe:	88 23       	and	r24, r24
    2800:	09 f4       	brne	.+2      	; 0x2804 <CheckInput+0x32>
    2802:	c0 c1       	rjmp	.+896    	; 0x2b84 <CheckInput+0x3b2>

        //Special input requested from user by game
        if (specialInput[0]){
    2804:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <specialInput>
    2808:	88 23       	and	r24, r24
    280a:	09 f4       	brne	.+2      	; 0x280e <CheckInput+0x3c>
    280c:	4f c0       	rjmp	.+158    	; 0x28ac <CheckInput+0xda>
            specialPassed = 0;
    280e:	10 92 1b 39 	sts	0x391B, r1	; 0x80391b <specialPassed>
            data[0] = 'a';
    2812:	81 e6       	ldi	r24, 0x61	; 97
    2814:	f8 01       	movw	r30, r16
    2816:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2818:	6c e1       	ldi	r22, 0x1C	; 28
    281a:	79 e3       	ldi	r23, 0x39	; 57
    281c:	87 e8       	ldi	r24, 0x87	; 135
    281e:	9a e3       	ldi	r25, 0x3A	; 58
    2820:	1e dd       	rcall	.-1476   	; 0x225e <StartsWith>
    2822:	f8 2e       	mov	r15, r24
    2824:	88 23       	and	r24, r24
    2826:	21 f0       	breq	.+8      	; 0x2830 <CheckInput+0x5e>
                specialPassed = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <specialPassed>
    282e:	04 c0       	rjmp	.+8      	; 0x2838 <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2830:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <specialInput>
    2834:	81 33       	cpi	r24, 0x31	; 49
    2836:	11 f0       	breq	.+4      	; 0x283c <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2838:	f1 2c       	mov	r15, r1
    283a:	a6 c1       	rjmp	.+844    	; 0x2b88 <CheckInput+0x3b6>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    283c:	80 91 1e 39 	lds	r24, 0x391E	; 0x80391e <specialInput+0x2>
    2840:	81 11       	cpse	r24, r1
    2842:	fa cf       	rjmp	.-12     	; 0x2838 <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2844:	87 e8       	ldi	r24, 0x87	; 135
    2846:	9a e3       	ldi	r25, 0x3A	; 58
    2848:	09 df       	rcall	.-494    	; 0x265c <CleanInput>
                specialPassed = 2;
    284a:	92 e0       	ldi	r25, 0x02	; 2
    284c:	90 93 1b 39 	sts	0x391B, r25	; 0x80391b <specialPassed>
                data[1] = 0;
    2850:	f8 01       	movw	r30, r16
    2852:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2854:	82 30       	cpi	r24, 0x02	; 2
    2856:	80 f3       	brcs	.-32     	; 0x2838 <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2858:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    285c:	81 33       	cpi	r24, 0x31	; 49
    285e:	60 f3       	brcs	.-40     	; 0x2838 <CheckInput+0x66>
    2860:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    2864:	85 33       	cpi	r24, 0x35	; 53
    2866:	40 f7       	brcc	.-48     	; 0x2838 <CheckInput+0x66>
                        serRx[1] |= 0x20;
    2868:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    286c:	80 62       	ori	r24, 0x20	; 32
    286e:	80 93 88 3a 	sts	0x3A88, r24	; 0x803a88 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2872:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    2876:	81 36       	cpi	r24, 0x61	; 97
    2878:	61 f0       	breq	.+24     	; 0x2892 <CheckInput+0xc0>
    287a:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    287e:	85 36       	cpi	r24, 0x65	; 101
    2880:	41 f0       	breq	.+16     	; 0x2892 <CheckInput+0xc0>
    2882:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    2886:	86 36       	cpi	r24, 0x66	; 102
    2888:	21 f0       	breq	.+8      	; 0x2892 <CheckInput+0xc0>
    288a:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    288e:	87 37       	cpi	r24, 0x77	; 119
    2890:	99 f6       	brne	.-90     	; 0x2838 <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    2892:	80 91 1d 39 	lds	r24, 0x391D	; 0x80391d <specialInput+0x1>
    2896:	8f 5e       	subi	r24, 0xEF	; 239
    2898:	f8 01       	movw	r30, r16
    289a:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    289c:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    28a0:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    28a2:	80 91 88 3a 	lds	r24, 0x3A88	; 0x803a88 <serRx+0x1>
    28a6:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    28a8:	14 82       	std	Z+4, r1	; 0x04
    28aa:	6e c1       	rjmp	.+732    	; 0x2b88 <CheckInput+0x3b6>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    28ac:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
    28b0:	83 32       	cpi	r24, 0x23	; 35
    28b2:	89 f5       	brne	.+98     	; 0x2916 <CheckInput+0x144>
    28b4:	8d b3       	in	r24, 0x1d	; 29
    28b6:	86 30       	cpi	r24, 0x06	; 6
    28b8:	71 f5       	brne	.+92     	; 0x2916 <CheckInput+0x144>
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    28c0:	fc 01       	movw	r30, r24
    28c2:	e9 57       	subi	r30, 0x79	; 121
    28c4:	f5 4c       	sbci	r31, 0xC5	; 197
    28c6:	20 81       	ld	r18, Z
    28c8:	20 53       	subi	r18, 0x30	; 48
    28ca:	20 83       	st	Z, r18
                    bitNr *= 10;
    28cc:	11 0f       	add	r17, r17
    28ce:	21 2f       	mov	r18, r17
    28d0:	22 0f       	add	r18, r18
    28d2:	22 0f       	add	r18, r18
    28d4:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    28d6:	20 91 88 3a 	lds	r18, 0x3A88	; 0x803a88 <serRx+0x1>
    28da:	23 30       	cpi	r18, 0x03	; 3
    28dc:	48 f4       	brcc	.+18     	; 0x28f0 <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    28de:	20 81       	ld	r18, Z
    28e0:	2a 30       	cpi	r18, 0x0A	; 10
    28e2:	b8 f4       	brcc	.+46     	; 0x2912 <CheckInput+0x140>
                        bitNr += serRx[x];
    28e4:	20 81       	ld	r18, Z
    28e6:	12 0f       	add	r17, r18
    28e8:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    28ea:	84 30       	cpi	r24, 0x04	; 4
    28ec:	91 05       	cpc	r25, r1
    28ee:	41 f7       	brne	.-48     	; 0x28c0 <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    28f0:	81 2f       	mov	r24, r17
    28f2:	8f 77       	andi	r24, 0x7F	; 127
    28f4:	71 f0       	breq	.+28     	; 0x2912 <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    28f6:	80 91 8b 3a 	lds	r24, 0x3A8B	; 0x803a8b <serRx+0x4>
    28fa:	60 91 8c 3a 	lds	r22, 0x3A8C	; 0x803a8c <serRx+0x5>
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	78 2b       	or	r23, r24
    2902:	81 2f       	mov	r24, r17
    2904:	80 95       	com	r24
    2906:	5b dc       	rcall	.-1866   	; 0x21be <Cheat>
    2908:	88 23       	and	r24, r24
    290a:	19 f0       	breq	.+6      	; 0x2912 <CheckInput+0x140>
    290c:	81 2f       	mov	r24, r17
    290e:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	34 c1       	rjmp	.+616    	; 0x2b7e <CheckInput+0x3ac>
    2916:	d8 01       	movw	r26, r16
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    291c:	fc 01       	movw	r30, r24
    291e:	e9 57       	subi	r30, 0x79	; 121
    2920:	f5 4c       	sbci	r31, 0xC5	; 197
    2922:	20 81       	ld	r18, Z
    2924:	21 34       	cpi	r18, 0x41	; 65
    2926:	18 f0       	brcs	.+6      	; 0x292e <CheckInput+0x15c>
    2928:	20 81       	ld	r18, Z
    292a:	2b 35       	cpi	r18, 0x5B	; 91
    292c:	10 f0       	brcs	.+4      	; 0x2932 <CheckInput+0x160>
    292e:	20 81       	ld	r18, Z
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <CheckInput+0x164>
    2932:	20 81       	ld	r18, Z
    2934:	20 62       	ori	r18, 0x20	; 32
    2936:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2938:	20 81       	ld	r18, Z
    293a:	21 11       	cpse	r18, r1
    293c:	05 c0       	rjmp	.+10     	; 0x2948 <CheckInput+0x176>
                    data[x] = 0;
    293e:	f8 01       	movw	r30, r16
    2940:	e8 0f       	add	r30, r24
    2942:	f1 1d       	adc	r31, r1
    2944:	10 82       	st	Z, r1
                    break;
    2946:	05 c0       	rjmp	.+10     	; 0x2952 <CheckInput+0x180>
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    294c:	81 34       	cpi	r24, 0x41	; 65
    294e:	91 05       	cpc	r25, r1
    2950:	29 f7       	brne	.-54     	; 0x291c <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2952:	80 91 87 3a 	lds	r24, 0x3A87	; 0x803a87 <serRx>
                data[0] = 0;
    2956:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2958:	81 11       	cpse	r24, r1
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <CheckInput+0x194>
                data[0] = 0;
    295c:	10 82       	st	Z, r1
                RXCNT = 0;
    295e:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2960:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRxDone>
    2964:	0f c1       	rjmp	.+542    	; 0x2b84 <CheckInput+0x3b2>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2966:	80 81       	ld	r24, Z
    2968:	8f 33       	cpi	r24, 0x3F	; 63
    296a:	11 f0       	breq	.+4      	; 0x2970 <CheckInput+0x19e>
    296c:	88 36       	cpi	r24, 0x68	; 104
    296e:	49 f4       	brne	.+18     	; 0x2982 <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2970:	83 e9       	ldi	r24, 0x93	; 147
    2972:	9b e7       	ldi	r25, 0x7B	; 123
    2974:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2978:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    297c:	8d e6       	ldi	r24, 0x6D	; 109
    297e:	94 e0       	ldi	r25, 0x04	; 4
    2980:	59 c0       	rjmp	.+178    	; 0x2a34 <CheckInput+0x262>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2982:	81 36       	cpi	r24, 0x61	; 97
    2984:	49 f4       	brne	.+18     	; 0x2998 <CheckInput+0x1c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2986:	8e e6       	ldi	r24, 0x6E	; 110
    2988:	9a e7       	ldi	r25, 0x7A	; 122
    298a:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    298e:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2992:	85 e2       	ldi	r24, 0x25	; 37
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	4e c0       	rjmp	.+156    	; 0x2a34 <CheckInput+0x262>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2998:	87 37       	cpi	r24, 0x77	; 119
    299a:	09 f0       	breq	.+2      	; 0x299e <CheckInput+0x1cc>
    299c:	41 c0       	rjmp	.+130    	; 0x2a20 <CheckInput+0x24e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    299e:	8d e8       	ldi	r24, 0x8D	; 141
    29a0:	96 e7       	ldi	r25, 0x76	; 118
    29a2:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    29a6:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    29aa:	82 e1       	ldi	r24, 0x12	; 18
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    29b2:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    29b6:	21 e0       	ldi	r18, 0x01	; 1
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	20 93 af 39 	sts	0x39AF, r18	; 0x8039af <reactStr+0x82>
    29be:	30 93 b0 39 	sts	0x39B0, r19	; 0x8039b0 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    29c2:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <whoami>
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	fc 01       	movw	r30, r24
    29ca:	ee 0f       	add	r30, r30
    29cc:	ff 1f       	adc	r31, r31
    29ce:	ec 54       	subi	r30, 0x4C	; 76
    29d0:	f0 44       	sbci	r31, 0x40	; 64
    29d2:	40 81       	ld	r20, Z
    29d4:	51 81       	ldd	r21, Z+1	; 0x01
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	fc 01       	movw	r30, r24
    29dc:	e4 55       	subi	r30, 0x54	; 84
    29de:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x4>
    29e8:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    29ec:	40 93 71 39 	sts	0x3971, r20	; 0x803971 <reactStr+0x44>
    29f0:	50 93 72 39 	sts	0x3972, r21	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    29f4:	20 93 b1 39 	sts	0x39B1, r18	; 0x8039b1 <reactStr+0x84>
    29f8:	30 93 b2 39 	sts	0x39B2, r19	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29fc:	8f e5       	ldi	r24, 0x5F	; 95
    29fe:	96 e7       	ldi	r25, 0x76	; 118
    2a00:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x6>
    2a04:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    2a08:	8a e1       	ldi	r24, 0x1A	; 26
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x46>
    2a10:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    2a14:	20 93 b3 39 	sts	0x39B3, r18	; 0x8039b3 <reactStr+0x86>
    2a18:	30 93 b4 39 	sts	0x39B4, r19	; 0x8039b4 <reactStr+0x87>
            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a1c:	84 e0       	ldi	r24, 0x04	; 4
    2a1e:	af c0       	rjmp	.+350    	; 0x2b7e <CheckInput+0x3ac>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    2a20:	81 37       	cpi	r24, 0x71	; 113
    2a22:	a1 f4       	brne	.+40     	; 0x2a4c <CheckInput+0x27a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	9a e7       	ldi	r25, 0x7A	; 122
    2a28:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2a2c:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2a30:	85 e5       	ldi	r24, 0x55	; 85
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2a38:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    2a44:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
            }

            //Quit text
            if (data[0] == 'q'){
                SetResponse(1, A_QUIT, L_QUIT, TEASER);
                responseList = SetStandardResponse(2);
    2a48:	82 e0       	ldi	r24, 0x02	; 2
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2a4a:	99 c0       	rjmp	.+306    	; 0x2b7e <CheckInput+0x3ac>
    2a4c:	6a e8       	ldi	r22, 0x8A	; 138
    2a4e:	7f eb       	ldi	r23, 0xBF	; 191
    2a50:	c8 01       	movw	r24, r16
    2a52:	05 dc       	rcall	.-2038   	; 0x225e <StartsWith>
    2a54:	88 23       	and	r24, r24
    2a56:	d1 f0       	breq	.+52     	; 0x2a8c <CheckInput+0x2ba>
            
                //Wipe, but not the cheat data, hidden easter egg in ext. eeprom. ;)
                WipeAfterBoot(0);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	0e 94 8e 09 	call	0x131c	; 0x131c <WipeAfterBoot>
                SaveGameState();
    2a5e:	0e 94 c7 08 	call	0x118e	; 0x118e <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a62:	89 e0       	ldi	r24, 0x09	; 9
    2a64:	ed e9       	ldi	r30, 0x9D	; 157
    2a66:	ff eb       	ldi	r31, 0xBF	; 191
    2a68:	de 01       	movw	r26, r28
    2a6a:	11 96       	adiw	r26, 0x01	; 1
    2a6c:	01 90       	ld	r0, Z+
    2a6e:	0d 92       	st	X+, r0
    2a70:	8a 95       	dec	r24
    2a72:	e1 f7       	brne	.-8      	; 0x2a6c <CheckInput+0x29a>
                SerSpeed(60);
    2a74:	8c e3       	ldi	r24, 0x3C	; 60
    2a76:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a7a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a7e:	88 23       	and	r24, r24
    2a80:	e1 f3       	breq	.-8      	; 0x2a7a <CheckInput+0x2a8>
    2a82:	ce 01       	movw	r24, r28
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2a8a:	f7 cf       	rjmp	.-18     	; 0x2a7a <CheckInput+0x2a8>
    2a8c:	60 e9       	ldi	r22, 0x90	; 144
    2a8e:	7f eb       	ldi	r23, 0xBF	; 191
    2a90:	c8 01       	movw	r24, r16
    2a92:	e5 db       	rcall	.-2102   	; 0x225e <StartsWith>
    2a94:	88 23       	and	r24, r24
    2a96:	d1 f0       	breq	.+52     	; 0x2acc <CheckInput+0x2fa>
                
                //Full wipe, including cheats, for badge.team use only!
                WipeAfterBoot(1);
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 8e 09 	call	0x131c	; 0x131c <WipeAfterBoot>
                SaveGameState();
    2a9e:	0e 94 c7 08 	call	0x118e	; 0x118e <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2aa2:	88 e0       	ldi	r24, 0x08	; 8
    2aa4:	e6 ea       	ldi	r30, 0xA6	; 166
    2aa6:	ff eb       	ldi	r31, 0xBF	; 191
    2aa8:	de 01       	movw	r26, r28
    2aaa:	11 96       	adiw	r26, 0x01	; 1
    2aac:	01 90       	ld	r0, Z+
    2aae:	0d 92       	st	X+, r0
    2ab0:	8a 95       	dec	r24
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <CheckInput+0x2da>
                SerSpeed(60);
    2ab4:	8c e3       	ldi	r24, 0x3C	; 60
    2ab6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2aba:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2abe:	88 23       	and	r24, r24
    2ac0:	e1 f3       	breq	.-8      	; 0x2aba <CheckInput+0x2e8>
    2ac2:	ce 01       	movw	r24, r28
    2ac4:	01 96       	adiw	r24, 0x01	; 1
    2ac6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2aca:	f7 cf       	rjmp	.-18     	; 0x2aba <CheckInput+0x2e8>
    2acc:	67 e9       	ldi	r22, 0x97	; 151
    2ace:	7f eb       	ldi	r23, 0xBF	; 191
    2ad0:	c8 01       	movw	r24, r16
    2ad2:	c5 db       	rcall	.-2166   	; 0x225e <StartsWith>
    2ad4:	88 23       	and	r24, r24
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <CheckInput+0x308>
    2ad8:	af ce       	rjmp	.-674    	; 0x2838 <CheckInput+0x66>
    2ada:	8d e2       	ldi	r24, 0x2D	; 45
    2adc:	c8 2e       	mov	r12, r24
    2ade:	89 e3       	ldi	r24, 0x39	; 57
    2ae0:	d8 2e       	mov	r13, r24
    2ae2:	9d e6       	ldi	r25, 0x6D	; 109
    2ae4:	e9 2e       	mov	r14, r25
    2ae6:	99 e3       	ldi	r25, 0x39	; 57
    2ae8:	f9 2e       	mov	r15, r25
    2aea:	0d ea       	ldi	r16, 0xAD	; 173
    2aec:	19 e3       	ldi	r17, 0x39	; 57
    2aee:	28 e1       	ldi	r18, 0x18	; 24
    2af0:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2af2:	aa 24       	eor	r10, r10
    2af4:	a3 94       	inc	r10
    2af6:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2af8:	47 e5       	ldi	r20, 0x57	; 87
    2afa:	84 2e       	mov	r8, r20
    2afc:	4a e7       	ldi	r20, 0x7A	; 122
    2afe:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2b00:	52 e0       	ldi	r21, 0x02	; 2
    2b02:	65 2e       	mov	r6, r21
    2b04:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	be 01       	movw	r22, r28
    2b0a:	6f 5f       	subi	r22, 0xFF	; 255
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0e:	85 2d       	mov	r24, r5
    2b10:	0e 94 66 07 	call	0xecc	; 0xecc <EERead>
                    bit = 0xff-bit;
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	80 95       	com	r24
    2b18:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	22 95       	swap	r18
    2b1e:	2f 70       	andi	r18, 0x0F	; 15
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	23 57       	subi	r18, 0x73	; 115
    2b24:	3b 48       	sbci	r19, 0x8B	; 139
    2b26:	f6 01       	movw	r30, r12
    2b28:	20 83       	st	Z, r18
    2b2a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b2c:	f7 01       	movw	r30, r14
    2b2e:	a0 82       	st	Z, r10
    2b30:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b32:	f8 01       	movw	r30, r16
    2b34:	a0 82       	st	Z, r10
    2b36:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b38:	8f 70       	andi	r24, 0x0F	; 15
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	83 57       	subi	r24, 0x73	; 115
    2b3e:	9b 48       	sbci	r25, 0x8B	; 139
    2b40:	f6 01       	movw	r30, r12
    2b42:	82 83       	std	Z+2, r24	; 0x02
    2b44:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2b46:	f7 01       	movw	r30, r14
    2b48:	a2 82       	std	Z+2, r10	; 0x02
    2b4a:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	a2 82       	std	Z+2, r10	; 0x02
    2b50:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b52:	f6 01       	movw	r30, r12
    2b54:	84 82       	std	Z+4, r8	; 0x04
    2b56:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2b58:	f7 01       	movw	r30, r14
    2b5a:	64 82       	std	Z+4, r6	; 0x04
    2b5c:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2b5e:	f8 01       	movw	r30, r16
    2b60:	a4 82       	std	Z+4, r10	; 0x04
    2b62:	b5 82       	std	Z+5, r11	; 0x05
    2b64:	53 94       	inc	r5
    2b66:	f6 e0       	ldi	r31, 0x06	; 6
    2b68:	cf 0e       	add	r12, r31
    2b6a:	d1 1c       	adc	r13, r1
    2b6c:	86 e0       	ldi	r24, 0x06	; 6
    2b6e:	e8 0e       	add	r14, r24
    2b70:	f1 1c       	adc	r15, r1
    2b72:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	e0 e2       	ldi	r30, 0x20	; 32
    2b78:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2b7a:	c5 cf       	rjmp	.-118    	; 0x2b06 <CheckInput+0x334>
    2b7c:	88 e1       	ldi	r24, 0x18	; 24
    2b7e:	c6 db       	rcall	.-2164   	; 0x230c <SetStandardResponse>
    2b80:	80 93 2c 39 	sts	0x392C, r24	; 0x80392c <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2b84:	ff 24       	eor	r15, r15
    2b86:	f3 94       	inc	r15
}
    2b88:	8f 2d       	mov	r24, r15
    2b8a:	29 96       	adiw	r28, 0x09	; 9
    2b8c:	ef e0       	ldi	r30, 0x0F	; 15
    2b8e:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__epilogue_restores__+0x6>

00002b92 <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2b92:	ab e2       	ldi	r26, 0x2B	; 43
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ef ec       	ldi	r30, 0xCF	; 207
    2b98:	f5 e1       	ldi	r31, 0x15	; 21
    2b9a:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2b9e:	99 24       	eor	r9, r9
    2ba0:	93 94       	inc	r9
    2ba2:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	ee 0f       	add	r30, r30
    2baa:	ff 1f       	adc	r31, r31
    2bac:	e3 5d       	subi	r30, 0xD3	; 211
    2bae:	f6 4c       	sbci	r31, 0xC6	; 198
    2bb0:	2c ec       	ldi	r18, 0xCC	; 204
    2bb2:	37 e7       	ldi	r19, 0x77	; 119
    2bb4:	20 83       	st	Z, r18
    2bb6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2bb8:	fc 01       	movw	r30, r24
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	e3 59       	subi	r30, 0x93	; 147
    2bc0:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc2:	26 e1       	ldi	r18, 0x16	; 22
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	20 83       	st	Z, r18
    2bc8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e3 55       	subi	r30, 0x53	; 83
    2bd2:	f6 4c       	sbci	r31, 0xC6	; 198
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	80 83       	st	Z, r24
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	0e e4       	ldi	r16, 0x4E	; 78
    2bde:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2be0:	37 e5       	ldi	r19, 0x57	; 87
    2be2:	e3 2e       	mov	r14, r19
    2be4:	3a e7       	ldi	r19, 0x7A	; 122
    2be6:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2be8:	42 e0       	ldi	r20, 0x02	; 2
    2bea:	c4 2e       	mov	r12, r20
    2bec:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2bee:	aa 24       	eor	r10, r10
    2bf0:	a3 94       	inc	r10
    2bf2:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	81 91       	ld	r24, Z+
    2bf8:	91 91       	ld	r25, Z+
    2bfa:	8f 01       	movw	r16, r30
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	c9 f1       	breq	.+114    	; 0x2c72 <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2c00:	be 01       	movw	r22, r28
    2c02:	6f 5f       	subi	r22, 0xFF	; 255
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	fe db       	rcall	.-2052   	; 0x2404 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c08:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2c0a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c0c:	89 2d       	mov	r24, r9
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	fc 01       	movw	r30, r24
    2c12:	ee 0f       	add	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	e3 5d       	subi	r30, 0xD3	; 211
    2c18:	f6 4c       	sbci	r31, 0xC6	; 198
    2c1a:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c1c:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c1e:	40 83       	st	Z, r20
    2c20:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c22:	fc 01       	movw	r30, r24
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	e3 59       	subi	r30, 0x93	; 147
    2c2a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c2c:	20 83       	st	Z, r18
    2c2e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	fc 01       	movw	r30, r24
    2c36:	e3 55       	subi	r30, 0x53	; 83
    2c38:	f6 4c       	sbci	r31, 0xC6	; 198
    2c3a:	10 82       	st	Z, r1
    2c3c:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	89 0d       	add	r24, r9
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	93 94       	inc	r9
    2c46:	93 94       	inc	r9
    2c48:	fc 01       	movw	r30, r24
    2c4a:	ee 0f       	add	r30, r30
    2c4c:	ff 1f       	adc	r31, r31
    2c4e:	e3 5d       	subi	r30, 0xD3	; 211
    2c50:	f6 4c       	sbci	r31, 0xC6	; 198
    2c52:	e0 82       	st	Z, r14
    2c54:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2c56:	fc 01       	movw	r30, r24
    2c58:	ee 0f       	add	r30, r30
    2c5a:	ff 1f       	adc	r31, r31
    2c5c:	e3 59       	subi	r30, 0x93	; 147
    2c5e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c60:	c0 82       	st	Z, r12
    2c62:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	fc 01       	movw	r30, r24
    2c6a:	e3 55       	subi	r30, 0x53	; 83
    2c6c:	f6 4c       	sbci	r31, 0xC6	; 198
    2c6e:	a0 82       	st	Z, r10
    2c70:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2c72:	f8 e3       	ldi	r31, 0x38	; 56
    2c74:	02 35       	cpi	r16, 0x52	; 82
    2c76:	1f 07       	cpc	r17, r31
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <ShowInventory+0xea>
    2c7a:	bc cf       	rjmp	.-136    	; 0x2bf4 <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2c7c:	8f ef       	ldi	r24, 0xFF	; 255
    2c7e:	89 0d       	add	r24, r9
    2c80:	ab 96       	adiw	r28, 0x2b	; 43
    2c82:	eb e0       	ldi	r30, 0x0B	; 11
    2c84:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__epilogue_restores__+0xe>

00002c88 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2c88:	a8 e0       	ldi	r26, 0x08	; 8
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ea e4       	ldi	r30, 0x4A	; 74
    2c8e:	f6 e1       	ldi	r31, 0x16	; 22
    2c90:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <__prologue_saves__+0x8>
    2c94:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2c96:	e2 dc       	rcall	.-1596   	; 0x265c <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2c98:	c3 01       	movw	r24, r6
    2c9a:	e0 dc       	rcall	.-1600   	; 0x265c <CleanInput>
    2c9c:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c9e:	29 e5       	ldi	r18, 0x59	; 89
    2ca0:	3a e7       	ldi	r19, 0x7A	; 122
    2ca2:	20 93 2d 39 	sts	0x392D, r18	; 0x80392d <reactStr>
    2ca6:	30 93 2e 39 	sts	0x392E, r19	; 0x80392e <reactStr+0x1>
    reactStr[1][number]=length;
    2caa:	84 e0       	ldi	r24, 0x04	; 4
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	80 93 6d 39 	sts	0x396D, r24	; 0x80396d <reactStr+0x40>
    2cb2:	90 93 6e 39 	sts	0x396E, r25	; 0x80396e <reactStr+0x41>
    reactStr[2][number]=type;
    2cb6:	01 e0       	ldi	r16, 0x01	; 1
    2cb8:	10 e0       	ldi	r17, 0x00	; 0
    2cba:	00 93 ad 39 	sts	0x39AD, r16	; 0x8039ad <reactStr+0x80>
    2cbe:	10 93 ae 39 	sts	0x39AE, r17	; 0x8039ae <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2cc2:	ff 20       	and	r15, r15
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <ProcessInput+0x40>
    2cc6:	54 c7       	rjmp	.+3752   	; 0x3b70 <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2cc8:	d3 01       	movw	r26, r6
    2cca:	8c 91       	ld	r24, X
    2ccc:	88 37       	cpi	r24, 0x78	; 120
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <ProcessInput+0x4a>
    2cd0:	45 c0       	rjmp	.+138    	; 0x2d5c <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2cd2:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <currDepth>
    2cd6:	e8 2f       	mov	r30, r24
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	e3 51       	subi	r30, 0x13	; 19
    2ce0:	f6 4c       	sbci	r31, 0xC6	; 198
    2ce2:	20 81       	ld	r18, Z
    2ce4:	31 81       	ldd	r19, Z+1	; 0x01
    2ce6:	23 2b       	or	r18, r19
    2ce8:	11 f0       	breq	.+4      	; 0x2cee <ProcessInput+0x66>
    2cea:	81 11       	cpse	r24, r1
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cee:	84 e4       	ldi	r24, 0x44	; 68
    2cf0:	96 e7       	ldi	r25, 0x76	; 118
    2cf2:	13 c5       	rjmp	.+2598   	; 0x371a <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2cf4:	80 91 33 3a 	lds	r24, 0x3A33	; 0x803a33 <currObj+0x6>
    2cf8:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
    2cfc:	88 23       	and	r24, r24
    2cfe:	b9 f0       	breq	.+46     	; 0x2d2e <ProcessInput+0xa6>
                --currDepth;
    2d00:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2d04:	e1 50       	subi	r30, 0x01	; 1
    2d06:	e0 93 3e 38 	sts	0x383E, r30	; 0x80383e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	ff 1f       	adc	r31, r31
    2d10:	e3 51       	subi	r30, 0x13	; 19
    2d12:	f6 4c       	sbci	r31, 0xC6	; 198
    2d14:	6d e2       	ldi	r22, 0x2D	; 45
    2d16:	7a e3       	ldi	r23, 0x3A	; 58
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	73 db       	rcall	.-2330   	; 0x2404 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2d1e:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x4>
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    2d28:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    2d2c:	2a c2       	rjmp	.+1108   	; 0x3182 <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2d2e:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <currObj+0x22>
    2d32:	90 91 50 3a 	lds	r25, 0x3A50	; 0x803a50 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d36:	20 91 41 3a 	lds	r18, 0x3A41	; 0x803a41 <currObj+0x14>
    2d3a:	30 91 42 3a 	lds	r19, 0x3A42	; 0x803a42 <currObj+0x15>
    2d3e:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    2d42:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2d46:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2d4a:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2d4e:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2d52:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2d56:	80 91 55 3a 	lds	r24, 0x3A55	; 0x803a55 <currObj+0x28>
    2d5a:	a9 c5       	rjmp	.+2898   	; 0x38ae <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2d5c:	85 36       	cpi	r24, 0x65	; 101
    2d5e:	19 f0       	breq	.+6      	; 0x2d66 <ProcessInput+0xde>
    2d60:	8f 36       	cpi	r24, 0x6F	; 111
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <ProcessInput+0xde>
    2d64:	de c0       	rjmp	.+444    	; 0x2f22 <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2d66:	b2 e0       	ldi	r27, 0x02	; 2
    2d68:	fb 12       	cpse	r15, r27
    2d6a:	c1 cf       	rjmp	.-126    	; 0x2cee <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2d6c:	00 91 3e 38 	lds	r16, 0x383E	; 0x80383e <currDepth>
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	f8 01       	movw	r30, r16
    2d74:	ee 0f       	add	r30, r30
    2d76:	ff 1f       	adc	r31, r31
    2d78:	e3 51       	subi	r30, 0x13	; 19
    2d7a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d7c:	40 e0       	ldi	r20, 0x00	; 0
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	d3 01       	movw	r26, r6
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	6c 91       	ld	r22, X
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	fc db       	rcall	.-2056   	; 0x2584 <FindChild>
    2d8c:	00 0f       	add	r16, r16
    2d8e:	11 1f       	adc	r17, r17
    2d90:	f8 01       	movw	r30, r16
    2d92:	e1 51       	subi	r30, 0x11	; 17
    2d94:	f6 4c       	sbci	r31, 0xC6	; 198
    2d96:	80 83       	st	Z, r24
    2d98:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2d9a:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <currDepth>
    2d9e:	29 2f       	mov	r18, r25
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	f9 01       	movw	r30, r18
    2da4:	ee 0f       	add	r30, r30
    2da6:	ff 1f       	adc	r31, r31
    2da8:	e1 51       	subi	r30, 0x11	; 17
    2daa:	f6 4c       	sbci	r31, 0xC6	; 198
    2dac:	40 81       	ld	r20, Z
    2dae:	51 81       	ldd	r21, Z+1	; 0x01
    2db0:	41 15       	cp	r20, r1
    2db2:	51 05       	cpc	r21, r1
    2db4:	21 f0       	breq	.+8      	; 0x2dbe <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2db6:	6c ee       	ldi	r22, 0xEC	; 236
    2db8:	78 e3       	ldi	r23, 0x38	; 56
    2dba:	ca 01       	movw	r24, r20
    2dbc:	1c c0       	rjmp	.+56     	; 0x2df6 <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2dbe:	99 23       	and	r25, r25
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <ProcessInput+0x13c>
    2dc2:	dc c6       	rjmp	.+3512   	; 0x3b7c <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2dc4:	22 0f       	add	r18, r18
    2dc6:	33 1f       	adc	r19, r19
    2dc8:	f9 01       	movw	r30, r18
    2dca:	e5 51       	subi	r30, 0x15	; 21
    2dcc:	f6 4c       	sbci	r31, 0xC6	; 198
    2dce:	d3 01       	movw	r26, r6
    2dd0:	11 96       	adiw	r26, 0x01	; 1
    2dd2:	6c 91       	ld	r22, X
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	8e db       	rcall	.-2276   	; 0x24f6 <CheckLetter>
    2dda:	88 23       	and	r24, r24
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <ProcessInput+0x158>
    2dde:	ce c6       	rjmp	.+3484   	; 0x3b7c <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2de0:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	ee 0f       	add	r30, r30
    2de8:	ff 1f       	adc	r31, r31
    2dea:	e5 51       	subi	r30, 0x15	; 21
    2dec:	f6 4c       	sbci	r31, 0xC6	; 198
    2dee:	6c ee       	ldi	r22, 0xEC	; 236
    2df0:	78 e3       	ldi	r23, 0x38	; 56
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	06 db       	rcall	.-2548   	; 0x2404 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2df8:	d3 01       	movw	r26, r6
    2dfa:	8c 91       	ld	r24, X
    2dfc:	85 36       	cpi	r24, 0x65	; 101
    2dfe:	c1 f4       	brne	.+48     	; 0x2e30 <ProcessInput+0x1a8>
    2e00:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    2e04:	80 fd       	sbrc	r24, 0
    2e06:	1d c0       	rjmp	.+58     	; 0x2e42 <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e08:	8d e9       	ldi	r24, 0x9D	; 157
    2e0a:	99 e7       	ldi	r25, 0x79	; 121
    2e0c:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    2e10:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2e14:	8e e1       	ldi	r24, 0x1E	; 30
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2e1c:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    2e28:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2e2c:	12 e0       	ldi	r17, 0x02	; 2
    2e2e:	97 c6       	rjmp	.+3374   	; 0x3b5e <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2e30:	8f 36       	cpi	r24, 0x6F	; 111
    2e32:	39 f4       	brne	.+14     	; 0x2e42 <ProcessInput+0x1ba>
    2e34:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    2e38:	81 fd       	sbrc	r24, 1
    2e3a:	03 c0       	rjmp	.+6      	; 0x2e42 <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e3c:	82 e8       	ldi	r24, 0x82	; 130
    2e3e:	99 e7       	ldi	r25, 0x79	; 121
    2e40:	6c c4       	rjmp	.+2264   	; 0x371a <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2e42:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3956+0x6>
    2e46:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
    2e4a:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2e4e:	88 23       	and	r24, r24
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <ProcessInput+0x1cc>
    2e52:	49 c0       	rjmp	.+146    	; 0x2ee6 <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2e54:	ae 2f       	mov	r26, r30
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	aa 0f       	add	r26, r26
    2e5a:	bb 1f       	adc	r27, r27
    2e5c:	a1 51       	subi	r26, 0x11	; 17
    2e5e:	b6 4c       	sbci	r27, 0xC6	; 198
    2e60:	8d 91       	ld	r24, X+
    2e62:	9c 91       	ld	r25, X
    2e64:	89 2b       	or	r24, r25
    2e66:	11 f0       	breq	.+4      	; 0x2e6c <ProcessInput+0x1e4>
    2e68:	ef 5f       	subi	r30, 0xFF	; 255
    2e6a:	01 c0       	rjmp	.+2      	; 0x2e6e <ProcessInput+0x1e6>
    2e6c:	e1 50       	subi	r30, 0x01	; 1
    2e6e:	e0 93 3e 38 	sts	0x383E, r30	; 0x80383e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2e72:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	ee 0f       	add	r30, r30
    2e7a:	ff 1f       	adc	r31, r31
    2e7c:	e3 51       	subi	r30, 0x13	; 19
    2e7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2e80:	6d e2       	ldi	r22, 0x2D	; 45
    2e82:	7a e3       	ldi	r23, 0x3A	; 58
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	bd da       	rcall	.-2694   	; 0x2404 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e8a:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <currObj+0x1c>
    2e8e:	90 91 4a 3a 	lds	r25, 0x3A4A	; 0x803a4a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e92:	20 91 3b 3a 	lds	r18, 0x3A3B	; 0x803a3b <currObj+0xe>
    2e96:	30 91 3c 3a 	lds	r19, 0x3A3C	; 0x803a3c <currObj+0xf>
    2e9a:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    2e9e:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2ea2:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2ea6:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2eaa:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2eae:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eb2:	89 e5       	ldi	r24, 0x59	; 89
    2eb4:	9a e7       	ldi	r25, 0x7A	; 122
    2eb6:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x4>
    2eba:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    2ec6:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	80 93 b1 39 	sts	0x39B1, r24	; 0x8039b1 <reactStr+0x84>
    2ed2:	90 93 b2 39 	sts	0x39B2, r25	; 0x8039b2 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2ed6:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0x4>
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    2ee0:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    2ee4:	07 c4       	rjmp	.+2062   	; 0x36f4 <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	ee 0f       	add	r30, r30
    2eea:	ff 1f       	adc	r31, r31
    2eec:	e1 51       	subi	r30, 0x11	; 17
    2eee:	f6 4c       	sbci	r31, 0xC6	; 198
    2ef0:	10 82       	st	Z, r1
    2ef2:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2ef4:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <actObj1.3956+0x22>
    2ef8:	90 91 0f 39 	lds	r25, 0x390F	; 0x80390f <actObj1.3956+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2efc:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3956+0x14>
    2f00:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3956+0x15>
    2f04:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    2f08:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2f0c:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2f10:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2f14:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2f18:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2f1c:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <actObj1.3956+0x28>
    2f20:	c6 c4       	rjmp	.+2444   	; 0x38ae <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2f22:	8c 36       	cpi	r24, 0x6C	; 108
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <ProcessInput+0x2a0>
    2f26:	59 c1       	rjmp	.+690    	; 0x31da <ProcessInput+0x552>
    2f28:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
            if (inputLen == 1) {
    2f2c:	b1 e0       	ldi	r27, 0x01	; 1
    2f2e:	fb 12       	cpse	r15, r27
    2f30:	f1 c0       	rjmp	.+482    	; 0x3114 <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f32:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <currObj+0x1c>
    2f36:	90 91 4a 3a 	lds	r25, 0x3A4A	; 0x803a4a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f3a:	40 91 3b 3a 	lds	r20, 0x3A3B	; 0x803a3b <currObj+0xe>
    2f3e:	50 91 3c 3a 	lds	r21, 0x3A3C	; 0x803a3c <currObj+0xf>
    2f42:	40 93 2f 39 	sts	0x392F, r20	; 0x80392f <reactStr+0x2>
    2f46:	50 93 30 39 	sts	0x3930, r21	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    2f4a:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    2f4e:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    2f52:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    2f56:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f5a:	20 93 31 39 	sts	0x3931, r18	; 0x803931 <reactStr+0x4>
    2f5e:	30 93 32 39 	sts	0x3932, r19	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    2f62:	82 e0       	ldi	r24, 0x02	; 2
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    2f6a:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    2f6e:	00 93 b1 39 	sts	0x39B1, r16	; 0x8039b1 <reactStr+0x84>
    2f72:	10 93 b2 39 	sts	0x39B2, r17	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f76:	8b ee       	ldi	r24, 0xEB	; 235
    2f78:	99 e7       	ldi	r25, 0x79	; 121
    2f7a:	80 93 33 39 	sts	0x3933, r24	; 0x803933 <reactStr+0x6>
    2f7e:	90 93 34 39 	sts	0x3934, r25	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    2f82:	85 e1       	ldi	r24, 0x15	; 21
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	80 93 73 39 	sts	0x3973, r24	; 0x803973 <reactStr+0x46>
    2f8a:	90 93 74 39 	sts	0x3974, r25	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    2f8e:	00 93 b3 39 	sts	0x39B3, r16	; 0x8039b3 <reactStr+0x86>
    2f92:	10 93 b4 39 	sts	0x39B4, r17	; 0x8039b4 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	ee 0f       	add	r30, r30
    2f9a:	ff 1f       	adc	r31, r31
    2f9c:	e1 51       	subi	r30, 0x11	; 17
    2f9e:	f6 4c       	sbci	r31, 0xC6	; 198
    2fa0:	10 82       	st	Z, r1
    2fa2:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2fa4:	14 e0       	ldi	r17, 0x04	; 4
    2fa6:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fa8:	07 e5       	ldi	r16, 0x57	; 87
    2faa:	e0 2e       	mov	r14, r16
    2fac:	0a e7       	ldi	r16, 0x7A	; 122
    2fae:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2fb0:	82 e0       	ldi	r24, 0x02	; 2
    2fb2:	c8 2e       	mov	r12, r24
    2fb4:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2fb6:	aa 24       	eor	r10, r10
    2fb8:	a3 94       	inc	r10
    2fba:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2fbc:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <currDepth>
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	8c 01       	movw	r16, r24
    2fc4:	00 0f       	add	r16, r16
    2fc6:	11 1f       	adc	r17, r17
    2fc8:	01 51       	subi	r16, 0x11	; 17
    2fca:	16 4c       	sbci	r17, 0xC6	; 198
    2fcc:	f8 01       	movw	r30, r16
    2fce:	40 81       	ld	r20, Z
    2fd0:	51 81       	ldd	r21, Z+1	; 0x01
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	e3 51       	subi	r30, 0x13	; 19
    2fda:	f6 4c       	sbci	r31, 0xC6	; 198
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	d0 da       	rcall	.-2656   	; 0x2584 <FindChild>
    2fe4:	d8 01       	movw	r26, r16
    2fe6:	8d 93       	st	X+, r24
    2fe8:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2fea:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	ee 0f       	add	r30, r30
    2ff2:	ff 1f       	adc	r31, r31
    2ff4:	e1 51       	subi	r30, 0x11	; 17
    2ff6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <ProcessInput+0x37a>
    3000:	4a c0       	rjmp	.+148    	; 0x3096 <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    3002:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <inventory>
    3006:	30 91 4f 38 	lds	r19, 0x384F	; 0x80384f <inventory+0x1>
    300a:	82 17       	cp	r24, r18
    300c:	93 07       	cpc	r25, r19
    300e:	09 f4       	brne	.+2      	; 0x3012 <ProcessInput+0x38a>
    3010:	42 c0       	rjmp	.+132    	; 0x3096 <ProcessInput+0x40e>
    3012:	20 91 50 38 	lds	r18, 0x3850	; 0x803850 <inventory+0x2>
    3016:	30 91 51 38 	lds	r19, 0x3851	; 0x803851 <inventory+0x3>
    301a:	82 17       	cp	r24, r18
    301c:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    301e:	d9 f1       	breq	.+118    	; 0x3096 <ProcessInput+0x40e>
    3020:	6c ee       	ldi	r22, 0xEC	; 236
    3022:	78 e3       	ldi	r23, 0x38	; 56
    3024:	ef d9       	rcall	.-3106   	; 0x2404 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3026:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    302a:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    302e:	e9 2d       	mov	r30, r9
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	df 01       	movw	r26, r30
    3034:	aa 0f       	add	r26, r26
    3036:	bb 1f       	adc	r27, r27
    3038:	a3 5d       	subi	r26, 0xD3	; 211
    303a:	b6 4c       	sbci	r27, 0xC6	; 198
    303c:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    3040:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    3044:	2d 93       	st	X+, r18
    3046:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    3048:	df 01       	movw	r26, r30
    304a:	aa 0f       	add	r26, r26
    304c:	bb 1f       	adc	r27, r27
    304e:	a3 59       	subi	r26, 0x93	; 147
    3050:	b6 4c       	sbci	r27, 0xC6	; 198
    3052:	8d 93       	st	X+, r24
    3054:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    3056:	ee 0f       	add	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	e3 55       	subi	r30, 0x53	; 83
    305c:	f6 4c       	sbci	r31, 0xC6	; 198
    305e:	10 82       	st	Z, r1
    3060:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	89 0d       	add	r24, r9
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	93 94       	inc	r9
    306a:	93 94       	inc	r9
    306c:	fc 01       	movw	r30, r24
    306e:	ee 0f       	add	r30, r30
    3070:	ff 1f       	adc	r31, r31
    3072:	e3 5d       	subi	r30, 0xD3	; 211
    3074:	f6 4c       	sbci	r31, 0xC6	; 198
    3076:	e0 82       	st	Z, r14
    3078:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    307a:	fc 01       	movw	r30, r24
    307c:	ee 0f       	add	r30, r30
    307e:	ff 1f       	adc	r31, r31
    3080:	e3 59       	subi	r30, 0x93	; 147
    3082:	f6 4c       	sbci	r31, 0xC6	; 198
    3084:	c0 82       	st	Z, r12
    3086:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	fc 01       	movw	r30, r24
    308e:	e3 55       	subi	r30, 0x53	; 83
    3090:	f6 4c       	sbci	r31, 0xC6	; 198
    3092:	a0 82       	st	Z, r10
    3094:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    3096:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <currDepth>
    309a:	82 2f       	mov	r24, r18
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	fc 01       	movw	r30, r24
    30a0:	ee 0f       	add	r30, r30
    30a2:	ff 1f       	adc	r31, r31
    30a4:	e1 51       	subi	r30, 0x11	; 17
    30a6:	f6 4c       	sbci	r31, 0xC6	; 198
    30a8:	40 81       	ld	r20, Z
    30aa:	51 81       	ldd	r21, Z+1	; 0x01
    30ac:	45 2b       	or	r20, r21
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <ProcessInput+0x42a>
    30b0:	85 cf       	rjmp	.-246    	; 0x2fbc <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    30b2:	22 23       	and	r18, r18
    30b4:	61 f1       	breq	.+88     	; 0x310e <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	fc 01       	movw	r30, r24
    30bc:	e5 51       	subi	r30, 0x15	; 21
    30be:	f6 4c       	sbci	r31, 0xC6	; 198
    30c0:	6c ee       	ldi	r22, 0xEC	; 236
    30c2:	78 e3       	ldi	r23, 0x38	; 56
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	9d d9       	rcall	.-3270   	; 0x2404 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30ca:	20 91 06 39 	lds	r18, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    30ce:	30 91 07 39 	lds	r19, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    30d2:	11 e0       	ldi	r17, 0x01	; 1
    30d4:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30d6:	89 2d       	mov	r24, r9
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	fc 01       	movw	r30, r24
    30dc:	ee 0f       	add	r30, r30
    30de:	ff 1f       	adc	r31, r31
    30e0:	e3 5d       	subi	r30, 0xD3	; 211
    30e2:	f6 4c       	sbci	r31, 0xC6	; 198
    30e4:	40 91 f8 38 	lds	r20, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    30e8:	50 91 f9 38 	lds	r21, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    30ec:	40 83       	st	Z, r20
    30ee:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    30f0:	fc 01       	movw	r30, r24
    30f2:	ee 0f       	add	r30, r30
    30f4:	ff 1f       	adc	r31, r31
    30f6:	e3 59       	subi	r30, 0x93	; 147
    30f8:	f6 4c       	sbci	r31, 0xC6	; 198
    30fa:	20 83       	st	Z, r18
    30fc:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    30fe:	88 0f       	add	r24, r24
    3100:	99 1f       	adc	r25, r25
    3102:	fc 01       	movw	r30, r24
    3104:	e3 55       	subi	r30, 0x53	; 83
    3106:	f6 4c       	sbci	r31, 0xC6	; 198
    3108:	10 82       	st	Z, r1
    310a:	11 82       	std	Z+1, r1	; 0x01
    310c:	28 c5       	rjmp	.+2640   	; 0x3b5e <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    310e:	1f ef       	ldi	r17, 0xFF	; 255
    3110:	19 0d       	add	r17, r9
    3112:	25 c5       	rjmp	.+2634   	; 0x3b5e <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3114:	ee 2e       	mov	r14, r30
    3116:	f1 2c       	mov	r15, r1
    3118:	f7 01       	movw	r30, r14
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	e3 51       	subi	r30, 0x13	; 19
    3120:	f6 4c       	sbci	r31, 0xC6	; 198
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	d3 01       	movw	r26, r6
    3128:	11 96       	adiw	r26, 0x01	; 1
    312a:	6c 91       	ld	r22, X
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	29 da       	rcall	.-2990   	; 0x2584 <FindChild>
    3132:	f7 01       	movw	r30, r14
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	e1 51       	subi	r30, 0x11	; 17
    313a:	f6 4c       	sbci	r31, 0xC6	; 198
    313c:	80 83       	st	Z, r24
    313e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3140:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <currDepth>
    3144:	29 2f       	mov	r18, r25
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	f9 01       	movw	r30, r18
    314a:	ee 0f       	add	r30, r30
    314c:	ff 1f       	adc	r31, r31
    314e:	e1 51       	subi	r30, 0x11	; 17
    3150:	f6 4c       	sbci	r31, 0xC6	; 198
    3152:	40 81       	ld	r20, Z
    3154:	51 81       	ldd	r21, Z+1	; 0x01
    3156:	41 15       	cp	r20, r1
    3158:	51 05       	cpc	r21, r1
    315a:	21 f0       	breq	.+8      	; 0x3164 <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    315c:	6c ee       	ldi	r22, 0xEC	; 236
    315e:	78 e3       	ldi	r23, 0x38	; 56
    3160:	ca 01       	movw	r24, r20
    3162:	1c c0       	rjmp	.+56     	; 0x319c <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    3164:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    3166:	81 f1       	breq	.+96     	; 0x31c8 <ProcessInput+0x540>
    3168:	22 0f       	add	r18, r18
    316a:	33 1f       	adc	r19, r19
    316c:	f9 01       	movw	r30, r18
    316e:	e5 51       	subi	r30, 0x15	; 21
    3170:	f6 4c       	sbci	r31, 0xC6	; 198
    3172:	d3 01       	movw	r26, r6
    3174:	11 96       	adiw	r26, 0x01	; 1
    3176:	6c 91       	ld	r22, X
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	bc d9       	rcall	.-3208   	; 0x24f6 <CheckLetter>
    317e:	81 11       	cpse	r24, r1
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    3182:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    3184:	ec c4       	rjmp	.+2520   	; 0x3b5e <ProcessInput+0xed6>
    3186:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	ee 0f       	add	r30, r30
    318e:	ff 1f       	adc	r31, r31
    3190:	e5 51       	subi	r30, 0x15	; 21
    3192:	f6 4c       	sbci	r31, 0xC6	; 198
    3194:	6c ee       	ldi	r22, 0xEC	; 236
    3196:	78 e3       	ldi	r23, 0x38	; 56
    3198:	80 81       	ld	r24, Z
    319a:	91 81       	ldd	r25, Z+1	; 0x01
    319c:	33 d9       	rcall	.-3482   	; 0x2404 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    319e:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3956+0x1c>
    31a2:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <actObj1.3956+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31a6:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3956+0xe>
    31aa:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3956+0xf>
    31ae:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    31b2:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    31b6:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    31ba:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    31be:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    31c2:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    31c6:	32 ce       	rjmp	.-924    	; 0x2e2c <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31c8:	81 ed       	ldi	r24, 0xD1	; 209
    31ca:	99 e7       	ldi	r25, 0x79	; 121
    31cc:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    31d0:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    31d4:	8a e1       	ldi	r24, 0x1A	; 26
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	c9 c2       	rjmp	.+1426   	; 0x376c <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    31da:	80 37       	cpi	r24, 0x70	; 112
    31dc:	09 f0       	breq	.+2      	; 0x31e0 <ProcessInput+0x558>
    31de:	92 c0       	rjmp	.+292    	; 0x3304 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    31e0:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    31e4:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    31e8:	89 2b       	or	r24, r25
    31ea:	79 f0       	breq	.+30     	; 0x320a <ProcessInput+0x582>
    31ec:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    31f0:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    31f4:	89 2b       	or	r24, r25
    31f6:	49 f0       	breq	.+18     	; 0x320a <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31f8:	87 e0       	ldi	r24, 0x07	; 7
    31fa:	98 e7       	ldi	r25, 0x78	; 120
    31fc:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3200:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3204:	89 e5       	ldi	r24, 0x59	; 89
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	b1 c2       	rjmp	.+1378   	; 0x376c <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    320a:	b2 e0       	ldi	r27, 0x02	; 2
    320c:	fb 12       	cpse	r15, r27
    320e:	6f cd       	rjmp	.-1314   	; 0x2cee <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3210:	00 91 3e 38 	lds	r16, 0x383E	; 0x80383e <currDepth>
    3214:	10 e0       	ldi	r17, 0x00	; 0
    3216:	f8 01       	movw	r30, r16
    3218:	ee 0f       	add	r30, r30
    321a:	ff 1f       	adc	r31, r31
    321c:	e3 51       	subi	r30, 0x13	; 19
    321e:	f6 4c       	sbci	r31, 0xC6	; 198
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	d3 01       	movw	r26, r6
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	6c 91       	ld	r22, X
    322a:	80 81       	ld	r24, Z
    322c:	91 81       	ldd	r25, Z+1	; 0x01
    322e:	aa d9       	rcall	.-3244   	; 0x2584 <FindChild>
    3230:	00 0f       	add	r16, r16
    3232:	11 1f       	adc	r17, r17
    3234:	f8 01       	movw	r30, r16
    3236:	e1 51       	subi	r30, 0x11	; 17
    3238:	f6 4c       	sbci	r31, 0xC6	; 198
    323a:	80 83       	st	Z, r24
    323c:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    323e:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <currDepth>
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	2f 5f       	subi	r18, 0xFF	; 255
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	22 0f       	add	r18, r18
    324a:	33 1f       	adc	r19, r19
    324c:	f9 01       	movw	r30, r18
    324e:	e3 51       	subi	r30, 0x13	; 19
    3250:	f6 4c       	sbci	r31, 0xC6	; 198
    3252:	80 81       	ld	r24, Z
    3254:	91 81       	ldd	r25, Z+1	; 0x01
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	09 f4       	brne	.+2      	; 0x325c <ProcessInput+0x5d4>
    325a:	38 c3       	rjmp	.+1648   	; 0x38cc <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    325c:	40 91 4e 38 	lds	r20, 0x384E	; 0x80384e <inventory>
    3260:	50 91 4f 38 	lds	r21, 0x384F	; 0x80384f <inventory+0x1>
    3264:	84 17       	cp	r24, r20
    3266:	95 07       	cpc	r25, r21
    3268:	39 f0       	breq	.+14     	; 0x3278 <ProcessInput+0x5f0>
    326a:	40 91 50 38 	lds	r20, 0x3850	; 0x803850 <inventory+0x2>
    326e:	50 91 51 38 	lds	r21, 0x3851	; 0x803851 <inventory+0x3>
    3272:	84 17       	cp	r24, r20
    3274:	95 07       	cpc	r25, r21
    3276:	c1 f4       	brne	.+48     	; 0x32a8 <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3278:	82 ee       	ldi	r24, 0xE2	; 226
    327a:	97 e7       	ldi	r25, 0x77	; 119
    327c:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3280:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3284:	85 e2       	ldi	r24, 0x25	; 37
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    328c:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3298:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    329c:	f9 01       	movw	r30, r18
    329e:	e3 51       	subi	r30, 0x13	; 19
    32a0:	f6 4c       	sbci	r31, 0xC6	; 198
    32a2:	10 82       	st	Z, r1
    32a4:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    32a6:	c2 cd       	rjmp	.-1148   	; 0x2e2c <ProcessInput+0x1a4>
    32a8:	6c ee       	ldi	r22, 0xEC	; 236
    32aa:	78 e3       	ldi	r23, 0x38	; 56
    32ac:	ab d8       	rcall	.-3754   	; 0x2404 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    32ae:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3956+0x7>
    32b2:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
    32b6:	88 23       	and	r24, r24
    32b8:	09 f4       	brne	.+2      	; 0x32bc <ProcessInput+0x634>
    32ba:	e3 c2       	rjmp	.+1478   	; 0x3882 <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    32bc:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3956+0xb>
    32c0:	88 23       	and	r24, r24
    32c2:	09 f4       	brne	.+2      	; 0x32c6 <ProcessInput+0x63e>
    32c4:	14 cd       	rjmp	.-1496   	; 0x2cee <ProcessInput+0x66>
                                if (inventory[0]) {
    32c6:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    32ca:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    32ce:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
                                    inventory[1] = route[currDepth+1];
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	e1 51       	subi	r30, 0x11	; 17
    32da:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    32dc:	89 2b       	or	r24, r25
    32de:	39 f0       	breq	.+14     	; 0x32ee <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    32e0:	80 81       	ld	r24, Z
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <inventory+0x2>
    32e8:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <inventory+0x3>
    32ec:	06 c0       	rjmp	.+12     	; 0x32fa <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    32ee:	80 81       	ld	r24, Z
    32f0:	91 81       	ldd	r25, Z+1	; 0x01
    32f2:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <inventory>
    32f6:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    32fa:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    32fe:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
    3302:	2b c0       	rjmp	.+86     	; 0x335a <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    3304:	84 36       	cpi	r24, 0x64	; 100
    3306:	d9 f4       	brne	.+54     	; 0x333e <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3308:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    330c:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	09 f0       	breq	.+2      	; 0x3316 <ProcessInput+0x68e>
    3314:	3c c4       	rjmp	.+2168   	; 0x3b8e <ProcessInput+0xf06>
    3316:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    331a:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    331e:	89 2b       	or	r24, r25
    3320:	49 f4       	brne	.+18     	; 0x3334 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3322:	86 ea       	ldi	r24, 0xA6	; 166
    3324:	97 e7       	ldi	r25, 0x77	; 119
    3326:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    332a:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    332e:	86 e2       	ldi	r24, 0x26	; 38
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	72 cd       	rjmp	.-1308   	; 0x2e18 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3334:	b2 e0       	ldi	r27, 0x02	; 2
    3336:	fb 16       	cp	r15, r27
    3338:	09 f4       	brne	.+2      	; 0x333c <ProcessInput+0x6b4>
    333a:	8b c4       	rjmp	.+2326   	; 0x3c52 <ProcessInput+0xfca>
    333c:	d8 cc       	rjmp	.-1616   	; 0x2cee <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    333e:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3340:	81 f4       	brne	.+32     	; 0x3362 <ProcessInput+0x6da>
    3342:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <inventory>
    3346:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <inventory+0x1>
    334a:	89 2b       	or	r24, r25
    334c:	31 f4       	brne	.+12     	; 0x335a <ProcessInput+0x6d2>
    334e:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    3352:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    3356:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    3358:	21 f3       	breq	.-56     	; 0x3322 <ProcessInput+0x69a>
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	1a dc       	rcall	.-1996   	; 0x2b92 <ShowInventory>
    335e:	18 2f       	mov	r17, r24
    3360:	fe c3       	rjmp	.+2044   	; 0x3b5e <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3362:	9c e8       	ldi	r25, 0x8C	; 140
    3364:	98 0f       	add	r25, r24
    3366:	92 30       	cpi	r25, 0x02	; 2
    3368:	28 f0       	brcs	.+10     	; 0x3374 <ProcessInput+0x6ec>
    336a:	87 36       	cpi	r24, 0x67	; 103
    336c:	19 f0       	breq	.+6      	; 0x3374 <ProcessInput+0x6ec>
    336e:	82 37       	cpi	r24, 0x72	; 114
    3370:	09 f0       	breq	.+2      	; 0x3374 <ProcessInput+0x6ec>
    3372:	b5 c2       	rjmp	.+1386   	; 0x38de <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    3374:	8e ef       	ldi	r24, 0xFE	; 254
    3376:	8f 0d       	add	r24, r15
    3378:	82 30       	cpi	r24, 0x02	; 2
    337a:	08 f0       	brcs	.+2      	; 0x337e <ProcessInput+0x6f6>
    337c:	b8 cc       	rjmp	.-1680   	; 0x2cee <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    337e:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    3382:	0e 2f       	mov	r16, r30
    3384:	10 e0       	ldi	r17, 0x00	; 0
    3386:	d3 01       	movw	r26, r6
    3388:	af 0d       	add	r26, r15
    338a:	b1 1d       	adc	r27, r1
    338c:	11 97       	sbiw	r26, 0x01	; 1
    338e:	f8 01       	movw	r30, r16
    3390:	ee 0f       	add	r30, r30
    3392:	ff 1f       	adc	r31, r31
    3394:	e3 51       	subi	r30, 0x13	; 19
    3396:	f6 4c       	sbci	r31, 0xC6	; 198
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	6c 91       	ld	r22, X
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	f0 d8       	rcall	.-3616   	; 0x2584 <FindChild>
    33a4:	f8 01       	movw	r30, r16
    33a6:	ee 0f       	add	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	e1 51       	subi	r30, 0x11	; 17
    33ac:	f6 4c       	sbci	r31, 0xC6	; 198
    33ae:	80 83       	st	Z, r24
    33b0:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    33b2:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	ee 0f       	add	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	e1 51       	subi	r30, 0x11	; 17
    33be:	f6 4c       	sbci	r31, 0xC6	; 198
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	09 f4       	brne	.+2      	; 0x33ca <ProcessInput+0x742>
    33c8:	78 c2       	rjmp	.+1264   	; 0x38ba <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    33ca:	f3 e0       	ldi	r31, 0x03	; 3
    33cc:	ff 12       	cpse	r15, r31
    33ce:	60 c1       	rjmp	.+704    	; 0x3690 <ProcessInput+0xa08>
    33d0:	d3 01       	movw	r26, r6
    33d2:	2c 91       	ld	r18, X
    33d4:	25 37       	cpi	r18, 0x75	; 117
    33d6:	19 f0       	breq	.+6      	; 0x33de <ProcessInput+0x756>
    33d8:	27 36       	cpi	r18, 0x67	; 103
    33da:	09 f0       	breq	.+2      	; 0x33de <ProcessInput+0x756>
    33dc:	59 c1       	rjmp	.+690    	; 0x3690 <ProcessInput+0xa08>
    33de:	00 e0       	ldi	r16, 0x00	; 0
    33e0:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33e2:	41 e6       	ldi	r20, 0x61	; 97
    33e4:	c4 2e       	mov	r12, r20
    33e6:	49 e7       	ldi	r20, 0x79	; 121
    33e8:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    33ea:	51 e2       	ldi	r21, 0x21	; 33
    33ec:	a5 2e       	mov	r10, r21
    33ee:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    33f0:	88 24       	eor	r8, r8
    33f2:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    33f4:	91 2c       	mov	r9, r1
    33f6:	e0 2e       	mov	r14, r16
    33f8:	f1 2c       	mov	r15, r1
    33fa:	c7 01       	movw	r24, r14
    33fc:	88 0f       	add	r24, r24
    33fe:	99 1f       	adc	r25, r25
    3400:	fc 01       	movw	r30, r24
    3402:	e2 5b       	subi	r30, 0xB2	; 178
    3404:	f7 4c       	sbci	r31, 0xC7	; 199
    3406:	7f 01       	movw	r14, r30
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    340e:	79 f0       	breq	.+30     	; 0x342e <ProcessInput+0x7a6>
    3410:	d3 01       	movw	r26, r6
    3412:	11 96       	adiw	r26, 0x01	; 1
    3414:	6c 91       	ld	r22, X
    3416:	6f d8       	rcall	.-3874   	; 0x24f6 <CheckLetter>
    3418:	88 23       	and	r24, r24
    341a:	49 f0       	breq	.+18     	; 0x342e <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    341c:	61 ec       	ldi	r22, 0xC1	; 193
    341e:	78 e3       	ldi	r23, 0x38	; 56
    3420:	f7 01       	movw	r30, r14
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
                                    x = 2;
    342a:	02 e0       	ldi	r16, 0x02	; 2
    342c:	1d c0       	rjmp	.+58     	; 0x3468 <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    342e:	01 30       	cpi	r16, 0x01	; 1
    3430:	d1 f4       	brne	.+52     	; 0x3466 <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3432:	e1 2f       	mov	r30, r17
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	df 01       	movw	r26, r30
    3438:	aa 0f       	add	r26, r26
    343a:	bb 1f       	adc	r27, r27
    343c:	a3 5d       	subi	r26, 0xD3	; 211
    343e:	b6 4c       	sbci	r27, 0xC6	; 198
    3440:	cd 92       	st	X+, r12
    3442:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    3444:	df 01       	movw	r26, r30
    3446:	aa 0f       	add	r26, r26
    3448:	bb 1f       	adc	r27, r27
    344a:	a3 59       	subi	r26, 0x93	; 147
    344c:	b6 4c       	sbci	r27, 0xC6	; 198
    344e:	ad 92       	st	X+, r10
    3450:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3452:	ee 0f       	add	r30, r30
    3454:	ff 1f       	adc	r31, r31
    3456:	e3 55       	subi	r30, 0x53	; 83
    3458:	f6 4c       	sbci	r31, 0xC6	; 198
    345a:	80 82       	st	Z, r8
    345c:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    345e:	d3 01       	movw	r26, r6
    3460:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3462:	1f 5f       	subi	r17, 0xFF	; 255
    3464:	01 c0       	rjmp	.+2      	; 0x3468 <ProcessInput+0x7e0>
    3466:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    3468:	0f 5f       	subi	r16, 0xFF	; 255
    346a:	01 30       	cpi	r16, 0x01	; 1
    346c:	21 f2       	breq	.-120    	; 0x33f6 <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    346e:	f3 01       	movw	r30, r6
    3470:	80 81       	ld	r24, Z
    3472:	88 23       	and	r24, r24
    3474:	09 f4       	brne	.+2      	; 0x3478 <ProcessInput+0x7f0>
    3476:	73 c3       	rjmp	.+1766   	; 0x3b5e <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    3478:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	e1 51       	subi	r30, 0x11	; 17
    3484:	f6 4c       	sbci	r31, 0xC6	; 198
    3486:	6c ee       	ldi	r22, 0xEC	; 236
    3488:	78 e3       	ldi	r23, 0x38	; 56
    348a:	80 81       	ld	r24, Z
    348c:	91 81       	ldd	r25, Z+1	; 0x01
    348e:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3492:	e0 90 0a 39 	lds	r14, 0x390A	; 0x80390a <actObj1.3956+0x1e>
    3496:	f0 90 0b 39 	lds	r15, 0x390B	; 0x80390b <actObj1.3956+0x1f>
    349a:	f1 e0       	ldi	r31, 0x01	; 1
    349c:	ef 16       	cp	r14, r31
    349e:	f1 04       	cpc	r15, r1
    34a0:	09 f0       	breq	.+2      	; 0x34a4 <ProcessInput+0x81c>
    34a2:	89 c0       	rjmp	.+274    	; 0x35b6 <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    34a4:	93 01       	movw	r18, r6
    34a6:	2e 5f       	subi	r18, 0xFE	; 254
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	61 e0       	ldi	r22, 0x01	; 1
    34ae:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x10>
    34b2:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x11>
    34b6:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
                                if (data[2] == '1') {
    34ba:	d3 01       	movw	r26, r6
    34bc:	12 96       	adiw	r26, 0x02	; 2
    34be:	3c 91       	ld	r19, X
    34c0:	31 33       	cpi	r19, 0x31	; 49
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <ProcessInput+0x83e>
    34c4:	4c c3       	rjmp	.+1688   	; 0x3b5e <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    34c6:	20 91 cc 38 	lds	r18, 0x38CC	; 0x8038cc <actObj2.3957+0xb>
                                    if ((item < 31)||(item > 34)) {
    34ca:	51 ee       	ldi	r21, 0xE1	; 225
    34cc:	52 0f       	add	r21, r18
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	41 0f       	add	r20, r17
    34d2:	81 2f       	mov	r24, r17
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34d6:	fc 01       	movw	r30, r24
    34d8:	ee 0f       	add	r30, r30
    34da:	ff 1f       	adc	r31, r31
    34dc:	e3 5d       	subi	r30, 0xD3	; 211
    34de:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    34e0:	54 30       	cpi	r21, 0x04	; 4
    34e2:	b0 f0       	brcs	.+44     	; 0x3510 <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34e4:	21 e0       	ldi	r18, 0x01	; 1
    34e6:	39 e7       	ldi	r19, 0x79	; 121
    34e8:	20 83       	st	Z, r18
    34ea:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    34ec:	fc 01       	movw	r30, r24
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	e3 59       	subi	r30, 0x93	; 147
    34f4:	f6 4c       	sbci	r31, 0xC6	; 198
    34f6:	2a e1       	ldi	r18, 0x1A	; 26
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	20 83       	st	Z, r18
    34fc:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	fc 01       	movw	r30, r24
    3504:	e3 55       	subi	r30, 0x53	; 83
    3506:	f6 4c       	sbci	r31, 0xC6	; 198
    3508:	e0 82       	st	Z, r14
    350a:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    350c:	14 2f       	mov	r17, r20
    350e:	27 c3       	rjmp	.+1614   	; 0x3b5e <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3510:	60 e5       	ldi	r22, 0x50	; 80
    3512:	75 e7       	ldi	r23, 0x75	; 117
    3514:	60 83       	st	Z, r22
    3516:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3518:	fc 01       	movw	r30, r24
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	e3 59       	subi	r30, 0x93	; 147
    3520:	f6 4c       	sbci	r31, 0xC6	; 198
    3522:	62 eb       	ldi	r22, 0xB2	; 178
    3524:	70 e0       	ldi	r23, 0x00	; 0
    3526:	60 83       	st	Z, r22
    3528:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    352a:	88 0f       	add	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	fc 01       	movw	r30, r24
    3530:	e3 55       	subi	r30, 0x53	; 83
    3532:	f6 4c       	sbci	r31, 0xC6	; 198
    3534:	e0 82       	st	Z, r14
    3536:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3538:	84 2f       	mov	r24, r20
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	fc 01       	movw	r30, r24
    353e:	ee 0f       	add	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	e3 5d       	subi	r30, 0xD3	; 211
    3544:	f6 4c       	sbci	r31, 0xC6	; 198
    3546:	49 e5       	ldi	r20, 0x59	; 89
    3548:	5a e7       	ldi	r21, 0x7A	; 122
    354a:	40 83       	st	Z, r20
    354c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    354e:	fc 01       	movw	r30, r24
    3550:	ee 0f       	add	r30, r30
    3552:	ff 1f       	adc	r31, r31
    3554:	e3 59       	subi	r30, 0x93	; 147
    3556:	f6 4c       	sbci	r31, 0xC6	; 198
    3558:	42 e0       	ldi	r20, 0x02	; 2
    355a:	50 e0       	ldi	r21, 0x00	; 0
    355c:	40 83       	st	Z, r20
    355e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	fc 01       	movw	r30, r24
    3566:	e3 55       	subi	r30, 0x53	; 83
    3568:	f6 4c       	sbci	r31, 0xC6	; 198
    356a:	e0 82       	st	Z, r14
    356c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	81 0f       	add	r24, r17
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	1d 5f       	subi	r17, 0xFD	; 253
    3576:	fc 01       	movw	r30, r24
    3578:	ee 0f       	add	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	e3 5d       	subi	r30, 0xD3	; 211
    357e:	f6 4c       	sbci	r31, 0xC6	; 198
    3580:	4d ea       	ldi	r20, 0xAD	; 173
    3582:	58 e7       	ldi	r21, 0x78	; 120
    3584:	40 83       	st	Z, r20
    3586:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3588:	fc 01       	movw	r30, r24
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	e3 59       	subi	r30, 0x93	; 147
    3590:	f6 4c       	sbci	r31, 0xC6	; 198
    3592:	42 e1       	ldi	r20, 0x12	; 18
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	40 83       	st	Z, r20
    3598:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    359a:	88 0f       	add	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	fc 01       	movw	r30, r24
    35a0:	e3 55       	subi	r30, 0x53	; 83
    35a2:	f6 4c       	sbci	r31, 0xC6	; 198
    35a4:	e0 82       	st	Z, r14
    35a6:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    35a8:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <specialInput>
                                        specialInput[1] = item;
    35ac:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <specialInput+0x1>
                                        specialInput[2] = 0;
    35b0:	10 92 1e 39 	sts	0x391E, r1	; 0x80391e <specialInput+0x2>
    35b4:	d4 c2       	rjmp	.+1448   	; 0x3b5e <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    35b6:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3956+0x9>
    35ba:	80 91 cc 38 	lds	r24, 0x38CC	; 0x8038cc <actObj2.3957+0xb>
    35be:	98 13       	cpse	r25, r24
    35c0:	2e c0       	rjmp	.+92     	; 0x361e <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    35c2:	20 91 12 39 	lds	r18, 0x3912	; 0x803912 <actObj1.3956+0x26>
    35c6:	30 91 13 39 	lds	r19, 0x3913	; 0x803913 <actObj1.3956+0x27>
    35ca:	01 e0       	ldi	r16, 0x01	; 1
    35cc:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35ce:	81 2f       	mov	r24, r17
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	fc 01       	movw	r30, r24
    35d4:	ee 0f       	add	r30, r30
    35d6:	ff 1f       	adc	r31, r31
    35d8:	e3 5d       	subi	r30, 0xD3	; 211
    35da:	f6 4c       	sbci	r31, 0xC6	; 198
    35dc:	40 91 04 39 	lds	r20, 0x3904	; 0x803904 <actObj1.3956+0x18>
    35e0:	50 91 05 39 	lds	r21, 0x3905	; 0x803905 <actObj1.3956+0x19>
    35e4:	40 83       	st	Z, r20
    35e6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35e8:	fc 01       	movw	r30, r24
    35ea:	ee 0f       	add	r30, r30
    35ec:	ff 1f       	adc	r31, r31
    35ee:	e3 59       	subi	r30, 0x93	; 147
    35f0:	f6 4c       	sbci	r31, 0xC6	; 198
    35f2:	20 83       	st	Z, r18
    35f4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35f6:	88 0f       	add	r24, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	fc 01       	movw	r30, r24
    35fc:	e3 55       	subi	r30, 0x53	; 83
    35fe:	f6 4c       	sbci	r31, 0xC6	; 198
    3600:	10 82       	st	Z, r1
    3602:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3604:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <actObj1.3956+0x2a>
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    360e:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3612:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3616:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    361a:	10 2f       	mov	r17, r16
    361c:	a0 c2       	rjmp	.+1344   	; 0x3b5e <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    361e:	f3 01       	movw	r30, r6
    3620:	80 81       	ld	r24, Z
    3622:	85 37       	cpi	r24, 0x75	; 117
    3624:	99 f4       	brne	.+38     	; 0x364c <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3626:	81 2f       	mov	r24, r17
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	fc 01       	movw	r30, r24
    362c:	ee 0f       	add	r30, r30
    362e:	ff 1f       	adc	r31, r31
    3630:	e3 5d       	subi	r30, 0xD3	; 211
    3632:	f6 4c       	sbci	r31, 0xC6	; 198
    3634:	21 e0       	ldi	r18, 0x01	; 1
    3636:	39 e7       	ldi	r19, 0x79	; 121
    3638:	20 83       	st	Z, r18
    363a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    363c:	fc 01       	movw	r30, r24
    363e:	ee 0f       	add	r30, r30
    3640:	ff 1f       	adc	r31, r31
    3642:	e3 59       	subi	r30, 0x93	; 147
    3644:	f6 4c       	sbci	r31, 0xC6	; 198
    3646:	2a e1       	ldi	r18, 0x1A	; 26
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	15 c0       	rjmp	.+42     	; 0x3676 <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    364c:	87 36       	cpi	r24, 0x67	; 103
    364e:	09 f0       	breq	.+2      	; 0x3652 <ProcessInput+0x9ca>
    3650:	86 c2       	rjmp	.+1292   	; 0x3b5e <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3652:	81 2f       	mov	r24, r17
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	fc 01       	movw	r30, r24
    3658:	ee 0f       	add	r30, r30
    365a:	ff 1f       	adc	r31, r31
    365c:	e3 5d       	subi	r30, 0xD3	; 211
    365e:	f6 4c       	sbci	r31, 0xC6	; 198
    3660:	2f e9       	ldi	r18, 0x9F	; 159
    3662:	36 e7       	ldi	r19, 0x76	; 118
    3664:	20 83       	st	Z, r18
    3666:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3668:	fc 01       	movw	r30, r24
    366a:	ee 0f       	add	r30, r30
    366c:	ff 1f       	adc	r31, r31
    366e:	e3 59       	subi	r30, 0x93	; 147
    3670:	f6 4c       	sbci	r31, 0xC6	; 198
    3672:	28 e2       	ldi	r18, 0x28	; 40
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	20 83       	st	Z, r18
    3678:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	fc 01       	movw	r30, r24
    3680:	e3 55       	subi	r30, 0x53	; 83
    3682:	f6 4c       	sbci	r31, 0xC6	; 198
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	80 83       	st	Z, r24
    368a:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    368c:	1f 5f       	subi	r17, 0xFF	; 255
    368e:	67 c2       	rjmp	.+1230   	; 0x3b5e <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3690:	6c ee       	ldi	r22, 0xEC	; 236
    3692:	78 e3       	ldi	r23, 0x38	; 56
    3694:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3698:	d3 01       	movw	r26, r6
    369a:	8c 91       	ld	r24, X
    369c:	84 37       	cpi	r24, 0x74	; 116
    369e:	61 f5       	brne	.+88     	; 0x36f8 <ProcessInput+0xa70>
    36a0:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    36a4:	83 fd       	sbrc	r24, 3
    36a6:	43 c0       	rjmp	.+134    	; 0x372e <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36a8:	8b e1       	ldi	r24, 0x1B	; 27
    36aa:	99 e7       	ldi	r25, 0x79	; 121
    36ac:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    36b0:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    36b4:	8e e1       	ldi	r24, 0x1E	; 30
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    36bc:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    36c8:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36cc:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    36d0:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36d4:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    36d8:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    36dc:	20 93 31 39 	sts	0x3931, r18	; 0x803931 <reactStr+0x4>
    36e0:	30 93 32 39 	sts	0x3932, r19	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    36e4:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    36e8:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    36ec:	10 92 b1 39 	sts	0x39B1, r1	; 0x8039b1 <reactStr+0x84>
    36f0:	10 92 b2 39 	sts	0x39B2, r1	; 0x8039b2 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36f4:	13 e0       	ldi	r17, 0x03	; 3
    36f6:	33 c2       	rjmp	.+1126   	; 0x3b5e <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    36f8:	85 37       	cpi	r24, 0x75	; 117
    36fa:	39 f4       	brne	.+14     	; 0x370a <ProcessInput+0xa82>
    36fc:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    3700:	84 fd       	sbrc	r24, 4
    3702:	15 c0       	rjmp	.+42     	; 0x372e <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	99 e7       	ldi	r25, 0x79	; 121
    3708:	3b c2       	rjmp	.+1142   	; 0x3b80 <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    370a:	82 37       	cpi	r24, 0x72	; 114
    370c:	69 f4       	brne	.+26     	; 0x3728 <ProcessInput+0xaa0>
    370e:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3956+0x8>
    3712:	85 fd       	sbrc	r24, 5
    3714:	0c c0       	rjmp	.+24     	; 0x372e <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3716:	86 ee       	ldi	r24, 0xE6	; 230
    3718:	98 e7       	ldi	r25, 0x78	; 120
    371a:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    371e:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3722:	8b e1       	ldi	r24, 0x1B	; 27
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	78 cb       	rjmp	.-2320   	; 0x2e18 <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3728:	87 36       	cpi	r24, 0x67	; 103
    372a:	09 f4       	brne	.+2      	; 0x372e <ProcessInput+0xaa6>
    372c:	e0 ca       	rjmp	.-2624   	; 0x2cee <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    372e:	00 91 0a 39 	lds	r16, 0x390A	; 0x80390a <actObj1.3956+0x1e>
    3732:	10 91 0b 39 	lds	r17, 0x390B	; 0x80390b <actObj1.3956+0x1f>
    3736:	01 30       	cpi	r16, 0x01	; 1
    3738:	11 05       	cpc	r17, r1
    373a:	09 f5       	brne	.+66     	; 0x377e <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    373c:	93 01       	movw	r18, r6
    373e:	2e 5f       	subi	r18, 0xFE	; 254
    3740:	3f 4f       	sbci	r19, 0xFF	; 255
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	61 e0       	ldi	r22, 0x01	; 1
    3746:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x10>
    374a:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x11>
    374e:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
                                if (data[2] == '1') {
    3752:	f3 01       	movw	r30, r6
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	81 33       	cpi	r24, 0x31	; 49
    3758:	09 f0       	breq	.+2      	; 0x375c <ProcessInput+0xad4>
    375a:	13 cd       	rjmp	.-1498   	; 0x3182 <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    375c:	85 e2       	ldi	r24, 0x25	; 37
    375e:	95 e7       	ldi	r25, 0x75	; 117
    3760:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3764:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3768:	8b e2       	ldi	r24, 0x2B	; 43
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3770:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3774:	00 93 af 39 	sts	0x39AF, r16	; 0x8039af <reactStr+0x82>
    3778:	10 93 b0 39 	sts	0x39B0, r17	; 0x8039b0 <reactStr+0x83>
    377c:	57 cb       	rjmp	.-2386   	; 0x2e2c <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    377e:	01 15       	cp	r16, r1
    3780:	11 05       	cpc	r17, r1
    3782:	09 f4       	brne	.+2      	; 0x3786 <ProcessInput+0xafe>
    3784:	58 c0       	rjmp	.+176    	; 0x3836 <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3786:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3956+0x10>
    378a:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3956+0x11>
    378e:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3792:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3796:	00 93 6f 39 	sts	0x396F, r16	; 0x80396f <reactStr+0x42>
    379a:	10 93 70 39 	sts	0x3970, r17	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    379e:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    37a2:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37a6:	89 e5       	ldi	r24, 0x59	; 89
    37a8:	9a e7       	ldi	r25, 0x7A	; 122
    37aa:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <reactStr+0x4>
    37ae:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    37b2:	82 e0       	ldi	r24, 0x02	; 2
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	80 93 71 39 	sts	0x3971, r24	; 0x803971 <reactStr+0x44>
    37ba:	90 93 72 39 	sts	0x3972, r25	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	80 93 b1 39 	sts	0x39B1, r24	; 0x8039b1 <reactStr+0x84>
    37c6:	90 93 b2 39 	sts	0x39B2, r25	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ca:	2d ea       	ldi	r18, 0xAD	; 173
    37cc:	38 e7       	ldi	r19, 0x78	; 120
    37ce:	20 93 33 39 	sts	0x3933, r18	; 0x803933 <reactStr+0x6>
    37d2:	30 93 34 39 	sts	0x3934, r19	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    37d6:	22 e1       	ldi	r18, 0x12	; 18
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	20 93 73 39 	sts	0x3973, r18	; 0x803973 <reactStr+0x46>
    37de:	30 93 74 39 	sts	0x3974, r19	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    37e2:	80 93 b3 39 	sts	0x39B3, r24	; 0x8039b3 <reactStr+0x86>
    37e6:	90 93 b4 39 	sts	0x39B4, r25	; 0x8039b4 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    37ea:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x20>
    37ee:	90 91 0d 39 	lds	r25, 0x390D	; 0x80390d <actObj1.3956+0x21>
    37f2:	40 97       	sbiw	r24, 0x10	; 16
    37f4:	30 f0       	brcs	.+12     	; 0x3802 <ProcessInput+0xb7a>
    37f6:	8f e0       	ldi	r24, 0x0F	; 15
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	80 93 0c 39 	sts	0x390C, r24	; 0x80390c <actObj1.3956+0x20>
    37fe:	90 93 0d 39 	sts	0x390D, r25	; 0x80390d <actObj1.3956+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3802:	2c e1       	ldi	r18, 0x1C	; 28
    3804:	39 e3       	ldi	r19, 0x39	; 57
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	60 91 0c 39 	lds	r22, 0x390C	; 0x80390c <actObj1.3956+0x20>
    380c:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3956+0x12>
    3810:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3956+0x13>
    3814:	0e 94 b8 07 	call	0xf70	; 0xf70 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3818:	6c e1       	ldi	r22, 0x1C	; 28
    381a:	79 e3       	ldi	r23, 0x39	; 57
    381c:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3956+0x20>
    3820:	0e 94 18 11 	call	0x2230	; 0x2230 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3824:	e0 91 0c 39 	lds	r30, 0x390C	; 0x80390c <actObj1.3956+0x20>
    3828:	f0 91 0d 39 	lds	r31, 0x390D	; 0x80390d <actObj1.3956+0x21>
    382c:	e4 5e       	subi	r30, 0xE4	; 228
    382e:	f6 4c       	sbci	r31, 0xC6	; 198
    3830:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3832:	14 e0       	ldi	r17, 0x04	; 4
    3834:	94 c1       	rjmp	.+808    	; 0x3b5e <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3836:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3956+0x7>
    383a:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
    383e:	88 23       	and	r24, r24
    3840:	01 f1       	breq	.+64     	; 0x3882 <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3842:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <actObj1.3956+0x26>
    3846:	90 91 13 39 	lds	r25, 0x3913	; 0x803913 <actObj1.3956+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    384a:	20 91 04 39 	lds	r18, 0x3904	; 0x803904 <actObj1.3956+0x18>
    384e:	30 91 05 39 	lds	r19, 0x3905	; 0x803905 <actObj1.3956+0x19>
    3852:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3856:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    385a:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    385e:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3862:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3866:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    386a:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <actObj1.3956+0x2a>
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3874:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3878:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    387c:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
    3880:	d5 ca       	rjmp	.-2646   	; 0x2e2c <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3882:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3956+0x24>
    3886:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <actObj1.3956+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    388a:	20 91 02 39 	lds	r18, 0x3902	; 0x803902 <actObj1.3956+0x16>
    388e:	30 91 03 39 	lds	r19, 0x3903	; 0x803903 <actObj1.3956+0x17>
    3892:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3896:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    389a:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    389e:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    38a2:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    38a6:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    38aa:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <actObj1.3956+0x29>
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    38b4:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    38b8:	b9 ca       	rjmp	.-2702   	; 0x2e2c <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    38ba:	d3 01       	movw	r26, r6
    38bc:	8c 91       	ld	r24, X
    38be:	84 37       	cpi	r24, 0x74	; 116
    38c0:	11 f0       	breq	.+4      	; 0x38c6 <ProcessInput+0xc3e>
    38c2:	87 36       	cpi	r24, 0x67	; 103
    38c4:	19 f4       	brne	.+6      	; 0x38cc <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38c6:	89 e3       	ldi	r24, 0x39	; 57
    38c8:	99 e7       	ldi	r25, 0x79	; 121
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <ProcessInput+0xc48>
    38cc:	8d e4       	ldi	r24, 0x4D	; 77
    38ce:	99 e7       	ldi	r25, 0x79	; 121
    38d0:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    38d4:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    38d8:	84 e1       	ldi	r24, 0x14	; 20
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	9d ca       	rjmp	.-2758   	; 0x2e18 <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    38de:	81 36       	cpi	r24, 0x61	; 97
    38e0:	09 f0       	breq	.+2      	; 0x38e4 <ProcessInput+0xc5c>
    38e2:	4f cc       	rjmp	.-1890   	; 0x3182 <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    38e4:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <specialPassed>
    38e8:	82 30       	cpi	r24, 0x02	; 2
    38ea:	08 f4       	brcc	.+2      	; 0x38ee <ProcessInput+0xc66>
    38ec:	c7 c0       	rjmp	.+398    	; 0x3a7c <ProcessInput+0xdf4>
                if (data[1] > 0) {
    38ee:	f3 01       	movw	r30, r6
    38f0:	21 81       	ldd	r18, Z+1	; 0x01
    38f2:	22 23       	and	r18, r18
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <ProcessInput+0xc70>
    38f6:	af c0       	rjmp	.+350    	; 0x3a56 <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    38f8:	ce 01       	movw	r24, r28
    38fa:	01 96       	adiw	r24, 0x01	; 1
    38fc:	7c 01       	movw	r14, r24
    38fe:	88 e0       	ldi	r24, 0x08	; 8
    3900:	d7 01       	movw	r26, r14
    3902:	1d 92       	st	X+, r1
    3904:	8a 95       	dec	r24
    3906:	e9 f7       	brne	.-6      	; 0x3902 <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3908:	20 53       	subi	r18, 0x30	; 48
    390a:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    390c:	32 81       	ldd	r19, Z+2	; 0x02
    390e:	31 53       	subi	r19, 0x31	; 49
    3910:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3912:	83 81       	ldd	r24, Z+3	; 0x03
    3914:	81 36       	cpi	r24, 0x61	; 97
    3916:	11 f4       	brne	.+4      	; 0x391c <ProcessInput+0xc94>
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	0c c0       	rjmp	.+24     	; 0x3934 <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    391c:	85 36       	cpi	r24, 0x65	; 101
    391e:	19 f4       	brne	.+6      	; 0x3926 <ProcessInput+0xc9e>
    3920:	f3 01       	movw	r30, r6
    3922:	13 82       	std	Z+3, r1	; 0x03
    3924:	08 c0       	rjmp	.+16     	; 0x3936 <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    3926:	86 36       	cpi	r24, 0x66	; 102
    3928:	19 f4       	brne	.+6      	; 0x3930 <ProcessInput+0xca8>
    392a:	83 e0       	ldi	r24, 0x03	; 3
    392c:	83 83       	std	Z+3, r24	; 0x03
    392e:	03 c0       	rjmp	.+6      	; 0x3936 <ProcessInput+0xcae>
                    else data[3] = 2;
    3930:	82 e0       	ldi	r24, 0x02	; 2
    3932:	f3 01       	movw	r30, r6
    3934:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3936:	21 fd       	sbrc	r18, 1
    3938:	04 c0       	rjmp	.+8      	; 0x3942 <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	dc 01       	movw	r26, r24
    3940:	04 c0       	rjmp	.+8      	; 0x394a <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	a0 e1       	ldi	r26, 0x10	; 16
    3948:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    394a:	20 ff       	sbrs	r18, 0
    394c:	03 c0       	rjmp	.+6      	; 0x3954 <ProcessInput+0xccc>
    394e:	9f 5f       	subi	r25, 0xFF	; 255
    3950:	af 4f       	sbci	r26, 0xFF	; 255
    3952:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3954:	f3 01       	movw	r30, r6
    3956:	23 81       	ldd	r18, Z+3	; 0x03
    3958:	21 fd       	sbrc	r18, 1
    395a:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    395c:	20 ff       	sbrs	r18, 0
    395e:	03 c0       	rjmp	.+6      	; 0x3966 <ProcessInput+0xcde>
    3960:	40 96       	adiw	r24, 0x10	; 16
    3962:	a1 1d       	adc	r26, r1
    3964:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3966:	31 ff       	sbrs	r19, 1
    3968:	03 c0       	rjmp	.+6      	; 0x3970 <ProcessInput+0xce8>
    396a:	90 5f       	subi	r25, 0xF0	; 240
    396c:	af 4f       	sbci	r26, 0xFF	; 255
    396e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3970:	30 ff       	sbrs	r19, 0
    3972:	03 c0       	rjmp	.+6      	; 0x397a <ProcessInput+0xcf2>
    3974:	01 96       	adiw	r24, 0x01	; 1
    3976:	a1 1d       	adc	r26, r1
    3978:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    397a:	40 91 4d 38 	lds	r20, 0x384D	; 0x80384d <whoami>
    397e:	24 e0       	ldi	r18, 0x04	; 4
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	24 1b       	sub	r18, r20
    3984:	31 09       	sbc	r19, r1
    3986:	04 c0       	rjmp	.+8      	; 0x3990 <ProcessInput+0xd08>
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	aa 1f       	adc	r26, r26
    398e:	bb 1f       	adc	r27, r27
    3990:	2a 95       	dec	r18
    3992:	d2 f7       	brpl	.-12     	; 0x3988 <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3994:	28 ec       	ldi	r18, 0xC8	; 200
    3996:	34 e7       	ldi	r19, 0x74	; 116
    3998:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    399c:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    39a0:	20 e2       	ldi	r18, 0x20	; 32
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	20 93 6f 39 	sts	0x396F, r18	; 0x80396f <reactStr+0x42>
    39a8:	30 93 70 39 	sts	0x3970, r19	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    39ac:	21 e0       	ldi	r18, 0x01	; 1
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	20 93 af 39 	sts	0x39AF, r18	; 0x8039af <reactStr+0x82>
    39b4:	30 93 b0 39 	sts	0x39B0, r19	; 0x8039b0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39b8:	4d e9       	ldi	r20, 0x9D	; 157
    39ba:	54 e7       	ldi	r21, 0x74	; 116
    39bc:	40 93 31 39 	sts	0x3931, r20	; 0x803931 <reactStr+0x4>
    39c0:	50 93 32 39 	sts	0x3932, r21	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    39c4:	42 e0       	ldi	r20, 0x02	; 2
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	40 93 71 39 	sts	0x3971, r20	; 0x803971 <reactStr+0x44>
    39cc:	50 93 72 39 	sts	0x3972, r21	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    39d0:	20 93 b1 39 	sts	0x39B1, r18	; 0x8039b1 <reactStr+0x84>
    39d4:	30 93 b2 39 	sts	0x39B2, r19	; 0x8039b2 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39d8:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    39da:	f7 01       	movw	r30, r14
    39dc:	e0 0f       	add	r30, r16
    39de:	f1 1d       	adc	r31, r1
    39e0:	28 2f       	mov	r18, r24
    39e2:	2f 70       	andi	r18, 0x0F	; 15
    39e4:	20 83       	st	Z, r18
                        answer /= 16;
    39e6:	44 e0       	ldi	r20, 0x04	; 4
    39e8:	b6 95       	lsr	r27
    39ea:	a7 95       	ror	r26
    39ec:	97 95       	ror	r25
    39ee:	87 95       	ror	r24
    39f0:	4a 95       	dec	r20
    39f2:	d1 f7       	brne	.-12     	; 0x39e8 <ProcessInput+0xd60>
                        if (answer == 0) break;
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	a1 05       	cpc	r26, r1
    39f8:	b1 05       	cpc	r27, r1
    39fa:	49 f4       	brne	.+18     	; 0x3a0e <ProcessInput+0xd86>
    39fc:	2d e2       	ldi	r18, 0x2D	; 45
    39fe:	c2 2e       	mov	r12, r18
    3a00:	29 e3       	ldi	r18, 0x39	; 57
    3a02:	d2 2e       	mov	r13, r18
    3a04:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3a06:	aa 24       	eor	r10, r10
    3a08:	a3 94       	inc	r10
    3a0a:	b1 2c       	mov	r11, r1
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a0e:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3a10:	e4 cf       	rjmp	.-56     	; 0x39da <ProcessInput+0xd52>
    3a12:	b2 e0       	ldi	r27, 0x02	; 2
    3a14:	cb 0e       	add	r12, r27
    3a16:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3a18:	08 30       	cpi	r16, 0x08	; 8
    3a1a:	08 f0       	brcs	.+2      	; 0x3a1e <ProcessInput+0xd96>
    3a1c:	9e c0       	rjmp	.+316    	; 0x3b5a <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3a1e:	1f 5f       	subi	r17, 0xFF	; 255
    3a20:	f7 01       	movw	r30, r14
    3a22:	e0 0f       	add	r30, r16
    3a24:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a26:	80 81       	ld	r24, Z
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	83 57       	subi	r24, 0x73	; 115
    3a2c:	9b 48       	sbci	r25, 0x8B	; 139
    3a2e:	d6 01       	movw	r26, r12
    3a30:	14 96       	adiw	r26, 0x04	; 4
    3a32:	8d 93       	st	X+, r24
    3a34:	9c 93       	st	X, r25
    3a36:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3a38:	f6 01       	movw	r30, r12
    3a3a:	ec 5b       	subi	r30, 0xBC	; 188
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	a0 82       	st	Z, r10
    3a40:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3a42:	e0 5c       	subi	r30, 0xC0	; 192
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	a0 82       	st	Z, r10
    3a48:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3a4a:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3a4e:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3a52:	0f 5f       	subi	r16, 0xFF	; 255
    3a54:	de cf       	rjmp	.-68     	; 0x3a12 <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a56:	88 ee       	ldi	r24, 0xE8	; 232
    3a58:	94 e7       	ldi	r25, 0x74	; 116
    3a5a:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3a5e:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3a62:	8d e3       	ldi	r24, 0x3D	; 61
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3a6a:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3a76:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
    3a7a:	6e c0       	rjmp	.+220    	; 0x3b58 <ProcessInput+0xed0>
    3a7c:	e0 91 3e 38 	lds	r30, 0x383E	; 0x80383e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	ee 0f       	add	r30, r30
    3a84:	ff 1f       	adc	r31, r31
    3a86:	e1 51       	subi	r30, 0x11	; 17
    3a88:	f6 4c       	sbci	r31, 0xC6	; 198
    3a8a:	6c ee       	ldi	r22, 0xEC	; 236
    3a8c:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3a8e:	81 30       	cpi	r24, 0x01	; 1
    3a90:	09 f0       	breq	.+2      	; 0x3a94 <ProcessInput+0xe0c>
    3a92:	46 c0       	rjmp	.+140    	; 0x3b20 <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    3a94:	80 81       	ld	r24, Z
    3a96:	91 81       	ldd	r25, Z+1	; 0x01
    3a98:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3a9c:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3956+0x7>
    3aa0:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
    3aa4:	88 23       	and	r24, r24
    3aa6:	01 f1       	breq	.+64     	; 0x3ae8 <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3aa8:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <actObj1.3956+0x26>
    3aac:	90 91 13 39 	lds	r25, 0x3913	; 0x803913 <actObj1.3956+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ab0:	20 91 04 39 	lds	r18, 0x3904	; 0x803904 <actObj1.3956+0x18>
    3ab4:	30 91 05 39 	lds	r19, 0x3905	; 0x803905 <actObj1.3956+0x19>
    3ab8:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3abc:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3ac0:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3ac4:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3ac8:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3acc:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3ad0:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <actObj1.3956+0x2a>
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3ada:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3ade:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3956+0xa>
    3ae2:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
    3ae6:	38 c0       	rjmp	.+112    	; 0x3b58 <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3ae8:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3956+0x24>
    3aec:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <actObj1.3956+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3af0:	20 91 02 39 	lds	r18, 0x3902	; 0x803902 <actObj1.3956+0x16>
    3af4:	30 91 03 39 	lds	r19, 0x3903	; 0x803903 <actObj1.3956+0x17>
    3af8:	20 93 2f 39 	sts	0x392F, r18	; 0x80392f <reactStr+0x2>
    3afc:	30 93 30 39 	sts	0x3930, r19	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3b00:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3b04:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3b08:	10 92 af 39 	sts	0x39AF, r1	; 0x8039af <reactStr+0x82>
    3b0c:	10 92 b0 39 	sts	0x39B0, r1	; 0x8039b0 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3b10:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <actObj1.3956+0x29>
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3b1a:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    3b1e:	1c c0       	rjmp	.+56     	; 0x3b58 <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3b20:	80 81       	ld	r24, Z
    3b22:	91 81       	ldd	r25, Z+1	; 0x01
    3b24:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b28:	80 e6       	ldi	r24, 0x60	; 96
    3b2a:	98 e7       	ldi	r25, 0x78	; 120
    3b2c:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3b30:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3b34:	8d e4       	ldi	r24, 0x4D	; 77
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3b3c:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3b48:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3b4c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <getClock>
    3b50:	80 93 19 39 	sts	0x3919, r24	; 0x803919 <PunishmentTime>
    3b54:	90 93 1a 39 	sts	0x391A, r25	; 0x80391a <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3b58:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3b5a:	10 92 1c 39 	sts	0x391C, r1	; 0x80391c <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b5e:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <specialInput>
    3b62:	88 23       	and	r24, r24
    3b64:	19 f0       	breq	.+6      	; 0x3b6c <ProcessInput+0xee4>
    3b66:	10 93 2c 39 	sts	0x392C, r17	; 0x80392c <responseList>
    3b6a:	8b c0       	rjmp	.+278    	; 0x3c82 <ProcessInput+0xffa>
    3b6c:	81 2f       	mov	r24, r17
    3b6e:	01 c0       	rjmp	.+2      	; 0x3b72 <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	0e 94 86 11 	call	0x230c	; 0x230c <SetStandardResponse>
    3b76:	80 93 2c 39 	sts	0x392C, r24	; 0x80392c <responseList>
    3b7a:	83 c0       	rjmp	.+262    	; 0x3c82 <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b7c:	81 ed       	ldi	r24, 0xD1	; 209
    3b7e:	99 e7       	ldi	r25, 0x79	; 121
    3b80:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3b84:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3b88:	8a e1       	ldi	r24, 0x1A	; 26
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	45 c9       	rjmp	.-3446   	; 0x2e18 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3b8e:	f2 e0       	ldi	r31, 0x02	; 2
    3b90:	ff 12       	cpse	r15, r31
    3b92:	ad c8       	rjmp	.-3750   	; 0x2cee <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3b94:	f3 01       	movw	r30, r6
    3b96:	61 81       	ldd	r22, Z+1	; 0x01
    3b98:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <CheckLetter>
    3b9c:	88 23       	and	r24, r24
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <ProcessInput+0xf1a>
    3ba0:	58 c0       	rjmp	.+176    	; 0x3c52 <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3ba2:	00 e0       	ldi	r16, 0x00	; 0
    3ba4:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3ba6:	00 0f       	add	r16, r16
    3ba8:	11 1f       	adc	r17, r17
    3baa:	02 5b       	subi	r16, 0xB2	; 178
    3bac:	17 4c       	sbci	r17, 0xC7	; 199
    3bae:	6c ee       	ldi	r22, 0xEC	; 236
    3bb0:	78 e3       	ldi	r23, 0x38	; 56
    3bb2:	d8 01       	movw	r26, r16
    3bb4:	8d 91       	ld	r24, X+
    3bb6:	9c 91       	ld	r25, X
    3bb8:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bbc:	86 e9       	ldi	r24, 0x96	; 150
    3bbe:	97 e7       	ldi	r25, 0x77	; 119
    3bc0:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3bc4:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3bc8:	80 e1       	ldi	r24, 0x10	; 16
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	80 93 6f 39 	sts	0x396F, r24	; 0x80396f <reactStr+0x42>
    3bd0:	90 93 70 39 	sts	0x3970, r25	; 0x803970 <reactStr+0x43>
    reactStr[2][number]=type;
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	80 93 af 39 	sts	0x39AF, r24	; 0x8039af <reactStr+0x82>
    3bdc:	90 93 b0 39 	sts	0x39B0, r25	; 0x8039b0 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3be0:	20 91 06 39 	lds	r18, 0x3906	; 0x803906 <actObj1.3956+0x1a>
    3be4:	30 91 07 39 	lds	r19, 0x3907	; 0x803907 <actObj1.3956+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3be8:	40 91 f8 38 	lds	r20, 0x38F8	; 0x8038f8 <actObj1.3956+0xc>
    3bec:	50 91 f9 38 	lds	r21, 0x38F9	; 0x8038f9 <actObj1.3956+0xd>
    3bf0:	40 93 31 39 	sts	0x3931, r20	; 0x803931 <reactStr+0x4>
    3bf4:	50 93 32 39 	sts	0x3932, r21	; 0x803932 <reactStr+0x5>
    reactStr[1][number]=length;
    3bf8:	20 93 71 39 	sts	0x3971, r18	; 0x803971 <reactStr+0x44>
    3bfc:	30 93 72 39 	sts	0x3972, r19	; 0x803972 <reactStr+0x45>
    reactStr[2][number]=type;
    3c00:	10 92 b1 39 	sts	0x39B1, r1	; 0x8039b1 <reactStr+0x84>
    3c04:	10 92 b2 39 	sts	0x39B2, r1	; 0x8039b2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c08:	29 e5       	ldi	r18, 0x59	; 89
    3c0a:	3a e7       	ldi	r19, 0x7A	; 122
    3c0c:	20 93 33 39 	sts	0x3933, r18	; 0x803933 <reactStr+0x6>
    3c10:	30 93 34 39 	sts	0x3934, r19	; 0x803934 <reactStr+0x7>
    reactStr[1][number]=length;
    3c14:	22 e0       	ldi	r18, 0x02	; 2
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	20 93 73 39 	sts	0x3973, r18	; 0x803973 <reactStr+0x46>
    3c1c:	30 93 74 39 	sts	0x3974, r19	; 0x803974 <reactStr+0x47>
    reactStr[2][number]=type;
    3c20:	80 93 b3 39 	sts	0x39B3, r24	; 0x8039b3 <reactStr+0x86>
    3c24:	90 93 b4 39 	sts	0x39B4, r25	; 0x8039b4 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c28:	29 e5       	ldi	r18, 0x59	; 89
    3c2a:	37 e7       	ldi	r19, 0x77	; 119
    3c2c:	20 93 35 39 	sts	0x3935, r18	; 0x803935 <reactStr+0x8>
    3c30:	30 93 36 39 	sts	0x3936, r19	; 0x803936 <reactStr+0x9>
    reactStr[1][number]=length;
    3c34:	2d e3       	ldi	r18, 0x3D	; 61
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	20 93 75 39 	sts	0x3975, r18	; 0x803975 <reactStr+0x48>
    3c3c:	30 93 76 39 	sts	0x3976, r19	; 0x803976 <reactStr+0x49>
    reactStr[2][number]=type;
    3c40:	80 93 b5 39 	sts	0x39B5, r24	; 0x8039b5 <reactStr+0x88>
    3c44:	90 93 b6 39 	sts	0x39B6, r25	; 0x8039b6 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c48:	f8 01       	movw	r30, r16
    3c4a:	10 82       	st	Z, r1
    3c4c:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c4e:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3c50:	86 cf       	rjmp	.-244    	; 0x3b5e <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c52:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <inventory+0x2>
    3c56:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <inventory+0x3>
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	49 f0       	breq	.+18     	; 0x3c70 <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3c5e:	f3 01       	movw	r30, r6
    3c60:	61 81       	ldd	r22, Z+1	; 0x01
    3c62:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <CheckLetter>
    3c66:	88 23       	and	r24, r24
    3c68:	19 f0       	breq	.+6      	; 0x3c70 <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c6a:	01 e0       	ldi	r16, 0x01	; 1
    3c6c:	10 e0       	ldi	r17, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c6e:	9b cf       	rjmp	.-202    	; 0x3ba6 <ProcessInput+0xf1e>
    3c70:	81 e6       	ldi	r24, 0x61	; 97
    3c72:	99 e7       	ldi	r25, 0x79	; 121
    3c74:	80 93 2f 39 	sts	0x392F, r24	; 0x80392f <reactStr+0x2>
    3c78:	90 93 30 39 	sts	0x3930, r25	; 0x803930 <reactStr+0x3>
    reactStr[1][number]=length;
    3c7c:	81 e2       	ldi	r24, 0x21	; 33
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3c80:	cb c8       	rjmp	.-3690   	; 0x2e18 <ProcessInput+0x190>
    3c82:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3c84:	10 82       	st	Z, r1
    3c86:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3c8a:	1d ba       	out	0x1d, r1	; 29
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	28 96       	adiw	r28, 0x08	; 8
    3c90:	ee e0       	ldi	r30, 0x0E	; 14
    3c92:	37 c1       	rjmp	.+622    	; 0x3f02 <__epilogue_restores__+0x8>

00003c94 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3c94:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3c96:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <PunishmentTime>
    3c9a:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <PunishmentTime+0x1>
    3c9e:	89 2b       	or	r24, r25
    3ca0:	09 f1       	breq	.+66     	; 0x3ce4 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3ca2:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <getClock>
        if (PunishmentCount < PunishmentTime)
    3ca6:	20 91 19 39 	lds	r18, 0x3919	; 0x803919 <PunishmentTime>
    3caa:	30 91 1a 39 	lds	r19, 0x391A	; 0x80391a <PunishmentTime+0x1>
    3cae:	82 17       	cp	r24, r18
    3cb0:	93 07       	cpc	r25, r19
    3cb2:	08 f4       	brcc	.+2      	; 0x3cb6 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3cb4:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3cb6:	ac 01       	movw	r20, r24
    3cb8:	42 1b       	sub	r20, r18
    3cba:	53 0b       	sbc	r21, r19
    3cbc:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3cbe:	4b 30       	cpi	r20, 0x0B	; 11
    3cc0:	51 05       	cpc	r21, r1
    3cc2:	30 f0       	brcs	.+12     	; 0x3cd0 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3cc4:	10 92 19 39 	sts	0x3919, r1	; 0x803919 <PunishmentTime>
    3cc8:	10 92 1a 39 	sts	0x391A, r1	; 0x80391a <PunishmentTime+0x1>
            PunishmentCount = 10;
    3ccc:	2a e0       	ldi	r18, 0x0A	; 10
    3cce:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3cd0:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    3cd4:	81 11       	cpse	r24, r1
    3cd6:	06 c0       	rjmp	.+12     	; 0x3ce4 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3cd8:	65 e0       	ldi	r22, 0x05	; 5
    3cda:	62 1b       	sub	r22, r18
    3cdc:	8a e0       	ldi	r24, 0x0A	; 10
    3cde:	82 1b       	sub	r24, r18
    3ce0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3ce4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <CheckSend>
    3ce8:	88 23       	and	r24, r24
    3cea:	11 f0       	breq	.+4      	; 0x3cf0 <TextAdventure+0x5c>
    3cec:	c1 e0       	ldi	r28, 0x01	; 1
    3cee:	18 c0       	rjmp	.+48     	; 0x3d20 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3cf0:	0e 94 a9 13 	call	0x2752	; 0x2752 <CheckResponse>
    3cf4:	c8 2f       	mov	r28, r24
    3cf6:	81 11       	cpse	r24, r1
    3cf8:	f9 cf       	rjmp	.-14     	; 0x3cec <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3cfa:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <PunishmentTime>
    3cfe:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <PunishmentTime+0x1>
    3d02:	89 2b       	or	r24, r25
    3d04:	69 f4       	brne	.+26     	; 0x3d20 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d06:	80 e8       	ldi	r24, 0x80	; 128
    3d08:	98 e3       	ldi	r25, 0x38	; 56
    3d0a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <CheckInput>
    3d0e:	c8 2f       	mov	r28, r24
    3d10:	81 11       	cpse	r24, r1
    3d12:	05 c0       	rjmp	.+10     	; 0x3d1e <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3d14:	80 e8       	ldi	r24, 0x80	; 128
    3d16:	98 e3       	ldi	r25, 0x38	; 56
    3d18:	0e 94 44 16 	call	0x2c88	; 0x2c88 <ProcessInput>
    3d1c:	01 c0       	rjmp	.+2      	; 0x3d20 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d1e:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d20:	8c 2f       	mov	r24, r28
    3d22:	cf 91       	pop	r28
    3d24:	08 95       	ret

00003d26 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d26:	0e 94 98 03 	call	0x730	; 0x730 <Setup>
    LoadGameState();
    3d2a:	0e 94 ca 09 	call	0x1394	; 0x1394 <LoadGameState>
    gameState[0]|=1;
    3d2e:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState>
    3d32:	81 60       	ori	r24, 0x01	; 1
    3d34:	80 93 73 3a 	sts	0x3A73, r24	; 0x803a73 <gameState>

    //Check if fine
    if (SelfTest()) {
    3d38:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <SelfTest>
    3d3c:	88 23       	and	r24, r24
    3d3e:	21 f0       	breq	.+8      	; 0x3d48 <main+0x22>
        WipeAfterBoot(1);
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	0e 94 8e 09 	call	0x131c	; 0x131c <WipeAfterBoot>
    3d46:	ff cf       	rjmp	.-2      	; 0x3d46 <main+0x20>
    3d48:	c0 91 4a bf 	lds	r28, 0xBF4A	; 0x80bf4a <__bss_end+0x8423>
                if (buttonState != 0xff) {
                    iLED[CAT] = dimValue;
                    if ((effect & 0xffe0)==0)
                        effect = 0x13f + (buttonState << 5);
                } else {
                    iLED[CAT] = 0;
    3d4c:	d0 e0       	ldi	r29, 0x00	; 0
    3d4e:	c8 52       	subi	r28, 0x28	; 40
    3d50:	d5 4c       	sbci	r29, 0xC5	; 197
                if (lightsensorSum>>6 < 128) {
                    dimValue = lightsensorSum>>5;
                    if (dimValue < 8)
                        dimValue = 8;
                } else {
                    dimValue = 255;
    3d52:	1f ef       	ldi	r17, 0xFF	; 255
                lightsensorSum -= (lightsensorSum>>6);
                lightsensorSum += adcPhot>>4;
                if (lightsensorSum>>6 < 128) {
                    dimValue = lightsensorSum>>5;
                    if (dimValue < 8)
                        dimValue = 8;
    3d54:	08 e0       	ldi	r16, 0x08	; 8

    //Startup
    } else {

        while (TRUE) {
            if (GenerateAudio()) {
    3d56:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <GenerateAudio>
    3d5a:	88 23       	and	r24, r24
    3d5c:	e1 f3       	breq	.-8      	; 0x3d56 <main+0x30>

                //Some sound effects and button readout 
                lastButtonState = buttonState;
    3d5e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3d62:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
                buttonState = CheckButtons();
    3d66:	0e 94 1a 08 	call	0x1034	; 0x1034 <CheckButtons>
    3d6a:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
                if (buttonState != 0xff) {
    3d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d70:	a9 f0       	breq	.+42     	; 0x3d9c <main+0x76>
                    iLED[CAT] = dimValue;
    3d72:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    3d76:	98 83       	st	Y, r25
                    if ((effect & 0xffe0)==0)
    3d78:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <effect>
    3d7c:	30 91 4b 38 	lds	r19, 0x384B	; 0x80384b <effect+0x1>
    3d80:	20 7e       	andi	r18, 0xE0	; 224
    3d82:	23 2b       	or	r18, r19
    3d84:	61 f4       	brne	.+24     	; 0x3d9e <main+0x78>
                        effect = 0x13f + (buttonState << 5);
    3d86:	20 e2       	ldi	r18, 0x20	; 32
    3d88:	82 9f       	mul	r24, r18
    3d8a:	c0 01       	movw	r24, r0
    3d8c:	11 24       	eor	r1, r1
    3d8e:	81 5c       	subi	r24, 0xC1	; 193
    3d90:	9e 4f       	sbci	r25, 0xFE	; 254
    3d92:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <effect>
    3d96:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <effect+0x1>
    3d9a:	01 c0       	rjmp	.+2      	; 0x3d9e <main+0x78>
                } else {
                    iLED[CAT] = 0;
    3d9c:	18 82       	st	Y, r1
                }
                --buttonMark;
    3d9e:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <buttonMark>
    3da2:	81 50       	subi	r24, 0x01	; 1
    3da4:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <buttonMark>

                //Switch between audio port input (badge to badge comms) and onboard temperature sensor
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3da8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3dac:	82 31       	cpi	r24, 0x12	; 18
    3dae:	19 f4       	brne	.+6      	; 0x3db6 <main+0x90>
    3db0:	0e 94 0b 08 	call	0x1016	; 0x1016 <SelectAuIn>
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <main+0x94>
    3db6:	0e 94 fc 07 	call	0xff8	; 0xff8 <SelectTSens>

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
    3dba:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <gameNow>
    3dbe:	81 11       	cpse	r24, r1
    3dc0:	19 c0       	rjmp	.+50     	; 0x3df4 <main+0xce>
    3dc2:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <gameState+0xa>
    3dc6:	81 11       	cpse	r24, r1
    3dc8:	15 c0       	rjmp	.+42     	; 0x3df4 <main+0xce>
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
    3dca:	8a e7       	ldi	r24, 0x7A	; 122
    3dcc:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
                //Switch between audio port input (badge to badge comms) and onboard temperature sensor
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
    3dd0:	88 23       	and	r24, r24
    3dd2:	81 f0       	breq	.+32     	; 0x3df4 <main+0xce>
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
    3dd4:	8b e7       	ldi	r24, 0x7B	; 123
    3dd6:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
                if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
    3dda:	88 23       	and	r24, r24
    3ddc:	59 f0       	breq	.+22     	; 0x3df4 <main+0xce>
                     CheckState(123) &&         // Finished Lanyard
                     CheckState(124) &&         // Connected to 3 others
    3dde:	8c e7       	ldi	r24, 0x7C	; 124
    3de0:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>

                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
    3de4:	88 23       	and	r24, r24
    3de6:	31 f0       	breq	.+12     	; 0x3df4 <main+0xce>
                     CheckState(124) &&         // Connected to 3 others
                     CheckState(127)) {         // Finished the text adventure (implies state 125 and 126)
    3de8:	8f e7       	ldi	r24, 0x7F	; 127
    3dea:	0e 94 6f 09 	call	0x12de	; 0x12de <CheckState>
                //Victory dance when the game is completed
                if ((gameNow == TEXT) &&
                     (gameState[10] == 0) &&    // No "all ones" EEPROM failure (due to glitching etc.) detected
                     CheckState(122) &&         // Finished BastetDictates
                     CheckState(123) &&         // Finished Lanyard
                     CheckState(124) &&         // Connected to 3 others
    3dee:	81 11       	cpse	r24, r1
                     CheckState(127)) {         // Finished the text adventure (implies state 125 and 126)
                
                    //Completed!!!
                    VictoryDance();
    3df0:	0e 94 bb 0a 	call	0x1576	; 0x1576 <VictoryDance>
                }

                //Light effects
                GenerateBlinks();
    3df4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <GenerateBlinks>

                //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
                TextAdventure();
    3df8:	4d df       	rcall	.-358    	; 0x3c94 <TextAdventure>

                //Other games & user interaction checks
                MagnetMaze();
    3dfa:	0e 94 9b 02 	call	0x536	; 0x536 <MagnetMaze>
                LanyardCode();
    3dfe:	0e 94 9e 01 	call	0x33c	; 0x33c <LanyardCode>
                BastetDictates();
    3e02:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <BastetDictates>
                MakeFriends();
    3e06:	0e 94 8d 00 	call	0x11a	; 0x11a <MakeFriends>

                //Save progress
                SaveGameState();
    3e0a:	0e 94 c7 08 	call	0x118e	; 0x118e <SaveGameState>

                //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
                if (adcPhot < 10) UpdateState(116);
    3e0e:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    3e12:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    3e16:	0a 97       	sbiw	r24, 0x0a	; 10
    3e18:	18 f4       	brcc	.+6      	; 0x3e20 <main+0xfa>
    3e1a:	84 e7       	ldi	r24, 0x74	; 116
    3e1c:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>
                if (adcPhot > 100) UpdateState(128+116);
    3e20:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    3e24:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    3e28:	85 36       	cpi	r24, 0x65	; 101
    3e2a:	91 05       	cpc	r25, r1
    3e2c:	18 f0       	brcs	.+6      	; 0x3e34 <main+0x10e>
    3e2e:	84 ef       	ldi	r24, 0xF4	; 244
    3e30:	0e 94 4e 09 	call	0x129c	; 0x129c <UpdateState>

                lightsensorSum -= (lightsensorSum>>6);
    3e34:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <lightsensorSum>
    3e38:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e3c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3e40:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e44:	46 e0       	ldi	r20, 0x06	; 6
    3e46:	36 95       	lsr	r19
    3e48:	27 95       	ror	r18
    3e4a:	4a 95       	dec	r20
    3e4c:	e1 f7       	brne	.-8      	; 0x3e46 <main+0x120>
    3e4e:	82 1b       	sub	r24, r18
    3e50:	93 0b       	sbc	r25, r19
    3e52:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <lightsensorSum>
    3e56:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <lightsensorSum+0x1>
                lightsensorSum += adcPhot>>4;
    3e5a:	80 91 d1 3a 	lds	r24, 0x3AD1	; 0x803ad1 <adcPhot>
    3e5e:	90 91 d2 3a 	lds	r25, 0x3AD2	; 0x803ad2 <adcPhot+0x1>
    3e62:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <lightsensorSum>
    3e66:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e6a:	54 e0       	ldi	r21, 0x04	; 4
    3e6c:	96 95       	lsr	r25
    3e6e:	87 95       	ror	r24
    3e70:	5a 95       	dec	r21
    3e72:	e1 f7       	brne	.-8      	; 0x3e6c <main+0x146>
    3e74:	82 0f       	add	r24, r18
    3e76:	93 1f       	adc	r25, r19
    3e78:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <lightsensorSum>
    3e7c:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <lightsensorSum+0x1>
                if (lightsensorSum>>6 < 128) {
    3e80:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3e84:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e88:	81 15       	cp	r24, r1
    3e8a:	90 42       	sbci	r25, 0x20	; 32
    3e8c:	90 f4       	brcc	.+36     	; 0x3eb2 <main+0x18c>
                    dimValue = lightsensorSum>>5;
    3e8e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <lightsensorSum>
    3e92:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <lightsensorSum+0x1>
    3e96:	25 e0       	ldi	r18, 0x05	; 5
    3e98:	96 95       	lsr	r25
    3e9a:	87 95       	ror	r24
    3e9c:	2a 95       	dec	r18
    3e9e:	e1 f7       	brne	.-8      	; 0x3e98 <main+0x172>
    3ea0:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>
                    if (dimValue < 8)
    3ea4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    3ea8:	88 30       	cpi	r24, 0x08	; 8
    3eaa:	28 f4       	brcc	.+10     	; 0x3eb6 <main+0x190>
                        dimValue = 8;
    3eac:	00 93 0c 38 	sts	0x380C, r16	; 0x80380c <dimValue>
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <main+0x190>
                } else {
                    dimValue = 255;
    3eb2:	10 93 0c 38 	sts	0x380C, r17	; 0x80380c <dimValue>
                }

                //Check temperature
                HotSummer();
    3eb6:	0e 94 08 0a 	call	0x1410	; 0x1410 <HotSummer>
    3eba:	4d cf       	rjmp	.-358    	; 0x3d56 <main+0x30>

00003ebc <__tablejump2__>:
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	05 90       	lpm	r0, Z+
    3ec2:	f4 91       	lpm	r31, Z
    3ec4:	e0 2d       	mov	r30, r0
    3ec6:	09 94       	ijmp

00003ec8 <__prologue_saves__>:
    3ec8:	2f 92       	push	r2
    3eca:	3f 92       	push	r3
    3ecc:	4f 92       	push	r4
    3ece:	5f 92       	push	r5
    3ed0:	6f 92       	push	r6
    3ed2:	7f 92       	push	r7
    3ed4:	8f 92       	push	r8
    3ed6:	9f 92       	push	r9
    3ed8:	af 92       	push	r10
    3eda:	bf 92       	push	r11
    3edc:	cf 92       	push	r12
    3ede:	df 92       	push	r13
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	ca 1b       	sub	r28, r26
    3ef2:	db 0b       	sbc	r29, r27
    3ef4:	cd bf       	out	0x3d, r28	; 61
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	09 94       	ijmp

00003efa <__epilogue_restores__>:
    3efa:	2a 88       	ldd	r2, Y+18	; 0x12
    3efc:	39 88       	ldd	r3, Y+17	; 0x11
    3efe:	48 88       	ldd	r4, Y+16	; 0x10
    3f00:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f02:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f04:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f06:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f08:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f0c:	b9 84       	ldd	r11, Y+9	; 0x09
    3f0e:	c8 84       	ldd	r12, Y+8	; 0x08
    3f10:	df 80       	ldd	r13, Y+7	; 0x07
    3f12:	ee 80       	ldd	r14, Y+6	; 0x06
    3f14:	fd 80       	ldd	r15, Y+5	; 0x05
    3f16:	0c 81       	ldd	r16, Y+4	; 0x04
    3f18:	1b 81       	ldd	r17, Y+3	; 0x03
    3f1a:	aa 81       	ldd	r26, Y+2	; 0x02
    3f1c:	b9 81       	ldd	r27, Y+1	; 0x01
    3f1e:	ce 0f       	add	r28, r30
    3f20:	d1 1d       	adc	r29, r1
    3f22:	cd bf       	out	0x3d, r28	; 61
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	ed 01       	movw	r28, r26
    3f28:	08 95       	ret

00003f2a <_exit>:
    3f2a:	f8 94       	cli

00003f2c <__stop_program>:
    3f2c:	ff cf       	rjmp	.-2      	; 0x3f2c <__stop_program>
