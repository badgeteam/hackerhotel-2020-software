
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00803800  000011f6  000012aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  000091ae  000011ae  00001262  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000cb  00803826  00803826  000012d0  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ba0  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022dd  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001dea  00000000  00000000  000073dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000055c  00000000  00000000  000091c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000154f  00000000  00000000  00009724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000130b  00000000  00000000  0000ac73  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  0000bf7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c5       	rjmp	.+2796   	; 0xb06 <__vector_6>
      1a:	00 00       	nop
      1c:	bd c5       	rjmp	.+2938   	; 0xb98 <__vector_7>
      1e:	00 00       	nop
      20:	a9 c3       	rjmp	.+1874   	; 0x774 <__vector_8>
      22:	00 00       	nop
      24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
      26:	00 00       	nop
      28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
      32:	00 00       	nop
      34:	f0 c3       	rjmp	.+2016   	; 0x816 <__vector_13>
      36:	00 00       	nop
      38:	21 c4       	rjmp	.+2114   	; 0x87c <__vector_14>
      3a:	00 00       	nop
      3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
      42:	00 00       	nop
      44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
      46:	00 00       	nop
      48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	df c4       	rjmp	.+2494   	; 0xa10 <__vector_20>
      52:	00 00       	nop
      54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c5       	rjmp	.+2588   	; 0xa76 <__vector_22>
      5a:	00 00       	nop
      5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c4       	rjmp	.+2228   	; 0x922 <__vector_27>
      6e:	00 00       	nop
      70:	b3 c4       	rjmp	.+2406   	; 0x9d8 <__vector_28>
      72:	00 00       	nop
      74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e6 ef       	ldi	r30, 0xF6	; 246
      90:	f1 e1       	ldi	r31, 0x11	; 17
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 32       	cpi	r26, 0x26	; 38
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a6 e2       	ldi	r26, 0x26	; 38
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 3f       	cpi	r26, 0xF1	; 241
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	d8 d7       	rcall	.+4016   	; 0x1060 <main>
      b0:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <_exit>

000000b4 <__bad_interrupt>:
      b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
  
    return 0;
}
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	08 95       	ret

000000ba <I2C_init>:

#define NOP() asm volatile(" nop \r\n")

void I2C_init(void)
{
	PORTB_DIRCLR = 0b00000001;	                                    // SCL = PB0, tri-stated high, avoids glitch
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
    PORTB_OUTCLR = 0b00000001;							
      c0:	e6 e2       	ldi	r30, 0x26	; 38
      c2:	f4 e0       	ldi	r31, 0x04	; 4
      c4:	80 83       	st	Z, r24
    PORTB_PIN0CTRL = 0;
      c6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
	PORTB_DIRSET = 0b00000010;                                      // SDA = PB1
      ca:	a1 e2       	ldi	r26, 0x21	; 33
      cc:	b4 e0       	ldi	r27, 0x04	; 4
      ce:	92 e0       	ldi	r25, 0x02	; 2
      d0:	9c 93       	st	X, r25
	PORTB_OUTCLR = 0b00000010;
      d2:	90 83       	st	Z, r25
    PORTB_PIN1CTRL = 0;
      d4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>

	
	TWI0.MBAUD = (uint8_t) TWI0_BAUD(400000, 0);					// set MBAUD register, TWI0_BAUD macro calculates parameter for 400 kHz
      d8:	e0 e1       	ldi	r30, 0x10	; 16
      da:	f8 e0       	ldi	r31, 0x08	; 8
      dc:	97 e0       	ldi	r25, 0x07	; 7
      de:	96 83       	std	Z+6, r25	; 0x06
	TWI0.MCTRLB = TWI_FLUSH_bm;										// clear the internal state of the master
      e0:	98 e0       	ldi	r25, 0x08	; 8
      e2:	94 83       	std	Z+4, r25	; 0x04
	TWI0.MCTRLA =	  1 << TWI_ENABLE_bp							// Enable TWI Master: enabled
      e4:	83 83       	std	Z+3, r24	; 0x03
					| 0 << TWI_RIEN_bp								// Read Interrupt Enable: disabled
					| 0 << TWI_SMEN_bp								// Smart Mode Enable: disabled
					| TWI_TIMEOUT_DISABLED_gc						// Bus Timeout Disabled (inoperative, see errata)
					| 0 << TWI_WIEN_bp;								// Write Interrupt Enable: disabled

	PORTB_DIRSET = 0b00000001;	
      e6:	8c 93       	st	X, r24
	
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;							// force bus idle
      e8:	85 81       	ldd	r24, Z+5	; 0x05
      ea:	81 60       	ori	r24, 0x01	; 1
      ec:	85 83       	std	Z+5, r24	; 0x05
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm | TWI_BUSERR_bm);		// clear flags	
      ee:	85 81       	ldd	r24, Z+5	; 0x05
      f0:	84 6c       	ori	r24, 0xC4	; 196
      f2:	85 83       	std	Z+5, r24	; 0x05
      f4:	08 95       	ret

000000f6 <LanyardCode>:
uint8_t         lanyardState = TRUE;
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
      f6:	cf 93       	push	r28
    if (CheckState(LANYARD_COMPLETED)) {
      f8:	8b e7       	ldi	r24, 0x7B	; 123
      fa:	7a d6       	rcall	.+3316   	; 0xdf0 <CheckState>
      fc:	81 11       	cpse	r24, r1
      fe:	f0 c0       	rjmp	.+480    	; 0x2e0 <LanyardCode+0x1ea>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     100:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <gameNow>
     104:	88 23       	and	r24, r24
     106:	19 f0       	breq	.+6      	; 0x10e <LanyardCode+0x18>
     108:	83 30       	cpi	r24, 0x03	; 3
     10a:	09 f0       	breq	.+2      	; 0x10e <LanyardCode+0x18>
     10c:	e9 c0       	rjmp	.+466    	; 0x2e0 <LanyardCode+0x1ea>
        return 0;

    /* activate led for buttonstate */
    iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);
     10e:	c0 91 c9 91 	lds	r28, 0x91C9	; 0x8091c9 <__bss_end+0x58d8>
     112:	ec 2f       	mov	r30, r28
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     11a:	8f 3f       	cpi	r24, 0xFF	; 255
     11c:	19 f0       	breq	.+6      	; 0x124 <LanyardCode+0x2e>
     11e:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     122:	01 c0       	rjmp	.+2      	; 0x126 <LanyardCode+0x30>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	ee 53       	subi	r30, 0x3E	; 62
     128:	f7 4c       	sbci	r31, 0xC7	; 199
     12a:	90 83       	st	Z, r25

    if ( (buttonState & 0xf0) == 0)
     12c:	98 2f       	mov	r25, r24
     12e:	90 7f       	andi	r25, 0xF0	; 240
     130:	09 f4       	brne	.+2      	; 0x134 <LanyardCode+0x3e>
     132:	d6 c0       	rjmp	.+428    	; 0x2e0 <LanyardCode+0x1ea>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     134:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     138:	98 2f       	mov	r25, r24
     13a:	92 27       	eor	r25, r18
     13c:	9f 70       	andi	r25, 0x0F	; 15
     13e:	09 f4       	brne	.+2      	; 0x142 <LanyardCode+0x4c>
     140:	cf c0       	rjmp	.+414    	; 0x2e0 <LanyardCode+0x1ea>
        return 0;

    if (lastButtonState == 0xff){
     142:	2f 3f       	cpi	r18, 0xFF	; 255
     144:	09 f0       	breq	.+2      	; 0x148 <LanyardCode+0x52>
     146:	c8 c0       	rjmp	.+400    	; 0x2d8 <LanyardCode+0x1e2>
        switch (buttonState & 0x0f) {
     148:	8f 70       	andi	r24, 0x0F	; 15
     14a:	82 30       	cpi	r24, 0x02	; 2
     14c:	61 f0       	breq	.+24     	; 0x166 <LanyardCode+0x70>
     14e:	28 f4       	brcc	.+10     	; 0x15a <LanyardCode+0x64>
     150:	81 30       	cpi	r24, 0x01	; 1
     152:	69 f4       	brne	.+26     	; 0x16e <LanyardCode+0x78>
            case 0b0001: {
                digit = 0;
     154:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     158:	0d c0       	rjmp	.+26     	; 0x174 <LanyardCode+0x7e>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     15a:	84 30       	cpi	r24, 0x04	; 4
     15c:	31 f0       	breq	.+12     	; 0x16a <LanyardCode+0x74>
     15e:	88 30       	cpi	r24, 0x08	; 8
     160:	31 f4       	brne	.+12     	; 0x16e <LanyardCode+0x78>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	05 c0       	rjmp	.+10     	; 0x170 <LanyardCode+0x7a>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	03 c0       	rjmp	.+6      	; 0x170 <LanyardCode+0x7a>
                break;
            }

            case 0b0100: {
                digit = 3;
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	01 c0       	rjmp	.+2      	; 0x170 <LanyardCode+0x7a>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     17a:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <lanyardPos>
     17e:	e8 2f       	mov	r30, r24
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	e2 55       	subi	r30, 0x52	; 82
     184:	fe 46       	sbci	r31, 0x6E	; 110
     186:	20 81       	ld	r18, Z
     188:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     18c:	e0 91 c6 91 	lds	r30, 0x91C6	; 0x8091c6 <__bss_end+0x58d5>
     190:	29 13       	cpse	r18, r25
     192:	17 c0       	rjmp	.+46     	; 0x1c2 <LanyardCode+0xcc>
            lanyardState &= TRUE;
     194:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     198:	91 70       	andi	r25, 0x01	; 1
     19a:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	ee 53       	subi	r30, 0x3E	; 62
     1a2:	f7 4c       	sbci	r31, 0xC7	; 199
     1a4:	90 e8       	ldi	r25, 0x80	; 128
     1a6:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     1a8:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	ee 53       	subi	r30, 0x3E	; 62
     1b0:	f7 4c       	sbci	r31, 0xC7	; 199
     1b2:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     1b4:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	ee 53       	subi	r30, 0x3E	; 62
     1bc:	f7 4c       	sbci	r31, 0xC7	; 199
     1be:	10 82       	st	Z, r1
     1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <LanyardCode+0xf2>
        } else {
            lanyardState = FALSE;
     1c2:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ee 53       	subi	r30, 0x3E	; 62
     1ca:	f7 4c       	sbci	r31, 0xC7	; 199
     1cc:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     1ce:	84 30       	cpi	r24, 0x04	; 4
     1d0:	58 f4       	brcc	.+22     	; 0x1e8 <LanyardCode+0xf2>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     1d2:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                lanyardPos      = 0;
     1d6:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <lanyardPos>
                lanyardCnt      = 0;
     1da:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <__data_end>
                lanyardState    = TRUE;
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	7a c0       	rjmp	.+244    	; 0x2dc <LanyardCode+0x1e6>
                return 0;
            }
        }
        lanyardPos++;
     1e8:	8f 5f       	subi	r24, 0xFF	; 255
     1ea:	80 93 27 38 	sts	0x3827, r24	; 0x803827 <lanyardPos>
        lanyardCnt++;            
     1ee:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <__data_end>
     1f2:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     1f4:	94 30       	cpi	r25, 0x04	; 4
     1f6:	18 f4       	brcc	.+6      	; 0x1fe <LanyardCode+0x108>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     1f8:	90 93 26 38 	sts	0x3826, r25	; 0x803826 <__data_end>
     1fc:	6d c0       	rjmp	.+218    	; 0x2d8 <LanyardCode+0x1e2>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     1fe:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <__data_end>
            if (lanyardState == TRUE) {
     202:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     206:	91 30       	cpi	r25, 0x01	; 1
     208:	a1 f5       	brne	.+104    	; 0x272 <LanyardCode+0x17c>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     20a:	e8 2f       	mov	r30, r24
     20c:	e6 95       	lsr	r30
     20e:	e6 95       	lsr	r30
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	e8 52       	subi	r30, 0x28	; 40
     214:	fe 46       	sbci	r31, 0x6E	; 110
     216:	e5 81       	ldd	r30, Z+5	; 0x05
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     21e:	ee 53       	subi	r30, 0x3E	; 62
     220:	f7 4c       	sbci	r31, 0xC7	; 199
     222:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     224:	88 31       	cpi	r24, 0x18	; 24
     226:	09 f0       	breq	.+2      	; 0x22a <LanyardCode+0x134>
     228:	57 c0       	rjmp	.+174    	; 0x2d8 <LanyardCode+0x1e2>
                    UpdateState(LANYARD_COMPLETED);
     22a:	8b e7       	ldi	r24, 0x7B	; 123
     22c:	d7 d5       	rcall	.+2990   	; 0xddc <UpdateState>
                    iLED[SCARAB[G]] = 0;
     22e:	ec 2f       	mov	r30, r28
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	ee 53       	subi	r30, 0x3E	; 62
     234:	f7 4c       	sbci	r31, 0xC7	; 199
     236:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     238:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 53       	subi	r30, 0x3E	; 62
     240:	f7 4c       	sbci	r31, 0xC7	; 199
     242:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     244:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	ee 53       	subi	r30, 0x3E	; 62
     24c:	f7 4c       	sbci	r31, 0xC7	; 199
     24e:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     250:	e0 91 d7 91 	lds	r30, 0x91D7	; 0x8091d7 <__bss_end+0x58e6>
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     25a:	ee 53       	subi	r30, 0x3E	; 62
     25c:	f7 4c       	sbci	r31, 0xC7	; 199
     25e:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     260:	e0 91 d6 91 	lds	r30, 0x91D6	; 0x8091d6 <__bss_end+0x58e5>
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     26a:	ee 53       	subi	r30, 0x3E	; 62
     26c:	f7 4c       	sbci	r31, 0xC7	; 199
     26e:	80 83       	st	Z, r24
     270:	33 c0       	rjmp	.+102    	; 0x2d8 <LanyardCode+0x1e2>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     272:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                lanyardPos      = 0;
     276:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <lanyardPos>
                lanyardState    = TRUE;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                iLED[SCARAB[G]] = 0;
     280:	ec 2f       	mov	r30, r28
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	ee 53       	subi	r30, 0x3E	; 62
     286:	f7 4c       	sbci	r31, 0xC7	; 199
     288:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     28a:	e0 91 d7 91 	lds	r30, 0x91D7	; 0x8091d7 <__bss_end+0x58e6>
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	ee 53       	subi	r30, 0x3E	; 62
     292:	f7 4c       	sbci	r31, 0xC7	; 199
     294:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     296:	e0 91 d6 91 	lds	r30, 0x91D6	; 0x8091d6 <__bss_end+0x58e5>
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ee 53       	subi	r30, 0x3E	; 62
     29e:	f7 4c       	sbci	r31, 0xC7	; 199
     2a0:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     2a2:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     2ac:	ee 53       	subi	r30, 0x3E	; 62
     2ae:	f7 4c       	sbci	r31, 0xC7	; 199
     2b0:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     2b2:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     2bc:	ee 53       	subi	r30, 0x3E	; 62
     2be:	f7 4c       	sbci	r31, 0xC7	; 199
     2c0:	80 83       	st	Z, r24
     2c2:	ae ed       	ldi	r26, 0xDE	; 222
     2c4:	b1 e9       	ldi	r27, 0x91	; 145
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     2c6:	ed 91       	ld	r30, X+
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	ee 53       	subi	r30, 0x3E	; 62
     2cc:	f7 4c       	sbci	r31, 0xC7	; 199
     2ce:	10 82       	st	Z, r1
                iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     2d0:	81 e9       	ldi	r24, 0x91	; 145
     2d2:	a4 3e       	cpi	r26, 0xE4	; 228
     2d4:	b8 07       	cpc	r27, r24
     2d6:	b9 f7       	brne	.-18     	; 0x2c6 <LanyardCode+0x1d0>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     2d8:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     2dc:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     2ea:	87 ef       	ldi	r24, 0xF7	; 247
     2ec:	81 d5       	rcall	.+2818   	; 0xdf0 <CheckState>
     2ee:	81 11       	cpse	r24, r1
     2f0:	3e c1       	rjmp	.+636    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     2f2:	8d e7       	ldi	r24, 0x7D	; 125
     2f4:	7d d5       	rcall	.+2810   	; 0xdf0 <CheckState>
     2f6:	81 11       	cpse	r24, r1
     2f8:	3a c1       	rjmp	.+628    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     2fa:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <gameNow>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	08 f0       	brcs	.+2      	; 0x304 <MagnetMaze+0x1e>
     302:	35 c1       	rjmp	.+618    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
        return 0;

    if (calHall == 0)
     304:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <calHall>
     308:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <calHall+0x1>
     30c:	89 2b       	or	r24, r25
     30e:	41 f4       	brne	.+16     	; 0x320 <MagnetMaze+0x3a>
        calHall = adcHall;
     310:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <adcHall>
     314:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <adcHall+0x1>
     318:	80 93 eb 38 	sts	0x38EB, r24	; 0x8038eb <calHall>
     31c:	90 93 ec 38 	sts	0x38EC, r25	; 0x8038ec <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     320:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <adcHall>
     324:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <adcHall+0x1>
     328:	20 91 eb 38 	lds	r18, 0x38EB	; 0x8038eb <calHall>
     32c:	30 91 ec 38 	lds	r19, 0x38EC	; 0x8038ec <calHall+0x1>
     330:	82 1b       	sub	r24, r18
     332:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     334:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <curHallState>
     338:	31 30       	cpi	r19, 0x01	; 1
     33a:	89 f0       	breq	.+34     	; 0x35e <MagnetMaze+0x78>
     33c:	18 f0       	brcs	.+6      	; 0x344 <MagnetMaze+0x5e>
     33e:	32 30       	cpi	r19, 0x02	; 2
     340:	c1 f0       	breq	.+48     	; 0x372 <MagnetMaze+0x8c>
     342:	1f c0       	rjmp	.+62     	; 0x382 <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     344:	84 3d       	cpi	r24, 0xD4	; 212
     346:	2e ef       	ldi	r18, 0xFE	; 254
     348:	92 07       	cpc	r25, r18
     34a:	14 f4       	brge	.+4      	; 0x350 <MagnetMaze+0x6a>
                newHallState = 1;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	04 c0       	rjmp	.+8      	; 0x358 <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     350:	8d 32       	cpi	r24, 0x2D	; 45
     352:	91 40       	sbci	r25, 0x01	; 1
     354:	5c f0       	brlt	.+22     	; 0x36c <MagnetMaze+0x86>
                newHallState = 2;
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <newHallState>
     35c:	12 c0       	rjmp	.+36     	; 0x382 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     35e:	8d 32       	cpi	r24, 0x2D	; 45
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	92 07       	cpc	r25, r18
     364:	c4 f7       	brge	.-16     	; 0x356 <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     366:	89 38       	cpi	r24, 0x89	; 137
     368:	9f 4f       	sbci	r25, 0xFF	; 255
     36a:	84 f3       	brlt	.-32     	; 0x34c <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     36c:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <newHallState>
     370:	08 c0       	rjmp	.+16     	; 0x382 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     372:	84 3d       	cpi	r24, 0xD4	; 212
     374:	2e ef       	ldi	r18, 0xFE	; 254
     376:	92 07       	cpc	r25, r18
     378:	4c f3       	brlt	.-46     	; 0x34c <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     37a:	88 37       	cpi	r24, 0x78	; 120
     37c:	91 05       	cpc	r25, r1
     37e:	b4 f3       	brlt	.-20     	; 0x36c <MagnetMaze+0x86>
     380:	ea cf       	rjmp	.-44     	; 0x356 <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     382:	c0 91 c9 91 	lds	r28, 0x91C9	; 0x8091c9 <__bss_end+0x58d8>
     386:	ec 2f       	mov	r30, r28
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <newHallState>
     38e:	88 23       	and	r24, r24
     390:	19 f0       	breq	.+6      	; 0x398 <MagnetMaze+0xb2>
     392:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     396:	01 c0       	rjmp	.+2      	; 0x39a <MagnetMaze+0xb4>
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	ee 53       	subi	r30, 0x3E	; 62
     39c:	f7 4c       	sbci	r31, 0xC7	; 199
     39e:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     3a0:	88 23       	and	r24, r24
     3a2:	59 f0       	breq	.+22     	; 0x3ba <MagnetMaze+0xd4>
     3a4:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <mazePos>
     3a8:	21 11       	cpse	r18, r1
     3aa:	3d c0       	rjmp	.+122    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <MagnetMaze+0xce>
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <inverted>
     3b8:	36 c0       	rjmp	.+108    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

    if (newHallState != curHallState) {
     3ba:	33 23       	and	r19, r19
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <MagnetMaze+0xda>
     3be:	d7 c0       	rjmp	.+430    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
        curHallState = newHallState;
     3c0:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     3c4:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <mazePos>
     3c8:	82 31       	cpi	r24, 0x12	; 18
     3ca:	09 f0       	breq	.+2      	; 0x3ce <MagnetMaze+0xe8>
     3cc:	d0 c0       	rjmp	.+416    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
                gameNow   = TEXT;
     3ce:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                mazePos   = 0;
     3d2:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <mazePos>
                mazeState = TRUE;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[SCARAB[G]]    = 0;
     3dc:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     3de:	e0 91 d7 91 	lds	r30, 0x91D7	; 0x8091d7 <__bss_end+0x58e6>
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	ee 53       	subi	r30, 0x3E	; 62
     3e6:	f7 4c       	sbci	r31, 0xC7	; 199
     3e8:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     3ea:	e0 91 d6 91 	lds	r30, 0x91D6	; 0x8091d6 <__bss_end+0x58e5>
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	ee 53       	subi	r30, 0x3E	; 62
     3f2:	f7 4c       	sbci	r31, 0xC7	; 199
     3f4:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     3f6:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 53       	subi	r30, 0x3E	; 62
     3fe:	f7 4c       	sbci	r31, 0xC7	; 199
     400:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     402:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ee 53       	subi	r30, 0x3E	; 62
     40a:	f7 4c       	sbci	r31, 0xC7	; 199
     40c:	10 82       	st	Z, r1
     40e:	ae ed       	ldi	r26, 0xDE	; 222
     410:	b1 e9       	ldi	r27, 0x91	; 145
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     412:	ed 91       	ld	r30, X+
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ee 53       	subi	r30, 0x3E	; 62
     418:	f7 4c       	sbci	r31, 0xC7	; 199
     41a:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     41c:	21 e9       	ldi	r18, 0x91	; 145
     41e:	a4 3e       	cpi	r26, 0xE4	; 228
     420:	b2 07       	cpc	r27, r18
     422:	b9 f7       	brne	.-18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     424:	a4 c0       	rjmp	.+328    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     426:	38 17       	cp	r19, r24
     428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	a1 c0       	rjmp	.+322    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
        curHallState = newHallState;
     42c:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     436:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <inverted>
     43a:	99 23       	and	r25, r25
     43c:	11 f0       	breq	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	93 e0       	ldi	r25, 0x03	; 3
     440:	89 27       	eor	r24, r25
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	e2 2f       	mov	r30, r18
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	ec 51       	subi	r30, 0x1C	; 28
     44a:	fe 46       	sbci	r31, 0x6E	; 110
     44c:	40 81       	ld	r20, Z
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	84 17       	cp	r24, r20
     452:	95 07       	cpc	r25, r21
     454:	91 f4       	brne	.+36     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
                mazeState &= TRUE;
     456:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     45a:	81 70       	andi	r24, 0x01	; 1
     45c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[EYE[R][L]] = 0;
     460:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	ee 53       	subi	r30, 0x3E	; 62
     468:	f7 4c       	sbci	r31, 0xC7	; 199
     46a:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     46c:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 53       	subi	r30, 0x3E	; 62
     474:	f7 4c       	sbci	r31, 0xC7	; 199
     476:	10 82       	st	Z, r1
     478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            } else {
                mazeState = FALSE;
     47a:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	20 93 32 38 	sts	0x3832, r18	; 0x803832 <mazePos>
            mazeCnt++;            
     484:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <mazeCnt>
     488:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	18 f4       	brcc	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     48e:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <mazeCnt>
     492:	6d c0       	rjmp	.+218    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     494:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <mazeCnt>
                if (mazeState == TRUE) {
     498:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	a9 f5       	brne	.+106    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     4a0:	eb ea       	ldi	r30, 0xAB	; 171
     4a2:	2e 9f       	mul	r18, r30
     4a4:	e1 2d       	mov	r30, r1
     4a6:	11 24       	eor	r1, r1
     4a8:	e6 95       	lsr	r30
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	e8 52       	subi	r30, 0x28	; 40
     4ae:	fe 46       	sbci	r31, 0x6E	; 110
     4b0:	e5 81       	ldd	r30, Z+5	; 0x05
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4b8:	ee 53       	subi	r30, 0x3E	; 62
     4ba:	f7 4c       	sbci	r31, 0xC7	; 199
     4bc:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     4be:	22 31       	cpi	r18, 0x12	; 18
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
                        UpdateState(MAZE_COMPLETED);
     4c2:	55 c0       	rjmp	.+170    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     4c4:	8d e7       	ldi	r24, 0x7D	; 125
     4c6:	8a d4       	rcall	.+2324   	; 0xddc <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	ce 53       	subi	r28, 0x3E	; 62
     4cc:	d7 4c       	sbci	r29, 0xC7	; 199
     4ce:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     4d0:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	ee 53       	subi	r30, 0x3E	; 62
     4d8:	f7 4c       	sbci	r31, 0xC7	; 199
     4da:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     4dc:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ee 53       	subi	r30, 0x3E	; 62
     4e4:	f7 4c       	sbci	r31, 0xC7	; 199
     4e6:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     4e8:	e0 91 d7 91 	lds	r30, 0x91D7	; 0x8091d7 <__bss_end+0x58e6>
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4f2:	ee 53       	subi	r30, 0x3E	; 62
     4f4:	f7 4c       	sbci	r31, 0xC7	; 199
     4f6:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     4f8:	e0 91 d6 91 	lds	r30, 0x91D6	; 0x8091d6 <__bss_end+0x58e5>
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     502:	ee 53       	subi	r30, 0x3E	; 62
     504:	f7 4c       	sbci	r31, 0xC7	; 199
     506:	80 83       	st	Z, r24
     508:	32 c0       	rjmp	.+100    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     50a:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                    mazePos   = 0;
     50e:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <mazePos>
                    mazeState = TRUE;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                    iLED[SCARAB[G]]    = 0;
     518:	d0 e0       	ldi	r29, 0x00	; 0
     51a:	ce 53       	subi	r28, 0x3E	; 62
     51c:	d7 4c       	sbci	r29, 0xC7	; 199
     51e:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     520:	e0 91 d7 91 	lds	r30, 0x91D7	; 0x8091d7 <__bss_end+0x58e6>
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	ee 53       	subi	r30, 0x3E	; 62
     528:	f7 4c       	sbci	r31, 0xC7	; 199
     52a:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     52c:	e0 91 d6 91 	lds	r30, 0x91D6	; 0x8091d6 <__bss_end+0x58e5>
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	ee 53       	subi	r30, 0x3E	; 62
     534:	f7 4c       	sbci	r31, 0xC7	; 199
     536:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     538:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     542:	ee 53       	subi	r30, 0x3E	; 62
     544:	f7 4c       	sbci	r31, 0xC7	; 199
     546:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     548:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     552:	ee 53       	subi	r30, 0x3E	; 62
     554:	f7 4c       	sbci	r31, 0xC7	; 199
     556:	80 83       	st	Z, r24
     558:	ae ed       	ldi	r26, 0xDE	; 222
     55a:	b1 e9       	ldi	r27, 0x91	; 145
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     55c:	ed 91       	ld	r30, X+
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	ee 53       	subi	r30, 0x3E	; 62
     562:	f7 4c       	sbci	r31, 0xC7	; 199
     564:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     566:	81 e9       	ldi	r24, 0x91	; 145
     568:	a4 3e       	cpi	r26, 0xE4	; 228
     56a:	b8 07       	cpc	r27, r24
     56c:	b9 f7       	brne	.-18     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <Setup>:
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	f8 94       	cli
     57c:	88 ed       	ldi	r24, 0xD8	; 216
     57e:	84 bf       	out	0x34, r24	; 52
     580:	c1 e0       	ldi	r28, 0x01	; 1
     582:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     586:	8a e4       	ldi	r24, 0x4A	; 74
     588:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     58c:	8c e7       	ldi	r24, 0x7C	; 124
     58e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     592:	9f e3       	ldi	r25, 0x3F	; 63
     594:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     598:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     5a2:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     5a6:	80 68       	ori	r24, 0x80	; 128
     5a8:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     5ac:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     5b0:	80 68       	ori	r24, 0x80	; 128
     5b2:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     5b6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     5ba:	80 68       	ori	r24, 0x80	; 128
     5bc:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     5c0:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     5c4:	80 68       	ori	r24, 0x80	; 128
     5c6:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     5ca:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     5ce:	80 68       	ori	r24, 0x80	; 128
     5d0:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     5d4:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     5d8:	d2 e0       	ldi	r29, 0x02	; 2
     5da:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     5de:	2b e5       	ldi	r18, 0x5B	; 91
     5e0:	31 e0       	ldi	r19, 0x01	; 1
     5e2:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     5e6:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     5f0:	80 ec       	ldi	r24, 0xC0	; 192
     5f2:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     5fc:	1c ba       	out	0x1c, r1	; 28
     5fe:	1d ba       	out	0x1d, r1	; 29
     600:	1e ba       	out	0x1e, r1	; 30
     602:	1f ba       	out	0x1f, r1	; 31
     604:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     608:	88 e0       	ldi	r24, 0x08	; 8
     60a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     60e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     612:	87 e7       	ldi	r24, 0x77	; 119
     614:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     618:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     61c:	8b e0       	ldi	r24, 0x0B	; 11
     61e:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     622:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     626:	81 60       	ori	r24, 0x01	; 1
     628:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     632:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     63e:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     642:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     646:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     64a:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     64e:	8b e8       	ldi	r24, 0x8B	; 139
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     656:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     65a:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     65e:	2d dd       	rcall	.-1446   	; 0xba <I2C_init>
     660:	82 e1       	ldi	r24, 0x12	; 18
     662:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     66c:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     670:	86 e0       	ldi	r24, 0x06	; 6
     672:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     676:	84 e4       	ldi	r24, 0x44	; 68
     678:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     67c:	8e e1       	ldi	r24, 0x1E	; 30
     67e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     682:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     686:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     68a:	81 60       	ori	r24, 0x01	; 1
     68c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     690:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     694:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     698:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     69c:	82 e5       	ldi	r24, 0x52	; 82
     69e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     6a8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     6ac:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     6b0:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     6b4:	81 60       	ori	r24, 0x01	; 1
     6b6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     6ba:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     6c4:	80 e8       	ldi	r24, 0x80	; 128
     6c6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     6ca:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     6ce:	81 60       	ori	r24, 0x01	; 1
     6d0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     6d4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     6d8:	80 fd       	sbrc	r24, 0
     6da:	fc cf       	rjmp	.-8      	; 0x6d4 <Setup+0x15e>
     6dc:	80 e3       	ldi	r24, 0x30	; 48
     6de:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     6e2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     6e6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     6ea:	82 fd       	sbrc	r24, 2
     6ec:	fc cf       	rjmp	.-8      	; 0x6e6 <Setup+0x170>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	98 e7       	ldi	r25, 0x78	; 120
     6f2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     6f6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     6fa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     6fe:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     702:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     706:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     70a:	82 96       	adiw	r24, 0x22	; 34
     70c:	3a d5       	rcall	.+2676   	; 0x1182 <__udivmodhi4>
     70e:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <tmp16bit>
     712:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <tmp16bit+0x1>
     716:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     71a:	83 fd       	sbrc	r24, 3
     71c:	fc cf       	rjmp	.-8      	; 0x716 <Setup+0x1a0>
     71e:	80 91 ef 38 	lds	r24, 0x38EF	; 0x8038ef <tmp16bit>
     722:	90 91 f0 38 	lds	r25, 0x38F0	; 0x8038f0 <tmp16bit+0x1>
     726:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     72a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     73a:	88 e0       	ldi	r24, 0x08	; 8
     73c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     740:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     744:	80 fd       	sbrc	r24, 0
     746:	fc cf       	rjmp	.-8      	; 0x740 <Setup+0x1ca>
     748:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     752:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     756:	81 60       	ori	r24, 0x01	; 1
     758:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     75c:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <serRx>
     760:	85 e5       	ldi	r24, 0x55	; 85
     762:	98 e3       	ldi	r25, 0x38	; 56
     764:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <serTxAddr>
     768:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <serTxAddr+0x1>
     76c:	78 94       	sei
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <__vector_8>:
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     790:	84 e4       	ldi	r24, 0x44	; 68
     792:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     796:	ec b3       	in	r30, 0x1c	; 28
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	e8 9f       	mul	r30, r24
     79c:	f0 01       	movw	r30, r0
     79e:	11 24       	eor	r1, r1
     7a0:	ee 53       	subi	r30, 0x3E	; 62
     7a2:	f7 4c       	sbci	r31, 0xC7	; 199
     7a4:	a8 e2       	ldi	r26, 0x28	; 40
     7a6:	ba e0       	ldi	r27, 0x0A	; 10
     7a8:	96 e0       	ldi	r25, 0x06	; 6
     7aa:	81 91       	ld	r24, Z+
     7ac:	8d 93       	st	X+, r24
     7ae:	9a 95       	dec	r25
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <__vector_8+0x36>
     7b2:	8b e0       	ldi	r24, 0x0B	; 11
     7b4:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     7b8:	8c b3       	in	r24, 0x1c	; 28
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	58 f4       	brcc	.+22     	; 0x7d4 <__vector_8+0x60>
     7be:	8c b3       	in	r24, 0x1c	; 28
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <__vector_8+0x52>
     7c4:	99 0f       	add	r25, r25
     7c6:	8a 95       	dec	r24
     7c8:	ea f7       	brpl	.-6      	; 0x7c4 <__vector_8+0x50>
     7ca:	99 b9       	out	0x09, r25	; 9
     7cc:	8c b3       	in	r24, 0x1c	; 28
     7ce:	83 95       	inc	r24
     7d0:	8c bb       	out	0x1c, r24	; 28
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <__vector_8+0x74>
     7d4:	8c b3       	in	r24, 0x1c	; 28
     7d6:	83 30       	cpi	r24, 0x03	; 3
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <__vector_8+0x6e>
     7da:	2a 9a       	sbi	0x05, 2	; 5
     7dc:	83 95       	inc	r24
     7de:	8c bb       	out	0x1c, r24	; 28
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <__vector_8+0x74>
     7e2:	2e 9a       	sbi	0x05, 6	; 5
     7e4:	88 27       	eor	r24, r24
     7e6:	8c bb       	out	0x1c, r24	; 28
     7e8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <timeout_I2C>
     7ec:	88 23       	and	r24, r24
     7ee:	29 f0       	breq	.+10     	; 0x7fa <__vector_8+0x86>
     7f0:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <timeout_I2C>
     7f4:	81 50       	subi	r24, 0x01	; 1
     7f6:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <timeout_I2C>
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     800:	ff 91       	pop	r31
     802:	ef 91       	pop	r30
     804:	bf 91       	pop	r27
     806:	af 91       	pop	r26
     808:	9f 91       	pop	r25
     80a:	8f 91       	pop	r24
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <__vector_13>:
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
     828:	e0 91 99 38 	lds	r30, 0x3899	; 0x803899 <serTxAddr>
     82c:	f0 91 9a 38 	lds	r31, 0x389A	; 0x80389a <serTxAddr+0x1>
     830:	80 81       	ld	r24, Z
     832:	88 23       	and	r24, r24
     834:	91 f0       	breq	.+36     	; 0x85a <__vector_13+0x44>
     836:	80 81       	ld	r24, Z
     838:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     83c:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <serTxAddr>
     840:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <serTxAddr+0x1>
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <serTxAddr>
     84a:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <serTxAddr+0x1>
     84e:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     852:	80 62       	ori	r24, 0x20	; 32
     854:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     858:	05 c0       	rjmp	.+10     	; 0x864 <__vector_13+0x4e>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     860:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	9f 91       	pop	r25
     870:	8f 91       	pop	r24
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_14>:
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
     894:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     898:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     89c:	80 81       	ld	r24, Z
     89e:	81 11       	cpse	r24, r1
     8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <__vector_14+0x36>
     8a2:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     8a6:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     8aa:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     8ae:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     8b2:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     8b6:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     8ba:	80 81       	ld	r24, Z
     8bc:	88 23       	and	r24, r24
     8be:	e1 f0       	breq	.+56     	; 0x8f8 <__vector_14+0x7c>
     8c0:	20 81       	ld	r18, Z
     8c2:	40 91 96 38 	lds	r20, 0x3896	; 0x803896 <auVolume>
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	2f 57       	subi	r18, 0x7F	; 127
     8ca:	31 09       	sbc	r19, r1
     8cc:	42 9f       	mul	r20, r18
     8ce:	c0 01       	movw	r24, r0
     8d0:	43 9f       	mul	r20, r19
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	89 2f       	mov	r24, r25
     8d8:	99 0f       	add	r25, r25
     8da:	99 0b       	sbc	r25, r25
     8dc:	80 58       	subi	r24, 0x80	; 128
     8de:	9f 4f       	sbci	r25, 0xFF	; 255
     8e0:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     8e4:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     8e8:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     8f2:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <__vector_14+0x88>
     8f8:	80 e8       	ldi	r24, 0x80	; 128
     8fa:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 ea 38 	sts	0x38EA, r24	; 0x8038ea <auPlayDone>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     90a:	ff 91       	pop	r31
     90c:	ef 91       	pop	r30
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_27>:
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	8f 93       	push	r24
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
     932:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <serRxDone>
     936:	81 11       	cpse	r24, r1
     938:	44 c0       	rjmp	.+136    	; 0x9c2 <__vector_27+0xa0>
     93a:	ed b3       	in	r30, 0x1d	; 29
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     942:	eb 5a       	subi	r30, 0xAB	; 171
     944:	f7 4c       	sbci	r31, 0xC7	; 199
     946:	80 83       	st	Z, r24
     948:	ed b3       	in	r30, 0x1d	; 29
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	eb 5a       	subi	r30, 0xAB	; 171
     94e:	f7 4c       	sbci	r31, 0xC7	; 199
     950:	80 81       	ld	r24, Z
     952:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     956:	ed b3       	in	r30, 0x1d	; 29
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	eb 5a       	subi	r30, 0xAB	; 171
     95c:	f7 4c       	sbci	r31, 0xC7	; 199
     95e:	80 81       	ld	r24, Z
     960:	8a 30       	cpi	r24, 0x0A	; 10
     962:	39 f0       	breq	.+14     	; 0x972 <__vector_27+0x50>
     964:	ed b3       	in	r30, 0x1d	; 29
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	eb 5a       	subi	r30, 0xAB	; 171
     96a:	f7 4c       	sbci	r31, 0xC7	; 199
     96c:	80 81       	ld	r24, Z
     96e:	8d 30       	cpi	r24, 0x0D	; 13
     970:	49 f4       	brne	.+18     	; 0x984 <__vector_27+0x62>
     972:	ed b3       	in	r30, 0x1d	; 29
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	eb 5a       	subi	r30, 0xAB	; 171
     978:	f7 4c       	sbci	r31, 0xC7	; 199
     97a:	10 82       	st	Z, r1
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <serRxDone>
     982:	1f c0       	rjmp	.+62     	; 0x9c2 <__vector_27+0xa0>
     984:	ed b3       	in	r30, 0x1d	; 29
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	eb 5a       	subi	r30, 0xAB	; 171
     98a:	f7 4c       	sbci	r31, 0xC7	; 199
     98c:	80 81       	ld	r24, Z
     98e:	88 30       	cpi	r24, 0x08	; 8
     990:	39 f0       	breq	.+14     	; 0x9a0 <__vector_27+0x7e>
     992:	ed b3       	in	r30, 0x1d	; 29
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	eb 5a       	subi	r30, 0xAB	; 171
     998:	f7 4c       	sbci	r31, 0xC7	; 199
     99a:	80 81       	ld	r24, Z
     99c:	8f 37       	cpi	r24, 0x7F	; 127
     99e:	59 f4       	brne	.+22     	; 0x9b6 <__vector_27+0x94>
     9a0:	8d b3       	in	r24, 0x1d	; 29
     9a2:	88 23       	and	r24, r24
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <__vector_27+0x94>
     9a6:	ed b3       	in	r30, 0x1d	; 29
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	eb 5a       	subi	r30, 0xAB	; 171
     9ac:	f7 4c       	sbci	r31, 0xC7	; 199
     9ae:	10 82       	st	Z, r1
     9b0:	8d b3       	in	r24, 0x1d	; 29
     9b2:	81 50       	subi	r24, 0x01	; 1
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <__vector_27+0x9e>
     9b6:	8d b3       	in	r24, 0x1d	; 29
     9b8:	80 34       	cpi	r24, 0x40	; 64
     9ba:	18 f4       	brcc	.+6      	; 0x9c2 <__vector_27+0xa0>
     9bc:	8d b3       	in	r24, 0x1d	; 29
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	8d bb       	out	0x1d, r24	; 29
     9c2:	80 e8       	ldi	r24, 0x80	; 128
     9c4:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	8f 91       	pop	r24
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_28>:
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	8f 93       	push	r24
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     9ec:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     9f6:	e5 e0       	ldi	r30, 0x05	; 5
     9f8:	f8 e0       	ldi	r31, 0x08	; 8
     9fa:	80 81       	ld	r24, Z
     9fc:	8f 7d       	andi	r24, 0xDF	; 223
     9fe:	80 83       	st	Z, r24
     a00:	ff 91       	pop	r31
     a02:	ef 91       	pop	r30
     a04:	8f 91       	pop	r24
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <__vector_20>:
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
     a22:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <adc0Chg>
     a26:	81 11       	cpse	r24, r1
     a28:	18 c0       	rjmp	.+48     	; 0xa5a <__vector_20+0x4a>
     a2a:	8e b3       	in	r24, 0x1e	; 30
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	8f 71       	andi	r24, 0x1F	; 31
     a30:	8e bb       	out	0x1e, r24	; 30
     a32:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     a36:	8e 31       	cpi	r24, 0x1E	; 30
     a38:	41 f4       	brne	.+16     	; 0xa4a <__vector_20+0x3a>
     a3a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	80 93 ed 38 	sts	0x38ED, r24	; 0x8038ed <adcTemp>
     a44:	90 93 ee 38 	sts	0x38EE, r25	; 0x8038ee <adcTemp+0x1>
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <__vector_20+0x4e>
     a4a:	ee b3       	in	r30, 0x1e	; 30
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     a52:	ee 55       	subi	r30, 0x5E	; 94
     a54:	f7 4c       	sbci	r31, 0xC7	; 199
     a56:	80 83       	st	Z, r24
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <__vector_20+0x4e>
     a5a:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <adc0Chg>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <__vector_22>:
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     a88:	81 11       	cpse	r24, r1
     a8a:	0a c0       	rjmp	.+20     	; 0xaa0 <__vector_22+0x2a>
     a8c:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     a90:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     a94:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <adcPhot>
     a98:	90 93 9e 38 	sts	0x389E, r25	; 0x80389e <adcPhot+0x1>
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	10 c0       	rjmp	.+32     	; 0xac0 <__vector_22+0x4a>
     aa0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	79 f4       	brne	.+30     	; 0xac6 <__vector_22+0x50>
     aa8:	88 e0       	ldi	r24, 0x08	; 8
     aaa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     aae:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ab2:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ab6:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <adcHall>
     aba:	90 93 9c 38 	sts	0x389C, r25	; 0x80389c <adcHall+0x1>
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ac4:	10 c0       	rjmp	.+32     	; 0xae6 <__vector_22+0x70>
     ac6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     aca:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ace:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <adcBtns>
     ad2:	90 93 98 38 	sts	0x3898, r25	; 0x803898 <adcBtns+0x1>
     ad6:	8f b3       	in	r24, 0x1f	; 31
     ad8:	8f 30       	cpi	r24, 0x0F	; 15
     ada:	29 f4       	brne	.+10     	; 0xae6 <__vector_22+0x70>
     adc:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ae0:	88 e0       	ldi	r24, 0x08	; 8
     ae2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     ae6:	8f b3       	in	r24, 0x1f	; 31
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	8f 70       	andi	r24, 0x0F	; 15
     aee:	99 27       	eor	r25, r25
     af0:	8f bb       	out	0x1f, r24	; 31
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_6>:
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b22:	81 ff       	sbrs	r24, 1
     b24:	25 c0       	rjmp	.+74     	; 0xb70 <__vector_6+0x6a>
     b26:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <buttonMark>
     b2a:	8f 3f       	cpi	r24, 0xFF	; 255
     b2c:	29 f0       	breq	.+10     	; 0xb38 <__vector_6+0x32>
     b2e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <buttonMark>
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <buttonMark>
     b38:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b3c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b40:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b44:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b48:	82 96       	adiw	r24, 0x22	; 34
     b4a:	1b d3       	rcall	.+1590   	; 0x1182 <__udivmodhi4>
     b4c:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <tmp16bit>
     b50:	90 93 f0 38 	sts	0x38F0, r25	; 0x8038f0 <tmp16bit+0x1>
     b54:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b58:	83 fd       	sbrc	r24, 3
     b5a:	fc cf       	rjmp	.-8      	; 0xb54 <__vector_6+0x4e>
     b5c:	80 91 ef 38 	lds	r24, 0x38EF	; 0x8038ef <tmp16bit>
     b60:	90 91 f0 38 	lds	r25, 0x38F0	; 0x8038f0 <tmp16bit+0x1>
     b64:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b68:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <__vector_6+0x76>
     b70:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <minuteMark>
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <minuteMark>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <__vector_7>:
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	8f 93       	push	r24
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     baa:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     bae:	8f 91       	pop	r24
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <SerSpeed>:
     bba:	28 2f       	mov	r18, r24
     bbc:	81 11       	cpse	r24, r1
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <SerSpeed+0x8>
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	82 1b       	sub	r24, r18
     bc8:	91 09       	sbc	r25, r1
     bca:	98 2f       	mov	r25, r24
     bcc:	88 27       	eor	r24, r24
     bce:	81 50       	subi	r24, 0x01	; 1
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     bd6:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     bda:	08 95       	ret

00000bdc <CheckButtons>:
     bdc:	20 91 97 38 	lds	r18, 0x3897	; 0x803897 <adcBtns>
     be0:	30 91 98 38 	lds	r19, 0x3898	; 0x803898 <adcBtns+0x1>
     be4:	94 e0       	ldi	r25, 0x04	; 4
     be6:	36 95       	lsr	r19
     be8:	27 95       	ror	r18
     bea:	9a 95       	dec	r25
     bec:	e1 f7       	brne	.-8      	; 0xbe6 <CheckButtons+0xa>
     bee:	33 27       	eor	r19, r19
     bf0:	2c 35       	cpi	r18, 0x5C	; 92
     bf2:	31 05       	cpc	r19, r1
     bf4:	d0 f4       	brcc	.+52     	; 0xc2a <CheckButtons+0x4e>
     bf6:	23 35       	cpi	r18, 0x53	; 83
     bf8:	31 05       	cpc	r19, r1
     bfa:	a8 f5       	brcc	.+106    	; 0xc66 <CheckButtons+0x8a>
     bfc:	22 33       	cpi	r18, 0x32	; 50
     bfe:	31 05       	cpc	r19, r1
     c00:	50 f4       	brcc	.+20     	; 0xc16 <CheckButtons+0x3a>
     c02:	2d 32       	cpi	r18, 0x2D	; 45
     c04:	31 05       	cpc	r19, r1
     c06:	58 f5       	brcc	.+86     	; 0xc5e <CheckButtons+0x82>
     c08:	23 52       	subi	r18, 0x23	; 35
     c0a:	31 09       	sbc	r19, r1
     c0c:	25 30       	cpi	r18, 0x05	; 5
     c0e:	31 05       	cpc	r19, r1
     c10:	80 f5       	brcc	.+96     	; 0xc72 <CheckButtons+0x96>
     c12:	9c e0       	ldi	r25, 0x0C	; 12
     c14:	2f c0       	rjmp	.+94     	; 0xc74 <CheckButtons+0x98>
     c16:	27 33       	cpi	r18, 0x37	; 55
     c18:	31 05       	cpc	r19, r1
     c1a:	18 f1       	brcs	.+70     	; 0xc62 <CheckButtons+0x86>
     c1c:	2e 53       	subi	r18, 0x3E	; 62
     c1e:	31 09       	sbc	r19, r1
     c20:	27 30       	cpi	r18, 0x07	; 7
     c22:	31 05       	cpc	r19, r1
     c24:	30 f5       	brcc	.+76     	; 0xc72 <CheckButtons+0x96>
     c26:	96 e0       	ldi	r25, 0x06	; 6
     c28:	25 c0       	rjmp	.+74     	; 0xc74 <CheckButtons+0x98>
     c2a:	2a 38       	cpi	r18, 0x8A	; 138
     c2c:	31 05       	cpc	r19, r1
     c2e:	50 f4       	brcc	.+20     	; 0xc44 <CheckButtons+0x68>
     c30:	29 37       	cpi	r18, 0x79	; 121
     c32:	31 05       	cpc	r19, r1
     c34:	d0 f4       	brcc	.+52     	; 0xc6a <CheckButtons+0x8e>
     c36:	23 56       	subi	r18, 0x63	; 99
     c38:	31 09       	sbc	r19, r1
     c3a:	2b 30       	cpi	r18, 0x0B	; 11
     c3c:	31 05       	cpc	r19, r1
     c3e:	c8 f4       	brcc	.+50     	; 0xc72 <CheckButtons+0x96>
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	18 c0       	rjmp	.+48     	; 0xc74 <CheckButtons+0x98>
     c44:	22 3a       	cpi	r18, 0xA2	; 162
     c46:	31 05       	cpc	r19, r1
     c48:	a0 f0       	brcs	.+40     	; 0xc72 <CheckButtons+0x96>
     c4a:	2b 3b       	cpi	r18, 0xBB	; 187
     c4c:	31 05       	cpc	r19, r1
     c4e:	78 f0       	brcs	.+30     	; 0xc6e <CheckButtons+0x92>
     c50:	20 5f       	subi	r18, 0xF0	; 240
     c52:	31 09       	sbc	r19, r1
     c54:	20 31       	cpi	r18, 0x10	; 16
     c56:	31 05       	cpc	r19, r1
     c58:	60 f4       	brcc	.+24     	; 0xc72 <CheckButtons+0x96>
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <CheckButtons+0x98>
     c5e:	99 e0       	ldi	r25, 0x09	; 9
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <CheckButtons+0x98>
     c62:	98 e0       	ldi	r25, 0x08	; 8
     c64:	07 c0       	rjmp	.+14     	; 0xc74 <CheckButtons+0x98>
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <CheckButtons+0x98>
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <CheckButtons+0x98>
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <CheckButtons+0x98>
     c72:	9f e0       	ldi	r25, 0x0F	; 15
     c74:	28 2f       	mov	r18, r24
     c76:	2f 70       	andi	r18, 0x0F	; 15
     c78:	92 13       	cpse	r25, r18
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <CheckButtons+0xac>
     c7c:	98 2f       	mov	r25, r24
     c7e:	90 7f       	andi	r25, 0xF0	; 240
     c80:	90 3f       	cpi	r25, 0xF0	; 240
     c82:	39 f0       	breq	.+14     	; 0xc92 <CheckButtons+0xb6>
     c84:	80 5f       	subi	r24, 0xF0	; 240
     c86:	08 95       	ret
     c88:	99 23       	and	r25, r25
     c8a:	11 f0       	breq	.+4      	; 0xc90 <CheckButtons+0xb4>
     c8c:	89 2f       	mov	r24, r25
     c8e:	08 95       	ret
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	08 95       	ret

00000c94 <lfsr>:
     c94:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3877>
     c98:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3877+0x1>
     c9c:	9c 01       	movw	r18, r24
     c9e:	32 2f       	mov	r19, r18
     ca0:	22 27       	eor	r18, r18
     ca2:	32 95       	swap	r19
     ca4:	33 0f       	add	r19, r19
     ca6:	30 7e       	andi	r19, 0xE0	; 224
     ca8:	82 27       	eor	r24, r18
     caa:	93 27       	eor	r25, r19
     cac:	9c 01       	movw	r18, r24
     cae:	23 2f       	mov	r18, r19
     cb0:	33 27       	eor	r19, r19
     cb2:	26 95       	lsr	r18
     cb4:	82 27       	eor	r24, r18
     cb6:	93 27       	eor	r25, r19
     cb8:	9c 01       	movw	r18, r24
     cba:	36 95       	lsr	r19
     cbc:	32 2f       	mov	r19, r18
     cbe:	22 27       	eor	r18, r18
     cc0:	37 95       	ror	r19
     cc2:	27 95       	ror	r18
     cc4:	82 27       	eor	r24, r18
     cc6:	93 27       	eor	r25, r19
     cc8:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3877>
     ccc:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3877+0x1>
     cd0:	08 95       	ret

00000cd2 <floatSpeed>:
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	7b 01       	movw	r14, r22
     ce2:	8a 01       	movw	r16, r20
     ce4:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     ce8:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     cec:	e8 2f       	mov	r30, r24
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	e7 70       	andi	r30, 0x07	; 7
     cf4:	ff 27       	eor	r31, r31
     cf6:	e2 5e       	subi	r30, 0xE2	; 226
     cf8:	f7 4c       	sbci	r31, 0xC7	; 199
     cfa:	d0 80       	ld	r13, Z
     cfc:	cb df       	rcall	.-106    	; 0xc94 <lfsr>
     cfe:	8d 21       	and	r24, r13
     d00:	c8 0f       	add	r28, r24
     d02:	d1 1d       	adc	r29, r1
     d04:	c7 df       	rcall	.-114    	; 0xc94 <lfsr>
     d06:	8d 21       	and	r24, r13
     d08:	c8 1b       	sub	r28, r24
     d0a:	d1 09       	sbc	r29, r1
     d0c:	0c 17       	cp	r16, r28
     d0e:	1d 07       	cpc	r17, r29
     d10:	08 f4       	brcc	.+2      	; 0xd14 <floatSpeed+0x42>
     d12:	e8 01       	movw	r28, r16
     d14:	c7 01       	movw	r24, r14
     d16:	ec 16       	cp	r14, r28
     d18:	fd 06       	cpc	r15, r29
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <floatSpeed+0x4c>
     d1c:	ce 01       	movw	r24, r28
     d1e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     d22:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	08 95       	ret

00000d36 <floatAround>:
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	c8 2f       	mov	r28, r24
     d40:	04 2f       	mov	r16, r20
     d42:	12 2f       	mov	r17, r18
     d44:	e6 2f       	mov	r30, r22
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	e7 70       	andi	r30, 0x07	; 7
     d4c:	ff 27       	eor	r31, r31
     d4e:	e2 5e       	subi	r30, 0xE2	; 226
     d50:	f7 4c       	sbci	r31, 0xC7	; 199
     d52:	d0 81       	ld	r29, Z
     d54:	9f df       	rcall	.-194    	; 0xc94 <lfsr>
     d56:	8d 23       	and	r24, r29
     d58:	c8 0f       	add	r28, r24
     d5a:	9c df       	rcall	.-200    	; 0xc94 <lfsr>
     d5c:	8d 23       	and	r24, r29
     d5e:	c8 1b       	sub	r28, r24
     d60:	8c 2f       	mov	r24, r28
     d62:	11 23       	and	r17, r17
     d64:	41 f0       	breq	.+16     	; 0xd76 <floatAround+0x40>
     d66:	9c 2f       	mov	r25, r28
     d68:	1c 17       	cp	r17, r28
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <floatAround+0x38>
     d6c:	91 2f       	mov	r25, r17
     d6e:	80 2f       	mov	r24, r16
     d70:	09 17       	cp	r16, r25
     d72:	08 f4       	brcc	.+2      	; 0xd76 <floatAround+0x40>
     d74:	89 2f       	mov	r24, r25
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <ReadStatusBit>:
     d80:	e8 2f       	mov	r30, r24
     d82:	ef 77       	andi	r30, 0x7F	; 127
     d84:	e6 95       	lsr	r30
     d86:	e6 95       	lsr	r30
     d88:	e6 95       	lsr	r30
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ef 5b       	subi	r30, 0xBF	; 191
     d8e:	f7 4c       	sbci	r31, 0xC7	; 199
     d90:	20 81       	ld	r18, Z
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	87 70       	andi	r24, 0x07	; 7
     d96:	a9 01       	movw	r20, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <ReadStatusBit+0x1e>
     d9a:	55 95       	asr	r21
     d9c:	47 95       	ror	r20
     d9e:	8a 95       	dec	r24
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <ReadStatusBit+0x1a>
     da2:	ca 01       	movw	r24, r20
     da4:	81 70       	andi	r24, 0x01	; 1
     da6:	08 95       	ret

00000da8 <WriteStatusBit>:
     da8:	e8 2f       	mov	r30, r24
     daa:	ef 77       	andi	r30, 0x7F	; 127
     dac:	e6 95       	lsr	r30
     dae:	e6 95       	lsr	r30
     db0:	e6 95       	lsr	r30
     db2:	28 2f       	mov	r18, r24
     db4:	27 70       	andi	r18, 0x07	; 7
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	ef 5b       	subi	r30, 0xBF	; 191
     dba:	f7 4c       	sbci	r31, 0xC7	; 199
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <WriteStatusBit+0x1c>
     dc2:	88 0f       	add	r24, r24
     dc4:	2a 95       	dec	r18
     dc6:	ea f7       	brpl	.-6      	; 0xdc2 <WriteStatusBit+0x1a>
     dc8:	66 23       	and	r22, r22
     dca:	19 f0       	breq	.+6      	; 0xdd2 <WriteStatusBit+0x2a>
     dcc:	90 81       	ld	r25, Z
     dce:	89 2b       	or	r24, r25
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <WriteStatusBit+0x30>
     dd2:	80 95       	com	r24
     dd4:	90 81       	ld	r25, Z
     dd6:	89 23       	and	r24, r25
     dd8:	80 83       	st	Z, r24
     dda:	08 95       	ret

00000ddc <UpdateState>:
     ddc:	98 2f       	mov	r25, r24
     dde:	8f 77       	andi	r24, 0x7F	; 127
     de0:	31 f0       	breq	.+12     	; 0xdee <UpdateState+0x12>
     de2:	97 ff       	sbrs	r25, 7
     de4:	02 c0       	rjmp	.+4      	; 0xdea <UpdateState+0xe>
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	01 c0       	rjmp	.+2      	; 0xdec <UpdateState+0x10>
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	dd cf       	rjmp	.-70     	; 0xda8 <WriteStatusBit>
     dee:	08 95       	ret

00000df0 <CheckState>:
     df0:	cf 93       	push	r28
     df2:	c8 2f       	mov	r28, r24
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	c4 df       	rcall	.-120    	; 0xd80 <ReadStatusBit>
     df8:	2c 2f       	mov	r18, r28
     dfa:	22 1f       	adc	r18, r18
     dfc:	22 27       	eor	r18, r18
     dfe:	22 1f       	adc	r18, r18
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	81 11       	cpse	r24, r1
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <CheckState+0x18>
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	82 2f       	mov	r24, r18
     e0a:	89 27       	eor	r24, r25
     e0c:	cf 91       	pop	r28
     e0e:	08 95       	ret

00000e10 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
     e10:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
     e12:	86 e7       	ldi	r24, 0x76	; 118
     e14:	ed df       	rcall	.-38     	; 0xdf0 <CheckState>
     e16:	c8 2f       	mov	r28, r24
     e18:	88 23       	and	r24, r24
     e1a:	81 f0       	breq	.+32     	; 0xe3c <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
     e1c:	e0 91 c9 91 	lds	r30, 0x91C9	; 0x8091c9 <__bss_end+0x58d8>
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	ee 53       	subi	r30, 0x3E	; 62
     e24:	f7 4c       	sbci	r31, 0xC7	; 199
     e26:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
     e28:	e0 91 c8 91 	lds	r30, 0x91C8	; 0x8091c8 <__bss_end+0x58d7>
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     e32:	ee 53       	subi	r30, 0x3E	; 62
     e34:	f7 4c       	sbci	r31, 0xC7	; 199
     e36:	80 83       	st	Z, r24
        return 1;
     e38:	c1 e0       	ldi	r28, 0x01	; 1
     e3a:	4c c0       	rjmp	.+152    	; 0xed4 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
     e3c:	85 e7       	ldi	r24, 0x75	; 117
     e3e:	d8 df       	rcall	.-80     	; 0xdf0 <CheckState>
     e40:	88 23       	and	r24, r24
     e42:	59 f1       	breq	.+86     	; 0xe9a <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
     e44:	e0 91 c9 91 	lds	r30, 0x91C9	; 0x8091c9 <__bss_end+0x58d8>
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     e4e:	ee 53       	subi	r30, 0x3E	; 62
     e50:	f7 4c       	sbci	r31, 0xC7	; 199
     e52:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 8))) {
     e54:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <cooledDown.3929>
     e58:	88 23       	and	r24, r24
     e5a:	79 f0       	breq	.+30     	; 0xe7a <HotSummer+0x6a>
     e5c:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <calTemp>
     e60:	90 91 a1 38 	lds	r25, 0x38A1	; 0x8038a1 <calTemp+0x1>
     e64:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <adcTemp>
     e68:	30 91 ee 38 	lds	r19, 0x38EE	; 0x8038ee <adcTemp+0x1>
     e6c:	08 96       	adiw	r24, 0x08	; 8
     e6e:	28 17       	cp	r18, r24
     e70:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
     e72:	18 f0       	brcs	.+6      	; 0xe7a <HotSummer+0x6a>
     e74:	86 e7       	ldi	r24, 0x76	; 118
     e76:	b2 df       	rcall	.-156    	; 0xddc <UpdateState>
            return 0;
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 2)) cooledDown = 1;
     e7a:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <calTemp>
     e7e:	90 91 a1 38 	lds	r25, 0x38A1	; 0x8038a1 <calTemp+0x1>
     e82:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <adcTemp>
     e86:	30 91 ee 38 	lds	r19, 0x38EE	; 0x8038ee <adcTemp+0x1>
     e8a:	02 96       	adiw	r24, 0x02	; 2
     e8c:	82 17       	cp	r24, r18
     e8e:	93 07       	cpc	r25, r19
     e90:	08 f1       	brcs	.+66     	; 0xed4 <HotSummer+0xc4>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <cooledDown.3929>
     e98:	1d c0       	rjmp	.+58     	; 0xed4 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
     e9a:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <calTemp>
     e9e:	90 91 a1 38 	lds	r25, 0x38A1	; 0x8038a1 <calTemp+0x1>
     ea2:	89 2b       	or	r24, r25
     ea4:	41 f4       	brne	.+16     	; 0xeb6 <HotSummer+0xa6>
     ea6:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <adcTemp>
     eaa:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <adcTemp+0x1>
     eae:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <calTemp>
     eb2:	90 93 a1 38 	sts	0x38A1, r25	; 0x8038a1 <calTemp+0x1>
        if (adcTemp >= (calTemp + 8)) {
     eb6:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <calTemp>
     eba:	90 91 a1 38 	lds	r25, 0x38A1	; 0x8038a1 <calTemp+0x1>
     ebe:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <adcTemp>
     ec2:	30 91 ee 38 	lds	r19, 0x38EE	; 0x8038ee <adcTemp+0x1>
     ec6:	08 96       	adiw	r24, 0x08	; 8
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
     ecc:	18 f0       	brcs	.+6      	; 0xed4 <HotSummer+0xc4>
     ece:	85 e7       	ldi	r24, 0x75	; 117
     ed0:	85 df       	rcall	.-246    	; 0xddc <UpdateState>
        }
    }
    return 0;
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
}
     ed4:	8c 2f       	mov	r24, r28
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <GenerateAudio>:

uint8_t GenerateAudio(){
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29

    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
     ee2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
     ee6:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
     eea:	88 27       	eor	r24, r24
     eec:	89 2b       	or	r24, r25
     eee:	09 f0       	breq	.+2      	; 0xef2 <GenerateAudio+0x18>
     ef0:	ae c0       	rjmp	.+348    	; 0x104e <GenerateAudio+0x174>

        //Silence
        if ((effect&0xE0)==0){
     ef2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
     ef6:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
     efa:	80 7e       	andi	r24, 0xE0	; 224
     efc:	99 27       	eor	r25, r25
     efe:	89 2b       	or	r24, r25
     f00:	31 f4       	brne	.+12     	; 0xf0e <GenerateAudio+0x34>
            auRepAddr = &zero;
     f02:	89 e2       	ldi	r24, 0x29	; 41
     f04:	98 e3       	ldi	r25, 0x38	; 56
     f06:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     f0a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
     f0e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
     f12:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
     f16:	80 7e       	andi	r24, 0xE0	; 224
     f18:	99 27       	eor	r25, r25
     f1a:	80 97       	sbiw	r24, 0x20	; 32
     f1c:	09 f0       	breq	.+2      	; 0xf20 <GenerateAudio+0x46>
     f1e:	45 c0       	rjmp	.+138    	; 0xfaa <GenerateAudio+0xd0>
            static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 192, 255, 192, 128, 64, 1, 64, 1, 64, 128, 0}; 
            static uint8_t loudness, duration, start;

            if (buttonMark) {
     f20:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <buttonMark>
     f24:	88 23       	and	r24, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <GenerateAudio+0x50>
     f28:	40 c0       	rjmp	.+128    	; 0xfaa <GenerateAudio+0xd0>
                if (start == 0) {
     f2a:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <start.3935>
     f2e:	81 11       	cpse	r24, r1
     f30:	15 c0       	rjmp	.+42     	; 0xf5c <GenerateAudio+0x82>
                    duration = 8;
     f32:	88 e0       	ldi	r24, 0x08	; 8
     f34:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <duration.3934>
                    loudness = 0xff;
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <loudness.3933>
                    TCB1_CCMP = 0x2000;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e2       	ldi	r25, 0x20	; 32
     f42:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     f46:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    auRepAddr = &auBuffer[0];
     f4a:	8b e0       	ldi	r24, 0x0B	; 11
     f4c:	98 e3       	ldi	r25, 0x38	; 56
     f4e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     f52:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    start = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <start.3935>
                }

                if (loudness) {
     f5c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <loudness.3933>
     f60:	88 23       	and	r24, r24
     f62:	71 f0       	breq	.+28     	; 0xf80 <GenerateAudio+0xa6>
                    auVolume = loudness;
     f64:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <auVolume>
                    if (duration) duration--; else loudness <<= 1;
     f68:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <duration.3934>
     f6c:	99 23       	and	r25, r25
     f6e:	21 f0       	breq	.+8      	; 0xf78 <GenerateAudio+0x9e>
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <duration.3934>
     f76:	19 c0       	rjmp	.+50     	; 0xfaa <GenerateAudio+0xd0>
     f78:	88 0f       	add	r24, r24
     f7a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <loudness.3933>
     f7e:	15 c0       	rjmp	.+42     	; 0xfaa <GenerateAudio+0xd0>
                } else {
                    auRepAddr = &zero;
     f80:	89 e2       	ldi	r24, 0x29	; 41
     f82:	98 e3       	ldi	r25, 0x38	; 56
     f84:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     f88:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    effect &= 0x10;
     f8c:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
     f90:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
     f94:	80 71       	andi	r24, 0x10	; 16
     f96:	99 27       	eor	r25, r25
     f98:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <effect>
     f9c:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <effect+0x1>
                    auVolume = 255;
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <auVolume>
                    start = 0;
     fa6:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <start.3935>
                }
            }
        }

        //Good (bell)
        if ((effect&0xE0)==64){
     faa:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
     fae:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
     fb2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
     fb6:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
     fba:	80 7e       	andi	r24, 0xE0	; 224
     fbc:	99 27       	eor	r25, r25
     fbe:	80 36       	cpi	r24, 0x60	; 96
     fc0:	91 05       	cpc	r25, r1
     fc2:	c9 f5       	brne	.+114    	; 0x1036 <GenerateAudio+0x15c>
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
     fc4:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <auBuffer.3936+0x6>
            auRepAddr = &auBuffer[0];
     fc8:	85 e3       	ldi	r24, 0x35	; 53
     fca:	98 e3       	ldi	r25, 0x38	; 56
     fcc:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     fd0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
     fd4:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
     fd6:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
     fd8:	d3 e0       	ldi	r29, 0x03	; 3
     fda:	8c 2f       	mov	r24, r28
     fdc:	6d 2f       	mov	r22, r29
     fde:	c5 d0       	rcall	.+394    	; 0x116a <__udivmodqi4>
     fe0:	99 23       	and	r25, r25
     fe2:	39 f0       	breq	.+14     	; 0xff2 <GenerateAudio+0x118>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	65 e0       	ldi	r22, 0x05	; 5
     fea:	80 e8       	ldi	r24, 0x80	; 128
     fec:	a4 de       	rcall	.-696    	; 0xd36 <floatAround>
     fee:	f8 01       	movw	r30, r16
     ff0:	81 83       	std	Z+1, r24	; 0x01
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
     ff2:	cf 5f       	subi	r28, 0xFF	; 255
     ff4:	0f 5f       	subi	r16, 0xFF	; 255
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	c6 30       	cpi	r28, 0x06	; 6
     ffa:	79 f7       	brne	.-34     	; 0xfda <GenerateAudio+0x100>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
     ffc:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <buttonMark>
    1000:	88 23       	and	r24, r24
    1002:	c9 f0       	breq	.+50     	; 0x1036 <GenerateAudio+0x15c>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	54 e0       	ldi	r21, 0x04	; 4
    1008:	60 e8       	ldi	r22, 0x80	; 128
    100a:	72 e0       	ldi	r23, 0x02	; 2
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	61 de       	rcall	.-830    	; 0xcd2 <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1010:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <auVolume>
    1014:	20 ea       	ldi	r18, 0xA0	; 160
    1016:	40 e1       	ldi	r20, 0x10	; 16
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	8d de       	rcall	.-742    	; 0xd36 <floatAround>
    101c:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1020:	20 e9       	ldi	r18, 0x90	; 144
    1022:	40 e7       	ldi	r20, 0x70	; 112
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <auBuffer.3936>
    102a:	85 de       	rcall	.-758    	; 0xd36 <floatAround>
    102c:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <auBuffer.3936>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1030:	80 95       	com	r24
    1032:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <auBuffer.3936+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
    1036:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    103a:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
    103e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    1042:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
    1046:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    104a:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
        //Rain storm with whistling wind
        else {
        }
    }

    return buttonMark;
    104e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <buttonMark>
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	08 95       	ret

00001060 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    1060:	8a da       	rcall	.-2796   	; 0x576 <Setup>

    SerSpeed(0xff);
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	aa dd       	rcall	.-1196   	; 0xbba <SerSpeed>
    1066:	a8 ed       	ldi	r26, 0xD8	; 216
    1068:	b1 e9       	ldi	r27, 0x91	; 145
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	ed 91       	ld	r30, X+
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ee 53       	subi	r30, 0x3E	; 62
    1072:	f7 4c       	sbci	r31, 0xC7	; 199
    1074:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    1076:	15 96       	adiw	r26, 0x05	; 5
    1078:	ec 91       	ld	r30, X
    107a:	15 97       	sbiw	r26, 0x05	; 5
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	ee 53       	subi	r30, 0x3E	; 62
    1080:	f7 4c       	sbci	r31, 0xC7	; 199
    1082:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    1084:	21 e9       	ldi	r18, 0x91	; 145
    1086:	ae 3d       	cpi	r26, 0xDE	; 222
    1088:	b2 07       	cpc	r27, r18
    108a:	81 f7       	brne	.-32     	; 0x106c <main+0xc>
    108c:	ea ec       	ldi	r30, 0xCA	; 202
    108e:	f1 e9       	ldi	r31, 0x91	; 145
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	ef 01       	movw	r28, r30
    1094:	a5 81       	ldd	r26, Z+5	; 0x05
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ae 53       	subi	r26, 0x3E	; 62
    109a:	b7 4c       	sbci	r27, 0xC7	; 199
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	9c 93       	st	X, r25
    10a0:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    10a2:	a8 81       	ld	r26, Y
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	ae 53       	subi	r26, 0x3E	; 62
    10a8:	b7 4c       	sbci	r27, 0xC7	; 199
    10aa:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    10ac:	21 e9       	ldi	r18, 0x91	; 145
    10ae:	ef 3c       	cpi	r30, 0xCF	; 207
    10b0:	f2 07       	cpc	r31, r18
    10b2:	79 f7       	brne	.-34     	; 0x1092 <main+0x32>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    10b4:	e0 91 d6 91 	lds	r30, 0x91D6	; 0x8091d6 <__bss_end+0x58e5>
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	ee 53       	subi	r30, 0x3E	; 62
    10bc:	f7 4c       	sbci	r31, 0xC7	; 199
    10be:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    10c0:	e0 91 d7 91 	lds	r30, 0x91D7	; 0x8091d7 <__bss_end+0x58e6>
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	ee 53       	subi	r30, 0x3E	; 62
    10c8:	f7 4c       	sbci	r31, 0xC7	; 199
    10ca:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    10cc:	e0 91 d4 91 	lds	r30, 0x91D4	; 0x8091d4 <__bss_end+0x58e3>
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	ee 53       	subi	r30, 0x3E	; 62
    10d4:	f7 4c       	sbci	r31, 0xC7	; 199
    10d6:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    10d8:	e0 91 d5 91 	lds	r30, 0x91D5	; 0x8091d5 <__bss_end+0x58e4>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	ee 53       	subi	r30, 0x3E	; 62
    10e0:	f7 4c       	sbci	r31, 0xC7	; 199
    10e2:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    10e4:	e0 91 c8 91 	lds	r30, 0x91C8	; 0x8091c8 <__bss_end+0x58d7>
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ee 53       	subi	r30, 0x3E	; 62
    10ec:	f7 4c       	sbci	r31, 0xC7	; 199
    10ee:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    10f0:	e0 91 c9 91 	lds	r30, 0x91C9	; 0x8091c9 <__bss_end+0x58d8>
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	ee 53       	subi	r30, 0x3E	; 62
    10f8:	f7 4c       	sbci	r31, 0xC7	; 199
    10fa:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    10fc:	e0 91 c7 91 	lds	r30, 0x91C7	; 0x8091c7 <__bss_end+0x58d6>
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	ee 53       	subi	r30, 0x3E	; 62
    1104:	f7 4c       	sbci	r31, 0xC7	; 199
    1106:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    1108:	e0 91 c6 91 	lds	r30, 0x91C6	; 0x8091c6 <__bss_end+0x58d5>
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	ee 53       	subi	r30, 0x3E	; 62
    1110:	f7 4c       	sbci	r31, 0xC7	; 199
    1112:	80 83       	st	Z, r24

    effect = 32;
    1114:	80 e2       	ldi	r24, 0x20	; 32
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <effect>
    111c:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <effect+0x1>
    while (1)
    {
        


        if (GenerateAudio()){
    1120:	dc de       	rcall	.-584    	; 0xeda <GenerateAudio>
    1122:	88 23       	and	r24, r24
            buttonState = CheckButtons(buttonState);
    1124:	e9 f3       	breq	.-6      	; 0x1120 <main+0xc0>
    1126:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    112a:	58 dd       	rcall	.-1360   	; 0xbdc <CheckButtons>
    112c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    1130:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <buttonMark>
            
            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            //TextAdventure();
          
            //Other games & user interaction checks
            MagnetMaze();
    1134:	d8 d8       	rcall	.-3664   	; 0x2e6 <MagnetMaze>
            BastetDictates();
    1136:	92 df       	rcall	.-220    	; 0x105c <BastetDictates>
    1138:	0e 94 7b 00 	call	0xf6	; 0xf6 <LanyardCode>
            LanyardCode();
    113c:	0e 94 5b 00 	call	0xb6	; 0xb6 <MakeFriends>
            MakeFriends();
    1140:	80 91 9d 38 	lds	r24, 0x389D	; 0x80389d <adcPhot>
             
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    1144:	90 91 9e 38 	lds	r25, 0x389E	; 0x80389e <adcPhot+0x1>
    1148:	0a 97       	sbiw	r24, 0x0a	; 10
    114a:	18 f4       	brcc	.+6      	; 0x1152 <main+0xf2>
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	84 e7       	ldi	r24, 0x74	; 116
    1150:	2b de       	rcall	.-938    	; 0xda8 <WriteStatusBit>
    1152:	80 91 9d 38 	lds	r24, 0x389D	; 0x80389d <adcPhot>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    1156:	90 91 9e 38 	lds	r25, 0x389E	; 0x80389e <adcPhot+0x1>
    115a:	85 36       	cpi	r24, 0x65	; 101
    115c:	91 05       	cpc	r25, r1
    115e:	18 f0       	brcs	.+6      	; 0x1166 <main+0x106>
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	84 e7       	ldi	r24, 0x74	; 116
    1164:	21 de       	rcall	.-958    	; 0xda8 <WriteStatusBit>

            //Check temperature 
            HotSummer();
    1166:	54 de       	rcall	.-856    	; 0xe10 <HotSummer>
    1168:	db cf       	rjmp	.-74     	; 0x1120 <main+0xc0>

0000116a <__udivmodqi4>:
    116a:	99 1b       	sub	r25, r25
    116c:	79 e0       	ldi	r23, 0x09	; 9
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <__udivmodqi4_ep>

00001170 <__udivmodqi4_loop>:
    1170:	99 1f       	adc	r25, r25
    1172:	96 17       	cp	r25, r22
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__udivmodqi4_ep>
    1176:	96 1b       	sub	r25, r22

00001178 <__udivmodqi4_ep>:
    1178:	88 1f       	adc	r24, r24
    117a:	7a 95       	dec	r23
    117c:	c9 f7       	brne	.-14     	; 0x1170 <__udivmodqi4_loop>
    117e:	80 95       	com	r24
    1180:	08 95       	ret

00001182 <__udivmodhi4>:
    1182:	aa 1b       	sub	r26, r26
    1184:	bb 1b       	sub	r27, r27
    1186:	51 e1       	ldi	r21, 0x11	; 17
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <__udivmodhi4_ep>

0000118a <__udivmodhi4_loop>:
    118a:	aa 1f       	adc	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	a6 17       	cp	r26, r22
    1190:	b7 07       	cpc	r27, r23
    1192:	10 f0       	brcs	.+4      	; 0x1198 <__udivmodhi4_ep>
    1194:	a6 1b       	sub	r26, r22
    1196:	b7 0b       	sbc	r27, r23

00001198 <__udivmodhi4_ep>:
    1198:	88 1f       	adc	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	5a 95       	dec	r21
    119e:	a9 f7       	brne	.-22     	; 0x118a <__udivmodhi4_loop>
    11a0:	80 95       	com	r24
    11a2:	90 95       	com	r25
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	08 95       	ret

000011aa <_exit>:
    11aa:	f8 94       	cli

000011ac <__stop_program>:
    11ac:	ff cf       	rjmp	.-2      	; 0x11ac <__stop_program>
