
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00803800  000039f6  00003aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003914  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e2  0000b914  00003914  000039c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  0080382a  0080382a  00003ad4  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000067ee  00000000  00000000  00003e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000281b  00000000  00000000  0000a62a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003783  00000000  00000000  0000ce45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000914  00000000  00000000  000105c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001988  00000000  00000000  00010edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000042c1  00000000  00000000  00012864  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000368  00000000  00000000  00016b25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c7       	rjmp	.+3818   	; 0xf04 <__vector_6>
      1a:	00 00       	nop
      1c:	bd c7       	rjmp	.+3962   	; 0xf98 <__vector_7>
      1e:	00 00       	nop
      20:	a4 c5       	rjmp	.+2888   	; 0xb6a <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	eb c5       	rjmp	.+3030   	; 0xc0c <__vector_13>
      36:	00 00       	nop
      38:	1c c6       	rjmp	.+3128   	; 0xc72 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	da c6       	rjmp	.+3508   	; 0xe06 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	0d c7       	rjmp	.+3610   	; 0xe74 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	55 c6       	rjmp	.+3242   	; 0xd18 <__vector_27>
      6e:	00 00       	nop
      70:	ae c6       	rjmp	.+3420   	; 0xdce <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e6 ef       	ldi	r30, 0xF6	; 246
      90:	f9 e3       	ldi	r31, 0x39	; 57
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 32       	cpi	r26, 0x2A	; 42
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	aa e2       	ldi	r26, 0x2A	; 42
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 30       	cpi	r26, 0x0C	; 12
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 9d 1b 	call	0x373a	; 0x373a <main>
      b2:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      b8:	85 e1       	ldi	r24, 0x15	; 21
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	44 e0       	ldi	r20, 0x04	; 4
      be:	48 0f       	add	r20, r24
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<250; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      c0:	20 91 b4 3a 	lds	r18, 0x3AB4	; 0x803ab4 <auIn>
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	28 17       	cp	r18, r24
      c8:	39 07       	cpc	r19, r25
      ca:	64 f0       	brlt	.+24     	; 0xe4 <chkVolt250+0x2c>
      cc:	20 91 b4 3a 	lds	r18, 0x3AB4	; 0x803ab4 <auIn>
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	bc 01       	movw	r22, r24
      d4:	68 5f       	subi	r22, 0xF8	; 248
      d6:	7f 4f       	sbci	r23, 0xFF	; 255
      d8:	62 17       	cp	r22, r18
      da:	73 07       	cpc	r23, r19
      dc:	1c f0       	brlt	.+6      	; 0xe4 <chkVolt250+0x2c>
            avgVolt = x;
      de:	40 93 2d 38 	sts	0x382D, r20	; 0x80382d <avgVolt.3764>
            break;
      e2:	04 c0       	rjmp	.+8      	; 0xec <chkVolt250+0x34>
      e4:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<250; x+=25) {
      e6:	86 3f       	cpi	r24, 0xF6	; 246
      e8:	91 05       	cpc	r25, r1
      ea:	41 f7       	brne	.-48     	; 0xbc <chkVolt250+0x4>
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            avgVolt = x;
            break;
        }
    }
    return avgVolt/25;
      ec:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <avgVolt.3764>
      f0:	69 e1       	ldi	r22, 0x19	; 25
      f2:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__udivmodqi4>
}
      f6:	08 95       	ret

000000f8 <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Checking for headphones
    if (detHdPh) return 0;
     108:	80 91 b1 3a 	lds	r24, 0x3AB1	; 0x803ab1 <detHdPh>
     10c:	81 11       	cpse	r24, r1
     10e:	ba c0       	rjmp	.+372    	; 0x284 <MakeFriends+0x18c>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     110:	20 91 2c 38 	lds	r18, 0x382C	; 0x80382c <progress.3771>
     114:	21 11       	cpse	r18, r1
     116:	11 c0       	rjmp	.+34     	; 0x13a <MakeFriends+0x42>
        setDAC[0] = whoami * 50;
     118:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <whoami>
     11c:	92 e3       	ldi	r25, 0x32	; 50
     11e:	89 9f       	mul	r24, r25
     120:	80 2d       	mov	r24, r0
     122:	11 24       	eor	r1, r1
     124:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	98 e3       	ldi	r25, 0x38	; 56
     12c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
     130:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
        auVolume = 255;
     134:	8f ef       	ldi	r24, 0xFF	; 255
     136:	80 93 a8 3a 	sts	0x3AA8, r24	; 0x803aa8 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - 10)) || (auIn[0] > (setDAC[0] + 10))) {
     13a:	40 91 b4 3a 	lds	r20, 0x3AB4	; 0x803ab4 <auIn>
     13e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	bc 01       	movw	r22, r24
     148:	6a 50       	subi	r22, 0x0A	; 10
     14a:	71 09       	sbc	r23, r1
     14c:	46 17       	cp	r20, r22
     14e:	57 07       	cpc	r21, r23
     150:	44 f0       	brlt	.+16     	; 0x162 <MakeFriends+0x6a>
     152:	40 91 b4 3a 	lds	r20, 0x3AB4	; 0x803ab4 <auIn>
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	0a 96       	adiw	r24, 0x0a	; 10
     15a:	84 17       	cp	r24, r20
     15c:	95 07       	cpc	r25, r21
     15e:	0c f0       	brlt	.+2      	; 0x162 <MakeFriends+0x6a>
     160:	8f c0       	rjmp	.+286    	; 0x280 <MakeFriends+0x188>
        if (progress == NO_OTHER) {
     162:	21 11       	cpse	r18, r1
     164:	0a c0       	rjmp	.+20     	; 0x17a <MakeFriends+0x82>
            ++chkTmr;
     166:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <chkTmr.3773>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <chkTmr.3773>
            if (chkTmr >= 8) {
     170:	88 30       	cpi	r24, 0x08	; 8
     172:	08 f4       	brcc	.+2      	; 0x176 <MakeFriends+0x7e>
     174:	87 c0       	rjmp	.+270    	; 0x284 <MakeFriends+0x18c>
                progress = FIRST_CONTACT;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	74 c0       	rjmp	.+232    	; 0x262 <MakeFriends+0x16a>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     17a:	21 30       	cpi	r18, 0x01	; 1
     17c:	89 f5       	brne	.+98     	; 0x1e0 <MakeFriends+0xe8>
            jackIn = chkVolt250();
     17e:	9c df       	rcall	.-200    	; 0xb8 <chkVolt250>
     180:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <__data_end>
            if (jackIn) {
     184:	88 23       	and	r24, r24
     186:	49 f1       	breq	.+82     	; 0x1da <MakeFriends+0xe2>
                ++chkTmr;
     188:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <chkTmr.3773>
     18c:	9f 5f       	subi	r25, 0xFF	; 255
     18e:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <chkTmr.3773>
                if (chkTmr >= 8){
     192:	98 30       	cpi	r25, 0x08	; 8
     194:	08 f4       	brcc	.+2      	; 0x198 <MakeFriends+0xa0>
     196:	76 c0       	rjmp	.+236    	; 0x284 <MakeFriends+0x18c>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     198:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <whoami>
     19c:	91 30       	cpi	r25, 0x01	; 1
     19e:	29 f4       	brne	.+10     	; 0x1aa <MakeFriends+0xb2>
     1a0:	83 50       	subi	r24, 0x03	; 3
     1a2:	83 30       	cpi	r24, 0x03	; 3
     1a4:	b8 f4       	brcc	.+46     	; 0x1d4 <MakeFriends+0xdc>
                        progress = SECOND_LOVE; 
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	5c c0       	rjmp	.+184    	; 0x262 <MakeFriends+0x16a>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1aa:	92 30       	cpi	r25, 0x02	; 2
     1ac:	31 f4       	brne	.+12     	; 0x1ba <MakeFriends+0xc2>
     1ae:	83 30       	cpi	r24, 0x03	; 3
     1b0:	d1 f3       	breq	.-12     	; 0x1a6 <MakeFriends+0xae>
     1b2:	85 50       	subi	r24, 0x05	; 5
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	70 f4       	brcc	.+28     	; 0x1d4 <MakeFriends+0xdc>
     1b8:	f6 cf       	rjmp	.-20     	; 0x1a6 <MakeFriends+0xae>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1ba:	93 30       	cpi	r25, 0x03	; 3
     1bc:	39 f4       	brne	.+14     	; 0x1cc <MakeFriends+0xd4>
     1be:	9c ef       	ldi	r25, 0xFC	; 252
     1c0:	98 0f       	add	r25, r24
     1c2:	92 30       	cpi	r25, 0x02	; 2
     1c4:	80 f3       	brcs	.-32     	; 0x1a6 <MakeFriends+0xae>
     1c6:	87 30       	cpi	r24, 0x07	; 7
     1c8:	29 f4       	brne	.+10     	; 0x1d4 <MakeFriends+0xdc>
     1ca:	ed cf       	rjmp	.-38     	; 0x1a6 <MakeFriends+0xae>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1cc:	94 30       	cpi	r25, 0x04	; 4
     1ce:	11 f4       	brne	.+4      	; 0x1d4 <MakeFriends+0xdc>
     1d0:	85 50       	subi	r24, 0x05	; 5
     1d2:	e7 cf       	rjmp	.-50     	; 0x1a2 <MakeFriends+0xaa>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     1d4:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <progress.3771>
     1d8:	46 c0       	rjmp	.+140    	; 0x266 <MakeFriends+0x16e>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     1da:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <chkTmr.3773>
     1de:	50 c0       	rjmp	.+160    	; 0x280 <MakeFriends+0x188>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     1e0:	22 30       	cpi	r18, 0x02	; 2
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <MakeFriends+0xee>
     1e4:	43 c0       	rjmp	.+134    	; 0x26c <MakeFriends+0x174>
            ++chkTmr;
     1e6:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <chkTmr.3773>
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <chkTmr.3773>
     1f0:	c0 e4       	ldi	r28, 0x40	; 64
     1f2:	d9 eb       	ldi	r29, 0xB9	; 185
     1f4:	55 e4       	ldi	r21, 0x45	; 69
     1f6:	e5 2e       	mov	r14, r21
     1f8:	59 eb       	ldi	r21, 0xB9	; 185
     1fa:	f5 2e       	mov	r15, r21
     1fc:	6e 01       	movw	r12, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     1fe:	0d 81       	ldd	r16, Y+5	; 0x05
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	af d7       	rcall	.+3934   	; 0x1162 <lfsr>
     204:	87 ff       	sbrs	r24, 7
     206:	03 c0       	rjmp	.+6      	; 0x20e <MakeFriends+0x116>
     208:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     20c:	01 c0       	rjmp	.+2      	; 0x210 <MakeFriends+0x118>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	f8 01       	movw	r30, r16
     212:	e4 54       	subi	r30, 0x44	; 68
     214:	f5 4c       	sbci	r31, 0xC5	; 197
     216:	80 83       	st	Z, r24
     218:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     21a:	f6 01       	movw	r30, r12
     21c:	00 81       	ld	r16, Z
     21e:	10 e0       	ldi	r17, 0x00	; 0
     220:	a0 d7       	rcall	.+3904   	; 0x1162 <lfsr>
     222:	87 ff       	sbrs	r24, 7
     224:	03 c0       	rjmp	.+6      	; 0x22c <MakeFriends+0x134>
     226:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     22a:	01 c0       	rjmp	.+2      	; 0x22e <MakeFriends+0x136>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	f8 01       	movw	r30, r16
     230:	e4 54       	subi	r30, 0x44	; 68
     232:	f5 4c       	sbci	r31, 0xC5	; 197
     234:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     236:	ec 16       	cp	r14, r28
     238:	fd 06       	cpc	r15, r29
     23a:	01 f7       	brne	.-64     	; 0x1fc <MakeFriends+0x104>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= 200){
     23c:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <chkTmr.3773>
     240:	88 3c       	cpi	r24, 0xC8	; 200
     242:	00 f1       	brcs	.+64     	; 0x284 <MakeFriends+0x18c>
                candidate = jackIn-whoami;
                if (jackIn > (whoami<<1)) setDAC[0] = 250;
     244:	20 91 2a 38 	lds	r18, 0x382A	; 0x80382a <__data_end>
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <whoami>
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	82 17       	cp	r24, r18
     256:	93 07       	cpc	r25, r19
     258:	1c f4       	brge	.+6      	; 0x260 <MakeFriends+0x168>
     25a:	8a ef       	ldi	r24, 0xFA	; 250
     25c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <progress.3771>
                chkTmr = 0;
     266:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <chkTmr.3773>
     26a:	0c c0       	rjmp	.+24     	; 0x284 <MakeFriends+0x18c>
            }
        } 
        
        //Wait a bit, check Voltage again 
        else if (progress == THIRD_KISS) {
     26c:	23 30       	cpi	r18, 0x03	; 3
     26e:	51 f4       	brne	.+20     	; 0x284 <MakeFriends+0x18c>
            chkTmr++;
     270:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <chkTmr.3773>
     274:	8f 5f       	subi	r24, 0xFF	; 255
     276:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <chkTmr.3773>
            if (chkTmr >= 8) {
     27a:	88 30       	cpi	r24, 0x08	; 8
     27c:	a0 f7       	brcc	.-24     	; 0x266 <MakeFriends+0x16e>
     27e:	02 c0       	rjmp	.+4      	; 0x284 <MakeFriends+0x18c>
                chkTmr = 0;
            }
        }

    } else progress = NO_OTHER;
     280:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <progress.3771>
      
    return 0;
}
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	08 95       	ret

00000298 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     29e:	e6 e2       	ldi	r30, 0x26	; 38
     2a0:	f4 e0       	ldi	r31, 0x04	; 4
     2a2:	80 83       	st	Z, r24
     2a4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     2a8:	a1 e2       	ldi	r26, 0x21	; 33
     2aa:	b4 e0       	ldi	r27, 0x04	; 4
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9c 93       	st	X, r25
     2b0:	90 83       	st	Z, r25
     2b2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     2b6:	e0 e1       	ldi	r30, 0x10	; 16
     2b8:	f8 e0       	ldi	r31, 0x08	; 8
     2ba:	97 e0       	ldi	r25, 0x07	; 7
     2bc:	96 83       	std	Z+6, r25	; 0x06
     2be:	98 e0       	ldi	r25, 0x08	; 8
     2c0:	94 83       	std	Z+4, r25	; 0x04
     2c2:	83 83       	std	Z+3, r24	; 0x03
     2c4:	8c 93       	st	X, r24
     2c6:	85 81       	ldd	r24, Z+5	; 0x05
     2c8:	81 60       	ori	r24, 0x01	; 1
     2ca:	85 83       	std	Z+5, r24	; 0x05
     2cc:	85 81       	ldd	r24, Z+5	; 0x05
     2ce:	84 6c       	ori	r24, 0xC4	; 196
     2d0:	85 83       	std	Z+5, r24	; 0x05
     2d2:	08 95       	ret

000002d4 <I2C_recover>:
     2d4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     2d8:	88 60       	ori	r24, 0x08	; 8
     2da:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     2de:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     2e8:	99 e0       	ldi	r25, 0x09	; 9
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     2f2:	30 e1       	ldi	r19, 0x10	; 16
     2f4:	3a 95       	dec	r19
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <I2C_recover+0x20>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <I2C_recover+0x26>
     2fa:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     2fe:	30 e1       	ldi	r19, 0x10	; 16
     300:	3a 95       	dec	r19
     302:	f1 f7       	brne	.-4      	; 0x300 <I2C_recover+0x2c>
     304:	00 c0       	rjmp	.+0      	; 0x306 <I2C_recover+0x32>
     306:	91 50       	subi	r25, 0x01	; 1
     308:	89 f7       	brne	.-30     	; 0x2ec <I2C_recover+0x18>
     30a:	28 e0       	ldi	r18, 0x08	; 8
     30c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     310:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     31a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     31e:	91 60       	ori	r25, 0x01	; 1
     320:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     324:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     328:	94 6c       	ori	r25, 0xC4	; 196
     32a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     32e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     332:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     336:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     33a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     33e:	81 60       	ori	r24, 0x01	; 1
     340:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     344:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     348:	84 6c       	ori	r24, 0xC4	; 196
     34a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     34e:	08 95       	ret

00000350 <I2C_start>:
     350:	28 2f       	mov	r18, r24
     352:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     356:	90 6c       	ori	r25, 0xC0	; 192
     358:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     35c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     360:	89 2f       	mov	r24, r25
     362:	84 70       	andi	r24, 0x04	; 4
     364:	92 fd       	sbrc	r25, 2
     366:	03 c0       	rjmp	.+6      	; 0x36e <I2C_start+0x1e>
     368:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     36c:	08 95       	ret
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	08 95       	ret

00000372 <I2C_wait_ACK>:
     372:	8c e0       	ldi	r24, 0x0C	; 12
     374:	80 93 52 3a 	sts	0x3A52, r24	; 0x803a52 <timeout_I2C>
     378:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     37c:	87 fd       	sbrc	r24, 7
     37e:	0a c0       	rjmp	.+20     	; 0x394 <I2C_wait_ACK+0x22>
     380:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     384:	86 fd       	sbrc	r24, 6
     386:	06 c0       	rjmp	.+12     	; 0x394 <I2C_wait_ACK+0x22>
     388:	80 91 52 3a 	lds	r24, 0x3A52	; 0x803a52 <timeout_I2C>
     38c:	81 11       	cpse	r24, r1
     38e:	f4 cf       	rjmp	.-24     	; 0x378 <I2C_wait_ACK+0x6>
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	08 95       	ret
     394:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     398:	80 6c       	ori	r24, 0xC0	; 192
     39a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a2:	82 fd       	sbrc	r24, 2
     3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <I2C_wait_ACK+0x46>
     3a6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3aa:	83 fd       	sbrc	r24, 3
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <I2C_wait_ACK+0x4a>
     3ae:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b2:	82 95       	swap	r24
     3b4:	81 70       	andi	r24, 0x01	; 1
     3b6:	08 95       	ret
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	08 95       	ret
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	08 95       	ret

000003c0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     3c0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     3c2:	8c e0       	ldi	r24, 0x0C	; 12
     3c4:	80 93 52 3a 	sts	0x3A52, r24	; 0x803a52 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     3c8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3cc:	89 2f       	mov	r24, r25
     3ce:	83 70       	andi	r24, 0x03	; 3
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	11 f0       	breq	.+4      	; 0x3d8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     3d8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3dc:	97 fd       	sbrc	r25, 7
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     3e0:	90 91 52 3a 	lds	r25, 0x3A52	; 0x803a52 <timeout_I2C>
     3e4:	91 11       	cpse	r25, r1
     3e6:	f8 cf       	rjmp	.-16     	; 0x3d8 <I2C_read+0x18>
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     3ec:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f0:	90 6c       	ori	r25, 0xC0	; 192
     3f2:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     3f6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	92 fd       	sbrc	r25, 2
     3fc:	1e c0       	rjmp	.+60     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     3fe:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     402:	93 fd       	sbrc	r25, 3
     404:	1d c0       	rjmp	.+58     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     406:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40a:	89 2f       	mov	r24, r25
     40c:	80 71       	andi	r24, 0x10	; 16
     40e:	94 fd       	sbrc	r25, 4
     410:	16 c0       	rjmp	.+44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     412:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     416:	61 11       	cpse	r22, r1
     418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	9b 7f       	andi	r25, 0xFB	; 251
     41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     41e:	94 60       	ori	r25, 0x04	; 4
     420:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     424:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     428:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     42a:	61 11       	cpse	r22, r1
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     432:	92 60       	ori	r25, 0x02	; 2
     434:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     438:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     43e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     440:	08 95       	ret

00000442 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     442:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     444:	8c e0       	ldi	r24, 0x0C	; 12
     446:	80 93 52 3a 	sts	0x3A52, r24	; 0x803a52 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     44a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     44e:	93 70       	andi	r25, 0x03	; 3
     450:	92 30       	cpi	r25, 0x02	; 2
     452:	b1 f4       	brne	.+44     	; 0x480 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     454:	80 81       	ld	r24, Z
     456:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     45a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     45e:	86 fd       	sbrc	r24, 6
     460:	06 c0       	rjmp	.+12     	; 0x46e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     462:	80 91 52 3a 	lds	r24, 0x3A52	; 0x803a52 <timeout_I2C>
     466:	81 11       	cpse	r24, r1
     468:	f8 cf       	rjmp	.-16     	; 0x45a <I2C_write+0x18>
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     46e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     472:	82 fd       	sbrc	r24, 2
     474:	07 c0       	rjmp	.+14     	; 0x484 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     476:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     47a:	82 95       	swap	r24
     47c:	81 70       	andi	r24, 0x01	; 1
     47e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     484:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     486:	08 95       	ret

00000488 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     488:	e0 e1       	ldi	r30, 0x10	; 16
     48a:	f8 e0       	ldi	r31, 0x08	; 8
     48c:	84 81       	ldd	r24, Z+4	; 0x04
     48e:	83 60       	ori	r24, 0x03	; 3
     490:	84 83       	std	Z+4, r24	; 0x04
     492:	08 95       	ret

00000494 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	6b 01       	movw	r12, r22
     4a4:	f4 2e       	mov	r15, r20
     4a6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     4a8:	18 2f       	mov	r17, r24
     4aa:	11 0f       	add	r17, r17
     4ac:	81 2f       	mov	r24, r17
     4ae:	50 df       	rcall	.-352    	; 0x350 <I2C_start>
	if (status != 0) goto error;
     4b0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     4b2:	2b c0       	rjmp	.+86     	; 0x50a <I2C_read_bytes+0x76>
     4b4:	5e df       	rcall	.-324    	; 0x372 <I2C_wait_ACK>
	if (status == 1) {
     4b6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     4b8:	19 f4       	brne	.+6      	; 0x4c0 <I2C_read_bytes+0x2c>
     4ba:	e6 df       	rcall	.-52     	; 0x488 <I2C_stop>
		return 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	27 c0       	rjmp	.+78     	; 0x50e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     4c0:	81 11       	cpse	r24, r1
     4c2:	23 c0       	rjmp	.+70     	; 0x50a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     4c4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     4c6:	49 f0       	breq	.+18     	; 0x4da <I2C_read_bytes+0x46>
     4c8:	c6 01       	movw	r24, r12
     4ca:	bb df       	rcall	.-138    	; 0x442 <I2C_write>
	    if (status != 0) goto error;
     4cc:	81 11       	cpse	r24, r1
     4ce:	1d c0       	rjmp	.+58     	; 0x50a <I2C_read_bytes+0x76>
        ++reg_ptr;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	c8 1a       	sub	r12, r24
     4d4:	d8 0a       	sbc	r13, r24
        --reg_len;
     4d6:	fa 94       	dec	r15
     4d8:	f5 cf       	rjmp	.-22     	; 0x4c4 <I2C_read_bytes+0x30>
     4da:	01 34       	cpi	r16, 0x41	; 65
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <I2C_read_bytes+0x4c>
     4de:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     4e0:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     4e2:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     4e6:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     4e8:	40 f0       	brcs	.+16     	; 0x4fa <I2C_read_bytes+0x66>
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	ce 01       	movw	r24, r28
     4ee:	68 df       	rcall	.-304    	; 0x3c0 <I2C_read>
		if (status != 0) goto error;
     4f0:	81 11       	cpse	r24, r1
     4f2:	0b c0       	rjmp	.+22     	; 0x50a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     4f8:	f6 cf       	rjmp	.-20     	; 0x4e6 <I2C_read_bytes+0x52>
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     4fe:	60 df       	rcall	.-320    	; 0x3c0 <I2C_read>
     500:	81 11       	cpse	r24, r1
	I2C_stop();
     502:	03 c0       	rjmp	.+6      	; 0x50a <I2C_read_bytes+0x76>
     504:	c1 df       	rcall	.-126    	; 0x488 <I2C_stop>
	return 0;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     50a:	e4 de       	rcall	.-568    	; 0x2d4 <I2C_recover>
     50c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     50e:	df 91       	pop	r29
}
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	08 95       	ret

0000051e <LanyardCode>:
     51e:	8b e7       	ldi	r24, 0x7B	; 123
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
    if (CheckState(LANYARD_COMPLETED)) {
     520:	4e d7       	rcall	.+3740   	; 0x13be <CheckState>
     522:	81 11       	cpse	r24, r1
     524:	d9 c0       	rjmp	.+434    	; 0x6d8 <LanyardCode+0x1ba>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     526:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <gameNow>
     52a:	88 23       	and	r24, r24
     52c:	19 f0       	breq	.+6      	; 0x534 <LanyardCode+0x16>
     52e:	83 30       	cpi	r24, 0x03	; 3
     530:	09 f0       	breq	.+2      	; 0x534 <LanyardCode+0x16>
     532:	d2 c0       	rjmp	.+420    	; 0x6d8 <LanyardCode+0x1ba>
        return 0;

    /* activate led for buttonstate */
    //iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);

    if ( (buttonState & 0xf0) == 0)
     534:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     538:	98 2f       	mov	r25, r24
     53a:	90 7f       	andi	r25, 0xF0	; 240
     53c:	09 f4       	brne	.+2      	; 0x540 <LanyardCode+0x22>
     53e:	cc c0       	rjmp	.+408    	; 0x6d8 <LanyardCode+0x1ba>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     540:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <lastButtonState>
     544:	98 2f       	mov	r25, r24
     546:	92 27       	eor	r25, r18
     548:	9f 70       	andi	r25, 0x0F	; 15
     54a:	09 f4       	brne	.+2      	; 0x54e <LanyardCode+0x30>
     54c:	c5 c0       	rjmp	.+394    	; 0x6d8 <LanyardCode+0x1ba>
        return 0;

    if (lastButtonState == 0xff){
     54e:	2f 3f       	cpi	r18, 0xFF	; 255
     550:	09 f0       	breq	.+2      	; 0x554 <LanyardCode+0x36>
     552:	be c0       	rjmp	.+380    	; 0x6d0 <LanyardCode+0x1b2>
        switch (buttonState & 0x0f) {
     554:	8f 70       	andi	r24, 0x0F	; 15
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	61 f0       	breq	.+24     	; 0x572 <LanyardCode+0x54>
     55a:	28 f4       	brcc	.+10     	; 0x566 <LanyardCode+0x48>
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	69 f4       	brne	.+26     	; 0x57a <LanyardCode+0x5c>
            case 0b0001: {
                digit = 0;
     560:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <digit>
                break;
     564:	0d c0       	rjmp	.+26     	; 0x580 <LanyardCode+0x62>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     566:	84 30       	cpi	r24, 0x04	; 4
     568:	31 f0       	breq	.+12     	; 0x576 <LanyardCode+0x58>
     56a:	88 30       	cpi	r24, 0x08	; 8
     56c:	31 f4       	brne	.+12     	; 0x57a <LanyardCode+0x5c>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	05 c0       	rjmp	.+10     	; 0x57c <LanyardCode+0x5e>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	03 c0       	rjmp	.+6      	; 0x57c <LanyardCode+0x5e>
                break;
            }

            case 0b0100: {
                digit = 3;
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	01 c0       	rjmp	.+2      	; 0x57c <LanyardCode+0x5e>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <digit>
                break;
            }
        }
        gameNow = LANYARD;
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     586:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <lanyardPos>
     58a:	e8 2f       	mov	r30, r24
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	ec 5d       	subi	r30, 0xDC	; 220
     590:	f6 44       	sbci	r31, 0x46	; 70
     592:	20 81       	ld	r18, Z
     594:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <digit>
     598:	e0 91 3c b9 	lds	r30, 0xB93C	; 0x80b93c <__bss_end+0x7e30>
     59c:	29 13       	cpse	r18, r25
     59e:	17 c0       	rjmp	.+46     	; 0x5ce <LanyardCode+0xb0>
            lanyardState &= TRUE;
     5a0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     5a4:	91 70       	andi	r25, 0x01	; 1
     5a6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <lanyardState>
            iLED[CAT]       = 128;
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	e4 54       	subi	r30, 0x44	; 68
     5ae:	f5 4c       	sbci	r31, 0xC5	; 197
     5b0:	90 e8       	ldi	r25, 0x80	; 128
     5b2:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     5b4:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	e4 54       	subi	r30, 0x44	; 68
     5bc:	f5 4c       	sbci	r31, 0xC5	; 197
     5be:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     5c0:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	e4 54       	subi	r30, 0x44	; 68
     5c8:	f5 4c       	sbci	r31, 0xC5	; 197
     5ca:	10 82       	st	Z, r1
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <LanyardCode+0xd6>
        } else {
            lanyardState = FALSE;
     5ce:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <lanyardState>
            iLED[CAT]       = 0;
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	e4 54       	subi	r30, 0x44	; 68
     5d6:	f5 4c       	sbci	r31, 0xC5	; 197
     5d8:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     5da:	84 30       	cpi	r24, 0x04	; 4
     5dc:	58 f4       	brcc	.+22     	; 0x5f4 <LanyardCode+0xd6>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     5de:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <gameNow>
                lanyardPos      = 0;
     5e2:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <lanyardPos>
                lanyardCnt      = 0;
     5e6:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <lanyardCnt>
                lanyardState    = TRUE;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <lanyardState>
                lastButtonState = 0xff;
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	70 c0       	rjmp	.+224    	; 0x6d4 <LanyardCode+0x1b6>
                return 0;
            }
        }
        lanyardPos++;
     5f4:	8f 5f       	subi	r24, 0xFF	; 255
     5f6:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <lanyardPos>
        lanyardCnt++;            
     5fa:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <lanyardCnt>
     5fe:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     600:	94 30       	cpi	r25, 0x04	; 4
     602:	18 f4       	brcc	.+6      	; 0x60a <LanyardCode+0xec>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     604:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <lanyardCnt>
     608:	63 c0       	rjmp	.+198    	; 0x6d0 <LanyardCode+0x1b2>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     60a:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <lanyardCnt>
            if (lanyardState == TRUE) {
     60e:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     612:	91 30       	cpi	r25, 0x01	; 1
     614:	79 f5       	brne	.+94     	; 0x674 <LanyardCode+0x156>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     616:	e8 2f       	mov	r30, r24
     618:	e6 95       	lsr	r30
     61a:	e6 95       	lsr	r30
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	e2 5b       	subi	r30, 0xB2	; 178
     620:	f6 44       	sbci	r31, 0x46	; 70
     622:	e5 81       	ldd	r30, Z+5	; 0x05
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     62a:	e4 54       	subi	r30, 0x44	; 68
     62c:	f5 4c       	sbci	r31, 0xC5	; 197
     62e:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     630:	88 31       	cpi	r24, 0x18	; 24
     632:	09 f0       	breq	.+2      	; 0x636 <LanyardCode+0x118>
     634:	4d c0       	rjmp	.+154    	; 0x6d0 <LanyardCode+0x1b2>
                    UpdateState(LANYARD_COMPLETED);
     636:	8b e7       	ldi	r24, 0x7B	; 123
     638:	b8 d6       	rcall	.+3440   	; 0x13aa <UpdateState>
                    //iLED[SCARAB[G]] = 0;
                    iLED[EYE[R][L]] = 0;
     63a:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	e4 54       	subi	r30, 0x44	; 68
     642:	f5 4c       	sbci	r31, 0xC5	; 197
     644:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     646:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	e4 54       	subi	r30, 0x44	; 68
     64e:	f5 4c       	sbci	r31, 0xC5	; 197
     650:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     652:	e0 91 4d b9 	lds	r30, 0xB94D	; 0x80b94d <__bss_end+0x7e41>
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     65c:	e4 54       	subi	r30, 0x44	; 68
     65e:	f5 4c       	sbci	r31, 0xC5	; 197
     660:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     662:	e0 91 4c b9 	lds	r30, 0xB94C	; 0x80b94c <__bss_end+0x7e40>
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     66c:	e4 54       	subi	r30, 0x44	; 68
     66e:	f5 4c       	sbci	r31, 0xC5	; 197
     670:	80 83       	st	Z, r24
     672:	2e c0       	rjmp	.+92     	; 0x6d0 <LanyardCode+0x1b2>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     674:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <gameNow>
                lanyardPos      = 0;
     678:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <lanyardPos>
                lanyardState    = TRUE;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <lanyardState>
                lastButtonState = 0xff;
                //iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
     682:	e0 91 4d b9 	lds	r30, 0xB94D	; 0x80b94d <__bss_end+0x7e41>
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	e4 54       	subi	r30, 0x44	; 68
     68a:	f5 4c       	sbci	r31, 0xC5	; 197
     68c:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     68e:	e0 91 4c b9 	lds	r30, 0xB94C	; 0x80b94c <__bss_end+0x7e40>
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	e4 54       	subi	r30, 0x44	; 68
     696:	f5 4c       	sbci	r31, 0xC5	; 197
     698:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     69a:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     6a4:	e4 54       	subi	r30, 0x44	; 68
     6a6:	f5 4c       	sbci	r31, 0xC5	; 197
     6a8:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     6aa:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     6b4:	e4 54       	subi	r30, 0x44	; 68
     6b6:	f5 4c       	sbci	r31, 0xC5	; 197
     6b8:	80 83       	st	Z, r24
     6ba:	a4 e5       	ldi	r26, 0x54	; 84
     6bc:	b9 eb       	ldi	r27, 0xB9	; 185
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     6be:	ed 91       	ld	r30, X+
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	e4 54       	subi	r30, 0x44	; 68
     6c4:	f5 4c       	sbci	r31, 0xC5	; 197
     6c6:	10 82       	st	Z, r1
                //iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     6c8:	89 eb       	ldi	r24, 0xB9	; 185
     6ca:	aa 35       	cpi	r26, 0x5A	; 90
     6cc:	b8 07       	cpc	r27, r24
     6ce:	b9 f7       	brne	.-18     	; 0x6be <LanyardCode+0x1a0>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     6d0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     6d4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    return 0;
}
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	08 95       	ret

000006dc <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     6e0:	87 ef       	ldi	r24, 0xF7	; 247
     6e2:	6d d6       	rcall	.+3290   	; 0x13be <CheckState>
     6e4:	81 11       	cpse	r24, r1
     6e6:	3e c1       	rjmp	.+636    	; 0x964 <MagnetMaze+0x288>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     6e8:	8d e7       	ldi	r24, 0x7D	; 125
     6ea:	69 d6       	rcall	.+3282   	; 0x13be <CheckState>
     6ec:	81 11       	cpse	r24, r1
     6ee:	3a c1       	rjmp	.+628    	; 0x964 <MagnetMaze+0x288>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     6f0:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <gameNow>
     6f4:	82 30       	cpi	r24, 0x02	; 2
     6f6:	08 f0       	brcs	.+2      	; 0x6fa <MagnetMaze+0x1e>
     6f8:	35 c1       	rjmp	.+618    	; 0x964 <MagnetMaze+0x288>
        return 0;

    if (calHall == 0)
     6fa:	80 91 e5 3a 	lds	r24, 0x3AE5	; 0x803ae5 <calHall>
     6fe:	90 91 e6 3a 	lds	r25, 0x3AE6	; 0x803ae6 <calHall+0x1>
     702:	89 2b       	or	r24, r25
     704:	41 f4       	brne	.+16     	; 0x716 <MagnetMaze+0x3a>
        calHall = adcHall;
     706:	80 91 ad 3a 	lds	r24, 0x3AAD	; 0x803aad <adcHall>
     70a:	90 91 ae 3a 	lds	r25, 0x3AAE	; 0x803aae <adcHall+0x1>
     70e:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <calHall>
     712:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     716:	80 91 ad 3a 	lds	r24, 0x3AAD	; 0x803aad <adcHall>
     71a:	90 91 ae 3a 	lds	r25, 0x3AAE	; 0x803aae <adcHall+0x1>
     71e:	20 91 e5 3a 	lds	r18, 0x3AE5	; 0x803ae5 <calHall>
     722:	30 91 e6 3a 	lds	r19, 0x3AE6	; 0x803ae6 <calHall+0x1>
     726:	82 1b       	sub	r24, r18
     728:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     72a:	30 91 42 38 	lds	r19, 0x3842	; 0x803842 <curHallState>
     72e:	31 30       	cpi	r19, 0x01	; 1
     730:	89 f0       	breq	.+34     	; 0x754 <MagnetMaze+0x78>
     732:	18 f0       	brcs	.+6      	; 0x73a <MagnetMaze+0x5e>
     734:	32 30       	cpi	r19, 0x02	; 2
     736:	c1 f0       	breq	.+48     	; 0x768 <MagnetMaze+0x8c>
     738:	1f c0       	rjmp	.+62     	; 0x778 <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     73a:	84 3d       	cpi	r24, 0xD4	; 212
     73c:	2e ef       	ldi	r18, 0xFE	; 254
     73e:	92 07       	cpc	r25, r18
     740:	14 f4       	brge	.+4      	; 0x746 <MagnetMaze+0x6a>
                newHallState = 1;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	04 c0       	rjmp	.+8      	; 0x74e <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     746:	8d 32       	cpi	r24, 0x2D	; 45
     748:	91 40       	sbci	r25, 0x01	; 1
     74a:	5c f0       	brlt	.+22     	; 0x762 <MagnetMaze+0x86>
                newHallState = 2;
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <newHallState>
     752:	12 c0       	rjmp	.+36     	; 0x778 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     754:	8d 32       	cpi	r24, 0x2D	; 45
     756:	21 e0       	ldi	r18, 0x01	; 1
     758:	92 07       	cpc	r25, r18
     75a:	c4 f7       	brge	.-16     	; 0x74c <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     75c:	89 38       	cpi	r24, 0x89	; 137
     75e:	9f 4f       	sbci	r25, 0xFF	; 255
     760:	84 f3       	brlt	.-32     	; 0x742 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     762:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <newHallState>
     766:	08 c0       	rjmp	.+16     	; 0x778 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     768:	84 3d       	cpi	r24, 0xD4	; 212
     76a:	2e ef       	ldi	r18, 0xFE	; 254
     76c:	92 07       	cpc	r25, r18
     76e:	4c f3       	brlt	.-46     	; 0x742 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     770:	88 37       	cpi	r24, 0x78	; 120
     772:	91 05       	cpc	r25, r1
     774:	b4 f3       	brlt	.-20     	; 0x762 <MagnetMaze+0x86>
     776:	ea cf       	rjmp	.-44     	; 0x74c <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     778:	c0 91 3f b9 	lds	r28, 0xB93F	; 0x80b93f <__bss_end+0x7e33>
     77c:	ec 2f       	mov	r30, r28
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <newHallState>
     784:	88 23       	and	r24, r24
     786:	19 f0       	breq	.+6      	; 0x78e <MagnetMaze+0xb2>
     788:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     78c:	01 c0       	rjmp	.+2      	; 0x790 <MagnetMaze+0xb4>
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	e4 54       	subi	r30, 0x44	; 68
     792:	f5 4c       	sbci	r31, 0xC5	; 197
     794:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     796:	88 23       	and	r24, r24
     798:	59 f0       	breq	.+22     	; 0x7b0 <MagnetMaze+0xd4>
     79a:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <mazePos>
     79e:	21 11       	cpse	r18, r1
     7a0:	3d c0       	rjmp	.+122    	; 0x81c <MagnetMaze+0x140>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	09 f4       	brne	.+2      	; 0x7aa <MagnetMaze+0xce>
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	90 93 3e 38 	sts	0x383E, r25	; 0x80383e <inverted>
     7ae:	36 c0       	rjmp	.+108    	; 0x81c <MagnetMaze+0x140>

    if (newHallState != curHallState) {
     7b0:	33 23       	and	r19, r19
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <MagnetMaze+0xda>
     7b4:	d7 c0       	rjmp	.+430    	; 0x964 <MagnetMaze+0x288>
        curHallState = newHallState;
     7b6:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     7ba:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <mazePos>
     7be:	82 31       	cpi	r24, 0x12	; 18
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <MagnetMaze+0xe8>
     7c2:	d0 c0       	rjmp	.+416    	; 0x964 <MagnetMaze+0x288>
                gameNow   = TEXT;
     7c4:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <gameNow>
                mazePos   = 0;
     7c8:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <mazePos>
                mazeState = TRUE;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
                iLED[SCARAB[G]]    = 0;
     7d2:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     7d4:	e0 91 4d b9 	lds	r30, 0xB94D	; 0x80b94d <__bss_end+0x7e41>
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	e4 54       	subi	r30, 0x44	; 68
     7dc:	f5 4c       	sbci	r31, 0xC5	; 197
     7de:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     7e0:	e0 91 4c b9 	lds	r30, 0xB94C	; 0x80b94c <__bss_end+0x7e40>
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	e4 54       	subi	r30, 0x44	; 68
     7e8:	f5 4c       	sbci	r31, 0xC5	; 197
     7ea:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     7ec:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	e4 54       	subi	r30, 0x44	; 68
     7f4:	f5 4c       	sbci	r31, 0xC5	; 197
     7f6:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     7f8:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	e4 54       	subi	r30, 0x44	; 68
     800:	f5 4c       	sbci	r31, 0xC5	; 197
     802:	10 82       	st	Z, r1
     804:	a4 e5       	ldi	r26, 0x54	; 84
     806:	b9 eb       	ldi	r27, 0xB9	; 185
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     808:	ed 91       	ld	r30, X+
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	e4 54       	subi	r30, 0x44	; 68
     80e:	f5 4c       	sbci	r31, 0xC5	; 197
     810:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     812:	29 eb       	ldi	r18, 0xB9	; 185
     814:	aa 35       	cpi	r26, 0x5A	; 90
     816:	b2 07       	cpc	r27, r18
     818:	b9 f7       	brne	.-18     	; 0x808 <MagnetMaze+0x12c>
     81a:	a4 c0       	rjmp	.+328    	; 0x964 <MagnetMaze+0x288>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     81c:	38 17       	cp	r19, r24
     81e:	09 f4       	brne	.+2      	; 0x822 <MagnetMaze+0x146>
     820:	a1 c0       	rjmp	.+322    	; 0x964 <MagnetMaze+0x288>
        curHallState = newHallState;
     822:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     82c:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <inverted>
     830:	99 23       	and	r25, r25
     832:	11 f0       	breq	.+4      	; 0x838 <MagnetMaze+0x15c>
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	89 27       	eor	r24, r25
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	e2 2f       	mov	r30, r18
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	e6 5a       	subi	r30, 0xA6	; 166
     840:	f6 44       	sbci	r31, 0x46	; 70
     842:	40 81       	ld	r20, Z
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	84 17       	cp	r24, r20
     848:	95 07       	cpc	r25, r21
     84a:	91 f4       	brne	.+36     	; 0x870 <MagnetMaze+0x194>
                mazeState &= TRUE;
     84c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <mazeState>
     850:	81 70       	andi	r24, 0x01	; 1
     852:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
                iLED[EYE[R][L]] = 0;
     856:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	e4 54       	subi	r30, 0x44	; 68
     85e:	f5 4c       	sbci	r31, 0xC5	; 197
     860:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     862:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	e4 54       	subi	r30, 0x44	; 68
     86a:	f5 4c       	sbci	r31, 0xC5	; 197
     86c:	10 82       	st	Z, r1
     86e:	02 c0       	rjmp	.+4      	; 0x874 <MagnetMaze+0x198>
            } else {
                mazeState = FALSE;
     870:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	20 93 40 38 	sts	0x3840, r18	; 0x803840 <mazePos>
            mazeCnt++;            
     87a:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <mazeCnt>
     87e:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     880:	83 30       	cpi	r24, 0x03	; 3
     882:	18 f4       	brcc	.+6      	; 0x88a <MagnetMaze+0x1ae>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     884:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <mazeCnt>
     888:	6d c0       	rjmp	.+218    	; 0x964 <MagnetMaze+0x288>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     88a:	10 92 3f 38 	sts	0x383F, r1	; 0x80383f <mazeCnt>
                if (mazeState == TRUE) {
     88e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <mazeState>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	a9 f5       	brne	.+106    	; 0x900 <MagnetMaze+0x224>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     896:	eb ea       	ldi	r30, 0xAB	; 171
     898:	2e 9f       	mul	r18, r30
     89a:	e1 2d       	mov	r30, r1
     89c:	11 24       	eor	r1, r1
     89e:	e6 95       	lsr	r30
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	e2 5b       	subi	r30, 0xB2	; 178
     8a4:	f6 44       	sbci	r31, 0x46	; 70
     8a6:	e5 81       	ldd	r30, Z+5	; 0x05
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     8ae:	e4 54       	subi	r30, 0x44	; 68
     8b0:	f5 4c       	sbci	r31, 0xC5	; 197
     8b2:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     8b4:	22 31       	cpi	r18, 0x12	; 18
     8b6:	09 f0       	breq	.+2      	; 0x8ba <MagnetMaze+0x1de>
                        UpdateState(MAZE_COMPLETED);
     8b8:	55 c0       	rjmp	.+170    	; 0x964 <MagnetMaze+0x288>
     8ba:	8d e7       	ldi	r24, 0x7D	; 125
     8bc:	76 d5       	rcall	.+2796   	; 0x13aa <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     8be:	d0 e0       	ldi	r29, 0x00	; 0
     8c0:	c4 54       	subi	r28, 0x44	; 68
     8c2:	d5 4c       	sbci	r29, 0xC5	; 197
     8c4:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     8c6:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	e4 54       	subi	r30, 0x44	; 68
     8ce:	f5 4c       	sbci	r31, 0xC5	; 197
     8d0:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     8d2:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	e4 54       	subi	r30, 0x44	; 68
     8da:	f5 4c       	sbci	r31, 0xC5	; 197
     8dc:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     8de:	e0 91 4d b9 	lds	r30, 0xB94D	; 0x80b94d <__bss_end+0x7e41>
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     8e8:	e4 54       	subi	r30, 0x44	; 68
     8ea:	f5 4c       	sbci	r31, 0xC5	; 197
     8ec:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     8ee:	e0 91 4c b9 	lds	r30, 0xB94C	; 0x80b94c <__bss_end+0x7e40>
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     8f8:	e4 54       	subi	r30, 0x44	; 68
     8fa:	f5 4c       	sbci	r31, 0xC5	; 197
     8fc:	80 83       	st	Z, r24
     8fe:	32 c0       	rjmp	.+100    	; 0x964 <MagnetMaze+0x288>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     900:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <gameNow>
                    mazePos   = 0;
     904:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <mazePos>
                    mazeState = TRUE;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
                    iLED[SCARAB[G]]    = 0;
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	c4 54       	subi	r28, 0x44	; 68
     912:	d5 4c       	sbci	r29, 0xC5	; 197
     914:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     916:	e0 91 4d b9 	lds	r30, 0xB94D	; 0x80b94d <__bss_end+0x7e41>
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	e4 54       	subi	r30, 0x44	; 68
     91e:	f5 4c       	sbci	r31, 0xC5	; 197
     920:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     922:	e0 91 4c b9 	lds	r30, 0xB94C	; 0x80b94c <__bss_end+0x7e40>
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	e4 54       	subi	r30, 0x44	; 68
     92a:	f5 4c       	sbci	r31, 0xC5	; 197
     92c:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     92e:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     938:	e4 54       	subi	r30, 0x44	; 68
     93a:	f5 4c       	sbci	r31, 0xC5	; 197
     93c:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     93e:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     948:	e4 54       	subi	r30, 0x44	; 68
     94a:	f5 4c       	sbci	r31, 0xC5	; 197
     94c:	80 83       	st	Z, r24
     94e:	a4 e5       	ldi	r26, 0x54	; 84
     950:	b9 eb       	ldi	r27, 0xB9	; 185
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     952:	ed 91       	ld	r30, X+
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	e4 54       	subi	r30, 0x44	; 68
     958:	f5 4c       	sbci	r31, 0xC5	; 197
     95a:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     95c:	89 eb       	ldi	r24, 0xB9	; 185
     95e:	aa 35       	cpi	r26, 0x5A	; 90
     960:	b8 07       	cpc	r27, r24
     962:	b9 f7       	brne	.-18     	; 0x952 <MagnetMaze+0x276>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <Setup>:
    ++test;

    for (uint8_t x=0; x<5; ++x){
        iLED[WING[R][x]] = iLED[WING[L][4-x]];
    }
}
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	f8 94       	cli
     972:	88 ed       	ldi	r24, 0xD8	; 216
     974:	84 bf       	out	0x34, r24	; 52
     976:	c1 e0       	ldi	r28, 0x01	; 1
     978:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     97c:	8a e4       	ldi	r24, 0x4A	; 74
     97e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     982:	8c e7       	ldi	r24, 0x7C	; 124
     984:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     988:	9f e3       	ldi	r25, 0x3F	; 63
     98a:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     98e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     992:	80 68       	ori	r24, 0x80	; 128
     994:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     998:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     99c:	80 68       	ori	r24, 0x80	; 128
     99e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9a2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9a6:	80 68       	ori	r24, 0x80	; 128
     9a8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9ac:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9b0:	80 68       	ori	r24, 0x80	; 128
     9b2:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9b6:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9ba:	80 68       	ori	r24, 0x80	; 128
     9bc:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9c0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9c4:	80 68       	ori	r24, 0x80	; 128
     9c6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9ca:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     9ce:	d2 e0       	ldi	r29, 0x02	; 2
     9d0:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     9d4:	2b e5       	ldi	r18, 0x5B	; 91
     9d6:	31 e0       	ldi	r19, 0x01	; 1
     9d8:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     9dc:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     9e0:	80 ea       	ldi	r24, 0xA0	; 160
     9e2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     9e6:	80 ec       	ldi	r24, 0xC0	; 192
     9e8:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     9f2:	1c ba       	out	0x1c, r1	; 28
     9f4:	1d ba       	out	0x1d, r1	; 29
     9f6:	1e ba       	out	0x1e, r1	; 30
     9f8:	1f ba       	out	0x1f, r1	; 31
     9fa:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a04:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     a08:	87 e7       	ldi	r24, 0x77	; 119
     a0a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     a0e:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     a12:	8b e0       	ldi	r24, 0x0B	; 11
     a14:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a18:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a1c:	81 60       	ori	r24, 0x01	; 1
     a1e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a22:	85 e0       	ldi	r24, 0x05	; 5
     a24:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     a28:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a34:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     a38:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a3c:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     a40:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     a44:	8b e8       	ldi	r24, 0x8B	; 139
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a4c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     a50:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     a54:	21 dc       	rcall	.-1982   	; 0x298 <I2C_init>
     a56:	82 e1       	ldi	r24, 0x12	; 18
     a58:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a5c:	80 e2       	ldi	r24, 0x20	; 32
     a5e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a62:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     a66:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a6a:	84 e4       	ldi	r24, 0x44	; 68
     a6c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     a76:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     a7a:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a84:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     a88:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     a8c:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     a90:	82 e5       	ldi	r24, 0x52	; 82
     a92:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     a96:	84 e0       	ldi	r24, 0x04	; 4
     a98:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     a9c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     aa0:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     aa4:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     aae:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     ab2:	80 e4       	ldi	r24, 0x40	; 64
     ab4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ab8:	80 e8       	ldi	r24, 0x80	; 128
     aba:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     abe:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ac8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     acc:	80 fd       	sbrc	r24, 0
     ace:	fc cf       	rjmp	.-8      	; 0xac8 <Setup+0x15c>
     ad0:	80 e3       	ldi	r24, 0x30	; 48
     ad2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     ad6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     ada:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ade:	82 fd       	sbrc	r24, 2
     ae0:	fc cf       	rjmp	.-8      	; 0xada <Setup+0x16e>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	98 e7       	ldi	r25, 0x78	; 120
     ae6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     aea:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     aee:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     af2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     af6:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     afa:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     afe:	82 96       	adiw	r24, 0x22	; 34
     b00:	0e 94 3f 1c 	call	0x387e	; 0x387e <__udivmodhi4>
     b04:	80 93 e9 3a 	sts	0x3AE9, r24	; 0x803ae9 <tmp16bit>
     b08:	90 93 ea 3a 	sts	0x3AEA, r25	; 0x803aea <tmp16bit+0x1>
     b0c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b10:	83 fd       	sbrc	r24, 3
     b12:	fc cf       	rjmp	.-8      	; 0xb0c <Setup+0x1a0>
     b14:	80 91 e9 3a 	lds	r24, 0x3AE9	; 0x803ae9 <tmp16bit>
     b18:	90 91 ea 3a 	lds	r25, 0x3AEA	; 0x803aea <tmp16bit+0x1>
     b1c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b20:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     b30:	88 e0       	ldi	r24, 0x08	; 8
     b32:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b36:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b3a:	80 fd       	sbrc	r24, 0
     b3c:	fc cf       	rjmp	.-8      	; 0xb36 <Setup+0x1ca>
     b3e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b48:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b4c:	81 60       	ori	r24, 0x01	; 1
     b4e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b52:	10 92 67 3a 	sts	0x3A67, r1	; 0x803a67 <serRx>
     b56:	87 e6       	ldi	r24, 0x67	; 103
     b58:	9a e3       	ldi	r25, 0x3A	; 58
     b5a:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <serTxAddr>
     b5e:	90 93 ac 3a 	sts	0x3AAC, r25	; 0x803aac <serTxAddr+0x1>
     b62:	78 94       	sei
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <__vector_8>:
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	87 e0       	ldi	r24, 0x07	; 7
     b82:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     b86:	84 e4       	ldi	r24, 0x44	; 68
     b88:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     b8c:	ec b3       	in	r30, 0x1c	; 28
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	e8 9f       	mul	r30, r24
     b92:	f0 01       	movw	r30, r0
     b94:	11 24       	eor	r1, r1
     b96:	e4 54       	subi	r30, 0x44	; 68
     b98:	f5 4c       	sbci	r31, 0xC5	; 197
     b9a:	a8 e2       	ldi	r26, 0x28	; 40
     b9c:	ba e0       	ldi	r27, 0x0A	; 10
     b9e:	96 e0       	ldi	r25, 0x06	; 6
     ba0:	81 91       	ld	r24, Z+
     ba2:	8d 93       	st	X+, r24
     ba4:	9a 95       	dec	r25
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <__vector_8+0x36>
     ba8:	8b e0       	ldi	r24, 0x0B	; 11
     baa:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     bae:	8c b3       	in	r24, 0x1c	; 28
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	58 f4       	brcc	.+22     	; 0xbca <__vector_8+0x60>
     bb4:	8c b3       	in	r24, 0x1c	; 28
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <__vector_8+0x52>
     bba:	99 0f       	add	r25, r25
     bbc:	8a 95       	dec	r24
     bbe:	ea f7       	brpl	.-6      	; 0xbba <__vector_8+0x50>
     bc0:	99 b9       	out	0x09, r25	; 9
     bc2:	8c b3       	in	r24, 0x1c	; 28
     bc4:	83 95       	inc	r24
     bc6:	8c bb       	out	0x1c, r24	; 28
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <__vector_8+0x74>
     bca:	8c b3       	in	r24, 0x1c	; 28
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	21 f4       	brne	.+8      	; 0xbd8 <__vector_8+0x6e>
     bd0:	2a 9a       	sbi	0x05, 2	; 5
     bd2:	83 95       	inc	r24
     bd4:	8c bb       	out	0x1c, r24	; 28
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <__vector_8+0x74>
     bd8:	2e 9a       	sbi	0x05, 6	; 5
     bda:	88 27       	eor	r24, r24
     bdc:	8c bb       	out	0x1c, r24	; 28
     bde:	80 91 52 3a 	lds	r24, 0x3A52	; 0x803a52 <timeout_I2C>
     be2:	88 23       	and	r24, r24
     be4:	29 f0       	breq	.+10     	; 0xbf0 <__vector_8+0x86>
     be6:	80 91 52 3a 	lds	r24, 0x3A52	; 0x803a52 <timeout_I2C>
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	80 93 52 3a 	sts	0x3A52, r24	; 0x803a52 <timeout_I2C>
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     bf6:	ff 91       	pop	r31
     bf8:	ef 91       	pop	r30
     bfa:	bf 91       	pop	r27
     bfc:	af 91       	pop	r26
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_13>:
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	e0 91 ab 3a 	lds	r30, 0x3AAB	; 0x803aab <serTxAddr>
     c22:	f0 91 ac 3a 	lds	r31, 0x3AAC	; 0x803aac <serTxAddr+0x1>
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	91 f0       	breq	.+36     	; 0xc50 <__vector_13+0x44>
     c2c:	80 81       	ld	r24, Z
     c2e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     c32:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serTxAddr>
     c36:	90 91 ac 3a 	lds	r25, 0x3AAC	; 0x803aac <serTxAddr+0x1>
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <serTxAddr>
     c40:	90 93 ac 3a 	sts	0x3AAC, r25	; 0x803aac <serTxAddr+0x1>
     c44:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c48:	80 62       	ori	r24, 0x20	; 32
     c4a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__vector_13+0x4e>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <serTxDone>
     c56:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <__vector_14>:
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	2f 93       	push	r18
     c7e:	3f 93       	push	r19
     c80:	4f 93       	push	r20
     c82:	8f 93       	push	r24
     c84:	9f 93       	push	r25
     c86:	ef 93       	push	r30
     c88:	ff 93       	push	r31
     c8a:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     c8e:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     c92:	80 81       	ld	r24, Z
     c94:	81 11       	cpse	r24, r1
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <__vector_14+0x36>
     c98:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auRepAddr>
     c9c:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auRepAddr+0x1>
     ca0:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     ca4:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
     ca8:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     cac:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     cb0:	80 81       	ld	r24, Z
     cb2:	88 23       	and	r24, r24
     cb4:	e1 f0       	breq	.+56     	; 0xcee <__vector_14+0x7c>
     cb6:	20 81       	ld	r18, Z
     cb8:	40 91 a8 3a 	lds	r20, 0x3AA8	; 0x803aa8 <auVolume>
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	2f 57       	subi	r18, 0x7F	; 127
     cc0:	31 09       	sbc	r19, r1
     cc2:	42 9f       	mul	r20, r18
     cc4:	c0 01       	movw	r24, r0
     cc6:	43 9f       	mul	r20, r19
     cc8:	90 0d       	add	r25, r0
     cca:	11 24       	eor	r1, r1
     ccc:	89 2f       	mov	r24, r25
     cce:	99 0f       	add	r25, r25
     cd0:	99 0b       	sbc	r25, r25
     cd2:	80 58       	subi	r24, 0x80	; 128
     cd4:	9f 4f       	sbci	r25, 0xFF	; 255
     cd6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     cda:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <auSmpAddr>
     cde:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <auSmpAddr+0x1>
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     ce8:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <__vector_14+0x88>
     cee:	80 e8       	ldi	r24, 0x80	; 128
     cf0:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	80 93 e4 3a 	sts	0x3AE4, r24	; 0x803ae4 <auPlayDone>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_27>:
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	8f 93       	push	r24
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
     d28:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <serRxDone>
     d2c:	81 11       	cpse	r24, r1
     d2e:	44 c0       	rjmp	.+136    	; 0xdb8 <__vector_27+0xa0>
     d30:	ed b3       	in	r30, 0x1d	; 29
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d38:	e9 59       	subi	r30, 0x99	; 153
     d3a:	f5 4c       	sbci	r31, 0xC5	; 197
     d3c:	80 83       	st	Z, r24
     d3e:	ed b3       	in	r30, 0x1d	; 29
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	e9 59       	subi	r30, 0x99	; 153
     d44:	f5 4c       	sbci	r31, 0xC5	; 197
     d46:	80 81       	ld	r24, Z
     d48:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     d4c:	ed b3       	in	r30, 0x1d	; 29
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	e9 59       	subi	r30, 0x99	; 153
     d52:	f5 4c       	sbci	r31, 0xC5	; 197
     d54:	80 81       	ld	r24, Z
     d56:	8a 30       	cpi	r24, 0x0A	; 10
     d58:	39 f0       	breq	.+14     	; 0xd68 <__vector_27+0x50>
     d5a:	ed b3       	in	r30, 0x1d	; 29
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	e9 59       	subi	r30, 0x99	; 153
     d60:	f5 4c       	sbci	r31, 0xC5	; 197
     d62:	80 81       	ld	r24, Z
     d64:	8d 30       	cpi	r24, 0x0D	; 13
     d66:	49 f4       	brne	.+18     	; 0xd7a <__vector_27+0x62>
     d68:	ed b3       	in	r30, 0x1d	; 29
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	e9 59       	subi	r30, 0x99	; 153
     d6e:	f5 4c       	sbci	r31, 0xC5	; 197
     d70:	10 82       	st	Z, r1
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <serRxDone>
     d78:	1f c0       	rjmp	.+62     	; 0xdb8 <__vector_27+0xa0>
     d7a:	ed b3       	in	r30, 0x1d	; 29
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	e9 59       	subi	r30, 0x99	; 153
     d80:	f5 4c       	sbci	r31, 0xC5	; 197
     d82:	80 81       	ld	r24, Z
     d84:	88 30       	cpi	r24, 0x08	; 8
     d86:	39 f0       	breq	.+14     	; 0xd96 <__vector_27+0x7e>
     d88:	ed b3       	in	r30, 0x1d	; 29
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	e9 59       	subi	r30, 0x99	; 153
     d8e:	f5 4c       	sbci	r31, 0xC5	; 197
     d90:	80 81       	ld	r24, Z
     d92:	8f 37       	cpi	r24, 0x7F	; 127
     d94:	59 f4       	brne	.+22     	; 0xdac <__vector_27+0x94>
     d96:	8d b3       	in	r24, 0x1d	; 29
     d98:	88 23       	and	r24, r24
     d9a:	41 f0       	breq	.+16     	; 0xdac <__vector_27+0x94>
     d9c:	ed b3       	in	r30, 0x1d	; 29
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	e9 59       	subi	r30, 0x99	; 153
     da2:	f5 4c       	sbci	r31, 0xC5	; 197
     da4:	10 82       	st	Z, r1
     da6:	8d b3       	in	r24, 0x1d	; 29
     da8:	81 50       	subi	r24, 0x01	; 1
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <__vector_27+0x9e>
     dac:	8d b3       	in	r24, 0x1d	; 29
     dae:	80 34       	cpi	r24, 0x40	; 64
     db0:	18 f4       	brcc	.+6      	; 0xdb8 <__vector_27+0xa0>
     db2:	8d b3       	in	r24, 0x1d	; 29
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	8d bb       	out	0x1d, r24	; 29
     db8:	80 e8       	ldi	r24, 0x80	; 128
     dba:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	8f 91       	pop	r24
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_28>:
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	8f 93       	push	r24
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
     dde:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     de2:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     dec:	e5 e0       	ldi	r30, 0x05	; 5
     dee:	f8 e0       	ldi	r31, 0x08	; 8
     df0:	80 81       	ld	r24, Z
     df2:	8f 7d       	andi	r24, 0xDF	; 223
     df4:	80 83       	st	Z, r24
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	8f 91       	pop	r24
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_20>:
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
     e18:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <adc0Chg>
     e1c:	81 11       	cpse	r24, r1
     e1e:	19 c0       	rjmp	.+50     	; 0xe52 <__vector_20+0x4c>
     e20:	8e b3       	in	r24, 0x1e	; 30
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	87 70       	andi	r24, 0x07	; 7
     e26:	8e bb       	out	0x1e, r24	; 30
     e28:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e2c:	8e 31       	cpi	r24, 0x1E	; 30
     e2e:	49 f4       	brne	.+18     	; 0xe42 <__vector_20+0x3c>
     e30:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e34:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e38:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <adcTemp>
     e3c:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <adcTemp+0x1>
     e40:	0d c0       	rjmp	.+26     	; 0xe5c <__vector_20+0x56>
     e42:	ee b3       	in	r30, 0x1e	; 30
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e4a:	ec 54       	subi	r30, 0x4C	; 76
     e4c:	f5 4c       	sbci	r31, 0xC5	; 197
     e4e:	80 83       	st	Z, r24
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <__vector_20+0x56>
     e52:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <adc0Chg>
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <adc0Chg>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti

00000e74 <__vector_22>:
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e86:	81 11       	cpse	r24, r1
     e88:	0a c0       	rjmp	.+20     	; 0xe9e <__vector_22+0x2a>
     e8a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     e8e:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     e92:	80 93 af 3a 	sts	0x3AAF, r24	; 0x803aaf <adcPhot>
     e96:	90 93 b0 3a 	sts	0x3AB0, r25	; 0x803ab0 <adcPhot+0x1>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <__vector_22+0x4a>
     e9e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	79 f4       	brne	.+30     	; 0xec4 <__vector_22+0x50>
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     eac:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     eb0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     eb4:	80 93 ad 3a 	sts	0x3AAD, r24	; 0x803aad <adcHall>
     eb8:	90 93 ae 3a 	sts	0x3AAE, r25	; 0x803aae <adcHall+0x1>
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ec2:	10 c0       	rjmp	.+32     	; 0xee4 <__vector_22+0x70>
     ec4:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ec8:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ecc:	80 93 a9 3a 	sts	0x3AA9, r24	; 0x803aa9 <adcBtns>
     ed0:	90 93 aa 3a 	sts	0x3AAA, r25	; 0x803aaa <adcBtns+0x1>
     ed4:	8f b3       	in	r24, 0x1f	; 31
     ed6:	8f 30       	cpi	r24, 0x0F	; 15
     ed8:	29 f4       	brne	.+10     	; 0xee4 <__vector_22+0x70>
     eda:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ede:	88 e0       	ldi	r24, 0x08	; 8
     ee0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     ee4:	8f b3       	in	r24, 0x1f	; 31
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	8f 70       	andi	r24, 0x0F	; 15
     eec:	99 27       	eor	r25, r25
     eee:	8f bb       	out	0x1f, r24	; 31
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <__vector_6>:
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f20:	81 ff       	sbrs	r24, 1
     f22:	26 c0       	rjmp	.+76     	; 0xf70 <__vector_6+0x6c>
     f24:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <buttonMark>
     f28:	8f 3f       	cpi	r24, 0xFF	; 255
     f2a:	29 f0       	breq	.+10     	; 0xf36 <__vector_6+0x32>
     f2c:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <buttonMark>
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <buttonMark>
     f36:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f3a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f3e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f42:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f46:	82 96       	adiw	r24, 0x22	; 34
     f48:	0e 94 3f 1c 	call	0x387e	; 0x387e <__udivmodhi4>
     f4c:	80 93 e9 3a 	sts	0x3AE9, r24	; 0x803ae9 <tmp16bit>
     f50:	90 93 ea 3a 	sts	0x3AEA, r25	; 0x803aea <tmp16bit+0x1>
     f54:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f58:	83 fd       	sbrc	r24, 3
     f5a:	fc cf       	rjmp	.-8      	; 0xf54 <__vector_6+0x50>
     f5c:	80 91 e9 3a 	lds	r24, 0x3AE9	; 0x803ae9 <tmp16bit>
     f60:	90 91 ea 3a 	lds	r25, 0x3AEA	; 0x803aea <tmp16bit+0x1>
     f64:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     f68:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <__vector_6+0x78>
     f70:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <minuteMark>
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <minuteMark>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_7>:
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	8f 93       	push	r24
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     faa:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     fae:	8f 91       	pop	r24
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <EERead>:
     fba:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     fbe:	91 fd       	sbrc	r25, 1
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <EERead>
     fc2:	fb 01       	movw	r30, r22
     fc4:	48 0f       	add	r20, r24
     fc6:	84 17       	cp	r24, r20
     fc8:	39 f0       	breq	.+14     	; 0xfd8 <EERead+0x1e>
     fca:	a8 2f       	mov	r26, r24
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	bc 5e       	subi	r27, 0xEC	; 236
     fd0:	9c 91       	ld	r25, X
     fd2:	91 93       	st	Z+, r25
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	f7 cf       	rjmp	.-18     	; 0xfc6 <EERead+0xc>
     fd8:	08 95       	ret

00000fda <EEWrite>:
     fda:	9d e9       	ldi	r25, 0x9D	; 157
     fdc:	24 e0       	ldi	r18, 0x04	; 4
     fde:	33 e0       	ldi	r19, 0x03	; 3
     fe0:	44 23       	and	r20, r20
     fe2:	09 f1       	breq	.+66     	; 0x1026 <EEWrite+0x4c>
     fe4:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     fe8:	51 fd       	sbrc	r21, 1
     fea:	fc cf       	rjmp	.-8      	; 0xfe4 <EEWrite+0xa>
     fec:	94 bf       	out	0x34, r25	; 52
     fee:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     ff2:	e8 2f       	mov	r30, r24
     ff4:	58 2f       	mov	r21, r24
     ff6:	5f 71       	andi	r21, 0x1F	; 31
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	db 01       	movw	r26, r22
    1000:	11 97       	sbiw	r26, 0x01	; 1
    1002:	ac 91       	ld	r26, X
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	fc 5e       	subi	r31, 0xEC	; 236
    1008:	a0 83       	st	Z, r26
    100a:	41 50       	subi	r20, 0x01	; 1
    100c:	19 f0       	breq	.+6      	; 0x1014 <EEWrite+0x3a>
    100e:	e8 2f       	mov	r30, r24
    1010:	5f 31       	cpi	r21, 0x1F	; 31
    1012:	81 f7       	brne	.-32     	; 0xff4 <EEWrite+0x1a>
    1014:	94 bf       	out	0x34, r25	; 52
    1016:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    101a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    101e:	52 ff       	sbrs	r21, 2
    1020:	df cf       	rjmp	.-66     	; 0xfe0 <EEWrite+0x6>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	08 95       	ret
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret

0000102a <SerSend>:
    102a:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <serTxDone>
    102e:	22 23       	and	r18, r18
    1030:	59 f0       	breq	.+22     	; 0x1048 <SerSend+0x1e>
    1032:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <serTxAddr>
    1036:	90 93 ac 3a 	sts	0x3AAC, r25	; 0x803aac <serTxAddr+0x1>
    103a:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <serTxDone>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	08 95       	ret

0000104c <SerSpeed>:
    104c:	28 2f       	mov	r18, r24
    104e:	81 11       	cpse	r24, r1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <SerSpeed+0x8>
    1052:	21 e0       	ldi	r18, 0x01	; 1
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	82 1b       	sub	r24, r18
    105a:	91 09       	sbc	r25, r1
    105c:	98 2f       	mov	r25, r24
    105e:	88 27       	eor	r24, r24
    1060:	81 50       	subi	r24, 0x01	; 1
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1068:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    106c:	08 95       	ret

0000106e <SelectTSens>:
    106e:	82 e1       	ldi	r24, 0x12	; 18
    1070:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1074:	e0 e0       	ldi	r30, 0x00	; 0
    1076:	f6 e0       	ldi	r31, 0x06	; 6
    1078:	80 81       	ld	r24, Z
    107a:	8b 7f       	andi	r24, 0xFB	; 251
    107c:	80 83       	st	Z, r24
    107e:	8e e1       	ldi	r24, 0x1E	; 30
    1080:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <adc0Chg>
    108a:	08 95       	ret

0000108c <SelectAuIn>:
    108c:	82 e2       	ldi	r24, 0x22	; 34
    108e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1092:	e0 e0       	ldi	r30, 0x00	; 0
    1094:	f6 e0       	ldi	r31, 0x06	; 6
    1096:	80 81       	ld	r24, Z
    1098:	84 60       	ori	r24, 0x04	; 4
    109a:	80 83       	st	Z, r24
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <adc0Chg>
    10a8:	08 95       	ret

000010aa <CheckButtons>:
    10aa:	20 91 a9 3a 	lds	r18, 0x3AA9	; 0x803aa9 <adcBtns>
    10ae:	30 91 aa 3a 	lds	r19, 0x3AAA	; 0x803aaa <adcBtns+0x1>
    10b2:	94 e0       	ldi	r25, 0x04	; 4
    10b4:	36 95       	lsr	r19
    10b6:	27 95       	ror	r18
    10b8:	9a 95       	dec	r25
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <CheckButtons+0xa>
    10bc:	33 27       	eor	r19, r19
    10be:	2c 35       	cpi	r18, 0x5C	; 92
    10c0:	31 05       	cpc	r19, r1
    10c2:	d0 f4       	brcc	.+52     	; 0x10f8 <CheckButtons+0x4e>
    10c4:	23 35       	cpi	r18, 0x53	; 83
    10c6:	31 05       	cpc	r19, r1
    10c8:	a8 f5       	brcc	.+106    	; 0x1134 <CheckButtons+0x8a>
    10ca:	22 33       	cpi	r18, 0x32	; 50
    10cc:	31 05       	cpc	r19, r1
    10ce:	50 f4       	brcc	.+20     	; 0x10e4 <CheckButtons+0x3a>
    10d0:	2d 32       	cpi	r18, 0x2D	; 45
    10d2:	31 05       	cpc	r19, r1
    10d4:	58 f5       	brcc	.+86     	; 0x112c <CheckButtons+0x82>
    10d6:	23 52       	subi	r18, 0x23	; 35
    10d8:	31 09       	sbc	r19, r1
    10da:	25 30       	cpi	r18, 0x05	; 5
    10dc:	31 05       	cpc	r19, r1
    10de:	80 f5       	brcc	.+96     	; 0x1140 <CheckButtons+0x96>
    10e0:	9c e0       	ldi	r25, 0x0C	; 12
    10e2:	2f c0       	rjmp	.+94     	; 0x1142 <CheckButtons+0x98>
    10e4:	27 33       	cpi	r18, 0x37	; 55
    10e6:	31 05       	cpc	r19, r1
    10e8:	18 f1       	brcs	.+70     	; 0x1130 <CheckButtons+0x86>
    10ea:	2e 53       	subi	r18, 0x3E	; 62
    10ec:	31 09       	sbc	r19, r1
    10ee:	27 30       	cpi	r18, 0x07	; 7
    10f0:	31 05       	cpc	r19, r1
    10f2:	30 f5       	brcc	.+76     	; 0x1140 <CheckButtons+0x96>
    10f4:	96 e0       	ldi	r25, 0x06	; 6
    10f6:	25 c0       	rjmp	.+74     	; 0x1142 <CheckButtons+0x98>
    10f8:	2a 38       	cpi	r18, 0x8A	; 138
    10fa:	31 05       	cpc	r19, r1
    10fc:	50 f4       	brcc	.+20     	; 0x1112 <CheckButtons+0x68>
    10fe:	29 37       	cpi	r18, 0x79	; 121
    1100:	31 05       	cpc	r19, r1
    1102:	d0 f4       	brcc	.+52     	; 0x1138 <CheckButtons+0x8e>
    1104:	23 56       	subi	r18, 0x63	; 99
    1106:	31 09       	sbc	r19, r1
    1108:	2b 30       	cpi	r18, 0x0B	; 11
    110a:	31 05       	cpc	r19, r1
    110c:	c8 f4       	brcc	.+50     	; 0x1140 <CheckButtons+0x96>
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	18 c0       	rjmp	.+48     	; 0x1142 <CheckButtons+0x98>
    1112:	22 3a       	cpi	r18, 0xA2	; 162
    1114:	31 05       	cpc	r19, r1
    1116:	a0 f0       	brcs	.+40     	; 0x1140 <CheckButtons+0x96>
    1118:	2b 3b       	cpi	r18, 0xBB	; 187
    111a:	31 05       	cpc	r19, r1
    111c:	78 f0       	brcs	.+30     	; 0x113c <CheckButtons+0x92>
    111e:	20 5f       	subi	r18, 0xF0	; 240
    1120:	31 09       	sbc	r19, r1
    1122:	20 31       	cpi	r18, 0x10	; 16
    1124:	31 05       	cpc	r19, r1
    1126:	60 f4       	brcc	.+24     	; 0x1140 <CheckButtons+0x96>
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <CheckButtons+0x98>
    112c:	99 e0       	ldi	r25, 0x09	; 9
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <CheckButtons+0x98>
    1130:	98 e0       	ldi	r25, 0x08	; 8
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <CheckButtons+0x98>
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <CheckButtons+0x98>
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <CheckButtons+0x98>
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <CheckButtons+0x98>
    1140:	9f e0       	ldi	r25, 0x0F	; 15
    1142:	28 2f       	mov	r18, r24
    1144:	2f 70       	andi	r18, 0x0F	; 15
    1146:	92 13       	cpse	r25, r18
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <CheckButtons+0xac>
    114a:	98 2f       	mov	r25, r24
    114c:	90 7f       	andi	r25, 0xF0	; 240
    114e:	90 3f       	cpi	r25, 0xF0	; 240
    1150:	39 f0       	breq	.+14     	; 0x1160 <CheckButtons+0xb6>
    1152:	80 5f       	subi	r24, 0xF0	; 240
    1154:	08 95       	ret
    1156:	99 23       	and	r25, r25
    1158:	11 f0       	breq	.+4      	; 0x115e <CheckButtons+0xb4>
    115a:	89 2f       	mov	r24, r25
    115c:	08 95       	ret
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	08 95       	ret

00001162 <lfsr>:
    1162:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <state.3879>
    1166:	90 91 1f 38 	lds	r25, 0x381F	; 0x80381f <state.3879+0x1>
    116a:	9c 01       	movw	r18, r24
    116c:	32 2f       	mov	r19, r18
    116e:	22 27       	eor	r18, r18
    1170:	32 95       	swap	r19
    1172:	33 0f       	add	r19, r19
    1174:	30 7e       	andi	r19, 0xE0	; 224
    1176:	82 27       	eor	r24, r18
    1178:	93 27       	eor	r25, r19
    117a:	9c 01       	movw	r18, r24
    117c:	23 2f       	mov	r18, r19
    117e:	33 27       	eor	r19, r19
    1180:	26 95       	lsr	r18
    1182:	82 27       	eor	r24, r18
    1184:	93 27       	eor	r25, r19
    1186:	9c 01       	movw	r18, r24
    1188:	36 95       	lsr	r19
    118a:	32 2f       	mov	r19, r18
    118c:	22 27       	eor	r18, r18
    118e:	37 95       	ror	r19
    1190:	27 95       	ror	r18
    1192:	82 27       	eor	r24, r18
    1194:	93 27       	eor	r25, r19
    1196:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <state.3879>
    119a:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <state.3879+0x1>
    119e:	08 95       	ret

000011a0 <floatSpeed>:
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	7b 01       	movw	r14, r22
    11b0:	8a 01       	movw	r16, r20
    11b2:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    11b6:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    11ba:	e8 2f       	mov	r30, r24
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	31 97       	sbiw	r30, 0x01	; 1
    11c0:	e7 70       	andi	r30, 0x07	; 7
    11c2:	ff 27       	eor	r31, r31
    11c4:	e0 5e       	subi	r30, 0xE0	; 224
    11c6:	f7 4c       	sbci	r31, 0xC7	; 199
    11c8:	d0 80       	ld	r13, Z
    11ca:	cb df       	rcall	.-106    	; 0x1162 <lfsr>
    11cc:	8d 21       	and	r24, r13
    11ce:	c8 0f       	add	r28, r24
    11d0:	d1 1d       	adc	r29, r1
    11d2:	c7 df       	rcall	.-114    	; 0x1162 <lfsr>
    11d4:	8d 21       	and	r24, r13
    11d6:	c8 1b       	sub	r28, r24
    11d8:	d1 09       	sbc	r29, r1
    11da:	0c 17       	cp	r16, r28
    11dc:	1d 07       	cpc	r17, r29
    11de:	08 f4       	brcc	.+2      	; 0x11e2 <floatSpeed+0x42>
    11e0:	e8 01       	movw	r28, r16
    11e2:	c7 01       	movw	r24, r14
    11e4:	ec 16       	cp	r14, r28
    11e6:	fd 06       	cpc	r15, r29
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <floatSpeed+0x4c>
    11ea:	ce 01       	movw	r24, r28
    11ec:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    11f0:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	08 95       	ret

00001204 <floatAround>:
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	c8 2f       	mov	r28, r24
    120e:	d4 2f       	mov	r29, r20
    1210:	02 2f       	mov	r16, r18
    1212:	e6 2f       	mov	r30, r22
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	e7 70       	andi	r30, 0x07	; 7
    121a:	ff 27       	eor	r31, r31
    121c:	e0 5e       	subi	r30, 0xE0	; 224
    121e:	f7 4c       	sbci	r31, 0xC7	; 199
    1220:	10 81       	ld	r17, Z
    1222:	9f df       	rcall	.-194    	; 0x1162 <lfsr>
    1224:	81 23       	and	r24, r17
    1226:	c8 0f       	add	r28, r24
    1228:	9c df       	rcall	.-200    	; 0x1162 <lfsr>
    122a:	81 23       	and	r24, r17
    122c:	c8 1b       	sub	r28, r24
    122e:	8c 2f       	mov	r24, r28
    1230:	00 23       	and	r16, r16
    1232:	41 f0       	breq	.+16     	; 0x1244 <floatAround+0x40>
    1234:	9c 2f       	mov	r25, r28
    1236:	0c 17       	cp	r16, r28
    1238:	08 f4       	brcc	.+2      	; 0x123c <floatAround+0x38>
    123a:	90 2f       	mov	r25, r16
    123c:	8d 2f       	mov	r24, r29
    123e:	d9 17       	cp	r29, r25
    1240:	08 f4       	brcc	.+2      	; 0x1244 <floatAround+0x40>
    1242:	89 2f       	mov	r24, r25
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	8d 17       	cp	r24, r29
    124a:	10 f0       	brcs	.+4      	; 0x1250 <floatAround+0x4c>
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	2d 2f       	mov	r18, r29
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	24 23       	and	r18, r20
    1256:	35 23       	and	r19, r21
    1258:	23 2b       	or	r18, r19
    125a:	09 f0       	breq	.+2      	; 0x125e <floatAround+0x5a>
    125c:	8d 2f       	mov	r24, r29
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <SaveGameState>:
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	64 97       	sbiw	r28, 0x14	; 20
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	44 e1       	ldi	r20, 0x14	; 20
    1282:	be 01       	movw	r22, r28
    1284:	6f 5f       	subi	r22, 0xFF	; 255
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	97 de       	rcall	.-722    	; 0xfba <EERead>
    128c:	83 e5       	ldi	r24, 0x53	; 83
    128e:	c8 2e       	mov	r12, r24
    1290:	8a e3       	ldi	r24, 0x3A	; 58
    1292:	d8 2e       	mov	r13, r24
    1294:	8e 01       	movw	r16, r28
    1296:	0f 5f       	subi	r16, 0xFF	; 255
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	f1 2c       	mov	r15, r1
    129c:	f8 01       	movw	r30, r16
    129e:	81 91       	ld	r24, Z+
    12a0:	8f 01       	movw	r16, r30
    12a2:	f6 01       	movw	r30, r12
    12a4:	90 81       	ld	r25, Z
    12a6:	98 13       	cpse	r25, r24
    12a8:	08 c0       	rjmp	.+16     	; 0x12ba <SaveGameState+0x52>
    12aa:	f3 94       	inc	r15
    12ac:	ff ef       	ldi	r31, 0xFF	; 255
    12ae:	cf 1a       	sub	r12, r31
    12b0:	df 0a       	sbc	r13, r31
    12b2:	80 e1       	ldi	r24, 0x10	; 16
    12b4:	f8 12       	cpse	r15, r24
    12b6:	f2 cf       	rjmp	.-28     	; 0x129c <SaveGameState+0x34>
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <SaveGameState+0x62>
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	b6 01       	movw	r22, r12
    12be:	8f 2d       	mov	r24, r15
    12c0:	8c de       	rcall	.-744    	; 0xfda <EEWrite>
    12c2:	88 23       	and	r24, r24
    12c4:	91 f3       	breq	.-28     	; 0x12aa <SaveGameState+0x42>
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	36 c0       	rjmp	.+108    	; 0x1336 <SaveGameState+0xce>
    12ca:	20 91 37 38 	lds	r18, 0x3837	; 0x803837 <inventory>
    12ce:	30 91 38 38 	lds	r19, 0x3838	; 0x803838 <inventory+0x1>
    12d2:	30 93 63 3a 	sts	0x3A63, r19	; 0x803a63 <gameState+0x10>
    12d6:	20 93 64 3a 	sts	0x3A64, r18	; 0x803a64 <gameState+0x11>
    12da:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <inventory+0x2>
    12de:	90 91 3a 38 	lds	r25, 0x383A	; 0x80383a <inventory+0x3>
    12e2:	90 93 65 3a 	sts	0x3A65, r25	; 0x803a65 <gameState+0x12>
    12e6:	80 93 66 3a 	sts	0x3A66, r24	; 0x803a66 <gameState+0x13>
    12ea:	89 89       	ldd	r24, Y+17	; 0x11
    12ec:	9a 89       	ldd	r25, Y+18	; 0x12
    12ee:	98 27       	eor	r25, r24
    12f0:	89 27       	eor	r24, r25
    12f2:	98 27       	eor	r25, r24
    12f4:	28 17       	cp	r18, r24
    12f6:	39 07       	cpc	r19, r25
    12f8:	69 f4       	brne	.+26     	; 0x1314 <SaveGameState+0xac>
    12fa:	8b 89       	ldd	r24, Y+19	; 0x13
    12fc:	9c 89       	ldd	r25, Y+20	; 0x14
    12fe:	98 27       	eor	r25, r24
    1300:	89 27       	eor	r24, r25
    1302:	98 27       	eor	r25, r24
    1304:	20 91 39 38 	lds	r18, 0x3839	; 0x803839 <inventory+0x2>
    1308:	30 91 3a 38 	lds	r19, 0x383A	; 0x80383a <inventory+0x3>
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	49 f4       	brne	.+18     	; 0x1324 <SaveGameState+0xbc>
    1312:	10 c0       	rjmp	.+32     	; 0x1334 <SaveGameState+0xcc>
    1314:	42 e0       	ldi	r20, 0x02	; 2
    1316:	63 e6       	ldi	r22, 0x63	; 99
    1318:	7a e3       	ldi	r23, 0x3A	; 58
    131a:	80 e1       	ldi	r24, 0x10	; 16
    131c:	5e de       	rcall	.-836    	; 0xfda <EEWrite>
    131e:	88 23       	and	r24, r24
    1320:	61 f3       	breq	.-40     	; 0x12fa <SaveGameState+0x92>
    1322:	d1 cf       	rjmp	.-94     	; 0x12c6 <SaveGameState+0x5e>
    1324:	42 e0       	ldi	r20, 0x02	; 2
    1326:	65 e6       	ldi	r22, 0x65	; 101
    1328:	7a e3       	ldi	r23, 0x3A	; 58
    132a:	82 e1       	ldi	r24, 0x12	; 18
    132c:	56 de       	rcall	.-852    	; 0xfda <EEWrite>
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	81 11       	cpse	r24, r1
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <SaveGameState+0xce>
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	89 2f       	mov	r24, r25
    1338:	64 96       	adiw	r28, 0x14	; 20
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	ff 90       	pop	r15
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	08 95       	ret

0000134e <ReadStatusBit>:
    134e:	e8 2f       	mov	r30, r24
    1350:	ef 77       	andi	r30, 0x7F	; 127
    1352:	e6 95       	lsr	r30
    1354:	e6 95       	lsr	r30
    1356:	e6 95       	lsr	r30
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ed 5a       	subi	r30, 0xAD	; 173
    135c:	f5 4c       	sbci	r31, 0xC5	; 197
    135e:	20 81       	ld	r18, Z
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	87 70       	andi	r24, 0x07	; 7
    1364:	a9 01       	movw	r20, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <ReadStatusBit+0x1e>
    1368:	55 95       	asr	r21
    136a:	47 95       	ror	r20
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <ReadStatusBit+0x1a>
    1370:	ca 01       	movw	r24, r20
    1372:	81 70       	andi	r24, 0x01	; 1
    1374:	08 95       	ret

00001376 <WriteStatusBit>:
    1376:	e8 2f       	mov	r30, r24
    1378:	ef 77       	andi	r30, 0x7F	; 127
    137a:	e6 95       	lsr	r30
    137c:	e6 95       	lsr	r30
    137e:	e6 95       	lsr	r30
    1380:	28 2f       	mov	r18, r24
    1382:	27 70       	andi	r18, 0x07	; 7
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	ed 5a       	subi	r30, 0xAD	; 173
    1388:	f5 4c       	sbci	r31, 0xC5	; 197
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <WriteStatusBit+0x1c>
    1390:	88 0f       	add	r24, r24
    1392:	2a 95       	dec	r18
    1394:	ea f7       	brpl	.-6      	; 0x1390 <WriteStatusBit+0x1a>
    1396:	66 23       	and	r22, r22
    1398:	19 f0       	breq	.+6      	; 0x13a0 <WriteStatusBit+0x2a>
    139a:	90 81       	ld	r25, Z
    139c:	89 2b       	or	r24, r25
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <WriteStatusBit+0x30>
    13a0:	80 95       	com	r24
    13a2:	90 81       	ld	r25, Z
    13a4:	89 23       	and	r24, r25
    13a6:	80 83       	st	Z, r24
    13a8:	08 95       	ret

000013aa <UpdateState>:
    13aa:	98 2f       	mov	r25, r24
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	31 f0       	breq	.+12     	; 0x13bc <UpdateState+0x12>
    13b0:	97 ff       	sbrs	r25, 7
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <UpdateState+0xe>
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <UpdateState+0x10>
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	dd cf       	rjmp	.-70     	; 0x1376 <WriteStatusBit>
    13bc:	08 95       	ret

000013be <CheckState>:
    13be:	cf 93       	push	r28
    13c0:	c8 2f       	mov	r28, r24
    13c2:	8f 77       	andi	r24, 0x7F	; 127
    13c4:	c4 df       	rcall	.-120    	; 0x134e <ReadStatusBit>
    13c6:	2c 2f       	mov	r18, r28
    13c8:	22 1f       	adc	r18, r18
    13ca:	22 27       	eor	r18, r18
    13cc:	22 1f       	adc	r18, r18
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	81 11       	cpse	r24, r1
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <CheckState+0x18>
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	82 2f       	mov	r24, r18
    13d8:	89 27       	eor	r24, r25
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <getID>:
    13de:	e3 e0       	ldi	r30, 0x03	; 3
    13e0:	f1 e1       	ldi	r31, 0x11	; 17
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	91 91       	ld	r25, Z+
    13e6:	89 0f       	add	r24, r25
    13e8:	ed 30       	cpi	r30, 0x0D	; 13
    13ea:	91 e1       	ldi	r25, 0x11	; 17
    13ec:	f9 07       	cpc	r31, r25
    13ee:	d1 f7       	brne	.-12     	; 0x13e4 <getID+0x6>
    13f0:	83 70       	andi	r24, 0x03	; 3
    13f2:	8f 5f       	subi	r24, 0xFF	; 255
    13f4:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <whoami>
    13f8:	08 95       	ret

000013fa <Reset>:
    13fa:	e3 e5       	ldi	r30, 0x53	; 83
    13fc:	fa e3       	ldi	r31, 0x3A	; 58
    13fe:	11 92       	st	Z+, r1
    1400:	8a e3       	ldi	r24, 0x3A	; 58
    1402:	e7 36       	cpi	r30, 0x67	; 103
    1404:	f8 07       	cpc	r31, r24
    1406:	d9 f7       	brne	.-10     	; 0x13fe <Reset+0x4>
    1408:	ea df       	rcall	.-44     	; 0x13de <getID>
    140a:	81 11       	cpse	r24, r1
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <Reset+0x1c>
    140e:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <gameState+0xd>
    1412:	80 64       	ori	r24, 0x40	; 64
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <Reset+0x26>
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	31 f4       	brne	.+12     	; 0x1426 <Reset+0x2c>
    141a:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <gameState+0xd>
    141e:	80 68       	ori	r24, 0x80	; 128
    1420:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <gameState+0xd>
    1424:	0d c0       	rjmp	.+26     	; 0x1440 <Reset+0x46>
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	21 f4       	brne	.+8      	; 0x1432 <Reset+0x38>
    142a:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <gameState+0xe>
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	05 c0       	rjmp	.+10     	; 0x143c <Reset+0x42>
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	29 f4       	brne	.+10     	; 0x1440 <Reset+0x46>
    1436:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <gameState+0xe>
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <gameState+0xe>
    1440:	80 91 53 3a 	lds	r24, 0x3A53	; 0x803a53 <gameState>
    1444:	81 60       	ori	r24, 0x01	; 1
    1446:	80 93 53 3a 	sts	0x3A53, r24	; 0x803a53 <gameState>
    144a:	08 95       	ret

0000144c <LoadGameState>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	44 e1       	ldi	r20, 0x14	; 20
    1452:	63 e5       	ldi	r22, 0x53	; 83
    1454:	7a e3       	ldi	r23, 0x3A	; 58
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	b0 dd       	rcall	.-1184   	; 0xfba <EERead>
    145a:	ce e6       	ldi	r28, 0x6E	; 110
    145c:	d0 e0       	ldi	r29, 0x00	; 0
    145e:	8c 2f       	mov	r24, r28
    1460:	76 df       	rcall	.-276    	; 0x134e <ReadStatusBit>
    1462:	d8 0f       	add	r29, r24
    1464:	cf 5f       	subi	r28, 0xFF	; 255
    1466:	c2 37       	cpi	r28, 0x72	; 114
    1468:	d1 f7       	brne	.-12     	; 0x145e <LoadGameState+0x12>
    146a:	d1 30       	cpi	r29, 0x01	; 1
    146c:	11 f0       	breq	.+4      	; 0x1472 <LoadGameState+0x26>
    146e:	c5 df       	rcall	.-118    	; 0x13fa <Reset>
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <LoadGameState+0x28>
    1472:	b5 df       	rcall	.-150    	; 0x13de <getID>
    1474:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <gameState+0x10>
    1478:	90 91 64 3a 	lds	r25, 0x3A64	; 0x803a64 <gameState+0x11>
    147c:	98 27       	eor	r25, r24
    147e:	89 27       	eor	r24, r25
    1480:	98 27       	eor	r25, r24
    1482:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <inventory>
    1486:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <inventory+0x1>
    148a:	80 91 65 3a 	lds	r24, 0x3A65	; 0x803a65 <gameState+0x12>
    148e:	90 91 66 3a 	lds	r25, 0x3A66	; 0x803a66 <gameState+0x13>
    1492:	98 27       	eor	r25, r24
    1494:	89 27       	eor	r24, r25
    1496:	98 27       	eor	r25, r24
    1498:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <inventory+0x2>
    149c:	90 93 3a 38 	sts	0x383A, r25	; 0x80383a <inventory+0x3>
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <HotSummer>:
    14a6:	cf 93       	push	r28
    14a8:	86 e7       	ldi	r24, 0x76	; 118
    14aa:	89 df       	rcall	.-238    	; 0x13be <CheckState>
    14ac:	c8 2f       	mov	r28, r24
    14ae:	88 23       	and	r24, r24
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <HotSummer+0x2c>
    14b2:	e0 91 3f b9 	lds	r30, 0xB93F	; 0x80b93f <__bss_end+0x7e33>
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	e4 54       	subi	r30, 0x44	; 68
    14ba:	f5 4c       	sbci	r31, 0xC5	; 197
    14bc:	10 82       	st	Z, r1
    14be:	e0 91 3e b9 	lds	r30, 0xB93E	; 0x80b93e <__bss_end+0x7e32>
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    14c8:	e4 54       	subi	r30, 0x44	; 68
    14ca:	f5 4c       	sbci	r31, 0xC5	; 197
    14cc:	80 83       	st	Z, r24
    14ce:	c1 e0       	ldi	r28, 0x01	; 1
    14d0:	4c c0       	rjmp	.+152    	; 0x156a <HotSummer+0xc4>
    14d2:	85 e7       	ldi	r24, 0x75	; 117
    14d4:	74 df       	rcall	.-280    	; 0x13be <CheckState>
    14d6:	88 23       	and	r24, r24
    14d8:	59 f1       	breq	.+86     	; 0x1530 <HotSummer+0x8a>
    14da:	e0 91 3f b9 	lds	r30, 0xB93F	; 0x80b93f <__bss_end+0x7e33>
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    14e4:	e4 54       	subi	r30, 0x44	; 68
    14e6:	f5 4c       	sbci	r31, 0xC5	; 197
    14e8:	80 83       	st	Z, r24
    14ea:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <cooledDown.3938>
    14ee:	88 23       	and	r24, r24
    14f0:	79 f0       	breq	.+30     	; 0x1510 <HotSummer+0x6a>
    14f2:	80 91 b2 3a 	lds	r24, 0x3AB2	; 0x803ab2 <calTemp>
    14f6:	90 91 b3 3a 	lds	r25, 0x3AB3	; 0x803ab3 <calTemp+0x1>
    14fa:	20 91 e7 3a 	lds	r18, 0x3AE7	; 0x803ae7 <adcTemp>
    14fe:	30 91 e8 3a 	lds	r19, 0x3AE8	; 0x803ae8 <adcTemp+0x1>
    1502:	80 96       	adiw	r24, 0x20	; 32
    1504:	28 17       	cp	r18, r24
    1506:	39 07       	cpc	r19, r25
    1508:	18 f0       	brcs	.+6      	; 0x1510 <HotSummer+0x6a>
    150a:	86 e7       	ldi	r24, 0x76	; 118
    150c:	4e df       	rcall	.-356    	; 0x13aa <UpdateState>
    150e:	2d c0       	rjmp	.+90     	; 0x156a <HotSummer+0xc4>
    1510:	80 91 b2 3a 	lds	r24, 0x3AB2	; 0x803ab2 <calTemp>
    1514:	90 91 b3 3a 	lds	r25, 0x3AB3	; 0x803ab3 <calTemp+0x1>
    1518:	20 91 e7 3a 	lds	r18, 0x3AE7	; 0x803ae7 <adcTemp>
    151c:	30 91 e8 3a 	lds	r19, 0x3AE8	; 0x803ae8 <adcTemp+0x1>
    1520:	08 96       	adiw	r24, 0x08	; 8
    1522:	82 17       	cp	r24, r18
    1524:	93 07       	cpc	r25, r19
    1526:	08 f1       	brcs	.+66     	; 0x156a <HotSummer+0xc4>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <cooledDown.3938>
    152e:	1d c0       	rjmp	.+58     	; 0x156a <HotSummer+0xc4>
    1530:	80 91 b2 3a 	lds	r24, 0x3AB2	; 0x803ab2 <calTemp>
    1534:	90 91 b3 3a 	lds	r25, 0x3AB3	; 0x803ab3 <calTemp+0x1>
    1538:	89 2b       	or	r24, r25
    153a:	41 f4       	brne	.+16     	; 0x154c <HotSummer+0xa6>
    153c:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <adcTemp>
    1540:	90 91 e8 3a 	lds	r25, 0x3AE8	; 0x803ae8 <adcTemp+0x1>
    1544:	80 93 b2 3a 	sts	0x3AB2, r24	; 0x803ab2 <calTemp>
    1548:	90 93 b3 3a 	sts	0x3AB3, r25	; 0x803ab3 <calTemp+0x1>
    154c:	80 91 b2 3a 	lds	r24, 0x3AB2	; 0x803ab2 <calTemp>
    1550:	90 91 b3 3a 	lds	r25, 0x3AB3	; 0x803ab3 <calTemp+0x1>
    1554:	20 91 e7 3a 	lds	r18, 0x3AE7	; 0x803ae7 <adcTemp>
    1558:	30 91 e8 3a 	lds	r19, 0x3AE8	; 0x803ae8 <adcTemp+0x1>
    155c:	80 96       	adiw	r24, 0x20	; 32
    155e:	28 17       	cp	r18, r24
    1560:	39 07       	cpc	r19, r25
    1562:	18 f0       	brcs	.+6      	; 0x156a <HotSummer+0xc4>
    1564:	85 e7       	ldi	r24, 0x75	; 117
    1566:	21 df       	rcall	.-446    	; 0x13aa <UpdateState>
    1568:	c0 e0       	ldi	r28, 0x00	; 0
    156a:	8c 2f       	mov	r24, r28
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <GenerateAudio>:


uint8_t GenerateAudio(){
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29

    if (auIn[AULEN>>1] < HPLVL) {
    1578:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auIn+0x4>
    157c:	89 31       	cpi	r24, 0x19	; 25
    157e:	08 f0       	brcs	.+2      	; 0x1582 <GenerateAudio+0x12>
    1580:	cf c0       	rjmp	.+414    	; 0x1720 <GenerateAudio+0x1b0>

        detHdPh = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 93 b1 3a 	sts	0x3AB1, r24	; 0x803ab1 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1588:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    158c:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    1590:	88 27       	eor	r24, r24
    1592:	89 2b       	or	r24, r25
    1594:	09 f0       	breq	.+2      	; 0x1598 <GenerateAudio+0x28>
    1596:	c6 c0       	rjmp	.+396    	; 0x1724 <GenerateAudio+0x1b4>

            //Silence
            if ((effect&0xE0)==0){
    1598:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    159c:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    15a0:	80 7e       	andi	r24, 0xE0	; 224
    15a2:	99 27       	eor	r25, r25
    15a4:	89 2b       	or	r24, r25
    15a6:	31 f4       	brne	.+12     	; 0x15b4 <GenerateAudio+0x44>
                auRepAddr = &zero;
    15a8:	81 e3       	ldi	r24, 0x31	; 49
    15aa:	98 e3       	ldi	r25, 0x38	; 56
    15ac:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    15b0:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    15b4:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    15b8:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    15bc:	80 7e       	andi	r24, 0xE0	; 224
    15be:	99 27       	eor	r25, r25
    15c0:	80 97       	sbiw	r24, 0x20	; 32
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <GenerateAudio+0x56>
    15c4:	59 c0       	rjmp	.+178    	; 0x1678 <GenerateAudio+0x108>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	52 e2       	ldi	r21, 0x22	; 34
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e2       	ldi	r23, 0x20	; 32
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	e7 dd       	rcall	.-1074   	; 0x11a0 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	65 e0       	ldi	r22, 0x05	; 5
    15d8:	80 e8       	ldi	r24, 0x80	; 128
    15da:	14 de       	rcall	.-984    	; 0x1204 <floatAround>
    15dc:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <auBuffer.3948+0x2>

                if (buttonMark) {
    15e0:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <buttonMark>
    15e4:	88 23       	and	r24, r24
    15e6:	09 f4       	brne	.+2      	; 0x15ea <GenerateAudio+0x7a>
    15e8:	47 c0       	rjmp	.+142    	; 0x1678 <GenerateAudio+0x108>
                    if (start == 0) {
    15ea:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <start.3951>
    15ee:	81 11       	cpse	r24, r1
    15f0:	15 c0       	rjmp	.+42     	; 0x161c <GenerateAudio+0xac>
                        duration = 4;
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <duration.3950>
                        loudness = 0xff;
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <loudness.3949>
                        TCB1_CCMP = 0x2000;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e2       	ldi	r25, 0x20	; 32
    1602:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1606:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    160a:	8d e0       	ldi	r24, 0x0D	; 13
    160c:	98 e3       	ldi	r25, 0x38	; 56
    160e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    1612:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        start = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <start.3951>
                    }

                    if (loudness) {
    161c:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <loudness.3949>
    1620:	88 23       	and	r24, r24
    1622:	69 f0       	breq	.+26     	; 0x163e <GenerateAudio+0xce>
                        auVolume = loudness;
    1624:	80 93 a8 3a 	sts	0x3AA8, r24	; 0x803aa8 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1628:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <duration.3950>
    162c:	99 23       	and	r25, r25
    162e:	21 f0       	breq	.+8      	; 0x1638 <GenerateAudio+0xc8>
    1630:	91 50       	subi	r25, 0x01	; 1
    1632:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <duration.3950>
    1636:	03 c0       	rjmp	.+6      	; 0x163e <GenerateAudio+0xce>
    1638:	86 95       	lsr	r24
    163a:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <loudness.3949>
                    } 

                    if (loudness == 0) {
    163e:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <loudness.3949>
    1642:	81 11       	cpse	r24, r1
    1644:	19 c0       	rjmp	.+50     	; 0x1678 <GenerateAudio+0x108>
                        effect &= 0x10;
    1646:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    164a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    164e:	80 71       	andi	r24, 0x10	; 16
    1650:	99 27       	eor	r25, r25
    1652:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    1656:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
                        auRepAddr = &zero;
    165a:	81 e3       	ldi	r24, 0x31	; 49
    165c:	98 e3       	ldi	r25, 0x38	; 56
    165e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    1662:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1666:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
    166a:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
                        auVolume = 0xff;
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	80 93 a8 3a 	sts	0x3AA8, r24	; 0x803aa8 <auVolume>
                        start = 0;
    1674:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <start.3951>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1678:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    167c:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1680:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    1684:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    1688:	80 7e       	andi	r24, 0xE0	; 224
    168a:	99 27       	eor	r25, r25
    168c:	80 36       	cpi	r24, 0x60	; 96
    168e:	91 05       	cpc	r25, r1
    1690:	d1 f5       	brne	.+116    	; 0x1706 <GenerateAudio+0x196>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1692:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <auBuffer.3952+0x6>
                auRepAddr = &auBuffer[0];
    1696:	83 e4       	ldi	r24, 0x43	; 67
    1698:	98 e3       	ldi	r25, 0x38	; 56
    169a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    169e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
    16a2:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    16a4:	c1 e0       	ldi	r28, 0x01	; 1
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    16a6:	d3 e0       	ldi	r29, 0x03	; 3
    16a8:	8c 2f       	mov	r24, r28
    16aa:	6d 2f       	mov	r22, r29
    16ac:	0e 94 33 1c 	call	0x3866	; 0x3866 <__udivmodqi4>
    16b0:	99 23       	and	r25, r25
    16b2:	39 f0       	breq	.+14     	; 0x16c2 <GenerateAudio+0x152>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	65 e0       	ldi	r22, 0x05	; 5
    16ba:	80 e8       	ldi	r24, 0x80	; 128
    16bc:	a3 dd       	rcall	.-1210   	; 0x1204 <floatAround>
    16be:	f8 01       	movw	r30, r16
    16c0:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    16c2:	cf 5f       	subi	r28, 0xFF	; 255
    16c4:	0f 5f       	subi	r16, 0xFF	; 255
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	c6 30       	cpi	r28, 0x06	; 6
    16ca:	71 f7       	brne	.-36     	; 0x16a8 <GenerateAudio+0x138>
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    16cc:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <buttonMark>
    16d0:	88 23       	and	r24, r24
    16d2:	c9 f0       	breq	.+50     	; 0x1706 <GenerateAudio+0x196>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	54 e0       	ldi	r21, 0x04	; 4
    16d8:	60 e8       	ldi	r22, 0x80	; 128
    16da:	72 e0       	ldi	r23, 0x02	; 2
    16dc:	85 e0       	ldi	r24, 0x05	; 5
    16de:	60 dd       	rcall	.-1344   	; 0x11a0 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    16e0:	80 91 a8 3a 	lds	r24, 0x3AA8	; 0x803aa8 <auVolume>
    16e4:	20 ea       	ldi	r18, 0xA0	; 160
    16e6:	40 e1       	ldi	r20, 0x10	; 16
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	8c dd       	rcall	.-1256   	; 0x1204 <floatAround>
    16ec:	80 93 a8 3a 	sts	0x3AA8, r24	; 0x803aa8 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    16f0:	20 e9       	ldi	r18, 0x90	; 144
    16f2:	40 e7       	ldi	r20, 0x70	; 112
    16f4:	62 e0       	ldi	r22, 0x02	; 2
    16f6:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <auBuffer.3952>
    16fa:	84 dd       	rcall	.-1272   	; 0x1204 <floatAround>
    16fc:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <auBuffer.3952>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1700:	80 95       	com	r24
    1702:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <auBuffer.3952+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1706:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    170a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    170e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    1712:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1716:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    171a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <GenerateAudio+0x1b4>
            //
            else {
            }
        }
    } else {
        detHdPh = 0;
    1720:	10 92 b1 3a 	sts	0x3AB1, r1	; 0x803ab1 <detHdPh>
    }
    return buttonMark;
    1724:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <buttonMark>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	08 95       	ret

00001732 <simonLed>:

void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	e0 e4       	ldi	r30, 0x40	; 64
    1738:	f9 eb       	ldi	r31, 0xB9	; 185
    173a:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    173c:	a5 81       	ldd	r26, Z+5	; 0x05
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	a4 54       	subi	r26, 0x44	; 68
    1742:	b5 4c       	sbci	r27, 0xC5	; 197
    1744:	1c 92       	st	X, r1
    1746:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1748:	a8 81       	ld	r26, Y
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	a4 54       	subi	r26, 0x44	; 68
    174e:	b5 4c       	sbci	r27, 0xC5	; 197
    1750:	1c 92       	st	X, r1
void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1752:	99 eb       	ldi	r25, 0xB9	; 185
    1754:	e5 34       	cpi	r30, 0x45	; 69
    1756:	f9 07       	cpc	r31, r25
    1758:	81 f7       	brne	.-32     	; 0x173a <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 1) {
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	99 f4       	brne	.+38     	; 0x1784 <simonLed+0x52>
        iLED[WING[L][0]] = dimValue;
    175e:	e0 91 45 b9 	lds	r30, 0xB945	; 0x80b945 <__bss_end+0x7e39>
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1768:	e4 54       	subi	r30, 0x44	; 68
    176a:	f5 4c       	sbci	r31, 0xC5	; 197
    176c:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    176e:	e0 91 46 b9 	lds	r30, 0xB946	; 0x80b946 <__bss_end+0x7e3a>
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1778:	e4 54       	subi	r30, 0x44	; 68
    177a:	f5 4c       	sbci	r31, 0xC5	; 197
    177c:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    177e:	e0 91 47 b9 	lds	r30, 0xB947	; 0x80b947 <__bss_end+0x7e3b>
    1782:	2e c0       	rjmp	.+92     	; 0x17e0 <simonLed+0xae>
    } else if (val == 2) {
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	59 f4       	brne	.+22     	; 0x179e <simonLed+0x6c>
        iLED[WING[L][3]] = dimValue;
    1788:	e0 91 48 b9 	lds	r30, 0xB948	; 0x80b948 <__bss_end+0x7e3c>
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1792:	e4 54       	subi	r30, 0x44	; 68
    1794:	f5 4c       	sbci	r31, 0xC5	; 197
    1796:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1798:	e0 91 49 b9 	lds	r30, 0xB949	; 0x80b949 <__bss_end+0x7e3d>
    179c:	21 c0       	rjmp	.+66     	; 0x17e0 <simonLed+0xae>
    } else if (val == 3) {
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	99 f4       	brne	.+38     	; 0x17c8 <simonLed+0x96>
        iLED[WING[R][0]] = dimValue;
    17a2:	e0 91 40 b9 	lds	r30, 0xB940	; 0x80b940 <__bss_end+0x7e34>
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    17ac:	e4 54       	subi	r30, 0x44	; 68
    17ae:	f5 4c       	sbci	r31, 0xC5	; 197
    17b0:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    17b2:	e0 91 41 b9 	lds	r30, 0xB941	; 0x80b941 <__bss_end+0x7e35>
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    17bc:	e4 54       	subi	r30, 0x44	; 68
    17be:	f5 4c       	sbci	r31, 0xC5	; 197
    17c0:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    17c2:	e0 91 42 b9 	lds	r30, 0xB942	; 0x80b942 <__bss_end+0x7e36>
    17c6:	0c c0       	rjmp	.+24     	; 0x17e0 <simonLed+0xae>
    } else if (val == 4) {
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	81 f4       	brne	.+32     	; 0x17ec <simonLed+0xba>
        iLED[WING[R][3]] = dimValue;
    17cc:	e0 91 43 b9 	lds	r30, 0xB943	; 0x80b943 <__bss_end+0x7e37>
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    17d6:	e4 54       	subi	r30, 0x44	; 68
    17d8:	f5 4c       	sbci	r31, 0xC5	; 197
    17da:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    17dc:	e0 91 44 b9 	lds	r30, 0xB944	; 0x80b944 <__bss_end+0x7e38>
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    17e6:	e4 54       	subi	r30, 0x44	; 68
    17e8:	f5 4c       	sbci	r31, 0xC5	; 197
    17ea:	80 83       	st	Z, r24
    }
    simonTone(val);
}
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <BastetDictates>:

// Main game loop
uint8_t BastetDictates() {
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    if (CheckState(BASTET_COMPLETED))
    17f6:	8a e7       	ldi	r24, 0x7A	; 122
    17f8:	e2 dd       	rcall	.-1084   	; 0x13be <CheckState>
    17fa:	81 11       	cpse	r24, r1
    17fc:	b8 c0       	rjmp	.+368    	; 0x196e <BastetDictates+0x17c>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    17fe:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <gameNow>
    1802:	8d 7f       	andi	r24, 0xFD	; 253
    1804:	09 f0       	breq	.+2      	; 0x1808 <BastetDictates+0x16>
    1806:	b3 c0       	rjmp	.+358    	; 0x196e <BastetDictates+0x17c>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    1808:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <simonGameState>
    180c:	81 11       	cpse	r24, r1
    180e:	22 c0       	rjmp	.+68     	; 0x1854 <BastetDictates+0x62>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    1810:	20 91 af 3a 	lds	r18, 0x3AAF	; 0x803aaf <adcPhot>
    1814:	30 91 b0 3a 	lds	r19, 0x3AB0	; 0x803ab0 <adcPhot+0x1>
    1818:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <adcTemp>
    181c:	90 91 e8 3a 	lds	r25, 0x3AE8	; 0x803ae8 <adcTemp+0x1>
    1820:	82 0f       	add	r24, r18
    1822:	8f 73       	andi	r24, 0x3F	; 63
    1824:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1828:	c0 e0       	ldi	r28, 0x00	; 0
    182a:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <simonPos>
    182e:	c8 17       	cp	r28, r24
    1830:	18 f4       	brcc	.+6      	; 0x1838 <BastetDictates+0x46>
    1832:	97 dc       	rcall	.-1746   	; 0x1162 <lfsr>
    1834:	cf 5f       	subi	r28, 0xFF	; 255
    1836:	f9 cf       	rjmp	.-14     	; 0x182a <BastetDictates+0x38>
    1838:	c2 e5       	ldi	r28, 0x52	; 82

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    183a:	d8 e3       	ldi	r29, 0x38	; 56
    183c:	92 dc       	rcall	.-1756   	; 0x1162 <lfsr>
    183e:	83 70       	andi	r24, 0x03	; 3
    1840:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1842:	88 e3       	ldi	r24, 0x38	; 56
    1844:	c2 36       	cpi	r28, 0x62	; 98
    1846:	d8 07       	cpc	r29, r24
    1848:	c9 f7       	brne	.-14     	; 0x183c <BastetDictates+0x4a>
            simonState[i] = (lfsr() % 4);
        }
        simonPos = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
        simonGameState = BASTET_GAME_START;
    1850:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState) {
    1854:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <simonGameState>
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	29 f4       	brne	.+10     	; 0x1866 <BastetDictates+0x74>
        // TODO start animu
        simonGameState = BASTET_GAME_SHOW_PATTERN;
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <simonGameState>
        simonTimer = 0;
    1862:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <simonTimer>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1866:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <simonGameState>
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	d9 f4       	brne	.+54     	; 0x18a4 <BastetDictates+0xb2>
        // assuming 15Hz
        uint8_t pos = simonTimer / (15 - (simonPos>>1));
    186e:	20 91 28 38 	lds	r18, 0x3828	; 0x803828 <simonPos>
    1872:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <simonTimer>
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	32 2f       	mov	r19, r18
    187a:	36 95       	lsr	r19
    187c:	6f e0       	ldi	r22, 0x0F	; 15
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	63 1b       	sub	r22, r19
    1882:	71 09       	sbc	r23, r1
    1884:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__divmodhi4>
        if (pos > simonPos) {
    1888:	26 17       	cp	r18, r22
    188a:	30 f4       	brcc	.+12     	; 0x1898 <BastetDictates+0xa6>
            simonGameState = BASTET_GAME_INPUT;
    188c:	85 e0       	ldi	r24, 0x05	; 5
    188e:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <simonGameState>
            simonLed(0);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	4e df       	rcall	.-356    	; 0x1732 <simonLed>
            return 0;
    1896:	6b c0       	rjmp	.+214    	; 0x196e <BastetDictates+0x17c>
        }
        simonLed(simonState[pos]);
    1898:	77 27       	eor	r23, r23
    189a:	fb 01       	movw	r30, r22
    189c:	ee 5a       	subi	r30, 0xAE	; 174
    189e:	f7 4c       	sbci	r31, 0xC7	; 199
    18a0:	80 81       	ld	r24, Z
    18a2:	47 df       	rcall	.-370    	; 0x1732 <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    18a4:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <simonGameState>
    18a8:	85 30       	cpi	r24, 0x05	; 5
    18aa:	09 f0       	breq	.+2      	; 0x18ae <BastetDictates+0xbc>
    18ac:	4e c0       	rjmp	.+156    	; 0x194a <BastetDictates+0x158>
        uint8_t choice = 0;
        if ((buttonState & 0xf0)&&(buttonState < 0xff)) {
    18ae:	e0 91 09 38 	lds	r30, 0x3809	; 0x803809 <buttonState>
    18b2:	8e 2f       	mov	r24, r30
    18b4:	80 7f       	andi	r24, 0xF0	; 240
    18b6:	c9 f1       	breq	.+114    	; 0x192a <BastetDictates+0x138>
    18b8:	ef 3f       	cpi	r30, 0xFF	; 255
    18ba:	b9 f1       	breq	.+110    	; 0x192a <BastetDictates+0x138>
    18bc:	ef 70       	andi	r30, 0x0F	; 15
    18be:	e1 50       	subi	r30, 0x01	; 1
    18c0:	e8 30       	cpi	r30, 0x08	; 8
    18c2:	98 f5       	brcc	.+102    	; 0x192a <BastetDictates+0x138>
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	e4 59       	subi	r30, 0x94	; 148
    18c8:	f6 44       	sbci	r31, 0x46	; 70
    18ca:	c0 81       	ld	r28, Z
                    break;
            }
        }

        //Button pressed
        if (choice > 0) {
    18cc:	cc 23       	and	r28, r28
    18ce:	69 f1       	breq	.+90     	; 0x192a <BastetDictates+0x138>
            gameNow = BASTET;
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <gameNow>
            if (simonProcessed == 0) {
    18d6:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <simonProcessed>
    18da:	81 11       	cpse	r24, r1
                simonTimer = 0;
    18dc:	43 c0       	rjmp	.+134    	; 0x1964 <BastetDictates+0x172>
    18de:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <simonTimer>
                simonLed(choice);
    18e2:	8c 2f       	mov	r24, r28
    18e4:	26 df       	rcall	.-436    	; 0x1732 <simonLed>
                // TODO something timer something 
                if (simonState[simonInputPos]+1 == choice) {
    18e6:	40 91 51 38 	lds	r20, 0x3851	; 0x803851 <simonInputPos>
    18ea:	e4 2f       	mov	r30, r20
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	ee 5a       	subi	r30, 0xAE	; 174
    18f0:	f7 4c       	sbci	r31, 0xC7	; 199
    18f2:	20 81       	ld	r18, Z
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	8c 2f       	mov	r24, r28
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	28 17       	cp	r18, r24
    1900:	39 07       	cpc	r19, r25
    1902:	21 f4       	brne	.+8      	; 0x190c <BastetDictates+0x11a>
                    // TODO correct sound
                    simonInputPos++;
    1904:	4f 5f       	subi	r20, 0xFF	; 255
    1906:	40 93 51 38 	sts	0x3851, r20	; 0x803851 <simonInputPos>
                } else {
                    // TODO fail sound
                    simonInputPos = 0;
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <BastetDictates+0x126>
    190c:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <simonInputPos>
                    gameNow = TEXT;
    1910:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <gameNow>
                    simonLed(0);
    1914:	80 e0       	ldi	r24, 0x00	; 0
                }

                if (simonInputPos == BASTET_LENGTH) {
    1916:	0d df       	rcall	.-486    	; 0x1732 <simonLed>
    1918:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <simonInputPos>
    191c:	80 31       	cpi	r24, 0x10	; 16
                    // TODO win animu
                    UpdateState(BASTET_COMPLETED);
    191e:	a9 f4       	brne	.+42     	; 0x194a <BastetDictates+0x158>
    1920:	8a e7       	ldi	r24, 0x7A	; 122
    1922:	43 dd       	rcall	.-1402   	; 0x13aa <UpdateState>
                    gameNow = TEXT;
    1924:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <gameNow>
    1928:	10 c0       	rjmp	.+32     	; 0x194a <BastetDictates+0x158>
                }
            }
        
        //Button released, next or reset!
        } else {    
            if (simonInputPos == simonPos) {
    192a:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <simonInputPos>
    192e:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <simonPos>
    1932:	89 13       	cpse	r24, r25
    1934:	08 c0       	rjmp	.+16     	; 0x1946 <BastetDictates+0x154>
                simonPos++;
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
                simonInputPos = 0;
    193c:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <simonInputPos>
                simonGameState = BASTET_GAME_SHOW_PATTERN;
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <simonGameState>
            }                    
            simonProcessed = 0;
    1946:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <simonProcessed>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    194a:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <simonGameState>
    194e:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    1950:	49 f4       	brne	.+18     	; 0x1964 <BastetDictates+0x172>
    1952:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <simonTimer>
    1956:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    1958:	28 f0       	brcs	.+10     	; 0x1964 <BastetDictates+0x172>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	ea de       	rcall	.-556    	; 0x1732 <simonLed>
            simonGameState = BASTET_GAME_INPUT;
    195e:	85 e0       	ldi	r24, 0x05	; 5
    1960:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <simonGameState>
        }
    }

    ++simonTimer;
    1964:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <simonTimer>
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <simonTimer>
    return 0;
}
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	62 97       	sbiw	r28, 0x12	; 18
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	8a 8b       	std	Y+18, r24	; 0x12
    1988:	80 e1       	ldi	r24, 0x10	; 16
    198a:	e4 e1       	ldi	r30, 0x14	; 20
    198c:	f9 eb       	ldi	r31, 0xB9	; 185
    198e:	de 01       	movw	r26, r28
    1990:	11 96       	adiw	r26, 0x01	; 1
    1992:	01 90       	ld	r0, Z+
    1994:	0d 92       	st	X+, r0
    1996:	8a 95       	dec	r24
    1998:	e1 f7       	brne	.-8      	; 0x1992 <Cheat+0x1c>
    199a:	fe 01       	movw	r30, r28
    199c:	31 96       	adiw	r30, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	21 91       	ld	r18, Z+
    19a4:	31 91       	ld	r19, Z+
    19a6:	26 17       	cp	r18, r22
    19a8:	37 07       	cpc	r19, r23
    19aa:	09 f4       	brne	.+2      	; 0x19ae <Cheat+0x38>
    19ac:	89 2f       	mov	r24, r25
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	98 30       	cpi	r25, 0x08	; 8
    19b2:	b9 f7       	brne	.-18     	; 0x19a2 <Cheat+0x2c>
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	10 f0       	brcs	.+4      	; 0x19bc <Cheat+0x46>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	12 c0       	rjmp	.+36     	; 0x19e0 <Cheat+0x6a>
    19bc:	18 e1       	ldi	r17, 0x18	; 24
    19be:	18 0f       	add	r17, r24
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	be 01       	movw	r22, r28
    19c4:	6f 5e       	subi	r22, 0xEF	; 239
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	81 2f       	mov	r24, r17
    19ca:	f7 da       	rcall	.-2578   	; 0xfba <EERead>
    19cc:	89 89       	ldd	r24, Y+17	; 0x11
    19ce:	8f 3f       	cpi	r24, 0xFF	; 255
    19d0:	99 f7       	brne	.-26     	; 0x19b8 <Cheat+0x42>
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	be 01       	movw	r22, r28
    19d6:	6e 5e       	subi	r22, 0xEE	; 238
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	81 2f       	mov	r24, r17
    19dc:	fe da       	rcall	.-2564   	; 0xfda <EEWrite>
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	62 96       	adiw	r28, 0x12	; 18
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	08 95       	ret

000019ee <DecryptData>:
    19ee:	f9 01       	movw	r30, r18
    19f0:	9c 01       	movw	r18, r24
    19f2:	2e 1b       	sub	r18, r30
    19f4:	3f 0b       	sbc	r19, r31
    19f6:	88 e0       	ldi	r24, 0x08	; 8
    19f8:	48 9f       	mul	r20, r24
    19fa:	a0 01       	movw	r20, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	4a 51       	subi	r20, 0x1A	; 26
    1a00:	56 44       	sbci	r21, 0x46	; 70
    1a02:	66 23       	and	r22, r22
    1a04:	69 f0       	breq	.+26     	; 0x1a20 <DecryptData+0x32>
    1a06:	df 01       	movw	r26, r30
    1a08:	a2 0f       	add	r26, r18
    1a0a:	b3 1f       	adc	r27, r19
    1a0c:	a7 70       	andi	r26, 0x07	; 7
    1a0e:	bb 27       	eor	r27, r27
    1a10:	a4 0f       	add	r26, r20
    1a12:	b5 1f       	adc	r27, r21
    1a14:	80 81       	ld	r24, Z
    1a16:	9c 91       	ld	r25, X
    1a18:	98 27       	eor	r25, r24
    1a1a:	91 93       	st	Z+, r25
    1a1c:	61 50       	subi	r22, 0x01	; 1
    1a1e:	f1 cf       	rjmp	.-30     	; 0x1a02 <DecryptData+0x14>
    1a20:	08 95       	ret

00001a22 <UnflipData>:
    1a22:	26 2f       	mov	r18, r22
    1a24:	fb 01       	movw	r30, r22
    1a26:	35 e5       	ldi	r19, 0x55	; 85
    1a28:	9e 2f       	mov	r25, r30
    1a2a:	92 1b       	sub	r25, r18
    1a2c:	98 17       	cp	r25, r24
    1a2e:	28 f4       	brcc	.+10     	; 0x1a3a <UnflipData+0x18>
    1a30:	90 81       	ld	r25, Z
    1a32:	92 95       	swap	r25
    1a34:	93 27       	eor	r25, r19
    1a36:	91 93       	st	Z+, r25
    1a38:	f7 cf       	rjmp	.-18     	; 0x1a28 <UnflipData+0x6>
    1a3a:	08 95       	ret

00001a3c <ExtEERead>:
    1a3c:	af 92       	push	r10
    1a3e:	bf 92       	push	r11
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <ExtEERead+0x16>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	d6 2e       	mov	r13, r22
    1a58:	c4 2e       	mov	r12, r20
    1a5a:	59 01       	movw	r10, r18
    1a5c:	7c 01       	movw	r14, r24
    1a5e:	e8 94       	clt
    1a60:	f7 f8       	bld	r15, 7
    1a62:	f9 82       	std	Y+1, r15	; 0x01
    1a64:	ea 82       	std	Y+2, r14	; 0x02
    1a66:	06 2f       	mov	r16, r22
    1a68:	42 e0       	ldi	r20, 0x02	; 2
    1a6a:	be 01       	movw	r22, r28
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	80 e5       	ldi	r24, 0x50	; 80
    1a72:	0e 94 4a 02 	call	0x494	; 0x494 <I2C_read_bytes>
    1a76:	18 2f       	mov	r17, r24
    1a78:	81 11       	cpse	r24, r1
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <ExtEERead+0x4a>
    1a7c:	95 01       	movw	r18, r10
    1a7e:	4c 2d       	mov	r20, r12
    1a80:	6d 2d       	mov	r22, r13
    1a82:	c7 01       	movw	r24, r14
    1a84:	b4 df       	rcall	.-152    	; 0x19ee <DecryptData>
    1a86:	81 2f       	mov	r24, r17
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	cf 90       	pop	r12
    1a9c:	bf 90       	pop	r11
    1a9e:	af 90       	pop	r10
    1aa0:	08 95       	ret

00001aa2 <ClearTxAfter>:
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	88 30       	cpi	r24, 0x08	; 8
    1aa6:	30 f4       	brcc	.+12     	; 0x1ab4 <ClearTxAfter+0x12>
    1aa8:	e8 2f       	mov	r30, r24
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	e6 5c       	subi	r30, 0xC6	; 198
    1aae:	f5 4c       	sbci	r31, 0xC5	; 197
    1ab0:	10 82       	st	Z, r1
    1ab2:	f7 cf       	rjmp	.-18     	; 0x1aa2 <ClearTxAfter>
    1ab4:	08 95       	ret

00001ab6 <StartsWith>:
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	e9 2f       	mov	r30, r25
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	da 01       	movw	r26, r20
    1ac0:	ae 0f       	add	r26, r30
    1ac2:	bf 1f       	adc	r27, r31
    1ac4:	3c 91       	ld	r19, X
    1ac6:	e6 0f       	add	r30, r22
    1ac8:	f7 1f       	adc	r31, r23
    1aca:	31 11       	cpse	r19, r1
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <StartsWith+0x22>
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 81       	ld	r25, Z
    1ad2:	99 23       	and	r25, r25
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <StartsWith+0x32>
    1ad6:	07 c0       	rjmp	.+14     	; 0x1ae6 <StartsWith+0x30>
    1ad8:	20 81       	ld	r18, Z
    1ada:	22 23       	and	r18, r18
    1adc:	c1 f3       	breq	.-16     	; 0x1ace <StartsWith+0x18>
    1ade:	32 13       	cpse	r19, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <StartsWith+0x30>
    1ae2:	9f 5f       	subi	r25, 0xFF	; 255
    1ae4:	ea cf       	rjmp	.-44     	; 0x1aba <StartsWith+0x4>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	08 95       	ret

00001aea <PrepareSending>:
    1aea:	61 15       	cp	r22, r1
    1aec:	71 05       	cpc	r23, r1
    1aee:	51 f1       	breq	.+84     	; 0x1b44 <PrepareSending+0x5a>
    1af0:	e2 e4       	ldi	r30, 0x42	; 66
    1af2:	fa e3       	ldi	r31, 0x3A	; 58
    1af4:	aa e3       	ldi	r26, 0x3A	; 58
    1af6:	ba e3       	ldi	r27, 0x3A	; 58
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	6f 3f       	cpi	r22, 0xFF	; 255
    1afe:	71 05       	cpc	r23, r1
    1b00:	69 f0       	breq	.+26     	; 0x1b1c <PrepareSending+0x32>
    1b02:	60 f0       	brcs	.+24     	; 0x1b1c <PrepareSending+0x32>
    1b04:	81 93       	st	Z+, r24
    1b06:	91 93       	st	Z+, r25
    1b08:	3d 93       	st	X+, r19
    1b0a:	81 50       	subi	r24, 0x01	; 1
    1b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0e:	6f 5f       	subi	r22, 0xFF	; 255
    1b10:	71 09       	sbc	r23, r1
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	27 30       	cpi	r18, 0x07	; 7
    1b16:	91 f7       	brne	.-28     	; 0x1afc <PrepareSending+0x12>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	08 95       	ret
    1b1c:	e2 2f       	mov	r30, r18
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	df 01       	movw	r26, r30
    1b22:	aa 0f       	add	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	ae 5b       	subi	r26, 0xBE	; 190
    1b28:	b5 4c       	sbci	r27, 0xC5	; 197
    1b2a:	8d 93       	st	X+, r24
    1b2c:	9c 93       	st	X, r25
    1b2e:	e6 5c       	subi	r30, 0xC6	; 198
    1b30:	f5 4c       	sbci	r31, 0xC5	; 197
    1b32:	cb 01       	movw	r24, r22
    1b34:	6f ef       	ldi	r22, 0xFF	; 255
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	0e 94 3f 1c 	call	0x387e	; 0x387e <__udivmodhi4>
    1b3c:	80 83       	st	Z, r24
    1b3e:	40 93 38 3a 	sts	0x3A38, r20	; 0x803a38 <txTypeNow>
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <PrepareSending+0x64>
    1b44:	10 92 42 3a 	sts	0x3A42, r1	; 0x803a42 <txAddrList>
    1b48:	10 92 43 3a 	sts	0x3A43, r1	; 0x803a43 <txAddrList+0x1>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	82 2f       	mov	r24, r18
    1b50:	a8 df       	rcall	.-176    	; 0x1aa2 <ClearTxAfter>
    1b52:	10 92 39 3a 	sts	0x3A39, r1	; 0x803a39 <txAddrNow>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret

00001b5a <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	f9 01       	movw	r30, r18
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	e3 5f       	subi	r30, 0xF3	; 243
    1b6a:	f6 4c       	sbci	r31, 0xC6	; 198
    1b6c:	ab e5       	ldi	r26, 0x5B	; 91
    1b6e:	ba e7       	ldi	r27, 0x7A	; 122
    1b70:	a0 83       	st	Z, r26
    1b72:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1b74:	f9 01       	movw	r30, r18
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	e3 5b       	subi	r30, 0xB3	; 179
    1b7c:	f6 4c       	sbci	r31, 0xC6	; 198
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	60 83       	st	Z, r22
    1b84:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1b86:	22 0f       	add	r18, r18
    1b88:	33 1f       	adc	r19, r19
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	e3 57       	subi	r30, 0x73	; 115
    1b8e:	f6 4c       	sbci	r31, 0xC6	; 198
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	40 83       	st	Z, r20
    1b96:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b98:	21 e0       	ldi	r18, 0x01	; 1
    1b9a:	28 0f       	add	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	f9 01       	movw	r30, r18
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	e3 5f       	subi	r30, 0xF3	; 243
    1ba6:	f6 4c       	sbci	r31, 0xC6	; 198
    1ba8:	c4 e6       	ldi	r28, 0x64	; 100
    1baa:	da e7       	ldi	r29, 0x7A	; 122
    1bac:	c0 83       	st	Z, r28
    1bae:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	e3 5b       	subi	r30, 0xB3	; 179
    1bb8:	f6 4c       	sbci	r31, 0xC6	; 198
    1bba:	ca e0       	ldi	r28, 0x0A	; 10
    1bbc:	d0 e0       	ldi	r29, 0x00	; 0
    1bbe:	c0 83       	st	Z, r28
    1bc0:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	f9 01       	movw	r30, r18
    1bc8:	e3 57       	subi	r30, 0x73	; 115
    1bca:	f6 4c       	sbci	r31, 0xC6	; 198
    1bcc:	40 83       	st	Z, r20
    1bce:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1bd0:	e2 e0       	ldi	r30, 0x02	; 2
    1bd2:	e8 0f       	add	r30, r24
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	e3 5f       	subi	r30, 0xF3	; 243
    1bdc:	f6 4c       	sbci	r31, 0xC6	; 198
    1bde:	20 ef       	ldi	r18, 0xF0	; 240
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	20 83       	st	Z, r18
    1be4:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1be6:	23 e0       	ldi	r18, 0x03	; 3
    1be8:	28 0f       	add	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	f9 01       	movw	r30, r18
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	e3 5f       	subi	r30, 0xF3	; 243
    1bf4:	f6 4c       	sbci	r31, 0xC6	; 198
    1bf6:	a0 83       	st	Z, r26
    1bf8:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	e3 5b       	subi	r30, 0xB3	; 179
    1c02:	f6 4c       	sbci	r31, 0xC6	; 198
    1c04:	60 83       	st	Z, r22
    1c06:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1c08:	22 0f       	add	r18, r18
    1c0a:	33 1f       	adc	r19, r19
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	e3 57       	subi	r30, 0x73	; 115
    1c10:	f6 4c       	sbci	r31, 0xC6	; 198
    1c12:	40 83       	st	Z, r20
    1c14:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1c16:	24 e0       	ldi	r18, 0x04	; 4
    1c18:	28 0f       	add	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	e3 5f       	subi	r30, 0xF3	; 243
    1c24:	f6 4c       	sbci	r31, 0xC6	; 198
    1c26:	a7 e5       	ldi	r26, 0x57	; 87
    1c28:	ba e7       	ldi	r27, 0x7A	; 122
    1c2a:	a0 83       	st	Z, r26
    1c2c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1c2e:	f9 01       	movw	r30, r18
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	e3 5b       	subi	r30, 0xB3	; 179
    1c36:	f6 4c       	sbci	r31, 0xC6	; 198
    1c38:	60 83       	st	Z, r22
    1c3a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1c3c:	22 0f       	add	r18, r18
    1c3e:	33 1f       	adc	r19, r19
    1c40:	f9 01       	movw	r30, r18
    1c42:	e3 57       	subi	r30, 0x73	; 115
    1c44:	f6 4c       	sbci	r31, 0xC6	; 198
    1c46:	40 83       	st	Z, r20
    1c48:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    1c4a:	8b 5f       	subi	r24, 0xFB	; 251
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1c52:	af 92       	push	r10
    1c54:	bf 92       	push	r11
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	2c 97       	sbiw	r28, 0x0c	; 12
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	7c 01       	movw	r14, r24
    1c70:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    1c72:	9e 01       	movw	r18, r28
    1c74:	2f 5f       	subi	r18, 0xFF	; 255
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	6c e0       	ldi	r22, 0x0C	; 12
    1c7c:	80 96       	adiw	r24, 0x20	; 32
    1c7e:	de de       	rcall	.-580    	; 0x1a3c <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	98 27       	eor	r25, r24
    1c86:	89 27       	eor	r24, r25
    1c88:	98 27       	eor	r25, r24
    1c8a:	80 96       	adiw	r24, 0x20	; 32
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	80 83       	st	Z, r24
    1c90:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	98 27       	eor	r25, r24
    1c98:	89 27       	eor	r24, r25
    1c9a:	98 27       	eor	r25, r24
    1c9c:	80 96       	adiw	r24, 0x20	; 32
    1c9e:	82 83       	std	Z+2, r24	; 0x02
    1ca0:	93 83       	std	Z+3, r25	; 0x03
    1ca2:	de 01       	movw	r26, r28
    1ca4:	15 96       	adiw	r26, 0x05	; 5
    1ca6:	34 96       	adiw	r30, 0x04	; 4
    1ca8:	c8 01       	movw	r24, r16
    1caa:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1cac:	2d 91       	ld	r18, X+
    1cae:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    1cb0:	e8 17       	cp	r30, r24
    1cb2:	f9 07       	cpc	r31, r25
    1cb4:	d9 f7       	brne	.-10     	; 0x1cac <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1cb6:	fc e2       	ldi	r31, 0x2C	; 44
    1cb8:	ef 0e       	add	r14, r31
    1cba:	f1 1c       	adc	r15, r1
    1cbc:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1cbe:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    1cc0:	9e 01       	movw	r18, r28
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	c7 01       	movw	r24, r14
    1ccc:	b7 de       	rcall	.-658    	; 0x1a3c <ExtEERead>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	98 27       	eor	r25, r24
    1cd4:	89 27       	eor	r24, r25
    1cd6:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1cd8:	97 01       	movw	r18, r14
    1cda:	2e 5f       	subi	r18, 0xFE	; 254
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1cde:	43 e0       	ldi	r20, 0x03	; 3
    1ce0:	4d 15       	cp	r20, r13
    1ce2:	80 f4       	brcc	.+32     	; 0x1d04 <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1ce4:	ac 01       	movw	r20, r24
    1ce6:	41 50       	subi	r20, 0x01	; 1
    1ce8:	51 09       	sbc	r21, r1
    1cea:	f8 01       	movw	r30, r16
    1cec:	42 8f       	std	Z+26, r20	; 0x1a
    1cee:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1cf0:	f3 e0       	ldi	r31, 0x03	; 3
    1cf2:	ef 0e       	add	r14, r31
    1cf4:	f1 1c       	adc	r15, r1
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	e4 86       	std	Z+12, r14	; 0x0c
    1cfa:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1cfc:	4b 81       	ldd	r20, Y+3	; 0x03
    1cfe:	f5 01       	movw	r30, r10
    1d00:	44 a3       	std	Z+36, r20	; 0x24
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1d04:	f8 01       	movw	r30, r16
    1d06:	82 8f       	std	Z+26, r24	; 0x1a
    1d08:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1d0a:	24 87       	std	Z+12, r18	; 0x0c
    1d0c:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1d0e:	7c 01       	movw	r14, r24
    1d10:	e2 0e       	add	r14, r18
    1d12:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1d14:	d3 94       	inc	r13
    1d16:	0e 5f       	subi	r16, 0xFE	; 254
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	ff ef       	ldi	r31, 0xFF	; 255
    1d1c:	af 1a       	sub	r10, r31
    1d1e:	bf 0a       	sbc	r11, r31
    1d20:	47 e0       	ldi	r20, 0x07	; 7
    1d22:	d4 12       	cpse	r13, r20
    1d24:	cd cf       	rjmp	.-102    	; 0x1cc0 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1d26:	2c 96       	adiw	r28, 0x0c	; 12
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	bf 90       	pop	r11
    1d3c:	af 90       	pop	r10
    1d3e:	08 95       	ret

00001d40 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1d40:	cf 92       	push	r12
    1d42:	df 92       	push	r13
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	a0 97       	sbiw	r28, 0x20	; 32
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1d5c:	7c 01       	movw	r14, r24
    1d5e:	20 e2       	ldi	r18, 0x20	; 32
    1d60:	e2 0e       	add	r14, r18
    1d62:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1d64:	9e 01       	movw	r18, r28
    1d66:	2f 5f       	subi	r18, 0xFF	; 255
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	62 e0       	ldi	r22, 0x02	; 2
    1d6e:	8c 96       	adiw	r24, 0x2c	; 44
    1d70:	65 de       	rcall	.-822    	; 0x1a3c <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    1d72:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    1d74:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1d76:	11 23       	and	r17, r17
    1d78:	51 f1       	breq	.+84     	; 0x1dce <CheckLetter+0x8e>
    1d7a:	01 2f       	mov	r16, r17
    1d7c:	11 32       	cpi	r17, 0x21	; 33
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <CheckLetter+0x42>
    1d80:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    1d82:	9e 01       	movw	r18, r28
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	60 2f       	mov	r22, r16
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	0e 96       	adiw	r24, 0x0e	; 14
    1d90:	55 de       	rcall	.-854    	; 0x1a3c <ExtEERead>
    1d92:	fe 01       	movw	r30, r28
    1d94:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1d96:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1d98:	dd 20       	and	r13, r13
    1d9a:	61 f0       	breq	.+24     	; 0x1db4 <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1d9c:	e1 e0       	ldi	r30, 0x01	; 1
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	ec 0f       	add	r30, r28
    1da2:	fd 1f       	adc	r31, r29
    1da4:	e8 0f       	add	r30, r24
    1da6:	f1 1d       	adc	r31, r1
    1da8:	90 81       	ld	r25, Z
    1daa:	90 62       	ori	r25, 0x20	; 32
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	9c 11       	cpse	r25, r12
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <CheckLetter+0x8e>
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    1db4:	91 91       	ld	r25, Z+
    1db6:	dd 24       	eor	r13, r13
    1db8:	d3 94       	inc	r13
    1dba:	9b 35       	cpi	r25, 0x5B	; 91
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <CheckLetter+0x80>
    1dbe:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	80 17       	cp	r24, r16
    1dc4:	48 f3       	brcs	.-46     	; 0x1d98 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1dc6:	e0 0e       	add	r14, r16
    1dc8:	f1 1c       	adc	r15, r1
        x -= max;
    1dca:	10 1b       	sub	r17, r16
    1dcc:	d4 cf       	rjmp	.-88     	; 0x1d76 <CheckLetter+0x36>
    }
    return 0;
    1dce:	80 e0       	ldi	r24, 0x00	; 0
}
    1dd0:	a0 96       	adiw	r28, 0x20	; 32
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	ff 90       	pop	r15
    1de0:	ef 90       	pop	r14
    1de2:	df 90       	pop	r13
    1de4:	cf 90       	pop	r12
    1de6:	08 95       	ret

00001de8 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <FindChild+0x14>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <FindChild+0x16>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	d6 2e       	mov	r13, r22
    1e04:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1e06:	9e 01       	movw	r18, r28
    1e08:	2f 5f       	subi	r18, 0xFF	; 255
    1e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	64 e0       	ldi	r22, 0x04	; 4
    1e10:	80 96       	adiw	r24, 0x20	; 32
    1e12:	14 de       	rcall	.-984    	; 0x1a3c <ExtEERead>
    1e14:	e9 80       	ldd	r14, Y+1	; 0x01
    1e16:	fa 80       	ldd	r15, Y+2	; 0x02
    1e18:	fe 24       	eor	r15, r14
    1e1a:	ef 24       	eor	r14, r15
    1e1c:	fe 24       	eor	r15, r14
    1e1e:	0b 81       	ldd	r16, Y+3	; 0x03
    1e20:	1c 81       	ldd	r17, Y+4	; 0x04
    1e22:	10 27       	eor	r17, r16
    1e24:	01 27       	eor	r16, r17
    1e26:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    1e28:	0e 15       	cp	r16, r14
    1e2a:	1f 05       	cpc	r17, r15
    1e2c:	30 f5       	brcc	.+76     	; 0x1e7a <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    1e2e:	a0 16       	cp	r10, r16
    1e30:	b1 06       	cpc	r11, r17
    1e32:	58 f0       	brcs	.+22     	; 0x1e4a <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1e34:	9e 01       	movw	r18, r28
    1e36:	2f 5f       	subi	r18, 0xFF	; 255
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	c8 01       	movw	r24, r16
    1e40:	80 96       	adiw	r24, 0x20	; 32
    1e42:	fc dd       	rcall	.-1032   	; 0x1a3c <ExtEERead>
    1e44:	09 81       	ldd	r16, Y+1	; 0x01
    1e46:	1a 81       	ldd	r17, Y+2	; 0x02
    1e48:	ec cf       	rjmp	.-40     	; 0x1e22 <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    1e4a:	9e 01       	movw	r18, r28
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	c8 01       	movw	r24, r16
    1e56:	85 96       	adiw	r24, 0x25	; 37
    1e58:	f1 dd       	rcall	.-1054   	; 0x1a3c <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1e60:	d1 10       	cpse	r13, r1
    1e62:	05 c0       	rjmp	.+10     	; 0x1e6e <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1e64:	0d c0       	rjmp	.+26     	; 0x1e80 <FindChild+0x98>
    1e66:	ab da       	rcall	.-2730   	; 0x13be <CheckState>
    1e68:	81 11       	cpse	r24, r1
    1e6a:	fa cf       	rjmp	.-12     	; 0x1e60 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1e6c:	e3 cf       	rjmp	.-58     	; 0x1e34 <FindChild+0x4c>
    1e6e:	6d 2d       	mov	r22, r13
    1e70:	c8 01       	movw	r24, r16
    1e72:	66 df       	rcall	.-308    	; 0x1d40 <CheckLetter>
    1e74:	88 23       	and	r24, r24
    1e76:	f1 f2       	breq	.-68     	; 0x1e34 <FindChild+0x4c>
    1e78:	03 c0       	rjmp	.+6      	; 0x1e80 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <FindChild+0x9a>
    1e80:	c8 01       	movw	r24, r16
}
    1e82:	24 96       	adiw	r28, 0x04	; 4
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	08 95       	ret

00001e9c <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1e9c:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1e9e:	9f e9       	ldi	r25, 0x9F	; 159
    1ea0:	98 0f       	add	r25, r24
    1ea2:	9a 31       	cpi	r25, 0x1A	; 26
    1ea4:	38 f0       	brcs	.+14     	; 0x1eb4 <InpOkChk+0x18>
    1ea6:	90 ed       	ldi	r25, 0xD0	; 208
    1ea8:	98 0f       	add	r25, r24
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	9a 30       	cpi	r25, 0x0A	; 10
    1eae:	18 f0       	brcs	.+6      	; 0x1eb6 <InpOkChk+0x1a>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	08 95       	ret
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1eb6:	08 95       	ret

00001eb8 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1ec2:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    1ec4:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	ed 0f       	add	r30, r29
    1eca:	f1 1d       	adc	r31, r1
    1ecc:	20 81       	ld	r18, Z
    1ece:	8c 2f       	mov	r24, r28
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	22 23       	and	r18, r18
    1ed4:	51 f0       	breq	.+20     	; 0x1eea <CleanInput+0x32>
        data[cnt] = data[x];
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	a8 0f       	add	r26, r24
    1eda:	b9 1f       	adc	r27, r25
    1edc:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1ede:	80 81       	ld	r24, Z
    1ee0:	dd df       	rcall	.-70     	; 0x1e9c <InpOkChk>
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1ee6:	df 5f       	subi	r29, 0xFF	; 255
    1ee8:	ee cf       	rjmp	.-36     	; 0x1ec6 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1eea:	f8 01       	movw	r30, r16
    1eec:	e8 0f       	add	r30, r24
    1eee:	f9 1f       	adc	r31, r25
    1ef0:	10 82       	st	Z, r1
    return cnt;
}
    1ef2:	8c 2f       	mov	r24, r28
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	08 95       	ret

00001efe <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1efe:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    1f00:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    1f04:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    1f08:	89 2b       	or	r24, r25
    1f0a:	99 f4       	brne	.+38     	; 0x1f32 <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    1f0c:	80 91 11 3a 	lds	r24, 0x3A11	; 0x803a11 <currObj+0x4>
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    1f16:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
        auStart = ((effect&0xE0)>0);
    1f1a:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <effect>
    1f1e:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <effect+0x1>
    1f22:	80 7e       	andi	r24, 0xE0	; 224
    1f24:	99 27       	eor	r25, r25
    1f26:	21 e0       	ldi	r18, 0x01	; 1
    1f28:	89 2b       	or	r24, r25
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <CheckSend+0x30>
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	20 93 32 38 	sts	0x3832, r18	; 0x803832 <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    1f32:	20 91 39 3a 	lds	r18, 0x3A39	; 0x803a39 <txAddrNow>
    1f36:	28 30       	cpi	r18, 0x08	; 8
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <CheckSend+0x3e>
    1f3a:	47 c0       	rjmp	.+142    	; 0x1fca <CheckSend+0xcc>
    1f3c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    1f40:	88 23       	and	r24, r24
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <CheckSend+0x48>
    1f44:	42 c0       	rjmp	.+132    	; 0x1fca <CheckSend+0xcc>
        if (txStrLen[txAddrNow] == 0){
    1f46:	82 2f       	mov	r24, r18
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e6 5c       	subi	r30, 0xC6	; 198
    1f4e:	f5 4c       	sbci	r31, 0xC5	; 197
    1f50:	e0 81       	ld	r30, Z
    1f52:	e1 11       	cpse	r30, r1
    1f54:	06 c0       	rjmp	.+12     	; 0x1f62 <CheckSend+0x64>
            txPart = 0;
    1f56:	10 92 fa 38 	sts	0x38FA, r1	; 0x8038fa <txPart.3937>
            txAddrNow = TXLISTLEN;
    1f5a:	88 e0       	ldi	r24, 0x08	; 8
    1f5c:	80 93 39 3a 	sts	0x3A39, r24	; 0x803a39 <txAddrNow>
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <CheckSend+0xbc>
        } else if (txPart < txStrLen[txAddrNow]){
    1f62:	50 91 fa 38 	lds	r21, 0x38FA	; 0x8038fa <txPart.3937>
    1f66:	5e 17       	cp	r21, r30
    1f68:	50 f5       	brcc	.+84     	; 0x1fbe <CheckSend+0xc0>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    1f6a:	ce 2f       	mov	r28, r30
    1f6c:	c5 1b       	sub	r28, r21
    1f6e:	c1 32       	cpi	r28, 0x21	; 33
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <CheckSend+0x76>
    1f72:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	fc 01       	movw	r30, r24
    1f7a:	ee 5b       	subi	r30, 0xBE	; 190
    1f7c:	f5 4c       	sbci	r31, 0xC5	; 197
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	2b ee       	ldi	r18, 0xEB	; 235
    1f84:	3a e3       	ldi	r19, 0x3A	; 58
    1f86:	40 91 38 3a 	lds	r20, 0x3A38	; 0x803a38 <txTypeNow>
    1f8a:	6c 2f       	mov	r22, r28
    1f8c:	85 0f       	add	r24, r21
    1f8e:	91 1d       	adc	r25, r1
    1f90:	55 dd       	rcall	.-1366   	; 0x1a3c <ExtEERead>
            txPart += EEreadLength;
    1f92:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <txPart.3937>
    1f96:	8c 0f       	add	r24, r28
    1f98:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1f9c:	ec 2f       	mov	r30, r28
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	e5 51       	subi	r30, 0x15	; 21
    1fa2:	f5 4c       	sbci	r31, 0xC5	; 197
    1fa4:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    1fa6:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <txBuffer>
    1faa:	81 11       	cpse	r24, r1
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <CheckSend+0xb6>
    1fae:	8b ed       	ldi	r24, 0xDB	; 219
    1fb0:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <txBuffer>
            SerSend(&txBuffer[0]);
    1fb4:	8b ee       	ldi	r24, 0xEB	; 235
    1fb6:	9a e3       	ldi	r25, 0x3A	; 58
    1fb8:	38 d8       	rcall	.-3984   	; 0x102a <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	0b c0       	rjmp	.+22     	; 0x1fd4 <CheckSend+0xd6>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1fbe:	10 92 fa 38 	sts	0x38FA, r1	; 0x8038fa <txPart.3937>
            ++txAddrNow;
    1fc2:	2f 5f       	subi	r18, 0xFF	; 255
    1fc4:	20 93 39 3a 	sts	0x3A39, r18	; 0x803a39 <txAddrNow>
    1fc8:	f8 cf       	rjmp	.-16     	; 0x1fba <CheckSend+0xbc>
        }
    } else if (serTxDone) return 0; //All is sent!
    1fca:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <serTxDone>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	91 11       	cpse	r25, r1
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    1fd4:	cf 91       	pop	r28
    1fd6:	08 95       	ret

00001fd8 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1fdc:	c0 91 0c 39 	lds	r28, 0x390C	; 0x80390c <responseList>
    1fe0:	cc 23       	and	r28, r28
    1fe2:	e9 f1       	breq	.+122    	; 0x205e <CheckResponse+0x86>
        --responseList;
    1fe4:	c1 50       	subi	r28, 0x01	; 1
    1fe6:	c0 93 0c 39 	sts	0x390C, r28	; 0x80390c <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1fea:	d0 91 f9 38 	lds	r29, 0x38F9	; 0x8038f9 <number.3941>
    1fee:	2d 2f       	mov	r18, r29
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	e3 5f       	subi	r30, 0xF3	; 243
    1ffa:	f6 4c       	sbci	r31, 0xC6	; 198
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	80 3f       	cpi	r24, 0xF0	; 240
    2002:	4f ef       	ldi	r20, 0xFF	; 255
    2004:	94 07       	cpc	r25, r20
    2006:	51 f4       	brne	.+20     	; 0x201c <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2008:	60 91 27 3a 	lds	r22, 0x3A27	; 0x803a27 <currObj+0x1a>
    200c:	70 91 28 3a 	lds	r23, 0x3A28	; 0x803a28 <currObj+0x1b>
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	80 91 19 3a 	lds	r24, 0x3A19	; 0x803a19 <currObj+0xc>
    2016:	90 91 1a 3a 	lds	r25, 0x3A1A	; 0x803a1a <currObj+0xd>
    201a:	0d c0       	rjmp	.+26     	; 0x2036 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    201c:	d9 01       	movw	r26, r18
    201e:	aa 0f       	add	r26, r26
    2020:	bb 1f       	adc	r27, r27
    2022:	a3 57       	subi	r26, 0x73	; 115
    2024:	b6 4c       	sbci	r27, 0xC6	; 198
    2026:	22 0f       	add	r18, r18
    2028:	33 1f       	adc	r19, r19
    202a:	f9 01       	movw	r30, r18
    202c:	e3 5b       	subi	r30, 0xB3	; 179
    202e:	f6 4c       	sbci	r31, 0xC6	; 198
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	4c 91       	ld	r20, X
    2036:	59 dd       	rcall	.-1358   	; 0x1aea <PrepareSending>
        }
        ++number;
    2038:	df 5f       	subi	r29, 0xFF	; 255
    203a:	d0 93 f9 38 	sts	0x38F9, r29	; 0x8038f9 <number.3941>

        if (responseList == 0) {
    203e:	c1 11       	cpse	r28, r1
    2040:	0d c0       	rjmp	.+26     	; 0x205c <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    2042:	80 91 11 3a 	lds	r24, 0x3A11	; 0x803a11 <currObj+0x4>
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    204c:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
            RXCNT = 0;
    2050:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    2052:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <serRxDone>
            number = 0;
    2056:	10 92 f9 38 	sts	0x38F9, r1	; 0x8038f9 <number.3941>
    205a:	01 c0       	rjmp	.+2      	; 0x205e <CheckResponse+0x86>
            return 0;
        }
        return 1;
    205c:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    205e:	8c 2f       	mov	r24, r28
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2066:	4f 92       	push	r4
    2068:	5f 92       	push	r5
    206a:	6f 92       	push	r6
    206c:	7f 92       	push	r7
    206e:	8f 92       	push	r8
    2070:	9f 92       	push	r9
    2072:	af 92       	push	r10
    2074:	bf 92       	push	r11
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	a1 97       	sbiw	r28, 0x21	; 33
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    2092:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    2096:	8f 3f       	cpi	r24, 0xFF	; 255
    2098:	49 f4       	brne	.+18     	; 0x20ac <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    209a:	6d e0       	ldi	r22, 0x0D	; 13
    209c:	7a e3       	ldi	r23, 0x3A	; 58
    209e:	80 91 cd 39 	lds	r24, 0x39CD	; 0x8039cd <route>
    20a2:	90 91 ce 39 	lds	r25, 0x39CE	; 0x8039ce <route+0x1>
    20a6:	d5 dd       	rcall	.-1110   	; 0x1c52 <PopulateObject>
        currDepth = 0;
    20a8:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <currDepth>
    }

    if (serRxDone){
    20ac:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <serRxDone>
    20b0:	88 23       	and	r24, r24
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <CheckInput+0x50>
    20b4:	63 c2       	rjmp	.+1222   	; 0x257c <CheckInput+0x516>

        //Special input requested from user by game
        if (specialInput[0]){
    20b6:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <specialInput>
    20ba:	88 23       	and	r24, r24
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <CheckInput+0x5a>
    20be:	57 c0       	rjmp	.+174    	; 0x216e <CheckInput+0x108>
            specialPassed = 0;
    20c0:	10 92 fb 38 	sts	0x38FB, r1	; 0x8038fb <specialPassed>
            data[0] = 'a';
    20c4:	81 e6       	ldi	r24, 0x61	; 97
    20c6:	f8 01       	movw	r30, r16
    20c8:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    20ca:	6c ef       	ldi	r22, 0xFC	; 252
    20cc:	78 e3       	ldi	r23, 0x38	; 56
    20ce:	87 e6       	ldi	r24, 0x67	; 103
    20d0:	9a e3       	ldi	r25, 0x3A	; 58
    20d2:	f1 dc       	rcall	.-1566   	; 0x1ab6 <StartsWith>
    20d4:	f8 2e       	mov	r15, r24
    20d6:	88 23       	and	r24, r24
    20d8:	21 f0       	breq	.+8      	; 0x20e2 <CheckInput+0x7c>
                specialPassed = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 fb 38 	sts	0x38FB, r24	; 0x8038fb <specialPassed>
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <CheckInput+0x84>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    20e2:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <specialInput>
    20e6:	81 33       	cpi	r24, 0x31	; 49
    20e8:	11 f0       	breq	.+4      	; 0x20ee <CheckInput+0x88>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    20ea:	f1 2c       	mov	r15, r1
    20ec:	49 c2       	rjmp	.+1170   	; 0x2580 <CheckInput+0x51a>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    20ee:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <specialInput+0x2>
    20f2:	81 11       	cpse	r24, r1
    20f4:	fa cf       	rjmp	.-12     	; 0x20ea <CheckInput+0x84>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    20f6:	87 e6       	ldi	r24, 0x67	; 103
    20f8:	9a e3       	ldi	r25, 0x3A	; 58
    20fa:	de de       	rcall	.-580    	; 0x1eb8 <CleanInput>
                specialPassed = 2;
    20fc:	92 e0       	ldi	r25, 0x02	; 2
    20fe:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <specialPassed>
                data[1] = 0;
    2102:	f8 01       	movw	r30, r16
    2104:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	80 f3       	brcs	.-32     	; 0x20ea <CheckInput+0x84>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    210a:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
    210e:	81 33       	cpi	r24, 0x31	; 49
    2110:	61 f0       	breq	.+24     	; 0x212a <CheckInput+0xc4>
    2112:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
    2116:	82 33       	cpi	r24, 0x32	; 50
    2118:	41 f0       	breq	.+16     	; 0x212a <CheckInput+0xc4>
    211a:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
    211e:	83 33       	cpi	r24, 0x33	; 51
    2120:	21 f0       	breq	.+8      	; 0x212a <CheckInput+0xc4>
    2122:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
    2126:	84 33       	cpi	r24, 0x34	; 52
    2128:	01 f7       	brne	.-64     	; 0x20ea <CheckInput+0x84>
                        serRx[1] |= 0x20;
    212a:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <serRx+0x1>
    212e:	80 62       	ori	r24, 0x20	; 32
    2130:	80 93 68 3a 	sts	0x3A68, r24	; 0x803a68 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2134:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <serRx+0x1>
    2138:	81 36       	cpi	r24, 0x61	; 97
    213a:	61 f0       	breq	.+24     	; 0x2154 <CheckInput+0xee>
    213c:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <serRx+0x1>
    2140:	85 36       	cpi	r24, 0x65	; 101
    2142:	41 f0       	breq	.+16     	; 0x2154 <CheckInput+0xee>
    2144:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <serRx+0x1>
    2148:	86 36       	cpi	r24, 0x66	; 102
    214a:	21 f0       	breq	.+8      	; 0x2154 <CheckInput+0xee>
    214c:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <serRx+0x1>
    2150:	87 37       	cpi	r24, 0x77	; 119
    2152:	59 f6       	brne	.-106    	; 0x20ea <CheckInput+0x84>
                            data[1] = specialInput[1]+0x11;
    2154:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <specialInput+0x1>
    2158:	8f 5e       	subi	r24, 0xEF	; 239
    215a:	f8 01       	movw	r30, r16
    215c:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    215e:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
    2162:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2164:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <serRx+0x1>
    2168:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    216a:	14 82       	std	Z+4, r1	; 0x04
    216c:	09 c2       	rjmp	.+1042   	; 0x2580 <CheckInput+0x51a>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    216e:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
    2172:	83 32       	cpi	r24, 0x23	; 35
    2174:	81 f5       	brne	.+96     	; 0x21d6 <CheckInput+0x170>
    2176:	8d b3       	in	r24, 0x1d	; 29
    2178:	86 30       	cpi	r24, 0x06	; 6
    217a:	69 f5       	brne	.+90     	; 0x21d6 <CheckInput+0x170>
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    2182:	fc 01       	movw	r30, r24
    2184:	e9 59       	subi	r30, 0x99	; 153
    2186:	f5 4c       	sbci	r31, 0xC5	; 197
    2188:	20 81       	ld	r18, Z
    218a:	20 53       	subi	r18, 0x30	; 48
    218c:	20 83       	st	Z, r18
                    bitNr *= 10;
    218e:	11 0f       	add	r17, r17
    2190:	21 2f       	mov	r18, r17
    2192:	22 0f       	add	r18, r18
    2194:	22 0f       	add	r18, r18
    2196:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2198:	20 91 68 3a 	lds	r18, 0x3A68	; 0x803a68 <serRx+0x1>
    219c:	23 30       	cpi	r18, 0x03	; 3
    219e:	48 f4       	brcc	.+18     	; 0x21b2 <CheckInput+0x14c>
                    if (serRx[x] < 10) {
    21a0:	20 81       	ld	r18, Z
    21a2:	2a 30       	cpi	r18, 0x0A	; 10
    21a4:	b0 f4       	brcc	.+44     	; 0x21d2 <CheckInput+0x16c>
                        bitNr += serRx[x];
    21a6:	20 81       	ld	r18, Z
    21a8:	12 0f       	add	r17, r18
    21aa:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    21ac:	84 30       	cpi	r24, 0x04	; 4
    21ae:	91 05       	cpc	r25, r1
    21b0:	41 f7       	brne	.-48     	; 0x2182 <CheckInput+0x11c>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    21b2:	81 2f       	mov	r24, r17
    21b4:	8f 77       	andi	r24, 0x7F	; 127
    21b6:	69 f0       	breq	.+26     	; 0x21d2 <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    21b8:	80 91 6b 3a 	lds	r24, 0x3A6B	; 0x803a6b <serRx+0x4>
    21bc:	60 91 6c 3a 	lds	r22, 0x3A6C	; 0x803a6c <serRx+0x5>
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	78 2b       	or	r23, r24
    21c4:	81 2f       	mov	r24, r17
    21c6:	80 95       	com	r24
    21c8:	d6 db       	rcall	.-2132   	; 0x1976 <Cheat>
    21ca:	88 23       	and	r24, r24
    21cc:	11 f0       	breq	.+4      	; 0x21d2 <CheckInput+0x16c>
    21ce:	81 2f       	mov	r24, r17
    21d0:	ec d8       	rcall	.-3624   	; 0x13aa <UpdateState>
                }
                responseList = SetStandardResponse(0);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	50 c0       	rjmp	.+160    	; 0x2276 <CheckInput+0x210>
    21d6:	d8 01       	movw	r26, r16
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    21dc:	fc 01       	movw	r30, r24
    21de:	e9 59       	subi	r30, 0x99	; 153
    21e0:	f5 4c       	sbci	r31, 0xC5	; 197
    21e2:	20 81       	ld	r18, Z
    21e4:	21 34       	cpi	r18, 0x41	; 65
    21e6:	18 f0       	brcs	.+6      	; 0x21ee <CheckInput+0x188>
    21e8:	20 81       	ld	r18, Z
    21ea:	2b 35       	cpi	r18, 0x5B	; 91
    21ec:	10 f0       	brcs	.+4      	; 0x21f2 <CheckInput+0x18c>
    21ee:	20 81       	ld	r18, Z
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <CheckInput+0x190>
    21f2:	20 81       	ld	r18, Z
    21f4:	20 62       	ori	r18, 0x20	; 32
    21f6:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    21f8:	20 81       	ld	r18, Z
    21fa:	21 11       	cpse	r18, r1
    21fc:	05 c0       	rjmp	.+10     	; 0x2208 <CheckInput+0x1a2>
                    data[x] = 0;
    21fe:	f8 01       	movw	r30, r16
    2200:	e8 0f       	add	r30, r24
    2202:	f1 1d       	adc	r31, r1
    2204:	10 82       	st	Z, r1
                    break;
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <CheckInput+0x1ac>
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    220c:	81 34       	cpi	r24, 0x41	; 65
    220e:	91 05       	cpc	r25, r1
    2210:	29 f7       	brne	.-54     	; 0x21dc <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2212:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <serRx>
                data[0] = 0;
    2216:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2218:	81 11       	cpse	r24, r1
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <CheckInput+0x1c0>
                data[0] = 0;
    221c:	10 82       	st	Z, r1
                RXCNT = 0;
    221e:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2220:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <serRxDone>
    2224:	ab c1       	rjmp	.+854    	; 0x257c <CheckInput+0x516>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2226:	80 81       	ld	r24, Z
    2228:	8f 33       	cpi	r24, 0x3F	; 63
    222a:	11 f0       	breq	.+4      	; 0x2230 <CheckInput+0x1ca>
    222c:	88 36       	cpi	r24, 0x68	; 104
    222e:	39 f5       	brne	.+78     	; 0x227e <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2230:	8b e5       	ldi	r24, 0x5B	; 91
    2232:	9a e7       	ldi	r25, 0x7A	; 122
    2234:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr>
    2238:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x1>
    reactStr[1][number]=length;
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x40>
    2244:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x41>
    reactStr[2][number]=type;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x80>
    2250:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2254:	23 e9       	ldi	r18, 0x93	; 147
    2256:	3b e7       	ldi	r19, 0x7B	; 123
    2258:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    225c:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2260:	2d e6       	ldi	r18, 0x6D	; 109
    2262:	34 e0       	ldi	r19, 0x04	; 4
    2264:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x42>
    2268:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    226c:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    2270:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	71 dc       	rcall	.-1822   	; 0x1b5a <SetStandardResponse>
    2278:	80 93 0c 39 	sts	0x390C, r24	; 0x80390c <responseList>
    227c:	7f c1       	rjmp	.+766    	; 0x257c <CheckInput+0x516>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    227e:	81 36       	cpi	r24, 0x61	; 97
    2280:	d9 f4       	brne	.+54     	; 0x22b8 <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2282:	8b e5       	ldi	r24, 0x5B	; 91
    2284:	9a e7       	ldi	r25, 0x7A	; 122
    2286:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr>
    228a:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x1>
    reactStr[1][number]=length;
    228e:	84 e0       	ldi	r24, 0x04	; 4
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x40>
    2296:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x41>
    reactStr[2][number]=type;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x80>
    22a2:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22a6:	2e e6       	ldi	r18, 0x6E	; 110
    22a8:	3a e7       	ldi	r19, 0x7A	; 122
    22aa:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    22ae:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    22b2:	25 e2       	ldi	r18, 0x25	; 37
    22b4:	31 e0       	ldi	r19, 0x01	; 1
    22b6:	d6 cf       	rjmp	.-84     	; 0x2264 <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    22b8:	87 37       	cpi	r24, 0x77	; 119
    22ba:	09 f0       	breq	.+2      	; 0x22be <CheckInput+0x258>
    22bc:	6e c0       	rjmp	.+220    	; 0x239a <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22be:	8b e5       	ldi	r24, 0x5B	; 91
    22c0:	9a e7       	ldi	r25, 0x7A	; 122
    22c2:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr>
    22c6:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x1>
    reactStr[1][number]=length;
    22ca:	84 e0       	ldi	r24, 0x04	; 4
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x40>
    22d2:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x41>
    reactStr[2][number]=type;
    22d6:	21 e0       	ldi	r18, 0x01	; 1
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	20 93 8d 39 	sts	0x398D, r18	; 0x80398d <reactStr+0x80>
    22de:	30 93 8e 39 	sts	0x398E, r19	; 0x80398e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22e2:	8b ec       	ldi	r24, 0xCB	; 203
    22e4:	96 e7       	ldi	r25, 0x76	; 118
    22e6:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    22ea:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    22ee:	82 e1       	ldi	r24, 0x12	; 18
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    22f6:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    22fa:	20 93 8f 39 	sts	0x398F, r18	; 0x80398f <reactStr+0x82>
    22fe:	30 93 90 39 	sts	0x3990, r19	; 0x803990 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    2302:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <whoami>
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	19 f4       	brne	.+6      	; 0x2310 <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    230a:	85 ec       	ldi	r24, 0xC5	; 197
    230c:	96 e7       	ldi	r25, 0x76	; 118
    230e:	0f c0       	rjmp	.+30     	; 0x232e <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	49 f4       	brne	.+18     	; 0x2326 <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2314:	82 ec       	ldi	r24, 0xC2	; 194
    2316:	96 e7       	ldi	r25, 0x76	; 118
    2318:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    231c:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	1e c0       	rjmp	.+60     	; 0x2362 <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	49 f4       	brne	.+18     	; 0x233c <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    232a:	8c eb       	ldi	r24, 0xBC	; 188
    232c:	96 e7       	ldi	r25, 0x76	; 118
    232e:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    2332:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    2336:	86 e0       	ldi	r24, 0x06	; 6
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	13 c0       	rjmp	.+38     	; 0x2362 <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    233c:	84 30       	cpi	r24, 0x04	; 4
    233e:	49 f4       	brne	.+18     	; 0x2352 <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2340:	87 eb       	ldi	r24, 0xB7	; 183
    2342:	96 e7       	ldi	r25, 0x76	; 118
    2344:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    2348:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    234c:	85 e0       	ldi	r24, 0x05	; 5
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	08 c0       	rjmp	.+16     	; 0x2362 <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2352:	80 e4       	ldi	r24, 0x40	; 64
    2354:	96 e7       	ldi	r25, 0x76	; 118
    2356:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    235a:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    235e:	82 e4       	ldi	r24, 0x42	; 66
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	80 93 51 39 	sts	0x3951, r24	; 0x803951 <reactStr+0x44>
    2366:	90 93 52 39 	sts	0x3952, r25	; 0x803952 <reactStr+0x45>
    reactStr[2][number]=type;
    236a:	20 93 91 39 	sts	0x3991, r18	; 0x803991 <reactStr+0x84>
    236e:	30 93 92 39 	sts	0x3992, r19	; 0x803992 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2372:	8d e9       	ldi	r24, 0x9D	; 157
    2374:	96 e7       	ldi	r25, 0x76	; 118
    2376:	80 93 13 39 	sts	0x3913, r24	; 0x803913 <reactStr+0x6>
    237a:	90 93 14 39 	sts	0x3914, r25	; 0x803914 <reactStr+0x7>
    reactStr[1][number]=length;
    237e:	8a e1       	ldi	r24, 0x1A	; 26
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	80 93 53 39 	sts	0x3953, r24	; 0x803953 <reactStr+0x46>
    2386:	90 93 54 39 	sts	0x3954, r25	; 0x803954 <reactStr+0x47>
    reactStr[2][number]=type;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	80 93 93 39 	sts	0x3993, r24	; 0x803993 <reactStr+0x86>
    2392:	90 93 94 39 	sts	0x3994, r25	; 0x803994 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2396:	84 e0       	ldi	r24, 0x04	; 4
    2398:	6e cf       	rjmp	.-292    	; 0x2276 <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    239a:	81 37       	cpi	r24, 0x71	; 113
    239c:	d9 f4       	brne	.+54     	; 0x23d4 <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    239e:	8b e5       	ldi	r24, 0x5B	; 91
    23a0:	9a e7       	ldi	r25, 0x7A	; 122
    23a2:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr>
    23a6:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x1>
    reactStr[1][number]=length;
    23aa:	84 e0       	ldi	r24, 0x04	; 4
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x40>
    23b2:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x41>
    reactStr[2][number]=type;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x80>
    23be:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23c2:	23 e0       	ldi	r18, 0x03	; 3
    23c4:	3a e7       	ldi	r19, 0x7A	; 122
    23c6:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    23ca:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    23ce:	24 e5       	ldi	r18, 0x54	; 84
    23d0:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    23d2:	48 cf       	rjmp	.-368    	; 0x2264 <CheckInput+0x1fe>
    23d4:	64 e7       	ldi	r22, 0x74	; 116
    23d6:	79 eb       	ldi	r23, 0xB9	; 185
    23d8:	c8 01       	movw	r24, r16
    23da:	6d db       	rcall	.-2342   	; 0x1ab6 <StartsWith>
    23dc:	88 23       	and	r24, r24
    23de:	f9 f0       	breq	.+62     	; 0x241e <CheckInput+0x3b8>
    23e0:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	81 2f       	mov	r24, r17
    23e6:	0e 94 bb 09 	call	0x1376	; 0x1376 <WriteStatusBit>
    23ea:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    23ec:	12 37       	cpi	r17, 0x72	; 114
    23ee:	c9 f7       	brne	.-14     	; 0x23e2 <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    23f0:	0e 94 34 09 	call	0x1268	; 0x1268 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    23f4:	80 e2       	ldi	r24, 0x20	; 32
    23f6:	e7 eb       	ldi	r30, 0xB7	; 183
    23f8:	f9 eb       	ldi	r31, 0xB9	; 185
    23fa:	de 01       	movw	r26, r28
    23fc:	11 96       	adiw	r26, 0x01	; 1
    23fe:	01 90       	ld	r0, Z+
    2400:	0d 92       	st	X+, r0
    2402:	8a 95       	dec	r24
    2404:	e1 f7       	brne	.-8      	; 0x23fe <CheckInput+0x398>
                SerSpeed(60);
    2406:	8c e3       	ldi	r24, 0x3C	; 60
    2408:	0e 94 26 08 	call	0x104c	; 0x104c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    240c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    2410:	88 23       	and	r24, r24
    2412:	e1 f3       	breq	.-8      	; 0x240c <CheckInput+0x3a6>
    2414:	ce 01       	movw	r24, r28
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	0e 94 15 08 	call	0x102a	; 0x102a <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    241c:	f7 cf       	rjmp	.-18     	; 0x240c <CheckInput+0x3a6>
    241e:	6a e7       	ldi	r22, 0x7A	; 122
    2420:	79 eb       	ldi	r23, 0xB9	; 185
    2422:	c8 01       	movw	r24, r16
    2424:	48 db       	rcall	.-2416   	; 0x1ab6 <StartsWith>
    2426:	68 2e       	mov	r6, r24
    2428:	88 23       	and	r24, r24
    242a:	61 f1       	breq	.+88     	; 0x2484 <CheckInput+0x41e>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	89 a3       	std	Y+33, r24	; 0x21
    2430:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	be 01       	movw	r22, r28
    2436:	6f 5d       	subi	r22, 0xDF	; 223
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	81 2f       	mov	r24, r17
    243c:	0e 94 ed 07 	call	0xfda	; 0xfda <EEWrite>
    2440:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2442:	10 32       	cpi	r17, 0x20	; 32
    2444:	b1 f7       	brne	.-20     	; 0x2432 <CheckInput+0x3cc>
    2446:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	81 2f       	mov	r24, r17
    244c:	0e 94 bb 09 	call	0x1376	; 0x1376 <WriteStatusBit>
    2450:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2452:	12 37       	cpi	r17, 0x72	; 114
    2454:	c9 f7       	brne	.-14     	; 0x2448 <CheckInput+0x3e2>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    2456:	0e 94 34 09 	call	0x1268	; 0x1268 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    245a:	8f e0       	ldi	r24, 0x0F	; 15
    245c:	e7 ed       	ldi	r30, 0xD7	; 215
    245e:	f9 eb       	ldi	r31, 0xB9	; 185
    2460:	de 01       	movw	r26, r28
    2462:	11 96       	adiw	r26, 0x01	; 1
    2464:	01 90       	ld	r0, Z+
    2466:	0d 92       	st	X+, r0
    2468:	8a 95       	dec	r24
    246a:	e1 f7       	brne	.-8      	; 0x2464 <CheckInput+0x3fe>
                SerSpeed(60);
    246c:	8c e3       	ldi	r24, 0x3C	; 60
    246e:	0e 94 26 08 	call	0x104c	; 0x104c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2472:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    2476:	88 23       	and	r24, r24
    2478:	e1 f3       	breq	.-8      	; 0x2472 <CheckInput+0x40c>
    247a:	ce 01       	movw	r24, r28
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	0e 94 15 08 	call	0x102a	; 0x102a <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    2482:	f7 cf       	rjmp	.-18     	; 0x2472 <CheckInput+0x40c>
    2484:	61 eb       	ldi	r22, 0xB1	; 177
    2486:	79 eb       	ldi	r23, 0xB9	; 185
    2488:	c8 01       	movw	r24, r16
    248a:	15 db       	rcall	.-2518   	; 0x1ab6 <StartsWith>
    248c:	88 23       	and	r24, r24
    248e:	09 f4       	brne	.+2      	; 0x2492 <CheckInput+0x42c>
    2490:	2c ce       	rjmp	.-936    	; 0x20ea <CheckInput+0x84>
    2492:	0d e0       	ldi	r16, 0x0D	; 13
    2494:	19 e3       	ldi	r17, 0x39	; 57
    2496:	78 e1       	ldi	r23, 0x18	; 24
    2498:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    249a:	ea e0       	ldi	r30, 0x0A	; 10
    249c:	5e 2e       	mov	r5, r30
                        bit /= 10;
    249e:	f4 e6       	ldi	r31, 0x64	; 100
    24a0:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    24a2:	ee 24       	eor	r14, r14
    24a4:	e3 94       	inc	r14
    24a6:	f1 2c       	mov	r15, r1
    24a8:	cc 24       	eor	r12, r12
    24aa:	c3 94       	inc	r12
    24ac:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24ae:	89 e5       	ldi	r24, 0x59	; 89
    24b0:	88 2e       	mov	r8, r24
    24b2:	8a e7       	ldi	r24, 0x7A	; 122
    24b4:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    24b6:	92 e0       	ldi	r25, 0x02	; 2
    24b8:	a9 2e       	mov	r10, r25
    24ba:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	be 01       	movw	r22, r28
    24c0:	6f 5d       	subi	r22, 0xDF	; 223
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	87 2d       	mov	r24, r7
    24c6:	0e 94 dd 07 	call	0xfba	; 0xfba <EERead>
                    bit = 0xff-bit;
    24ca:	29 a1       	ldd	r18, Y+33	; 0x21
    24cc:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    24ce:	82 2f       	mov	r24, r18
    24d0:	65 2d       	mov	r22, r5
    24d2:	0e 94 33 1c 	call	0x3866	; 0x3866 <__udivmodqi4>
    24d6:	9b 83       	std	Y+3, r25	; 0x03
    24d8:	0e 94 33 1c 	call	0x3866	; 0x3866 <__udivmodqi4>
    24dc:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    24de:	82 2f       	mov	r24, r18
    24e0:	64 2d       	mov	r22, r4
    24e2:	0e 94 33 1c 	call	0x3866	; 0x3866 <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	19 a2       	std	Y+33, r1	; 0x21
    24ea:	de 01       	movw	r26, r28
    24ec:	11 96       	adiw	r26, 0x01	; 1
    24ee:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    24f0:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24f2:	86 2d       	mov	r24, r6
    24f4:	84 0f       	add	r24, r20
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	fc 01       	movw	r30, r24
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	e3 5f       	subi	r30, 0xF3	; 243
    2500:	f6 4c       	sbci	r31, 0xC6	; 198
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	2d 52       	subi	r18, 0x2D	; 45
    2506:	3b 48       	sbci	r19, 0x8B	; 139
    2508:	20 83       	st	Z, r18
    250a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    250c:	fc 01       	movw	r30, r24
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	e3 5b       	subi	r30, 0xB3	; 179
    2514:	f6 4c       	sbci	r31, 0xC6	; 198
    2516:	e0 82       	st	Z, r14
    2518:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	fc 01       	movw	r30, r24
    2520:	e3 57       	subi	r30, 0x73	; 115
    2522:	f6 4c       	sbci	r31, 0xC6	; 198
    2524:	e0 82       	st	Z, r14
    2526:	f1 82       	std	Z+1, r15	; 0x01
    2528:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    252a:	43 30       	cpi	r20, 0x03	; 3
    252c:	09 f7       	brne	.-62     	; 0x24f0 <CheckInput+0x48a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    252e:	f8 01       	movw	r30, r16
    2530:	86 82       	std	Z+6, r8	; 0x06
    2532:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    2534:	ea 5b       	subi	r30, 0xBA	; 186
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	a0 82       	st	Z, r10
    253a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    253c:	e0 5c       	subi	r30, 0xC0	; 192
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	c0 82       	st	Z, r12
    2542:	d1 82       	std	Z+1, r13	; 0x01
    2544:	73 94       	inc	r7
    2546:	08 5f       	subi	r16, 0xF8	; 248
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	f4 e0       	ldi	r31, 0x04	; 4
    254c:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    254e:	80 e2       	ldi	r24, 0x20	; 32
    2550:	78 12       	cpse	r7, r24
    2552:	b4 cf       	rjmp	.-152    	; 0x24bc <CheckInput+0x456>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2554:	8b e5       	ldi	r24, 0x5B	; 91
    2556:	9a e7       	ldi	r25, 0x7A	; 122
    2558:	80 93 4b 39 	sts	0x394B, r24	; 0x80394b <reactStr+0x3e>
    255c:	90 93 4c 39 	sts	0x394C, r25	; 0x80394c <reactStr+0x3f>
    reactStr[1][number]=length;
    2560:	84 e0       	ldi	r24, 0x04	; 4
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	80 93 8b 39 	sts	0x398B, r24	; 0x80398b <reactStr+0x7e>
    2568:	90 93 8c 39 	sts	0x398C, r25	; 0x80398c <reactStr+0x7f>
    reactStr[2][number]=type;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	80 93 cb 39 	sts	0x39CB, r24	; 0x8039cb <reactStr+0xbe>
    2574:	90 93 cc 39 	sts	0x39CC, r25	; 0x8039cc <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2578:	70 92 0c 39 	sts	0x390C, r7	; 0x80390c <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    257c:	ff 24       	eor	r15, r15
    257e:	f3 94       	inc	r15
}
    2580:	8f 2d       	mov	r24, r15
    2582:	a1 96       	adiw	r28, 0x21	; 33
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	bf 90       	pop	r11
    259a:	af 90       	pop	r10
    259c:	9f 90       	pop	r9
    259e:	8f 90       	pop	r8
    25a0:	7f 90       	pop	r7
    25a2:	6f 90       	pop	r6
    25a4:	5f 90       	pop	r5
    25a6:	4f 90       	pop	r4
    25a8:	08 95       	ret

000025aa <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    25aa:	4f 92       	push	r4
    25ac:	5f 92       	push	r5
    25ae:	6f 92       	push	r6
    25b0:	7f 92       	push	r7
    25b2:	8f 92       	push	r8
    25b4:	9f 92       	push	r9
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	2a 97       	sbiw	r28, 0x0a	; 10
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    25d6:	70 dc       	rcall	.-1824   	; 0x1eb8 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    25d8:	c8 01       	movw	r24, r16
    25da:	6e dc       	rcall	.-1828   	; 0x1eb8 <CleanInput>
    25dc:	f8 2e       	mov	r15, r24

    if (inputLen) {
    25de:	88 23       	and	r24, r24
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <ProcessInput+0x3a>
    25e2:	de c7       	rjmp	.+4028   	; 0x35a0 <ProcessInput+0xff6>

        //eXit to previous location
        if (data[0] == 'x'){
    25e4:	d8 01       	movw	r26, r16
    25e6:	8c 91       	ld	r24, X
    25e8:	88 37       	cpi	r24, 0x78	; 120
    25ea:	09 f0       	breq	.+2      	; 0x25ee <ProcessInput+0x44>
    25ec:	45 c0       	rjmp	.+138    	; 0x2678 <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    25ee:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    25f2:	e8 2f       	mov	r30, r24
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	ee 0f       	add	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	e3 53       	subi	r30, 0x33	; 51
    25fc:	f6 4c       	sbci	r31, 0xC6	; 198
    25fe:	20 81       	ld	r18, Z
    2600:	31 81       	ldd	r19, Z+1	; 0x01
    2602:	23 2b       	or	r18, r19
    2604:	11 f0       	breq	.+4      	; 0x260a <ProcessInput+0x60>
    2606:	81 11       	cpse	r24, r1
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    260a:	82 e8       	ldi	r24, 0x82	; 130
    260c:	96 e7       	ldi	r25, 0x76	; 118
    260e:	a1 c5       	rjmp	.+2882   	; 0x3152 <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2610:	80 91 13 3a 	lds	r24, 0x3A13	; 0x803a13 <currObj+0x6>
    2614:	0e 94 df 09 	call	0x13be	; 0x13be <CheckState>
    2618:	88 23       	and	r24, r24
    261a:	b9 f0       	breq	.+46     	; 0x264a <ProcessInput+0xa0>
                --currDepth;
    261c:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2620:	e1 50       	subi	r30, 0x01	; 1
    2622:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	ee 0f       	add	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	e3 53       	subi	r30, 0x33	; 51
    262e:	f6 4c       	sbci	r31, 0xC6	; 198
    2630:	6d e0       	ldi	r22, 0x0D	; 13
    2632:	7a e3       	ldi	r23, 0x3A	; 58
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	0c db       	rcall	.-2536   	; 0x1c52 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    263a:	80 91 11 3a 	lds	r24, 0x3A11	; 0x803a11 <currObj+0x4>
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    2644:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
    2648:	31 c2       	rjmp	.+1122   	; 0x2aac <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    264a:	80 91 2f 3a 	lds	r24, 0x3A2F	; 0x803a2f <currObj+0x22>
    264e:	90 91 30 3a 	lds	r25, 0x3A30	; 0x803a30 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2652:	20 91 21 3a 	lds	r18, 0x3A21	; 0x803a21 <currObj+0x14>
    2656:	30 91 22 3a 	lds	r19, 0x3A22	; 0x803a22 <currObj+0x15>
    265a:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    265e:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2662:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    2666:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    266a:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    266e:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2672:	80 91 35 3a 	lds	r24, 0x3A35	; 0x803a35 <currObj+0x28>
    2676:	3a c6       	rjmp	.+3188   	; 0x32ec <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2678:	85 36       	cpi	r24, 0x65	; 101
    267a:	19 f0       	breq	.+6      	; 0x2682 <ProcessInput+0xd8>
    267c:	8f 36       	cpi	r24, 0x6F	; 111
    267e:	09 f0       	breq	.+2      	; 0x2682 <ProcessInput+0xd8>
    2680:	df c0       	rjmp	.+446    	; 0x2840 <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2682:	b2 e0       	ldi	r27, 0x02	; 2
    2684:	fb 12       	cpse	r15, r27
    2686:	c1 cf       	rjmp	.-126    	; 0x260a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2688:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <currDepth>
    268c:	f1 2c       	mov	r15, r1
    268e:	f7 01       	movw	r30, r14
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	e3 53       	subi	r30, 0x33	; 51
    2696:	f6 4c       	sbci	r31, 0xC6	; 198
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	d8 01       	movw	r26, r16
    269e:	11 96       	adiw	r26, 0x01	; 1
    26a0:	6c 91       	ld	r22, X
    26a2:	80 81       	ld	r24, Z
    26a4:	91 81       	ldd	r25, Z+1	; 0x01
    26a6:	a0 db       	rcall	.-2240   	; 0x1de8 <FindChild>
    26a8:	f7 01       	movw	r30, r14
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	e1 53       	subi	r30, 0x31	; 49
    26b0:	f6 4c       	sbci	r31, 0xC6	; 198
    26b2:	80 83       	st	Z, r24
    26b4:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    26b6:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <currDepth>
    26ba:	29 2f       	mov	r18, r25
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	f9 01       	movw	r30, r18
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	e1 53       	subi	r30, 0x31	; 49
    26c6:	f6 4c       	sbci	r31, 0xC6	; 198
    26c8:	40 81       	ld	r20, Z
    26ca:	51 81       	ldd	r21, Z+1	; 0x01
    26cc:	41 15       	cp	r20, r1
    26ce:	51 05       	cpc	r21, r1
    26d0:	21 f0       	breq	.+8      	; 0x26da <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    26d2:	6e ec       	ldi	r22, 0xCE	; 206
    26d4:	78 e3       	ldi	r23, 0x38	; 56
    26d6:	ca 01       	movw	r24, r20
    26d8:	1c c0       	rjmp	.+56     	; 0x2712 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    26da:	99 23       	and	r25, r25
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <ProcessInput+0x136>
    26de:	77 c7       	rjmp	.+3822   	; 0x35ce <ProcessInput+0x1024>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    26e0:	22 0f       	add	r18, r18
    26e2:	33 1f       	adc	r19, r19
    26e4:	f9 01       	movw	r30, r18
    26e6:	e5 53       	subi	r30, 0x35	; 53
    26e8:	f6 4c       	sbci	r31, 0xC6	; 198
    26ea:	d8 01       	movw	r26, r16
    26ec:	11 96       	adiw	r26, 0x01	; 1
    26ee:	6c 91       	ld	r22, X
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	25 db       	rcall	.-2486   	; 0x1d40 <CheckLetter>
    26f6:	88 23       	and	r24, r24
    26f8:	09 f4       	brne	.+2      	; 0x26fc <ProcessInput+0x152>
    26fa:	69 c7       	rjmp	.+3794   	; 0x35ce <ProcessInput+0x1024>
                        PopulateObject(route[currDepth-1], &actObj1);
    26fc:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	ee 0f       	add	r30, r30
    2704:	ff 1f       	adc	r31, r31
    2706:	e5 53       	subi	r30, 0x35	; 53
    2708:	f6 4c       	sbci	r31, 0xC6	; 198
    270a:	6e ec       	ldi	r22, 0xCE	; 206
    270c:	78 e3       	ldi	r23, 0x38	; 56
    270e:	80 81       	ld	r24, Z
    2710:	91 81       	ldd	r25, Z+1	; 0x01
    2712:	9f da       	rcall	.-2754   	; 0x1c52 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2714:	f8 01       	movw	r30, r16
    2716:	80 81       	ld	r24, Z
    2718:	85 36       	cpi	r24, 0x65	; 101
    271a:	c9 f4       	brne	.+50     	; 0x274e <ProcessInput+0x1a4>
    271c:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x8>
    2720:	80 fd       	sbrc	r24, 0
    2722:	1e c0       	rjmp	.+60     	; 0x2760 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2724:	80 ea       	ldi	r24, 0xA0	; 160
    2726:	99 e7       	ldi	r25, 0x79	; 121
    2728:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    272c:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2730:	8e e1       	ldi	r24, 0x1E	; 30
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    2738:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    2744:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2748:	72 e0       	ldi	r23, 0x02	; 2
    274a:	77 2e       	mov	r7, r23
    274c:	0e c7       	rjmp	.+3612   	; 0x356a <ProcessInput+0xfc0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    274e:	8f 36       	cpi	r24, 0x6F	; 111
    2750:	39 f4       	brne	.+14     	; 0x2760 <ProcessInput+0x1b6>
    2752:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x8>
    2756:	81 fd       	sbrc	r24, 1
    2758:	03 c0       	rjmp	.+6      	; 0x2760 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    275a:	85 e8       	ldi	r24, 0x85	; 133
    275c:	99 e7       	ldi	r25, 0x79	; 121
    275e:	f9 c4       	rjmp	.+2546   	; 0x3152 <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2760:	80 91 d4 38 	lds	r24, 0x38D4	; 0x8038d4 <actObj1.3989+0x6>
    2764:	0e 94 df 09 	call	0x13be	; 0x13be <CheckState>
    2768:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    276c:	88 23       	and	r24, r24
    276e:	09 f4       	brne	.+2      	; 0x2772 <ProcessInput+0x1c8>
    2770:	49 c0       	rjmp	.+146    	; 0x2804 <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2772:	ae 2f       	mov	r26, r30
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	aa 0f       	add	r26, r26
    2778:	bb 1f       	adc	r27, r27
    277a:	a1 53       	subi	r26, 0x31	; 49
    277c:	b6 4c       	sbci	r27, 0xC6	; 198
    277e:	8d 91       	ld	r24, X+
    2780:	9c 91       	ld	r25, X
    2782:	89 2b       	or	r24, r25
    2784:	11 f0       	breq	.+4      	; 0x278a <ProcessInput+0x1e0>
    2786:	ef 5f       	subi	r30, 0xFF	; 255
    2788:	01 c0       	rjmp	.+2      	; 0x278c <ProcessInput+0x1e2>
    278a:	e1 50       	subi	r30, 0x01	; 1
    278c:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2790:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	e3 53       	subi	r30, 0x33	; 51
    279c:	f6 4c       	sbci	r31, 0xC6	; 198
    279e:	6d e0       	ldi	r22, 0x0D	; 13
    27a0:	7a e3       	ldi	r23, 0x3A	; 58
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	55 da       	rcall	.-2902   	; 0x1c52 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    27a8:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0x1c>
    27ac:	90 91 2a 3a 	lds	r25, 0x3A2A	; 0x803a2a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27b0:	20 91 1b 3a 	lds	r18, 0x3A1B	; 0x803a1b <currObj+0xe>
    27b4:	30 91 1c 3a 	lds	r19, 0x3A1C	; 0x803a1c <currObj+0xf>
    27b8:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    27bc:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    27c0:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    27c4:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    27c8:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    27cc:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27d0:	8b e5       	ldi	r24, 0x5B	; 91
    27d2:	9a e7       	ldi	r25, 0x7A	; 122
    27d4:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    27d8:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	80 93 51 39 	sts	0x3951, r24	; 0x803951 <reactStr+0x44>
    27e4:	90 93 52 39 	sts	0x3952, r25	; 0x803952 <reactStr+0x45>
    reactStr[2][number]=type;
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <reactStr+0x84>
    27f0:	90 93 92 39 	sts	0x3992, r25	; 0x803992 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    27f4:	80 91 11 3a 	lds	r24, 0x3A11	; 0x803a11 <currObj+0x4>
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    27fe:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
    2802:	8d c4       	rjmp	.+2330   	; 0x311e <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	e1 53       	subi	r30, 0x31	; 49
    280c:	f6 4c       	sbci	r31, 0xC6	; 198
    280e:	10 82       	st	Z, r1
    2810:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2812:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x22>
    2816:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    281a:	20 91 e2 38 	lds	r18, 0x38E2	; 0x8038e2 <actObj1.3989+0x14>
    281e:	30 91 e3 38 	lds	r19, 0x38E3	; 0x8038e3 <actObj1.3989+0x15>
    2822:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    2826:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    282a:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    282e:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    2832:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    2836:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    283a:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3989+0x28>
    283e:	56 c5       	rjmp	.+2732   	; 0x32ec <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2840:	8c 36       	cpi	r24, 0x6C	; 108
    2842:	09 f0       	breq	.+2      	; 0x2846 <ProcessInput+0x29c>
    2844:	57 c1       	rjmp	.+686    	; 0x2af4 <ProcessInput+0x54a>
    2846:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
            if (inputLen == 1) {
    284a:	b1 e0       	ldi	r27, 0x01	; 1
    284c:	fb 12       	cpse	r15, r27
    284e:	f6 c0       	rjmp	.+492    	; 0x2a3c <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2850:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0x1c>
    2854:	90 91 2a 3a 	lds	r25, 0x3A2A	; 0x803a2a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2858:	20 91 1b 3a 	lds	r18, 0x3A1B	; 0x803a1b <currObj+0xe>
    285c:	30 91 1c 3a 	lds	r19, 0x3A1C	; 0x803a1c <currObj+0xf>
    2860:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    2864:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2868:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    286c:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    2870:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    2874:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2878:	8b e5       	ldi	r24, 0x5B	; 91
    287a:	9a e7       	ldi	r25, 0x7A	; 122
    287c:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    2880:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	80 93 51 39 	sts	0x3951, r24	; 0x803951 <reactStr+0x44>
    288c:	90 93 52 39 	sts	0x3952, r25	; 0x803952 <reactStr+0x45>
    reactStr[2][number]=type;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <reactStr+0x84>
    2898:	90 93 92 39 	sts	0x3992, r25	; 0x803992 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    289c:	2e ee       	ldi	r18, 0xEE	; 238
    289e:	39 e7       	ldi	r19, 0x79	; 121
    28a0:	20 93 13 39 	sts	0x3913, r18	; 0x803913 <reactStr+0x6>
    28a4:	30 93 14 39 	sts	0x3914, r19	; 0x803914 <reactStr+0x7>
    reactStr[1][number]=length;
    28a8:	25 e1       	ldi	r18, 0x15	; 21
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	20 93 53 39 	sts	0x3953, r18	; 0x803953 <reactStr+0x46>
    28b0:	30 93 54 39 	sts	0x3954, r19	; 0x803954 <reactStr+0x47>
    reactStr[2][number]=type;
    28b4:	80 93 93 39 	sts	0x3993, r24	; 0x803993 <reactStr+0x86>
    28b8:	90 93 94 39 	sts	0x3994, r25	; 0x803994 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	ee 0f       	add	r30, r30
    28c0:	ff 1f       	adc	r31, r31
    28c2:	e1 53       	subi	r30, 0x31	; 49
    28c4:	f6 4c       	sbci	r31, 0xC6	; 198
    28c6:	10 82       	st	Z, r1
    28c8:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    28ca:	84 e0       	ldi	r24, 0x04	; 4
    28cc:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ce:	99 e5       	ldi	r25, 0x59	; 89
    28d0:	c9 2e       	mov	r12, r25
    28d2:	9a e7       	ldi	r25, 0x7A	; 122
    28d4:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    28d6:	22 e0       	ldi	r18, 0x02	; 2
    28d8:	a2 2e       	mov	r10, r18
    28da:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    28dc:	88 24       	eor	r8, r8
    28de:	83 94       	inc	r8
    28e0:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    28e2:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9c 01       	movw	r18, r24
    28ea:	22 0f       	add	r18, r18
    28ec:	33 1f       	adc	r19, r19
    28ee:	f9 01       	movw	r30, r18
    28f0:	e1 53       	subi	r30, 0x31	; 49
    28f2:	f6 4c       	sbci	r31, 0xC6	; 198
    28f4:	7f 01       	movw	r14, r30
    28f6:	40 81       	ld	r20, Z
    28f8:	51 81       	ldd	r21, Z+1	; 0x01
    28fa:	f9 01       	movw	r30, r18
    28fc:	e3 53       	subi	r30, 0x33	; 51
    28fe:	f6 4c       	sbci	r31, 0xC6	; 198
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	70 da       	rcall	.-2848   	; 0x1de8 <FindChild>
    2908:	d7 01       	movw	r26, r14
    290a:	8d 93       	st	X+, r24
    290c:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    290e:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	e1 53       	subi	r30, 0x31	; 49
    291a:	f6 4c       	sbci	r31, 0xC6	; 198
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	09 f4       	brne	.+2      	; 0x2926 <ProcessInput+0x37c>
    2924:	4a c0       	rjmp	.+148    	; 0x29ba <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2926:	20 91 37 38 	lds	r18, 0x3837	; 0x803837 <inventory>
    292a:	30 91 38 38 	lds	r19, 0x3838	; 0x803838 <inventory+0x1>
    292e:	82 17       	cp	r24, r18
    2930:	93 07       	cpc	r25, r19
    2932:	09 f4       	brne	.+2      	; 0x2936 <ProcessInput+0x38c>
    2934:	42 c0       	rjmp	.+132    	; 0x29ba <ProcessInput+0x410>
    2936:	20 91 39 38 	lds	r18, 0x3839	; 0x803839 <inventory+0x2>
    293a:	30 91 3a 38 	lds	r19, 0x383A	; 0x80383a <inventory+0x3>
    293e:	82 17       	cp	r24, r18
    2940:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2942:	d9 f1       	breq	.+118    	; 0x29ba <ProcessInput+0x410>
    2944:	6e ec       	ldi	r22, 0xCE	; 206
    2946:	78 e3       	ldi	r23, 0x38	; 56
    2948:	84 d9       	rcall	.-3320   	; 0x1c52 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    294a:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x1a>
    294e:	90 91 e9 38 	lds	r25, 0x38E9	; 0x8038e9 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2952:	e6 2d       	mov	r30, r6
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	df 01       	movw	r26, r30
    2958:	aa 0f       	add	r26, r26
    295a:	bb 1f       	adc	r27, r27
    295c:	a3 5f       	subi	r26, 0xF3	; 243
    295e:	b6 4c       	sbci	r27, 0xC6	; 198
    2960:	20 91 da 38 	lds	r18, 0x38DA	; 0x8038da <actObj1.3989+0xc>
    2964:	30 91 db 38 	lds	r19, 0x38DB	; 0x8038db <actObj1.3989+0xd>
    2968:	2d 93       	st	X+, r18
    296a:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    296c:	df 01       	movw	r26, r30
    296e:	aa 0f       	add	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	a3 5b       	subi	r26, 0xB3	; 179
    2974:	b6 4c       	sbci	r27, 0xC6	; 198
    2976:	8d 93       	st	X+, r24
    2978:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    297a:	ee 0f       	add	r30, r30
    297c:	ff 1f       	adc	r31, r31
    297e:	e3 57       	subi	r30, 0x73	; 115
    2980:	f6 4c       	sbci	r31, 0xC6	; 198
    2982:	10 82       	st	Z, r1
    2984:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	86 0d       	add	r24, r6
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	63 94       	inc	r6
    298e:	63 94       	inc	r6
    2990:	fc 01       	movw	r30, r24
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	e3 5f       	subi	r30, 0xF3	; 243
    2998:	f6 4c       	sbci	r31, 0xC6	; 198
    299a:	c0 82       	st	Z, r12
    299c:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    299e:	fc 01       	movw	r30, r24
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	e3 5b       	subi	r30, 0xB3	; 179
    29a6:	f6 4c       	sbci	r31, 0xC6	; 198
    29a8:	a0 82       	st	Z, r10
    29aa:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	fc 01       	movw	r30, r24
    29b2:	e3 57       	subi	r30, 0x73	; 115
    29b4:	f6 4c       	sbci	r31, 0xC6	; 198
    29b6:	80 82       	st	Z, r8
    29b8:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    29ba:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <currDepth>
    29be:	82 2f       	mov	r24, r18
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	fc 01       	movw	r30, r24
    29c4:	ee 0f       	add	r30, r30
    29c6:	ff 1f       	adc	r31, r31
    29c8:	e1 53       	subi	r30, 0x31	; 49
    29ca:	f6 4c       	sbci	r31, 0xC6	; 198
    29cc:	40 81       	ld	r20, Z
    29ce:	51 81       	ldd	r21, Z+1	; 0x01
    29d0:	45 2b       	or	r20, r21
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <ProcessInput+0x42c>
    29d4:	86 cf       	rjmp	.-244    	; 0x28e2 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    29d6:	22 23       	and	r18, r18
    29d8:	69 f1       	breq	.+90     	; 0x2a34 <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	fc 01       	movw	r30, r24
    29e0:	e5 53       	subi	r30, 0x35	; 53
    29e2:	f6 4c       	sbci	r31, 0xC6	; 198
    29e4:	6e ec       	ldi	r22, 0xCE	; 206
    29e6:	78 e3       	ldi	r23, 0x38	; 56
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	32 d9       	rcall	.-3484   	; 0x1c52 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    29ee:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0x1a>
    29f2:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0x1b>
    29f6:	77 24       	eor	r7, r7
    29f8:	73 94       	inc	r7
    29fa:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29fc:	86 2d       	mov	r24, r6
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	fc 01       	movw	r30, r24
    2a02:	ee 0f       	add	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	e3 5f       	subi	r30, 0xF3	; 243
    2a08:	f6 4c       	sbci	r31, 0xC6	; 198
    2a0a:	40 91 da 38 	lds	r20, 0x38DA	; 0x8038da <actObj1.3989+0xc>
    2a0e:	50 91 db 38 	lds	r21, 0x38DB	; 0x8038db <actObj1.3989+0xd>
    2a12:	40 83       	st	Z, r20
    2a14:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2a16:	fc 01       	movw	r30, r24
    2a18:	ee 0f       	add	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	e3 5b       	subi	r30, 0xB3	; 179
    2a1e:	f6 4c       	sbci	r31, 0xC6	; 198
    2a20:	20 83       	st	Z, r18
    2a22:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	fc 01       	movw	r30, r24
    2a2a:	e3 57       	subi	r30, 0x73	; 115
    2a2c:	f6 4c       	sbci	r31, 0xC6	; 198
    2a2e:	10 82       	st	Z, r1
    2a30:	11 82       	std	Z+1, r1	; 0x01
    2a32:	9b c5       	rjmp	.+2870   	; 0x356a <ProcessInput+0xfc0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2a34:	77 24       	eor	r7, r7
    2a36:	7a 94       	dec	r7
    2a38:	76 0c       	add	r7, r6
    2a3a:	97 c5       	rjmp	.+2862   	; 0x356a <ProcessInput+0xfc0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2a3c:	ee 2e       	mov	r14, r30
    2a3e:	f1 2c       	mov	r15, r1
    2a40:	f7 01       	movw	r30, r14
    2a42:	ee 0f       	add	r30, r30
    2a44:	ff 1f       	adc	r31, r31
    2a46:	e3 53       	subi	r30, 0x33	; 51
    2a48:	f6 4c       	sbci	r31, 0xC6	; 198
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	d8 01       	movw	r26, r16
    2a50:	11 96       	adiw	r26, 0x01	; 1
    2a52:	6c 91       	ld	r22, X
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	c7 d9       	rcall	.-3186   	; 0x1de8 <FindChild>
    2a5a:	f7 01       	movw	r30, r14
    2a5c:	ee 0f       	add	r30, r30
    2a5e:	ff 1f       	adc	r31, r31
    2a60:	e1 53       	subi	r30, 0x31	; 49
    2a62:	f6 4c       	sbci	r31, 0xC6	; 198
    2a64:	80 83       	st	Z, r24
    2a66:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2a68:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <currDepth>
    2a6c:	29 2f       	mov	r18, r25
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	f9 01       	movw	r30, r18
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	e1 53       	subi	r30, 0x31	; 49
    2a78:	f6 4c       	sbci	r31, 0xC6	; 198
    2a7a:	40 81       	ld	r20, Z
    2a7c:	51 81       	ldd	r21, Z+1	; 0x01
    2a7e:	41 15       	cp	r20, r1
    2a80:	51 05       	cpc	r21, r1
    2a82:	21 f0       	breq	.+8      	; 0x2a8c <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    2a84:	6e ec       	ldi	r22, 0xCE	; 206
    2a86:	78 e3       	ldi	r23, 0x38	; 56
    2a88:	ca 01       	movw	r24, r20
    2a8a:	1e c0       	rjmp	.+60     	; 0x2ac8 <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2a8c:	99 23       	and	r25, r25
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2a90:	9e c5       	rjmp	.+2876   	; 0x35ce <ProcessInput+0x1024>
    2a92:	22 0f       	add	r18, r18
    2a94:	33 1f       	adc	r19, r19
    2a96:	f9 01       	movw	r30, r18
    2a98:	e5 53       	subi	r30, 0x35	; 53
    2a9a:	f6 4c       	sbci	r31, 0xC6	; 198
    2a9c:	d8 01       	movw	r26, r16
    2a9e:	11 96       	adiw	r26, 0x01	; 1
    2aa0:	6c 91       	ld	r22, X
    2aa2:	80 81       	ld	r24, Z
    2aa4:	91 81       	ldd	r25, Z+1	; 0x01
    2aa6:	4c d9       	rcall	.-3432   	; 0x1d40 <CheckLetter>
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	03 c0       	rjmp	.+6      	; 0x2ab2 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2aac:	77 24       	eor	r7, r7
    2aae:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2ab0:	5c c5       	rjmp	.+2744   	; 0x356a <ProcessInput+0xfc0>
    2ab2:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	ee 0f       	add	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	e5 53       	subi	r30, 0x35	; 53
    2abe:	f6 4c       	sbci	r31, 0xC6	; 198
    2ac0:	6e ec       	ldi	r22, 0xCE	; 206
    2ac2:	78 e3       	ldi	r23, 0x38	; 56
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	c4 d8       	rcall	.-3704   	; 0x1c52 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2aca:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x1c>
    2ace:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad2:	20 91 dc 38 	lds	r18, 0x38DC	; 0x8038dc <actObj1.3989+0xe>
    2ad6:	30 91 dd 38 	lds	r19, 0x38DD	; 0x8038dd <actObj1.3989+0xf>
    2ada:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    2ade:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2ae2:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    2ae6:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    2aea:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    2aee:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
    2af2:	2a ce       	rjmp	.-940    	; 0x2748 <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2af4:	80 37       	cpi	r24, 0x70	; 112
    2af6:	09 f0       	breq	.+2      	; 0x2afa <ProcessInput+0x550>
    2af8:	96 c0       	rjmp	.+300    	; 0x2c26 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    2afa:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <inventory>
    2afe:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inventory+0x1>
    2b02:	89 2b       	or	r24, r25
    2b04:	79 f0       	breq	.+30     	; 0x2b24 <ProcessInput+0x57a>
    2b06:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <inventory+0x2>
    2b0a:	90 91 3a 38 	lds	r25, 0x383A	; 0x80383a <inventory+0x3>
    2b0e:	89 2b       	or	r24, r25
    2b10:	49 f0       	breq	.+18     	; 0x2b24 <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b12:	85 e4       	ldi	r24, 0x45	; 69
    2b14:	98 e7       	ldi	r25, 0x78	; 120
    2b16:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    2b1a:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2b1e:	89 e5       	ldi	r24, 0x59	; 89
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	08 ce       	rjmp	.-1008   	; 0x2734 <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2b24:	b2 e0       	ldi	r27, 0x02	; 2
    2b26:	fb 12       	cpse	r15, r27
    2b28:	70 cd       	rjmp	.-1312   	; 0x260a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2b2a:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <currDepth>
    2b2e:	f1 2c       	mov	r15, r1
    2b30:	f7 01       	movw	r30, r14
    2b32:	ee 0f       	add	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	e3 53       	subi	r30, 0x33	; 51
    2b38:	f6 4c       	sbci	r31, 0xC6	; 198
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	d8 01       	movw	r26, r16
    2b40:	11 96       	adiw	r26, 0x01	; 1
    2b42:	6c 91       	ld	r22, X
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	4f d9       	rcall	.-3426   	; 0x1de8 <FindChild>
    2b4a:	f7 01       	movw	r30, r14
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	e1 53       	subi	r30, 0x31	; 49
    2b52:	f6 4c       	sbci	r31, 0xC6	; 198
    2b54:	80 83       	st	Z, r24
    2b56:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2b58:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <currDepth>
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	2f 5f       	subi	r18, 0xFF	; 255
    2b60:	3f 4f       	sbci	r19, 0xFF	; 255
    2b62:	22 0f       	add	r18, r18
    2b64:	33 1f       	adc	r19, r19
    2b66:	f9 01       	movw	r30, r18
    2b68:	e3 53       	subi	r30, 0x33	; 51
    2b6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <ProcessInput+0x5cc>
    2b74:	ca c3       	rjmp	.+1940   	; 0x330a <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    2b76:	40 91 37 38 	lds	r20, 0x3837	; 0x803837 <inventory>
    2b7a:	50 91 38 38 	lds	r21, 0x3838	; 0x803838 <inventory+0x1>
    2b7e:	84 17       	cp	r24, r20
    2b80:	95 07       	cpc	r25, r21
    2b82:	39 f0       	breq	.+14     	; 0x2b92 <ProcessInput+0x5e8>
    2b84:	40 91 39 38 	lds	r20, 0x3839	; 0x803839 <inventory+0x2>
    2b88:	50 91 3a 38 	lds	r21, 0x383A	; 0x80383a <inventory+0x3>
    2b8c:	84 17       	cp	r24, r20
    2b8e:	95 07       	cpc	r25, r21
    2b90:	c1 f4       	brne	.+48     	; 0x2bc2 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b92:	80 e2       	ldi	r24, 0x20	; 32
    2b94:	98 e7       	ldi	r25, 0x78	; 120
    2b96:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    2b9a:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2b9e:	85 e2       	ldi	r24, 0x25	; 37
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    2ba6:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    2bb2:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	e3 53       	subi	r30, 0x33	; 51
    2bba:	f6 4c       	sbci	r31, 0xC6	; 198
    2bbc:	10 82       	st	Z, r1
    2bbe:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2bc0:	c3 cd       	rjmp	.-1146   	; 0x2748 <ProcessInput+0x19e>
    2bc2:	6e ec       	ldi	r22, 0xCE	; 206
    2bc4:	78 e3       	ldi	r23, 0x38	; 56
    2bc6:	45 d8       	rcall	.-3958   	; 0x1c52 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    2bc8:	80 91 d5 38 	lds	r24, 0x38D5	; 0x8038d5 <actObj1.3989+0x7>
    2bcc:	0e 94 df 09 	call	0x13be	; 0x13be <CheckState>
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <ProcessInput+0x62c>
    2bd4:	75 c3       	rjmp	.+1770   	; 0x32c0 <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    2bd6:	80 91 d9 38 	lds	r24, 0x38D9	; 0x8038d9 <actObj1.3989+0xb>
    2bda:	88 23       	and	r24, r24
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <ProcessInput+0x636>
    2bde:	15 cd       	rjmp	.-1494   	; 0x260a <ProcessInput+0x60>
                                if (inventory[0]) {
    2be0:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <inventory>
    2be4:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inventory+0x1>
    2be8:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	ee 0f       	add	r30, r30
    2bf0:	ff 1f       	adc	r31, r31
    2bf2:	e1 53       	subi	r30, 0x31	; 49
    2bf4:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    2bf6:	89 2b       	or	r24, r25
    2bf8:	39 f0       	breq	.+14     	; 0x2c08 <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <inventory+0x2>
    2c02:	90 93 3a 38 	sts	0x383A, r25	; 0x80383a <inventory+0x3>
    2c06:	06 c0       	rjmp	.+12     	; 0x2c14 <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <inventory>
    2c10:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c14:	8a e0       	ldi	r24, 0x0A	; 10
    2c16:	98 e7       	ldi	r25, 0x78	; 120
    2c18:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    2c1c:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2c20:	86 e1       	ldi	r24, 0x16	; 22
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	5e c2       	rjmp	.+1212   	; 0x30e2 <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    2c26:	84 36       	cpi	r24, 0x64	; 100
    2c28:	d9 f4       	brne	.+54     	; 0x2c60 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2c2a:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <inventory>
    2c2e:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inventory+0x1>
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <ProcessInput+0x68e>
    2c36:	ce c4       	rjmp	.+2460   	; 0x35d4 <ProcessInput+0x102a>
    2c38:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <inventory+0x2>
    2c3c:	90 91 3a 38 	lds	r25, 0x383A	; 0x80383a <inventory+0x3>
    2c40:	89 2b       	or	r24, r25
    2c42:	49 f4       	brne	.+18     	; 0x2c56 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c44:	84 ee       	ldi	r24, 0xE4	; 228
    2c46:	97 e7       	ldi	r25, 0x77	; 119
    2c48:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    2c4c:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2c50:	86 e2       	ldi	r24, 0x26	; 38
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	6f cd       	rjmp	.-1314   	; 0x2734 <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2c56:	b2 e0       	ldi	r27, 0x02	; 2
    2c58:	fb 16       	cp	r15, r27
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <ProcessInput+0x6b4>
    2c5c:	21 c5       	rjmp	.+2626   	; 0x36a0 <ProcessInput+0x10f6>
    2c5e:	d5 cc       	rjmp	.-1622   	; 0x260a <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    2c60:	89 36       	cpi	r24, 0x69	; 105
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <ProcessInput+0x6bc>
    2c64:	7b c0       	rjmp	.+246    	; 0x2d5c <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2c66:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <inventory>
    2c6a:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inventory+0x1>
    2c6e:	89 2b       	or	r24, r25
    2c70:	31 f4       	brne	.+12     	; 0x2c7e <ProcessInput+0x6d4>
    2c72:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <inventory+0x2>
    2c76:	90 91 3a 38 	lds	r25, 0x383A	; 0x80383a <inventory+0x3>
    2c7a:	89 2b       	or	r24, r25
    2c7c:	19 f3       	breq	.-58     	; 0x2c44 <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c7e:	8a e0       	ldi	r24, 0x0A	; 10
    2c80:	98 e7       	ldi	r25, 0x78	; 120
    2c82:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    2c86:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    2c8a:	86 e1       	ldi	r24, 0x16	; 22
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    2c92:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    2c9e:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>
    2ca2:	27 e3       	ldi	r18, 0x37	; 55
    2ca4:	e2 2e       	mov	r14, r18
    2ca6:	28 e3       	ldi	r18, 0x38	; 56
    2ca8:	f2 2e       	mov	r15, r18
    2caa:	3b e3       	ldi	r19, 0x3B	; 59
    2cac:	63 2e       	mov	r6, r19
    2cae:	38 e3       	ldi	r19, 0x38	; 56
    2cb0:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2cb2:	42 e0       	ldi	r20, 0x02	; 2
    2cb4:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cb6:	59 e5       	ldi	r21, 0x59	; 89
    2cb8:	c5 2e       	mov	r12, r21
    2cba:	5a e7       	ldi	r21, 0x7A	; 122
    2cbc:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2cbe:	62 e0       	ldi	r22, 0x02	; 2
    2cc0:	a6 2e       	mov	r10, r22
    2cc2:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2cc4:	88 24       	eor	r8, r8
    2cc6:	83 94       	inc	r8
    2cc8:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2cca:	d7 01       	movw	r26, r14
    2ccc:	8d 91       	ld	r24, X+
    2cce:	9d 91       	ld	r25, X+
    2cd0:	7d 01       	movw	r14, r26
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	d9 f1       	breq	.+118    	; 0x2d4c <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    2cd6:	6e ec       	ldi	r22, 0xCE	; 206
    2cd8:	78 e3       	ldi	r23, 0x38	; 56
    2cda:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2cde:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x1a>
    2ce2:	90 91 e9 38 	lds	r25, 0x38E9	; 0x8038e9 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ce6:	e5 2d       	mov	r30, r5
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	df 01       	movw	r26, r30
    2cec:	aa 0f       	add	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	a3 5f       	subi	r26, 0xF3	; 243
    2cf2:	b6 4c       	sbci	r27, 0xC6	; 198
    2cf4:	20 91 da 38 	lds	r18, 0x38DA	; 0x8038da <actObj1.3989+0xc>
    2cf8:	30 91 db 38 	lds	r19, 0x38DB	; 0x8038db <actObj1.3989+0xd>
    2cfc:	2d 93       	st	X+, r18
    2cfe:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2d00:	df 01       	movw	r26, r30
    2d02:	aa 0f       	add	r26, r26
    2d04:	bb 1f       	adc	r27, r27
    2d06:	a3 5b       	subi	r26, 0xB3	; 179
    2d08:	b6 4c       	sbci	r27, 0xC6	; 198
    2d0a:	8d 93       	st	X+, r24
    2d0c:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2d0e:	ee 0f       	add	r30, r30
    2d10:	ff 1f       	adc	r31, r31
    2d12:	e3 57       	subi	r30, 0x73	; 115
    2d14:	f6 4c       	sbci	r31, 0xC6	; 198
    2d16:	10 82       	st	Z, r1
    2d18:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d1a:	e1 e0       	ldi	r30, 0x01	; 1
    2d1c:	e5 0d       	add	r30, r5
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	53 94       	inc	r5
    2d22:	53 94       	inc	r5
    2d24:	df 01       	movw	r26, r30
    2d26:	aa 0f       	add	r26, r26
    2d28:	bb 1f       	adc	r27, r27
    2d2a:	a3 5f       	subi	r26, 0xF3	; 243
    2d2c:	b6 4c       	sbci	r27, 0xC6	; 198
    2d2e:	cd 92       	st	X+, r12
    2d30:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2d32:	df 01       	movw	r26, r30
    2d34:	aa 0f       	add	r26, r26
    2d36:	bb 1f       	adc	r27, r27
    2d38:	a3 5b       	subi	r26, 0xB3	; 179
    2d3a:	b6 4c       	sbci	r27, 0xC6	; 198
    2d3c:	ad 92       	st	X+, r10
    2d3e:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	e3 57       	subi	r30, 0x73	; 115
    2d46:	f6 4c       	sbci	r31, 0xC6	; 198
    2d48:	80 82       	st	Z, r8
    2d4a:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    2d4c:	6e 14       	cp	r6, r14
    2d4e:	7f 04       	cpc	r7, r15
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <ProcessInput+0x7aa>
    2d52:	bb cf       	rjmp	.-138    	; 0x2cca <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2d54:	77 24       	eor	r7, r7
    2d56:	7a 94       	dec	r7
    2d58:	75 0c       	add	r7, r5
    2d5a:	07 c4       	rjmp	.+2062   	; 0x356a <ProcessInput+0xfc0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    2d5c:	9c e8       	ldi	r25, 0x8C	; 140
    2d5e:	98 0f       	add	r25, r24
    2d60:	92 30       	cpi	r25, 0x02	; 2
    2d62:	28 f0       	brcs	.+10     	; 0x2d6e <ProcessInput+0x7c4>
    2d64:	87 36       	cpi	r24, 0x67	; 103
    2d66:	19 f0       	breq	.+6      	; 0x2d6e <ProcessInput+0x7c4>
    2d68:	82 37       	cpi	r24, 0x72	; 114
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <ProcessInput+0x7c4>
    2d6c:	d7 c2       	rjmp	.+1454   	; 0x331c <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    2d6e:	8e ef       	ldi	r24, 0xFE	; 254
    2d70:	8f 0d       	add	r24, r15
    2d72:	82 30       	cpi	r24, 0x02	; 2
    2d74:	08 f0       	brcs	.+2      	; 0x2d78 <ProcessInput+0x7ce>
    2d76:	49 cc       	rjmp	.-1902   	; 0x260a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    2d78:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2d7c:	ce 2e       	mov	r12, r30
    2d7e:	d1 2c       	mov	r13, r1
    2d80:	d8 01       	movw	r26, r16
    2d82:	af 0d       	add	r26, r15
    2d84:	b1 1d       	adc	r27, r1
    2d86:	11 97       	sbiw	r26, 0x01	; 1
    2d88:	f6 01       	movw	r30, r12
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	e3 53       	subi	r30, 0x33	; 51
    2d90:	f6 4c       	sbci	r31, 0xC6	; 198
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	6c 91       	ld	r22, X
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	25 d8       	rcall	.-4022   	; 0x1de8 <FindChild>
    2d9e:	f6 01       	movw	r30, r12
    2da0:	ee 0f       	add	r30, r30
    2da2:	ff 1f       	adc	r31, r31
    2da4:	e1 53       	subi	r30, 0x31	; 49
    2da6:	f6 4c       	sbci	r31, 0xC6	; 198
    2da8:	80 83       	st	Z, r24
    2daa:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2dac:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	ee 0f       	add	r30, r30
    2db4:	ff 1f       	adc	r31, r31
    2db6:	e1 53       	subi	r30, 0x31	; 49
    2db8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <ProcessInput+0x81a>
    2dc2:	9a c2       	rjmp	.+1332   	; 0x32f8 <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    2dc4:	b3 e0       	ldi	r27, 0x03	; 3
    2dc6:	fb 12       	cpse	r15, r27
    2dc8:	78 c1       	rjmp	.+752    	; 0x30ba <ProcessInput+0xb10>
    2dca:	f8 01       	movw	r30, r16
    2dcc:	20 81       	ld	r18, Z
    2dce:	25 37       	cpi	r18, 0x75	; 117
    2dd0:	19 f0       	breq	.+6      	; 0x2dd8 <ProcessInput+0x82e>
    2dd2:	27 36       	cpi	r18, 0x67	; 103
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <ProcessInput+0x82e>
    2dd6:	71 c1       	rjmp	.+738    	; 0x30ba <ProcessInput+0xb10>
    2dd8:	61 2c       	mov	r6, r1
    2dda:	77 24       	eor	r7, r7
    2ddc:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dde:	54 e6       	ldi	r21, 0x64	; 100
    2de0:	c5 2e       	mov	r12, r21
    2de2:	59 e7       	ldi	r21, 0x79	; 121
    2de4:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2de6:	61 e2       	ldi	r22, 0x21	; 33
    2de8:	a6 2e       	mov	r10, r22
    2dea:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2dec:	88 24       	eor	r8, r8
    2dee:	83 94       	inc	r8
    2df0:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2df2:	e6 2c       	mov	r14, r6
    2df4:	f1 2c       	mov	r15, r1
    2df6:	c7 01       	movw	r24, r14
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	9c 01       	movw	r18, r24
    2dfe:	29 5c       	subi	r18, 0xC9	; 201
    2e00:	37 4c       	sbci	r19, 0xC7	; 199
    2e02:	79 01       	movw	r14, r18
    2e04:	d9 01       	movw	r26, r18
    2e06:	8d 91       	ld	r24, X+
    2e08:	9c 91       	ld	r25, X
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	81 f0       	breq	.+32     	; 0x2e2e <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    2e0e:	f8 01       	movw	r30, r16
    2e10:	61 81       	ldd	r22, Z+1	; 0x01
    2e12:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <CheckLetter>
    2e16:	88 23       	and	r24, r24
    2e18:	51 f0       	breq	.+20     	; 0x2e2e <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    2e1a:	63 ea       	ldi	r22, 0xA3	; 163
    2e1c:	78 e3       	ldi	r23, 0x38	; 56
    2e1e:	d7 01       	movw	r26, r14
    2e20:	8d 91       	ld	r24, X+
    2e22:	9c 91       	ld	r25, X
    2e24:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>
                                    x = 2;
    2e28:	32 e0       	ldi	r19, 0x02	; 2
    2e2a:	63 2e       	mov	r6, r19
    2e2c:	1e c0       	rjmp	.+60     	; 0x2e6a <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    2e2e:	b1 e0       	ldi	r27, 0x01	; 1
    2e30:	6b 12       	cpse	r6, r27
    2e32:	1a c0       	rjmp	.+52     	; 0x2e68 <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e34:	e7 2d       	mov	r30, r7
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	df 01       	movw	r26, r30
    2e3a:	aa 0f       	add	r26, r26
    2e3c:	bb 1f       	adc	r27, r27
    2e3e:	a3 5f       	subi	r26, 0xF3	; 243
    2e40:	b6 4c       	sbci	r27, 0xC6	; 198
    2e42:	cd 92       	st	X+, r12
    2e44:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2e46:	df 01       	movw	r26, r30
    2e48:	aa 0f       	add	r26, r26
    2e4a:	bb 1f       	adc	r27, r27
    2e4c:	a3 5b       	subi	r26, 0xB3	; 179
    2e4e:	b6 4c       	sbci	r27, 0xC6	; 198
    2e50:	ad 92       	st	X+, r10
    2e52:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2e54:	ee 0f       	add	r30, r30
    2e56:	ff 1f       	adc	r31, r31
    2e58:	e3 57       	subi	r30, 0x73	; 115
    2e5a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e5c:	80 82       	st	Z, r8
    2e5e:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2e60:	f8 01       	movw	r30, r16
    2e62:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2e64:	73 94       	inc	r7
    2e66:	01 c0       	rjmp	.+2      	; 0x2e6a <ProcessInput+0x8c0>
    2e68:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2e6a:	63 94       	inc	r6
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	6f 16       	cp	r6, r31
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <ProcessInput+0x8ca>
    2e72:	bf cf       	rjmp	.-130    	; 0x2df2 <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2e74:	d8 01       	movw	r26, r16
    2e76:	8c 91       	ld	r24, X
    2e78:	88 23       	and	r24, r24
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <ProcessInput+0x8d4>
    2e7c:	76 c3       	rjmp	.+1772   	; 0x356a <ProcessInput+0xfc0>
                            PopulateObject(route[currDepth+1], &actObj1);
    2e7e:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	ee 0f       	add	r30, r30
    2e86:	ff 1f       	adc	r31, r31
    2e88:	e1 53       	subi	r30, 0x31	; 49
    2e8a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e8c:	6e ec       	ldi	r22, 0xCE	; 206
    2e8e:	78 e3       	ldi	r23, 0x38	; 56
    2e90:	80 81       	ld	r24, Z
    2e92:	91 81       	ldd	r25, Z+1	; 0x01
    2e94:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2e98:	e0 90 ec 38 	lds	r14, 0x38EC	; 0x8038ec <actObj1.3989+0x1e>
    2e9c:	f0 90 ed 38 	lds	r15, 0x38ED	; 0x8038ed <actObj1.3989+0x1f>
    2ea0:	b1 e0       	ldi	r27, 0x01	; 1
    2ea2:	eb 16       	cp	r14, r27
    2ea4:	f1 04       	cpc	r15, r1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <ProcessInput+0x900>
    2ea8:	9a c0       	rjmp	.+308    	; 0x2fde <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2eaa:	98 01       	movw	r18, r16
    2eac:	2e 5f       	subi	r18, 0xFE	; 254
    2eae:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	61 e0       	ldi	r22, 0x01	; 1
    2eb4:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3989+0x10>
    2eb8:	90 91 df 38 	lds	r25, 0x38DF	; 0x8038df <actObj1.3989+0x11>
    2ebc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <ExtEERead>
                                if (data[2] == '1') {
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	42 81       	ldd	r20, Z+2	; 0x02
    2ec4:	21 e0       	ldi	r18, 0x01	; 1
    2ec6:	27 0d       	add	r18, r7
    2ec8:	87 2d       	mov	r24, r7
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	41 33       	cpi	r20, 0x31	; 49
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <ProcessInput+0x928>
    2ed0:	6b c0       	rjmp	.+214    	; 0x2fa8 <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    2ed2:	30 91 ae 38 	lds	r19, 0x38AE	; 0x8038ae <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    2ed6:	51 ee       	ldi	r21, 0xE1	; 225
    2ed8:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eda:	fc 01       	movw	r30, r24
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	e3 5f       	subi	r30, 0xF3	; 243
    2ee2:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    2ee4:	54 30       	cpi	r21, 0x04	; 4
    2ee6:	60 f0       	brcs	.+24     	; 0x2f00 <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ee8:	44 e0       	ldi	r20, 0x04	; 4
    2eea:	59 e7       	ldi	r21, 0x79	; 121
    2eec:	40 83       	st	Z, r20
    2eee:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	ee 0f       	add	r30, r30
    2ef4:	ff 1f       	adc	r31, r31
    2ef6:	e3 5b       	subi	r30, 0xB3	; 179
    2ef8:	f6 4c       	sbci	r31, 0xC6	; 198
    2efa:	4a e1       	ldi	r20, 0x1A	; 26
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	64 c0       	rjmp	.+200    	; 0x2fc8 <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f00:	6e e8       	ldi	r22, 0x8E	; 142
    2f02:	75 e7       	ldi	r23, 0x75	; 117
    2f04:	60 83       	st	Z, r22
    2f06:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2f08:	fc 01       	movw	r30, r24
    2f0a:	ee 0f       	add	r30, r30
    2f0c:	ff 1f       	adc	r31, r31
    2f0e:	e3 5b       	subi	r30, 0xB3	; 179
    2f10:	f6 4c       	sbci	r31, 0xC6	; 198
    2f12:	62 eb       	ldi	r22, 0xB2	; 178
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	60 83       	st	Z, r22
    2f18:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	fc 01       	movw	r30, r24
    2f20:	e3 57       	subi	r30, 0x73	; 115
    2f22:	f6 4c       	sbci	r31, 0xC6	; 198
    2f24:	e0 82       	st	Z, r14
    2f26:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f28:	82 2f       	mov	r24, r18
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	ee 0f       	add	r30, r30
    2f30:	ff 1f       	adc	r31, r31
    2f32:	e3 5f       	subi	r30, 0xF3	; 243
    2f34:	f6 4c       	sbci	r31, 0xC6	; 198
    2f36:	6b e5       	ldi	r22, 0x5B	; 91
    2f38:	7a e7       	ldi	r23, 0x7A	; 122
    2f3a:	60 83       	st	Z, r22
    2f3c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2f3e:	fc 01       	movw	r30, r24
    2f40:	ee 0f       	add	r30, r30
    2f42:	ff 1f       	adc	r31, r31
    2f44:	e3 5b       	subi	r30, 0xB3	; 179
    2f46:	f6 4c       	sbci	r31, 0xC6	; 198
    2f48:	62 e0       	ldi	r22, 0x02	; 2
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	60 83       	st	Z, r22
    2f4e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	fc 01       	movw	r30, r24
    2f56:	e3 57       	subi	r30, 0x73	; 115
    2f58:	f6 4c       	sbci	r31, 0xC6	; 198
    2f5a:	e0 82       	st	Z, r14
    2f5c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	87 0d       	add	r24, r7
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	f3 e0       	ldi	r31, 0x03	; 3
    2f66:	7f 0e       	add	r7, r31
    2f68:	fc 01       	movw	r30, r24
    2f6a:	ee 0f       	add	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	e3 5f       	subi	r30, 0xF3	; 243
    2f70:	f6 4c       	sbci	r31, 0xC6	; 198
    2f72:	60 eb       	ldi	r22, 0xB0	; 176
    2f74:	78 e7       	ldi	r23, 0x78	; 120
    2f76:	60 83       	st	Z, r22
    2f78:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	ee 0f       	add	r30, r30
    2f7e:	ff 1f       	adc	r31, r31
    2f80:	e3 5b       	subi	r30, 0xB3	; 179
    2f82:	f6 4c       	sbci	r31, 0xC6	; 198
    2f84:	62 e1       	ldi	r22, 0x12	; 18
    2f86:	70 e0       	ldi	r23, 0x00	; 0
    2f88:	60 83       	st	Z, r22
    2f8a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	fc 01       	movw	r30, r24
    2f92:	e3 57       	subi	r30, 0x73	; 115
    2f94:	f6 4c       	sbci	r31, 0xC6	; 198
    2f96:	e0 82       	st	Z, r14
    2f98:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2f9a:	40 93 fc 38 	sts	0x38FC, r20	; 0x8038fc <specialInput>
                                        specialInput[1] = item;
    2f9e:	30 93 fd 38 	sts	0x38FD, r19	; 0x8038fd <specialInput+0x1>
                                        specialInput[2] = 0;
    2fa2:	10 92 fe 38 	sts	0x38FE, r1	; 0x8038fe <specialInput+0x2>
    2fa6:	e1 c2       	rjmp	.+1474   	; 0x356a <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fa8:	fc 01       	movw	r30, r24
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	e3 5f       	subi	r30, 0xF3	; 243
    2fb0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fb2:	40 e4       	ldi	r20, 0x40	; 64
    2fb4:	56 e7       	ldi	r21, 0x76	; 118
    2fb6:	40 83       	st	Z, r20
    2fb8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2fba:	fc 01       	movw	r30, r24
    2fbc:	ee 0f       	add	r30, r30
    2fbe:	ff 1f       	adc	r31, r31
    2fc0:	e3 5b       	subi	r30, 0xB3	; 179
    2fc2:	f6 4c       	sbci	r31, 0xC6	; 198
    2fc4:	42 e4       	ldi	r20, 0x42	; 66
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	40 83       	st	Z, r20
    2fca:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	e3 57       	subi	r30, 0x73	; 115
    2fd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fd6:	e0 82       	st	Z, r14
    2fd8:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    2fda:	72 2e       	mov	r7, r18
    2fdc:	c6 c2       	rjmp	.+1420   	; 0x356a <ProcessInput+0xfc0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    2fde:	90 91 d7 38 	lds	r25, 0x38D7	; 0x8038d7 <actObj1.3989+0x9>
    2fe2:	80 91 ae 38 	lds	r24, 0x38AE	; 0x8038ae <actObj2.3990+0xb>
    2fe6:	98 13       	cpse	r25, r24
    2fe8:	2f c0       	rjmp	.+94     	; 0x3048 <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2fea:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x26>
    2fee:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x27>
    2ff2:	ff 24       	eor	r15, r15
    2ff4:	f3 94       	inc	r15
    2ff6:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ff8:	87 2d       	mov	r24, r7
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	ee 0f       	add	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	e3 5f       	subi	r30, 0xF3	; 243
    3004:	f6 4c       	sbci	r31, 0xC6	; 198
    3006:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0x18>
    300a:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0x19>
    300e:	40 83       	st	Z, r20
    3010:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3012:	fc 01       	movw	r30, r24
    3014:	ee 0f       	add	r30, r30
    3016:	ff 1f       	adc	r31, r31
    3018:	e3 5b       	subi	r30, 0xB3	; 179
    301a:	f6 4c       	sbci	r31, 0xC6	; 198
    301c:	20 83       	st	Z, r18
    301e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	fc 01       	movw	r30, r24
    3026:	e3 57       	subi	r30, 0x73	; 115
    3028:	f6 4c       	sbci	r31, 0xC6	; 198
    302a:	10 82       	st	Z, r1
    302c:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    302e:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3989+0x2a>
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    3038:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    303c:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3989+0xa>
    3040:	0e 94 d5 09 	call	0x13aa	; 0x13aa <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3044:	7f 2c       	mov	r7, r15
    3046:	91 c2       	rjmp	.+1314   	; 0x356a <ProcessInput+0xfc0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3048:	d8 01       	movw	r26, r16
    304a:	8c 91       	ld	r24, X
    304c:	85 37       	cpi	r24, 0x75	; 117
    304e:	99 f4       	brne	.+38     	; 0x3076 <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3050:	87 2d       	mov	r24, r7
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	fc 01       	movw	r30, r24
    3056:	ee 0f       	add	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	e3 5f       	subi	r30, 0xF3	; 243
    305c:	f6 4c       	sbci	r31, 0xC6	; 198
    305e:	24 e0       	ldi	r18, 0x04	; 4
    3060:	39 e7       	ldi	r19, 0x79	; 121
    3062:	20 83       	st	Z, r18
    3064:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3066:	fc 01       	movw	r30, r24
    3068:	ee 0f       	add	r30, r30
    306a:	ff 1f       	adc	r31, r31
    306c:	e3 5b       	subi	r30, 0xB3	; 179
    306e:	f6 4c       	sbci	r31, 0xC6	; 198
    3070:	2a e1       	ldi	r18, 0x1A	; 26
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	15 c0       	rjmp	.+42     	; 0x30a0 <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3076:	87 36       	cpi	r24, 0x67	; 103
    3078:	09 f0       	breq	.+2      	; 0x307c <ProcessInput+0xad2>
    307a:	77 c2       	rjmp	.+1262   	; 0x356a <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    307c:	87 2d       	mov	r24, r7
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	fc 01       	movw	r30, r24
    3082:	ee 0f       	add	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	e3 5f       	subi	r30, 0xF3	; 243
    3088:	f6 4c       	sbci	r31, 0xC6	; 198
    308a:	2d ed       	ldi	r18, 0xDD	; 221
    308c:	36 e7       	ldi	r19, 0x76	; 118
    308e:	20 83       	st	Z, r18
    3090:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3092:	fc 01       	movw	r30, r24
    3094:	ee 0f       	add	r30, r30
    3096:	ff 1f       	adc	r31, r31
    3098:	e3 5b       	subi	r30, 0xB3	; 179
    309a:	f6 4c       	sbci	r31, 0xC6	; 198
    309c:	28 e2       	ldi	r18, 0x28	; 40
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	20 83       	st	Z, r18
    30a2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	fc 01       	movw	r30, r24
    30aa:	e3 57       	subi	r30, 0x73	; 115
    30ac:	f6 4c       	sbci	r31, 0xC6	; 198
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	80 83       	st	Z, r24
    30b4:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    30b6:	73 94       	inc	r7
    30b8:	58 c2       	rjmp	.+1200   	; 0x356a <ProcessInput+0xfc0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    30ba:	6e ec       	ldi	r22, 0xCE	; 206
    30bc:	78 e3       	ldi	r23, 0x38	; 56
    30be:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    30c2:	f8 01       	movw	r30, r16
    30c4:	80 81       	ld	r24, Z
    30c6:	84 37       	cpi	r24, 0x74	; 116
    30c8:	69 f5       	brne	.+90     	; 0x3124 <ProcessInput+0xb7a>
    30ca:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x8>
    30ce:	83 fd       	sbrc	r24, 3
    30d0:	4a c0       	rjmp	.+148    	; 0x3166 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30d2:	8e e1       	ldi	r24, 0x1E	; 30
    30d4:	99 e7       	ldi	r25, 0x79	; 121
    30d6:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    30da:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    30de:	8e e1       	ldi	r24, 0x1E	; 30
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    30e6:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    30f2:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    30f6:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x1a>
    30fa:	90 91 e9 38 	lds	r25, 0x38E9	; 0x8038e9 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30fe:	20 91 da 38 	lds	r18, 0x38DA	; 0x8038da <actObj1.3989+0xc>
    3102:	30 91 db 38 	lds	r19, 0x38DB	; 0x8038db <actObj1.3989+0xd>
    3106:	20 93 11 39 	sts	0x3911, r18	; 0x803911 <reactStr+0x4>
    310a:	30 93 12 39 	sts	0x3912, r19	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    310e:	80 93 51 39 	sts	0x3951, r24	; 0x803951 <reactStr+0x44>
    3112:	90 93 52 39 	sts	0x3952, r25	; 0x803952 <reactStr+0x45>
    reactStr[2][number]=type;
    3116:	10 92 91 39 	sts	0x3991, r1	; 0x803991 <reactStr+0x84>
    311a:	10 92 92 39 	sts	0x3992, r1	; 0x803992 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    311e:	a3 e0       	ldi	r26, 0x03	; 3
    3120:	7a 2e       	mov	r7, r26
    3122:	23 c2       	rjmp	.+1094   	; 0x356a <ProcessInput+0xfc0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    3124:	85 37       	cpi	r24, 0x75	; 117
    3126:	69 f4       	brne	.+26     	; 0x3142 <ProcessInput+0xb98>
    3128:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x8>
    312c:	84 fd       	sbrc	r24, 4
    312e:	1b c0       	rjmp	.+54     	; 0x3166 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3130:	84 e0       	ldi	r24, 0x04	; 4
    3132:	99 e7       	ldi	r25, 0x79	; 121
    3134:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    3138:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    313c:	8a e1       	ldi	r24, 0x1A	; 26
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	f9 ca       	rjmp	.-2574   	; 0x2734 <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3142:	82 37       	cpi	r24, 0x72	; 114
    3144:	69 f4       	brne	.+26     	; 0x3160 <ProcessInput+0xbb6>
    3146:	80 91 d6 38 	lds	r24, 0x38D6	; 0x8038d6 <actObj1.3989+0x8>
    314a:	85 fd       	sbrc	r24, 5
    314c:	0c c0       	rjmp	.+24     	; 0x3166 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    314e:	89 ee       	ldi	r24, 0xE9	; 233
    3150:	98 e7       	ldi	r25, 0x78	; 120
    3152:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    3156:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    315a:	8b e1       	ldi	r24, 0x1B	; 27
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	ea ca       	rjmp	.-2604   	; 0x2734 <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3160:	87 36       	cpi	r24, 0x67	; 103
    3162:	09 f4       	brne	.+2      	; 0x3166 <ProcessInput+0xbbc>
    3164:	52 ca       	rjmp	.-2908   	; 0x260a <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3166:	e0 90 ec 38 	lds	r14, 0x38EC	; 0x8038ec <actObj1.3989+0x1e>
    316a:	f0 90 ed 38 	lds	r15, 0x38ED	; 0x8038ed <actObj1.3989+0x1f>
    316e:	f1 e0       	ldi	r31, 0x01	; 1
    3170:	ef 16       	cp	r14, r31
    3172:	f1 04       	cpc	r15, r1
    3174:	11 f5       	brne	.+68     	; 0x31ba <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3176:	98 01       	movw	r18, r16
    3178:	2e 5f       	subi	r18, 0xFE	; 254
    317a:	3f 4f       	sbci	r19, 0xFF	; 255
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	61 e0       	ldi	r22, 0x01	; 1
    3180:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3989+0x10>
    3184:	90 91 df 38 	lds	r25, 0x38DF	; 0x8038df <actObj1.3989+0x11>
    3188:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <ExtEERead>
                                if (data[2] == '1') {
    318c:	d8 01       	movw	r26, r16
    318e:	12 96       	adiw	r26, 0x02	; 2
    3190:	8c 91       	ld	r24, X
    3192:	81 33       	cpi	r24, 0x31	; 49
    3194:	09 f0       	breq	.+2      	; 0x3198 <ProcessInput+0xbee>
    3196:	8a cc       	rjmp	.-1772   	; 0x2aac <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3198:	83 e6       	ldi	r24, 0x63	; 99
    319a:	95 e7       	ldi	r25, 0x75	; 117
    319c:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    31a0:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    31a4:	8b e2       	ldi	r24, 0x2B	; 43
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    31ac:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    31b0:	e0 92 8f 39 	sts	0x398F, r14	; 0x80398f <reactStr+0x82>
    31b4:	f0 92 90 39 	sts	0x3990, r15	; 0x803990 <reactStr+0x83>
    31b8:	c7 ca       	rjmp	.-2674   	; 0x2748 <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    31ba:	e1 14       	cp	r14, r1
    31bc:	f1 04       	cpc	r15, r1
    31be:	09 f4       	brne	.+2      	; 0x31c2 <ProcessInput+0xc18>
    31c0:	59 c0       	rjmp	.+178    	; 0x3274 <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31c2:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3989+0x10>
    31c6:	90 91 df 38 	lds	r25, 0x38DF	; 0x8038df <actObj1.3989+0x11>
    31ca:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    31ce:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    31d2:	e0 92 4f 39 	sts	0x394F, r14	; 0x80394f <reactStr+0x42>
    31d6:	f0 92 50 39 	sts	0x3950, r15	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    31da:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    31de:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31e2:	8b e5       	ldi	r24, 0x5B	; 91
    31e4:	9a e7       	ldi	r25, 0x7A	; 122
    31e6:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <reactStr+0x4>
    31ea:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    31ee:	82 e0       	ldi	r24, 0x02	; 2
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	80 93 51 39 	sts	0x3951, r24	; 0x803951 <reactStr+0x44>
    31f6:	90 93 52 39 	sts	0x3952, r25	; 0x803952 <reactStr+0x45>
    reactStr[2][number]=type;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	80 93 91 39 	sts	0x3991, r24	; 0x803991 <reactStr+0x84>
    3202:	90 93 92 39 	sts	0x3992, r25	; 0x803992 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3206:	20 eb       	ldi	r18, 0xB0	; 176
    3208:	38 e7       	ldi	r19, 0x78	; 120
    320a:	20 93 13 39 	sts	0x3913, r18	; 0x803913 <reactStr+0x6>
    320e:	30 93 14 39 	sts	0x3914, r19	; 0x803914 <reactStr+0x7>
    reactStr[1][number]=length;
    3212:	22 e1       	ldi	r18, 0x12	; 18
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	20 93 53 39 	sts	0x3953, r18	; 0x803953 <reactStr+0x46>
    321a:	30 93 54 39 	sts	0x3954, r19	; 0x803954 <reactStr+0x47>
    reactStr[2][number]=type;
    321e:	80 93 93 39 	sts	0x3993, r24	; 0x803993 <reactStr+0x86>
    3222:	90 93 94 39 	sts	0x3994, r25	; 0x803994 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    3226:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3989+0x20>
    322a:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3989+0x21>
    322e:	40 97       	sbiw	r24, 0x10	; 16
    3230:	30 f0       	brcs	.+12     	; 0x323e <ProcessInput+0xc94>
    3232:	8f e0       	ldi	r24, 0x0F	; 15
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	80 93 ee 38 	sts	0x38EE, r24	; 0x8038ee <actObj1.3989+0x20>
    323a:	90 93 ef 38 	sts	0x38EF, r25	; 0x8038ef <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    323e:	2c ef       	ldi	r18, 0xFC	; 252
    3240:	38 e3       	ldi	r19, 0x38	; 56
    3242:	40 e0       	ldi	r20, 0x00	; 0
    3244:	60 91 ee 38 	lds	r22, 0x38EE	; 0x8038ee <actObj1.3989+0x20>
    3248:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <actObj1.3989+0x12>
    324c:	90 91 e1 38 	lds	r25, 0x38E1	; 0x8038e1 <actObj1.3989+0x13>
    3250:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3254:	6c ef       	ldi	r22, 0xFC	; 252
    3256:	78 e3       	ldi	r23, 0x38	; 56
    3258:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3989+0x20>
    325c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3260:	e0 91 ee 38 	lds	r30, 0x38EE	; 0x8038ee <actObj1.3989+0x20>
    3264:	f0 91 ef 38 	lds	r31, 0x38EF	; 0x8038ef <actObj1.3989+0x21>
    3268:	e4 50       	subi	r30, 0x04	; 4
    326a:	f7 4c       	sbci	r31, 0xC7	; 199
    326c:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    326e:	f4 e0       	ldi	r31, 0x04	; 4
    3270:	7f 2e       	mov	r7, r31
    3272:	7b c1       	rjmp	.+758    	; 0x356a <ProcessInput+0xfc0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3274:	80 91 d5 38 	lds	r24, 0x38D5	; 0x8038d5 <actObj1.3989+0x7>
    3278:	0e 94 df 09 	call	0x13be	; 0x13be <CheckState>
    327c:	88 23       	and	r24, r24
    327e:	01 f1       	breq	.+64     	; 0x32c0 <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3280:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x26>
    3284:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3288:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0x18>
    328c:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0x19>
    3290:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    3294:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    3298:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    329c:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    32a0:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    32a4:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    32a8:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3989+0x2a>
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    32b2:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    32b6:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3989+0xa>
    32ba:	0e 94 d5 09 	call	0x13aa	; 0x13aa <UpdateState>
    32be:	44 ca       	rjmp	.-2936   	; 0x2748 <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    32c0:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3989+0x24>
    32c4:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32c8:	20 91 e4 38 	lds	r18, 0x38E4	; 0x8038e4 <actObj1.3989+0x16>
    32cc:	30 91 e5 38 	lds	r19, 0x38E5	; 0x8038e5 <actObj1.3989+0x17>
    32d0:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    32d4:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    32d8:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    32dc:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    32e0:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    32e4:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    32e8:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3989+0x29>
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    32f2:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
    32f6:	28 ca       	rjmp	.-2992   	; 0x2748 <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    32f8:	f8 01       	movw	r30, r16
    32fa:	80 81       	ld	r24, Z
    32fc:	84 37       	cpi	r24, 0x74	; 116
    32fe:	11 f0       	breq	.+4      	; 0x3304 <ProcessInput+0xd5a>
    3300:	87 36       	cpi	r24, 0x67	; 103
    3302:	19 f4       	brne	.+6      	; 0x330a <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3304:	8c e3       	ldi	r24, 0x3C	; 60
    3306:	99 e7       	ldi	r25, 0x79	; 121
    3308:	02 c0       	rjmp	.+4      	; 0x330e <ProcessInput+0xd64>
    330a:	80 e5       	ldi	r24, 0x50	; 80
    330c:	99 e7       	ldi	r25, 0x79	; 121
    330e:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    3312:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    3316:	84 e1       	ldi	r24, 0x14	; 20
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0c ca       	rjmp	.-3048   	; 0x2734 <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    331c:	81 36       	cpi	r24, 0x61	; 97
    331e:	09 f0       	breq	.+2      	; 0x3322 <ProcessInput+0xd78>
    3320:	c5 cb       	rjmp	.-2166   	; 0x2aac <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3322:	80 91 fb 38 	lds	r24, 0x38FB	; 0x8038fb <specialPassed>
    3326:	82 30       	cpi	r24, 0x02	; 2
    3328:	08 f4       	brcc	.+2      	; 0x332c <ProcessInput+0xd82>
    332a:	b3 c0       	rjmp	.+358    	; 0x3492 <ProcessInput+0xee8>
                if (data[1] > 0) {
    332c:	d8 01       	movw	r26, r16
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	2c 91       	ld	r18, X
    3332:	22 23       	and	r18, r18
    3334:	09 f4       	brne	.+2      	; 0x3338 <ProcessInput+0xd8e>
    3336:	a4 c0       	rjmp	.+328    	; 0x3480 <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    3338:	fe 01       	movw	r30, r28
    333a:	31 96       	adiw	r30, 0x01	; 1
    333c:	7f 01       	movw	r14, r30
    333e:	8a e0       	ldi	r24, 0x0A	; 10
    3340:	df 01       	movw	r26, r30
    3342:	1d 92       	st	X+, r1
    3344:	8a 95       	dec	r24
    3346:	e9 f7       	brne	.-6      	; 0x3342 <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    3348:	21 53       	subi	r18, 0x31	; 49
    334a:	f8 01       	movw	r30, r16
    334c:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    334e:	32 81       	ldd	r19, Z+2	; 0x02
    3350:	31 53       	subi	r19, 0x31	; 49
    3352:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3354:	83 81       	ldd	r24, Z+3	; 0x03
    3356:	81 36       	cpi	r24, 0x61	; 97
    3358:	11 f4       	brne	.+4      	; 0x335e <ProcessInput+0xdb4>
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	08 c0       	rjmp	.+16     	; 0x336e <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    335e:	85 36       	cpi	r24, 0x65	; 101
    3360:	11 f4       	brne	.+4      	; 0x3366 <ProcessInput+0xdbc>
    3362:	13 82       	std	Z+3, r1	; 0x03
    3364:	08 c0       	rjmp	.+16     	; 0x3376 <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    3366:	86 36       	cpi	r24, 0x66	; 102
    3368:	21 f4       	brne	.+8      	; 0x3372 <ProcessInput+0xdc8>
    336a:	83 e0       	ldi	r24, 0x03	; 3
    336c:	f8 01       	movw	r30, r16
    336e:	83 83       	std	Z+3, r24	; 0x03
    3370:	02 c0       	rjmp	.+4      	; 0x3376 <ProcessInput+0xdcc>
                    else data[3] = 2;
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3376:	21 fd       	sbrc	r18, 1
    3378:	04 c0       	rjmp	.+8      	; 0x3382 <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	dc 01       	movw	r26, r24
    3380:	04 c0       	rjmp	.+8      	; 0x338a <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	a0 e1       	ldi	r26, 0x10	; 16
    3388:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    338a:	20 ff       	sbrs	r18, 0
    338c:	03 c0       	rjmp	.+6      	; 0x3394 <ProcessInput+0xdea>
    338e:	9f 5f       	subi	r25, 0xFF	; 255
    3390:	af 4f       	sbci	r26, 0xFF	; 255
    3392:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3394:	f8 01       	movw	r30, r16
    3396:	23 81       	ldd	r18, Z+3	; 0x03
    3398:	21 fd       	sbrc	r18, 1
    339a:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    339c:	20 ff       	sbrs	r18, 0
    339e:	03 c0       	rjmp	.+6      	; 0x33a6 <ProcessInput+0xdfc>
    33a0:	40 96       	adiw	r24, 0x10	; 16
    33a2:	a1 1d       	adc	r26, r1
    33a4:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    33a6:	31 ff       	sbrs	r19, 1
    33a8:	03 c0       	rjmp	.+6      	; 0x33b0 <ProcessInput+0xe06>
    33aa:	90 5f       	subi	r25, 0xF0	; 240
    33ac:	af 4f       	sbci	r26, 0xFF	; 255
    33ae:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    33b0:	30 ff       	sbrs	r19, 0
    33b2:	03 c0       	rjmp	.+6      	; 0x33ba <ProcessInput+0xe10>
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	a1 1d       	adc	r26, r1
    33b8:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    33ba:	40 91 36 38 	lds	r20, 0x3836	; 0x803836 <whoami>
    33be:	24 e0       	ldi	r18, 0x04	; 4
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	24 1b       	sub	r18, r20
    33c4:	31 09       	sbc	r19, r1
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <ProcessInput+0xe2a>
    33cc:	66 0f       	add	r22, r22
    33ce:	77 1f       	adc	r23, r23
    33d0:	88 1f       	adc	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	2a 95       	dec	r18
    33d6:	d2 f7       	brpl	.-12     	; 0x33cc <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33d8:	26 e0       	ldi	r18, 0x06	; 6
    33da:	35 e7       	ldi	r19, 0x75	; 117
    33dc:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    33e0:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    33e4:	20 e2       	ldi	r18, 0x20	; 32
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	20 93 4f 39 	sts	0x394F, r18	; 0x80394f <reactStr+0x42>
    33ec:	30 93 50 39 	sts	0x3950, r19	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    33f0:	21 e0       	ldi	r18, 0x01	; 1
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	20 93 8f 39 	sts	0x398F, r18	; 0x80398f <reactStr+0x82>
    33f8:	30 93 90 39 	sts	0x3990, r19	; 0x803990 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    33fc:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    33fe:	b5 2e       	mov	r11, r21
    3400:	ea e0       	ldi	r30, 0x0A	; 10
    3402:	4e 2e       	mov	r4, r30
    3404:	51 2c       	mov	r5, r1
    3406:	61 2c       	mov	r6, r1
    3408:	71 2c       	mov	r7, r1
    340a:	67 01       	movw	r12, r14
    340c:	cb 0c       	add	r12, r11
    340e:	d1 1c       	adc	r13, r1
    3410:	a3 01       	movw	r20, r6
    3412:	92 01       	movw	r18, r4
    3414:	5b d2       	rcall	.+1206   	; 0x38cc <__udivmodsi4>
    3416:	d6 01       	movw	r26, r12
    3418:	6c 93       	st	X, r22
                        answer /= 10;
    341a:	b9 01       	movw	r22, r18
    341c:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    341e:	61 15       	cp	r22, r1
    3420:	71 05       	cpc	r23, r1
    3422:	81 05       	cpc	r24, r1
    3424:	91 05       	cpc	r25, r1
    3426:	51 f4       	brne	.+20     	; 0x343c <ProcessInput+0xe92>
    3428:	2d e0       	ldi	r18, 0x0D	; 13
    342a:	c2 2e       	mov	r12, r18
    342c:	29 e3       	ldi	r18, 0x39	; 57
    342e:	d2 2e       	mov	r13, r18
    3430:	32 e0       	ldi	r19, 0x02	; 2
    3432:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3434:	88 24       	eor	r8, r8
    3436:	83 94       	inc	r8
    3438:	91 2c       	mov	r9, r1
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    343c:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    343e:	e5 cf       	rjmp	.-54     	; 0x340a <ProcessInput+0xe60>
    3440:	f2 e0       	ldi	r31, 0x02	; 2
    3442:	cf 0e       	add	r12, r31
    3444:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    3446:	29 e0       	ldi	r18, 0x09	; 9
    3448:	2b 15       	cp	r18, r11
    344a:	08 f4       	brcc	.+2      	; 0x344e <ProcessInput+0xea4>
    344c:	8c c0       	rjmp	.+280    	; 0x3566 <ProcessInput+0xfbc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    344e:	73 94       	inc	r7
    3450:	f7 01       	movw	r30, r14
    3452:	eb 0d       	add	r30, r11
    3454:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3456:	80 81       	ld	r24, Z
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	8d 52       	subi	r24, 0x2D	; 45
    345c:	9b 48       	sbci	r25, 0x8B	; 139
    345e:	f6 01       	movw	r30, r12
    3460:	82 83       	std	Z+2, r24	; 0x02
    3462:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    3464:	ee 5b       	subi	r30, 0xBE	; 190
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	80 82       	st	Z, r8
    346a:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    346c:	e0 5c       	subi	r30, 0xC0	; 192
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	80 82       	st	Z, r8
    3472:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3474:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3989+0xa>
    3478:	0e 94 d5 09 	call	0x13aa	; 0x13aa <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    347c:	b3 94       	inc	r11
    347e:	e0 cf       	rjmp	.-64     	; 0x3440 <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3480:	86 e2       	ldi	r24, 0x26	; 38
    3482:	95 e7       	ldi	r25, 0x75	; 117
    3484:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    3488:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    348c:	8d e3       	ldi	r24, 0x3D	; 61
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	5e c0       	rjmp	.+188    	; 0x354e <ProcessInput+0xfa4>
    3492:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	e1 53       	subi	r30, 0x31	; 49
    349e:	f6 4c       	sbci	r31, 0xC6	; 198
    34a0:	6e ec       	ldi	r22, 0xCE	; 206
    34a2:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    34a4:	81 30       	cpi	r24, 0x01	; 1
    34a6:	09 f0       	breq	.+2      	; 0x34aa <ProcessInput+0xf00>
    34a8:	46 c0       	rjmp	.+140    	; 0x3536 <ProcessInput+0xf8c>
                PopulateObject(route[currDepth+1], &actObj1);
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    34b2:	80 91 d5 38 	lds	r24, 0x38D5	; 0x8038d5 <actObj1.3989+0x7>
    34b6:	0e 94 df 09 	call	0x13be	; 0x13be <CheckState>
    34ba:	88 23       	and	r24, r24
    34bc:	01 f1       	breq	.+64     	; 0x34fe <ProcessInput+0xf54>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    34be:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x26>
    34c2:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c6:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0x18>
    34ca:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0x19>
    34ce:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    34d2:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    34d6:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    34da:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    34de:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    34e2:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    34e6:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3989+0x2a>
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    34f0:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    34f4:	80 91 d8 38 	lds	r24, 0x38D8	; 0x8038d8 <actObj1.3989+0xa>
    34f8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <UpdateState>
    34fc:	32 c0       	rjmp	.+100    	; 0x3562 <ProcessInput+0xfb8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    34fe:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3989+0x24>
    3502:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3506:	20 91 e4 38 	lds	r18, 0x38E4	; 0x8038e4 <actObj1.3989+0x16>
    350a:	30 91 e5 38 	lds	r19, 0x38E5	; 0x8038e5 <actObj1.3989+0x17>
    350e:	20 93 0f 39 	sts	0x390F, r18	; 0x80390f <reactStr+0x2>
    3512:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    3516:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    351a:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    351e:	10 92 8f 39 	sts	0x398F, r1	; 0x80398f <reactStr+0x82>
    3522:	10 92 90 39 	sts	0x3990, r1	; 0x803990 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3526:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3989+0x29>
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <effect>
    3530:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <effect+0x1>
    3534:	16 c0       	rjmp	.+44     	; 0x3562 <ProcessInput+0xfb8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    353e:	8e e9       	ldi	r24, 0x9E	; 158
    3540:	98 e7       	ldi	r25, 0x78	; 120
    3542:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    3546:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    354a:	82 e1       	ldi	r24, 0x12	; 18
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    3552:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    355e:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    3566:	10 92 fc 38 	sts	0x38FC, r1	; 0x8038fc <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    356a:	8b e5       	ldi	r24, 0x5B	; 91
    356c:	9a e7       	ldi	r25, 0x7A	; 122
    356e:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr>
    3572:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x1>
    reactStr[1][number]=length;
    3576:	82 e0       	ldi	r24, 0x02	; 2
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x40>
    357e:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x41>
    reactStr[2][number]=type;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x80>
    358a:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    358e:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <specialInput>
    3592:	88 23       	and	r24, r24
    3594:	19 f0       	breq	.+6      	; 0x359c <ProcessInput+0xff2>
    3596:	70 92 0c 39 	sts	0x390C, r7	; 0x80390c <responseList>
    359a:	9a c0       	rjmp	.+308    	; 0x36d0 <ProcessInput+0x1126>
    359c:	87 2d       	mov	r24, r7
    359e:	12 c0       	rjmp	.+36     	; 0x35c4 <ProcessInput+0x101a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35a0:	8b e5       	ldi	r24, 0x5B	; 91
    35a2:	9a e7       	ldi	r25, 0x7A	; 122
    35a4:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <reactStr>
    35a8:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <reactStr+0x1>
    reactStr[1][number]=length;
    35ac:	82 e0       	ldi	r24, 0x02	; 2
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	80 93 4d 39 	sts	0x394D, r24	; 0x80394d <reactStr+0x40>
    35b4:	90 93 4e 39 	sts	0x394E, r25	; 0x80394e <reactStr+0x41>
    reactStr[2][number]=type;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	80 93 8d 39 	sts	0x398D, r24	; 0x80398d <reactStr+0x80>
    35c0:	90 93 8e 39 	sts	0x398E, r25	; 0x80398e <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    35c4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <SetStandardResponse>
    35c8:	80 93 0c 39 	sts	0x390C, r24	; 0x80390c <responseList>
    35cc:	81 c0       	rjmp	.+258    	; 0x36d0 <ProcessInput+0x1126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35ce:	84 ed       	ldi	r24, 0xD4	; 212
    35d0:	99 e7       	ldi	r25, 0x79	; 121
    35d2:	b0 cd       	rjmp	.-1184   	; 0x3134 <ProcessInput+0xb8a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    35d4:	b2 e0       	ldi	r27, 0x02	; 2
    35d6:	fb 12       	cpse	r15, r27
    35d8:	18 c8       	rjmp	.-4048   	; 0x260a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    35da:	d8 01       	movw	r26, r16
    35dc:	11 96       	adiw	r26, 0x01	; 1
    35de:	6c 91       	ld	r22, X
    35e0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <CheckLetter>
    35e4:	88 23       	and	r24, r24
    35e6:	09 f4       	brne	.+2      	; 0x35ea <ProcessInput+0x1040>
    35e8:	5b c0       	rjmp	.+182    	; 0x36a0 <ProcessInput+0x10f6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	9c 01       	movw	r18, r24
    35f4:	29 5c       	subi	r18, 0xC9	; 201
    35f6:	37 4c       	sbci	r19, 0xC7	; 199
    35f8:	79 01       	movw	r14, r18
    35fa:	6e ec       	ldi	r22, 0xCE	; 206
    35fc:	78 e3       	ldi	r23, 0x38	; 56
    35fe:	d9 01       	movw	r26, r18
    3600:	8d 91       	ld	r24, X+
    3602:	9c 91       	ld	r25, X
    3604:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3608:	84 ed       	ldi	r24, 0xD4	; 212
    360a:	97 e7       	ldi	r25, 0x77	; 119
    360c:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    3610:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    3614:	80 e1       	ldi	r24, 0x10	; 16
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <reactStr+0x42>
    361c:	90 93 50 39 	sts	0x3950, r25	; 0x803950 <reactStr+0x43>
    reactStr[2][number]=type;
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	80 93 8f 39 	sts	0x398F, r24	; 0x80398f <reactStr+0x82>
    3628:	90 93 90 39 	sts	0x3990, r25	; 0x803990 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    362c:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0x1a>
    3630:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3634:	40 91 da 38 	lds	r20, 0x38DA	; 0x8038da <actObj1.3989+0xc>
    3638:	50 91 db 38 	lds	r21, 0x38DB	; 0x8038db <actObj1.3989+0xd>
    363c:	40 93 11 39 	sts	0x3911, r20	; 0x803911 <reactStr+0x4>
    3640:	50 93 12 39 	sts	0x3912, r21	; 0x803912 <reactStr+0x5>
    reactStr[1][number]=length;
    3644:	20 93 51 39 	sts	0x3951, r18	; 0x803951 <reactStr+0x44>
    3648:	30 93 52 39 	sts	0x3952, r19	; 0x803952 <reactStr+0x45>
    reactStr[2][number]=type;
    364c:	10 92 91 39 	sts	0x3991, r1	; 0x803991 <reactStr+0x84>
    3650:	10 92 92 39 	sts	0x3992, r1	; 0x803992 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3654:	2b e5       	ldi	r18, 0x5B	; 91
    3656:	3a e7       	ldi	r19, 0x7A	; 122
    3658:	20 93 13 39 	sts	0x3913, r18	; 0x803913 <reactStr+0x6>
    365c:	30 93 14 39 	sts	0x3914, r19	; 0x803914 <reactStr+0x7>
    reactStr[1][number]=length;
    3660:	22 e0       	ldi	r18, 0x02	; 2
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	20 93 53 39 	sts	0x3953, r18	; 0x803953 <reactStr+0x46>
    3668:	30 93 54 39 	sts	0x3954, r19	; 0x803954 <reactStr+0x47>
    reactStr[2][number]=type;
    366c:	80 93 93 39 	sts	0x3993, r24	; 0x803993 <reactStr+0x86>
    3670:	90 93 94 39 	sts	0x3994, r25	; 0x803994 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3674:	27 e9       	ldi	r18, 0x97	; 151
    3676:	37 e7       	ldi	r19, 0x77	; 119
    3678:	20 93 15 39 	sts	0x3915, r18	; 0x803915 <reactStr+0x8>
    367c:	30 93 16 39 	sts	0x3916, r19	; 0x803916 <reactStr+0x9>
    reactStr[1][number]=length;
    3680:	2d e3       	ldi	r18, 0x3D	; 61
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	20 93 55 39 	sts	0x3955, r18	; 0x803955 <reactStr+0x48>
    3688:	30 93 56 39 	sts	0x3956, r19	; 0x803956 <reactStr+0x49>
    reactStr[2][number]=type;
    368c:	80 93 95 39 	sts	0x3995, r24	; 0x803995 <reactStr+0x88>
    3690:	90 93 96 39 	sts	0x3996, r25	; 0x803996 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3694:	f7 01       	movw	r30, r14
    3696:	10 82       	st	Z, r1
    3698:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    369a:	f5 e0       	ldi	r31, 0x05	; 5
    369c:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    369e:	65 cf       	rjmp	.-310    	; 0x356a <ProcessInput+0xfc0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    36a0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <inventory+0x2>
    36a4:	90 91 3a 38 	lds	r25, 0x383A	; 0x80383a <inventory+0x3>
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	49 f0       	breq	.+18     	; 0x36be <ProcessInput+0x1114>
                        if (CheckLetter(inventory[x], data[1])) {
    36ac:	f8 01       	movw	r30, r16
    36ae:	61 81       	ldd	r22, Z+1	; 0x01
    36b0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <CheckLetter>
    36b4:	88 23       	and	r24, r24
    36b6:	19 f0       	breq	.+6      	; 0x36be <ProcessInput+0x1114>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	98 cf       	rjmp	.-208    	; 0x35ee <ProcessInput+0x1044>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36be:	84 e6       	ldi	r24, 0x64	; 100
    36c0:	99 e7       	ldi	r25, 0x79	; 121
    36c2:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <reactStr+0x2>
    36c6:	90 93 10 39 	sts	0x3910, r25	; 0x803910 <reactStr+0x3>
    reactStr[1][number]=length;
    36ca:	81 e2       	ldi	r24, 0x21	; 33
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	32 c8       	rjmp	.-3996   	; 0x2734 <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    36d0:	d8 01       	movw	r26, r16
    36d2:	1c 92       	st	X, r1
    serRxDone = 0;
    36d4:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <serRxDone>
    RXCNT = 0;    
    36d8:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	2a 96       	adiw	r28, 0x0a	; 10
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	ff 90       	pop	r15
    36ec:	ef 90       	pop	r14
    36ee:	df 90       	pop	r13
    36f0:	cf 90       	pop	r12
    36f2:	bf 90       	pop	r11
    36f4:	af 90       	pop	r10
    36f6:	9f 90       	pop	r9
    36f8:	8f 90       	pop	r8
    36fa:	7f 90       	pop	r7
    36fc:	6f 90       	pop	r6
    36fe:	5f 90       	pop	r5
    3700:	4f 90       	pop	r4
    3702:	08 95       	ret

00003704 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3704:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    3706:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <CheckSend>
    370a:	88 23       	and	r24, r24
    370c:	11 f0       	breq	.+4      	; 0x3712 <TextAdventure+0xe>
    370e:	c1 e0       	ldi	r28, 0x01	; 1
    3710:	11 c0       	rjmp	.+34     	; 0x3734 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3712:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <CheckResponse>
    3716:	81 11       	cpse	r24, r1
    3718:	fa cf       	rjmp	.-12     	; 0x370e <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    371a:	82 e6       	ldi	r24, 0x62	; 98
    371c:	98 e3       	ldi	r25, 0x38	; 56
    371e:	0e 94 33 10 	call	0x2066	; 0x2066 <CheckInput>
    3722:	c8 2f       	mov	r28, r24
    3724:	81 11       	cpse	r24, r1
    3726:	05 c0       	rjmp	.+10     	; 0x3732 <TextAdventure+0x2e>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    3728:	82 e6       	ldi	r24, 0x62	; 98
    372a:	98 e3       	ldi	r25, 0x38	; 56
    372c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <ProcessInput>

    return 0;
    3730:	01 c0       	rjmp	.+2      	; 0x3734 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    3732:	c2 e0       	ldi	r28, 0x02	; 2

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);

    return 0;
    3734:	8c 2f       	mov	r24, r28
    3736:	cf 91       	pop	r28
    3738:	08 95       	ret

0000373a <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    373a:	0e 94 b6 04 	call	0x96c	; 0x96c <Setup>

    SerSpeed(0xff);
    373e:	8f ef       	ldi	r24, 0xFF	; 255
    3740:	0e 94 26 08 	call	0x104c	; 0x104c <SerSpeed>
    3744:	ae e4       	ldi	r26, 0x4E	; 78
    3746:	b9 eb       	ldi	r27, 0xB9	; 185
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	ed 91       	ld	r30, X+
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	e4 54       	subi	r30, 0x44	; 68
    3750:	f5 4c       	sbci	r31, 0xC5	; 197
    3752:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    3754:	15 96       	adiw	r26, 0x05	; 5
    3756:	ec 91       	ld	r30, X
    3758:	15 97       	sbiw	r26, 0x05	; 5
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	e4 54       	subi	r30, 0x44	; 68
    375e:	f5 4c       	sbci	r31, 0xC5	; 197
    3760:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    3762:	29 eb       	ldi	r18, 0xB9	; 185
    3764:	a4 35       	cpi	r26, 0x54	; 84
    3766:	b2 07       	cpc	r27, r18
    3768:	81 f7       	brne	.-32     	; 0x374a <main+0x10>
    376a:	e0 e4       	ldi	r30, 0x40	; 64
    376c:	f9 eb       	ldi	r31, 0xB9	; 185
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    376e:	91 e0       	ldi	r25, 0x01	; 1
    3770:	ef 01       	movw	r28, r30
    3772:	a5 81       	ldd	r26, Z+5	; 0x05
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	a4 54       	subi	r26, 0x44	; 68
    3778:	b5 4c       	sbci	r27, 0xC5	; 197
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	9c 93       	st	X, r25
    377e:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    3780:	a8 81       	ld	r26, Y
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	a4 54       	subi	r26, 0x44	; 68
    3786:	b5 4c       	sbci	r27, 0xC5	; 197
    3788:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    378a:	29 eb       	ldi	r18, 0xB9	; 185
    378c:	e5 34       	cpi	r30, 0x45	; 69
    378e:	f2 07       	cpc	r31, r18
    3790:	79 f7       	brne	.-34     	; 0x3770 <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }

    //"Others"
    iLED[EYE[G][R]] = 1;
    3792:	e0 91 4c b9 	lds	r30, 0xB94C	; 0x80b94c <__bss_end+0x7e40>
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	e4 54       	subi	r30, 0x44	; 68
    379a:	f5 4c       	sbci	r31, 0xC5	; 197
    379c:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    379e:	e0 91 4d b9 	lds	r30, 0xB94D	; 0x80b94d <__bss_end+0x7e41>
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	e4 54       	subi	r30, 0x44	; 68
    37a6:	f5 4c       	sbci	r31, 0xC5	; 197
    37a8:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    37aa:	e0 91 4a b9 	lds	r30, 0xB94A	; 0x80b94a <__bss_end+0x7e3e>
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	e4 54       	subi	r30, 0x44	; 68
    37b2:	f5 4c       	sbci	r31, 0xC5	; 197
    37b4:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    37b6:	e0 91 4b b9 	lds	r30, 0xB94B	; 0x80b94b <__bss_end+0x7e3f>
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	e4 54       	subi	r30, 0x44	; 68
    37be:	f5 4c       	sbci	r31, 0xC5	; 197
    37c0:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    37c2:	e0 91 3e b9 	lds	r30, 0xB93E	; 0x80b93e <__bss_end+0x7e32>
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	e4 54       	subi	r30, 0x44	; 68
    37ca:	f5 4c       	sbci	r31, 0xC5	; 197
    37cc:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    37ce:	e0 91 3f b9 	lds	r30, 0xB93F	; 0x80b93f <__bss_end+0x7e33>
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	e4 54       	subi	r30, 0x44	; 68
    37d6:	f5 4c       	sbci	r31, 0xC5	; 197
    37d8:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    37da:	e0 91 3d b9 	lds	r30, 0xB93D	; 0x80b93d <__bss_end+0x7e31>
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	e4 54       	subi	r30, 0x44	; 68
    37e2:	f5 4c       	sbci	r31, 0xC5	; 197
    37e4:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    37e6:	e0 91 3c b9 	lds	r30, 0xB93C	; 0x80b93c <__bss_end+0x7e30>
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	e4 54       	subi	r30, 0x44	; 68
    37ee:	f5 4c       	sbci	r31, 0xC5	; 197
    37f0:	80 83       	st	Z, r24

    LoadGameState();
    37f2:	0e 94 26 0a 	call	0x144c	; 0x144c <LoadGameState>

    while (TRUE) {
        if (GenerateAudio()) {
    37f6:	0e 94 b8 0a 	call	0x1570	; 0x1570 <GenerateAudio>
    37fa:	88 23       	and	r24, r24
    37fc:	e1 f3       	breq	.-8      	; 0x37f6 <main+0xbc>
            buttonState = CheckButtons(buttonState);
    37fe:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
    3802:	0e 94 55 08 	call	0x10aa	; 0x10aa <CheckButtons>
    3806:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <buttonState>
            buttonMark = 0;
    380a:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    380e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3812:	82 31       	cpi	r24, 0x12	; 18
    3814:	19 f4       	brne	.+6      	; 0x381c <main+0xe2>
    3816:	0e 94 46 08 	call	0x108c	; 0x108c <SelectAuIn>
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <main+0xe6>
    381c:	0e 94 37 08 	call	0x106e	; 0x106e <SelectTSens>

            //GenerateBlinks();

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3820:	71 df       	rcall	.-286    	; 0x3704 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3822:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MagnetMaze>
            LanyardCode();
    3826:	0e 94 8f 02 	call	0x51e	; 0x51e <LanyardCode>
            BastetDictates();
    382a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <BastetDictates>
            MakeFriends();
    382e:	0e 94 7c 00 	call	0xf8	; 0xf8 <MakeFriends>

            //Save progress
            SaveGameState();
    3832:	0e 94 34 09 	call	0x1268	; 0x1268 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3836:	80 91 af 3a 	lds	r24, 0x3AAF	; 0x803aaf <adcPhot>
    383a:	90 91 b0 3a 	lds	r25, 0x3AB0	; 0x803ab0 <adcPhot+0x1>
    383e:	0a 97       	sbiw	r24, 0x0a	; 10
    3840:	20 f4       	brcc	.+8      	; 0x384a <main+0x110>
    3842:	61 e0       	ldi	r22, 0x01	; 1
    3844:	84 e7       	ldi	r24, 0x74	; 116
    3846:	0e 94 bb 09 	call	0x1376	; 0x1376 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    384a:	80 91 af 3a 	lds	r24, 0x3AAF	; 0x803aaf <adcPhot>
    384e:	90 91 b0 3a 	lds	r25, 0x3AB0	; 0x803ab0 <adcPhot+0x1>
    3852:	85 36       	cpi	r24, 0x65	; 101
    3854:	91 05       	cpc	r25, r1
    3856:	20 f0       	brcs	.+8      	; 0x3860 <main+0x126>
    3858:	60 e0       	ldi	r22, 0x00	; 0
    385a:	84 e7       	ldi	r24, 0x74	; 116
    385c:	0e 94 bb 09 	call	0x1376	; 0x1376 <WriteStatusBit>

            //Check temperature
            HotSummer();
    3860:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <HotSummer>
    3864:	c8 cf       	rjmp	.-112    	; 0x37f6 <main+0xbc>

00003866 <__udivmodqi4>:
    3866:	99 1b       	sub	r25, r25
    3868:	79 e0       	ldi	r23, 0x09	; 9
    386a:	04 c0       	rjmp	.+8      	; 0x3874 <__udivmodqi4_ep>

0000386c <__udivmodqi4_loop>:
    386c:	99 1f       	adc	r25, r25
    386e:	96 17       	cp	r25, r22
    3870:	08 f0       	brcs	.+2      	; 0x3874 <__udivmodqi4_ep>
    3872:	96 1b       	sub	r25, r22

00003874 <__udivmodqi4_ep>:
    3874:	88 1f       	adc	r24, r24
    3876:	7a 95       	dec	r23
    3878:	c9 f7       	brne	.-14     	; 0x386c <__udivmodqi4_loop>
    387a:	80 95       	com	r24
    387c:	08 95       	ret

0000387e <__udivmodhi4>:
    387e:	aa 1b       	sub	r26, r26
    3880:	bb 1b       	sub	r27, r27
    3882:	51 e1       	ldi	r21, 0x11	; 17
    3884:	07 c0       	rjmp	.+14     	; 0x3894 <__udivmodhi4_ep>

00003886 <__udivmodhi4_loop>:
    3886:	aa 1f       	adc	r26, r26
    3888:	bb 1f       	adc	r27, r27
    388a:	a6 17       	cp	r26, r22
    388c:	b7 07       	cpc	r27, r23
    388e:	10 f0       	brcs	.+4      	; 0x3894 <__udivmodhi4_ep>
    3890:	a6 1b       	sub	r26, r22
    3892:	b7 0b       	sbc	r27, r23

00003894 <__udivmodhi4_ep>:
    3894:	88 1f       	adc	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	5a 95       	dec	r21
    389a:	a9 f7       	brne	.-22     	; 0x3886 <__udivmodhi4_loop>
    389c:	80 95       	com	r24
    389e:	90 95       	com	r25
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	08 95       	ret

000038a6 <__divmodhi4>:
    38a6:	97 fb       	bst	r25, 7
    38a8:	07 2e       	mov	r0, r23
    38aa:	16 f4       	brtc	.+4      	; 0x38b0 <__divmodhi4+0xa>
    38ac:	00 94       	com	r0
    38ae:	06 d0       	rcall	.+12     	; 0x38bc <__divmodhi4_neg1>
    38b0:	77 fd       	sbrc	r23, 7
    38b2:	08 d0       	rcall	.+16     	; 0x38c4 <__divmodhi4_neg2>
    38b4:	e4 df       	rcall	.-56     	; 0x387e <__udivmodhi4>
    38b6:	07 fc       	sbrc	r0, 7
    38b8:	05 d0       	rcall	.+10     	; 0x38c4 <__divmodhi4_neg2>
    38ba:	3e f4       	brtc	.+14     	; 0x38ca <__divmodhi4_exit>

000038bc <__divmodhi4_neg1>:
    38bc:	90 95       	com	r25
    38be:	81 95       	neg	r24
    38c0:	9f 4f       	sbci	r25, 0xFF	; 255
    38c2:	08 95       	ret

000038c4 <__divmodhi4_neg2>:
    38c4:	70 95       	com	r23
    38c6:	61 95       	neg	r22
    38c8:	7f 4f       	sbci	r23, 0xFF	; 255

000038ca <__divmodhi4_exit>:
    38ca:	08 95       	ret

000038cc <__udivmodsi4>:
    38cc:	a1 e2       	ldi	r26, 0x21	; 33
    38ce:	1a 2e       	mov	r1, r26
    38d0:	aa 1b       	sub	r26, r26
    38d2:	bb 1b       	sub	r27, r27
    38d4:	fd 01       	movw	r30, r26
    38d6:	0d c0       	rjmp	.+26     	; 0x38f2 <__udivmodsi4_ep>

000038d8 <__udivmodsi4_loop>:
    38d8:	aa 1f       	adc	r26, r26
    38da:	bb 1f       	adc	r27, r27
    38dc:	ee 1f       	adc	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	a2 17       	cp	r26, r18
    38e2:	b3 07       	cpc	r27, r19
    38e4:	e4 07       	cpc	r30, r20
    38e6:	f5 07       	cpc	r31, r21
    38e8:	20 f0       	brcs	.+8      	; 0x38f2 <__udivmodsi4_ep>
    38ea:	a2 1b       	sub	r26, r18
    38ec:	b3 0b       	sbc	r27, r19
    38ee:	e4 0b       	sbc	r30, r20
    38f0:	f5 0b       	sbc	r31, r21

000038f2 <__udivmodsi4_ep>:
    38f2:	66 1f       	adc	r22, r22
    38f4:	77 1f       	adc	r23, r23
    38f6:	88 1f       	adc	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	1a 94       	dec	r1
    38fc:	69 f7       	brne	.-38     	; 0x38d8 <__udivmodsi4_loop>
    38fe:	60 95       	com	r22
    3900:	70 95       	com	r23
    3902:	80 95       	com	r24
    3904:	90 95       	com	r25
    3906:	9b 01       	movw	r18, r22
    3908:	ac 01       	movw	r20, r24
    390a:	bd 01       	movw	r22, r26
    390c:	cf 01       	movw	r24, r30
    390e:	08 95       	ret

00003910 <_exit>:
    3910:	f8 94       	cli

00003912 <__stop_program>:
    3912:	ff cf       	rjmp	.-2      	; 0x3912 <__stop_program>
