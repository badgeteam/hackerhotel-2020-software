
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00803800  00003f84  00004038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ed4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0000bed4  00003ed4  00003f88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e6  00803836  00803836  0000406e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000406e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d92  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002916  00000000  00000000  0000b1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dfb  00000000  00000000  0000dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000928  00000000  00000000  000118cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ac4  00000000  00000000  000121f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c98  00000000  00000000  00013cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  00017950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c7       	rjmp	.+3900   	; 0xf56 <__vector_6>
      1a:	00 00       	nop
      1c:	f0 c7       	rjmp	.+4064   	; 0xffe <__vector_7>
      1e:	00 00       	nop
      20:	d8 c5       	rjmp	.+2992   	; 0xbd2 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	1f c6       	rjmp	.+3134   	; 0xc74 <__vector_13>
      36:	00 00       	nop
      38:	50 c6       	rjmp	.+3232   	; 0xcda <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0e c7       	rjmp	.+3612   	; 0xe6e <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c7       	rjmp	.+3692   	; 0xec6 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	89 c6       	rjmp	.+3346   	; 0xd80 <__vector_27>
      6e:	00 00       	nop
      70:	e2 c6       	rjmp	.+3524   	; 0xe36 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b5 0b       	sbc	r27, r21
      7e:	e3 0b       	sbc	r30, r19
      80:	ea 0b       	sbc	r30, r26
      82:	a5 0c       	add	r10, r5
      84:	a5 0c       	add	r10, r5
      86:	f9 0b       	sbc	r31, r25
      88:	06 0c       	add	r0, r6
      8a:	44 0c       	add	r4, r4
      8c:	6b 0c       	add	r6, r11

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	e4 e8       	ldi	r30, 0x84	; 132
      a2:	ff e3       	ldi	r31, 0x3F	; 63
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a6 33       	cpi	r26, 0x36	; 54
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a6 e3       	ldi	r26, 0x36	; 54
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	ac 31       	cpi	r26, 0x1C	; 28
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <main>
      c4:	0c 94 68 1f 	jmp	0x3ed0	; 0x3ed0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      d0:	40 91 cc 3a 	lds	r20, 0x3ACC	; 0x803acc <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 cc 3a 	lds	r20, 0x3ACC	; 0x803acc <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
      fe:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3792>
     102:	8f 5f       	subi	r24, 0xFF	; 255
     104:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <chkTmr.3792>
     108:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     10a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     10c:	8c 2f       	mov	r24, r28
     10e:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
     112:	81 11       	cpse	r24, r1
     114:	01 c0       	rjmp	.+2      	; 0x118 <MakeFriends+0x1e>
     116:	d0 e0       	ldi	r29, 0x00	; 0
     118:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     11a:	c8 36       	cpi	r28, 0x68	; 104
     11c:	b9 f7       	brne	.-18     	; 0x10c <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     11e:	dd 23       	and	r29, r29
     120:	19 f0       	breq	.+6      	; 0x128 <MakeFriends+0x2e>
     122:	8c e7       	ldi	r24, 0x7C	; 124
     124:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     128:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3790>
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	20 f0       	brcs	.+8      	; 0x138 <MakeFriends+0x3e>
        gameNow = FRIENDS; 
     130:	94 e0       	ldi	r25, 0x04	; 4
     132:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <gameNow>
     136:	0d c0       	rjmp	.+26     	; 0x152 <MakeFriends+0x58>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     138:	81 11       	cpse	r24, r1
     13a:	0b c0       	rjmp	.+22     	; 0x152 <MakeFriends+0x58>
     13c:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <gameNow>
     140:	94 30       	cpi	r25, 0x04	; 4
     142:	61 f4       	brne	.+24     	; 0x15c <MakeFriends+0x62>
        gameNow = TEXT; 
     144:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     148:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     14c:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
     150:	05 c0       	rjmp	.+10     	; 0x15c <MakeFriends+0x62>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     152:	90 91 c9 3a 	lds	r25, 0x3AC9	; 0x803ac9 <detHdPh>
     156:	91 11       	cpse	r25, r1
     158:	f1 cf       	rjmp	.-30     	; 0x13c <MakeFriends+0x42>
     15a:	18 c0       	rjmp	.+48     	; 0x18c <MakeFriends+0x92>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     15c:	81 11       	cpse	r24, r1
     15e:	16 c0       	rjmp	.+44     	; 0x18c <MakeFriends+0x92>
     160:	90 91 c9 3a 	lds	r25, 0x3AC9	; 0x803ac9 <detHdPh>
     164:	91 11       	cpse	r25, r1
     166:	12 c0       	rjmp	.+36     	; 0x18c <MakeFriends+0x92>
        setDAC[0] = whoami * 51;
     168:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     16c:	93 e3       	ldi	r25, 0x33	; 51
     16e:	89 9f       	mul	r24, r25
     170:	80 2d       	mov	r24, r0
     172:	11 24       	eor	r1, r1
     174:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	98 e3       	ldi	r25, 0x38	; 56
     17c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     180:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
     18a:	09 c0       	rjmp	.+18     	; 0x19e <MakeFriends+0xa4>
    } else {
        if (progress & NEXT){
     18c:	98 2f       	mov	r25, r24
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	31 f0       	breq	.+12     	; 0x19e <MakeFriends+0xa4>
            progress++;
            progress&=0x0f;
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	8f 70       	andi	r24, 0x0F	; 15
     196:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3790>
            chkTmr = 0;
     19a:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <chkTmr.3792>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     19e:	40 91 cc 3a 	lds	r20, 0x3ACC	; 0x803acc <auIn>
     1a2:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	b9 01       	movw	r22, r18
     1ac:	6a 50       	subi	r22, 0x0A	; 10
     1ae:	71 09       	sbc	r23, r1
     1b0:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3790>
     1b4:	46 17       	cp	r20, r22
     1b6:	57 07       	cpc	r21, r23
     1b8:	5c f0       	brlt	.+22     	; 0x1d0 <MakeFriends+0xd6>
     1ba:	40 91 cc 3a 	lds	r20, 0x3ACC	; 0x803acc <auIn>
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	26 5f       	subi	r18, 0xF6	; 246
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	24 17       	cp	r18, r20
     1c6:	35 07       	cpc	r19, r21
     1c8:	1c f0       	brlt	.+6      	; 0x1d0 <MakeFriends+0xd6>
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	08 f4       	brcc	.+2      	; 0x1d0 <MakeFriends+0xd6>
     1ce:	43 c0       	rjmp	.+134    	; 0x256 <MakeFriends+0x15c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     1d0:	81 11       	cpse	r24, r1
     1d2:	0b c0       	rjmp	.+22     	; 0x1ea <MakeFriends+0xf0>
     1d4:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <detHdPh>
     1d8:	81 11       	cpse	r24, r1
     1da:	96 c0       	rjmp	.+300    	; 0x308 <MakeFriends+0x20e>
            if (chkTmr >= 8) {
     1dc:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3792>
     1e0:	88 30       	cpi	r24, 0x08	; 8
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <MakeFriends+0xec>
     1e4:	91 c0       	rjmp	.+290    	; 0x308 <MakeFriends+0x20e>
                progress |= NEXT;
     1e6:	80 ef       	ldi	r24, 0xF0	; 240
     1e8:	64 c0       	rjmp	.+200    	; 0x2b2 <MakeFriends+0x1b8>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	41 f5       	brne	.+80     	; 0x23e <MakeFriends+0x144>
            jackIn = chkVolt250();
     1ee:	6d df       	rcall	.-294    	; 0xca <chkVolt250>
     1f0:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3793>
            if (jackIn) {
     1f4:	88 23       	and	r24, r24
     1f6:	79 f1       	breq	.+94     	; 0x256 <MakeFriends+0x15c>
                if (chkTmr >= SHORT_WAIT){
     1f8:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <chkTmr.3792>
     1fc:	98 30       	cpi	r25, 0x08	; 8
     1fe:	08 f4       	brcc	.+2      	; 0x202 <MakeFriends+0x108>
     200:	83 c0       	rjmp	.+262    	; 0x308 <MakeFriends+0x20e>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     202:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <whoami>
     206:	91 30       	cpi	r25, 0x01	; 1
     208:	11 f4       	brne	.+4      	; 0x20e <MakeFriends+0x114>
     20a:	83 50       	subi	r24, 0x03	; 3
     20c:	14 c0       	rjmp	.+40     	; 0x236 <MakeFriends+0x13c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     20e:	92 30       	cpi	r25, 0x02	; 2
     210:	31 f4       	brne	.+12     	; 0x21e <MakeFriends+0x124>
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	91 f0       	breq	.+36     	; 0x23a <MakeFriends+0x140>
     216:	85 50       	subi	r24, 0x05	; 5
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	e8 f4       	brcc	.+58     	; 0x256 <MakeFriends+0x15c>
     21c:	0e c0       	rjmp	.+28     	; 0x23a <MakeFriends+0x140>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     21e:	93 30       	cpi	r25, 0x03	; 3
     220:	39 f4       	brne	.+14     	; 0x230 <MakeFriends+0x136>
     222:	9c ef       	ldi	r25, 0xFC	; 252
     224:	98 0f       	add	r25, r24
     226:	92 30       	cpi	r25, 0x02	; 2
     228:	40 f0       	brcs	.+16     	; 0x23a <MakeFriends+0x140>
     22a:	87 30       	cpi	r24, 0x07	; 7
     22c:	a1 f4       	brne	.+40     	; 0x256 <MakeFriends+0x15c>
     22e:	05 c0       	rjmp	.+10     	; 0x23a <MakeFriends+0x140>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     230:	94 30       	cpi	r25, 0x04	; 4
     232:	89 f4       	brne	.+34     	; 0x256 <MakeFriends+0x15c>
     234:	85 50       	subi	r24, 0x05	; 5
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	70 f4       	brcc	.+28     	; 0x256 <MakeFriends+0x15c>
                        progress |= NEXT;
     23a:	81 ef       	ldi	r24, 0xF1	; 241
     23c:	3a c0       	rjmp	.+116    	; 0x2b2 <MakeFriends+0x1b8>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	69 f0       	breq	.+26     	; 0x25c <MakeFriends+0x162>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	c9 f1       	breq	.+114    	; 0x2b8 <MakeFriends+0x1be>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     246:	84 30       	cpi	r24, 0x04	; 4
     248:	09 f0       	breq	.+2      	; 0x24c <MakeFriends+0x152>
     24a:	5e c0       	rjmp	.+188    	; 0x308 <MakeFriends+0x20e>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     24c:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3792>
     250:	80 34       	cpi	r24, 0x40	; 64
     252:	08 f4       	brcc	.+2      	; 0x256 <MakeFriends+0x15c>
     254:	59 c0       	rjmp	.+178    	; 0x308 <MakeFriends+0x20e>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     256:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <progress.3790>
     25a:	56 c0       	rjmp	.+172    	; 0x308 <MakeFriends+0x20e>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     264:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     268:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3792>
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	40 f0       	brcs	.+16     	; 0x280 <MakeFriends+0x186>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     270:	2f ef       	ldi	r18, 0xFF	; 255
     272:	44 e6       	ldi	r20, 0x64	; 100
     274:	68 e0       	ldi	r22, 0x08	; 8
     276:	80 e8       	ldi	r24, 0x80	; 128
     278:	0e 94 44 09 	call	0x1288	; 0x1288 <floatAround>
     27c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     280:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3792>
     284:	8a 3f       	cpi	r24, 0xFA	; 250
     286:	08 f4       	brcc	.+2      	; 0x28a <MakeFriends+0x190>
     288:	3f c0       	rjmp	.+126    	; 0x308 <MakeFriends+0x20e>
                candidate = jackIn-whoami;
     28a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     28e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <jackIn.3793>
     292:	98 1b       	sub	r25, r24
     294:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <__data_end>
                if (candidate > whoami) {
     298:	89 17       	cp	r24, r25
     29a:	10 f4       	brcc	.+4      	; 0x2a0 <MakeFriends+0x1a6>
                    setDAC[0] = 249;
     29c:	89 ef       	ldi	r24, 0xF9	; 249
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <MakeFriends+0x1ae>
                } else {
                    setDAC[0] = whoami * 51;
     2a0:	93 e3       	ldi	r25, 0x33	; 51
     2a2:	89 9f       	mul	r24, r25
     2a4:	80 2d       	mov	r24, r0
     2a6:	11 24       	eor	r1, r1
     2a8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2ac:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3790>
     2b0:	80 6f       	ori	r24, 0xF0	; 240
     2b2:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3790>
     2b6:	28 c0       	rjmp	.+80     	; 0x308 <MakeFriends+0x20e>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2b8:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3792>
     2bc:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2be:	20 f1       	brcs	.+72     	; 0x308 <MakeFriends+0x20e>
     2c0:	04 df       	rcall	.-504    	; 0xca <chkVolt250>
     2c2:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3793>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2c6:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <__data_end>
     2ca:	48 2f       	mov	r20, r24
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <whoami>
     2d2:	29 17       	cp	r18, r25
     2d4:	08 f4       	brcc	.+2      	; 0x2d8 <MakeFriends+0x1de>
     2d6:	29 2f       	mov	r18, r25
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	2b 5f       	subi	r18, 0xFB	; 251
     2dc:	3f 4f       	sbci	r19, 0xFF	; 255
     2de:	42 17       	cp	r20, r18
     2e0:	53 07       	cpc	r21, r19
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <MakeFriends+0x1ec>
     2e4:	b8 cf       	rjmp	.-144    	; 0x256 <MakeFriends+0x15c>
                    UpdateState(99+candidate);
     2e6:	83 e6       	ldi	r24, 0x63	; 99
     2e8:	89 0f       	add	r24, r25
     2ea:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
                 
                    effect = 31;
     2ee:	8f e1       	ldi	r24, 0x1F	; 31
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     2f6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    WingBar(candidate, whoami);
     2fa:	60 91 43 38 	lds	r22, 0x3843	; 0x803843 <whoami>
     2fe:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <__data_end>
     302:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <WingBar>
     306:	d2 cf       	rjmp	.-92     	; 0x2ac <MakeFriends+0x1b2>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     316:	e6 e2       	ldi	r30, 0x26	; 38
     318:	f4 e0       	ldi	r31, 0x04	; 4
     31a:	80 83       	st	Z, r24
     31c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     320:	a1 e2       	ldi	r26, 0x21	; 33
     322:	b4 e0       	ldi	r27, 0x04	; 4
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	9c 93       	st	X, r25
     328:	90 83       	st	Z, r25
     32a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     32e:	e0 e1       	ldi	r30, 0x10	; 16
     330:	f8 e0       	ldi	r31, 0x08	; 8
     332:	97 e0       	ldi	r25, 0x07	; 7
     334:	96 83       	std	Z+6, r25	; 0x06
     336:	98 e0       	ldi	r25, 0x08	; 8
     338:	94 83       	std	Z+4, r25	; 0x04
     33a:	83 83       	std	Z+3, r24	; 0x03
     33c:	8c 93       	st	X, r24
     33e:	85 81       	ldd	r24, Z+5	; 0x05
     340:	81 60       	ori	r24, 0x01	; 1
     342:	85 83       	std	Z+5, r24	; 0x05
     344:	85 81       	ldd	r24, Z+5	; 0x05
     346:	84 6c       	ori	r24, 0xC4	; 196
     348:	85 83       	std	Z+5, r24	; 0x05
     34a:	08 95       	ret

0000034c <I2C_recover>:
     34c:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     350:	88 60       	ori	r24, 0x08	; 8
     352:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     356:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     360:	99 e0       	ldi	r25, 0x09	; 9
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     36a:	30 e1       	ldi	r19, 0x10	; 16
     36c:	3a 95       	dec	r19
     36e:	f1 f7       	brne	.-4      	; 0x36c <I2C_recover+0x20>
     370:	00 c0       	rjmp	.+0      	; 0x372 <I2C_recover+0x26>
     372:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     376:	30 e1       	ldi	r19, 0x10	; 16
     378:	3a 95       	dec	r19
     37a:	f1 f7       	brne	.-4      	; 0x378 <I2C_recover+0x2c>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <I2C_recover+0x32>
     37e:	91 50       	subi	r25, 0x01	; 1
     380:	89 f7       	brne	.-30     	; 0x364 <I2C_recover+0x18>
     382:	28 e0       	ldi	r18, 0x08	; 8
     384:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     388:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     38c:	92 e0       	ldi	r25, 0x02	; 2
     38e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     392:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     396:	91 60       	ori	r25, 0x01	; 1
     398:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a0:	94 6c       	ori	r25, 0xC4	; 196
     3a2:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a6:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3aa:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3ae:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3b2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3bc:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c0:	84 6c       	ori	r24, 0xC4	; 196
     3c2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c6:	08 95       	ret

000003c8 <I2C_start>:
     3c8:	28 2f       	mov	r18, r24
     3ca:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ce:	90 6c       	ori	r25, 0xC0	; 192
     3d0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d8:	89 2f       	mov	r24, r25
     3da:	84 70       	andi	r24, 0x04	; 4
     3dc:	92 fd       	sbrc	r25, 2
     3de:	03 c0       	rjmp	.+6      	; 0x3e6 <I2C_start+0x1e>
     3e0:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3e4:	08 95       	ret
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	08 95       	ret

000003ea <I2C_wait_ACK>:
     3ea:	8c e0       	ldi	r24, 0x0C	; 12
     3ec:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <timeout_I2C>
     3f0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f4:	87 fd       	sbrc	r24, 7
     3f6:	0a c0       	rjmp	.+20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fc:	86 fd       	sbrc	r24, 6
     3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     400:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <timeout_I2C>
     404:	81 11       	cpse	r24, r1
     406:	f4 cf       	rjmp	.-24     	; 0x3f0 <I2C_wait_ACK+0x6>
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	08 95       	ret
     40c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     410:	80 6c       	ori	r24, 0xC0	; 192
     412:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     416:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41a:	82 fd       	sbrc	r24, 2
     41c:	09 c0       	rjmp	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     41e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     422:	83 fd       	sbrc	r24, 3
     424:	07 c0       	rjmp	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     426:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42a:	82 95       	swap	r24
     42c:	81 70       	andi	r24, 0x01	; 1
     42e:	08 95       	ret
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	08 95       	ret
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	08 95       	ret

00000438 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     438:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     43a:	8c e0       	ldi	r24, 0x0C	; 12
     43c:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     440:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     444:	89 2f       	mov	r24, r25
     446:	83 70       	andi	r24, 0x03	; 3
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	11 f0       	breq	.+4      	; 0x450 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     44c:	88 e0       	ldi	r24, 0x08	; 8
     44e:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     450:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     454:	97 fd       	sbrc	r25, 7
     456:	06 c0       	rjmp	.+12     	; 0x464 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     458:	90 91 6a 3a 	lds	r25, 0x3A6A	; 0x803a6a <timeout_I2C>
     45c:	91 11       	cpse	r25, r1
     45e:	f8 cf       	rjmp	.-16     	; 0x450 <I2C_read+0x18>
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     464:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     468:	90 6c       	ori	r25, 0xC0	; 192
     46a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     46e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     472:	92 fd       	sbrc	r25, 2
     474:	1e c0       	rjmp	.+60     	; 0x4b2 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     476:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47a:	93 fd       	sbrc	r25, 3
     47c:	1d c0       	rjmp	.+58     	; 0x4b8 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     47e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     482:	89 2f       	mov	r24, r25
     484:	80 71       	andi	r24, 0x10	; 16
     486:	94 fd       	sbrc	r25, 4
     488:	16 c0       	rjmp	.+44     	; 0x4b6 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     48a:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     48e:	61 11       	cpse	r22, r1
     490:	02 c0       	rjmp	.+4      	; 0x496 <I2C_read+0x5e>
     492:	9b 7f       	andi	r25, 0xFB	; 251
     494:	01 c0       	rjmp	.+2      	; 0x498 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     496:	94 60       	ori	r25, 0x04	; 4
     498:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     49c:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     4a0:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     4a2:	61 11       	cpse	r22, r1
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <I2C_read+0x80>
     4a6:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4aa:	92 60       	ori	r25, 0x02	; 2
     4ac:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4b0:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4b6:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     4b8:	08 95       	ret

000004ba <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     4ba:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     4bc:	8c e0       	ldi	r24, 0x0C	; 12
     4be:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4c2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c6:	93 70       	andi	r25, 0x03	; 3
     4c8:	92 30       	cpi	r25, 0x02	; 2
     4ca:	b1 f4       	brne	.+44     	; 0x4f8 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4cc:	80 81       	ld	r24, Z
     4ce:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4d2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d6:	86 fd       	sbrc	r24, 6
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4da:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <timeout_I2C>
     4de:	81 11       	cpse	r24, r1
     4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <I2C_write+0x18>
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4e6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ea:	82 fd       	sbrc	r24, 2
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4ee:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4f2:	82 95       	swap	r24
     4f4:	81 70       	andi	r24, 0x01	; 1
     4f6:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     4f8:	88 e0       	ldi	r24, 0x08	; 8
     4fa:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4fc:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     4fe:	08 95       	ret

00000500 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     500:	e0 e1       	ldi	r30, 0x10	; 16
     502:	f8 e0       	ldi	r31, 0x08	; 8
     504:	84 81       	ldd	r24, Z+4	; 0x04
     506:	83 60       	ori	r24, 0x03	; 3
     508:	84 83       	std	Z+4, r24	; 0x04
     50a:	08 95       	ret

0000050c <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	6b 01       	movw	r12, r22
     51c:	f4 2e       	mov	r15, r20
     51e:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     520:	18 2f       	mov	r17, r24
     522:	11 0f       	add	r17, r17
     524:	81 2f       	mov	r24, r17
     526:	50 df       	rcall	.-352    	; 0x3c8 <I2C_start>
	if (status != 0) goto error;
     528:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     52a:	2b c0       	rjmp	.+86     	; 0x582 <I2C_read_bytes+0x76>
     52c:	5e df       	rcall	.-324    	; 0x3ea <I2C_wait_ACK>
	if (status == 1) {
     52e:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     530:	19 f4       	brne	.+6      	; 0x538 <I2C_read_bytes+0x2c>
     532:	e6 df       	rcall	.-52     	; 0x500 <I2C_stop>
		return 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	27 c0       	rjmp	.+78     	; 0x586 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     538:	81 11       	cpse	r24, r1
     53a:	23 c0       	rjmp	.+70     	; 0x582 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     53c:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     53e:	49 f0       	breq	.+18     	; 0x552 <I2C_read_bytes+0x46>
     540:	c6 01       	movw	r24, r12
     542:	bb df       	rcall	.-138    	; 0x4ba <I2C_write>
	    if (status != 0) goto error;
     544:	81 11       	cpse	r24, r1
     546:	1d c0       	rjmp	.+58     	; 0x582 <I2C_read_bytes+0x76>
        ++reg_ptr;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	c8 1a       	sub	r12, r24
     54c:	d8 0a       	sbc	r13, r24
        --reg_len;
     54e:	fa 94       	dec	r15
     550:	f5 cf       	rjmp	.-22     	; 0x53c <I2C_read_bytes+0x30>
     552:	01 34       	cpi	r16, 0x41	; 65
     554:	08 f0       	brcs	.+2      	; 0x558 <I2C_read_bytes+0x4c>
     556:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     558:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     55a:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     55e:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     560:	40 f0       	brcs	.+16     	; 0x572 <I2C_read_bytes+0x66>
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	ce 01       	movw	r24, r28
     566:	68 df       	rcall	.-304    	; 0x438 <I2C_read>
		if (status != 0) goto error;
     568:	81 11       	cpse	r24, r1
     56a:	0b c0       	rjmp	.+22     	; 0x582 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     56c:	21 96       	adiw	r28, 0x01	; 1
     56e:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     570:	f6 cf       	rjmp	.-20     	; 0x55e <I2C_read_bytes+0x52>
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     576:	60 df       	rcall	.-320    	; 0x438 <I2C_read>
     578:	81 11       	cpse	r24, r1
	I2C_stop();
     57a:	03 c0       	rjmp	.+6      	; 0x582 <I2C_read_bytes+0x76>
     57c:	c1 df       	rcall	.-126    	; 0x500 <I2C_stop>
	return 0;
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     582:	e4 de       	rcall	.-568    	; 0x34c <I2C_recover>
     584:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     586:	df 91       	pop	r29
}
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     596:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <lanyardPos>
    lanyardCnt      = 0;
     59a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
    lanyardState    = TRUE;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    ClearHackerLeds();
     5a4:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <ClearHackerLeds>
     5a8:	08 95       	ret

000005aa <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     5aa:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     5ac:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	81 f4       	brne	.+32     	; 0x5d4 <LanyardCode+0x2a>
     5b4:	6a e0       	ldi	r22, 0x0A	; 10
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <lanyardLastActive>
     5bc:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <lanyardLastActive+0x1>
     5c0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <idleTimeout>
     5c4:	88 23       	and	r24, r24
     5c6:	31 f0       	breq	.+12     	; 0x5d4 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        initLanyard();
     5c8:	e6 df       	rcall	.-52     	; 0x596 <initLanyard>
        gameNow = TEXT;
     5ca:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        ClearHackerLeds();
     5ce:	0e 94 2c 0b 	call	0x1658	; 0x1658 <ClearHackerLeds>
        return 0;
     5d2:	a3 c0       	rjmp	.+326    	; 0x71a <LanyardCode+0x170>
    }

    if (CheckState(LANYARD_COMPLETED))
     5d4:	8b e7       	ldi	r24, 0x7B	; 123
     5d6:	32 d7       	rcall	.+3684   	; 0x143c <CheckState>
     5d8:	81 11       	cpse	r24, r1
     5da:	9f c0       	rjmp	.+318    	; 0x71a <LanyardCode+0x170>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5dc:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     5e0:	88 23       	and	r24, r24
     5e2:	19 f0       	breq	.+6      	; 0x5ea <LanyardCode+0x40>
     5e4:	83 30       	cpi	r24, 0x03	; 3
     5e6:	09 f0       	breq	.+2      	; 0x5ea <LanyardCode+0x40>
     5e8:	98 c0       	rjmp	.+304    	; 0x71a <LanyardCode+0x170>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     5ea:	c0 91 f0 be 	lds	r28, 0xBEF0	; 0x80bef0 <__bss_end+0x83d4>
     5ee:	ec 2f       	mov	r30, r28
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5f6:	8f 3f       	cpi	r24, 0xFF	; 255
     5f8:	19 f0       	breq	.+6      	; 0x600 <LanyardCode+0x56>
     5fa:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <LanyardCode+0x58>
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	e3 53       	subi	r30, 0x33	; 51
     604:	f5 4c       	sbci	r31, 0xC5	; 197
     606:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     608:	8f 3f       	cpi	r24, 0xFF	; 255
     60a:	09 f4       	brne	.+2      	; 0x60e <LanyardCode+0x64>
     60c:	86 c0       	rjmp	.+268    	; 0x71a <LanyardCode+0x170>
        return 0;

    if (buttonState == lastButtonState)
     60e:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     612:	89 17       	cp	r24, r25
     614:	09 f4       	brne	.+2      	; 0x618 <LanyardCode+0x6e>
     616:	81 c0       	rjmp	.+258    	; 0x71a <LanyardCode+0x170>
        return 0;

    lanyardLastActive = getClock();
     618:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <getClock>
     61c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <lanyardLastActive>
     620:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     624:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     628:	8f 3f       	cpi	r24, 0xFF	; 255
     62a:	09 f0       	breq	.+2      	; 0x62e <LanyardCode+0x84>
     62c:	76 c0       	rjmp	.+236    	; 0x71a <LanyardCode+0x170>
        effect = 0x13f + (buttonState << 5);
     62e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     632:	20 e2       	ldi	r18, 0x20	; 32
     634:	82 9f       	mul	r24, r18
     636:	c0 01       	movw	r24, r0
     638:	11 24       	eor	r1, r1
     63a:	81 5c       	subi	r24, 0xC1	; 193
     63c:	9e 4f       	sbci	r25, 0xFE	; 254
     63e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     642:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>

        if (gameNow != LANYARD)
     646:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     64a:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     64c:	09 f0       	breq	.+2      	; 0x650 <LanyardCode+0xa6>
     64e:	a3 df       	rcall	.-186    	; 0x596 <initLanyard>
        gameNow = LANYARD;
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     656:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     65a:	e8 2f       	mov	r30, r24
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	ec 51       	subi	r30, 0x1C	; 28
     660:	f1 44       	sbci	r31, 0x41	; 65
     662:	20 81       	ld	r18, Z
     664:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     668:	29 13       	cpse	r18, r25
     66a:	12 c0       	rjmp	.+36     	; 0x690 <LanyardCode+0xe6>
            lanyardState &= TRUE;
     66c:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     670:	91 70       	andi	r25, 0x01	; 1
     672:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     676:	e0 91 ff be 	lds	r30, 0xBEFF	; 0x80beff <__bss_end+0x83e3>
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e3 53       	subi	r30, 0x33	; 51
     67e:	f5 4c       	sbci	r31, 0xC5	; 197
     680:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     682:	e0 91 fe be 	lds	r30, 0xBEFE	; 0x80befe <__bss_end+0x83e2>
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	e3 53       	subi	r30, 0x33	; 51
     68a:	f5 4c       	sbci	r31, 0xC5	; 197
     68c:	10 82       	st	Z, r1
     68e:	09 c0       	rjmp	.+18     	; 0x6a2 <LanyardCode+0xf8>
        } else {
            lanyardState = FALSE;
     690:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos == 0 ) {
     694:	81 11       	cpse	r24, r1
                initLanyard();
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <LanyardCode+0xf8>
     698:	7e df       	rcall	.-260    	; 0x596 <initLanyard>
                gameNow         = BASTET;
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
                return 0;
     6a0:	3c c0       	rjmp	.+120    	; 0x71a <LanyardCode+0x170>
            }
        }
        lanyardPos++;
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <lanyardPos>
        lanyardCnt++;            
     6a8:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <lanyardCnt>
        WingBar(lanyardCnt,lanyardCnt);
     6b2:	68 2f       	mov	r22, r24
     6b4:	93 d7       	rcall	.+3878   	; 0x15dc <WingBar>
        if (lanyardCnt >= 4) {
     6b6:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     6ba:	84 30       	cpi	r24, 0x04	; 4
     6bc:	70 f1       	brcs	.+92     	; 0x71a <LanyardCode+0x170>
            lanyardCnt = 0;
     6be:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            if (lanyardState == TRUE) {
     6c2:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	09 f5       	brne	.+66     	; 0x70c <LanyardCode+0x162>
                if (lanyardCnt == 0) {
                    iLED[HCKR[G][(lanyardPos>>1)-2]] = dimValue;
     6ca:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     6ce:	e8 2f       	mov	r30, r24
     6d0:	e6 95       	lsr	r30
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	ee 5f       	subi	r30, 0xFE	; 254
     6d6:	f0 44       	sbci	r31, 0x40	; 64
     6d8:	a4 81       	ldd	r26, Z+4	; 0x04
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6e0:	a3 53       	subi	r26, 0x33	; 51
     6e2:	b5 4c       	sbci	r27, 0xC5	; 197
     6e4:	9c 93       	st	X, r25
                    iLED[HCKR[G][(lanyardPos>>1)-1]] = dimValue;
     6e6:	e5 81       	ldd	r30, Z+5	; 0x05
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6ee:	e3 53       	subi	r30, 0x33	; 51
     6f0:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == LANYARD_LEN) {
     6f2:	90 83       	st	Z, r25
     6f4:	8c 30       	cpi	r24, 0x0C	; 12
                    UpdateState(LANYARD_COMPLETED);
     6f6:	89 f4       	brne	.+34     	; 0x71a <LanyardCode+0x170>
     6f8:	8b e7       	ldi	r24, 0x7B	; 123
     6fa:	7f d6       	rcall	.+3326   	; 0x13fa <UpdateState>
                    iLED[CAT]       = 0;
     6fc:	ec 2f       	mov	r30, r28
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	e3 53       	subi	r30, 0x33	; 51
     702:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     704:	10 82       	st	Z, r1
     706:	82 e4       	ldi	r24, 0x42	; 66
     708:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     70a:	03 c0       	rjmp	.+6      	; 0x712 <LanyardCode+0x168>
     70c:	44 df       	rcall	.-376    	; 0x596 <initLanyard>
                effect = 0x21;
     70e:	81 e2       	ldi	r24, 0x21	; 33
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     716:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            }
        }
    }

    return 0;
}
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     720:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <mazeHckrPos>
    mazePos = 0;
     724:	10 92 52 38 	sts	0x3852, r1	; 0x803852 <mazePos>
    mazeCnt = 0;
     728:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeCnt>
    mazeState = TRUE;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     732:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <inverted>
    ClearHackerLeds();
     736:	90 c7       	rjmp	.+3872   	; 0x1658 <ClearHackerLeds>
     738:	08 95       	ret

0000073a <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     740:	97 ff       	sbrs	r25, 7
     742:	03 c0       	rjmp	.+6      	; 0x74a <showFieldStrength+0x10>
     744:	d1 95       	neg	r29
     746:	c1 95       	neg	r28
     748:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     74a:	cd 33       	cpi	r28, 0x3D	; 61
     74c:	d1 05       	cpc	r29, r1
     74e:	44 f0       	brlt	.+16     	; 0x760 <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     750:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     754:	81 11       	cpse	r24, r1
     756:	04 c0       	rjmp	.+8      	; 0x760 <showFieldStrength+0x26>
            initMaze();
     758:	e3 df       	rcall	.-58     	; 0x720 <initMaze>
            gameNow = MAZE;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
        }
    }

    if (gameNow == MAZE) {
     760:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	09 f5       	brne	.+66     	; 0x7aa <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     768:	cc 33       	cpi	r28, 0x3C	; 60
     76a:	d1 05       	cpc	r29, r1
     76c:	1c f4       	brge	.+6      	; 0x774 <showFieldStrength+0x3a>
            WingBar(0,0);
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	1a c0       	rjmp	.+52     	; 0x7a8 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     774:	c8 37       	cpi	r28, 0x78	; 120
     776:	d1 05       	cpc	r29, r1
     778:	1c f4       	brge	.+6      	; 0x780 <showFieldStrength+0x46>
            WingBar(1,1);
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	14 c0       	rjmp	.+40     	; 0x7a8 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     780:	c6 39       	cpi	r28, 0x96	; 150
     782:	d1 05       	cpc	r29, r1
     784:	1c f4       	brge	.+6      	; 0x78c <showFieldStrength+0x52>
            WingBar(2,2);
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	0e c0       	rjmp	.+28     	; 0x7a8 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     78c:	c8 3c       	cpi	r28, 0xC8	; 200
     78e:	d1 05       	cpc	r29, r1
     790:	1c f4       	brge	.+6      	; 0x798 <showFieldStrength+0x5e>
            WingBar(3,3);
     792:	63 e0       	ldi	r22, 0x03	; 3
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	08 c0       	rjmp	.+16     	; 0x7a8 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     798:	cc 32       	cpi	r28, 0x2C	; 44
     79a:	d1 40       	sbci	r29, 0x01	; 1
     79c:	1c f4       	brge	.+6      	; 0x7a4 <showFieldStrength+0x6a>
            WingBar(4,4);
     79e:	64 e0       	ldi	r22, 0x04	; 4
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     7a4:	65 e0       	ldi	r22, 0x05	; 5
     7a6:	85 e0       	ldi	r24, 0x05	; 5
     7a8:	19 d7       	rcall	.+3634   	; 0x15dc <WingBar>
    }
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     7b4:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	71 f4       	brne	.+28     	; 0x7d8 <MagnetMaze+0x28>
     7bc:	6a e0       	ldi	r22, 0x0A	; 10
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <mazeLastActive>
     7c4:	90 91 4e 38 	lds	r25, 0x384E	; 0x80384e <mazeLastActive+0x1>
     7c8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <idleTimeout>
     7cc:	88 23       	and	r24, r24
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     7d0:	a7 df       	rcall	.-178    	; 0x720 <initMaze>
        gameNow = TEXT;
     7d2:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        return 0;
     7d6:	e5 c0       	rjmp	.+458    	; 0x9a2 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     7d8:	87 ef       	ldi	r24, 0xF7	; 247
     7da:	30 d6       	rcall	.+3168   	; 0x143c <CheckState>
     7dc:	81 11       	cpse	r24, r1
     7de:	e1 c0       	rjmp	.+450    	; 0x9a2 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7e0:	8d e7       	ldi	r24, 0x7D	; 125
     7e2:	2c d6       	rcall	.+3160   	; 0x143c <CheckState>
     7e4:	81 11       	cpse	r24, r1
     7e6:	dd c0       	rjmp	.+442    	; 0x9a2 <MagnetMaze+0x1f2>
     7e8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	08 f0       	brcs	.+2      	; 0x7f2 <MagnetMaze+0x42>
     7f0:	d8 c0       	rjmp	.+432    	; 0x9a2 <MagnetMaze+0x1f2>
     7f2:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <calHall>
        return 0;

    if (calHall == 0)
     7f6:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <calHall+0x1>
     7fa:	89 2b       	or	r24, r25
     7fc:	41 f4       	brne	.+16     	; 0x80e <MagnetMaze+0x5e>
     7fe:	80 91 c5 3a 	lds	r24, 0x3AC5	; 0x803ac5 <adcHall>
        calHall = adcHall;
     802:	90 91 c6 3a 	lds	r25, 0x3AC6	; 0x803ac6 <adcHall+0x1>
     806:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <calHall>
     80a:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <calHall+0x1>
     80e:	c0 91 c5 3a 	lds	r28, 0x3AC5	; 0x803ac5 <adcHall>

    int16_t valHall = adcHall - calHall;
     812:	d0 91 c6 3a 	lds	r29, 0x3AC6	; 0x803ac6 <adcHall+0x1>
     816:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <calHall>
     81a:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <calHall+0x1>
     81e:	c8 1b       	sub	r28, r24
     820:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     822:	ce 01       	movw	r24, r28
     824:	8a df       	rcall	.-236    	; 0x73a <showFieldStrength>
     826:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <curHallState>

    switch (curHallState) {
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	89 f0       	breq	.+34     	; 0x850 <MagnetMaze+0xa0>
     82e:	18 f0       	brcs	.+6      	; 0x836 <MagnetMaze+0x86>
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	c1 f0       	breq	.+48     	; 0x864 <MagnetMaze+0xb4>
     834:	1f c0       	rjmp	.+62     	; 0x874 <MagnetMaze+0xc4>
     836:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     838:	9e ef       	ldi	r25, 0xFE	; 254
     83a:	d9 07       	cpc	r29, r25
     83c:	14 f4       	brge	.+4      	; 0x842 <MagnetMaze+0x92>
     83e:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     840:	04 c0       	rjmp	.+8      	; 0x84a <MagnetMaze+0x9a>
     842:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     844:	d1 40       	sbci	r29, 0x01	; 1
     846:	5c f0       	brlt	.+22     	; 0x85e <MagnetMaze+0xae>
     848:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     84a:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <newHallState>
     84e:	12 c0       	rjmp	.+36     	; 0x874 <MagnetMaze+0xc4>
     850:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	d9 07       	cpc	r29, r25
     856:	c4 f7       	brge	.-16     	; 0x848 <MagnetMaze+0x98>
     858:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     85a:	df 4f       	sbci	r29, 0xFF	; 255
     85c:	84 f3       	brlt	.-32     	; 0x83e <MagnetMaze+0x8e>
     85e:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     862:	08 c0       	rjmp	.+16     	; 0x874 <MagnetMaze+0xc4>
     864:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     866:	9e ef       	ldi	r25, 0xFE	; 254
     868:	d9 07       	cpc	r29, r25
     86a:	4c f3       	brlt	.-46     	; 0x83e <MagnetMaze+0x8e>
     86c:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     86e:	d1 05       	cpc	r29, r1
     870:	b4 f3       	brlt	.-20     	; 0x85e <MagnetMaze+0xae>
     872:	ea cf       	rjmp	.-44     	; 0x848 <MagnetMaze+0x98>
     874:	c0 91 f0 be 	lds	r28, 0xBEF0	; 0x80bef0 <__bss_end+0x83d4>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     878:	ec 2f       	mov	r30, r28
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	90 91 53 38 	lds	r25, 0x3853	; 0x803853 <newHallState>
     880:	99 23       	and	r25, r25
     882:	19 f0       	breq	.+6      	; 0x88a <MagnetMaze+0xda>
     884:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     888:	01 c0       	rjmp	.+2      	; 0x88c <MagnetMaze+0xdc>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	e3 53       	subi	r30, 0x33	; 51
     88e:	f5 4c       	sbci	r31, 0xC5	; 197
     890:	20 83       	st	Z, r18
     892:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     894:	31 e0       	ldi	r19, 0x01	; 1
     896:	20 93 40 38 	sts	0x3840, r18	; 0x803840 <effect>
     89a:	30 93 41 38 	sts	0x3841, r19	; 0x803841 <effect+0x1>
     89e:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <MagnetMaze+0xf4>
     8a2:	7f c0       	rjmp	.+254    	; 0x9a2 <MagnetMaze+0x1f2>
     8a4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     8a8:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <mazeLastActive>
     8ac:	90 93 4e 38 	sts	0x384E, r25	; 0x80384e <mazeLastActive+0x1>
     8b0:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     8b4:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <newHallState>
     8b8:	91 11       	cpse	r25, r1
     8ba:	08 c0       	rjmp	.+16     	; 0x8cc <MagnetMaze+0x11c>
     8bc:	88 23       	and	r24, r24
     8be:	31 f0       	breq	.+12     	; 0x8cc <MagnetMaze+0x11c>
     8c0:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <MagnetMaze+0x118>
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inverted>
     8cc:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <curHallState>

        curHallState = newHallState;
     8d0:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <MagnetMaze+0x126>
     8d4:	66 c0       	rjmp	.+204    	; 0x9a2 <MagnetMaze+0x1f2>
     8d6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
            if (gameNow == TEXT)
     8da:	81 11       	cpse	r24, r1
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <MagnetMaze+0x130>
                initMaze();
     8de:	20 df       	rcall	.-448    	; 0x720 <initMaze>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     8e2:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
     8e6:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     8ea:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <curHallState>
     8ee:	88 23       	and	r24, r24
     8f0:	11 f0       	breq	.+4      	; 0x8f6 <MagnetMaze+0x146>
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	28 27       	eor	r18, r24
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <mazePos>
     8fc:	e8 2f       	mov	r30, r24
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	e2 5c       	subi	r30, 0xC2	; 194
     902:	f0 44       	sbci	r31, 0x40	; 64
     904:	40 81       	ld	r20, Z
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	24 17       	cp	r18, r20
     90a:	35 07       	cpc	r19, r21
     90c:	91 f4       	brne	.+36     	; 0x932 <MagnetMaze+0x182>
     90e:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     912:	91 70       	andi	r25, 0x01	; 1
     914:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     918:	e0 91 ff be 	lds	r30, 0xBEFF	; 0x80beff <__bss_end+0x83e3>
                iLED[EYE[R][L]] = 0;
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	e3 53       	subi	r30, 0x33	; 51
     920:	f5 4c       	sbci	r31, 0xC5	; 197
     922:	10 82       	st	Z, r1
     924:	e0 91 fe be 	lds	r30, 0xBEFE	; 0x80befe <__bss_end+0x83e2>
                iLED[EYE[R][R]] = 0;
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	e3 53       	subi	r30, 0x33	; 51
     92c:	f5 4c       	sbci	r31, 0xC5	; 197
     92e:	10 82       	st	Z, r1
     930:	02 c0       	rjmp	.+4      	; 0x936 <MagnetMaze+0x186>
     932:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     936:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     938:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <mazePos>
     93c:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <mazeCnt>
            mazeCnt++;            
     940:	9f 5f       	subi	r25, 0xFF	; 255
     942:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     944:	18 f4       	brcc	.+6      	; 0x94c <MagnetMaze+0x19c>
     946:	90 93 50 38 	sts	0x3850, r25	; 0x803850 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     94a:	2b c0       	rjmp	.+86     	; 0x9a2 <MagnetMaze+0x1f2>
     94c:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     950:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     954:	91 30       	cpi	r25, 0x01	; 1
     956:	e1 f4       	brne	.+56     	; 0x990 <MagnetMaze+0x1e0>
     958:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     95c:	e9 2f       	mov	r30, r25
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	ee 5f       	subi	r30, 0xFE	; 254
     962:	f0 44       	sbci	r31, 0x40	; 64
     964:	e6 81       	ldd	r30, Z+6	; 0x06
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     96c:	e3 53       	subi	r30, 0x33	; 51
     96e:	f5 4c       	sbci	r31, 0xC5	; 197
     970:	20 83       	st	Z, r18
     972:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     974:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     978:	82 31       	cpi	r24, 0x12	; 18
     97a:	99 f4       	brne	.+38     	; 0x9a2 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     97c:	8d e7       	ldi	r24, 0x7D	; 125
     97e:	3d d5       	rcall	.+2682   	; 0x13fa <UpdateState>
     980:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	e3 53       	subi	r30, 0x33	; 51
     986:	f5 4c       	sbci	r31, 0xC5	; 197
     988:	10 82       	st	Z, r1
                        effect = 0x42;
     98a:	82 e4       	ldi	r24, 0x42	; 66
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	05 c0       	rjmp	.+10     	; 0x99a <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     990:	c7 de       	rcall	.-626    	; 0x720 <initMaze>
     992:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                    gameNow   = TEXT;
     996:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     99e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <Setup>:
     9aa:	cf 93       	push	r28
}

uint8_t lsl8(uint8_t input, uint8_t bits)
{
    return (input<<bits);
}
     9ac:	df 93       	push	r29
     9ae:	f8 94       	cli
     9b0:	88 ed       	ldi	r24, 0xD8	; 216
     9b2:	84 bf       	out	0x34, r24	; 52
     9b4:	c1 e0       	ldi	r28, 0x01	; 1
     9b6:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     9ba:	8a e4       	ldi	r24, 0x4A	; 74
     9bc:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     9c0:	8c e7       	ldi	r24, 0x7C	; 124
     9c2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     9c6:	9f e3       	ldi	r25, 0x3F	; 63
     9c8:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     9cc:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9d0:	80 68       	ori	r24, 0x80	; 128
     9d2:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9d6:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9da:	80 68       	ori	r24, 0x80	; 128
     9dc:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9e0:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9ea:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9ee:	80 68       	ori	r24, 0x80	; 128
     9f0:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9f4:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9f8:	80 68       	ori	r24, 0x80	; 128
     9fa:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9fe:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     a02:	80 68       	ori	r24, 0x80	; 128
     a04:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     a08:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     a0c:	d2 e0       	ldi	r29, 0x02	; 2
     a0e:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     a12:	2b e5       	ldi	r18, 0x5B	; 91
     a14:	31 e0       	ldi	r19, 0x01	; 1
     a16:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a1a:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     a1e:	80 ea       	ldi	r24, 0xA0	; 160
     a20:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a24:	80 ec       	ldi	r24, 0xC0	; 192
     a26:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     a30:	1c ba       	out	0x1c, r1	; 28
     a32:	1d ba       	out	0x1d, r1	; 29
     a34:	1f ba       	out	0x1f, r1	; 31
     a36:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a40:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     a44:	87 e7       	ldi	r24, 0x77	; 119
     a46:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     a4a:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     a4e:	8b e0       	ldi	r24, 0x0B	; 11
     a50:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a54:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a58:	81 60       	ori	r24, 0x01	; 1
     a5a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a5e:	85 e0       	ldi	r24, 0x05	; 5
     a60:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     a64:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a70:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     a74:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a78:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     a7c:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     a80:	8b e8       	ldi	r24, 0x8B	; 139
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a88:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     a8c:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     a90:	3f dc       	rcall	.-1922   	; 0x310 <I2C_init>
     a92:	82 e1       	ldi	r24, 0x12	; 18
     a94:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a98:	80 e2       	ldi	r24, 0x20	; 32
     a9a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a9e:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     aa2:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     aa6:	84 e4       	ldi	r24, 0x44	; 68
     aa8:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ab2:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     ab6:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     aba:	81 60       	ori	r24, 0x01	; 1
     abc:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     ac0:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     ac4:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ac8:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     acc:	82 e5       	ldi	r24, 0x52	; 82
     ace:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     ad2:	84 e0       	ldi	r24, 0x04	; 4
     ad4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     ad8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     adc:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     ae0:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     aea:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     af4:	80 e8       	ldi	r24, 0x80	; 128
     af6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     afa:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     afe:	81 60       	ori	r24, 0x01	; 1
     b00:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     b04:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b08:	80 fd       	sbrc	r24, 0
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <Setup+0x15a>
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b12:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     b16:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b1a:	82 fd       	sbrc	r24, 2
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <Setup+0x16c>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	98 e7       	ldi	r25, 0x78	; 120
     b22:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b26:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b2a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b2e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b32:	82 96       	adiw	r24, 0x22	; 34
     b34:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
     b38:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
     b3c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b40:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b44:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     b48:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     b4c:	28 17       	cp	r18, r24
     b4e:	39 07       	cpc	r19, r25
     b50:	70 f4       	brcc	.+28     	; 0xb6e <Setup+0x1c4>
     b52:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b56:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b5a:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     b5e:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     b62:	82 1b       	sub	r24, r18
     b64:	93 0b       	sbc	r25, r19
     b66:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
     b6a:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
     b6e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b72:	83 fd       	sbrc	r24, 3
     b74:	fc cf       	rjmp	.-8      	; 0xb6e <Setup+0x1c4>
     b76:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     b7a:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     b7e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b82:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b98:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b9c:	80 fd       	sbrc	r24, 0
     b9e:	fc cf       	rjmp	.-8      	; 0xb98 <Setup+0x1ee>
     ba0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     baa:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     bae:	81 60       	ori	r24, 0x01	; 1
     bb0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     bb4:	10 92 7f 3a 	sts	0x3A7F, r1	; 0x803a7f <serRx>
     bb8:	8f e7       	ldi	r24, 0x7F	; 127
     bba:	9a e3       	ldi	r25, 0x3A	; 58
     bbc:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <serTxAddr>
     bc0:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <serTxAddr+0x1>
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     bca:	78 94       	sei
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     be8:	87 e0       	ldi	r24, 0x07	; 7
     bea:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     bee:	84 e4       	ldi	r24, 0x44	; 68
     bf0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     bf4:	ec b3       	in	r30, 0x1c	; 28
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	e8 9f       	mul	r30, r24
     bfa:	f0 01       	movw	r30, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	e3 53       	subi	r30, 0x33	; 51
     c00:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     c02:	a8 e2       	ldi	r26, 0x28	; 40
     c04:	ba e0       	ldi	r27, 0x0A	; 10
     c06:	96 e0       	ldi	r25, 0x06	; 6
     c08:	81 91       	ld	r24, Z+
     c0a:	8d 93       	st	X+, r24
     c0c:	9a 95       	dec	r25
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     c10:	8b e0       	ldi	r24, 0x0B	; 11
     c12:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     c16:	8c b3       	in	r24, 0x1c	; 28
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	58 f4       	brcc	.+22     	; 0xc32 <__vector_8+0x60>
        asm(
     c1c:	8c b3       	in	r24, 0x1c	; 28
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <__vector_8+0x52>
     c22:	99 0f       	add	r25, r25
     c24:	8a 95       	dec	r24
     c26:	ea f7       	brpl	.-6      	; 0xc22 <__vector_8+0x50>
     c28:	99 b9       	out	0x09, r25	; 9
     c2a:	8c b3       	in	r24, 0x1c	; 28
     c2c:	83 95       	inc	r24
     c2e:	8c bb       	out	0x1c, r24	; 28
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c32:	8c b3       	in	r24, 0x1c	; 28
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	21 f4       	brne	.+8      	; 0xc40 <__vector_8+0x6e>
     c38:	2a 9a       	sbi	0x05, 2	; 5
     c3a:	83 95       	inc	r24
     c3c:	8c bb       	out	0x1c, r24	; 28
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <__vector_8+0x74>
     c40:	2e 9a       	sbi	0x05, 6	; 5
     c42:	88 27       	eor	r24, r24
     c44:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c46:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <timeout_I2C>
     c4a:	88 23       	and	r24, r24
     c4c:	29 f0       	breq	.+10     	; 0xc58 <__vector_8+0x86>
     c4e:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <timeout_I2C>
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
    if (*serTxAddr) {
     c86:	e0 91 c3 3a 	lds	r30, 0x3AC3	; 0x803ac3 <serTxAddr>
     c8a:	f0 91 c4 3a 	lds	r31, 0x3AC4	; 0x803ac4 <serTxAddr+0x1>
     c8e:	80 81       	ld	r24, Z
     c90:	88 23       	and	r24, r24
     c92:	91 f0       	breq	.+36     	; 0xcb8 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     c94:	80 81       	ld	r24, Z
     c96:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        ++serTxAddr;
     c9a:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <serTxAddr>
     c9e:	90 91 c4 3a 	lds	r25, 0x3AC4	; 0x803ac4 <serTxAddr+0x1>
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <serTxAddr>
     ca8:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     cac:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     cbe:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     cf2:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cf6:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cfa:	80 81       	ld	r24, Z
     cfc:	81 11       	cpse	r24, r1
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <__vector_14+0x36>
     d00:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     d04:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     d08:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d0c:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     d10:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d14:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d18:	80 81       	ld	r24, Z
     d1a:	88 23       	and	r24, r24
     d1c:	e1 f0       	breq	.+56     	; 0xd56 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     d1e:	20 81       	ld	r18, Z
     d20:	40 91 c0 3a 	lds	r20, 0x3AC0	; 0x803ac0 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	2f 57       	subi	r18, 0x7F	; 127
     d28:	31 09       	sbc	r19, r1
     d2a:	42 9f       	mul	r20, r18
     d2c:	c0 01       	movw	r24, r0
     d2e:	43 9f       	mul	r20, r19
     d30:	90 0d       	add	r25, r0
     d32:	11 24       	eor	r1, r1
     d34:	89 2f       	mov	r24, r25
     d36:	99 0f       	add	r25, r25
     d38:	99 0b       	sbc	r25, r25
     d3a:	80 58       	subi	r24, 0x80	; 128
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d42:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d46:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d50:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d54:	06 c0       	rjmp	.+12     	; 0xd62 <__vector_14+0x88>
    } else {
        auVolume = 0xff;
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
        DAC0_DATA = 0x80;
     d5c:	80 e8       	ldi	r24, 0x80	; 128
     d5e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     d80:	1f 92       	push	r1
     d82:	0f 92       	push	r0
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	0f 92       	push	r0
     d88:	11 24       	eor	r1, r1
     d8a:	8f 93       	push	r24
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
    if (serRxDone == 0){
     d90:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <serRxDone>
     d94:	81 11       	cpse	r24, r1
     d96:	44 c0       	rjmp	.+136    	; 0xe20 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     d98:	ed b3       	in	r30, 0x1d	; 29
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     da0:	e1 58       	subi	r30, 0x81	; 129
     da2:	f5 4c       	sbci	r31, 0xC5	; 197
     da4:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     da6:	ed b3       	in	r30, 0x1d	; 29
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	e1 58       	subi	r30, 0x81	; 129
     dac:	f5 4c       	sbci	r31, 0xC5	; 197
     dae:	80 81       	ld	r24, Z
     db0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     db4:	ed b3       	in	r30, 0x1d	; 29
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	e1 58       	subi	r30, 0x81	; 129
     dba:	f5 4c       	sbci	r31, 0xC5	; 197
     dbc:	80 81       	ld	r24, Z
     dbe:	8a 30       	cpi	r24, 0x0A	; 10
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <__vector_27+0x50>
     dc2:	ed b3       	in	r30, 0x1d	; 29
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	e1 58       	subi	r30, 0x81	; 129
     dc8:	f5 4c       	sbci	r31, 0xC5	; 197
     dca:	80 81       	ld	r24, Z
     dcc:	8d 30       	cpi	r24, 0x0D	; 13
     dce:	49 f4       	brne	.+18     	; 0xde2 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     dd0:	ed b3       	in	r30, 0x1d	; 29
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	e1 58       	subi	r30, 0x81	; 129
     dd6:	f5 4c       	sbci	r31, 0xC5	; 197
     dd8:	10 82       	st	Z, r1
            serRxDone = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <serRxDone>
     de0:	1f c0       	rjmp	.+62     	; 0xe20 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     de2:	ed b3       	in	r30, 0x1d	; 29
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	e1 58       	subi	r30, 0x81	; 129
     de8:	f5 4c       	sbci	r31, 0xC5	; 197
     dea:	80 81       	ld	r24, Z
     dec:	88 30       	cpi	r24, 0x08	; 8
     dee:	39 f0       	breq	.+14     	; 0xdfe <__vector_27+0x7e>
     df0:	ed b3       	in	r30, 0x1d	; 29
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	e1 58       	subi	r30, 0x81	; 129
     df6:	f5 4c       	sbci	r31, 0xC5	; 197
     df8:	80 81       	ld	r24, Z
     dfa:	8f 37       	cpi	r24, 0x7F	; 127
     dfc:	59 f4       	brne	.+22     	; 0xe14 <__vector_27+0x94>
     dfe:	8d b3       	in	r24, 0x1d	; 29
     e00:	88 23       	and	r24, r24
     e02:	41 f0       	breq	.+16     	; 0xe14 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     e04:	ed b3       	in	r30, 0x1d	; 29
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	e1 58       	subi	r30, 0x81	; 129
     e0a:	f5 4c       	sbci	r31, 0xC5	; 197
     e0c:	10 82       	st	Z, r1
            --RXCNT;
     e0e:	8d b3       	in	r24, 0x1d	; 29
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     e14:	8d b3       	in	r24, 0x1d	; 29
     e16:	80 34       	cpi	r24, 0x40	; 64
     e18:	18 f4       	brcc	.+6      	; 0xe20 <__vector_27+0xa0>
     e1a:	8d b3       	in	r24, 0x1d	; 29
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     e26:	ff 91       	pop	r31
     e28:	ef 91       	pop	r30
     e2a:	8f 91       	pop	r24
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	8f 93       	push	r24
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
    TCB0_CNT = 0;
     e46:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e4a:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e54:	e5 e0       	ldi	r30, 0x05	; 5
     e56:	f8 e0       	ldi	r31, 0x08	; 8
     e58:	80 81       	ld	r24, Z
     e5a:	8f 7d       	andi	r24, 0xDF	; 223
     e5c:	80 83       	st	Z, r24
};
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	8f 91       	pop	r24
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	8f 93       	push	r24
     e7a:	9f 93       	push	r25
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     e7c:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     e80:	81 11       	cpse	r24, r1
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <__vector_20+0x3a>
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn=ADC0_RESL;
     e84:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e88:	8e 31       	cpi	r24, 0x1E	; 30
     e8a:	49 f4       	brne	.+18     	; 0xe9e <__vector_20+0x30>
     e8c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e90:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e94:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <adcTemp>
     e98:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <adcTemp+0x1>
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <__vector_20+0x44>
     e9e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ea2:	80 93 cc 3a 	sts	0x3ACC, r24	; 0x803acc <auIn>
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <__vector_20+0x44>
    } else --adc0Chg;
     ea8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     ed4:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ed8:	81 11       	cpse	r24, r1
     eda:	0a c0       	rjmp	.+20     	; 0xef0 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     edc:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ee0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ee4:	80 93 c7 3a 	sts	0x3AC7, r24	; 0x803ac7 <adcPhot>
     ee8:	90 93 c8 3a 	sts	0x3AC8, r25	; 0x803ac8 <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	10 c0       	rjmp	.+32     	; 0xf10 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     ef0:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	79 f4       	brne	.+30     	; 0xf16 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     efe:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f02:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f06:	80 93 c5 3a 	sts	0x3AC5, r24	; 0x803ac5 <adcHall>
     f0a:	90 93 c6 3a 	sts	0x3AC6, r25	; 0x803ac6 <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f14:	10 c0       	rjmp	.+32     	; 0xf36 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     f16:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f1a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f1e:	80 93 c1 3a 	sts	0x3AC1, r24	; 0x803ac1 <adcBtns>
     f22:	90 93 c2 3a 	sts	0x3AC2, r25	; 0x803ac2 <adcBtns+0x1>
        if (A1CNT == 15){
     f26:	8f b3       	in	r24, 0x1f	; 31
     f28:	8f 30       	cpi	r24, 0x0F	; 15
     f2a:	29 f4       	brne	.+10     	; 0xf36 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     f2c:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     f30:	88 e0       	ldi	r24, 0x08	; 8
     f32:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f36:	8f b3       	in	r24, 0x1f	; 31
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	99 27       	eor	r25, r25
     f40:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     f68:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f6c:	81 ff       	sbrs	r24, 1
     f6e:	36 c0       	rjmp	.+108    	; 0xfdc <__vector_6+0x86>
        if (buttonMark<0xff) ++buttonMark;   // For button timing purposes
     f70:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f74:	8f 3f       	cpi	r24, 0xFF	; 255
     f76:	29 f0       	breq	.+10     	; 0xf82 <__vector_6+0x2c>
     f78:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>
        tmp16bit = (RTC_CNT + BTN_TMR);
     f82:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f86:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f8a:	82 96       	adiw	r24, 0x22	; 34
        while (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     f8c:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <tmp16bit>
     f90:	90 93 fa 3a 	sts	0x3AFA, r25	; 0x803afa <tmp16bit+0x1>
     f94:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f98:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f9c:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     fa0:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     fa4:	28 17       	cp	r18, r24
     fa6:	39 07       	cpc	r19, r25
     fa8:	58 f4       	brcc	.+22     	; 0xfc0 <__vector_6+0x6a>
     faa:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     fae:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     fb2:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     fb6:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     fba:	82 1b       	sub	r24, r18
     fbc:	93 0b       	sbc	r25, r19
     fbe:	e6 cf       	rjmp	.-52     	; 0xf8c <__vector_6+0x36>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
     fc0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     fc4:	83 fd       	sbrc	r24, 3
     fc6:	fc cf       	rjmp	.-8      	; 0xfc0 <__vector_6+0x6a>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
     fc8:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <tmp16bit>
     fcc:	90 91 fa 3a 	lds	r25, 0x3AFA	; 0x803afa <tmp16bit+0x1>
     fd0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fd4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <__vector_6+0x92>
    } else {
        ++minuteMark;                       // For very slow timing purposes, overflows to 0
     fdc:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <minuteMark>
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    1010:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    fastTicker++;
    1014:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <fastTicker>
}
    101e:	8f 91       	pop	r24
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    102a:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    102e:	91 fd       	sbrc	r25, 1
    1030:	fc cf       	rjmp	.-8      	; 0x102a <EERead>
    1032:	fb 01       	movw	r30, r22
    1034:	48 0f       	add	r20, r24

    while(size){
    1036:	84 17       	cp	r24, r20
    1038:	39 f0       	breq	.+14     	; 0x1048 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    103a:	a8 2f       	mov	r26, r24
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	bc 5e       	subi	r27, 0xEC	; 236
    1040:	9c 91       	ld	r25, X
    1042:	91 93       	st	Z+, r25
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	f7 cf       	rjmp	.-18     	; 0x1036 <EERead+0xc>
        --size;
    }
}
    1048:	08 95       	ret

0000104a <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    104a:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    104c:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    104e:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    1050:	44 23       	and	r20, r20
    1052:	09 f1       	breq	.+66     	; 0x1096 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1054:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1058:	51 fd       	sbrc	r21, 1
    105a:	fc cf       	rjmp	.-8      	; 0x1054 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    105c:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    105e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1062:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    1064:	58 2f       	mov	r21, r24
    1066:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	db 01       	movw	r26, r22
    1070:	11 97       	sbiw	r26, 0x01	; 1
    1072:	ac 91       	ld	r26, X
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	fc 5e       	subi	r31, 0xEC	; 236
    1078:	a0 83       	st	Z, r26
            --size;
    107a:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    107c:	19 f0       	breq	.+6      	; 0x1084 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    107e:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1080:	5f 31       	cpi	r21, 0x1F	; 31
    1082:	81 f7       	brne	.-32     	; 0x1064 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    1084:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    1086:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    108a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    108e:	52 ff       	sbrs	r21, 2
    1090:	df cf       	rjmp	.-66     	; 0x1050 <EEWrite+0x6>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    1094:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret

0000109a <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    109a:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    109c:	9c 01       	movw	r18, r24
    109e:	2e 1b       	sub	r18, r30
    10a0:	3f 0b       	sbc	r19, r31
    10a2:	88 e0       	ldi	r24, 0x08	; 8
    10a4:	48 9f       	mul	r20, r24
    10a6:	a0 01       	movw	r20, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	42 5d       	subi	r20, 0xD2	; 210
    10ac:	50 44       	sbci	r21, 0x40	; 64
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    10ae:	66 23       	and	r22, r22
    10b0:	69 f0       	breq	.+26     	; 0x10cc <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    10b2:	df 01       	movw	r26, r30
    10b4:	a2 0f       	add	r26, r18
    10b6:	b3 1f       	adc	r27, r19
    10b8:	a7 70       	andi	r26, 0x07	; 7
    10ba:	bb 27       	eor	r27, r27
    10bc:	a4 0f       	add	r26, r20
    10be:	b5 1f       	adc	r27, r21
    10c0:	80 81       	ld	r24, Z
    10c2:	9c 91       	ld	r25, X
    10c4:	98 27       	eor	r25, r24
    10c6:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    10c8:	61 50       	subi	r22, 0x01	; 1
    10ca:	f1 cf       	rjmp	.-30     	; 0x10ae <DecryptData+0x14>
    }
}
    10cc:	08 95       	ret

000010ce <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    10ce:	a2 e0       	ldi	r26, 0x02	; 2
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e6       	ldi	r30, 0x6D	; 109
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__prologue_saves__+0x10>
    10da:	d6 2e       	mov	r13, r22
    10dc:	c4 2e       	mov	r12, r20
    10de:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    10e0:	7c 01       	movw	r14, r24
    10e2:	e8 94       	clt
    10e4:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    10e6:	f9 82       	std	Y+1, r15	; 0x01
    10e8:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    10ea:	06 2f       	mov	r16, r22
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	be 01       	movw	r22, r28
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	80 e5       	ldi	r24, 0x50	; 80
    10f6:	0a da       	rcall	.-3052   	; 0x50c <I2C_read_bytes>
    10f8:	18 2f       	mov	r17, r24
    if (error) return error;
    10fa:	81 11       	cpse	r24, r1
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <ExtEERead+0x3a>
    DecryptData(offset, length, type, data);
    10fe:	95 01       	movw	r18, r10
    1100:	4c 2d       	mov	r20, r12
    1102:	6d 2d       	mov	r22, r13
    1104:	c7 01       	movw	r24, r14
    1106:	c9 df       	rcall	.-110    	; 0x109a <DecryptData>
    return 0;
}
    1108:	81 2f       	mov	r24, r17
    110a:	22 96       	adiw	r28, 0x02	; 2
    110c:	ea e0       	ldi	r30, 0x0A	; 10
    110e:	0c 94 58 1f 	jmp	0x3eb0	; 0x3eb0 <__epilogue_restores__+0x10>

00001112 <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    1112:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    1116:	22 23       	and	r18, r18
    1118:	59 f0       	breq	.+22     	; 0x1130 <SerSend+0x1e>
        serTxAddr = addr;
    111a:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <serTxAddr>
    111e:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <serTxAddr+0x1>
        serTxDone = 0;
    1122:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
    } else return 1;    //Error: Still sending data
    1130:	81 e0       	ldi	r24, 0x01	; 1
};
    1132:	08 95       	ret

00001134 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    1134:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    1136:	81 11       	cpse	r24, r1
    1138:	01 c0       	rjmp	.+2      	; 0x113c <SerSpeed+0x8>
    113a:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	82 1b       	sub	r24, r18
    1142:	91 09       	sbc	r25, r1
    1144:	98 2f       	mov	r25, r24
    1146:	88 27       	eor	r24, r24
    1148:	81 50       	subi	r24, 0x01	; 1
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1150:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    1154:	08 95       	ret

00001156 <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     adc0Chg = 255;
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    115c:	82 e1       	ldi	r24, 0x12	; 18
    115e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1162:	e0 e0       	ldi	r30, 0x00	; 0
    1164:	f6 e0       	ldi	r31, 0x06	; 6
    1166:	80 81       	ld	r24, Z
    1168:	8b 7f       	andi	r24, 0xFB	; 251
    116a:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    116c:	8e e1       	ldi	r24, 0x1E	; 30
    116e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1172:	08 95       	ret

00001174 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     adc0Chg = 255;
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    117a:	82 e2       	ldi	r24, 0x22	; 34
    117c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    1180:	e0 e0       	ldi	r30, 0x00	; 0
    1182:	f6 e0       	ldi	r31, 0x06	; 6
    1184:	80 81       	ld	r24, Z
    1186:	84 60       	ori	r24, 0x04	; 4
    1188:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    118a:	87 e0       	ldi	r24, 0x07	; 7
    118c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1190:	08 95       	ret

00001192 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1192:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <adcBtns>
    1196:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    119a:	24 e0       	ldi	r18, 0x04	; 4
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	2a 95       	dec	r18
    11a2:	e1 f7       	brne	.-8      	; 0x119c <CheckButtons+0xa>
    11a4:	99 27       	eor	r25, r25
    11a6:	80 36       	cpi	r24, 0x60	; 96
    11a8:	91 05       	cpc	r25, r1
    11aa:	40 f4       	brcc	.+16     	; 0x11bc <CheckButtons+0x2a>
    11ac:	8f 34       	cpi	r24, 0x4F	; 79
    11ae:	91 05       	cpc	r25, r1
    11b0:	88 f4       	brcc	.+34     	; 0x11d4 <CheckButtons+0x42>
    11b2:	c0 97       	sbiw	r24, 0x30	; 48
    11b4:	09 97       	sbiw	r24, 0x09	; 9
    11b6:	90 f4       	brcc	.+36     	; 0x11dc <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	11 c0       	rjmp	.+34     	; 0x11de <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    11bc:	85 37       	cpi	r24, 0x75	; 117
    11be:	91 05       	cpc	r25, r1
    11c0:	68 f0       	brcs	.+26     	; 0x11dc <CheckButtons+0x4a>
    11c2:	8e 38       	cpi	r24, 0x8E	; 142
    11c4:	91 05       	cpc	r25, r1
    11c6:	40 f0       	brcs	.+16     	; 0x11d8 <CheckButtons+0x46>
    11c8:	8e 59       	subi	r24, 0x9E	; 158
    11ca:	91 09       	sbc	r25, r1
    11cc:	81 97       	sbiw	r24, 0x21	; 33
    11ce:	30 f4       	brcc	.+12     	; 0x11dc <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    11d0:	90 e0       	ldi	r25, 0x00	; 0
            break;
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    11d4:	93 e0       	ldi	r25, 0x03	; 3
            break;
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    11d8:	91 e0       	ldi	r25, 0x01	; 1
            break;
    11da:	01 c0       	rjmp	.+2      	; 0x11de <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    11de:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <previousValue.3914>
    11e2:	98 17       	cp	r25, r24
    11e4:	19 f0       	breq	.+6      	; 0x11ec <CheckButtons+0x5a>
            previousValue = button;
    11e6:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <previousValue.3914>
            return 0xFF;
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    11ec:	08 95       	ret

000011ee <lfsr>:

uint8_t lfsr(){
    lfsrSeed ^= (lfsrSeed << 13);
    11ee:	80 91 64 38 	lds	r24, 0x3864	; 0x803864 <lfsrSeed>
    11f2:	90 91 65 38 	lds	r25, 0x3865	; 0x803865 <lfsrSeed+0x1>
    11f6:	9c 01       	movw	r18, r24
    11f8:	32 2f       	mov	r19, r18
    11fa:	22 27       	eor	r18, r18
    11fc:	32 95       	swap	r19
    11fe:	33 0f       	add	r19, r19
    1200:	30 7e       	andi	r19, 0xE0	; 224
    1202:	82 27       	eor	r24, r18
    1204:	93 27       	eor	r25, r19
    lfsrSeed ^= (lfsrSeed >> 9);
    1206:	9c 01       	movw	r18, r24
    1208:	23 2f       	mov	r18, r19
    120a:	33 27       	eor	r19, r19
    120c:	26 95       	lsr	r18
    120e:	82 27       	eor	r24, r18
    1210:	93 27       	eor	r25, r19
    lfsrSeed ^= (lfsrSeed << 7);
    1212:	9c 01       	movw	r18, r24
    1214:	36 95       	lsr	r19
    1216:	32 2f       	mov	r19, r18
    1218:	22 27       	eor	r18, r18
    121a:	37 95       	ror	r19
    121c:	27 95       	ror	r18
    121e:	82 27       	eor	r24, r18
    1220:	93 27       	eor	r25, r19
    1222:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <lfsrSeed>
    1226:	90 93 65 38 	sts	0x3865, r25	; 0x803865 <lfsrSeed+0x1>
    return (lfsrSeed & 0xff);
}
    122a:	08 95       	ret

0000122c <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ec e1       	ldi	r30, 0x1C	; 28
    1232:	f9 e0       	ldi	r31, 0x09	; 9
    1234:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__prologue_saves__+0x16>
    1238:	7b 01       	movw	r14, r22
    123a:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    123c:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1240:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    1244:	e8 2f       	mov	r30, r24
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	31 97       	sbiw	r30, 0x01	; 1
    124a:	e7 70       	andi	r30, 0x07	; 7
    124c:	ff 27       	eor	r31, r31
    124e:	e4 5d       	subi	r30, 0xD4	; 212
    1250:	f7 4c       	sbci	r31, 0xC7	; 199
    1252:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    1254:	cc df       	rcall	.-104    	; 0x11ee <lfsr>
    1256:	8d 21       	and	r24, r13
    1258:	c8 0f       	add	r28, r24
    125a:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    125c:	c8 df       	rcall	.-112    	; 0x11ee <lfsr>
    125e:	8d 21       	and	r24, r13
    1260:	c8 1b       	sub	r28, r24
    1262:	d1 09       	sbc	r29, r1
    1264:	0c 17       	cp	r16, r28
    1266:	1d 07       	cpc	r17, r29
    1268:	08 f4       	brcc	.+2      	; 0x126c <floatSpeed+0x40>
    126a:	e8 01       	movw	r28, r16
    126c:	c7 01       	movw	r24, r14
    126e:	ec 16       	cp	r14, r28
    1270:	fd 06       	cpc	r15, r29
    1272:	08 f4       	brcc	.+2      	; 0x1276 <floatSpeed+0x4a>
    1274:	ce 01       	movw	r24, r28
    1276:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    127a:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    127e:	cd b7       	in	r28, 0x3d	; 61
}
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	e7 e0       	ldi	r30, 0x07	; 7
    1284:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__epilogue_restores__+0x16>

00001288 <floatAround>:
    1288:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	c8 2f       	mov	r28, r24
    1292:	d4 2f       	mov	r29, r20
    1294:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1296:	e6 2f       	mov	r30, r22
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	31 97       	sbiw	r30, 0x01	; 1
    129c:	e7 70       	andi	r30, 0x07	; 7
    129e:	ff 27       	eor	r31, r31
    12a0:	e4 5d       	subi	r30, 0xD4	; 212
    12a2:	f7 4c       	sbci	r31, 0xC7	; 199
    12a4:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    12a6:	a3 df       	rcall	.-186    	; 0x11ee <lfsr>
    12a8:	81 23       	and	r24, r17
    12aa:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    12ac:	a0 df       	rcall	.-192    	; 0x11ee <lfsr>
    12ae:	81 23       	and	r24, r17
    12b0:	c8 1b       	sub	r28, r24
    12b2:	8c 2f       	mov	r24, r28
    12b4:	00 23       	and	r16, r16
    if (max){
    12b6:	41 f0       	breq	.+16     	; 0x12c8 <floatAround+0x40>
    12b8:	9c 2f       	mov	r25, r28
    12ba:	0c 17       	cp	r16, r28
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <floatAround+0x38>
    12be:	90 2f       	mov	r25, r16
    12c0:	8d 2f       	mov	r24, r29
    12c2:	d9 17       	cp	r29, r25
    12c4:	08 f4       	brcc	.+2      	; 0x12c8 <floatAround+0x40>
    12c6:	89 2f       	mov	r24, r25
    12c8:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	8d 17       	cp	r24, r29
    12ce:	10 f0       	brcs	.+4      	; 0x12d4 <floatAround+0x4c>
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	2d 2f       	mov	r18, r29
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	24 23       	and	r18, r20
    12da:	35 23       	and	r19, r21
    12dc:	23 2b       	or	r18, r19
    12de:	09 f0       	breq	.+2      	; 0x12e2 <floatAround+0x5a>
    12e0:	8d 2f       	mov	r24, r29
    12e2:	df 91       	pop	r29

    return sample;
}
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <SaveGameState>:
    12ec:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    12ee:	df 92       	push	r13
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	64 97       	sbiw	r28, 0x14	; 20
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    1304:	44 e1       	ldi	r20, 0x14	; 20
    1306:	be 01       	movw	r22, r28
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	8d de       	rcall	.-742    	; 0x102a <EERead>
    1310:	8b e6       	ldi	r24, 0x6B	; 107
    1312:	c8 2e       	mov	r12, r24
    1314:	8a e3       	ldi	r24, 0x3A	; 58
    1316:	d8 2e       	mov	r13, r24
    1318:	8e 01       	movw	r16, r28
    131a:	0f 5f       	subi	r16, 0xFF	; 255
    131c:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    131e:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    1320:	f8 01       	movw	r30, r16
    1322:	81 91       	ld	r24, Z+
    1324:	8f 01       	movw	r16, r30
    1326:	f6 01       	movw	r30, r12
    1328:	90 81       	ld	r25, Z
    132a:	98 13       	cpse	r25, r24
    132c:	08 c0       	rjmp	.+16     	; 0x133e <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    132e:	f3 94       	inc	r15
    1330:	ff ef       	ldi	r31, 0xFF	; 255
    1332:	cf 1a       	sub	r12, r31
    1334:	df 0a       	sbc	r13, r31
    1336:	80 e1       	ldi	r24, 0x10	; 16
    1338:	f8 12       	cpse	r15, r24
    133a:	f2 cf       	rjmp	.-28     	; 0x1320 <SaveGameState+0x34>
    133c:	08 c0       	rjmp	.+16     	; 0x134e <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	b6 01       	movw	r22, r12
    1342:	8f 2d       	mov	r24, r15
    1344:	82 de       	rcall	.-764    	; 0x104a <EEWrite>
    1346:	88 23       	and	r24, r24
    1348:	91 f3       	breq	.-28     	; 0x132e <SaveGameState+0x42>
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	36 c0       	rjmp	.+108    	; 0x13ba <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    134e:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    1352:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    1356:	30 93 7b 3a 	sts	0x3A7B, r19	; 0x803a7b <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    135a:	20 93 7c 3a 	sts	0x3A7C, r18	; 0x803a7c <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    135e:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    1362:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    1366:	90 93 7d 3a 	sts	0x3A7D, r25	; 0x803a7d <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    136a:	80 93 7e 3a 	sts	0x3A7E, r24	; 0x803a7e <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    136e:	89 89       	ldd	r24, Y+17	; 0x11
    1370:	9a 89       	ldd	r25, Y+18	; 0x12
    1372:	98 27       	eor	r25, r24
    1374:	89 27       	eor	r24, r25
    1376:	98 27       	eor	r25, r24
    1378:	28 17       	cp	r18, r24
    137a:	39 07       	cpc	r19, r25
    137c:	69 f4       	brne	.+26     	; 0x1398 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    137e:	8b 89       	ldd	r24, Y+19	; 0x13
    1380:	9c 89       	ldd	r25, Y+20	; 0x14
    1382:	98 27       	eor	r25, r24
    1384:	89 27       	eor	r24, r25
    1386:	98 27       	eor	r25, r24
    1388:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    138c:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    1390:	28 17       	cp	r18, r24
    1392:	39 07       	cpc	r19, r25
    1394:	49 f4       	brne	.+18     	; 0x13a8 <SaveGameState+0xbc>
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1398:	42 e0       	ldi	r20, 0x02	; 2
    139a:	6b e7       	ldi	r22, 0x7B	; 123
    139c:	7a e3       	ldi	r23, 0x3A	; 58
    139e:	80 e1       	ldi	r24, 0x10	; 16
    13a0:	54 de       	rcall	.-856    	; 0x104a <EEWrite>
    13a2:	88 23       	and	r24, r24
    13a4:	61 f3       	breq	.-40     	; 0x137e <SaveGameState+0x92>
    13a6:	d1 cf       	rjmp	.-94     	; 0x134a <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    13a8:	42 e0       	ldi	r20, 0x02	; 2
    13aa:	6d e7       	ldi	r22, 0x7D	; 125
    13ac:	7a e3       	ldi	r23, 0x3A	; 58
    13ae:	82 e1       	ldi	r24, 0x12	; 18
    13b0:	4c de       	rcall	.-872    	; 0x104a <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	81 11       	cpse	r24, r1
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <SaveGameState+0xce>
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    13ba:	89 2f       	mov	r24, r25
    13bc:	64 96       	adiw	r28, 0x14	; 20
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	08 95       	ret

000013d2 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    13d2:	e8 2f       	mov	r30, r24
    13d4:	ef 77       	andi	r30, 0x7F	; 127
    13d6:	e6 95       	lsr	r30
    13d8:	e6 95       	lsr	r30
    13da:	e6 95       	lsr	r30
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	e5 59       	subi	r30, 0x95	; 149
    13e0:	f5 4c       	sbci	r31, 0xC5	; 197
    13e2:	20 81       	ld	r18, Z
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	87 70       	andi	r24, 0x07	; 7
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <ReadStatusBit+0x1e>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <ReadStatusBit+0x1a>
    13f4:	ca 01       	movw	r24, r20
}
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	08 95       	ret

000013fa <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    13fa:	e8 2f       	mov	r30, r24
    13fc:	ef 77       	andi	r30, 0x7F	; 127
    
    if (num) {
    13fe:	e9 f0       	breq	.+58     	; 0x143a <UpdateState+0x40>
    1400:	e6 95       	lsr	r30
    1402:	e6 95       	lsr	r30
    1404:	e6 95       	lsr	r30
    1406:	28 2f       	mov	r18, r24
    1408:	27 70       	andi	r18, 0x07	; 7
        if (clearBit) {
            gameState[num>>3] &= ~(1<<(num&7));
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	e5 59       	subi	r30, 0x95	; 149
    140e:	f5 4c       	sbci	r31, 0xC5	; 197
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    
    if (num) {
        if (clearBit) {
    1410:	87 ff       	sbrs	r24, 7
    1412:	0a c0       	rjmp	.+20     	; 0x1428 <UpdateState+0x2e>
            gameState[num>>3] &= ~(1<<(num&7));
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	01 c0       	rjmp	.+2      	; 0x141c <UpdateState+0x22>
    141a:	88 0f       	add	r24, r24
    141c:	2a 95       	dec	r18
    141e:	ea f7       	brpl	.-6      	; 0x141a <UpdateState+0x20>
    1420:	80 95       	com	r24
    1422:	90 81       	ld	r25, Z
    1424:	89 23       	and	r24, r25
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <UpdateState+0x3e>
        } else {
            gameState[num>>3] |= 1<<(num&7);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <UpdateState+0x36>
    142e:	88 0f       	add	r24, r24
    1430:	2a 95       	dec	r18
    1432:	ea f7       	brpl	.-6      	; 0x142e <UpdateState+0x34>
    1434:	90 81       	ld	r25, Z
    1436:	89 2b       	or	r24, r25
    1438:	80 83       	st	Z, r24
    143a:	08 95       	ret

0000143c <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    143c:	cf 93       	push	r28
    143e:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    1440:	8f 77       	andi	r24, 0x7F	; 127
    1442:	c7 df       	rcall	.-114    	; 0x13d2 <ReadStatusBit>
    1444:	2c 2f       	mov	r18, r28
    1446:	22 1f       	adc	r18, r18
    1448:	22 27       	eor	r18, r18
    144a:	22 1f       	adc	r18, r18
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	81 11       	cpse	r24, r1
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <CheckState+0x18>
    1452:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1454:	82 2f       	mov	r24, r18
    1456:	89 27       	eor	r24, r25
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    145c:	e3 e0       	ldi	r30, 0x03	; 3
    145e:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    1460:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    1462:	91 91       	ld	r25, Z+
    1464:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    1466:	ed 30       	cpi	r30, 0x0D	; 13
    1468:	91 e1       	ldi	r25, 0x11	; 17
    146a:	f9 07       	cpc	r31, r25
    146c:	d1 f7       	brne	.-12     	; 0x1462 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    146e:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	98 0f       	add	r25, r24
    1474:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <whoami>
    return id;
}
    1478:	08 95       	ret

0000147a <Reset>:

void Reset(){
    147a:	cf 93       	push	r28
    147c:	eb e6       	ldi	r30, 0x6B	; 107
    147e:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    1480:	11 92       	st	Z+, r1
    //Reset game progress (all zeros) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1482:	8a e3       	ldi	r24, 0x3A	; 58
    1484:	ef 37       	cpi	r30, 0x7F	; 127
    1486:	f8 07       	cpc	r31, r24
    1488:	d9 f7       	brne	.-10     	; 0x1480 <Reset+0x6>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    148a:	e8 df       	rcall	.-48     	; 0x145c <getID>
    148c:	c8 2f       	mov	r28, r24

    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    148e:	81 11       	cpse	r24, r1
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <Reset+0x1c>
    1492:	8e e6       	ldi	r24, 0x6E	; 110
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <Reset+0x32>
    else if (id == 1) UpdateState(111);
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	11 f4       	brne	.+4      	; 0x149e <Reset+0x24>
    149a:	8f e6       	ldi	r24, 0x6F	; 111
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <Reset+0x32>
    else if (id == 2) UpdateState(112);
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <Reset+0x2c>
    14a2:	80 e7       	ldi	r24, 0x70	; 112
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <Reset+0x32>
    else if (id == 3) UpdateState(113);
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	11 f4       	brne	.+4      	; 0x14ae <Reset+0x34>
    14aa:	81 e7       	ldi	r24, 0x71	; 113
    14ac:	a6 df       	rcall	.-180    	; 0x13fa <UpdateState>
    UpdateState(100+id);
    14ae:	84 e6       	ldi	r24, 0x64	; 100
    14b0:	8c 0f       	add	r24, r28
    14b2:	a3 df       	rcall	.-186    	; 0x13fa <UpdateState>

    //Write bit 0, must always be 1!

}
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    14bc:	44 e1       	ldi	r20, 0x14	; 20
    14be:	6b e6       	ldi	r22, 0x6B	; 107
    14c0:	7a e3       	ldi	r23, 0x3A	; 58
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	b2 dd       	rcall	.-1180   	; 0x102a <EERead>
    14c6:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    14ca:	8c 2f       	mov	r24, r28
    14cc:	82 df       	rcall	.-252    	; 0x13d2 <ReadStatusBit>
    14ce:	d8 0f       	add	r29, r24
    14d0:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    14d2:	c2 37       	cpi	r28, 0x72	; 114
    14d4:	d1 f7       	brne	.-12     	; 0x14ca <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    14d6:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    14d8:	11 f0       	breq	.+4      	; 0x14de <LoadGameState+0x26>
    14da:	cf df       	rcall	.-98     	; 0x147a <Reset>
    } else getID();
    14dc:	01 c0       	rjmp	.+2      	; 0x14e0 <LoadGameState+0x28>
    14de:	be df       	rcall	.-132    	; 0x145c <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    14e0:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <gameState+0x10>
    14e4:	90 91 7c 3a 	lds	r25, 0x3A7C	; 0x803a7c <gameState+0x11>
    14e8:	98 27       	eor	r25, r24
    14ea:	89 27       	eor	r24, r25
    14ec:	98 27       	eor	r25, r24
    14ee:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    14f2:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    14f6:	80 91 7d 3a 	lds	r24, 0x3A7D	; 0x803a7d <gameState+0x12>
    14fa:	90 91 7e 3a 	lds	r25, 0x3A7E	; 0x803a7e <gameState+0x13>
    14fe:	98 27       	eor	r25, r24
    1500:	89 27       	eor	r24, r25
    1502:	98 27       	eor	r25, r24
    1504:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    1508:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
}
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <HotSummer>:
    //Write bit 0, must always be 1!

}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    1512:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1514:	86 e7       	ldi	r24, 0x76	; 118
    1516:	92 df       	rcall	.-220    	; 0x143c <CheckState>
    1518:	c8 2f       	mov	r28, r24
    151a:	88 23       	and	r24, r24
    151c:	81 f0       	breq	.+32     	; 0x153e <HotSummer+0x2c>
        iLED[SCARAB[R]] = 0;
    151e:	e0 91 f2 be 	lds	r30, 0xBEF2	; 0x80bef2 <__bss_end+0x83d6>
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	e3 53       	subi	r30, 0x33	; 51
    1526:	f5 4c       	sbci	r31, 0xC5	; 197
    1528:	10 82       	st	Z, r1
        iLED[SCARAB[G]] = dimValue;
    152a:	e0 91 f3 be 	lds	r30, 0xBEF3	; 0x80bef3 <__bss_end+0x83d7>
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1534:	e3 53       	subi	r30, 0x33	; 51
    1536:	f5 4c       	sbci	r31, 0xC5	; 197
    1538:	80 83       	st	Z, r24
        return 1;
    153a:	c1 e0       	ldi	r28, 0x01	; 1
    153c:	4c c0       	rjmp	.+152    	; 0x15d6 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    153e:	85 e7       	ldi	r24, 0x75	; 117
    1540:	7d df       	rcall	.-262    	; 0x143c <CheckState>
    1542:	88 23       	and	r24, r24
    1544:	59 f1       	breq	.+86     	; 0x159c <HotSummer+0x8a>
        iLED[SCARAB[R]] = dimValue;
    1546:	e0 91 f2 be 	lds	r30, 0xBEF2	; 0x80bef2 <__bss_end+0x83d6>
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1550:	e3 53       	subi	r30, 0x33	; 51
    1552:	f5 4c       	sbci	r31, 0xC5	; 197
    1554:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    1556:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <cooledDown.3978>
    155a:	88 23       	and	r24, r24
    155c:	79 f0       	breq	.+30     	; 0x157c <HotSummer+0x6a>
    155e:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <calTemp>
    1562:	90 91 cb 3a 	lds	r25, 0x3ACB	; 0x803acb <calTemp+0x1>
    1566:	20 91 f7 3a 	lds	r18, 0x3AF7	; 0x803af7 <adcTemp>
    156a:	30 91 f8 3a 	lds	r19, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    156e:	80 96       	adiw	r24, 0x20	; 32
    1570:	28 17       	cp	r18, r24
    1572:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1574:	18 f0       	brcs	.+6      	; 0x157c <HotSummer+0x6a>
    1576:	86 e7       	ldi	r24, 0x76	; 118
    1578:	40 df       	rcall	.-384    	; 0x13fa <UpdateState>
            return 0;
    157a:	2d c0       	rjmp	.+90     	; 0x15d6 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    157c:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <calTemp>
    1580:	90 91 cb 3a 	lds	r25, 0x3ACB	; 0x803acb <calTemp+0x1>
    1584:	20 91 f7 3a 	lds	r18, 0x3AF7	; 0x803af7 <adcTemp>
    1588:	30 91 f8 3a 	lds	r19, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    158c:	08 96       	adiw	r24, 0x08	; 8
    158e:	82 17       	cp	r24, r18
    1590:	93 07       	cpc	r25, r19
    1592:	08 f1       	brcs	.+66     	; 0x15d6 <HotSummer+0xc4>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <cooledDown.3978>
    159a:	1d c0       	rjmp	.+58     	; 0x15d6 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    159c:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <calTemp>
    15a0:	90 91 cb 3a 	lds	r25, 0x3ACB	; 0x803acb <calTemp+0x1>
    15a4:	89 2b       	or	r24, r25
    15a6:	41 f4       	brne	.+16     	; 0x15b8 <HotSummer+0xa6>
    15a8:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <adcTemp>
    15ac:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    15b0:	80 93 ca 3a 	sts	0x3ACA, r24	; 0x803aca <calTemp>
    15b4:	90 93 cb 3a 	sts	0x3ACB, r25	; 0x803acb <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    15b8:	80 91 ca 3a 	lds	r24, 0x3ACA	; 0x803aca <calTemp>
    15bc:	90 91 cb 3a 	lds	r25, 0x3ACB	; 0x803acb <calTemp+0x1>
    15c0:	20 91 f7 3a 	lds	r18, 0x3AF7	; 0x803af7 <adcTemp>
    15c4:	30 91 f8 3a 	lds	r19, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    15c8:	80 96       	adiw	r24, 0x20	; 32
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    15ce:	18 f0       	brcs	.+6      	; 0x15d6 <HotSummer+0xc4>
    15d0:	85 e7       	ldi	r24, 0x75	; 117
    15d2:	13 df       	rcall	.-474    	; 0x13fa <UpdateState>
        }
    }
    return 0;
    15d4:	c0 e0       	ldi	r28, 0x00	; 0
}
    15d6:	8c 2f       	mov	r24, r28
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <WingBar>:

void WingBar(int8_t l, int8_t r) {
    15dc:	e4 ef       	ldi	r30, 0xF4	; 244
    15de:	fe eb       	ldi	r31, 0xBE	; 190
    for (int8_t i=0; i<5; i++) {
    15e0:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    15e2:	a5 81       	ldd	r26, Z+5	; 0x05
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    15e6:	98 17       	cp	r25, r24
    15e8:	34 f4       	brge	.+12     	; 0x15f6 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    15ea:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15ee:	a3 53       	subi	r26, 0x33	; 51
    15f0:	b5 4c       	sbci	r27, 0xC5	; 197
    15f2:	2c 93       	st	X, r18
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    15f6:	a3 53       	subi	r26, 0x33	; 51
    15f8:	b5 4c       	sbci	r27, 0xC5	; 197
    15fa:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    15fc:	a0 81       	ld	r26, Z
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    1600:	96 17       	cp	r25, r22
    1602:	34 f4       	brge	.+12     	; 0x1610 <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    1604:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1608:	a3 53       	subi	r26, 0x33	; 51
    160a:	b5 4c       	sbci	r27, 0xC5	; 197
    160c:	2c 93       	st	X, r18
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    1610:	a3 53       	subi	r26, 0x33	; 51
    1612:	b5 4c       	sbci	r27, 0xC5	; 197
    1614:	1c 92       	st	X, r1
    1616:	9f 5f       	subi	r25, 0xFF	; 255
    1618:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    161a:	95 30       	cpi	r25, 0x05	; 5
    161c:	11 f7       	brne	.-60     	; 0x15e2 <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    161e:	08 95       	ret

00001620 <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1620:	ae ef       	ldi	r26, 0xFE	; 254
    1622:	be eb       	ldi	r27, 0xBE	; 190
    1624:	ec 91       	ld	r30, X
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	e3 53       	subi	r30, 0x33	; 51
    162a:	f5 4c       	sbci	r31, 0xC5	; 197
    162c:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	ec 91       	ld	r30, X
    1632:	12 97       	sbiw	r26, 0x02	; 2
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	e3 53       	subi	r30, 0x33	; 51
    1638:	f5 4c       	sbci	r31, 0xC5	; 197
    163a:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    163c:	11 96       	adiw	r26, 0x01	; 1
    163e:	ec 91       	ld	r30, X
    1640:	11 97       	sbiw	r26, 0x01	; 1
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	e3 53       	subi	r30, 0x33	; 51
    1646:	f5 4c       	sbci	r31, 0xC5	; 197
    1648:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    164a:	13 96       	adiw	r26, 0x03	; 3
    164c:	ec 91       	ld	r30, X
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	e3 53       	subi	r30, 0x33	; 51
    1652:	f5 4c       	sbci	r31, 0xC5	; 197
    1654:	60 83       	st	Z, r22
    1656:	08 95       	ret

00001658 <ClearHackerLeds>:
    }
}

void ClearHackerLeds() {
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	e2 e0       	ldi	r30, 0x02	; 2
    165e:	ff eb       	ldi	r31, 0xBF	; 191
    1660:	ef 01       	movw	r28, r30
    for (uint8_t i=0;i<6;i++) {
        iLED[HCKR[G][i]] = 0;
    1662:	a6 81       	ldd	r26, Z+6	; 0x06
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	a3 53       	subi	r26, 0x33	; 51
    1668:	b5 4c       	sbci	r27, 0xC5	; 197
    166a:	1c 92       	st	X, r1
    166c:	31 96       	adiw	r30, 0x01	; 1
        iLED[HCKR[R][i]] = 0;
    166e:	a8 81       	ld	r26, Y
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	a3 53       	subi	r26, 0x33	; 51
    1674:	b5 4c       	sbci	r27, 0xC5	; 197
    1676:	1c 92       	st	X, r1
        iLED[EYE[G][i]] = g;
    }
}

void ClearHackerLeds() {
    for (uint8_t i=0;i<6;i++) {
    1678:	8f eb       	ldi	r24, 0xBF	; 191
    167a:	e8 30       	cpi	r30, 0x08	; 8
    167c:	f8 07       	cpc	r31, r24
    167e:	81 f7       	brne	.-32     	; 0x1660 <ClearHackerLeds+0x8>
        iLED[HCKR[G][i]] = 0;
        iLED[HCKR[R][i]] = 0;
    }
}
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <GenerateBlinks>:


void GenerateBlinks(){
    1686:	a0 e0       	ldi	r26, 0x00	; 0
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e9 e4       	ldi	r30, 0x49	; 73
    168c:	fb e0       	ldi	r31, 0x0B	; 11
    168e:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__prologue_saves__+0x14>
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1692:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1696:	88 23       	and	r24, r24
    1698:	29 f0       	breq	.+10     	; 0x16a4 <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    169a:	80 e4       	ldi	r24, 0x40	; 64
    169c:	cf de       	rcall	.-610    	; 0x143c <CheckState>
    169e:	81 11       	cpse	r24, r1
    16a0:	24 c0       	rjmp	.+72     	; 0x16ea <GenerateBlinks+0x64>
    16a2:	50 c0       	rjmp	.+160    	; 0x1744 <GenerateBlinks+0xbe>
    16a4:	c2 e0       	ldi	r28, 0x02	; 2
    16a6:	df eb       	ldi	r29, 0xBF	; 191
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    16a8:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    16aa:	81 2f       	mov	r24, r17
    16ac:	c7 de       	rcall	.-626    	; 0x143c <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    16ae:	ee 81       	ldd	r30, Y+6	; 0x06
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    16b2:	88 23       	and	r24, r24
    16b4:	59 f0       	breq	.+22     	; 0x16cc <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    16b6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16ba:	e3 53       	subi	r30, 0x33	; 51
    16bc:	f5 4c       	sbci	r31, 0xC5	; 197
    16be:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    16c0:	e8 81       	ld	r30, Y
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	e3 53       	subi	r30, 0x33	; 51
    16c6:	f5 4c       	sbci	r31, 0xC5	; 197
    16c8:	10 82       	st	Z, r1
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    16cc:	e3 53       	subi	r30, 0x33	; 51
    16ce:	f5 4c       	sbci	r31, 0xC5	; 197
    16d0:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    16d2:	e8 81       	ld	r30, Y
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16da:	e3 53       	subi	r30, 0x33	; 51
    16dc:	f5 4c       	sbci	r31, 0xC5	; 197
    16de:	80 83       	st	Z, r24
    16e0:	1f 5f       	subi	r17, 0xFF	; 255
    16e2:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    16e4:	10 38       	cpi	r17, 0x80	; 128
    16e6:	09 f7       	brne	.-62     	; 0x16aa <GenerateBlinks+0x24>
    16e8:	d8 cf       	rjmp	.-80     	; 0x169a <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16ea:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <HeartCount>
    16ee:	98 2f       	mov	r25, r24
    16f0:	9d 7f       	andi	r25, 0xFD	; 253
    16f2:	e0 91 f1 be 	lds	r30, 0xBEF1	; 0x80bef1 <__bss_end+0x83d5>
            iLED[BADGER] = dimValue>>1 ;
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16f8:	91 30       	cpi	r25, 0x01	; 1
    16fa:	11 f0       	breq	.+4      	; 0x1700 <GenerateBlinks+0x7a>
    16fc:	85 30       	cpi	r24, 0x05	; 5
    16fe:	21 f4       	brne	.+8      	; 0x1708 <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    1700:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1704:	96 95       	lsr	r25
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	11 f0       	breq	.+4      	; 0x1710 <GenerateBlinks+0x8a>
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	31 f4       	brne	.+12     	; 0x171c <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    1710:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1714:	e3 53       	subi	r30, 0x33	; 51
    1716:	f5 4c       	sbci	r31, 0xC5	; 197
    1718:	90 83       	st	Z, r25
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    171c:	88 23       	and	r24, r24
    171e:	11 f0       	breq	.+4      	; 0x1724 <GenerateBlinks+0x9e>
    1720:	86 30       	cpi	r24, 0x06	; 6
    1722:	29 f4       	brne	.+10     	; 0x172e <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    1724:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1728:	96 95       	lsr	r25
    172a:	96 95       	lsr	r25
    172c:	f3 cf       	rjmp	.-26     	; 0x1714 <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    172e:	e3 53       	subi	r30, 0x33	; 51
    1730:	f5 4c       	sbci	r31, 0xC5	; 197
    1732:	10 82       	st	Z, r1
        if (HeartCount<32)
    1734:	80 32       	cpi	r24, 0x20	; 32
    1736:	20 f4       	brcc	.+8      	; 0x1740 <GenerateBlinks+0xba>
            HeartCount++;
    1738:	8f 5f       	subi	r24, 0xFF	; 255
    173a:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <HeartCount>
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    1740:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    1744:	90 91 62 38 	lds	r25, 0x3862	; 0x803862 <LedCount>
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	90 93 62 38 	sts	0x3862, r25	; 0x803862 <LedCount>
    
    switch (effect&0x1f) {
    174e:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <effect>
    1752:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <effect+0x1>
    1756:	ef 71       	andi	r30, 0x1F	; 31
    1758:	ff 27       	eor	r31, r31
    175a:	e9 30       	cpi	r30, 0x09	; 9
    175c:	f1 05       	cpc	r31, r1
    175e:	08 f0       	brcs	.+2      	; 0x1762 <GenerateBlinks+0xdc>
    1760:	f4 c0       	rjmp	.+488    	; 0x194a <GenerateBlinks+0x2c4>
    1762:	e2 5c       	subi	r30, 0xC2	; 194
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	36 df       	rcall	.-404    	; 0x15dc <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1770:	e0 91 fe be 	lds	r30, 0xBEFE	; 0x80befe <__bss_end+0x83e2>
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	e3 53       	subi	r30, 0x33	; 51
    1778:	f5 4c       	sbci	r31, 0xC5	; 197
    177a:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    177c:	e0 91 00 bf 	lds	r30, 0xBF00	; 0x80bf00 <__bss_end+0x83e4>
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	e3 53       	subi	r30, 0x33	; 51
    1784:	f5 4c       	sbci	r31, 0xC5	; 197
    1786:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1788:	e0 91 f2 be 	lds	r30, 0xBEF2	; 0x80bef2 <__bss_end+0x83d6>
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	e3 53       	subi	r30, 0x33	; 51
    1790:	f5 4c       	sbci	r31, 0xC5	; 197
    1792:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1794:	e0 91 ff be 	lds	r30, 0xBEFF	; 0x80beff <__bss_end+0x83e3>
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	e3 53       	subi	r30, 0x33	; 51
    179c:	f5 4c       	sbci	r31, 0xC5	; 197
    179e:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    17a0:	e0 91 01 bf 	lds	r30, 0xBF01	; 0x80bf01 <__bss_end+0x83e5>
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	e3 53       	subi	r30, 0x33	; 51
    17a8:	f5 4c       	sbci	r31, 0xC5	; 197
    17aa:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    17ac:	e0 91 f3 be 	lds	r30, 0xBEF3	; 0x80bef3 <__bss_end+0x83d7>
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	e3 53       	subi	r30, 0x33	; 51
    17b4:	f5 4c       	sbci	r31, 0xC5	; 197
    17b6:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    17b8:	e0 91 f0 be 	lds	r30, 0xBEF0	; 0x80bef0 <__bss_end+0x83d4>
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	e3 53       	subi	r30, 0x33	; 51
    17c0:	f5 4c       	sbci	r31, 0xC5	; 197
    17c2:	10 82       	st	Z, r1
            break;
    17c4:	c2 c0       	rjmp	.+388    	; 0x194a <GenerateBlinks+0x2c4>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    17c6:	89 2f       	mov	r24, r25
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	90 fd       	sbrc	r25, 0
    17cc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <GenerateBlinks+0x168>
    17d4:	69 2f       	mov	r22, r25
    17d6:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17d8:	93 ff       	sbrs	r25, 3
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GenerateBlinks+0x15a>
    17dc:	60 95       	com	r22
    17de:	70 95       	com	r23
    17e0:	95 e0       	ldi	r25, 0x05	; 5
    17e2:	66 0f       	add	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	9a 95       	dec	r25
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <GenerateBlinks+0x15c>
    17ea:	61 5e       	subi	r22, 0xE1	; 225
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	18 df       	rcall	.-464    	; 0x1620 <SetBothEyes>
            break;
    17f0:	ac c0       	rjmp	.+344    	; 0x194a <GenerateBlinks+0x2c4>

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    17f2:	89 2f       	mov	r24, r25
    17f4:	83 70       	andi	r24, 0x03	; 3
    17f6:	09 f0       	breq	.+2      	; 0x17fa <GenerateBlinks+0x174>
    17f8:	a8 c0       	rjmp	.+336    	; 0x194a <GenerateBlinks+0x2c4>
                if (LedCount & 4)
    17fa:	92 ff       	sbrs	r25, 2
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <GenerateBlinks+0x17e>
                    WingBar(5,5);
    17fe:	65 e0       	ldi	r22, 0x05	; 5
    1800:	85 e0       	ldi	r24, 0x05	; 5
                else
                    WingBar(0,0);
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <GenerateBlinks+0x182>
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	e9 de       	rcall	.-558    	; 0x15dc <WingBar>
    180a:	9f c0       	rjmp	.+318    	; 0x194a <GenerateBlinks+0x2c4>
            }
            break;

        //'circle the wing leds'
        case 6:
            if (LedCount > 4) LedCount = 0;
    180c:	95 30       	cpi	r25, 0x05	; 5
    180e:	10 f0       	brcs	.+4      	; 0x1814 <GenerateBlinks+0x18e>
    1810:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <LedCount>
            iLED[WING[L][LedCount]] = 0;
    1814:	40 91 62 38 	lds	r20, 0x3862	; 0x803862 <LedCount>
    1818:	24 2f       	mov	r18, r20
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	f9 01       	movw	r30, r18
    181e:	ec 50       	subi	r30, 0x0C	; 12
    1820:	f1 44       	sbci	r31, 0x41	; 65
    1822:	e5 81       	ldd	r30, Z+5	; 0x05
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	e3 53       	subi	r30, 0x33	; 51
    1828:	f5 4c       	sbci	r31, 0xC5	; 197
    182a:	10 82       	st	Z, r1
            iLED[WING[L][LedCount == 4 ? 0 : LedCount+1]] = dimValue;
    182c:	44 30       	cpi	r20, 0x04	; 4
    182e:	19 f0       	breq	.+6      	; 0x1836 <GenerateBlinks+0x1b0>
    1830:	c9 01       	movw	r24, r18
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GenerateBlinks+0x1b4>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	fc 01       	movw	r30, r24
    183c:	ec 50       	subi	r30, 0x0C	; 12
    183e:	f1 44       	sbci	r31, 0x41	; 65
    1840:	e5 81       	ldd	r30, Z+5	; 0x05
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1848:	e3 53       	subi	r30, 0x33	; 51
    184a:	f5 4c       	sbci	r31, 0xC5	; 197
    184c:	80 83       	st	Z, r24
            iLED[WING[R][4-LedCount]] = 0;
    184e:	e8 ef       	ldi	r30, 0xF8	; 248
    1850:	fe eb       	ldi	r31, 0xBE	; 190
    1852:	e2 1b       	sub	r30, r18
    1854:	f3 0b       	sbc	r31, r19
    1856:	e0 81       	ld	r30, Z
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	e3 53       	subi	r30, 0x33	; 51
    185c:	f5 4c       	sbci	r31, 0xC5	; 197
    185e:	10 82       	st	Z, r1
            iLED[WING[R][LedCount == 4 ? 4 : 3-LedCount]] = dimValue;
    1860:	44 30       	cpi	r20, 0x04	; 4
    1862:	29 f0       	breq	.+10     	; 0x186e <GenerateBlinks+0x1e8>
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	82 1b       	sub	r24, r18
    186a:	93 0b       	sbc	r25, r19
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GenerateBlinks+0x1ec>
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	fc 01       	movw	r30, r24
    1874:	ec 50       	subi	r30, 0x0C	; 12
    1876:	f1 44       	sbci	r31, 0x41	; 65
    1878:	e0 81       	ld	r30, Z
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1880:	e3 53       	subi	r30, 0x33	; 51
    1882:	f5 4c       	sbci	r31, 0xC5	; 197
    1884:	80 83       	st	Z, r24
            break;
    1886:	61 c0       	rjmp	.+194    	; 0x194a <GenerateBlinks+0x2c4>
    1888:	c4 ef       	ldi	r28, 0xF4	; 244
    188a:	de eb       	ldi	r29, 0xBE	; 190
    188c:	89 ef       	ldi	r24, 0xF9	; 249
    188e:	e8 2e       	mov	r14, r24
    1890:	8e eb       	ldi	r24, 0xBE	; 190
    1892:	f8 2e       	mov	r15, r24

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    1894:	6e 01       	movw	r12, r28
    1896:	0d 81       	ldd	r16, Y+5	; 0x05
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	a9 dc       	rcall	.-1710   	; 0x11ee <lfsr>
    189c:	87 ff       	sbrs	r24, 7
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <GenerateBlinks+0x220>
    18a0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <GenerateBlinks+0x222>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	f8 01       	movw	r30, r16
    18aa:	e3 53       	subi	r30, 0x33	; 51
    18ac:	f5 4c       	sbci	r31, 0xC5	; 197
    18ae:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    18b0:	21 96       	adiw	r28, 0x01	; 1
    18b2:	f6 01       	movw	r30, r12
    18b4:	00 81       	ld	r16, Z
    18b6:	10 e0       	ldi	r17, 0x00	; 0
    18b8:	9a dc       	rcall	.-1740   	; 0x11ee <lfsr>
    18ba:	87 ff       	sbrs	r24, 7
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <GenerateBlinks+0x23e>
    18be:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <GenerateBlinks+0x240>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	f8 01       	movw	r30, r16
    18c8:	e3 53       	subi	r30, 0x33	; 51
    18ca:	f5 4c       	sbci	r31, 0xC5	; 197
    18cc:	80 83       	st	Z, r24
            iLED[WING[R][LedCount == 4 ? 4 : 3-LedCount]] = dimValue;
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    18ce:	ec 16       	cp	r14, r28
    18d0:	fd 06       	cpc	r15, r29
    18d2:	01 f7       	brne	.-64     	; 0x1894 <GenerateBlinks+0x20e>
    18d4:	3a c0       	rjmp	.+116    	; 0x194a <GenerateBlinks+0x2c4>
            }
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
    18d6:	90 fd       	sbrc	r25, 0
    18d8:	38 c0       	rjmp	.+112    	; 0x194a <GenerateBlinks+0x2c4>
    18da:	e4 ef       	ldi	r30, 0xF4	; 244
    18dc:	fe eb       	ldi	r31, 0xBE	; 190
    18de:	88 ef       	ldi	r24, 0xF8	; 248
    18e0:	9e eb       	ldi	r25, 0xBE	; 190
    18e2:	9f 01       	movw	r18, r30
                for (uint8_t x=0; x<4; ++x){
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
    18e4:	a5 81       	ldd	r26, Z+5	; 0x05
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	c6 81       	ldd	r28, Z+6	; 0x06
    18ea:	d0 e0       	ldi	r29, 0x00	; 0
    18ec:	c3 53       	subi	r28, 0x33	; 51
    18ee:	d5 4c       	sbci	r29, 0xC5	; 197
    18f0:	48 81       	ld	r20, Y
    18f2:	a3 53       	subi	r26, 0x33	; 51
    18f4:	b5 4c       	sbci	r27, 0xC5	; 197
    18f6:	4c 93       	st	X, r20
    18f8:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
    18fa:	e9 01       	movw	r28, r18
    18fc:	a8 81       	ld	r26, Y
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	c0 81       	ld	r28, Z
    1902:	d0 e0       	ldi	r29, 0x00	; 0
    1904:	c3 53       	subi	r28, 0x33	; 51
    1906:	d5 4c       	sbci	r29, 0xC5	; 197
    1908:	28 81       	ld	r18, Y
    190a:	a3 53       	subi	r26, 0x33	; 51
    190c:	b5 4c       	sbci	r27, 0xC5	; 197
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
                for (uint8_t x=0; x<4; ++x){
    190e:	2c 93       	st	X, r18
    1910:	8e 17       	cp	r24, r30
    1912:	9f 07       	cpc	r25, r31
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
                }
                iLED[WING[L][4]] = (lfsr() > 224)?dimValue:0;
    1914:	31 f7       	brne	.-52     	; 0x18e2 <GenerateBlinks+0x25c>
    1916:	c0 91 fd be 	lds	r28, 0xBEFD	; 0x80befd <__bss_end+0x83e1>
    191a:	d0 e0       	ldi	r29, 0x00	; 0
    191c:	68 dc       	rcall	.-1840   	; 0x11ee <lfsr>
    191e:	81 3e       	cpi	r24, 0xE1	; 225
    1920:	18 f0       	brcs	.+6      	; 0x1928 <GenerateBlinks+0x2a2>
    1922:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1926:	01 c0       	rjmp	.+2      	; 0x192a <GenerateBlinks+0x2a4>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	c3 53       	subi	r28, 0x33	; 51
    192c:	d5 4c       	sbci	r29, 0xC5	; 197
                iLED[WING[R][4]] = (lfsr() > 224)?dimValue:0;
    192e:	88 83       	st	Y, r24
    1930:	c0 91 f8 be 	lds	r28, 0xBEF8	; 0x80bef8 <__bss_end+0x83dc>
    1934:	d0 e0       	ldi	r29, 0x00	; 0
    1936:	5b dc       	rcall	.-1866   	; 0x11ee <lfsr>
    1938:	81 3e       	cpi	r24, 0xE1	; 225
    193a:	18 f0       	brcs	.+6      	; 0x1942 <GenerateBlinks+0x2bc>
    193c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <GenerateBlinks+0x2be>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	c3 53       	subi	r28, 0x33	; 51
    1946:	d5 4c       	sbci	r29, 0xC5	; 197
    1948:	88 83       	st	Y, r24
        case 31:
        default:
            break;
            
    }
}
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	e8 e0       	ldi	r30, 0x08	; 8
    1950:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__epilogue_restores__+0x14>

00001954 <GenerateAudio>:


uint8_t GenerateAudio(){
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28

    //Headphones detected?
    if (auIn < HPLVL) {
    195a:	80 91 cc 3a 	lds	r24, 0x3ACC	; 0x803acc <auIn>
    195e:	89 31       	cpi	r24, 0x19	; 25
    1960:	08 f0       	brcs	.+2      	; 0x1964 <GenerateAudio+0x10>
    1962:	95 c1       	rjmp	.+810    	; 0x1c8e <GenerateAudio+0x33a>

        detHdPh = 1;
    1964:	c1 e0       	ldi	r28, 0x01	; 1
    1966:	c0 93 c9 3a 	sts	0x3AC9, r28	; 0x803ac9 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    196a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    196e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1972:	88 27       	eor	r24, r24
    1974:	89 2b       	or	r24, r25
    1976:	09 f0       	breq	.+2      	; 0x197a <GenerateAudio+0x26>
    1978:	37 c1       	rjmp	.+622    	; 0x1be8 <GenerateAudio+0x294>
        
            //Silence, I kill u
            if ((effect&0xE0)==0){
    197a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    197e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1982:	80 7e       	andi	r24, 0xE0	; 224
    1984:	99 27       	eor	r25, r25
    1986:	89 2b       	or	r24, r25
    1988:	39 f4       	brne	.+14     	; 0x1998 <GenerateAudio+0x44>
                auRepAddr = &zero;
    198a:	8f e3       	ldi	r24, 0x3F	; 63
    198c:	98 e3       	ldi	r25, 0x38	; 56
    198e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1992:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1996:	7d c1       	rjmp	.+762    	; 0x1c92 <GenerateAudio+0x33e>
            }

            //Bad answer (buzzer, also used in other games)
            else if ((effect&0xE0)==32){
    1998:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    199c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19a0:	80 7e       	andi	r24, 0xE0	; 224
    19a2:	99 27       	eor	r25, r25
    19a4:	80 97       	sbiw	r24, 0x20	; 32
    19a6:	09 f0       	breq	.+2      	; 0x19aa <GenerateAudio+0x56>
    19a8:	4e c0       	rjmp	.+156    	; 0x1a46 <GenerateAudio+0xf2>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	52 e2       	ldi	r21, 0x22	; 34
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	70 e2       	ldi	r23, 0x20	; 32
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	3b dc       	rcall	.-1930   	; 0x122c <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	65 e0       	ldi	r22, 0x05	; 5
    19bc:	80 e8       	ldi	r24, 0x80	; 128
    19be:	64 dc       	rcall	.-1848   	; 0x1288 <floatAround>
    19c0:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <auBuffer.4031+0x2>

                if (buttonMark){
    19c4:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <GenerateAudio+0x7a>
    19cc:	62 c1       	rjmp	.+708    	; 0x1c92 <GenerateAudio+0x33e>
                    if (start == 0) {
    19ce:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <start.4033>
    19d2:	81 11       	cpse	r24, r1
    19d4:	0b c0       	rjmp	.+22     	; 0x19ec <GenerateAudio+0x98>
                        duration = 4;
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <duration.4032>
                        auRepAddr = &auBuffer[0];
    19dc:	8a e1       	ldi	r24, 0x1A	; 26
    19de:	98 e3       	ldi	r25, 0x38	; 56
    19e0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19e4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    19e8:	c0 93 60 38 	sts	0x3860, r28	; 0x803860 <start.4033>
                    }
                    
                    if ((auVolume)&&(duration == 0)) auVolume >>= 1; 
    19ec:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    19f0:	88 23       	and	r24, r24
    19f2:	49 f0       	breq	.+18     	; 0x1a06 <GenerateAudio+0xb2>
    19f4:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <duration.4032>
    19f8:	81 11       	cpse	r24, r1
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <GenerateAudio+0xb2>
    19fc:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1a00:	86 95       	lsr	r24
    1a02:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>

                    if (auVolume == 0){
    1a06:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <GenerateAudio+0xe0>
                        start = 0;
    1a0e:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <start.4033>
                        auRepAddr = &zero;
    1a12:	8f e3       	ldi	r24, 0x3F	; 63
    1a14:	98 e3       	ldi	r25, 0x38	; 56
    1a16:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a1a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        effect &= 0x1f;
    1a1e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a22:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a26:	8f 71       	andi	r24, 0x1F	; 31
    1a28:	99 27       	eor	r25, r25
    1a2a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1a2e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    1a32:	2f c1       	rjmp	.+606    	; 0x1c92 <GenerateAudio+0x33e>
                    } else if (duration) --duration;
    1a34:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <duration.4032>
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <GenerateAudio+0xea>
    1a3c:	2a c1       	rjmp	.+596    	; 0x1c92 <GenerateAudio+0x33e>
    1a3e:	81 50       	subi	r24, 0x01	; 1
    1a40:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <duration.4032>
    1a44:	26 c1       	rjmp	.+588    	; 0x1c92 <GenerateAudio+0x33e>

                }
            }

            //Good (bell)
            else if ((effect&0xE0)==64){
    1a46:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a4a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a4e:	80 7e       	andi	r24, 0xE0	; 224
    1a50:	99 27       	eor	r25, r25
    1a52:	80 34       	cpi	r24, 0x40	; 64
    1a54:	91 05       	cpc	r25, r1
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <GenerateAudio+0x106>
    1a58:	53 c0       	rjmp	.+166    	; 0x1b00 <GenerateAudio+0x1ac>
                static uint8_t start, auBuffer[3] = {255, 1, 0};
                uint8_t tick = lsr8(fastTicker - oldTicker,4);
    1a5a:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
    1a5e:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <oldTicker>
    sei();
}

uint8_t lsr8(uint8_t input, uint8_t bits)
{
    return (input>>bits);
    1a62:	89 1b       	sub	r24, r25
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	24 e0       	ldi	r18, 0x04	; 4
    1a68:	95 95       	asr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	2a 95       	dec	r18
    1a6e:	e1 f7       	brne	.-8      	; 0x1a68 <GenerateAudio+0x114>

            //Good (bell)
            else if ((effect&0xE0)==64){
                static uint8_t start, auBuffer[3] = {255, 1, 0};
                uint8_t tick = lsr8(fastTicker - oldTicker,4);
                if (tick) {
    1a70:	88 23       	and	r24, r24
    1a72:	81 f0       	breq	.+32     	; 0x1a94 <GenerateAudio+0x140>
                    if (auVolume > tick) auVolume -= tick; else auVolume = 0;
    1a74:	30 91 c0 3a 	lds	r19, 0x3AC0	; 0x803ac0 <auVolume>
    1a78:	83 17       	cp	r24, r19
    1a7a:	30 f4       	brcc	.+12     	; 0x1a88 <GenerateAudio+0x134>
    1a7c:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <auVolume>
    1a80:	98 1b       	sub	r25, r24
    1a82:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <auVolume>
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <GenerateAudio+0x138>
    1a88:	10 92 c0 3a 	sts	0x3AC0, r1	; 0x803ac0 <auVolume>
                    oldTicker = fastTicker;
    1a8c:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
    1a90:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <oldTicker>
                }

                if (buttonMark){
    1a94:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1a98:	88 23       	and	r24, r24
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <GenerateAudio+0x14a>
    1a9c:	fa c0       	rjmp	.+500    	; 0x1c92 <GenerateAudio+0x33e>
                    if (start == 0) {
    1a9e:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <start.4034>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	12 c0       	rjmp	.+36     	; 0x1aca <GenerateAudio+0x176>
                        TCB1_CCMP = 0x0a00;
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	9a e0       	ldi	r25, 0x0A	; 10
    1aaa:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1aae:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1ab2:	87 e1       	ldi	r24, 0x17	; 23
    1ab4:	98 e3       	ldi	r25, 0x38	; 56
    1ab6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1aba:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <start.4034>
                        auVolume = 0xff;
    1ac4:	8f ef       	ldi	r24, 0xFF	; 255
    1ac6:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
                    }
                     
                    TCB1_CCMP -= (0x080);                    
    1aca:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ace:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1ad2:	80 58       	subi	r24, 0x80	; 128
    1ad4:	91 09       	sbc	r25, r1
    1ad6:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ada:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    //if (auVolume > 32) auVolume -=32; else 
                    if (auVolume == 0)
    1ade:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1ae2:	81 11       	cpse	r24, r1
    1ae4:	d6 c0       	rjmp	.+428    	; 0x1c92 <GenerateAudio+0x33e>
                    {
                        start = 0;
    1ae6:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <start.4034>
                        auRepAddr = &zero;
    1aea:	8f e3       	ldi	r24, 0x3F	; 63
    1aec:	98 e3       	ldi	r25, 0x38	; 56
    1aee:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1af2:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        effect = 0;
    1af6:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1afa:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    1afe:	c9 c0       	rjmp	.+402    	; 0x1c92 <GenerateAudio+0x33e>
                    }
                }
            }

            //Rain storm with whistling wind
            else if ((effect&0xE0)==96){
    1b00:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1b04:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b08:	80 7e       	andi	r24, 0xE0	; 224
    1b0a:	99 27       	eor	r25, r25
    1b0c:	80 36       	cpi	r24, 0x60	; 96
    1b0e:	91 05       	cpc	r25, r1
    1b10:	b9 f5       	brne	.+110    	; 0x1b80 <GenerateAudio+0x22c>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1b12:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <auBuffer.4037+0x6>
                auRepAddr = &auBuffer[0];
    1b16:	87 e5       	ldi	r24, 0x57	; 87
    1b18:	98 e3       	ldi	r25, 0x38	; 56
    1b1a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b1e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1b22:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b24:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1b26:	c3 30       	cpi	r28, 0x03	; 3
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <GenerateAudio+0x1e4>
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	65 e0       	ldi	r22, 0x05	; 5
    1b30:	80 e8       	ldi	r24, 0x80	; 128
    1b32:	aa db       	rcall	.-2220   	; 0x1288 <floatAround>
    1b34:	f8 01       	movw	r30, r16
    1b36:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b38:	cf 5f       	subi	r28, 0xFF	; 255
    1b3a:	0f 5f       	subi	r16, 0xFF	; 255
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	c6 30       	cpi	r28, 0x06	; 6
    1b40:	91 f7       	brne	.-28     	; 0x1b26 <GenerateAudio+0x1d2>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b42:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1b46:	88 23       	and	r24, r24
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <GenerateAudio+0x1f8>
    1b4a:	a3 c0       	rjmp	.+326    	; 0x1c92 <GenerateAudio+0x33e>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	54 e0       	ldi	r21, 0x04	; 4
    1b50:	60 e8       	ldi	r22, 0x80	; 128
    1b52:	72 e0       	ldi	r23, 0x02	; 2
    1b54:	85 e0       	ldi	r24, 0x05	; 5
    1b56:	6a db       	rcall	.-2348   	; 0x122c <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b58:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1b5c:	20 ea       	ldi	r18, 0xA0	; 160
    1b5e:	40 e1       	ldi	r20, 0x10	; 16
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	92 db       	rcall	.-2268   	; 0x1288 <floatAround>
    1b64:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b68:	20 e9       	ldi	r18, 0x90	; 144
    1b6a:	40 e7       	ldi	r20, 0x70	; 112
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <auBuffer.4037>
    1b72:	8a db       	rcall	.-2284   	; 0x1288 <floatAround>
    1b74:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <auBuffer.4037>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b78:	80 95       	com	r24
    1b7a:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <auBuffer.4037+0x3>
    1b7e:	89 c0       	rjmp	.+274    	; 0x1c92 <GenerateAudio+0x33e>
                }
            }

            //Footsteps
            else if ((effect&0xE0)==128){
    1b80:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1b84:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b88:	80 7e       	andi	r24, 0xE0	; 224
    1b8a:	99 27       	eor	r25, r25
    1b8c:	80 38       	cpi	r24, 0x80	; 128
    1b8e:	91 05       	cpc	r25, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <GenerateAudio+0x240>
    1b92:	7f c0       	rjmp	.+254    	; 0x1c92 <GenerateAudio+0x33e>

            }

            //Bleeps
            else if ((effect&0xE0)==160){
    1b94:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1b98:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b9c:	80 7e       	andi	r24, 0xE0	; 224
    1b9e:	99 27       	eor	r25, r25
    1ba0:	80 3a       	cpi	r24, 0xA0	; 160
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	e1 f4       	brne	.+56     	; 0x1bde <GenerateAudio+0x28a>
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                auRepAddr = &auBuffer[0];
    1ba6:	81 e1       	ldi	r24, 0x11	; 17
    1ba8:	98 e3       	ldi	r25, 0x38	; 56
    1baa:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1bae:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                if (buttonMark){
    1bb2:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <GenerateAudio+0x268>
                    floatSpeed(7, 0x0500, 0x2000);
    1bba:	6b c0       	rjmp	.+214    	; 0x1c92 <GenerateAudio+0x33e>
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e2       	ldi	r21, 0x20	; 32
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	75 e0       	ldi	r23, 0x05	; 5
    1bc4:	87 e0       	ldi	r24, 0x07	; 7
    1bc6:	32 db       	rcall	.-2460   	; 0x122c <floatSpeed>
                    if (auVolume) --auVolume;
    1bc8:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1bcc:	88 23       	and	r24, r24
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <GenerateAudio+0x27e>
    1bd0:	60 c0       	rjmp	.+192    	; 0x1c92 <GenerateAudio+0x33e>
    1bd2:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <auVolume>
    1bd6:	81 50       	subi	r24, 0x01	; 1
    1bd8:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <auVolume>
    1bdc:	5a c0       	rjmp	.+180    	; 0x1c92 <GenerateAudio+0x33e>
                }
            }

            //
            else if ((effect&0xE0)==192){
    1bde:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1be2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1be6:	55 c0       	rjmp	.+170    	; 0x1c92 <GenerateAudio+0x33e>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1be8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1bec:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1bf0:	88 27       	eor	r24, r24
    1bf2:	81 15       	cp	r24, r1
    1bf4:	91 40       	sbci	r25, 0x01	; 1
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <GenerateAudio+0x2a6>
    1bf8:	4c c0       	rjmp	.+152    	; 0x1c92 <GenerateAudio+0x33e>
            if ((effect&0xE0) <= 0x90) {
    1bfa:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1bfe:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c02:	80 7e       	andi	r24, 0xE0	; 224
    1c04:	99 27       	eor	r25, r25
    1c06:	81 39       	cpi	r24, 0x91	; 145
    1c08:	91 05       	cpc	r25, r1
    1c0a:	08 f0       	brcs	.+2      	; 0x1c0e <GenerateAudio+0x2ba>
    1c0c:	42 c0       	rjmp	.+132    	; 0x1c92 <GenerateAudio+0x33e>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1c0e:	60 91 40 38 	lds	r22, 0x3840	; 0x803840 <effect>
    1c12:	70 91 41 38 	lds	r23, 0x3841	; 0x803841 <effect+0x1>
    1c16:	60 7e       	andi	r22, 0xE0	; 224
    1c18:	77 27       	eor	r23, r23
    1c1a:	6f 5f       	subi	r22, 0xFF	; 255
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	86 e0       	ldi	r24, 0x06	; 6
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <GenerateAudio+0x2cc>
    1c28:	ab 01       	movw	r20, r22
    1c2a:	5d 5f       	subi	r21, 0xFD	; 253
    1c2c:	7e 5f       	subi	r23, 0xFE	; 254
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	fd da       	rcall	.-2566   	; 0x122c <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1c32:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1c36:	88 23       	and	r24, r24
    1c38:	61 f1       	breq	.+88     	; 0x1c92 <GenerateAudio+0x33e>
                    if (start == 0) {
    1c3a:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <start.4045>
    1c3e:	81 11       	cpse	r24, r1
    1c40:	0b c0       	rjmp	.+22     	; 0x1c58 <GenerateAudio+0x304>
                        duration = 3;
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <duration.4044>
                        auRepAddr = &auBuffer[0];
    1c48:	8e e0       	ldi	r24, 0x0E	; 14
    1c4a:	98 e3       	ldi	r25, 0x38	; 56
    1c4c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c50:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1c54:	c0 93 56 38 	sts	0x3856, r28	; 0x803856 <start.4045>
                    }   if (duration == 0) {
    1c58:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <duration.4044>
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	13 c0       	rjmp	.+38     	; 0x1c86 <GenerateAudio+0x332>
                        effect &= 0x1f;
    1c60:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1c64:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c68:	8f 71       	andi	r24, 0x1F	; 31
    1c6a:	99 27       	eor	r25, r25
    1c6c:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1c70:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                        auRepAddr = &zero;
    1c74:	8f e3       	ldi	r24, 0x3F	; 63
    1c76:	98 e3       	ldi	r25, 0x38	; 56
    1c78:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c7c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 0;
    1c80:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <start.4045>
    1c84:	06 c0       	rjmp	.+12     	; 0x1c92 <GenerateAudio+0x33e>
                    } else --duration;
    1c86:	81 50       	subi	r24, 0x01	; 1
    1c88:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <duration.4044>
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <GenerateAudio+0x33e>
                }
            }
        }
    } else {
        detHdPh = 0;
    1c8e:	10 92 c9 3a 	sts	0x3AC9, r1	; 0x803ac9 <detHdPh>
    }
    return buttonMark;
    1c92:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
}
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	08 95       	ret

00001c9e <getClock>:

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1c9e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1ca2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1ca6:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <minuteMark>
    1caa:	89 2f       	mov	r24, r25
    1cac:	99 27       	eor	r25, r25
    1cae:	86 95       	lsr	r24
}
    1cb0:	3c e3       	ldi	r19, 0x3C	; 60
    1cb2:	23 9f       	mul	r18, r19
    1cb4:	80 0d       	add	r24, r0
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	11 24       	eor	r1, r1
    1cba:	08 95       	ret

00001cbc <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1cc8:	ea df       	rcall	.-44     	; 0x1c9e <getClock>
    1cca:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1ccc:	80 17       	cp	r24, r16
    1cce:	91 07       	cpc	r25, r17
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <idleTimeout+0x18>
        curClock += 256 * 60;
    1cd2:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1cd4:	c0 0f       	add	r28, r16
    1cd6:	d1 1f       	adc	r29, r17
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	c2 17       	cp	r28, r18
    1cdc:	d3 07       	cpc	r29, r19
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <idleTimeout+0x26>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <SelfTest>:

uint8_t SelfTest(){
    1cec:	a4 e0       	ldi	r26, 0x04	; 4
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ec e7       	ldi	r30, 0x7C	; 124
    1cf2:	fe e0       	ldi	r31, 0x0E	; 14
    1cf4:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__prologue_saves__+0x20>
    uint8_t tstVal[4] = {0x01, 0};
    1cf8:	19 82       	std	Y+1, r1	; 0x01
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
    1cfc:	1b 82       	std	Y+3, r1	; 0x03
    1cfe:	1c 82       	std	Y+4, r1	; 0x04
    1d00:	a2 e0       	ldi	r26, 0x02	; 2
    1d02:	bf eb       	ldi	r27, 0xBF	; 191
    1d04:	88 e0       	ldi	r24, 0x08	; 8
    1d06:	9f eb       	ldi	r25, 0xBF	; 191

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	e3 53       	subi	r30, 0x33	; 51
    1d10:	f5 4c       	sbci	r31, 0xC5	; 197
    1d12:	20 83       	st	Z, r18

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1d14:	8a 17       	cp	r24, r26
    1d16:	9b 07       	cpc	r25, r27
    1d18:	c1 f7       	brne	.-16     	; 0x1d0a <SelfTest+0x1e>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1d1a:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    1d1e:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    1d22:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1d24:	99 27       	eor	r25, r25
    1d26:	20 91 c7 3a 	lds	r18, 0x3AC7	; 0x803ac7 <adcPhot>
    1d2a:	30 91 c8 3a 	lds	r19, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    1d2e:	33 27       	eor	r19, r19
    1d30:	28 17       	cp	r18, r24
    1d32:	39 07       	cpc	r19, r25
    1d34:	c1 f3       	breq	.-16     	; 0x1d26 <SelfTest+0x3a>
    iLED[HCKR[R][1]] = 0x00;
    1d36:	e0 91 03 bf 	lds	r30, 0xBF03	; 0x80bf03 <__bss_end+0x83e7>
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e3 53       	subi	r30, 0x33	; 51
    1d3e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d40:	10 82       	st	Z, r1

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d42:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <adcBtns>
    1d46:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <adcBtns+0x1>
    1d4a:	80 38       	cpi	r24, 0x80	; 128
    1d4c:	9c 40       	sbci	r25, 0x0C	; 12
    1d4e:	c8 f3       	brcs	.-14     	; 0x1d42 <SelfTest+0x56>
    iLED[HCKR[R][4]] = 0x00;
    1d50:	e0 91 06 bf 	lds	r30, 0xBF06	; 0x80bf06 <__bss_end+0x83ea>
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	e3 53       	subi	r30, 0x33	; 51
    1d58:	f5 4c       	sbci	r31, 0xC5	; 197
    1d5a:	10 82       	st	Z, r1
    
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    1d5c:	9e 01       	movw	r18, r28
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	64 e0       	ldi	r22, 0x04	; 4
    1d66:	8c ec       	ldi	r24, 0xCC	; 204
    1d68:	9c e3       	ldi	r25, 0x3C	; 60
    1d6a:	b1 d9       	rcall	.-3230   	; 0x10ce <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	8f 33       	cpi	r24, 0x3F	; 63
    1d70:	49 f4       	brne	.+18     	; 0x1d84 <SelfTest+0x98>
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	81 11       	cpse	r24, r1
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <SelfTest+0x98>
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	80 3c       	cpi	r24, 0xC0	; 192
    1d7c:	19 f4       	brne	.+6      	; 0x1d84 <SelfTest+0x98>
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	84 31       	cpi	r24, 0x14	; 20
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <SelfTest+0x9a>
    1d84:	ff cf       	rjmp	.-2      	; 0x1d84 <SelfTest+0x98>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e3 53       	subi	r30, 0x33	; 51
    1d8e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d90:	10 82       	st	Z, r1
    1d92:	01 96       	adiw	r24, 0x01	; 1
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1d94:	88 32       	cpi	r24, 0x28	; 40
    1d96:	91 05       	cpc	r25, r1
    1d98:	c1 f7       	brne	.-16     	; 0x1d8a <SelfTest+0x9e>
        iLED[x]=0;
    }

    //for(uint8_t x=0; x<(adcPhot&0x3f); ++x) lfsr();
    lfsrSeed = (adcPhot + adcTemp)<<1 | 0x0001; 
    1d9a:	20 91 c7 3a 	lds	r18, 0x3AC7	; 0x803ac7 <adcPhot>
    1d9e:	30 91 c8 3a 	lds	r19, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    1da2:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <adcTemp>
    1da6:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <adcTemp+0x1>
    1daa:	82 0f       	add	r24, r18
    1dac:	93 1f       	adc	r25, r19
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	80 93 64 38 	sts	0x3864, r24	; 0x803864 <lfsrSeed>
    1db8:	90 93 65 38 	sts	0x3865, r25	; 0x803865 <lfsrSeed+0x1>

    return 0;
}
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	24 96       	adiw	r28, 0x04	; 4
    1dc0:	e2 e0       	ldi	r30, 0x02	; 2
    1dc2:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__epilogue_restores__+0x20>

00001dc6 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	e4 ef       	ldi	r30, 0xF4	; 244
    1dcc:	fe eb       	ldi	r31, 0xBE	; 190
    1dce:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1dd0:	a5 81       	ldd	r26, Z+5	; 0x05
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	a3 53       	subi	r26, 0x33	; 51
    1dd6:	b5 4c       	sbci	r27, 0xC5	; 197
    1dd8:	1c 92       	st	X, r1
    1dda:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1ddc:	a8 81       	ld	r26, Y
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	a3 53       	subi	r26, 0x33	; 51
    1de2:	b5 4c       	sbci	r27, 0xC5	; 197
    1de4:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1de6:	9e eb       	ldi	r25, 0xBE	; 190
    1de8:	e9 3f       	cpi	r30, 0xF9	; 249
    1dea:	f9 07       	cpc	r31, r25
    1dec:	81 f7       	brne	.-32     	; 0x1dce <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	d9 f4       	brne	.+54     	; 0x1e28 <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1df2:	e0 91 f9 be 	lds	r30, 0xBEF9	; 0x80bef9 <__bss_end+0x83dd>
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dfc:	e3 53       	subi	r30, 0x33	; 51
    1dfe:	f5 4c       	sbci	r31, 0xC5	; 197
    1e00:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1e02:	e0 91 fa be 	lds	r30, 0xBEFA	; 0x80befa <__bss_end+0x83de>
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e0c:	e3 53       	subi	r30, 0x33	; 51
    1e0e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e10:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1e12:	e0 91 fb be 	lds	r30, 0xBEFB	; 0x80befb <__bss_end+0x83df>
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e1c:	e3 53       	subi	r30, 0x33	; 51
    1e1e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e20:	80 83       	st	Z, r24
        effect = 0x013f;
    1e22:	8f e3       	ldi	r24, 0x3F	; 63
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	46 c0       	rjmp	.+140    	; 0x1eb4 <simonLed+0xee>
    } else if (val == 1) {  //
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	99 f4       	brne	.+38     	; 0x1e52 <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1e2c:	e0 91 fc be 	lds	r30, 0xBEFC	; 0x80befc <__bss_end+0x83e0>
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e36:	e3 53       	subi	r30, 0x33	; 51
    1e38:	f5 4c       	sbci	r31, 0xC5	; 197
    1e3a:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e3c:	e0 91 fd be 	lds	r30, 0xBEFD	; 0x80befd <__bss_end+0x83e1>
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e46:	e3 53       	subi	r30, 0x33	; 51
    1e48:	f5 4c       	sbci	r31, 0xC5	; 197
    1e4a:	80 83       	st	Z, r24
        effect = 0x015f;
    1e4c:	8f e5       	ldi	r24, 0x5F	; 95
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	31 c0       	rjmp	.+98     	; 0x1eb4 <simonLed+0xee>
    } else if (val == 4) {  // III
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	d9 f4       	brne	.+54     	; 0x1e8c <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1e56:	e0 91 f4 be 	lds	r30, 0xBEF4	; 0x80bef4 <__bss_end+0x83d8>
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e60:	e3 53       	subi	r30, 0x33	; 51
    1e62:	f5 4c       	sbci	r31, 0xC5	; 197
    1e64:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1e66:	e0 91 f5 be 	lds	r30, 0xBEF5	; 0x80bef5 <__bss_end+0x83d9>
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e70:	e3 53       	subi	r30, 0x33	; 51
    1e72:	f5 4c       	sbci	r31, 0xC5	; 197
    1e74:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1e76:	e0 91 f6 be 	lds	r30, 0xBEF6	; 0x80bef6 <__bss_end+0x83da>
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e80:	e3 53       	subi	r30, 0x33	; 51
    1e82:	f5 4c       	sbci	r31, 0xC5	; 197
    1e84:	80 83       	st	Z, r24
        effect = 0x017f;
    1e86:	8f e7       	ldi	r24, 0x7F	; 127
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <simonLed+0xee>
    } else if (val == 2) {  // I
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	b1 f4       	brne	.+44     	; 0x1ebc <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1e90:	e0 91 f7 be 	lds	r30, 0xBEF7	; 0x80bef7 <__bss_end+0x83db>
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e9a:	e3 53       	subi	r30, 0x33	; 51
    1e9c:	f5 4c       	sbci	r31, 0xC5	; 197
    1e9e:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1ea0:	e0 91 f8 be 	lds	r30, 0xBEF8	; 0x80bef8 <__bss_end+0x83dc>
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1eaa:	e3 53       	subi	r30, 0x33	; 51
    1eac:	f5 4c       	sbci	r31, 0xC5	; 197
    1eae:	80 83       	st	Z, r24
        effect = 0x019f;
    1eb0:	8f e9       	ldi	r24, 0x9F	; 159
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1eb8:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    }
}
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	08 95       	ret

00001ec2 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1ec6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1eca:	8d 7f       	andi	r24, 0xFD	; 253
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <BastetDictates+0xe>
    1ece:	73 c1       	rjmp	.+742    	; 0x21b6 <BastetDictates+0x2f4>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1ed0:	8a e7       	ldi	r24, 0x7A	; 122
    1ed2:	b4 da       	rcall	.-2712   	; 0x143c <CheckState>
    1ed4:	88 23       	and	r24, r24
    1ed6:	41 f0       	breq	.+16     	; 0x1ee8 <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1ed8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1edc:	82 30       	cpi	r24, 0x02	; 2
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <BastetDictates+0x20>
    1ee0:	6a c1       	rjmp	.+724    	; 0x21b6 <BastetDictates+0x2f4>
            gameNow = TEXT;
    1ee2:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
    1ee6:	67 c1       	rjmp	.+718    	; 0x21b6 <BastetDictates+0x2f4>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1ee8:	8b e7       	ldi	r24, 0x7B	; 123
    1eea:	a8 da       	rcall	.-2736   	; 0x143c <CheckState>
    1eec:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1ef0:	88 23       	and	r24, r24
    1ef2:	29 f0       	breq	.+10     	; 0x1efe <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <BastetDictates+0x3c>
            gameNow = BASTET;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1efe:	e0 91 f0 be 	lds	r30, 0xBEF0	; 0x80bef0 <__bss_end+0x83d4>
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	9f 3f       	cpi	r25, 0xFF	; 255
    1f06:	19 f0       	breq	.+6      	; 0x1f0e <BastetDictates+0x4c>
    1f08:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <BastetDictates+0x4e>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	e3 53       	subi	r30, 0x33	; 51
    1f12:	f5 4c       	sbci	r31, 0xC5	; 197
    1f14:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1f16:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonGameState>
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	0c c0       	rjmp	.+24     	; 0x1f36 <BastetDictates+0x74>
    1f1e:	cc e6       	ldi	r28, 0x6C	; 108
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1f20:	d8 e3       	ldi	r29, 0x38	; 56
    1f22:	65 d9       	rcall	.-3382   	; 0x11ee <lfsr>
    1f24:	83 70       	andi	r24, 0x03	; 3
    1f26:	89 93       	st	Y+, r24
            gameNow = BASTET;

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1f28:	88 e3       	ldi	r24, 0x38	; 56
    1f2a:	c8 37       	cpi	r28, 0x78	; 120
    1f2c:	d8 07       	cpc	r29, r24
    1f2e:	c9 f7       	brne	.-14     	; 0x1f22 <BastetDictates+0x60>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f36:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonGameState>
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	71 f4       	brne	.+28     	; 0x1f5a <BastetDictates+0x98>
    1f3e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	51 f4       	brne	.+20     	; 0x1f5a <BastetDictates+0x98>
        simonGameState = BASTET_GAME_INTRO;
    1f46:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
        simonPos = 0;
    1f4a:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <simonPos>
        simonInputPos = 0;
    1f4e:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonInputPos>
        simonTimer = 0;
    1f52:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
        simonCounter = 0;
    1f56:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f5a:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonGameState>
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	19 f5       	brne	.+70     	; 0x1fa8 <BastetDictates+0xe6>
        if (simonTimer > 5) {   // ±.33 seconds
    1f62:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
    1f66:	86 30       	cpi	r24, 0x06	; 6
    1f68:	38 f0       	brcs	.+14     	; 0x1f78 <BastetDictates+0xb6>
            simonCounter++;
    1f6a:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonCounter>
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
    1f70:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <simonCounter>
            simonTimer = 0;
    1f74:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
        }
        if (simonCounter > 5) {
    1f78:	e0 91 67 38 	lds	r30, 0x3867	; 0x803867 <simonCounter>
    1f7c:	e6 30       	cpi	r30, 0x06	; 6
    1f7e:	48 f0       	brcs	.+18     	; 0x1f92 <BastetDictates+0xd0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
            simonTimer = 0;
    1f86:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
            simonCounter = 0;
    1f8a:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
            ClearHackerLeds();
    1f8e:	64 db       	rcall	.-2360   	; 0x1658 <ClearHackerLeds>
            return 0;
    1f90:	12 c1       	rjmp	.+548    	; 0x21b6 <BastetDictates+0x2f4>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	ee 5f       	subi	r30, 0xFE	; 254
    1f96:	f0 44       	sbci	r31, 0x40	; 64
    1f98:	e0 81       	ld	r30, Z
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1fa0:	e3 53       	subi	r30, 0x33	; 51
    1fa2:	f5 4c       	sbci	r31, 0xC5	; 197
    1fa4:	80 83       	st	Z, r24
    1fa6:	2b c0       	rjmp	.+86     	; 0x1ffe <BastetDictates+0x13c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	49 f5       	brne	.+82     	; 0x1ffe <BastetDictates+0x13c>
        if (simonTimer > 7) {   // ±.5 second
    1fac:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
    1fb0:	88 30       	cpi	r24, 0x08	; 8
    1fb2:	38 f0       	brcs	.+14     	; 0x1fc2 <BastetDictates+0x100>
            simonCounter++;
    1fb4:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonCounter>
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <simonCounter>
            simonTimer = 0;
    1fbe:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1fc2:	e0 91 67 38 	lds	r30, 0x3867	; 0x803867 <simonCounter>
    1fc6:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <simonPos>
    1fca:	8e 17       	cp	r24, r30
    1fcc:	40 f4       	brcc	.+16     	; 0x1fde <BastetDictates+0x11c>
            simonInputPos = 0;
    1fce:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1fd2:	85 e0       	ldi	r24, 0x05	; 5
    1fd4:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
            simonLed(0);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	f5 de       	rcall	.-534    	; 0x1dc6 <simonLed>
    1fdc:	98 c0       	rjmp	.+304    	; 0x210e <BastetDictates+0x24c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1fde:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
    1fe2:	83 30       	cpi	r24, 0x03	; 3
    1fe4:	30 f4       	brcc	.+12     	; 0x1ff2 <BastetDictates+0x130>
            simonLed(simonState[simonCounter] + 1);
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	e4 59       	subi	r30, 0x94	; 148
    1fea:	f7 4c       	sbci	r31, 0xC7	; 199
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	ea de       	rcall	.-556    	; 0x1dc6 <simonLed>
        }
        if (simonTimer > 6) {
    1ff2:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
    1ff6:	87 30       	cpi	r24, 0x07	; 7
    1ff8:	10 f0       	brcs	.+4      	; 0x1ffe <BastetDictates+0x13c>
            simonLed(0);
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	e4 de       	rcall	.-568    	; 0x1dc6 <simonLed>
    1ffe:	c0 91 66 38 	lds	r28, 0x3866	; 0x803866 <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    2002:	c5 30       	cpi	r28, 0x05	; 5
    2004:	09 f0       	breq	.+2      	; 0x2008 <BastetDictates+0x146>
    2006:	86 c0       	rjmp	.+268    	; 0x2114 <BastetDictates+0x252>
    2008:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    200c:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    2010:	98 17       	cp	r25, r24
    2012:	09 f4       	brne	.+2      	; 0x2016 <BastetDictates+0x154>
    2014:	71 c0       	rjmp	.+226    	; 0x20f8 <BastetDictates+0x236>
    2016:	90 91 68 38 	lds	r25, 0x3868	; 0x803868 <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    201a:	91 11       	cpse	r25, r1
    201c:	6f c0       	rjmp	.+222    	; 0x20fc <BastetDictates+0x23a>
    201e:	84 30       	cpi	r24, 0x04	; 4
    2020:	08 f0       	brcs	.+2      	; 0x2024 <BastetDictates+0x162>
    2022:	6c c0       	rjmp	.+216    	; 0x20fc <BastetDictates+0x23a>
                simonWait = 1;
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	90 93 68 38 	sts	0x3868, r25	; 0x803868 <simonWait>
                simonTimer = 0;
    202a:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
                simonLed(buttonState+1);
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	ca de       	rcall	.-620    	; 0x1dc6 <simonLed>
    2032:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2034:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
    2038:	c0 93 34 38 	sts	0x3834, r28	; 0x803834 <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    203c:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    2040:	e8 2f       	mov	r30, r24
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	e4 59       	subi	r30, 0x94	; 148
    2046:	f7 4c       	sbci	r31, 0xC7	; 199
    2048:	20 81       	ld	r18, Z
    204a:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    204e:	29 13       	cpse	r18, r25
    2050:	1d c0       	rjmp	.+58     	; 0x208c <BastetDictates+0x1ca>
    2052:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    2054:	80 93 6a 38 	sts	0x386A, r24	; 0x80386a <simonInputPos>
    2058:	e0 91 6b 38 	lds	r30, 0x386B	; 0x80386b <simonPos>
                    if (simonInputPos > simonPos) {
    205c:	e8 17       	cp	r30, r24
    205e:	a0 f5       	brcc	.+104    	; 0x20c8 <BastetDictates+0x206>
    2060:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    2062:	e0 93 6b 38 	sts	0x386B, r30	; 0x80386b <simonPos>
    2066:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
                        simonTimer = 0;
    206a:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
                        simonCounter = 0;
    206e:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    2070:	59 f0       	breq	.+22     	; 0x2088 <BastetDictates+0x1c6>
    2072:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	ee 5f       	subi	r30, 0xFE	; 254
    2078:	f0 44       	sbci	r31, 0x40	; 64
    207a:	e5 81       	ldd	r30, Z+5	; 0x05
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2082:	e3 53       	subi	r30, 0x33	; 51
    2084:	f5 4c       	sbci	r31, 0xC5	; 197
    2086:	80 83       	st	Z, r24
    2088:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    208a:	1c c0       	rjmp	.+56     	; 0x20c4 <BastetDictates+0x202>
    208c:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2094:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2098:	a2 e0       	ldi	r26, 0x02	; 2
    209a:	bf eb       	ldi	r27, 0xBF	; 191
    209c:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    20a4:	e3 53       	subi	r30, 0x33	; 51
    20a6:	f5 4c       	sbci	r31, 0xC5	; 197
    20a8:	80 83       	st	Z, r24
    20aa:	8f eb       	ldi	r24, 0xBF	; 191
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    20ac:	a8 30       	cpi	r26, 0x08	; 8
    20ae:	b8 07       	cpc	r27, r24
    20b0:	a9 f7       	brne	.-22     	; 0x209c <BastetDictates+0x1da>
    20b2:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    20b6:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <simonPos>
                    simonPos = 0;
    20ba:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
                    simonTimer = 0;
    20be:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
                    simonCounter = 0;
    20c2:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    20c4:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
    20c8:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    20cc:	8c 30       	cpi	r24, 0x0C	; 12
    20ce:	20 f4       	brcc	.+8      	; 0x20d8 <BastetDictates+0x216>
    20d0:	80 91 6b 38 	lds	r24, 0x386B	; 0x80386b <simonPos>
    20d4:	8c 30       	cpi	r24, 0x0C	; 12
    20d6:	90 f0       	brcs	.+36     	; 0x20fc <BastetDictates+0x23a>
                    effect = 64|2;
    20d8:	82 e4       	ldi	r24, 0x42	; 66
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    20e0:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20e4:	8a e7       	ldi	r24, 0x7A	; 122
    20e6:	89 d9       	rcall	.-3310   	; 0x13fa <UpdateState>
    20e8:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
                    simonTimer = 0;
    20ec:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
                    simonCounter = 0;
    20f0:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    20f2:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <BastetDictates+0x23a>
    20f8:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20fc:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    2100:	88 3c       	cpi	r24, 0xC8	; 200
    2102:	41 f4       	brne	.+16     	; 0x2114 <BastetDictates+0x252>
    2104:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    2106:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
    210a:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
            simonCounter = 0;
    210e:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
            simonTimer = 0;
    2112:	51 c0       	rjmp	.+162    	; 0x21b6 <BastetDictates+0x2f4>
            return 0;
    2114:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	81 f4       	brne	.+32     	; 0x213c <BastetDictates+0x27a>
        if (simonTimer >= 7) {
    211c:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
    2120:	87 30       	cpi	r24, 0x07	; 7
    2122:	60 f0       	brcs	.+24     	; 0x213c <BastetDictates+0x27a>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	4f de       	rcall	.-866    	; 0x1dc6 <simonLed>
    2128:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonWait>
            simonWait = 0;
    212c:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
            simonTimer = 0;
    2130:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
            simonCounter = 0;
    2134:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <simonNextGameState>
            simonGameState = simonNextGameState;
    2138:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
    213c:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2140:	86 30       	cpi	r24, 0x06	; 6
    2142:	41 f5       	brne	.+80     	; 0x2194 <BastetDictates+0x2d2>
    2144:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
        if (simonTimer > 3) {
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	38 f0       	brcs	.+14     	; 0x215a <BastetDictates+0x298>
    214c:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonCounter>
            simonCounter++;
    2150:	8f 5f       	subi	r24, 0xFF	; 255
    2152:	80 93 67 38 	sts	0x3867, r24	; 0x803867 <simonCounter>
    2156:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
            simonTimer = 0;
    215a:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonCounter>
        }
        if (simonCounter > 5) {
    215e:	86 30       	cpi	r24, 0x06	; 6
    2160:	40 f0       	brcs	.+16     	; 0x2172 <BastetDictates+0x2b0>
    2162:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonTimer>
            simonTimer = 0;
    2166:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonCounter>
            simonCounter = 0;
    216a:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    216c:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonGameState>
    2170:	22 c0       	rjmp	.+68     	; 0x21b6 <BastetDictates+0x2f4>
            return 0;
    2172:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	e8 1b       	sub	r30, r24
    2178:	f1 09       	sbc	r31, r1
    217a:	ee 5f       	subi	r30, 0xFE	; 254
    217c:	f0 44       	sbci	r31, 0x40	; 64
    217e:	a0 81       	ld	r26, Z
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	a3 53       	subi	r26, 0x33	; 51
    2184:	b5 4c       	sbci	r27, 0xC5	; 197
    2186:	1c 92       	st	X, r1
    2188:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	e3 53       	subi	r30, 0x33	; 51
    218e:	f5 4c       	sbci	r31, 0xC5	; 197
    2190:	10 82       	st	Z, r1
    2192:	0c c0       	rjmp	.+24     	; 0x21ac <BastetDictates+0x2ea>
    2194:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    2196:	51 f4       	brne	.+20     	; 0x21ac <BastetDictates+0x2ea>
        simonInputPos = 0;
    2198:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonInputPos>
        simonPos = 0;
    219c:	10 92 6b 38 	sts	0x386B, r1	; 0x80386b <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    21a0:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonGameState>
        gameNow = TEXT;
    21a4:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        simonLed(0);
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	0d de       	rcall	.-998    	; 0x1dc6 <simonLed>
    21ac:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonTimer>
    }

    ++simonTimer;
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <simonTimer>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <Cheat>:
    21be:	a2 e1       	ldi	r26, 0x12	; 18

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e5 ee       	ldi	r30, 0xE5	; 229
    21c4:	f0 e1       	ldi	r31, 0x10	; 16
    21c6:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <__prologue_saves__+0x1e>
    21ca:	8a 8b       	std	Y+18, r24	; 0x12
    21cc:	80 e1       	ldi	r24, 0x10	; 16
    21ce:	e4 ed       	ldi	r30, 0xD4	; 212
    21d0:	fe eb       	ldi	r31, 0xBE	; 190
    21d2:	de 01       	movw	r26, r28
    21d4:	11 96       	adiw	r26, 0x01	; 1
    21d6:	01 90       	ld	r0, Z+
    21d8:	0d 92       	st	X+, r0
    21da:	8a 95       	dec	r24
    21dc:	e1 f7       	brne	.-8      	; 0x21d6 <Cheat+0x18>
    21de:	fe 01       	movw	r30, r28
    21e0:	31 96       	adiw	r30, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	21 91       	ld	r18, Z+
    21e8:	31 91       	ld	r19, Z+
    21ea:	26 17       	cp	r18, r22
    21ec:	37 07       	cpc	r19, r23
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <Cheat+0x34>
    21f0:	89 2f       	mov	r24, r25
    21f2:	9f 5f       	subi	r25, 0xFF	; 255
    21f4:	98 30       	cpi	r25, 0x08	; 8
    21f6:	b9 f7       	brne	.-18     	; 0x21e6 <Cheat+0x28>
    21f8:	88 30       	cpi	r24, 0x08	; 8
    21fa:	10 f0       	brcs	.+4      	; 0x2200 <Cheat+0x42>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <Cheat+0x6a>
    2200:	18 e1       	ldi	r17, 0x18	; 24
    2202:	18 0f       	add	r17, r24
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	be 01       	movw	r22, r28
    2208:	6f 5e       	subi	r22, 0xEF	; 239
    220a:	7f 4f       	sbci	r23, 0xFF	; 255
    220c:	81 2f       	mov	r24, r17
    220e:	0e 94 15 08 	call	0x102a	; 0x102a <EERead>
    2212:	89 89       	ldd	r24, Y+17	; 0x11
    2214:	8f 3f       	cpi	r24, 0xFF	; 255
    2216:	91 f7       	brne	.-28     	; 0x21fc <Cheat+0x3e>
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	be 01       	movw	r22, r28
    221c:	6e 5e       	subi	r22, 0xEE	; 238
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	81 2f       	mov	r24, r17
    2222:	0e 94 25 08 	call	0x104a	; 0x104a <EEWrite>
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	62 96       	adiw	r28, 0x12	; 18
    222a:	e3 e0       	ldi	r30, 0x03	; 3
    222c:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__epilogue_restores__+0x1e>

00002230 <UnflipData>:
    2230:	26 2f       	mov	r18, r22
    2232:	fb 01       	movw	r30, r22
    2234:	35 e5       	ldi	r19, 0x55	; 85
    2236:	9e 2f       	mov	r25, r30
    2238:	92 1b       	sub	r25, r18
    223a:	98 17       	cp	r25, r24
    223c:	28 f4       	brcc	.+10     	; 0x2248 <UnflipData+0x18>
    223e:	90 81       	ld	r25, Z
    2240:	92 95       	swap	r25
    2242:	93 27       	eor	r25, r19
    2244:	91 93       	st	Z+, r25
    2246:	f7 cf       	rjmp	.-18     	; 0x2236 <UnflipData+0x6>
    2248:	08 95       	ret

0000224a <ClearTxAfter>:
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	88 30       	cpi	r24, 0x08	; 8
    224e:	30 f4       	brcc	.+12     	; 0x225c <ClearTxAfter+0x12>
    2250:	e8 2f       	mov	r30, r24
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	ee 5a       	subi	r30, 0xAE	; 174
    2256:	f5 4c       	sbci	r31, 0xC5	; 197
    2258:	10 82       	st	Z, r1
    225a:	f7 cf       	rjmp	.-18     	; 0x224a <ClearTxAfter>
    225c:	08 95       	ret

0000225e <StartsWith>:
    225e:	ac 01       	movw	r20, r24
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	e9 2f       	mov	r30, r25
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	da 01       	movw	r26, r20
    2268:	ae 0f       	add	r26, r30
    226a:	bf 1f       	adc	r27, r31
    226c:	3c 91       	ld	r19, X
    226e:	e6 0f       	add	r30, r22
    2270:	f7 1f       	adc	r31, r23
    2272:	31 11       	cpse	r19, r1
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <StartsWith+0x22>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 81       	ld	r25, Z
    227a:	99 23       	and	r25, r25
    227c:	49 f0       	breq	.+18     	; 0x2290 <StartsWith+0x32>
    227e:	07 c0       	rjmp	.+14     	; 0x228e <StartsWith+0x30>
    2280:	20 81       	ld	r18, Z
    2282:	22 23       	and	r18, r18
    2284:	c1 f3       	breq	.-16     	; 0x2276 <StartsWith+0x18>
    2286:	32 13       	cpse	r19, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <StartsWith+0x30>
    228a:	9f 5f       	subi	r25, 0xFF	; 255
    228c:	ea cf       	rjmp	.-44     	; 0x2262 <StartsWith+0x4>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	08 95       	ret

00002292 <PrepareSending>:
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	fc 01       	movw	r30, r24
    2298:	61 15       	cp	r22, r1
    229a:	71 05       	cpc	r23, r1
    229c:	59 f1       	breq	.+86     	; 0x22f4 <PrepareSending+0x62>
    229e:	aa e5       	ldi	r26, 0x5A	; 90
    22a0:	ba e3       	ldi	r27, 0x3A	; 58
    22a2:	c2 e5       	ldi	r28, 0x52	; 82
    22a4:	da e3       	ldi	r29, 0x3A	; 58
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	9f ef       	ldi	r25, 0xFF	; 255
    22aa:	6f 3f       	cpi	r22, 0xFF	; 255
    22ac:	71 05       	cpc	r23, r1
    22ae:	69 f0       	breq	.+26     	; 0x22ca <PrepareSending+0x38>
    22b0:	60 f0       	brcs	.+24     	; 0x22ca <PrepareSending+0x38>
    22b2:	ed 93       	st	X+, r30
    22b4:	fd 93       	st	X+, r31
    22b6:	99 93       	st	Y+, r25
    22b8:	e1 50       	subi	r30, 0x01	; 1
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	6f 5f       	subi	r22, 0xFF	; 255
    22be:	71 09       	sbc	r23, r1
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	87 30       	cpi	r24, 0x07	; 7
    22c4:	91 f7       	brne	.-28     	; 0x22aa <PrepareSending+0x18>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	1e c0       	rjmp	.+60     	; 0x2306 <PrepareSending+0x74>
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	d9 01       	movw	r26, r18
    22d0:	aa 0f       	add	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	a6 5a       	subi	r26, 0xA6	; 166
    22d6:	b5 4c       	sbci	r27, 0xC5	; 197
    22d8:	ed 93       	st	X+, r30
    22da:	fc 93       	st	X, r31
    22dc:	6f 3f       	cpi	r22, 0xFF	; 255
    22de:	71 05       	cpc	r23, r1
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <PrepareSending+0x54>
    22e2:	6e ef       	ldi	r22, 0xFE	; 254
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	f9 01       	movw	r30, r18
    22e8:	ee 5a       	subi	r30, 0xAE	; 174
    22ea:	f5 4c       	sbci	r31, 0xC5	; 197
    22ec:	60 83       	st	Z, r22
    22ee:	40 93 50 3a 	sts	0x3A50, r20	; 0x803a50 <txTypeNow>
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <PrepareSending+0x6c>
    22f4:	10 92 5a 3a 	sts	0x3A5A, r1	; 0x803a5a <txAddrList>
    22f8:	10 92 5b 3a 	sts	0x3A5B, r1	; 0x803a5b <txAddrList+0x1>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	a5 df       	rcall	.-182    	; 0x224a <ClearTxAfter>
    2300:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrNow>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	f9 01       	movw	r30, r18
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	eb 5d       	subi	r30, 0xDB	; 219
    231c:	f6 4c       	sbci	r31, 0xC6	; 198
    231e:	a9 e5       	ldi	r26, 0x59	; 89
    2320:	ba e7       	ldi	r27, 0x7A	; 122
    2322:	a0 83       	st	Z, r26
    2324:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2326:	f9 01       	movw	r30, r18
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	eb 59       	subi	r30, 0x9B	; 155
    232e:	f6 4c       	sbci	r31, 0xC6	; 198
    2330:	62 e0       	ldi	r22, 0x02	; 2
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	60 83       	st	Z, r22
    2336:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2338:	22 0f       	add	r18, r18
    233a:	33 1f       	adc	r19, r19
    233c:	f9 01       	movw	r30, r18
    233e:	eb 55       	subi	r30, 0x5B	; 91
    2340:	f6 4c       	sbci	r31, 0xC6	; 198
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	40 83       	st	Z, r20
    2348:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    234a:	21 e0       	ldi	r18, 0x01	; 1
    234c:	28 0f       	add	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	f9 01       	movw	r30, r18
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	eb 5d       	subi	r30, 0xDB	; 219
    2358:	f6 4c       	sbci	r31, 0xC6	; 198
    235a:	c2 e6       	ldi	r28, 0x62	; 98
    235c:	da e7       	ldi	r29, 0x7A	; 122
    235e:	c0 83       	st	Z, r28
    2360:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2362:	f9 01       	movw	r30, r18
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	eb 59       	subi	r30, 0x9B	; 155
    236a:	f6 4c       	sbci	r31, 0xC6	; 198
    236c:	cc e0       	ldi	r28, 0x0C	; 12
    236e:	d0 e0       	ldi	r29, 0x00	; 0
    2370:	c0 83       	st	Z, r28
    2372:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	f9 01       	movw	r30, r18
    237a:	eb 55       	subi	r30, 0x5B	; 91
    237c:	f6 4c       	sbci	r31, 0xC6	; 198
    237e:	40 83       	st	Z, r20
    2380:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2382:	e2 e0       	ldi	r30, 0x02	; 2
    2384:	e8 0f       	add	r30, r24
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	eb 5d       	subi	r30, 0xDB	; 219
    238e:	f6 4c       	sbci	r31, 0xC6	; 198
    2390:	20 ef       	ldi	r18, 0xF0	; 240
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	20 83       	st	Z, r18
    2396:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2398:	23 e0       	ldi	r18, 0x03	; 3
    239a:	28 0f       	add	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	f9 01       	movw	r30, r18
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	eb 5d       	subi	r30, 0xDB	; 219
    23a6:	f6 4c       	sbci	r31, 0xC6	; 198
    23a8:	a0 83       	st	Z, r26
    23aa:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23ac:	f9 01       	movw	r30, r18
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	eb 59       	subi	r30, 0x9B	; 155
    23b4:	f6 4c       	sbci	r31, 0xC6	; 198
    23b6:	60 83       	st	Z, r22
    23b8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23ba:	22 0f       	add	r18, r18
    23bc:	33 1f       	adc	r19, r19
    23be:	f9 01       	movw	r30, r18
    23c0:	eb 55       	subi	r30, 0x5B	; 91
    23c2:	f6 4c       	sbci	r31, 0xC6	; 198
    23c4:	40 83       	st	Z, r20
    23c6:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23c8:	24 e0       	ldi	r18, 0x04	; 4
    23ca:	28 0f       	add	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	f9 01       	movw	r30, r18
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	eb 5d       	subi	r30, 0xDB	; 219
    23d6:	f6 4c       	sbci	r31, 0xC6	; 198
    23d8:	a5 e5       	ldi	r26, 0x55	; 85
    23da:	ba e7       	ldi	r27, 0x7A	; 122
    23dc:	a0 83       	st	Z, r26
    23de:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23e0:	f9 01       	movw	r30, r18
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	eb 59       	subi	r30, 0x9B	; 155
    23e8:	f6 4c       	sbci	r31, 0xC6	; 198
    23ea:	60 83       	st	Z, r22
    23ec:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23ee:	22 0f       	add	r18, r18
    23f0:	33 1f       	adc	r19, r19
    23f2:	f9 01       	movw	r30, r18
    23f4:	eb 55       	subi	r30, 0x5B	; 91
    23f6:	f6 4c       	sbci	r31, 0xC6	; 198
    23f8:	40 83       	st	Z, r20
    23fa:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23fc:	8b 5f       	subi	r24, 0xFB	; 251
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

00002404 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	2c 97       	sbiw	r28, 0x0c	; 12
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	7c 01       	movw	r14, r24
    2422:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2424:	9e 01       	movw	r18, r28
    2426:	2f 5f       	subi	r18, 0xFF	; 255
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	6c e0       	ldi	r22, 0x0C	; 12
    242e:	80 96       	adiw	r24, 0x20	; 32
    2430:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	98 27       	eor	r25, r24
    243a:	89 27       	eor	r24, r25
    243c:	98 27       	eor	r25, r24
    243e:	80 96       	adiw	r24, 0x20	; 32
    2440:	f8 01       	movw	r30, r16
    2442:	80 83       	st	Z, r24
    2444:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	98 27       	eor	r25, r24
    244c:	89 27       	eor	r24, r25
    244e:	98 27       	eor	r25, r24
    2450:	80 96       	adiw	r24, 0x20	; 32
    2452:	82 83       	std	Z+2, r24	; 0x02
    2454:	93 83       	std	Z+3, r25	; 0x03
    2456:	de 01       	movw	r26, r28
    2458:	15 96       	adiw	r26, 0x05	; 5
    245a:	34 96       	adiw	r30, 0x04	; 4
    245c:	c8 01       	movw	r24, r16
    245e:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2460:	2d 91       	ld	r18, X+
    2462:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2464:	e8 17       	cp	r30, r24
    2466:	f9 07       	cpc	r31, r25
    2468:	d9 f7       	brne	.-10     	; 0x2460 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    246a:	fc e2       	ldi	r31, 0x2C	; 44
    246c:	ef 0e       	add	r14, r31
    246e:	f1 1c       	adc	r15, r1
    2470:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2472:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2474:	9e 01       	movw	r18, r28
    2476:	2f 5f       	subi	r18, 0xFF	; 255
    2478:	3f 4f       	sbci	r19, 0xFF	; 255
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	63 e0       	ldi	r22, 0x03	; 3
    247e:	c7 01       	movw	r24, r14
    2480:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	98 27       	eor	r25, r24
    248a:	89 27       	eor	r24, r25
    248c:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    248e:	97 01       	movw	r18, r14
    2490:	2e 5f       	subi	r18, 0xFE	; 254
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2494:	43 e0       	ldi	r20, 0x03	; 3
    2496:	4d 15       	cp	r20, r13
    2498:	80 f4       	brcc	.+32     	; 0x24ba <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    249a:	ac 01       	movw	r20, r24
    249c:	41 50       	subi	r20, 0x01	; 1
    249e:	51 09       	sbc	r21, r1
    24a0:	f8 01       	movw	r30, r16
    24a2:	42 8f       	std	Z+26, r20	; 0x1a
    24a4:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    24a6:	f3 e0       	ldi	r31, 0x03	; 3
    24a8:	ef 0e       	add	r14, r31
    24aa:	f1 1c       	adc	r15, r1
    24ac:	f8 01       	movw	r30, r16
    24ae:	e4 86       	std	Z+12, r14	; 0x0c
    24b0:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    24b2:	4b 81       	ldd	r20, Y+3	; 0x03
    24b4:	f5 01       	movw	r30, r10
    24b6:	44 a3       	std	Z+36, r20	; 0x24
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    24ba:	f8 01       	movw	r30, r16
    24bc:	82 8f       	std	Z+26, r24	; 0x1a
    24be:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    24c0:	24 87       	std	Z+12, r18	; 0x0c
    24c2:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    24c4:	7c 01       	movw	r14, r24
    24c6:	e2 0e       	add	r14, r18
    24c8:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24ca:	d3 94       	inc	r13
    24cc:	0e 5f       	subi	r16, 0xFE	; 254
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	ff ef       	ldi	r31, 0xFF	; 255
    24d2:	af 1a       	sub	r10, r31
    24d4:	bf 0a       	sbc	r11, r31
    24d6:	47 e0       	ldi	r20, 0x07	; 7
    24d8:	d4 12       	cpse	r13, r20
    24da:	cc cf       	rjmp	.-104    	; 0x2474 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24dc:	2c 96       	adiw	r28, 0x0c	; 12
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	08 95       	ret

000024f6 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24f6:	a0 e2       	ldi	r26, 0x20	; 32
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e1 e8       	ldi	r30, 0x81	; 129
    24fc:	f2 e1       	ldi	r31, 0x12	; 18
    24fe:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__prologue_saves__+0x14>
    2502:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2504:	7c 01       	movw	r14, r24
    2506:	20 e2       	ldi	r18, 0x20	; 32
    2508:	e2 0e       	add	r14, r18
    250a:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    250c:	9e 01       	movw	r18, r28
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	8c 96       	adiw	r24, 0x2c	; 44
    2518:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    251c:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    251e:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2520:	11 23       	and	r17, r17
    2522:	59 f1       	breq	.+86     	; 0x257a <CheckLetter+0x84>
    2524:	01 2f       	mov	r16, r17
    2526:	11 32       	cpi	r17, 0x21	; 33
    2528:	08 f0       	brcs	.+2      	; 0x252c <CheckLetter+0x36>
    252a:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    252c:	9e 01       	movw	r18, r28
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	60 2f       	mov	r22, r16
    2536:	c7 01       	movw	r24, r14
    2538:	0e 96       	adiw	r24, 0x0e	; 14
    253a:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
    253e:	fe 01       	movw	r30, r28
    2540:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2542:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2544:	dd 20       	and	r13, r13
    2546:	61 f0       	breq	.+24     	; 0x2560 <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2548:	e1 e0       	ldi	r30, 0x01	; 1
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	ec 0f       	add	r30, r28
    254e:	fd 1f       	adc	r31, r29
    2550:	e8 0f       	add	r30, r24
    2552:	f1 1d       	adc	r31, r1
    2554:	90 81       	ld	r25, Z
    2556:	90 62       	ori	r25, 0x20	; 32
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	9c 11       	cpse	r25, r12
    255c:	0e c0       	rjmp	.+28     	; 0x257a <CheckLetter+0x84>
    255e:	0e c0       	rjmp	.+28     	; 0x257c <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    2560:	91 91       	ld	r25, Z+
    2562:	dd 24       	eor	r13, r13
    2564:	d3 94       	inc	r13
    2566:	9b 35       	cpi	r25, 0x5B	; 91
    2568:	09 f0       	breq	.+2      	; 0x256c <CheckLetter+0x76>
    256a:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	80 17       	cp	r24, r16
    2570:	48 f3       	brcs	.-46     	; 0x2544 <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2572:	e0 0e       	add	r14, r16
    2574:	f1 1c       	adc	r15, r1
        x -= max;
    2576:	10 1b       	sub	r17, r16
    2578:	d3 cf       	rjmp	.-90     	; 0x2520 <CheckLetter+0x2a>
    }
    return 0;
    257a:	80 e0       	ldi	r24, 0x00	; 0
}
    257c:	a0 96       	adiw	r28, 0x20	; 32
    257e:	e8 e0       	ldi	r30, 0x08	; 8
    2580:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <__epilogue_restores__+0x14>

00002584 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2584:	af 92       	push	r10
    2586:	bf 92       	push	r11
    2588:	df 92       	push	r13
    258a:	ef 92       	push	r14
    258c:	ff 92       	push	r15
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	00 d0       	rcall	.+0      	; 0x2598 <FindChild+0x14>
    2598:	00 d0       	rcall	.+0      	; 0x259a <FindChild+0x16>
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	d6 2e       	mov	r13, r22
    25a0:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    25a2:	9e 01       	movw	r18, r28
    25a4:	2f 5f       	subi	r18, 0xFF	; 255
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	64 e0       	ldi	r22, 0x04	; 4
    25ac:	80 96       	adiw	r24, 0x20	; 32
    25ae:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
    25b2:	e9 80       	ldd	r14, Y+1	; 0x01
    25b4:	fa 80       	ldd	r15, Y+2	; 0x02
    25b6:	fe 24       	eor	r15, r14
    25b8:	ef 24       	eor	r14, r15
    25ba:	fe 24       	eor	r15, r14
    25bc:	0b 81       	ldd	r16, Y+3	; 0x03
    25be:	1c 81       	ldd	r17, Y+4	; 0x04
    25c0:	10 27       	eor	r17, r16
    25c2:	01 27       	eor	r16, r17
    25c4:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25c6:	0e 15       	cp	r16, r14
    25c8:	1f 05       	cpc	r17, r15
    25ca:	48 f5       	brcc	.+82     	; 0x261e <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25cc:	a0 16       	cp	r10, r16
    25ce:	b1 06       	cpc	r11, r17
    25d0:	60 f0       	brcs	.+24     	; 0x25ea <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25d2:	9e 01       	movw	r18, r28
    25d4:	2f 5f       	subi	r18, 0xFF	; 255
    25d6:	3f 4f       	sbci	r19, 0xFF	; 255
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	c8 01       	movw	r24, r16
    25de:	80 96       	adiw	r24, 0x20	; 32
    25e0:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
    25e4:	09 81       	ldd	r16, Y+1	; 0x01
    25e6:	1a 81       	ldd	r17, Y+2	; 0x02
    25e8:	eb cf       	rjmp	.-42     	; 0x25c0 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25ea:	9e 01       	movw	r18, r28
    25ec:	2f 5f       	subi	r18, 0xFF	; 255
    25ee:	3f 4f       	sbci	r19, 0xFF	; 255
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	c8 01       	movw	r24, r16
    25f6:	85 96       	adiw	r24, 0x25	; 37
    25f8:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	81 11       	cpse	r24, r1
    2600:	03 c0       	rjmp	.+6      	; 0x2608 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2602:	d1 10       	cpse	r13, r1
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <FindChild+0x8e>
    2606:	0e c0       	rjmp	.+28     	; 0x2624 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2608:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
    260c:	81 11       	cpse	r24, r1
    260e:	f9 cf       	rjmp	.-14     	; 0x2602 <FindChild+0x7e>
    2610:	e0 cf       	rjmp	.-64     	; 0x25d2 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2612:	6d 2d       	mov	r22, r13
    2614:	c8 01       	movw	r24, r16
    2616:	6f df       	rcall	.-290    	; 0x24f6 <CheckLetter>
    2618:	88 23       	and	r24, r24
    261a:	d9 f2       	breq	.-74     	; 0x25d2 <FindChild+0x4e>
    261c:	03 c0       	rjmp	.+6      	; 0x2624 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <FindChild+0xa2>
    2624:	c8 01       	movw	r24, r16
}
    2626:	24 96       	adiw	r28, 0x04	; 4
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	df 90       	pop	r13
    263a:	bf 90       	pop	r11
    263c:	af 90       	pop	r10
    263e:	08 95       	ret

00002640 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2640:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2642:	9f e9       	ldi	r25, 0x9F	; 159
    2644:	98 0f       	add	r25, r24
    2646:	9a 31       	cpi	r25, 0x1A	; 26
    2648:	38 f0       	brcs	.+14     	; 0x2658 <InpOkChk+0x18>
    264a:	90 ed       	ldi	r25, 0xD0	; 208
    264c:	98 0f       	add	r25, r24
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	9a 30       	cpi	r25, 0x0A	; 10
    2652:	18 f0       	brcs	.+6      	; 0x265a <InpOkChk+0x1a>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	08 95       	ret
    2658:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    265a:	08 95       	ret

0000265c <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2666:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2668:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    266a:	f8 01       	movw	r30, r16
    266c:	ed 0f       	add	r30, r29
    266e:	f1 1d       	adc	r31, r1
    2670:	80 81       	ld	r24, Z
    2672:	2c 2f       	mov	r18, r28
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	88 23       	and	r24, r24
    2678:	61 f0       	breq	.+24     	; 0x2692 <CleanInput+0x36>
        data[cnt] = data[x];
    267a:	d8 01       	movw	r26, r16
    267c:	a2 0f       	add	r26, r18
    267e:	b3 1f       	adc	r27, r19
    2680:	8c 93       	st	X, r24
        if (data[x] == 0x1b) break; //Escape characters are not supported!
    2682:	80 81       	ld	r24, Z
    2684:	8b 31       	cpi	r24, 0x1B	; 27
    2686:	29 f0       	breq	.+10     	; 0x2692 <CleanInput+0x36>
        if (InpOkChk(data[x])) ++cnt;
    2688:	db df       	rcall	.-74     	; 0x2640 <InpOkChk>
    268a:	81 11       	cpse	r24, r1
    268c:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    268e:	df 5f       	subi	r29, 0xFF	; 255
    2690:	ec cf       	rjmp	.-40     	; 0x266a <CleanInput+0xe>
        data[cnt] = data[x];
        if (data[x] == 0x1b) break; //Escape characters are not supported!
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2692:	f8 01       	movw	r30, r16
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	10 82       	st	Z, r1
    return cnt;
}
    269a:	8c 2f       	mov	r24, r28
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    26a6:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    26a8:	20 91 51 3a 	lds	r18, 0x3A51	; 0x803a51 <txAddrNow>
    26ac:	28 30       	cpi	r18, 0x08	; 8
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <CheckSend+0xc>
    26b0:	49 c0       	rjmp	.+146    	; 0x2744 <CheckSend+0x9e>
    26b2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    26b6:	88 23       	and	r24, r24
    26b8:	09 f4       	brne	.+2      	; 0x26bc <CheckSend+0x16>
    26ba:	44 c0       	rjmp	.+136    	; 0x2744 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    26bc:	82 2f       	mov	r24, r18
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	fc 01       	movw	r30, r24
    26c2:	ee 5a       	subi	r30, 0xAE	; 174
    26c4:	f5 4c       	sbci	r31, 0xC5	; 197
    26c6:	e0 81       	ld	r30, Z
    26c8:	e1 11       	cpse	r30, r1
    26ca:	06 c0       	rjmp	.+12     	; 0x26d8 <CheckSend+0x32>
            txPart = 0;
    26cc:	10 92 10 39 	sts	0x3910, r1	; 0x803910 <txPart.3939>
            txAddrNow = TXLISTLEN;
    26d0:	88 e0       	ldi	r24, 0x08	; 8
    26d2:	80 93 51 3a 	sts	0x3A51, r24	; 0x803a51 <txAddrNow>
    26d6:	2e c0       	rjmp	.+92     	; 0x2734 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    26d8:	50 91 10 39 	lds	r21, 0x3910	; 0x803910 <txPart.3939>
    26dc:	5e 17       	cp	r21, r30
    26de:	60 f5       	brcc	.+88     	; 0x2738 <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    26e0:	ce 2f       	mov	r28, r30
    26e2:	c5 1b       	sub	r28, r21
    26e4:	c1 32       	cpi	r28, 0x21	; 33
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <CheckSend+0x44>
    26e8:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	fc 01       	movw	r30, r24
    26f0:	e6 5a       	subi	r30, 0xA6	; 166
    26f2:	f5 4c       	sbci	r31, 0xC5	; 197
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	2b ef       	ldi	r18, 0xFB	; 251
    26fa:	3a e3       	ldi	r19, 0x3A	; 58
    26fc:	40 91 50 3a 	lds	r20, 0x3A50	; 0x803a50 <txTypeNow>
    2700:	6c 2f       	mov	r22, r28
    2702:	85 0f       	add	r24, r21
    2704:	91 1d       	adc	r25, r1
    2706:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
            txPart += EEreadLength;
    270a:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <txPart.3939>
    270e:	8c 0f       	add	r24, r28
    2710:	80 93 10 39 	sts	0x3910, r24	; 0x803910 <txPart.3939>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2714:	ec 2f       	mov	r30, r28
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	e5 50       	subi	r30, 0x05	; 5
    271a:	f5 4c       	sbci	r31, 0xC5	; 197
    271c:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    271e:	80 91 fb 3a 	lds	r24, 0x3AFB	; 0x803afb <txBuffer>
    2722:	81 11       	cpse	r24, r1
    2724:	03 c0       	rjmp	.+6      	; 0x272c <CheckSend+0x86>
    2726:	8b ed       	ldi	r24, 0xDB	; 219
    2728:	80 93 fb 3a 	sts	0x3AFB, r24	; 0x803afb <txBuffer>
            SerSend(&txBuffer[0]);
    272c:	8b ef       	ldi	r24, 0xFB	; 251
    272e:	9a e3       	ldi	r25, 0x3A	; 58
    2730:	0e 94 89 08 	call	0x1112	; 0x1112 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	0b c0       	rjmp	.+22     	; 0x274e <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2738:	10 92 10 39 	sts	0x3910, r1	; 0x803910 <txPart.3939>
            ++txAddrNow;
    273c:	2f 5f       	subi	r18, 0xFF	; 255
    273e:	20 93 51 3a 	sts	0x3A51, r18	; 0x803a51 <txAddrNow>
    2742:	f8 cf       	rjmp	.-16     	; 0x2734 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2744:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	91 11       	cpse	r25, r1
    274c:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2756:	c0 91 24 39 	lds	r28, 0x3924	; 0x803924 <responseList>
    275a:	cc 23       	and	r28, r28
    275c:	b1 f1       	breq	.+108    	; 0x27ca <CheckResponse+0x78>
        --responseList;
    275e:	c1 50       	subi	r28, 0x01	; 1
    2760:	c0 93 24 39 	sts	0x3924, r28	; 0x803924 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2764:	d0 91 0f 39 	lds	r29, 0x390F	; 0x80390f <number.3943>
    2768:	2d 2f       	mov	r18, r29
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	f9 01       	movw	r30, r18
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	eb 5d       	subi	r30, 0xDB	; 219
    2774:	f6 4c       	sbci	r31, 0xC6	; 198
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	80 3f       	cpi	r24, 0xF0	; 240
    277c:	4f ef       	ldi	r20, 0xFF	; 255
    277e:	94 07       	cpc	r25, r20
    2780:	51 f4       	brne	.+20     	; 0x2796 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2782:	60 91 3f 3a 	lds	r22, 0x3A3F	; 0x803a3f <currObj+0x1a>
    2786:	70 91 40 3a 	lds	r23, 0x3A40	; 0x803a40 <currObj+0x1b>
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	80 91 31 3a 	lds	r24, 0x3A31	; 0x803a31 <currObj+0xc>
    2790:	90 91 32 3a 	lds	r25, 0x3A32	; 0x803a32 <currObj+0xd>
    2794:	0d c0       	rjmp	.+26     	; 0x27b0 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2796:	d9 01       	movw	r26, r18
    2798:	aa 0f       	add	r26, r26
    279a:	bb 1f       	adc	r27, r27
    279c:	ab 55       	subi	r26, 0x5B	; 91
    279e:	b6 4c       	sbci	r27, 0xC6	; 198
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	f9 01       	movw	r30, r18
    27a6:	eb 59       	subi	r30, 0x9B	; 155
    27a8:	f6 4c       	sbci	r31, 0xC6	; 198
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	4c 91       	ld	r20, X
    27b0:	70 dd       	rcall	.-1312   	; 0x2292 <PrepareSending>
        }
        ++number;
    27b2:	df 5f       	subi	r29, 0xFF	; 255
    27b4:	d0 93 0f 39 	sts	0x390F, r29	; 0x80390f <number.3943>

        if (responseList == 0) {
    27b8:	c1 11       	cpse	r28, r1
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    27bc:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    27be:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
            number = 0;
    27c2:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <number.3943>
    27c6:	01 c0       	rjmp	.+2      	; 0x27ca <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27c8:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27ca:	8c 2f       	mov	r24, r28
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	08 95       	ret

000027d2 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27d2:	aa e0       	ldi	r26, 0x0A	; 10
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	ef ee       	ldi	r30, 0xEF	; 239
    27d8:	f3 e1       	ldi	r31, 0x13	; 19
    27da:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <__prologue_saves__+0x6>
    27de:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    27e0:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    27e4:	8f 3f       	cpi	r24, 0xFF	; 255
    27e6:	49 f4       	brne	.+18     	; 0x27fa <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    27e8:	65 e2       	ldi	r22, 0x25	; 37
    27ea:	7a e3       	ldi	r23, 0x3A	; 58
    27ec:	80 91 e5 39 	lds	r24, 0x39E5	; 0x8039e5 <route>
    27f0:	90 91 e6 39 	lds	r25, 0x39E6	; 0x8039e6 <route+0x1>
    27f4:	07 de       	rcall	.-1010   	; 0x2404 <PopulateObject>
        currDepth = 0;
    27f6:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <currDepth>
    }

    if (serRxDone){
    27fa:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <serRxDone>
    27fe:	88 23       	and	r24, r24
    2800:	09 f4       	brne	.+2      	; 0x2804 <CheckInput+0x32>
    2802:	d4 c1       	rjmp	.+936    	; 0x2bac <CheckInput+0x3da>

        //Special input requested from user by game
        if (specialInput[0]){
    2804:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <specialInput>
    2808:	88 23       	and	r24, r24
    280a:	09 f4       	brne	.+2      	; 0x280e <CheckInput+0x3c>
    280c:	4f c0       	rjmp	.+158    	; 0x28ac <CheckInput+0xda>
            specialPassed = 0;
    280e:	10 92 13 39 	sts	0x3913, r1	; 0x803913 <specialPassed>
            data[0] = 'a';
    2812:	81 e6       	ldi	r24, 0x61	; 97
    2814:	f8 01       	movw	r30, r16
    2816:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2818:	64 e1       	ldi	r22, 0x14	; 20
    281a:	79 e3       	ldi	r23, 0x39	; 57
    281c:	8f e7       	ldi	r24, 0x7F	; 127
    281e:	9a e3       	ldi	r25, 0x3A	; 58
    2820:	1e dd       	rcall	.-1476   	; 0x225e <StartsWith>
    2822:	f8 2e       	mov	r15, r24
    2824:	88 23       	and	r24, r24
    2826:	21 f0       	breq	.+8      	; 0x2830 <CheckInput+0x5e>
                specialPassed = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	80 93 13 39 	sts	0x3913, r24	; 0x803913 <specialPassed>
    282e:	04 c0       	rjmp	.+8      	; 0x2838 <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2830:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <specialInput>
    2834:	81 33       	cpi	r24, 0x31	; 49
    2836:	11 f0       	breq	.+4      	; 0x283c <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2838:	f1 2c       	mov	r15, r1
    283a:	ba c1       	rjmp	.+884    	; 0x2bb0 <CheckInput+0x3de>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    283c:	80 91 16 39 	lds	r24, 0x3916	; 0x803916 <specialInput+0x2>
    2840:	81 11       	cpse	r24, r1
    2842:	fa cf       	rjmp	.-12     	; 0x2838 <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2844:	8f e7       	ldi	r24, 0x7F	; 127
    2846:	9a e3       	ldi	r25, 0x3A	; 58
    2848:	09 df       	rcall	.-494    	; 0x265c <CleanInput>
                specialPassed = 2;
    284a:	92 e0       	ldi	r25, 0x02	; 2
    284c:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <specialPassed>
                data[1] = 0;
    2850:	f8 01       	movw	r30, r16
    2852:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2854:	82 30       	cpi	r24, 0x02	; 2
    2856:	80 f3       	brcs	.-32     	; 0x2838 <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2858:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx>
    285c:	81 33       	cpi	r24, 0x31	; 49
    285e:	60 f3       	brcs	.-40     	; 0x2838 <CheckInput+0x66>
    2860:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx>
    2864:	85 33       	cpi	r24, 0x35	; 53
    2866:	40 f7       	brcc	.-48     	; 0x2838 <CheckInput+0x66>
                        serRx[1] |= 0x20;
    2868:	80 91 80 3a 	lds	r24, 0x3A80	; 0x803a80 <serRx+0x1>
    286c:	80 62       	ori	r24, 0x20	; 32
    286e:	80 93 80 3a 	sts	0x3A80, r24	; 0x803a80 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2872:	80 91 80 3a 	lds	r24, 0x3A80	; 0x803a80 <serRx+0x1>
    2876:	81 36       	cpi	r24, 0x61	; 97
    2878:	61 f0       	breq	.+24     	; 0x2892 <CheckInput+0xc0>
    287a:	80 91 80 3a 	lds	r24, 0x3A80	; 0x803a80 <serRx+0x1>
    287e:	85 36       	cpi	r24, 0x65	; 101
    2880:	41 f0       	breq	.+16     	; 0x2892 <CheckInput+0xc0>
    2882:	80 91 80 3a 	lds	r24, 0x3A80	; 0x803a80 <serRx+0x1>
    2886:	86 36       	cpi	r24, 0x66	; 102
    2888:	21 f0       	breq	.+8      	; 0x2892 <CheckInput+0xc0>
    288a:	80 91 80 3a 	lds	r24, 0x3A80	; 0x803a80 <serRx+0x1>
    288e:	87 37       	cpi	r24, 0x77	; 119
    2890:	99 f6       	brne	.-90     	; 0x2838 <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    2892:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <specialInput+0x1>
    2896:	8f 5e       	subi	r24, 0xEF	; 239
    2898:	f8 01       	movw	r30, r16
    289a:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    289c:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx>
    28a0:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    28a2:	80 91 80 3a 	lds	r24, 0x3A80	; 0x803a80 <serRx+0x1>
    28a6:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    28a8:	14 82       	std	Z+4, r1	; 0x04
    28aa:	82 c1       	rjmp	.+772    	; 0x2bb0 <CheckInput+0x3de>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    28ac:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx>
    28b0:	83 32       	cpi	r24, 0x23	; 35
    28b2:	89 f5       	brne	.+98     	; 0x2916 <CheckInput+0x144>
    28b4:	8d b3       	in	r24, 0x1d	; 29
    28b6:	86 30       	cpi	r24, 0x06	; 6
    28b8:	71 f5       	brne	.+92     	; 0x2916 <CheckInput+0x144>
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    28c0:	fc 01       	movw	r30, r24
    28c2:	e1 58       	subi	r30, 0x81	; 129
    28c4:	f5 4c       	sbci	r31, 0xC5	; 197
    28c6:	20 81       	ld	r18, Z
    28c8:	20 53       	subi	r18, 0x30	; 48
    28ca:	20 83       	st	Z, r18
                    bitNr *= 10;
    28cc:	11 0f       	add	r17, r17
    28ce:	21 2f       	mov	r18, r17
    28d0:	22 0f       	add	r18, r18
    28d2:	22 0f       	add	r18, r18
    28d4:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    28d6:	20 91 80 3a 	lds	r18, 0x3A80	; 0x803a80 <serRx+0x1>
    28da:	23 30       	cpi	r18, 0x03	; 3
    28dc:	48 f4       	brcc	.+18     	; 0x28f0 <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    28de:	20 81       	ld	r18, Z
    28e0:	2a 30       	cpi	r18, 0x0A	; 10
    28e2:	b8 f4       	brcc	.+46     	; 0x2912 <CheckInput+0x140>
                        bitNr += serRx[x];
    28e4:	20 81       	ld	r18, Z
    28e6:	12 0f       	add	r17, r18
    28e8:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    28ea:	84 30       	cpi	r24, 0x04	; 4
    28ec:	91 05       	cpc	r25, r1
    28ee:	41 f7       	brne	.-48     	; 0x28c0 <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    28f0:	81 2f       	mov	r24, r17
    28f2:	8f 77       	andi	r24, 0x7F	; 127
    28f4:	71 f0       	breq	.+28     	; 0x2912 <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    28f6:	80 91 83 3a 	lds	r24, 0x3A83	; 0x803a83 <serRx+0x4>
    28fa:	60 91 84 3a 	lds	r22, 0x3A84	; 0x803a84 <serRx+0x5>
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	78 2b       	or	r23, r24
    2902:	81 2f       	mov	r24, r17
    2904:	80 95       	com	r24
    2906:	5b dc       	rcall	.-1866   	; 0x21be <Cheat>
    2908:	88 23       	and	r24, r24
    290a:	19 f0       	breq	.+6      	; 0x2912 <CheckInput+0x140>
    290c:	81 2f       	mov	r24, r17
    290e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	48 c1       	rjmp	.+656    	; 0x2ba6 <CheckInput+0x3d4>
    2916:	d8 01       	movw	r26, r16
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    291c:	fc 01       	movw	r30, r24
    291e:	e1 58       	subi	r30, 0x81	; 129
    2920:	f5 4c       	sbci	r31, 0xC5	; 197
    2922:	20 81       	ld	r18, Z
    2924:	21 34       	cpi	r18, 0x41	; 65
    2926:	18 f0       	brcs	.+6      	; 0x292e <CheckInput+0x15c>
    2928:	20 81       	ld	r18, Z
    292a:	2b 35       	cpi	r18, 0x5B	; 91
    292c:	10 f0       	brcs	.+4      	; 0x2932 <CheckInput+0x160>
    292e:	20 81       	ld	r18, Z
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <CheckInput+0x164>
    2932:	20 81       	ld	r18, Z
    2934:	20 62       	ori	r18, 0x20	; 32
    2936:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2938:	20 81       	ld	r18, Z
    293a:	21 11       	cpse	r18, r1
    293c:	05 c0       	rjmp	.+10     	; 0x2948 <CheckInput+0x176>
                    data[x] = 0;
    293e:	f8 01       	movw	r30, r16
    2940:	e8 0f       	add	r30, r24
    2942:	f1 1d       	adc	r31, r1
    2944:	10 82       	st	Z, r1
                    break;
    2946:	05 c0       	rjmp	.+10     	; 0x2952 <CheckInput+0x180>
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    294c:	81 34       	cpi	r24, 0x41	; 65
    294e:	91 05       	cpc	r25, r1
    2950:	29 f7       	brne	.-54     	; 0x291c <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2952:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx>
                data[0] = 0;
    2956:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2958:	81 11       	cpse	r24, r1
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <CheckInput+0x194>
                data[0] = 0;
    295c:	10 82       	st	Z, r1
                RXCNT = 0;
    295e:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2960:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
    2964:	23 c1       	rjmp	.+582    	; 0x2bac <CheckInput+0x3da>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2966:	80 81       	ld	r24, Z
    2968:	8f 33       	cpi	r24, 0x3F	; 63
    296a:	11 f0       	breq	.+4      	; 0x2970 <CheckInput+0x19e>
    296c:	88 36       	cpi	r24, 0x68	; 104
    296e:	49 f4       	brne	.+18     	; 0x2982 <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2970:	83 e9       	ldi	r24, 0x93	; 147
    2972:	9b e7       	ldi	r25, 0x7B	; 123
    2974:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    2978:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    297c:	8d e6       	ldi	r24, 0x6D	; 109
    297e:	94 e0       	ldi	r25, 0x04	; 4
    2980:	0a c0       	rjmp	.+20     	; 0x2996 <CheckInput+0x1c4>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2982:	81 36       	cpi	r24, 0x61	; 97
    2984:	a1 f4       	brne	.+40     	; 0x29ae <CheckInput+0x1dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2986:	8e e6       	ldi	r24, 0x6E	; 110
    2988:	9a e7       	ldi	r25, 0x7A	; 122
    298a:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    298e:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    2992:	85 e2       	ldi	r24, 0x25	; 37
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    299a:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    29a6:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	fc c0       	rjmp	.+504    	; 0x2ba6 <CheckInput+0x3d4>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    29ae:	87 37       	cpi	r24, 0x77	; 119
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <CheckInput+0x1e2>
    29b2:	41 c0       	rjmp	.+130    	; 0x2a36 <CheckInput+0x264>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29b4:	8d e8       	ldi	r24, 0x8D	; 141
    29b6:	96 e7       	ldi	r25, 0x76	; 118
    29b8:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    29bc:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    29c0:	82 e1       	ldi	r24, 0x12	; 18
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    29c8:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    29cc:	21 e0       	ldi	r18, 0x01	; 1
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	20 93 a7 39 	sts	0x39A7, r18	; 0x8039a7 <reactStr+0x82>
    29d4:	30 93 a8 39 	sts	0x39A8, r19	; 0x8039a8 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    29d8:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	fc 01       	movw	r30, r24
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	e6 58       	subi	r30, 0x86	; 134
    29e6:	f0 44       	sbci	r31, 0x40	; 64
    29e8:	40 81       	ld	r20, Z
    29ea:	51 81       	ldd	r21, Z+1	; 0x01
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	fc 01       	movw	r30, r24
    29f2:	ee 58       	subi	r30, 0x8E	; 142
    29f4:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <reactStr+0x4>
    29fe:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    2a02:	40 93 69 39 	sts	0x3969, r20	; 0x803969 <reactStr+0x44>
    2a06:	50 93 6a 39 	sts	0x396A, r21	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    2a0a:	20 93 a9 39 	sts	0x39A9, r18	; 0x8039a9 <reactStr+0x84>
    2a0e:	30 93 aa 39 	sts	0x39AA, r19	; 0x8039aa <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a12:	8f e5       	ldi	r24, 0x5F	; 95
    2a14:	96 e7       	ldi	r25, 0x76	; 118
    2a16:	80 93 2b 39 	sts	0x392B, r24	; 0x80392b <reactStr+0x6>
    2a1a:	90 93 2c 39 	sts	0x392C, r25	; 0x80392c <reactStr+0x7>
    reactStr[1][number]=length;
    2a1e:	8a e1       	ldi	r24, 0x1A	; 26
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	80 93 6b 39 	sts	0x396B, r24	; 0x80396b <reactStr+0x46>
    2a26:	90 93 6c 39 	sts	0x396C, r25	; 0x80396c <reactStr+0x47>
    reactStr[2][number]=type;
    2a2a:	20 93 ab 39 	sts	0x39AB, r18	; 0x8039ab <reactStr+0x86>
    2a2e:	30 93 ac 39 	sts	0x39AC, r19	; 0x8039ac <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a32:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2a34:	b8 c0       	rjmp	.+368    	; 0x2ba6 <CheckInput+0x3d4>
    2a36:	60 e5       	ldi	r22, 0x50	; 80
    2a38:	7f eb       	ldi	r23, 0xBF	; 191
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	10 dc       	rcall	.-2016   	; 0x225e <StartsWith>
    2a3e:	88 23       	and	r24, r24
    2a40:	19 f1       	breq	.+70     	; 0x2a88 <CheckInput+0x2b6>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a42:	8e ee       	ldi	r24, 0xEE	; 238
    2a44:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    2a48:	8f ee       	ldi	r24, 0xEF	; 239
    2a4a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    2a4e:	80 ef       	ldi	r24, 0xF0	; 240
    2a50:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    2a54:	81 ef       	ldi	r24, 0xF1	; 241
    2a56:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
                }
                SaveGameState();
    2a5a:	0e 94 76 09 	call	0x12ec	; 0x12ec <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a5e:	89 e0       	ldi	r24, 0x09	; 9
    2a60:	e3 e6       	ldi	r30, 0x63	; 99
    2a62:	ff eb       	ldi	r31, 0xBF	; 191
    2a64:	de 01       	movw	r26, r28
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	01 90       	ld	r0, Z+
    2a6a:	0d 92       	st	X+, r0
    2a6c:	8a 95       	dec	r24
    2a6e:	e1 f7       	brne	.-8      	; 0x2a68 <CheckInput+0x296>
                SerSpeed(60);
    2a70:	8c e3       	ldi	r24, 0x3C	; 60
    2a72:	0e 94 9a 08 	call	0x1134	; 0x1134 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a76:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a7a:	88 23       	and	r24, r24
    2a7c:	e1 f3       	breq	.-8      	; 0x2a76 <CheckInput+0x2a4>
    2a7e:	ce 01       	movw	r24, r28
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	0e 94 89 08 	call	0x1112	; 0x1112 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2a86:	f7 cf       	rjmp	.-18     	; 0x2a76 <CheckInput+0x2a4>
    2a88:	66 e5       	ldi	r22, 0x56	; 86
    2a8a:	7f eb       	ldi	r23, 0xBF	; 191
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	e7 db       	rcall	.-2098   	; 0x225e <StartsWith>
    2a90:	88 23       	and	r24, r24
    2a92:	81 f1       	breq	.+96     	; 0x2af4 <CheckInput+0x322>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	8a 87       	std	Y+10, r24	; 0x0a
    2a98:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	be 01       	movw	r22, r28
    2a9e:	66 5f       	subi	r22, 0xF6	; 246
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	81 2f       	mov	r24, r17
    2aa4:	0e 94 25 08 	call	0x104a	; 0x104a <EEWrite>
    2aa8:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2aaa:	10 32       	cpi	r17, 0x20	; 32
    2aac:	b1 f7       	brne	.-20     	; 0x2a9a <CheckInput+0x2c8>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2aae:	8e ee       	ldi	r24, 0xEE	; 238
    2ab0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    2ab4:	8f ee       	ldi	r24, 0xEF	; 239
    2ab6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    2aba:	80 ef       	ldi	r24, 0xF0	; 240
    2abc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    2ac0:	81 ef       	ldi	r24, 0xF1	; 241
    2ac2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
                }
                
                SaveGameState();
    2ac6:	0e 94 76 09 	call	0x12ec	; 0x12ec <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2aca:	88 e0       	ldi	r24, 0x08	; 8
    2acc:	ec e6       	ldi	r30, 0x6C	; 108
    2ace:	ff eb       	ldi	r31, 0xBF	; 191
    2ad0:	de 01       	movw	r26, r28
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	01 90       	ld	r0, Z+
    2ad6:	0d 92       	st	X+, r0
    2ad8:	8a 95       	dec	r24
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <CheckInput+0x302>
                SerSpeed(60);
    2adc:	8c e3       	ldi	r24, 0x3C	; 60
    2ade:	0e 94 9a 08 	call	0x1134	; 0x1134 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2ae2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2ae6:	88 23       	and	r24, r24
    2ae8:	e1 f3       	breq	.-8      	; 0x2ae2 <CheckInput+0x310>
    2aea:	ce 01       	movw	r24, r28
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	0e 94 89 08 	call	0x1112	; 0x1112 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2af2:	f7 cf       	rjmp	.-18     	; 0x2ae2 <CheckInput+0x310>
    2af4:	6d e5       	ldi	r22, 0x5D	; 93
    2af6:	7f eb       	ldi	r23, 0xBF	; 191
    2af8:	c8 01       	movw	r24, r16
    2afa:	b1 db       	rcall	.-2206   	; 0x225e <StartsWith>
    2afc:	88 23       	and	r24, r24
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <CheckInput+0x330>
    2b00:	9b ce       	rjmp	.-714    	; 0x2838 <CheckInput+0x66>
    2b02:	85 e2       	ldi	r24, 0x25	; 37
    2b04:	c8 2e       	mov	r12, r24
    2b06:	89 e3       	ldi	r24, 0x39	; 57
    2b08:	d8 2e       	mov	r13, r24
    2b0a:	95 e6       	ldi	r25, 0x65	; 101
    2b0c:	e9 2e       	mov	r14, r25
    2b0e:	99 e3       	ldi	r25, 0x39	; 57
    2b10:	f9 2e       	mov	r15, r25
    2b12:	05 ea       	ldi	r16, 0xA5	; 165
    2b14:	19 e3       	ldi	r17, 0x39	; 57
    2b16:	28 e1       	ldi	r18, 0x18	; 24
    2b18:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2b1a:	aa 24       	eor	r10, r10
    2b1c:	a3 94       	inc	r10
    2b1e:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b20:	47 e5       	ldi	r20, 0x57	; 87
    2b22:	84 2e       	mov	r8, r20
    2b24:	4a e7       	ldi	r20, 0x7A	; 122
    2b26:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2b28:	52 e0       	ldi	r21, 0x02	; 2
    2b2a:	65 2e       	mov	r6, r21
    2b2c:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	be 01       	movw	r22, r28
    2b32:	6f 5f       	subi	r22, 0xFF	; 255
    2b34:	7f 4f       	sbci	r23, 0xFF	; 255
    2b36:	85 2d       	mov	r24, r5
    2b38:	0e 94 15 08 	call	0x102a	; 0x102a <EERead>
                    bit = 0xff-bit;
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	80 95       	com	r24
    2b40:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b42:	28 2f       	mov	r18, r24
    2b44:	22 95       	swap	r18
    2b46:	2f 70       	andi	r18, 0x0F	; 15
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	23 57       	subi	r18, 0x73	; 115
    2b4c:	3b 48       	sbci	r19, 0x8B	; 139
    2b4e:	f6 01       	movw	r30, r12
    2b50:	20 83       	st	Z, r18
    2b52:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b54:	f7 01       	movw	r30, r14
    2b56:	a0 82       	st	Z, r10
    2b58:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	a0 82       	st	Z, r10
    2b5e:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b60:	8f 70       	andi	r24, 0x0F	; 15
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	83 57       	subi	r24, 0x73	; 115
    2b66:	9b 48       	sbci	r25, 0x8B	; 139
    2b68:	f6 01       	movw	r30, r12
    2b6a:	82 83       	std	Z+2, r24	; 0x02
    2b6c:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2b6e:	f7 01       	movw	r30, r14
    2b70:	a2 82       	std	Z+2, r10	; 0x02
    2b72:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2b74:	f8 01       	movw	r30, r16
    2b76:	a2 82       	std	Z+2, r10	; 0x02
    2b78:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b7a:	f6 01       	movw	r30, r12
    2b7c:	84 82       	std	Z+4, r8	; 0x04
    2b7e:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2b80:	f7 01       	movw	r30, r14
    2b82:	64 82       	std	Z+4, r6	; 0x04
    2b84:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2b86:	f8 01       	movw	r30, r16
    2b88:	a4 82       	std	Z+4, r10	; 0x04
    2b8a:	b5 82       	std	Z+5, r11	; 0x05
    2b8c:	53 94       	inc	r5
    2b8e:	f6 e0       	ldi	r31, 0x06	; 6
    2b90:	cf 0e       	add	r12, r31
    2b92:	d1 1c       	adc	r13, r1
    2b94:	86 e0       	ldi	r24, 0x06	; 6
    2b96:	e8 0e       	add	r14, r24
    2b98:	f1 1c       	adc	r15, r1
    2b9a:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9e:	e0 e2       	ldi	r30, 0x20	; 32
    2ba0:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2ba2:	c5 cf       	rjmp	.-118    	; 0x2b2e <CheckInput+0x35c>
    2ba4:	88 e1       	ldi	r24, 0x18	; 24
    2ba6:	b2 db       	rcall	.-2204   	; 0x230c <SetStandardResponse>
    2ba8:	80 93 24 39 	sts	0x3924, r24	; 0x803924 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2bac:	ff 24       	eor	r15, r15
    2bae:	f3 94       	inc	r15
}
    2bb0:	8f 2d       	mov	r24, r15
    2bb2:	2a 96       	adiw	r28, 0x0a	; 10
    2bb4:	ef e0       	ldi	r30, 0x0F	; 15
    2bb6:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__epilogue_restores__+0x6>

00002bba <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2bba:	ab e2       	ldi	r26, 0x2B	; 43
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e3 ee       	ldi	r30, 0xE3	; 227
    2bc0:	f5 e1       	ldi	r31, 0x15	; 21
    2bc2:	0c 94 3e 1f 	jmp	0x3e7c	; 0x3e7c <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2bc6:	99 24       	eor	r9, r9
    2bc8:	93 94       	inc	r9
    2bca:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	fc 01       	movw	r30, r24
    2bd0:	ee 0f       	add	r30, r30
    2bd2:	ff 1f       	adc	r31, r31
    2bd4:	eb 5d       	subi	r30, 0xDB	; 219
    2bd6:	f6 4c       	sbci	r31, 0xC6	; 198
    2bd8:	2c ec       	ldi	r18, 0xCC	; 204
    2bda:	37 e7       	ldi	r19, 0x77	; 119
    2bdc:	20 83       	st	Z, r18
    2bde:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2be0:	fc 01       	movw	r30, r24
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	eb 59       	subi	r30, 0x9B	; 155
    2be8:	f6 4c       	sbci	r31, 0xC6	; 198
    2bea:	26 e1       	ldi	r18, 0x16	; 22
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	20 83       	st	Z, r18
    2bf0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	eb 55       	subi	r30, 0x5B	; 91
    2bfa:	f6 4c       	sbci	r31, 0xC6	; 198
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	04 e4       	ldi	r16, 0x44	; 68
    2c06:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c08:	37 e5       	ldi	r19, 0x57	; 87
    2c0a:	e3 2e       	mov	r14, r19
    2c0c:	3a e7       	ldi	r19, 0x7A	; 122
    2c0e:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2c10:	42 e0       	ldi	r20, 0x02	; 2
    2c12:	c4 2e       	mov	r12, r20
    2c14:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2c16:	aa 24       	eor	r10, r10
    2c18:	a3 94       	inc	r10
    2c1a:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	81 91       	ld	r24, Z+
    2c20:	91 91       	ld	r25, Z+
    2c22:	8f 01       	movw	r16, r30
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	c9 f1       	breq	.+114    	; 0x2c9a <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2c28:	be 01       	movw	r22, r28
    2c2a:	6f 5f       	subi	r22, 0xFF	; 255
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	ea db       	rcall	.-2092   	; 0x2404 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c30:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2c32:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c34:	89 2d       	mov	r24, r9
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	fc 01       	movw	r30, r24
    2c3a:	ee 0f       	add	r30, r30
    2c3c:	ff 1f       	adc	r31, r31
    2c3e:	eb 5d       	subi	r30, 0xDB	; 219
    2c40:	f6 4c       	sbci	r31, 0xC6	; 198
    2c42:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c44:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c46:	40 83       	st	Z, r20
    2c48:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	ee 0f       	add	r30, r30
    2c4e:	ff 1f       	adc	r31, r31
    2c50:	eb 59       	subi	r30, 0x9B	; 155
    2c52:	f6 4c       	sbci	r31, 0xC6	; 198
    2c54:	20 83       	st	Z, r18
    2c56:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	eb 55       	subi	r30, 0x5B	; 91
    2c60:	f6 4c       	sbci	r31, 0xC6	; 198
    2c62:	10 82       	st	Z, r1
    2c64:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	89 0d       	add	r24, r9
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	93 94       	inc	r9
    2c6e:	93 94       	inc	r9
    2c70:	fc 01       	movw	r30, r24
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	eb 5d       	subi	r30, 0xDB	; 219
    2c78:	f6 4c       	sbci	r31, 0xC6	; 198
    2c7a:	e0 82       	st	Z, r14
    2c7c:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2c7e:	fc 01       	movw	r30, r24
    2c80:	ee 0f       	add	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	eb 59       	subi	r30, 0x9B	; 155
    2c86:	f6 4c       	sbci	r31, 0xC6	; 198
    2c88:	c0 82       	st	Z, r12
    2c8a:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	fc 01       	movw	r30, r24
    2c92:	eb 55       	subi	r30, 0x5B	; 91
    2c94:	f6 4c       	sbci	r31, 0xC6	; 198
    2c96:	a0 82       	st	Z, r10
    2c98:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2c9a:	f8 e3       	ldi	r31, 0x38	; 56
    2c9c:	08 34       	cpi	r16, 0x48	; 72
    2c9e:	1f 07       	cpc	r17, r31
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <ShowInventory+0xea>
    2ca2:	bc cf       	rjmp	.-136    	; 0x2c1c <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2ca4:	8f ef       	ldi	r24, 0xFF	; 255
    2ca6:	89 0d       	add	r24, r9
    2ca8:	ab 96       	adiw	r28, 0x2b	; 43
    2caa:	eb e0       	ldi	r30, 0x0B	; 11
    2cac:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <__epilogue_restores__+0xe>

00002cb0 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2cb0:	a8 e0       	ldi	r26, 0x08	; 8
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	ee e5       	ldi	r30, 0x5E	; 94
    2cb6:	f6 e1       	ldi	r31, 0x16	; 22
    2cb8:	0c 94 3b 1f 	jmp	0x3e76	; 0x3e76 <__prologue_saves__+0x8>
    2cbc:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2cbe:	ce dc       	rcall	.-1636   	; 0x265c <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2cc0:	c3 01       	movw	r24, r6
    2cc2:	cc dc       	rcall	.-1640   	; 0x265c <CleanInput>
    2cc4:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cc6:	29 e5       	ldi	r18, 0x59	; 89
    2cc8:	3a e7       	ldi	r19, 0x7A	; 122
    2cca:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr>
    2cce:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x1>
    reactStr[1][number]=length;
    2cd2:	84 e0       	ldi	r24, 0x04	; 4
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x40>
    2cda:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x41>
    reactStr[2][number]=type;
    2cde:	01 e0       	ldi	r16, 0x01	; 1
    2ce0:	10 e0       	ldi	r17, 0x00	; 0
    2ce2:	00 93 a5 39 	sts	0x39A5, r16	; 0x8039a5 <reactStr+0x80>
    2ce6:	10 93 a6 39 	sts	0x39A6, r17	; 0x8039a6 <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2cea:	ff 20       	and	r15, r15
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <ProcessInput+0x40>
    2cee:	54 c7       	rjmp	.+3752   	; 0x3b98 <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2cf0:	d3 01       	movw	r26, r6
    2cf2:	8c 91       	ld	r24, X
    2cf4:	88 37       	cpi	r24, 0x78	; 120
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <ProcessInput+0x4a>
    2cf8:	45 c0       	rjmp	.+138    	; 0x2d84 <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2cfa:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2cfe:	e8 2f       	mov	r30, r24
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	ee 0f       	add	r30, r30
    2d04:	ff 1f       	adc	r31, r31
    2d06:	eb 51       	subi	r30, 0x1B	; 27
    2d08:	f6 4c       	sbci	r31, 0xC6	; 198
    2d0a:	20 81       	ld	r18, Z
    2d0c:	31 81       	ldd	r19, Z+1	; 0x01
    2d0e:	23 2b       	or	r18, r19
    2d10:	11 f0       	breq	.+4      	; 0x2d16 <ProcessInput+0x66>
    2d12:	81 11       	cpse	r24, r1
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d16:	84 e4       	ldi	r24, 0x44	; 68
    2d18:	96 e7       	ldi	r25, 0x76	; 118
    2d1a:	13 c5       	rjmp	.+2598   	; 0x3742 <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2d1c:	80 91 2b 3a 	lds	r24, 0x3A2B	; 0x803a2b <currObj+0x6>
    2d20:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
    2d24:	88 23       	and	r24, r24
    2d26:	b9 f0       	breq	.+46     	; 0x2d56 <ProcessInput+0xa6>
                --currDepth;
    2d28:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2d2c:	e1 50       	subi	r30, 0x01	; 1
    2d2e:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	ee 0f       	add	r30, r30
    2d36:	ff 1f       	adc	r31, r31
    2d38:	eb 51       	subi	r30, 0x1B	; 27
    2d3a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d3c:	65 e2       	ldi	r22, 0x25	; 37
    2d3e:	7a e3       	ldi	r23, 0x3A	; 58
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	5f db       	rcall	.-2370   	; 0x2404 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2d46:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0x4>
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2d50:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2d54:	2a c2       	rjmp	.+1108   	; 0x31aa <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2d56:	80 91 47 3a 	lds	r24, 0x3A47	; 0x803a47 <currObj+0x22>
    2d5a:	90 91 48 3a 	lds	r25, 0x3A48	; 0x803a48 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d5e:	20 91 39 3a 	lds	r18, 0x3A39	; 0x803a39 <currObj+0x14>
    2d62:	30 91 3a 3a 	lds	r19, 0x3A3A	; 0x803a3a <currObj+0x15>
    2d66:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    2d6a:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    2d6e:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    2d72:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    2d76:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    2d7a:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2d7e:	80 91 4d 3a 	lds	r24, 0x3A4D	; 0x803a4d <currObj+0x28>
    2d82:	a9 c5       	rjmp	.+2898   	; 0x38d6 <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2d84:	85 36       	cpi	r24, 0x65	; 101
    2d86:	19 f0       	breq	.+6      	; 0x2d8e <ProcessInput+0xde>
    2d88:	8f 36       	cpi	r24, 0x6F	; 111
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <ProcessInput+0xde>
    2d8c:	de c0       	rjmp	.+444    	; 0x2f4a <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2d8e:	b2 e0       	ldi	r27, 0x02	; 2
    2d90:	fb 12       	cpse	r15, r27
    2d92:	c1 cf       	rjmp	.-126    	; 0x2d16 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2d94:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    2d98:	10 e0       	ldi	r17, 0x00	; 0
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	ee 0f       	add	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	eb 51       	subi	r30, 0x1B	; 27
    2da2:	f6 4c       	sbci	r31, 0xC6	; 198
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	50 e0       	ldi	r21, 0x00	; 0
    2da8:	d3 01       	movw	r26, r6
    2daa:	11 96       	adiw	r26, 0x01	; 1
    2dac:	6c 91       	ld	r22, X
    2dae:	80 81       	ld	r24, Z
    2db0:	91 81       	ldd	r25, Z+1	; 0x01
    2db2:	e8 db       	rcall	.-2096   	; 0x2584 <FindChild>
    2db4:	00 0f       	add	r16, r16
    2db6:	11 1f       	adc	r17, r17
    2db8:	f8 01       	movw	r30, r16
    2dba:	e9 51       	subi	r30, 0x19	; 25
    2dbc:	f6 4c       	sbci	r31, 0xC6	; 198
    2dbe:	80 83       	st	Z, r24
    2dc0:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2dc2:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    2dc6:	29 2f       	mov	r18, r25
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	f9 01       	movw	r30, r18
    2dcc:	ee 0f       	add	r30, r30
    2dce:	ff 1f       	adc	r31, r31
    2dd0:	e9 51       	subi	r30, 0x19	; 25
    2dd2:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd4:	40 81       	ld	r20, Z
    2dd6:	51 81       	ldd	r21, Z+1	; 0x01
    2dd8:	41 15       	cp	r20, r1
    2dda:	51 05       	cpc	r21, r1
    2ddc:	21 f0       	breq	.+8      	; 0x2de6 <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2dde:	64 ee       	ldi	r22, 0xE4	; 228
    2de0:	78 e3       	ldi	r23, 0x38	; 56
    2de2:	ca 01       	movw	r24, r20
    2de4:	1c c0       	rjmp	.+56     	; 0x2e1e <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2de6:	99 23       	and	r25, r25
    2de8:	09 f4       	brne	.+2      	; 0x2dec <ProcessInput+0x13c>
    2dea:	dc c6       	rjmp	.+3512   	; 0x3ba4 <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2dec:	22 0f       	add	r18, r18
    2dee:	33 1f       	adc	r19, r19
    2df0:	f9 01       	movw	r30, r18
    2df2:	ed 51       	subi	r30, 0x1D	; 29
    2df4:	f6 4c       	sbci	r31, 0xC6	; 198
    2df6:	d3 01       	movw	r26, r6
    2df8:	11 96       	adiw	r26, 0x01	; 1
    2dfa:	6c 91       	ld	r22, X
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	7a db       	rcall	.-2316   	; 0x24f6 <CheckLetter>
    2e02:	88 23       	and	r24, r24
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <ProcessInput+0x158>
    2e06:	ce c6       	rjmp	.+3484   	; 0x3ba4 <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2e08:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	ee 0f       	add	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	ed 51       	subi	r30, 0x1D	; 29
    2e14:	f6 4c       	sbci	r31, 0xC6	; 198
    2e16:	64 ee       	ldi	r22, 0xE4	; 228
    2e18:	78 e3       	ldi	r23, 0x38	; 56
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	f2 da       	rcall	.-2588   	; 0x2404 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2e20:	d3 01       	movw	r26, r6
    2e22:	8c 91       	ld	r24, X
    2e24:	85 36       	cpi	r24, 0x65	; 101
    2e26:	c1 f4       	brne	.+48     	; 0x2e58 <ProcessInput+0x1a8>
    2e28:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3991+0x8>
    2e2c:	80 fd       	sbrc	r24, 0
    2e2e:	1d c0       	rjmp	.+58     	; 0x2e6a <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e30:	8d e9       	ldi	r24, 0x9D	; 157
    2e32:	99 e7       	ldi	r25, 0x79	; 121
    2e34:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    2e38:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    2e3c:	8e e1       	ldi	r24, 0x1E	; 30
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    2e44:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    2e50:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2e54:	12 e0       	ldi	r17, 0x02	; 2
    2e56:	97 c6       	rjmp	.+3374   	; 0x3b86 <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2e58:	8f 36       	cpi	r24, 0x6F	; 111
    2e5a:	39 f4       	brne	.+14     	; 0x2e6a <ProcessInput+0x1ba>
    2e5c:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3991+0x8>
    2e60:	81 fd       	sbrc	r24, 1
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e64:	82 e8       	ldi	r24, 0x82	; 130
    2e66:	99 e7       	ldi	r25, 0x79	; 121
    2e68:	6c c4       	rjmp	.+2264   	; 0x3742 <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2e6a:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3991+0x6>
    2e6e:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
    2e72:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2e76:	88 23       	and	r24, r24
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <ProcessInput+0x1cc>
    2e7a:	49 c0       	rjmp	.+146    	; 0x2f0e <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2e7c:	ae 2f       	mov	r26, r30
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	aa 0f       	add	r26, r26
    2e82:	bb 1f       	adc	r27, r27
    2e84:	a9 51       	subi	r26, 0x19	; 25
    2e86:	b6 4c       	sbci	r27, 0xC6	; 198
    2e88:	8d 91       	ld	r24, X+
    2e8a:	9c 91       	ld	r25, X
    2e8c:	89 2b       	or	r24, r25
    2e8e:	11 f0       	breq	.+4      	; 0x2e94 <ProcessInput+0x1e4>
    2e90:	ef 5f       	subi	r30, 0xFF	; 255
    2e92:	01 c0       	rjmp	.+2      	; 0x2e96 <ProcessInput+0x1e6>
    2e94:	e1 50       	subi	r30, 0x01	; 1
    2e96:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2e9a:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	ee 0f       	add	r30, r30
    2ea2:	ff 1f       	adc	r31, r31
    2ea4:	eb 51       	subi	r30, 0x1B	; 27
    2ea6:	f6 4c       	sbci	r31, 0xC6	; 198
    2ea8:	65 e2       	ldi	r22, 0x25	; 37
    2eaa:	7a e3       	ldi	r23, 0x3A	; 58
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	a9 da       	rcall	.-2734   	; 0x2404 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2eb2:	80 91 41 3a 	lds	r24, 0x3A41	; 0x803a41 <currObj+0x1c>
    2eb6:	90 91 42 3a 	lds	r25, 0x3A42	; 0x803a42 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eba:	20 91 33 3a 	lds	r18, 0x3A33	; 0x803a33 <currObj+0xe>
    2ebe:	30 91 34 3a 	lds	r19, 0x3A34	; 0x803a34 <currObj+0xf>
    2ec2:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    2ec6:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    2eca:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    2ece:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    2ed2:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    2ed6:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eda:	89 e5       	ldi	r24, 0x59	; 89
    2edc:	9a e7       	ldi	r25, 0x7A	; 122
    2ede:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <reactStr+0x4>
    2ee2:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	80 93 69 39 	sts	0x3969, r24	; 0x803969 <reactStr+0x44>
    2eee:	90 93 6a 39 	sts	0x396A, r25	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	80 93 a9 39 	sts	0x39A9, r24	; 0x8039a9 <reactStr+0x84>
    2efa:	90 93 aa 39 	sts	0x39AA, r25	; 0x8039aa <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2efe:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0x4>
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2f08:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2f0c:	07 c4       	rjmp	.+2062   	; 0x371c <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	ee 0f       	add	r30, r30
    2f12:	ff 1f       	adc	r31, r31
    2f14:	e9 51       	subi	r30, 0x19	; 25
    2f16:	f6 4c       	sbci	r31, 0xC6	; 198
    2f18:	10 82       	st	Z, r1
    2f1a:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2f1c:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3991+0x22>
    2f20:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3991+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f24:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3991+0x14>
    2f28:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3991+0x15>
    2f2c:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    2f30:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    2f34:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    2f38:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    2f3c:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    2f40:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2f44:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3991+0x28>
    2f48:	c6 c4       	rjmp	.+2444   	; 0x38d6 <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2f4a:	8c 36       	cpi	r24, 0x6C	; 108
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <ProcessInput+0x2a0>
    2f4e:	59 c1       	rjmp	.+690    	; 0x3202 <ProcessInput+0x552>
    2f50:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
            if (inputLen == 1) {
    2f54:	b1 e0       	ldi	r27, 0x01	; 1
    2f56:	fb 12       	cpse	r15, r27
    2f58:	f1 c0       	rjmp	.+482    	; 0x313c <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f5a:	80 91 41 3a 	lds	r24, 0x3A41	; 0x803a41 <currObj+0x1c>
    2f5e:	90 91 42 3a 	lds	r25, 0x3A42	; 0x803a42 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f62:	40 91 33 3a 	lds	r20, 0x3A33	; 0x803a33 <currObj+0xe>
    2f66:	50 91 34 3a 	lds	r21, 0x3A34	; 0x803a34 <currObj+0xf>
    2f6a:	40 93 27 39 	sts	0x3927, r20	; 0x803927 <reactStr+0x2>
    2f6e:	50 93 28 39 	sts	0x3928, r21	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    2f72:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    2f76:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    2f7a:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    2f7e:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f82:	20 93 29 39 	sts	0x3929, r18	; 0x803929 <reactStr+0x4>
    2f86:	30 93 2a 39 	sts	0x392A, r19	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	80 93 69 39 	sts	0x3969, r24	; 0x803969 <reactStr+0x44>
    2f92:	90 93 6a 39 	sts	0x396A, r25	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    2f96:	00 93 a9 39 	sts	0x39A9, r16	; 0x8039a9 <reactStr+0x84>
    2f9a:	10 93 aa 39 	sts	0x39AA, r17	; 0x8039aa <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f9e:	8b ee       	ldi	r24, 0xEB	; 235
    2fa0:	99 e7       	ldi	r25, 0x79	; 121
    2fa2:	80 93 2b 39 	sts	0x392B, r24	; 0x80392b <reactStr+0x6>
    2fa6:	90 93 2c 39 	sts	0x392C, r25	; 0x80392c <reactStr+0x7>
    reactStr[1][number]=length;
    2faa:	85 e1       	ldi	r24, 0x15	; 21
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	80 93 6b 39 	sts	0x396B, r24	; 0x80396b <reactStr+0x46>
    2fb2:	90 93 6c 39 	sts	0x396C, r25	; 0x80396c <reactStr+0x47>
    reactStr[2][number]=type;
    2fb6:	00 93 ab 39 	sts	0x39AB, r16	; 0x8039ab <reactStr+0x86>
    2fba:	10 93 ac 39 	sts	0x39AC, r17	; 0x8039ac <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	ee 0f       	add	r30, r30
    2fc2:	ff 1f       	adc	r31, r31
    2fc4:	e9 51       	subi	r30, 0x19	; 25
    2fc6:	f6 4c       	sbci	r31, 0xC6	; 198
    2fc8:	10 82       	st	Z, r1
    2fca:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2fcc:	14 e0       	ldi	r17, 0x04	; 4
    2fce:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fd0:	07 e5       	ldi	r16, 0x57	; 87
    2fd2:	e0 2e       	mov	r14, r16
    2fd4:	0a e7       	ldi	r16, 0x7A	; 122
    2fd6:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	c8 2e       	mov	r12, r24
    2fdc:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2fde:	aa 24       	eor	r10, r10
    2fe0:	a3 94       	inc	r10
    2fe2:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2fe4:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	8c 01       	movw	r16, r24
    2fec:	00 0f       	add	r16, r16
    2fee:	11 1f       	adc	r17, r17
    2ff0:	09 51       	subi	r16, 0x19	; 25
    2ff2:	16 4c       	sbci	r17, 0xC6	; 198
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	40 81       	ld	r20, Z
    2ff8:	51 81       	ldd	r21, Z+1	; 0x01
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	fc 01       	movw	r30, r24
    3000:	eb 51       	subi	r30, 0x1B	; 27
    3002:	f6 4c       	sbci	r31, 0xC6	; 198
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	bc da       	rcall	.-2696   	; 0x2584 <FindChild>
    300c:	d8 01       	movw	r26, r16
    300e:	8d 93       	st	X+, r24
    3010:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    3012:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	ee 0f       	add	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	e9 51       	subi	r30, 0x19	; 25
    301e:	f6 4c       	sbci	r31, 0xC6	; 198
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	09 f4       	brne	.+2      	; 0x302a <ProcessInput+0x37a>
    3028:	4a c0       	rjmp	.+148    	; 0x30be <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    302a:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    302e:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    3032:	82 17       	cp	r24, r18
    3034:	93 07       	cpc	r25, r19
    3036:	09 f4       	brne	.+2      	; 0x303a <ProcessInput+0x38a>
    3038:	42 c0       	rjmp	.+132    	; 0x30be <ProcessInput+0x40e>
    303a:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    303e:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    3042:	82 17       	cp	r24, r18
    3044:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    3046:	d9 f1       	breq	.+118    	; 0x30be <ProcessInput+0x40e>
    3048:	64 ee       	ldi	r22, 0xE4	; 228
    304a:	78 e3       	ldi	r23, 0x38	; 56
    304c:	db d9       	rcall	.-3146   	; 0x2404 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    304e:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3991+0x1a>
    3052:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3991+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3056:	e9 2d       	mov	r30, r9
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	df 01       	movw	r26, r30
    305c:	aa 0f       	add	r26, r26
    305e:	bb 1f       	adc	r27, r27
    3060:	ab 5d       	subi	r26, 0xDB	; 219
    3062:	b6 4c       	sbci	r27, 0xC6	; 198
    3064:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3991+0xc>
    3068:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3991+0xd>
    306c:	2d 93       	st	X+, r18
    306e:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    3070:	df 01       	movw	r26, r30
    3072:	aa 0f       	add	r26, r26
    3074:	bb 1f       	adc	r27, r27
    3076:	ab 59       	subi	r26, 0x9B	; 155
    3078:	b6 4c       	sbci	r27, 0xC6	; 198
    307a:	8d 93       	st	X+, r24
    307c:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    307e:	ee 0f       	add	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	eb 55       	subi	r30, 0x5B	; 91
    3084:	f6 4c       	sbci	r31, 0xC6	; 198
    3086:	10 82       	st	Z, r1
    3088:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	89 0d       	add	r24, r9
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	93 94       	inc	r9
    3092:	93 94       	inc	r9
    3094:	fc 01       	movw	r30, r24
    3096:	ee 0f       	add	r30, r30
    3098:	ff 1f       	adc	r31, r31
    309a:	eb 5d       	subi	r30, 0xDB	; 219
    309c:	f6 4c       	sbci	r31, 0xC6	; 198
    309e:	e0 82       	st	Z, r14
    30a0:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    30a2:	fc 01       	movw	r30, r24
    30a4:	ee 0f       	add	r30, r30
    30a6:	ff 1f       	adc	r31, r31
    30a8:	eb 59       	subi	r30, 0x9B	; 155
    30aa:	f6 4c       	sbci	r31, 0xC6	; 198
    30ac:	c0 82       	st	Z, r12
    30ae:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	fc 01       	movw	r30, r24
    30b6:	eb 55       	subi	r30, 0x5B	; 91
    30b8:	f6 4c       	sbci	r31, 0xC6	; 198
    30ba:	a0 82       	st	Z, r10
    30bc:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    30be:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    30c2:	82 2f       	mov	r24, r18
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	fc 01       	movw	r30, r24
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	e9 51       	subi	r30, 0x19	; 25
    30ce:	f6 4c       	sbci	r31, 0xC6	; 198
    30d0:	40 81       	ld	r20, Z
    30d2:	51 81       	ldd	r21, Z+1	; 0x01
    30d4:	45 2b       	or	r20, r21
    30d6:	09 f0       	breq	.+2      	; 0x30da <ProcessInput+0x42a>
    30d8:	85 cf       	rjmp	.-246    	; 0x2fe4 <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    30da:	22 23       	and	r18, r18
    30dc:	61 f1       	breq	.+88     	; 0x3136 <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	fc 01       	movw	r30, r24
    30e4:	ed 51       	subi	r30, 0x1D	; 29
    30e6:	f6 4c       	sbci	r31, 0xC6	; 198
    30e8:	64 ee       	ldi	r22, 0xE4	; 228
    30ea:	78 e3       	ldi	r23, 0x38	; 56
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	89 d9       	rcall	.-3310   	; 0x2404 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30f2:	20 91 fe 38 	lds	r18, 0x38FE	; 0x8038fe <actObj1.3991+0x1a>
    30f6:	30 91 ff 38 	lds	r19, 0x38FF	; 0x8038ff <actObj1.3991+0x1b>
    30fa:	11 e0       	ldi	r17, 0x01	; 1
    30fc:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30fe:	89 2d       	mov	r24, r9
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	fc 01       	movw	r30, r24
    3104:	ee 0f       	add	r30, r30
    3106:	ff 1f       	adc	r31, r31
    3108:	eb 5d       	subi	r30, 0xDB	; 219
    310a:	f6 4c       	sbci	r31, 0xC6	; 198
    310c:	40 91 f0 38 	lds	r20, 0x38F0	; 0x8038f0 <actObj1.3991+0xc>
    3110:	50 91 f1 38 	lds	r21, 0x38F1	; 0x8038f1 <actObj1.3991+0xd>
    3114:	40 83       	st	Z, r20
    3116:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3118:	fc 01       	movw	r30, r24
    311a:	ee 0f       	add	r30, r30
    311c:	ff 1f       	adc	r31, r31
    311e:	eb 59       	subi	r30, 0x9B	; 155
    3120:	f6 4c       	sbci	r31, 0xC6	; 198
    3122:	20 83       	st	Z, r18
    3124:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3126:	88 0f       	add	r24, r24
    3128:	99 1f       	adc	r25, r25
    312a:	fc 01       	movw	r30, r24
    312c:	eb 55       	subi	r30, 0x5B	; 91
    312e:	f6 4c       	sbci	r31, 0xC6	; 198
    3130:	10 82       	st	Z, r1
    3132:	11 82       	std	Z+1, r1	; 0x01
    3134:	28 c5       	rjmp	.+2640   	; 0x3b86 <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    3136:	1f ef       	ldi	r17, 0xFF	; 255
    3138:	19 0d       	add	r17, r9
    313a:	25 c5       	rjmp	.+2634   	; 0x3b86 <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    313c:	ee 2e       	mov	r14, r30
    313e:	f1 2c       	mov	r15, r1
    3140:	f7 01       	movw	r30, r14
    3142:	ee 0f       	add	r30, r30
    3144:	ff 1f       	adc	r31, r31
    3146:	eb 51       	subi	r30, 0x1B	; 27
    3148:	f6 4c       	sbci	r31, 0xC6	; 198
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	d3 01       	movw	r26, r6
    3150:	11 96       	adiw	r26, 0x01	; 1
    3152:	6c 91       	ld	r22, X
    3154:	80 81       	ld	r24, Z
    3156:	91 81       	ldd	r25, Z+1	; 0x01
    3158:	15 da       	rcall	.-3030   	; 0x2584 <FindChild>
    315a:	f7 01       	movw	r30, r14
    315c:	ee 0f       	add	r30, r30
    315e:	ff 1f       	adc	r31, r31
    3160:	e9 51       	subi	r30, 0x19	; 25
    3162:	f6 4c       	sbci	r31, 0xC6	; 198
    3164:	80 83       	st	Z, r24
    3166:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3168:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    316c:	29 2f       	mov	r18, r25
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	f9 01       	movw	r30, r18
    3172:	ee 0f       	add	r30, r30
    3174:	ff 1f       	adc	r31, r31
    3176:	e9 51       	subi	r30, 0x19	; 25
    3178:	f6 4c       	sbci	r31, 0xC6	; 198
    317a:	40 81       	ld	r20, Z
    317c:	51 81       	ldd	r21, Z+1	; 0x01
    317e:	41 15       	cp	r20, r1
    3180:	51 05       	cpc	r21, r1
    3182:	21 f0       	breq	.+8      	; 0x318c <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    3184:	64 ee       	ldi	r22, 0xE4	; 228
    3186:	78 e3       	ldi	r23, 0x38	; 56
    3188:	ca 01       	movw	r24, r20
    318a:	1c c0       	rjmp	.+56     	; 0x31c4 <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    318c:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    318e:	81 f1       	breq	.+96     	; 0x31f0 <ProcessInput+0x540>
    3190:	22 0f       	add	r18, r18
    3192:	33 1f       	adc	r19, r19
    3194:	f9 01       	movw	r30, r18
    3196:	ed 51       	subi	r30, 0x1D	; 29
    3198:	f6 4c       	sbci	r31, 0xC6	; 198
    319a:	d3 01       	movw	r26, r6
    319c:	11 96       	adiw	r26, 0x01	; 1
    319e:	6c 91       	ld	r22, X
    31a0:	80 81       	ld	r24, Z
    31a2:	91 81       	ldd	r25, Z+1	; 0x01
    31a4:	a8 d9       	rcall	.-3248   	; 0x24f6 <CheckLetter>
    31a6:	81 11       	cpse	r24, r1
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    31aa:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    31ac:	ec c4       	rjmp	.+2520   	; 0x3b86 <ProcessInput+0xed6>
    31ae:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	ee 0f       	add	r30, r30
    31b6:	ff 1f       	adc	r31, r31
    31b8:	ed 51       	subi	r30, 0x1D	; 29
    31ba:	f6 4c       	sbci	r31, 0xC6	; 198
    31bc:	64 ee       	ldi	r22, 0xE4	; 228
    31be:	78 e3       	ldi	r23, 0x38	; 56
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	1f d9       	rcall	.-3522   	; 0x2404 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    31c6:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3991+0x1c>
    31ca:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3991+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31ce:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3991+0xe>
    31d2:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3991+0xf>
    31d6:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    31da:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    31de:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    31e2:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    31e6:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    31ea:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
    31ee:	32 ce       	rjmp	.-924    	; 0x2e54 <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31f0:	81 ed       	ldi	r24, 0xD1	; 209
    31f2:	99 e7       	ldi	r25, 0x79	; 121
    31f4:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    31f8:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    31fc:	8a e1       	ldi	r24, 0x1A	; 26
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	c9 c2       	rjmp	.+1426   	; 0x3794 <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    3202:	80 37       	cpi	r24, 0x70	; 112
    3204:	09 f0       	breq	.+2      	; 0x3208 <ProcessInput+0x558>
    3206:	92 c0       	rjmp	.+292    	; 0x332c <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    3208:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    320c:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3210:	89 2b       	or	r24, r25
    3212:	79 f0       	breq	.+30     	; 0x3232 <ProcessInput+0x582>
    3214:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3218:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    321c:	89 2b       	or	r24, r25
    321e:	49 f0       	breq	.+18     	; 0x3232 <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3220:	87 e0       	ldi	r24, 0x07	; 7
    3222:	98 e7       	ldi	r25, 0x78	; 120
    3224:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3228:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    322c:	89 e5       	ldi	r24, 0x59	; 89
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b1 c2       	rjmp	.+1378   	; 0x3794 <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    3232:	b2 e0       	ldi	r27, 0x02	; 2
    3234:	fb 12       	cpse	r15, r27
    3236:	6f cd       	rjmp	.-1314   	; 0x2d16 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3238:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    323c:	10 e0       	ldi	r17, 0x00	; 0
    323e:	f8 01       	movw	r30, r16
    3240:	ee 0f       	add	r30, r30
    3242:	ff 1f       	adc	r31, r31
    3244:	eb 51       	subi	r30, 0x1B	; 27
    3246:	f6 4c       	sbci	r31, 0xC6	; 198
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	d3 01       	movw	r26, r6
    324e:	11 96       	adiw	r26, 0x01	; 1
    3250:	6c 91       	ld	r22, X
    3252:	80 81       	ld	r24, Z
    3254:	91 81       	ldd	r25, Z+1	; 0x01
    3256:	96 d9       	rcall	.-3284   	; 0x2584 <FindChild>
    3258:	00 0f       	add	r16, r16
    325a:	11 1f       	adc	r17, r17
    325c:	f8 01       	movw	r30, r16
    325e:	e9 51       	subi	r30, 0x19	; 25
    3260:	f6 4c       	sbci	r31, 0xC6	; 198
    3262:	80 83       	st	Z, r24
    3264:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3266:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	22 0f       	add	r18, r18
    3272:	33 1f       	adc	r19, r19
    3274:	f9 01       	movw	r30, r18
    3276:	eb 51       	subi	r30, 0x1B	; 27
    3278:	f6 4c       	sbci	r31, 0xC6	; 198
    327a:	80 81       	ld	r24, Z
    327c:	91 81       	ldd	r25, Z+1	; 0x01
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	09 f4       	brne	.+2      	; 0x3284 <ProcessInput+0x5d4>
    3282:	38 c3       	rjmp	.+1648   	; 0x38f4 <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    3284:	40 91 44 38 	lds	r20, 0x3844	; 0x803844 <inventory>
    3288:	50 91 45 38 	lds	r21, 0x3845	; 0x803845 <inventory+0x1>
    328c:	84 17       	cp	r24, r20
    328e:	95 07       	cpc	r25, r21
    3290:	39 f0       	breq	.+14     	; 0x32a0 <ProcessInput+0x5f0>
    3292:	40 91 46 38 	lds	r20, 0x3846	; 0x803846 <inventory+0x2>
    3296:	50 91 47 38 	lds	r21, 0x3847	; 0x803847 <inventory+0x3>
    329a:	84 17       	cp	r24, r20
    329c:	95 07       	cpc	r25, r21
    329e:	c1 f4       	brne	.+48     	; 0x32d0 <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32a0:	82 ee       	ldi	r24, 0xE2	; 226
    32a2:	97 e7       	ldi	r25, 0x77	; 119
    32a4:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    32a8:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    32ac:	85 e2       	ldi	r24, 0x25	; 37
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    32b4:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    32c0:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    32c4:	f9 01       	movw	r30, r18
    32c6:	eb 51       	subi	r30, 0x1B	; 27
    32c8:	f6 4c       	sbci	r31, 0xC6	; 198
    32ca:	10 82       	st	Z, r1
    32cc:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    32ce:	c2 cd       	rjmp	.-1148   	; 0x2e54 <ProcessInput+0x1a4>
    32d0:	64 ee       	ldi	r22, 0xE4	; 228
    32d2:	78 e3       	ldi	r23, 0x38	; 56
    32d4:	97 d8       	rcall	.-3794   	; 0x2404 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    32d6:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3991+0x7>
    32da:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
    32de:	88 23       	and	r24, r24
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <ProcessInput+0x634>
    32e2:	e3 c2       	rjmp	.+1478   	; 0x38aa <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    32e4:	80 91 ef 38 	lds	r24, 0x38EF	; 0x8038ef <actObj1.3991+0xb>
    32e8:	88 23       	and	r24, r24
    32ea:	09 f4       	brne	.+2      	; 0x32ee <ProcessInput+0x63e>
    32ec:	14 cd       	rjmp	.-1496   	; 0x2d16 <ProcessInput+0x66>
                                if (inventory[0]) {
    32ee:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    32f2:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    32f6:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                                    inventory[1] = route[currDepth+1];
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	ee 0f       	add	r30, r30
    32fe:	ff 1f       	adc	r31, r31
    3300:	e9 51       	subi	r30, 0x19	; 25
    3302:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    3304:	89 2b       	or	r24, r25
    3306:	39 f0       	breq	.+14     	; 0x3316 <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    3308:	80 81       	ld	r24, Z
    330a:	91 81       	ldd	r25, Z+1	; 0x01
    330c:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    3310:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    3314:	06 c0       	rjmp	.+12     	; 0x3322 <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    3316:	80 81       	ld	r24, Z
    3318:	91 81       	ldd	r25, Z+1	; 0x01
    331a:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    331e:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3322:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3991+0xa>
    3326:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    332a:	2b c0       	rjmp	.+86     	; 0x3382 <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    332c:	84 36       	cpi	r24, 0x64	; 100
    332e:	d9 f4       	brne	.+54     	; 0x3366 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3330:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3334:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	09 f0       	breq	.+2      	; 0x333e <ProcessInput+0x68e>
    333c:	3c c4       	rjmp	.+2168   	; 0x3bb6 <ProcessInput+0xf06>
    333e:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3342:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3346:	89 2b       	or	r24, r25
    3348:	49 f4       	brne	.+18     	; 0x335c <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    334a:	86 ea       	ldi	r24, 0xA6	; 166
    334c:	97 e7       	ldi	r25, 0x77	; 119
    334e:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3352:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3356:	86 e2       	ldi	r24, 0x26	; 38
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	72 cd       	rjmp	.-1308   	; 0x2e40 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    335c:	b2 e0       	ldi	r27, 0x02	; 2
    335e:	fb 16       	cp	r15, r27
    3360:	09 f4       	brne	.+2      	; 0x3364 <ProcessInput+0x6b4>
    3362:	8b c4       	rjmp	.+2326   	; 0x3c7a <ProcessInput+0xfca>
    3364:	d8 cc       	rjmp	.-1616   	; 0x2d16 <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    3366:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3368:	81 f4       	brne	.+32     	; 0x338a <ProcessInput+0x6da>
    336a:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    336e:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3372:	89 2b       	or	r24, r25
    3374:	31 f4       	brne	.+12     	; 0x3382 <ProcessInput+0x6d2>
    3376:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    337a:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    337e:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    3380:	21 f3       	breq	.-56     	; 0x334a <ProcessInput+0x69a>
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	1a dc       	rcall	.-1996   	; 0x2bba <ShowInventory>
    3386:	18 2f       	mov	r17, r24
    3388:	fe c3       	rjmp	.+2044   	; 0x3b86 <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    338a:	9c e8       	ldi	r25, 0x8C	; 140
    338c:	98 0f       	add	r25, r24
    338e:	92 30       	cpi	r25, 0x02	; 2
    3390:	28 f0       	brcs	.+10     	; 0x339c <ProcessInput+0x6ec>
    3392:	87 36       	cpi	r24, 0x67	; 103
    3394:	19 f0       	breq	.+6      	; 0x339c <ProcessInput+0x6ec>
    3396:	82 37       	cpi	r24, 0x72	; 114
    3398:	09 f0       	breq	.+2      	; 0x339c <ProcessInput+0x6ec>
    339a:	b5 c2       	rjmp	.+1386   	; 0x3906 <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    339c:	8e ef       	ldi	r24, 0xFE	; 254
    339e:	8f 0d       	add	r24, r15
    33a0:	82 30       	cpi	r24, 0x02	; 2
    33a2:	08 f0       	brcs	.+2      	; 0x33a6 <ProcessInput+0x6f6>
    33a4:	b8 cc       	rjmp	.-1680   	; 0x2d16 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    33a6:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    33aa:	0e 2f       	mov	r16, r30
    33ac:	10 e0       	ldi	r17, 0x00	; 0
    33ae:	d3 01       	movw	r26, r6
    33b0:	af 0d       	add	r26, r15
    33b2:	b1 1d       	adc	r27, r1
    33b4:	11 97       	sbiw	r26, 0x01	; 1
    33b6:	f8 01       	movw	r30, r16
    33b8:	ee 0f       	add	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	eb 51       	subi	r30, 0x1B	; 27
    33be:	f6 4c       	sbci	r31, 0xC6	; 198
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	50 e0       	ldi	r21, 0x00	; 0
    33c4:	6c 91       	ld	r22, X
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	dc d8       	rcall	.-3656   	; 0x2584 <FindChild>
    33cc:	f8 01       	movw	r30, r16
    33ce:	ee 0f       	add	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	e9 51       	subi	r30, 0x19	; 25
    33d4:	f6 4c       	sbci	r31, 0xC6	; 198
    33d6:	80 83       	st	Z, r24
    33d8:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    33da:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	ee 0f       	add	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	e9 51       	subi	r30, 0x19	; 25
    33e6:	f6 4c       	sbci	r31, 0xC6	; 198
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <ProcessInput+0x742>
    33f0:	78 c2       	rjmp	.+1264   	; 0x38e2 <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    33f2:	f3 e0       	ldi	r31, 0x03	; 3
    33f4:	ff 12       	cpse	r15, r31
    33f6:	60 c1       	rjmp	.+704    	; 0x36b8 <ProcessInput+0xa08>
    33f8:	d3 01       	movw	r26, r6
    33fa:	2c 91       	ld	r18, X
    33fc:	25 37       	cpi	r18, 0x75	; 117
    33fe:	19 f0       	breq	.+6      	; 0x3406 <ProcessInput+0x756>
    3400:	27 36       	cpi	r18, 0x67	; 103
    3402:	09 f0       	breq	.+2      	; 0x3406 <ProcessInput+0x756>
    3404:	59 c1       	rjmp	.+690    	; 0x36b8 <ProcessInput+0xa08>
    3406:	00 e0       	ldi	r16, 0x00	; 0
    3408:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    340a:	41 e6       	ldi	r20, 0x61	; 97
    340c:	c4 2e       	mov	r12, r20
    340e:	49 e7       	ldi	r20, 0x79	; 121
    3410:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    3412:	51 e2       	ldi	r21, 0x21	; 33
    3414:	a5 2e       	mov	r10, r21
    3416:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3418:	88 24       	eor	r8, r8
    341a:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    341c:	91 2c       	mov	r9, r1
    341e:	e0 2e       	mov	r14, r16
    3420:	f1 2c       	mov	r15, r1
    3422:	c7 01       	movw	r24, r14
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	fc 01       	movw	r30, r24
    342a:	ec 5b       	subi	r30, 0xBC	; 188
    342c:	f7 4c       	sbci	r31, 0xC7	; 199
    342e:	7f 01       	movw	r14, r30
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    3436:	79 f0       	breq	.+30     	; 0x3456 <ProcessInput+0x7a6>
    3438:	d3 01       	movw	r26, r6
    343a:	11 96       	adiw	r26, 0x01	; 1
    343c:	6c 91       	ld	r22, X
    343e:	5b d8       	rcall	.-3914   	; 0x24f6 <CheckLetter>
    3440:	88 23       	and	r24, r24
    3442:	49 f0       	breq	.+18     	; 0x3456 <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    3444:	69 eb       	ldi	r22, 0xB9	; 185
    3446:	78 e3       	ldi	r23, 0x38	; 56
    3448:	f7 01       	movw	r30, r14
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
                                    x = 2;
    3452:	02 e0       	ldi	r16, 0x02	; 2
    3454:	1d c0       	rjmp	.+58     	; 0x3490 <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    3456:	01 30       	cpi	r16, 0x01	; 1
    3458:	d1 f4       	brne	.+52     	; 0x348e <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    345a:	e1 2f       	mov	r30, r17
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	df 01       	movw	r26, r30
    3460:	aa 0f       	add	r26, r26
    3462:	bb 1f       	adc	r27, r27
    3464:	ab 5d       	subi	r26, 0xDB	; 219
    3466:	b6 4c       	sbci	r27, 0xC6	; 198
    3468:	cd 92       	st	X+, r12
    346a:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    346c:	df 01       	movw	r26, r30
    346e:	aa 0f       	add	r26, r26
    3470:	bb 1f       	adc	r27, r27
    3472:	ab 59       	subi	r26, 0x9B	; 155
    3474:	b6 4c       	sbci	r27, 0xC6	; 198
    3476:	ad 92       	st	X+, r10
    3478:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    347a:	ee 0f       	add	r30, r30
    347c:	ff 1f       	adc	r31, r31
    347e:	eb 55       	subi	r30, 0x5B	; 91
    3480:	f6 4c       	sbci	r31, 0xC6	; 198
    3482:	80 82       	st	Z, r8
    3484:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3486:	d3 01       	movw	r26, r6
    3488:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    348a:	1f 5f       	subi	r17, 0xFF	; 255
    348c:	01 c0       	rjmp	.+2      	; 0x3490 <ProcessInput+0x7e0>
    348e:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    3490:	0f 5f       	subi	r16, 0xFF	; 255
    3492:	01 30       	cpi	r16, 0x01	; 1
    3494:	21 f2       	breq	.-120    	; 0x341e <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3496:	f3 01       	movw	r30, r6
    3498:	80 81       	ld	r24, Z
    349a:	88 23       	and	r24, r24
    349c:	09 f4       	brne	.+2      	; 0x34a0 <ProcessInput+0x7f0>
    349e:	73 c3       	rjmp	.+1766   	; 0x3b86 <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    34a0:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	e9 51       	subi	r30, 0x19	; 25
    34ac:	f6 4c       	sbci	r31, 0xC6	; 198
    34ae:	64 ee       	ldi	r22, 0xE4	; 228
    34b0:	78 e3       	ldi	r23, 0x38	; 56
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    34ba:	e0 90 02 39 	lds	r14, 0x3902	; 0x803902 <actObj1.3991+0x1e>
    34be:	f0 90 03 39 	lds	r15, 0x3903	; 0x803903 <actObj1.3991+0x1f>
    34c2:	f1 e0       	ldi	r31, 0x01	; 1
    34c4:	ef 16       	cp	r14, r31
    34c6:	f1 04       	cpc	r15, r1
    34c8:	09 f0       	breq	.+2      	; 0x34cc <ProcessInput+0x81c>
    34ca:	89 c0       	rjmp	.+274    	; 0x35de <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    34cc:	93 01       	movw	r18, r6
    34ce:	2e 5f       	subi	r18, 0xFE	; 254
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3991+0x10>
    34da:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3991+0x11>
    34de:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
                                if (data[2] == '1') {
    34e2:	d3 01       	movw	r26, r6
    34e4:	12 96       	adiw	r26, 0x02	; 2
    34e6:	3c 91       	ld	r19, X
    34e8:	31 33       	cpi	r19, 0x31	; 49
    34ea:	09 f0       	breq	.+2      	; 0x34ee <ProcessInput+0x83e>
    34ec:	4c c3       	rjmp	.+1688   	; 0x3b86 <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    34ee:	20 91 c4 38 	lds	r18, 0x38C4	; 0x8038c4 <actObj2.3992+0xb>
                                    if ((item < 31)||(item > 34)) {
    34f2:	51 ee       	ldi	r21, 0xE1	; 225
    34f4:	52 0f       	add	r21, r18
    34f6:	41 e0       	ldi	r20, 0x01	; 1
    34f8:	41 0f       	add	r20, r17
    34fa:	81 2f       	mov	r24, r17
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34fe:	fc 01       	movw	r30, r24
    3500:	ee 0f       	add	r30, r30
    3502:	ff 1f       	adc	r31, r31
    3504:	eb 5d       	subi	r30, 0xDB	; 219
    3506:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3508:	54 30       	cpi	r21, 0x04	; 4
    350a:	b0 f0       	brcs	.+44     	; 0x3538 <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    350c:	21 e0       	ldi	r18, 0x01	; 1
    350e:	39 e7       	ldi	r19, 0x79	; 121
    3510:	20 83       	st	Z, r18
    3512:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3514:	fc 01       	movw	r30, r24
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	eb 59       	subi	r30, 0x9B	; 155
    351c:	f6 4c       	sbci	r31, 0xC6	; 198
    351e:	2a e1       	ldi	r18, 0x1A	; 26
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	20 83       	st	Z, r18
    3524:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3526:	88 0f       	add	r24, r24
    3528:	99 1f       	adc	r25, r25
    352a:	fc 01       	movw	r30, r24
    352c:	eb 55       	subi	r30, 0x5B	; 91
    352e:	f6 4c       	sbci	r31, 0xC6	; 198
    3530:	e0 82       	st	Z, r14
    3532:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    3534:	14 2f       	mov	r17, r20
    3536:	27 c3       	rjmp	.+1614   	; 0x3b86 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3538:	60 e5       	ldi	r22, 0x50	; 80
    353a:	75 e7       	ldi	r23, 0x75	; 117
    353c:	60 83       	st	Z, r22
    353e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3540:	fc 01       	movw	r30, r24
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	eb 59       	subi	r30, 0x9B	; 155
    3548:	f6 4c       	sbci	r31, 0xC6	; 198
    354a:	62 eb       	ldi	r22, 0xB2	; 178
    354c:	70 e0       	ldi	r23, 0x00	; 0
    354e:	60 83       	st	Z, r22
    3550:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3552:	88 0f       	add	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	fc 01       	movw	r30, r24
    3558:	eb 55       	subi	r30, 0x5B	; 91
    355a:	f6 4c       	sbci	r31, 0xC6	; 198
    355c:	e0 82       	st	Z, r14
    355e:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3560:	84 2f       	mov	r24, r20
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	fc 01       	movw	r30, r24
    3566:	ee 0f       	add	r30, r30
    3568:	ff 1f       	adc	r31, r31
    356a:	eb 5d       	subi	r30, 0xDB	; 219
    356c:	f6 4c       	sbci	r31, 0xC6	; 198
    356e:	49 e5       	ldi	r20, 0x59	; 89
    3570:	5a e7       	ldi	r21, 0x7A	; 122
    3572:	40 83       	st	Z, r20
    3574:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3576:	fc 01       	movw	r30, r24
    3578:	ee 0f       	add	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	eb 59       	subi	r30, 0x9B	; 155
    357e:	f6 4c       	sbci	r31, 0xC6	; 198
    3580:	42 e0       	ldi	r20, 0x02	; 2
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	40 83       	st	Z, r20
    3586:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	fc 01       	movw	r30, r24
    358e:	eb 55       	subi	r30, 0x5B	; 91
    3590:	f6 4c       	sbci	r31, 0xC6	; 198
    3592:	e0 82       	st	Z, r14
    3594:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3596:	82 e0       	ldi	r24, 0x02	; 2
    3598:	81 0f       	add	r24, r17
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	1d 5f       	subi	r17, 0xFD	; 253
    359e:	fc 01       	movw	r30, r24
    35a0:	ee 0f       	add	r30, r30
    35a2:	ff 1f       	adc	r31, r31
    35a4:	eb 5d       	subi	r30, 0xDB	; 219
    35a6:	f6 4c       	sbci	r31, 0xC6	; 198
    35a8:	4d ea       	ldi	r20, 0xAD	; 173
    35aa:	58 e7       	ldi	r21, 0x78	; 120
    35ac:	40 83       	st	Z, r20
    35ae:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35b0:	fc 01       	movw	r30, r24
    35b2:	ee 0f       	add	r30, r30
    35b4:	ff 1f       	adc	r31, r31
    35b6:	eb 59       	subi	r30, 0x9B	; 155
    35b8:	f6 4c       	sbci	r31, 0xC6	; 198
    35ba:	42 e1       	ldi	r20, 0x12	; 18
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	40 83       	st	Z, r20
    35c0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	fc 01       	movw	r30, r24
    35c8:	eb 55       	subi	r30, 0x5B	; 91
    35ca:	f6 4c       	sbci	r31, 0xC6	; 198
    35cc:	e0 82       	st	Z, r14
    35ce:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    35d0:	30 93 14 39 	sts	0x3914, r19	; 0x803914 <specialInput>
                                        specialInput[1] = item;
    35d4:	20 93 15 39 	sts	0x3915, r18	; 0x803915 <specialInput+0x1>
                                        specialInput[2] = 0;
    35d8:	10 92 16 39 	sts	0x3916, r1	; 0x803916 <specialInput+0x2>
    35dc:	d4 c2       	rjmp	.+1448   	; 0x3b86 <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    35de:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3991+0x9>
    35e2:	80 91 c4 38 	lds	r24, 0x38C4	; 0x8038c4 <actObj2.3992+0xb>
    35e6:	98 13       	cpse	r25, r24
    35e8:	2e c0       	rjmp	.+92     	; 0x3646 <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    35ea:	20 91 0a 39 	lds	r18, 0x390A	; 0x80390a <actObj1.3991+0x26>
    35ee:	30 91 0b 39 	lds	r19, 0x390B	; 0x80390b <actObj1.3991+0x27>
    35f2:	01 e0       	ldi	r16, 0x01	; 1
    35f4:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35f6:	81 2f       	mov	r24, r17
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	fc 01       	movw	r30, r24
    35fc:	ee 0f       	add	r30, r30
    35fe:	ff 1f       	adc	r31, r31
    3600:	eb 5d       	subi	r30, 0xDB	; 219
    3602:	f6 4c       	sbci	r31, 0xC6	; 198
    3604:	40 91 fc 38 	lds	r20, 0x38FC	; 0x8038fc <actObj1.3991+0x18>
    3608:	50 91 fd 38 	lds	r21, 0x38FD	; 0x8038fd <actObj1.3991+0x19>
    360c:	40 83       	st	Z, r20
    360e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3610:	fc 01       	movw	r30, r24
    3612:	ee 0f       	add	r30, r30
    3614:	ff 1f       	adc	r31, r31
    3616:	eb 59       	subi	r30, 0x9B	; 155
    3618:	f6 4c       	sbci	r31, 0xC6	; 198
    361a:	20 83       	st	Z, r18
    361c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	fc 01       	movw	r30, r24
    3624:	eb 55       	subi	r30, 0x5B	; 91
    3626:	f6 4c       	sbci	r31, 0xC6	; 198
    3628:	10 82       	st	Z, r1
    362a:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    362c:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <actObj1.3991+0x2a>
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3636:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    363a:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3991+0xa>
    363e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3642:	10 2f       	mov	r17, r16
    3644:	a0 c2       	rjmp	.+1344   	; 0x3b86 <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3646:	f3 01       	movw	r30, r6
    3648:	80 81       	ld	r24, Z
    364a:	85 37       	cpi	r24, 0x75	; 117
    364c:	99 f4       	brne	.+38     	; 0x3674 <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    364e:	81 2f       	mov	r24, r17
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	fc 01       	movw	r30, r24
    3654:	ee 0f       	add	r30, r30
    3656:	ff 1f       	adc	r31, r31
    3658:	eb 5d       	subi	r30, 0xDB	; 219
    365a:	f6 4c       	sbci	r31, 0xC6	; 198
    365c:	21 e0       	ldi	r18, 0x01	; 1
    365e:	39 e7       	ldi	r19, 0x79	; 121
    3660:	20 83       	st	Z, r18
    3662:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3664:	fc 01       	movw	r30, r24
    3666:	ee 0f       	add	r30, r30
    3668:	ff 1f       	adc	r31, r31
    366a:	eb 59       	subi	r30, 0x9B	; 155
    366c:	f6 4c       	sbci	r31, 0xC6	; 198
    366e:	2a e1       	ldi	r18, 0x1A	; 26
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	15 c0       	rjmp	.+42     	; 0x369e <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3674:	87 36       	cpi	r24, 0x67	; 103
    3676:	09 f0       	breq	.+2      	; 0x367a <ProcessInput+0x9ca>
    3678:	86 c2       	rjmp	.+1292   	; 0x3b86 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    367a:	81 2f       	mov	r24, r17
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	fc 01       	movw	r30, r24
    3680:	ee 0f       	add	r30, r30
    3682:	ff 1f       	adc	r31, r31
    3684:	eb 5d       	subi	r30, 0xDB	; 219
    3686:	f6 4c       	sbci	r31, 0xC6	; 198
    3688:	2f e9       	ldi	r18, 0x9F	; 159
    368a:	36 e7       	ldi	r19, 0x76	; 118
    368c:	20 83       	st	Z, r18
    368e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3690:	fc 01       	movw	r30, r24
    3692:	ee 0f       	add	r30, r30
    3694:	ff 1f       	adc	r31, r31
    3696:	eb 59       	subi	r30, 0x9B	; 155
    3698:	f6 4c       	sbci	r31, 0xC6	; 198
    369a:	28 e2       	ldi	r18, 0x28	; 40
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	20 83       	st	Z, r18
    36a0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	fc 01       	movw	r30, r24
    36a8:	eb 55       	subi	r30, 0x5B	; 91
    36aa:	f6 4c       	sbci	r31, 0xC6	; 198
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	80 83       	st	Z, r24
    36b2:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    36b4:	1f 5f       	subi	r17, 0xFF	; 255
    36b6:	67 c2       	rjmp	.+1230   	; 0x3b86 <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    36b8:	64 ee       	ldi	r22, 0xE4	; 228
    36ba:	78 e3       	ldi	r23, 0x38	; 56
    36bc:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    36c0:	d3 01       	movw	r26, r6
    36c2:	8c 91       	ld	r24, X
    36c4:	84 37       	cpi	r24, 0x74	; 116
    36c6:	61 f5       	brne	.+88     	; 0x3720 <ProcessInput+0xa70>
    36c8:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3991+0x8>
    36cc:	83 fd       	sbrc	r24, 3
    36ce:	43 c0       	rjmp	.+134    	; 0x3756 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36d0:	8b e1       	ldi	r24, 0x1B	; 27
    36d2:	99 e7       	ldi	r25, 0x79	; 121
    36d4:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    36d8:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    36dc:	8e e1       	ldi	r24, 0x1E	; 30
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    36e4:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    36f0:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36f4:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3991+0x1a>
    36f8:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3991+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36fc:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3991+0xc>
    3700:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3991+0xd>
    3704:	20 93 29 39 	sts	0x3929, r18	; 0x803929 <reactStr+0x4>
    3708:	30 93 2a 39 	sts	0x392A, r19	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    370c:	80 93 69 39 	sts	0x3969, r24	; 0x803969 <reactStr+0x44>
    3710:	90 93 6a 39 	sts	0x396A, r25	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    3714:	10 92 a9 39 	sts	0x39A9, r1	; 0x8039a9 <reactStr+0x84>
    3718:	10 92 aa 39 	sts	0x39AA, r1	; 0x8039aa <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    371c:	13 e0       	ldi	r17, 0x03	; 3
    371e:	33 c2       	rjmp	.+1126   	; 0x3b86 <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    3720:	85 37       	cpi	r24, 0x75	; 117
    3722:	39 f4       	brne	.+14     	; 0x3732 <ProcessInput+0xa82>
    3724:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3991+0x8>
    3728:	84 fd       	sbrc	r24, 4
    372a:	15 c0       	rjmp	.+42     	; 0x3756 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	99 e7       	ldi	r25, 0x79	; 121
    3730:	3b c2       	rjmp	.+1142   	; 0x3ba8 <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3732:	82 37       	cpi	r24, 0x72	; 114
    3734:	69 f4       	brne	.+26     	; 0x3750 <ProcessInput+0xaa0>
    3736:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3991+0x8>
    373a:	85 fd       	sbrc	r24, 5
    373c:	0c c0       	rjmp	.+24     	; 0x3756 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    373e:	86 ee       	ldi	r24, 0xE6	; 230
    3740:	98 e7       	ldi	r25, 0x78	; 120
    3742:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3746:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    374a:	8b e1       	ldi	r24, 0x1B	; 27
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	78 cb       	rjmp	.-2320   	; 0x2e40 <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3750:	87 36       	cpi	r24, 0x67	; 103
    3752:	09 f4       	brne	.+2      	; 0x3756 <ProcessInput+0xaa6>
    3754:	e0 ca       	rjmp	.-2624   	; 0x2d16 <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3756:	00 91 02 39 	lds	r16, 0x3902	; 0x803902 <actObj1.3991+0x1e>
    375a:	10 91 03 39 	lds	r17, 0x3903	; 0x803903 <actObj1.3991+0x1f>
    375e:	01 30       	cpi	r16, 0x01	; 1
    3760:	11 05       	cpc	r17, r1
    3762:	09 f5       	brne	.+66     	; 0x37a6 <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3764:	93 01       	movw	r18, r6
    3766:	2e 5f       	subi	r18, 0xFE	; 254
    3768:	3f 4f       	sbci	r19, 0xFF	; 255
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	61 e0       	ldi	r22, 0x01	; 1
    376e:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3991+0x10>
    3772:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3991+0x11>
    3776:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
                                if (data[2] == '1') {
    377a:	f3 01       	movw	r30, r6
    377c:	82 81       	ldd	r24, Z+2	; 0x02
    377e:	81 33       	cpi	r24, 0x31	; 49
    3780:	09 f0       	breq	.+2      	; 0x3784 <ProcessInput+0xad4>
    3782:	13 cd       	rjmp	.-1498   	; 0x31aa <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3784:	85 e2       	ldi	r24, 0x25	; 37
    3786:	95 e7       	ldi	r25, 0x75	; 117
    3788:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    378c:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3790:	8b e2       	ldi	r24, 0x2B	; 43
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3798:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    379c:	00 93 a7 39 	sts	0x39A7, r16	; 0x8039a7 <reactStr+0x82>
    37a0:	10 93 a8 39 	sts	0x39A8, r17	; 0x8039a8 <reactStr+0x83>
    37a4:	57 cb       	rjmp	.-2386   	; 0x2e54 <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    37a6:	01 15       	cp	r16, r1
    37a8:	11 05       	cpc	r17, r1
    37aa:	09 f4       	brne	.+2      	; 0x37ae <ProcessInput+0xafe>
    37ac:	58 c0       	rjmp	.+176    	; 0x385e <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ae:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3991+0x10>
    37b2:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3991+0x11>
    37b6:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    37ba:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    37be:	00 93 67 39 	sts	0x3967, r16	; 0x803967 <reactStr+0x42>
    37c2:	10 93 68 39 	sts	0x3968, r17	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    37c6:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    37ca:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ce:	89 e5       	ldi	r24, 0x59	; 89
    37d0:	9a e7       	ldi	r25, 0x7A	; 122
    37d2:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <reactStr+0x4>
    37d6:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    37da:	82 e0       	ldi	r24, 0x02	; 2
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	80 93 69 39 	sts	0x3969, r24	; 0x803969 <reactStr+0x44>
    37e2:	90 93 6a 39 	sts	0x396A, r25	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	80 93 a9 39 	sts	0x39A9, r24	; 0x8039a9 <reactStr+0x84>
    37ee:	90 93 aa 39 	sts	0x39AA, r25	; 0x8039aa <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37f2:	2d ea       	ldi	r18, 0xAD	; 173
    37f4:	38 e7       	ldi	r19, 0x78	; 120
    37f6:	20 93 2b 39 	sts	0x392B, r18	; 0x80392b <reactStr+0x6>
    37fa:	30 93 2c 39 	sts	0x392C, r19	; 0x80392c <reactStr+0x7>
    reactStr[1][number]=length;
    37fe:	22 e1       	ldi	r18, 0x12	; 18
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	20 93 6b 39 	sts	0x396B, r18	; 0x80396b <reactStr+0x46>
    3806:	30 93 6c 39 	sts	0x396C, r19	; 0x80396c <reactStr+0x47>
    reactStr[2][number]=type;
    380a:	80 93 ab 39 	sts	0x39AB, r24	; 0x8039ab <reactStr+0x86>
    380e:	90 93 ac 39 	sts	0x39AC, r25	; 0x8039ac <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    3812:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3991+0x20>
    3816:	90 91 05 39 	lds	r25, 0x3905	; 0x803905 <actObj1.3991+0x21>
    381a:	40 97       	sbiw	r24, 0x10	; 16
    381c:	30 f0       	brcs	.+12     	; 0x382a <ProcessInput+0xb7a>
    381e:	8f e0       	ldi	r24, 0x0F	; 15
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	80 93 04 39 	sts	0x3904, r24	; 0x803904 <actObj1.3991+0x20>
    3826:	90 93 05 39 	sts	0x3905, r25	; 0x803905 <actObj1.3991+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    382a:	24 e1       	ldi	r18, 0x14	; 20
    382c:	39 e3       	ldi	r19, 0x39	; 57
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	60 91 04 39 	lds	r22, 0x3904	; 0x803904 <actObj1.3991+0x20>
    3834:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3991+0x12>
    3838:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3991+0x13>
    383c:	0e 94 67 08 	call	0x10ce	; 0x10ce <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3840:	64 e1       	ldi	r22, 0x14	; 20
    3842:	79 e3       	ldi	r23, 0x39	; 57
    3844:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3991+0x20>
    3848:	0e 94 18 11 	call	0x2230	; 0x2230 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    384c:	e0 91 04 39 	lds	r30, 0x3904	; 0x803904 <actObj1.3991+0x20>
    3850:	f0 91 05 39 	lds	r31, 0x3905	; 0x803905 <actObj1.3991+0x21>
    3854:	ec 5e       	subi	r30, 0xEC	; 236
    3856:	f6 4c       	sbci	r31, 0xC6	; 198
    3858:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    385a:	14 e0       	ldi	r17, 0x04	; 4
    385c:	94 c1       	rjmp	.+808    	; 0x3b86 <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    385e:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3991+0x7>
    3862:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
    3866:	88 23       	and	r24, r24
    3868:	01 f1       	breq	.+64     	; 0x38aa <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    386a:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <actObj1.3991+0x26>
    386e:	90 91 0b 39 	lds	r25, 0x390B	; 0x80390b <actObj1.3991+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3872:	20 91 fc 38 	lds	r18, 0x38FC	; 0x8038fc <actObj1.3991+0x18>
    3876:	30 91 fd 38 	lds	r19, 0x38FD	; 0x8038fd <actObj1.3991+0x19>
    387a:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    387e:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3882:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3886:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    388a:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    388e:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3892:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <actObj1.3991+0x2a>
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    389c:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    38a0:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3991+0xa>
    38a4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    38a8:	d5 ca       	rjmp	.-2646   	; 0x2e54 <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    38aa:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3991+0x24>
    38ae:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <actObj1.3991+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38b2:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3991+0x16>
    38b6:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3991+0x17>
    38ba:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    38be:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    38c2:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    38c6:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    38ca:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    38ce:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    38d2:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3991+0x29>
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    38dc:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    38e0:	b9 ca       	rjmp	.-2702   	; 0x2e54 <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    38e2:	d3 01       	movw	r26, r6
    38e4:	8c 91       	ld	r24, X
    38e6:	84 37       	cpi	r24, 0x74	; 116
    38e8:	11 f0       	breq	.+4      	; 0x38ee <ProcessInput+0xc3e>
    38ea:	87 36       	cpi	r24, 0x67	; 103
    38ec:	19 f4       	brne	.+6      	; 0x38f4 <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38ee:	89 e3       	ldi	r24, 0x39	; 57
    38f0:	99 e7       	ldi	r25, 0x79	; 121
    38f2:	02 c0       	rjmp	.+4      	; 0x38f8 <ProcessInput+0xc48>
    38f4:	8d e4       	ldi	r24, 0x4D	; 77
    38f6:	99 e7       	ldi	r25, 0x79	; 121
    38f8:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    38fc:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3900:	84 e1       	ldi	r24, 0x14	; 20
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	9d ca       	rjmp	.-2758   	; 0x2e40 <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3906:	81 36       	cpi	r24, 0x61	; 97
    3908:	09 f0       	breq	.+2      	; 0x390c <ProcessInput+0xc5c>
    390a:	4f cc       	rjmp	.-1890   	; 0x31aa <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    390c:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialPassed>
    3910:	82 30       	cpi	r24, 0x02	; 2
    3912:	08 f4       	brcc	.+2      	; 0x3916 <ProcessInput+0xc66>
    3914:	c7 c0       	rjmp	.+398    	; 0x3aa4 <ProcessInput+0xdf4>
                if (data[1] > 0) {
    3916:	f3 01       	movw	r30, r6
    3918:	21 81       	ldd	r18, Z+1	; 0x01
    391a:	22 23       	and	r18, r18
    391c:	09 f4       	brne	.+2      	; 0x3920 <ProcessInput+0xc70>
    391e:	af c0       	rjmp	.+350    	; 0x3a7e <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3920:	ce 01       	movw	r24, r28
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	7c 01       	movw	r14, r24
    3926:	88 e0       	ldi	r24, 0x08	; 8
    3928:	d7 01       	movw	r26, r14
    392a:	1d 92       	st	X+, r1
    392c:	8a 95       	dec	r24
    392e:	e9 f7       	brne	.-6      	; 0x392a <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3930:	20 53       	subi	r18, 0x30	; 48
    3932:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3934:	32 81       	ldd	r19, Z+2	; 0x02
    3936:	31 53       	subi	r19, 0x31	; 49
    3938:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    393a:	83 81       	ldd	r24, Z+3	; 0x03
    393c:	81 36       	cpi	r24, 0x61	; 97
    393e:	11 f4       	brne	.+4      	; 0x3944 <ProcessInput+0xc94>
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	0c c0       	rjmp	.+24     	; 0x395c <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    3944:	85 36       	cpi	r24, 0x65	; 101
    3946:	19 f4       	brne	.+6      	; 0x394e <ProcessInput+0xc9e>
    3948:	f3 01       	movw	r30, r6
    394a:	13 82       	std	Z+3, r1	; 0x03
    394c:	08 c0       	rjmp	.+16     	; 0x395e <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    394e:	86 36       	cpi	r24, 0x66	; 102
    3950:	19 f4       	brne	.+6      	; 0x3958 <ProcessInput+0xca8>
    3952:	83 e0       	ldi	r24, 0x03	; 3
    3954:	83 83       	std	Z+3, r24	; 0x03
    3956:	03 c0       	rjmp	.+6      	; 0x395e <ProcessInput+0xcae>
                    else data[3] = 2;
    3958:	82 e0       	ldi	r24, 0x02	; 2
    395a:	f3 01       	movw	r30, r6
    395c:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    395e:	21 fd       	sbrc	r18, 1
    3960:	04 c0       	rjmp	.+8      	; 0x396a <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	dc 01       	movw	r26, r24
    3968:	04 c0       	rjmp	.+8      	; 0x3972 <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	a0 e1       	ldi	r26, 0x10	; 16
    3970:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3972:	20 ff       	sbrs	r18, 0
    3974:	03 c0       	rjmp	.+6      	; 0x397c <ProcessInput+0xccc>
    3976:	9f 5f       	subi	r25, 0xFF	; 255
    3978:	af 4f       	sbci	r26, 0xFF	; 255
    397a:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    397c:	f3 01       	movw	r30, r6
    397e:	23 81       	ldd	r18, Z+3	; 0x03
    3980:	21 fd       	sbrc	r18, 1
    3982:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3984:	20 ff       	sbrs	r18, 0
    3986:	03 c0       	rjmp	.+6      	; 0x398e <ProcessInput+0xcde>
    3988:	40 96       	adiw	r24, 0x10	; 16
    398a:	a1 1d       	adc	r26, r1
    398c:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    398e:	31 ff       	sbrs	r19, 1
    3990:	03 c0       	rjmp	.+6      	; 0x3998 <ProcessInput+0xce8>
    3992:	90 5f       	subi	r25, 0xF0	; 240
    3994:	af 4f       	sbci	r26, 0xFF	; 255
    3996:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3998:	30 ff       	sbrs	r19, 0
    399a:	03 c0       	rjmp	.+6      	; 0x39a2 <ProcessInput+0xcf2>
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	a1 1d       	adc	r26, r1
    39a0:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    39a2:	40 91 43 38 	lds	r20, 0x3843	; 0x803843 <whoami>
    39a6:	24 e0       	ldi	r18, 0x04	; 4
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	24 1b       	sub	r18, r20
    39ac:	31 09       	sbc	r19, r1
    39ae:	04 c0       	rjmp	.+8      	; 0x39b8 <ProcessInput+0xd08>
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	aa 1f       	adc	r26, r26
    39b6:	bb 1f       	adc	r27, r27
    39b8:	2a 95       	dec	r18
    39ba:	d2 f7       	brpl	.-12     	; 0x39b0 <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39bc:	28 ec       	ldi	r18, 0xC8	; 200
    39be:	34 e7       	ldi	r19, 0x74	; 116
    39c0:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    39c4:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    39c8:	20 e2       	ldi	r18, 0x20	; 32
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	20 93 67 39 	sts	0x3967, r18	; 0x803967 <reactStr+0x42>
    39d0:	30 93 68 39 	sts	0x3968, r19	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    39d4:	21 e0       	ldi	r18, 0x01	; 1
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	20 93 a7 39 	sts	0x39A7, r18	; 0x8039a7 <reactStr+0x82>
    39dc:	30 93 a8 39 	sts	0x39A8, r19	; 0x8039a8 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39e0:	4d e9       	ldi	r20, 0x9D	; 157
    39e2:	54 e7       	ldi	r21, 0x74	; 116
    39e4:	40 93 29 39 	sts	0x3929, r20	; 0x803929 <reactStr+0x4>
    39e8:	50 93 2a 39 	sts	0x392A, r21	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    39ec:	42 e0       	ldi	r20, 0x02	; 2
    39ee:	50 e0       	ldi	r21, 0x00	; 0
    39f0:	40 93 69 39 	sts	0x3969, r20	; 0x803969 <reactStr+0x44>
    39f4:	50 93 6a 39 	sts	0x396A, r21	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    39f8:	20 93 a9 39 	sts	0x39A9, r18	; 0x8039a9 <reactStr+0x84>
    39fc:	30 93 aa 39 	sts	0x39AA, r19	; 0x8039aa <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a00:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3a02:	f7 01       	movw	r30, r14
    3a04:	e0 0f       	add	r30, r16
    3a06:	f1 1d       	adc	r31, r1
    3a08:	28 2f       	mov	r18, r24
    3a0a:	2f 70       	andi	r18, 0x0F	; 15
    3a0c:	20 83       	st	Z, r18
                        answer /= 16;
    3a0e:	44 e0       	ldi	r20, 0x04	; 4
    3a10:	b6 95       	lsr	r27
    3a12:	a7 95       	ror	r26
    3a14:	97 95       	ror	r25
    3a16:	87 95       	ror	r24
    3a18:	4a 95       	dec	r20
    3a1a:	d1 f7       	brne	.-12     	; 0x3a10 <ProcessInput+0xd60>
                        if (answer == 0) break;
    3a1c:	00 97       	sbiw	r24, 0x00	; 0
    3a1e:	a1 05       	cpc	r26, r1
    3a20:	b1 05       	cpc	r27, r1
    3a22:	49 f4       	brne	.+18     	; 0x3a36 <ProcessInput+0xd86>
    3a24:	25 e2       	ldi	r18, 0x25	; 37
    3a26:	c2 2e       	mov	r12, r18
    3a28:	29 e3       	ldi	r18, 0x39	; 57
    3a2a:	d2 2e       	mov	r13, r18
    3a2c:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3a2e:	aa 24       	eor	r10, r10
    3a30:	a3 94       	inc	r10
    3a32:	b1 2c       	mov	r11, r1
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a36:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3a38:	e4 cf       	rjmp	.-56     	; 0x3a02 <ProcessInput+0xd52>
    3a3a:	b2 e0       	ldi	r27, 0x02	; 2
    3a3c:	cb 0e       	add	r12, r27
    3a3e:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3a40:	08 30       	cpi	r16, 0x08	; 8
    3a42:	08 f0       	brcs	.+2      	; 0x3a46 <ProcessInput+0xd96>
    3a44:	9e c0       	rjmp	.+316    	; 0x3b82 <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3a46:	1f 5f       	subi	r17, 0xFF	; 255
    3a48:	f7 01       	movw	r30, r14
    3a4a:	e0 0f       	add	r30, r16
    3a4c:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a4e:	80 81       	ld	r24, Z
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	83 57       	subi	r24, 0x73	; 115
    3a54:	9b 48       	sbci	r25, 0x8B	; 139
    3a56:	d6 01       	movw	r26, r12
    3a58:	14 96       	adiw	r26, 0x04	; 4
    3a5a:	8d 93       	st	X+, r24
    3a5c:	9c 93       	st	X, r25
    3a5e:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3a60:	f6 01       	movw	r30, r12
    3a62:	ec 5b       	subi	r30, 0xBC	; 188
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	a0 82       	st	Z, r10
    3a68:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3a6a:	e0 5c       	subi	r30, 0xC0	; 192
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	a0 82       	st	Z, r10
    3a70:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3a72:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3991+0xa>
    3a76:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3a7a:	0f 5f       	subi	r16, 0xFF	; 255
    3a7c:	de cf       	rjmp	.-68     	; 0x3a3a <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a7e:	88 ee       	ldi	r24, 0xE8	; 232
    3a80:	94 e7       	ldi	r25, 0x74	; 116
    3a82:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3a86:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3a8a:	8d e3       	ldi	r24, 0x3D	; 61
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3a92:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    3a9e:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
    3aa2:	6e c0       	rjmp	.+220    	; 0x3b80 <ProcessInput+0xed0>
    3aa4:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	ee 0f       	add	r30, r30
    3aac:	ff 1f       	adc	r31, r31
    3aae:	e9 51       	subi	r30, 0x19	; 25
    3ab0:	f6 4c       	sbci	r31, 0xC6	; 198
    3ab2:	64 ee       	ldi	r22, 0xE4	; 228
    3ab4:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <ProcessInput+0xe0c>
    3aba:	46 c0       	rjmp	.+140    	; 0x3b48 <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3ac4:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3991+0x7>
    3ac8:	0e 94 1e 0a 	call	0x143c	; 0x143c <CheckState>
    3acc:	88 23       	and	r24, r24
    3ace:	01 f1       	breq	.+64     	; 0x3b10 <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3ad0:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <actObj1.3991+0x26>
    3ad4:	90 91 0b 39 	lds	r25, 0x390B	; 0x80390b <actObj1.3991+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ad8:	20 91 fc 38 	lds	r18, 0x38FC	; 0x8038fc <actObj1.3991+0x18>
    3adc:	30 91 fd 38 	lds	r19, 0x38FD	; 0x8038fd <actObj1.3991+0x19>
    3ae0:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    3ae4:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3ae8:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3aec:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    3af0:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    3af4:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3af8:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <actObj1.3991+0x2a>
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3b02:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3b06:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3991+0xa>
    3b0a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
    3b0e:	38 c0       	rjmp	.+112    	; 0x3b80 <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3b10:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3991+0x24>
    3b14:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <actObj1.3991+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b18:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3991+0x16>
    3b1c:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3991+0x17>
    3b20:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x2>
    3b24:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3b28:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3b2c:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    3b30:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x82>
    3b34:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3b38:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3991+0x29>
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3b42:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3b46:	1c c0       	rjmp	.+56     	; 0x3b80 <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b50:	80 e6       	ldi	r24, 0x60	; 96
    3b52:	98 e7       	ldi	r25, 0x78	; 120
    3b54:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3b58:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3b5c:	8d e4       	ldi	r24, 0x4D	; 77
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3b64:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    3b70:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3b74:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <getClock>
    3b78:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <PunishmentTime>
    3b7c:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3b80:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3b82:	10 92 14 39 	sts	0x3914, r1	; 0x803914 <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b86:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <specialInput>
    3b8a:	88 23       	and	r24, r24
    3b8c:	19 f0       	breq	.+6      	; 0x3b94 <ProcessInput+0xee4>
    3b8e:	10 93 24 39 	sts	0x3924, r17	; 0x803924 <responseList>
    3b92:	8b c0       	rjmp	.+278    	; 0x3caa <ProcessInput+0xffa>
    3b94:	81 2f       	mov	r24, r17
    3b96:	01 c0       	rjmp	.+2      	; 0x3b9a <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	0e 94 86 11 	call	0x230c	; 0x230c <SetStandardResponse>
    3b9e:	80 93 24 39 	sts	0x3924, r24	; 0x803924 <responseList>
    3ba2:	83 c0       	rjmp	.+262    	; 0x3caa <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ba4:	81 ed       	ldi	r24, 0xD1	; 209
    3ba6:	99 e7       	ldi	r25, 0x79	; 121
    3ba8:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3bac:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3bb0:	8a e1       	ldi	r24, 0x1A	; 26
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	45 c9       	rjmp	.-3446   	; 0x2e40 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3bb6:	f2 e0       	ldi	r31, 0x02	; 2
    3bb8:	ff 12       	cpse	r15, r31
    3bba:	ad c8       	rjmp	.-3750   	; 0x2d16 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3bbc:	f3 01       	movw	r30, r6
    3bbe:	61 81       	ldd	r22, Z+1	; 0x01
    3bc0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <CheckLetter>
    3bc4:	88 23       	and	r24, r24
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <ProcessInput+0xf1a>
    3bc8:	58 c0       	rjmp	.+176    	; 0x3c7a <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3bca:	00 e0       	ldi	r16, 0x00	; 0
    3bcc:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3bce:	00 0f       	add	r16, r16
    3bd0:	11 1f       	adc	r17, r17
    3bd2:	0c 5b       	subi	r16, 0xBC	; 188
    3bd4:	17 4c       	sbci	r17, 0xC7	; 199
    3bd6:	64 ee       	ldi	r22, 0xE4	; 228
    3bd8:	78 e3       	ldi	r23, 0x38	; 56
    3bda:	d8 01       	movw	r26, r16
    3bdc:	8d 91       	ld	r24, X+
    3bde:	9c 91       	ld	r25, X
    3be0:	0e 94 02 12 	call	0x2404	; 0x2404 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3be4:	86 e9       	ldi	r24, 0x96	; 150
    3be6:	97 e7       	ldi	r25, 0x77	; 119
    3be8:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3bec:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3bf0:	80 e1       	ldi	r24, 0x10	; 16
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x42>
    3bf8:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x43>
    reactStr[2][number]=type;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x82>
    3c04:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3c08:	20 91 fe 38 	lds	r18, 0x38FE	; 0x8038fe <actObj1.3991+0x1a>
    3c0c:	30 91 ff 38 	lds	r19, 0x38FF	; 0x8038ff <actObj1.3991+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c10:	40 91 f0 38 	lds	r20, 0x38F0	; 0x8038f0 <actObj1.3991+0xc>
    3c14:	50 91 f1 38 	lds	r21, 0x38F1	; 0x8038f1 <actObj1.3991+0xd>
    3c18:	40 93 29 39 	sts	0x3929, r20	; 0x803929 <reactStr+0x4>
    3c1c:	50 93 2a 39 	sts	0x392A, r21	; 0x80392a <reactStr+0x5>
    reactStr[1][number]=length;
    3c20:	20 93 69 39 	sts	0x3969, r18	; 0x803969 <reactStr+0x44>
    3c24:	30 93 6a 39 	sts	0x396A, r19	; 0x80396a <reactStr+0x45>
    reactStr[2][number]=type;
    3c28:	10 92 a9 39 	sts	0x39A9, r1	; 0x8039a9 <reactStr+0x84>
    3c2c:	10 92 aa 39 	sts	0x39AA, r1	; 0x8039aa <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c30:	29 e5       	ldi	r18, 0x59	; 89
    3c32:	3a e7       	ldi	r19, 0x7A	; 122
    3c34:	20 93 2b 39 	sts	0x392B, r18	; 0x80392b <reactStr+0x6>
    3c38:	30 93 2c 39 	sts	0x392C, r19	; 0x80392c <reactStr+0x7>
    reactStr[1][number]=length;
    3c3c:	22 e0       	ldi	r18, 0x02	; 2
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	20 93 6b 39 	sts	0x396B, r18	; 0x80396b <reactStr+0x46>
    3c44:	30 93 6c 39 	sts	0x396C, r19	; 0x80396c <reactStr+0x47>
    reactStr[2][number]=type;
    3c48:	80 93 ab 39 	sts	0x39AB, r24	; 0x8039ab <reactStr+0x86>
    3c4c:	90 93 ac 39 	sts	0x39AC, r25	; 0x8039ac <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c50:	29 e5       	ldi	r18, 0x59	; 89
    3c52:	37 e7       	ldi	r19, 0x77	; 119
    3c54:	20 93 2d 39 	sts	0x392D, r18	; 0x80392d <reactStr+0x8>
    3c58:	30 93 2e 39 	sts	0x392E, r19	; 0x80392e <reactStr+0x9>
    reactStr[1][number]=length;
    3c5c:	2d e3       	ldi	r18, 0x3D	; 61
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	20 93 6d 39 	sts	0x396D, r18	; 0x80396d <reactStr+0x48>
    3c64:	30 93 6e 39 	sts	0x396E, r19	; 0x80396e <reactStr+0x49>
    reactStr[2][number]=type;
    3c68:	80 93 ad 39 	sts	0x39AD, r24	; 0x8039ad <reactStr+0x88>
    3c6c:	90 93 ae 39 	sts	0x39AE, r25	; 0x8039ae <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c70:	f8 01       	movw	r30, r16
    3c72:	10 82       	st	Z, r1
    3c74:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c76:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3c78:	86 cf       	rjmp	.-244    	; 0x3b86 <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c7a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3c7e:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	49 f0       	breq	.+18     	; 0x3c98 <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3c86:	f3 01       	movw	r30, r6
    3c88:	61 81       	ldd	r22, Z+1	; 0x01
    3c8a:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <CheckLetter>
    3c8e:	88 23       	and	r24, r24
    3c90:	19 f0       	breq	.+6      	; 0x3c98 <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c92:	01 e0       	ldi	r16, 0x01	; 1
    3c94:	10 e0       	ldi	r17, 0x00	; 0
    3c96:	9b cf       	rjmp	.-202    	; 0x3bce <ProcessInput+0xf1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c98:	81 e6       	ldi	r24, 0x61	; 97
    3c9a:	99 e7       	ldi	r25, 0x79	; 121
    3c9c:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x2>
    3ca0:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x3>
    reactStr[1][number]=length;
    3ca4:	81 e2       	ldi	r24, 0x21	; 33
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3ca8:	cb c8       	rjmp	.-3690   	; 0x2e40 <ProcessInput+0x190>
    3caa:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3cac:	10 82       	st	Z, r1
    3cae:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3cb2:	1d ba       	out	0x1d, r1	; 29
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	28 96       	adiw	r28, 0x08	; 8
    3cb8:	ee e0       	ldi	r30, 0x0E	; 14
    3cba:	f6 c0       	rjmp	.+492    	; 0x3ea8 <__epilogue_restores__+0x8>

00003cbc <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3cbc:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3cbe:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <PunishmentTime>
    3cc2:	90 91 12 39 	lds	r25, 0x3912	; 0x803912 <PunishmentTime+0x1>
    3cc6:	89 2b       	or	r24, r25
    3cc8:	09 f1       	breq	.+66     	; 0x3d0c <TextAdventure+0x50>
        PunishmentCount = getClock();
    3cca:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <getClock>
        if (PunishmentCount < PunishmentTime)
    3cce:	20 91 11 39 	lds	r18, 0x3911	; 0x803911 <PunishmentTime>
    3cd2:	30 91 12 39 	lds	r19, 0x3912	; 0x803912 <PunishmentTime+0x1>
    3cd6:	82 17       	cp	r24, r18
    3cd8:	93 07       	cpc	r25, r19
    3cda:	08 f4       	brcc	.+2      	; 0x3cde <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3cdc:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3cde:	ac 01       	movw	r20, r24
    3ce0:	42 1b       	sub	r20, r18
    3ce2:	53 0b       	sbc	r21, r19
    3ce4:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3ce6:	4b 30       	cpi	r20, 0x0B	; 11
    3ce8:	51 05       	cpc	r21, r1
    3cea:	30 f0       	brcs	.+12     	; 0x3cf8 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3cec:	10 92 11 39 	sts	0x3911, r1	; 0x803911 <PunishmentTime>
    3cf0:	10 92 12 39 	sts	0x3912, r1	; 0x803912 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3cf4:	2a e0       	ldi	r18, 0x0A	; 10
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3cf8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    3cfc:	81 11       	cpse	r24, r1
    3cfe:	06 c0       	rjmp	.+12     	; 0x3d0c <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3d00:	65 e0       	ldi	r22, 0x05	; 5
    3d02:	62 1b       	sub	r22, r18
    3d04:	8a e0       	ldi	r24, 0x0A	; 10
    3d06:	82 1b       	sub	r24, r18
    3d08:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3d0c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <CheckSend>
    3d10:	88 23       	and	r24, r24
    3d12:	11 f0       	breq	.+4      	; 0x3d18 <TextAdventure+0x5c>
    3d14:	c1 e0       	ldi	r28, 0x01	; 1
    3d16:	18 c0       	rjmp	.+48     	; 0x3d48 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3d18:	0e 94 a9 13 	call	0x2752	; 0x2752 <CheckResponse>
    3d1c:	c8 2f       	mov	r28, r24
    3d1e:	81 11       	cpse	r24, r1
    3d20:	f9 cf       	rjmp	.-14     	; 0x3d14 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3d22:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <PunishmentTime>
    3d26:	90 91 12 39 	lds	r25, 0x3912	; 0x803912 <PunishmentTime+0x1>
    3d2a:	89 2b       	or	r24, r25
    3d2c:	69 f4       	brne	.+26     	; 0x3d48 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d2e:	88 e7       	ldi	r24, 0x78	; 120
    3d30:	98 e3       	ldi	r25, 0x38	; 56
    3d32:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <CheckInput>
    3d36:	c8 2f       	mov	r28, r24
    3d38:	81 11       	cpse	r24, r1
    3d3a:	05 c0       	rjmp	.+10     	; 0x3d46 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3d3c:	88 e7       	ldi	r24, 0x78	; 120
    3d3e:	98 e3       	ldi	r25, 0x38	; 56
    3d40:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <ProcessInput>
    3d44:	01 c0       	rjmp	.+2      	; 0x3d48 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d46:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d48:	8c 2f       	mov	r24, r28
    3d4a:	cf 91       	pop	r28
    3d4c:	08 95       	ret

00003d4e <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d4e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Setup>
    LoadGameState();
    3d52:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LoadGameState>
    gameState[0]|=1;
    3d56:	80 91 6b 3a 	lds	r24, 0x3A6B	; 0x803a6b <gameState>
    3d5a:	81 60       	ori	r24, 0x01	; 1
    3d5c:	80 93 6b 3a 	sts	0x3A6B, r24	; 0x803a6b <gameState>
    SelfTest();
    3d60:	0e 94 76 0e 	call	0x1cec	; 0x1cec <SelfTest>
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3d64:	cf e1       	ldi	r28, 0x1F	; 31
    3d66:	d0 e0       	ldi	r29, 0x00	; 0
    LoadGameState();
    gameState[0]|=1;
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3d68:	0e 94 aa 0c 	call	0x1954	; 0x1954 <GenerateAudio>
    3d6c:	88 23       	and	r24, r24
    3d6e:	e1 f3       	breq	.-8      	; 0x3d68 <main+0x1a>
            lastButtonState = buttonState;
    3d70:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3d74:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3d78:	0e 94 c9 08 	call	0x1192	; 0x1192 <CheckButtons>
    3d7c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            --buttonMark;
    3d80:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    3d84:	81 50       	subi	r24, 0x01	; 1
    3d86:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3d8a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3d8e:	82 31       	cpi	r24, 0x12	; 18
    3d90:	19 f4       	brne	.+6      	; 0x3d98 <main+0x4a>
    3d92:	0e 94 ba 08 	call	0x1174	; 0x1174 <SelectAuIn>
    3d96:	02 c0       	rjmp	.+4      	; 0x3d9c <main+0x4e>
    3d98:	0e 94 ab 08 	call	0x1156	; 0x1156 <SelectTSens>

            GenerateBlinks();
    3d9c:	0e 94 43 0b 	call	0x1686	; 0x1686 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3da0:	8d df       	rcall	.-230    	; 0x3cbc <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3da2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <MagnetMaze>
            LanyardCode();
    3da6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LanyardCode>
            BastetDictates();
    3daa:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <BastetDictates>
            MakeFriends();
    3dae:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    3db2:	0e 94 76 09 	call	0x12ec	; 0x12ec <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3db6:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    3dba:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    3dbe:	0a 97       	sbiw	r24, 0x0a	; 10
    3dc0:	18 f4       	brcc	.+6      	; 0x3dc8 <main+0x7a>
    3dc2:	84 e7       	ldi	r24, 0x74	; 116
    3dc4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3dc8:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <adcPhot>
    3dcc:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    3dd0:	85 36       	cpi	r24, 0x65	; 101
    3dd2:	91 05       	cpc	r25, r1
    3dd4:	18 f0       	brcs	.+6      	; 0x3ddc <main+0x8e>
    3dd6:	84 ef       	ldi	r24, 0xF4	; 244
    3dd8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3ddc:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3de0:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3de4:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3de8:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3dec:	46 e0       	ldi	r20, 0x06	; 6
    3dee:	36 95       	lsr	r19
    3df0:	27 95       	ror	r18
    3df2:	4a 95       	dec	r20
    3df4:	e1 f7       	brne	.-8      	; 0x3dee <main+0xa0>
    3df6:	82 1b       	sub	r24, r18
    3df8:	93 0b       	sbc	r25, r19
    3dfa:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dfe:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3e02:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e06:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e0a:	93 95       	inc	r25
    3e0c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e10:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3e14:	20 91 c7 3a 	lds	r18, 0x3AC7	; 0x803ac7 <adcPhot>
    3e18:	30 91 c8 3a 	lds	r19, 0x3AC8	; 0x803ac8 <adcPhot+0x1>
    3e1c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e20:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e24:	22 0f       	add	r18, r18
    3e26:	23 2f       	mov	r18, r19
    3e28:	22 1f       	adc	r18, r18
    3e2a:	33 0b       	sbc	r19, r19
    3e2c:	31 95       	neg	r19
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e2 1b       	sub	r30, r18
    3e32:	f3 0b       	sbc	r31, r19
    3e34:	e2 5f       	subi	r30, 0xF2	; 242
    3e36:	f0 44       	sbci	r31, 0x40	; 64
    3e38:	20 81       	ld	r18, Z
    3e3a:	82 1b       	sub	r24, r18
    3e3c:	91 09       	sbc	r25, r1
    3e3e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e42:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3e46:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e4a:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e4e:	66 e0       	ldi	r22, 0x06	; 6
    3e50:	96 95       	lsr	r25
    3e52:	87 95       	ror	r24
    3e54:	6a 95       	dec	r22
    3e56:	e1 f7       	brne	.-8      	; 0x3e50 <main+0x102>
    3e58:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3e5c:	0e 94 89 0a 	call	0x1512	; 0x1512 <HotSummer>
    3e60:	83 cf       	rjmp	.-250    	; 0x3d68 <main+0x1a>

00003e62 <__tablejump2__>:
    3e62:	ee 0f       	add	r30, r30
    3e64:	ff 1f       	adc	r31, r31
    3e66:	05 90       	lpm	r0, Z+
    3e68:	f4 91       	lpm	r31, Z
    3e6a:	e0 2d       	mov	r30, r0
    3e6c:	09 94       	ijmp

00003e6e <__prologue_saves__>:
    3e6e:	2f 92       	push	r2
    3e70:	3f 92       	push	r3
    3e72:	4f 92       	push	r4
    3e74:	5f 92       	push	r5
    3e76:	6f 92       	push	r6
    3e78:	7f 92       	push	r7
    3e7a:	8f 92       	push	r8
    3e7c:	9f 92       	push	r9
    3e7e:	af 92       	push	r10
    3e80:	bf 92       	push	r11
    3e82:	cf 92       	push	r12
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	ca 1b       	sub	r28, r26
    3e98:	db 0b       	sbc	r29, r27
    3e9a:	cd bf       	out	0x3d, r28	; 61
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	09 94       	ijmp

00003ea0 <__epilogue_restores__>:
    3ea0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ea2:	39 88       	ldd	r3, Y+17	; 0x11
    3ea4:	48 88       	ldd	r4, Y+16	; 0x10
    3ea6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ea8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3eaa:	7d 84       	ldd	r7, Y+13	; 0x0d
    3eac:	8c 84       	ldd	r8, Y+12	; 0x0c
    3eae:	9b 84       	ldd	r9, Y+11	; 0x0b
    3eb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3eb2:	b9 84       	ldd	r11, Y+9	; 0x09
    3eb4:	c8 84       	ldd	r12, Y+8	; 0x08
    3eb6:	df 80       	ldd	r13, Y+7	; 0x07
    3eb8:	ee 80       	ldd	r14, Y+6	; 0x06
    3eba:	fd 80       	ldd	r15, Y+5	; 0x05
    3ebc:	0c 81       	ldd	r16, Y+4	; 0x04
    3ebe:	1b 81       	ldd	r17, Y+3	; 0x03
    3ec0:	aa 81       	ldd	r26, Y+2	; 0x02
    3ec2:	b9 81       	ldd	r27, Y+1	; 0x01
    3ec4:	ce 0f       	add	r28, r30
    3ec6:	d1 1d       	adc	r29, r1
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	ed 01       	movw	r28, r26
    3ece:	08 95       	ret

00003ed0 <_exit>:
    3ed0:	f8 94       	cli

00003ed2 <__stop_program>:
    3ed2:	ff cf       	rjmp	.-2      	; 0x3ed2 <__stop_program>
