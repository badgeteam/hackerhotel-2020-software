
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00803800  0000141c  000014d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  000093d4  000013d4  00001488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000d0  00803826  00803826  000014f6  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000228  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c51  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022dd  00000000  00000000  000053e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e4b  00000000  00000000  000076be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000578  00000000  00000000  0000950c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001563  00000000  00000000  00009a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001397  00000000  00000000  0000afe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  0000c37e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c5       	rjmp	.+2798   	; 0xb08 <__vector_6>
      1a:	00 00       	nop
      1c:	be c5       	rjmp	.+2940   	; 0xb9a <__vector_7>
      1e:	00 00       	nop
      20:	aa c3       	rjmp	.+1876   	; 0x776 <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	f1 c3       	rjmp	.+2018   	; 0x818 <__vector_13>
      36:	00 00       	nop
      38:	22 c4       	rjmp	.+2116   	; 0x87e <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e0 c4       	rjmp	.+2496   	; 0xa12 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c5       	rjmp	.+2590   	; 0xa78 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c4       	rjmp	.+2230   	; 0x924 <__vector_27>
      6e:	00 00       	nop
      70:	b4 c4       	rjmp	.+2408   	; 0x9da <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	ec e1       	ldi	r30, 0x1C	; 28
      90:	f4 e1       	ldi	r31, 0x14	; 20
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 32       	cpi	r26, 0x26	; 38
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a6 e2       	ldi	r26, 0x26	; 38
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 3f       	cpi	r26, 0xF6	; 246
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 40 09 	call	0x1280	; 0x1280 <main>
      b2:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
  
    return 0;
}
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	08 95       	ret

000000bc <I2C_init>:

#define NOP() asm volatile(" nop \r\n")

void I2C_init(void)
{
	PORTB_DIRCLR = 0b00000001;	                                    // SCL = PB0, tri-stated high, avoids glitch
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
    PORTB_OUTCLR = 0b00000001;							
      c2:	e6 e2       	ldi	r30, 0x26	; 38
      c4:	f4 e0       	ldi	r31, 0x04	; 4
      c6:	80 83       	st	Z, r24
    PORTB_PIN0CTRL = 0;
      c8:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
	PORTB_DIRSET = 0b00000010;                                      // SDA = PB1
      cc:	a1 e2       	ldi	r26, 0x21	; 33
      ce:	b4 e0       	ldi	r27, 0x04	; 4
      d0:	92 e0       	ldi	r25, 0x02	; 2
      d2:	9c 93       	st	X, r25
	PORTB_OUTCLR = 0b00000010;
      d4:	90 83       	st	Z, r25
    PORTB_PIN1CTRL = 0;
      d6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>

	
	TWI0.MBAUD = (uint8_t) TWI0_BAUD(400000, 0);					// set MBAUD register, TWI0_BAUD macro calculates parameter for 400 kHz
      da:	e0 e1       	ldi	r30, 0x10	; 16
      dc:	f8 e0       	ldi	r31, 0x08	; 8
      de:	97 e0       	ldi	r25, 0x07	; 7
      e0:	96 83       	std	Z+6, r25	; 0x06
	TWI0.MCTRLB = TWI_FLUSH_bm;										// clear the internal state of the master
      e2:	98 e0       	ldi	r25, 0x08	; 8
      e4:	94 83       	std	Z+4, r25	; 0x04
	TWI0.MCTRLA =	  1 << TWI_ENABLE_bp							// Enable TWI Master: enabled
      e6:	83 83       	std	Z+3, r24	; 0x03
					| 0 << TWI_RIEN_bp								// Read Interrupt Enable: disabled
					| 0 << TWI_SMEN_bp								// Smart Mode Enable: disabled
					| TWI_TIMEOUT_DISABLED_gc						// Bus Timeout Disabled (inoperative, see errata)
					| 0 << TWI_WIEN_bp;								// Write Interrupt Enable: disabled

	PORTB_DIRSET = 0b00000001;	
      e8:	8c 93       	st	X, r24
	
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;							// force bus idle
      ea:	85 81       	ldd	r24, Z+5	; 0x05
      ec:	81 60       	ori	r24, 0x01	; 1
      ee:	85 83       	std	Z+5, r24	; 0x05
	TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm | TWI_BUSERR_bm);		// clear flags	
      f0:	85 81       	ldd	r24, Z+5	; 0x05
      f2:	84 6c       	ori	r24, 0xC4	; 196
      f4:	85 83       	std	Z+5, r24	; 0x05
      f6:	08 95       	ret

000000f8 <LanyardCode>:
uint8_t         lanyardState = TRUE;
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
      f8:	cf 93       	push	r28
    if (CheckState(LANYARD_COMPLETED)) {
      fa:	8b e7       	ldi	r24, 0x7B	; 123
      fc:	25 d7       	rcall	.+3658   	; 0xf48 <CheckState>
      fe:	81 11       	cpse	r24, r1
     100:	f0 c0       	rjmp	.+480    	; 0x2e2 <LanyardCode+0x1ea>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     102:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <gameNow>
     106:	88 23       	and	r24, r24
     108:	19 f0       	breq	.+6      	; 0x110 <LanyardCode+0x18>
     10a:	83 30       	cpi	r24, 0x03	; 3
     10c:	09 f0       	breq	.+2      	; 0x110 <LanyardCode+0x18>
     10e:	e9 c0       	rjmp	.+466    	; 0x2e2 <LanyardCode+0x1ea>
        return 0;

    /* activate led for buttonstate */
    iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);
     110:	c0 91 ef 93 	lds	r28, 0x93EF	; 0x8093ef <__bss_end+0x5af9>
     114:	ec 2f       	mov	r30, r28
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     11c:	8f 3f       	cpi	r24, 0xFF	; 255
     11e:	19 f0       	breq	.+6      	; 0x126 <LanyardCode+0x2e>
     120:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     124:	01 c0       	rjmp	.+2      	; 0x128 <LanyardCode+0x30>
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	e9 53       	subi	r30, 0x39	; 57
     12a:	f7 4c       	sbci	r31, 0xC7	; 199
     12c:	90 83       	st	Z, r25

    if ( (buttonState & 0xf0) == 0)
     12e:	98 2f       	mov	r25, r24
     130:	90 7f       	andi	r25, 0xF0	; 240
     132:	09 f4       	brne	.+2      	; 0x136 <LanyardCode+0x3e>
     134:	d6 c0       	rjmp	.+428    	; 0x2e2 <LanyardCode+0x1ea>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     136:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     13a:	98 2f       	mov	r25, r24
     13c:	92 27       	eor	r25, r18
     13e:	9f 70       	andi	r25, 0x0F	; 15
     140:	09 f4       	brne	.+2      	; 0x144 <LanyardCode+0x4c>
     142:	cf c0       	rjmp	.+414    	; 0x2e2 <LanyardCode+0x1ea>
        return 0;

    if (lastButtonState == 0xff){
     144:	2f 3f       	cpi	r18, 0xFF	; 255
     146:	09 f0       	breq	.+2      	; 0x14a <LanyardCode+0x52>
     148:	c8 c0       	rjmp	.+400    	; 0x2da <LanyardCode+0x1e2>
        switch (buttonState & 0x0f) {
     14a:	8f 70       	andi	r24, 0x0F	; 15
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	61 f0       	breq	.+24     	; 0x168 <LanyardCode+0x70>
     150:	28 f4       	brcc	.+10     	; 0x15c <LanyardCode+0x64>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	69 f4       	brne	.+26     	; 0x170 <LanyardCode+0x78>
            case 0b0001: {
                digit = 0;
     156:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     15a:	0d c0       	rjmp	.+26     	; 0x176 <LanyardCode+0x7e>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     15c:	84 30       	cpi	r24, 0x04	; 4
     15e:	31 f0       	breq	.+12     	; 0x16c <LanyardCode+0x74>
     160:	88 30       	cpi	r24, 0x08	; 8
     162:	31 f4       	brne	.+12     	; 0x170 <LanyardCode+0x78>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	05 c0       	rjmp	.+10     	; 0x172 <LanyardCode+0x7a>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	03 c0       	rjmp	.+6      	; 0x172 <LanyardCode+0x7a>
                break;
            }

            case 0b0100: {
                digit = 3;
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	01 c0       	rjmp	.+2      	; 0x172 <LanyardCode+0x7a>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     17c:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <lanyardPos>
     180:	e8 2f       	mov	r30, r24
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	ec 52       	subi	r30, 0x2C	; 44
     186:	fc 46       	sbci	r31, 0x6C	; 108
     188:	20 81       	ld	r18, Z
     18a:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     18e:	e0 91 ec 93 	lds	r30, 0x93EC	; 0x8093ec <__bss_end+0x5af6>
     192:	29 13       	cpse	r18, r25
     194:	17 c0       	rjmp	.+46     	; 0x1c4 <LanyardCode+0xcc>
            lanyardState &= TRUE;
     196:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     19a:	91 70       	andi	r25, 0x01	; 1
     19c:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	e9 53       	subi	r30, 0x39	; 57
     1a4:	f7 4c       	sbci	r31, 0xC7	; 199
     1a6:	90 e8       	ldi	r25, 0x80	; 128
     1a8:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     1aa:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	e9 53       	subi	r30, 0x39	; 57
     1b2:	f7 4c       	sbci	r31, 0xC7	; 199
     1b4:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     1b6:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	e9 53       	subi	r30, 0x39	; 57
     1be:	f7 4c       	sbci	r31, 0xC7	; 199
     1c0:	10 82       	st	Z, r1
     1c2:	13 c0       	rjmp	.+38     	; 0x1ea <LanyardCode+0xf2>
        } else {
            lanyardState = FALSE;
     1c4:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	e9 53       	subi	r30, 0x39	; 57
     1cc:	f7 4c       	sbci	r31, 0xC7	; 199
     1ce:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     1d0:	84 30       	cpi	r24, 0x04	; 4
     1d2:	58 f4       	brcc	.+22     	; 0x1ea <LanyardCode+0xf2>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     1d4:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                lanyardPos      = 0;
     1d8:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <lanyardPos>
                lanyardCnt      = 0;
     1dc:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <__data_end>
                lanyardState    = TRUE;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	7a c0       	rjmp	.+244    	; 0x2de <LanyardCode+0x1e6>
                return 0;
            }
        }
        lanyardPos++;
     1ea:	8f 5f       	subi	r24, 0xFF	; 255
     1ec:	80 93 27 38 	sts	0x3827, r24	; 0x803827 <lanyardPos>
        lanyardCnt++;            
     1f0:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <__data_end>
     1f4:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     1f6:	94 30       	cpi	r25, 0x04	; 4
     1f8:	18 f4       	brcc	.+6      	; 0x200 <LanyardCode+0x108>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     1fa:	90 93 26 38 	sts	0x3826, r25	; 0x803826 <__data_end>
     1fe:	6d c0       	rjmp	.+218    	; 0x2da <LanyardCode+0x1e2>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     200:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <__data_end>
            if (lanyardState == TRUE) {
     204:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	a1 f5       	brne	.+104    	; 0x274 <LanyardCode+0x17c>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     20c:	e8 2f       	mov	r30, r24
     20e:	e6 95       	lsr	r30
     210:	e6 95       	lsr	r30
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	e2 50       	subi	r30, 0x02	; 2
     216:	fc 46       	sbci	r31, 0x6C	; 108
     218:	e5 81       	ldd	r30, Z+5	; 0x05
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     220:	e9 53       	subi	r30, 0x39	; 57
     222:	f7 4c       	sbci	r31, 0xC7	; 199
     224:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     226:	88 31       	cpi	r24, 0x18	; 24
     228:	09 f0       	breq	.+2      	; 0x22c <LanyardCode+0x134>
     22a:	57 c0       	rjmp	.+174    	; 0x2da <LanyardCode+0x1e2>
                    UpdateState(LANYARD_COMPLETED);
     22c:	8b e7       	ldi	r24, 0x7B	; 123
     22e:	82 d6       	rcall	.+3332   	; 0xf34 <UpdateState>
                    iLED[SCARAB[G]] = 0;
     230:	ec 2f       	mov	r30, r28
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	e9 53       	subi	r30, 0x39	; 57
     236:	f7 4c       	sbci	r31, 0xC7	; 199
     238:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     23a:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	e9 53       	subi	r30, 0x39	; 57
     242:	f7 4c       	sbci	r31, 0xC7	; 199
     244:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     246:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	e9 53       	subi	r30, 0x39	; 57
     24e:	f7 4c       	sbci	r31, 0xC7	; 199
     250:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     252:	e0 91 fd 93 	lds	r30, 0x93FD	; 0x8093fd <__bss_end+0x5b07>
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     25c:	e9 53       	subi	r30, 0x39	; 57
     25e:	f7 4c       	sbci	r31, 0xC7	; 199
     260:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     262:	e0 91 fc 93 	lds	r30, 0x93FC	; 0x8093fc <__bss_end+0x5b06>
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     26c:	e9 53       	subi	r30, 0x39	; 57
     26e:	f7 4c       	sbci	r31, 0xC7	; 199
     270:	80 83       	st	Z, r24
     272:	33 c0       	rjmp	.+102    	; 0x2da <LanyardCode+0x1e2>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     274:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                lanyardPos      = 0;
     278:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <lanyardPos>
                lanyardState    = TRUE;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                iLED[SCARAB[G]] = 0;
     282:	ec 2f       	mov	r30, r28
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	e9 53       	subi	r30, 0x39	; 57
     288:	f7 4c       	sbci	r31, 0xC7	; 199
     28a:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     28c:	e0 91 fd 93 	lds	r30, 0x93FD	; 0x8093fd <__bss_end+0x5b07>
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	e9 53       	subi	r30, 0x39	; 57
     294:	f7 4c       	sbci	r31, 0xC7	; 199
     296:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     298:	e0 91 fc 93 	lds	r30, 0x93FC	; 0x8093fc <__bss_end+0x5b06>
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	e9 53       	subi	r30, 0x39	; 57
     2a0:	f7 4c       	sbci	r31, 0xC7	; 199
     2a2:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     2a4:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     2ae:	e9 53       	subi	r30, 0x39	; 57
     2b0:	f7 4c       	sbci	r31, 0xC7	; 199
     2b2:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     2b4:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     2be:	e9 53       	subi	r30, 0x39	; 57
     2c0:	f7 4c       	sbci	r31, 0xC7	; 199
     2c2:	80 83       	st	Z, r24
     2c4:	a4 e0       	ldi	r26, 0x04	; 4
     2c6:	b4 e9       	ldi	r27, 0x94	; 148
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     2c8:	ed 91       	ld	r30, X+
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	e9 53       	subi	r30, 0x39	; 57
     2ce:	f7 4c       	sbci	r31, 0xC7	; 199
     2d0:	10 82       	st	Z, r1
                iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     2d2:	84 e9       	ldi	r24, 0x94	; 148
     2d4:	aa 30       	cpi	r26, 0x0A	; 10
     2d6:	b8 07       	cpc	r27, r24
     2d8:	b9 f7       	brne	.-18     	; 0x2c8 <LanyardCode+0x1d0>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     2da:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     2de:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     2ec:	87 ef       	ldi	r24, 0xF7	; 247
     2ee:	2c d6       	rcall	.+3160   	; 0xf48 <CheckState>
     2f0:	81 11       	cpse	r24, r1
     2f2:	3e c1       	rjmp	.+636    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     2f4:	8d e7       	ldi	r24, 0x7D	; 125
     2f6:	28 d6       	rcall	.+3152   	; 0xf48 <CheckState>
     2f8:	81 11       	cpse	r24, r1
     2fa:	3a c1       	rjmp	.+628    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     2fc:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <gameNow>
     300:	82 30       	cpi	r24, 0x02	; 2
     302:	08 f0       	brcs	.+2      	; 0x306 <MagnetMaze+0x1e>
     304:	35 c1       	rjmp	.+618    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        return 0;

    if (calHall == 0)
     306:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <calHall>
     30a:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <calHall+0x1>
     30e:	89 2b       	or	r24, r25
     310:	41 f4       	brne	.+16     	; 0x322 <MagnetMaze+0x3a>
        calHall = adcHall;
     312:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <adcHall>
     316:	90 91 a1 38 	lds	r25, 0x38A1	; 0x8038a1 <adcHall+0x1>
     31a:	80 93 f0 38 	sts	0x38F0, r24	; 0x8038f0 <calHall>
     31e:	90 93 f1 38 	sts	0x38F1, r25	; 0x8038f1 <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     322:	80 91 a0 38 	lds	r24, 0x38A0	; 0x8038a0 <adcHall>
     326:	90 91 a1 38 	lds	r25, 0x38A1	; 0x8038a1 <adcHall+0x1>
     32a:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <calHall>
     32e:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <calHall+0x1>
     332:	82 1b       	sub	r24, r18
     334:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     336:	30 91 39 38 	lds	r19, 0x3839	; 0x803839 <curHallState>
     33a:	31 30       	cpi	r19, 0x01	; 1
     33c:	89 f0       	breq	.+34     	; 0x360 <MagnetMaze+0x78>
     33e:	18 f0       	brcs	.+6      	; 0x346 <MagnetMaze+0x5e>
     340:	32 30       	cpi	r19, 0x02	; 2
     342:	c1 f0       	breq	.+48     	; 0x374 <MagnetMaze+0x8c>
     344:	1f c0       	rjmp	.+62     	; 0x384 <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     346:	84 3d       	cpi	r24, 0xD4	; 212
     348:	2e ef       	ldi	r18, 0xFE	; 254
     34a:	92 07       	cpc	r25, r18
     34c:	14 f4       	brge	.+4      	; 0x352 <MagnetMaze+0x6a>
                newHallState = 1;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	04 c0       	rjmp	.+8      	; 0x35a <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     352:	8d 32       	cpi	r24, 0x2D	; 45
     354:	91 40       	sbci	r25, 0x01	; 1
     356:	5c f0       	brlt	.+22     	; 0x36e <MagnetMaze+0x86>
                newHallState = 2;
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <newHallState>
     35e:	12 c0       	rjmp	.+36     	; 0x384 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     360:	8d 32       	cpi	r24, 0x2D	; 45
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	92 07       	cpc	r25, r18
     366:	c4 f7       	brge	.-16     	; 0x358 <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     368:	89 38       	cpi	r24, 0x89	; 137
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
     36c:	84 f3       	brlt	.-32     	; 0x34e <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     36e:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <newHallState>
     372:	08 c0       	rjmp	.+16     	; 0x384 <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     374:	84 3d       	cpi	r24, 0xD4	; 212
     376:	2e ef       	ldi	r18, 0xFE	; 254
     378:	92 07       	cpc	r25, r18
     37a:	4c f3       	brlt	.-46     	; 0x34e <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     37c:	88 37       	cpi	r24, 0x78	; 120
     37e:	91 05       	cpc	r25, r1
     380:	b4 f3       	brlt	.-20     	; 0x36e <MagnetMaze+0x86>
     382:	ea cf       	rjmp	.-44     	; 0x358 <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     384:	c0 91 ef 93 	lds	r28, 0x93EF	; 0x8093ef <__bss_end+0x5af9>
     388:	ec 2f       	mov	r30, r28
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <newHallState>
     390:	88 23       	and	r24, r24
     392:	19 f0       	breq	.+6      	; 0x39a <MagnetMaze+0xb2>
     394:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     398:	01 c0       	rjmp	.+2      	; 0x39c <MagnetMaze+0xb4>
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	e9 53       	subi	r30, 0x39	; 57
     39e:	f7 4c       	sbci	r31, 0xC7	; 199
     3a0:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     3a2:	88 23       	and	r24, r24
     3a4:	59 f0       	breq	.+22     	; 0x3bc <MagnetMaze+0xd4>
     3a6:	20 91 37 38 	lds	r18, 0x3837	; 0x803837 <mazePos>
     3aa:	21 11       	cpse	r18, r1
     3ac:	3d c0       	rjmp	.+122    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <MagnetMaze+0xce>
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <inverted>
     3ba:	36 c0       	rjmp	.+108    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>

    if (newHallState != curHallState) {
     3bc:	33 23       	and	r19, r19
     3be:	09 f4       	brne	.+2      	; 0x3c2 <MagnetMaze+0xda>
     3c0:	d7 c0       	rjmp	.+430    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        curHallState = newHallState;
     3c2:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     3c6:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <mazePos>
     3ca:	82 31       	cpi	r24, 0x12	; 18
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <MagnetMaze+0xe8>
     3ce:	d0 c0       	rjmp	.+416    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
                gameNow   = TEXT;
     3d0:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                mazePos   = 0;
     3d4:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <mazePos>
                mazeState = TRUE;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[SCARAB[G]]    = 0;
     3de:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     3e0:	e0 91 fd 93 	lds	r30, 0x93FD	; 0x8093fd <__bss_end+0x5b07>
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	e9 53       	subi	r30, 0x39	; 57
     3e8:	f7 4c       	sbci	r31, 0xC7	; 199
     3ea:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     3ec:	e0 91 fc 93 	lds	r30, 0x93FC	; 0x8093fc <__bss_end+0x5b06>
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	e9 53       	subi	r30, 0x39	; 57
     3f4:	f7 4c       	sbci	r31, 0xC7	; 199
     3f6:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     3f8:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	e9 53       	subi	r30, 0x39	; 57
     400:	f7 4c       	sbci	r31, 0xC7	; 199
     402:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     404:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	e9 53       	subi	r30, 0x39	; 57
     40c:	f7 4c       	sbci	r31, 0xC7	; 199
     40e:	10 82       	st	Z, r1
     410:	a4 e0       	ldi	r26, 0x04	; 4
     412:	b4 e9       	ldi	r27, 0x94	; 148
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     414:	ed 91       	ld	r30, X+
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	e9 53       	subi	r30, 0x39	; 57
     41a:	f7 4c       	sbci	r31, 0xC7	; 199
     41c:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     41e:	24 e9       	ldi	r18, 0x94	; 148
     420:	aa 30       	cpi	r26, 0x0A	; 10
     422:	b2 07       	cpc	r27, r18
     424:	b9 f7       	brne	.-18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     426:	a4 c0       	rjmp	.+328    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     428:	38 17       	cp	r19, r24
     42a:	09 f4       	brne	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	a1 c0       	rjmp	.+322    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        curHallState = newHallState;
     42e:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     438:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <inverted>
     43c:	99 23       	and	r25, r25
     43e:	11 f0       	breq	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	89 27       	eor	r24, r25
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	e2 2f       	mov	r30, r18
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e6 5f       	subi	r30, 0xF6	; 246
     44c:	fb 46       	sbci	r31, 0x6B	; 107
     44e:	40 81       	ld	r20, Z
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	84 17       	cp	r24, r20
     454:	95 07       	cpc	r25, r21
     456:	91 f4       	brne	.+36     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
                mazeState &= TRUE;
     458:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     45c:	81 70       	andi	r24, 0x01	; 1
     45e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[EYE[R][L]] = 0;
     462:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	e9 53       	subi	r30, 0x39	; 57
     46a:	f7 4c       	sbci	r31, 0xC7	; 199
     46c:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     46e:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	e9 53       	subi	r30, 0x39	; 57
     476:	f7 4c       	sbci	r31, 0xC7	; 199
     478:	10 82       	st	Z, r1
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
            } else {
                mazeState = FALSE;
     47c:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	20 93 37 38 	sts	0x3837, r18	; 0x803837 <mazePos>
            mazeCnt++;            
     486:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <mazeCnt>
     48a:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     48c:	83 30       	cpi	r24, 0x03	; 3
     48e:	18 f4       	brcc	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     490:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <mazeCnt>
     494:	6d c0       	rjmp	.+218    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     496:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <mazeCnt>
                if (mazeState == TRUE) {
     49a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	a9 f5       	brne	.+106    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     4a2:	eb ea       	ldi	r30, 0xAB	; 171
     4a4:	2e 9f       	mul	r18, r30
     4a6:	e1 2d       	mov	r30, r1
     4a8:	11 24       	eor	r1, r1
     4aa:	e6 95       	lsr	r30
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	e2 50       	subi	r30, 0x02	; 2
     4b0:	fc 46       	sbci	r31, 0x6C	; 108
     4b2:	e5 81       	ldd	r30, Z+5	; 0x05
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4ba:	e9 53       	subi	r30, 0x39	; 57
     4bc:	f7 4c       	sbci	r31, 0xC7	; 199
     4be:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     4c0:	22 31       	cpi	r18, 0x12	; 18
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
                        UpdateState(MAZE_COMPLETED);
     4c4:	55 c0       	rjmp	.+170    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     4c6:	8d e7       	ldi	r24, 0x7D	; 125
     4c8:	35 d5       	rcall	.+2666   	; 0xf34 <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     4ca:	d0 e0       	ldi	r29, 0x00	; 0
     4cc:	c9 53       	subi	r28, 0x39	; 57
     4ce:	d7 4c       	sbci	r29, 0xC7	; 199
     4d0:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     4d2:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	e9 53       	subi	r30, 0x39	; 57
     4da:	f7 4c       	sbci	r31, 0xC7	; 199
     4dc:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     4de:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	e9 53       	subi	r30, 0x39	; 57
     4e6:	f7 4c       	sbci	r31, 0xC7	; 199
     4e8:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     4ea:	e0 91 fd 93 	lds	r30, 0x93FD	; 0x8093fd <__bss_end+0x5b07>
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4f4:	e9 53       	subi	r30, 0x39	; 57
     4f6:	f7 4c       	sbci	r31, 0xC7	; 199
     4f8:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     4fa:	e0 91 fc 93 	lds	r30, 0x93FC	; 0x8093fc <__bss_end+0x5b06>
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     504:	e9 53       	subi	r30, 0x39	; 57
     506:	f7 4c       	sbci	r31, 0xC7	; 199
     508:	80 83       	st	Z, r24
     50a:	32 c0       	rjmp	.+100    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     50c:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <gameNow>
                    mazePos   = 0;
     510:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <mazePos>
                    mazeState = TRUE;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                    iLED[SCARAB[G]]    = 0;
     51a:	d0 e0       	ldi	r29, 0x00	; 0
     51c:	c9 53       	subi	r28, 0x39	; 57
     51e:	d7 4c       	sbci	r29, 0xC7	; 199
     520:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     522:	e0 91 fd 93 	lds	r30, 0x93FD	; 0x8093fd <__bss_end+0x5b07>
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	e9 53       	subi	r30, 0x39	; 57
     52a:	f7 4c       	sbci	r31, 0xC7	; 199
     52c:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     52e:	e0 91 fc 93 	lds	r30, 0x93FC	; 0x8093fc <__bss_end+0x5b06>
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	e9 53       	subi	r30, 0x39	; 57
     536:	f7 4c       	sbci	r31, 0xC7	; 199
     538:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     53a:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     544:	e9 53       	subi	r30, 0x39	; 57
     546:	f7 4c       	sbci	r31, 0xC7	; 199
     548:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     54a:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     554:	e9 53       	subi	r30, 0x39	; 57
     556:	f7 4c       	sbci	r31, 0xC7	; 199
     558:	80 83       	st	Z, r24
     55a:	a4 e0       	ldi	r26, 0x04	; 4
     55c:	b4 e9       	ldi	r27, 0x94	; 148
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     55e:	ed 91       	ld	r30, X+
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	e9 53       	subi	r30, 0x39	; 57
     564:	f7 4c       	sbci	r31, 0xC7	; 199
     566:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     568:	84 e9       	ldi	r24, 0x94	; 148
     56a:	aa 30       	cpi	r26, 0x0A	; 10
     56c:	b8 07       	cpc	r27, r24
     56e:	b9 f7       	brne	.-18     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <Setup>:
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	f8 94       	cli
     57e:	88 ed       	ldi	r24, 0xD8	; 216
     580:	84 bf       	out	0x34, r24	; 52
     582:	c1 e0       	ldi	r28, 0x01	; 1
     584:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     588:	8a e4       	ldi	r24, 0x4A	; 74
     58a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     58e:	8c e7       	ldi	r24, 0x7C	; 124
     590:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     594:	9f e3       	ldi	r25, 0x3F	; 63
     596:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     59a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     59e:	80 68       	ori	r24, 0x80	; 128
     5a0:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     5a4:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     5ae:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     5b2:	80 68       	ori	r24, 0x80	; 128
     5b4:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     5b8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     5bc:	80 68       	ori	r24, 0x80	; 128
     5be:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     5c2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     5c6:	80 68       	ori	r24, 0x80	; 128
     5c8:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     5cc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     5d0:	80 68       	ori	r24, 0x80	; 128
     5d2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     5d6:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     5da:	d2 e0       	ldi	r29, 0x02	; 2
     5dc:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     5e0:	2b e5       	ldi	r18, 0x5B	; 91
     5e2:	31 e0       	ldi	r19, 0x01	; 1
     5e4:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     5e8:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     5ec:	80 ea       	ldi	r24, 0xA0	; 160
     5ee:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     5fe:	1c ba       	out	0x1c, r1	; 28
     600:	1d ba       	out	0x1d, r1	; 29
     602:	1e ba       	out	0x1e, r1	; 30
     604:	1f ba       	out	0x1f, r1	; 31
     606:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     610:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     614:	87 e7       	ldi	r24, 0x77	; 119
     616:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     61a:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     61e:	8b e0       	ldi	r24, 0x0B	; 11
     620:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     624:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     628:	81 60       	ori	r24, 0x01	; 1
     62a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     62e:	85 e0       	ldi	r24, 0x05	; 5
     630:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     634:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     640:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     644:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     648:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     64c:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     650:	8b e8       	ldi	r24, 0x8B	; 139
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     658:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     65c:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     660:	2d dd       	rcall	.-1446   	; 0xbc <I2C_init>
     662:	82 e1       	ldi	r24, 0x12	; 18
     664:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     66e:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     678:	84 e4       	ldi	r24, 0x44	; 68
     67a:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     67e:	8e e1       	ldi	r24, 0x1E	; 30
     680:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     684:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     688:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     68c:	81 60       	ori	r24, 0x01	; 1
     68e:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     692:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     696:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     69a:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     69e:	82 e5       	ldi	r24, 0x52	; 82
     6a0:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     6aa:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     6ae:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     6b2:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     6bc:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     6c6:	80 e8       	ldi	r24, 0x80	; 128
     6c8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     6cc:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     6d0:	81 60       	ori	r24, 0x01	; 1
     6d2:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     6d6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     6da:	80 fd       	sbrc	r24, 0
     6dc:	fc cf       	rjmp	.-8      	; 0x6d6 <Setup+0x15e>
     6de:	80 e3       	ldi	r24, 0x30	; 48
     6e0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     6e4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     6e8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     6ec:	82 fd       	sbrc	r24, 2
     6ee:	fc cf       	rjmp	.-8      	; 0x6e8 <Setup+0x170>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	98 e7       	ldi	r25, 0x78	; 120
     6f4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     6f8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     6fc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     700:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     704:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     708:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     70c:	82 96       	adiw	r24, 0x22	; 34
     70e:	4c d6       	rcall	.+3224   	; 0x13a8 <__udivmodhi4>
     710:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <tmp16bit>
     714:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <tmp16bit+0x1>
     718:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     71c:	83 fd       	sbrc	r24, 3
     71e:	fc cf       	rjmp	.-8      	; 0x718 <Setup+0x1a0>
     720:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <tmp16bit>
     724:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <tmp16bit+0x1>
     728:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     72c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     73c:	88 e0       	ldi	r24, 0x08	; 8
     73e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     742:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     746:	80 fd       	sbrc	r24, 0
     748:	fc cf       	rjmp	.-8      	; 0x742 <Setup+0x1ca>
     74a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     74e:	81 60       	ori	r24, 0x01	; 1
     750:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     754:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     758:	81 60       	ori	r24, 0x01	; 1
     75a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     75e:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <serRx>
     762:	8a e5       	ldi	r24, 0x5A	; 90
     764:	98 e3       	ldi	r25, 0x38	; 56
     766:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <serTxAddr>
     76a:	90 93 9f 38 	sts	0x389F, r25	; 0x80389f <serTxAddr+0x1>
     76e:	78 94       	sei
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <__vector_8>:
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	af 93       	push	r26
     786:	bf 93       	push	r27
     788:	ef 93       	push	r30
     78a:	ff 93       	push	r31
     78c:	87 e0       	ldi	r24, 0x07	; 7
     78e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     792:	84 e4       	ldi	r24, 0x44	; 68
     794:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     798:	ec b3       	in	r30, 0x1c	; 28
     79a:	88 e0       	ldi	r24, 0x08	; 8
     79c:	e8 9f       	mul	r30, r24
     79e:	f0 01       	movw	r30, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	e9 53       	subi	r30, 0x39	; 57
     7a4:	f7 4c       	sbci	r31, 0xC7	; 199
     7a6:	a8 e2       	ldi	r26, 0x28	; 40
     7a8:	ba e0       	ldi	r27, 0x0A	; 10
     7aa:	96 e0       	ldi	r25, 0x06	; 6
     7ac:	81 91       	ld	r24, Z+
     7ae:	8d 93       	st	X+, r24
     7b0:	9a 95       	dec	r25
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <__vector_8+0x36>
     7b4:	8b e0       	ldi	r24, 0x0B	; 11
     7b6:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     7ba:	8c b3       	in	r24, 0x1c	; 28
     7bc:	83 30       	cpi	r24, 0x03	; 3
     7be:	58 f4       	brcc	.+22     	; 0x7d6 <__vector_8+0x60>
     7c0:	8c b3       	in	r24, 0x1c	; 28
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__vector_8+0x52>
     7c6:	99 0f       	add	r25, r25
     7c8:	8a 95       	dec	r24
     7ca:	ea f7       	brpl	.-6      	; 0x7c6 <__vector_8+0x50>
     7cc:	99 b9       	out	0x09, r25	; 9
     7ce:	8c b3       	in	r24, 0x1c	; 28
     7d0:	83 95       	inc	r24
     7d2:	8c bb       	out	0x1c, r24	; 28
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <__vector_8+0x74>
     7d6:	8c b3       	in	r24, 0x1c	; 28
     7d8:	83 30       	cpi	r24, 0x03	; 3
     7da:	21 f4       	brne	.+8      	; 0x7e4 <__vector_8+0x6e>
     7dc:	2a 9a       	sbi	0x05, 2	; 5
     7de:	83 95       	inc	r24
     7e0:	8c bb       	out	0x1c, r24	; 28
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <__vector_8+0x74>
     7e4:	2e 9a       	sbi	0x05, 6	; 5
     7e6:	88 27       	eor	r24, r24
     7e8:	8c bb       	out	0x1c, r24	; 28
     7ea:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <timeout_I2C>
     7ee:	88 23       	and	r24, r24
     7f0:	29 f0       	breq	.+10     	; 0x7fc <__vector_8+0x86>
     7f2:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <timeout_I2C>
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <timeout_I2C>
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	bf 91       	pop	r27
     808:	af 91       	pop	r26
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <__vector_13>:
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
     82a:	e0 91 9e 38 	lds	r30, 0x389E	; 0x80389e <serTxAddr>
     82e:	f0 91 9f 38 	lds	r31, 0x389F	; 0x80389f <serTxAddr+0x1>
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	91 f0       	breq	.+36     	; 0x85c <__vector_13+0x44>
     838:	80 81       	ld	r24, Z
     83a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     83e:	80 91 9e 38 	lds	r24, 0x389E	; 0x80389e <serTxAddr>
     842:	90 91 9f 38 	lds	r25, 0x389F	; 0x80389f <serTxAddr+0x1>
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <serTxAddr>
     84c:	90 93 9f 38 	sts	0x389F, r25	; 0x80389f <serTxAddr+0x1>
     850:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     854:	80 62       	ori	r24, 0x20	; 32
     856:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     85a:	05 c0       	rjmp	.+10     	; 0x866 <__vector_13+0x4e>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     862:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	9f 91       	pop	r25
     872:	8f 91       	pop	r24
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0
     87a:	1f 90       	pop	r1
     87c:	18 95       	reti

0000087e <__vector_14>:
     87e:	1f 92       	push	r1
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	0f 92       	push	r0
     886:	11 24       	eor	r1, r1
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
     896:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     89a:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     89e:	80 81       	ld	r24, Z
     8a0:	81 11       	cpse	r24, r1
     8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <__vector_14+0x36>
     8a4:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     8a8:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     8ac:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     8b0:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     8b4:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     8b8:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     8bc:	80 81       	ld	r24, Z
     8be:	88 23       	and	r24, r24
     8c0:	e1 f0       	breq	.+56     	; 0x8fa <__vector_14+0x7c>
     8c2:	20 81       	ld	r18, Z
     8c4:	40 91 9b 38 	lds	r20, 0x389B	; 0x80389b <auVolume>
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	2f 57       	subi	r18, 0x7F	; 127
     8cc:	31 09       	sbc	r19, r1
     8ce:	42 9f       	mul	r20, r18
     8d0:	c0 01       	movw	r24, r0
     8d2:	43 9f       	mul	r20, r19
     8d4:	90 0d       	add	r25, r0
     8d6:	11 24       	eor	r1, r1
     8d8:	89 2f       	mov	r24, r25
     8da:	99 0f       	add	r25, r25
     8dc:	99 0b       	sbc	r25, r25
     8de:	80 58       	subi	r24, 0x80	; 128
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     8e6:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     8ea:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     8f4:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     8f8:	06 c0       	rjmp	.+12     	; 0x906 <__vector_14+0x88>
     8fa:	80 e8       	ldi	r24, 0x80	; 128
     8fc:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 ef 38 	sts	0x38EF, r24	; 0x8038ef <auPlayDone>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     90c:	ff 91       	pop	r31
     90e:	ef 91       	pop	r30
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <__vector_27>:
     924:	1f 92       	push	r1
     926:	0f 92       	push	r0
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	0f 92       	push	r0
     92c:	11 24       	eor	r1, r1
     92e:	8f 93       	push	r24
     930:	ef 93       	push	r30
     932:	ff 93       	push	r31
     934:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <serRxDone>
     938:	81 11       	cpse	r24, r1
     93a:	44 c0       	rjmp	.+136    	; 0x9c4 <__vector_27+0xa0>
     93c:	ed b3       	in	r30, 0x1d	; 29
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     944:	e6 5a       	subi	r30, 0xA6	; 166
     946:	f7 4c       	sbci	r31, 0xC7	; 199
     948:	80 83       	st	Z, r24
     94a:	ed b3       	in	r30, 0x1d	; 29
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e6 5a       	subi	r30, 0xA6	; 166
     950:	f7 4c       	sbci	r31, 0xC7	; 199
     952:	80 81       	ld	r24, Z
     954:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     958:	ed b3       	in	r30, 0x1d	; 29
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	e6 5a       	subi	r30, 0xA6	; 166
     95e:	f7 4c       	sbci	r31, 0xC7	; 199
     960:	80 81       	ld	r24, Z
     962:	8a 30       	cpi	r24, 0x0A	; 10
     964:	39 f0       	breq	.+14     	; 0x974 <__vector_27+0x50>
     966:	ed b3       	in	r30, 0x1d	; 29
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	e6 5a       	subi	r30, 0xA6	; 166
     96c:	f7 4c       	sbci	r31, 0xC7	; 199
     96e:	80 81       	ld	r24, Z
     970:	8d 30       	cpi	r24, 0x0D	; 13
     972:	49 f4       	brne	.+18     	; 0x986 <__vector_27+0x62>
     974:	ed b3       	in	r30, 0x1d	; 29
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e6 5a       	subi	r30, 0xA6	; 166
     97a:	f7 4c       	sbci	r31, 0xC7	; 199
     97c:	10 82       	st	Z, r1
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <serRxDone>
     984:	1f c0       	rjmp	.+62     	; 0x9c4 <__vector_27+0xa0>
     986:	ed b3       	in	r30, 0x1d	; 29
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	e6 5a       	subi	r30, 0xA6	; 166
     98c:	f7 4c       	sbci	r31, 0xC7	; 199
     98e:	80 81       	ld	r24, Z
     990:	88 30       	cpi	r24, 0x08	; 8
     992:	39 f0       	breq	.+14     	; 0x9a2 <__vector_27+0x7e>
     994:	ed b3       	in	r30, 0x1d	; 29
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	e6 5a       	subi	r30, 0xA6	; 166
     99a:	f7 4c       	sbci	r31, 0xC7	; 199
     99c:	80 81       	ld	r24, Z
     99e:	8f 37       	cpi	r24, 0x7F	; 127
     9a0:	59 f4       	brne	.+22     	; 0x9b8 <__vector_27+0x94>
     9a2:	8d b3       	in	r24, 0x1d	; 29
     9a4:	88 23       	and	r24, r24
     9a6:	41 f0       	breq	.+16     	; 0x9b8 <__vector_27+0x94>
     9a8:	ed b3       	in	r30, 0x1d	; 29
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	e6 5a       	subi	r30, 0xA6	; 166
     9ae:	f7 4c       	sbci	r31, 0xC7	; 199
     9b0:	10 82       	st	Z, r1
     9b2:	8d b3       	in	r24, 0x1d	; 29
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <__vector_27+0x9e>
     9b8:	8d b3       	in	r24, 0x1d	; 29
     9ba:	80 34       	cpi	r24, 0x40	; 64
     9bc:	18 f4       	brcc	.+6      	; 0x9c4 <__vector_27+0xa0>
     9be:	8d b3       	in	r24, 0x1d	; 29
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	8d bb       	out	0x1d, r24	; 29
     9c4:	80 e8       	ldi	r24, 0x80	; 128
     9c6:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	8f 91       	pop	r24
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_28>:
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	8f 93       	push	r24
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
     9ea:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     9ee:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     9f8:	e5 e0       	ldi	r30, 0x05	; 5
     9fa:	f8 e0       	ldi	r31, 0x08	; 8
     9fc:	80 81       	ld	r24, Z
     9fe:	8f 7d       	andi	r24, 0xDF	; 223
     a00:	80 83       	st	Z, r24
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	8f 91       	pop	r24
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <__vector_20>:
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
     a24:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <adc0Chg>
     a28:	81 11       	cpse	r24, r1
     a2a:	18 c0       	rjmp	.+48     	; 0xa5c <__vector_20+0x4a>
     a2c:	8e b3       	in	r24, 0x1e	; 30
     a2e:	8f 5f       	subi	r24, 0xFF	; 255
     a30:	8f 71       	andi	r24, 0x1F	; 31
     a32:	8e bb       	out	0x1e, r24	; 30
     a34:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     a38:	8e 31       	cpi	r24, 0x1E	; 30
     a3a:	41 f4       	brne	.+16     	; 0xa4c <__vector_20+0x3a>
     a3c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	80 93 f2 38 	sts	0x38F2, r24	; 0x8038f2 <adcTemp>
     a46:	90 93 f3 38 	sts	0x38F3, r25	; 0x8038f3 <adcTemp+0x1>
     a4a:	0a c0       	rjmp	.+20     	; 0xa60 <__vector_20+0x4e>
     a4c:	ee b3       	in	r30, 0x1e	; 30
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     a54:	e9 55       	subi	r30, 0x59	; 89
     a56:	f7 4c       	sbci	r31, 0xC7	; 199
     a58:	80 83       	st	Z, r24
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__vector_20+0x4e>
     a5c:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <adc0Chg>
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_22>:
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     a8a:	81 11       	cpse	r24, r1
     a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <__vector_22+0x2a>
     a8e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     a92:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     a96:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <adcPhot>
     a9a:	90 93 a3 38 	sts	0x38A3, r25	; 0x8038a3 <adcPhot+0x1>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	10 c0       	rjmp	.+32     	; 0xac2 <__vector_22+0x4a>
     aa2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	79 f4       	brne	.+30     	; 0xac8 <__vector_22+0x50>
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     ab0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ab4:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ab8:	80 93 a0 38 	sts	0x38A0, r24	; 0x8038a0 <adcHall>
     abc:	90 93 a1 38 	sts	0x38A1, r25	; 0x8038a1 <adcHall+0x1>
     ac0:	84 e0       	ldi	r24, 0x04	; 4
     ac2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ac6:	10 c0       	rjmp	.+32     	; 0xae8 <__vector_22+0x70>
     ac8:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     acc:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ad0:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <adcBtns>
     ad4:	90 93 9d 38 	sts	0x389D, r25	; 0x80389d <adcBtns+0x1>
     ad8:	8f b3       	in	r24, 0x1f	; 31
     ada:	8f 30       	cpi	r24, 0x0F	; 15
     adc:	29 f4       	brne	.+10     	; 0xae8 <__vector_22+0x70>
     ade:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ae2:	88 e0       	ldi	r24, 0x08	; 8
     ae4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     ae8:	8f b3       	in	r24, 0x1f	; 31
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	8f 70       	andi	r24, 0x0F	; 15
     af0:	99 27       	eor	r25, r25
     af2:	8f bb       	out	0x1f, r24	; 31
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_6>:
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b24:	81 ff       	sbrs	r24, 1
     b26:	25 c0       	rjmp	.+74     	; 0xb72 <__vector_6+0x6a>
     b28:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <buttonMark>
     b2c:	8f 3f       	cpi	r24, 0xFF	; 255
     b2e:	29 f0       	breq	.+10     	; 0xb3a <__vector_6+0x32>
     b30:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <buttonMark>
     b34:	8f 5f       	subi	r24, 0xFF	; 255
     b36:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <buttonMark>
     b3a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b3e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b42:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b46:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b4a:	82 96       	adiw	r24, 0x22	; 34
     b4c:	2d d4       	rcall	.+2138   	; 0x13a8 <__udivmodhi4>
     b4e:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <tmp16bit>
     b52:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <tmp16bit+0x1>
     b56:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b5a:	83 fd       	sbrc	r24, 3
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <__vector_6+0x4e>
     b5e:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <tmp16bit>
     b62:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <tmp16bit+0x1>
     b66:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b6a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	06 c0       	rjmp	.+12     	; 0xb7e <__vector_6+0x76>
     b72:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <minuteMark>
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <minuteMark>
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <__vector_7>:
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	8f 93       	push	r24
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     bac:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     bb0:	8f 91       	pop	r24
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <EERead>:
     bbc:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     bc0:	91 fd       	sbrc	r25, 1
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <EERead>
     bc4:	fb 01       	movw	r30, r22
     bc6:	48 0f       	add	r20, r24
     bc8:	84 17       	cp	r24, r20
     bca:	39 f0       	breq	.+14     	; 0xbda <EERead+0x1e>
     bcc:	a8 2f       	mov	r26, r24
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	bc 5e       	subi	r27, 0xEC	; 236
     bd2:	9c 91       	ld	r25, X
     bd4:	91 93       	st	Z+, r25
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	f7 cf       	rjmp	.-18     	; 0xbc8 <EERead+0xc>
     bda:	08 95       	ret

00000bdc <EEWrite>:
     bdc:	9d e9       	ldi	r25, 0x9D	; 157
     bde:	24 e0       	ldi	r18, 0x04	; 4
     be0:	33 e0       	ldi	r19, 0x03	; 3
     be2:	44 23       	and	r20, r20
     be4:	09 f1       	breq	.+66     	; 0xc28 <EEWrite+0x4c>
     be6:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     bea:	51 fd       	sbrc	r21, 1
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <EEWrite+0xa>
     bee:	94 bf       	out	0x34, r25	; 52
     bf0:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     bf4:	e8 2f       	mov	r30, r24
     bf6:	58 2f       	mov	r21, r24
     bf8:	5f 71       	andi	r21, 0x1F	; 31
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	db 01       	movw	r26, r22
     c02:	11 97       	sbiw	r26, 0x01	; 1
     c04:	ac 91       	ld	r26, X
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	fc 5e       	subi	r31, 0xEC	; 236
     c0a:	a0 83       	st	Z, r26
     c0c:	41 50       	subi	r20, 0x01	; 1
     c0e:	19 f0       	breq	.+6      	; 0xc16 <EEWrite+0x3a>
     c10:	e8 2f       	mov	r30, r24
     c12:	5f 31       	cpi	r21, 0x1F	; 31
     c14:	81 f7       	brne	.-32     	; 0xbf6 <EEWrite+0x1a>
     c16:	94 bf       	out	0x34, r25	; 52
     c18:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     c1c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     c20:	52 ff       	sbrs	r21, 2
     c22:	df cf       	rjmp	.-66     	; 0xbe2 <EEWrite+0x6>
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	08 95       	ret
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	08 95       	ret

00000c2c <SerSpeed>:
     c2c:	28 2f       	mov	r18, r24
     c2e:	81 11       	cpse	r24, r1
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <SerSpeed+0x8>
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	82 1b       	sub	r24, r18
     c3a:	91 09       	sbc	r25, r1
     c3c:	98 2f       	mov	r25, r24
     c3e:	88 27       	eor	r24, r24
     c40:	81 50       	subi	r24, 0x01	; 1
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     c48:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     c4c:	08 95       	ret

00000c4e <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     c4e:	20 91 9c 38 	lds	r18, 0x389C	; 0x80389c <adcBtns>
     c52:	30 91 9d 38 	lds	r19, 0x389D	; 0x80389d <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	36 95       	lsr	r19
     c5a:	27 95       	ror	r18
     c5c:	9a 95       	dec	r25
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <CheckButtons+0xa>
     c60:	33 27       	eor	r19, r19
     c62:	2c 35       	cpi	r18, 0x5C	; 92
     c64:	31 05       	cpc	r19, r1
     c66:	d0 f4       	brcc	.+52     	; 0xc9c <CheckButtons+0x4e>
     c68:	23 35       	cpi	r18, 0x53	; 83
     c6a:	31 05       	cpc	r19, r1
     c6c:	a8 f5       	brcc	.+106    	; 0xcd8 <CheckButtons+0x8a>
     c6e:	22 33       	cpi	r18, 0x32	; 50
     c70:	31 05       	cpc	r19, r1
     c72:	50 f4       	brcc	.+20     	; 0xc88 <CheckButtons+0x3a>
     c74:	2d 32       	cpi	r18, 0x2D	; 45
     c76:	31 05       	cpc	r19, r1
     c78:	58 f5       	brcc	.+86     	; 0xcd0 <CheckButtons+0x82>
     c7a:	23 52       	subi	r18, 0x23	; 35
     c7c:	31 09       	sbc	r19, r1
     c7e:	25 30       	cpi	r18, 0x05	; 5
     c80:	31 05       	cpc	r19, r1
     c82:	80 f5       	brcc	.+96     	; 0xce4 <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     c84:	9c e0       	ldi	r25, 0x0C	; 12
     c86:	2f c0       	rjmp	.+94     	; 0xce6 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     c88:	27 33       	cpi	r18, 0x37	; 55
     c8a:	31 05       	cpc	r19, r1
     c8c:	18 f1       	brcs	.+70     	; 0xcd4 <CheckButtons+0x86>
     c8e:	2e 53       	subi	r18, 0x3E	; 62
     c90:	31 09       	sbc	r19, r1
     c92:	27 30       	cpi	r18, 0x07	; 7
     c94:	31 05       	cpc	r19, r1
     c96:	30 f5       	brcc	.+76     	; 0xce4 <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     c98:	96 e0       	ldi	r25, 0x06	; 6
        break;
     c9a:	25 c0       	rjmp	.+74     	; 0xce6 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     c9c:	2a 38       	cpi	r18, 0x8A	; 138
     c9e:	31 05       	cpc	r19, r1
     ca0:	50 f4       	brcc	.+20     	; 0xcb6 <CheckButtons+0x68>
     ca2:	29 37       	cpi	r18, 0x79	; 121
     ca4:	31 05       	cpc	r19, r1
     ca6:	d0 f4       	brcc	.+52     	; 0xcdc <CheckButtons+0x8e>
     ca8:	23 56       	subi	r18, 0x63	; 99
     caa:	31 09       	sbc	r19, r1
     cac:	2b 30       	cpi	r18, 0x0B	; 11
     cae:	31 05       	cpc	r19, r1
     cb0:	c8 f4       	brcc	.+50     	; 0xce4 <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     cb2:	93 e0       	ldi	r25, 0x03	; 3
        break;
     cb4:	18 c0       	rjmp	.+48     	; 0xce6 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     cb6:	22 3a       	cpi	r18, 0xA2	; 162
     cb8:	31 05       	cpc	r19, r1
     cba:	a0 f0       	brcs	.+40     	; 0xce4 <CheckButtons+0x96>
     cbc:	2b 3b       	cpi	r18, 0xBB	; 187
     cbe:	31 05       	cpc	r19, r1
     cc0:	78 f0       	brcs	.+30     	; 0xce0 <CheckButtons+0x92>
     cc2:	20 5f       	subi	r18, 0xF0	; 240
     cc4:	31 09       	sbc	r19, r1
     cc6:	20 31       	cpi	r18, 0x10	; 16
     cc8:	31 05       	cpc	r19, r1
     cca:	60 f4       	brcc	.+24     	; 0xce4 <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     ccc:	90 e0       	ldi	r25, 0x00	; 0
        break;
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     cd0:	99 e0       	ldi	r25, 0x09	; 9
        break;
     cd2:	09 c0       	rjmp	.+18     	; 0xce6 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     cd4:	98 e0       	ldi	r25, 0x08	; 8
        break;
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     cd8:	94 e0       	ldi	r25, 0x04	; 4
        break;
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     cdc:	92 e0       	ldi	r25, 0x02	; 2
        break;
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     ce0:	91 e0       	ldi	r25, 0x01	; 1
        break;
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     ce4:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     ce6:	28 2f       	mov	r18, r24
     ce8:	2f 70       	andi	r18, 0x0F	; 15
     cea:	92 13       	cpse	r25, r18
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     cee:	98 2f       	mov	r25, r24
     cf0:	90 7f       	andi	r25, 0xF0	; 240
     cf2:	90 3f       	cpi	r25, 0xF0	; 240
     cf4:	39 f0       	breq	.+14     	; 0xd04 <CheckButtons+0xb6>
     cf6:	80 5f       	subi	r24, 0xF0	; 240
     cf8:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     cfa:	99 23       	and	r25, r25
     cfc:	11 f0       	breq	.+4      	; 0xd02 <CheckButtons+0xb4>
     cfe:	89 2f       	mov	r24, r25
     d00:	08 95       	ret
     d02:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     d04:	08 95       	ret

00000d06 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     d06:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3878>
     d0a:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3878+0x1>
     d0e:	9c 01       	movw	r18, r24
     d10:	32 2f       	mov	r19, r18
     d12:	22 27       	eor	r18, r18
     d14:	32 95       	swap	r19
     d16:	33 0f       	add	r19, r19
     d18:	30 7e       	andi	r19, 0xE0	; 224
     d1a:	82 27       	eor	r24, r18
     d1c:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     d1e:	9c 01       	movw	r18, r24
     d20:	23 2f       	mov	r18, r19
     d22:	33 27       	eor	r19, r19
     d24:	26 95       	lsr	r18
     d26:	82 27       	eor	r24, r18
     d28:	93 27       	eor	r25, r19
    state ^= (state << 7);
     d2a:	9c 01       	movw	r18, r24
     d2c:	36 95       	lsr	r19
     d2e:	32 2f       	mov	r19, r18
     d30:	22 27       	eor	r18, r18
     d32:	37 95       	ror	r19
     d34:	27 95       	ror	r18
     d36:	82 27       	eor	r24, r18
     d38:	93 27       	eor	r25, r19
     d3a:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3878>
     d3e:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3878+0x1>
    return (state & 0xff);
}
     d42:	08 95       	ret

00000d44 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	7b 01       	movw	r14, r22
     d54:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     d56:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     d5a:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     d5e:	e8 2f       	mov	r30, r24
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	e7 70       	andi	r30, 0x07	; 7
     d66:	ff 27       	eor	r31, r31
     d68:	e2 5e       	subi	r30, 0xE2	; 226
     d6a:	f7 4c       	sbci	r31, 0xC7	; 199
     d6c:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     d6e:	cb df       	rcall	.-106    	; 0xd06 <lfsr>
     d70:	8d 21       	and	r24, r13
     d72:	c8 0f       	add	r28, r24
     d74:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     d76:	c7 df       	rcall	.-114    	; 0xd06 <lfsr>
     d78:	8d 21       	and	r24, r13
     d7a:	c8 1b       	sub	r28, r24
     d7c:	d1 09       	sbc	r29, r1
     d7e:	0c 17       	cp	r16, r28
     d80:	1d 07       	cpc	r17, r29
     d82:	08 f4       	brcc	.+2      	; 0xd86 <floatSpeed+0x42>
     d84:	e8 01       	movw	r28, r16
     d86:	c7 01       	movw	r24, r14
     d88:	ec 16       	cp	r14, r28
     d8a:	fd 06       	cpc	r15, r29
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <floatSpeed+0x4c>
     d8e:	ce 01       	movw	r24, r28
     d90:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    //0x038B is normal rate, for wind we need to be a bit slower
    if (val < min) val = min;  
    TCB1_CCMP = val;
     d94:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     d98:	df 91       	pop	r29
}
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <floatAround>:
     da8:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	c8 2f       	mov	r28, r24
     db2:	04 2f       	mov	r16, r20
     db4:	12 2f       	mov	r17, r18
    bits = mask[(bits-1)&0x07];
     db6:	e6 2f       	mov	r30, r22
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	e7 70       	andi	r30, 0x07	; 7
     dbe:	ff 27       	eor	r31, r31
     dc0:	e2 5e       	subi	r30, 0xE2	; 226
     dc2:	f7 4c       	sbci	r31, 0xC7	; 199
     dc4:	d0 81       	ld	r29, Z
    sample += lfsr()&bits;
     dc6:	9f df       	rcall	.-194    	; 0xd06 <lfsr>
     dc8:	8d 23       	and	r24, r29
     dca:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
     dcc:	9c df       	rcall	.-200    	; 0xd06 <lfsr>
     dce:	8d 23       	and	r24, r29
     dd0:	c8 1b       	sub	r28, r24
     dd2:	8c 2f       	mov	r24, r28
     dd4:	11 23       	and	r17, r17
    if (max){
     dd6:	41 f0       	breq	.+16     	; 0xde8 <floatAround+0x40>
     dd8:	9c 2f       	mov	r25, r28
     dda:	1c 17       	cp	r17, r28
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <floatAround+0x38>
     dde:	91 2f       	mov	r25, r17
     de0:	80 2f       	mov	r24, r16
     de2:	09 17       	cp	r16, r25
     de4:	08 f4       	brcc	.+2      	; 0xde8 <floatAround+0x40>
     de6:	89 2f       	mov	r24, r25
     de8:	df 91       	pop	r29
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    return sample;
}
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <SaveGameState>:
     df2:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
     df4:	df 92       	push	r13
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	64 97       	sbiw	r28, 0x14	; 20
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
     e0a:	44 e1       	ldi	r20, 0x14	; 20
     e0c:	be 01       	movw	r22, r28
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	d3 de       	rcall	.-602    	; 0xbbc <EERead>
     e16:	86 e4       	ldi	r24, 0x46	; 70
     e18:	c8 2e       	mov	r12, r24
     e1a:	88 e3       	ldi	r24, 0x38	; 56
     e1c:	d8 2e       	mov	r13, r24
     e1e:	8e 01       	movw	r16, r28
     e20:	0f 5f       	subi	r16, 0xFF	; 255
     e22:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     e24:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
     e26:	f8 01       	movw	r30, r16
     e28:	81 91       	ld	r24, Z+
     e2a:	8f 01       	movw	r16, r30
     e2c:	f6 01       	movw	r30, r12
     e2e:	90 81       	ld	r25, Z
     e30:	98 13       	cpse	r25, r24
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     e34:	f3 94       	inc	r15
     e36:	ff ef       	ldi	r31, 0xFF	; 255
     e38:	cf 1a       	sub	r12, r31
     e3a:	df 0a       	sbc	r13, r31
     e3c:	80 e1       	ldi	r24, 0x10	; 16
     e3e:	f8 12       	cpse	r15, r24
     e40:	f2 cf       	rjmp	.-28     	; 0xe26 <SaveGameState+0x34>
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	b6 01       	movw	r22, r12
     e48:	8f 2d       	mov	r24, r15
     e4a:	c8 de       	rcall	.-624    	; 0xbdc <EEWrite>
     e4c:	88 23       	and	r24, r24
     e4e:	91 f3       	breq	.-28     	; 0xe34 <SaveGameState+0x42>
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	36 c0       	rjmp	.+108    	; 0xec0 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
     e54:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <inventory>
     e58:	30 91 2f 38 	lds	r19, 0x382F	; 0x80382f <inventory+0x1>
     e5c:	30 93 56 38 	sts	0x3856, r19	; 0x803856 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
     e60:	20 93 57 38 	sts	0x3857, r18	; 0x803857 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
     e64:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <inventory+0x2>
     e68:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <inventory+0x3>
     e6c:	90 93 58 38 	sts	0x3858, r25	; 0x803858 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
     e70:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
     e74:	89 89       	ldd	r24, Y+17	; 0x11
     e76:	9a 89       	ldd	r25, Y+18	; 0x12
     e78:	98 27       	eor	r25, r24
     e7a:	89 27       	eor	r24, r25
     e7c:	98 27       	eor	r25, r24
     e7e:	28 17       	cp	r18, r24
     e80:	39 07       	cpc	r19, r25
     e82:	69 f4       	brne	.+26     	; 0xe9e <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	98 27       	eor	r25, r24
     e8a:	89 27       	eor	r24, r25
     e8c:	98 27       	eor	r25, r24
     e8e:	20 91 30 38 	lds	r18, 0x3830	; 0x803830 <inventory+0x2>
     e92:	30 91 31 38 	lds	r19, 0x3831	; 0x803831 <inventory+0x3>
     e96:	28 17       	cp	r18, r24
     e98:	39 07       	cpc	r19, r25
     e9a:	49 f4       	brne	.+18     	; 0xeae <SaveGameState+0xbc>
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
     e9e:	42 e0       	ldi	r20, 0x02	; 2
     ea0:	66 e5       	ldi	r22, 0x56	; 86
     ea2:	78 e3       	ldi	r23, 0x38	; 56
     ea4:	80 e1       	ldi	r24, 0x10	; 16
     ea6:	9a de       	rcall	.-716    	; 0xbdc <EEWrite>
     ea8:	88 23       	and	r24, r24
     eaa:	61 f3       	breq	.-40     	; 0xe84 <SaveGameState+0x92>
     eac:	d1 cf       	rjmp	.-94     	; 0xe50 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
     eae:	42 e0       	ldi	r20, 0x02	; 2
     eb0:	68 e5       	ldi	r22, 0x58	; 88
     eb2:	78 e3       	ldi	r23, 0x38	; 56
     eb4:	82 e1       	ldi	r24, 0x12	; 18
     eb6:	92 de       	rcall	.-732    	; 0xbdc <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	81 11       	cpse	r24, r1
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <SaveGameState+0xce>
     ebe:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
     ec0:	89 2f       	mov	r24, r25
     ec2:	64 96       	adiw	r28, 0x14	; 20
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	08 95       	ret

00000ed8 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
     ed8:	e8 2f       	mov	r30, r24
     eda:	ef 77       	andi	r30, 0x7F	; 127
     edc:	e6 95       	lsr	r30
     ede:	e6 95       	lsr	r30
     ee0:	e6 95       	lsr	r30
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	ea 5b       	subi	r30, 0xBA	; 186
     ee6:	f7 4c       	sbci	r31, 0xC7	; 199
     ee8:	20 81       	ld	r18, Z
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	87 70       	andi	r24, 0x07	; 7
     eee:	a9 01       	movw	r20, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <ReadStatusBit+0x1e>
     ef2:	55 95       	asr	r21
     ef4:	47 95       	ror	r20
     ef6:	8a 95       	dec	r24
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <ReadStatusBit+0x1a>
     efa:	ca 01       	movw	r24, r20
}
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	08 95       	ret

00000f00 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
     f00:	e8 2f       	mov	r30, r24
     f02:	ef 77       	andi	r30, 0x7F	; 127
     f04:	e6 95       	lsr	r30
     f06:	e6 95       	lsr	r30
     f08:	e6 95       	lsr	r30
     f0a:	28 2f       	mov	r18, r24
     f0c:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ea 5b       	subi	r30, 0xBA	; 186
     f12:	f7 4c       	sbci	r31, 0xC7	; 199
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <WriteStatusBit+0x1c>
     f1a:	88 0f       	add	r24, r24
     f1c:	2a 95       	dec	r18
     f1e:	ea f7       	brpl	.-6      	; 0xf1a <WriteStatusBit+0x1a>
     f20:	66 23       	and	r22, r22
     f22:	19 f0       	breq	.+6      	; 0xf2a <WriteStatusBit+0x2a>
     f24:	90 81       	ld	r25, Z
     f26:	89 2b       	or	r24, r25
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
     f2a:	80 95       	com	r24
     f2c:	90 81       	ld	r25, Z
     f2e:	89 23       	and	r24, r25
     f30:	80 83       	st	Z, r24
     f32:	08 95       	ret

00000f34 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
     f34:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
     f36:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
     f38:	31 f0       	breq	.+12     	; 0xf46 <UpdateState+0x12>
        if (clearBit) {
     f3a:	97 ff       	sbrs	r25, 7
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <UpdateState+0xe>
            WriteStatusBit(num, 0);
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	dd cf       	rjmp	.-70     	; 0xf00 <WriteStatusBit>
     f46:	08 95       	ret

00000f48 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
     f48:	cf 93       	push	r28
     f4a:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
     f4c:	8f 77       	andi	r24, 0x7F	; 127
     f4e:	c4 df       	rcall	.-120    	; 0xed8 <ReadStatusBit>
     f50:	2c 2f       	mov	r18, r28
     f52:	22 1f       	adc	r18, r18
     f54:	22 27       	eor	r18, r18
     f56:	22 1f       	adc	r18, r18
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	81 11       	cpse	r24, r1
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <CheckState+0x18>
     f5e:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
     f60:	82 2f       	mov	r24, r18
     f62:	89 27       	eor	r24, r25
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
     f68:	e3 e0       	ldi	r30, 0x03	; 3
     f6a:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
     f6c:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
     f6e:	91 91       	ld	r25, Z+
     f70:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
     f72:	ed 30       	cpi	r30, 0x0D	; 13
     f74:	91 e1       	ldi	r25, 0x11	; 17
     f76:	f9 07       	cpc	r31, r25
     f78:	d1 f7       	brne	.-12     	; 0xf6e <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
     f7a:	83 70       	andi	r24, 0x03	; 3
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <whoami>
    return whoami;
}
     f82:	08 95       	ret

00000f84 <Reset>:

void Reset(){
     f84:	e6 e4       	ldi	r30, 0x46	; 70
     f86:	f8 e3       	ldi	r31, 0x38	; 56
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
     f88:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
     f8a:	88 e3       	ldi	r24, 0x38	; 56
     f8c:	ea 35       	cpi	r30, 0x5A	; 90
     f8e:	f8 07       	cpc	r31, r24
     f90:	d9 f7       	brne	.-10     	; 0xf88 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
     f92:	ea df       	rcall	.-44     	; 0xf68 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
     f94:	81 11       	cpse	r24, r1
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     f98:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <gameState+0xd>
     f9c:	80 64       	ori	r24, 0x40	; 64
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     fa4:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <gameState+0xd>
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <gameState+0xd>
     fae:	0d c0       	rjmp	.+26     	; 0xfca <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	21 f4       	brne	.+8      	; 0xfbc <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     fb4:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <gameState+0xe>
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	29 f4       	brne	.+10     	; 0xfca <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     fc0:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <gameState+0xe>
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <gameState+0xe>
     fca:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <gameState>
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <gameState>
     fd4:	08 95       	ret

00000fd6 <LoadGameState>:
    }
    return sample;
}

//Load game status
uint8_t LoadGameState(){
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
     fda:	44 e1       	ldi	r20, 0x14	; 20
     fdc:	66 e4       	ldi	r22, 0x46	; 70
     fde:	78 e3       	ldi	r23, 0x38	; 56
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	ec dd       	rcall	.-1064   	; 0xbbc <EERead>
     fe4:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
     fe8:	8c 2f       	mov	r24, r28
     fea:	76 df       	rcall	.-276    	; 0xed8 <ReadStatusBit>
     fec:	d8 0f       	add	r29, r24
     fee:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
uint8_t LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
     ff0:	c2 37       	cpi	r28, 0x72	; 114
     ff2:	d1 f7       	brne	.-12     	; 0xfe8 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
     ff4:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
     ff6:	11 f0       	breq	.+4      	; 0xffc <LoadGameState+0x26>
     ff8:	c5 df       	rcall	.-118    	; 0xf84 <Reset>
    } else getID();
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <LoadGameState+0x28>
     ffc:	b5 df       	rcall	.-150    	; 0xf68 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
     ffe:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <gameState+0x10>
    1002:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <gameState+0x11>
    1006:	98 27       	eor	r25, r24
    1008:	89 27       	eor	r24, r25
    100a:	98 27       	eor	r25, r24
    100c:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <inventory>
    1010:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1014:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <gameState+0x12>
    1018:	90 91 59 38 	lds	r25, 0x3859	; 0x803859 <gameState+0x13>
    101c:	98 27       	eor	r25, r24
    101e:	89 27       	eor	r24, r25
    1020:	98 27       	eor	r25, r24
    1022:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <inventory+0x2>
    1026:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <inventory+0x3>
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    1030:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1032:	86 e7       	ldi	r24, 0x76	; 118
    1034:	89 df       	rcall	.-238    	; 0xf48 <CheckState>
    1036:	c8 2f       	mov	r28, r24
    1038:	88 23       	and	r24, r24
    103a:	81 f0       	breq	.+32     	; 0x105c <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    103c:	e0 91 ef 93 	lds	r30, 0x93EF	; 0x8093ef <__bss_end+0x5af9>
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	e9 53       	subi	r30, 0x39	; 57
    1044:	f7 4c       	sbci	r31, 0xC7	; 199
    1046:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    1048:	e0 91 ee 93 	lds	r30, 0x93EE	; 0x8093ee <__bss_end+0x5af8>
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    1052:	e9 53       	subi	r30, 0x39	; 57
    1054:	f7 4c       	sbci	r31, 0xC7	; 199
    1056:	80 83       	st	Z, r24
        return 1;
    1058:	c1 e0       	ldi	r28, 0x01	; 1
    105a:	4c c0       	rjmp	.+152    	; 0x10f4 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    105c:	85 e7       	ldi	r24, 0x75	; 117
    105e:	74 df       	rcall	.-280    	; 0xf48 <CheckState>
    1060:	88 23       	and	r24, r24
    1062:	59 f1       	breq	.+86     	; 0x10ba <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    1064:	e0 91 ef 93 	lds	r30, 0x93EF	; 0x8093ef <__bss_end+0x5af9>
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    106e:	e9 53       	subi	r30, 0x39	; 57
    1070:	f7 4c       	sbci	r31, 0xC7	; 199
    1072:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 8))) {
    1074:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <cooledDown.3937>
    1078:	88 23       	and	r24, r24
    107a:	79 f0       	breq	.+30     	; 0x109a <HotSummer+0x6a>
    107c:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <calTemp>
    1080:	90 91 a6 38 	lds	r25, 0x38A6	; 0x8038a6 <calTemp+0x1>
    1084:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <adcTemp>
    1088:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <adcTemp+0x1>
    108c:	08 96       	adiw	r24, 0x08	; 8
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1092:	18 f0       	brcs	.+6      	; 0x109a <HotSummer+0x6a>
    1094:	86 e7       	ldi	r24, 0x76	; 118
    1096:	4e df       	rcall	.-356    	; 0xf34 <UpdateState>
            return 0;
    1098:	2d c0       	rjmp	.+90     	; 0x10f4 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 2)) cooledDown = 1;
    109a:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <calTemp>
    109e:	90 91 a6 38 	lds	r25, 0x38A6	; 0x8038a6 <calTemp+0x1>
    10a2:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <adcTemp>
    10a6:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <adcTemp+0x1>
    10aa:	02 96       	adiw	r24, 0x02	; 2
    10ac:	82 17       	cp	r24, r18
    10ae:	93 07       	cpc	r25, r19
    10b0:	08 f1       	brcs	.+66     	; 0x10f4 <HotSummer+0xc4>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <cooledDown.3937>
    10b8:	1d c0       	rjmp	.+58     	; 0x10f4 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    10ba:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <calTemp>
    10be:	90 91 a6 38 	lds	r25, 0x38A6	; 0x8038a6 <calTemp+0x1>
    10c2:	89 2b       	or	r24, r25
    10c4:	41 f4       	brne	.+16     	; 0x10d6 <HotSummer+0xa6>
    10c6:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <adcTemp>
    10ca:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <adcTemp+0x1>
    10ce:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <calTemp>
    10d2:	90 93 a6 38 	sts	0x38A6, r25	; 0x8038a6 <calTemp+0x1>
        if (adcTemp >= (calTemp + 8)) {
    10d6:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <calTemp>
    10da:	90 91 a6 38 	lds	r25, 0x38A6	; 0x8038a6 <calTemp+0x1>
    10de:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <adcTemp>
    10e2:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <adcTemp+0x1>
    10e6:	08 96       	adiw	r24, 0x08	; 8
    10e8:	28 17       	cp	r18, r24
    10ea:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <HotSummer+0xc4>
    10ee:	85 e7       	ldi	r24, 0x75	; 117
    10f0:	21 df       	rcall	.-446    	; 0xf34 <UpdateState>
        }
    }
    return 0;
    10f2:	c0 e0       	ldi	r28, 0x00	; 0
}
    10f4:	8c 2f       	mov	r24, r28
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <GenerateAudio>:

uint8_t GenerateAudio(){
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29

    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
    1102:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    1106:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
    110a:	88 27       	eor	r24, r24
    110c:	89 2b       	or	r24, r25
    110e:	09 f0       	breq	.+2      	; 0x1112 <GenerateAudio+0x18>
    1110:	ae c0       	rjmp	.+348    	; 0x126e <GenerateAudio+0x174>

        //Silence
        if ((effect&0xE0)==0){
    1112:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    1116:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
    111a:	80 7e       	andi	r24, 0xE0	; 224
    111c:	99 27       	eor	r25, r25
    111e:	89 2b       	or	r24, r25
    1120:	31 f4       	brne	.+12     	; 0x112e <GenerateAudio+0x34>
            auRepAddr = &zero;
    1122:	89 e2       	ldi	r24, 0x29	; 41
    1124:	98 e3       	ldi	r25, 0x38	; 56
    1126:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    112a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
    112e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    1132:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
    1136:	80 7e       	andi	r24, 0xE0	; 224
    1138:	99 27       	eor	r25, r25
    113a:	80 97       	sbiw	r24, 0x20	; 32
    113c:	09 f0       	breq	.+2      	; 0x1140 <GenerateAudio+0x46>
    113e:	45 c0       	rjmp	.+138    	; 0x11ca <GenerateAudio+0xd0>
            static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 192, 255, 192, 128, 64, 1, 64, 1, 64, 128, 0}; 
            static uint8_t loudness, duration, start;

            if (buttonMark) {
    1140:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <buttonMark>
    1144:	88 23       	and	r24, r24
    1146:	09 f4       	brne	.+2      	; 0x114a <GenerateAudio+0x50>
    1148:	40 c0       	rjmp	.+128    	; 0x11ca <GenerateAudio+0xd0>
                if (start == 0) {
    114a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <start.3943>
    114e:	81 11       	cpse	r24, r1
    1150:	15 c0       	rjmp	.+42     	; 0x117c <GenerateAudio+0x82>
                    duration = 8;
    1152:	88 e0       	ldi	r24, 0x08	; 8
    1154:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <duration.3942>
                    loudness = 0xff;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <loudness.3941>
                    TCB1_CCMP = 0x2000;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e2       	ldi	r25, 0x20	; 32
    1162:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1166:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    auRepAddr = &auBuffer[0];
    116a:	8b e0       	ldi	r24, 0x0B	; 11
    116c:	98 e3       	ldi	r25, 0x38	; 56
    116e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1172:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    start = 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <start.3943>
                }

                if (loudness) {
    117c:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <loudness.3941>
    1180:	88 23       	and	r24, r24
    1182:	71 f0       	breq	.+28     	; 0x11a0 <GenerateAudio+0xa6>
                    auVolume = loudness;
    1184:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <auVolume>
                    if (duration) duration--; else loudness <<= 1;
    1188:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <duration.3942>
    118c:	99 23       	and	r25, r25
    118e:	21 f0       	breq	.+8      	; 0x1198 <GenerateAudio+0x9e>
    1190:	91 50       	subi	r25, 0x01	; 1
    1192:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <duration.3942>
    1196:	19 c0       	rjmp	.+50     	; 0x11ca <GenerateAudio+0xd0>
    1198:	88 0f       	add	r24, r24
    119a:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <loudness.3941>
    119e:	15 c0       	rjmp	.+42     	; 0x11ca <GenerateAudio+0xd0>
                } else {
                    auRepAddr = &zero;
    11a0:	89 e2       	ldi	r24, 0x29	; 41
    11a2:	98 e3       	ldi	r25, 0x38	; 56
    11a4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    11a8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    effect &= 0x10;
    11ac:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    11b0:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
    11b4:	80 71       	andi	r24, 0x10	; 16
    11b6:	99 27       	eor	r25, r25
    11b8:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <effect>
    11bc:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <effect+0x1>
                    auVolume = 255;
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <auVolume>
                    start = 0;
    11c6:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <start.3943>
                }
            }
        }

        //Good (bell)
        if ((effect&0xE0)==64){
    11ca:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    11ce:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
    11d2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    11d6:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
    11da:	80 7e       	andi	r24, 0xE0	; 224
    11dc:	99 27       	eor	r25, r25
    11de:	80 36       	cpi	r24, 0x60	; 96
    11e0:	91 05       	cpc	r25, r1
    11e2:	c9 f5       	brne	.+114    	; 0x1256 <GenerateAudio+0x15c>
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
    11e4:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <auBuffer.3944+0x6>
            auRepAddr = &auBuffer[0];
    11e8:	8a e3       	ldi	r24, 0x3A	; 58
    11ea:	98 e3       	ldi	r25, 0x38	; 56
    11ec:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    11f0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    11f4:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    11f6:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    11f8:	d3 e0       	ldi	r29, 0x03	; 3
    11fa:	8c 2f       	mov	r24, r28
    11fc:	6d 2f       	mov	r22, r29
    11fe:	c8 d0       	rcall	.+400    	; 0x1390 <__udivmodqi4>
    1200:	99 23       	and	r25, r25
    1202:	39 f0       	breq	.+14     	; 0x1212 <GenerateAudio+0x118>
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	65 e0       	ldi	r22, 0x05	; 5
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	cd dd       	rcall	.-1126   	; 0xda8 <floatAround>
    120e:	f8 01       	movw	r30, r16
    1210:	81 83       	std	Z+1, r24	; 0x01
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    1212:	cf 5f       	subi	r28, 0xFF	; 255
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	c6 30       	cpi	r28, 0x06	; 6
    121a:	79 f7       	brne	.-34     	; 0x11fa <GenerateAudio+0x100>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
    121c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <buttonMark>
    1220:	88 23       	and	r24, r24
    1222:	c9 f0       	breq	.+50     	; 0x1256 <GenerateAudio+0x15c>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	54 e0       	ldi	r21, 0x04	; 4
    1228:	60 e8       	ldi	r22, 0x80	; 128
    122a:	72 e0       	ldi	r23, 0x02	; 2
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	8a dd       	rcall	.-1260   	; 0xd44 <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1230:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <auVolume>
    1234:	20 ea       	ldi	r18, 0xA0	; 160
    1236:	40 e1       	ldi	r20, 0x10	; 16
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	b6 dd       	rcall	.-1172   	; 0xda8 <floatAround>
    123c:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1240:	20 e9       	ldi	r18, 0x90	; 144
    1242:	40 e7       	ldi	r20, 0x70	; 112
    1244:	62 e0       	ldi	r22, 0x02	; 2
    1246:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <auBuffer.3944>
    124a:	ae dd       	rcall	.-1188   	; 0xda8 <floatAround>
    124c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <auBuffer.3944>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1250:	80 95       	com	r24
    1252:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <auBuffer.3944+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
    1256:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    125a:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
    125e:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    1262:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
    1266:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <effect>
    126a:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <effect+0x1>
        //Rain storm with whistling wind
        else {
        }
    }

    return buttonMark;
    126e:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <buttonMark>
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	08 95       	ret

00001280 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    1280:	7b d9       	rcall	.-3338   	; 0x578 <Setup>

    SerSpeed(0xff);
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	d3 dc       	rcall	.-1626   	; 0xc2c <SerSpeed>
    1286:	ae ef       	ldi	r26, 0xFE	; 254
    1288:	b3 e9       	ldi	r27, 0x93	; 147
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	ed 91       	ld	r30, X+
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	e9 53       	subi	r30, 0x39	; 57
    1292:	f7 4c       	sbci	r31, 0xC7	; 199
    1294:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    1296:	15 96       	adiw	r26, 0x05	; 5
    1298:	ec 91       	ld	r30, X
    129a:	15 97       	sbiw	r26, 0x05	; 5
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	e9 53       	subi	r30, 0x39	; 57
    12a0:	f7 4c       	sbci	r31, 0xC7	; 199
    12a2:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    12a4:	24 e9       	ldi	r18, 0x94	; 148
    12a6:	a4 30       	cpi	r26, 0x04	; 4
    12a8:	b2 07       	cpc	r27, r18
    12aa:	81 f7       	brne	.-32     	; 0x128c <main+0xc>
    12ac:	e0 ef       	ldi	r30, 0xF0	; 240
    12ae:	f3 e9       	ldi	r31, 0x93	; 147
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	ef 01       	movw	r28, r30
    12b4:	a5 81       	ldd	r26, Z+5	; 0x05
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	a9 53       	subi	r26, 0x39	; 57
    12ba:	b7 4c       	sbci	r27, 0xC7	; 199
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	9c 93       	st	X, r25
    12c0:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    12c2:	a8 81       	ld	r26, Y
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	a9 53       	subi	r26, 0x39	; 57
    12c8:	b7 4c       	sbci	r27, 0xC7	; 199
    12ca:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    12cc:	23 e9       	ldi	r18, 0x93	; 147
    12ce:	e5 3f       	cpi	r30, 0xF5	; 245
    12d0:	f2 07       	cpc	r31, r18
    12d2:	79 f7       	brne	.-34     	; 0x12b2 <main+0x32>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    12d4:	e0 91 fc 93 	lds	r30, 0x93FC	; 0x8093fc <__bss_end+0x5b06>
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	e9 53       	subi	r30, 0x39	; 57
    12dc:	f7 4c       	sbci	r31, 0xC7	; 199
    12de:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    12e0:	e0 91 fd 93 	lds	r30, 0x93FD	; 0x8093fd <__bss_end+0x5b07>
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	e9 53       	subi	r30, 0x39	; 57
    12e8:	f7 4c       	sbci	r31, 0xC7	; 199
    12ea:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    12ec:	e0 91 fa 93 	lds	r30, 0x93FA	; 0x8093fa <__bss_end+0x5b04>
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	e9 53       	subi	r30, 0x39	; 57
    12f4:	f7 4c       	sbci	r31, 0xC7	; 199
    12f6:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    12f8:	e0 91 fb 93 	lds	r30, 0x93FB	; 0x8093fb <__bss_end+0x5b05>
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	e9 53       	subi	r30, 0x39	; 57
    1300:	f7 4c       	sbci	r31, 0xC7	; 199
    1302:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    1304:	e0 91 ee 93 	lds	r30, 0x93EE	; 0x8093ee <__bss_end+0x5af8>
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	e9 53       	subi	r30, 0x39	; 57
    130c:	f7 4c       	sbci	r31, 0xC7	; 199
    130e:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    1310:	e0 91 ef 93 	lds	r30, 0x93EF	; 0x8093ef <__bss_end+0x5af9>
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	e9 53       	subi	r30, 0x39	; 57
    1318:	f7 4c       	sbci	r31, 0xC7	; 199
    131a:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    131c:	e0 91 ed 93 	lds	r30, 0x93ED	; 0x8093ed <__bss_end+0x5af7>
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	e9 53       	subi	r30, 0x39	; 57
    1324:	f7 4c       	sbci	r31, 0xC7	; 199
    1326:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    1328:	e0 91 ec 93 	lds	r30, 0x93EC	; 0x8093ec <__bss_end+0x5af6>
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	e9 53       	subi	r30, 0x39	; 57
    1330:	f7 4c       	sbci	r31, 0xC7	; 199
    1332:	80 83       	st	Z, r24

    effect = 32;
    1334:	80 e2       	ldi	r24, 0x20	; 32
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <effect>
    133c:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <effect+0x1>
    LoadGameState();
    1340:	4a de       	rcall	.-876    	; 0xfd6 <LoadGameState>
    while (1)
    {
        


        if (GenerateAudio()){
    1342:	db de       	rcall	.-586    	; 0x10fa <GenerateAudio>
    1344:	88 23       	and	r24, r24
    1346:	e9 f3       	breq	.-6      	; 0x1342 <main+0xc2>
            buttonState = CheckButtons(buttonState);
    1348:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    134c:	80 dc       	rcall	.-1792   	; 0xc4e <CheckButtons>
    134e:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    1352:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <buttonMark>
            
            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            //TextAdventure();
          
            //Other games & user interaction checks
            MagnetMaze();
    1356:	0e 94 74 01 	call	0x2e8	; 0x2e8 <MagnetMaze>
            BastetDictates();
    135a:	90 df       	rcall	.-224    	; 0x127c <BastetDictates>
            LanyardCode();
    135c:	0e 94 7c 00 	call	0xf8	; 0xf8 <LanyardCode>
            MakeFriends();
    1360:	0e 94 5c 00 	call	0xb8	; 0xb8 <MakeFriends>
            SaveGameState(); 
    1364:	46 dd       	rcall	.-1396   	; 0xdf2 <SaveGameState>
    1366:	80 91 a2 38 	lds	r24, 0x38A2	; 0x8038a2 <adcPhot>
            
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    136a:	90 91 a3 38 	lds	r25, 0x38A3	; 0x8038a3 <adcPhot+0x1>
    136e:	0a 97       	sbiw	r24, 0x0a	; 10
    1370:	18 f4       	brcc	.+6      	; 0x1378 <main+0xf8>
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	84 e7       	ldi	r24, 0x74	; 116
    1376:	c4 dd       	rcall	.-1144   	; 0xf00 <WriteStatusBit>
    1378:	80 91 a2 38 	lds	r24, 0x38A2	; 0x8038a2 <adcPhot>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    137c:	90 91 a3 38 	lds	r25, 0x38A3	; 0x8038a3 <adcPhot+0x1>
    1380:	85 36       	cpi	r24, 0x65	; 101
    1382:	91 05       	cpc	r25, r1
    1384:	18 f0       	brcs	.+6      	; 0x138c <main+0x10c>
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	84 e7       	ldi	r24, 0x74	; 116
    138a:	ba dd       	rcall	.-1164   	; 0xf00 <WriteStatusBit>

            //Check temperature 
            HotSummer();
    138c:	51 de       	rcall	.-862    	; 0x1030 <HotSummer>
    138e:	d9 cf       	rjmp	.-78     	; 0x1342 <main+0xc2>

00001390 <__udivmodqi4>:
    1390:	99 1b       	sub	r25, r25
    1392:	79 e0       	ldi	r23, 0x09	; 9
    1394:	04 c0       	rjmp	.+8      	; 0x139e <__udivmodqi4_ep>

00001396 <__udivmodqi4_loop>:
    1396:	99 1f       	adc	r25, r25
    1398:	96 17       	cp	r25, r22
    139a:	08 f0       	brcs	.+2      	; 0x139e <__udivmodqi4_ep>
    139c:	96 1b       	sub	r25, r22

0000139e <__udivmodqi4_ep>:
    139e:	88 1f       	adc	r24, r24
    13a0:	7a 95       	dec	r23
    13a2:	c9 f7       	brne	.-14     	; 0x1396 <__udivmodqi4_loop>
    13a4:	80 95       	com	r24
    13a6:	08 95       	ret

000013a8 <__udivmodhi4>:
    13a8:	aa 1b       	sub	r26, r26
    13aa:	bb 1b       	sub	r27, r27
    13ac:	51 e1       	ldi	r21, 0x11	; 17
    13ae:	07 c0       	rjmp	.+14     	; 0x13be <__udivmodhi4_ep>

000013b0 <__udivmodhi4_loop>:
    13b0:	aa 1f       	adc	r26, r26
    13b2:	bb 1f       	adc	r27, r27
    13b4:	a6 17       	cp	r26, r22
    13b6:	b7 07       	cpc	r27, r23
    13b8:	10 f0       	brcs	.+4      	; 0x13be <__udivmodhi4_ep>
    13ba:	a6 1b       	sub	r26, r22
    13bc:	b7 0b       	sbc	r27, r23

000013be <__udivmodhi4_ep>:
    13be:	88 1f       	adc	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	5a 95       	dec	r21
    13c4:	a9 f7       	brne	.-22     	; 0x13b0 <__udivmodhi4_loop>
    13c6:	80 95       	com	r24
    13c8:	90 95       	com	r25
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	08 95       	ret

000013d0 <_exit>:
    13d0:	f8 94       	cli

000013d2 <__stop_program>:
    13d2:	ff cf       	rjmp	.-2      	; 0x13d2 <__stop_program>
