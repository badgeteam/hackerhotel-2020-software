
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00803800  000042b8  0000436c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fa  0000c1be  000041be  00004272  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002eb  00803830  00803830  0000439c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000330  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000700c  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002904  00000000  00000000  0000b748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f18  00000000  00000000  0000e04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009d0  00000000  00000000  00011f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a87  00000000  00000000  00012934  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000045ea  00000000  00000000  000143bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a0  00000000  00000000  000189a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	ca c7       	rjmp	.+3988   	; 0xfae <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_7>
      20:	f9 c5       	rjmp	.+3058   	; 0xc14 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	40 c6       	rjmp	.+3200   	; 0xcb6 <__vector_13>
      36:	00 00       	nop
      38:	71 c6       	rjmp	.+3298   	; 0xd1c <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2f c7       	rjmp	.+3678   	; 0xeb0 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	62 c7       	rjmp	.+3780   	; 0xf1e <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	aa c6       	rjmp	.+3412   	; 0xdc2 <__vector_27>
      6e:	00 00       	nop
      70:	03 c7       	rjmp	.+3590   	; 0xe78 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ea 0b       	sbc	r30, r26
      7e:	18 0c       	add	r1, r8
      80:	1f 0c       	add	r1, r15
      82:	d5 0c       	add	r13, r5
      84:	d5 0c       	add	r13, r5
      86:	33 0c       	add	r3, r3
      88:	45 0c       	add	r4, r5
      8a:	79 0c       	add	r7, r9
      8c:	9d 0c       	add	r9, r13

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	e8 eb       	ldi	r30, 0xB8	; 184
      a2:	f2 e4       	ldi	r31, 0x42	; 66
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a0 33       	cpi	r26, 0x30	; 48
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a0 e3       	ldi	r26, 0x30	; 48
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	ab 31       	cpi	r26, 0x1B	; 27
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 28 20 	call	0x4050	; 0x4050 <main>
      c4:	0c 94 dd 20 	jmp	0x41ba	; 0x41ba <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      d0:	40 91 c3 3a 	lds	r20, 0x3AC3	; 0x803ac3 <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 c3 3a 	lds	r20, 0x3AC3	; 0x803ac3 <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     108:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; x++){
        if (CheckState(100+x) == 0) foundAll = 0;
     10a:	8c 2f       	mov	r24, r28
     10c:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
     110:	81 11       	cpse	r24, r1
     112:	01 c0       	rjmp	.+2      	; 0x116 <MakeFriends+0x1c>
     114:	d0 e0       	ldi	r29, 0x00	; 0
     116:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; x++){
     118:	c8 36       	cpi	r28, 0x68	; 104
     11a:	b9 f7       	brne	.-18     	; 0x10a <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     11c:	dd 23       	and	r29, r29
     11e:	19 f0       	breq	.+6      	; 0x126 <MakeFriends+0x2c>
     120:	8c e7       	ldi	r24, 0x7C	; 124
     122:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>

    //On/off game states, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { gameNow = FRIENDS; effect = 31;}
     126:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3789>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	50 f0       	brcs	.+20     	; 0x142 <MakeFriends+0x48>
     12e:	94 e0       	ldi	r25, 0x04	; 4
     130:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <gameNow>
     134:	2f e1       	ldi	r18, 0x1F	; 31
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	20 93 3b 38 	sts	0x383B, r18	; 0x80383b <effect>
     13c:	30 93 3c 38 	sts	0x383C, r19	; 0x80383c <effect+0x1>
     140:	08 c0       	rjmp	.+16     	; 0x152 <MakeFriends+0x58>
    if ((progress == NO_OTHER) && (gameNow = FRIENDS)) { gameNow = TEXT; effect = 0;}
     142:	81 11       	cpse	r24, r1
     144:	06 c0       	rjmp	.+12     	; 0x152 <MakeFriends+0x58>
     146:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
     14a:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect>
     14e:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect+0x1>

    //Checking for headphones
    if (detHdPh) return 0;
     152:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <detHdPh>
     156:	91 11       	cpse	r25, r1
     158:	ff c0       	rjmp	.+510    	; 0x358 <MakeFriends+0x25e>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     15a:	81 11       	cpse	r24, r1
     15c:	11 c0       	rjmp	.+34     	; 0x180 <MakeFriends+0x86>
        setDAC[0] = whoami * 51;
     15e:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <whoami>
     162:	23 e3       	ldi	r18, 0x33	; 51
     164:	92 9f       	mul	r25, r18
     166:	90 2d       	mov	r25, r0
     168:	11 24       	eor	r1, r1
     16a:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	38 e3       	ldi	r19, 0x38	; 56
     172:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
     176:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     17a:	9f ef       	ldi	r25, 0xFF	; 255
     17c:	90 93 b7 3a 	sts	0x3AB7, r25	; 0x803ab7 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     180:	40 91 c3 3a 	lds	r20, 0x3AC3	; 0x803ac3 <auIn>
     184:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	b9 01       	movw	r22, r18
     18e:	6a 50       	subi	r22, 0x0A	; 10
     190:	71 09       	sbc	r23, r1
     192:	46 17       	cp	r20, r22
     194:	57 07       	cpc	r21, r23
     196:	64 f0       	brlt	.+24     	; 0x1b0 <MakeFriends+0xb6>
     198:	40 91 c3 3a 	lds	r20, 0x3AC3	; 0x803ac3 <auIn>
     19c:	50 e0       	ldi	r21, 0x00	; 0
     19e:	26 5f       	subi	r18, 0xF6	; 246
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	24 17       	cp	r18, r20
     1a4:	35 07       	cpc	r19, r21
     1a6:	24 f0       	brlt	.+8      	; 0x1b0 <MakeFriends+0xb6>
     1a8:	82 30       	cpi	r24, 0x02	; 2
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <MakeFriends+0xb4>
     1ac:	40 c0       	rjmp	.+128    	; 0x22e <MakeFriends+0x134>
     1ae:	d2 c0       	rjmp	.+420    	; 0x354 <MakeFriends+0x25a>
        if (progress == NO_OTHER) {
     1b0:	81 11       	cpse	r24, r1
     1b2:	0a c0       	rjmp	.+20     	; 0x1c8 <MakeFriends+0xce>
            ++chkTmr;
     1b4:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3791>
     1b8:	8f 5f       	subi	r24, 0xFF	; 255
     1ba:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3791>
            if (chkTmr >= 8) {
     1be:	88 30       	cpi	r24, 0x08	; 8
     1c0:	08 f4       	brcc	.+2      	; 0x1c4 <MakeFriends+0xca>
     1c2:	ca c0       	rjmp	.+404    	; 0x358 <MakeFriends+0x25e>
                progress = FIRST_CONTACT;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	7f c0       	rjmp	.+254    	; 0x2c6 <MakeFriends+0x1cc>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	89 f5       	brne	.+98     	; 0x22e <MakeFriends+0x134>
            jackIn = chkVolt250();
     1cc:	7e df       	rcall	.-260    	; 0xca <chkVolt250>
     1ce:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3792>
            if (jackIn) {
     1d2:	88 23       	and	r24, r24
     1d4:	49 f1       	breq	.+82     	; 0x228 <MakeFriends+0x12e>
                ++chkTmr;
     1d6:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3791>
     1da:	9f 5f       	subi	r25, 0xFF	; 255
     1dc:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <chkTmr.3791>
                if (chkTmr >= SHORT_WAIT){
     1e0:	98 30       	cpi	r25, 0x08	; 8
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <MakeFriends+0xec>
     1e4:	b9 c0       	rjmp	.+370    	; 0x358 <MakeFriends+0x25e>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1e6:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <whoami>
     1ea:	91 30       	cpi	r25, 0x01	; 1
     1ec:	29 f4       	brne	.+10     	; 0x1f8 <MakeFriends+0xfe>
     1ee:	83 50       	subi	r24, 0x03	; 3
     1f0:	83 30       	cpi	r24, 0x03	; 3
     1f2:	b8 f4       	brcc	.+46     	; 0x222 <MakeFriends+0x128>
                        progress = SECOND_LOVE; 
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	67 c0       	rjmp	.+206    	; 0x2c6 <MakeFriends+0x1cc>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	31 f4       	brne	.+12     	; 0x208 <MakeFriends+0x10e>
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	d1 f3       	breq	.-12     	; 0x1f4 <MakeFriends+0xfa>
     200:	85 50       	subi	r24, 0x05	; 5
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	70 f4       	brcc	.+28     	; 0x222 <MakeFriends+0x128>
     206:	f6 cf       	rjmp	.-20     	; 0x1f4 <MakeFriends+0xfa>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     208:	93 30       	cpi	r25, 0x03	; 3
     20a:	39 f4       	brne	.+14     	; 0x21a <MakeFriends+0x120>
     20c:	9c ef       	ldi	r25, 0xFC	; 252
     20e:	98 0f       	add	r25, r24
     210:	92 30       	cpi	r25, 0x02	; 2
     212:	80 f3       	brcs	.-32     	; 0x1f4 <MakeFriends+0xfa>
     214:	87 30       	cpi	r24, 0x07	; 7
     216:	29 f4       	brne	.+10     	; 0x222 <MakeFriends+0x128>
     218:	ed cf       	rjmp	.-38     	; 0x1f4 <MakeFriends+0xfa>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     21a:	94 30       	cpi	r25, 0x04	; 4
     21c:	11 f4       	brne	.+4      	; 0x222 <MakeFriends+0x128>
     21e:	85 50       	subi	r24, 0x05	; 5
     220:	e7 cf       	rjmp	.-50     	; 0x1f0 <MakeFriends+0xf6>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     222:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3789>
     226:	51 c0       	rjmp	.+162    	; 0x2ca <MakeFriends+0x1d0>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     228:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3791>
     22c:	93 c0       	rjmp	.+294    	; 0x354 <MakeFriends+0x25a>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     22e:	82 30       	cpi	r24, 0x02	; 2
     230:	09 f0       	breq	.+2      	; 0x234 <MakeFriends+0x13a>
     232:	4e c0       	rjmp	.+156    	; 0x2d0 <MakeFriends+0x1d6>
            ++chkTmr;
     234:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3791>
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3791>
     23e:	ca ee       	ldi	r28, 0xEA	; 234
     240:	d1 ec       	ldi	r29, 0xC1	; 193
     242:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     244:	0d 81       	ldd	r16, Y+5	; 0x05
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	0e 94 31 09 	call	0x1262	; 0x1262 <lfsr>
     24c:	87 ff       	sbrs	r24, 7
     24e:	03 c0       	rjmp	.+6      	; 0x256 <MakeFriends+0x15c>
     250:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     254:	01 c0       	rjmp	.+2      	; 0x258 <MakeFriends+0x15e>
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	f8 01       	movw	r30, r16
     25a:	e5 53       	subi	r30, 0x35	; 53
     25c:	f5 4c       	sbci	r31, 0xC5	; 197
     25e:	80 83       	st	Z, r24
     260:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     262:	f7 01       	movw	r30, r14
     264:	00 81       	ld	r16, Z
     266:	10 e0       	ldi	r17, 0x00	; 0
     268:	fc d7       	rcall	.+4088   	; 0x1262 <lfsr>
     26a:	87 ff       	sbrs	r24, 7
     26c:	03 c0       	rjmp	.+6      	; 0x274 <MakeFriends+0x17a>
     26e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     272:	01 c0       	rjmp	.+2      	; 0x276 <MakeFriends+0x17c>
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	f8 01       	movw	r30, r16
     278:	e5 53       	subi	r30, 0x35	; 53
     27a:	f5 4c       	sbci	r31, 0xC5	; 197
     27c:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     27e:	f1 ec       	ldi	r31, 0xC1	; 193
     280:	cf 3e       	cpi	r28, 0xEF	; 239
     282:	df 07       	cpc	r29, r31
     284:	f1 f6       	brne	.-68     	; 0x242 <MakeFriends+0x148>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     286:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3791>
     28a:	88 30       	cpi	r24, 0x08	; 8
     28c:	40 f0       	brcs	.+16     	; 0x29e <MakeFriends+0x1a4>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     28e:	2f ef       	ldi	r18, 0xFF	; 255
     290:	44 e6       	ldi	r20, 0x64	; 100
     292:	68 e0       	ldi	r22, 0x08	; 8
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	0e 94 82 09 	call	0x1304	; 0x1304 <floatAround>
     29a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     29e:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3791>
     2a2:	8a 3f       	cpi	r24, 0xFA	; 250
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <MakeFriends+0x1ae>
     2a6:	58 c0       	rjmp	.+176    	; 0x358 <MakeFriends+0x25e>
                candidate = jackIn-whoami;
     2a8:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <whoami>
     2ac:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <jackIn.3792>
     2b0:	89 1b       	sub	r24, r25
     2b2:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <__data_end>
                if (candidate > whoami) {
     2b6:	98 17       	cp	r25, r24
     2b8:	10 f4       	brcc	.+4      	; 0x2be <MakeFriends+0x1c4>
                    setDAC[0] = 249;
     2ba:	89 ef       	ldi	r24, 0xF9	; 249
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <MakeFriends+0x1c6>
                } else {
                    setDAC[0] = 1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress = THIRD_KISS;
     2c4:	83 e0       	ldi	r24, 0x03	; 3
     2c6:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3789>
                chkTmr = 0;
     2ca:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3791>
     2ce:	44 c0       	rjmp	.+136    	; 0x358 <MakeFriends+0x25e>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2d0:	83 30       	cpi	r24, 0x03	; 3
     2d2:	f9 f4       	brne	.+62     	; 0x312 <MakeFriends+0x218>
            chkTmr++;
     2d4:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3791>
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3791>
            if (chkTmr >= SHORT_WAIT) {
     2de:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2e0:	d8 f1       	brcs	.+118    	; 0x358 <MakeFriends+0x25e>
     2e2:	f3 de       	rcall	.-538    	; 0xca <chkVolt250>
     2e4:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3792>
                if (jackIn == 5) {
     2e8:	85 30       	cpi	r24, 0x05	; 5
     2ea:	09 f0       	breq	.+2      	; 0x2ee <MakeFriends+0x1f4>
     2ec:	9a cf       	rjmp	.-204    	; 0x222 <MakeFriends+0x128>
                    UpdateState(99+candidate);
     2ee:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     2f2:	8d 59       	subi	r24, 0x9D	; 157
     2f4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
                    UpdateState(99+whoami);
     2f8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <whoami>
     2fc:	8d 59       	subi	r24, 0x9D	; 157
     2fe:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
                    WingBar(candidate, whoami);
     302:	60 91 3e 38 	lds	r22, 0x383E	; 0x80383e <whoami>
     306:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     30a:	0e 94 39 0b 	call	0x1672	; 0x1672 <WingBar>
                    progress = FOURTH_BASE;
     30e:	84 e0       	ldi	r24, 0x04	; 4
     310:	da cf       	rjmp	.-76     	; 0x2c6 <MakeFriends+0x1cc>
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	09 f5       	brne	.+66     	; 0x358 <MakeFriends+0x25e>
            ++chkTmr;
     316:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3791>
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3791>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     320:	80 34       	cpi	r24, 0x40	; 64
     322:	d0 f0       	brcs	.+52     	; 0x358 <MakeFriends+0x25e>
     324:	ea ee       	ldi	r30, 0xEA	; 234
     326:	f1 ec       	ldi	r31, 0xC1	; 193
     328:	8f ee       	ldi	r24, 0xEF	; 239
     32a:	91 ec       	ldi	r25, 0xC1	; 193
     32c:	ef 01       	movw	r28, r30
                for (uint8_t x=0; x<5; ++x) {
                    iLED[WING[L][x]] = 0;
     32e:	a5 81       	ldd	r26, Z+5	; 0x05
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	a5 53       	subi	r26, 0x35	; 53
     334:	b5 4c       	sbci	r27, 0xC5	; 197
     336:	1c 92       	st	X, r1
     338:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = 0;
     33a:	a8 81       	ld	r26, Y
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	a5 53       	subi	r26, 0x35	; 53
     340:	b5 4c       	sbci	r27, 0xC5	; 197
     342:	1c 92       	st	X, r1

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
            ++chkTmr;
            if (chkTmr >= (SHORT_WAIT<<3)) {
                for (uint8_t x=0; x<5; ++x) {
     344:	8e 17       	cp	r24, r30
     346:	9f 07       	cpc	r25, r31
     348:	89 f7       	brne	.-30     	; 0x32c <MakeFriends+0x232>
                    iLED[WING[L][x]] = 0;
                    iLED[WING[R][x]] = 0;
                }                 
                progress = NO_OTHER;
     34a:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3789>
                gameNow = TEXT;
     34e:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
     352:	02 c0       	rjmp	.+4      	; 0x358 <MakeFriends+0x25e>
            }
        }

    } else {
        progress = NO_OTHER;
     354:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3789>
    }
      
    return 0;
}
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	08 95       	ret

00000368 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     36e:	e6 e2       	ldi	r30, 0x26	; 38
     370:	f4 e0       	ldi	r31, 0x04	; 4
     372:	80 83       	st	Z, r24
     374:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     378:	a1 e2       	ldi	r26, 0x21	; 33
     37a:	b4 e0       	ldi	r27, 0x04	; 4
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	9c 93       	st	X, r25
     380:	90 83       	st	Z, r25
     382:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     386:	e0 e1       	ldi	r30, 0x10	; 16
     388:	f8 e0       	ldi	r31, 0x08	; 8
     38a:	97 e0       	ldi	r25, 0x07	; 7
     38c:	96 83       	std	Z+6, r25	; 0x06
     38e:	98 e0       	ldi	r25, 0x08	; 8
     390:	94 83       	std	Z+4, r25	; 0x04
     392:	83 83       	std	Z+3, r24	; 0x03
     394:	8c 93       	st	X, r24
     396:	85 81       	ldd	r24, Z+5	; 0x05
     398:	81 60       	ori	r24, 0x01	; 1
     39a:	85 83       	std	Z+5, r24	; 0x05
     39c:	85 81       	ldd	r24, Z+5	; 0x05
     39e:	84 6c       	ori	r24, 0xC4	; 196
     3a0:	85 83       	std	Z+5, r24	; 0x05
     3a2:	08 95       	ret

000003a4 <I2C_recover>:
     3a4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3a8:	88 60       	ori	r24, 0x08	; 8
     3aa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ae:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3b8:	99 e0       	ldi	r25, 0x09	; 9
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3c2:	30 e1       	ldi	r19, 0x10	; 16
     3c4:	3a 95       	dec	r19
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <I2C_recover+0x20>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <I2C_recover+0x26>
     3ca:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3ce:	30 e1       	ldi	r19, 0x10	; 16
     3d0:	3a 95       	dec	r19
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <I2C_recover+0x2c>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <I2C_recover+0x32>
     3d6:	91 50       	subi	r25, 0x01	; 1
     3d8:	89 f7       	brne	.-30     	; 0x3bc <I2C_recover+0x18>
     3da:	28 e0       	ldi	r18, 0x08	; 8
     3dc:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3e0:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3ea:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ee:	91 60       	ori	r25, 0x01	; 1
     3f0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f8:	94 6c       	ori	r25, 0xC4	; 196
     3fa:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fe:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     402:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     406:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     40a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     414:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     418:	84 6c       	ori	r24, 0xC4	; 196
     41a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41e:	08 95       	ret

00000420 <I2C_start>:
     420:	28 2f       	mov	r18, r24
     422:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     426:	90 6c       	ori	r25, 0xC0	; 192
     428:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     430:	89 2f       	mov	r24, r25
     432:	84 70       	andi	r24, 0x04	; 4
     434:	92 fd       	sbrc	r25, 2
     436:	03 c0       	rjmp	.+6      	; 0x43e <I2C_start+0x1e>
     438:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     43c:	08 95       	ret
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	08 95       	ret

00000442 <I2C_wait_ACK>:
     442:	8c e0       	ldi	r24, 0x0C	; 12
     444:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <timeout_I2C>
     448:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     44c:	87 fd       	sbrc	r24, 7
     44e:	0a c0       	rjmp	.+20     	; 0x464 <I2C_wait_ACK+0x22>
     450:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     454:	86 fd       	sbrc	r24, 6
     456:	06 c0       	rjmp	.+12     	; 0x464 <I2C_wait_ACK+0x22>
     458:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <timeout_I2C>
     45c:	81 11       	cpse	r24, r1
     45e:	f4 cf       	rjmp	.-24     	; 0x448 <I2C_wait_ACK+0x6>
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	08 95       	ret
     464:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     468:	80 6c       	ori	r24, 0xC0	; 192
     46a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     46e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     472:	82 fd       	sbrc	r24, 2
     474:	09 c0       	rjmp	.+18     	; 0x488 <I2C_wait_ACK+0x46>
     476:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47a:	83 fd       	sbrc	r24, 3
     47c:	07 c0       	rjmp	.+14     	; 0x48c <I2C_wait_ACK+0x4a>
     47e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     482:	82 95       	swap	r24
     484:	81 70       	andi	r24, 0x01	; 1
     486:	08 95       	ret
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	08 95       	ret
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	08 95       	ret

00000490 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     490:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     492:	8c e0       	ldi	r24, 0x0C	; 12
     494:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     498:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     49c:	89 2f       	mov	r24, r25
     49e:	83 70       	andi	r24, 0x03	; 3
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	11 f0       	breq	.+4      	; 0x4a8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4a4:	88 e0       	ldi	r24, 0x08	; 8
     4a6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4a8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ac:	97 fd       	sbrc	r25, 7
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4b0:	90 91 61 3a 	lds	r25, 0x3A61	; 0x803a61 <timeout_I2C>
     4b4:	91 11       	cpse	r25, r1
     4b6:	f8 cf       	rjmp	.-16     	; 0x4a8 <I2C_read+0x18>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4bc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c0:	90 6c       	ori	r25, 0xC0	; 192
     4c2:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4c6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4ca:	92 fd       	sbrc	r25, 2
     4cc:	1e c0       	rjmp	.+60     	; 0x50a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4ce:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d2:	93 fd       	sbrc	r25, 3
     4d4:	1d c0       	rjmp	.+58     	; 0x510 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4d6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4da:	89 2f       	mov	r24, r25
     4dc:	80 71       	andi	r24, 0x10	; 16
     4de:	94 fd       	sbrc	r25, 4
     4e0:	16 c0       	rjmp	.+44     	; 0x50e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     4e2:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4e6:	61 11       	cpse	r22, r1
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <I2C_read+0x5e>
     4ea:	9b 7f       	andi	r25, 0xFB	; 251
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4ee:	94 60       	ori	r25, 0x04	; 4
     4f0:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     4f4:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     4f8:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     4fa:	61 11       	cpse	r22, r1
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <I2C_read+0x80>
     4fe:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     502:	92 60       	ori	r25, 0x02	; 2
     504:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     508:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     50e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     510:	08 95       	ret

00000512 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     512:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     514:	8c e0       	ldi	r24, 0x0C	; 12
     516:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     51a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     51e:	93 70       	andi	r25, 0x03	; 3
     520:	92 30       	cpi	r25, 0x02	; 2
     522:	b1 f4       	brne	.+44     	; 0x550 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     524:	80 81       	ld	r24, Z
     526:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     52a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     52e:	86 fd       	sbrc	r24, 6
     530:	06 c0       	rjmp	.+12     	; 0x53e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     532:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <timeout_I2C>
     536:	81 11       	cpse	r24, r1
     538:	f8 cf       	rjmp	.-16     	; 0x52a <I2C_write+0x18>
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     53e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     542:	82 fd       	sbrc	r24, 2
     544:	07 c0       	rjmp	.+14     	; 0x554 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     546:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     54a:	82 95       	swap	r24
     54c:	81 70       	andi	r24, 0x01	; 1
     54e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     554:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     556:	08 95       	ret

00000558 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     558:	e0 e1       	ldi	r30, 0x10	; 16
     55a:	f8 e0       	ldi	r31, 0x08	; 8
     55c:	84 81       	ldd	r24, Z+4	; 0x04
     55e:	83 60       	ori	r24, 0x03	; 3
     560:	84 83       	std	Z+4, r24	; 0x04
     562:	08 95       	ret

00000564 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     564:	cf 92       	push	r12
     566:	df 92       	push	r13
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	6b 01       	movw	r12, r22
     574:	f4 2e       	mov	r15, r20
     576:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     578:	18 2f       	mov	r17, r24
     57a:	11 0f       	add	r17, r17
     57c:	81 2f       	mov	r24, r17
     57e:	50 df       	rcall	.-352    	; 0x420 <I2C_start>
	if (status != 0) goto error;
     580:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     582:	2b c0       	rjmp	.+86     	; 0x5da <I2C_read_bytes+0x76>
     584:	5e df       	rcall	.-324    	; 0x442 <I2C_wait_ACK>
	if (status == 1) {
     586:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     588:	19 f4       	brne	.+6      	; 0x590 <I2C_read_bytes+0x2c>
     58a:	e6 df       	rcall	.-52     	; 0x558 <I2C_stop>
		return 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	27 c0       	rjmp	.+78     	; 0x5de <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     590:	81 11       	cpse	r24, r1
     592:	23 c0       	rjmp	.+70     	; 0x5da <I2C_read_bytes+0x76>
    while(reg_len > 0){
     594:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     596:	49 f0       	breq	.+18     	; 0x5aa <I2C_read_bytes+0x46>
     598:	c6 01       	movw	r24, r12
     59a:	bb df       	rcall	.-138    	; 0x512 <I2C_write>
	    if (status != 0) goto error;
     59c:	81 11       	cpse	r24, r1
     59e:	1d c0       	rjmp	.+58     	; 0x5da <I2C_read_bytes+0x76>
        ++reg_ptr;
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	c8 1a       	sub	r12, r24
     5a4:	d8 0a       	sbc	r13, r24
        --reg_len;
     5a6:	fa 94       	dec	r15
     5a8:	f5 cf       	rjmp	.-22     	; 0x594 <I2C_read_bytes+0x30>
     5aa:	01 34       	cpi	r16, 0x41	; 65
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <I2C_read_bytes+0x4c>
     5ae:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5b0:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5b2:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5b6:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5b8:	40 f0       	brcs	.+16     	; 0x5ca <I2C_read_bytes+0x66>
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	ce 01       	movw	r24, r28
     5be:	68 df       	rcall	.-304    	; 0x490 <I2C_read>
		if (status != 0) goto error;
     5c0:	81 11       	cpse	r24, r1
     5c2:	0b c0       	rjmp	.+22     	; 0x5da <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5c4:	21 96       	adiw	r28, 0x01	; 1
     5c6:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5c8:	f6 cf       	rjmp	.-20     	; 0x5b6 <I2C_read_bytes+0x52>
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5ce:	60 df       	rcall	.-320    	; 0x490 <I2C_read>
     5d0:	81 11       	cpse	r24, r1
	I2C_stop();
     5d2:	03 c0       	rjmp	.+6      	; 0x5da <I2C_read_bytes+0x76>
     5d4:	c1 df       	rcall	.-126    	; 0x558 <I2C_stop>
	return 0;
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5da:	e4 de       	rcall	.-568    	; 0x3a4 <I2C_recover>
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5de:	df 91       	pop	r29
}
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	08 95       	ret

000005ee <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     5ee:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <lanyardPos>
    lanyardCnt      = 0;
     5f2:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
    lanyardState    = TRUE;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    effect = 0;
     5fc:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect>
     600:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect+0x1>
     604:	08 95       	ret

00000606 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     606:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     608:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	71 f4       	brne	.+28     	; 0x62c <LanyardCode+0x26>
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <lanyardLastActive>
     618:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardLastActive+0x1>
     61c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <idleTimeout>
     620:	88 23       	and	r24, r24
     622:	21 f0       	breq	.+8      	; 0x62c <LanyardCode+0x26>
        /* clean up maze game and go back to text game */
        initLanyard();
     624:	e4 df       	rcall	.-56     	; 0x5ee <initLanyard>
        gameNow = TEXT;
     626:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
        return 0;
     62a:	9b c0       	rjmp	.+310    	; 0x762 <LanyardCode+0x15c>
    }

    if (CheckState(LANYARD_COMPLETED))
     62c:	8b e7       	ldi	r24, 0x7B	; 123
     62e:	47 d7       	rcall	.+3726   	; 0x14be <CheckState>
     630:	81 11       	cpse	r24, r1
     632:	97 c0       	rjmp	.+302    	; 0x762 <LanyardCode+0x15c>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     634:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
     638:	88 23       	and	r24, r24
     63a:	19 f0       	breq	.+6      	; 0x642 <LanyardCode+0x3c>
     63c:	83 30       	cpi	r24, 0x03	; 3
     63e:	09 f0       	breq	.+2      	; 0x642 <LanyardCode+0x3c>
     640:	90 c0       	rjmp	.+288    	; 0x762 <LanyardCode+0x15c>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     642:	c0 91 e6 c1 	lds	r28, 0xC1E6	; 0x80c1e6 <__bss_end+0x86cb>
     646:	ec 2f       	mov	r30, r28
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     64e:	8f 3f       	cpi	r24, 0xFF	; 255
     650:	19 f0       	breq	.+6      	; 0x658 <LanyardCode+0x52>
     652:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     656:	01 c0       	rjmp	.+2      	; 0x65a <LanyardCode+0x54>
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	e5 53       	subi	r30, 0x35	; 53
     65c:	f5 4c       	sbci	r31, 0xC5	; 197
     65e:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     660:	8f 3f       	cpi	r24, 0xFF	; 255
     662:	09 f4       	brne	.+2      	; 0x666 <LanyardCode+0x60>
     664:	7e c0       	rjmp	.+252    	; 0x762 <LanyardCode+0x15c>
        return 0;

    if (buttonState == lastButtonState)
     666:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     66a:	89 17       	cp	r24, r25
     66c:	09 f4       	brne	.+2      	; 0x670 <LanyardCode+0x6a>
     66e:	79 c0       	rjmp	.+242    	; 0x762 <LanyardCode+0x15c>
        return 0;

    lanyardLastActive = getClock();
     670:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <getClock>
     674:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <lanyardLastActive>
     678:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     67c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     680:	8f 3f       	cpi	r24, 0xFF	; 255
     682:	09 f0       	breq	.+2      	; 0x686 <LanyardCode+0x80>
     684:	6e c0       	rjmp	.+220    	; 0x762 <LanyardCode+0x15c>
        effect = 0x13f + (buttonState << 5);
     686:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     68a:	20 e2       	ldi	r18, 0x20	; 32
     68c:	82 9f       	mul	r24, r18
     68e:	c0 01       	movw	r24, r0
     690:	11 24       	eor	r1, r1
     692:	81 5c       	subi	r24, 0xC1	; 193
     694:	9e 4f       	sbci	r25, 0xFE	; 254
     696:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
     69a:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>

        if (gameNow != LANYARD)
     69e:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
     6a2:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <LanyardCode+0xa2>
     6a6:	a3 df       	rcall	.-186    	; 0x5ee <initLanyard>
        gameNow = LANYARD;
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     6ae:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <lanyardPos>
     6b2:	e8 2f       	mov	r30, r24
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e2 53       	subi	r30, 0x32	; 50
     6b8:	fe 43       	sbci	r31, 0x3E	; 62
     6ba:	20 81       	ld	r18, Z
     6bc:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     6c0:	29 13       	cpse	r18, r25
     6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <LanyardCode+0xe2>
            lanyardState &= TRUE;
     6c4:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6c8:	91 70       	andi	r25, 0x01	; 1
     6ca:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     6ce:	e0 91 f5 c1 	lds	r30, 0xC1F5	; 0x80c1f5 <__bss_end+0x86da>
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	e5 53       	subi	r30, 0x35	; 53
     6d6:	f5 4c       	sbci	r31, 0xC5	; 197
     6d8:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     6da:	e0 91 f4 c1 	lds	r30, 0xC1F4	; 0x80c1f4 <__bss_end+0x86d9>
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	e5 53       	subi	r30, 0x35	; 53
     6e2:	f5 4c       	sbci	r31, 0xC5	; 197
     6e4:	10 82       	st	Z, r1
     6e6:	09 c0       	rjmp	.+18     	; 0x6fa <LanyardCode+0xf4>
        } else {
            lanyardState = FALSE;
     6e8:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     6ec:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     6ee:	28 f4       	brcc	.+10     	; 0x6fa <LanyardCode+0xf4>
     6f0:	7e df       	rcall	.-260    	; 0x5ee <initLanyard>
                gameNow         = BASTET;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <gameNow>
                return 0;
     6f8:	34 c0       	rjmp	.+104    	; 0x762 <LanyardCode+0x15c>
            }
        }
        lanyardPos++;
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <lanyardPos>
        lanyardCnt++;            
     700:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <lanyardCnt>
     704:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     706:	94 30       	cpi	r25, 0x04	; 4
     708:	18 f4       	brcc	.+6      	; 0x710 <LanyardCode+0x10a>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     70a:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <lanyardCnt>
     70e:	29 c0       	rjmp	.+82     	; 0x762 <LanyardCode+0x15c>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     710:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
            if (lanyardState == TRUE) {
     714:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     718:	91 30       	cpi	r25, 0x01	; 1
     71a:	e1 f4       	brne	.+56     	; 0x754 <LanyardCode+0x14e>
                if ((lanyardPos % 4) == 0) {
     71c:	98 2f       	mov	r25, r24
     71e:	93 70       	andi	r25, 0x03	; 3
     720:	69 f4       	brne	.+26     	; 0x73c <LanyardCode+0x136>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     722:	e8 2f       	mov	r30, r24
     724:	e6 95       	lsr	r30
     726:	e6 95       	lsr	r30
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	e8 50       	subi	r30, 0x08	; 8
     72c:	fe 43       	sbci	r31, 0x3E	; 62
     72e:	e5 81       	ldd	r30, Z+5	; 0x05
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     736:	e5 53       	subi	r30, 0x35	; 53
     738:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     73a:	90 83       	st	Z, r25
     73c:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     73e:	89 f4       	brne	.+34     	; 0x762 <LanyardCode+0x15c>
     740:	8b e7       	ldi	r24, 0x7B	; 123
     742:	b3 d6       	rcall	.+3430   	; 0x14aa <UpdateState>
                    iLED[CAT]       = 0;
     744:	ec 2f       	mov	r30, r28
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	e5 53       	subi	r30, 0x35	; 53
     74a:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     74c:	10 82       	st	Z, r1
     74e:	82 e4       	ldi	r24, 0x42	; 66
     750:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     752:	03 c0       	rjmp	.+6      	; 0x75a <LanyardCode+0x154>
     754:	4c df       	rcall	.-360    	; 0x5ee <initLanyard>
                effect = 0x21;
     756:	81 e2       	ldi	r24, 0x21	; 33
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
     75e:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
            }
        }
    }

    return 0;
}
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     768:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazeHckrPos>
    mazePos = 0;
     76c:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <mazePos>
    mazeCnt = 0;
     770:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeCnt>
    mazeState = TRUE;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     77a:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <inverted>
    effect = 0;
     77e:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect>
     782:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect+0x1>
     786:	08 95       	ret

00000788 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     788:	97 ff       	sbrs	r25, 7
     78a:	03 c0       	rjmp	.+6      	; 0x792 <showFieldStrength+0xa>
     78c:	91 95       	neg	r25
     78e:	81 95       	neg	r24
     790:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     792:	9c 01       	movw	r18, r24
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	29 37       	cpi	r18, 0x79	; 121
     79a:	31 05       	cpc	r19, r1
     79c:	1c f0       	brlt	.+6      	; 0x7a4 <showFieldStrength+0x1c>
        gameNow = MAZE;
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	40 93 3d 38 	sts	0x383D, r20	; 0x80383d <gameNow>

    if (gameNow == MAZE) {
     7a4:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <gameNow>
     7a8:	41 30       	cpi	r20, 0x01	; 1
     7aa:	21 f5       	brne	.+72     	; 0x7f4 <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     7ac:	28 37       	cpi	r18, 0x78	; 120
     7ae:	31 05       	cpc	r19, r1
     7b0:	1c f4       	brge	.+6      	; 0x7b8 <showFieldStrength+0x30>
            WingBar(0,0);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	1d c0       	rjmp	.+58     	; 0x7f2 <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     7b8:	88 37       	cpi	r24, 0x78	; 120
     7ba:	91 05       	cpc	r25, r1
     7bc:	1c f4       	brge	.+6      	; 0x7c4 <showFieldStrength+0x3c>
            WingBar(1,1);
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	17 c0       	rjmp	.+46     	; 0x7f2 <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     7c4:	2c 32       	cpi	r18, 0x2C	; 44
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	34 07       	cpc	r19, r20
     7ca:	1c f4       	brge	.+6      	; 0x7d2 <showFieldStrength+0x4a>
            WingBar(2,2);
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	10 c0       	rjmp	.+32     	; 0x7f2 <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     7d2:	28 0f       	add	r18, r24
     7d4:	39 1f       	adc	r19, r25
     7d6:	28 35       	cpi	r18, 0x58	; 88
     7d8:	32 40       	sbci	r19, 0x02	; 2
     7da:	1c f4       	brge	.+6      	; 0x7e2 <showFieldStrength+0x5a>
            WingBar(3,3);
     7dc:	63 e0       	ldi	r22, 0x03	; 3
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     7e2:	8c 32       	cpi	r24, 0x2C	; 44
     7e4:	91 40       	sbci	r25, 0x01	; 1
     7e6:	1c f4       	brge	.+6      	; 0x7ee <showFieldStrength+0x66>
            WingBar(4,4);
     7e8:	64 e0       	ldi	r22, 0x04	; 4
     7ea:	84 e0       	ldi	r24, 0x04	; 4
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     7ee:	65 e0       	ldi	r22, 0x05	; 5
     7f0:	85 e0       	ldi	r24, 0x05	; 5
     7f2:	3f c7       	rjmp	.+3710   	; 0x1672 <WingBar>
     7f4:	08 95       	ret

000007f6 <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     7fa:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
     7fe:	81 30       	cpi	r24, 0x01	; 1
     800:	71 f4       	brne	.+28     	; 0x81e <MagnetMaze+0x28>
     802:	6a e0       	ldi	r22, 0x0A	; 10
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <mazeLastActive>
     80a:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <mazeLastActive+0x1>
     80e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <idleTimeout>
     812:	88 23       	and	r24, r24
     814:	21 f0       	breq	.+8      	; 0x81e <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     816:	a8 df       	rcall	.-176    	; 0x768 <initMaze>
        gameNow = TEXT;
     818:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
        return 0;
     81c:	e5 c0       	rjmp	.+458    	; 0x9e8 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     81e:	87 ef       	ldi	r24, 0xF7	; 247
     820:	4e d6       	rcall	.+3228   	; 0x14be <CheckState>
     822:	81 11       	cpse	r24, r1
     824:	e1 c0       	rjmp	.+450    	; 0x9e8 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     826:	8d e7       	ldi	r24, 0x7D	; 125
     828:	4a d6       	rcall	.+3220   	; 0x14be <CheckState>
     82a:	81 11       	cpse	r24, r1
     82c:	dd c0       	rjmp	.+442    	; 0x9e8 <MagnetMaze+0x1f2>
     82e:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	08 f0       	brcs	.+2      	; 0x838 <MagnetMaze+0x42>
     836:	d8 c0       	rjmp	.+432    	; 0x9e8 <MagnetMaze+0x1f2>
     838:	80 91 f4 3a 	lds	r24, 0x3AF4	; 0x803af4 <calHall>
        return 0;

    if (calHall == 0)
     83c:	90 91 f5 3a 	lds	r25, 0x3AF5	; 0x803af5 <calHall+0x1>
     840:	89 2b       	or	r24, r25
     842:	41 f4       	brne	.+16     	; 0x854 <MagnetMaze+0x5e>
     844:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <adcHall>
        calHall = adcHall;
     848:	90 91 bd 3a 	lds	r25, 0x3ABD	; 0x803abd <adcHall+0x1>
     84c:	80 93 f4 3a 	sts	0x3AF4, r24	; 0x803af4 <calHall>
     850:	90 93 f5 3a 	sts	0x3AF5, r25	; 0x803af5 <calHall+0x1>
     854:	c0 91 bc 3a 	lds	r28, 0x3ABC	; 0x803abc <adcHall>

    int16_t valHall = adcHall - calHall;
     858:	d0 91 bd 3a 	lds	r29, 0x3ABD	; 0x803abd <adcHall+0x1>
     85c:	80 91 f4 3a 	lds	r24, 0x3AF4	; 0x803af4 <calHall>
     860:	90 91 f5 3a 	lds	r25, 0x3AF5	; 0x803af5 <calHall+0x1>
     864:	c8 1b       	sub	r28, r24
     866:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     868:	ce 01       	movw	r24, r28
     86a:	8e df       	rcall	.-228    	; 0x788 <showFieldStrength>
     86c:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <curHallState>

    switch (curHallState) {
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	89 f0       	breq	.+34     	; 0x896 <MagnetMaze+0xa0>
     874:	18 f0       	brcs	.+6      	; 0x87c <MagnetMaze+0x86>
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	c1 f0       	breq	.+48     	; 0x8aa <MagnetMaze+0xb4>
     87a:	1f c0       	rjmp	.+62     	; 0x8ba <MagnetMaze+0xc4>
     87c:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     87e:	9e ef       	ldi	r25, 0xFE	; 254
     880:	d9 07       	cpc	r29, r25
     882:	14 f4       	brge	.+4      	; 0x888 <MagnetMaze+0x92>
     884:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     886:	04 c0       	rjmp	.+8      	; 0x890 <MagnetMaze+0x9a>
     888:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     88a:	d1 40       	sbci	r29, 0x01	; 1
     88c:	5c f0       	brlt	.+22     	; 0x8a4 <MagnetMaze+0xae>
     88e:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     890:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <newHallState>
     894:	12 c0       	rjmp	.+36     	; 0x8ba <MagnetMaze+0xc4>
     896:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	d9 07       	cpc	r29, r25
     89c:	c4 f7       	brge	.-16     	; 0x88e <MagnetMaze+0x98>
     89e:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     8a0:	df 4f       	sbci	r29, 0xFF	; 255
     8a2:	84 f3       	brlt	.-32     	; 0x884 <MagnetMaze+0x8e>
     8a4:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     8a8:	08 c0       	rjmp	.+16     	; 0x8ba <MagnetMaze+0xc4>
     8aa:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     8ac:	9e ef       	ldi	r25, 0xFE	; 254
     8ae:	d9 07       	cpc	r29, r25
     8b0:	4c f3       	brlt	.-46     	; 0x884 <MagnetMaze+0x8e>
     8b2:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     8b4:	d1 05       	cpc	r29, r1
     8b6:	b4 f3       	brlt	.-20     	; 0x8a4 <MagnetMaze+0xae>
     8b8:	ea cf       	rjmp	.-44     	; 0x88e <MagnetMaze+0x98>
     8ba:	c0 91 e6 c1 	lds	r28, 0xC1E6	; 0x80c1e6 <__bss_end+0x86cb>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     8be:	ec 2f       	mov	r30, r28
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <newHallState>
     8c6:	99 23       	and	r25, r25
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <MagnetMaze+0xda>
     8ca:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <MagnetMaze+0xdc>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	e5 53       	subi	r30, 0x35	; 53
     8d4:	f5 4c       	sbci	r31, 0xC5	; 197
     8d6:	20 83       	st	Z, r18
     8d8:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     8da:	31 e0       	ldi	r19, 0x01	; 1
     8dc:	20 93 3b 38 	sts	0x383B, r18	; 0x80383b <effect>
     8e0:	30 93 3c 38 	sts	0x383C, r19	; 0x80383c <effect+0x1>
     8e4:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     8e6:	09 f4       	brne	.+2      	; 0x8ea <MagnetMaze+0xf4>
     8e8:	7f c0       	rjmp	.+254    	; 0x9e8 <MagnetMaze+0x1f2>
     8ea:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     8ee:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <mazeLastActive>
     8f2:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <mazeLastActive+0x1>
     8f6:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     8fa:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <newHallState>
     8fe:	91 11       	cpse	r25, r1
     900:	08 c0       	rjmp	.+16     	; 0x912 <MagnetMaze+0x11c>
     902:	88 23       	and	r24, r24
     904:	31 f0       	breq	.+12     	; 0x912 <MagnetMaze+0x11c>
     906:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	09 f4       	brne	.+2      	; 0x90e <MagnetMaze+0x118>
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <inverted>
     912:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <curHallState>

        curHallState = newHallState;
     916:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     918:	09 f4       	brne	.+2      	; 0x91c <MagnetMaze+0x126>
     91a:	66 c0       	rjmp	.+204    	; 0x9e8 <MagnetMaze+0x1f2>
     91c:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
            if (gameNow == TEXT)
     920:	81 11       	cpse	r24, r1
     922:	01 c0       	rjmp	.+2      	; 0x926 <MagnetMaze+0x130>
                initMaze();
     924:	21 df       	rcall	.-446    	; 0x768 <initMaze>
     926:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     928:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <gameNow>
     92c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     930:	20 91 4d 38 	lds	r18, 0x384D	; 0x80384d <curHallState>
     934:	88 23       	and	r24, r24
     936:	11 f0       	breq	.+4      	; 0x93c <MagnetMaze+0x146>
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	28 27       	eor	r18, r24
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <mazePos>
     942:	e8 2f       	mov	r30, r24
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	ec 5c       	subi	r30, 0xCC	; 204
     948:	fd 43       	sbci	r31, 0x3D	; 61
     94a:	40 81       	ld	r20, Z
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	24 17       	cp	r18, r20
     950:	35 07       	cpc	r19, r21
     952:	91 f4       	brne	.+36     	; 0x978 <MagnetMaze+0x182>
     954:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     958:	91 70       	andi	r25, 0x01	; 1
     95a:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     95e:	e0 91 f5 c1 	lds	r30, 0xC1F5	; 0x80c1f5 <__bss_end+0x86da>
                iLED[EYE[R][L]] = 0;
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e5 53       	subi	r30, 0x35	; 53
     966:	f5 4c       	sbci	r31, 0xC5	; 197
     968:	10 82       	st	Z, r1
     96a:	e0 91 f4 c1 	lds	r30, 0xC1F4	; 0x80c1f4 <__bss_end+0x86d9>
                iLED[EYE[R][R]] = 0;
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	e5 53       	subi	r30, 0x35	; 53
     972:	f5 4c       	sbci	r31, 0xC5	; 197
     974:	10 82       	st	Z, r1
     976:	02 c0       	rjmp	.+4      	; 0x97c <MagnetMaze+0x186>
     978:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     97c:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     97e:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <mazePos>
     982:	90 91 49 38 	lds	r25, 0x3849	; 0x803849 <mazeCnt>
            mazeCnt++;            
     986:	9f 5f       	subi	r25, 0xFF	; 255
     988:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     98a:	18 f4       	brcc	.+6      	; 0x992 <MagnetMaze+0x19c>
     98c:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     990:	2b c0       	rjmp	.+86     	; 0x9e8 <MagnetMaze+0x1f2>
     992:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     996:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     99a:	91 30       	cpi	r25, 0x01	; 1
     99c:	e1 f4       	brne	.+56     	; 0x9d6 <MagnetMaze+0x1e0>
     99e:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     9a2:	e9 2f       	mov	r30, r25
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	e8 50       	subi	r30, 0x08	; 8
     9a8:	fe 43       	sbci	r31, 0x3E	; 62
     9aa:	e6 81       	ldd	r30, Z+6	; 0x06
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     9b2:	e5 53       	subi	r30, 0x35	; 53
     9b4:	f5 4c       	sbci	r31, 0xC5	; 197
     9b6:	20 83       	st	Z, r18
     9b8:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     9ba:	90 93 4a 38 	sts	0x384A, r25	; 0x80384a <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     9be:	82 31       	cpi	r24, 0x12	; 18
     9c0:	99 f4       	brne	.+38     	; 0x9e8 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     9c2:	8d e7       	ldi	r24, 0x7D	; 125
     9c4:	72 d5       	rcall	.+2788   	; 0x14aa <UpdateState>
     9c6:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	e5 53       	subi	r30, 0x35	; 53
     9cc:	f5 4c       	sbci	r31, 0xC5	; 197
     9ce:	10 82       	st	Z, r1
                        effect = 0x42;
     9d0:	82 e4       	ldi	r24, 0x42	; 66
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     9d6:	c8 de       	rcall	.-624    	; 0x768 <initMaze>
     9d8:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
                    gameNow   = TEXT;
     9dc:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
     9e4:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <Setup>:
     9f0:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     9f2:	df 93       	push	r29
    cli();
     9f4:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     9f6:	88 ed       	ldi	r24, 0xD8	; 216
     9f8:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     9fa:	c1 e0       	ldi	r28, 0x01	; 1
     9fc:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     a00:	8a e4       	ldi	r24, 0x4A	; 74
     a02:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     a06:	8c e7       	ldi	r24, 0x7C	; 124
     a08:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     a0c:	9f e3       	ldi	r25, 0x3F	; 63
     a0e:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     a12:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     a16:	80 68       	ori	r24, 0x80	; 128
     a18:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     a1c:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     a26:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     a2a:	80 68       	ori	r24, 0x80	; 128
     a2c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     a30:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     a3a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     a3e:	80 68       	ori	r24, 0x80	; 128
     a40:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     a44:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     a48:	80 68       	ori	r24, 0x80	; 128
     a4a:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     a4e:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     a52:	d2 e0       	ldi	r29, 0x02	; 2
     a54:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     a58:	2b e5       	ldi	r18, 0x5B	; 91
     a5a:	31 e0       	ldi	r19, 0x01	; 1
     a5c:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a60:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     a64:	80 ea       	ldi	r24, 0xA0	; 160
     a66:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     a6a:	80 ec       	ldi	r24, 0xC0	; 192
     a6c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a76:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a78:	1d ba       	out	0x1d, r1	; 29
    AUPOS = 0;     //Used as audio input/output buffer counter
     a7a:	1e ba       	out	0x1e, r1	; 30
    GPIOR3 = 0;    //
     a7c:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a7e:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     a82:	88 e0       	ldi	r24, 0x08	; 8
     a84:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a88:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a8c:	87 e7       	ldi	r24, 0x77	; 119
     a8e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a92:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a96:	8b e0       	ldi	r24, 0x0B	; 11
     a98:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     a9c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     aa6:	85 e0       	ldi	r24, 0x05	; 5
     aa8:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     aac:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     ab8:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     abc:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     ac0:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     ac4:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     ac8:	8b e8       	ldi	r24, 0x8B	; 139
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     ad0:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     ad4:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     ad8:	47 dc       	rcall	.-1906   	; 0x368 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ada:	82 e1       	ldi	r24, 0x12	; 18
     adc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     ae0:	80 e2       	ldi	r24, 0x20	; 32
     ae2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     ae6:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     aea:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     aee:	84 e4       	ldi	r24, 0x44	; 68
     af0:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     af4:	8e e1       	ldi	r24, 0x1E	; 30
     af6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     afa:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     afe:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b02:	81 60       	ori	r24, 0x01	; 1
     b04:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     b08:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     b0c:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     b10:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     b14:	82 e5       	ldi	r24, 0x52	; 82
     b16:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     b20:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     b24:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     b28:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     b2c:	81 60       	ori	r24, 0x01	; 1
     b2e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     b32:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     b36:	80 e4       	ldi	r24, 0x40	; 64
     b38:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     b3c:	80 e8       	ldi	r24, 0x80	; 128
     b3e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     b42:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     b4c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b50:	80 fd       	sbrc	r24, 0
     b52:	fc cf       	rjmp	.-8      	; 0xb4c <Setup+0x15c>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     b54:	80 e3       	ldi	r24, 0x30	; 48
     b56:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     b5a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     b5e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b62:	82 fd       	sbrc	r24, 2
     b64:	fc cf       	rjmp	.-8      	; 0xb5e <Setup+0x16e>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	98 e7       	ldi	r25, 0x78	; 120
     b6a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b6e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b72:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b76:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b7a:	82 96       	adiw	r24, 0x22	; 34
     b7c:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     b80:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b84:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b88:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b8c:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b90:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b94:	28 17       	cp	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	70 f4       	brcc	.+28     	; 0xbb6 <Setup+0x1c6>
     b9a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b9e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     ba2:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     ba6:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     bb2:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     bb6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bba:	83 fd       	sbrc	r24, 3
     bbc:	fc cf       	rjmp	.-8      	; 0xbb6 <Setup+0x1c6>
    RTC_CMP            = tmp16bit;                         //Button timing
     bbe:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     bc2:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     bc6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bca:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     be0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     be4:	80 fd       	sbrc	r24, 0
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <Setup+0x1f0>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     be8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     bec:	81 60       	ori	r24, 0x01	; 1
     bee:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     bf2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     bfc:	10 92 76 3a 	sts	0x3A76, r1	; 0x803a76 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     c00:	86 e7       	ldi	r24, 0x76	; 118
     c02:	9a e3       	ldi	r25, 0x3A	; 58
     c04:	80 93 ba 3a 	sts	0x3ABA, r24	; 0x803aba <serTxAddr>
     c08:	90 93 bb 3a 	sts	0x3ABB, r25	; 0x803abb <serTxAddr+0x1>

    sei();
     c0c:	78 94       	sei
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     c14:	1f 92       	push	r1
     c16:	0f 92       	push	r0
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     c2a:	87 e0       	ldi	r24, 0x07	; 7
     c2c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     c30:	84 e4       	ldi	r24, 0x44	; 68
     c32:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     c36:	ec b3       	in	r30, 0x1c	; 28
     c38:	88 e0       	ldi	r24, 0x08	; 8
     c3a:	e8 9f       	mul	r30, r24
     c3c:	f0 01       	movw	r30, r0
     c3e:	11 24       	eor	r1, r1
     c40:	e5 53       	subi	r30, 0x35	; 53
     c42:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     c44:	a8 e2       	ldi	r26, 0x28	; 40
     c46:	ba e0       	ldi	r27, 0x0A	; 10
     c48:	96 e0       	ldi	r25, 0x06	; 6
     c4a:	81 91       	ld	r24, Z+
     c4c:	8d 93       	st	X+, r24
     c4e:	9a 95       	dec	r25
     c50:	e1 f7       	brne	.-8      	; 0xc4a <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     c52:	8b e0       	ldi	r24, 0x0B	; 11
     c54:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     c58:	8c b3       	in	r24, 0x1c	; 28
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	58 f4       	brcc	.+22     	; 0xc74 <__vector_8+0x60>
        asm(
     c5e:	8c b3       	in	r24, 0x1c	; 28
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <__vector_8+0x52>
     c64:	99 0f       	add	r25, r25
     c66:	8a 95       	dec	r24
     c68:	ea f7       	brpl	.-6      	; 0xc64 <__vector_8+0x50>
     c6a:	99 b9       	out	0x09, r25	; 9
     c6c:	8c b3       	in	r24, 0x1c	; 28
     c6e:	83 95       	inc	r24
     c70:	8c bb       	out	0x1c, r24	; 28
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c74:	8c b3       	in	r24, 0x1c	; 28
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	21 f4       	brne	.+8      	; 0xc82 <__vector_8+0x6e>
     c7a:	2a 9a       	sbi	0x05, 2	; 5
     c7c:	83 95       	inc	r24
     c7e:	8c bb       	out	0x1c, r24	; 28
     c80:	03 c0       	rjmp	.+6      	; 0xc88 <__vector_8+0x74>
     c82:	2e 9a       	sbi	0x05, 6	; 5
     c84:	88 27       	eor	r24, r24
     c86:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c88:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <timeout_I2C>
     c8c:	88 23       	and	r24, r24
     c8e:	29 f0       	breq	.+10     	; 0xc9a <__vector_8+0x86>
     c90:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <timeout_I2C>
     c94:	81 50       	subi	r24, 0x01	; 1
     c96:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
    if (*serTxAddr) {
     cc8:	e0 91 ba 3a 	lds	r30, 0x3ABA	; 0x803aba <serTxAddr>
     ccc:	f0 91 bb 3a 	lds	r31, 0x3ABB	; 0x803abb <serTxAddr+0x1>
     cd0:	80 81       	ld	r24, Z
     cd2:	88 23       	and	r24, r24
     cd4:	91 f0       	breq	.+36     	; 0xcfa <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     cd6:	80 81       	ld	r24, Z
     cd8:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     cdc:	80 91 ba 3a 	lds	r24, 0x3ABA	; 0x803aba <serTxAddr>
     ce0:	90 91 bb 3a 	lds	r25, 0x3ABB	; 0x803abb <serTxAddr+0x1>
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	80 93 ba 3a 	sts	0x3ABA, r24	; 0x803aba <serTxAddr>
     cea:	90 93 bb 3a 	sts	0x3ABB, r25	; 0x803abb <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     cee:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cf2:	80 62       	ori	r24, 0x20	; 32
     cf4:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     d00:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     d34:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d38:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d3c:	80 81       	ld	r24, Z
     d3e:	81 11       	cpse	r24, r1
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <__vector_14+0x36>
     d42:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     d46:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     d4a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d4e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     d52:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d56:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d5a:	80 81       	ld	r24, Z
     d5c:	88 23       	and	r24, r24
     d5e:	e1 f0       	breq	.+56     	; 0xd98 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     d60:	20 81       	ld	r18, Z
     d62:	40 91 b7 3a 	lds	r20, 0x3AB7	; 0x803ab7 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	31 09       	sbc	r19, r1
     d6c:	42 9f       	mul	r20, r18
     d6e:	c0 01       	movw	r24, r0
     d70:	43 9f       	mul	r20, r19
     d72:	90 0d       	add	r25, r0
     d74:	11 24       	eor	r1, r1
     d76:	89 2f       	mov	r24, r25
     d78:	99 0f       	add	r25, r25
     d7a:	99 0b       	sbc	r25, r25
     d7c:	80 58       	subi	r24, 0x80	; 128
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d84:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d88:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d92:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <__vector_14+0x88>
    } else {
        DAC0_DATA = 0x80;
     d98:	80 e8       	ldi	r24, 0x80	; 128
     d9a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        auPlayDone = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 f3 3a 	sts	0x3AF3, r24	; 0x803af3 <auPlayDone>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	8f 93       	push	r24
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
    if (serRxDone == 0){
     dd2:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <serRxDone>
     dd6:	81 11       	cpse	r24, r1
     dd8:	44 c0       	rjmp	.+136    	; 0xe62 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     dda:	ed b3       	in	r30, 0x1d	; 29
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     de2:	ea 58       	subi	r30, 0x8A	; 138
     de4:	f5 4c       	sbci	r31, 0xC5	; 197
     de6:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     de8:	ed b3       	in	r30, 0x1d	; 29
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	ea 58       	subi	r30, 0x8A	; 138
     dee:	f5 4c       	sbci	r31, 0xC5	; 197
     df0:	80 81       	ld	r24, Z
     df2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     df6:	ed b3       	in	r30, 0x1d	; 29
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	ea 58       	subi	r30, 0x8A	; 138
     dfc:	f5 4c       	sbci	r31, 0xC5	; 197
     dfe:	80 81       	ld	r24, Z
     e00:	8a 30       	cpi	r24, 0x0A	; 10
     e02:	39 f0       	breq	.+14     	; 0xe12 <__vector_27+0x50>
     e04:	ed b3       	in	r30, 0x1d	; 29
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ea 58       	subi	r30, 0x8A	; 138
     e0a:	f5 4c       	sbci	r31, 0xC5	; 197
     e0c:	80 81       	ld	r24, Z
     e0e:	8d 30       	cpi	r24, 0x0D	; 13
     e10:	49 f4       	brne	.+18     	; 0xe24 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     e12:	ed b3       	in	r30, 0x1d	; 29
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	ea 58       	subi	r30, 0x8A	; 138
     e18:	f5 4c       	sbci	r31, 0xC5	; 197
     e1a:	10 82       	st	Z, r1
            serRxDone = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <serRxDone>
     e22:	1f c0       	rjmp	.+62     	; 0xe62 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     e24:	ed b3       	in	r30, 0x1d	; 29
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	ea 58       	subi	r30, 0x8A	; 138
     e2a:	f5 4c       	sbci	r31, 0xC5	; 197
     e2c:	80 81       	ld	r24, Z
     e2e:	88 30       	cpi	r24, 0x08	; 8
     e30:	39 f0       	breq	.+14     	; 0xe40 <__vector_27+0x7e>
     e32:	ed b3       	in	r30, 0x1d	; 29
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	ea 58       	subi	r30, 0x8A	; 138
     e38:	f5 4c       	sbci	r31, 0xC5	; 197
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 37       	cpi	r24, 0x7F	; 127
     e3e:	59 f4       	brne	.+22     	; 0xe56 <__vector_27+0x94>
     e40:	8d b3       	in	r24, 0x1d	; 29
     e42:	88 23       	and	r24, r24
     e44:	41 f0       	breq	.+16     	; 0xe56 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     e46:	ed b3       	in	r30, 0x1d	; 29
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	ea 58       	subi	r30, 0x8A	; 138
     e4c:	f5 4c       	sbci	r31, 0xC5	; 197
     e4e:	10 82       	st	Z, r1
            --RXCNT;
     e50:	8d b3       	in	r24, 0x1d	; 29
     e52:	81 50       	subi	r24, 0x01	; 1
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     e56:	8d b3       	in	r24, 0x1d	; 29
     e58:	80 34       	cpi	r24, 0x40	; 64
     e5a:	18 f4       	brcc	.+6      	; 0xe62 <__vector_27+0xa0>
     e5c:	8d b3       	in	r24, 0x1d	; 29
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	8f 91       	pop	r24
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	8f 93       	push	r24
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
    TCB0_CNT = 0;
     e88:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e8c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e96:	e5 e0       	ldi	r30, 0x05	; 5
     e98:	f8 e0       	ldi	r31, 0x08	; 8
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	80 83       	st	Z, r24
};
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	8f 91       	pop	r24
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     ec2:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     ec6:	81 11       	cpse	r24, r1
     ec8:	19 c0       	rjmp	.+50     	; 0xefc <__vector_20+0x4c>
        AUPOS = (AUPOS+1)&(AULEN-1);
     eca:	8e b3       	in	r24, 0x1e	; 30
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	87 70       	andi	r24, 0x07	; 7
     ed0:	8e bb       	out	0x1e, r24	; 30
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn[AUPOS]=ADC0_RESL;
     ed2:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     ed6:	8e 31       	cpi	r24, 0x1E	; 30
     ed8:	49 f4       	brne	.+18     	; 0xeec <__vector_20+0x3c>
     eda:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ede:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     ee2:	80 93 f6 3a 	sts	0x3AF6, r24	; 0x803af6 <adcTemp>
     ee6:	90 93 f7 3a 	sts	0x3AF7, r25	; 0x803af7 <adcTemp+0x1>
     eea:	0d c0       	rjmp	.+26     	; 0xf06 <__vector_20+0x56>
     eec:	ee b3       	in	r30, 0x1e	; 30
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ef4:	ed 53       	subi	r30, 0x3D	; 61
     ef6:	f5 4c       	sbci	r31, 0xC5	; 197
     ef8:	80 83       	st	Z, r24
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <__vector_20+0x56>
    } else --adc0Chg;
     efc:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     f2c:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f30:	81 11       	cpse	r24, r1
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     f34:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f38:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f3c:	80 93 be 3a 	sts	0x3ABE, r24	; 0x803abe <adcPhot>
     f40:	90 93 bf 3a 	sts	0x3ABF, r25	; 0x803abf <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	10 c0       	rjmp	.+32     	; 0xf68 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     f48:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	79 f4       	brne	.+30     	; 0xf6e <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     f56:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f5a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f5e:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <adcHall>
     f62:	90 93 bd 3a 	sts	0x3ABD, r25	; 0x803abd <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f6c:	10 c0       	rjmp	.+32     	; 0xf8e <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     f6e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f72:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f76:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <adcBtns>
     f7a:	90 93 b9 3a 	sts	0x3AB9, r25	; 0x803ab9 <adcBtns+0x1>
        if (A1CNT == 15){
     f7e:	8f b3       	in	r24, 0x1f	; 31
     f80:	8f 30       	cpi	r24, 0x0F	; 15
     f82:	29 f4       	brne	.+10     	; 0xf8e <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     f84:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     f88:	88 e0       	ldi	r24, 0x08	; 8
     f8a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f8e:	8f b3       	in	r24, 0x1f	; 31
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	8f 70       	andi	r24, 0x0F	; 15
     f96:	99 27       	eor	r25, r25
     f98:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	8f 93       	push	r24
     fbe:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     fc0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fc4:	81 ff       	sbrs	r24, 1
     fc6:	39 c0       	rjmp	.+114    	; 0x103a <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     fc8:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <buttonMark>
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	29 f0       	breq	.+10     	; 0xfda <__vector_6+0x2c>
     fd0:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <buttonMark>
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     fda:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     fde:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     fe2:	82 96       	adiw	r24, 0x22	; 34
     fe4:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     fe8:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     fec:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ff0:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     ff4:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     ff8:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	70 f4       	brcc	.+28     	; 0x101e <__vector_6+0x70>
    1002:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1006:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    100a:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
    100e:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
    1012:	82 1b       	sub	r24, r18
    1014:	93 0b       	sbc	r25, r19
    1016:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
    101a:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    101e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1022:	83 fd       	sbrc	r24, 3
    1024:	fc cf       	rjmp	.-8      	; 0x101e <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    1026:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
    102a:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
    102e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1032:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    103a:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <minuteMark>
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    106e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    1072:	8f 91       	pop	r24
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    107e:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1082:	91 fd       	sbrc	r25, 1
    1084:	fc cf       	rjmp	.-8      	; 0x107e <EERead>
    1086:	fb 01       	movw	r30, r22
    1088:	48 0f       	add	r20, r24

    while(size){
    108a:	84 17       	cp	r24, r20
    108c:	39 f0       	breq	.+14     	; 0x109c <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    108e:	a8 2f       	mov	r26, r24
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	bc 5e       	subi	r27, 0xEC	; 236
    1094:	9c 91       	ld	r25, X
    1096:	91 93       	st	Z+, r25
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	f7 cf       	rjmp	.-18     	; 0x108a <EERead+0xc>
        --size;
    }
}
    109c:	08 95       	ret

0000109e <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    109e:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    10a0:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10a2:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    10a4:	44 23       	and	r20, r20
    10a6:	09 f1       	breq	.+66     	; 0x10ea <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    10a8:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10ac:	51 fd       	sbrc	r21, 1
    10ae:	fc cf       	rjmp	.-8      	; 0x10a8 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    10b0:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    10b2:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    10b6:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    10b8:	58 2f       	mov	r21, r24
    10ba:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	db 01       	movw	r26, r22
    10c4:	11 97       	sbiw	r26, 0x01	; 1
    10c6:	ac 91       	ld	r26, X
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	fc 5e       	subi	r31, 0xEC	; 236
    10cc:	a0 83       	st	Z, r26
            --size;
    10ce:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10d2:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10d4:	5f 31       	cpi	r21, 0x1F	; 31
    10d6:	81 f7       	brne	.-32     	; 0x10b8 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    10d8:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10da:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    10de:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10e2:	52 ff       	sbrs	r21, 2
    10e4:	df cf       	rjmp	.-66     	; 0x10a4 <EEWrite+0x6>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    10e8:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    10ee:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    10f0:	9c 01       	movw	r18, r24
    10f2:	2e 1b       	sub	r18, r30
    10f4:	3f 0b       	sbc	r19, r31
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	48 9f       	mul	r20, r24
    10fa:	a0 01       	movw	r20, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	4c 5d       	subi	r20, 0xDC	; 220
    1100:	5d 43       	sbci	r21, 0x3D	; 61
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    1102:	66 23       	and	r22, r22
    1104:	69 f0       	breq	.+26     	; 0x1120 <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1106:	df 01       	movw	r26, r30
    1108:	a2 0f       	add	r26, r18
    110a:	b3 1f       	adc	r27, r19
    110c:	a7 70       	andi	r26, 0x07	; 7
    110e:	bb 27       	eor	r27, r27
    1110:	a4 0f       	add	r26, r20
    1112:	b5 1f       	adc	r27, r21
    1114:	80 81       	ld	r24, Z
    1116:	9c 91       	ld	r25, X
    1118:	98 27       	eor	r25, r24
    111a:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    111c:	61 50       	subi	r22, 0x01	; 1
    111e:	f1 cf       	rjmp	.-30     	; 0x1102 <DecryptData+0x14>
    }
}
    1120:	08 95       	ret

00001122 <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1122:	af 92       	push	r10
    1124:	bf 92       	push	r11
    1126:	cf 92       	push	r12
    1128:	df 92       	push	r13
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	00 d0       	rcall	.+0      	; 0x1138 <ExtEERead+0x16>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	d6 2e       	mov	r13, r22
    113e:	c4 2e       	mov	r12, r20
    1140:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    1142:	7c 01       	movw	r14, r24
    1144:	e8 94       	clt
    1146:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    1148:	f9 82       	std	Y+1, r15	; 0x01
    114a:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    114c:	06 2f       	mov	r16, r22
    114e:	42 e0       	ldi	r20, 0x02	; 2
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	80 e5       	ldi	r24, 0x50	; 80
    1158:	05 da       	rcall	.-3062   	; 0x564 <I2C_read_bytes>
    115a:	18 2f       	mov	r17, r24
    if (error) return error;
    115c:	81 11       	cpse	r24, r1
    115e:	05 c0       	rjmp	.+10     	; 0x116a <ExtEERead+0x48>
    DecryptData(offset, length, type, data);
    1160:	95 01       	movw	r18, r10
    1162:	4c 2d       	mov	r20, r12
    1164:	6d 2d       	mov	r22, r13
    1166:	c7 01       	movw	r24, r14
    1168:	c2 df       	rcall	.-124    	; 0x10ee <DecryptData>
    return 0;
}
    116a:	81 2f       	mov	r24, r17
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	08 95       	ret

00001186 <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    1186:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    118a:	22 23       	and	r18, r18
    118c:	59 f0       	breq	.+22     	; 0x11a4 <SerSend+0x1e>
        serTxAddr = addr;
    118e:	80 93 ba 3a 	sts	0x3ABA, r24	; 0x803aba <serTxAddr>
    1192:	90 93 bb 3a 	sts	0x3ABB, r25	; 0x803abb <serTxAddr+0x1>
        serTxDone = 0;
    1196:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret
    } else return 1;    //Error: Still sending data
    11a4:	81 e0       	ldi	r24, 0x01	; 1
};
    11a6:	08 95       	ret

000011a8 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    11a8:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    11aa:	81 11       	cpse	r24, r1
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <SerSpeed+0x8>
    11ae:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	82 1b       	sub	r24, r18
    11b6:	91 09       	sbc	r25, r1
    11b8:	98 2f       	mov	r25, r24
    11ba:	88 27       	eor	r24, r24
    11bc:	81 50       	subi	r24, 0x01	; 1
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    11c4:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    11c8:	08 95       	ret

000011ca <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11ca:	82 e1       	ldi	r24, 0x12	; 18
    11cc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    11d0:	e0 e0       	ldi	r30, 0x00	; 0
    11d2:	f6 e0       	ldi	r31, 0x06	; 6
    11d4:	80 81       	ld	r24, Z
    11d6:	8b 7f       	andi	r24, 0xFB	; 251
    11d8:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    11da:	8e e1       	ldi	r24, 0x1E	; 30
    11dc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    11e6:	08 95       	ret

000011e8 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11e8:	82 e2       	ldi	r24, 0x22	; 34
    11ea:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    11ee:	e0 e0       	ldi	r30, 0x00	; 0
    11f0:	f6 e0       	ldi	r31, 0x06	; 6
    11f2:	80 81       	ld	r24, Z
    11f4:	84 60       	ori	r24, 0x04	; 4
    11f6:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    11f8:	87 e0       	ldi	r24, 0x07	; 7
    11fa:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    1204:	08 95       	ret

00001206 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1206:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <adcBtns>
    120a:	90 91 b9 3a 	lds	r25, 0x3AB9	; 0x803ab9 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    120e:	24 e0       	ldi	r18, 0x04	; 4
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	2a 95       	dec	r18
    1216:	e1 f7       	brne	.-8      	; 0x1210 <CheckButtons+0xa>
    1218:	99 27       	eor	r25, r25
    121a:	80 36       	cpi	r24, 0x60	; 96
    121c:	91 05       	cpc	r25, r1
    121e:	40 f4       	brcc	.+16     	; 0x1230 <CheckButtons+0x2a>
    1220:	8f 34       	cpi	r24, 0x4F	; 79
    1222:	91 05       	cpc	r25, r1
    1224:	88 f4       	brcc	.+34     	; 0x1248 <CheckButtons+0x42>
    1226:	c0 97       	sbiw	r24, 0x30	; 48
    1228:	09 97       	sbiw	r24, 0x09	; 9
    122a:	90 f4       	brcc	.+36     	; 0x1250 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	11 c0       	rjmp	.+34     	; 0x1252 <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1230:	85 37       	cpi	r24, 0x75	; 117
    1232:	91 05       	cpc	r25, r1
    1234:	68 f0       	brcs	.+26     	; 0x1250 <CheckButtons+0x4a>
    1236:	8e 38       	cpi	r24, 0x8E	; 142
    1238:	91 05       	cpc	r25, r1
    123a:	40 f0       	brcs	.+16     	; 0x124c <CheckButtons+0x46>
    123c:	8e 59       	subi	r24, 0x9E	; 158
    123e:	91 09       	sbc	r25, r1
    1240:	81 97       	sbiw	r24, 0x21	; 33
    1242:	30 f4       	brcc	.+12     	; 0x1250 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    1244:	90 e0       	ldi	r25, 0x00	; 0
            break;
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    1248:	93 e0       	ldi	r25, 0x03	; 3
            break;
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    124c:	91 e0       	ldi	r25, 0x01	; 1
            break;
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    1250:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    1252:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <previousValue.3901>
    1256:	98 17       	cp	r25, r24
    1258:	19 f0       	breq	.+6      	; 0x1260 <CheckButtons+0x5a>
            previousValue = button;
    125a:	90 93 24 38 	sts	0x3824, r25	; 0x803824 <previousValue.3901>
            return 0xFF;
    125e:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    1260:	08 95       	ret

00001262 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    1262:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <state.3911>
    1266:	90 91 23 38 	lds	r25, 0x3823	; 0x803823 <state.3911+0x1>
    126a:	9c 01       	movw	r18, r24
    126c:	32 2f       	mov	r19, r18
    126e:	22 27       	eor	r18, r18
    1270:	32 95       	swap	r19
    1272:	33 0f       	add	r19, r19
    1274:	30 7e       	andi	r19, 0xE0	; 224
    1276:	82 27       	eor	r24, r18
    1278:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    127a:	9c 01       	movw	r18, r24
    127c:	23 2f       	mov	r18, r19
    127e:	33 27       	eor	r19, r19
    1280:	26 95       	lsr	r18
    1282:	82 27       	eor	r24, r18
    1284:	93 27       	eor	r25, r19
    state ^= (state << 7);
    1286:	9c 01       	movw	r18, r24
    1288:	36 95       	lsr	r19
    128a:	32 2f       	mov	r19, r18
    128c:	22 27       	eor	r18, r18
    128e:	37 95       	ror	r19
    1290:	27 95       	ror	r18
    1292:	82 27       	eor	r24, r18
    1294:	93 27       	eor	r25, r19
    1296:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <state.3911>
    129a:	90 93 23 38 	sts	0x3823, r25	; 0x803823 <state.3911+0x1>
    return (state & 0xff);
}
    129e:	08 95       	ret

000012a0 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	7b 01       	movw	r14, r22
    12b0:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    12b2:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    12b6:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    12ba:	e8 2f       	mov	r30, r24
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	31 97       	sbiw	r30, 0x01	; 1
    12c0:	e7 70       	andi	r30, 0x07	; 7
    12c2:	ff 27       	eor	r31, r31
    12c4:	eb 5d       	subi	r30, 0xDB	; 219
    12c6:	f7 4c       	sbci	r31, 0xC7	; 199
    12c8:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    12ca:	cb df       	rcall	.-106    	; 0x1262 <lfsr>
    12cc:	8d 21       	and	r24, r13
    12ce:	c8 0f       	add	r28, r24
    12d0:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    12d2:	c7 df       	rcall	.-114    	; 0x1262 <lfsr>
    12d4:	8d 21       	and	r24, r13
    12d6:	c8 1b       	sub	r28, r24
    12d8:	d1 09       	sbc	r29, r1
    12da:	0c 17       	cp	r16, r28
    12dc:	1d 07       	cpc	r17, r29
    12de:	08 f4       	brcc	.+2      	; 0x12e2 <floatSpeed+0x42>
    12e0:	e8 01       	movw	r28, r16
    12e2:	c7 01       	movw	r24, r14
    12e4:	ec 16       	cp	r14, r28
    12e6:	fd 06       	cpc	r15, r29
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <floatSpeed+0x4c>
    12ea:	ce 01       	movw	r24, r28
    12ec:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    12f0:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    12f4:	df 91       	pop	r29
}
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	08 95       	ret

00001304 <floatAround>:
    1304:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	c8 2f       	mov	r28, r24
    130e:	d4 2f       	mov	r29, r20
    1310:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1312:	e6 2f       	mov	r30, r22
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	31 97       	sbiw	r30, 0x01	; 1
    1318:	e7 70       	andi	r30, 0x07	; 7
    131a:	ff 27       	eor	r31, r31
    131c:	eb 5d       	subi	r30, 0xDB	; 219
    131e:	f7 4c       	sbci	r31, 0xC7	; 199
    1320:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    1322:	9f df       	rcall	.-194    	; 0x1262 <lfsr>
    1324:	81 23       	and	r24, r17
    1326:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1328:	9c df       	rcall	.-200    	; 0x1262 <lfsr>
    132a:	81 23       	and	r24, r17
    132c:	c8 1b       	sub	r28, r24
    132e:	8c 2f       	mov	r24, r28
    1330:	00 23       	and	r16, r16
    if (max){
    1332:	41 f0       	breq	.+16     	; 0x1344 <floatAround+0x40>
    1334:	9c 2f       	mov	r25, r28
    1336:	0c 17       	cp	r16, r28
    1338:	08 f4       	brcc	.+2      	; 0x133c <floatAround+0x38>
    133a:	90 2f       	mov	r25, r16
    133c:	8d 2f       	mov	r24, r29
    133e:	d9 17       	cp	r29, r25
    1340:	08 f4       	brcc	.+2      	; 0x1344 <floatAround+0x40>
    1342:	89 2f       	mov	r24, r25
    1344:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	8d 17       	cp	r24, r29
    134a:	10 f0       	brcs	.+4      	; 0x1350 <floatAround+0x4c>
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	2d 2f       	mov	r18, r29
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	24 23       	and	r18, r20
    1356:	35 23       	and	r19, r21
    1358:	23 2b       	or	r18, r19
    135a:	09 f0       	breq	.+2      	; 0x135e <floatAround+0x5a>
    135c:	8d 2f       	mov	r24, r29
    135e:	df 91       	pop	r29

    return sample;
}
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <SaveGameState>:
    1368:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    136a:	df 92       	push	r13
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	64 97       	sbiw	r28, 0x14	; 20
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    1380:	44 e1       	ldi	r20, 0x14	; 20
    1382:	be 01       	movw	r22, r28
    1384:	6f 5f       	subi	r22, 0xFF	; 255
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	79 de       	rcall	.-782    	; 0x107e <EERead>
    138c:	82 e6       	ldi	r24, 0x62	; 98
    138e:	c8 2e       	mov	r12, r24
    1390:	8a e3       	ldi	r24, 0x3A	; 58
    1392:	d8 2e       	mov	r13, r24
    1394:	8e 01       	movw	r16, r28
    1396:	0f 5f       	subi	r16, 0xFF	; 255
    1398:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    139a:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    139c:	f8 01       	movw	r30, r16
    139e:	81 91       	ld	r24, Z+
    13a0:	8f 01       	movw	r16, r30
    13a2:	f6 01       	movw	r30, r12
    13a4:	90 81       	ld	r25, Z
    13a6:	98 13       	cpse	r25, r24
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    13aa:	f3 94       	inc	r15
    13ac:	ff ef       	ldi	r31, 0xFF	; 255
    13ae:	cf 1a       	sub	r12, r31
    13b0:	df 0a       	sbc	r13, r31
    13b2:	80 e1       	ldi	r24, 0x10	; 16
    13b4:	f8 12       	cpse	r15, r24
    13b6:	f2 cf       	rjmp	.-28     	; 0x139c <SaveGameState+0x34>
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	b6 01       	movw	r22, r12
    13be:	8f 2d       	mov	r24, r15
    13c0:	6e de       	rcall	.-804    	; 0x109e <EEWrite>
    13c2:	88 23       	and	r24, r24
    13c4:	91 f3       	breq	.-28     	; 0x13aa <SaveGameState+0x42>
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	36 c0       	rjmp	.+108    	; 0x1436 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    13ca:	20 91 3f 38 	lds	r18, 0x383F	; 0x80383f <inventory>
    13ce:	30 91 40 38 	lds	r19, 0x3840	; 0x803840 <inventory+0x1>
    13d2:	30 93 72 3a 	sts	0x3A72, r19	; 0x803a72 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    13d6:	20 93 73 3a 	sts	0x3A73, r18	; 0x803a73 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    13da:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <inventory+0x2>
    13de:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <inventory+0x3>
    13e2:	90 93 74 3a 	sts	0x3A74, r25	; 0x803a74 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    13e6:	80 93 75 3a 	sts	0x3A75, r24	; 0x803a75 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    13ea:	89 89       	ldd	r24, Y+17	; 0x11
    13ec:	9a 89       	ldd	r25, Y+18	; 0x12
    13ee:	98 27       	eor	r25, r24
    13f0:	89 27       	eor	r24, r25
    13f2:	98 27       	eor	r25, r24
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	69 f4       	brne	.+26     	; 0x1414 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    13fa:	8b 89       	ldd	r24, Y+19	; 0x13
    13fc:	9c 89       	ldd	r25, Y+20	; 0x14
    13fe:	98 27       	eor	r25, r24
    1400:	89 27       	eor	r24, r25
    1402:	98 27       	eor	r25, r24
    1404:	20 91 41 38 	lds	r18, 0x3841	; 0x803841 <inventory+0x2>
    1408:	30 91 42 38 	lds	r19, 0x3842	; 0x803842 <inventory+0x3>
    140c:	28 17       	cp	r18, r24
    140e:	39 07       	cpc	r19, r25
    1410:	49 f4       	brne	.+18     	; 0x1424 <SaveGameState+0xbc>
    1412:	10 c0       	rjmp	.+32     	; 0x1434 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1414:	42 e0       	ldi	r20, 0x02	; 2
    1416:	62 e7       	ldi	r22, 0x72	; 114
    1418:	7a e3       	ldi	r23, 0x3A	; 58
    141a:	80 e1       	ldi	r24, 0x10	; 16
    141c:	40 de       	rcall	.-896    	; 0x109e <EEWrite>
    141e:	88 23       	and	r24, r24
    1420:	61 f3       	breq	.-40     	; 0x13fa <SaveGameState+0x92>
    1422:	d1 cf       	rjmp	.-94     	; 0x13c6 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1424:	42 e0       	ldi	r20, 0x02	; 2
    1426:	64 e7       	ldi	r22, 0x74	; 116
    1428:	7a e3       	ldi	r23, 0x3A	; 58
    142a:	82 e1       	ldi	r24, 0x12	; 18
    142c:	38 de       	rcall	.-912    	; 0x109e <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	81 11       	cpse	r24, r1
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <SaveGameState+0xce>
    1434:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1436:	89 2f       	mov	r24, r25
    1438:	64 96       	adiw	r28, 0x14	; 20
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	08 95       	ret

0000144e <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    144e:	e8 2f       	mov	r30, r24
    1450:	ef 77       	andi	r30, 0x7F	; 127
    1452:	e6 95       	lsr	r30
    1454:	e6 95       	lsr	r30
    1456:	e6 95       	lsr	r30
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	ee 59       	subi	r30, 0x9E	; 158
    145c:	f5 4c       	sbci	r31, 0xC5	; 197
    145e:	20 81       	ld	r18, Z
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	87 70       	andi	r24, 0x07	; 7
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <ReadStatusBit+0x1e>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <ReadStatusBit+0x1a>
    1470:	ca 01       	movw	r24, r20
}
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	08 95       	ret

00001476 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    1476:	e8 2f       	mov	r30, r24
    1478:	ef 77       	andi	r30, 0x7F	; 127
    147a:	e6 95       	lsr	r30
    147c:	e6 95       	lsr	r30
    147e:	e6 95       	lsr	r30
    1480:	28 2f       	mov	r18, r24
    1482:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	ee 59       	subi	r30, 0x9E	; 158
    1488:	f5 4c       	sbci	r31, 0xC5	; 197
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <WriteStatusBit+0x1c>
    1490:	88 0f       	add	r24, r24
    1492:	2a 95       	dec	r18
    1494:	ea f7       	brpl	.-6      	; 0x1490 <WriteStatusBit+0x1a>
    1496:	66 23       	and	r22, r22
    1498:	19 f0       	breq	.+6      	; 0x14a0 <WriteStatusBit+0x2a>
    149a:	90 81       	ld	r25, Z
    149c:	89 2b       	or	r24, r25
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    14a0:	80 95       	com	r24
    14a2:	90 81       	ld	r25, Z
    14a4:	89 23       	and	r24, r25
    14a6:	80 83       	st	Z, r24
    14a8:	08 95       	ret

000014aa <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    14aa:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    14ac:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    14ae:	31 f0       	breq	.+12     	; 0x14bc <UpdateState+0x12>
        if (clearBit) {
    14b0:	97 ff       	sbrs	r25, 7
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	dd cf       	rjmp	.-70     	; 0x1476 <WriteStatusBit>
    14bc:	08 95       	ret

000014be <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    14be:	cf 93       	push	r28
    14c0:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    14c2:	8f 77       	andi	r24, 0x7F	; 127
    14c4:	c4 df       	rcall	.-120    	; 0x144e <ReadStatusBit>
    14c6:	2c 2f       	mov	r18, r28
    14c8:	22 1f       	adc	r18, r18
    14ca:	22 27       	eor	r18, r18
    14cc:	22 1f       	adc	r18, r18
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	81 11       	cpse	r24, r1
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <CheckState+0x18>
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    14d6:	82 2f       	mov	r24, r18
    14d8:	89 27       	eor	r24, r25
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    14de:	e3 e0       	ldi	r30, 0x03	; 3
    14e0:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    14e4:	91 91       	ld	r25, Z+
    14e6:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    14e8:	ed 30       	cpi	r30, 0x0D	; 13
    14ea:	91 e1       	ldi	r25, 0x11	; 17
    14ec:	f9 07       	cpc	r31, r25
    14ee:	d1 f7       	brne	.-12     	; 0x14e4 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    14f0:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	98 0f       	add	r25, r24
    14f6:	90 93 3e 38 	sts	0x383E, r25	; 0x80383e <whoami>
    return id;
}
    14fa:	08 95       	ret

000014fc <Reset>:

void Reset(){
    14fc:	e2 e6       	ldi	r30, 0x62	; 98
    14fe:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    1500:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1502:	8a e3       	ldi	r24, 0x3A	; 58
    1504:	e6 37       	cpi	r30, 0x76	; 118
    1506:	f8 07       	cpc	r31, r24
    1508:	d9 f7       	brne	.-10     	; 0x1500 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    150a:	e9 df       	rcall	.-46     	; 0x14de <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    150c:	81 11       	cpse	r24, r1
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1510:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <gameState+0xd>
    1514:	80 64       	ori	r24, 0x40	; 64
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	31 f4       	brne	.+12     	; 0x1528 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    151c:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <gameState+0xd>
    1520:	80 68       	ori	r24, 0x80	; 128
    1522:	80 93 6f 3a 	sts	0x3A6F, r24	; 0x803a6f <gameState+0xd>
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	21 f4       	brne	.+8      	; 0x1534 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    152c:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <gameState+0xe>
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	05 c0       	rjmp	.+10     	; 0x153e <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	29 f4       	brne	.+10     	; 0x1542 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1538:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <gameState+0xe>
    153c:	82 60       	ori	r24, 0x02	; 2
    153e:	80 93 70 3a 	sts	0x3A70, r24	; 0x803a70 <gameState+0xe>
    1542:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <gameState>
    1546:	81 60       	ori	r24, 0x01	; 1
    1548:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <gameState>
    154c:	08 95       	ret

0000154e <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1552:	44 e1       	ldi	r20, 0x14	; 20
    1554:	62 e6       	ldi	r22, 0x62	; 98
    1556:	7a e3       	ldi	r23, 0x3A	; 58
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	91 dd       	rcall	.-1246   	; 0x107e <EERead>
    155c:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    155e:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    1560:	8c 2f       	mov	r24, r28
    1562:	75 df       	rcall	.-278    	; 0x144e <ReadStatusBit>
    1564:	d8 0f       	add	r29, r24
    1566:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    1568:	c2 37       	cpi	r28, 0x72	; 114
    156a:	d1 f7       	brne	.-12     	; 0x1560 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    156c:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    156e:	11 f0       	breq	.+4      	; 0x1574 <LoadGameState+0x26>
    1570:	c5 df       	rcall	.-118    	; 0x14fc <Reset>
    } else getID();
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <LoadGameState+0x28>
    1574:	b4 df       	rcall	.-152    	; 0x14de <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    1576:	80 91 72 3a 	lds	r24, 0x3A72	; 0x803a72 <gameState+0x10>
    157a:	90 91 73 3a 	lds	r25, 0x3A73	; 0x803a73 <gameState+0x11>
    157e:	98 27       	eor	r25, r24
    1580:	89 27       	eor	r24, r25
    1582:	98 27       	eor	r25, r24
    1584:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <inventory>
    1588:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    158c:	80 91 74 3a 	lds	r24, 0x3A74	; 0x803a74 <gameState+0x12>
    1590:	90 91 75 3a 	lds	r25, 0x3A75	; 0x803a75 <gameState+0x13>
    1594:	98 27       	eor	r25, r24
    1596:	89 27       	eor	r24, r25
    1598:	98 27       	eor	r25, r24
    159a:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <inventory+0x2>
    159e:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <inventory+0x3>
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    15a8:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    15aa:	86 e7       	ldi	r24, 0x76	; 118
    15ac:	88 df       	rcall	.-240    	; 0x14be <CheckState>
    15ae:	c8 2f       	mov	r28, r24
    15b0:	88 23       	and	r24, r24
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    15b4:	e0 91 e9 c1 	lds	r30, 0xC1E9	; 0x80c1e9 <__bss_end+0x86ce>
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	e5 53       	subi	r30, 0x35	; 53
    15bc:	f5 4c       	sbci	r31, 0xC5	; 197
    15be:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    15c0:	e0 91 e8 c1 	lds	r30, 0xC1E8	; 0x80c1e8 <__bss_end+0x86cd>
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15ca:	e5 53       	subi	r30, 0x35	; 53
    15cc:	f5 4c       	sbci	r31, 0xC5	; 197
    15ce:	80 83       	st	Z, r24
        return 1;
    15d0:	c1 e0       	ldi	r28, 0x01	; 1
    15d2:	4c c0       	rjmp	.+152    	; 0x166c <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    15d4:	85 e7       	ldi	r24, 0x75	; 117
    15d6:	73 df       	rcall	.-282    	; 0x14be <CheckState>
    15d8:	88 23       	and	r24, r24
    15da:	59 f1       	breq	.+86     	; 0x1632 <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    15dc:	e0 91 e9 c1 	lds	r30, 0xC1E9	; 0x80c1e9 <__bss_end+0x86ce>
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15e6:	e5 53       	subi	r30, 0x35	; 53
    15e8:	f5 4c       	sbci	r31, 0xC5	; 197
    15ea:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    15ec:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <cooledDown.3970>
    15f0:	88 23       	and	r24, r24
    15f2:	79 f0       	breq	.+30     	; 0x1612 <HotSummer+0x6a>
    15f4:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <calTemp>
    15f8:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <calTemp+0x1>
    15fc:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    1600:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1604:	80 96       	adiw	r24, 0x20	; 32
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    160a:	18 f0       	brcs	.+6      	; 0x1612 <HotSummer+0x6a>
    160c:	86 e7       	ldi	r24, 0x76	; 118
    160e:	4d df       	rcall	.-358    	; 0x14aa <UpdateState>
            return 0;
    1610:	2d c0       	rjmp	.+90     	; 0x166c <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1612:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <calTemp>
    1616:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <calTemp+0x1>
    161a:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    161e:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1622:	08 96       	adiw	r24, 0x08	; 8
    1624:	82 17       	cp	r24, r18
    1626:	93 07       	cpc	r25, r19
    1628:	08 f1       	brcs	.+66     	; 0x166c <HotSummer+0xc4>
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <cooledDown.3970>
    1630:	1d c0       	rjmp	.+58     	; 0x166c <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1632:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <calTemp>
    1636:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <calTemp+0x1>
    163a:	89 2b       	or	r24, r25
    163c:	41 f4       	brne	.+16     	; 0x164e <HotSummer+0xa6>
    163e:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    1642:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1646:	80 93 c1 3a 	sts	0x3AC1, r24	; 0x803ac1 <calTemp>
    164a:	90 93 c2 3a 	sts	0x3AC2, r25	; 0x803ac2 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    164e:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <calTemp>
    1652:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <calTemp+0x1>
    1656:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    165a:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    165e:	80 96       	adiw	r24, 0x20	; 32
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    1664:	18 f0       	brcs	.+6      	; 0x166c <HotSummer+0xc4>
    1666:	85 e7       	ldi	r24, 0x75	; 117
    1668:	20 df       	rcall	.-448    	; 0x14aa <UpdateState>
        }
    }
    return 0;
    166a:	c0 e0       	ldi	r28, 0x00	; 0
}
    166c:	8c 2f       	mov	r24, r28
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    1672:	ea ee       	ldi	r30, 0xEA	; 234
    1674:	f1 ec       	ldi	r31, 0xC1	; 193
    for (int8_t i=0; i<5; i++) {
    1676:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    1678:	a5 81       	ldd	r26, Z+5	; 0x05
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    167c:	98 17       	cp	r25, r24
    167e:	34 f4       	brge	.+12     	; 0x168c <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    1680:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1684:	a5 53       	subi	r26, 0x35	; 53
    1686:	b5 4c       	sbci	r27, 0xC5	; 197
    1688:	2c 93       	st	X, r18
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    168c:	a5 53       	subi	r26, 0x35	; 53
    168e:	b5 4c       	sbci	r27, 0xC5	; 197
    1690:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    1692:	a0 81       	ld	r26, Z
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    1696:	96 17       	cp	r25, r22
    1698:	34 f4       	brge	.+12     	; 0x16a6 <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    169a:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    169e:	a5 53       	subi	r26, 0x35	; 53
    16a0:	b5 4c       	sbci	r27, 0xC5	; 197
    16a2:	2c 93       	st	X, r18
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    16a6:	a5 53       	subi	r26, 0x35	; 53
    16a8:	b5 4c       	sbci	r27, 0xC5	; 197
    16aa:	1c 92       	st	X, r1
    16ac:	9f 5f       	subi	r25, 0xFF	; 255
    16ae:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    16b0:	95 30       	cpi	r25, 0x05	; 5
    16b2:	11 f7       	brne	.-60     	; 0x1678 <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    16b4:	08 95       	ret

000016b6 <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    16b6:	a4 ef       	ldi	r26, 0xF4	; 244
    16b8:	b1 ec       	ldi	r27, 0xC1	; 193
    16ba:	ec 91       	ld	r30, X
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	e5 53       	subi	r30, 0x35	; 53
    16c0:	f5 4c       	sbci	r31, 0xC5	; 197
    16c2:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16c4:	12 96       	adiw	r26, 0x02	; 2
    16c6:	ec 91       	ld	r30, X
    16c8:	12 97       	sbiw	r26, 0x02	; 2
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	e5 53       	subi	r30, 0x35	; 53
    16ce:	f5 4c       	sbci	r31, 0xC5	; 197
    16d0:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    16d2:	11 96       	adiw	r26, 0x01	; 1
    16d4:	ec 91       	ld	r30, X
    16d6:	11 97       	sbiw	r26, 0x01	; 1
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	e5 53       	subi	r30, 0x35	; 53
    16dc:	f5 4c       	sbci	r31, 0xC5	; 197
    16de:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16e0:	13 96       	adiw	r26, 0x03	; 3
    16e2:	ec 91       	ld	r30, X
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	e5 53       	subi	r30, 0x35	; 53
    16e8:	f5 4c       	sbci	r31, 0xC5	; 197
    16ea:	60 83       	st	Z, r22
    16ec:	08 95       	ret

000016ee <GenerateBlinks>:
    }
}

void GenerateBlinks(){
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    16fa:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
    16fe:	88 23       	and	r24, r24
    1700:	29 f0       	breq	.+10     	; 0x170c <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    1702:	80 e4       	ldi	r24, 0x40	; 64
    1704:	dc de       	rcall	.-584    	; 0x14be <CheckState>
    1706:	81 11       	cpse	r24, r1
    1708:	24 c0       	rjmp	.+72     	; 0x1752 <GenerateBlinks+0x64>
    170a:	50 c0       	rjmp	.+160    	; 0x17ac <GenerateBlinks+0xbe>
    170c:	c8 ef       	ldi	r28, 0xF8	; 248
    170e:	d1 ec       	ldi	r29, 0xC1	; 193
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1710:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1712:	81 2f       	mov	r24, r17
    1714:	d4 de       	rcall	.-600    	; 0x14be <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    1716:	ee 81       	ldd	r30, Y+6	; 0x06
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    171a:	88 23       	and	r24, r24
    171c:	59 f0       	breq	.+22     	; 0x1734 <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    171e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1722:	e5 53       	subi	r30, 0x35	; 53
    1724:	f5 4c       	sbci	r31, 0xC5	; 197
    1726:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    1728:	e8 81       	ld	r30, Y
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	e5 53       	subi	r30, 0x35	; 53
    172e:	f5 4c       	sbci	r31, 0xC5	; 197
    1730:	10 82       	st	Z, r1
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    1734:	e5 53       	subi	r30, 0x35	; 53
    1736:	f5 4c       	sbci	r31, 0xC5	; 197
    1738:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    173a:	e8 81       	ld	r30, Y
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1742:	e5 53       	subi	r30, 0x35	; 53
    1744:	f5 4c       	sbci	r31, 0xC5	; 197
    1746:	80 83       	st	Z, r24
    1748:	1f 5f       	subi	r17, 0xFF	; 255
    174a:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    174c:	10 38       	cpi	r17, 0x80	; 128
    174e:	09 f7       	brne	.-62     	; 0x1712 <GenerateBlinks+0x24>
    1750:	d8 cf       	rjmp	.-80     	; 0x1702 <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1752:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <HeartCount>
    1756:	98 2f       	mov	r25, r24
    1758:	9d 7f       	andi	r25, 0xFD	; 253
    175a:	e0 91 e7 c1 	lds	r30, 0xC1E7	; 0x80c1e7 <__bss_end+0x86cc>
            iLED[BADGER] = dimValue>>1 ;
    175e:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1760:	91 30       	cpi	r25, 0x01	; 1
    1762:	11 f0       	breq	.+4      	; 0x1768 <GenerateBlinks+0x7a>
    1764:	85 30       	cpi	r24, 0x05	; 5
    1766:	21 f4       	brne	.+8      	; 0x1770 <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    1768:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    176c:	96 95       	lsr	r25
    176e:	06 c0       	rjmp	.+12     	; 0x177c <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	11 f0       	breq	.+4      	; 0x1778 <GenerateBlinks+0x8a>
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	31 f4       	brne	.+12     	; 0x1784 <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    1778:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    177c:	e5 53       	subi	r30, 0x35	; 53
    177e:	f5 4c       	sbci	r31, 0xC5	; 197
    1780:	90 83       	st	Z, r25
    1782:	0c c0       	rjmp	.+24     	; 0x179c <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    1784:	88 23       	and	r24, r24
    1786:	11 f0       	breq	.+4      	; 0x178c <GenerateBlinks+0x9e>
    1788:	86 30       	cpi	r24, 0x06	; 6
    178a:	29 f4       	brne	.+10     	; 0x1796 <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    178c:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1790:	96 95       	lsr	r25
    1792:	96 95       	lsr	r25
    1794:	f3 cf       	rjmp	.-26     	; 0x177c <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    1796:	e5 53       	subi	r30, 0x35	; 53
    1798:	f5 4c       	sbci	r31, 0xC5	; 197
    179a:	10 82       	st	Z, r1
        if (HeartCount<32)
    179c:	80 32       	cpi	r24, 0x20	; 32
    179e:	20 f4       	brcc	.+8      	; 0x17a8 <GenerateBlinks+0xba>
            HeartCount++;
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <HeartCount>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    17a8:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    17ac:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <LedCount>
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	28 0f       	add	r18, r24
    17b4:	20 93 5b 38 	sts	0x385B, r18	; 0x80385b <LedCount>

    switch (effect&0x1f) {
    17b8:	e0 91 3b 38 	lds	r30, 0x383B	; 0x80383b <effect>
    17bc:	f0 91 3c 38 	lds	r31, 0x383C	; 0x80383c <effect+0x1>
    17c0:	ef 71       	andi	r30, 0x1F	; 31
    17c2:	ff 27       	eor	r31, r31
    17c4:	e9 30       	cpi	r30, 0x09	; 9
    17c6:	f1 05       	cpc	r31, r1
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <GenerateBlinks+0xde>
    17ca:	ef c0       	rjmp	.+478    	; 0x19aa <GenerateBlinks+0x2bc>
    17cc:	e2 5c       	subi	r30, 0xC2	; 194
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	4c df       	rcall	.-360    	; 0x1672 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17da:	e0 91 f4 c1 	lds	r30, 0xC1F4	; 0x80c1f4 <__bss_end+0x86d9>
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	e5 53       	subi	r30, 0x35	; 53
    17e2:	f5 4c       	sbci	r31, 0xC5	; 197
    17e4:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    17e6:	e0 91 f6 c1 	lds	r30, 0xC1F6	; 0x80c1f6 <__bss_end+0x86db>
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	e5 53       	subi	r30, 0x35	; 53
    17ee:	f5 4c       	sbci	r31, 0xC5	; 197
    17f0:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    17f2:	e0 91 e8 c1 	lds	r30, 0xC1E8	; 0x80c1e8 <__bss_end+0x86cd>
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	e5 53       	subi	r30, 0x35	; 53
    17fa:	f5 4c       	sbci	r31, 0xC5	; 197
    17fc:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17fe:	e0 91 f5 c1 	lds	r30, 0xC1F5	; 0x80c1f5 <__bss_end+0x86da>
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	e5 53       	subi	r30, 0x35	; 53
    1806:	f5 4c       	sbci	r31, 0xC5	; 197
    1808:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    180a:	e0 91 f7 c1 	lds	r30, 0xC1F7	; 0x80c1f7 <__bss_end+0x86dc>
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	e5 53       	subi	r30, 0x35	; 53
    1812:	f5 4c       	sbci	r31, 0xC5	; 197
    1814:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1816:	e0 91 e9 c1 	lds	r30, 0xC1E9	; 0x80c1e9 <__bss_end+0x86ce>
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	e5 53       	subi	r30, 0x35	; 53
    181e:	f5 4c       	sbci	r31, 0xC5	; 197
    1820:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1822:	e0 91 e6 c1 	lds	r30, 0xC1E6	; 0x80c1e6 <__bss_end+0x86cb>
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	e5 53       	subi	r30, 0x35	; 53
    182a:	f5 4c       	sbci	r31, 0xC5	; 197
    182c:	10 82       	st	Z, r1
            break;
    182e:	bd c0       	rjmp	.+378    	; 0x19aa <GenerateBlinks+0x2bc>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    1830:	82 2f       	mov	r24, r18
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	20 fd       	sbrc	r18, 0
    1836:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <GenerateBlinks+0x16a>
    183e:	62 2f       	mov	r22, r18
    1840:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1842:	23 ff       	sbrs	r18, 3
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GenerateBlinks+0x15c>
    1846:	60 95       	com	r22
    1848:	70 95       	com	r23
    184a:	85 e0       	ldi	r24, 0x05	; 5
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	8a 95       	dec	r24
    1852:	e1 f7       	brne	.-8      	; 0x184c <GenerateBlinks+0x15e>
    1854:	61 5e       	subi	r22, 0xE1	; 225
    1856:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1862:	ef 90       	pop	r14
    1864:	28 cf       	rjmp	.-432    	; 0x16b6 <SetBothEyes>
            break;

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    1866:	82 2f       	mov	r24, r18
    1868:	83 70       	andi	r24, 0x03	; 3
    186a:	09 f0       	breq	.+2      	; 0x186e <GenerateBlinks+0x180>
    186c:	9e c0       	rjmp	.+316    	; 0x19aa <GenerateBlinks+0x2bc>
                if (LedCount & 4)
    186e:	22 ff       	sbrs	r18, 2
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <GenerateBlinks+0x18a>
                    WingBar(5,5);
    1872:	65 e0       	ldi	r22, 0x05	; 5
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	02 c0       	rjmp	.+4      	; 0x187c <GenerateBlinks+0x18e>
                else
                    WingBar(0,0);
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
        case 5:
            if ((LedCount & 3) == 0) {
                if (LedCount & 4)
                    WingBar(5,5);
                else
                    WingBar(0,0);
    1886:	ef 90       	pop	r14
    1888:	f4 ce       	rjmp	.-536    	; 0x1672 <WingBar>
            }
            break;

        //'circle the wing leds'
        case 6:
            iLED[WING[L][LedCount%5]] = 0;
    188a:	82 2f       	mov	r24, r18
    188c:	65 e0       	ldi	r22, 0x05	; 5
    188e:	0e 94 a4 20 	call	0x4148	; 0x4148 <__udivmodqi4>
    1892:	e9 2f       	mov	r30, r25
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	e6 51       	subi	r30, 0x16	; 22
    1898:	fe 43       	sbci	r31, 0x3E	; 62
    189a:	e5 81       	ldd	r30, Z+5	; 0x05
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	e5 53       	subi	r30, 0x35	; 53
    18a0:	f5 4c       	sbci	r31, 0xC5	; 197
    18a2:	10 82       	st	Z, r1
            iLED[WING[L][(LedCount+1)%5]] = dimValue;
    18a4:	82 2f       	mov	r24, r18
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	65 e0       	ldi	r22, 0x05	; 5
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	0e 94 b0 20 	call	0x4160	; 0x4160 <__divmodhi4>
    18b2:	fc 01       	movw	r30, r24
    18b4:	e6 51       	subi	r30, 0x16	; 22
    18b6:	fe 43       	sbci	r31, 0x3E	; 62
    18b8:	e5 81       	ldd	r30, Z+5	; 0x05
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18c0:	e5 53       	subi	r30, 0x35	; 53
    18c2:	f5 4c       	sbci	r31, 0xC5	; 197
    18c4:	80 83       	st	Z, r24
    18c6:	8a ee       	ldi	r24, 0xEA	; 234
    18c8:	91 ec       	ldi	r25, 0xC1	; 193
    18ca:	c4 ef       	ldi	r28, 0xF4	; 244
    18cc:	d1 ec       	ldi	r29, 0xC1	; 193
    18ce:	2f ee       	ldi	r18, 0xEF	; 239
    18d0:	31 ec       	ldi	r19, 0xC1	; 193

            for (uint8_t x=0; x<5; ++x){
                iLED[WING[R][x]] = iLED[WING[L][4-x]];
    18d2:	dc 01       	movw	r26, r24
    18d4:	ed 91       	ld	r30, X+
    18d6:	cd 01       	movw	r24, r26
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	aa 91       	ld	r26, -Y
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	a5 53       	subi	r26, 0x35	; 53
    18e0:	b5 4c       	sbci	r27, 0xC5	; 197
    18e2:	4c 91       	ld	r20, X
    18e4:	e5 53       	subi	r30, 0x35	; 53
    18e6:	f5 4c       	sbci	r31, 0xC5	; 197
    18e8:	40 83       	st	Z, r20
        //'circle the wing leds'
        case 6:
            iLED[WING[L][LedCount%5]] = 0;
            iLED[WING[L][(LedCount+1)%5]] = dimValue;

            for (uint8_t x=0; x<5; ++x){
    18ea:	2c 17       	cp	r18, r28
    18ec:	3d 07       	cpc	r19, r29
    18ee:	89 f7       	brne	.-30     	; 0x18d2 <GenerateBlinks+0x1e4>
    18f0:	5c c0       	rjmp	.+184    	; 0x19aa <GenerateBlinks+0x2bc>
    18f2:	ca ee       	ldi	r28, 0xEA	; 234
    18f4:	d1 ec       	ldi	r29, 0xC1	; 193
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    18f6:	7e 01       	movw	r14, r28
    18f8:	0d 81       	ldd	r16, Y+5	; 0x05
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	b2 dc       	rcall	.-1692   	; 0x1262 <lfsr>
    18fe:	87 ff       	sbrs	r24, 7
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <GenerateBlinks+0x21a>
    1902:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1906:	01 c0       	rjmp	.+2      	; 0x190a <GenerateBlinks+0x21c>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	f8 01       	movw	r30, r16
    190c:	e5 53       	subi	r30, 0x35	; 53
    190e:	f5 4c       	sbci	r31, 0xC5	; 197
    1910:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    1912:	21 96       	adiw	r28, 0x01	; 1
    1914:	f7 01       	movw	r30, r14
    1916:	00 81       	ld	r16, Z
    1918:	10 e0       	ldi	r17, 0x00	; 0
    191a:	a3 dc       	rcall	.-1722   	; 0x1262 <lfsr>
    191c:	87 ff       	sbrs	r24, 7
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <GenerateBlinks+0x238>
    1920:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <GenerateBlinks+0x23a>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	f8 01       	movw	r30, r16
    192a:	e5 53       	subi	r30, 0x35	; 53
    192c:	f5 4c       	sbci	r31, 0xC5	; 197
    192e:	80 83       	st	Z, r24
            }
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    1930:	f1 ec       	ldi	r31, 0xC1	; 193
    1932:	cf 3e       	cpi	r28, 0xEF	; 239
    1934:	df 07       	cpc	r29, r31
    1936:	f9 f6       	brne	.-66     	; 0x18f6 <GenerateBlinks+0x208>
    1938:	38 c0       	rjmp	.+112    	; 0x19aa <GenerateBlinks+0x2bc>
    193a:	ea ee       	ldi	r30, 0xEA	; 234
    193c:	f1 ec       	ldi	r31, 0xC1	; 193
    193e:	8e ee       	ldi	r24, 0xEE	; 238
    1940:	91 ec       	ldi	r25, 0xC1	; 193
    1942:	9f 01       	movw	r18, r30
            break;

        //'falling rain'
        case 8:
            for (uint8_t x=0; x<4; ++x){
                iLED[WING[L][x]] = iLED[WING[L][x+1]];
    1944:	a5 81       	ldd	r26, Z+5	; 0x05
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	c6 81       	ldd	r28, Z+6	; 0x06
    194a:	d0 e0       	ldi	r29, 0x00	; 0
    194c:	c5 53       	subi	r28, 0x35	; 53
    194e:	d5 4c       	sbci	r29, 0xC5	; 197
    1950:	48 81       	ld	r20, Y
    1952:	a5 53       	subi	r26, 0x35	; 53
    1954:	b5 4c       	sbci	r27, 0xC5	; 197
    1956:	4c 93       	st	X, r20
    1958:	31 96       	adiw	r30, 0x01	; 1
                iLED[WING[R][x]] = iLED[WING[R][x+1]];
    195a:	e9 01       	movw	r28, r18
    195c:	a8 81       	ld	r26, Y
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	c0 81       	ld	r28, Z
    1962:	d0 e0       	ldi	r29, 0x00	; 0
    1964:	c5 53       	subi	r28, 0x35	; 53
    1966:	d5 4c       	sbci	r29, 0xC5	; 197
    1968:	28 81       	ld	r18, Y
    196a:	a5 53       	subi	r26, 0x35	; 53
    196c:	b5 4c       	sbci	r27, 0xC5	; 197
            }
            break;

        //'falling rain'
        case 8:
            for (uint8_t x=0; x<4; ++x){
    196e:	2c 93       	st	X, r18
    1970:	8e 17       	cp	r24, r30
    1972:	9f 07       	cpc	r25, r31
                iLED[WING[L][x]] = iLED[WING[L][x+1]];
                iLED[WING[R][x]] = iLED[WING[R][x+1]];
            }
            iLED[WING[L][4]] = (lfsr() > 192)?dimValue:0;
    1974:	31 f7       	brne	.-52     	; 0x1942 <GenerateBlinks+0x254>
    1976:	c0 91 f3 c1 	lds	r28, 0xC1F3	; 0x80c1f3 <__bss_end+0x86d8>
    197a:	d0 e0       	ldi	r29, 0x00	; 0
    197c:	72 dc       	rcall	.-1820   	; 0x1262 <lfsr>
    197e:	81 3c       	cpi	r24, 0xC1	; 193
    1980:	18 f0       	brcs	.+6      	; 0x1988 <GenerateBlinks+0x29a>
    1982:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1986:	01 c0       	rjmp	.+2      	; 0x198a <GenerateBlinks+0x29c>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	c5 53       	subi	r28, 0x35	; 53
    198c:	d5 4c       	sbci	r29, 0xC5	; 197
            iLED[WING[R][4]] = (lfsr() > 192)?dimValue:0;
    198e:	88 83       	st	Y, r24
    1990:	c0 91 ee c1 	lds	r28, 0xC1EE	; 0x80c1ee <__bss_end+0x86d3>
    1994:	d0 e0       	ldi	r29, 0x00	; 0
    1996:	65 dc       	rcall	.-1846   	; 0x1262 <lfsr>
    1998:	81 3c       	cpi	r24, 0xC1	; 193
    199a:	18 f0       	brcs	.+6      	; 0x19a2 <GenerateBlinks+0x2b4>
    199c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <GenerateBlinks+0x2b6>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	c5 53       	subi	r28, 0x35	; 53
    19a6:	d5 4c       	sbci	r29, 0xC5	; 197
    19a8:	88 83       	st	Y, r24
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	08 95       	ret

000019b8 <GenerateAudio>:


uint8_t GenerateAudio(){
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28

    if (auIn[AULEN>>1] < HPLVL) {
    19be:	80 91 c7 3a 	lds	r24, 0x3AC7	; 0x803ac7 <auIn+0x4>
    19c2:	89 31       	cpi	r24, 0x19	; 25
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <GenerateAudio+0x10>
    19c6:	27 c1       	rjmp	.+590    	; 0x1c16 <GenerateAudio+0x25e>

        detHdPh = 1;
    19c8:	c1 e0       	ldi	r28, 0x01	; 1
    19ca:	c0 93 c0 3a 	sts	0x3AC0, r28	; 0x803ac0 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    19ce:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    19d2:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    19d6:	88 27       	eor	r24, r24
    19d8:	89 2b       	or	r24, r25
    19da:	09 f0       	breq	.+2      	; 0x19de <GenerateAudio+0x26>
    19dc:	bf c0       	rjmp	.+382    	; 0x1b5c <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    19de:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    19e2:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    19e6:	80 7e       	andi	r24, 0xE0	; 224
    19e8:	99 27       	eor	r25, r25
    19ea:	89 2b       	or	r24, r25
    19ec:	31 f4       	brne	.+12     	; 0x19fa <GenerateAudio+0x42>
                auRepAddr = &zero;
    19ee:	89 e3       	ldi	r24, 0x39	; 57
    19f0:	98 e3       	ldi	r25, 0x38	; 56
    19f2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19f6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    19fa:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    19fe:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1a02:	80 7e       	andi	r24, 0xE0	; 224
    1a04:	99 27       	eor	r25, r25
    1a06:	80 97       	sbiw	r24, 0x20	; 32
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <GenerateAudio+0x54>
    1a0a:	59 c0       	rjmp	.+178    	; 0x1abe <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	52 e2       	ldi	r21, 0x22	; 34
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e2       	ldi	r23, 0x20	; 32
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	44 dc       	rcall	.-1912   	; 0x12a0 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	65 e0       	ldi	r22, 0x05	; 5
    1a1e:	80 e8       	ldi	r24, 0x80	; 128
    1a20:	71 dc       	rcall	.-1822   	; 0x1304 <floatAround>
    1a22:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <auBuffer.4021+0x2>

                if (buttonMark) {
    1a26:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <buttonMark>
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <GenerateAudio+0x78>
    1a2e:	47 c0       	rjmp	.+142    	; 0x1abe <GenerateAudio+0x106>
                    if (start == 0) {
    1a30:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <start.4024>
    1a34:	81 11       	cpse	r24, r1
    1a36:	15 c0       	rjmp	.+42     	; 0x1a62 <GenerateAudio+0xaa>
                        duration = 4;
    1a38:	84 e0       	ldi	r24, 0x04	; 4
    1a3a:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <duration.4023>
                        loudness = 0xff;
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <loudness.4022>
                        TCB1_CCMP = 0x2000;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	90 e2       	ldi	r25, 0x20	; 32
    1a48:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a4c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1a50:	81 e1       	ldi	r24, 0x11	; 17
    1a52:	98 e3       	ldi	r25, 0x38	; 56
    1a54:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a58:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <start.4024>
                    }

                    if (loudness) {
    1a62:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <loudness.4022>
    1a66:	88 23       	and	r24, r24
    1a68:	69 f0       	breq	.+26     	; 0x1a84 <GenerateAudio+0xcc>
                        auVolume = loudness;
    1a6a:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1a6e:	90 91 58 38 	lds	r25, 0x3858	; 0x803858 <duration.4023>
    1a72:	99 23       	and	r25, r25
    1a74:	21 f0       	breq	.+8      	; 0x1a7e <GenerateAudio+0xc6>
    1a76:	91 50       	subi	r25, 0x01	; 1
    1a78:	90 93 58 38 	sts	0x3858, r25	; 0x803858 <duration.4023>
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <GenerateAudio+0xcc>
    1a7e:	86 95       	lsr	r24
    1a80:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <loudness.4022>
                    } 

                    if (loudness == 0) {
    1a84:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <loudness.4022>
    1a88:	81 11       	cpse	r24, r1
    1a8a:	19 c0       	rjmp	.+50     	; 0x1abe <GenerateAudio+0x106>
                        effect &= 0x1f;
    1a8c:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1a90:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1a94:	8f 71       	andi	r24, 0x1F	; 31
    1a96:	99 27       	eor	r25, r25
    1a98:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    1a9c:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
                        auRepAddr = &zero;
    1aa0:	89 e3       	ldi	r24, 0x39	; 57
    1aa2:	98 e3       	ldi	r25, 0x38	; 56
    1aa4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1aa8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1aac:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1ab0:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <auVolume>
                        start = 0;
    1aba:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <start.4024>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1abe:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1ac2:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1ac6:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1aca:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1ace:	80 7e       	andi	r24, 0xE0	; 224
    1ad0:	99 27       	eor	r25, r25
    1ad2:	80 36       	cpi	r24, 0x60	; 96
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	a9 f5       	brne	.+106    	; 0x1b42 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1ad8:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <auBuffer.4025+0x6>
                auRepAddr = &auBuffer[0];
    1adc:	80 e5       	ldi	r24, 0x50	; 80
    1ade:	98 e3       	ldi	r25, 0x38	; 56
    1ae0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ae4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1ae8:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1aea:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1aec:	c3 30       	cpi	r28, 0x03	; 3
    1aee:	39 f0       	breq	.+14     	; 0x1afe <GenerateAudio+0x146>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	65 e0       	ldi	r22, 0x05	; 5
    1af6:	80 e8       	ldi	r24, 0x80	; 128
    1af8:	05 dc       	rcall	.-2038   	; 0x1304 <floatAround>
    1afa:	f8 01       	movw	r30, r16
    1afc:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1afe:	cf 5f       	subi	r28, 0xFF	; 255
    1b00:	0f 5f       	subi	r16, 0xFF	; 255
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	c6 30       	cpi	r28, 0x06	; 6
    1b06:	91 f7       	brne	.-28     	; 0x1aec <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b08:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <buttonMark>
    1b0c:	88 23       	and	r24, r24
    1b0e:	c9 f0       	breq	.+50     	; 0x1b42 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	54 e0       	ldi	r21, 0x04	; 4
    1b14:	60 e8       	ldi	r22, 0x80	; 128
    1b16:	72 e0       	ldi	r23, 0x02	; 2
    1b18:	85 e0       	ldi	r24, 0x05	; 5
    1b1a:	c2 db       	rcall	.-2172   	; 0x12a0 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b1c:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <auVolume>
    1b20:	20 ea       	ldi	r18, 0xA0	; 160
    1b22:	40 e1       	ldi	r20, 0x10	; 16
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	ee db       	rcall	.-2084   	; 0x1304 <floatAround>
    1b28:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b2c:	20 e9       	ldi	r18, 0x90	; 144
    1b2e:	40 e7       	ldi	r20, 0x70	; 112
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <auBuffer.4025>
    1b36:	e6 db       	rcall	.-2100   	; 0x1304 <floatAround>
    1b38:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <auBuffer.4025>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b3c:	80 95       	com	r24
    1b3e:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <auBuffer.4025+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1b42:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1b46:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1b4a:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1b4e:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1b52:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1b56:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1b5a:	5f c0       	rjmp	.+190    	; 0x1c1a <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1b5c:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1b60:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1b64:	88 27       	eor	r24, r24
    1b66:	81 15       	cp	r24, r1
    1b68:	91 40       	sbci	r25, 0x01	; 1
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <GenerateAudio+0x1b6>
    1b6c:	56 c0       	rjmp	.+172    	; 0x1c1a <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1b6e:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1b72:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1b76:	80 7e       	andi	r24, 0xE0	; 224
    1b78:	99 27       	eor	r25, r25
    1b7a:	81 39       	cpi	r24, 0x91	; 145
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <GenerateAudio+0x1ca>
    1b80:	4c c0       	rjmp	.+152    	; 0x1c1a <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1b82:	60 91 3b 38 	lds	r22, 0x383B	; 0x80383b <effect>
    1b86:	70 91 3c 38 	lds	r23, 0x383C	; 0x80383c <effect+0x1>
    1b8a:	60 7e       	andi	r22, 0xE0	; 224
    1b8c:	77 27       	eor	r23, r23
    1b8e:	6f 5f       	subi	r22, 0xFF	; 255
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	86 e0       	ldi	r24, 0x06	; 6
    1b94:	66 0f       	add	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1b9a:	e1 f7       	brne	.-8      	; 0x1b94 <GenerateAudio+0x1dc>
    1b9c:	ab 01       	movw	r20, r22
    1b9e:	5d 5f       	subi	r21, 0xFD	; 253
    1ba0:	7e 5f       	subi	r23, 0xFE	; 254
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	7d db       	rcall	.-2310   	; 0x12a0 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1ba6:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <buttonMark>
    1baa:	88 23       	and	r24, r24
    1bac:	b1 f1       	breq	.+108    	; 0x1c1a <GenerateAudio+0x262>
                    if (start == 0) {
    1bae:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <start.4032>
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	0e c0       	rjmp	.+28     	; 0x1bd2 <GenerateAudio+0x21a>
                        duration = 3;
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <duration.4031>
                        auRepAddr = &auBuffer[0];
    1bbc:	8e e0       	ldi	r24, 0x0E	; 14
    1bbe:	98 e3       	ldi	r25, 0x38	; 56
    1bc0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1bc4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <auVolume>
                        start = 1;
    1bce:	c0 93 4f 38 	sts	0x384F, r28	; 0x80384f <start.4032>
                    }   if (duration == 0) {
    1bd2:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <duration.4031>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	1a c0       	rjmp	.+52     	; 0x1c0e <GenerateAudio+0x256>
                        effect &= 0x1f;
    1bda:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    1bde:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    1be2:	8f 71       	andi	r24, 0x1F	; 31
    1be4:	99 27       	eor	r25, r25
    1be6:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    1bea:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
                        auRepAddr = &zero;
    1bee:	89 e3       	ldi	r24, 0x39	; 57
    1bf0:	98 e3       	ldi	r25, 0x38	; 56
    1bf2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1bf6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1bfa:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1bfe:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <auVolume>
                        start = 0;
    1c08:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <start.4032>
    1c0c:	06 c0       	rjmp	.+12     	; 0x1c1a <GenerateAudio+0x262>
                    } else duration--;
    1c0e:	81 50       	subi	r24, 0x01	; 1
    1c10:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <duration.4031>
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1c16:	10 92 c0 3a 	sts	0x3AC0, r1	; 0x803ac0 <detHdPh>
    }
    return buttonMark;
    1c1a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <buttonMark>
}
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1c26:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <minuteMark>
    1c2a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1c2e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1c32:	89 2f       	mov	r24, r25
    1c34:	99 27       	eor	r25, r25
    1c36:	86 95       	lsr	r24
}
    1c38:	3c e3       	ldi	r19, 0x3C	; 60
    1c3a:	23 9f       	mul	r18, r19
    1c3c:	80 0d       	add	r24, r0
    1c3e:	91 1d       	adc	r25, r1
    1c40:	11 24       	eor	r1, r1
    1c42:	08 95       	ret

00001c44 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	8c 01       	movw	r16, r24
    1c4e:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c50:	ea df       	rcall	.-44     	; 0x1c26 <getClock>
    1c52:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1c54:	80 17       	cp	r24, r16
    1c56:	91 07       	cpc	r25, r17
    1c58:	08 f4       	brcc	.+2      	; 0x1c5c <idleTimeout+0x18>
        curClock += 256 * 60;
    1c5a:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1c5c:	c0 0f       	add	r28, r16
    1c5e:	d1 1f       	adc	r29, r17
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	c2 17       	cp	r28, r18
    1c64:	d3 07       	cpc	r29, r19
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <idleTimeout+0x26>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
}
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	08 95       	ret

00001c74 <SelfTest>:

uint8_t SelfTest(){
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <SelfTest+0x10>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <SelfTest+0x12>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    uint8_t tstVal[4] = {0x80, 0};
    1c8a:	19 82       	std	Y+1, r1	; 0x01
    1c8c:	1a 82       	std	Y+2, r1	; 0x02
    1c8e:	1b 82       	std	Y+3, r1	; 0x03
    1c90:	1c 82       	std	Y+4, r1	; 0x04
    1c92:	80 e8       	ldi	r24, 0x80	; 128
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    //All LEDs on 25%
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0x40;
    1c9a:	20 e4       	ldi	r18, 0x40	; 64
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e5 53       	subi	r30, 0x35	; 53
    1ca0:	f5 4c       	sbci	r31, 0xC5	; 197
    1ca2:	20 83       	st	Z, r18
    1ca4:	01 96       	adiw	r24, 0x01	; 1
}

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x80, 0};
    //All LEDs on 25%
    for (uint8_t x=0; x<40; ++x) {
    1ca6:	88 32       	cpi	r24, 0x28	; 40
    1ca8:	91 05       	cpc	r25, r1
    1caa:	c1 f7       	brne	.-16     	; 0x1c9c <SelfTest+0x28>
    1cac:	a8 ef       	ldi	r26, 0xF8	; 248
    1cae:	b1 ec       	ldi	r27, 0xC1	; 193
        iLED[x]=0x40;
    }

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	ed 91       	ld	r30, X+
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	e5 53       	subi	r30, 0x35	; 53
    1cb8:	f5 4c       	sbci	r31, 0xC5	; 197
    1cba:	80 83       	st	Z, r24
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0x40;
    }

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1cbc:	21 ec       	ldi	r18, 0xC1	; 193
    1cbe:	ae 3f       	cpi	r26, 0xFE	; 254
    1cc0:	b2 07       	cpc	r27, r18
    1cc2:	b9 f7       	brne	.-18     	; 0x1cb2 <SelfTest+0x3e>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Audio in/out
    SelectAuIn();
    1cc4:	91 da       	rcall	.-2782   	; 0x11e8 <SelectAuIn>
    auRepAddr = &tstVal[0];
    while ((auIn[0] < 0x7A)||(auIn[0] > 0x85)) ;
    1cc6:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <auIn>
    1cca:	8a 37       	cpi	r24, 0x7A	; 122
    1ccc:	e0 f3       	brcs	.-8      	; 0x1cc6 <SelfTest+0x52>
    1cce:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <auIn>
    1cd2:	86 38       	cpi	r24, 0x86	; 134
    1cd4:	c0 f7       	brcc	.-16     	; 0x1cc6 <SelfTest+0x52>
    iLED[HCKR[R][0]] = 0x00;
    1cd6:	e0 91 f8 c1 	lds	r30, 0xC1F8	; 0x80c1f8 <__bss_end+0x86dd>
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	e5 53       	subi	r30, 0x35	; 53
    1cde:	f5 4c       	sbci	r31, 0xC5	; 197
    1ce0:	10 82       	st	Z, r1
    iLED[HCKR[G][0]] = 0xff;
    1ce2:	e0 91 fe c1 	lds	r30, 0xC1FE	; 0x80c1fe <__bss_end+0x86e3>
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	e5 53       	subi	r30, 0x35	; 53
    1cea:	f5 4c       	sbci	r31, 0xC5	; 197
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	80 83       	st	Z, r24
    auRepAddr = &zero;
    1cf0:	89 e3       	ldi	r24, 0x39	; 57
    1cf2:	98 e3       	ldi	r25, 0x38	; 56
    1cf4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1cf8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1cfc:	80 91 be 3a 	lds	r24, 0x3ABE	; 0x803abe <adcPhot>
    1d00:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <adcPhot+0x1>
    while (tstVal[0] == (adcPhot&0xff)) ;
    1d04:	99 27       	eor	r25, r25
    1d06:	20 91 be 3a 	lds	r18, 0x3ABE	; 0x803abe <adcPhot>
    1d0a:	30 91 bf 3a 	lds	r19, 0x3ABF	; 0x803abf <adcPhot+0x1>
    1d0e:	33 27       	eor	r19, r19
    1d10:	28 17       	cp	r18, r24
    1d12:	39 07       	cpc	r19, r25
    1d14:	c1 f3       	breq	.-16     	; 0x1d06 <SelfTest+0x92>
    iLED[HCKR[R][1]] = 0x00;
    1d16:	e0 91 f9 c1 	lds	r30, 0xC1F9	; 0x80c1f9 <__bss_end+0x86de>
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	e5 53       	subi	r30, 0x35	; 53
    1d1e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d20:	10 82       	st	Z, r1
    iLED[HCKR[G][1]] = 0xff;
    1d22:	e0 91 ff c1 	lds	r30, 0xC1FF	; 0x80c1ff <__bss_end+0x86e4>
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	e5 53       	subi	r30, 0x35	; 53
    1d2a:	f5 4c       	sbci	r31, 0xC5	; 197
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	80 83       	st	Z, r24

    //Magnet
    tstVal[0] = adcHall&0xff;
    1d30:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <adcHall>
    1d34:	90 91 bd 3a 	lds	r25, 0x3ABD	; 0x803abd <adcHall+0x1>
    1d38:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcHall&0xff)) ;
    1d3a:	99 27       	eor	r25, r25
    1d3c:	20 91 bc 3a 	lds	r18, 0x3ABC	; 0x803abc <adcHall>
    1d40:	30 91 bd 3a 	lds	r19, 0x3ABD	; 0x803abd <adcHall+0x1>
    1d44:	33 27       	eor	r19, r19
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	c1 f3       	breq	.-16     	; 0x1d3c <SelfTest+0xc8>
    iLED[HCKR[R][2]] = 0x00;
    1d4c:	e0 91 fa c1 	lds	r30, 0xC1FA	; 0x80c1fa <__bss_end+0x86df>
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	e5 53       	subi	r30, 0x35	; 53
    1d54:	f5 4c       	sbci	r31, 0xC5	; 197
    1d56:	10 82       	st	Z, r1
    iLED[HCKR[G][2]] = 0xff;
    1d58:	e0 91 00 c2 	lds	r30, 0xC200	; 0x80c200 <__bss_end+0x86e5>
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	e5 53       	subi	r30, 0x35	; 53
    1d60:	f5 4c       	sbci	r31, 0xC5	; 197
    1d62:	8f ef       	ldi	r24, 0xFF	; 255

    //Temperature
    SelectTSens();
    1d64:	80 83       	st	Z, r24
    1d66:	31 da       	rcall	.-2974   	; 0x11ca <SelectTSens>
    tstVal[0] = adcTemp&0xff;
    1d68:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    1d6c:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1d70:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcTemp&0xff)) ;
    1d72:	99 27       	eor	r25, r25
    1d74:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    1d78:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1d7c:	33 27       	eor	r19, r19
    1d7e:	28 17       	cp	r18, r24
    1d80:	39 07       	cpc	r19, r25
    1d82:	c1 f3       	breq	.-16     	; 0x1d74 <SelfTest+0x100>
    iLED[HCKR[R][3]] = 0x00;
    1d84:	e0 91 fb c1 	lds	r30, 0xC1FB	; 0x80c1fb <__bss_end+0x86e0>
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	e5 53       	subi	r30, 0x35	; 53
    1d8c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d8e:	10 82       	st	Z, r1
    iLED[HCKR[G][3]] = 0xff;
    1d90:	e0 91 01 c2 	lds	r30, 0xC201	; 0x80c201 <__bss_end+0x86e6>
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	e5 53       	subi	r30, 0x35	; 53
    1d98:	f5 4c       	sbci	r31, 0xC5	; 197
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	80 83       	st	Z, r24

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d9e:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <adcBtns>
    1da2:	90 91 b9 3a 	lds	r25, 0x3AB9	; 0x803ab9 <adcBtns+0x1>
    1da6:	80 38       	cpi	r24, 0x80	; 128
    1da8:	9c 40       	sbci	r25, 0x0C	; 12
    1daa:	c8 f3       	brcs	.-14     	; 0x1d9e <SelfTest+0x12a>
    iLED[HCKR[R][4]] = 0x00;
    1dac:	e0 90 fc c1 	lds	r14, 0xC1FC	; 0x80c1fc <__bss_end+0x86e1>
    1db0:	8e 2d       	mov	r24, r14
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	fc 01       	movw	r30, r24
    1db6:	e5 53       	subi	r30, 0x35	; 53
    1db8:	f5 4c       	sbci	r31, 0xC5	; 197
    1dba:	7f 01       	movw	r14, r30
    1dbc:	10 82       	st	Z, r1
    iLED[HCKR[G][4]] = 0xff;
    1dbe:	00 91 02 c2 	lds	r16, 0xC202	; 0x80c202 <__bss_end+0x86e7>
    1dc2:	10 e0       	ldi	r17, 0x00	; 0
    1dc4:	05 53       	subi	r16, 0x35	; 53
    1dc6:	15 4c       	sbci	r17, 0xC5	; 197
    1dc8:	dd 24       	eor	r13, r13
    1dca:	da 94       	dec	r13
    1dcc:	f8 01       	movw	r30, r16
    1dce:	d0 82       	st	Z, r13
        0x3CCD              Level 6, open_acl=0
        0x3CCE              Level 6, action_acl=192
        0x3CCF              Level 6, action_mask=20
    */

    ExtEERead(0x3CCC, 4, 0, &tstVal[0]);
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2f 5f       	subi	r18, 0xFF	; 255
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	64 e0       	ldi	r22, 0x04	; 4
    1dda:	8c ec       	ldi	r24, 0xCC	; 204
    1ddc:	9c e3       	ldi	r25, 0x3C	; 60
    1dde:	a1 d9       	rcall	.-3262   	; 0x1122 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	8f 33       	cpi	r24, 0x3F	; 63
    1de4:	49 f4       	brne	.+18     	; 0x1df8 <SelfTest+0x184>
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	81 11       	cpse	r24, r1
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <SelfTest+0x184>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	80 3c       	cpi	r24, 0xC0	; 192
    1df0:	19 f4       	brne	.+6      	; 0x1df8 <SelfTest+0x184>
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	84 31       	cpi	r24, 0x14	; 20
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <SelfTest+0x186>
    1df8:	ff cf       	rjmp	.-2      	; 0x1df8 <SelfTest+0x184>
        while(1);
    } else {
        iLED[HCKR[R][4]] = 0x00;
    1dfa:	f7 01       	movw	r30, r14
    1dfc:	10 82       	st	Z, r1
        iLED[HCKR[G][4]] = 0xff;
    1dfe:	f8 01       	movw	r30, r16
    1e00:	d0 82       	st	Z, r13
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1e06:	fc 01       	movw	r30, r24
    1e08:	e5 53       	subi	r30, 0x35	; 53
    1e0a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e0c:	10 82       	st	Z, r1
    1e0e:	01 96       	adiw	r24, 0x01	; 1
        iLED[HCKR[R][4]] = 0x00;
        iLED[HCKR[G][4]] = 0xff;
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1e10:	88 32       	cpi	r24, 0x28	; 40
    1e12:	91 05       	cpc	r25, r1
    1e14:	c1 f7       	brne	.-16     	; 0x1e06 <SelfTest+0x192>
        iLED[x]=0;
    }
    return 0;
}
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	24 96       	adiw	r28, 0x04	; 4
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	08 95       	ret

00001e2e <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	ea ee       	ldi	r30, 0xEA	; 234
    1e34:	f1 ec       	ldi	r31, 0xC1	; 193
    1e36:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1e38:	a5 81       	ldd	r26, Z+5	; 0x05
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	a5 53       	subi	r26, 0x35	; 53
    1e3e:	b5 4c       	sbci	r27, 0xC5	; 197
    1e40:	1c 92       	st	X, r1
    1e42:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1e44:	a8 81       	ld	r26, Y
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	a5 53       	subi	r26, 0x35	; 53
    1e4a:	b5 4c       	sbci	r27, 0xC5	; 197
    1e4c:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1e4e:	91 ec       	ldi	r25, 0xC1	; 193
    1e50:	ef 3e       	cpi	r30, 0xEF	; 239
    1e52:	f9 07       	cpc	r31, r25
    1e54:	81 f7       	brne	.-32     	; 0x1e36 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1e56:	83 30       	cpi	r24, 0x03	; 3
    1e58:	d9 f4       	brne	.+54     	; 0x1e90 <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1e5a:	e0 91 ef c1 	lds	r30, 0xC1EF	; 0x80c1ef <__bss_end+0x86d4>
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e64:	e5 53       	subi	r30, 0x35	; 53
    1e66:	f5 4c       	sbci	r31, 0xC5	; 197
    1e68:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1e6a:	e0 91 f0 c1 	lds	r30, 0xC1F0	; 0x80c1f0 <__bss_end+0x86d5>
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e74:	e5 53       	subi	r30, 0x35	; 53
    1e76:	f5 4c       	sbci	r31, 0xC5	; 197
    1e78:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1e7a:	e0 91 f1 c1 	lds	r30, 0xC1F1	; 0x80c1f1 <__bss_end+0x86d6>
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e84:	e5 53       	subi	r30, 0x35	; 53
    1e86:	f5 4c       	sbci	r31, 0xC5	; 197
    1e88:	80 83       	st	Z, r24
        effect = 0x013f;
    1e8a:	8f e3       	ldi	r24, 0x3F	; 63
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	46 c0       	rjmp	.+140    	; 0x1f1c <simonLed+0xee>
    } else if (val == 1) {  //
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	99 f4       	brne	.+38     	; 0x1eba <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1e94:	e0 91 f2 c1 	lds	r30, 0xC1F2	; 0x80c1f2 <__bss_end+0x86d7>
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e9e:	e5 53       	subi	r30, 0x35	; 53
    1ea0:	f5 4c       	sbci	r31, 0xC5	; 197
    1ea2:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1ea4:	e0 91 f3 c1 	lds	r30, 0xC1F3	; 0x80c1f3 <__bss_end+0x86d8>
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1eae:	e5 53       	subi	r30, 0x35	; 53
    1eb0:	f5 4c       	sbci	r31, 0xC5	; 197
    1eb2:	80 83       	st	Z, r24
        effect = 0x015f;
    1eb4:	8f e5       	ldi	r24, 0x5F	; 95
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	31 c0       	rjmp	.+98     	; 0x1f1c <simonLed+0xee>
    } else if (val == 4) {  // III
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	d9 f4       	brne	.+54     	; 0x1ef4 <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1ebe:	e0 91 ea c1 	lds	r30, 0xC1EA	; 0x80c1ea <__bss_end+0x86cf>
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ec8:	e5 53       	subi	r30, 0x35	; 53
    1eca:	f5 4c       	sbci	r31, 0xC5	; 197
    1ecc:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1ece:	e0 91 eb c1 	lds	r30, 0xC1EB	; 0x80c1eb <__bss_end+0x86d0>
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ed8:	e5 53       	subi	r30, 0x35	; 53
    1eda:	f5 4c       	sbci	r31, 0xC5	; 197
    1edc:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1ede:	e0 91 ec c1 	lds	r30, 0xC1EC	; 0x80c1ec <__bss_end+0x86d1>
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ee8:	e5 53       	subi	r30, 0x35	; 53
    1eea:	f5 4c       	sbci	r31, 0xC5	; 197
    1eec:	80 83       	st	Z, r24
        effect = 0x017f;
    1eee:	8f e7       	ldi	r24, 0x7F	; 127
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <simonLed+0xee>
    } else if (val == 2) {  // I
    1ef4:	82 30       	cpi	r24, 0x02	; 2
    1ef6:	b1 f4       	brne	.+44     	; 0x1f24 <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1ef8:	e0 91 ed c1 	lds	r30, 0xC1ED	; 0x80c1ed <__bss_end+0x86d2>
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f02:	e5 53       	subi	r30, 0x35	; 53
    1f04:	f5 4c       	sbci	r31, 0xC5	; 197
    1f06:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1f08:	e0 91 ee c1 	lds	r30, 0xC1EE	; 0x80c1ee <__bss_end+0x86d3>
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f12:	e5 53       	subi	r30, 0x35	; 53
    1f14:	f5 4c       	sbci	r31, 0xC5	; 197
    1f16:	80 83       	st	Z, r24
        effect = 0x019f;
    1f18:	8f e9       	ldi	r24, 0x9F	; 159
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    1f20:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
    }
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	08 95       	ret

00001f2a <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1f2e:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
    1f32:	8d 7f       	andi	r24, 0xFD	; 253
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <BastetDictates+0xe>
    1f36:	9b c1       	rjmp	.+822    	; 0x226e <BastetDictates+0x344>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1f38:	8a e7       	ldi	r24, 0x7A	; 122
    1f3a:	c1 da       	rcall	.-2686   	; 0x14be <CheckState>
    1f3c:	88 23       	and	r24, r24
    1f3e:	41 f0       	breq	.+16     	; 0x1f50 <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1f40:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <BastetDictates+0x20>
    1f48:	92 c1       	rjmp	.+804    	; 0x226e <BastetDictates+0x344>
            gameNow = TEXT;
    1f4a:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
    1f4e:	8f c1       	rjmp	.+798    	; 0x226e <BastetDictates+0x344>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1f50:	8b e7       	ldi	r24, 0x7B	; 123
    1f52:	b5 da       	rcall	.-2710   	; 0x14be <CheckState>
    1f54:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1f58:	88 23       	and	r24, r24
    1f5a:	29 f0       	breq	.+10     	; 0x1f66 <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1f5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <BastetDictates+0x3c>
            gameNow = BASTET;
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1f66:	e0 91 e6 c1 	lds	r30, 0xC1E6	; 0x80c1e6 <__bss_end+0x86cb>
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <BastetDictates+0x4c>
    1f70:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <BastetDictates+0x4e>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	e5 53       	subi	r30, 0x35	; 53
    1f7a:	f5 4c       	sbci	r31, 0xC5	; 197
    1f7c:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1f7e:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonGameState>
    1f82:	81 11       	cpse	r24, r1
    1f84:	20 c0       	rjmp	.+64     	; 0x1fc6 <BastetDictates+0x9c>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    1f86:	20 91 be 3a 	lds	r18, 0x3ABE	; 0x803abe <adcPhot>
    1f8a:	30 91 bf 3a 	lds	r19, 0x3ABF	; 0x803abf <adcPhot+0x1>
    1f8e:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    1f92:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1f96:	82 0f       	add	r24, r18
    1f98:	8f 73       	andi	r24, 0x3F	; 63
    1f9a:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1f9e:	c0 e0       	ldi	r28, 0x00	; 0
    1fa0:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonPos>
    1fa4:	c8 17       	cp	r28, r24
    1fa6:	18 f4       	brcc	.+6      	; 0x1fae <BastetDictates+0x84>
    1fa8:	5c d9       	rcall	.-3400   	; 0x1262 <lfsr>
    1faa:	cf 5f       	subi	r28, 0xFF	; 255
    1fac:	f9 cf       	rjmp	.-14     	; 0x1fa0 <BastetDictates+0x76>
    1fae:	c3 e6       	ldi	r28, 0x63	; 99

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1fb0:	d8 e3       	ldi	r29, 0x38	; 56
    1fb2:	57 d9       	rcall	.-3410   	; 0x1262 <lfsr>
    1fb4:	83 70       	andi	r24, 0x03	; 3
    1fb6:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1fb8:	88 e3       	ldi	r24, 0x38	; 56
    1fba:	cf 36       	cpi	r28, 0x6F	; 111
    1fbc:	d8 07       	cpc	r29, r24
    1fbe:	c9 f7       	brne	.-14     	; 0x1fb2 <BastetDictates+0x88>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1fc6:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonGameState>
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	71 f4       	brne	.+28     	; 0x1fea <BastetDictates+0xc0>
    1fce:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
    1fd2:	82 30       	cpi	r24, 0x02	; 2
    1fd4:	51 f4       	brne	.+20     	; 0x1fea <BastetDictates+0xc0>
        simonGameState = BASTET_GAME_INTRO;
    1fd6:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
        simonPos = 0;
    1fda:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonPos>
        simonInputPos = 0;
    1fde:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonInputPos>
        simonTimer = 0;
    1fe2:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
        simonCounter = 0;
    1fe6:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1fea:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonGameState>
    1fee:	82 30       	cpi	r24, 0x02	; 2
    1ff0:	79 f5       	brne	.+94     	; 0x2050 <BastetDictates+0x126>
        if (simonTimer > 5) {   // ±.33 seconds
    1ff2:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonTimer>
    1ff6:	86 30       	cpi	r24, 0x06	; 6
    1ff8:	38 f0       	brcs	.+14     	; 0x2008 <BastetDictates+0xde>
            simonCounter++;
    1ffa:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonCounter>
    1ffe:	8f 5f       	subi	r24, 0xFF	; 255
    2000:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonCounter>
            simonTimer = 0;
    2004:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
        }
        if (simonCounter > 5) {
    2008:	e0 91 5e 38 	lds	r30, 0x385E	; 0x80385e <simonCounter>
    200c:	e6 30       	cpi	r30, 0x06	; 6
    200e:	a8 f0       	brcs	.+42     	; 0x203a <BastetDictates+0x110>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    2010:	83 e0       	ldi	r24, 0x03	; 3
    2012:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
            simonTimer = 0;
    2016:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
            simonCounter = 0;
    201a:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
    201e:	ae ef       	ldi	r26, 0xFE	; 254
    2020:	b1 ec       	ldi	r27, 0xC1	; 193
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	92 ec       	ldi	r25, 0xC2	; 194
            for (uint8_t n=0; n<6; n++){
                iLED[HCKR[G][n]] = 1;
    2026:	21 e0       	ldi	r18, 0x01	; 1
    2028:	ed 91       	ld	r30, X+
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	e5 53       	subi	r30, 0x35	; 53
    202e:	f5 4c       	sbci	r31, 0xC5	; 197
    2030:	20 83       	st	Z, r18
        }
        if (simonCounter > 5) {
            simonGameState = BASTET_GAME_SHOW_PATTERN;
            simonTimer = 0;
            simonCounter = 0;
            for (uint8_t n=0; n<6; n++){
    2032:	8a 17       	cp	r24, r26
    2034:	9b 07       	cpc	r25, r27
    2036:	c1 f7       	brne	.-16     	; 0x2028 <BastetDictates+0xfe>
    2038:	1a c1       	rjmp	.+564    	; 0x226e <BastetDictates+0x344>
                iLED[HCKR[G][n]] = 1;
            }
            return 0;
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e8 50       	subi	r30, 0x08	; 8
    203e:	fe 43       	sbci	r31, 0x3E	; 62
    2040:	e0 81       	ld	r30, Z
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2048:	e5 53       	subi	r30, 0x35	; 53
    204a:	f5 4c       	sbci	r31, 0xC5	; 197
    204c:	80 83       	st	Z, r24
    204e:	21 c0       	rjmp	.+66     	; 0x2092 <BastetDictates+0x168>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    2050:	83 30       	cpi	r24, 0x03	; 3
    2052:	f9 f4       	brne	.+62     	; 0x2092 <BastetDictates+0x168>
        if (simonTimer > 7) {   // ±.5 second
    2054:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonTimer>
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	38 f0       	brcs	.+14     	; 0x206a <BastetDictates+0x140>
            simonCounter++;
    205c:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonCounter>
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonCounter>
            simonTimer = 0;
    2066:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
        }
        if (simonCounter > simonPos) {
    206a:	e0 91 5e 38 	lds	r30, 0x385E	; 0x80385e <simonCounter>
    206e:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonPos>
    2072:	8e 17       	cp	r24, r30
    2074:	40 f4       	brcc	.+16     	; 0x2086 <BastetDictates+0x15c>
            simonInputPos = 0;
    2076:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    207a:	85 e0       	ldi	r24, 0x05	; 5
    207c:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
            simonLed(0);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	d5 de       	rcall	.-598    	; 0x1e2e <simonLed>
    2084:	8e c0       	rjmp	.+284    	; 0x21a2 <BastetDictates+0x278>
            simonTimer = 0;
            return 0;
        }
        simonLed(simonState[simonCounter]+1);
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	ed 59       	subi	r30, 0x9D	; 157
    208a:	f7 4c       	sbci	r31, 0xC7	; 199
    208c:	80 81       	ld	r24, Z
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	ce de       	rcall	.-612    	; 0x1e2e <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    2092:	c0 91 5d 38 	lds	r28, 0x385D	; 0x80385d <simonGameState>
    2096:	c5 30       	cpi	r28, 0x05	; 5
    2098:	09 f0       	breq	.+2      	; 0x209c <BastetDictates+0x172>
    209a:	86 c0       	rjmp	.+268    	; 0x21a8 <BastetDictates+0x27e>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    209c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    20a0:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    20a4:	98 17       	cp	r25, r24
    20a6:	09 f4       	brne	.+2      	; 0x20aa <BastetDictates+0x180>
    20a8:	71 c0       	rjmp	.+226    	; 0x218c <BastetDictates+0x262>
            if (simonWait == 0 && buttonState < 4) {
    20aa:	90 91 5f 38 	lds	r25, 0x385F	; 0x80385f <simonWait>
    20ae:	91 11       	cpse	r25, r1
    20b0:	6f c0       	rjmp	.+222    	; 0x2190 <BastetDictates+0x266>
    20b2:	84 30       	cpi	r24, 0x04	; 4
    20b4:	08 f0       	brcs	.+2      	; 0x20b8 <BastetDictates+0x18e>
    20b6:	6c c0       	rjmp	.+216    	; 0x2190 <BastetDictates+0x266>
                simonWait = 1;
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	90 93 5f 38 	sts	0x385F, r25	; 0x80385f <simonWait>
                simonTimer = 0;
    20be:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
                simonLed(buttonState+1);
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	b4 de       	rcall	.-664    	; 0x1e2e <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    20c6:	84 e0       	ldi	r24, 0x04	; 4
    20c8:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    20cc:	c0 93 2d 38 	sts	0x382D, r28	; 0x80382d <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    20d0:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonInputPos>
    20d4:	e8 2f       	mov	r30, r24
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	ed 59       	subi	r30, 0x9D	; 157
    20da:	f7 4c       	sbci	r31, 0xC7	; 199
    20dc:	20 81       	ld	r18, Z
    20de:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    20e2:	29 13       	cpse	r18, r25
    20e4:	1d c0       	rjmp	.+58     	; 0x2120 <BastetDictates+0x1f6>
                    simonInputPos++;
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <simonInputPos>
                    if (simonInputPos > simonPos) {
    20ec:	e0 91 62 38 	lds	r30, 0x3862	; 0x803862 <simonPos>
    20f0:	e8 17       	cp	r30, r24
    20f2:	a0 f5       	brcc	.+104    	; 0x215c <BastetDictates+0x232>
                        simonPos++;
    20f4:	ef 5f       	subi	r30, 0xFF	; 255
    20f6:	e0 93 62 38 	sts	0x3862, r30	; 0x803862 <simonPos>
                        simonTimer = 0;
    20fa:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
                        simonCounter = 0;
    20fe:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    2102:	e1 30       	cpi	r30, 0x01	; 1
    2104:	59 f0       	breq	.+22     	; 0x211c <BastetDictates+0x1f2>
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    2106:	e6 95       	lsr	r30
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	e8 50       	subi	r30, 0x08	; 8
    210c:	fe 43       	sbci	r31, 0x3E	; 62
    210e:	e5 81       	ldd	r30, Z+5	; 0x05
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2116:	e5 53       	subi	r30, 0x35	; 53
    2118:	f5 4c       	sbci	r31, 0xC5	; 197
    211a:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    211c:	83 e0       	ldi	r24, 0x03	; 3
    211e:	1c c0       	rjmp	.+56     	; 0x2158 <BastetDictates+0x22e>
                    }
                } else {
                    effect = 32;
    2120:	80 e2       	ldi	r24, 0x20	; 32
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    2128:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
    212c:	a8 ef       	ldi	r26, 0xF8	; 248
    212e:	b1 ec       	ldi	r27, 0xC1	; 193
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    2130:	ed 91       	ld	r30, X+
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2138:	e5 53       	subi	r30, 0x35	; 53
    213a:	f5 4c       	sbci	r31, 0xC5	; 197
    213c:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    213e:	91 ec       	ldi	r25, 0xC1	; 193
    2140:	ae 3f       	cpi	r26, 0xFE	; 254
    2142:	b9 07       	cpc	r27, r25
    2144:	a9 f7       	brne	.-22     	; 0x2130 <BastetDictates+0x206>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    2146:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonInputPos>
                    simonPos = 0;
    214a:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonPos>
                    simonTimer = 0;
    214e:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
                    simonCounter = 0;
    2152:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    2156:	86 e0       	ldi	r24, 0x06	; 6
    2158:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    215c:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonInputPos>
    2160:	8c 30       	cpi	r24, 0x0C	; 12
    2162:	20 f4       	brcc	.+8      	; 0x216c <BastetDictates+0x242>
    2164:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonPos>
    2168:	8c 30       	cpi	r24, 0x0C	; 12
    216a:	90 f0       	brcs	.+36     	; 0x2190 <BastetDictates+0x266>
                    effect = 64|2;
    216c:	82 e4       	ldi	r24, 0x42	; 66
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    2174:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    2178:	8a e7       	ldi	r24, 0x7A	; 122
    217a:	97 d9       	rcall	.-3282   	; 0x14aa <UpdateState>
                    simonTimer = 0;
    217c:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
                    simonCounter = 0;
    2180:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    2184:	87 e0       	ldi	r24, 0x07	; 7
    2186:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <BastetDictates+0x266>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    218c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonWait>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    2190:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonTimer>
    2194:	88 3c       	cpi	r24, 0xC8	; 200
    2196:	41 f4       	brne	.+16     	; 0x21a8 <BastetDictates+0x27e>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    2198:	83 e0       	ldi	r24, 0x03	; 3
    219a:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
            simonCounter = 0;
    219e:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
            simonTimer = 0;
    21a2:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
            return 0;
    21a6:	63 c0       	rjmp	.+198    	; 0x226e <BastetDictates+0x344>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    21a8:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonGameState>
    21ac:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    21ae:	81 f4       	brne	.+32     	; 0x21d0 <BastetDictates+0x2a6>
    21b0:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonTimer>
    21b4:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    21b6:	60 f0       	brcs	.+24     	; 0x21d0 <BastetDictates+0x2a6>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	39 de       	rcall	.-910    	; 0x1e2e <simonLed>
            simonWait = 0;
    21bc:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonWait>
            simonTimer = 0;
    21c0:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
            simonCounter = 0;
    21c4:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
            simonGameState = simonNextGameState;
    21c8:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <simonNextGameState>
    21cc:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    21d0:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonGameState>
    21d4:	86 30       	cpi	r24, 0x06	; 6
    21d6:	49 f5       	brne	.+82     	; 0x222a <BastetDictates+0x300>
        if (simonTimer > 5) {   // ±.33 second
    21d8:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonTimer>
    21dc:	86 30       	cpi	r24, 0x06	; 6
    21de:	38 f0       	brcs	.+14     	; 0x21ee <BastetDictates+0x2c4>
            simonCounter++;
    21e0:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonCounter>
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonCounter>
            simonTimer = 0;
    21ea:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
        }
        if (simonCounter > 5) {
    21ee:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonCounter>
    21f2:	86 30       	cpi	r24, 0x06	; 6
    21f4:	40 f0       	brcs	.+16     	; 0x2206 <BastetDictates+0x2dc>
            simonTimer = 0;
    21f6:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonTimer>
            simonCounter = 0;
    21fa:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    21fe:	87 e0       	ldi	r24, 0x07	; 7
    2200:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonGameState>
            return 0;
    2204:	34 c0       	rjmp	.+104    	; 0x226e <BastetDictates+0x344>
        }
        iLED[HCKR[R][5-simonCounter]] = 1;
    2206:	e5 e0       	ldi	r30, 0x05	; 5
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	e8 1b       	sub	r30, r24
    220c:	f1 09       	sbc	r31, r1
    220e:	e8 50       	subi	r30, 0x08	; 8
    2210:	fe 43       	sbci	r31, 0x3E	; 62
    2212:	a0 81       	ld	r26, Z
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	a5 53       	subi	r26, 0x35	; 53
    2218:	b5 4c       	sbci	r27, 0xC5	; 197
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	8c 93       	st	X, r24
        iLED[HCKR[G][5-simonCounter]] = 1;
    221e:	e6 81       	ldd	r30, Z+6	; 0x06
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	e5 53       	subi	r30, 0x35	; 53
    2224:	f5 4c       	sbci	r31, 0xC5	; 197
    2226:	80 83       	st	Z, r24
    2228:	1d c0       	rjmp	.+58     	; 0x2264 <BastetDictates+0x33a>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    222a:	87 30       	cpi	r24, 0x07	; 7
    222c:	d9 f4       	brne	.+54     	; 0x2264 <BastetDictates+0x33a>
        simonInputPos = 0;
    222e:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonInputPos>
        simonPos = 0;
    2232:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    2236:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonGameState>
        gameNow = TEXT;
    223a:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <gameNow>
    223e:	ea ee       	ldi	r30, 0xEA	; 234
    2240:	f1 ec       	ldi	r31, 0xC1	; 193
        for (uint8_t n=0; n<5; n++){
            iLED[WING[L][n]] = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	ef 01       	movw	r28, r30
    2246:	a5 81       	ldd	r26, Z+5	; 0x05
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	a5 53       	subi	r26, 0x35	; 53
    224c:	b5 4c       	sbci	r27, 0xC5	; 197
    224e:	8c 93       	st	X, r24
    2250:	31 96       	adiw	r30, 0x01	; 1
            iLED[WING[R][n]] = 1;
    2252:	a8 81       	ld	r26, Y
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	a5 53       	subi	r26, 0x35	; 53
    2258:	b5 4c       	sbci	r27, 0xC5	; 197
    225a:	8c 93       	st	X, r24
    if (BASTET_GAME_OVER == simonGameState) {
        simonInputPos = 0;
        simonPos = 0;
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
        gameNow = TEXT;
        for (uint8_t n=0; n<5; n++){
    225c:	91 ec       	ldi	r25, 0xC1	; 193
    225e:	ef 3e       	cpi	r30, 0xEF	; 239
    2260:	f9 07       	cpc	r31, r25
    2262:	81 f7       	brne	.-32     	; 0x2244 <BastetDictates+0x31a>
            iLED[WING[L][n]] = 1;
            iLED[WING[R][n]] = 1;
        }
    }

    ++simonTimer;
    2264:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonTimer>
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <simonTimer>
    return 0;
}
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	62 97       	sbiw	r28, 0x12	; 18
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	8a 8b       	std	Y+18, r24	; 0x12
    2288:	80 e1       	ldi	r24, 0x10	; 16
    228a:	ee eb       	ldi	r30, 0xBE	; 190
    228c:	f1 ec       	ldi	r31, 0xC1	; 193
    228e:	de 01       	movw	r26, r28
    2290:	11 96       	adiw	r26, 0x01	; 1
    2292:	01 90       	ld	r0, Z+
    2294:	0d 92       	st	X+, r0
    2296:	8a 95       	dec	r24
    2298:	e1 f7       	brne	.-8      	; 0x2292 <Cheat+0x1c>
    229a:	fe 01       	movw	r30, r28
    229c:	31 96       	adiw	r30, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	8f ef       	ldi	r24, 0xFF	; 255
    22a2:	21 91       	ld	r18, Z+
    22a4:	31 91       	ld	r19, Z+
    22a6:	26 17       	cp	r18, r22
    22a8:	37 07       	cpc	r19, r23
    22aa:	09 f4       	brne	.+2      	; 0x22ae <Cheat+0x38>
    22ac:	89 2f       	mov	r24, r25
    22ae:	9f 5f       	subi	r25, 0xFF	; 255
    22b0:	98 30       	cpi	r25, 0x08	; 8
    22b2:	b9 f7       	brne	.-18     	; 0x22a2 <Cheat+0x2c>
    22b4:	88 30       	cpi	r24, 0x08	; 8
    22b6:	10 f0       	brcs	.+4      	; 0x22bc <Cheat+0x46>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <Cheat+0x6e>
    22bc:	18 e1       	ldi	r17, 0x18	; 24
    22be:	18 0f       	add	r17, r24
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	be 01       	movw	r22, r28
    22c4:	6f 5e       	subi	r22, 0xEF	; 239
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	81 2f       	mov	r24, r17
    22ca:	0e 94 3f 08 	call	0x107e	; 0x107e <EERead>
    22ce:	89 89       	ldd	r24, Y+17	; 0x11
    22d0:	8f 3f       	cpi	r24, 0xFF	; 255
    22d2:	91 f7       	brne	.-28     	; 0x22b8 <Cheat+0x42>
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	be 01       	movw	r22, r28
    22d8:	6e 5e       	subi	r22, 0xEE	; 238
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	81 2f       	mov	r24, r17
    22de:	0e 94 4f 08 	call	0x109e	; 0x109e <EEWrite>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	62 96       	adiw	r28, 0x12	; 18
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	08 95       	ret

000022f2 <UnflipData>:
    22f2:	26 2f       	mov	r18, r22
    22f4:	fb 01       	movw	r30, r22
    22f6:	35 e5       	ldi	r19, 0x55	; 85
    22f8:	9e 2f       	mov	r25, r30
    22fa:	92 1b       	sub	r25, r18
    22fc:	98 17       	cp	r25, r24
    22fe:	28 f4       	brcc	.+10     	; 0x230a <UnflipData+0x18>
    2300:	90 81       	ld	r25, Z
    2302:	92 95       	swap	r25
    2304:	93 27       	eor	r25, r19
    2306:	91 93       	st	Z+, r25
    2308:	f7 cf       	rjmp	.-18     	; 0x22f8 <UnflipData+0x6>
    230a:	08 95       	ret

0000230c <ClearTxAfter>:
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	88 30       	cpi	r24, 0x08	; 8
    2310:	30 f4       	brcc	.+12     	; 0x231e <ClearTxAfter+0x12>
    2312:	e8 2f       	mov	r30, r24
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	e7 5b       	subi	r30, 0xB7	; 183
    2318:	f5 4c       	sbci	r31, 0xC5	; 197
    231a:	10 82       	st	Z, r1
    231c:	f7 cf       	rjmp	.-18     	; 0x230c <ClearTxAfter>
    231e:	08 95       	ret

00002320 <StartsWith>:
    2320:	ac 01       	movw	r20, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	e9 2f       	mov	r30, r25
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	da 01       	movw	r26, r20
    232a:	ae 0f       	add	r26, r30
    232c:	bf 1f       	adc	r27, r31
    232e:	3c 91       	ld	r19, X
    2330:	e6 0f       	add	r30, r22
    2332:	f7 1f       	adc	r31, r23
    2334:	31 11       	cpse	r19, r1
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <StartsWith+0x22>
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 81       	ld	r25, Z
    233c:	99 23       	and	r25, r25
    233e:	49 f0       	breq	.+18     	; 0x2352 <StartsWith+0x32>
    2340:	07 c0       	rjmp	.+14     	; 0x2350 <StartsWith+0x30>
    2342:	20 81       	ld	r18, Z
    2344:	22 23       	and	r18, r18
    2346:	c1 f3       	breq	.-16     	; 0x2338 <StartsWith+0x18>
    2348:	32 13       	cpse	r19, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <StartsWith+0x30>
    234c:	9f 5f       	subi	r25, 0xFF	; 255
    234e:	ea cf       	rjmp	.-44     	; 0x2324 <StartsWith+0x4>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	08 95       	ret

00002354 <PrepareSending>:
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	fc 01       	movw	r30, r24
    235a:	61 15       	cp	r22, r1
    235c:	71 05       	cpc	r23, r1
    235e:	59 f1       	breq	.+86     	; 0x23b6 <PrepareSending+0x62>
    2360:	a1 e5       	ldi	r26, 0x51	; 81
    2362:	ba e3       	ldi	r27, 0x3A	; 58
    2364:	c9 e4       	ldi	r28, 0x49	; 73
    2366:	da e3       	ldi	r29, 0x3A	; 58
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	9f ef       	ldi	r25, 0xFF	; 255
    236c:	6f 3f       	cpi	r22, 0xFF	; 255
    236e:	71 05       	cpc	r23, r1
    2370:	69 f0       	breq	.+26     	; 0x238c <PrepareSending+0x38>
    2372:	60 f0       	brcs	.+24     	; 0x238c <PrepareSending+0x38>
    2374:	ed 93       	st	X+, r30
    2376:	fd 93       	st	X+, r31
    2378:	99 93       	st	Y+, r25
    237a:	e1 50       	subi	r30, 0x01	; 1
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	6f 5f       	subi	r22, 0xFF	; 255
    2380:	71 09       	sbc	r23, r1
    2382:	8f 5f       	subi	r24, 0xFF	; 255
    2384:	87 30       	cpi	r24, 0x07	; 7
    2386:	91 f7       	brne	.-28     	; 0x236c <PrepareSending+0x18>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	1e c0       	rjmp	.+60     	; 0x23c8 <PrepareSending+0x74>
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	d9 01       	movw	r26, r18
    2392:	aa 0f       	add	r26, r26
    2394:	bb 1f       	adc	r27, r27
    2396:	af 5a       	subi	r26, 0xAF	; 175
    2398:	b5 4c       	sbci	r27, 0xC5	; 197
    239a:	ed 93       	st	X+, r30
    239c:	fc 93       	st	X, r31
    239e:	6f 3f       	cpi	r22, 0xFF	; 255
    23a0:	71 05       	cpc	r23, r1
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <PrepareSending+0x54>
    23a4:	6e ef       	ldi	r22, 0xFE	; 254
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	f9 01       	movw	r30, r18
    23aa:	e7 5b       	subi	r30, 0xB7	; 183
    23ac:	f5 4c       	sbci	r31, 0xC5	; 197
    23ae:	60 83       	st	Z, r22
    23b0:	40 93 47 3a 	sts	0x3A47, r20	; 0x803a47 <txTypeNow>
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <PrepareSending+0x6c>
    23b6:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrList>
    23ba:	10 92 52 3a 	sts	0x3A52, r1	; 0x803a52 <txAddrList+0x1>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	a5 df       	rcall	.-182    	; 0x230c <ClearTxAfter>
    23c2:	10 92 48 3a 	sts	0x3A48, r1	; 0x803a48 <txAddrNow>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	08 95       	ret

000023ce <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	f9 01       	movw	r30, r18
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	e4 5e       	subi	r30, 0xE4	; 228
    23de:	f6 4c       	sbci	r31, 0xC6	; 198
    23e0:	a9 e5       	ldi	r26, 0x59	; 89
    23e2:	ba e7       	ldi	r27, 0x7A	; 122
    23e4:	a0 83       	st	Z, r26
    23e6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23e8:	f9 01       	movw	r30, r18
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	e4 5a       	subi	r30, 0xA4	; 164
    23f0:	f6 4c       	sbci	r31, 0xC6	; 198
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	70 e0       	ldi	r23, 0x00	; 0
    23f6:	60 83       	st	Z, r22
    23f8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	f9 01       	movw	r30, r18
    2400:	e4 56       	subi	r30, 0x64	; 100
    2402:	f6 4c       	sbci	r31, 0xC6	; 198
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	40 83       	st	Z, r20
    240a:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    240c:	21 e0       	ldi	r18, 0x01	; 1
    240e:	28 0f       	add	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	f9 01       	movw	r30, r18
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	e4 5e       	subi	r30, 0xE4	; 228
    241a:	f6 4c       	sbci	r31, 0xC6	; 198
    241c:	c2 e6       	ldi	r28, 0x62	; 98
    241e:	da e7       	ldi	r29, 0x7A	; 122
    2420:	c0 83       	st	Z, r28
    2422:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2424:	f9 01       	movw	r30, r18
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	e4 5a       	subi	r30, 0xA4	; 164
    242c:	f6 4c       	sbci	r31, 0xC6	; 198
    242e:	cc e0       	ldi	r28, 0x0C	; 12
    2430:	d0 e0       	ldi	r29, 0x00	; 0
    2432:	c0 83       	st	Z, r28
    2434:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	f9 01       	movw	r30, r18
    243c:	e4 56       	subi	r30, 0x64	; 100
    243e:	f6 4c       	sbci	r31, 0xC6	; 198
    2440:	40 83       	st	Z, r20
    2442:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2444:	e2 e0       	ldi	r30, 0x02	; 2
    2446:	e8 0f       	add	r30, r24
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	e4 5e       	subi	r30, 0xE4	; 228
    2450:	f6 4c       	sbci	r31, 0xC6	; 198
    2452:	20 ef       	ldi	r18, 0xF0	; 240
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	20 83       	st	Z, r18
    2458:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    245a:	23 e0       	ldi	r18, 0x03	; 3
    245c:	28 0f       	add	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	f9 01       	movw	r30, r18
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	e4 5e       	subi	r30, 0xE4	; 228
    2468:	f6 4c       	sbci	r31, 0xC6	; 198
    246a:	a0 83       	st	Z, r26
    246c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    246e:	f9 01       	movw	r30, r18
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	e4 5a       	subi	r30, 0xA4	; 164
    2476:	f6 4c       	sbci	r31, 0xC6	; 198
    2478:	60 83       	st	Z, r22
    247a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	f9 01       	movw	r30, r18
    2482:	e4 56       	subi	r30, 0x64	; 100
    2484:	f6 4c       	sbci	r31, 0xC6	; 198
    2486:	40 83       	st	Z, r20
    2488:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    248a:	24 e0       	ldi	r18, 0x04	; 4
    248c:	28 0f       	add	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	f9 01       	movw	r30, r18
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	e4 5e       	subi	r30, 0xE4	; 228
    2498:	f6 4c       	sbci	r31, 0xC6	; 198
    249a:	a5 e5       	ldi	r26, 0x55	; 85
    249c:	ba e7       	ldi	r27, 0x7A	; 122
    249e:	a0 83       	st	Z, r26
    24a0:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    24a2:	f9 01       	movw	r30, r18
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	e4 5a       	subi	r30, 0xA4	; 164
    24aa:	f6 4c       	sbci	r31, 0xC6	; 198
    24ac:	60 83       	st	Z, r22
    24ae:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	f9 01       	movw	r30, r18
    24b6:	e4 56       	subi	r30, 0x64	; 100
    24b8:	f6 4c       	sbci	r31, 0xC6	; 198
    24ba:	40 83       	st	Z, r20
    24bc:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    24be:	8b 5f       	subi	r24, 0xFB	; 251
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	08 95       	ret

000024c6 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    24c6:	af 92       	push	r10
    24c8:	bf 92       	push	r11
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	2c 97       	sbiw	r28, 0x0c	; 12
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	7c 01       	movw	r14, r24
    24e4:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    24e6:	9e 01       	movw	r18, r28
    24e8:	2f 5f       	subi	r18, 0xFF	; 255
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	6c e0       	ldi	r22, 0x0C	; 12
    24f0:	80 96       	adiw	r24, 0x20	; 32
    24f2:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	9a 81       	ldd	r25, Y+2	; 0x02
    24fa:	98 27       	eor	r25, r24
    24fc:	89 27       	eor	r24, r25
    24fe:	98 27       	eor	r25, r24
    2500:	80 96       	adiw	r24, 0x20	; 32
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	98 27       	eor	r25, r24
    250e:	89 27       	eor	r24, r25
    2510:	98 27       	eor	r25, r24
    2512:	80 96       	adiw	r24, 0x20	; 32
    2514:	82 83       	std	Z+2, r24	; 0x02
    2516:	93 83       	std	Z+3, r25	; 0x03
    2518:	de 01       	movw	r26, r28
    251a:	15 96       	adiw	r26, 0x05	; 5
    251c:	34 96       	adiw	r30, 0x04	; 4
    251e:	c8 01       	movw	r24, r16
    2520:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2522:	2d 91       	ld	r18, X+
    2524:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2526:	e8 17       	cp	r30, r24
    2528:	f9 07       	cpc	r31, r25
    252a:	d9 f7       	brne	.-10     	; 0x2522 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    252c:	fc e2       	ldi	r31, 0x2C	; 44
    252e:	ef 0e       	add	r14, r31
    2530:	f1 1c       	adc	r15, r1
    2532:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2534:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2536:	9e 01       	movw	r18, r28
    2538:	2f 5f       	subi	r18, 0xFF	; 255
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	63 e0       	ldi	r22, 0x03	; 3
    2540:	c7 01       	movw	r24, r14
    2542:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	98 27       	eor	r25, r24
    254c:	89 27       	eor	r24, r25
    254e:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    2550:	97 01       	movw	r18, r14
    2552:	2e 5f       	subi	r18, 0xFE	; 254
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2556:	43 e0       	ldi	r20, 0x03	; 3
    2558:	4d 15       	cp	r20, r13
    255a:	80 f4       	brcc	.+32     	; 0x257c <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    255c:	ac 01       	movw	r20, r24
    255e:	41 50       	subi	r20, 0x01	; 1
    2560:	51 09       	sbc	r21, r1
    2562:	f8 01       	movw	r30, r16
    2564:	42 8f       	std	Z+26, r20	; 0x1a
    2566:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2568:	f3 e0       	ldi	r31, 0x03	; 3
    256a:	ef 0e       	add	r14, r31
    256c:	f1 1c       	adc	r15, r1
    256e:	f8 01       	movw	r30, r16
    2570:	e4 86       	std	Z+12, r14	; 0x0c
    2572:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    2574:	4b 81       	ldd	r20, Y+3	; 0x03
    2576:	f5 01       	movw	r30, r10
    2578:	44 a3       	std	Z+36, r20	; 0x24
    257a:	05 c0       	rjmp	.+10     	; 0x2586 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    257c:	f8 01       	movw	r30, r16
    257e:	82 8f       	std	Z+26, r24	; 0x1a
    2580:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    2582:	24 87       	std	Z+12, r18	; 0x0c
    2584:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    2586:	7c 01       	movw	r14, r24
    2588:	e2 0e       	add	r14, r18
    258a:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    258c:	d3 94       	inc	r13
    258e:	0e 5f       	subi	r16, 0xFE	; 254
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	ff ef       	ldi	r31, 0xFF	; 255
    2594:	af 1a       	sub	r10, r31
    2596:	bf 0a       	sbc	r11, r31
    2598:	47 e0       	ldi	r20, 0x07	; 7
    259a:	d4 12       	cpse	r13, r20
    259c:	cc cf       	rjmp	.-104    	; 0x2536 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    259e:	2c 96       	adiw	r28, 0x0c	; 12
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	bf 90       	pop	r11
    25b4:	af 90       	pop	r10
    25b6:	08 95       	ret

000025b8 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	a0 97       	sbiw	r28, 0x20	; 32
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    25d4:	7c 01       	movw	r14, r24
    25d6:	20 e2       	ldi	r18, 0x20	; 32
    25d8:	e2 0e       	add	r14, r18
    25da:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    25dc:	9e 01       	movw	r18, r28
    25de:	2f 5f       	subi	r18, 0xFF	; 255
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	62 e0       	ldi	r22, 0x02	; 2
    25e6:	8c 96       	adiw	r24, 0x2c	; 44
    25e8:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    25ec:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    25ee:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    25f0:	11 23       	and	r17, r17
    25f2:	59 f1       	breq	.+86     	; 0x264a <CheckLetter+0x92>
    25f4:	01 2f       	mov	r16, r17
    25f6:	11 32       	cpi	r17, 0x21	; 33
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <CheckLetter+0x44>
    25fa:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    25fc:	9e 01       	movw	r18, r28
    25fe:	2f 5f       	subi	r18, 0xFF	; 255
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	60 2f       	mov	r22, r16
    2606:	c7 01       	movw	r24, r14
    2608:	0e 96       	adiw	r24, 0x0e	; 14
    260a:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
    260e:	fe 01       	movw	r30, r28
    2610:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2612:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2614:	dd 20       	and	r13, r13
    2616:	61 f0       	breq	.+24     	; 0x2630 <CheckLetter+0x78>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2618:	e1 e0       	ldi	r30, 0x01	; 1
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	ec 0f       	add	r30, r28
    261e:	fd 1f       	adc	r31, r29
    2620:	e8 0f       	add	r30, r24
    2622:	f1 1d       	adc	r31, r1
    2624:	90 81       	ld	r25, Z
    2626:	90 62       	ori	r25, 0x20	; 32
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	9c 11       	cpse	r25, r12
    262c:	0e c0       	rjmp	.+28     	; 0x264a <CheckLetter+0x92>
    262e:	0e c0       	rjmp	.+28     	; 0x264c <CheckLetter+0x94>
            }
            if (data[y] == '[') found = 1;
    2630:	91 91       	ld	r25, Z+
    2632:	dd 24       	eor	r13, r13
    2634:	d3 94       	inc	r13
    2636:	9b 35       	cpi	r25, 0x5B	; 91
    2638:	09 f0       	breq	.+2      	; 0x263c <CheckLetter+0x84>
    263a:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	80 17       	cp	r24, r16
    2640:	48 f3       	brcs	.-46     	; 0x2614 <CheckLetter+0x5c>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2642:	e0 0e       	add	r14, r16
    2644:	f1 1c       	adc	r15, r1
        x -= max;
    2646:	10 1b       	sub	r17, r16
    2648:	d3 cf       	rjmp	.-90     	; 0x25f0 <CheckLetter+0x38>
    }
    return 0;
    264a:	80 e0       	ldi	r24, 0x00	; 0
}
    264c:	a0 96       	adiw	r28, 0x20	; 32
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	08 95       	ret

00002664 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2664:	af 92       	push	r10
    2666:	bf 92       	push	r11
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	00 d0       	rcall	.+0      	; 0x2678 <FindChild+0x14>
    2678:	00 d0       	rcall	.+0      	; 0x267a <FindChild+0x16>
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	d6 2e       	mov	r13, r22
    2680:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    2682:	9e 01       	movw	r18, r28
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	80 96       	adiw	r24, 0x20	; 32
    268e:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
    2692:	e9 80       	ldd	r14, Y+1	; 0x01
    2694:	fa 80       	ldd	r15, Y+2	; 0x02
    2696:	fe 24       	eor	r15, r14
    2698:	ef 24       	eor	r14, r15
    269a:	fe 24       	eor	r15, r14
    269c:	0b 81       	ldd	r16, Y+3	; 0x03
    269e:	1c 81       	ldd	r17, Y+4	; 0x04
    26a0:	10 27       	eor	r17, r16
    26a2:	01 27       	eor	r16, r17
    26a4:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    26a6:	0e 15       	cp	r16, r14
    26a8:	1f 05       	cpc	r17, r15
    26aa:	48 f5       	brcc	.+82     	; 0x26fe <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    26ac:	a0 16       	cp	r10, r16
    26ae:	b1 06       	cpc	r11, r17
    26b0:	60 f0       	brcs	.+24     	; 0x26ca <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    26b2:	9e 01       	movw	r18, r28
    26b4:	2f 5f       	subi	r18, 0xFF	; 255
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	62 e0       	ldi	r22, 0x02	; 2
    26bc:	c8 01       	movw	r24, r16
    26be:	80 96       	adiw	r24, 0x20	; 32
    26c0:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
    26c4:	09 81       	ldd	r16, Y+1	; 0x01
    26c6:	1a 81       	ldd	r17, Y+2	; 0x02
    26c8:	eb cf       	rjmp	.-42     	; 0x26a0 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    26ca:	9e 01       	movw	r18, r28
    26cc:	2f 5f       	subi	r18, 0xFF	; 255
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	c8 01       	movw	r24, r16
    26d6:	85 96       	adiw	r24, 0x25	; 37
    26d8:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	81 11       	cpse	r24, r1
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    26e2:	d1 10       	cpse	r13, r1
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <FindChild+0x8e>
    26e6:	0e c0       	rjmp	.+28     	; 0x2704 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    26e8:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
    26ec:	81 11       	cpse	r24, r1
    26ee:	f9 cf       	rjmp	.-14     	; 0x26e2 <FindChild+0x7e>
    26f0:	e0 cf       	rjmp	.-64     	; 0x26b2 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    26f2:	6d 2d       	mov	r22, r13
    26f4:	c8 01       	movw	r24, r16
    26f6:	60 df       	rcall	.-320    	; 0x25b8 <CheckLetter>
    26f8:	88 23       	and	r24, r24
    26fa:	d9 f2       	breq	.-74     	; 0x26b2 <FindChild+0x4e>
    26fc:	03 c0       	rjmp	.+6      	; 0x2704 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	01 c0       	rjmp	.+2      	; 0x2706 <FindChild+0xa2>
    2704:	c8 01       	movw	r24, r16
}
    2706:	24 96       	adiw	r28, 0x04	; 4
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	bf 90       	pop	r11
    271c:	af 90       	pop	r10
    271e:	08 95       	ret

00002720 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2720:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2722:	9f e9       	ldi	r25, 0x9F	; 159
    2724:	98 0f       	add	r25, r24
    2726:	9a 31       	cpi	r25, 0x1A	; 26
    2728:	38 f0       	brcs	.+14     	; 0x2738 <InpOkChk+0x18>
    272a:	90 ed       	ldi	r25, 0xD0	; 208
    272c:	98 0f       	add	r25, r24
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	9a 30       	cpi	r25, 0x0A	; 10
    2732:	18 f0       	brcs	.+6      	; 0x273a <InpOkChk+0x1a>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	08 95       	ret
    2738:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    273a:	08 95       	ret

0000273c <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2746:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2748:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    274a:	f8 01       	movw	r30, r16
    274c:	ed 0f       	add	r30, r29
    274e:	f1 1d       	adc	r31, r1
    2750:	20 81       	ld	r18, Z
    2752:	8c 2f       	mov	r24, r28
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	22 23       	and	r18, r18
    2758:	51 f0       	breq	.+20     	; 0x276e <CleanInput+0x32>
        data[cnt] = data[x];
    275a:	d8 01       	movw	r26, r16
    275c:	a8 0f       	add	r26, r24
    275e:	b9 1f       	adc	r27, r25
    2760:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2762:	80 81       	ld	r24, Z
    2764:	dd df       	rcall	.-70     	; 0x2720 <InpOkChk>
    2766:	81 11       	cpse	r24, r1
    2768:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    276a:	df 5f       	subi	r29, 0xFF	; 255
    276c:	ee cf       	rjmp	.-36     	; 0x274a <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    276e:	f8 01       	movw	r30, r16
    2770:	e8 0f       	add	r30, r24
    2772:	f9 1f       	adc	r31, r25
    2774:	10 82       	st	Z, r1
    return cnt;
}
    2776:	8c 2f       	mov	r24, r28
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	08 95       	ret

00002782 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2782:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    2784:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    2788:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    278c:	89 2b       	or	r24, r25
    278e:	99 f4       	brne	.+38     	; 0x27b6 <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    2790:	80 91 20 3a 	lds	r24, 0x3A20	; 0x803a20 <currObj+0x4>
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    279a:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
        auStart = ((effect&0xE0)>0);
    279e:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <effect>
    27a2:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <effect+0x1>
    27a6:	80 7e       	andi	r24, 0xE0	; 224
    27a8:	99 27       	eor	r25, r25
    27aa:	21 e0       	ldi	r18, 0x01	; 1
    27ac:	89 2b       	or	r24, r25
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <CheckSend+0x30>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    27b6:	20 91 48 3a 	lds	r18, 0x3A48	; 0x803a48 <txAddrNow>
    27ba:	28 30       	cpi	r18, 0x08	; 8
    27bc:	08 f0       	brcs	.+2      	; 0x27c0 <CheckSend+0x3e>
    27be:	49 c0       	rjmp	.+146    	; 0x2852 <CheckSend+0xd0>
    27c0:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <CheckSend+0x48>
    27c8:	44 c0       	rjmp	.+136    	; 0x2852 <CheckSend+0xd0>
        if (txStrLen[txAddrNow] == 0){
    27ca:	82 2f       	mov	r24, r18
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	fc 01       	movw	r30, r24
    27d0:	e7 5b       	subi	r30, 0xB7	; 183
    27d2:	f5 4c       	sbci	r31, 0xC5	; 197
    27d4:	e0 81       	ld	r30, Z
    27d6:	e1 11       	cpse	r30, r1
    27d8:	06 c0       	rjmp	.+12     	; 0x27e6 <CheckSend+0x64>
            txPart = 0;
    27da:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <txPart.3937>
            txAddrNow = TXLISTLEN;
    27de:	88 e0       	ldi	r24, 0x08	; 8
    27e0:	80 93 48 3a 	sts	0x3A48, r24	; 0x803a48 <txAddrNow>
    27e4:	2e c0       	rjmp	.+92     	; 0x2842 <CheckSend+0xc0>
        } else if (txPart < txStrLen[txAddrNow]){
    27e6:	50 91 07 39 	lds	r21, 0x3907	; 0x803907 <txPart.3937>
    27ea:	5e 17       	cp	r21, r30
    27ec:	60 f5       	brcc	.+88     	; 0x2846 <CheckSend+0xc4>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    27ee:	ce 2f       	mov	r28, r30
    27f0:	c5 1b       	sub	r28, r21
    27f2:	c1 32       	cpi	r28, 0x21	; 33
    27f4:	08 f0       	brcs	.+2      	; 0x27f8 <CheckSend+0x76>
    27f6:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	fc 01       	movw	r30, r24
    27fe:	ef 5a       	subi	r30, 0xAF	; 175
    2800:	f5 4c       	sbci	r31, 0xC5	; 197
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	2a ef       	ldi	r18, 0xFA	; 250
    2808:	3a e3       	ldi	r19, 0x3A	; 58
    280a:	40 91 47 3a 	lds	r20, 0x3A47	; 0x803a47 <txTypeNow>
    280e:	6c 2f       	mov	r22, r28
    2810:	85 0f       	add	r24, r21
    2812:	91 1d       	adc	r25, r1
    2814:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
            txPart += EEreadLength;
    2818:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <txPart.3937>
    281c:	8c 0f       	add	r24, r28
    281e:	80 93 07 39 	sts	0x3907, r24	; 0x803907 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2822:	ec 2f       	mov	r30, r28
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	e6 50       	subi	r30, 0x06	; 6
    2828:	f5 4c       	sbci	r31, 0xC5	; 197
    282a:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    282c:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <txBuffer>
    2830:	81 11       	cpse	r24, r1
    2832:	03 c0       	rjmp	.+6      	; 0x283a <CheckSend+0xb8>
    2834:	8b ed       	ldi	r24, 0xDB	; 219
    2836:	80 93 fa 3a 	sts	0x3AFA, r24	; 0x803afa <txBuffer>
            SerSend(&txBuffer[0]);
    283a:	8a ef       	ldi	r24, 0xFA	; 250
    283c:	9a e3       	ldi	r25, 0x3A	; 58
    283e:	0e 94 c3 08 	call	0x1186	; 0x1186 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	0b c0       	rjmp	.+22     	; 0x285c <CheckSend+0xda>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2846:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <txPart.3937>
            ++txAddrNow;
    284a:	2f 5f       	subi	r18, 0xFF	; 255
    284c:	20 93 48 3a 	sts	0x3A48, r18	; 0x803a48 <txAddrNow>
    2850:	f8 cf       	rjmp	.-16     	; 0x2842 <CheckSend+0xc0>
        }
    } else if (serTxDone) return 0; //All is sent!
    2852:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	91 11       	cpse	r25, r1
    285a:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    285c:	cf 91       	pop	r28
    285e:	08 95       	ret

00002860 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2864:	c0 91 1b 39 	lds	r28, 0x391B	; 0x80391b <responseList>
    2868:	cc 23       	and	r28, r28
    286a:	e9 f1       	breq	.+122    	; 0x28e6 <CheckResponse+0x86>
        --responseList;
    286c:	c1 50       	subi	r28, 0x01	; 1
    286e:	c0 93 1b 39 	sts	0x391B, r28	; 0x80391b <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2872:	d0 91 06 39 	lds	r29, 0x3906	; 0x803906 <number.3941>
    2876:	2d 2f       	mov	r18, r29
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	f9 01       	movw	r30, r18
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	e4 5e       	subi	r30, 0xE4	; 228
    2882:	f6 4c       	sbci	r31, 0xC6	; 198
    2884:	80 81       	ld	r24, Z
    2886:	91 81       	ldd	r25, Z+1	; 0x01
    2888:	80 3f       	cpi	r24, 0xF0	; 240
    288a:	4f ef       	ldi	r20, 0xFF	; 255
    288c:	94 07       	cpc	r25, r20
    288e:	51 f4       	brne	.+20     	; 0x28a4 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2890:	60 91 36 3a 	lds	r22, 0x3A36	; 0x803a36 <currObj+0x1a>
    2894:	70 91 37 3a 	lds	r23, 0x3A37	; 0x803a37 <currObj+0x1b>
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <currObj+0xc>
    289e:	90 91 29 3a 	lds	r25, 0x3A29	; 0x803a29 <currObj+0xd>
    28a2:	0d c0       	rjmp	.+26     	; 0x28be <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    28a4:	d9 01       	movw	r26, r18
    28a6:	aa 0f       	add	r26, r26
    28a8:	bb 1f       	adc	r27, r27
    28aa:	a4 56       	subi	r26, 0x64	; 100
    28ac:	b6 4c       	sbci	r27, 0xC6	; 198
    28ae:	22 0f       	add	r18, r18
    28b0:	33 1f       	adc	r19, r19
    28b2:	f9 01       	movw	r30, r18
    28b4:	e4 5a       	subi	r30, 0xA4	; 164
    28b6:	f6 4c       	sbci	r31, 0xC6	; 198
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	4c 91       	ld	r20, X
    28be:	4a dd       	rcall	.-1388   	; 0x2354 <PrepareSending>
        }
        ++number;
    28c0:	df 5f       	subi	r29, 0xFF	; 255
    28c2:	d0 93 06 39 	sts	0x3906, r29	; 0x803906 <number.3941>

        if (responseList == 0) {
    28c6:	c1 11       	cpse	r28, r1
    28c8:	0d c0       	rjmp	.+26     	; 0x28e4 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    28ca:	80 91 20 3a 	lds	r24, 0x3A20	; 0x803a20 <currObj+0x4>
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    28d4:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
            RXCNT = 0;
    28d8:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    28da:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <serRxDone>
            number = 0;
    28de:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <number.3941>
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    28e4:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    28e6:	8c 2f       	mov	r24, r28
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	a1 97       	sbiw	r28, 0x21	; 33
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    291c:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2920:	8f 3f       	cpi	r24, 0xFF	; 255
    2922:	49 f4       	brne	.+18     	; 0x2936 <CheckInput+0x48>
        //Start at first location
        PopulateObject(route[0], &currObj);
    2924:	6c e1       	ldi	r22, 0x1C	; 28
    2926:	7a e3       	ldi	r23, 0x3A	; 58
    2928:	80 91 dc 39 	lds	r24, 0x39DC	; 0x8039dc <route>
    292c:	90 91 dd 39 	lds	r25, 0x39DD	; 0x8039dd <route+0x1>
    2930:	ca dd       	rcall	.-1132   	; 0x24c6 <PopulateObject>
        currDepth = 0;
    2932:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <currDepth>
    }

    if (serRxDone){
    2936:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <serRxDone>
    293a:	88 23       	and	r24, r24
    293c:	09 f4       	brne	.+2      	; 0x2940 <CheckInput+0x52>
    293e:	58 c2       	rjmp	.+1200   	; 0x2df0 <CheckInput+0x502>

        //Special input requested from user by game
        if (specialInput[0]){
    2940:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput>
    2944:	88 23       	and	r24, r24
    2946:	09 f4       	brne	.+2      	; 0x294a <CheckInput+0x5c>
    2948:	4f c0       	rjmp	.+158    	; 0x29e8 <CheckInput+0xfa>
            specialPassed = 0;
    294a:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <specialPassed>
            data[0] = 'a';
    294e:	81 e6       	ldi	r24, 0x61	; 97
    2950:	f8 01       	movw	r30, r16
    2952:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2954:	6b e0       	ldi	r22, 0x0B	; 11
    2956:	79 e3       	ldi	r23, 0x39	; 57
    2958:	86 e7       	ldi	r24, 0x76	; 118
    295a:	9a e3       	ldi	r25, 0x3A	; 58
    295c:	e1 dc       	rcall	.-1598   	; 0x2320 <StartsWith>
    295e:	f8 2e       	mov	r15, r24
    2960:	88 23       	and	r24, r24
    2962:	21 f0       	breq	.+8      	; 0x296c <CheckInput+0x7e>
                specialPassed = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <specialPassed>
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <CheckInput+0x86>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    296c:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput>
    2970:	81 33       	cpi	r24, 0x31	; 49
    2972:	11 f0       	breq	.+4      	; 0x2978 <CheckInput+0x8a>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2974:	f1 2c       	mov	r15, r1
    2976:	3e c2       	rjmp	.+1148   	; 0x2df4 <CheckInput+0x506>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2978:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <specialInput+0x2>
    297c:	81 11       	cpse	r24, r1
    297e:	fa cf       	rjmp	.-12     	; 0x2974 <CheckInput+0x86>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2980:	86 e7       	ldi	r24, 0x76	; 118
    2982:	9a e3       	ldi	r25, 0x3A	; 58
    2984:	db de       	rcall	.-586    	; 0x273c <CleanInput>
                specialPassed = 2;
    2986:	92 e0       	ldi	r25, 0x02	; 2
    2988:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <specialPassed>
                data[1] = 0;
    298c:	f8 01       	movw	r30, r16
    298e:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2990:	82 30       	cpi	r24, 0x02	; 2
    2992:	80 f3       	brcs	.-32     	; 0x2974 <CheckInput+0x86>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2994:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx>
    2998:	81 33       	cpi	r24, 0x31	; 49
    299a:	60 f3       	brcs	.-40     	; 0x2974 <CheckInput+0x86>
    299c:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx>
    29a0:	85 33       	cpi	r24, 0x35	; 53
    29a2:	40 f7       	brcc	.-48     	; 0x2974 <CheckInput+0x86>
                        serRx[1] |= 0x20;
    29a4:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx+0x1>
    29a8:	80 62       	ori	r24, 0x20	; 32
    29aa:	80 93 77 3a 	sts	0x3A77, r24	; 0x803a77 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    29ae:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx+0x1>
    29b2:	81 36       	cpi	r24, 0x61	; 97
    29b4:	61 f0       	breq	.+24     	; 0x29ce <CheckInput+0xe0>
    29b6:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx+0x1>
    29ba:	85 36       	cpi	r24, 0x65	; 101
    29bc:	41 f0       	breq	.+16     	; 0x29ce <CheckInput+0xe0>
    29be:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx+0x1>
    29c2:	86 36       	cpi	r24, 0x66	; 102
    29c4:	21 f0       	breq	.+8      	; 0x29ce <CheckInput+0xe0>
    29c6:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx+0x1>
    29ca:	87 37       	cpi	r24, 0x77	; 119
    29cc:	99 f6       	brne	.-90     	; 0x2974 <CheckInput+0x86>
                            data[1] = specialInput[1]+0x11;
    29ce:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput+0x1>
    29d2:	8f 5e       	subi	r24, 0xEF	; 239
    29d4:	f8 01       	movw	r30, r16
    29d6:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    29d8:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx>
    29dc:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    29de:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx+0x1>
    29e2:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    29e4:	14 82       	std	Z+4, r1	; 0x04
    29e6:	06 c2       	rjmp	.+1036   	; 0x2df4 <CheckInput+0x506>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    29e8:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx>
    29ec:	83 32       	cpi	r24, 0x23	; 35
    29ee:	89 f5       	brne	.+98     	; 0x2a52 <CheckInput+0x164>
    29f0:	8d b3       	in	r24, 0x1d	; 29
    29f2:	86 30       	cpi	r24, 0x06	; 6
    29f4:	71 f5       	brne	.+92     	; 0x2a52 <CheckInput+0x164>
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    29fc:	fc 01       	movw	r30, r24
    29fe:	ea 58       	subi	r30, 0x8A	; 138
    2a00:	f5 4c       	sbci	r31, 0xC5	; 197
    2a02:	20 81       	ld	r18, Z
    2a04:	20 53       	subi	r18, 0x30	; 48
    2a06:	20 83       	st	Z, r18
                    bitNr *= 10;
    2a08:	11 0f       	add	r17, r17
    2a0a:	21 2f       	mov	r18, r17
    2a0c:	22 0f       	add	r18, r18
    2a0e:	22 0f       	add	r18, r18
    2a10:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2a12:	20 91 77 3a 	lds	r18, 0x3A77	; 0x803a77 <serRx+0x1>
    2a16:	23 30       	cpi	r18, 0x03	; 3
    2a18:	48 f4       	brcc	.+18     	; 0x2a2c <CheckInput+0x13e>
                    if (serRx[x] < 10) {
    2a1a:	20 81       	ld	r18, Z
    2a1c:	2a 30       	cpi	r18, 0x0A	; 10
    2a1e:	b8 f4       	brcc	.+46     	; 0x2a4e <CheckInput+0x160>
                        bitNr += serRx[x];
    2a20:	20 81       	ld	r18, Z
    2a22:	12 0f       	add	r17, r18
    2a24:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	91 05       	cpc	r25, r1
    2a2a:	41 f7       	brne	.-48     	; 0x29fc <CheckInput+0x10e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    2a2c:	81 2f       	mov	r24, r17
    2a2e:	8f 77       	andi	r24, 0x7F	; 127
    2a30:	71 f0       	breq	.+28     	; 0x2a4e <CheckInput+0x160>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2a32:	80 91 7a 3a 	lds	r24, 0x3A7A	; 0x803a7a <serRx+0x4>
    2a36:	60 91 7b 3a 	lds	r22, 0x3A7B	; 0x803a7b <serRx+0x5>
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	78 2b       	or	r23, r24
    2a3e:	81 2f       	mov	r24, r17
    2a40:	80 95       	com	r24
    2a42:	19 dc       	rcall	.-1998   	; 0x2276 <Cheat>
    2a44:	88 23       	and	r24, r24
    2a46:	19 f0       	breq	.+6      	; 0x2a4e <CheckInput+0x160>
    2a48:	81 2f       	mov	r24, r17
    2a4a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
                }
                responseList = SetStandardResponse(0);
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	50 c0       	rjmp	.+160    	; 0x2af2 <CheckInput+0x204>
    2a52:	d8 01       	movw	r26, r16
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2a58:	fc 01       	movw	r30, r24
    2a5a:	ea 58       	subi	r30, 0x8A	; 138
    2a5c:	f5 4c       	sbci	r31, 0xC5	; 197
    2a5e:	20 81       	ld	r18, Z
    2a60:	21 34       	cpi	r18, 0x41	; 65
    2a62:	18 f0       	brcs	.+6      	; 0x2a6a <CheckInput+0x17c>
    2a64:	20 81       	ld	r18, Z
    2a66:	2b 35       	cpi	r18, 0x5B	; 91
    2a68:	10 f0       	brcs	.+4      	; 0x2a6e <CheckInput+0x180>
    2a6a:	20 81       	ld	r18, Z
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <CheckInput+0x184>
    2a6e:	20 81       	ld	r18, Z
    2a70:	20 62       	ori	r18, 0x20	; 32
    2a72:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2a74:	20 81       	ld	r18, Z
    2a76:	21 11       	cpse	r18, r1
    2a78:	05 c0       	rjmp	.+10     	; 0x2a84 <CheckInput+0x196>
                    data[x] = 0;
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	e8 0f       	add	r30, r24
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	10 82       	st	Z, r1
                    break;
    2a82:	05 c0       	rjmp	.+10     	; 0x2a8e <CheckInput+0x1a0>
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2a88:	81 34       	cpi	r24, 0x41	; 65
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	29 f7       	brne	.-54     	; 0x2a58 <CheckInput+0x16a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2a8e:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx>
                data[0] = 0;
    2a92:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2a94:	81 11       	cpse	r24, r1
    2a96:	05 c0       	rjmp	.+10     	; 0x2aa2 <CheckInput+0x1b4>
                data[0] = 0;
    2a98:	10 82       	st	Z, r1
                RXCNT = 0;
    2a9a:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2a9c:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <serRxDone>
    2aa0:	a7 c1       	rjmp	.+846    	; 0x2df0 <CheckInput+0x502>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2aa2:	80 81       	ld	r24, Z
    2aa4:	8f 33       	cpi	r24, 0x3F	; 63
    2aa6:	11 f0       	breq	.+4      	; 0x2aac <CheckInput+0x1be>
    2aa8:	88 36       	cpi	r24, 0x68	; 104
    2aaa:	39 f5       	brne	.+78     	; 0x2afa <CheckInput+0x20c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aac:	89 e5       	ldi	r24, 0x59	; 89
    2aae:	9a e7       	ldi	r25, 0x7A	; 122
    2ab0:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <reactStr>
    2ab4:	90 93 1d 39 	sts	0x391D, r25	; 0x80391d <reactStr+0x1>
    reactStr[1][number]=length;
    2ab8:	84 e0       	ldi	r24, 0x04	; 4
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <reactStr+0x40>
    2ac0:	90 93 5d 39 	sts	0x395D, r25	; 0x80395d <reactStr+0x41>
    reactStr[2][number]=type;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	80 93 9c 39 	sts	0x399C, r24	; 0x80399c <reactStr+0x80>
    2acc:	90 93 9d 39 	sts	0x399D, r25	; 0x80399d <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad0:	23 e9       	ldi	r18, 0x93	; 147
    2ad2:	3b e7       	ldi	r19, 0x7B	; 123
    2ad4:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    2ad8:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    2adc:	2d e6       	ldi	r18, 0x6D	; 109
    2ade:	34 e0       	ldi	r19, 0x04	; 4
    2ae0:	20 93 5e 39 	sts	0x395E, r18	; 0x80395e <reactStr+0x42>
    2ae4:	30 93 5f 39 	sts	0x395F, r19	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    2ae8:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    2aec:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2af0:	82 e0       	ldi	r24, 0x02	; 2
    2af2:	6d dc       	rcall	.-1830   	; 0x23ce <SetStandardResponse>
    2af4:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <responseList>
    2af8:	7b c1       	rjmp	.+758    	; 0x2df0 <CheckInput+0x502>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2afa:	81 36       	cpi	r24, 0x61	; 97
    2afc:	d9 f4       	brne	.+54     	; 0x2b34 <CheckInput+0x246>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2afe:	89 e5       	ldi	r24, 0x59	; 89
    2b00:	9a e7       	ldi	r25, 0x7A	; 122
    2b02:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <reactStr>
    2b06:	90 93 1d 39 	sts	0x391D, r25	; 0x80391d <reactStr+0x1>
    reactStr[1][number]=length;
    2b0a:	84 e0       	ldi	r24, 0x04	; 4
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <reactStr+0x40>
    2b12:	90 93 5d 39 	sts	0x395D, r25	; 0x80395d <reactStr+0x41>
    reactStr[2][number]=type;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	80 93 9c 39 	sts	0x399C, r24	; 0x80399c <reactStr+0x80>
    2b1e:	90 93 9d 39 	sts	0x399D, r25	; 0x80399d <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b22:	2e e6       	ldi	r18, 0x6E	; 110
    2b24:	3a e7       	ldi	r19, 0x7A	; 122
    2b26:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    2b2a:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    2b2e:	25 e2       	ldi	r18, 0x25	; 37
    2b30:	31 e0       	ldi	r19, 0x01	; 1
    2b32:	d6 cf       	rjmp	.-84     	; 0x2ae0 <CheckInput+0x1f2>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2b34:	87 37       	cpi	r24, 0x77	; 119
    2b36:	09 f0       	breq	.+2      	; 0x2b3a <CheckInput+0x24c>
    2b38:	6e c0       	rjmp	.+220    	; 0x2c16 <CheckInput+0x328>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3a:	89 e5       	ldi	r24, 0x59	; 89
    2b3c:	9a e7       	ldi	r25, 0x7A	; 122
    2b3e:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <reactStr>
    2b42:	90 93 1d 39 	sts	0x391D, r25	; 0x80391d <reactStr+0x1>
    reactStr[1][number]=length;
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <reactStr+0x40>
    2b4e:	90 93 5d 39 	sts	0x395D, r25	; 0x80395d <reactStr+0x41>
    reactStr[2][number]=type;
    2b52:	21 e0       	ldi	r18, 0x01	; 1
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	20 93 9c 39 	sts	0x399C, r18	; 0x80399c <reactStr+0x80>
    2b5a:	30 93 9d 39 	sts	0x399D, r19	; 0x80399d <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b5e:	8d e8       	ldi	r24, 0x8D	; 141
    2b60:	96 e7       	ldi	r25, 0x76	; 118
    2b62:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    2b66:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    2b6a:	82 e1       	ldi	r24, 0x12	; 18
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    2b72:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    2b76:	20 93 9e 39 	sts	0x399E, r18	; 0x80399e <reactStr+0x82>
    2b7a:	30 93 9f 39 	sts	0x399F, r19	; 0x80399f <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    2b7e:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <whoami>
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	19 f4       	brne	.+6      	; 0x2b8c <CheckInput+0x29e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b86:	87 e8       	ldi	r24, 0x87	; 135
    2b88:	96 e7       	ldi	r25, 0x76	; 118
    2b8a:	0f c0       	rjmp	.+30     	; 0x2baa <CheckInput+0x2bc>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	49 f4       	brne	.+18     	; 0x2ba2 <CheckInput+0x2b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b90:	84 e8       	ldi	r24, 0x84	; 132
    2b92:	96 e7       	ldi	r25, 0x76	; 118
    2b94:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    2b98:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    2b9c:	83 e0       	ldi	r24, 0x03	; 3
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	1e c0       	rjmp	.+60     	; 0x2bde <CheckInput+0x2f0>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    2ba2:	83 30       	cpi	r24, 0x03	; 3
    2ba4:	49 f4       	brne	.+18     	; 0x2bb8 <CheckInput+0x2ca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ba6:	8e e7       	ldi	r24, 0x7E	; 126
    2ba8:	96 e7       	ldi	r25, 0x76	; 118
    2baa:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    2bae:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    2bb2:	86 e0       	ldi	r24, 0x06	; 6
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	13 c0       	rjmp	.+38     	; 0x2bde <CheckInput+0x2f0>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    2bb8:	84 30       	cpi	r24, 0x04	; 4
    2bba:	49 f4       	brne	.+18     	; 0x2bce <CheckInput+0x2e0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bbc:	89 e7       	ldi	r24, 0x79	; 121
    2bbe:	96 e7       	ldi	r25, 0x76	; 118
    2bc0:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    2bc4:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    2bc8:	85 e0       	ldi	r24, 0x05	; 5
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	08 c0       	rjmp	.+16     	; 0x2bde <CheckInput+0x2f0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bce:	82 e0       	ldi	r24, 0x02	; 2
    2bd0:	96 e7       	ldi	r25, 0x76	; 118
    2bd2:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    2bd6:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    2bda:	82 e4       	ldi	r24, 0x42	; 66
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	80 93 60 39 	sts	0x3960, r24	; 0x803960 <reactStr+0x44>
    2be2:	90 93 61 39 	sts	0x3961, r25	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    2be6:	20 93 a0 39 	sts	0x39A0, r18	; 0x8039a0 <reactStr+0x84>
    2bea:	30 93 a1 39 	sts	0x39A1, r19	; 0x8039a1 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bee:	8f e5       	ldi	r24, 0x5F	; 95
    2bf0:	96 e7       	ldi	r25, 0x76	; 118
    2bf2:	80 93 22 39 	sts	0x3922, r24	; 0x803922 <reactStr+0x6>
    2bf6:	90 93 23 39 	sts	0x3923, r25	; 0x803923 <reactStr+0x7>
    reactStr[1][number]=length;
    2bfa:	8a e1       	ldi	r24, 0x1A	; 26
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	80 93 62 39 	sts	0x3962, r24	; 0x803962 <reactStr+0x46>
    2c02:	90 93 63 39 	sts	0x3963, r25	; 0x803963 <reactStr+0x47>
    reactStr[2][number]=type;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	80 93 a2 39 	sts	0x39A2, r24	; 0x8039a2 <reactStr+0x86>
    2c0e:	90 93 a3 39 	sts	0x39A3, r25	; 0x8039a3 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2c12:	84 e0       	ldi	r24, 0x04	; 4
    2c14:	6e cf       	rjmp	.-292    	; 0x2af2 <CheckInput+0x204>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    2c16:	81 37       	cpi	r24, 0x71	; 113
    2c18:	d9 f4       	brne	.+54     	; 0x2c50 <CheckInput+0x362>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c1a:	89 e5       	ldi	r24, 0x59	; 89
    2c1c:	9a e7       	ldi	r25, 0x7A	; 122
    2c1e:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <reactStr>
    2c22:	90 93 1d 39 	sts	0x391D, r25	; 0x80391d <reactStr+0x1>
    reactStr[1][number]=length;
    2c26:	84 e0       	ldi	r24, 0x04	; 4
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <reactStr+0x40>
    2c2e:	90 93 5d 39 	sts	0x395D, r25	; 0x80395d <reactStr+0x41>
    reactStr[2][number]=type;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	80 93 9c 39 	sts	0x399C, r24	; 0x80399c <reactStr+0x80>
    2c3a:	90 93 9d 39 	sts	0x399D, r25	; 0x80399d <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3a e7       	ldi	r19, 0x7A	; 122
    2c42:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    2c46:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    2c4a:	25 e5       	ldi	r18, 0x55	; 85
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2c4e:	48 cf       	rjmp	.-368    	; 0x2ae0 <CheckInput+0x1f2>
    2c50:	66 e4       	ldi	r22, 0x46	; 70
    2c52:	72 ec       	ldi	r23, 0xC2	; 194
    2c54:	c8 01       	movw	r24, r16
    2c56:	64 db       	rcall	.-2360   	; 0x2320 <StartsWith>
    2c58:	88 23       	and	r24, r24
    2c5a:	f9 f0       	breq	.+62     	; 0x2c9a <CheckInput+0x3ac>
    2c5c:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	81 2f       	mov	r24, r17
    2c62:	0e 94 3b 0a 	call	0x1476	; 0x1476 <WriteStatusBit>
    2c66:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2c68:	12 37       	cpi	r17, 0x72	; 114
    2c6a:	c9 f7       	brne	.-14     	; 0x2c5e <CheckInput+0x370>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    2c6c:	0e 94 b4 09 	call	0x1368	; 0x1368 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    2c70:	80 e2       	ldi	r24, 0x20	; 32
    2c72:	e9 e8       	ldi	r30, 0x89	; 137
    2c74:	f2 ec       	ldi	r31, 0xC2	; 194
    2c76:	de 01       	movw	r26, r28
    2c78:	11 96       	adiw	r26, 0x01	; 1
    2c7a:	01 90       	ld	r0, Z+
    2c7c:	0d 92       	st	X+, r0
    2c7e:	8a 95       	dec	r24
    2c80:	e1 f7       	brne	.-8      	; 0x2c7a <CheckInput+0x38c>
                SerSpeed(60);
    2c82:	8c e3       	ldi	r24, 0x3C	; 60
    2c84:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2c88:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2c8c:	88 23       	and	r24, r24
    2c8e:	e1 f3       	breq	.-8      	; 0x2c88 <CheckInput+0x39a>
    2c90:	ce 01       	movw	r24, r28
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	0e 94 c3 08 	call	0x1186	; 0x1186 <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    2c98:	f7 cf       	rjmp	.-18     	; 0x2c88 <CheckInput+0x39a>
    2c9a:	6c e4       	ldi	r22, 0x4C	; 76
    2c9c:	72 ec       	ldi	r23, 0xC2	; 194
    2c9e:	c8 01       	movw	r24, r16
    2ca0:	3f db       	rcall	.-2434   	; 0x2320 <StartsWith>
    2ca2:	88 23       	and	r24, r24
    2ca4:	61 f1       	breq	.+88     	; 0x2cfe <CheckInput+0x410>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2ca6:	8f ef       	ldi	r24, 0xFF	; 255
    2ca8:	89 a3       	std	Y+33, r24	; 0x21
    2caa:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	be 01       	movw	r22, r28
    2cb0:	6f 5d       	subi	r22, 0xDF	; 223
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	81 2f       	mov	r24, r17
    2cb6:	0e 94 4f 08 	call	0x109e	; 0x109e <EEWrite>
    2cba:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2cbc:	10 32       	cpi	r17, 0x20	; 32
    2cbe:	b1 f7       	brne	.-20     	; 0x2cac <CheckInput+0x3be>
    2cc0:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2cc2:	60 e0       	ldi	r22, 0x00	; 0
    2cc4:	81 2f       	mov	r24, r17
    2cc6:	0e 94 3b 0a 	call	0x1476	; 0x1476 <WriteStatusBit>
    2cca:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2ccc:	12 37       	cpi	r17, 0x72	; 114
    2cce:	c9 f7       	brne	.-14     	; 0x2cc2 <CheckInput+0x3d4>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    2cd0:	0e 94 b4 09 	call	0x1368	; 0x1368 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    2cd4:	8f e0       	ldi	r24, 0x0F	; 15
    2cd6:	e9 ea       	ldi	r30, 0xA9	; 169
    2cd8:	f2 ec       	ldi	r31, 0xC2	; 194
    2cda:	de 01       	movw	r26, r28
    2cdc:	11 96       	adiw	r26, 0x01	; 1
    2cde:	01 90       	ld	r0, Z+
    2ce0:	0d 92       	st	X+, r0
    2ce2:	8a 95       	dec	r24
    2ce4:	e1 f7       	brne	.-8      	; 0x2cde <CheckInput+0x3f0>
                SerSpeed(60);
    2ce6:	8c e3       	ldi	r24, 0x3C	; 60
    2ce8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2cec:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2cf0:	88 23       	and	r24, r24
    2cf2:	e1 f3       	breq	.-8      	; 0x2cec <CheckInput+0x3fe>
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	01 96       	adiw	r24, 0x01	; 1
    2cf8:	0e 94 c3 08 	call	0x1186	; 0x1186 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2cfc:	f7 cf       	rjmp	.-18     	; 0x2cec <CheckInput+0x3fe>
    2cfe:	63 e8       	ldi	r22, 0x83	; 131
    2d00:	72 ec       	ldi	r23, 0xC2	; 194
    2d02:	c8 01       	movw	r24, r16
    2d04:	0d db       	rcall	.-2534   	; 0x2320 <StartsWith>
    2d06:	88 23       	and	r24, r24
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <CheckInput+0x41e>
    2d0a:	34 ce       	rjmp	.-920    	; 0x2974 <CheckInput+0x86>
    2d0c:	8c e1       	ldi	r24, 0x1C	; 28
    2d0e:	c8 2e       	mov	r12, r24
    2d10:	89 e3       	ldi	r24, 0x39	; 57
    2d12:	d8 2e       	mov	r13, r24
    2d14:	9c e5       	ldi	r25, 0x5C	; 92
    2d16:	e9 2e       	mov	r14, r25
    2d18:	99 e3       	ldi	r25, 0x39	; 57
    2d1a:	f9 2e       	mov	r15, r25
    2d1c:	0c e9       	ldi	r16, 0x9C	; 156
    2d1e:	19 e3       	ldi	r17, 0x39	; 57
    2d20:	28 e1       	ldi	r18, 0x18	; 24
    2d22:	32 2e       	mov	r3, r18
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d24:	3d e9       	ldi	r19, 0x9D	; 157
    2d26:	63 2e       	mov	r6, r19
    2d28:	34 e7       	ldi	r19, 0x74	; 116
    2d2a:	73 2e       	mov	r7, r19
    reactStr[1][number]=length;
    2d2c:	42 e0       	ldi	r20, 0x02	; 2
    2d2e:	84 2e       	mov	r8, r20
    2d30:	91 2c       	mov	r9, r1
    reactStr[2][number]=type;
    2d32:	aa 24       	eor	r10, r10
    2d34:	a3 94       	inc	r10
    2d36:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d38:	67 e5       	ldi	r22, 0x57	; 87
    2d3a:	46 2e       	mov	r4, r22
    2d3c:	6a e7       	ldi	r22, 0x7A	; 122
    2d3e:	56 2e       	mov	r5, r22
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	be 01       	movw	r22, r28
    2d44:	6f 5f       	subi	r22, 0xFF	; 255
    2d46:	7f 4f       	sbci	r23, 0xFF	; 255
    2d48:	83 2d       	mov	r24, r3
    2d4a:	0e 94 3f 08 	call	0x107e	; 0x107e <EERead>
                    bit = 0xff-bit;
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	80 95       	com	r24
    2d52:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d54:	f6 01       	movw	r30, r12
    2d56:	60 82       	st	Z, r6
    2d58:	71 82       	std	Z+1, r7	; 0x01
    reactStr[1][number]=length;
    2d5a:	f7 01       	movw	r30, r14
    2d5c:	80 82       	st	Z, r8
    2d5e:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2d60:	f8 01       	movw	r30, r16
    2d62:	a0 82       	st	Z, r10
    2d64:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d66:	28 2f       	mov	r18, r24
    2d68:	22 95       	swap	r18
    2d6a:	2f 70       	andi	r18, 0x0F	; 15
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	23 57       	subi	r18, 0x73	; 115
    2d70:	3b 48       	sbci	r19, 0x8B	; 139
    2d72:	f6 01       	movw	r30, r12
    2d74:	22 83       	std	Z+2, r18	; 0x02
    2d76:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    2d78:	f7 01       	movw	r30, r14
    2d7a:	a2 82       	std	Z+2, r10	; 0x02
    2d7c:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2d7e:	f8 01       	movw	r30, r16
    2d80:	a2 82       	std	Z+2, r10	; 0x02
    2d82:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d84:	8f 70       	andi	r24, 0x0F	; 15
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	83 57       	subi	r24, 0x73	; 115
    2d8a:	9b 48       	sbci	r25, 0x8B	; 139
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	84 83       	std	Z+4, r24	; 0x04
    2d90:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    2d92:	f7 01       	movw	r30, r14
    2d94:	a4 82       	std	Z+4, r10	; 0x04
    2d96:	b5 82       	std	Z+5, r11	; 0x05
    reactStr[2][number]=type;
    2d98:	f8 01       	movw	r30, r16
    2d9a:	a4 82       	std	Z+4, r10	; 0x04
    2d9c:	b5 82       	std	Z+5, r11	; 0x05
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d9e:	f6 01       	movw	r30, r12
    2da0:	46 82       	std	Z+6, r4	; 0x06
    2da2:	57 82       	std	Z+7, r5	; 0x07
    reactStr[1][number]=length;
    2da4:	f7 01       	movw	r30, r14
    2da6:	86 82       	std	Z+6, r8	; 0x06
    2da8:	97 82       	std	Z+7, r9	; 0x07
    reactStr[2][number]=type;
    2daa:	f8 01       	movw	r30, r16
    2dac:	a6 82       	std	Z+6, r10	; 0x06
    2dae:	b7 82       	std	Z+7, r11	; 0x07
    2db0:	33 94       	inc	r3
    2db2:	f8 e0       	ldi	r31, 0x08	; 8
    2db4:	cf 0e       	add	r12, r31
    2db6:	d1 1c       	adc	r13, r1
    2db8:	88 e0       	ldi	r24, 0x08	; 8
    2dba:	e8 0e       	add	r14, r24
    2dbc:	f1 1c       	adc	r15, r1
    2dbe:	08 5f       	subi	r16, 0xF8	; 248
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2dc2:	e0 e2       	ldi	r30, 0x20	; 32
    2dc4:	3e 12       	cpse	r3, r30
    2dc6:	bc cf       	rjmp	.-136    	; 0x2d40 <CheckInput+0x452>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dc8:	89 e5       	ldi	r24, 0x59	; 89
    2dca:	9a e7       	ldi	r25, 0x7A	; 122
    2dcc:	80 93 5a 39 	sts	0x395A, r24	; 0x80395a <reactStr+0x3e>
    2dd0:	90 93 5b 39 	sts	0x395B, r25	; 0x80395b <reactStr+0x3f>
    reactStr[1][number]=length;
    2dd4:	84 e0       	ldi	r24, 0x04	; 4
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	80 93 9a 39 	sts	0x399A, r24	; 0x80399a <reactStr+0x7e>
    2ddc:	90 93 9b 39 	sts	0x399B, r25	; 0x80399b <reactStr+0x7f>
    reactStr[2][number]=type;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	80 93 da 39 	sts	0x39DA, r24	; 0x8039da <reactStr+0xbe>
    2de8:	90 93 db 39 	sts	0x39DB, r25	; 0x8039db <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2dec:	30 92 1b 39 	sts	0x391B, r3	; 0x80391b <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2df0:	ff 24       	eor	r15, r15
    2df2:	f3 94       	inc	r15
}
    2df4:	8f 2d       	mov	r24, r15
    2df6:	a1 96       	adiw	r28, 0x21	; 33
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	df 90       	pop	r13
    2e0a:	cf 90       	pop	r12
    2e0c:	bf 90       	pop	r11
    2e0e:	af 90       	pop	r10
    2e10:	9f 90       	pop	r9
    2e12:	8f 90       	pop	r8
    2e14:	7f 90       	pop	r7
    2e16:	6f 90       	pop	r6
    2e18:	5f 90       	pop	r5
    2e1a:	4f 90       	pop	r4
    2e1c:	3f 90       	pop	r3
    2e1e:	08 95       	ret

00002e20 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2e20:	5f 92       	push	r5
    2e22:	6f 92       	push	r6
    2e24:	7f 92       	push	r7
    2e26:	8f 92       	push	r8
    2e28:	9f 92       	push	r9
    2e2a:	af 92       	push	r10
    2e2c:	bf 92       	push	r11
    2e2e:	cf 92       	push	r12
    2e30:	df 92       	push	r13
    2e32:	ef 92       	push	r14
    2e34:	ff 92       	push	r15
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	28 97       	sbiw	r28, 0x08	; 8
    2e44:	cd bf       	out	0x3d, r28	; 61
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2e4a:	78 dc       	rcall	.-1808   	; 0x273c <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2e4c:	c8 01       	movw	r24, r16
    2e4e:	76 dc       	rcall	.-1812   	; 0x273c <CleanInput>
    2e50:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2e52:	88 23       	and	r24, r24
    2e54:	11 f4       	brne	.+4      	; 0x2e5a <ProcessInput+0x3a>
    2e56:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <ProcessInput+0x103a>

        //eXit to previous location
        if (data[0] == 'x'){
    2e5a:	d8 01       	movw	r26, r16
    2e5c:	8c 91       	ld	r24, X
    2e5e:	88 37       	cpi	r24, 0x78	; 120
    2e60:	09 f0       	breq	.+2      	; 0x2e64 <ProcessInput+0x44>
    2e62:	45 c0       	rjmp	.+138    	; 0x2eee <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2e64:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2e68:	e8 2f       	mov	r30, r24
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	ee 0f       	add	r30, r30
    2e6e:	ff 1f       	adc	r31, r31
    2e70:	e4 52       	subi	r30, 0x24	; 36
    2e72:	f6 4c       	sbci	r31, 0xC6	; 198
    2e74:	20 81       	ld	r18, Z
    2e76:	31 81       	ldd	r19, Z+1	; 0x01
    2e78:	23 2b       	or	r18, r19
    2e7a:	11 f0       	breq	.+4      	; 0x2e80 <ProcessInput+0x60>
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	03 c0       	rjmp	.+6      	; 0x2e86 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e80:	84 e4       	ldi	r24, 0x44	; 68
    2e82:	96 e7       	ldi	r25, 0x76	; 118
    2e84:	a5 c5       	rjmp	.+2890   	; 0x39d0 <ProcessInput+0xbb0>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2e86:	80 91 22 3a 	lds	r24, 0x3A22	; 0x803a22 <currObj+0x6>
    2e8a:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
    2e8e:	88 23       	and	r24, r24
    2e90:	b9 f0       	breq	.+46     	; 0x2ec0 <ProcessInput+0xa0>
                --currDepth;
    2e92:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2e96:	e1 50       	subi	r30, 0x01	; 1
    2e98:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	ee 0f       	add	r30, r30
    2ea0:	ff 1f       	adc	r31, r31
    2ea2:	e4 52       	subi	r30, 0x24	; 36
    2ea4:	f6 4c       	sbci	r31, 0xC6	; 198
    2ea6:	6c e1       	ldi	r22, 0x1C	; 28
    2ea8:	7a e3       	ldi	r23, 0x3A	; 58
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	0b db       	rcall	.-2538   	; 0x24c6 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2eb0:	80 91 20 3a 	lds	r24, 0x3A20	; 0x803a20 <currObj+0x4>
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    2eba:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
    2ebe:	31 c2       	rjmp	.+1122   	; 0x3322 <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2ec0:	80 91 3e 3a 	lds	r24, 0x3A3E	; 0x803a3e <currObj+0x22>
    2ec4:	90 91 3f 3a 	lds	r25, 0x3A3F	; 0x803a3f <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ec8:	20 91 30 3a 	lds	r18, 0x3A30	; 0x803a30 <currObj+0x14>
    2ecc:	30 91 31 3a 	lds	r19, 0x3A31	; 0x803a31 <currObj+0x15>
    2ed0:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    2ed4:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    2ed8:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    2edc:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    2ee0:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    2ee4:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2ee8:	80 91 44 3a 	lds	r24, 0x3A44	; 0x803a44 <currObj+0x28>
    2eec:	3e c6       	rjmp	.+3196   	; 0x3b6a <ProcessInput+0xd4a>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2eee:	85 36       	cpi	r24, 0x65	; 101
    2ef0:	19 f0       	breq	.+6      	; 0x2ef8 <ProcessInput+0xd8>
    2ef2:	8f 36       	cpi	r24, 0x6F	; 111
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <ProcessInput+0xd8>
    2ef6:	df c0       	rjmp	.+446    	; 0x30b6 <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2ef8:	b2 e0       	ldi	r27, 0x02	; 2
    2efa:	fb 12       	cpse	r15, r27
    2efc:	c1 cf       	rjmp	.-126    	; 0x2e80 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2efe:	e0 90 2e 38 	lds	r14, 0x382E	; 0x80382e <currDepth>
    2f02:	f1 2c       	mov	r15, r1
    2f04:	f7 01       	movw	r30, r14
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	e4 52       	subi	r30, 0x24	; 36
    2f0c:	f6 4c       	sbci	r31, 0xC6	; 198
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	d8 01       	movw	r26, r16
    2f14:	11 96       	adiw	r26, 0x01	; 1
    2f16:	6c 91       	ld	r22, X
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	a3 db       	rcall	.-2234   	; 0x2664 <FindChild>
    2f1e:	f7 01       	movw	r30, r14
    2f20:	ee 0f       	add	r30, r30
    2f22:	ff 1f       	adc	r31, r31
    2f24:	e2 52       	subi	r30, 0x22	; 34
    2f26:	f6 4c       	sbci	r31, 0xC6	; 198
    2f28:	80 83       	st	Z, r24
    2f2a:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2f2c:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    2f30:	29 2f       	mov	r18, r25
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	f9 01       	movw	r30, r18
    2f36:	ee 0f       	add	r30, r30
    2f38:	ff 1f       	adc	r31, r31
    2f3a:	e2 52       	subi	r30, 0x22	; 34
    2f3c:	f6 4c       	sbci	r31, 0xC6	; 198
    2f3e:	40 81       	ld	r20, Z
    2f40:	51 81       	ldd	r21, Z+1	; 0x01
    2f42:	41 15       	cp	r20, r1
    2f44:	51 05       	cpc	r21, r1
    2f46:	21 f0       	breq	.+8      	; 0x2f50 <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    2f48:	6b ed       	ldi	r22, 0xDB	; 219
    2f4a:	78 e3       	ldi	r23, 0x38	; 56
    2f4c:	ca 01       	movw	r24, r20
    2f4e:	1c c0       	rjmp	.+56     	; 0x2f88 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2f50:	99 23       	and	r25, r25
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <ProcessInput+0x136>
    2f54:	99 c7       	rjmp	.+3890   	; 0x3e88 <ProcessInput+0x1068>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2f56:	22 0f       	add	r18, r18
    2f58:	33 1f       	adc	r19, r19
    2f5a:	f9 01       	movw	r30, r18
    2f5c:	e6 52       	subi	r30, 0x26	; 38
    2f5e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f60:	d8 01       	movw	r26, r16
    2f62:	11 96       	adiw	r26, 0x01	; 1
    2f64:	6c 91       	ld	r22, X
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	26 db       	rcall	.-2484   	; 0x25b8 <CheckLetter>
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <ProcessInput+0x152>
    2f70:	8b c7       	rjmp	.+3862   	; 0x3e88 <ProcessInput+0x1068>
                        PopulateObject(route[currDepth-1], &actObj1);
    2f72:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	ee 0f       	add	r30, r30
    2f7a:	ff 1f       	adc	r31, r31
    2f7c:	e6 52       	subi	r30, 0x26	; 38
    2f7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f80:	6b ed       	ldi	r22, 0xDB	; 219
    2f82:	78 e3       	ldi	r23, 0x38	; 56
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	9e da       	rcall	.-2756   	; 0x24c6 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2f8a:	f8 01       	movw	r30, r16
    2f8c:	80 81       	ld	r24, Z
    2f8e:	85 36       	cpi	r24, 0x65	; 101
    2f90:	c9 f4       	brne	.+50     	; 0x2fc4 <ProcessInput+0x1a4>
    2f92:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3981+0x8>
    2f96:	80 fd       	sbrc	r24, 0
    2f98:	1e c0       	rjmp	.+60     	; 0x2fd6 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f9a:	8d e9       	ldi	r24, 0x9D	; 157
    2f9c:	99 e7       	ldi	r25, 0x79	; 121
    2f9e:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    2fa2:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    2fa6:	8e e1       	ldi	r24, 0x1E	; 30
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    2fae:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    2fba:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2fbe:	72 e0       	ldi	r23, 0x02	; 2
    2fc0:	77 2e       	mov	r7, r23
    2fc2:	30 c7       	rjmp	.+3680   	; 0x3e24 <ProcessInput+0x1004>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2fc4:	8f 36       	cpi	r24, 0x6F	; 111
    2fc6:	39 f4       	brne	.+14     	; 0x2fd6 <ProcessInput+0x1b6>
    2fc8:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3981+0x8>
    2fcc:	81 fd       	sbrc	r24, 1
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fd0:	82 e8       	ldi	r24, 0x82	; 130
    2fd2:	99 e7       	ldi	r25, 0x79	; 121
    2fd4:	fd c4       	rjmp	.+2554   	; 0x39d0 <ProcessInput+0xbb0>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2fd6:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3981+0x6>
    2fda:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
    2fde:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2fe2:	88 23       	and	r24, r24
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <ProcessInput+0x1c8>
    2fe6:	49 c0       	rjmp	.+146    	; 0x307a <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2fe8:	ae 2f       	mov	r26, r30
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	aa 0f       	add	r26, r26
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	a2 52       	subi	r26, 0x22	; 34
    2ff2:	b6 4c       	sbci	r27, 0xC6	; 198
    2ff4:	8d 91       	ld	r24, X+
    2ff6:	9c 91       	ld	r25, X
    2ff8:	89 2b       	or	r24, r25
    2ffa:	11 f0       	breq	.+4      	; 0x3000 <ProcessInput+0x1e0>
    2ffc:	ef 5f       	subi	r30, 0xFF	; 255
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <ProcessInput+0x1e2>
    3000:	e1 50       	subi	r30, 0x01	; 1
    3002:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    3006:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	ee 0f       	add	r30, r30
    300e:	ff 1f       	adc	r31, r31
    3010:	e4 52       	subi	r30, 0x24	; 36
    3012:	f6 4c       	sbci	r31, 0xC6	; 198
    3014:	6c e1       	ldi	r22, 0x1C	; 28
    3016:	7a e3       	ldi	r23, 0x3A	; 58
    3018:	80 81       	ld	r24, Z
    301a:	91 81       	ldd	r25, Z+1	; 0x01
    301c:	54 da       	rcall	.-2904   	; 0x24c6 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    301e:	80 91 38 3a 	lds	r24, 0x3A38	; 0x803a38 <currObj+0x1c>
    3022:	90 91 39 3a 	lds	r25, 0x3A39	; 0x803a39 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3026:	20 91 2a 3a 	lds	r18, 0x3A2A	; 0x803a2a <currObj+0xe>
    302a:	30 91 2b 3a 	lds	r19, 0x3A2B	; 0x803a2b <currObj+0xf>
    302e:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3032:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3036:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    303a:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    303e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3042:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3046:	89 e5       	ldi	r24, 0x59	; 89
    3048:	9a e7       	ldi	r25, 0x7A	; 122
    304a:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    304e:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	80 93 60 39 	sts	0x3960, r24	; 0x803960 <reactStr+0x44>
    305a:	90 93 61 39 	sts	0x3961, r25	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	80 93 a0 39 	sts	0x39A0, r24	; 0x8039a0 <reactStr+0x84>
    3066:	90 93 a1 39 	sts	0x39A1, r25	; 0x8039a1 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    306a:	80 91 20 3a 	lds	r24, 0x3A20	; 0x803a20 <currObj+0x4>
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    3074:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
    3078:	91 c4       	rjmp	.+2338   	; 0x399c <ProcessInput+0xb7c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	ee 0f       	add	r30, r30
    307e:	ff 1f       	adc	r31, r31
    3080:	e2 52       	subi	r30, 0x22	; 34
    3082:	f6 4c       	sbci	r31, 0xC6	; 198
    3084:	10 82       	st	Z, r1
    3086:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    3088:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3981+0x22>
    308c:	90 91 fe 38 	lds	r25, 0x38FE	; 0x8038fe <actObj1.3981+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3090:	20 91 ef 38 	lds	r18, 0x38EF	; 0x8038ef <actObj1.3981+0x14>
    3094:	30 91 f0 38 	lds	r19, 0x38F0	; 0x8038f0 <actObj1.3981+0x15>
    3098:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    309c:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    30a0:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    30a4:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    30a8:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    30ac:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    30b0:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3981+0x28>
    30b4:	5a c5       	rjmp	.+2740   	; 0x3b6a <ProcessInput+0xd4a>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    30b6:	8c 36       	cpi	r24, 0x6C	; 108
    30b8:	09 f0       	breq	.+2      	; 0x30bc <ProcessInput+0x29c>
    30ba:	57 c1       	rjmp	.+686    	; 0x336a <ProcessInput+0x54a>
    30bc:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
            if (inputLen == 1) {
    30c0:	b1 e0       	ldi	r27, 0x01	; 1
    30c2:	fb 12       	cpse	r15, r27
    30c4:	f6 c0       	rjmp	.+492    	; 0x32b2 <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    30c6:	80 91 38 3a 	lds	r24, 0x3A38	; 0x803a38 <currObj+0x1c>
    30ca:	90 91 39 3a 	lds	r25, 0x3A39	; 0x803a39 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ce:	20 91 2a 3a 	lds	r18, 0x3A2A	; 0x803a2a <currObj+0xe>
    30d2:	30 91 2b 3a 	lds	r19, 0x3A2B	; 0x803a2b <currObj+0xf>
    30d6:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    30da:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    30de:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    30e2:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    30e6:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    30ea:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ee:	89 e5       	ldi	r24, 0x59	; 89
    30f0:	9a e7       	ldi	r25, 0x7A	; 122
    30f2:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    30f6:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	80 93 60 39 	sts	0x3960, r24	; 0x803960 <reactStr+0x44>
    3102:	90 93 61 39 	sts	0x3961, r25	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	80 93 a0 39 	sts	0x39A0, r24	; 0x8039a0 <reactStr+0x84>
    310e:	90 93 a1 39 	sts	0x39A1, r25	; 0x8039a1 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3112:	2b ee       	ldi	r18, 0xEB	; 235
    3114:	39 e7       	ldi	r19, 0x79	; 121
    3116:	20 93 22 39 	sts	0x3922, r18	; 0x803922 <reactStr+0x6>
    311a:	30 93 23 39 	sts	0x3923, r19	; 0x803923 <reactStr+0x7>
    reactStr[1][number]=length;
    311e:	25 e1       	ldi	r18, 0x15	; 21
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	20 93 62 39 	sts	0x3962, r18	; 0x803962 <reactStr+0x46>
    3126:	30 93 63 39 	sts	0x3963, r19	; 0x803963 <reactStr+0x47>
    reactStr[2][number]=type;
    312a:	80 93 a2 39 	sts	0x39A2, r24	; 0x8039a2 <reactStr+0x86>
    312e:	90 93 a3 39 	sts	0x39A3, r25	; 0x8039a3 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	e2 52       	subi	r30, 0x22	; 34
    313a:	f6 4c       	sbci	r31, 0xC6	; 198
    313c:	10 82       	st	Z, r1
    313e:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    3140:	84 e0       	ldi	r24, 0x04	; 4
    3142:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3144:	97 e5       	ldi	r25, 0x57	; 87
    3146:	c9 2e       	mov	r12, r25
    3148:	9a e7       	ldi	r25, 0x7A	; 122
    314a:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    314c:	22 e0       	ldi	r18, 0x02	; 2
    314e:	a2 2e       	mov	r10, r18
    3150:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3152:	88 24       	eor	r8, r8
    3154:	83 94       	inc	r8
    3156:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    3158:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9c 01       	movw	r18, r24
    3160:	22 0f       	add	r18, r18
    3162:	33 1f       	adc	r19, r19
    3164:	f9 01       	movw	r30, r18
    3166:	e2 52       	subi	r30, 0x22	; 34
    3168:	f6 4c       	sbci	r31, 0xC6	; 198
    316a:	7f 01       	movw	r14, r30
    316c:	40 81       	ld	r20, Z
    316e:	51 81       	ldd	r21, Z+1	; 0x01
    3170:	f9 01       	movw	r30, r18
    3172:	e4 52       	subi	r30, 0x24	; 36
    3174:	f6 4c       	sbci	r31, 0xC6	; 198
    3176:	60 e0       	ldi	r22, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	73 da       	rcall	.-2842   	; 0x2664 <FindChild>
    317e:	d7 01       	movw	r26, r14
    3180:	8d 93       	st	X+, r24
    3182:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    3184:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	ee 0f       	add	r30, r30
    318c:	ff 1f       	adc	r31, r31
    318e:	e2 52       	subi	r30, 0x22	; 34
    3190:	f6 4c       	sbci	r31, 0xC6	; 198
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	09 f4       	brne	.+2      	; 0x319c <ProcessInput+0x37c>
    319a:	4a c0       	rjmp	.+148    	; 0x3230 <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    319c:	20 91 3f 38 	lds	r18, 0x383F	; 0x80383f <inventory>
    31a0:	30 91 40 38 	lds	r19, 0x3840	; 0x803840 <inventory+0x1>
    31a4:	82 17       	cp	r24, r18
    31a6:	93 07       	cpc	r25, r19
    31a8:	09 f4       	brne	.+2      	; 0x31ac <ProcessInput+0x38c>
    31aa:	42 c0       	rjmp	.+132    	; 0x3230 <ProcessInput+0x410>
    31ac:	20 91 41 38 	lds	r18, 0x3841	; 0x803841 <inventory+0x2>
    31b0:	30 91 42 38 	lds	r19, 0x3842	; 0x803842 <inventory+0x3>
    31b4:	82 17       	cp	r24, r18
    31b6:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    31b8:	d9 f1       	breq	.+118    	; 0x3230 <ProcessInput+0x410>
    31ba:	6b ed       	ldi	r22, 0xDB	; 219
    31bc:	78 e3       	ldi	r23, 0x38	; 56
    31be:	83 d9       	rcall	.-3322   	; 0x24c6 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    31c0:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <actObj1.3981+0x1a>
    31c4:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31c8:	e6 2d       	mov	r30, r6
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	df 01       	movw	r26, r30
    31ce:	aa 0f       	add	r26, r26
    31d0:	bb 1f       	adc	r27, r27
    31d2:	a4 5e       	subi	r26, 0xE4	; 228
    31d4:	b6 4c       	sbci	r27, 0xC6	; 198
    31d6:	20 91 e7 38 	lds	r18, 0x38E7	; 0x8038e7 <actObj1.3981+0xc>
    31da:	30 91 e8 38 	lds	r19, 0x38E8	; 0x8038e8 <actObj1.3981+0xd>
    31de:	2d 93       	st	X+, r18
    31e0:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    31e2:	df 01       	movw	r26, r30
    31e4:	aa 0f       	add	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	a4 5a       	subi	r26, 0xA4	; 164
    31ea:	b6 4c       	sbci	r27, 0xC6	; 198
    31ec:	8d 93       	st	X+, r24
    31ee:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    31f0:	ee 0f       	add	r30, r30
    31f2:	ff 1f       	adc	r31, r31
    31f4:	e4 56       	subi	r30, 0x64	; 100
    31f6:	f6 4c       	sbci	r31, 0xC6	; 198
    31f8:	10 82       	st	Z, r1
    31fa:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	86 0d       	add	r24, r6
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	63 94       	inc	r6
    3204:	63 94       	inc	r6
    3206:	fc 01       	movw	r30, r24
    3208:	ee 0f       	add	r30, r30
    320a:	ff 1f       	adc	r31, r31
    320c:	e4 5e       	subi	r30, 0xE4	; 228
    320e:	f6 4c       	sbci	r31, 0xC6	; 198
    3210:	c0 82       	st	Z, r12
    3212:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    3214:	fc 01       	movw	r30, r24
    3216:	ee 0f       	add	r30, r30
    3218:	ff 1f       	adc	r31, r31
    321a:	e4 5a       	subi	r30, 0xA4	; 164
    321c:	f6 4c       	sbci	r31, 0xC6	; 198
    321e:	a0 82       	st	Z, r10
    3220:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	fc 01       	movw	r30, r24
    3228:	e4 56       	subi	r30, 0x64	; 100
    322a:	f6 4c       	sbci	r31, 0xC6	; 198
    322c:	80 82       	st	Z, r8
    322e:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    3230:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    3234:	82 2f       	mov	r24, r18
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	fc 01       	movw	r30, r24
    323a:	ee 0f       	add	r30, r30
    323c:	ff 1f       	adc	r31, r31
    323e:	e2 52       	subi	r30, 0x22	; 34
    3240:	f6 4c       	sbci	r31, 0xC6	; 198
    3242:	40 81       	ld	r20, Z
    3244:	51 81       	ldd	r21, Z+1	; 0x01
    3246:	45 2b       	or	r20, r21
    3248:	09 f0       	breq	.+2      	; 0x324c <ProcessInput+0x42c>
    324a:	86 cf       	rjmp	.-244    	; 0x3158 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    324c:	22 23       	and	r18, r18
    324e:	69 f1       	breq	.+90     	; 0x32aa <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	fc 01       	movw	r30, r24
    3256:	e6 52       	subi	r30, 0x26	; 38
    3258:	f6 4c       	sbci	r31, 0xC6	; 198
    325a:	6b ed       	ldi	r22, 0xDB	; 219
    325c:	78 e3       	ldi	r23, 0x38	; 56
    325e:	80 81       	ld	r24, Z
    3260:	91 81       	ldd	r25, Z+1	; 0x01
    3262:	31 d9       	rcall	.-3486   	; 0x24c6 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3264:	20 91 f5 38 	lds	r18, 0x38F5	; 0x8038f5 <actObj1.3981+0x1a>
    3268:	30 91 f6 38 	lds	r19, 0x38F6	; 0x8038f6 <actObj1.3981+0x1b>
    326c:	77 24       	eor	r7, r7
    326e:	73 94       	inc	r7
    3270:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3272:	86 2d       	mov	r24, r6
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	fc 01       	movw	r30, r24
    3278:	ee 0f       	add	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	e4 5e       	subi	r30, 0xE4	; 228
    327e:	f6 4c       	sbci	r31, 0xC6	; 198
    3280:	40 91 e7 38 	lds	r20, 0x38E7	; 0x8038e7 <actObj1.3981+0xc>
    3284:	50 91 e8 38 	lds	r21, 0x38E8	; 0x8038e8 <actObj1.3981+0xd>
    3288:	40 83       	st	Z, r20
    328a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    328c:	fc 01       	movw	r30, r24
    328e:	ee 0f       	add	r30, r30
    3290:	ff 1f       	adc	r31, r31
    3292:	e4 5a       	subi	r30, 0xA4	; 164
    3294:	f6 4c       	sbci	r31, 0xC6	; 198
    3296:	20 83       	st	Z, r18
    3298:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	fc 01       	movw	r30, r24
    32a0:	e4 56       	subi	r30, 0x64	; 100
    32a2:	f6 4c       	sbci	r31, 0xC6	; 198
    32a4:	10 82       	st	Z, r1
    32a6:	11 82       	std	Z+1, r1	; 0x01
    32a8:	bd c5       	rjmp	.+2938   	; 0x3e24 <ProcessInput+0x1004>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    32aa:	77 24       	eor	r7, r7
    32ac:	7a 94       	dec	r7
    32ae:	76 0c       	add	r7, r6
    32b0:	b9 c5       	rjmp	.+2930   	; 0x3e24 <ProcessInput+0x1004>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    32b2:	ee 2e       	mov	r14, r30
    32b4:	f1 2c       	mov	r15, r1
    32b6:	f7 01       	movw	r30, r14
    32b8:	ee 0f       	add	r30, r30
    32ba:	ff 1f       	adc	r31, r31
    32bc:	e4 52       	subi	r30, 0x24	; 36
    32be:	f6 4c       	sbci	r31, 0xC6	; 198
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	50 e0       	ldi	r21, 0x00	; 0
    32c4:	d8 01       	movw	r26, r16
    32c6:	11 96       	adiw	r26, 0x01	; 1
    32c8:	6c 91       	ld	r22, X
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	ca d9       	rcall	.-3180   	; 0x2664 <FindChild>
    32d0:	f7 01       	movw	r30, r14
    32d2:	ee 0f       	add	r30, r30
    32d4:	ff 1f       	adc	r31, r31
    32d6:	e2 52       	subi	r30, 0x22	; 34
    32d8:	f6 4c       	sbci	r31, 0xC6	; 198
    32da:	80 83       	st	Z, r24
    32dc:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    32de:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    32e2:	29 2f       	mov	r18, r25
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	f9 01       	movw	r30, r18
    32e8:	ee 0f       	add	r30, r30
    32ea:	ff 1f       	adc	r31, r31
    32ec:	e2 52       	subi	r30, 0x22	; 34
    32ee:	f6 4c       	sbci	r31, 0xC6	; 198
    32f0:	40 81       	ld	r20, Z
    32f2:	51 81       	ldd	r21, Z+1	; 0x01
    32f4:	41 15       	cp	r20, r1
    32f6:	51 05       	cpc	r21, r1
    32f8:	21 f0       	breq	.+8      	; 0x3302 <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    32fa:	6b ed       	ldi	r22, 0xDB	; 219
    32fc:	78 e3       	ldi	r23, 0x38	; 56
    32fe:	ca 01       	movw	r24, r20
    3300:	1e c0       	rjmp	.+60     	; 0x333e <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    3302:	99 23       	and	r25, r25
    3304:	09 f4       	brne	.+2      	; 0x3308 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    3306:	c0 c5       	rjmp	.+2944   	; 0x3e88 <ProcessInput+0x1068>
    3308:	22 0f       	add	r18, r18
    330a:	33 1f       	adc	r19, r19
    330c:	f9 01       	movw	r30, r18
    330e:	e6 52       	subi	r30, 0x26	; 38
    3310:	f6 4c       	sbci	r31, 0xC6	; 198
    3312:	d8 01       	movw	r26, r16
    3314:	11 96       	adiw	r26, 0x01	; 1
    3316:	6c 91       	ld	r22, X
    3318:	80 81       	ld	r24, Z
    331a:	91 81       	ldd	r25, Z+1	; 0x01
    331c:	4d d9       	rcall	.-3430   	; 0x25b8 <CheckLetter>
    331e:	81 11       	cpse	r24, r1
    3320:	03 c0       	rjmp	.+6      	; 0x3328 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    3322:	77 24       	eor	r7, r7
    3324:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    3326:	7e c5       	rjmp	.+2812   	; 0x3e24 <ProcessInput+0x1004>
    3328:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	ee 0f       	add	r30, r30
    3330:	ff 1f       	adc	r31, r31
    3332:	e6 52       	subi	r30, 0x26	; 38
    3334:	f6 4c       	sbci	r31, 0xC6	; 198
    3336:	6b ed       	ldi	r22, 0xDB	; 219
    3338:	78 e3       	ldi	r23, 0x38	; 56
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	c3 d8       	rcall	.-3706   	; 0x24c6 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    3340:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3981+0x1c>
    3344:	90 91 f8 38 	lds	r25, 0x38F8	; 0x8038f8 <actObj1.3981+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3348:	20 91 e9 38 	lds	r18, 0x38E9	; 0x8038e9 <actObj1.3981+0xe>
    334c:	30 91 ea 38 	lds	r19, 0x38EA	; 0x8038ea <actObj1.3981+0xf>
    3350:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3354:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3358:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    335c:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3360:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3364:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
    3368:	2a ce       	rjmp	.-940    	; 0x2fbe <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    336a:	80 37       	cpi	r24, 0x70	; 112
    336c:	09 f0       	breq	.+2      	; 0x3370 <ProcessInput+0x550>
    336e:	9a c0       	rjmp	.+308    	; 0x34a4 <ProcessInput+0x684>
            if (inventory[0]&&inventory[1]) {
    3370:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <inventory>
    3374:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <inventory+0x1>
    3378:	89 2b       	or	r24, r25
    337a:	79 f0       	breq	.+30     	; 0x339a <ProcessInput+0x57a>
    337c:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <inventory+0x2>
    3380:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <inventory+0x3>
    3384:	89 2b       	or	r24, r25
    3386:	49 f0       	breq	.+18     	; 0x339a <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3388:	87 e0       	ldi	r24, 0x07	; 7
    338a:	98 e7       	ldi	r25, 0x78	; 120
    338c:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3390:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3394:	89 e5       	ldi	r24, 0x59	; 89
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	08 ce       	rjmp	.-1008   	; 0x2faa <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    339a:	b2 e0       	ldi	r27, 0x02	; 2
    339c:	fb 12       	cpse	r15, r27
    339e:	70 cd       	rjmp	.-1312   	; 0x2e80 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    33a0:	e0 90 2e 38 	lds	r14, 0x382E	; 0x80382e <currDepth>
    33a4:	f1 2c       	mov	r15, r1
    33a6:	f7 01       	movw	r30, r14
    33a8:	ee 0f       	add	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	e4 52       	subi	r30, 0x24	; 36
    33ae:	f6 4c       	sbci	r31, 0xC6	; 198
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	d8 01       	movw	r26, r16
    33b6:	11 96       	adiw	r26, 0x01	; 1
    33b8:	6c 91       	ld	r22, X
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	52 d9       	rcall	.-3420   	; 0x2664 <FindChild>
    33c0:	f7 01       	movw	r30, r14
    33c2:	ee 0f       	add	r30, r30
    33c4:	ff 1f       	adc	r31, r31
    33c6:	e2 52       	subi	r30, 0x22	; 34
    33c8:	f6 4c       	sbci	r31, 0xC6	; 198
    33ca:	80 83       	st	Z, r24
    33cc:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    33ce:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	2f 5f       	subi	r18, 0xFF	; 255
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	22 0f       	add	r18, r18
    33da:	33 1f       	adc	r19, r19
    33dc:	f9 01       	movw	r30, r18
    33de:	e4 52       	subi	r30, 0x24	; 36
    33e0:	f6 4c       	sbci	r31, 0xC6	; 198
    33e2:	80 81       	ld	r24, Z
    33e4:	91 81       	ldd	r25, Z+1	; 0x01
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	09 f4       	brne	.+2      	; 0x33ec <ProcessInput+0x5cc>
    33ea:	ce c3       	rjmp	.+1948   	; 0x3b88 <ProcessInput+0xd68>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    33ec:	40 91 3f 38 	lds	r20, 0x383F	; 0x80383f <inventory>
    33f0:	50 91 40 38 	lds	r21, 0x3840	; 0x803840 <inventory+0x1>
    33f4:	84 17       	cp	r24, r20
    33f6:	95 07       	cpc	r25, r21
    33f8:	39 f0       	breq	.+14     	; 0x3408 <ProcessInput+0x5e8>
    33fa:	40 91 41 38 	lds	r20, 0x3841	; 0x803841 <inventory+0x2>
    33fe:	50 91 42 38 	lds	r21, 0x3842	; 0x803842 <inventory+0x3>
    3402:	84 17       	cp	r24, r20
    3404:	95 07       	cpc	r25, r21
    3406:	c1 f4       	brne	.+48     	; 0x3438 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3408:	82 ee       	ldi	r24, 0xE2	; 226
    340a:	97 e7       	ldi	r25, 0x77	; 119
    340c:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3410:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3414:	85 e2       	ldi	r24, 0x25	; 37
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    341c:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    3428:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    342c:	f9 01       	movw	r30, r18
    342e:	e4 52       	subi	r30, 0x24	; 36
    3430:	f6 4c       	sbci	r31, 0xC6	; 198
    3432:	10 82       	st	Z, r1
    3434:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3436:	c3 cd       	rjmp	.-1146   	; 0x2fbe <ProcessInput+0x19e>
    3438:	6b ed       	ldi	r22, 0xDB	; 219
    343a:	78 e3       	ldi	r23, 0x38	; 56
    343c:	44 d8       	rcall	.-3960   	; 0x24c6 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    343e:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3981+0x7>
    3442:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
    3446:	88 23       	and	r24, r24
    3448:	09 f4       	brne	.+2      	; 0x344c <ProcessInput+0x62c>
    344a:	79 c3       	rjmp	.+1778   	; 0x3b3e <ProcessInput+0xd1e>
                            if (actObj1.byteField[ITEM_NR]) {
    344c:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3981+0xb>
    3450:	88 23       	and	r24, r24
    3452:	09 f4       	brne	.+2      	; 0x3456 <ProcessInput+0x636>
    3454:	15 cd       	rjmp	.-1494   	; 0x2e80 <ProcessInput+0x60>
                                if (inventory[0]) {
    3456:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <inventory>
    345a:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <inventory+0x1>
    345e:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                                    inventory[1] = route[currDepth+1];
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	e2 52       	subi	r30, 0x22	; 34
    346a:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    346c:	89 2b       	or	r24, r25
    346e:	39 f0       	breq	.+14     	; 0x347e <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    3470:	80 81       	ld	r24, Z
    3472:	91 81       	ldd	r25, Z+1	; 0x01
    3474:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <inventory+0x2>
    3478:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <inventory+0x3>
    347c:	06 c0       	rjmp	.+12     	; 0x348a <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <inventory>
    3486:	90 93 40 38 	sts	0x3840, r25	; 0x803840 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    348a:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3981+0xa>
    348e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3492:	8c ec       	ldi	r24, 0xCC	; 204
    3494:	97 e7       	ldi	r25, 0x77	; 119
    3496:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    349a:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    349e:	86 e1       	ldi	r24, 0x16	; 22
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	5e c2       	rjmp	.+1212   	; 0x3960 <ProcessInput+0xb40>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    34a4:	84 36       	cpi	r24, 0x64	; 100
    34a6:	d9 f4       	brne	.+54     	; 0x34de <ProcessInput+0x6be>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    34a8:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <inventory>
    34ac:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <inventory+0x1>
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	09 f0       	breq	.+2      	; 0x34b6 <ProcessInput+0x696>
    34b4:	ec c4       	rjmp	.+2520   	; 0x3e8e <ProcessInput+0x106e>
    34b6:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <inventory+0x2>
    34ba:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <inventory+0x3>
    34be:	89 2b       	or	r24, r25
    34c0:	49 f4       	brne	.+18     	; 0x34d4 <ProcessInput+0x6b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c2:	86 ea       	ldi	r24, 0xA6	; 166
    34c4:	97 e7       	ldi	r25, 0x77	; 119
    34c6:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    34ca:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    34ce:	86 e2       	ldi	r24, 0x26	; 38
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	6b cd       	rjmp	.-1322   	; 0x2faa <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    34d4:	b2 e0       	ldi	r27, 0x02	; 2
    34d6:	fb 16       	cp	r15, r27
    34d8:	09 f4       	brne	.+2      	; 0x34dc <ProcessInput+0x6bc>
    34da:	40 c5       	rjmp	.+2688   	; 0x3f5c <ProcessInput+0x113c>
    34dc:	d1 cc       	rjmp	.-1630   	; 0x2e80 <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    34de:	89 36       	cpi	r24, 0x69	; 105
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <ProcessInput+0x6c4>
    34e2:	7b c0       	rjmp	.+246    	; 0x35da <ProcessInput+0x7ba>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    34e4:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <inventory>
    34e8:	90 91 40 38 	lds	r25, 0x3840	; 0x803840 <inventory+0x1>
    34ec:	89 2b       	or	r24, r25
    34ee:	31 f4       	brne	.+12     	; 0x34fc <ProcessInput+0x6dc>
    34f0:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <inventory+0x2>
    34f4:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <inventory+0x3>
    34f8:	89 2b       	or	r24, r25
    34fa:	19 f3       	breq	.-58     	; 0x34c2 <ProcessInput+0x6a2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34fc:	8c ec       	ldi	r24, 0xCC	; 204
    34fe:	97 e7       	ldi	r25, 0x77	; 119
    3500:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3504:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3508:	86 e1       	ldi	r24, 0x16	; 22
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3510:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    351c:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
    3520:	2f e3       	ldi	r18, 0x3F	; 63
    3522:	e2 2e       	mov	r14, r18
    3524:	28 e3       	ldi	r18, 0x38	; 56
    3526:	f2 2e       	mov	r15, r18
    3528:	33 e4       	ldi	r19, 0x43	; 67
    352a:	63 2e       	mov	r6, r19
    352c:	38 e3       	ldi	r19, 0x38	; 56
    352e:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    3530:	42 e0       	ldi	r20, 0x02	; 2
    3532:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3534:	57 e5       	ldi	r21, 0x57	; 87
    3536:	c5 2e       	mov	r12, r21
    3538:	5a e7       	ldi	r21, 0x7A	; 122
    353a:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    353c:	62 e0       	ldi	r22, 0x02	; 2
    353e:	a6 2e       	mov	r10, r22
    3540:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3542:	88 24       	eor	r8, r8
    3544:	83 94       	inc	r8
    3546:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3548:	d7 01       	movw	r26, r14
    354a:	8d 91       	ld	r24, X+
    354c:	9d 91       	ld	r25, X+
    354e:	7d 01       	movw	r14, r26
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	d9 f1       	breq	.+118    	; 0x35ca <ProcessInput+0x7aa>
                        PopulateObject(inventory[x], &actObj1);
    3554:	6b ed       	ldi	r22, 0xDB	; 219
    3556:	78 e3       	ldi	r23, 0x38	; 56
    3558:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    355c:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <actObj1.3981+0x1a>
    3560:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3564:	e5 2d       	mov	r30, r5
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	df 01       	movw	r26, r30
    356a:	aa 0f       	add	r26, r26
    356c:	bb 1f       	adc	r27, r27
    356e:	a4 5e       	subi	r26, 0xE4	; 228
    3570:	b6 4c       	sbci	r27, 0xC6	; 198
    3572:	20 91 e7 38 	lds	r18, 0x38E7	; 0x8038e7 <actObj1.3981+0xc>
    3576:	30 91 e8 38 	lds	r19, 0x38E8	; 0x8038e8 <actObj1.3981+0xd>
    357a:	2d 93       	st	X+, r18
    357c:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    357e:	df 01       	movw	r26, r30
    3580:	aa 0f       	add	r26, r26
    3582:	bb 1f       	adc	r27, r27
    3584:	a4 5a       	subi	r26, 0xA4	; 164
    3586:	b6 4c       	sbci	r27, 0xC6	; 198
    3588:	8d 93       	st	X+, r24
    358a:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    358c:	ee 0f       	add	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	e4 56       	subi	r30, 0x64	; 100
    3592:	f6 4c       	sbci	r31, 0xC6	; 198
    3594:	10 82       	st	Z, r1
    3596:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3598:	e1 e0       	ldi	r30, 0x01	; 1
    359a:	e5 0d       	add	r30, r5
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	53 94       	inc	r5
    35a0:	53 94       	inc	r5
    35a2:	df 01       	movw	r26, r30
    35a4:	aa 0f       	add	r26, r26
    35a6:	bb 1f       	adc	r27, r27
    35a8:	a4 5e       	subi	r26, 0xE4	; 228
    35aa:	b6 4c       	sbci	r27, 0xC6	; 198
    35ac:	cd 92       	st	X+, r12
    35ae:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    35b0:	df 01       	movw	r26, r30
    35b2:	aa 0f       	add	r26, r26
    35b4:	bb 1f       	adc	r27, r27
    35b6:	a4 5a       	subi	r26, 0xA4	; 164
    35b8:	b6 4c       	sbci	r27, 0xC6	; 198
    35ba:	ad 92       	st	X+, r10
    35bc:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	e4 56       	subi	r30, 0x64	; 100
    35c4:	f6 4c       	sbci	r31, 0xC6	; 198
    35c6:	80 82       	st	Z, r8
    35c8:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    35ca:	6e 14       	cp	r6, r14
    35cc:	7f 04       	cpc	r7, r15
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <ProcessInput+0x7b2>
    35d0:	bb cf       	rjmp	.-138    	; 0x3548 <ProcessInput+0x728>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    35d2:	77 24       	eor	r7, r7
    35d4:	7a 94       	dec	r7
    35d6:	75 0c       	add	r7, r5
    35d8:	25 c4       	rjmp	.+2122   	; 0x3e24 <ProcessInput+0x1004>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    35da:	9c e8       	ldi	r25, 0x8C	; 140
    35dc:	98 0f       	add	r25, r24
    35de:	92 30       	cpi	r25, 0x02	; 2
    35e0:	28 f0       	brcs	.+10     	; 0x35ec <ProcessInput+0x7cc>
    35e2:	87 36       	cpi	r24, 0x67	; 103
    35e4:	19 f0       	breq	.+6      	; 0x35ec <ProcessInput+0x7cc>
    35e6:	82 37       	cpi	r24, 0x72	; 114
    35e8:	09 f0       	breq	.+2      	; 0x35ec <ProcessInput+0x7cc>
    35ea:	d7 c2       	rjmp	.+1454   	; 0x3b9a <ProcessInput+0xd7a>
            if ((inputLen<2)||(inputLen>3)) {
    35ec:	8e ef       	ldi	r24, 0xFE	; 254
    35ee:	8f 0d       	add	r24, r15
    35f0:	82 30       	cpi	r24, 0x02	; 2
    35f2:	08 f0       	brcs	.+2      	; 0x35f6 <ProcessInput+0x7d6>
    35f4:	45 cc       	rjmp	.-1910   	; 0x2e80 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    35f6:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    35fa:	ce 2e       	mov	r12, r30
    35fc:	d1 2c       	mov	r13, r1
    35fe:	d8 01       	movw	r26, r16
    3600:	af 0d       	add	r26, r15
    3602:	b1 1d       	adc	r27, r1
    3604:	11 97       	sbiw	r26, 0x01	; 1
    3606:	f6 01       	movw	r30, r12
    3608:	ee 0f       	add	r30, r30
    360a:	ff 1f       	adc	r31, r31
    360c:	e4 52       	subi	r30, 0x24	; 36
    360e:	f6 4c       	sbci	r31, 0xC6	; 198
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	6c 91       	ld	r22, X
    3616:	80 81       	ld	r24, Z
    3618:	91 81       	ldd	r25, Z+1	; 0x01
    361a:	24 d8       	rcall	.-4024   	; 0x2664 <FindChild>
    361c:	f6 01       	movw	r30, r12
    361e:	ee 0f       	add	r30, r30
    3620:	ff 1f       	adc	r31, r31
    3622:	e2 52       	subi	r30, 0x22	; 34
    3624:	f6 4c       	sbci	r31, 0xC6	; 198
    3626:	80 83       	st	Z, r24
    3628:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    362a:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	ee 0f       	add	r30, r30
    3632:	ff 1f       	adc	r31, r31
    3634:	e2 52       	subi	r30, 0x22	; 34
    3636:	f6 4c       	sbci	r31, 0xC6	; 198
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	09 f4       	brne	.+2      	; 0x3642 <ProcessInput+0x822>
    3640:	9a c2       	rjmp	.+1332   	; 0x3b76 <ProcessInput+0xd56>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    3642:	b3 e0       	ldi	r27, 0x03	; 3
    3644:	fb 12       	cpse	r15, r27
    3646:	78 c1       	rjmp	.+752    	; 0x3938 <ProcessInput+0xb18>
    3648:	f8 01       	movw	r30, r16
    364a:	20 81       	ld	r18, Z
    364c:	25 37       	cpi	r18, 0x75	; 117
    364e:	19 f0       	breq	.+6      	; 0x3656 <ProcessInput+0x836>
    3650:	27 36       	cpi	r18, 0x67	; 103
    3652:	09 f0       	breq	.+2      	; 0x3656 <ProcessInput+0x836>
    3654:	71 c1       	rjmp	.+738    	; 0x3938 <ProcessInput+0xb18>
    3656:	61 2c       	mov	r6, r1
    3658:	77 24       	eor	r7, r7
    365a:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    365c:	51 e6       	ldi	r21, 0x61	; 97
    365e:	c5 2e       	mov	r12, r21
    3660:	59 e7       	ldi	r21, 0x79	; 121
    3662:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    3664:	61 e2       	ldi	r22, 0x21	; 33
    3666:	a6 2e       	mov	r10, r22
    3668:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    366a:	88 24       	eor	r8, r8
    366c:	83 94       	inc	r8
    366e:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    3670:	e6 2c       	mov	r14, r6
    3672:	f1 2c       	mov	r15, r1
    3674:	c7 01       	movw	r24, r14
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	9c 01       	movw	r18, r24
    367c:	21 5c       	subi	r18, 0xC1	; 193
    367e:	37 4c       	sbci	r19, 0xC7	; 199
    3680:	79 01       	movw	r14, r18
    3682:	d9 01       	movw	r26, r18
    3684:	8d 91       	ld	r24, X+
    3686:	9c 91       	ld	r25, X
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	81 f0       	breq	.+32     	; 0x36ac <ProcessInput+0x88c>
                                if (CheckLetter(inventory[x], data[1])) {
    368c:	f8 01       	movw	r30, r16
    368e:	61 81       	ldd	r22, Z+1	; 0x01
    3690:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <CheckLetter>
    3694:	88 23       	and	r24, r24
    3696:	51 f0       	breq	.+20     	; 0x36ac <ProcessInput+0x88c>
                                    PopulateObject(inventory[x], &actObj2);
    3698:	60 eb       	ldi	r22, 0xB0	; 176
    369a:	78 e3       	ldi	r23, 0x38	; 56
    369c:	d7 01       	movw	r26, r14
    369e:	8d 91       	ld	r24, X+
    36a0:	9c 91       	ld	r25, X
    36a2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>
                                    x = 2;
    36a6:	32 e0       	ldi	r19, 0x02	; 2
    36a8:	63 2e       	mov	r6, r19
    36aa:	1e c0       	rjmp	.+60     	; 0x36e8 <ProcessInput+0x8c8>
                                }
                            }
                            if (x == 1) { 
    36ac:	b1 e0       	ldi	r27, 0x01	; 1
    36ae:	6b 12       	cpse	r6, r27
    36b0:	1a c0       	rjmp	.+52     	; 0x36e6 <ProcessInput+0x8c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b2:	e7 2d       	mov	r30, r7
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	df 01       	movw	r26, r30
    36b8:	aa 0f       	add	r26, r26
    36ba:	bb 1f       	adc	r27, r27
    36bc:	a4 5e       	subi	r26, 0xE4	; 228
    36be:	b6 4c       	sbci	r27, 0xC6	; 198
    36c0:	cd 92       	st	X+, r12
    36c2:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    36c4:	df 01       	movw	r26, r30
    36c6:	aa 0f       	add	r26, r26
    36c8:	bb 1f       	adc	r27, r27
    36ca:	a4 5a       	subi	r26, 0xA4	; 164
    36cc:	b6 4c       	sbci	r27, 0xC6	; 198
    36ce:	ad 92       	st	X+, r10
    36d0:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    36d2:	ee 0f       	add	r30, r30
    36d4:	ff 1f       	adc	r31, r31
    36d6:	e4 56       	subi	r30, 0x64	; 100
    36d8:	f6 4c       	sbci	r31, 0xC6	; 198
    36da:	80 82       	st	Z, r8
    36dc:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    36de:	f8 01       	movw	r30, r16
    36e0:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    36e2:	73 94       	inc	r7
    36e4:	01 c0       	rjmp	.+2      	; 0x36e8 <ProcessInput+0x8c8>
    36e6:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    36e8:	63 94       	inc	r6
    36ea:	f1 e0       	ldi	r31, 0x01	; 1
    36ec:	6f 16       	cp	r6, r31
    36ee:	09 f4       	brne	.+2      	; 0x36f2 <ProcessInput+0x8d2>
    36f0:	bf cf       	rjmp	.-130    	; 0x3670 <ProcessInput+0x850>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    36f2:	d8 01       	movw	r26, r16
    36f4:	8c 91       	ld	r24, X
    36f6:	88 23       	and	r24, r24
    36f8:	09 f4       	brne	.+2      	; 0x36fc <ProcessInput+0x8dc>
    36fa:	94 c3       	rjmp	.+1832   	; 0x3e24 <ProcessInput+0x1004>
                            PopulateObject(route[currDepth+1], &actObj1);
    36fc:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	ee 0f       	add	r30, r30
    3704:	ff 1f       	adc	r31, r31
    3706:	e2 52       	subi	r30, 0x22	; 34
    3708:	f6 4c       	sbci	r31, 0xC6	; 198
    370a:	6b ed       	ldi	r22, 0xDB	; 219
    370c:	78 e3       	ldi	r23, 0x38	; 56
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3716:	e0 90 f9 38 	lds	r14, 0x38F9	; 0x8038f9 <actObj1.3981+0x1e>
    371a:	f0 90 fa 38 	lds	r15, 0x38FA	; 0x8038fa <actObj1.3981+0x1f>
    371e:	b1 e0       	ldi	r27, 0x01	; 1
    3720:	eb 16       	cp	r14, r27
    3722:	f1 04       	cpc	r15, r1
    3724:	09 f0       	breq	.+2      	; 0x3728 <ProcessInput+0x908>
    3726:	9a c0       	rjmp	.+308    	; 0x385c <ProcessInput+0xa3c>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3728:	98 01       	movw	r18, r16
    372a:	2e 5f       	subi	r18, 0xFE	; 254
    372c:	3f 4f       	sbci	r19, 0xFF	; 255
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	61 e0       	ldi	r22, 0x01	; 1
    3732:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3981+0x10>
    3736:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3981+0x11>
    373a:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
                                if (data[2] == '1') {
    373e:	f8 01       	movw	r30, r16
    3740:	42 81       	ldd	r20, Z+2	; 0x02
    3742:	21 e0       	ldi	r18, 0x01	; 1
    3744:	27 0d       	add	r18, r7
    3746:	87 2d       	mov	r24, r7
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	41 33       	cpi	r20, 0x31	; 49
    374c:	09 f0       	breq	.+2      	; 0x3750 <ProcessInput+0x930>
    374e:	6b c0       	rjmp	.+214    	; 0x3826 <ProcessInput+0xa06>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3750:	30 91 bb 38 	lds	r19, 0x38BB	; 0x8038bb <actObj2.3982+0xb>
                                    if ((item < 31)||(item > 34)) {
    3754:	51 ee       	ldi	r21, 0xE1	; 225
    3756:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3758:	fc 01       	movw	r30, r24
    375a:	ee 0f       	add	r30, r30
    375c:	ff 1f       	adc	r31, r31
    375e:	e4 5e       	subi	r30, 0xE4	; 228
    3760:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3762:	54 30       	cpi	r21, 0x04	; 4
    3764:	60 f0       	brcs	.+24     	; 0x377e <ProcessInput+0x95e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3766:	41 e0       	ldi	r20, 0x01	; 1
    3768:	59 e7       	ldi	r21, 0x79	; 121
    376a:	40 83       	st	Z, r20
    376c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    376e:	fc 01       	movw	r30, r24
    3770:	ee 0f       	add	r30, r30
    3772:	ff 1f       	adc	r31, r31
    3774:	e4 5a       	subi	r30, 0xA4	; 164
    3776:	f6 4c       	sbci	r31, 0xC6	; 198
    3778:	4a e1       	ldi	r20, 0x1A	; 26
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	64 c0       	rjmp	.+200    	; 0x3846 <ProcessInput+0xa26>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    377e:	60 e5       	ldi	r22, 0x50	; 80
    3780:	75 e7       	ldi	r23, 0x75	; 117
    3782:	60 83       	st	Z, r22
    3784:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3786:	fc 01       	movw	r30, r24
    3788:	ee 0f       	add	r30, r30
    378a:	ff 1f       	adc	r31, r31
    378c:	e4 5a       	subi	r30, 0xA4	; 164
    378e:	f6 4c       	sbci	r31, 0xC6	; 198
    3790:	62 eb       	ldi	r22, 0xB2	; 178
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	60 83       	st	Z, r22
    3796:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3798:	88 0f       	add	r24, r24
    379a:	99 1f       	adc	r25, r25
    379c:	fc 01       	movw	r30, r24
    379e:	e4 56       	subi	r30, 0x64	; 100
    37a0:	f6 4c       	sbci	r31, 0xC6	; 198
    37a2:	e0 82       	st	Z, r14
    37a4:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37a6:	82 2f       	mov	r24, r18
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	fc 01       	movw	r30, r24
    37ac:	ee 0f       	add	r30, r30
    37ae:	ff 1f       	adc	r31, r31
    37b0:	e4 5e       	subi	r30, 0xE4	; 228
    37b2:	f6 4c       	sbci	r31, 0xC6	; 198
    37b4:	69 e5       	ldi	r22, 0x59	; 89
    37b6:	7a e7       	ldi	r23, 0x7A	; 122
    37b8:	60 83       	st	Z, r22
    37ba:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    37bc:	fc 01       	movw	r30, r24
    37be:	ee 0f       	add	r30, r30
    37c0:	ff 1f       	adc	r31, r31
    37c2:	e4 5a       	subi	r30, 0xA4	; 164
    37c4:	f6 4c       	sbci	r31, 0xC6	; 198
    37c6:	62 e0       	ldi	r22, 0x02	; 2
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	60 83       	st	Z, r22
    37cc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	fc 01       	movw	r30, r24
    37d4:	e4 56       	subi	r30, 0x64	; 100
    37d6:	f6 4c       	sbci	r31, 0xC6	; 198
    37d8:	e0 82       	st	Z, r14
    37da:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	87 0d       	add	r24, r7
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	f3 e0       	ldi	r31, 0x03	; 3
    37e4:	7f 0e       	add	r7, r31
    37e6:	fc 01       	movw	r30, r24
    37e8:	ee 0f       	add	r30, r30
    37ea:	ff 1f       	adc	r31, r31
    37ec:	e4 5e       	subi	r30, 0xE4	; 228
    37ee:	f6 4c       	sbci	r31, 0xC6	; 198
    37f0:	6d ea       	ldi	r22, 0xAD	; 173
    37f2:	78 e7       	ldi	r23, 0x78	; 120
    37f4:	60 83       	st	Z, r22
    37f6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    37f8:	fc 01       	movw	r30, r24
    37fa:	ee 0f       	add	r30, r30
    37fc:	ff 1f       	adc	r31, r31
    37fe:	e4 5a       	subi	r30, 0xA4	; 164
    3800:	f6 4c       	sbci	r31, 0xC6	; 198
    3802:	62 e1       	ldi	r22, 0x12	; 18
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	60 83       	st	Z, r22
    3808:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	fc 01       	movw	r30, r24
    3810:	e4 56       	subi	r30, 0x64	; 100
    3812:	f6 4c       	sbci	r31, 0xC6	; 198
    3814:	e0 82       	st	Z, r14
    3816:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    3818:	40 93 0b 39 	sts	0x390B, r20	; 0x80390b <specialInput>
                                        specialInput[1] = item;
    381c:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <specialInput+0x1>
                                        specialInput[2] = 0;
    3820:	10 92 0d 39 	sts	0x390D, r1	; 0x80390d <specialInput+0x2>
    3824:	ff c2       	rjmp	.+1534   	; 0x3e24 <ProcessInput+0x1004>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3826:	fc 01       	movw	r30, r24
    3828:	ee 0f       	add	r30, r30
    382a:	ff 1f       	adc	r31, r31
    382c:	e4 5e       	subi	r30, 0xE4	; 228
    382e:	f6 4c       	sbci	r31, 0xC6	; 198
    3830:	42 e0       	ldi	r20, 0x02	; 2
    3832:	56 e7       	ldi	r21, 0x76	; 118
    3834:	40 83       	st	Z, r20
    3836:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3838:	fc 01       	movw	r30, r24
    383a:	ee 0f       	add	r30, r30
    383c:	ff 1f       	adc	r31, r31
    383e:	e4 5a       	subi	r30, 0xA4	; 164
    3840:	f6 4c       	sbci	r31, 0xC6	; 198
    3842:	42 e4       	ldi	r20, 0x42	; 66
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	40 83       	st	Z, r20
    3848:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	fc 01       	movw	r30, r24
    3850:	e4 56       	subi	r30, 0x64	; 100
    3852:	f6 4c       	sbci	r31, 0xC6	; 198
    3854:	e0 82       	st	Z, r14
    3856:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    3858:	72 2e       	mov	r7, r18
    385a:	e4 c2       	rjmp	.+1480   	; 0x3e24 <ProcessInput+0x1004>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    385c:	90 91 e4 38 	lds	r25, 0x38E4	; 0x8038e4 <actObj1.3981+0x9>
    3860:	80 91 bb 38 	lds	r24, 0x38BB	; 0x8038bb <actObj2.3982+0xb>
    3864:	98 13       	cpse	r25, r24
    3866:	2f c0       	rjmp	.+94     	; 0x38c6 <ProcessInput+0xaa6>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3868:	20 91 01 39 	lds	r18, 0x3901	; 0x803901 <actObj1.3981+0x26>
    386c:	30 91 02 39 	lds	r19, 0x3902	; 0x803902 <actObj1.3981+0x27>
    3870:	ff 24       	eor	r15, r15
    3872:	f3 94       	inc	r15
    3874:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3876:	87 2d       	mov	r24, r7
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	fc 01       	movw	r30, r24
    387c:	ee 0f       	add	r30, r30
    387e:	ff 1f       	adc	r31, r31
    3880:	e4 5e       	subi	r30, 0xE4	; 228
    3882:	f6 4c       	sbci	r31, 0xC6	; 198
    3884:	40 91 f3 38 	lds	r20, 0x38F3	; 0x8038f3 <actObj1.3981+0x18>
    3888:	50 91 f4 38 	lds	r21, 0x38F4	; 0x8038f4 <actObj1.3981+0x19>
    388c:	40 83       	st	Z, r20
    388e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3890:	fc 01       	movw	r30, r24
    3892:	ee 0f       	add	r30, r30
    3894:	ff 1f       	adc	r31, r31
    3896:	e4 5a       	subi	r30, 0xA4	; 164
    3898:	f6 4c       	sbci	r31, 0xC6	; 198
    389a:	20 83       	st	Z, r18
    389c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	fc 01       	movw	r30, r24
    38a4:	e4 56       	subi	r30, 0x64	; 100
    38a6:	f6 4c       	sbci	r31, 0xC6	; 198
    38a8:	10 82       	st	Z, r1
    38aa:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    38ac:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3981+0x2a>
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    38b6:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    38ba:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3981+0xa>
    38be:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    38c2:	7f 2c       	mov	r7, r15
    38c4:	af c2       	rjmp	.+1374   	; 0x3e24 <ProcessInput+0x1004>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    38c6:	d8 01       	movw	r26, r16
    38c8:	8c 91       	ld	r24, X
    38ca:	85 37       	cpi	r24, 0x75	; 117
    38cc:	99 f4       	brne	.+38     	; 0x38f4 <ProcessInput+0xad4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38ce:	87 2d       	mov	r24, r7
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	fc 01       	movw	r30, r24
    38d4:	ee 0f       	add	r30, r30
    38d6:	ff 1f       	adc	r31, r31
    38d8:	e4 5e       	subi	r30, 0xE4	; 228
    38da:	f6 4c       	sbci	r31, 0xC6	; 198
    38dc:	21 e0       	ldi	r18, 0x01	; 1
    38de:	39 e7       	ldi	r19, 0x79	; 121
    38e0:	20 83       	st	Z, r18
    38e2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    38e4:	fc 01       	movw	r30, r24
    38e6:	ee 0f       	add	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	e4 5a       	subi	r30, 0xA4	; 164
    38ec:	f6 4c       	sbci	r31, 0xC6	; 198
    38ee:	2a e1       	ldi	r18, 0x1A	; 26
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	15 c0       	rjmp	.+42     	; 0x391e <ProcessInput+0xafe>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    38f4:	87 36       	cpi	r24, 0x67	; 103
    38f6:	09 f0       	breq	.+2      	; 0x38fa <ProcessInput+0xada>
    38f8:	95 c2       	rjmp	.+1322   	; 0x3e24 <ProcessInput+0x1004>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38fa:	87 2d       	mov	r24, r7
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	fc 01       	movw	r30, r24
    3900:	ee 0f       	add	r30, r30
    3902:	ff 1f       	adc	r31, r31
    3904:	e4 5e       	subi	r30, 0xE4	; 228
    3906:	f6 4c       	sbci	r31, 0xC6	; 198
    3908:	2f e9       	ldi	r18, 0x9F	; 159
    390a:	36 e7       	ldi	r19, 0x76	; 118
    390c:	20 83       	st	Z, r18
    390e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3910:	fc 01       	movw	r30, r24
    3912:	ee 0f       	add	r30, r30
    3914:	ff 1f       	adc	r31, r31
    3916:	e4 5a       	subi	r30, 0xA4	; 164
    3918:	f6 4c       	sbci	r31, 0xC6	; 198
    391a:	28 e2       	ldi	r18, 0x28	; 40
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	20 83       	st	Z, r18
    3920:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3922:	88 0f       	add	r24, r24
    3924:	99 1f       	adc	r25, r25
    3926:	fc 01       	movw	r30, r24
    3928:	e4 56       	subi	r30, 0x64	; 100
    392a:	f6 4c       	sbci	r31, 0xC6	; 198
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	80 83       	st	Z, r24
    3932:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3934:	73 94       	inc	r7
    3936:	76 c2       	rjmp	.+1260   	; 0x3e24 <ProcessInput+0x1004>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3938:	6b ed       	ldi	r22, 0xDB	; 219
    393a:	78 e3       	ldi	r23, 0x38	; 56
    393c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3940:	f8 01       	movw	r30, r16
    3942:	80 81       	ld	r24, Z
    3944:	84 37       	cpi	r24, 0x74	; 116
    3946:	69 f5       	brne	.+90     	; 0x39a2 <ProcessInput+0xb82>
    3948:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3981+0x8>
    394c:	83 fd       	sbrc	r24, 3
    394e:	4a c0       	rjmp	.+148    	; 0x39e4 <ProcessInput+0xbc4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3950:	8b e1       	ldi	r24, 0x1B	; 27
    3952:	99 e7       	ldi	r25, 0x79	; 121
    3954:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3958:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    395c:	8e e1       	ldi	r24, 0x1E	; 30
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3964:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    3970:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3974:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <actObj1.3981+0x1a>
    3978:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    397c:	20 91 e7 38 	lds	r18, 0x38E7	; 0x8038e7 <actObj1.3981+0xc>
    3980:	30 91 e8 38 	lds	r19, 0x38E8	; 0x8038e8 <actObj1.3981+0xd>
    3984:	20 93 20 39 	sts	0x3920, r18	; 0x803920 <reactStr+0x4>
    3988:	30 93 21 39 	sts	0x3921, r19	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    398c:	80 93 60 39 	sts	0x3960, r24	; 0x803960 <reactStr+0x44>
    3990:	90 93 61 39 	sts	0x3961, r25	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    3994:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x84>
    3998:	10 92 a1 39 	sts	0x39A1, r1	; 0x8039a1 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    399c:	e3 e0       	ldi	r30, 0x03	; 3
    399e:	7e 2e       	mov	r7, r30
    39a0:	41 c2       	rjmp	.+1154   	; 0x3e24 <ProcessInput+0x1004>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    39a2:	85 37       	cpi	r24, 0x75	; 117
    39a4:	69 f4       	brne	.+26     	; 0x39c0 <ProcessInput+0xba0>
    39a6:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3981+0x8>
    39aa:	84 fd       	sbrc	r24, 4
    39ac:	1b c0       	rjmp	.+54     	; 0x39e4 <ProcessInput+0xbc4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	99 e7       	ldi	r25, 0x79	; 121
    39b2:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    39b6:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    39ba:	8a e1       	ldi	r24, 0x1A	; 26
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	f5 ca       	rjmp	.-2582   	; 0x2faa <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    39c0:	82 37       	cpi	r24, 0x72	; 114
    39c2:	69 f4       	brne	.+26     	; 0x39de <ProcessInput+0xbbe>
    39c4:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3981+0x8>
    39c8:	85 fd       	sbrc	r24, 5
    39ca:	0c c0       	rjmp	.+24     	; 0x39e4 <ProcessInput+0xbc4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39cc:	86 ee       	ldi	r24, 0xE6	; 230
    39ce:	98 e7       	ldi	r25, 0x78	; 120
    39d0:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    39d4:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    39d8:	8b e1       	ldi	r24, 0x1B	; 27
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	e6 ca       	rjmp	.-2612   	; 0x2faa <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    39de:	87 36       	cpi	r24, 0x67	; 103
    39e0:	09 f4       	brne	.+2      	; 0x39e4 <ProcessInput+0xbc4>
    39e2:	4e ca       	rjmp	.-2916   	; 0x2e80 <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    39e4:	e0 90 f9 38 	lds	r14, 0x38F9	; 0x8038f9 <actObj1.3981+0x1e>
    39e8:	f0 90 fa 38 	lds	r15, 0x38FA	; 0x8038fa <actObj1.3981+0x1f>
    39ec:	f1 e0       	ldi	r31, 0x01	; 1
    39ee:	ef 16       	cp	r14, r31
    39f0:	f1 04       	cpc	r15, r1
    39f2:	11 f5       	brne	.+68     	; 0x3a38 <ProcessInput+0xc18>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    39f4:	98 01       	movw	r18, r16
    39f6:	2e 5f       	subi	r18, 0xFE	; 254
    39f8:	3f 4f       	sbci	r19, 0xFF	; 255
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	61 e0       	ldi	r22, 0x01	; 1
    39fe:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3981+0x10>
    3a02:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3981+0x11>
    3a06:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
                                if (data[2] == '1') {
    3a0a:	d8 01       	movw	r26, r16
    3a0c:	12 96       	adiw	r26, 0x02	; 2
    3a0e:	8c 91       	ld	r24, X
    3a10:	81 33       	cpi	r24, 0x31	; 49
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <ProcessInput+0xbf6>
    3a14:	86 cc       	rjmp	.-1780   	; 0x3322 <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a16:	85 e2       	ldi	r24, 0x25	; 37
    3a18:	95 e7       	ldi	r25, 0x75	; 117
    3a1a:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3a1e:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3a22:	8b e2       	ldi	r24, 0x2B	; 43
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3a2a:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3a2e:	e0 92 9e 39 	sts	0x399E, r14	; 0x80399e <reactStr+0x82>
    3a32:	f0 92 9f 39 	sts	0x399F, r15	; 0x80399f <reactStr+0x83>
    3a36:	c3 ca       	rjmp	.-2682   	; 0x2fbe <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3a38:	e1 14       	cp	r14, r1
    3a3a:	f1 04       	cpc	r15, r1
    3a3c:	09 f4       	brne	.+2      	; 0x3a40 <ProcessInput+0xc20>
    3a3e:	59 c0       	rjmp	.+178    	; 0x3af2 <ProcessInput+0xcd2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a40:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3981+0x10>
    3a44:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3981+0x11>
    3a48:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3a4c:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3a50:	e0 92 5e 39 	sts	0x395E, r14	; 0x80395e <reactStr+0x42>
    3a54:	f0 92 5f 39 	sts	0x395F, r15	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3a58:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3a5c:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a60:	89 e5       	ldi	r24, 0x59	; 89
    3a62:	9a e7       	ldi	r25, 0x7A	; 122
    3a64:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <reactStr+0x4>
    3a68:	90 93 21 39 	sts	0x3921, r25	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    3a6c:	82 e0       	ldi	r24, 0x02	; 2
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	80 93 60 39 	sts	0x3960, r24	; 0x803960 <reactStr+0x44>
    3a74:	90 93 61 39 	sts	0x3961, r25	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	80 93 a0 39 	sts	0x39A0, r24	; 0x8039a0 <reactStr+0x84>
    3a80:	90 93 a1 39 	sts	0x39A1, r25	; 0x8039a1 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a84:	2d ea       	ldi	r18, 0xAD	; 173
    3a86:	38 e7       	ldi	r19, 0x78	; 120
    3a88:	20 93 22 39 	sts	0x3922, r18	; 0x803922 <reactStr+0x6>
    3a8c:	30 93 23 39 	sts	0x3923, r19	; 0x803923 <reactStr+0x7>
    reactStr[1][number]=length;
    3a90:	22 e1       	ldi	r18, 0x12	; 18
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	20 93 62 39 	sts	0x3962, r18	; 0x803962 <reactStr+0x46>
    3a98:	30 93 63 39 	sts	0x3963, r19	; 0x803963 <reactStr+0x47>
    reactStr[2][number]=type;
    3a9c:	80 93 a2 39 	sts	0x39A2, r24	; 0x8039a2 <reactStr+0x86>
    3aa0:	90 93 a3 39 	sts	0x39A3, r25	; 0x8039a3 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    3aa4:	80 91 fb 38 	lds	r24, 0x38FB	; 0x8038fb <actObj1.3981+0x20>
    3aa8:	90 91 fc 38 	lds	r25, 0x38FC	; 0x8038fc <actObj1.3981+0x21>
    3aac:	40 97       	sbiw	r24, 0x10	; 16
    3aae:	30 f0       	brcs	.+12     	; 0x3abc <ProcessInput+0xc9c>
    3ab0:	8f e0       	ldi	r24, 0x0F	; 15
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	80 93 fb 38 	sts	0x38FB, r24	; 0x8038fb <actObj1.3981+0x20>
    3ab8:	90 93 fc 38 	sts	0x38FC, r25	; 0x8038fc <actObj1.3981+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3abc:	2b e0       	ldi	r18, 0x0B	; 11
    3abe:	39 e3       	ldi	r19, 0x39	; 57
    3ac0:	40 e0       	ldi	r20, 0x00	; 0
    3ac2:	60 91 fb 38 	lds	r22, 0x38FB	; 0x8038fb <actObj1.3981+0x20>
    3ac6:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3981+0x12>
    3aca:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <actObj1.3981+0x13>
    3ace:	0e 94 91 08 	call	0x1122	; 0x1122 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3ad2:	6b e0       	ldi	r22, 0x0B	; 11
    3ad4:	79 e3       	ldi	r23, 0x39	; 57
    3ad6:	80 91 fb 38 	lds	r24, 0x38FB	; 0x8038fb <actObj1.3981+0x20>
    3ada:	0e 94 79 11 	call	0x22f2	; 0x22f2 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3ade:	e0 91 fb 38 	lds	r30, 0x38FB	; 0x8038fb <actObj1.3981+0x20>
    3ae2:	f0 91 fc 38 	lds	r31, 0x38FC	; 0x8038fc <actObj1.3981+0x21>
    3ae6:	e5 5f       	subi	r30, 0xF5	; 245
    3ae8:	f6 4c       	sbci	r31, 0xC6	; 198
    3aea:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3aec:	74 e0       	ldi	r23, 0x04	; 4
    3aee:	77 2e       	mov	r7, r23
    3af0:	99 c1       	rjmp	.+818    	; 0x3e24 <ProcessInput+0x1004>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3af2:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3981+0x7>
    3af6:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
    3afa:	88 23       	and	r24, r24
    3afc:	01 f1       	breq	.+64     	; 0x3b3e <ProcessInput+0xd1e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3afe:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <actObj1.3981+0x26>
    3b02:	90 91 02 39 	lds	r25, 0x3902	; 0x803902 <actObj1.3981+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b06:	20 91 f3 38 	lds	r18, 0x38F3	; 0x8038f3 <actObj1.3981+0x18>
    3b0a:	30 91 f4 38 	lds	r19, 0x38F4	; 0x8038f4 <actObj1.3981+0x19>
    3b0e:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3b12:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3b16:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3b1a:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3b1e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3b22:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3b26:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3981+0x2a>
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    3b30:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3b34:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3981+0xa>
    3b38:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
    3b3c:	40 ca       	rjmp	.-2944   	; 0x2fbe <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3b3e:	80 91 ff 38 	lds	r24, 0x38FF	; 0x8038ff <actObj1.3981+0x24>
    3b42:	90 91 00 39 	lds	r25, 0x3900	; 0x803900 <actObj1.3981+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b46:	20 91 f1 38 	lds	r18, 0x38F1	; 0x8038f1 <actObj1.3981+0x16>
    3b4a:	30 91 f2 38 	lds	r19, 0x38F2	; 0x8038f2 <actObj1.3981+0x17>
    3b4e:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3b52:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3b56:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3b5a:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3b5e:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3b62:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3b66:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3981+0x29>
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    3b70:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
    3b74:	24 ca       	rjmp	.-3000   	; 0x2fbe <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3b76:	f8 01       	movw	r30, r16
    3b78:	80 81       	ld	r24, Z
    3b7a:	84 37       	cpi	r24, 0x74	; 116
    3b7c:	11 f0       	breq	.+4      	; 0x3b82 <ProcessInput+0xd62>
    3b7e:	87 36       	cpi	r24, 0x67	; 103
    3b80:	19 f4       	brne	.+6      	; 0x3b88 <ProcessInput+0xd68>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b82:	89 e3       	ldi	r24, 0x39	; 57
    3b84:	99 e7       	ldi	r25, 0x79	; 121
    3b86:	02 c0       	rjmp	.+4      	; 0x3b8c <ProcessInput+0xd6c>
    3b88:	8d e4       	ldi	r24, 0x4D	; 77
    3b8a:	99 e7       	ldi	r25, 0x79	; 121
    3b8c:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3b90:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3b94:	84 e1       	ldi	r24, 0x14	; 20
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	08 ca       	rjmp	.-3056   	; 0x2faa <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3b9a:	81 36       	cpi	r24, 0x61	; 97
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <ProcessInput+0xd80>
    3b9e:	c1 cb       	rjmp	.-2174   	; 0x3322 <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3ba0:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialPassed>
    3ba4:	82 30       	cpi	r24, 0x02	; 2
    3ba6:	08 f4       	brcc	.+2      	; 0x3baa <ProcessInput+0xd8a>
    3ba8:	cb c0       	rjmp	.+406    	; 0x3d40 <ProcessInput+0xf20>
                if (data[1] > 0) {
    3baa:	d8 01       	movw	r26, r16
    3bac:	11 96       	adiw	r26, 0x01	; 1
    3bae:	2c 91       	ld	r18, X
    3bb0:	22 23       	and	r18, r18
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <ProcessInput+0xd96>
    3bb4:	b2 c0       	rjmp	.+356    	; 0x3d1a <ProcessInput+0xefa>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	31 96       	adiw	r30, 0x01	; 1
    3bba:	7f 01       	movw	r14, r30
    3bbc:	88 e0       	ldi	r24, 0x08	; 8
    3bbe:	df 01       	movw	r26, r30
    3bc0:	1d 92       	st	X+, r1
    3bc2:	8a 95       	dec	r24
    3bc4:	e9 f7       	brne	.-6      	; 0x3bc0 <ProcessInput+0xda0>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3bc6:	20 53       	subi	r18, 0x30	; 48
    3bc8:	f8 01       	movw	r30, r16
    3bca:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3bcc:	32 81       	ldd	r19, Z+2	; 0x02
    3bce:	31 53       	subi	r19, 0x31	; 49
    3bd0:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3bd2:	83 81       	ldd	r24, Z+3	; 0x03
    3bd4:	81 36       	cpi	r24, 0x61	; 97
    3bd6:	11 f4       	brne	.+4      	; 0x3bdc <ProcessInput+0xdbc>
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	08 c0       	rjmp	.+16     	; 0x3bec <ProcessInput+0xdcc>
                    else if (data[3] == 'e') data[3] = 0;
    3bdc:	85 36       	cpi	r24, 0x65	; 101
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <ProcessInput+0xdc4>
    3be0:	13 82       	std	Z+3, r1	; 0x03
    3be2:	08 c0       	rjmp	.+16     	; 0x3bf4 <ProcessInput+0xdd4>
                    else if (data[3] == 'f') data[3] = 3;
    3be4:	86 36       	cpi	r24, 0x66	; 102
    3be6:	21 f4       	brne	.+8      	; 0x3bf0 <ProcessInput+0xdd0>
    3be8:	83 e0       	ldi	r24, 0x03	; 3
    3bea:	f8 01       	movw	r30, r16
    3bec:	83 83       	std	Z+3, r24	; 0x03
    3bee:	02 c0       	rjmp	.+4      	; 0x3bf4 <ProcessInput+0xdd4>
                    else data[3] = 2;
    3bf0:	82 e0       	ldi	r24, 0x02	; 2
    3bf2:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3bf4:	21 fd       	sbrc	r18, 1
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <ProcessInput+0xde0>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	04 c0       	rjmp	.+8      	; 0x3c08 <ProcessInput+0xde8>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	a0 e1       	ldi	r26, 0x10	; 16
    3c06:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3c08:	20 ff       	sbrs	r18, 0
    3c0a:	03 c0       	rjmp	.+6      	; 0x3c12 <ProcessInput+0xdf2>
    3c0c:	9f 5f       	subi	r25, 0xFF	; 255
    3c0e:	af 4f       	sbci	r26, 0xFF	; 255
    3c10:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3c12:	f8 01       	movw	r30, r16
    3c14:	23 81       	ldd	r18, Z+3	; 0x03
    3c16:	21 fd       	sbrc	r18, 1
    3c18:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3c1a:	20 ff       	sbrs	r18, 0
    3c1c:	03 c0       	rjmp	.+6      	; 0x3c24 <ProcessInput+0xe04>
    3c1e:	40 96       	adiw	r24, 0x10	; 16
    3c20:	a1 1d       	adc	r26, r1
    3c22:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3c24:	31 ff       	sbrs	r19, 1
    3c26:	03 c0       	rjmp	.+6      	; 0x3c2e <ProcessInput+0xe0e>
    3c28:	90 5f       	subi	r25, 0xF0	; 240
    3c2a:	af 4f       	sbci	r26, 0xFF	; 255
    3c2c:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3c2e:	30 ff       	sbrs	r19, 0
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <ProcessInput+0xe18>
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	a1 1d       	adc	r26, r1
    3c36:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3c38:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <whoami>
    3c3c:	24 e0       	ldi	r18, 0x04	; 4
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	24 1b       	sub	r18, r20
    3c42:	31 09       	sbc	r19, r1
    3c44:	04 c0       	rjmp	.+8      	; 0x3c4e <ProcessInput+0xe2e>
    3c46:	88 0f       	add	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	aa 1f       	adc	r26, r26
    3c4c:	bb 1f       	adc	r27, r27
    3c4e:	2a 95       	dec	r18
    3c50:	d2 f7       	brpl	.-12     	; 0x3c46 <ProcessInput+0xe26>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c52:	28 ec       	ldi	r18, 0xC8	; 200
    3c54:	34 e7       	ldi	r19, 0x74	; 116
    3c56:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3c5a:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3c5e:	20 e2       	ldi	r18, 0x20	; 32
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	20 93 5e 39 	sts	0x395E, r18	; 0x80395e <reactStr+0x42>
    3c66:	30 93 5f 39 	sts	0x395F, r19	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3c6a:	21 e0       	ldi	r18, 0x01	; 1
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	20 93 9e 39 	sts	0x399E, r18	; 0x80399e <reactStr+0x82>
    3c72:	30 93 9f 39 	sts	0x399F, r19	; 0x80399f <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c76:	4d e9       	ldi	r20, 0x9D	; 157
    3c78:	54 e7       	ldi	r21, 0x74	; 116
    3c7a:	40 93 20 39 	sts	0x3920, r20	; 0x803920 <reactStr+0x4>
    3c7e:	50 93 21 39 	sts	0x3921, r21	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    3c82:	42 e0       	ldi	r20, 0x02	; 2
    3c84:	50 e0       	ldi	r21, 0x00	; 0
    3c86:	40 93 60 39 	sts	0x3960, r20	; 0x803960 <reactStr+0x44>
    3c8a:	50 93 61 39 	sts	0x3961, r21	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    3c8e:	20 93 a0 39 	sts	0x39A0, r18	; 0x8039a0 <reactStr+0x84>
    3c92:	30 93 a1 39 	sts	0x39A1, r19	; 0x8039a1 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3c96:	67 e0       	ldi	r22, 0x07	; 7
    3c98:	d6 2e       	mov	r13, r22
                        digit[n] = answer % 16;
    3c9a:	f7 01       	movw	r30, r14
    3c9c:	ed 0d       	add	r30, r13
    3c9e:	f1 1d       	adc	r31, r1
    3ca0:	28 2f       	mov	r18, r24
    3ca2:	2f 70       	andi	r18, 0x0F	; 15
    3ca4:	20 83       	st	Z, r18
                        answer /= 16;
    3ca6:	54 e0       	ldi	r21, 0x04	; 4
    3ca8:	b6 95       	lsr	r27
    3caa:	a7 95       	ror	r26
    3cac:	97 95       	ror	r25
    3cae:	87 95       	ror	r24
    3cb0:	5a 95       	dec	r21
    3cb2:	d1 f7       	brne	.-12     	; 0x3ca8 <ProcessInput+0xe88>
                        if (answer == 0) break;
    3cb4:	00 97       	sbiw	r24, 0x00	; 0
    3cb6:	a1 05       	cpc	r26, r1
    3cb8:	b1 05       	cpc	r27, r1
    3cba:	51 f4       	brne	.+20     	; 0x3cd0 <ProcessInput+0xeb0>
    3cbc:	2c e1       	ldi	r18, 0x1C	; 28
    3cbe:	a2 2e       	mov	r10, r18
    3cc0:	29 e3       	ldi	r18, 0x39	; 57
    3cc2:	b2 2e       	mov	r11, r18
    3cc4:	33 e0       	ldi	r19, 0x03	; 3
    3cc6:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3cc8:	88 24       	eor	r8, r8
    3cca:	83 94       	inc	r8
    3ccc:	91 2c       	mov	r9, r1
    3cce:	02 c0       	rjmp	.+4      	; 0x3cd4 <ProcessInput+0xeb4>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3cd0:	da 94       	dec	r13
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3cd2:	e3 cf       	rjmp	.-58     	; 0x3c9a <ProcessInput+0xe7a>
    3cd4:	b2 e0       	ldi	r27, 0x02	; 2
    3cd6:	ab 0e       	add	r10, r27
    3cd8:	b1 1c       	adc	r11, r1

                    for (; n<8; ++n) {
    3cda:	e7 e0       	ldi	r30, 0x07	; 7
    3cdc:	ed 15       	cp	r30, r13
    3cde:	08 f4       	brcc	.+2      	; 0x3ce2 <ProcessInput+0xec2>
    3ce0:	9f c0       	rjmp	.+318    	; 0x3e20 <ProcessInput+0x1000>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3ce2:	73 94       	inc	r7
    3ce4:	f7 01       	movw	r30, r14
    3ce6:	ed 0d       	add	r30, r13
    3ce8:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cea:	80 81       	ld	r24, Z
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	83 57       	subi	r24, 0x73	; 115
    3cf0:	9b 48       	sbci	r25, 0x8B	; 139
    3cf2:	d5 01       	movw	r26, r10
    3cf4:	14 96       	adiw	r26, 0x04	; 4
    3cf6:	8d 93       	st	X+, r24
    3cf8:	9c 93       	st	X, r25
    3cfa:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3cfc:	f5 01       	movw	r30, r10
    3cfe:	ec 5b       	subi	r30, 0xBC	; 188
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	80 82       	st	Z, r8
    3d04:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    3d06:	e0 5c       	subi	r30, 0xC0	; 192
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 82       	st	Z, r8
    3d0c:	91 82       	std	Z+1, r9	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3d0e:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3981+0xa>
    3d12:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3d16:	d3 94       	inc	r13
    3d18:	dd cf       	rjmp	.-70     	; 0x3cd4 <ProcessInput+0xeb4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d1a:	88 ee       	ldi	r24, 0xE8	; 232
    3d1c:	94 e7       	ldi	r25, 0x74	; 116
    3d1e:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3d22:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3d26:	8d e3       	ldi	r24, 0x3D	; 61
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3d2e:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    3d3a:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
    3d3e:	6e c0       	rjmp	.+220    	; 0x3e1c <ProcessInput+0xffc>
    3d40:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3d44:	f0 e0       	ldi	r31, 0x00	; 0
    3d46:	ee 0f       	add	r30, r30
    3d48:	ff 1f       	adc	r31, r31
    3d4a:	e2 52       	subi	r30, 0x22	; 34
    3d4c:	f6 4c       	sbci	r31, 0xC6	; 198
    3d4e:	6b ed       	ldi	r22, 0xDB	; 219
    3d50:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3d52:	81 30       	cpi	r24, 0x01	; 1
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <ProcessInput+0xf38>
    3d56:	46 c0       	rjmp	.+140    	; 0x3de4 <ProcessInput+0xfc4>
                PopulateObject(route[currDepth+1], &actObj1);
    3d58:	80 81       	ld	r24, Z
    3d5a:	91 81       	ldd	r25, Z+1	; 0x01
    3d5c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3d60:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3981+0x7>
    3d64:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckState>
    3d68:	88 23       	and	r24, r24
    3d6a:	01 f1       	breq	.+64     	; 0x3dac <ProcessInput+0xf8c>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3d6c:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <actObj1.3981+0x26>
    3d70:	90 91 02 39 	lds	r25, 0x3902	; 0x803902 <actObj1.3981+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d74:	20 91 f3 38 	lds	r18, 0x38F3	; 0x8038f3 <actObj1.3981+0x18>
    3d78:	30 91 f4 38 	lds	r19, 0x38F4	; 0x8038f4 <actObj1.3981+0x19>
    3d7c:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3d80:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3d84:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3d88:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3d8c:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3d90:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3d94:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3981+0x2a>
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    3d9e:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3da2:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3981+0xa>
    3da6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <UpdateState>
    3daa:	38 c0       	rjmp	.+112    	; 0x3e1c <ProcessInput+0xffc>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3dac:	80 91 ff 38 	lds	r24, 0x38FF	; 0x8038ff <actObj1.3981+0x24>
    3db0:	90 91 00 39 	lds	r25, 0x3900	; 0x803900 <actObj1.3981+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3db4:	20 91 f1 38 	lds	r18, 0x38F1	; 0x8038f1 <actObj1.3981+0x16>
    3db8:	30 91 f2 38 	lds	r19, 0x38F2	; 0x8038f2 <actObj1.3981+0x17>
    3dbc:	20 93 1e 39 	sts	0x391E, r18	; 0x80391e <reactStr+0x2>
    3dc0:	30 93 1f 39 	sts	0x391F, r19	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3dc4:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3dc8:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3dcc:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x82>
    3dd0:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3dd4:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3981+0x29>
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <effect>
    3dde:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <effect+0x1>
    3de2:	1c c0       	rjmp	.+56     	; 0x3e1c <ProcessInput+0xffc>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3de4:	80 81       	ld	r24, Z
    3de6:	91 81       	ldd	r25, Z+1	; 0x01
    3de8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3dec:	80 e6       	ldi	r24, 0x60	; 96
    3dee:	98 e7       	ldi	r25, 0x78	; 120
    3df0:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3df4:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3df8:	8d e4       	ldi	r24, 0x4D	; 77
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3e00:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    3e0c:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3e10:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <getClock>
    3e14:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <PunishmentTime>
    3e18:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3e1c:	82 e0       	ldi	r24, 0x02	; 2
    3e1e:	78 2e       	mov	r7, r24
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3e20:	10 92 0b 39 	sts	0x390B, r1	; 0x80390b <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3e24:	89 e5       	ldi	r24, 0x59	; 89
    3e26:	9a e7       	ldi	r25, 0x7A	; 122
    3e28:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <reactStr>
    3e2c:	90 93 1d 39 	sts	0x391D, r25	; 0x80391d <reactStr+0x1>
    reactStr[1][number]=length;
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <reactStr+0x40>
    3e38:	90 93 5d 39 	sts	0x395D, r25	; 0x80395d <reactStr+0x41>
    reactStr[2][number]=type;
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	80 93 9c 39 	sts	0x399C, r24	; 0x80399c <reactStr+0x80>
    3e44:	90 93 9d 39 	sts	0x399D, r25	; 0x80399d <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3e48:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput>
    3e4c:	88 23       	and	r24, r24
    3e4e:	19 f0       	breq	.+6      	; 0x3e56 <ProcessInput+0x1036>
    3e50:	70 92 1b 39 	sts	0x391B, r7	; 0x80391b <responseList>
    3e54:	9b c0       	rjmp	.+310    	; 0x3f8c <ProcessInput+0x116c>
    3e56:	87 2d       	mov	r24, r7
    3e58:	12 c0       	rjmp	.+36     	; 0x3e7e <ProcessInput+0x105e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3e5a:	89 e5       	ldi	r24, 0x59	; 89
    3e5c:	9a e7       	ldi	r25, 0x7A	; 122
    3e5e:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <reactStr>
    3e62:	90 93 1d 39 	sts	0x391D, r25	; 0x80391d <reactStr+0x1>
    reactStr[1][number]=length;
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	80 93 5c 39 	sts	0x395C, r24	; 0x80395c <reactStr+0x40>
    3e6e:	90 93 5d 39 	sts	0x395D, r25	; 0x80395d <reactStr+0x41>
    reactStr[2][number]=type;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	80 93 9c 39 	sts	0x399C, r24	; 0x80399c <reactStr+0x80>
    3e7a:	90 93 9d 39 	sts	0x399D, r25	; 0x80399d <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    3e7e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <SetStandardResponse>
    3e82:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <responseList>
    3e86:	82 c0       	rjmp	.+260    	; 0x3f8c <ProcessInput+0x116c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3e88:	81 ed       	ldi	r24, 0xD1	; 209
    3e8a:	99 e7       	ldi	r25, 0x79	; 121
    3e8c:	92 cd       	rjmp	.-1244   	; 0x39b2 <ProcessInput+0xb92>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3e8e:	b2 e0       	ldi	r27, 0x02	; 2
    3e90:	fb 12       	cpse	r15, r27
    3e92:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3e96:	d8 01       	movw	r26, r16
    3e98:	11 96       	adiw	r26, 0x01	; 1
    3e9a:	6c 91       	ld	r22, X
    3e9c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <CheckLetter>
    3ea0:	88 23       	and	r24, r24
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <ProcessInput+0x1086>
    3ea4:	5b c0       	rjmp	.+182    	; 0x3f5c <ProcessInput+0x113c>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3eaa:	88 0f       	add	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	9c 01       	movw	r18, r24
    3eb0:	21 5c       	subi	r18, 0xC1	; 193
    3eb2:	37 4c       	sbci	r19, 0xC7	; 199
    3eb4:	79 01       	movw	r14, r18
    3eb6:	6b ed       	ldi	r22, 0xDB	; 219
    3eb8:	78 e3       	ldi	r23, 0x38	; 56
    3eba:	d9 01       	movw	r26, r18
    3ebc:	8d 91       	ld	r24, X+
    3ebe:	9c 91       	ld	r25, X
    3ec0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ec4:	86 e9       	ldi	r24, 0x96	; 150
    3ec6:	97 e7       	ldi	r25, 0x77	; 119
    3ec8:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3ecc:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3ed0:	80 e1       	ldi	r24, 0x10	; 16
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	80 93 5e 39 	sts	0x395E, r24	; 0x80395e <reactStr+0x42>
    3ed8:	90 93 5f 39 	sts	0x395F, r25	; 0x80395f <reactStr+0x43>
    reactStr[2][number]=type;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	80 93 9e 39 	sts	0x399E, r24	; 0x80399e <reactStr+0x82>
    3ee4:	90 93 9f 39 	sts	0x399F, r25	; 0x80399f <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3ee8:	20 91 f5 38 	lds	r18, 0x38F5	; 0x8038f5 <actObj1.3981+0x1a>
    3eec:	30 91 f6 38 	lds	r19, 0x38F6	; 0x8038f6 <actObj1.3981+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ef0:	40 91 e7 38 	lds	r20, 0x38E7	; 0x8038e7 <actObj1.3981+0xc>
    3ef4:	50 91 e8 38 	lds	r21, 0x38E8	; 0x8038e8 <actObj1.3981+0xd>
    3ef8:	40 93 20 39 	sts	0x3920, r20	; 0x803920 <reactStr+0x4>
    3efc:	50 93 21 39 	sts	0x3921, r21	; 0x803921 <reactStr+0x5>
    reactStr[1][number]=length;
    3f00:	20 93 60 39 	sts	0x3960, r18	; 0x803960 <reactStr+0x44>
    3f04:	30 93 61 39 	sts	0x3961, r19	; 0x803961 <reactStr+0x45>
    reactStr[2][number]=type;
    3f08:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x84>
    3f0c:	10 92 a1 39 	sts	0x39A1, r1	; 0x8039a1 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3f10:	29 e5       	ldi	r18, 0x59	; 89
    3f12:	3a e7       	ldi	r19, 0x7A	; 122
    3f14:	20 93 22 39 	sts	0x3922, r18	; 0x803922 <reactStr+0x6>
    3f18:	30 93 23 39 	sts	0x3923, r19	; 0x803923 <reactStr+0x7>
    reactStr[1][number]=length;
    3f1c:	22 e0       	ldi	r18, 0x02	; 2
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	20 93 62 39 	sts	0x3962, r18	; 0x803962 <reactStr+0x46>
    3f24:	30 93 63 39 	sts	0x3963, r19	; 0x803963 <reactStr+0x47>
    reactStr[2][number]=type;
    3f28:	80 93 a2 39 	sts	0x39A2, r24	; 0x8039a2 <reactStr+0x86>
    3f2c:	90 93 a3 39 	sts	0x39A3, r25	; 0x8039a3 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3f30:	29 e5       	ldi	r18, 0x59	; 89
    3f32:	37 e7       	ldi	r19, 0x77	; 119
    3f34:	20 93 24 39 	sts	0x3924, r18	; 0x803924 <reactStr+0x8>
    3f38:	30 93 25 39 	sts	0x3925, r19	; 0x803925 <reactStr+0x9>
    reactStr[1][number]=length;
    3f3c:	2d e3       	ldi	r18, 0x3D	; 61
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	20 93 64 39 	sts	0x3964, r18	; 0x803964 <reactStr+0x48>
    3f44:	30 93 65 39 	sts	0x3965, r19	; 0x803965 <reactStr+0x49>
    reactStr[2][number]=type;
    3f48:	80 93 a4 39 	sts	0x39A4, r24	; 0x8039a4 <reactStr+0x88>
    3f4c:	90 93 a5 39 	sts	0x39A5, r25	; 0x8039a5 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3f50:	f7 01       	movw	r30, r14
    3f52:	10 82       	st	Z, r1
    3f54:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3f56:	f5 e0       	ldi	r31, 0x05	; 5
    3f58:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3f5a:	64 cf       	rjmp	.-312    	; 0x3e24 <ProcessInput+0x1004>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3f5c:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <inventory+0x2>
    3f60:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <inventory+0x3>
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	49 f0       	breq	.+18     	; 0x3f7a <ProcessInput+0x115a>
                        if (CheckLetter(inventory[x], data[1])) {
    3f68:	f8 01       	movw	r30, r16
    3f6a:	61 81       	ldd	r22, Z+1	; 0x01
    3f6c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <CheckLetter>
    3f70:	88 23       	and	r24, r24
    3f72:	19 f0       	breq	.+6      	; 0x3f7a <ProcessInput+0x115a>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	98 cf       	rjmp	.-208    	; 0x3eaa <ProcessInput+0x108a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3f7a:	81 e6       	ldi	r24, 0x61	; 97
    3f7c:	99 e7       	ldi	r25, 0x79	; 121
    3f7e:	80 93 1e 39 	sts	0x391E, r24	; 0x80391e <reactStr+0x2>
    3f82:	90 93 1f 39 	sts	0x391F, r25	; 0x80391f <reactStr+0x3>
    reactStr[1][number]=length;
    3f86:	81 e2       	ldi	r24, 0x21	; 33
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	0f c8       	rjmp	.-4066   	; 0x2faa <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3f8c:	d8 01       	movw	r26, r16
    3f8e:	1c 92       	st	X, r1
    serRxDone = 0;
    3f90:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <serRxDone>
    RXCNT = 0;    
    3f94:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	28 96       	adiw	r28, 0x08	; 8
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	ff 90       	pop	r15
    3fa8:	ef 90       	pop	r14
    3faa:	df 90       	pop	r13
    3fac:	cf 90       	pop	r12
    3fae:	bf 90       	pop	r11
    3fb0:	af 90       	pop	r10
    3fb2:	9f 90       	pop	r9
    3fb4:	8f 90       	pop	r8
    3fb6:	7f 90       	pop	r7
    3fb8:	6f 90       	pop	r6
    3fba:	5f 90       	pop	r5
    3fbc:	08 95       	ret

00003fbe <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3fbe:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3fc0:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <PunishmentTime>
    3fc4:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <PunishmentTime+0x1>
    3fc8:	89 2b       	or	r24, r25
    3fca:	09 f1       	breq	.+66     	; 0x400e <__stack+0xf>
        PunishmentCount = getClock();
    3fcc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <getClock>
        if (PunishmentCount < PunishmentTime)
    3fd0:	20 91 08 39 	lds	r18, 0x3908	; 0x803908 <PunishmentTime>
    3fd4:	30 91 09 39 	lds	r19, 0x3909	; 0x803909 <PunishmentTime+0x1>
    3fd8:	82 17       	cp	r24, r18
    3fda:	93 07       	cpc	r25, r19
    3fdc:	08 f4       	brcc	.+2      	; 0x3fe0 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3fde:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3fe0:	ac 01       	movw	r20, r24
    3fe2:	42 1b       	sub	r20, r18
    3fe4:	53 0b       	sbc	r21, r19
    3fe6:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3fe8:	4b 30       	cpi	r20, 0x0B	; 11
    3fea:	51 05       	cpc	r21, r1
    3fec:	30 f0       	brcs	.+12     	; 0x3ffa <TextAdventure+0x3c>
            PunishmentTime = 0;
    3fee:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <PunishmentTime>
    3ff2:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3ff6:	2a e0       	ldi	r18, 0x0A	; 10
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3ffa:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <gameNow>
    3ffe:	81 11       	cpse	r24, r1
    4000:	06 c0       	rjmp	.+12     	; 0x400e <__stack+0xf>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    4002:	65 e0       	ldi	r22, 0x05	; 5
    4004:	62 1b       	sub	r22, r18
    4006:	8a e0       	ldi	r24, 0x0A	; 10
    4008:	82 1b       	sub	r24, r18
    400a:	0e 94 39 0b 	call	0x1672	; 0x1672 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    400e:	0e 94 c1 13 	call	0x2782	; 0x2782 <CheckSend>
    4012:	88 23       	and	r24, r24
    4014:	11 f0       	breq	.+4      	; 0x401a <__stack+0x1b>
    4016:	c1 e0       	ldi	r28, 0x01	; 1
    4018:	18 c0       	rjmp	.+48     	; 0x404a <__stack+0x4b>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    401a:	0e 94 30 14 	call	0x2860	; 0x2860 <CheckResponse>
    401e:	c8 2f       	mov	r28, r24
    4020:	81 11       	cpse	r24, r1
    4022:	f9 cf       	rjmp	.-14     	; 0x4016 <__stack+0x17>

    if (PunishmentTime == 0) {
    4024:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <PunishmentTime>
    4028:	90 91 09 39 	lds	r25, 0x3909	; 0x803909 <PunishmentTime+0x1>
    402c:	89 2b       	or	r24, r25
    402e:	69 f4       	brne	.+26     	; 0x404a <__stack+0x4b>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    4030:	8f e6       	ldi	r24, 0x6F	; 111
    4032:	98 e3       	ldi	r25, 0x38	; 56
    4034:	0e 94 77 14 	call	0x28ee	; 0x28ee <CheckInput>
    4038:	c8 2f       	mov	r28, r24
    403a:	81 11       	cpse	r24, r1
    403c:	05 c0       	rjmp	.+10     	; 0x4048 <__stack+0x49>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    403e:	8f e6       	ldi	r24, 0x6F	; 111
    4040:	98 e3       	ldi	r25, 0x38	; 56
    4042:	0e 94 10 17 	call	0x2e20	; 0x2e20 <ProcessInput>
    4046:	01 c0       	rjmp	.+2      	; 0x404a <__stack+0x4b>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    4048:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    404a:	8c 2f       	mov	r24, r28
    404c:	cf 91       	pop	r28
    404e:	08 95       	ret

00004050 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    4050:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Setup>
    LoadGameState();
    4054:	0e 94 a7 0a 	call	0x154e	; 0x154e <LoadGameState>
    SelfTest();
    4058:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <SelfTest>
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);

            dimValueSum -= (dimValueSum>>8);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    405c:	cf e1       	ldi	r28, 0x1F	; 31
    405e:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();
    LoadGameState();
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    4060:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <GenerateAudio>
    4064:	88 23       	and	r24, r24
    4066:	e1 f3       	breq	.-8      	; 0x4060 <main+0x10>
            lastButtonState = buttonState;
    4068:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    406c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    4070:	0e 94 03 09 	call	0x1206	; 0x1206 <CheckButtons>
    4074:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    4078:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    407c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    4080:	82 31       	cpi	r24, 0x12	; 18
    4082:	19 f4       	brne	.+6      	; 0x408a <main+0x3a>
    4084:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <SelectAuIn>
    4088:	02 c0       	rjmp	.+4      	; 0x408e <main+0x3e>
    408a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <SelectTSens>

            GenerateBlinks();
    408e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    4092:	95 df       	rcall	.-214    	; 0x3fbe <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    4094:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <MagnetMaze>
            LanyardCode();
    4098:	0e 94 03 03 	call	0x606	; 0x606 <LanyardCode>
            BastetDictates();
    409c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <BastetDictates>
            MakeFriends();
    40a0:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    40a4:	0e 94 b4 09 	call	0x1368	; 0x1368 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    40a8:	80 91 be 3a 	lds	r24, 0x3ABE	; 0x803abe <adcPhot>
    40ac:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <adcPhot+0x1>
    40b0:	0a 97       	sbiw	r24, 0x0a	; 10
    40b2:	20 f4       	brcc	.+8      	; 0x40bc <main+0x6c>
    40b4:	61 e0       	ldi	r22, 0x01	; 1
    40b6:	84 e7       	ldi	r24, 0x74	; 116
    40b8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    40bc:	80 91 be 3a 	lds	r24, 0x3ABE	; 0x803abe <adcPhot>
    40c0:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <adcPhot+0x1>
    40c4:	85 36       	cpi	r24, 0x65	; 101
    40c6:	91 05       	cpc	r25, r1
    40c8:	20 f0       	brcs	.+8      	; 0x40d2 <main+0x82>
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	84 e7       	ldi	r24, 0x74	; 116
    40ce:	0e 94 3b 0a 	call	0x1476	; 0x1476 <WriteStatusBit>

            dimValueSum -= (dimValueSum>>8);
    40d2:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    40d6:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    40da:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    40de:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    40e2:	23 2f       	mov	r18, r19
    40e4:	33 27       	eor	r19, r19
    40e6:	82 1b       	sub	r24, r18
    40e8:	93 0b       	sbc	r25, r19
    40ea:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    40ee:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    40f2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    40f6:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    40fa:	93 95       	inc	r25
    40fc:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    4100:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    4104:	20 91 be 3a 	lds	r18, 0x3ABE	; 0x803abe <adcPhot>
    4108:	30 91 bf 3a 	lds	r19, 0x3ABF	; 0x803abf <adcPhot+0x1>
    410c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    4110:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    4114:	22 0f       	add	r18, r18
    4116:	23 2f       	mov	r18, r19
    4118:	22 1f       	adc	r18, r18
    411a:	33 0b       	sbc	r19, r19
    411c:	31 95       	neg	r19
    411e:	fe 01       	movw	r30, r28
    4120:	e2 1b       	sub	r30, r18
    4122:	f3 0b       	sbc	r31, r19
    4124:	ec 5f       	subi	r30, 0xFC	; 252
    4126:	fd 43       	sbci	r31, 0x3D	; 61
    4128:	20 81       	ld	r18, Z
    412a:	82 1b       	sub	r24, r18
    412c:	91 09       	sbc	r25, r1
    412e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    4132:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>8;
    4136:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    413a:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    413e:	90 93 0c 38 	sts	0x380C, r25	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    4142:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <HotSummer>
    4146:	8c cf       	rjmp	.-232    	; 0x4060 <main+0x10>

00004148 <__udivmodqi4>:
    4148:	99 1b       	sub	r25, r25
    414a:	79 e0       	ldi	r23, 0x09	; 9
    414c:	04 c0       	rjmp	.+8      	; 0x4156 <__udivmodqi4_ep>

0000414e <__udivmodqi4_loop>:
    414e:	99 1f       	adc	r25, r25
    4150:	96 17       	cp	r25, r22
    4152:	08 f0       	brcs	.+2      	; 0x4156 <__udivmodqi4_ep>
    4154:	96 1b       	sub	r25, r22

00004156 <__udivmodqi4_ep>:
    4156:	88 1f       	adc	r24, r24
    4158:	7a 95       	dec	r23
    415a:	c9 f7       	brne	.-14     	; 0x414e <__udivmodqi4_loop>
    415c:	80 95       	com	r24
    415e:	08 95       	ret

00004160 <__divmodhi4>:
    4160:	97 fb       	bst	r25, 7
    4162:	07 2e       	mov	r0, r23
    4164:	16 f4       	brtc	.+4      	; 0x416a <__divmodhi4+0xa>
    4166:	00 94       	com	r0
    4168:	06 d0       	rcall	.+12     	; 0x4176 <__divmodhi4_neg1>
    416a:	77 fd       	sbrc	r23, 7
    416c:	08 d0       	rcall	.+16     	; 0x417e <__divmodhi4_neg2>
    416e:	11 d0       	rcall	.+34     	; 0x4192 <__udivmodhi4>
    4170:	07 fc       	sbrc	r0, 7
    4172:	05 d0       	rcall	.+10     	; 0x417e <__divmodhi4_neg2>
    4174:	3e f4       	brtc	.+14     	; 0x4184 <__divmodhi4_exit>

00004176 <__divmodhi4_neg1>:
    4176:	90 95       	com	r25
    4178:	81 95       	neg	r24
    417a:	9f 4f       	sbci	r25, 0xFF	; 255
    417c:	08 95       	ret

0000417e <__divmodhi4_neg2>:
    417e:	70 95       	com	r23
    4180:	61 95       	neg	r22
    4182:	7f 4f       	sbci	r23, 0xFF	; 255

00004184 <__divmodhi4_exit>:
    4184:	08 95       	ret

00004186 <__tablejump2__>:
    4186:	ee 0f       	add	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	05 90       	lpm	r0, Z+
    418c:	f4 91       	lpm	r31, Z
    418e:	e0 2d       	mov	r30, r0
    4190:	09 94       	ijmp

00004192 <__udivmodhi4>:
    4192:	aa 1b       	sub	r26, r26
    4194:	bb 1b       	sub	r27, r27
    4196:	51 e1       	ldi	r21, 0x11	; 17
    4198:	07 c0       	rjmp	.+14     	; 0x41a8 <__udivmodhi4_ep>

0000419a <__udivmodhi4_loop>:
    419a:	aa 1f       	adc	r26, r26
    419c:	bb 1f       	adc	r27, r27
    419e:	a6 17       	cp	r26, r22
    41a0:	b7 07       	cpc	r27, r23
    41a2:	10 f0       	brcs	.+4      	; 0x41a8 <__udivmodhi4_ep>
    41a4:	a6 1b       	sub	r26, r22
    41a6:	b7 0b       	sbc	r27, r23

000041a8 <__udivmodhi4_ep>:
    41a8:	88 1f       	adc	r24, r24
    41aa:	99 1f       	adc	r25, r25
    41ac:	5a 95       	dec	r21
    41ae:	a9 f7       	brne	.-22     	; 0x419a <__udivmodhi4_loop>
    41b0:	80 95       	com	r24
    41b2:	90 95       	com	r25
    41b4:	bc 01       	movw	r22, r24
    41b6:	cd 01       	movw	r24, r26
    41b8:	08 95       	ret

000041ba <_exit>:
    41ba:	f8 94       	cli

000041bc <__stop_program>:
    41bc:	ff cf       	rjmp	.-2      	; 0x41bc <__stop_program>
