
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00803800  00003f38  00003fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e3e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fa  0000be3e  00003e3e  00003ef2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002ec  0080382e  0080382e  0000401a  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000401a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000404c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000328  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d7f  00000000  00000000  000043b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028ce  00000000  00000000  0000b133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ce4  00000000  00000000  0000da01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000984  00000000  00000000  000116e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a6b  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000044d6  00000000  00000000  00013ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  00017fad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_6>
      1c:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_7>
      20:	49 c6       	rjmp	.+3218   	; 0xcb4 <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	90 c6       	rjmp	.+3360   	; 0xd56 <__vector_13>
      36:	00 00       	nop
      38:	c1 c6       	rjmp	.+3458   	; 0xdbc <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7f c7       	rjmp	.+3838   	; 0xf50 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b2 c7       	rjmp	.+3940   	; 0xfbe <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c6       	rjmp	.+3572   	; 0xe62 <__vector_27>
      6e:	00 00       	nop
      70:	53 c7       	rjmp	.+3750   	; 0xf18 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e8 e3       	ldi	r30, 0x38	; 56
      90:	ff e3       	ldi	r31, 0x3F	; 63
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 32       	cpi	r26, 0x2E	; 46
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	ae e2       	ldi	r26, 0x2E	; 46
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	aa 31       	cpi	r26, 0x1A	; 26
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <main>
      b2:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      b8:	20 91 32 38 	lds	r18, 0x3832	; 0x803832 <avgVolt.3776>
      bc:	85 e1       	ldi	r24, 0x15	; 21
      be:	90 e0       	ldi	r25, 0x00	; 0
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      c0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      c4:	50 e0       	ldi	r21, 0x00	; 0
      c6:	48 17       	cp	r20, r24
      c8:	59 07       	cpc	r21, r25
      ca:	74 f0       	brlt	.+28     	; 0xe8 <chkVolt250+0x30>
      cc:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      d0:	50 e0       	ldi	r21, 0x00	; 0
      d2:	bc 01       	movw	r22, r24
      d4:	68 5f       	subi	r22, 0xF8	; 248
      d6:	7f 4f       	sbci	r23, 0xFF	; 255
      d8:	64 17       	cp	r22, r20
      da:	75 07       	cpc	r23, r21
      dc:	2c f0       	brlt	.+10     	; 0xe8 <chkVolt250+0x30>
      de:	20 93 32 38 	sts	0x3832, r18	; 0x803832 <avgVolt.3776>
            break;
        }
        ++avgVolt;
    }
    return avgVolt;
      e2:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <avgVolt.3776>
      e6:	08 95       	ret
        
    for (uint8_t x=25; x<226; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            break;
        }
        ++avgVolt;
      e8:	2f 5f       	subi	r18, 0xFF	; 255
      ea:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<226; x+=25) {
      ec:	86 3f       	cpi	r24, 0xF6	; 246
      ee:	91 05       	cpc	r25, r1
      f0:	39 f7       	brne	.-50     	; 0xc0 <chkVolt250+0x8>
      f2:	f5 cf       	rjmp	.-22     	; 0xde <chkVolt250+0x26>

000000f4 <MakeFriends>:
    }
    return avgVolt;
}

// Main game loop
uint8_t MakeFriends(){
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     102:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; x++){
        if (CheckState(100+x) == 0) foundAll = 0;
     104:	8c 2f       	mov	r24, r28
     106:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <CheckState>
     10a:	81 11       	cpse	r24, r1
     10c:	01 c0       	rjmp	.+2      	; 0x110 <MakeFriends+0x1c>
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; x++){
     112:	c8 36       	cpi	r28, 0x68	; 104
     114:	b9 f7       	brne	.-18     	; 0x104 <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     116:	dd 23       	and	r29, r29
     118:	19 f0       	breq	.+6      	; 0x120 <MakeFriends+0x2c>
     11a:	8c e7       	ldi	r24, 0x7C	; 124
     11c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>


    //Checking for headphones
    if (detHdPh) return 0;
     120:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <detHdPh>
     124:	81 11       	cpse	r24, r1
     126:	1e c1       	rjmp	.+572    	; 0x364 <MakeFriends+0x270>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     128:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <progress.3783>
     12c:	81 11       	cpse	r24, r1
     12e:	11 c0       	rjmp	.+34     	; 0x152 <MakeFriends+0x5e>
        setDAC[0] = whoami * 50;
     130:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     134:	22 e3       	ldi	r18, 0x32	; 50
     136:	92 9f       	mul	r25, r18
     138:	90 2d       	mov	r25, r0
     13a:	11 24       	eor	r1, r1
     13c:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	38 e3       	ldi	r19, 0x38	; 56
     144:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
     148:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     14c:	9f ef       	ldi	r25, 0xFF	; 255
     14e:	90 93 b6 3a 	sts	0x3AB6, r25	; 0x803ab6 <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) ||((progress > FIRST_CONTACT))) {
     152:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     156:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	b9 01       	movw	r22, r18
     160:	65 50       	subi	r22, 0x05	; 5
     162:	71 09       	sbc	r23, r1
     164:	46 17       	cp	r20, r22
     166:	57 07       	cpc	r21, r23
     168:	64 f0       	brlt	.+24     	; 0x182 <MakeFriends+0x8e>
     16a:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	2b 5f       	subi	r18, 0xFB	; 251
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	24 17       	cp	r18, r20
     176:	35 07       	cpc	r19, r21
     178:	24 f0       	brlt	.+8      	; 0x182 <MakeFriends+0x8e>
     17a:	82 30       	cpi	r24, 0x02	; 2
     17c:	08 f0       	brcs	.+2      	; 0x180 <MakeFriends+0x8c>
     17e:	40 c0       	rjmp	.+128    	; 0x200 <MakeFriends+0x10c>
     180:	ef c0       	rjmp	.+478    	; 0x360 <MakeFriends+0x26c>
        if (progress == NO_OTHER) {
     182:	81 11       	cpse	r24, r1
     184:	0a c0       	rjmp	.+20     	; 0x19a <MakeFriends+0xa6>
            ++chkTmr;
     186:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3785>
     18a:	8f 5f       	subi	r24, 0xFF	; 255
     18c:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3785>
            if (chkTmr >= 8) {
     190:	88 30       	cpi	r24, 0x08	; 8
     192:	08 f4       	brcc	.+2      	; 0x196 <MakeFriends+0xa2>
     194:	e7 c0       	rjmp	.+462    	; 0x364 <MakeFriends+0x270>
                progress = FIRST_CONTACT;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	81 c0       	rjmp	.+258    	; 0x29c <MakeFriends+0x1a8>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	89 f5       	brne	.+98     	; 0x200 <MakeFriends+0x10c>
            jackIn = chkVolt250();
     19e:	8c df       	rcall	.-232    	; 0xb8 <chkVolt250>
     1a0:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <jackIn.3786>
            if (jackIn) {
     1a4:	88 23       	and	r24, r24
     1a6:	49 f1       	breq	.+82     	; 0x1fa <MakeFriends+0x106>
                ++chkTmr;
     1a8:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <chkTmr.3785>
     1ac:	9f 5f       	subi	r25, 0xFF	; 255
     1ae:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <chkTmr.3785>
                if (chkTmr >= SHORT_WAIT){
     1b2:	98 30       	cpi	r25, 0x08	; 8
     1b4:	08 f4       	brcc	.+2      	; 0x1b8 <MakeFriends+0xc4>
     1b6:	d6 c0       	rjmp	.+428    	; 0x364 <MakeFriends+0x270>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1b8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     1bc:	91 30       	cpi	r25, 0x01	; 1
     1be:	29 f4       	brne	.+10     	; 0x1ca <MakeFriends+0xd6>
     1c0:	83 50       	subi	r24, 0x03	; 3
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	b8 f4       	brcc	.+46     	; 0x1f4 <MakeFriends+0x100>
                        progress = SECOND_LOVE; 
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	69 c0       	rjmp	.+210    	; 0x29c <MakeFriends+0x1a8>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1ca:	92 30       	cpi	r25, 0x02	; 2
     1cc:	31 f4       	brne	.+12     	; 0x1da <MakeFriends+0xe6>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	d1 f3       	breq	.-12     	; 0x1c6 <MakeFriends+0xd2>
     1d2:	85 50       	subi	r24, 0x05	; 5
     1d4:	82 30       	cpi	r24, 0x02	; 2
     1d6:	70 f4       	brcc	.+28     	; 0x1f4 <MakeFriends+0x100>
     1d8:	f6 cf       	rjmp	.-20     	; 0x1c6 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1da:	93 30       	cpi	r25, 0x03	; 3
     1dc:	39 f4       	brne	.+14     	; 0x1ec <MakeFriends+0xf8>
     1de:	9c ef       	ldi	r25, 0xFC	; 252
     1e0:	98 0f       	add	r25, r24
     1e2:	92 30       	cpi	r25, 0x02	; 2
     1e4:	80 f3       	brcs	.-32     	; 0x1c6 <MakeFriends+0xd2>
     1e6:	87 30       	cpi	r24, 0x07	; 7
     1e8:	29 f4       	brne	.+10     	; 0x1f4 <MakeFriends+0x100>
     1ea:	ed cf       	rjmp	.-38     	; 0x1c6 <MakeFriends+0xd2>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1ec:	94 30       	cpi	r25, 0x04	; 4
     1ee:	11 f4       	brne	.+4      	; 0x1f4 <MakeFriends+0x100>
     1f0:	85 50       	subi	r24, 0x05	; 5
     1f2:	e7 cf       	rjmp	.-50     	; 0x1c2 <MakeFriends+0xce>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     1f4:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <progress.3783>
     1f8:	53 c0       	rjmp	.+166    	; 0x2a0 <MakeFriends+0x1ac>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     1fa:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <chkTmr.3785>
     1fe:	b0 c0       	rjmp	.+352    	; 0x360 <MakeFriends+0x26c>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	09 f0       	breq	.+2      	; 0x206 <MakeFriends+0x112>
     204:	50 c0       	rjmp	.+160    	; 0x2a6 <MakeFriends+0x1b2>
            ++chkTmr;
     206:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3785>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3785>
     210:	ca e6       	ldi	r28, 0x6A	; 106
     212:	de eb       	ldi	r29, 0xBE	; 190
     214:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     216:	0d 81       	ldd	r16, Y+5	; 0x05
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	0e 94 35 09 	call	0x126a	; 0x126a <lfsr>
     21e:	87 ff       	sbrs	r24, 7
     220:	03 c0       	rjmp	.+6      	; 0x228 <MakeFriends+0x134>
     222:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
     226:	01 c0       	rjmp	.+2      	; 0x22a <MakeFriends+0x136>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	f8 01       	movw	r30, r16
     22c:	e6 53       	subi	r30, 0x36	; 54
     22e:	f5 4c       	sbci	r31, 0xC5	; 197
     230:	80 83       	st	Z, r24
     232:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     234:	f7 01       	movw	r30, r14
     236:	00 81       	ld	r16, Z
     238:	10 e0       	ldi	r17, 0x00	; 0
     23a:	0e 94 35 09 	call	0x126a	; 0x126a <lfsr>
     23e:	87 ff       	sbrs	r24, 7
     240:	03 c0       	rjmp	.+6      	; 0x248 <MakeFriends+0x154>
     242:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
     246:	01 c0       	rjmp	.+2      	; 0x24a <MakeFriends+0x156>
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	f8 01       	movw	r30, r16
     24c:	e6 53       	subi	r30, 0x36	; 54
     24e:	f5 4c       	sbci	r31, 0xC5	; 197
     250:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     252:	fe eb       	ldi	r31, 0xBE	; 190
     254:	cf 36       	cpi	r28, 0x6F	; 111
     256:	df 07       	cpc	r29, r31
     258:	e9 f6       	brne	.-70     	; 0x214 <MakeFriends+0x120>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     25a:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3785>
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	40 f0       	brcs	.+16     	; 0x272 <MakeFriends+0x17e>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     262:	2f ef       	ldi	r18, 0xFF	; 255
     264:	44 e6       	ldi	r20, 0x64	; 100
     266:	68 e0       	ldi	r22, 0x08	; 8
     268:	80 e8       	ldi	r24, 0x80	; 128
     26a:	0e 94 86 09 	call	0x130c	; 0x130c <floatAround>
     26e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     272:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3785>
     276:	8a 3f       	cpi	r24, 0xFA	; 250
     278:	08 f4       	brcc	.+2      	; 0x27c <MakeFriends+0x188>
     27a:	74 c0       	rjmp	.+232    	; 0x364 <MakeFriends+0x270>
                candidate = jackIn-whoami;
     27c:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     280:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <jackIn.3786>
     284:	89 1b       	sub	r24, r25
     286:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <__data_end>
                if (candidate > whoami) setDAC[0] = 250; else setDAC[0] = 0;
     28a:	98 17       	cp	r25, r24
     28c:	20 f4       	brcc	.+8      	; 0x296 <MakeFriends+0x1a2>
     28e:	8a ef       	ldi	r24, 0xFA	; 250
     290:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     294:	02 c0       	rjmp	.+4      	; 0x29a <MakeFriends+0x1a6>
     296:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <progress.3783>
                chkTmr = 0;
     2a0:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <chkTmr.3785>
     2a4:	5f c0       	rjmp	.+190    	; 0x364 <MakeFriends+0x270>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	e1 f5       	brne	.+120    	; 0x322 <MakeFriends+0x22e>
            chkTmr++;
     2aa:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3785>
     2ae:	8f 5f       	subi	r24, 0xFF	; 255
     2b0:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3785>
            if (chkTmr >= SHORT_WAIT) {
     2b4:	88 30       	cpi	r24, 0x08	; 8
     2b6:	08 f4       	brcc	.+2      	; 0x2ba <MakeFriends+0x1c6>
                if (chkVolt250() == 5) {
     2b8:	55 c0       	rjmp	.+170    	; 0x364 <MakeFriends+0x270>
     2ba:	fe de       	rcall	.-516    	; 0xb8 <chkVolt250>
     2bc:	85 30       	cpi	r24, 0x05	; 5
     2be:	09 f0       	breq	.+2      	; 0x2c2 <MakeFriends+0x1ce>
     2c0:	99 cf       	rjmp	.-206    	; 0x1f4 <MakeFriends+0x100>
                    UpdateState(99+candidate);
     2c2:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <__data_end>
     2c6:	8d 59       	subi	r24, 0x9D	; 157
     2c8:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
                    UpdateState(99+whoami);
     2cc:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     2d0:	8d 59       	subi	r24, 0x9D	; 157
     2d2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2d6:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <__data_end>
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     2da:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <whoami>
     2de:	aa e6       	ldi	r26, 0x6A	; 106
     2e0:	be eb       	ldi	r27, 0xBE	; 190
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	ed 01       	movw	r28, r26
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	ec 91       	ld	r30, X
     2ea:	15 97       	sbiw	r26, 0x05	; 5
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	82 17       	cp	r24, r18
     2f0:	18 f4       	brcc	.+6      	; 0x2f8 <MakeFriends+0x204>
     2f2:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <MakeFriends+0x206>
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	e6 53       	subi	r30, 0x36	; 54
     2fc:	f5 4c       	sbci	r31, 0xC5	; 197
     2fe:	90 83       	st	Z, r25
     300:	11 96       	adiw	r26, 0x01	; 1
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
     302:	e8 81       	ld	r30, Y
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	83 17       	cp	r24, r19
     308:	18 f4       	brcc	.+6      	; 0x310 <MakeFriends+0x21c>
     30a:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
     30e:	01 c0       	rjmp	.+2      	; 0x312 <MakeFriends+0x21e>
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	e6 53       	subi	r30, 0x36	; 54
     314:	f5 4c       	sbci	r31, 0xC5	; 197
     316:	90 83       	st	Z, r25
            chkTmr++;
            if (chkTmr >= SHORT_WAIT) {
                if (chkVolt250() == 5) {
                    UpdateState(99+candidate);
                    UpdateState(99+whoami);
                    for (uint8_t x=0; x<5; ++x){
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	85 30       	cpi	r24, 0x05	; 5
     31c:	19 f7       	brne	.-58     	; 0x2e4 <MakeFriends+0x1f0>
                        iLED[WING[L][x]] = (x<candidate)?dimValue:0;
                        iLED[WING[R][x]] = (x<whoami)?dimValue:00;
                    }   
                    progress = FOURTH_BASE;
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	bd cf       	rjmp	.-134    	; 0x29c <MakeFriends+0x1a8>
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
     322:	84 30       	cpi	r24, 0x04	; 4
            if (chkVolt250() == 5) {
     324:	f9 f4       	brne	.+62     	; 0x364 <MakeFriends+0x270>
     326:	c8 de       	rcall	.-624    	; 0xb8 <chkVolt250>
     328:	85 30       	cpi	r24, 0x05	; 5
     32a:	e1 f4       	brne	.+56     	; 0x364 <MakeFriends+0x270>
                chkTmr++;
     32c:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <chkTmr.3785>
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <chkTmr.3785>
                if (chkTmr >= LONG_WAIT) {
     336:	8a 3f       	cpi	r24, 0xFA	; 250
     338:	a8 f0       	brcs	.+42     	; 0x364 <MakeFriends+0x270>
     33a:	ea e6       	ldi	r30, 0x6A	; 106
     33c:	fe eb       	ldi	r31, 0xBE	; 190
     33e:	8f e6       	ldi	r24, 0x6F	; 111
     340:	9e eb       	ldi	r25, 0xBE	; 190
     342:	ef 01       	movw	r28, r30
                    for (uint8_t x=0; x<5; ++x){
                        iLED[WING[L][x]] = 0;
     344:	a5 81       	ldd	r26, Z+5	; 0x05
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	a6 53       	subi	r26, 0x36	; 54
     34a:	b5 4c       	sbci	r27, 0xC5	; 197
     34c:	1c 92       	st	X, r1
     34e:	31 96       	adiw	r30, 0x01	; 1
                        iLED[WING[R][x]] = 0;
     350:	a8 81       	ld	r26, Y
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	a6 53       	subi	r26, 0x36	; 54
     356:	b5 4c       	sbci	r27, 0xC5	; 197
     358:	1c 92       	st	X, r1
        //Wait for divorce of force quit
        } else if (progress == FOURTH_BASE) {
            if (chkVolt250() == 5) {
                chkTmr++;
                if (chkTmr >= LONG_WAIT) {
                    for (uint8_t x=0; x<5; ++x){
     35a:	8e 17       	cp	r24, r30
     35c:	9f 07       	cpc	r25, r31
     35e:	89 f7       	brne	.-30     	; 0x342 <MakeFriends+0x24e>
                    }                    
                }
            }
        }

    } else progress = NO_OTHER;
     360:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <progress.3783>
      
    return 0;
}
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	08 95       	ret

00000374 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     37a:	e6 e2       	ldi	r30, 0x26	; 38
     37c:	f4 e0       	ldi	r31, 0x04	; 4
     37e:	80 83       	st	Z, r24
     380:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     384:	a1 e2       	ldi	r26, 0x21	; 33
     386:	b4 e0       	ldi	r27, 0x04	; 4
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	9c 93       	st	X, r25
     38c:	90 83       	st	Z, r25
     38e:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     392:	e0 e1       	ldi	r30, 0x10	; 16
     394:	f8 e0       	ldi	r31, 0x08	; 8
     396:	97 e0       	ldi	r25, 0x07	; 7
     398:	96 83       	std	Z+6, r25	; 0x06
     39a:	98 e0       	ldi	r25, 0x08	; 8
     39c:	94 83       	std	Z+4, r25	; 0x04
     39e:	83 83       	std	Z+3, r24	; 0x03
     3a0:	8c 93       	st	X, r24
     3a2:	85 81       	ldd	r24, Z+5	; 0x05
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	85 83       	std	Z+5, r24	; 0x05
     3a8:	85 81       	ldd	r24, Z+5	; 0x05
     3aa:	84 6c       	ori	r24, 0xC4	; 196
     3ac:	85 83       	std	Z+5, r24	; 0x05
     3ae:	08 95       	ret

000003b0 <I2C_recover>:
     3b0:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3b4:	88 60       	ori	r24, 0x08	; 8
     3b6:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ba:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3ce:	30 e1       	ldi	r19, 0x10	; 16
     3d0:	3a 95       	dec	r19
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <I2C_recover+0x20>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <I2C_recover+0x26>
     3d6:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3da:	30 e1       	ldi	r19, 0x10	; 16
     3dc:	3a 95       	dec	r19
     3de:	f1 f7       	brne	.-4      	; 0x3dc <I2C_recover+0x2c>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <I2C_recover+0x32>
     3e2:	91 50       	subi	r25, 0x01	; 1
     3e4:	89 f7       	brne	.-30     	; 0x3c8 <I2C_recover+0x18>
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ec:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3f6:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	91 60       	ori	r25, 0x01	; 1
     3fc:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     400:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     404:	94 6c       	ori	r25, 0xC4	; 196
     406:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40a:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     40e:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     412:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     416:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     424:	84 6c       	ori	r24, 0xC4	; 196
     426:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42a:	08 95       	ret

0000042c <I2C_start>:
     42c:	28 2f       	mov	r18, r24
     42e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	90 6c       	ori	r25, 0xC0	; 192
     434:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     438:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43c:	89 2f       	mov	r24, r25
     43e:	84 70       	andi	r24, 0x04	; 4
     440:	92 fd       	sbrc	r25, 2
     442:	03 c0       	rjmp	.+6      	; 0x44a <I2C_start+0x1e>
     444:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     448:	08 95       	ret
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	08 95       	ret

0000044e <I2C_wait_ACK>:
     44e:	8c e0       	ldi	r24, 0x0C	; 12
     450:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
     454:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     458:	87 fd       	sbrc	r24, 7
     45a:	0a c0       	rjmp	.+20     	; 0x470 <I2C_wait_ACK+0x22>
     45c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     460:	86 fd       	sbrc	r24, 6
     462:	06 c0       	rjmp	.+12     	; 0x470 <I2C_wait_ACK+0x22>
     464:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     468:	81 11       	cpse	r24, r1
     46a:	f4 cf       	rjmp	.-24     	; 0x454 <I2C_wait_ACK+0x6>
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	08 95       	ret
     470:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     474:	80 6c       	ori	r24, 0xC0	; 192
     476:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     47e:	82 fd       	sbrc	r24, 2
     480:	09 c0       	rjmp	.+18     	; 0x494 <I2C_wait_ACK+0x46>
     482:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     486:	83 fd       	sbrc	r24, 3
     488:	07 c0       	rjmp	.+14     	; 0x498 <I2C_wait_ACK+0x4a>
     48a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48e:	82 95       	swap	r24
     490:	81 70       	andi	r24, 0x01	; 1
     492:	08 95       	ret
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	08 95       	ret
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	08 95       	ret

0000049c <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     49c:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4a4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a8:	89 2f       	mov	r24, r25
     4aa:	83 70       	andi	r24, 0x03	; 3
     4ac:	82 30       	cpi	r24, 0x02	; 2
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4b4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b8:	97 fd       	sbrc	r25, 7
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4bc:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <timeout_I2C>
     4c0:	91 11       	cpse	r25, r1
     4c2:	f8 cf       	rjmp	.-16     	; 0x4b4 <I2C_read+0x18>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4c8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4cc:	90 6c       	ori	r25, 0xC0	; 192
     4ce:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4d2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d6:	92 fd       	sbrc	r25, 2
     4d8:	1e c0       	rjmp	.+60     	; 0x516 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4da:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4de:	93 fd       	sbrc	r25, 3
     4e0:	1d c0       	rjmp	.+58     	; 0x51c <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4e2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e6:	89 2f       	mov	r24, r25
     4e8:	80 71       	andi	r24, 0x10	; 16
     4ea:	94 fd       	sbrc	r25, 4
     4ec:	16 c0       	rjmp	.+44     	; 0x51a <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     4ee:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4f2:	61 11       	cpse	r22, r1
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <I2C_read+0x5e>
     4f6:	9b 7f       	andi	r25, 0xFB	; 251
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4fa:	94 60       	ori	r25, 0x04	; 4
     4fc:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     500:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     504:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     506:	61 11       	cpse	r22, r1
     508:	09 c0       	rjmp	.+18     	; 0x51c <I2C_read+0x80>
     50a:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     50e:	92 60       	ori	r25, 0x02	; 2
     510:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     514:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     51a:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     51c:	08 95       	ret

0000051e <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     51e:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     520:	8c e0       	ldi	r24, 0x0C	; 12
     522:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     526:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     52a:	93 70       	andi	r25, 0x03	; 3
     52c:	92 30       	cpi	r25, 0x02	; 2
     52e:	b1 f4       	brne	.+44     	; 0x55c <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     530:	80 81       	ld	r24, Z
     532:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     536:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     53a:	86 fd       	sbrc	r24, 6
     53c:	06 c0       	rjmp	.+12     	; 0x54a <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     53e:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     542:	81 11       	cpse	r24, r1
     544:	f8 cf       	rjmp	.-16     	; 0x536 <I2C_write+0x18>
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     54a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     54e:	82 fd       	sbrc	r24, 2
     550:	07 c0       	rjmp	.+14     	; 0x560 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     552:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     556:	82 95       	swap	r24
     558:	81 70       	andi	r24, 0x01	; 1
     55a:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     560:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     562:	08 95       	ret

00000564 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     564:	e0 e1       	ldi	r30, 0x10	; 16
     566:	f8 e0       	ldi	r31, 0x08	; 8
     568:	84 81       	ldd	r24, Z+4	; 0x04
     56a:	83 60       	ori	r24, 0x03	; 3
     56c:	84 83       	std	Z+4, r24	; 0x04
     56e:	08 95       	ret

00000570 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	6b 01       	movw	r12, r22
     580:	f4 2e       	mov	r15, r20
     582:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     584:	18 2f       	mov	r17, r24
     586:	11 0f       	add	r17, r17
     588:	81 2f       	mov	r24, r17
     58a:	50 df       	rcall	.-352    	; 0x42c <I2C_start>
	if (status != 0) goto error;
     58c:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     58e:	2b c0       	rjmp	.+86     	; 0x5e6 <I2C_read_bytes+0x76>
     590:	5e df       	rcall	.-324    	; 0x44e <I2C_wait_ACK>
	if (status == 1) {
     592:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     594:	19 f4       	brne	.+6      	; 0x59c <I2C_read_bytes+0x2c>
     596:	e6 df       	rcall	.-52     	; 0x564 <I2C_stop>
		return 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	27 c0       	rjmp	.+78     	; 0x5ea <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     59c:	81 11       	cpse	r24, r1
     59e:	23 c0       	rjmp	.+70     	; 0x5e6 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     5a0:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     5a2:	49 f0       	breq	.+18     	; 0x5b6 <I2C_read_bytes+0x46>
     5a4:	c6 01       	movw	r24, r12
     5a6:	bb df       	rcall	.-138    	; 0x51e <I2C_write>
	    if (status != 0) goto error;
     5a8:	81 11       	cpse	r24, r1
     5aa:	1d c0       	rjmp	.+58     	; 0x5e6 <I2C_read_bytes+0x76>
        ++reg_ptr;
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	c8 1a       	sub	r12, r24
     5b0:	d8 0a       	sbc	r13, r24
        --reg_len;
     5b2:	fa 94       	dec	r15
     5b4:	f5 cf       	rjmp	.-22     	; 0x5a0 <I2C_read_bytes+0x30>
     5b6:	01 34       	cpi	r16, 0x41	; 65
     5b8:	08 f0       	brcs	.+2      	; 0x5bc <I2C_read_bytes+0x4c>
     5ba:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5bc:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5be:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5c2:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5c4:	40 f0       	brcs	.+16     	; 0x5d6 <I2C_read_bytes+0x66>
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	ce 01       	movw	r24, r28
     5ca:	68 df       	rcall	.-304    	; 0x49c <I2C_read>
		if (status != 0) goto error;
     5cc:	81 11       	cpse	r24, r1
     5ce:	0b c0       	rjmp	.+22     	; 0x5e6 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5d0:	21 96       	adiw	r28, 0x01	; 1
     5d2:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5d4:	f6 cf       	rjmp	.-20     	; 0x5c2 <I2C_read_bytes+0x52>
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5da:	60 df       	rcall	.-320    	; 0x49c <I2C_read>
     5dc:	81 11       	cpse	r24, r1
	I2C_stop();
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <I2C_read_bytes+0x76>
     5e0:	c1 df       	rcall	.-126    	; 0x564 <I2C_stop>
	return 0;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5e6:	e4 de       	rcall	.-568    	; 0x3b0 <I2C_recover>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5ea:	df 91       	pop	r29
}
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	df 90       	pop	r13
     5f6:	cf 90       	pop	r12
     5f8:	08 95       	ret

000005fa <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     5fa:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardPos>
    lanyardCnt      = 0;
     5fe:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <lanyardCnt>
    lanyardState    = TRUE;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    iLED[CAT]       = 0;
     608:	e0 91 66 be 	lds	r30, 0xBE66	; 0x80be66 <__bss_end+0x834c>
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	e6 53       	subi	r30, 0x36	; 54
     610:	f5 4c       	sbci	r31, 0xC5	; 197
     612:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     614:	e0 91 77 be 	lds	r30, 0xBE77	; 0x80be77 <__bss_end+0x835d>
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	e6 53       	subi	r30, 0x36	; 54
     61c:	f5 4c       	sbci	r31, 0xC5	; 197
     61e:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     620:	e0 91 76 be 	lds	r30, 0xBE76	; 0x80be76 <__bss_end+0x835c>
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	e6 53       	subi	r30, 0x36	; 54
     628:	f5 4c       	sbci	r31, 0xC5	; 197
     62a:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     62c:	e0 91 75 be 	lds	r30, 0xBE75	; 0x80be75 <__bss_end+0x835b>
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	e6 53       	subi	r30, 0x36	; 54
     634:	f5 4c       	sbci	r31, 0xC5	; 197
     636:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     638:	e0 91 74 be 	lds	r30, 0xBE74	; 0x80be74 <__bss_end+0x835a>
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	e6 53       	subi	r30, 0x36	; 54
     640:	f5 4c       	sbci	r31, 0xC5	; 197
     642:	10 82       	st	Z, r1
     644:	ae e7       	ldi	r26, 0x7E	; 126
     646:	be eb       	ldi	r27, 0xBE	; 190
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     648:	ed 91       	ld	r30, X+
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	e6 53       	subi	r30, 0x36	; 54
     64e:	f5 4c       	sbci	r31, 0xC5	; 197
     650:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     652:	8e eb       	ldi	r24, 0xBE	; 190
     654:	a4 38       	cpi	r26, 0x84	; 132
     656:	b8 07       	cpc	r27, r24
     658:	b9 f7       	brne	.-18     	; 0x648 <initLanyard+0x4e>
        iLED[HCKR[G][i]] = 0;
}
     65a:	08 95       	ret

0000065c <LanyardCode>:

// Main game loop
uint8_t LanyardCode(){
     65c:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     65e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	91 f4       	brne	.+36     	; 0x68a <LanyardCode+0x2e>
     666:	6a e0       	ldi	r22, 0x0A	; 10
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <lanyardLastActive>
     66e:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <lanyardLastActive+0x1>
     672:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <idleTimeout>
     676:	88 23       	and	r24, r24
     678:	41 f0       	breq	.+16     	; 0x68a <LanyardCode+0x2e>
        /* clean up maze game and go back to text game */
        initLanyard();
     67a:	bf df       	rcall	.-130    	; 0x5fa <initLanyard>
        gameNow = TEXT;
     67c:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     680:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     684:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
        return 0;
     688:	9c c0       	rjmp	.+312    	; 0x7c2 <LanyardCode+0x166>
    }

    if (CheckState(LANYARD_COMPLETED))
     68a:	8b e7       	ldi	r24, 0x7B	; 123
     68c:	1c d7       	rcall	.+3640   	; 0x14c6 <CheckState>
     68e:	81 11       	cpse	r24, r1
     690:	98 c0       	rjmp	.+304    	; 0x7c2 <LanyardCode+0x166>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     692:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     696:	88 23       	and	r24, r24
     698:	19 f0       	breq	.+6      	; 0x6a0 <LanyardCode+0x44>
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	09 f0       	breq	.+2      	; 0x6a0 <LanyardCode+0x44>
     69e:	91 c0       	rjmp	.+290    	; 0x7c2 <LanyardCode+0x166>
        return 0;

    if (buttonState == 0xff)
     6a0:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     6a4:	8f 3f       	cpi	r24, 0xFF	; 255
     6a6:	09 f4       	brne	.+2      	; 0x6aa <LanyardCode+0x4e>
     6a8:	8c c0       	rjmp	.+280    	; 0x7c2 <LanyardCode+0x166>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     6aa:	c0 91 66 be 	lds	r28, 0xBE66	; 0x80be66 <__bss_end+0x834c>
     6ae:	ec 2f       	mov	r30, r28
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
     6b6:	e6 53       	subi	r30, 0x36	; 54
     6b8:	f5 4c       	sbci	r31, 0xC5	; 197
     6ba:	90 83       	st	Z, r25

    if (buttonState == lastButtonState)
     6bc:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     6c0:	89 17       	cp	r24, r25
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <LanyardCode+0x6a>
     6c4:	7e c0       	rjmp	.+252    	; 0x7c2 <LanyardCode+0x166>
        return 0;

    lanyardLastActive = getClock();
     6c6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <getClock>
     6ca:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <lanyardLastActive>
     6ce:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     6d2:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     6d6:	8f 3f       	cpi	r24, 0xFF	; 255
     6d8:	09 f0       	breq	.+2      	; 0x6dc <LanyardCode+0x80>
     6da:	73 c0       	rjmp	.+230    	; 0x7c2 <LanyardCode+0x166>
        switch (buttonState) {
     6dc:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     6e0:	91 30       	cpi	r25, 0x01	; 1
     6e2:	59 f0       	breq	.+22     	; 0x6fa <LanyardCode+0x9e>
     6e4:	38 f0       	brcs	.+14     	; 0x6f4 <LanyardCode+0x98>
     6e6:	92 30       	cpi	r25, 0x02	; 2
     6e8:	59 f0       	breq	.+22     	; 0x700 <LanyardCode+0xa4>
     6ea:	93 30       	cpi	r25, 0x03	; 3
     6ec:	79 f4       	brne	.+30     	; 0x70c <LanyardCode+0xb0>
            case 1:
                effect = 0x17f;
                break;

            case 3:
                effect = 0x13f;
     6ee:	2f e3       	ldi	r18, 0x3F	; 63
     6f0:	31 e0       	ldi	r19, 0x01	; 1
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <LanyardCode+0xa8>
    lanyardLastActive = getClock();

    if (lastButtonState == 0xff){
        switch (buttonState) {
            case 0:
                effect = 0x19f;
     6f4:	2f e9       	ldi	r18, 0x9F	; 159
     6f6:	31 e0       	ldi	r19, 0x01	; 1
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <LanyardCode+0xa8>
                break;

            case 1:
                effect = 0x17f;
     6fa:	2f e7       	ldi	r18, 0x7F	; 127
     6fc:	31 e0       	ldi	r19, 0x01	; 1
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <LanyardCode+0xa8>
            case 3:
                effect = 0x13f;
                break;

            case 2:
                effect = 0x15f;
     700:	2f e5       	ldi	r18, 0x5F	; 95
     702:	31 e0       	ldi	r19, 0x01	; 1
     704:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     708:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
                break;
        }
        gameNow = LANYARD;
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     712:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <lanyardPos>
     716:	e8 2f       	mov	r30, r24
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	e2 5b       	subi	r30, 0xB2	; 178
     71c:	f1 44       	sbci	r31, 0x41	; 65
     71e:	20 81       	ld	r18, Z
     720:	92 13       	cpse	r25, r18
     722:	12 c0       	rjmp	.+36     	; 0x748 <LanyardCode+0xec>
            lanyardState &= TRUE;
     724:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     728:	91 70       	andi	r25, 0x01	; 1
     72a:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     72e:	e0 91 75 be 	lds	r30, 0xBE75	; 0x80be75 <__bss_end+0x835b>
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	e6 53       	subi	r30, 0x36	; 54
     736:	f5 4c       	sbci	r31, 0xC5	; 197
     738:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     73a:	e0 91 74 be 	lds	r30, 0xBE74	; 0x80be74 <__bss_end+0x835a>
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	e6 53       	subi	r30, 0x36	; 54
     742:	f5 4c       	sbci	r31, 0xC5	; 197
     744:	10 82       	st	Z, r1
     746:	09 c0       	rjmp	.+18     	; 0x75a <LanyardCode+0xfe>
        } else {
            lanyardState = FALSE;
     748:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     74c:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     74e:	28 f4       	brcc	.+10     	; 0x75a <LanyardCode+0xfe>
     750:	54 df       	rcall	.-344    	; 0x5fa <initLanyard>
                gameNow         = BASTET;
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
                return 0;
     758:	34 c0       	rjmp	.+104    	; 0x7c2 <LanyardCode+0x166>
            }
        }
        lanyardPos++;
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <lanyardPos>
        lanyardCnt++;            
     760:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardCnt>
     764:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     766:	94 30       	cpi	r25, 0x04	; 4
     768:	18 f4       	brcc	.+6      	; 0x770 <LanyardCode+0x114>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     76a:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardCnt>
     76e:	29 c0       	rjmp	.+82     	; 0x7c2 <LanyardCode+0x166>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     770:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <lanyardCnt>
            if (lanyardState == TRUE) {
     774:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     778:	91 30       	cpi	r25, 0x01	; 1
     77a:	e1 f4       	brne	.+56     	; 0x7b4 <LanyardCode+0x158>
                if ((lanyardPos % 4) == 0) {
     77c:	98 2f       	mov	r25, r24
     77e:	93 70       	andi	r25, 0x03	; 3
     780:	69 f4       	brne	.+26     	; 0x79c <LanyardCode+0x140>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     782:	e8 2f       	mov	r30, r24
     784:	e6 95       	lsr	r30
     786:	e6 95       	lsr	r30
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e8 58       	subi	r30, 0x88	; 136
     78c:	f1 44       	sbci	r31, 0x41	; 65
     78e:	e5 81       	ldd	r30, Z+5	; 0x05
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
     796:	e6 53       	subi	r30, 0x36	; 54
     798:	f5 4c       	sbci	r31, 0xC5	; 197
     79a:	90 83       	st	Z, r25
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     79c:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     79e:	89 f4       	brne	.+34     	; 0x7c2 <LanyardCode+0x166>
     7a0:	8b e7       	ldi	r24, 0x7B	; 123
     7a2:	87 d6       	rcall	.+3342   	; 0x14b2 <UpdateState>
                    iLED[CAT]       = 0;
     7a4:	ec 2f       	mov	r30, r28
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	e6 53       	subi	r30, 0x36	; 54
     7aa:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     7ac:	10 82       	st	Z, r1
     7ae:	82 e4       	ldi	r24, 0x42	; 66
     7b0:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <LanyardCode+0x15e>
     7b4:	22 df       	rcall	.-444    	; 0x5fa <initLanyard>
                effect = 0x21;
     7b6:	81 e2       	ldi	r24, 0x21	; 33
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     7be:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            }
        }
    }

    return 0;
}
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     7c8:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeHckrPos>
    mazePos = 0;
     7cc:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazePos>
    mazeCnt = 0;
     7d0:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
    mazeState = TRUE;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <mazeState>
    inverted  = FALSE;
     7da:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <inverted>
    iLED[CAT]       = 0;
     7de:	e0 91 66 be 	lds	r30, 0xBE66	; 0x80be66 <__bss_end+0x834c>
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e6 53       	subi	r30, 0x36	; 54
     7e6:	f5 4c       	sbci	r31, 0xC5	; 197
     7e8:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     7ea:	e0 91 77 be 	lds	r30, 0xBE77	; 0x80be77 <__bss_end+0x835d>
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	e6 53       	subi	r30, 0x36	; 54
     7f2:	f5 4c       	sbci	r31, 0xC5	; 197
     7f4:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     7f6:	e0 91 76 be 	lds	r30, 0xBE76	; 0x80be76 <__bss_end+0x835c>
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	e6 53       	subi	r30, 0x36	; 54
     7fe:	f5 4c       	sbci	r31, 0xC5	; 197
     800:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     802:	e0 91 75 be 	lds	r30, 0xBE75	; 0x80be75 <__bss_end+0x835b>
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	e6 53       	subi	r30, 0x36	; 54
     80a:	f5 4c       	sbci	r31, 0xC5	; 197
     80c:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     80e:	e0 91 74 be 	lds	r30, 0xBE74	; 0x80be74 <__bss_end+0x835a>
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	e6 53       	subi	r30, 0x36	; 54
     816:	f5 4c       	sbci	r31, 0xC5	; 197
     818:	10 82       	st	Z, r1
     81a:	ae e7       	ldi	r26, 0x7E	; 126
     81c:	be eb       	ldi	r27, 0xBE	; 190
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     81e:	ed 91       	ld	r30, X+
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	e6 53       	subi	r30, 0x36	; 54
     824:	f5 4c       	sbci	r31, 0xC5	; 197
     826:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     828:	8e eb       	ldi	r24, 0xBE	; 190
     82a:	a4 38       	cpi	r26, 0x84	; 132
     82c:	b8 07       	cpc	r27, r24
     82e:	b9 f7       	brne	.-18     	; 0x81e <initMaze+0x56>
        iLED[HCKR[G][i]] = 0;
}
     830:	08 95       	ret

00000832 <showFieldStrength>:

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     832:	97 ff       	sbrs	r25, 7
     834:	03 c0       	rjmp	.+6      	; 0x83c <showFieldStrength+0xa>
     836:	91 95       	neg	r25
     838:	81 95       	neg	r24
     83a:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     83c:	9c 01       	movw	r18, r24
     83e:	22 0f       	add	r18, r18
     840:	33 1f       	adc	r19, r19
     842:	29 37       	cpi	r18, 0x79	; 121
     844:	31 05       	cpc	r19, r1
     846:	1c f0       	brlt	.+6      	; 0x84e <showFieldStrength+0x1c>
        gameNow = MAZE;
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <gameNow>

    if (gameNow == MAZE) {
     84e:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <gameNow>
     852:	41 30       	cpi	r20, 0x01	; 1
     854:	21 f5       	brne	.+72     	; 0x89e <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     856:	28 37       	cpi	r18, 0x78	; 120
     858:	31 05       	cpc	r19, r1
     85a:	1c f4       	brge	.+6      	; 0x862 <showFieldStrength+0x30>
            WingBar(0,0);
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	1d c0       	rjmp	.+58     	; 0x89c <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     862:	88 37       	cpi	r24, 0x78	; 120
     864:	91 05       	cpc	r25, r1
     866:	1c f4       	brge	.+6      	; 0x86e <showFieldStrength+0x3c>
            WingBar(1,1);
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	17 c0       	rjmp	.+46     	; 0x89c <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     86e:	2c 32       	cpi	r18, 0x2C	; 44
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	34 07       	cpc	r19, r20
     874:	1c f4       	brge	.+6      	; 0x87c <showFieldStrength+0x4a>
            WingBar(2,2);
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	10 c0       	rjmp	.+32     	; 0x89c <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     87c:	28 0f       	add	r18, r24
     87e:	39 1f       	adc	r19, r25
     880:	28 35       	cpi	r18, 0x58	; 88
     882:	32 40       	sbci	r19, 0x02	; 2
     884:	1c f4       	brge	.+6      	; 0x88c <showFieldStrength+0x5a>
            WingBar(3,3);
     886:	63 e0       	ldi	r22, 0x03	; 3
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	08 c0       	rjmp	.+16     	; 0x89c <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     88c:	8c 32       	cpi	r24, 0x2C	; 44
     88e:	91 40       	sbci	r25, 0x01	; 1
     890:	1c f4       	brge	.+6      	; 0x898 <showFieldStrength+0x66>
            WingBar(4,4);
     892:	64 e0       	ldi	r22, 0x04	; 4
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	02 c0       	rjmp	.+4      	; 0x89c <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     898:	65 e0       	ldi	r22, 0x05	; 5
     89a:	85 e0       	ldi	r24, 0x05	; 5
     89c:	ed c6       	rjmp	.+3546   	; 0x1678 <WingBar>
     89e:	08 95       	ret

000008a0 <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     8a4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	91 f4       	brne	.+36     	; 0x8d0 <MagnetMaze+0x30>
     8ac:	6a e0       	ldi	r22, 0x0A	; 10
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <mazeLastActive>
     8b4:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <mazeLastActive+0x1>
     8b8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <idleTimeout>
     8bc:	88 23       	and	r24, r24
     8be:	41 f0       	breq	.+16     	; 0x8d0 <MagnetMaze+0x30>
        /* clean up maze game and go back to text game */
        initMaze();
     8c0:	83 df       	rcall	.-250    	; 0x7c8 <initMaze>
        gameNow = TEXT;
     8c2:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     8c6:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     8ca:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
        return 0;
     8ce:	dc c0       	rjmp	.+440    	; 0xa88 <MagnetMaze+0x1e8>
    }
        
    if (CheckState(MAZE_INACTIVE))
     8d0:	87 ef       	ldi	r24, 0xF7	; 247
     8d2:	f9 d5       	rcall	.+3058   	; 0x14c6 <CheckState>
     8d4:	81 11       	cpse	r24, r1
     8d6:	d8 c0       	rjmp	.+432    	; 0xa88 <MagnetMaze+0x1e8>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     8d8:	8d e7       	ldi	r24, 0x7D	; 125
     8da:	f5 d5       	rcall	.+3050   	; 0x14c6 <CheckState>
     8dc:	81 11       	cpse	r24, r1
     8de:	d4 c0       	rjmp	.+424    	; 0xa88 <MagnetMaze+0x1e8>
     8e0:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <MagnetMaze+0x4a>
     8e8:	cf c0       	rjmp	.+414    	; 0xa88 <MagnetMaze+0x1e8>
     8ea:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <calHall>
        return 0;

    if (calHall == 0)
     8ee:	90 91 f4 3a 	lds	r25, 0x3AF4	; 0x803af4 <calHall+0x1>
     8f2:	89 2b       	or	r24, r25
     8f4:	41 f4       	brne	.+16     	; 0x906 <MagnetMaze+0x66>
     8f6:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
        calHall = adcHall;
     8fa:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
     8fe:	80 93 f3 3a 	sts	0x3AF3, r24	; 0x803af3 <calHall>
     902:	90 93 f4 3a 	sts	0x3AF4, r25	; 0x803af4 <calHall+0x1>
     906:	c0 91 bb 3a 	lds	r28, 0x3ABB	; 0x803abb <adcHall>

    int16_t valHall = adcHall - calHall;
     90a:	d0 91 bc 3a 	lds	r29, 0x3ABC	; 0x803abc <adcHall+0x1>
     90e:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <calHall>
     912:	90 91 f4 3a 	lds	r25, 0x3AF4	; 0x803af4 <calHall+0x1>
     916:	c8 1b       	sub	r28, r24
     918:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     91a:	ce 01       	movw	r24, r28
     91c:	8a df       	rcall	.-236    	; 0x832 <showFieldStrength>
     91e:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <curHallState>

    switch (curHallState) {
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	89 f0       	breq	.+34     	; 0x948 <MagnetMaze+0xa8>
     926:	18 f0       	brcs	.+6      	; 0x92e <MagnetMaze+0x8e>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	c1 f0       	breq	.+48     	; 0x95c <MagnetMaze+0xbc>
     92c:	1f c0       	rjmp	.+62     	; 0x96c <MagnetMaze+0xcc>
     92e:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     930:	9e ef       	ldi	r25, 0xFE	; 254
     932:	d9 07       	cpc	r29, r25
     934:	14 f4       	brge	.+4      	; 0x93a <MagnetMaze+0x9a>
     936:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     938:	04 c0       	rjmp	.+8      	; 0x942 <MagnetMaze+0xa2>
     93a:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     93c:	d1 40       	sbci	r29, 0x01	; 1
     93e:	5c f0       	brlt	.+22     	; 0x956 <MagnetMaze+0xb6>
     940:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     942:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <newHallState>
     946:	12 c0       	rjmp	.+36     	; 0x96c <MagnetMaze+0xcc>
     948:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	d9 07       	cpc	r29, r25
     94e:	c4 f7       	brge	.-16     	; 0x940 <MagnetMaze+0xa0>
     950:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     952:	df 4f       	sbci	r29, 0xFF	; 255
     954:	84 f3       	brlt	.-32     	; 0x936 <MagnetMaze+0x96>
     956:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     95a:	08 c0       	rjmp	.+16     	; 0x96c <MagnetMaze+0xcc>
     95c:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     95e:	9e ef       	ldi	r25, 0xFE	; 254
     960:	d9 07       	cpc	r29, r25
     962:	4c f3       	brlt	.-46     	; 0x936 <MagnetMaze+0x96>
     964:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     966:	d1 05       	cpc	r29, r1
     968:	b4 f3       	brlt	.-20     	; 0x956 <MagnetMaze+0xb6>
     96a:	ea cf       	rjmp	.-44     	; 0x940 <MagnetMaze+0xa0>
     96c:	c0 91 66 be 	lds	r28, 0xBE66	; 0x80be66 <__bss_end+0x834c>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     970:	ec 2f       	mov	r30, r28
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <newHallState>
     978:	99 23       	and	r25, r25
     97a:	19 f0       	breq	.+6      	; 0x982 <MagnetMaze+0xe2>
     97c:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValue>
     980:	01 c0       	rjmp	.+2      	; 0x984 <MagnetMaze+0xe4>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	e6 53       	subi	r30, 0x36	; 54
     986:	f5 4c       	sbci	r31, 0xC5	; 197
     988:	20 83       	st	Z, r18
     98a:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     98c:	31 e0       	ldi	r19, 0x01	; 1
     98e:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     992:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
     996:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     998:	09 f4       	brne	.+2      	; 0x99c <MagnetMaze+0xfc>
     99a:	76 c0       	rjmp	.+236    	; 0xa88 <MagnetMaze+0x1e8>
     99c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     9a0:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazeLastActive>
     9a4:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <mazeLastActive+0x1>
     9a8:	20 91 4a 38 	lds	r18, 0x384A	; 0x80384a <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     9ac:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <newHallState>
     9b0:	21 11       	cpse	r18, r1
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <MagnetMaze+0x124>
     9b4:	88 23       	and	r24, r24
     9b6:	31 f0       	breq	.+12     	; 0x9c4 <MagnetMaze+0x124>
     9b8:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <MagnetMaze+0x120>
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inverted>
     9c4:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <curHallState>

        curHallState = newHallState;
     9c8:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     9ca:	09 f4       	brne	.+2      	; 0x9ce <MagnetMaze+0x12e>
     9cc:	5d c0       	rjmp	.+186    	; 0xa88 <MagnetMaze+0x1e8>
     9ce:	91 e0       	ldi	r25, 0x01	; 1
            gameNow = MAZE;
     9d0:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <gameNow>
     9d4:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inverted>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     9d8:	99 23       	and	r25, r25
     9da:	11 f0       	breq	.+4      	; 0x9e0 <MagnetMaze+0x140>
     9dc:	93 e0       	ldi	r25, 0x03	; 3
     9de:	89 27       	eor	r24, r25
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	e2 2f       	mov	r30, r18
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ec 55       	subi	r30, 0x5C	; 92
     9e8:	f1 44       	sbci	r31, 0x41	; 65
     9ea:	40 81       	ld	r20, Z
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	84 17       	cp	r24, r20
     9f0:	95 07       	cpc	r25, r21
     9f2:	91 f4       	brne	.+36     	; 0xa18 <MagnetMaze+0x178>
     9f4:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <mazeState>
                mazeState &= TRUE;
     9f8:	81 70       	andi	r24, 0x01	; 1
     9fa:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <mazeState>
     9fe:	e0 91 75 be 	lds	r30, 0xBE75	; 0x80be75 <__bss_end+0x835b>
                iLED[EYE[R][L]] = 0;
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	e6 53       	subi	r30, 0x36	; 54
     a06:	f5 4c       	sbci	r31, 0xC5	; 197
     a08:	10 82       	st	Z, r1
     a0a:	e0 91 74 be 	lds	r30, 0xBE74	; 0x80be74 <__bss_end+0x835a>
                iLED[EYE[R][R]] = 0;
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	e6 53       	subi	r30, 0x36	; 54
     a12:	f5 4c       	sbci	r31, 0xC5	; 197
     a14:	10 82       	st	Z, r1
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <MagnetMaze+0x17c>
     a18:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <mazeState>
            } else {
                mazeState = FALSE;
     a1c:	2f 5f       	subi	r18, 0xFF	; 255
            }
            mazePos++;
     a1e:	20 93 4a 38 	sts	0x384A, r18	; 0x80384a <mazePos>
     a22:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <mazeCnt>
            mazeCnt++;            
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	83 30       	cpi	r24, 0x03	; 3
            if (mazeCnt >= 3) {
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <MagnetMaze+0x192>
     a2c:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     a30:	2b c0       	rjmp	.+86     	; 0xa88 <MagnetMaze+0x1e8>
     a32:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     a36:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <mazeState>
                if (mazeState == TRUE) {
     a3a:	81 30       	cpi	r24, 0x01	; 1
     a3c:	e1 f4       	brne	.+56     	; 0xa76 <MagnetMaze+0x1d6>
     a3e:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     a42:	e8 2f       	mov	r30, r24
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	e8 58       	subi	r30, 0x88	; 136
     a48:	f1 44       	sbci	r31, 0x41	; 65
     a4a:	e6 81       	ldd	r30, Z+6	; 0x06
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
     a52:	e6 53       	subi	r30, 0x36	; 54
     a54:	f5 4c       	sbci	r31, 0xC5	; 197
     a56:	90 83       	st	Z, r25
     a58:	8f 5f       	subi	r24, 0xFF	; 255
                    mazeHckrPos++;
     a5a:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     a5e:	22 31       	cpi	r18, 0x12	; 18
     a60:	99 f4       	brne	.+38     	; 0xa88 <MagnetMaze+0x1e8>
                        UpdateState(MAZE_COMPLETED);
     a62:	8d e7       	ldi	r24, 0x7D	; 125
     a64:	26 d5       	rcall	.+2636   	; 0x14b2 <UpdateState>
     a66:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	e6 53       	subi	r30, 0x36	; 54
     a6c:	f5 4c       	sbci	r31, 0xC5	; 197
     a6e:	10 82       	st	Z, r1
                        effect = 0x42;
     a70:	82 e4       	ldi	r24, 0x42	; 66
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <MagnetMaze+0x1e0>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     a76:	a8 de       	rcall	.-688    	; 0x7c8 <initMaze>
     a78:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    gameNow   = TEXT;
     a7c:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     a84:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
     a88:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <Setup>:
     a90:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     a92:	df 93       	push	r29
    cli();
     a94:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     a96:	88 ed       	ldi	r24, 0xD8	; 216
     a98:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     a9a:	c1 e0       	ldi	r28, 0x01	; 1
     a9c:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     aa0:	8a e4       	ldi	r24, 0x4A	; 74
     aa2:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     aa6:	8c e7       	ldi	r24, 0x7C	; 124
     aa8:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     aac:	9f e3       	ldi	r25, 0x3F	; 63
     aae:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     ab2:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     ab6:	80 68       	ori	r24, 0x80	; 128
     ab8:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     abc:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     ac0:	80 68       	ori	r24, 0x80	; 128
     ac2:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     ac6:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     aca:	80 68       	ori	r24, 0x80	; 128
     acc:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     ad0:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     ad4:	80 68       	ori	r24, 0x80	; 128
     ad6:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     ada:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     ade:	80 68       	ori	r24, 0x80	; 128
     ae0:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     ae4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     ae8:	80 68       	ori	r24, 0x80	; 128
     aea:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     aee:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     af2:	d2 e0       	ldi	r29, 0x02	; 2
     af4:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     af8:	2b e5       	ldi	r18, 0x5B	; 91
     afa:	31 e0       	ldi	r19, 0x01	; 1
     afc:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     b00:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     b04:	80 ea       	ldi	r24, 0xA0	; 160
     b06:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     b0a:	80 ec       	ldi	r24, 0xC0	; 192
     b0c:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     b16:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     b18:	1d ba       	out	0x1d, r1	; 29
    AUPOS = 0;     //Used as audio input/output buffer counter
     b1a:	1e ba       	out	0x1e, r1	; 30
    GPIOR3 = 0;    //
     b1c:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     b1e:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     b22:	88 e0       	ldi	r24, 0x08	; 8
     b24:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     b28:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     b2c:	87 e7       	ldi	r24, 0x77	; 119
     b2e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     b32:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     b36:	8b e0       	ldi	r24, 0x0B	; 11
     b38:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     b3c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     b40:	81 60       	ori	r24, 0x01	; 1
     b42:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     b46:	85 e0       	ldi	r24, 0x05	; 5
     b48:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     b4c:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     b58:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     b5c:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     b60:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     b64:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     b68:	8b e8       	ldi	r24, 0x8B	; 139
     b6a:	93 e0       	ldi	r25, 0x03	; 3
     b6c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     b70:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     b74:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     b78:	fd db       	rcall	.-2054   	; 0x374 <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     b7a:	82 e1       	ldi	r24, 0x12	; 18
     b7c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     b86:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     b8a:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     b8e:	84 e4       	ldi	r24, 0x44	; 68
     b90:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     b94:	8e e1       	ldi	r24, 0x1E	; 30
     b96:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     b9a:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     b9e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     ba8:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     bac:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     bb0:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     bb4:	82 e5       	ldi	r24, 0x52	; 82
     bb6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     bba:	84 e0       	ldi	r24, 0x04	; 4
     bbc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     bc0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     bc4:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     bc8:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     bcc:	81 60       	ori	r24, 0x01	; 1
     bce:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     bd2:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     be2:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     bec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bf0:	80 fd       	sbrc	r24, 0
     bf2:	fc cf       	rjmp	.-8      	; 0xbec <Setup+0x15c>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     bf4:	80 e3       	ldi	r24, 0x30	; 48
     bf6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     bfa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     bfe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c02:	82 fd       	sbrc	r24, 2
     c04:	fc cf       	rjmp	.-8      	; 0xbfe <Setup+0x16e>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	98 e7       	ldi	r25, 0x78	; 120
     c0a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c0e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     c12:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     c16:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     c1a:	82 96       	adiw	r24, 0x22	; 34
     c1c:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <tmp16bit>
     c20:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     c24:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c28:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     c2c:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
     c30:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
     c34:	28 17       	cp	r18, r24
     c36:	39 07       	cpc	r19, r25
     c38:	70 f4       	brcc	.+28     	; 0xc56 <Setup+0x1c6>
     c3a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     c3e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     c42:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
     c46:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
     c4a:	82 1b       	sub	r24, r18
     c4c:	93 0b       	sbc	r25, r19
     c4e:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <tmp16bit>
     c52:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     c56:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c5a:	83 fd       	sbrc	r24, 3
     c5c:	fc cf       	rjmp	.-8      	; 0xc56 <Setup+0x1c6>
    RTC_CMP            = tmp16bit;                         //Button timing
     c5e:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
     c62:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
     c66:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c6a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     c80:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c84:	80 fd       	sbrc	r24, 0
     c86:	fc cf       	rjmp	.-8      	; 0xc80 <Setup+0x1f0>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     c88:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     c92:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     c9c:	10 92 75 3a 	sts	0x3A75, r1	; 0x803a75 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     ca0:	85 e7       	ldi	r24, 0x75	; 117
     ca2:	9a e3       	ldi	r25, 0x3A	; 58
     ca4:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     ca8:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>

    sei();
     cac:	78 94       	sei
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     cd0:	84 e4       	ldi	r24, 0x44	; 68
     cd2:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     cd6:	ec b3       	in	r30, 0x1c	; 28
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	e8 9f       	mul	r30, r24
     cdc:	f0 01       	movw	r30, r0
     cde:	11 24       	eor	r1, r1
     ce0:	e6 53       	subi	r30, 0x36	; 54
     ce2:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     ce4:	a8 e2       	ldi	r26, 0x28	; 40
     ce6:	ba e0       	ldi	r27, 0x0A	; 10
     ce8:	96 e0       	ldi	r25, 0x06	; 6
     cea:	81 91       	ld	r24, Z+
     cec:	8d 93       	st	X+, r24
     cee:	9a 95       	dec	r25
     cf0:	e1 f7       	brne	.-8      	; 0xcea <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     cf2:	8b e0       	ldi	r24, 0x0B	; 11
     cf4:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     cf8:	8c b3       	in	r24, 0x1c	; 28
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	58 f4       	brcc	.+22     	; 0xd14 <__vector_8+0x60>
        asm(
     cfe:	8c b3       	in	r24, 0x1c	; 28
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <__vector_8+0x52>
     d04:	99 0f       	add	r25, r25
     d06:	8a 95       	dec	r24
     d08:	ea f7       	brpl	.-6      	; 0xd04 <__vector_8+0x50>
     d0a:	99 b9       	out	0x09, r25	; 9
     d0c:	8c b3       	in	r24, 0x1c	; 28
     d0e:	83 95       	inc	r24
     d10:	8c bb       	out	0x1c, r24	; 28
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     d14:	8c b3       	in	r24, 0x1c	; 28
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	21 f4       	brne	.+8      	; 0xd22 <__vector_8+0x6e>
     d1a:	2a 9a       	sbi	0x05, 2	; 5
     d1c:	83 95       	inc	r24
     d1e:	8c bb       	out	0x1c, r24	; 28
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <__vector_8+0x74>
     d22:	2e 9a       	sbi	0x05, 6	; 5
     d24:	88 27       	eor	r24, r24
     d26:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     d28:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     d2c:	88 23       	and	r24, r24
     d2e:	29 f0       	breq	.+10     	; 0xd3a <__vector_8+0x86>
     d30:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     d34:	81 50       	subi	r24, 0x01	; 1
     d36:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	8f 93       	push	r24
     d62:	9f 93       	push	r25
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
    if (*serTxAddr) {
     d68:	e0 91 b9 3a 	lds	r30, 0x3AB9	; 0x803ab9 <serTxAddr>
     d6c:	f0 91 ba 3a 	lds	r31, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     d70:	80 81       	ld	r24, Z
     d72:	88 23       	and	r24, r24
     d74:	91 f0       	breq	.+36     	; 0xd9a <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     d76:	80 81       	ld	r24, Z
     d78:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     d7c:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <serTxAddr>
     d80:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     d8a:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     d8e:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d92:	80 62       	ori	r24, 0x20	; 32
     d94:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     da0:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     dd4:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     dd8:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ddc:	80 81       	ld	r24, Z
     dde:	81 11       	cpse	r24, r1
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <__vector_14+0x36>
     de2:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     de6:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     dea:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     dee:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     df2:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     df6:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     dfa:	80 81       	ld	r24, Z
     dfc:	88 23       	and	r24, r24
     dfe:	e1 f0       	breq	.+56     	; 0xe38 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     e00:	20 81       	ld	r18, Z
     e02:	40 91 b6 3a 	lds	r20, 0x3AB6	; 0x803ab6 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	2f 57       	subi	r18, 0x7F	; 127
     e0a:	31 09       	sbc	r19, r1
     e0c:	42 9f       	mul	r20, r18
     e0e:	c0 01       	movw	r24, r0
     e10:	43 9f       	mul	r20, r19
     e12:	90 0d       	add	r25, r0
     e14:	11 24       	eor	r1, r1
     e16:	89 2f       	mov	r24, r25
     e18:	99 0f       	add	r25, r25
     e1a:	99 0b       	sbc	r25, r25
     e1c:	80 58       	subi	r24, 0x80	; 128
     e1e:	9f 4f       	sbci	r25, 0xFF	; 255
     e20:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     e24:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     e28:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     e32:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <__vector_14+0x88>
    } else {
        DAC0_DATA = 0x80;
     e38:	80 e8       	ldi	r24, 0x80	; 128
     e3a:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        auPlayDone = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	80 93 f2 3a 	sts	0x3AF2, r24	; 0x803af2 <auPlayDone>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	8f 93       	push	r24
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
    if (serRxDone == 0){
     e72:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
     e76:	81 11       	cpse	r24, r1
     e78:	44 c0       	rjmp	.+136    	; 0xf02 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     e7a:	ed b3       	in	r30, 0x1d	; 29
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     e82:	eb 58       	subi	r30, 0x8B	; 139
     e84:	f5 4c       	sbci	r31, 0xC5	; 197
     e86:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     e88:	ed b3       	in	r30, 0x1d	; 29
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	eb 58       	subi	r30, 0x8B	; 139
     e8e:	f5 4c       	sbci	r31, 0xC5	; 197
     e90:	80 81       	ld	r24, Z
     e92:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     e96:	ed b3       	in	r30, 0x1d	; 29
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	eb 58       	subi	r30, 0x8B	; 139
     e9c:	f5 4c       	sbci	r31, 0xC5	; 197
     e9e:	80 81       	ld	r24, Z
     ea0:	8a 30       	cpi	r24, 0x0A	; 10
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <__vector_27+0x50>
     ea4:	ed b3       	in	r30, 0x1d	; 29
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	eb 58       	subi	r30, 0x8B	; 139
     eaa:	f5 4c       	sbci	r31, 0xC5	; 197
     eac:	80 81       	ld	r24, Z
     eae:	8d 30       	cpi	r24, 0x0D	; 13
     eb0:	49 f4       	brne	.+18     	; 0xec4 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     eb2:	ed b3       	in	r30, 0x1d	; 29
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	eb 58       	subi	r30, 0x8B	; 139
     eb8:	f5 4c       	sbci	r31, 0xC5	; 197
     eba:	10 82       	st	Z, r1
            serRxDone = 1;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <serRxDone>
     ec2:	1f c0       	rjmp	.+62     	; 0xf02 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     ec4:	ed b3       	in	r30, 0x1d	; 29
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	eb 58       	subi	r30, 0x8B	; 139
     eca:	f5 4c       	sbci	r31, 0xC5	; 197
     ecc:	80 81       	ld	r24, Z
     ece:	88 30       	cpi	r24, 0x08	; 8
     ed0:	39 f0       	breq	.+14     	; 0xee0 <__vector_27+0x7e>
     ed2:	ed b3       	in	r30, 0x1d	; 29
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	eb 58       	subi	r30, 0x8B	; 139
     ed8:	f5 4c       	sbci	r31, 0xC5	; 197
     eda:	80 81       	ld	r24, Z
     edc:	8f 37       	cpi	r24, 0x7F	; 127
     ede:	59 f4       	brne	.+22     	; 0xef6 <__vector_27+0x94>
     ee0:	8d b3       	in	r24, 0x1d	; 29
     ee2:	88 23       	and	r24, r24
     ee4:	41 f0       	breq	.+16     	; 0xef6 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     ee6:	ed b3       	in	r30, 0x1d	; 29
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	eb 58       	subi	r30, 0x8B	; 139
     eec:	f5 4c       	sbci	r31, 0xC5	; 197
     eee:	10 82       	st	Z, r1
            --RXCNT;
     ef0:	8d b3       	in	r24, 0x1d	; 29
     ef2:	81 50       	subi	r24, 0x01	; 1
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     ef6:	8d b3       	in	r24, 0x1d	; 29
     ef8:	80 34       	cpi	r24, 0x40	; 64
     efa:	18 f4       	brcc	.+6      	; 0xf02 <__vector_27+0xa0>
     efc:	8d b3       	in	r24, 0x1d	; 29
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     f02:	80 e8       	ldi	r24, 0x80	; 128
     f04:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	8f 91       	pop	r24
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	8f 93       	push	r24
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
    TCB0_CNT = 0;
     f28:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     f2c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     f36:	e5 e0       	ldi	r30, 0x05	; 5
     f38:	f8 e0       	ldi	r31, 0x08	; 8
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7d       	andi	r24, 0xDF	; 223
     f3e:	80 83       	st	Z, r24
};
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	8f 91       	pop	r24
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	1f 90       	pop	r1
     f4e:	18 95       	reti

00000f50 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	8f 93       	push	r24
     f5c:	9f 93       	push	r25
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     f62:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <adc0Chg>
     f66:	81 11       	cpse	r24, r1
     f68:	19 c0       	rjmp	.+50     	; 0xf9c <__vector_20+0x4c>
        AUPOS = (AUPOS+1)&(AULEN-1);
     f6a:	8e b3       	in	r24, 0x1e	; 30
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	87 70       	andi	r24, 0x07	; 7
     f70:	8e bb       	out	0x1e, r24	; 30
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn[AUPOS]=ADC0_RESL;
     f72:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     f76:	8e 31       	cpi	r24, 0x1E	; 30
     f78:	49 f4       	brne	.+18     	; 0xf8c <__vector_20+0x3c>
     f7a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f7e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     f82:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <adcTemp>
     f86:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <adcTemp+0x1>
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <__vector_20+0x56>
     f8c:	ee b3       	in	r30, 0x1e	; 30
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f94:	ee 53       	subi	r30, 0x3E	; 62
     f96:	f5 4c       	sbci	r31, 0xC5	; 197
     f98:	80 83       	st	Z, r24
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <__vector_20+0x56>
    } else --adc0Chg;
     f9c:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <adc0Chg>
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     fcc:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     fd0:	81 11       	cpse	r24, r1
     fd2:	0a c0       	rjmp	.+20     	; 0xfe8 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     fd4:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     fd8:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     fdc:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcPhot>
     fe0:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	10 c0       	rjmp	.+32     	; 0x1008 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     fe8:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	79 f4       	brne	.+30     	; 0x100e <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     ff6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ffa:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ffe:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <adcHall>
    1002:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    100c:	10 c0       	rjmp	.+32     	; 0x102e <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
    100e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
    1012:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
    1016:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <adcBtns>
    101a:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <adcBtns+0x1>
        if (A1CNT == 15){
    101e:	8f b3       	in	r24, 0x1f	; 31
    1020:	8f 30       	cpi	r24, 0x0F	; 15
    1022:	29 f4       	brne	.+10     	; 0x102e <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
    1024:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
    1028:	88 e0       	ldi	r24, 0x08	; 8
    102a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
    102e:	8f b3       	in	r24, 0x1f	; 31
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	8f 70       	andi	r24, 0x0F	; 15
    1036:	99 27       	eor	r25, r25
    1038:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
    1060:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1064:	81 ff       	sbrs	r24, 1
    1066:	39 c0       	rjmp	.+114    	; 0x10da <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
    1068:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    106c:	8f 3f       	cpi	r24, 0xFF	; 255
    106e:	29 f0       	breq	.+10     	; 0x107a <__vector_6+0x2c>
    1070:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
    107a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    107e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1082:	82 96       	adiw	r24, 0x22	; 34
    1084:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <tmp16bit>
    1088:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
    108c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    1090:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    1094:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
    1098:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
    109c:	28 17       	cp	r18, r24
    109e:	39 07       	cpc	r19, r25
    10a0:	70 f4       	brcc	.+28     	; 0x10be <__vector_6+0x70>
    10a2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    10a6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    10aa:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
    10ae:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <tmp16bit>
    10ba:	90 93 f8 3a 	sts	0x3AF8, r25	; 0x803af8 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    10be:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    10c2:	83 fd       	sbrc	r24, 3
    10c4:	fc cf       	rjmp	.-8      	; 0x10be <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    10c6:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <tmp16bit>
    10ca:	90 91 f8 3a 	lds	r25, 0x3AF8	; 0x803af8 <tmp16bit+0x1>
    10ce:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    10d2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    10da:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <minuteMark>
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	0f 90       	pop	r0
    10f8:	1f 90       	pop	r1
    10fa:	18 95       	reti

000010fc <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    110e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    1112:	8f 91       	pop	r24
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    111e:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1122:	91 fd       	sbrc	r25, 1
    1124:	fc cf       	rjmp	.-8      	; 0x111e <EERead>
    1126:	fb 01       	movw	r30, r22
    1128:	48 0f       	add	r20, r24

    while(size){
    112a:	84 17       	cp	r24, r20
    112c:	39 f0       	breq	.+14     	; 0x113c <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    112e:	a8 2f       	mov	r26, r24
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	bc 5e       	subi	r27, 0xEC	; 236
    1134:	9c 91       	ld	r25, X
    1136:	91 93       	st	Z+, r25
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	f7 cf       	rjmp	.-18     	; 0x112a <EERead+0xc>
        --size;
    }
}
    113c:	08 95       	ret

0000113e <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    113e:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1140:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    1142:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    1144:	44 23       	and	r20, r20
    1146:	09 f1       	breq	.+66     	; 0x118a <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1148:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    114c:	51 fd       	sbrc	r21, 1
    114e:	fc cf       	rjmp	.-8      	; 0x1148 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1150:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1152:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1156:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    1158:	58 2f       	mov	r21, r24
    115a:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    115c:	8f 5f       	subi	r24, 0xFF	; 255
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	db 01       	movw	r26, r22
    1164:	11 97       	sbiw	r26, 0x01	; 1
    1166:	ac 91       	ld	r26, X
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	fc 5e       	subi	r31, 0xEC	; 236
    116c:	a0 83       	st	Z, r26
            --size;
    116e:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1170:	19 f0       	breq	.+6      	; 0x1178 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1172:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1174:	5f 31       	cpi	r21, 0x1F	; 31
    1176:	81 f7       	brne	.-32     	; 0x1158 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    1178:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    117a:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    117e:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1182:	52 ff       	sbrs	r21, 2
    1184:	df cf       	rjmp	.-66     	; 0x1144 <EEWrite+0x6>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    1188:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	08 95       	ret

0000118e <SerSend>:
}

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    118e:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    1192:	22 23       	and	r18, r18
    1194:	59 f0       	breq	.+22     	; 0x11ac <SerSend+0x1e>
        serTxAddr = addr;
    1196:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
    119a:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        serTxDone = 0;
    119e:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret
    } else return 1;    //Error: Still sending data
    11ac:	81 e0       	ldi	r24, 0x01	; 1
};
    11ae:	08 95       	ret

000011b0 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    11b0:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    11b2:	81 11       	cpse	r24, r1
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <SerSpeed+0x8>
    11b6:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	82 1b       	sub	r24, r18
    11be:	91 09       	sbc	r25, r1
    11c0:	98 2f       	mov	r25, r24
    11c2:	88 27       	eor	r24, r24
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    11cc:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    11d0:	08 95       	ret

000011d2 <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11d2:	82 e1       	ldi	r24, 0x12	; 18
    11d4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	f6 e0       	ldi	r31, 0x06	; 6
    11dc:	80 81       	ld	r24, Z
    11de:	8b 7f       	andi	r24, 0xFB	; 251
    11e0:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    11e2:	8e e1       	ldi	r24, 0x1E	; 30
    11e4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    11ee:	08 95       	ret

000011f0 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11f0:	82 e2       	ldi	r24, 0x22	; 34
    11f2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    11f6:	e0 e0       	ldi	r30, 0x00	; 0
    11f8:	f6 e0       	ldi	r31, 0x06	; 6
    11fa:	80 81       	ld	r24, Z
    11fc:	84 60       	ori	r24, 0x04	; 4
    11fe:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    1200:	87 e0       	ldi	r24, 0x07	; 7
    1202:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <adc0Chg>
    120c:	08 95       	ret

0000120e <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    120e:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    1212:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1216:	24 e0       	ldi	r18, 0x04	; 4
    1218:	96 95       	lsr	r25
    121a:	87 95       	ror	r24
    121c:	2a 95       	dec	r18
    121e:	e1 f7       	brne	.-8      	; 0x1218 <CheckButtons+0xa>
    1220:	99 27       	eor	r25, r25
    1222:	80 36       	cpi	r24, 0x60	; 96
    1224:	91 05       	cpc	r25, r1
    1226:	40 f4       	brcc	.+16     	; 0x1238 <CheckButtons+0x2a>
    1228:	8f 34       	cpi	r24, 0x4F	; 79
    122a:	91 05       	cpc	r25, r1
    122c:	88 f4       	brcc	.+34     	; 0x1250 <CheckButtons+0x42>
    122e:	c0 97       	sbiw	r24, 0x30	; 48
    1230:	09 97       	sbiw	r24, 0x09	; 9
    1232:	90 f4       	brcc	.+36     	; 0x1258 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    1234:	92 e0       	ldi	r25, 0x02	; 2
    1236:	11 c0       	rjmp	.+34     	; 0x125a <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1238:	85 37       	cpi	r24, 0x75	; 117
    123a:	91 05       	cpc	r25, r1
    123c:	68 f0       	brcs	.+26     	; 0x1258 <CheckButtons+0x4a>
    123e:	8e 38       	cpi	r24, 0x8E	; 142
    1240:	91 05       	cpc	r25, r1
    1242:	40 f0       	brcs	.+16     	; 0x1254 <CheckButtons+0x46>
    1244:	8e 59       	subi	r24, 0x9E	; 158
    1246:	91 09       	sbc	r25, r1
    1248:	81 97       	sbiw	r24, 0x21	; 33
    124a:	30 f4       	brcc	.+12     	; 0x1258 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    124c:	90 e0       	ldi	r25, 0x00	; 0
            break;
    124e:	05 c0       	rjmp	.+10     	; 0x125a <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    1250:	93 e0       	ldi	r25, 0x03	; 3
            break;
    1252:	03 c0       	rjmp	.+6      	; 0x125a <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    1254:	91 e0       	ldi	r25, 0x01	; 1
            break;
    1256:	01 c0       	rjmp	.+2      	; 0x125a <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    1258:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    125a:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <previousValue.3878>
    125e:	98 17       	cp	r25, r24
    1260:	19 f0       	breq	.+6      	; 0x1268 <CheckButtons+0x5a>
            previousValue = button;
    1262:	90 93 22 38 	sts	0x3822, r25	; 0x803822 <previousValue.3878>
            return 0xFF;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    1268:	08 95       	ret

0000126a <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    126a:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <state.3888>
    126e:	90 91 21 38 	lds	r25, 0x3821	; 0x803821 <state.3888+0x1>
    1272:	9c 01       	movw	r18, r24
    1274:	32 2f       	mov	r19, r18
    1276:	22 27       	eor	r18, r18
    1278:	32 95       	swap	r19
    127a:	33 0f       	add	r19, r19
    127c:	30 7e       	andi	r19, 0xE0	; 224
    127e:	82 27       	eor	r24, r18
    1280:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    1282:	9c 01       	movw	r18, r24
    1284:	23 2f       	mov	r18, r19
    1286:	33 27       	eor	r19, r19
    1288:	26 95       	lsr	r18
    128a:	82 27       	eor	r24, r18
    128c:	93 27       	eor	r25, r19
    state ^= (state << 7);
    128e:	9c 01       	movw	r18, r24
    1290:	36 95       	lsr	r19
    1292:	32 2f       	mov	r19, r18
    1294:	22 27       	eor	r18, r18
    1296:	37 95       	ror	r19
    1298:	27 95       	ror	r18
    129a:	82 27       	eor	r24, r18
    129c:	93 27       	eor	r25, r19
    129e:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <state.3888>
    12a2:	90 93 21 38 	sts	0x3821, r25	; 0x803821 <state.3888+0x1>
    return (state & 0xff);
}
    12a6:	08 95       	ret

000012a8 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	7b 01       	movw	r14, r22
    12b8:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    12ba:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    12be:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    12c2:	e8 2f       	mov	r30, r24
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	31 97       	sbiw	r30, 0x01	; 1
    12c8:	e7 70       	andi	r30, 0x07	; 7
    12ca:	ff 27       	eor	r31, r31
    12cc:	ed 5d       	subi	r30, 0xDD	; 221
    12ce:	f7 4c       	sbci	r31, 0xC7	; 199
    12d0:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    12d2:	cb df       	rcall	.-106    	; 0x126a <lfsr>
    12d4:	8d 21       	and	r24, r13
    12d6:	c8 0f       	add	r28, r24
    12d8:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    12da:	c7 df       	rcall	.-114    	; 0x126a <lfsr>
    12dc:	8d 21       	and	r24, r13
    12de:	c8 1b       	sub	r28, r24
    12e0:	d1 09       	sbc	r29, r1
    12e2:	0c 17       	cp	r16, r28
    12e4:	1d 07       	cpc	r17, r29
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <floatSpeed+0x42>
    12e8:	e8 01       	movw	r28, r16
    12ea:	c7 01       	movw	r24, r14
    12ec:	ec 16       	cp	r14, r28
    12ee:	fd 06       	cpc	r15, r29
    12f0:	08 f4       	brcc	.+2      	; 0x12f4 <floatSpeed+0x4c>
    12f2:	ce 01       	movw	r24, r28
    12f4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    12f8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    12fc:	df 91       	pop	r29
}
    12fe:	cf 91       	pop	r28
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	08 95       	ret

0000130c <floatAround>:
    130c:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	c8 2f       	mov	r28, r24
    1316:	d4 2f       	mov	r29, r20
    1318:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    131a:	e6 2f       	mov	r30, r22
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	31 97       	sbiw	r30, 0x01	; 1
    1320:	e7 70       	andi	r30, 0x07	; 7
    1322:	ff 27       	eor	r31, r31
    1324:	ed 5d       	subi	r30, 0xDD	; 221
    1326:	f7 4c       	sbci	r31, 0xC7	; 199
    1328:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    132a:	9f df       	rcall	.-194    	; 0x126a <lfsr>
    132c:	81 23       	and	r24, r17
    132e:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1330:	9c df       	rcall	.-200    	; 0x126a <lfsr>
    1332:	81 23       	and	r24, r17
    1334:	c8 1b       	sub	r28, r24
    1336:	8c 2f       	mov	r24, r28
    1338:	00 23       	and	r16, r16
    if (max){
    133a:	41 f0       	breq	.+16     	; 0x134c <floatAround+0x40>
    133c:	9c 2f       	mov	r25, r28
    133e:	0c 17       	cp	r16, r28
    1340:	08 f4       	brcc	.+2      	; 0x1344 <floatAround+0x38>
    1342:	90 2f       	mov	r25, r16
    1344:	8d 2f       	mov	r24, r29
    1346:	d9 17       	cp	r29, r25
    1348:	08 f4       	brcc	.+2      	; 0x134c <floatAround+0x40>
    134a:	89 2f       	mov	r24, r25
    134c:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	8d 17       	cp	r24, r29
    1352:	10 f0       	brcs	.+4      	; 0x1358 <floatAround+0x4c>
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	2d 2f       	mov	r18, r29
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	24 23       	and	r18, r20
    135e:	35 23       	and	r19, r21
    1360:	23 2b       	or	r18, r19
    1362:	09 f0       	breq	.+2      	; 0x1366 <floatAround+0x5a>
    1364:	8d 2f       	mov	r24, r29
    1366:	df 91       	pop	r29

    return sample;
}
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <SaveGameState>:
    1370:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    1372:	df 92       	push	r13
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	64 97       	sbiw	r28, 0x14	; 20
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    1388:	44 e1       	ldi	r20, 0x14	; 20
    138a:	be 01       	movw	r22, r28
    138c:	6f 5f       	subi	r22, 0xFF	; 255
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	c5 de       	rcall	.-630    	; 0x111e <EERead>
    1394:	81 e6       	ldi	r24, 0x61	; 97
    1396:	c8 2e       	mov	r12, r24
    1398:	8a e3       	ldi	r24, 0x3A	; 58
    139a:	d8 2e       	mov	r13, r24
    139c:	8e 01       	movw	r16, r28
    139e:	0f 5f       	subi	r16, 0xFF	; 255
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    13a2:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    13a4:	f8 01       	movw	r30, r16
    13a6:	81 91       	ld	r24, Z+
    13a8:	8f 01       	movw	r16, r30
    13aa:	f6 01       	movw	r30, r12
    13ac:	90 81       	ld	r25, Z
    13ae:	98 13       	cpse	r25, r24
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    13b2:	f3 94       	inc	r15
    13b4:	ff ef       	ldi	r31, 0xFF	; 255
    13b6:	cf 1a       	sub	r12, r31
    13b8:	df 0a       	sbc	r13, r31
    13ba:	80 e1       	ldi	r24, 0x10	; 16
    13bc:	f8 12       	cpse	r15, r24
    13be:	f2 cf       	rjmp	.-28     	; 0x13a4 <SaveGameState+0x34>
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	b6 01       	movw	r22, r12
    13c6:	8f 2d       	mov	r24, r15
    13c8:	ba de       	rcall	.-652    	; 0x113e <EEWrite>
    13ca:	88 23       	and	r24, r24
    13cc:	91 f3       	breq	.-28     	; 0x13b2 <SaveGameState+0x42>
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	36 c0       	rjmp	.+108    	; 0x143e <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    13d2:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    13d6:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    13da:	30 93 71 3a 	sts	0x3A71, r19	; 0x803a71 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    13de:	20 93 72 3a 	sts	0x3A72, r18	; 0x803a72 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    13e2:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    13e6:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    13ea:	90 93 73 3a 	sts	0x3A73, r25	; 0x803a73 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    13ee:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    13f2:	89 89       	ldd	r24, Y+17	; 0x11
    13f4:	9a 89       	ldd	r25, Y+18	; 0x12
    13f6:	98 27       	eor	r25, r24
    13f8:	89 27       	eor	r24, r25
    13fa:	98 27       	eor	r25, r24
    13fc:	28 17       	cp	r18, r24
    13fe:	39 07       	cpc	r19, r25
    1400:	69 f4       	brne	.+26     	; 0x141c <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    1402:	8b 89       	ldd	r24, Y+19	; 0x13
    1404:	9c 89       	ldd	r25, Y+20	; 0x14
    1406:	98 27       	eor	r25, r24
    1408:	89 27       	eor	r24, r25
    140a:	98 27       	eor	r25, r24
    140c:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    1410:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    1414:	28 17       	cp	r18, r24
    1416:	39 07       	cpc	r19, r25
    1418:	49 f4       	brne	.+18     	; 0x142c <SaveGameState+0xbc>
    141a:	10 c0       	rjmp	.+32     	; 0x143c <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    141c:	42 e0       	ldi	r20, 0x02	; 2
    141e:	61 e7       	ldi	r22, 0x71	; 113
    1420:	7a e3       	ldi	r23, 0x3A	; 58
    1422:	80 e1       	ldi	r24, 0x10	; 16
    1424:	8c de       	rcall	.-744    	; 0x113e <EEWrite>
    1426:	88 23       	and	r24, r24
    1428:	61 f3       	breq	.-40     	; 0x1402 <SaveGameState+0x92>
    142a:	d1 cf       	rjmp	.-94     	; 0x13ce <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    142c:	42 e0       	ldi	r20, 0x02	; 2
    142e:	63 e7       	ldi	r22, 0x73	; 115
    1430:	7a e3       	ldi	r23, 0x3A	; 58
    1432:	82 e1       	ldi	r24, 0x12	; 18
    1434:	84 de       	rcall	.-760    	; 0x113e <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	81 11       	cpse	r24, r1
    143a:	01 c0       	rjmp	.+2      	; 0x143e <SaveGameState+0xce>
    143c:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    143e:	89 2f       	mov	r24, r25
    1440:	64 96       	adiw	r28, 0x14	; 20
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    1456:	e8 2f       	mov	r30, r24
    1458:	ef 77       	andi	r30, 0x7F	; 127
    145a:	e6 95       	lsr	r30
    145c:	e6 95       	lsr	r30
    145e:	e6 95       	lsr	r30
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	ef 59       	subi	r30, 0x9F	; 159
    1464:	f5 4c       	sbci	r31, 0xC5	; 197
    1466:	20 81       	ld	r18, Z
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	87 70       	andi	r24, 0x07	; 7
    146c:	a9 01       	movw	r20, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <ReadStatusBit+0x1e>
    1470:	55 95       	asr	r21
    1472:	47 95       	ror	r20
    1474:	8a 95       	dec	r24
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <ReadStatusBit+0x1a>
    1478:	ca 01       	movw	r24, r20
}
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	08 95       	ret

0000147e <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    147e:	e8 2f       	mov	r30, r24
    1480:	ef 77       	andi	r30, 0x7F	; 127
    1482:	e6 95       	lsr	r30
    1484:	e6 95       	lsr	r30
    1486:	e6 95       	lsr	r30
    1488:	28 2f       	mov	r18, r24
    148a:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	ef 59       	subi	r30, 0x9F	; 159
    1490:	f5 4c       	sbci	r31, 0xC5	; 197
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	01 c0       	rjmp	.+2      	; 0x149a <WriteStatusBit+0x1c>
    1498:	88 0f       	add	r24, r24
    149a:	2a 95       	dec	r18
    149c:	ea f7       	brpl	.-6      	; 0x1498 <WriteStatusBit+0x1a>
    149e:	66 23       	and	r22, r22
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <WriteStatusBit+0x2a>
    14a2:	90 81       	ld	r25, Z
    14a4:	89 2b       	or	r24, r25
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    14a8:	80 95       	com	r24
    14aa:	90 81       	ld	r25, Z
    14ac:	89 23       	and	r24, r25
    14ae:	80 83       	st	Z, r24
    14b0:	08 95       	ret

000014b2 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    14b2:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    14b4:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    14b6:	31 f0       	breq	.+12     	; 0x14c4 <UpdateState+0x12>
        if (clearBit) {
    14b8:	97 ff       	sbrs	r25, 7
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <UpdateState+0xe>
            WriteStatusBit(num, 0);
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	dd cf       	rjmp	.-70     	; 0x147e <WriteStatusBit>
    14c4:	08 95       	ret

000014c6 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    14c6:	cf 93       	push	r28
    14c8:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    14ca:	8f 77       	andi	r24, 0x7F	; 127
    14cc:	c4 df       	rcall	.-120    	; 0x1456 <ReadStatusBit>
    14ce:	2c 2f       	mov	r18, r28
    14d0:	22 1f       	adc	r18, r18
    14d2:	22 27       	eor	r18, r18
    14d4:	22 1f       	adc	r18, r18
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	81 11       	cpse	r24, r1
    14da:	01 c0       	rjmp	.+2      	; 0x14de <CheckState+0x18>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    14de:	82 2f       	mov	r24, r18
    14e0:	89 27       	eor	r24, r25
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    14e6:	e3 e0       	ldi	r30, 0x03	; 3
    14e8:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    14ec:	91 91       	ld	r25, Z+
    14ee:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    14f0:	ed 30       	cpi	r30, 0x0D	; 13
    14f2:	91 e1       	ldi	r25, 0x11	; 17
    14f4:	f9 07       	cpc	r31, r25
    14f6:	d1 f7       	brne	.-12     	; 0x14ec <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    14f8:	83 70       	andi	r24, 0x03	; 3
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <whoami>
    return whoami;
}
    1500:	08 95       	ret

00001502 <Reset>:

void Reset(){
    1502:	e1 e6       	ldi	r30, 0x61	; 97
    1504:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    1506:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1508:	8a e3       	ldi	r24, 0x3A	; 58
    150a:	e5 37       	cpi	r30, 0x75	; 117
    150c:	f8 07       	cpc	r31, r24
    150e:	d9 f7       	brne	.-10     	; 0x1506 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1510:	ea df       	rcall	.-44     	; 0x14e6 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    1512:	81 11       	cpse	r24, r1
    1514:	04 c0       	rjmp	.+8      	; 0x151e <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1516:	80 91 6e 3a 	lds	r24, 0x3A6E	; 0x803a6e <gameState+0xd>
    151a:	80 64       	ori	r24, 0x40	; 64
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	31 f4       	brne	.+12     	; 0x152e <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1522:	80 91 6e 3a 	lds	r24, 0x3A6E	; 0x803a6e <gameState+0xd>
    1526:	80 68       	ori	r24, 0x80	; 128
    1528:	80 93 6e 3a 	sts	0x3A6E, r24	; 0x803a6e <gameState+0xd>
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	21 f4       	brne	.+8      	; 0x153a <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1532:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <gameState+0xe>
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	29 f4       	brne	.+10     	; 0x1548 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    153e:	80 91 6f 3a 	lds	r24, 0x3A6F	; 0x803a6f <gameState+0xe>
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	80 93 6f 3a 	sts	0x3A6F, r24	; 0x803a6f <gameState+0xe>
    1548:	80 91 61 3a 	lds	r24, 0x3A61	; 0x803a61 <gameState>
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	80 93 61 3a 	sts	0x3A61, r24	; 0x803a61 <gameState>
    1552:	08 95       	ret

00001554 <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1558:	44 e1       	ldi	r20, 0x14	; 20
    155a:	61 e6       	ldi	r22, 0x61	; 97
    155c:	7a e3       	ldi	r23, 0x3A	; 58
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	de dd       	rcall	.-1092   	; 0x111e <EERead>
    1562:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    1566:	8c 2f       	mov	r24, r28
    1568:	76 df       	rcall	.-276    	; 0x1456 <ReadStatusBit>
    156a:	d8 0f       	add	r29, r24
    156c:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    156e:	c2 37       	cpi	r28, 0x72	; 114
    1570:	d1 f7       	brne	.-12     	; 0x1566 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    1572:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    1574:	11 f0       	breq	.+4      	; 0x157a <LoadGameState+0x26>
    1576:	c5 df       	rcall	.-118    	; 0x1502 <Reset>
    } else getID();
    1578:	01 c0       	rjmp	.+2      	; 0x157c <LoadGameState+0x28>
    157a:	b5 df       	rcall	.-150    	; 0x14e6 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    157c:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0x10>
    1580:	90 91 72 3a 	lds	r25, 0x3A72	; 0x803a72 <gameState+0x11>
    1584:	98 27       	eor	r25, r24
    1586:	89 27       	eor	r24, r25
    1588:	98 27       	eor	r25, r24
    158a:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    158e:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1592:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x12>
    1596:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x13>
    159a:	98 27       	eor	r25, r24
    159c:	89 27       	eor	r24, r25
    159e:	98 27       	eor	r25, r24
    15a0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    15a4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    15ae:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    15b0:	86 e7       	ldi	r24, 0x76	; 118
    15b2:	89 df       	rcall	.-238    	; 0x14c6 <CheckState>
    15b4:	c8 2f       	mov	r28, r24
    15b6:	88 23       	and	r24, r24
    15b8:	81 f0       	breq	.+32     	; 0x15da <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    15ba:	e0 91 69 be 	lds	r30, 0xBE69	; 0x80be69 <__bss_end+0x834f>
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	e6 53       	subi	r30, 0x36	; 54
    15c2:	f5 4c       	sbci	r31, 0xC5	; 197
    15c4:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    15c6:	e0 91 68 be 	lds	r30, 0xBE68	; 0x80be68 <__bss_end+0x834e>
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    15d0:	e6 53       	subi	r30, 0x36	; 54
    15d2:	f5 4c       	sbci	r31, 0xC5	; 197
    15d4:	80 83       	st	Z, r24
        return 1;
    15d6:	c1 e0       	ldi	r28, 0x01	; 1
    15d8:	4c c0       	rjmp	.+152    	; 0x1672 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    15da:	85 e7       	ldi	r24, 0x75	; 117
    15dc:	74 df       	rcall	.-280    	; 0x14c6 <CheckState>
    15de:	88 23       	and	r24, r24
    15e0:	59 f1       	breq	.+86     	; 0x1638 <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    15e2:	e0 91 69 be 	lds	r30, 0xBE69	; 0x80be69 <__bss_end+0x834f>
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    15ec:	e6 53       	subi	r30, 0x36	; 54
    15ee:	f5 4c       	sbci	r31, 0xC5	; 197
    15f0:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    15f2:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <cooledDown.3947>
    15f6:	88 23       	and	r24, r24
    15f8:	79 f0       	breq	.+30     	; 0x1618 <HotSummer+0x6a>
    15fa:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    15fe:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1602:	20 91 f5 3a 	lds	r18, 0x3AF5	; 0x803af5 <adcTemp>
    1606:	30 91 f6 3a 	lds	r19, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    160a:	80 96       	adiw	r24, 0x20	; 32
    160c:	28 17       	cp	r18, r24
    160e:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1610:	18 f0       	brcs	.+6      	; 0x1618 <HotSummer+0x6a>
    1612:	86 e7       	ldi	r24, 0x76	; 118
    1614:	4e df       	rcall	.-356    	; 0x14b2 <UpdateState>
            return 0;
    1616:	2d c0       	rjmp	.+90     	; 0x1672 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1618:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    161c:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1620:	20 91 f5 3a 	lds	r18, 0x3AF5	; 0x803af5 <adcTemp>
    1624:	30 91 f6 3a 	lds	r19, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    1628:	08 96       	adiw	r24, 0x08	; 8
    162a:	82 17       	cp	r24, r18
    162c:	93 07       	cpc	r25, r19
    162e:	08 f1       	brcs	.+66     	; 0x1672 <HotSummer+0xc4>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <cooledDown.3947>
    1636:	1d c0       	rjmp	.+58     	; 0x1672 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1638:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    163c:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1640:	89 2b       	or	r24, r25
    1642:	41 f4       	brne	.+16     	; 0x1654 <HotSummer+0xa6>
    1644:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <adcTemp>
    1648:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    164c:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <calTemp>
    1650:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    1654:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    1658:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    165c:	20 91 f5 3a 	lds	r18, 0x3AF5	; 0x803af5 <adcTemp>
    1660:	30 91 f6 3a 	lds	r19, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    1664:	80 96       	adiw	r24, 0x20	; 32
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    166a:	18 f0       	brcs	.+6      	; 0x1672 <HotSummer+0xc4>
    166c:	85 e7       	ldi	r24, 0x75	; 117
    166e:	21 df       	rcall	.-446    	; 0x14b2 <UpdateState>
        }
    }
    return 0;
    1670:	c0 e0       	ldi	r28, 0x00	; 0
}
    1672:	8c 2f       	mov	r24, r28
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    1678:	ea e6       	ldi	r30, 0x6A	; 106
    167a:	fe eb       	ldi	r31, 0xBE	; 190
    for (int8_t i=0; i<5; i++) {
    167c:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    167e:	a5 81       	ldd	r26, Z+5	; 0x05
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    1682:	98 17       	cp	r25, r24
    1684:	34 f4       	brge	.+12     	; 0x1692 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    1686:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValue>
    168a:	a6 53       	subi	r26, 0x36	; 54
    168c:	b5 4c       	sbci	r27, 0xC5	; 197
    168e:	2c 93       	st	X, r18
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    1692:	a6 53       	subi	r26, 0x36	; 54
    1694:	b5 4c       	sbci	r27, 0xC5	; 197
    1696:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    1698:	a0 81       	ld	r26, Z
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    169c:	96 17       	cp	r25, r22
    169e:	34 f4       	brge	.+12     	; 0x16ac <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    16a0:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValue>
    16a4:	a6 53       	subi	r26, 0x36	; 54
    16a6:	b5 4c       	sbci	r27, 0xC5	; 197
    16a8:	2c 93       	st	X, r18
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    16ac:	a6 53       	subi	r26, 0x36	; 54
    16ae:	b5 4c       	sbci	r27, 0xC5	; 197
    16b0:	1c 92       	st	X, r1
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    16b6:	95 30       	cpi	r25, 0x05	; 5
    16b8:	11 f7       	brne	.-60     	; 0x167e <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    16ba:	08 95       	ret

000016bc <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    16bc:	a4 e7       	ldi	r26, 0x74	; 116
    16be:	be eb       	ldi	r27, 0xBE	; 190
    16c0:	ec 91       	ld	r30, X
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	e6 53       	subi	r30, 0x36	; 54
    16c6:	f5 4c       	sbci	r31, 0xC5	; 197
    16c8:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16ca:	12 96       	adiw	r26, 0x02	; 2
    16cc:	ec 91       	ld	r30, X
    16ce:	12 97       	sbiw	r26, 0x02	; 2
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	e6 53       	subi	r30, 0x36	; 54
    16d4:	f5 4c       	sbci	r31, 0xC5	; 197
    16d6:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	ec 91       	ld	r30, X
    16dc:	11 97       	sbiw	r26, 0x01	; 1
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	e6 53       	subi	r30, 0x36	; 54
    16e2:	f5 4c       	sbci	r31, 0xC5	; 197
    16e4:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16e6:	13 96       	adiw	r26, 0x03	; 3
    16e8:	ec 91       	ld	r30, X
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	e6 53       	subi	r30, 0x36	; 54
    16ee:	f5 4c       	sbci	r31, 0xC5	; 197
    16f0:	60 83       	st	Z, r22
    16f2:	08 95       	ret

000016f4 <GenerateBlinks>:
    }
}

void GenerateBlinks(){
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    16fa:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    16fe:	88 23       	and	r24, r24
    1700:	29 f0       	breq	.+10     	; 0x170c <GenerateBlinks+0x18>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    1702:	80 e4       	ldi	r24, 0x40	; 64
    1704:	e0 de       	rcall	.-576    	; 0x14c6 <CheckState>
    1706:	81 11       	cpse	r24, r1
    1708:	24 c0       	rjmp	.+72     	; 0x1752 <GenerateBlinks+0x5e>
    170a:	50 c0       	rjmp	.+160    	; 0x17ac <GenerateBlinks+0xb8>
    170c:	c8 e7       	ldi	r28, 0x78	; 120
    170e:	de eb       	ldi	r29, 0xBE	; 190
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1710:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1712:	81 2f       	mov	r24, r17
    1714:	d8 de       	rcall	.-592    	; 0x14c6 <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    1716:	ee 81       	ldd	r30, Y+6	; 0x06
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    171a:	88 23       	and	r24, r24
    171c:	59 f0       	breq	.+22     	; 0x1734 <GenerateBlinks+0x40>
                iLED[HCKR[G][i]] = dimValue;
    171e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1722:	e6 53       	subi	r30, 0x36	; 54
    1724:	f5 4c       	sbci	r31, 0xC5	; 197
    1726:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    1728:	e8 81       	ld	r30, Y
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	e6 53       	subi	r30, 0x36	; 54
    172e:	f5 4c       	sbci	r31, 0xC5	; 197
    1730:	10 82       	st	Z, r1
    1732:	0a c0       	rjmp	.+20     	; 0x1748 <GenerateBlinks+0x54>
            } else {
                iLED[HCKR[G][i]] = 0;
    1734:	e6 53       	subi	r30, 0x36	; 54
    1736:	f5 4c       	sbci	r31, 0xC5	; 197
    1738:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    173a:	e8 81       	ld	r30, Y
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1742:	e6 53       	subi	r30, 0x36	; 54
    1744:	f5 4c       	sbci	r31, 0xC5	; 197
    1746:	80 83       	st	Z, r24
    1748:	1f 5f       	subi	r17, 0xFF	; 255
    174a:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    174c:	10 38       	cpi	r17, 0x80	; 128
    174e:	09 f7       	brne	.-62     	; 0x1712 <GenerateBlinks+0x1e>
    1750:	d8 cf       	rjmp	.-80     	; 0x1702 <GenerateBlinks+0xe>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1752:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <HeartCount>
    1756:	98 2f       	mov	r25, r24
    1758:	9d 7f       	andi	r25, 0xFD	; 253
    175a:	e0 91 67 be 	lds	r30, 0xBE67	; 0x80be67 <__bss_end+0x834d>
            iLED[BADGER] = dimValue>>1 ;
    175e:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1760:	91 30       	cpi	r25, 0x01	; 1
    1762:	11 f0       	breq	.+4      	; 0x1768 <GenerateBlinks+0x74>
    1764:	85 30       	cpi	r24, 0x05	; 5
    1766:	21 f4       	brne	.+8      	; 0x1770 <GenerateBlinks+0x7c>
            iLED[BADGER] = dimValue>>1 ;
    1768:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
    176c:	96 95       	lsr	r25
    176e:	06 c0       	rjmp	.+12     	; 0x177c <GenerateBlinks+0x88>
        else if ( HeartCount == 2 || HeartCount == 4 )
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	11 f0       	breq	.+4      	; 0x1778 <GenerateBlinks+0x84>
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	31 f4       	brne	.+12     	; 0x1784 <GenerateBlinks+0x90>
            iLED[BADGER] = dimValue;
    1778:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
    177c:	e6 53       	subi	r30, 0x36	; 54
    177e:	f5 4c       	sbci	r31, 0xC5	; 197
    1780:	90 83       	st	Z, r25
    1782:	0c c0       	rjmp	.+24     	; 0x179c <GenerateBlinks+0xa8>
        else if ( HeartCount == 0 || HeartCount == 6 )
    1784:	88 23       	and	r24, r24
    1786:	11 f0       	breq	.+4      	; 0x178c <GenerateBlinks+0x98>
    1788:	86 30       	cpi	r24, 0x06	; 6
    178a:	29 f4       	brne	.+10     	; 0x1796 <GenerateBlinks+0xa2>
            iLED[BADGER] = dimValue>>2;
    178c:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <dimValue>
    1790:	96 95       	lsr	r25
    1792:	96 95       	lsr	r25
    1794:	f3 cf       	rjmp	.-26     	; 0x177c <GenerateBlinks+0x88>
        else
            iLED[BADGER] = 0;
    1796:	e6 53       	subi	r30, 0x36	; 54
    1798:	f5 4c       	sbci	r31, 0xC5	; 197
    179a:	10 82       	st	Z, r1
        if (HeartCount<32)
    179c:	80 32       	cpi	r24, 0x20	; 32
    179e:	20 f4       	brcc	.+8      	; 0x17a8 <GenerateBlinks+0xb4>
            HeartCount++;
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <HeartCount>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <GenerateBlinks+0xb8>
        else
            HeartCount = 0;
    17a8:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    17ac:	90 91 5a 38 	lds	r25, 0x385A	; 0x80385a <LedCount>
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <LedCount>

    switch (effect&0x1f) {
    17b6:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <effect>
    17ba:	30 91 3b 38 	lds	r19, 0x383B	; 0x80383b <effect+0x1>
    17be:	2f 71       	andi	r18, 0x1F	; 31
    17c0:	33 27       	eor	r19, r19
    17c2:	21 30       	cpi	r18, 0x01	; 1
    17c4:	31 05       	cpc	r19, r1
    17c6:	99 f1       	breq	.+102    	; 0x182e <GenerateBlinks+0x13a>
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <GenerateBlinks+0xde>
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	b1 f1       	breq	.+108    	; 0x183c <GenerateBlinks+0x148>
    17d0:	46 c0       	rjmp	.+140    	; 0x185e <GenerateBlinks+0x16a>
        // All LEDs off
        case 0:
            WingBar(0,0);
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	50 df       	rcall	.-352    	; 0x1678 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17d8:	e0 91 74 be 	lds	r30, 0xBE74	; 0x80be74 <__bss_end+0x835a>
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	e6 53       	subi	r30, 0x36	; 54
    17e0:	f5 4c       	sbci	r31, 0xC5	; 197
    17e2:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0;
    17e4:	e0 91 76 be 	lds	r30, 0xBE76	; 0x80be76 <__bss_end+0x835c>
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	e6 53       	subi	r30, 0x36	; 54
    17ec:	f5 4c       	sbci	r31, 0xC5	; 197
    17ee:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    17f0:	e0 91 68 be 	lds	r30, 0xBE68	; 0x80be68 <__bss_end+0x834e>
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	e6 53       	subi	r30, 0x36	; 54
    17f8:	f5 4c       	sbci	r31, 0xC5	; 197
    17fa:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17fc:	e0 91 75 be 	lds	r30, 0xBE75	; 0x80be75 <__bss_end+0x835b>
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	e6 53       	subi	r30, 0x36	; 54
    1804:	f5 4c       	sbci	r31, 0xC5	; 197
    1806:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0;
    1808:	e0 91 77 be 	lds	r30, 0xBE77	; 0x80be77 <__bss_end+0x835d>
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	e6 53       	subi	r30, 0x36	; 54
    1810:	f5 4c       	sbci	r31, 0xC5	; 197
    1812:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1814:	e0 91 69 be 	lds	r30, 0xBE69	; 0x80be69 <__bss_end+0x834f>
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	e6 53       	subi	r30, 0x36	; 54
    181c:	f5 4c       	sbci	r31, 0xC5	; 197
    181e:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1820:	e0 91 66 be 	lds	r30, 0xBE66	; 0x80be66 <__bss_end+0x834c>
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	e6 53       	subi	r30, 0x36	; 54
    1828:	f5 4c       	sbci	r31, 0xC5	; 197
    182a:	10 82       	st	Z, r1
            break;
    182c:	18 c0       	rjmp	.+48     	; 0x185e <GenerateBlinks+0x16a>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    182e:	89 2f       	mov	r24, r25
    1830:	81 70       	andi	r24, 0x01	; 1
    1832:	90 fd       	sbrc	r25, 0
    1834:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	0d c0       	rjmp	.+26     	; 0x1856 <GenerateBlinks+0x162>
    183c:	69 2f       	mov	r22, r25
    183e:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1840:	93 ff       	sbrs	r25, 3
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GenerateBlinks+0x154>
    1844:	60 95       	com	r22
    1846:	70 95       	com	r23
    1848:	85 e0       	ldi	r24, 0x05	; 5
    184a:	66 0f       	add	r22, r22
    184c:	77 1f       	adc	r23, r23
    184e:	8a 95       	dec	r24
    1850:	e1 f7       	brne	.-8      	; 0x184a <GenerateBlinks+0x156>
    1852:	61 5e       	subi	r22, 0xE1	; 225
    1854:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    185a:	1f 91       	pop	r17
    185c:	2f cf       	rjmp	.-418    	; 0x16bc <SetBothEyes>
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	08 95       	ret

00001866 <GenerateAudio>:


uint8_t GenerateAudio(){
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28

    if (auIn[AULEN>>1] < HPLVL) {
    186c:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <auIn+0x4>
    1870:	89 31       	cpi	r24, 0x19	; 25
    1872:	08 f0       	brcs	.+2      	; 0x1876 <GenerateAudio+0x10>
    1874:	27 c1       	rjmp	.+590    	; 0x1ac4 <GenerateAudio+0x25e>

        detHdPh = 1;
    1876:	c1 e0       	ldi	r28, 0x01	; 1
    1878:	c0 93 bf 3a 	sts	0x3ABF, r28	; 0x803abf <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    187c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1880:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1884:	88 27       	eor	r24, r24
    1886:	89 2b       	or	r24, r25
    1888:	09 f0       	breq	.+2      	; 0x188c <GenerateAudio+0x26>
    188a:	bf c0       	rjmp	.+382    	; 0x1a0a <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    188c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1890:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1894:	80 7e       	andi	r24, 0xE0	; 224
    1896:	99 27       	eor	r25, r25
    1898:	89 2b       	or	r24, r25
    189a:	31 f4       	brne	.+12     	; 0x18a8 <GenerateAudio+0x42>
                auRepAddr = &zero;
    189c:	88 e3       	ldi	r24, 0x38	; 56
    189e:	98 e3       	ldi	r25, 0x38	; 56
    18a0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    18a4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    18a8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    18ac:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    18b0:	80 7e       	andi	r24, 0xE0	; 224
    18b2:	99 27       	eor	r25, r25
    18b4:	80 97       	sbiw	r24, 0x20	; 32
    18b6:	09 f0       	breq	.+2      	; 0x18ba <GenerateAudio+0x54>
    18b8:	59 c0       	rjmp	.+178    	; 0x196c <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	52 e2       	ldi	r21, 0x22	; 34
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e2       	ldi	r23, 0x20	; 32
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	f1 dc       	rcall	.-1566   	; 0x12a8 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	80 e8       	ldi	r24, 0x80	; 128
    18ce:	1e dd       	rcall	.-1476   	; 0x130c <floatAround>
    18d0:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <auBuffer.3982+0x2>

                if (buttonMark) {
    18d4:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    18d8:	88 23       	and	r24, r24
    18da:	09 f4       	brne	.+2      	; 0x18de <GenerateAudio+0x78>
    18dc:	47 c0       	rjmp	.+142    	; 0x196c <GenerateAudio+0x106>
                    if (start == 0) {
    18de:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <start.3985>
    18e2:	81 11       	cpse	r24, r1
    18e4:	15 c0       	rjmp	.+42     	; 0x1910 <GenerateAudio+0xaa>
                        duration = 4;
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <duration.3984>
                        loudness = 0xff;
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.3983>
                        TCB1_CCMP = 0x2000;
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e2       	ldi	r25, 0x20	; 32
    18f6:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    18fa:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    18fe:	8f e0       	ldi	r24, 0x0F	; 15
    1900:	98 e3       	ldi	r25, 0x38	; 56
    1902:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1906:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <start.3985>
                    }

                    if (loudness) {
    1910:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.3983>
    1914:	88 23       	and	r24, r24
    1916:	69 f0       	breq	.+26     	; 0x1932 <GenerateAudio+0xcc>
                        auVolume = loudness;
    1918:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    191c:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <duration.3984>
    1920:	99 23       	and	r25, r25
    1922:	21 f0       	breq	.+8      	; 0x192c <GenerateAudio+0xc6>
    1924:	91 50       	subi	r25, 0x01	; 1
    1926:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <duration.3984>
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <GenerateAudio+0xcc>
    192c:	86 95       	lsr	r24
    192e:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.3983>
                    } 

                    if (loudness == 0) {
    1932:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.3983>
    1936:	81 11       	cpse	r24, r1
    1938:	19 c0       	rjmp	.+50     	; 0x196c <GenerateAudio+0x106>
                        effect &= 0x1f;
    193a:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    193e:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1942:	8f 71       	andi	r24, 0x1F	; 31
    1944:	99 27       	eor	r25, r25
    1946:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    194a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    194e:	88 e3       	ldi	r24, 0x38	; 56
    1950:	98 e3       	ldi	r25, 0x38	; 56
    1952:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1956:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    195a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    195e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1968:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <start.3985>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    196c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1970:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1974:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1978:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    197c:	80 7e       	andi	r24, 0xE0	; 224
    197e:	99 27       	eor	r25, r25
    1980:	80 36       	cpi	r24, 0x60	; 96
    1982:	91 05       	cpc	r25, r1
    1984:	a9 f5       	brne	.+106    	; 0x19f0 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1986:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <auBuffer.3986+0x6>
                auRepAddr = &auBuffer[0];
    198a:	8f e4       	ldi	r24, 0x4F	; 79
    198c:	98 e3       	ldi	r25, 0x38	; 56
    198e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1992:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1996:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1998:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    199a:	c3 30       	cpi	r28, 0x03	; 3
    199c:	39 f0       	breq	.+14     	; 0x19ac <GenerateAudio+0x146>
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	65 e0       	ldi	r22, 0x05	; 5
    19a4:	80 e8       	ldi	r24, 0x80	; 128
    19a6:	b2 dc       	rcall	.-1692   	; 0x130c <floatAround>
    19a8:	f8 01       	movw	r30, r16
    19aa:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    19ac:	cf 5f       	subi	r28, 0xFF	; 255
    19ae:	0f 5f       	subi	r16, 0xFF	; 255
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	c6 30       	cpi	r28, 0x06	; 6
    19b4:	91 f7       	brne	.-28     	; 0x199a <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    19b6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    19ba:	88 23       	and	r24, r24
    19bc:	c9 f0       	breq	.+50     	; 0x19f0 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	54 e0       	ldi	r21, 0x04	; 4
    19c2:	60 e8       	ldi	r22, 0x80	; 128
    19c4:	72 e0       	ldi	r23, 0x02	; 2
    19c6:	85 e0       	ldi	r24, 0x05	; 5
    19c8:	6f dc       	rcall	.-1826   	; 0x12a8 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    19ca:	80 91 b6 3a 	lds	r24, 0x3AB6	; 0x803ab6 <auVolume>
    19ce:	20 ea       	ldi	r18, 0xA0	; 160
    19d0:	40 e1       	ldi	r20, 0x10	; 16
    19d2:	62 e0       	ldi	r22, 0x02	; 2
    19d4:	9b dc       	rcall	.-1738   	; 0x130c <floatAround>
    19d6:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    19da:	20 e9       	ldi	r18, 0x90	; 144
    19dc:	40 e7       	ldi	r20, 0x70	; 112
    19de:	62 e0       	ldi	r22, 0x02	; 2
    19e0:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <auBuffer.3986>
    19e4:	93 dc       	rcall	.-1754   	; 0x130c <floatAround>
    19e6:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <auBuffer.3986>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    19ea:	80 95       	com	r24
    19ec:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <auBuffer.3986+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    19f0:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19f4:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    19f8:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19fc:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1a00:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a04:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a08:	5f c0       	rjmp	.+190    	; 0x1ac8 <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1a0a:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a0e:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a12:	88 27       	eor	r24, r24
    1a14:	81 15       	cp	r24, r1
    1a16:	91 40       	sbci	r25, 0x01	; 1
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <GenerateAudio+0x1b6>
    1a1a:	56 c0       	rjmp	.+172    	; 0x1ac8 <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1a1c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a20:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a24:	80 7e       	andi	r24, 0xE0	; 224
    1a26:	99 27       	eor	r25, r25
    1a28:	81 39       	cpi	r24, 0x91	; 145
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <GenerateAudio+0x1ca>
    1a2e:	4c c0       	rjmp	.+152    	; 0x1ac8 <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1a30:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <effect>
    1a34:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <effect+0x1>
    1a38:	60 7e       	andi	r22, 0xE0	; 224
    1a3a:	77 27       	eor	r23, r23
    1a3c:	6f 5f       	subi	r22, 0xFF	; 255
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	86 e0       	ldi	r24, 0x06	; 6
    1a42:	66 0f       	add	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <GenerateAudio+0x1dc>
    1a4a:	ab 01       	movw	r20, r22
    1a4c:	5d 5f       	subi	r21, 0xFD	; 253
    1a4e:	7e 5f       	subi	r23, 0xFE	; 254
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	2a dc       	rcall	.-1964   	; 0x12a8 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1a54:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1a58:	88 23       	and	r24, r24
    1a5a:	b1 f1       	breq	.+108    	; 0x1ac8 <GenerateAudio+0x262>
                    if (start == 0) {
    1a5c:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <start.3993>
    1a60:	81 11       	cpse	r24, r1
    1a62:	0e c0       	rjmp	.+28     	; 0x1a80 <GenerateAudio+0x21a>
                        duration = 3;
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.3992>
                        auRepAddr = &auBuffer[0];
    1a6a:	8c e0       	ldi	r24, 0x0C	; 12
    1a6c:	98 e3       	ldi	r25, 0x38	; 56
    1a6e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a72:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 1;
    1a7c:	c0 93 4e 38 	sts	0x384E, r28	; 0x80384e <start.3993>
                    }   if (duration == 0) {
    1a80:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <duration.3992>
    1a84:	81 11       	cpse	r24, r1
    1a86:	1a c0       	rjmp	.+52     	; 0x1abc <GenerateAudio+0x256>
                        effect &= 0x1f;
    1a88:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a8c:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a90:	8f 71       	andi	r24, 0x1F	; 31
    1a92:	99 27       	eor	r25, r25
    1a94:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1a98:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1a9c:	88 e3       	ldi	r24, 0x38	; 56
    1a9e:	98 e3       	ldi	r25, 0x38	; 56
    1aa0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1aa4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1aa8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1aac:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1ab6:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <start.3993>
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <GenerateAudio+0x262>
                    } else duration--;
    1abc:	81 50       	subi	r24, 0x01	; 1
    1abe:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.3992>
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1ac4:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <detHdPh>
    }
    return buttonMark;
    1ac8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
}
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1ad4:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <minuteMark>
    1ad8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1adc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1ae0:	89 2f       	mov	r24, r25
    1ae2:	99 27       	eor	r25, r25
    1ae4:	86 95       	lsr	r24
}
    1ae6:	3c e3       	ldi	r19, 0x3C	; 60
    1ae8:	23 9f       	mul	r18, r19
    1aea:	80 0d       	add	r24, r0
    1aec:	91 1d       	adc	r25, r1
    1aee:	11 24       	eor	r1, r1
    1af0:	08 95       	ret

00001af2 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	8c 01       	movw	r16, r24
    1afc:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1afe:	ea df       	rcall	.-44     	; 0x1ad4 <getClock>
    1b00:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1b02:	80 17       	cp	r24, r16
    1b04:	91 07       	cpc	r25, r17
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <idleTimeout+0x18>
        curClock += 256 * 60;
    1b08:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1b0a:	c0 0f       	add	r28, r16
    1b0c:	d1 1f       	adc	r29, r17
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	c2 17       	cp	r28, r18
    1b12:	d3 07       	cpc	r29, r19
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <idleTimeout+0x26>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	08 95       	ret

00001b22 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ea e6       	ldi	r30, 0x6A	; 106
    1b28:	fe eb       	ldi	r31, 0xBE	; 190
    1b2a:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1b2c:	a5 81       	ldd	r26, Z+5	; 0x05
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	a6 53       	subi	r26, 0x36	; 54
    1b32:	b5 4c       	sbci	r27, 0xC5	; 197
    1b34:	1c 92       	st	X, r1
    1b36:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1b38:	a8 81       	ld	r26, Y
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	a6 53       	subi	r26, 0x36	; 54
    1b3e:	b5 4c       	sbci	r27, 0xC5	; 197
    1b40:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1b42:	9e eb       	ldi	r25, 0xBE	; 190
    1b44:	ef 36       	cpi	r30, 0x6F	; 111
    1b46:	f9 07       	cpc	r31, r25
    1b48:	81 f7       	brne	.-32     	; 0x1b2a <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	d9 f4       	brne	.+54     	; 0x1b84 <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1b4e:	e0 91 6f be 	lds	r30, 0xBE6F	; 0x80be6f <__bss_end+0x8355>
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1b58:	e6 53       	subi	r30, 0x36	; 54
    1b5a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b5c:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1b5e:	e0 91 70 be 	lds	r30, 0xBE70	; 0x80be70 <__bss_end+0x8356>
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1b68:	e6 53       	subi	r30, 0x36	; 54
    1b6a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b6c:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1b6e:	e0 91 71 be 	lds	r30, 0xBE71	; 0x80be71 <__bss_end+0x8357>
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1b78:	e6 53       	subi	r30, 0x36	; 54
    1b7a:	f5 4c       	sbci	r31, 0xC5	; 197
    1b7c:	80 83       	st	Z, r24
        effect = 0x013f;
    1b7e:	8f e3       	ldi	r24, 0x3F	; 63
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	46 c0       	rjmp	.+140    	; 0x1c10 <simonLed+0xee>
    } else if (val == 1) {  //
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	99 f4       	brne	.+38     	; 0x1bae <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1b88:	e0 91 72 be 	lds	r30, 0xBE72	; 0x80be72 <__bss_end+0x8358>
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1b92:	e6 53       	subi	r30, 0x36	; 54
    1b94:	f5 4c       	sbci	r31, 0xC5	; 197
    1b96:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1b98:	e0 91 73 be 	lds	r30, 0xBE73	; 0x80be73 <__bss_end+0x8359>
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1ba2:	e6 53       	subi	r30, 0x36	; 54
    1ba4:	f5 4c       	sbci	r31, 0xC5	; 197
    1ba6:	80 83       	st	Z, r24
        effect = 0x015f;
    1ba8:	8f e5       	ldi	r24, 0x5F	; 95
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	31 c0       	rjmp	.+98     	; 0x1c10 <simonLed+0xee>
    } else if (val == 4) {  // III
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	d9 f4       	brne	.+54     	; 0x1be8 <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1bb2:	e0 91 6a be 	lds	r30, 0xBE6A	; 0x80be6a <__bss_end+0x8350>
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1bbc:	e6 53       	subi	r30, 0x36	; 54
    1bbe:	f5 4c       	sbci	r31, 0xC5	; 197
    1bc0:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1bc2:	e0 91 6b be 	lds	r30, 0xBE6B	; 0x80be6b <__bss_end+0x8351>
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1bcc:	e6 53       	subi	r30, 0x36	; 54
    1bce:	f5 4c       	sbci	r31, 0xC5	; 197
    1bd0:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1bd2:	e0 91 6c be 	lds	r30, 0xBE6C	; 0x80be6c <__bss_end+0x8352>
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1bdc:	e6 53       	subi	r30, 0x36	; 54
    1bde:	f5 4c       	sbci	r31, 0xC5	; 197
    1be0:	80 83       	st	Z, r24
        effect = 0x017f;
    1be2:	8f e7       	ldi	r24, 0x7F	; 127
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <simonLed+0xee>
    } else if (val == 2) {  // I
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	b1 f4       	brne	.+44     	; 0x1c18 <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1bec:	e0 91 6d be 	lds	r30, 0xBE6D	; 0x80be6d <__bss_end+0x8353>
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1bf6:	e6 53       	subi	r30, 0x36	; 54
    1bf8:	f5 4c       	sbci	r31, 0xC5	; 197
    1bfa:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1bfc:	e0 91 6e be 	lds	r30, 0xBE6E	; 0x80be6e <__bss_end+0x8354>
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1c06:	e6 53       	subi	r30, 0x36	; 54
    1c08:	f5 4c       	sbci	r31, 0xC5	; 197
    1c0a:	80 83       	st	Z, r24
        effect = 0x019f;
    1c0c:	8f e9       	ldi	r24, 0x9F	; 159
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1c14:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    if (CheckState(BASTET_COMPLETED))
    1c22:	8a e7       	ldi	r24, 0x7A	; 122
    1c24:	50 dc       	rcall	.-1888   	; 0x14c6 <CheckState>
    1c26:	81 11       	cpse	r24, r1
    1c28:	72 c1       	rjmp	.+740    	; 0x1f0e <BastetDictates+0x2f0>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1c2a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1c2e:	8d 7f       	andi	r24, 0xFD	; 253
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <BastetDictates+0x16>
    1c32:	6d c1       	rjmp	.+730    	; 0x1f0e <BastetDictates+0x2f0>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    1c34:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1c38:	81 11       	cpse	r24, r1
    1c3a:	20 c0       	rjmp	.+64     	; 0x1c7c <BastetDictates+0x5e>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    1c3c:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    1c40:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1c44:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <adcTemp>
    1c48:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <adcTemp+0x1>
    1c4c:	82 0f       	add	r24, r18
    1c4e:	8f 73       	andi	r24, 0x3F	; 63
    1c50:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1c54:	c0 e0       	ldi	r28, 0x00	; 0
    1c56:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    1c5a:	c8 17       	cp	r28, r24
    1c5c:	18 f4       	brcc	.+6      	; 0x1c64 <BastetDictates+0x46>
    1c5e:	05 db       	rcall	.-2550   	; 0x126a <lfsr>
    1c60:	cf 5f       	subi	r28, 0xFF	; 255
    1c62:	f9 cf       	rjmp	.-14     	; 0x1c56 <BastetDictates+0x38>
    1c64:	c2 e6       	ldi	r28, 0x62	; 98

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1c66:	d8 e3       	ldi	r29, 0x38	; 56
    1c68:	00 db       	rcall	.-2560   	; 0x126a <lfsr>
    1c6a:	83 70       	andi	r24, 0x03	; 3
    1c6c:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1c6e:	88 e3       	ldi	r24, 0x38	; 56
    1c70:	ce 36       	cpi	r28, 0x6E	; 110
    1c72:	d8 07       	cpc	r29, r24
    1c74:	c9 f7       	brne	.-14     	; 0x1c68 <BastetDictates+0x4a>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1c7c:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	29 f0       	breq	.+10     	; 0x1c8e <BastetDictates+0x70>
        for (uint8_t n=0; n<6; n++){
            iLED[HCKR[G][n]] = 1;
        }
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1c84:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	f1 f5       	brne	.+124    	; 0x1d08 <BastetDictates+0xea>
    1c8c:	1b c0       	rjmp	.+54     	; 0x1cc4 <BastetDictates+0xa6>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1c8e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	b9 f7       	brne	.-18     	; 0x1c84 <BastetDictates+0x66>
        simonGameState = BASTET_GAME_INTRO;
    1c96:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        simonPos = 0;
    1c9a:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonInputPos = 0;
    1c9e:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonTimer = 0;
    1ca2:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        simonCounter = 0;
    1ca6:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
    1caa:	ae e7       	ldi	r26, 0x7E	; 126
    1cac:	be eb       	ldi	r27, 0xBE	; 190
        for (uint8_t n=0; n<6; n++){
            iLED[HCKR[G][n]] = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	e6 53       	subi	r30, 0x36	; 54
    1cb6:	f5 4c       	sbci	r31, 0xC5	; 197
    1cb8:	80 83       	st	Z, r24
        simonGameState = BASTET_GAME_INTRO;
        simonPos = 0;
        simonInputPos = 0;
        simonTimer = 0;
        simonCounter = 0;
        for (uint8_t n=0; n<6; n++){
    1cba:	9e eb       	ldi	r25, 0xBE	; 190
    1cbc:	a4 38       	cpi	r26, 0x84	; 132
    1cbe:	b9 07       	cpc	r27, r25
    1cc0:	b9 f7       	brne	.-18     	; 0x1cb0 <BastetDictates+0x92>
    1cc2:	e0 cf       	rjmp	.-64     	; 0x1c84 <BastetDictates+0x66>
            iLED[HCKR[G][n]] = 1;
        }
    }

    if (BASTET_GAME_INTRO == simonGameState) {
        if (simonTimer > 5) {   // ±.33 seconds
    1cc4:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1cc8:	86 30       	cpi	r24, 0x06	; 6
    1cca:	38 f0       	brcs	.+14     	; 0x1cda <BastetDictates+0xbc>
            simonCounter++;
    1ccc:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1cd0:	8f 5f       	subi	r24, 0xFF	; 255
    1cd2:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1cd6:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > 6) {
    1cda:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1cde:	e7 30       	cpi	r30, 0x07	; 7
    1ce0:	40 f0       	brcs	.+16     	; 0x1cf2 <BastetDictates+0xd4>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonTimer = 0;
    1ce8:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonCounter = 0;
    1cec:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            return 0;
    1cf0:	0e c1       	rjmp	.+540    	; 0x1f0e <BastetDictates+0x2f0>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	e8 58       	subi	r30, 0x88	; 136
    1cf6:	f1 44       	sbci	r31, 0x41	; 65
    1cf8:	e0 81       	ld	r30, Z
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1d00:	e6 53       	subi	r30, 0x36	; 54
    1d02:	f5 4c       	sbci	r31, 0xC5	; 197
    1d04:	80 83       	st	Z, r24
    1d06:	21 c0       	rjmp	.+66     	; 0x1d4a <BastetDictates+0x12c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	f9 f4       	brne	.+62     	; 0x1d4a <BastetDictates+0x12c>
        if (simonTimer > 7) {   // ±.5 second
    1d0c:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	38 f0       	brcs	.+14     	; 0x1d22 <BastetDictates+0x104>
            simonCounter++;
    1d14:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1d1e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > simonPos) {
    1d22:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1d26:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    1d2a:	8e 17       	cp	r24, r30
    1d2c:	40 f4       	brcc	.+16     	; 0x1d3e <BastetDictates+0x120>
            simonGameState = BASTET_GAME_INPUT;
    1d2e:	85 e0       	ldi	r24, 0x05	; 5
    1d30:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonLed(0);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	f5 de       	rcall	.-534    	; 0x1b22 <simonLed>
            simonTimer = 0;
    1d38:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            return 0;
    1d3c:	e8 c0       	rjmp	.+464    	; 0x1f0e <BastetDictates+0x2f0>
        }
        simonLed(simonState[simonCounter]+1);
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	ee 59       	subi	r30, 0x9E	; 158
    1d42:	f7 4c       	sbci	r31, 0xC7	; 199
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	ec de       	rcall	.-552    	; 0x1b22 <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1d4a:	c0 91 5c 38 	lds	r28, 0x385C	; 0x80385c <simonGameState>
    1d4e:	c5 30       	cpi	r28, 0x05	; 5
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <BastetDictates+0x136>
    1d52:	7e c0       	rjmp	.+252    	; 0x1e50 <BastetDictates+0x232>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1d54:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1d58:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1d5c:	98 17       	cp	r25, r24
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <BastetDictates+0x144>
    1d60:	75 c0       	rjmp	.+234    	; 0x1e4c <BastetDictates+0x22e>
            if (simonWait == 0) {
    1d62:	90 91 5e 38 	lds	r25, 0x385E	; 0x80385e <simonWait>
    1d66:	91 11       	cpse	r25, r1
    1d68:	87 c0       	rjmp	.+270    	; 0x1e78 <BastetDictates+0x25a>
                simonWait = 1;
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	90 93 5e 38 	sts	0x385E, r25	; 0x80385e <simonWait>
                simonTimer = 0;
    1d70:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                simonLed(buttonState+1);
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	d5 de       	rcall	.-598    	; 0x1b22 <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    1d78:	84 e0       	ldi	r24, 0x04	; 4
    1d7a:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    1d7e:	c0 93 2b 38 	sts	0x382B, r28	; 0x80382b <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    1d82:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>
    1d86:	e8 2f       	mov	r30, r24
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	ee 59       	subi	r30, 0x9E	; 158
    1d8c:	f7 4c       	sbci	r31, 0xC7	; 199
    1d8e:	20 81       	ld	r18, Z
    1d90:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1d94:	29 13       	cpse	r18, r25
    1d96:	23 c0       	rjmp	.+70     	; 0x1dde <BastetDictates+0x1c0>
                    simonInputPos++;
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <simonInputPos>
                    if (simonInputPos > simonPos) {
    1d9e:	e0 91 61 38 	lds	r30, 0x3861	; 0x803861 <simonPos>
    1da2:	e8 17       	cp	r30, r24
    1da4:	d8 f5       	brcc	.+118    	; 0x1e1c <BastetDictates+0x1fe>
                        effect = 0x42;
    1da6:	82 e4       	ldi	r24, 0x42	; 66
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1dae:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        simonPos++;
    1db2:	ef 5f       	subi	r30, 0xFF	; 255
    1db4:	e0 93 61 38 	sts	0x3861, r30	; 0x803861 <simonPos>
                        simonInputPos = 0;
    1db8:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
                        simonTimer = 0;
    1dbc:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                        simonCounter = 0;
    1dc0:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                        iLED[HCKR[G][simonPos/2]] = dimValue;  // BASTET_LENGTH = 12
    1dc4:	e6 95       	lsr	r30
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	e8 58       	subi	r30, 0x88	; 136
    1dca:	f1 44       	sbci	r31, 0x41	; 65
    1dcc:	e6 81       	ldd	r30, Z+6	; 0x06
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValue>
    1dd4:	e6 53       	subi	r30, 0x36	; 54
    1dd6:	f5 4c       	sbci	r31, 0xC5	; 197
    1dd8:	80 83       	st	Z, r24
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	1d c0       	rjmp	.+58     	; 0x1e18 <BastetDictates+0x1fa>
                    }
                } else {
                    effect = 0x0105;    // TODO fail sound
    1dde:	85 e0       	ldi	r24, 0x05	; 5
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1de6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    1dea:	a8 e7       	ldi	r26, 0x78	; 120
    1dec:	be eb       	ldi	r27, 0xBE	; 190
    1dee:	8e e7       	ldi	r24, 0x7E	; 126
    1df0:	9e eb       	ldi	r25, 0xBE	; 190
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    1df2:	ed 91       	ld	r30, X+
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValue>
    1dfa:	e6 53       	subi	r30, 0x36	; 54
    1dfc:	f5 4c       	sbci	r31, 0xC5	; 197
    1dfe:	20 83       	st	Z, r18
                        iLED[HCKR[G][simonPos/2]] = dimValue;  // BASTET_LENGTH = 12
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 0x0105;    // TODO fail sound
                    for (uint8_t n=0; n<6; n++){
    1e00:	8a 17       	cp	r24, r26
    1e02:	9b 07       	cpc	r25, r27
    1e04:	b1 f7       	brne	.-20     	; 0x1df2 <BastetDictates+0x1d4>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    1e06:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
                    simonPos = 0;
    1e0a:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
                    simonTimer = 0;
    1e0e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonCounter = 0;
    1e12:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    1e1c:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>
    1e20:	8c 30       	cpi	r24, 0x0C	; 12
    1e22:	20 f4       	brcc	.+8      	; 0x1e2c <BastetDictates+0x20e>
    1e24:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    1e28:	8c 30       	cpi	r24, 0x0C	; 12
    1e2a:	90 f0       	brcs	.+36     	; 0x1e50 <BastetDictates+0x232>
                    // TODO win animu !!
                    effect = 0x0106;    // TODO win sound ?!
    1e2c:	86 e0       	ldi	r24, 0x06	; 6
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1e34:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    1e38:	8a e7       	ldi	r24, 0x7A	; 122
    1e3a:	3b db       	rcall	.-2442   	; 0x14b2 <UpdateState>
                    simonTimer = 0;
    1e3c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonCounter = 0;
    1e40:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    1e44:	87 e0       	ldi	r24, 0x07	; 7
    1e46:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <simonNextGameState>
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <BastetDictates+0x232>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    1e4c:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    1e50:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1e54:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    1e56:	81 f4       	brne	.+32     	; 0x1e78 <BastetDictates+0x25a>
    1e58:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1e5c:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    1e5e:	60 f0       	brcs	.+24     	; 0x1e78 <BastetDictates+0x25a>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	5f de       	rcall	.-834    	; 0x1b22 <simonLed>
            simonWait = 0;
    1e64:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
            simonTimer = 0;
    1e68:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonCounter = 0;
    1e6c:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonGameState = simonNextGameState;
    1e70:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <simonNextGameState>
    1e74:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    1e78:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1e7c:	86 30       	cpi	r24, 0x06	; 6
    1e7e:	21 f5       	brne	.+72     	; 0x1ec8 <BastetDictates+0x2aa>
        if (simonTimer > 5) {   // ±.33 second
    1e80:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1e84:	86 30       	cpi	r24, 0x06	; 6
    1e86:	38 f0       	brcs	.+14     	; 0x1e96 <BastetDictates+0x278>
            simonCounter++;
    1e88:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1e8c:	8f 5f       	subi	r24, 0xFF	; 255
    1e8e:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1e92:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > 6) {
    1e96:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1e9a:	87 30       	cpi	r24, 0x07	; 7
    1e9c:	40 f0       	brcs	.+16     	; 0x1eae <BastetDictates+0x290>
            simonTimer = 0;
    1e9e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonCounter = 0;
    1ea2:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    1ea6:	87 e0       	ldi	r24, 0x07	; 7
    1ea8:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            return 0;
    1eac:	30 c0       	rjmp	.+96     	; 0x1f0e <BastetDictates+0x2f0>
        }
        iLED[HCKR[R][5-simonCounter]] = 1;
    1eae:	e5 e0       	ldi	r30, 0x05	; 5
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	e8 1b       	sub	r30, r24
    1eb4:	f1 09       	sbc	r31, r1
    1eb6:	e8 58       	subi	r30, 0x88	; 136
    1eb8:	f1 44       	sbci	r31, 0x41	; 65
    1eba:	e0 81       	ld	r30, Z
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	e6 53       	subi	r30, 0x36	; 54
    1ec0:	f5 4c       	sbci	r31, 0xC5	; 197
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	80 83       	st	Z, r24
    1ec6:	1e c0       	rjmp	.+60     	; 0x1f04 <BastetDictates+0x2e6>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    1ec8:	87 30       	cpi	r24, 0x07	; 7
    1eca:	e1 f4       	brne	.+56     	; 0x1f04 <BastetDictates+0x2e6>
        simonInputPos = 0;
    1ecc:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonPos = 0;
    1ed0:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonGameState = BASTET_GAME_START; // BASTET_BOOT for fresh "field" ??
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        gameNow = TEXT;
    1eda:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
    1ede:	ea e6       	ldi	r30, 0x6A	; 106
    1ee0:	fe eb       	ldi	r31, 0xBE	; 190
    1ee2:	2f e6       	ldi	r18, 0x6F	; 111
    1ee4:	3e eb       	ldi	r19, 0xBE	; 190
    1ee6:	ef 01       	movw	r28, r30
        for (uint8_t n=0; n<5; n++){
            iLED[WING[L][n]] = 1;
    1ee8:	a5 81       	ldd	r26, Z+5	; 0x05
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	a6 53       	subi	r26, 0x36	; 54
    1eee:	b5 4c       	sbci	r27, 0xC5	; 197
    1ef0:	8c 93       	st	X, r24
    1ef2:	31 96       	adiw	r30, 0x01	; 1
            iLED[WING[R][n]] = 1;
    1ef4:	a8 81       	ld	r26, Y
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	a6 53       	subi	r26, 0x36	; 54
    1efa:	b5 4c       	sbci	r27, 0xC5	; 197
    1efc:	8c 93       	st	X, r24
    if (BASTET_GAME_OVER == simonGameState) {
        simonInputPos = 0;
        simonPos = 0;
        simonGameState = BASTET_GAME_START; // BASTET_BOOT for fresh "field" ??
        gameNow = TEXT;
        for (uint8_t n=0; n<5; n++){
    1efe:	2e 17       	cp	r18, r30
    1f00:	3f 07       	cpc	r19, r31
    1f02:	89 f7       	brne	.-30     	; 0x1ee6 <BastetDictates+0x2c8>
            iLED[WING[L][n]] = 1;
            iLED[WING[R][n]] = 1;
        }
    }

    ++simonTimer;
    1f04:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonTimer>
    return 0;
}
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	62 97       	sbiw	r28, 0x12	; 18
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	8a 8b       	std	Y+18, r24	; 0x12
    1f28:	80 e1       	ldi	r24, 0x10	; 16
    1f2a:	ee e3       	ldi	r30, 0x3E	; 62
    1f2c:	fe eb       	ldi	r31, 0xBE	; 190
    1f2e:	de 01       	movw	r26, r28
    1f30:	11 96       	adiw	r26, 0x01	; 1
    1f32:	01 90       	ld	r0, Z+
    1f34:	0d 92       	st	X+, r0
    1f36:	8a 95       	dec	r24
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <Cheat+0x1c>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	31 96       	adiw	r30, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	8f ef       	ldi	r24, 0xFF	; 255
    1f42:	21 91       	ld	r18, Z+
    1f44:	31 91       	ld	r19, Z+
    1f46:	26 17       	cp	r18, r22
    1f48:	37 07       	cpc	r19, r23
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <Cheat+0x38>
    1f4c:	89 2f       	mov	r24, r25
    1f4e:	9f 5f       	subi	r25, 0xFF	; 255
    1f50:	98 30       	cpi	r25, 0x08	; 8
    1f52:	b9 f7       	brne	.-18     	; 0x1f42 <Cheat+0x2c>
    1f54:	88 30       	cpi	r24, 0x08	; 8
    1f56:	10 f0       	brcs	.+4      	; 0x1f5c <Cheat+0x46>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	12 c0       	rjmp	.+36     	; 0x1f80 <Cheat+0x6a>
    1f5c:	18 e1       	ldi	r17, 0x18	; 24
    1f5e:	18 0f       	add	r17, r24
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	be 01       	movw	r22, r28
    1f64:	6f 5e       	subi	r22, 0xEF	; 239
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	81 2f       	mov	r24, r17
    1f6a:	d9 d8       	rcall	.-3662   	; 0x111e <EERead>
    1f6c:	89 89       	ldd	r24, Y+17	; 0x11
    1f6e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f70:	99 f7       	brne	.-26     	; 0x1f58 <Cheat+0x42>
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	be 01       	movw	r22, r28
    1f76:	6e 5e       	subi	r22, 0xEE	; 238
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	81 2f       	mov	r24, r17
    1f7c:	e0 d8       	rcall	.-3648   	; 0x113e <EEWrite>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	62 96       	adiw	r28, 0x12	; 18
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	08 95       	ret

00001f8e <DecryptData>:
    1f8e:	f9 01       	movw	r30, r18
    1f90:	9c 01       	movw	r18, r24
    1f92:	2e 1b       	sub	r18, r30
    1f94:	3f 0b       	sbc	r19, r31
    1f96:	88 e0       	ldi	r24, 0x08	; 8
    1f98:	48 9f       	mul	r20, r24
    1f9a:	a0 01       	movw	r20, r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	48 5d       	subi	r20, 0xD8	; 216
    1fa0:	50 44       	sbci	r21, 0x40	; 64
    1fa2:	66 23       	and	r22, r22
    1fa4:	69 f0       	breq	.+26     	; 0x1fc0 <DecryptData+0x32>
    1fa6:	df 01       	movw	r26, r30
    1fa8:	a2 0f       	add	r26, r18
    1faa:	b3 1f       	adc	r27, r19
    1fac:	a7 70       	andi	r26, 0x07	; 7
    1fae:	bb 27       	eor	r27, r27
    1fb0:	a4 0f       	add	r26, r20
    1fb2:	b5 1f       	adc	r27, r21
    1fb4:	80 81       	ld	r24, Z
    1fb6:	9c 91       	ld	r25, X
    1fb8:	98 27       	eor	r25, r24
    1fba:	91 93       	st	Z+, r25
    1fbc:	61 50       	subi	r22, 0x01	; 1
    1fbe:	f1 cf       	rjmp	.-30     	; 0x1fa2 <DecryptData+0x14>
    1fc0:	08 95       	ret

00001fc2 <UnflipData>:
    1fc2:	26 2f       	mov	r18, r22
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	35 e5       	ldi	r19, 0x55	; 85
    1fc8:	9e 2f       	mov	r25, r30
    1fca:	92 1b       	sub	r25, r18
    1fcc:	98 17       	cp	r25, r24
    1fce:	28 f4       	brcc	.+10     	; 0x1fda <UnflipData+0x18>
    1fd0:	90 81       	ld	r25, Z
    1fd2:	92 95       	swap	r25
    1fd4:	93 27       	eor	r25, r19
    1fd6:	91 93       	st	Z+, r25
    1fd8:	f7 cf       	rjmp	.-18     	; 0x1fc8 <UnflipData+0x6>
    1fda:	08 95       	ret

00001fdc <ExtEERead>:
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <ExtEERead+0x16>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	d6 2e       	mov	r13, r22
    1ff8:	c4 2e       	mov	r12, r20
    1ffa:	59 01       	movw	r10, r18
    1ffc:	7c 01       	movw	r14, r24
    1ffe:	e8 94       	clt
    2000:	f7 f8       	bld	r15, 7
    2002:	f9 82       	std	Y+1, r15	; 0x01
    2004:	ea 82       	std	Y+2, r14	; 0x02
    2006:	06 2f       	mov	r16, r22
    2008:	42 e0       	ldi	r20, 0x02	; 2
    200a:	be 01       	movw	r22, r28
    200c:	6f 5f       	subi	r22, 0xFF	; 255
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	80 e5       	ldi	r24, 0x50	; 80
    2012:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_read_bytes>
    2016:	18 2f       	mov	r17, r24
    2018:	81 11       	cpse	r24, r1
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <ExtEERead+0x4a>
    201c:	95 01       	movw	r18, r10
    201e:	4c 2d       	mov	r20, r12
    2020:	6d 2d       	mov	r22, r13
    2022:	c7 01       	movw	r24, r14
    2024:	b4 df       	rcall	.-152    	; 0x1f8e <DecryptData>
    2026:	81 2f       	mov	r24, r17
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	08 95       	ret

00002042 <ClearTxAfter>:
    2042:	8f 5f       	subi	r24, 0xFF	; 255
    2044:	88 30       	cpi	r24, 0x08	; 8
    2046:	30 f4       	brcc	.+12     	; 0x2054 <ClearTxAfter+0x12>
    2048:	e8 2f       	mov	r30, r24
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	e8 5b       	subi	r30, 0xB8	; 184
    204e:	f5 4c       	sbci	r31, 0xC5	; 197
    2050:	10 82       	st	Z, r1
    2052:	f7 cf       	rjmp	.-18     	; 0x2042 <ClearTxAfter>
    2054:	08 95       	ret

00002056 <StartsWith>:
    2056:	ac 01       	movw	r20, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	e9 2f       	mov	r30, r25
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	da 01       	movw	r26, r20
    2060:	ae 0f       	add	r26, r30
    2062:	bf 1f       	adc	r27, r31
    2064:	3c 91       	ld	r19, X
    2066:	e6 0f       	add	r30, r22
    2068:	f7 1f       	adc	r31, r23
    206a:	31 11       	cpse	r19, r1
    206c:	05 c0       	rjmp	.+10     	; 0x2078 <StartsWith+0x22>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 81       	ld	r25, Z
    2072:	99 23       	and	r25, r25
    2074:	49 f0       	breq	.+18     	; 0x2088 <StartsWith+0x32>
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <StartsWith+0x30>
    2078:	20 81       	ld	r18, Z
    207a:	22 23       	and	r18, r18
    207c:	c1 f3       	breq	.-16     	; 0x206e <StartsWith+0x18>
    207e:	32 13       	cpse	r19, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <StartsWith+0x30>
    2082:	9f 5f       	subi	r25, 0xFF	; 255
    2084:	ea cf       	rjmp	.-44     	; 0x205a <StartsWith+0x4>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	08 95       	ret

0000208a <PrepareSending>:
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	fc 01       	movw	r30, r24
    2090:	61 15       	cp	r22, r1
    2092:	71 05       	cpc	r23, r1
    2094:	59 f1       	breq	.+86     	; 0x20ec <PrepareSending+0x62>
    2096:	a0 e5       	ldi	r26, 0x50	; 80
    2098:	ba e3       	ldi	r27, 0x3A	; 58
    209a:	c8 e4       	ldi	r28, 0x48	; 72
    209c:	da e3       	ldi	r29, 0x3A	; 58
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	9f ef       	ldi	r25, 0xFF	; 255
    20a2:	6f 3f       	cpi	r22, 0xFF	; 255
    20a4:	71 05       	cpc	r23, r1
    20a6:	69 f0       	breq	.+26     	; 0x20c2 <PrepareSending+0x38>
    20a8:	60 f0       	brcs	.+24     	; 0x20c2 <PrepareSending+0x38>
    20aa:	ed 93       	st	X+, r30
    20ac:	fd 93       	st	X+, r31
    20ae:	99 93       	st	Y+, r25
    20b0:	e1 50       	subi	r30, 0x01	; 1
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	6f 5f       	subi	r22, 0xFF	; 255
    20b6:	71 09       	sbc	r23, r1
    20b8:	8f 5f       	subi	r24, 0xFF	; 255
    20ba:	87 30       	cpi	r24, 0x07	; 7
    20bc:	91 f7       	brne	.-28     	; 0x20a2 <PrepareSending+0x18>
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	1e c0       	rjmp	.+60     	; 0x20fe <PrepareSending+0x74>
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	d9 01       	movw	r26, r18
    20c8:	aa 0f       	add	r26, r26
    20ca:	bb 1f       	adc	r27, r27
    20cc:	a0 5b       	subi	r26, 0xB0	; 176
    20ce:	b5 4c       	sbci	r27, 0xC5	; 197
    20d0:	ed 93       	st	X+, r30
    20d2:	fc 93       	st	X, r31
    20d4:	6f 3f       	cpi	r22, 0xFF	; 255
    20d6:	71 05       	cpc	r23, r1
    20d8:	11 f4       	brne	.+4      	; 0x20de <PrepareSending+0x54>
    20da:	6e ef       	ldi	r22, 0xFE	; 254
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	f9 01       	movw	r30, r18
    20e0:	e8 5b       	subi	r30, 0xB8	; 184
    20e2:	f5 4c       	sbci	r31, 0xC5	; 197
    20e4:	60 83       	st	Z, r22
    20e6:	40 93 46 3a 	sts	0x3A46, r20	; 0x803a46 <txTypeNow>
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <PrepareSending+0x6c>
    20ec:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrList>
    20f0:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrList+0x1>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	a5 df       	rcall	.-182    	; 0x2042 <ClearTxAfter>
    20f8:	10 92 47 3a 	sts	0x3A47, r1	; 0x803a47 <txAddrNow>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	f9 01       	movw	r30, r18
    210e:	ee 0f       	add	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	e5 5e       	subi	r30, 0xE5	; 229
    2114:	f6 4c       	sbci	r31, 0xC6	; 198
    2116:	ab e5       	ldi	r26, 0x5B	; 91
    2118:	ba e7       	ldi	r27, 0x7A	; 122
    211a:	a0 83       	st	Z, r26
    211c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    211e:	f9 01       	movw	r30, r18
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	e5 5a       	subi	r30, 0xA5	; 165
    2126:	f6 4c       	sbci	r31, 0xC6	; 198
    2128:	62 e0       	ldi	r22, 0x02	; 2
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	60 83       	st	Z, r22
    212e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	f9 01       	movw	r30, r18
    2136:	e5 56       	subi	r30, 0x65	; 101
    2138:	f6 4c       	sbci	r31, 0xC6	; 198
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	40 83       	st	Z, r20
    2140:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2142:	21 e0       	ldi	r18, 0x01	; 1
    2144:	28 0f       	add	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	f9 01       	movw	r30, r18
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	e5 5e       	subi	r30, 0xE5	; 229
    2150:	f6 4c       	sbci	r31, 0xC6	; 198
    2152:	c4 e6       	ldi	r28, 0x64	; 100
    2154:	da e7       	ldi	r29, 0x7A	; 122
    2156:	c0 83       	st	Z, r28
    2158:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    215a:	f9 01       	movw	r30, r18
    215c:	ee 0f       	add	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	e5 5a       	subi	r30, 0xA5	; 165
    2162:	f6 4c       	sbci	r31, 0xC6	; 198
    2164:	ca e0       	ldi	r28, 0x0A	; 10
    2166:	d0 e0       	ldi	r29, 0x00	; 0
    2168:	c0 83       	st	Z, r28
    216a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    216c:	22 0f       	add	r18, r18
    216e:	33 1f       	adc	r19, r19
    2170:	f9 01       	movw	r30, r18
    2172:	e5 56       	subi	r30, 0x65	; 101
    2174:	f6 4c       	sbci	r31, 0xC6	; 198
    2176:	40 83       	st	Z, r20
    2178:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    217a:	e2 e0       	ldi	r30, 0x02	; 2
    217c:	e8 0f       	add	r30, r24
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	e5 5e       	subi	r30, 0xE5	; 229
    2186:	f6 4c       	sbci	r31, 0xC6	; 198
    2188:	20 ef       	ldi	r18, 0xF0	; 240
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	20 83       	st	Z, r18
    218e:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2190:	23 e0       	ldi	r18, 0x03	; 3
    2192:	28 0f       	add	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	f9 01       	movw	r30, r18
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	e5 5e       	subi	r30, 0xE5	; 229
    219e:	f6 4c       	sbci	r31, 0xC6	; 198
    21a0:	a0 83       	st	Z, r26
    21a2:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    21a4:	f9 01       	movw	r30, r18
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	e5 5a       	subi	r30, 0xA5	; 165
    21ac:	f6 4c       	sbci	r31, 0xC6	; 198
    21ae:	60 83       	st	Z, r22
    21b0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    21b2:	22 0f       	add	r18, r18
    21b4:	33 1f       	adc	r19, r19
    21b6:	f9 01       	movw	r30, r18
    21b8:	e5 56       	subi	r30, 0x65	; 101
    21ba:	f6 4c       	sbci	r31, 0xC6	; 198
    21bc:	40 83       	st	Z, r20
    21be:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21c0:	24 e0       	ldi	r18, 0x04	; 4
    21c2:	28 0f       	add	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	f9 01       	movw	r30, r18
    21c8:	ee 0f       	add	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	e5 5e       	subi	r30, 0xE5	; 229
    21ce:	f6 4c       	sbci	r31, 0xC6	; 198
    21d0:	a7 e5       	ldi	r26, 0x57	; 87
    21d2:	ba e7       	ldi	r27, 0x7A	; 122
    21d4:	a0 83       	st	Z, r26
    21d6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    21d8:	f9 01       	movw	r30, r18
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	e5 5a       	subi	r30, 0xA5	; 165
    21e0:	f6 4c       	sbci	r31, 0xC6	; 198
    21e2:	60 83       	st	Z, r22
    21e4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    21e6:	22 0f       	add	r18, r18
    21e8:	33 1f       	adc	r19, r19
    21ea:	f9 01       	movw	r30, r18
    21ec:	e5 56       	subi	r30, 0x65	; 101
    21ee:	f6 4c       	sbci	r31, 0xC6	; 198
    21f0:	40 83       	st	Z, r20
    21f2:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    21f4:	8b 5f       	subi	r24, 0xFB	; 251
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	2c 97       	sbiw	r28, 0x0c	; 12
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	7c 01       	movw	r14, r24
    221a:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    221c:	9e 01       	movw	r18, r28
    221e:	2f 5f       	subi	r18, 0xFF	; 255
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	6c e0       	ldi	r22, 0x0C	; 12
    2226:	80 96       	adiw	r24, 0x20	; 32
    2228:	d9 de       	rcall	.-590    	; 0x1fdc <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	98 27       	eor	r25, r24
    2230:	89 27       	eor	r24, r25
    2232:	98 27       	eor	r25, r24
    2234:	80 96       	adiw	r24, 0x20	; 32
    2236:	f8 01       	movw	r30, r16
    2238:	80 83       	st	Z, r24
    223a:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	98 27       	eor	r25, r24
    2242:	89 27       	eor	r24, r25
    2244:	98 27       	eor	r25, r24
    2246:	80 96       	adiw	r24, 0x20	; 32
    2248:	82 83       	std	Z+2, r24	; 0x02
    224a:	93 83       	std	Z+3, r25	; 0x03
    224c:	de 01       	movw	r26, r28
    224e:	15 96       	adiw	r26, 0x05	; 5
    2250:	34 96       	adiw	r30, 0x04	; 4
    2252:	c8 01       	movw	r24, r16
    2254:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2256:	2d 91       	ld	r18, X+
    2258:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    225a:	e8 17       	cp	r30, r24
    225c:	f9 07       	cpc	r31, r25
    225e:	d9 f7       	brne	.-10     	; 0x2256 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    2260:	fc e2       	ldi	r31, 0x2C	; 44
    2262:	ef 0e       	add	r14, r31
    2264:	f1 1c       	adc	r15, r1
    2266:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2268:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    226a:	9e 01       	movw	r18, r28
    226c:	2f 5f       	subi	r18, 0xFF	; 255
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	63 e0       	ldi	r22, 0x03	; 3
    2274:	c7 01       	movw	r24, r14
    2276:	b2 de       	rcall	.-668    	; 0x1fdc <ExtEERead>
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	98 27       	eor	r25, r24
    227e:	89 27       	eor	r24, r25
    2280:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    2282:	97 01       	movw	r18, r14
    2284:	2e 5f       	subi	r18, 0xFE	; 254
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2288:	43 e0       	ldi	r20, 0x03	; 3
    228a:	4d 15       	cp	r20, r13
    228c:	80 f4       	brcc	.+32     	; 0x22ae <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    228e:	ac 01       	movw	r20, r24
    2290:	41 50       	subi	r20, 0x01	; 1
    2292:	51 09       	sbc	r21, r1
    2294:	f8 01       	movw	r30, r16
    2296:	42 8f       	std	Z+26, r20	; 0x1a
    2298:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    229a:	f3 e0       	ldi	r31, 0x03	; 3
    229c:	ef 0e       	add	r14, r31
    229e:	f1 1c       	adc	r15, r1
    22a0:	f8 01       	movw	r30, r16
    22a2:	e4 86       	std	Z+12, r14	; 0x0c
    22a4:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    22a6:	4b 81       	ldd	r20, Y+3	; 0x03
    22a8:	f5 01       	movw	r30, r10
    22aa:	44 a3       	std	Z+36, r20	; 0x24
    22ac:	05 c0       	rjmp	.+10     	; 0x22b8 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    22ae:	f8 01       	movw	r30, r16
    22b0:	82 8f       	std	Z+26, r24	; 0x1a
    22b2:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    22b4:	24 87       	std	Z+12, r18	; 0x0c
    22b6:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    22b8:	7c 01       	movw	r14, r24
    22ba:	e2 0e       	add	r14, r18
    22bc:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    22be:	d3 94       	inc	r13
    22c0:	0e 5f       	subi	r16, 0xFE	; 254
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	ff ef       	ldi	r31, 0xFF	; 255
    22c6:	af 1a       	sub	r10, r31
    22c8:	bf 0a       	sbc	r11, r31
    22ca:	47 e0       	ldi	r20, 0x07	; 7
    22cc:	d4 12       	cpse	r13, r20
    22ce:	cd cf       	rjmp	.-102    	; 0x226a <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    22d0:	2c 96       	adiw	r28, 0x0c	; 12
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	bf 90       	pop	r11
    22e6:	af 90       	pop	r10
    22e8:	08 95       	ret

000022ea <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	a0 97       	sbiw	r28, 0x20	; 32
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2306:	7c 01       	movw	r14, r24
    2308:	20 e2       	ldi	r18, 0x20	; 32
    230a:	e2 0e       	add	r14, r18
    230c:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    230e:	9e 01       	movw	r18, r28
    2310:	2f 5f       	subi	r18, 0xFF	; 255
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	8c 96       	adiw	r24, 0x2c	; 44
    231a:	60 de       	rcall	.-832    	; 0x1fdc <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    231c:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    231e:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2320:	11 23       	and	r17, r17
    2322:	51 f1       	breq	.+84     	; 0x2378 <CheckLetter+0x8e>
    2324:	01 2f       	mov	r16, r17
    2326:	11 32       	cpi	r17, 0x21	; 33
    2328:	08 f0       	brcs	.+2      	; 0x232c <CheckLetter+0x42>
    232a:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    232c:	9e 01       	movw	r18, r28
    232e:	2f 5f       	subi	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	60 2f       	mov	r22, r16
    2336:	c7 01       	movw	r24, r14
    2338:	0e 96       	adiw	r24, 0x0e	; 14
    233a:	50 de       	rcall	.-864    	; 0x1fdc <ExtEERead>
    233c:	fe 01       	movw	r30, r28
    233e:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2340:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2342:	dd 20       	and	r13, r13
    2344:	61 f0       	breq	.+24     	; 0x235e <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2346:	e1 e0       	ldi	r30, 0x01	; 1
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	ec 0f       	add	r30, r28
    234c:	fd 1f       	adc	r31, r29
    234e:	e8 0f       	add	r30, r24
    2350:	f1 1d       	adc	r31, r1
    2352:	90 81       	ld	r25, Z
    2354:	90 62       	ori	r25, 0x20	; 32
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	9c 11       	cpse	r25, r12
    235a:	0e c0       	rjmp	.+28     	; 0x2378 <CheckLetter+0x8e>
    235c:	0e c0       	rjmp	.+28     	; 0x237a <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    235e:	91 91       	ld	r25, Z+
    2360:	dd 24       	eor	r13, r13
    2362:	d3 94       	inc	r13
    2364:	9b 35       	cpi	r25, 0x5B	; 91
    2366:	09 f0       	breq	.+2      	; 0x236a <CheckLetter+0x80>
    2368:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    236a:	8f 5f       	subi	r24, 0xFF	; 255
    236c:	80 17       	cp	r24, r16
    236e:	48 f3       	brcs	.-46     	; 0x2342 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2370:	e0 0e       	add	r14, r16
    2372:	f1 1c       	adc	r15, r1
        x -= max;
    2374:	10 1b       	sub	r17, r16
    2376:	d4 cf       	rjmp	.-88     	; 0x2320 <CheckLetter+0x36>
    }
    return 0;
    2378:	80 e0       	ldi	r24, 0x00	; 0
}
    237a:	a0 96       	adiw	r28, 0x20	; 32
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	df 90       	pop	r13
    238e:	cf 90       	pop	r12
    2390:	08 95       	ret

00002392 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2392:	af 92       	push	r10
    2394:	bf 92       	push	r11
    2396:	df 92       	push	r13
    2398:	ef 92       	push	r14
    239a:	ff 92       	push	r15
    239c:	0f 93       	push	r16
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <FindChild+0x14>
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <FindChild+0x16>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	d6 2e       	mov	r13, r22
    23ae:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    23b0:	9e 01       	movw	r18, r28
    23b2:	2f 5f       	subi	r18, 0xFF	; 255
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	80 96       	adiw	r24, 0x20	; 32
    23bc:	0f de       	rcall	.-994    	; 0x1fdc <ExtEERead>
    23be:	e9 80       	ldd	r14, Y+1	; 0x01
    23c0:	fa 80       	ldd	r15, Y+2	; 0x02
    23c2:	fe 24       	eor	r15, r14
    23c4:	ef 24       	eor	r14, r15
    23c6:	fe 24       	eor	r15, r14
    23c8:	0b 81       	ldd	r16, Y+3	; 0x03
    23ca:	1c 81       	ldd	r17, Y+4	; 0x04
    23cc:	10 27       	eor	r17, r16
    23ce:	01 27       	eor	r16, r17
    23d0:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    23d2:	0e 15       	cp	r16, r14
    23d4:	1f 05       	cpc	r17, r15
    23d6:	30 f5       	brcc	.+76     	; 0x2424 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    23d8:	a0 16       	cp	r10, r16
    23da:	b1 06       	cpc	r11, r17
    23dc:	58 f0       	brcs	.+22     	; 0x23f4 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    23de:	9e 01       	movw	r18, r28
    23e0:	2f 5f       	subi	r18, 0xFF	; 255
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	62 e0       	ldi	r22, 0x02	; 2
    23e8:	c8 01       	movw	r24, r16
    23ea:	80 96       	adiw	r24, 0x20	; 32
    23ec:	f7 dd       	rcall	.-1042   	; 0x1fdc <ExtEERead>
    23ee:	09 81       	ldd	r16, Y+1	; 0x01
    23f0:	1a 81       	ldd	r17, Y+2	; 0x02
    23f2:	ec cf       	rjmp	.-40     	; 0x23cc <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    23f4:	9e 01       	movw	r18, r28
    23f6:	2f 5f       	subi	r18, 0xFF	; 255
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	c8 01       	movw	r24, r16
    2400:	85 96       	adiw	r24, 0x25	; 37
    2402:	ec dd       	rcall	.-1064   	; 0x1fdc <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	81 11       	cpse	r24, r1
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    240a:	d1 10       	cpse	r13, r1
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    240e:	0d c0       	rjmp	.+26     	; 0x242a <FindChild+0x98>
    2410:	5a d8       	rcall	.-3916   	; 0x14c6 <CheckState>
    2412:	81 11       	cpse	r24, r1
    2414:	fa cf       	rjmp	.-12     	; 0x240a <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2416:	e3 cf       	rjmp	.-58     	; 0x23de <FindChild+0x4c>
    2418:	6d 2d       	mov	r22, r13
    241a:	c8 01       	movw	r24, r16
    241c:	66 df       	rcall	.-308    	; 0x22ea <CheckLetter>
    241e:	88 23       	and	r24, r24
    2420:	f1 f2       	breq	.-68     	; 0x23de <FindChild+0x4c>
    2422:	03 c0       	rjmp	.+6      	; 0x242a <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	01 c0       	rjmp	.+2      	; 0x242c <FindChild+0x9a>
    242a:	c8 01       	movw	r24, r16
}
    242c:	24 96       	adiw	r28, 0x04	; 4
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	1f 91       	pop	r17
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	df 90       	pop	r13
    2440:	bf 90       	pop	r11
    2442:	af 90       	pop	r10
    2444:	08 95       	ret

00002446 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2446:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2448:	9f e9       	ldi	r25, 0x9F	; 159
    244a:	98 0f       	add	r25, r24
    244c:	9a 31       	cpi	r25, 0x1A	; 26
    244e:	38 f0       	brcs	.+14     	; 0x245e <InpOkChk+0x18>
    2450:	90 ed       	ldi	r25, 0xD0	; 208
    2452:	98 0f       	add	r25, r24
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	9a 30       	cpi	r25, 0x0A	; 10
    2458:	18 f0       	brcs	.+6      	; 0x2460 <InpOkChk+0x1a>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	08 95       	ret
    245e:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2460:	08 95       	ret

00002462 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    246c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    246e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2470:	f8 01       	movw	r30, r16
    2472:	ed 0f       	add	r30, r29
    2474:	f1 1d       	adc	r31, r1
    2476:	20 81       	ld	r18, Z
    2478:	8c 2f       	mov	r24, r28
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	22 23       	and	r18, r18
    247e:	51 f0       	breq	.+20     	; 0x2494 <CleanInput+0x32>
        data[cnt] = data[x];
    2480:	d8 01       	movw	r26, r16
    2482:	a8 0f       	add	r26, r24
    2484:	b9 1f       	adc	r27, r25
    2486:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2488:	80 81       	ld	r24, Z
    248a:	dd df       	rcall	.-70     	; 0x2446 <InpOkChk>
    248c:	81 11       	cpse	r24, r1
    248e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2490:	df 5f       	subi	r29, 0xFF	; 255
    2492:	ee cf       	rjmp	.-36     	; 0x2470 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2494:	f8 01       	movw	r30, r16
    2496:	e8 0f       	add	r30, r24
    2498:	f9 1f       	adc	r31, r25
    249a:	10 82       	st	Z, r1
    return cnt;
}
    249c:	8c 2f       	mov	r24, r28
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	08 95       	ret

000024a8 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    24a8:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    24aa:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    24ae:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    24b2:	89 2b       	or	r24, r25
    24b4:	99 f4       	brne	.+38     	; 0x24dc <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    24b6:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    24c0:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
        auStart = ((effect&0xE0)>0);
    24c4:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    24c8:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    24cc:	80 7e       	andi	r24, 0xE0	; 224
    24ce:	99 27       	eor	r25, r25
    24d0:	21 e0       	ldi	r18, 0x01	; 1
    24d2:	89 2b       	or	r24, r25
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <CheckSend+0x30>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	20 93 39 38 	sts	0x3839, r18	; 0x803839 <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    24dc:	20 91 47 3a 	lds	r18, 0x3A47	; 0x803a47 <txAddrNow>
    24e0:	28 30       	cpi	r18, 0x08	; 8
    24e2:	08 f0       	brcs	.+2      	; 0x24e6 <CheckSend+0x3e>
    24e4:	48 c0       	rjmp	.+144    	; 0x2576 <CheckSend+0xce>
    24e6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    24ea:	88 23       	and	r24, r24
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <CheckSend+0x48>
    24ee:	43 c0       	rjmp	.+134    	; 0x2576 <CheckSend+0xce>
        if (txStrLen[txAddrNow] == 0){
    24f0:	82 2f       	mov	r24, r18
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	fc 01       	movw	r30, r24
    24f6:	e8 5b       	subi	r30, 0xB8	; 184
    24f8:	f5 4c       	sbci	r31, 0xC5	; 197
    24fa:	e0 81       	ld	r30, Z
    24fc:	e1 11       	cpse	r30, r1
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <CheckSend+0x64>
            txPart = 0;
    2500:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3950>
            txAddrNow = TXLISTLEN;
    2504:	88 e0       	ldi	r24, 0x08	; 8
    2506:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <txAddrNow>
    250a:	2d c0       	rjmp	.+90     	; 0x2566 <CheckSend+0xbe>
        } else if (txPart < txStrLen[txAddrNow]){
    250c:	50 91 06 39 	lds	r21, 0x3906	; 0x803906 <txPart.3950>
    2510:	5e 17       	cp	r21, r30
    2512:	58 f5       	brcc	.+86     	; 0x256a <CheckSend+0xc2>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2514:	ce 2f       	mov	r28, r30
    2516:	c5 1b       	sub	r28, r21
    2518:	c1 32       	cpi	r28, 0x21	; 33
    251a:	08 f0       	brcs	.+2      	; 0x251e <CheckSend+0x76>
    251c:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	fc 01       	movw	r30, r24
    2524:	e0 5b       	subi	r30, 0xB0	; 176
    2526:	f5 4c       	sbci	r31, 0xC5	; 197
    2528:	80 81       	ld	r24, Z
    252a:	91 81       	ldd	r25, Z+1	; 0x01
    252c:	29 ef       	ldi	r18, 0xF9	; 249
    252e:	3a e3       	ldi	r19, 0x3A	; 58
    2530:	40 91 46 3a 	lds	r20, 0x3A46	; 0x803a46 <txTypeNow>
    2534:	6c 2f       	mov	r22, r28
    2536:	85 0f       	add	r24, r21
    2538:	91 1d       	adc	r25, r1
    253a:	50 dd       	rcall	.-1376   	; 0x1fdc <ExtEERead>
            txPart += EEreadLength;
    253c:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <txPart.3950>
    2540:	8c 0f       	add	r24, r28
    2542:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <txPart.3950>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2546:	ec 2f       	mov	r30, r28
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	e7 50       	subi	r30, 0x07	; 7
    254c:	f5 4c       	sbci	r31, 0xC5	; 197
    254e:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    2550:	80 91 f9 3a 	lds	r24, 0x3AF9	; 0x803af9 <txBuffer>
    2554:	81 11       	cpse	r24, r1
    2556:	03 c0       	rjmp	.+6      	; 0x255e <CheckSend+0xb6>
    2558:	8b ed       	ldi	r24, 0xDB	; 219
    255a:	80 93 f9 3a 	sts	0x3AF9, r24	; 0x803af9 <txBuffer>
            SerSend(&txBuffer[0]);
    255e:	89 ef       	ldi	r24, 0xF9	; 249
    2560:	9a e3       	ldi	r25, 0x3A	; 58
    2562:	0e 94 c7 08 	call	0x118e	; 0x118e <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	0b c0       	rjmp	.+22     	; 0x2580 <CheckSend+0xd8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    256a:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3950>
            ++txAddrNow;
    256e:	2f 5f       	subi	r18, 0xFF	; 255
    2570:	20 93 47 3a 	sts	0x3A47, r18	; 0x803a47 <txAddrNow>
    2574:	f8 cf       	rjmp	.-16     	; 0x2566 <CheckSend+0xbe>
        }
    } else if (serTxDone) return 0; //All is sent!
    2576:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	91 11       	cpse	r25, r1
    257e:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2588:	c0 91 1a 39 	lds	r28, 0x391A	; 0x80391a <responseList>
    258c:	cc 23       	and	r28, r28
    258e:	e9 f1       	breq	.+122    	; 0x260a <CheckResponse+0x86>
        --responseList;
    2590:	c1 50       	subi	r28, 0x01	; 1
    2592:	c0 93 1a 39 	sts	0x391A, r28	; 0x80391a <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2596:	d0 91 05 39 	lds	r29, 0x3905	; 0x803905 <number.3954>
    259a:	2d 2f       	mov	r18, r29
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	f9 01       	movw	r30, r18
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e5 5e       	subi	r30, 0xE5	; 229
    25a6:	f6 4c       	sbci	r31, 0xC6	; 198
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	80 3f       	cpi	r24, 0xF0	; 240
    25ae:	4f ef       	ldi	r20, 0xFF	; 255
    25b0:	94 07       	cpc	r25, r20
    25b2:	51 f4       	brne	.+20     	; 0x25c8 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    25b4:	60 91 35 3a 	lds	r22, 0x3A35	; 0x803a35 <currObj+0x1a>
    25b8:	70 91 36 3a 	lds	r23, 0x3A36	; 0x803a36 <currObj+0x1b>
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0xc>
    25c2:	90 91 28 3a 	lds	r25, 0x3A28	; 0x803a28 <currObj+0xd>
    25c6:	0d c0       	rjmp	.+26     	; 0x25e2 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    25c8:	d9 01       	movw	r26, r18
    25ca:	aa 0f       	add	r26, r26
    25cc:	bb 1f       	adc	r27, r27
    25ce:	a5 56       	subi	r26, 0x65	; 101
    25d0:	b6 4c       	sbci	r27, 0xC6	; 198
    25d2:	22 0f       	add	r18, r18
    25d4:	33 1f       	adc	r19, r19
    25d6:	f9 01       	movw	r30, r18
    25d8:	e5 5a       	subi	r30, 0xA5	; 165
    25da:	f6 4c       	sbci	r31, 0xC6	; 198
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	4c 91       	ld	r20, X
    25e2:	53 dd       	rcall	.-1370   	; 0x208a <PrepareSending>
        }
        ++number;
    25e4:	df 5f       	subi	r29, 0xFF	; 255
    25e6:	d0 93 05 39 	sts	0x3905, r29	; 0x803905 <number.3954>

        if (responseList == 0) {
    25ea:	c1 11       	cpse	r28, r1
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    25ee:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    25f8:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            RXCNT = 0;
    25fc:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    25fe:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
            number = 0;
    2602:	10 92 05 39 	sts	0x3905, r1	; 0x803905 <number.3954>
    2606:	01 c0       	rjmp	.+2      	; 0x260a <CheckResponse+0x86>
            return 0;
        }
        return 1;
    2608:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    260a:	8c 2f       	mov	r24, r28
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2612:	3f 92       	push	r3
    2614:	4f 92       	push	r4
    2616:	5f 92       	push	r5
    2618:	6f 92       	push	r6
    261a:	7f 92       	push	r7
    261c:	8f 92       	push	r8
    261e:	9f 92       	push	r9
    2620:	af 92       	push	r10
    2622:	bf 92       	push	r11
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	a1 97       	sbiw	r28, 0x21	; 33
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    2640:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <currDepth>
    2644:	8f 3f       	cpi	r24, 0xFF	; 255
    2646:	49 f4       	brne	.+18     	; 0x265a <CheckInput+0x48>
        //Start at first location
        PopulateObject(route[0], &currObj);
    2648:	6b e1       	ldi	r22, 0x1B	; 27
    264a:	7a e3       	ldi	r23, 0x3A	; 58
    264c:	80 91 db 39 	lds	r24, 0x39DB	; 0x8039db <route>
    2650:	90 91 dc 39 	lds	r25, 0x39DC	; 0x8039dc <route+0x1>
    2654:	d3 dd       	rcall	.-1114   	; 0x21fc <PopulateObject>
        currDepth = 0;
    2656:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <currDepth>
    }

    if (serRxDone){
    265a:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <CheckInput+0x52>
    2662:	6e c2       	rjmp	.+1244   	; 0x2b40 <CheckInput+0x52e>

        //Special input requested from user by game
        if (specialInput[0]){
    2664:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2668:	88 23       	and	r24, r24
    266a:	09 f4       	brne	.+2      	; 0x266e <CheckInput+0x5c>
    266c:	57 c0       	rjmp	.+174    	; 0x271c <CheckInput+0x10a>
            specialPassed = 0;
    266e:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <specialPassed>
            data[0] = 'a';
    2672:	81 e6       	ldi	r24, 0x61	; 97
    2674:	f8 01       	movw	r30, r16
    2676:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2678:	6a e0       	ldi	r22, 0x0A	; 10
    267a:	79 e3       	ldi	r23, 0x39	; 57
    267c:	85 e7       	ldi	r24, 0x75	; 117
    267e:	9a e3       	ldi	r25, 0x3A	; 58
    2680:	ea dc       	rcall	.-1580   	; 0x2056 <StartsWith>
    2682:	f8 2e       	mov	r15, r24
    2684:	88 23       	and	r24, r24
    2686:	21 f0       	breq	.+8      	; 0x2690 <CheckInput+0x7e>
                specialPassed = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <specialPassed>
    268e:	04 c0       	rjmp	.+8      	; 0x2698 <CheckInput+0x86>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2690:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    2694:	81 33       	cpi	r24, 0x31	; 49
    2696:	11 f0       	breq	.+4      	; 0x269c <CheckInput+0x8a>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2698:	f1 2c       	mov	r15, r1
    269a:	54 c2       	rjmp	.+1192   	; 0x2b44 <CheckInput+0x532>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    269c:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput+0x2>
    26a0:	81 11       	cpse	r24, r1
    26a2:	fa cf       	rjmp	.-12     	; 0x2698 <CheckInput+0x86>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    26a4:	85 e7       	ldi	r24, 0x75	; 117
    26a6:	9a e3       	ldi	r25, 0x3A	; 58
    26a8:	dc de       	rcall	.-584    	; 0x2462 <CleanInput>
                specialPassed = 2;
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <specialPassed>
                data[1] = 0;
    26b0:	f8 01       	movw	r30, r16
    26b2:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    26b4:	82 30       	cpi	r24, 0x02	; 2
    26b6:	80 f3       	brcs	.-32     	; 0x2698 <CheckInput+0x86>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    26b8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    26bc:	81 33       	cpi	r24, 0x31	; 49
    26be:	61 f0       	breq	.+24     	; 0x26d8 <CheckInput+0xc6>
    26c0:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    26c4:	82 33       	cpi	r24, 0x32	; 50
    26c6:	41 f0       	breq	.+16     	; 0x26d8 <CheckInput+0xc6>
    26c8:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    26cc:	83 33       	cpi	r24, 0x33	; 51
    26ce:	21 f0       	breq	.+8      	; 0x26d8 <CheckInput+0xc6>
    26d0:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    26d4:	84 33       	cpi	r24, 0x34	; 52
    26d6:	01 f7       	brne	.-64     	; 0x2698 <CheckInput+0x86>
                        serRx[1] |= 0x20;
    26d8:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    26dc:	80 62       	ori	r24, 0x20	; 32
    26de:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    26e2:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    26e6:	81 36       	cpi	r24, 0x61	; 97
    26e8:	61 f0       	breq	.+24     	; 0x2702 <CheckInput+0xf0>
    26ea:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    26ee:	85 36       	cpi	r24, 0x65	; 101
    26f0:	41 f0       	breq	.+16     	; 0x2702 <CheckInput+0xf0>
    26f2:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    26f6:	86 36       	cpi	r24, 0x66	; 102
    26f8:	21 f0       	breq	.+8      	; 0x2702 <CheckInput+0xf0>
    26fa:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    26fe:	87 37       	cpi	r24, 0x77	; 119
    2700:	59 f6       	brne	.-106    	; 0x2698 <CheckInput+0x86>
                            data[1] = specialInput[1]+0x11;
    2702:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput+0x1>
    2706:	8f 5e       	subi	r24, 0xEF	; 239
    2708:	f8 01       	movw	r30, r16
    270a:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    270c:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    2710:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2712:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    2716:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2718:	14 82       	std	Z+4, r1	; 0x04
    271a:	14 c2       	rjmp	.+1064   	; 0x2b44 <CheckInput+0x532>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    271c:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    2720:	83 32       	cpi	r24, 0x23	; 35
    2722:	89 f5       	brne	.+98     	; 0x2786 <CheckInput+0x174>
    2724:	8d b3       	in	r24, 0x1d	; 29
    2726:	86 30       	cpi	r24, 0x06	; 6
    2728:	71 f5       	brne	.+92     	; 0x2786 <CheckInput+0x174>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    2730:	fc 01       	movw	r30, r24
    2732:	eb 58       	subi	r30, 0x8B	; 139
    2734:	f5 4c       	sbci	r31, 0xC5	; 197
    2736:	20 81       	ld	r18, Z
    2738:	20 53       	subi	r18, 0x30	; 48
    273a:	20 83       	st	Z, r18
                    bitNr *= 10;
    273c:	11 0f       	add	r17, r17
    273e:	21 2f       	mov	r18, r17
    2740:	22 0f       	add	r18, r18
    2742:	22 0f       	add	r18, r18
    2744:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2746:	20 91 76 3a 	lds	r18, 0x3A76	; 0x803a76 <serRx+0x1>
    274a:	23 30       	cpi	r18, 0x03	; 3
    274c:	48 f4       	brcc	.+18     	; 0x2760 <CheckInput+0x14e>
                    if (serRx[x] < 10) {
    274e:	20 81       	ld	r18, Z
    2750:	2a 30       	cpi	r18, 0x0A	; 10
    2752:	b8 f4       	brcc	.+46     	; 0x2782 <CheckInput+0x170>
                        bitNr += serRx[x];
    2754:	20 81       	ld	r18, Z
    2756:	12 0f       	add	r17, r18
    2758:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    275a:	84 30       	cpi	r24, 0x04	; 4
    275c:	91 05       	cpc	r25, r1
    275e:	41 f7       	brne	.-48     	; 0x2730 <CheckInput+0x11e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    2760:	81 2f       	mov	r24, r17
    2762:	8f 77       	andi	r24, 0x7F	; 127
    2764:	71 f0       	breq	.+28     	; 0x2782 <CheckInput+0x170>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2766:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <serRx+0x4>
    276a:	60 91 7a 3a 	lds	r22, 0x3A7A	; 0x803a7a <serRx+0x5>
    276e:	70 e0       	ldi	r23, 0x00	; 0
    2770:	78 2b       	or	r23, r24
    2772:	81 2f       	mov	r24, r17
    2774:	80 95       	com	r24
    2776:	cf db       	rcall	.-2146   	; 0x1f16 <Cheat>
    2778:	88 23       	and	r24, r24
    277a:	19 f0       	breq	.+6      	; 0x2782 <CheckInput+0x170>
    277c:	81 2f       	mov	r24, r17
    277e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	50 c0       	rjmp	.+160    	; 0x2826 <CheckInput+0x214>
    2786:	d8 01       	movw	r26, r16
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    278c:	fc 01       	movw	r30, r24
    278e:	eb 58       	subi	r30, 0x8B	; 139
    2790:	f5 4c       	sbci	r31, 0xC5	; 197
    2792:	20 81       	ld	r18, Z
    2794:	21 34       	cpi	r18, 0x41	; 65
    2796:	18 f0       	brcs	.+6      	; 0x279e <CheckInput+0x18c>
    2798:	20 81       	ld	r18, Z
    279a:	2b 35       	cpi	r18, 0x5B	; 91
    279c:	10 f0       	brcs	.+4      	; 0x27a2 <CheckInput+0x190>
    279e:	20 81       	ld	r18, Z
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <CheckInput+0x194>
    27a2:	20 81       	ld	r18, Z
    27a4:	20 62       	ori	r18, 0x20	; 32
    27a6:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    27a8:	20 81       	ld	r18, Z
    27aa:	21 11       	cpse	r18, r1
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <CheckInput+0x1a6>
                    data[x] = 0;
    27ae:	f8 01       	movw	r30, r16
    27b0:	e8 0f       	add	r30, r24
    27b2:	f1 1d       	adc	r31, r1
    27b4:	10 82       	st	Z, r1
                    break;
    27b6:	05 c0       	rjmp	.+10     	; 0x27c2 <CheckInput+0x1b0>
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    27bc:	81 34       	cpi	r24, 0x41	; 65
    27be:	91 05       	cpc	r25, r1
    27c0:	29 f7       	brne	.-54     	; 0x278c <CheckInput+0x17a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    27c2:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
                data[0] = 0;
    27c6:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    27c8:	81 11       	cpse	r24, r1
    27ca:	05 c0       	rjmp	.+10     	; 0x27d6 <CheckInput+0x1c4>
                data[0] = 0;
    27cc:	10 82       	st	Z, r1
                RXCNT = 0;
    27ce:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    27d0:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    27d4:	b5 c1       	rjmp	.+874    	; 0x2b40 <CheckInput+0x52e>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    27d6:	80 81       	ld	r24, Z
    27d8:	8f 33       	cpi	r24, 0x3F	; 63
    27da:	11 f0       	breq	.+4      	; 0x27e0 <CheckInput+0x1ce>
    27dc:	88 36       	cpi	r24, 0x68	; 104
    27de:	39 f5       	brne	.+78     	; 0x282e <CheckInput+0x21c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27e0:	8b e5       	ldi	r24, 0x5B	; 91
    27e2:	9a e7       	ldi	r25, 0x7A	; 122
    27e4:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    27e8:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    27ec:	84 e0       	ldi	r24, 0x04	; 4
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    27f4:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    2800:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2804:	23 e9       	ldi	r18, 0x93	; 147
    2806:	3b e7       	ldi	r19, 0x7B	; 123
    2808:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    280c:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2810:	2d e6       	ldi	r18, 0x6D	; 109
    2812:	34 e0       	ldi	r19, 0x04	; 4
    2814:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    2818:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    281c:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2820:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	6e dc       	rcall	.-1828   	; 0x2104 <SetStandardResponse>
    2828:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    282c:	89 c1       	rjmp	.+786    	; 0x2b40 <CheckInput+0x52e>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    282e:	81 36       	cpi	r24, 0x61	; 97
    2830:	d9 f4       	brne	.+54     	; 0x2868 <CheckInput+0x256>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2832:	8b e5       	ldi	r24, 0x5B	; 91
    2834:	9a e7       	ldi	r25, 0x7A	; 122
    2836:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    283a:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    283e:	84 e0       	ldi	r24, 0x04	; 4
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    2846:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    2852:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2856:	2e e6       	ldi	r18, 0x6E	; 110
    2858:	3a e7       	ldi	r19, 0x7A	; 122
    285a:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    285e:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2862:	25 e2       	ldi	r18, 0x25	; 37
    2864:	31 e0       	ldi	r19, 0x01	; 1
    2866:	d6 cf       	rjmp	.-84     	; 0x2814 <CheckInput+0x202>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2868:	87 37       	cpi	r24, 0x77	; 119
    286a:	09 f0       	breq	.+2      	; 0x286e <CheckInput+0x25c>
    286c:	6e c0       	rjmp	.+220    	; 0x294a <CheckInput+0x338>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    286e:	8b e5       	ldi	r24, 0x5B	; 91
    2870:	9a e7       	ldi	r25, 0x7A	; 122
    2872:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    2876:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    287a:	84 e0       	ldi	r24, 0x04	; 4
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    2882:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2886:	21 e0       	ldi	r18, 0x01	; 1
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	20 93 9b 39 	sts	0x399B, r18	; 0x80399b <reactStr+0x80>
    288e:	30 93 9c 39 	sts	0x399C, r19	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2892:	8a ec       	ldi	r24, 0xCA	; 202
    2894:	96 e7       	ldi	r25, 0x76	; 118
    2896:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    289a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    289e:	82 e1       	ldi	r24, 0x12	; 18
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    28a6:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    28aa:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    28ae:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    28b2:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
    28b6:	81 30       	cpi	r24, 0x01	; 1
    28b8:	19 f4       	brne	.+6      	; 0x28c0 <CheckInput+0x2ae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ba:	84 ec       	ldi	r24, 0xC4	; 196
    28bc:	96 e7       	ldi	r25, 0x76	; 118
    28be:	0f c0       	rjmp	.+30     	; 0x28de <CheckInput+0x2cc>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	49 f4       	brne	.+18     	; 0x28d6 <CheckInput+0x2c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28c4:	81 ec       	ldi	r24, 0xC1	; 193
    28c6:	96 e7       	ldi	r25, 0x76	; 118
    28c8:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    28cc:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    28d0:	83 e0       	ldi	r24, 0x03	; 3
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	1e c0       	rjmp	.+60     	; 0x2912 <CheckInput+0x300>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	49 f4       	brne	.+18     	; 0x28ec <CheckInput+0x2da>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28da:	8b eb       	ldi	r24, 0xBB	; 187
    28dc:	96 e7       	ldi	r25, 0x76	; 118
    28de:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    28e2:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    28e6:	86 e0       	ldi	r24, 0x06	; 6
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	13 c0       	rjmp	.+38     	; 0x2912 <CheckInput+0x300>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    28ec:	84 30       	cpi	r24, 0x04	; 4
    28ee:	49 f4       	brne	.+18     	; 0x2902 <CheckInput+0x2f0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28f0:	86 eb       	ldi	r24, 0xB6	; 182
    28f2:	96 e7       	ldi	r25, 0x76	; 118
    28f4:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    28f8:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    28fc:	85 e0       	ldi	r24, 0x05	; 5
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	08 c0       	rjmp	.+16     	; 0x2912 <CheckInput+0x300>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2902:	8f e3       	ldi	r24, 0x3F	; 63
    2904:	96 e7       	ldi	r25, 0x76	; 118
    2906:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    290a:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    290e:	82 e4       	ldi	r24, 0x42	; 66
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    2916:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    291a:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    291e:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2922:	8c e9       	ldi	r24, 0x9C	; 156
    2924:	96 e7       	ldi	r25, 0x76	; 118
    2926:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    292a:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    292e:	8a e1       	ldi	r24, 0x1A	; 26
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    2936:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    2942:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	6e cf       	rjmp	.-292    	; 0x2826 <CheckInput+0x214>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    294a:	81 37       	cpi	r24, 0x71	; 113
    294c:	d9 f4       	brne	.+54     	; 0x2984 <CheckInput+0x372>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    294e:	8b e5       	ldi	r24, 0x5B	; 91
    2950:	9a e7       	ldi	r25, 0x7A	; 122
    2952:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    2956:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    295a:	84 e0       	ldi	r24, 0x04	; 4
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    2962:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    296e:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2972:	22 e0       	ldi	r18, 0x02	; 2
    2974:	3a e7       	ldi	r19, 0x7A	; 122
    2976:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    297a:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    297e:	25 e5       	ldi	r18, 0x55	; 85
    2980:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2982:	48 cf       	rjmp	.-368    	; 0x2814 <CheckInput+0x202>
    2984:	66 eb       	ldi	r22, 0xB6	; 182
    2986:	7e eb       	ldi	r23, 0xBE	; 190
    2988:	c8 01       	movw	r24, r16
    298a:	65 db       	rcall	.-2358   	; 0x2056 <StartsWith>
    298c:	88 23       	and	r24, r24
    298e:	f9 f0       	breq	.+62     	; 0x29ce <CheckInput+0x3bc>
    2990:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	81 2f       	mov	r24, r17
    2996:	0e 94 3f 0a 	call	0x147e	; 0x147e <WriteStatusBit>
    299a:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    299c:	12 37       	cpi	r17, 0x72	; 114
    299e:	c9 f7       	brne	.-14     	; 0x2992 <CheckInput+0x380>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    29a0:	0e 94 b8 09 	call	0x1370	; 0x1370 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    29a4:	80 e2       	ldi	r24, 0x20	; 32
    29a6:	e9 ef       	ldi	r30, 0xF9	; 249
    29a8:	fe eb       	ldi	r31, 0xBE	; 190
    29aa:	de 01       	movw	r26, r28
    29ac:	11 96       	adiw	r26, 0x01	; 1
    29ae:	01 90       	ld	r0, Z+
    29b0:	0d 92       	st	X+, r0
    29b2:	8a 95       	dec	r24
    29b4:	e1 f7       	brne	.-8      	; 0x29ae <CheckInput+0x39c>
                SerSpeed(60);
    29b6:	8c e3       	ldi	r24, 0x3C	; 60
    29b8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    29bc:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    29c0:	88 23       	and	r24, r24
    29c2:	e1 f3       	breq	.-8      	; 0x29bc <CheckInput+0x3aa>
    29c4:	ce 01       	movw	r24, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	0e 94 c7 08 	call	0x118e	; 0x118e <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    29cc:	f7 cf       	rjmp	.-18     	; 0x29bc <CheckInput+0x3aa>
    29ce:	6c eb       	ldi	r22, 0xBC	; 188
    29d0:	7e eb       	ldi	r23, 0xBE	; 190
    29d2:	c8 01       	movw	r24, r16
    29d4:	40 db       	rcall	.-2432   	; 0x2056 <StartsWith>
    29d6:	88 23       	and	r24, r24
    29d8:	61 f1       	breq	.+88     	; 0x2a32 <CheckInput+0x420>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	89 a3       	std	Y+33, r24	; 0x21
    29de:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	be 01       	movw	r22, r28
    29e4:	6f 5d       	subi	r22, 0xDF	; 223
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	81 2f       	mov	r24, r17
    29ea:	0e 94 9f 08 	call	0x113e	; 0x113e <EEWrite>
    29ee:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    29f0:	10 32       	cpi	r17, 0x20	; 32
    29f2:	b1 f7       	brne	.-20     	; 0x29e0 <CheckInput+0x3ce>
    29f4:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	81 2f       	mov	r24, r17
    29fa:	0e 94 3f 0a 	call	0x147e	; 0x147e <WriteStatusBit>
    29fe:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2a00:	12 37       	cpi	r17, 0x72	; 114
    2a02:	c9 f7       	brne	.-14     	; 0x29f6 <CheckInput+0x3e4>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    2a04:	0e 94 b8 09 	call	0x1370	; 0x1370 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    2a08:	8f e0       	ldi	r24, 0x0F	; 15
    2a0a:	e9 e1       	ldi	r30, 0x19	; 25
    2a0c:	ff eb       	ldi	r31, 0xBF	; 191
    2a0e:	de 01       	movw	r26, r28
    2a10:	11 96       	adiw	r26, 0x01	; 1
    2a12:	01 90       	ld	r0, Z+
    2a14:	0d 92       	st	X+, r0
    2a16:	8a 95       	dec	r24
    2a18:	e1 f7       	brne	.-8      	; 0x2a12 <CheckInput+0x400>
                SerSpeed(60);
    2a1a:	8c e3       	ldi	r24, 0x3C	; 60
    2a1c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a20:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a24:	88 23       	and	r24, r24
    2a26:	e1 f3       	breq	.-8      	; 0x2a20 <CheckInput+0x40e>
    2a28:	ce 01       	movw	r24, r28
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	0e 94 c7 08 	call	0x118e	; 0x118e <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    2a30:	f7 cf       	rjmp	.-18     	; 0x2a20 <CheckInput+0x40e>
    2a32:	63 ef       	ldi	r22, 0xF3	; 243
    2a34:	7e eb       	ldi	r23, 0xBE	; 190
    2a36:	c8 01       	movw	r24, r16
    2a38:	0e db       	rcall	.-2532   	; 0x2056 <StartsWith>
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <CheckInput+0x42e>
    2a3e:	2c ce       	rjmp	.-936    	; 0x2698 <CheckInput+0x86>
    2a40:	8b e1       	ldi	r24, 0x1B	; 27
    2a42:	c8 2e       	mov	r12, r24
    2a44:	89 e3       	ldi	r24, 0x39	; 57
    2a46:	d8 2e       	mov	r13, r24
    2a48:	9b e5       	ldi	r25, 0x5B	; 91
    2a4a:	e9 2e       	mov	r14, r25
    2a4c:	99 e3       	ldi	r25, 0x39	; 57
    2a4e:	f9 2e       	mov	r15, r25
    2a50:	0b e9       	ldi	r16, 0x9B	; 155
    2a52:	19 e3       	ldi	r17, 0x39	; 57
    2a54:	28 e1       	ldi	r18, 0x18	; 24
    2a56:	32 2e       	mov	r3, r18
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a58:	3a ed       	ldi	r19, 0xDA	; 218
    2a5a:	63 2e       	mov	r6, r19
    2a5c:	34 e7       	ldi	r19, 0x74	; 116
    2a5e:	73 2e       	mov	r7, r19
    reactStr[1][number]=length;
    2a60:	42 e0       	ldi	r20, 0x02	; 2
    2a62:	84 2e       	mov	r8, r20
    2a64:	91 2c       	mov	r9, r1
    reactStr[2][number]=type;
    2a66:	aa 24       	eor	r10, r10
    2a68:	a3 94       	inc	r10
    2a6a:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a6c:	69 e5       	ldi	r22, 0x59	; 89
    2a6e:	46 2e       	mov	r4, r22
    2a70:	6a e7       	ldi	r22, 0x7A	; 122
    2a72:	56 2e       	mov	r5, r22
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	be 01       	movw	r22, r28
    2a78:	6f 5d       	subi	r22, 0xDF	; 223
    2a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7c:	83 2d       	mov	r24, r3
    2a7e:	0e 94 8f 08 	call	0x111e	; 0x111e <EERead>
                    bit = 0xff-bit;
    2a82:	89 a1       	ldd	r24, Y+33	; 0x21
    2a84:	80 95       	com	r24
    2a86:	89 a3       	std	Y+33, r24	; 0x21
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a88:	f6 01       	movw	r30, r12
    2a8a:	60 82       	st	Z, r6
    2a8c:	71 82       	std	Z+1, r7	; 0x01
    reactStr[1][number]=length;
    2a8e:	f7 01       	movw	r30, r14
    2a90:	80 82       	st	Z, r8
    2a92:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2a94:	f8 01       	movw	r30, r16
    2a96:	a0 82       	st	Z, r10
    2a98:	b1 82       	std	Z+1, r11	; 0x01
                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    } 
                    */
                    SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
    2a9a:	98 2f       	mov	r25, r24
    2a9c:	92 95       	swap	r25
    2a9e:	9f 70       	andi	r25, 0x0F	; 15
    2aa0:	e1 e0       	ldi	r30, 0x01	; 1
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	ec 0f       	add	r30, r28
    2aa6:	fd 1f       	adc	r31, r29
    2aa8:	e9 0f       	add	r30, r25
    2aaa:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aac:	20 81       	ld	r18, Z
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	26 53       	subi	r18, 0x36	; 54
    2ab2:	3b 48       	sbci	r19, 0x8B	; 139
    2ab4:	f6 01       	movw	r30, r12
    2ab6:	22 83       	std	Z+2, r18	; 0x02
    2ab8:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    2aba:	f7 01       	movw	r30, r14
    2abc:	a2 82       	std	Z+2, r10	; 0x02
    2abe:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	a2 82       	std	Z+2, r10	; 0x02
    2ac4:	b3 82       	std	Z+3, r11	; 0x03
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    } 
                    */
                    SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+digit[bit%16], 1, TEASER);
    2ac6:	8f 70       	andi	r24, 0x0F	; 15
    2ac8:	e1 e0       	ldi	r30, 0x01	; 1
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	ec 0f       	add	r30, r28
    2ace:	fd 1f       	adc	r31, r29
    2ad0:	e8 0f       	add	r30, r24
    2ad2:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad4:	80 81       	ld	r24, Z
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	86 53       	subi	r24, 0x36	; 54
    2ada:	9b 48       	sbci	r25, 0x8B	; 139
    2adc:	f6 01       	movw	r30, r12
    2ade:	84 83       	std	Z+4, r24	; 0x04
    2ae0:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    2ae2:	f7 01       	movw	r30, r14
    2ae4:	a4 82       	std	Z+4, r10	; 0x04
    2ae6:	b5 82       	std	Z+5, r11	; 0x05
    reactStr[2][number]=type;
    2ae8:	f8 01       	movw	r30, r16
    2aea:	a4 82       	std	Z+4, r10	; 0x04
    2aec:	b5 82       	std	Z+5, r11	; 0x05
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aee:	f6 01       	movw	r30, r12
    2af0:	46 82       	std	Z+6, r4	; 0x06
    2af2:	57 82       	std	Z+7, r5	; 0x07
    reactStr[1][number]=length;
    2af4:	f7 01       	movw	r30, r14
    2af6:	86 82       	std	Z+6, r8	; 0x06
    2af8:	97 82       	std	Z+7, r9	; 0x07
    reactStr[2][number]=type;
    2afa:	f8 01       	movw	r30, r16
    2afc:	a6 82       	std	Z+6, r10	; 0x06
    2afe:	b7 82       	std	Z+7, r11	; 0x07
    2b00:	33 94       	inc	r3
    2b02:	f8 e0       	ldi	r31, 0x08	; 8
    2b04:	cf 0e       	add	r12, r31
    2b06:	d1 1c       	adc	r13, r1
    2b08:	88 e0       	ldi	r24, 0x08	; 8
    2b0a:	e8 0e       	add	r14, r24
    2b0c:	f1 1c       	adc	r15, r1
    2b0e:	08 5f       	subi	r16, 0xF8	; 248
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
            }
            if (StartsWith(&data[0], "cheat")){
                //int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b12:	e0 e2       	ldi	r30, 0x20	; 32
    2b14:	3e 12       	cpse	r3, r30
    2b16:	ae cf       	rjmp	.-164    	; 0x2a74 <CheckInput+0x462>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b18:	8b e5       	ldi	r24, 0x5B	; 91
    2b1a:	9a e7       	ldi	r25, 0x7A	; 122
    2b1c:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x3e>
    2b20:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x3f>
    reactStr[1][number]=length;
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x7e>
    2b2c:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x7f>
    reactStr[2][number]=type;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	80 93 d9 39 	sts	0x39D9, r24	; 0x8039d9 <reactStr+0xbe>
    2b38:	90 93 da 39 	sts	0x39DA, r25	; 0x8039da <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+digit[bit>>4], 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+digit[bit%16], 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2b3c:	30 92 1a 39 	sts	0x391A, r3	; 0x80391a <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2b40:	ff 24       	eor	r15, r15
    2b42:	f3 94       	inc	r15
}
    2b44:	8f 2d       	mov	r24, r15
    2b46:	a1 96       	adiw	r28, 0x21	; 33
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	bf 90       	pop	r11
    2b5e:	af 90       	pop	r10
    2b60:	9f 90       	pop	r9
    2b62:	8f 90       	pop	r8
    2b64:	7f 90       	pop	r7
    2b66:	6f 90       	pop	r6
    2b68:	5f 90       	pop	r5
    2b6a:	4f 90       	pop	r4
    2b6c:	3f 90       	pop	r3
    2b6e:	08 95       	ret

00002b70 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2b70:	5f 92       	push	r5
    2b72:	6f 92       	push	r6
    2b74:	7f 92       	push	r7
    2b76:	8f 92       	push	r8
    2b78:	9f 92       	push	r9
    2b7a:	af 92       	push	r10
    2b7c:	bf 92       	push	r11
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	28 97       	sbiw	r28, 0x08	; 8
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2b9a:	63 dc       	rcall	.-1850   	; 0x2462 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	61 dc       	rcall	.-1854   	; 0x2462 <CleanInput>
    2ba0:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2ba2:	88 23       	and	r24, r24
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <ProcessInput+0x38>
    2ba6:	fa c7       	rjmp	.+4084   	; 0x3b9c <ProcessInput+0x102c>

        //eXit to previous location
        if (data[0] == 'x'){
    2ba8:	d8 01       	movw	r26, r16
    2baa:	8c 91       	ld	r24, X
    2bac:	88 37       	cpi	r24, 0x78	; 120
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <ProcessInput+0x42>
    2bb0:	45 c0       	rjmp	.+138    	; 0x2c3c <ProcessInput+0xcc>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2bb2:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <currDepth>
    2bb6:	e8 2f       	mov	r30, r24
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	e5 52       	subi	r30, 0x25	; 37
    2bc0:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc2:	20 81       	ld	r18, Z
    2bc4:	31 81       	ldd	r19, Z+1	; 0x01
    2bc6:	23 2b       	or	r18, r19
    2bc8:	11 f0       	breq	.+4      	; 0x2bce <ProcessInput+0x5e>
    2bca:	81 11       	cpse	r24, r1
    2bcc:	03 c0       	rjmp	.+6      	; 0x2bd4 <ProcessInput+0x64>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bce:	81 e8       	ldi	r24, 0x81	; 129
    2bd0:	96 e7       	ldi	r25, 0x76	; 118
    2bd2:	a1 c5       	rjmp	.+2882   	; 0x3716 <ProcessInput+0xba6>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2bd4:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x6>
    2bd8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <CheckState>
    2bdc:	88 23       	and	r24, r24
    2bde:	b9 f0       	breq	.+46     	; 0x2c0e <ProcessInput+0x9e>
                --currDepth;
    2be0:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2be4:	e1 50       	subi	r30, 0x01	; 1
    2be6:	e0 93 2c 38 	sts	0x382C, r30	; 0x80382c <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	e5 52       	subi	r30, 0x25	; 37
    2bf2:	f6 4c       	sbci	r31, 0xC6	; 198
    2bf4:	6b e1       	ldi	r22, 0x1B	; 27
    2bf6:	7a e3       	ldi	r23, 0x3A	; 58
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	ff da       	rcall	.-2562   	; 0x21fc <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2bfe:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2c08:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2c0c:	31 c2       	rjmp	.+1122   	; 0x3070 <ProcessInput+0x500>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2c0e:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x22>
    2c12:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c16:	20 91 2f 3a 	lds	r18, 0x3A2F	; 0x803a2f <currObj+0x14>
    2c1a:	30 91 30 3a 	lds	r19, 0x3A30	; 0x803a30 <currObj+0x15>
    2c1e:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2c22:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2c26:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2c2a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2c2e:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2c32:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2c36:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <currObj+0x28>
    2c3a:	3a c6       	rjmp	.+3188   	; 0x38b0 <ProcessInput+0xd40>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2c3c:	85 36       	cpi	r24, 0x65	; 101
    2c3e:	19 f0       	breq	.+6      	; 0x2c46 <ProcessInput+0xd6>
    2c40:	8f 36       	cpi	r24, 0x6F	; 111
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <ProcessInput+0xd6>
    2c44:	df c0       	rjmp	.+446    	; 0x2e04 <ProcessInput+0x294>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2c46:	b2 e0       	ldi	r27, 0x02	; 2
    2c48:	fb 12       	cpse	r15, r27
    2c4a:	c1 cf       	rjmp	.-126    	; 0x2bce <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2c4c:	e0 90 2c 38 	lds	r14, 0x382C	; 0x80382c <currDepth>
    2c50:	f1 2c       	mov	r15, r1
    2c52:	f7 01       	movw	r30, r14
    2c54:	ee 0f       	add	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	e5 52       	subi	r30, 0x25	; 37
    2c5a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	d8 01       	movw	r26, r16
    2c62:	11 96       	adiw	r26, 0x01	; 1
    2c64:	6c 91       	ld	r22, X
    2c66:	80 81       	ld	r24, Z
    2c68:	91 81       	ldd	r25, Z+1	; 0x01
    2c6a:	93 db       	rcall	.-2266   	; 0x2392 <FindChild>
    2c6c:	f7 01       	movw	r30, r14
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	e3 52       	subi	r30, 0x23	; 35
    2c74:	f6 4c       	sbci	r31, 0xC6	; 198
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2c7a:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <currDepth>
    2c7e:	29 2f       	mov	r18, r25
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	f9 01       	movw	r30, r18
    2c84:	ee 0f       	add	r30, r30
    2c86:	ff 1f       	adc	r31, r31
    2c88:	e3 52       	subi	r30, 0x23	; 35
    2c8a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c8c:	40 81       	ld	r20, Z
    2c8e:	51 81       	ldd	r21, Z+1	; 0x01
    2c90:	41 15       	cp	r20, r1
    2c92:	51 05       	cpc	r21, r1
    2c94:	21 f0       	breq	.+8      	; 0x2c9e <ProcessInput+0x12e>
                    PopulateObject(route[currDepth+1], &actObj1);
    2c96:	6a ed       	ldi	r22, 0xDA	; 218
    2c98:	78 e3       	ldi	r23, 0x38	; 56
    2c9a:	ca 01       	movw	r24, r20
    2c9c:	1c c0       	rjmp	.+56     	; 0x2cd6 <ProcessInput+0x166>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2c9e:	99 23       	and	r25, r25
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <ProcessInput+0x134>
    2ca2:	93 c7       	rjmp	.+3878   	; 0x3bca <ProcessInput+0x105a>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2ca4:	22 0f       	add	r18, r18
    2ca6:	33 1f       	adc	r19, r19
    2ca8:	f9 01       	movw	r30, r18
    2caa:	e7 52       	subi	r30, 0x27	; 39
    2cac:	f6 4c       	sbci	r31, 0xC6	; 198
    2cae:	d8 01       	movw	r26, r16
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	6c 91       	ld	r22, X
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	18 db       	rcall	.-2512   	; 0x22ea <CheckLetter>
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <ProcessInput+0x150>
    2cbe:	85 c7       	rjmp	.+3850   	; 0x3bca <ProcessInput+0x105a>
                        PopulateObject(route[currDepth-1], &actObj1);
    2cc0:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	ee 0f       	add	r30, r30
    2cc8:	ff 1f       	adc	r31, r31
    2cca:	e7 52       	subi	r30, 0x27	; 39
    2ccc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cce:	6a ed       	ldi	r22, 0xDA	; 218
    2cd0:	78 e3       	ldi	r23, 0x38	; 56
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	92 da       	rcall	.-2780   	; 0x21fc <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2cd8:	f8 01       	movw	r30, r16
    2cda:	80 81       	ld	r24, Z
    2cdc:	85 36       	cpi	r24, 0x65	; 101
    2cde:	c9 f4       	brne	.+50     	; 0x2d12 <ProcessInput+0x1a2>
    2ce0:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3995+0x8>
    2ce4:	80 fd       	sbrc	r24, 0
    2ce6:	1e c0       	rjmp	.+60     	; 0x2d24 <ProcessInput+0x1b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ce8:	8f e9       	ldi	r24, 0x9F	; 159
    2cea:	99 e7       	ldi	r25, 0x79	; 121
    2cec:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2cf0:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2cf4:	8e e1       	ldi	r24, 0x1E	; 30
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2cfc:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2d08:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2d0c:	72 e0       	ldi	r23, 0x02	; 2
    2d0e:	77 2e       	mov	r7, r23
    2d10:	2a c7       	rjmp	.+3668   	; 0x3b66 <ProcessInput+0xff6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2d12:	8f 36       	cpi	r24, 0x6F	; 111
    2d14:	39 f4       	brne	.+14     	; 0x2d24 <ProcessInput+0x1b4>
    2d16:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3995+0x8>
    2d1a:	81 fd       	sbrc	r24, 1
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <ProcessInput+0x1b4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d1e:	84 e8       	ldi	r24, 0x84	; 132
    2d20:	99 e7       	ldi	r25, 0x79	; 121
    2d22:	f9 c4       	rjmp	.+2546   	; 0x3716 <ProcessInput+0xba6>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2d24:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <actObj1.3995+0x6>
    2d28:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <CheckState>
    2d2c:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <ProcessInput+0x1c6>
    2d34:	49 c0       	rjmp	.+146    	; 0x2dc8 <ProcessInput+0x258>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2d36:	ae 2f       	mov	r26, r30
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	aa 0f       	add	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	a3 52       	subi	r26, 0x23	; 35
    2d40:	b6 4c       	sbci	r27, 0xC6	; 198
    2d42:	8d 91       	ld	r24, X+
    2d44:	9c 91       	ld	r25, X
    2d46:	89 2b       	or	r24, r25
    2d48:	11 f0       	breq	.+4      	; 0x2d4e <ProcessInput+0x1de>
    2d4a:	ef 5f       	subi	r30, 0xFF	; 255
    2d4c:	01 c0       	rjmp	.+2      	; 0x2d50 <ProcessInput+0x1e0>
    2d4e:	e1 50       	subi	r30, 0x01	; 1
    2d50:	e0 93 2c 38 	sts	0x382C, r30	; 0x80382c <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2d54:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	ee 0f       	add	r30, r30
    2d5c:	ff 1f       	adc	r31, r31
    2d5e:	e5 52       	subi	r30, 0x25	; 37
    2d60:	f6 4c       	sbci	r31, 0xC6	; 198
    2d62:	6b e1       	ldi	r22, 0x1B	; 27
    2d64:	7a e3       	ldi	r23, 0x3A	; 58
    2d66:	80 81       	ld	r24, Z
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	48 da       	rcall	.-2928   	; 0x21fc <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2d6c:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2d70:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d74:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    2d78:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    2d7c:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2d80:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2d84:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2d88:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2d8c:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2d90:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d94:	8b e5       	ldi	r24, 0x5B	; 91
    2d96:	9a e7       	ldi	r25, 0x7A	; 122
    2d98:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2d9c:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    2da8:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    2db4:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2db8:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2dc2:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2dc6:	8d c4       	rjmp	.+2330   	; 0x36e2 <ProcessInput+0xb72>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	ee 0f       	add	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	e3 52       	subi	r30, 0x23	; 35
    2dd0:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd2:	10 82       	st	Z, r1
    2dd4:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2dd6:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3995+0x22>
    2dda:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3995+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dde:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3995+0x14>
    2de2:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3995+0x15>
    2de6:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2dea:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2dee:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2df2:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2df6:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2dfa:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2dfe:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3995+0x28>
    2e02:	56 c5       	rjmp	.+2732   	; 0x38b0 <ProcessInput+0xd40>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2e04:	8c 36       	cpi	r24, 0x6C	; 108
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <ProcessInput+0x29a>
    2e08:	57 c1       	rjmp	.+686    	; 0x30b8 <ProcessInput+0x548>
    2e0a:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
            if (inputLen == 1) {
    2e0e:	b1 e0       	ldi	r27, 0x01	; 1
    2e10:	fb 12       	cpse	r15, r27
    2e12:	f6 c0       	rjmp	.+492    	; 0x3000 <ProcessInput+0x490>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e14:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    2e18:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e1c:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    2e20:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    2e24:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2e28:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2e2c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2e30:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2e34:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2e38:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e3c:	8b e5       	ldi	r24, 0x5B	; 91
    2e3e:	9a e7       	ldi	r25, 0x7A	; 122
    2e40:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2e44:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    2e50:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    2e5c:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e60:	2d ee       	ldi	r18, 0xED	; 237
    2e62:	39 e7       	ldi	r19, 0x79	; 121
    2e64:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    2e68:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    2e6c:	25 e1       	ldi	r18, 0x15	; 21
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    2e74:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    2e78:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    2e7c:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	ee 0f       	add	r30, r30
    2e84:	ff 1f       	adc	r31, r31
    2e86:	e3 52       	subi	r30, 0x23	; 35
    2e88:	f6 4c       	sbci	r31, 0xC6	; 198
    2e8a:	10 82       	st	Z, r1
    2e8c:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2e8e:	84 e0       	ldi	r24, 0x04	; 4
    2e90:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e92:	99 e5       	ldi	r25, 0x59	; 89
    2e94:	c9 2e       	mov	r12, r25
    2e96:	9a e7       	ldi	r25, 0x7A	; 122
    2e98:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2e9a:	22 e0       	ldi	r18, 0x02	; 2
    2e9c:	a2 2e       	mov	r10, r18
    2e9e:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2ea0:	88 24       	eor	r8, r8
    2ea2:	83 94       	inc	r8
    2ea4:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2ea6:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <currDepth>
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9c 01       	movw	r18, r24
    2eae:	22 0f       	add	r18, r18
    2eb0:	33 1f       	adc	r19, r19
    2eb2:	f9 01       	movw	r30, r18
    2eb4:	e3 52       	subi	r30, 0x23	; 35
    2eb6:	f6 4c       	sbci	r31, 0xC6	; 198
    2eb8:	7f 01       	movw	r14, r30
    2eba:	40 81       	ld	r20, Z
    2ebc:	51 81       	ldd	r21, Z+1	; 0x01
    2ebe:	f9 01       	movw	r30, r18
    2ec0:	e5 52       	subi	r30, 0x25	; 37
    2ec2:	f6 4c       	sbci	r31, 0xC6	; 198
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	91 81       	ldd	r25, Z+1	; 0x01
    2eca:	63 da       	rcall	.-2874   	; 0x2392 <FindChild>
    2ecc:	d7 01       	movw	r26, r14
    2ece:	8d 93       	st	X+, r24
    2ed0:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2ed2:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	ee 0f       	add	r30, r30
    2eda:	ff 1f       	adc	r31, r31
    2edc:	e3 52       	subi	r30, 0x23	; 35
    2ede:	f6 4c       	sbci	r31, 0xC6	; 198
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <ProcessInput+0x37a>
    2ee8:	4a c0       	rjmp	.+148    	; 0x2f7e <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2eea:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    2eee:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    2ef2:	82 17       	cp	r24, r18
    2ef4:	93 07       	cpc	r25, r19
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <ProcessInput+0x38a>
    2ef8:	42 c0       	rjmp	.+132    	; 0x2f7e <ProcessInput+0x40e>
    2efa:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    2efe:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    2f02:	82 17       	cp	r24, r18
    2f04:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2f06:	d9 f1       	breq	.+118    	; 0x2f7e <ProcessInput+0x40e>
    2f08:	6a ed       	ldi	r22, 0xDA	; 218
    2f0a:	78 e3       	ldi	r23, 0x38	; 56
    2f0c:	77 d9       	rcall	.-3346   	; 0x21fc <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2f0e:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3995+0x1a>
    2f12:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f16:	e6 2d       	mov	r30, r6
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	df 01       	movw	r26, r30
    2f1c:	aa 0f       	add	r26, r26
    2f1e:	bb 1f       	adc	r27, r27
    2f20:	a5 5e       	subi	r26, 0xE5	; 229
    2f22:	b6 4c       	sbci	r27, 0xC6	; 198
    2f24:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3995+0xc>
    2f28:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3995+0xd>
    2f2c:	2d 93       	st	X+, r18
    2f2e:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2f30:	df 01       	movw	r26, r30
    2f32:	aa 0f       	add	r26, r26
    2f34:	bb 1f       	adc	r27, r27
    2f36:	a5 5a       	subi	r26, 0xA5	; 165
    2f38:	b6 4c       	sbci	r27, 0xC6	; 198
    2f3a:	8d 93       	st	X+, r24
    2f3c:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2f3e:	ee 0f       	add	r30, r30
    2f40:	ff 1f       	adc	r31, r31
    2f42:	e5 56       	subi	r30, 0x65	; 101
    2f44:	f6 4c       	sbci	r31, 0xC6	; 198
    2f46:	10 82       	st	Z, r1
    2f48:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	86 0d       	add	r24, r6
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	63 94       	inc	r6
    2f52:	63 94       	inc	r6
    2f54:	fc 01       	movw	r30, r24
    2f56:	ee 0f       	add	r30, r30
    2f58:	ff 1f       	adc	r31, r31
    2f5a:	e5 5e       	subi	r30, 0xE5	; 229
    2f5c:	f6 4c       	sbci	r31, 0xC6	; 198
    2f5e:	c0 82       	st	Z, r12
    2f60:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2f62:	fc 01       	movw	r30, r24
    2f64:	ee 0f       	add	r30, r30
    2f66:	ff 1f       	adc	r31, r31
    2f68:	e5 5a       	subi	r30, 0xA5	; 165
    2f6a:	f6 4c       	sbci	r31, 0xC6	; 198
    2f6c:	a0 82       	st	Z, r10
    2f6e:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	fc 01       	movw	r30, r24
    2f76:	e5 56       	subi	r30, 0x65	; 101
    2f78:	f6 4c       	sbci	r31, 0xC6	; 198
    2f7a:	80 82       	st	Z, r8
    2f7c:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2f7e:	20 91 2c 38 	lds	r18, 0x382C	; 0x80382c <currDepth>
    2f82:	82 2f       	mov	r24, r18
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	fc 01       	movw	r30, r24
    2f88:	ee 0f       	add	r30, r30
    2f8a:	ff 1f       	adc	r31, r31
    2f8c:	e3 52       	subi	r30, 0x23	; 35
    2f8e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f90:	40 81       	ld	r20, Z
    2f92:	51 81       	ldd	r21, Z+1	; 0x01
    2f94:	45 2b       	or	r20, r21
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <ProcessInput+0x42a>
    2f98:	86 cf       	rjmp	.-244    	; 0x2ea6 <ProcessInput+0x336>

                //Look back if not on level 0
                if (currDepth) {
    2f9a:	22 23       	and	r18, r18
    2f9c:	69 f1       	breq	.+90     	; 0x2ff8 <ProcessInput+0x488>
                    PopulateObject(route[currDepth-1], &actObj1);
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	e7 52       	subi	r30, 0x27	; 39
    2fa6:	f6 4c       	sbci	r31, 0xC6	; 198
    2fa8:	6a ed       	ldi	r22, 0xDA	; 218
    2faa:	78 e3       	ldi	r23, 0x38	; 56
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	25 d9       	rcall	.-3510   	; 0x21fc <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2fb2:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3995+0x1a>
    2fb6:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3995+0x1b>
    2fba:	77 24       	eor	r7, r7
    2fbc:	73 94       	inc	r7
    2fbe:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fc0:	86 2d       	mov	r24, r6
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	e5 5e       	subi	r30, 0xE5	; 229
    2fcc:	f6 4c       	sbci	r31, 0xC6	; 198
    2fce:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3995+0xc>
    2fd2:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3995+0xd>
    2fd6:	40 83       	st	Z, r20
    2fd8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2fda:	fc 01       	movw	r30, r24
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	e5 5a       	subi	r30, 0xA5	; 165
    2fe2:	f6 4c       	sbci	r31, 0xC6	; 198
    2fe4:	20 83       	st	Z, r18
    2fe6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	fc 01       	movw	r30, r24
    2fee:	e5 56       	subi	r30, 0x65	; 101
    2ff0:	f6 4c       	sbci	r31, 0xC6	; 198
    2ff2:	10 82       	st	Z, r1
    2ff4:	11 82       	std	Z+1, r1	; 0x01
    2ff6:	b7 c5       	rjmp	.+2926   	; 0x3b66 <ProcessInput+0xff6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2ff8:	77 24       	eor	r7, r7
    2ffa:	7a 94       	dec	r7
    2ffc:	76 0c       	add	r7, r6
    2ffe:	b3 c5       	rjmp	.+2918   	; 0x3b66 <ProcessInput+0xff6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    3000:	ee 2e       	mov	r14, r30
    3002:	f1 2c       	mov	r15, r1
    3004:	f7 01       	movw	r30, r14
    3006:	ee 0f       	add	r30, r30
    3008:	ff 1f       	adc	r31, r31
    300a:	e5 52       	subi	r30, 0x25	; 37
    300c:	f6 4c       	sbci	r31, 0xC6	; 198
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	d8 01       	movw	r26, r16
    3014:	11 96       	adiw	r26, 0x01	; 1
    3016:	6c 91       	ld	r22, X
    3018:	80 81       	ld	r24, Z
    301a:	91 81       	ldd	r25, Z+1	; 0x01
    301c:	ba d9       	rcall	.-3212   	; 0x2392 <FindChild>
    301e:	f7 01       	movw	r30, r14
    3020:	ee 0f       	add	r30, r30
    3022:	ff 1f       	adc	r31, r31
    3024:	e3 52       	subi	r30, 0x23	; 35
    3026:	f6 4c       	sbci	r31, 0xC6	; 198
    3028:	80 83       	st	Z, r24
    302a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    302c:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <currDepth>
    3030:	29 2f       	mov	r18, r25
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	f9 01       	movw	r30, r18
    3036:	ee 0f       	add	r30, r30
    3038:	ff 1f       	adc	r31, r31
    303a:	e3 52       	subi	r30, 0x23	; 35
    303c:	f6 4c       	sbci	r31, 0xC6	; 198
    303e:	40 81       	ld	r20, Z
    3040:	51 81       	ldd	r21, Z+1	; 0x01
    3042:	41 15       	cp	r20, r1
    3044:	51 05       	cpc	r21, r1
    3046:	21 f0       	breq	.+8      	; 0x3050 <ProcessInput+0x4e0>
                    PopulateObject(route[currDepth+1], &actObj1);
    3048:	6a ed       	ldi	r22, 0xDA	; 218
    304a:	78 e3       	ldi	r23, 0x38	; 56
    304c:	ca 01       	movw	r24, r20
    304e:	1e c0       	rjmp	.+60     	; 0x308c <ProcessInput+0x51c>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    3050:	99 23       	and	r25, r25
    3052:	09 f4       	brne	.+2      	; 0x3056 <ProcessInput+0x4e6>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    3054:	ba c5       	rjmp	.+2932   	; 0x3bca <ProcessInput+0x105a>
    3056:	22 0f       	add	r18, r18
    3058:	33 1f       	adc	r19, r19
    305a:	f9 01       	movw	r30, r18
    305c:	e7 52       	subi	r30, 0x27	; 39
    305e:	f6 4c       	sbci	r31, 0xC6	; 198
    3060:	d8 01       	movw	r26, r16
    3062:	11 96       	adiw	r26, 0x01	; 1
    3064:	6c 91       	ld	r22, X
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	3f d9       	rcall	.-3458   	; 0x22ea <CheckLetter>
    306c:	81 11       	cpse	r24, r1
    306e:	03 c0       	rjmp	.+6      	; 0x3076 <ProcessInput+0x506>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    3070:	77 24       	eor	r7, r7
    3072:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    3074:	78 c5       	rjmp	.+2800   	; 0x3b66 <ProcessInput+0xff6>
    3076:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	ee 0f       	add	r30, r30
    307e:	ff 1f       	adc	r31, r31
    3080:	e7 52       	subi	r30, 0x27	; 39
    3082:	f6 4c       	sbci	r31, 0xC6	; 198
    3084:	6a ed       	ldi	r22, 0xDA	; 218
    3086:	78 e3       	ldi	r23, 0x38	; 56
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	b7 d8       	rcall	.-3730   	; 0x21fc <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    308e:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3995+0x1c>
    3092:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3995+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3096:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3995+0xe>
    309a:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3995+0xf>
    309e:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    30a2:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    30a6:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    30aa:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    30ae:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    30b2:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    30b6:	2a ce       	rjmp	.-940    	; 0x2d0c <ProcessInput+0x19c>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    30b8:	80 37       	cpi	r24, 0x70	; 112
    30ba:	09 f0       	breq	.+2      	; 0x30be <ProcessInput+0x54e>
    30bc:	96 c0       	rjmp	.+300    	; 0x31ea <ProcessInput+0x67a>
            if (inventory[0]&&inventory[1]) {
    30be:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    30c2:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    30c6:	89 2b       	or	r24, r25
    30c8:	79 f0       	breq	.+30     	; 0x30e8 <ProcessInput+0x578>
    30ca:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    30ce:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    30d2:	89 2b       	or	r24, r25
    30d4:	49 f0       	breq	.+18     	; 0x30e8 <ProcessInput+0x578>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30d6:	84 e4       	ldi	r24, 0x44	; 68
    30d8:	98 e7       	ldi	r25, 0x78	; 120
    30da:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    30de:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    30e2:	89 e5       	ldi	r24, 0x59	; 89
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	08 ce       	rjmp	.-1008   	; 0x2cf8 <ProcessInput+0x188>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    30e8:	b2 e0       	ldi	r27, 0x02	; 2
    30ea:	fb 12       	cpse	r15, r27
    30ec:	70 cd       	rjmp	.-1312   	; 0x2bce <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    30ee:	e0 90 2c 38 	lds	r14, 0x382C	; 0x80382c <currDepth>
    30f2:	f1 2c       	mov	r15, r1
    30f4:	f7 01       	movw	r30, r14
    30f6:	ee 0f       	add	r30, r30
    30f8:	ff 1f       	adc	r31, r31
    30fa:	e5 52       	subi	r30, 0x25	; 37
    30fc:	f6 4c       	sbci	r31, 0xC6	; 198
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	50 e0       	ldi	r21, 0x00	; 0
    3102:	d8 01       	movw	r26, r16
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	6c 91       	ld	r22, X
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	42 d9       	rcall	.-3452   	; 0x2392 <FindChild>
    310e:	f7 01       	movw	r30, r14
    3110:	ee 0f       	add	r30, r30
    3112:	ff 1f       	adc	r31, r31
    3114:	e3 52       	subi	r30, 0x23	; 35
    3116:	f6 4c       	sbci	r31, 0xC6	; 198
    3118:	80 83       	st	Z, r24
    311a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    311c:	20 91 2c 38 	lds	r18, 0x382C	; 0x80382c <currDepth>
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	2f 5f       	subi	r18, 0xFF	; 255
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	22 0f       	add	r18, r18
    3128:	33 1f       	adc	r19, r19
    312a:	f9 01       	movw	r30, r18
    312c:	e5 52       	subi	r30, 0x25	; 37
    312e:	f6 4c       	sbci	r31, 0xC6	; 198
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	00 97       	sbiw	r24, 0x00	; 0
    3136:	09 f4       	brne	.+2      	; 0x313a <ProcessInput+0x5ca>
    3138:	ca c3       	rjmp	.+1940   	; 0x38ce <ProcessInput+0xd5e>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    313a:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <inventory>
    313e:	50 91 3f 38 	lds	r21, 0x383F	; 0x80383f <inventory+0x1>
    3142:	84 17       	cp	r24, r20
    3144:	95 07       	cpc	r25, r21
    3146:	39 f0       	breq	.+14     	; 0x3156 <ProcessInput+0x5e6>
    3148:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory+0x2>
    314c:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x3>
    3150:	84 17       	cp	r24, r20
    3152:	95 07       	cpc	r25, r21
    3154:	c1 f4       	brne	.+48     	; 0x3186 <ProcessInput+0x616>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3156:	8f e1       	ldi	r24, 0x1F	; 31
    3158:	98 e7       	ldi	r25, 0x78	; 120
    315a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    315e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3162:	85 e2       	ldi	r24, 0x25	; 37
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    316a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3176:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    317a:	f9 01       	movw	r30, r18
    317c:	e5 52       	subi	r30, 0x25	; 37
    317e:	f6 4c       	sbci	r31, 0xC6	; 198
    3180:	10 82       	st	Z, r1
    3182:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3184:	c3 cd       	rjmp	.-1146   	; 0x2d0c <ProcessInput+0x19c>
    3186:	6a ed       	ldi	r22, 0xDA	; 218
    3188:	78 e3       	ldi	r23, 0x38	; 56
    318a:	38 d8       	rcall	.-3984   	; 0x21fc <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    318c:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3995+0x7>
    3190:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <CheckState>
    3194:	88 23       	and	r24, r24
    3196:	09 f4       	brne	.+2      	; 0x319a <ProcessInput+0x62a>
    3198:	75 c3       	rjmp	.+1770   	; 0x3884 <ProcessInput+0xd14>
                            if (actObj1.byteField[ITEM_NR]) {
    319a:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3995+0xb>
    319e:	88 23       	and	r24, r24
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <ProcessInput+0x634>
    31a2:	15 cd       	rjmp	.-1494   	; 0x2bce <ProcessInput+0x5e>
                                if (inventory[0]) {
    31a4:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    31a8:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    31ac:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
                                    inventory[1] = route[currDepth+1];
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	ee 0f       	add	r30, r30
    31b4:	ff 1f       	adc	r31, r31
    31b6:	e3 52       	subi	r30, 0x23	; 35
    31b8:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    31ba:	89 2b       	or	r24, r25
    31bc:	39 f0       	breq	.+14     	; 0x31cc <ProcessInput+0x65c>
                                    inventory[1] = route[currDepth+1];
    31be:	80 81       	ld	r24, Z
    31c0:	91 81       	ldd	r25, Z+1	; 0x01
    31c2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    31c6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <ProcessInput+0x668>
                                } else {
                                    inventory[0] = route[currDepth+1];
    31cc:	80 81       	ld	r24, Z
    31ce:	91 81       	ldd	r25, Z+1	; 0x01
    31d0:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    31d4:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31d8:	89 e0       	ldi	r24, 0x09	; 9
    31da:	98 e7       	ldi	r25, 0x78	; 120
    31dc:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    31e0:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    31e4:	86 e1       	ldi	r24, 0x16	; 22
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	5e c2       	rjmp	.+1212   	; 0x36a6 <ProcessInput+0xb36>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    31ea:	84 36       	cpi	r24, 0x64	; 100
    31ec:	d9 f4       	brne	.+54     	; 0x3224 <ProcessInput+0x6b4>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    31ee:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    31f2:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	09 f0       	breq	.+2      	; 0x31fc <ProcessInput+0x68c>
    31fa:	ea c4       	rjmp	.+2516   	; 0x3bd0 <ProcessInput+0x1060>
    31fc:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3200:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3204:	89 2b       	or	r24, r25
    3206:	49 f4       	brne	.+18     	; 0x321a <ProcessInput+0x6aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3208:	83 ee       	ldi	r24, 0xE3	; 227
    320a:	97 e7       	ldi	r25, 0x77	; 119
    320c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3210:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3214:	86 e2       	ldi	r24, 0x26	; 38
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	6f cd       	rjmp	.-1314   	; 0x2cf8 <ProcessInput+0x188>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    321a:	b2 e0       	ldi	r27, 0x02	; 2
    321c:	fb 16       	cp	r15, r27
    321e:	09 f4       	brne	.+2      	; 0x3222 <ProcessInput+0x6b2>
    3220:	3e c5       	rjmp	.+2684   	; 0x3c9e <ProcessInput+0x112e>
    3222:	d5 cc       	rjmp	.-1622   	; 0x2bce <ProcessInput+0x5e>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    3224:	89 36       	cpi	r24, 0x69	; 105
    3226:	09 f0       	breq	.+2      	; 0x322a <ProcessInput+0x6ba>
    3228:	7b c0       	rjmp	.+246    	; 0x3320 <ProcessInput+0x7b0>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    322a:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    322e:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3232:	89 2b       	or	r24, r25
    3234:	31 f4       	brne	.+12     	; 0x3242 <ProcessInput+0x6d2>
    3236:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    323a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    323e:	89 2b       	or	r24, r25
    3240:	19 f3       	breq	.-58     	; 0x3208 <ProcessInput+0x698>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3242:	89 e0       	ldi	r24, 0x09	; 9
    3244:	98 e7       	ldi	r25, 0x78	; 120
    3246:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    324a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    324e:	86 e1       	ldi	r24, 0x16	; 22
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3256:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3262:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3266:	2e e3       	ldi	r18, 0x3E	; 62
    3268:	e2 2e       	mov	r14, r18
    326a:	28 e3       	ldi	r18, 0x38	; 56
    326c:	f2 2e       	mov	r15, r18
    326e:	32 e4       	ldi	r19, 0x42	; 66
    3270:	63 2e       	mov	r6, r19
    3272:	38 e3       	ldi	r19, 0x38	; 56
    3274:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    3276:	42 e0       	ldi	r20, 0x02	; 2
    3278:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    327a:	59 e5       	ldi	r21, 0x59	; 89
    327c:	c5 2e       	mov	r12, r21
    327e:	5a e7       	ldi	r21, 0x7A	; 122
    3280:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    3282:	62 e0       	ldi	r22, 0x02	; 2
    3284:	a6 2e       	mov	r10, r22
    3286:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3288:	88 24       	eor	r8, r8
    328a:	83 94       	inc	r8
    328c:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    328e:	d7 01       	movw	r26, r14
    3290:	8d 91       	ld	r24, X+
    3292:	9d 91       	ld	r25, X+
    3294:	7d 01       	movw	r14, r26
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	d9 f1       	breq	.+118    	; 0x3310 <ProcessInput+0x7a0>
                        PopulateObject(inventory[x], &actObj1);
    329a:	6a ed       	ldi	r22, 0xDA	; 218
    329c:	78 e3       	ldi	r23, 0x38	; 56
    329e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    32a2:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3995+0x1a>
    32a6:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32aa:	e5 2d       	mov	r30, r5
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	df 01       	movw	r26, r30
    32b0:	aa 0f       	add	r26, r26
    32b2:	bb 1f       	adc	r27, r27
    32b4:	a5 5e       	subi	r26, 0xE5	; 229
    32b6:	b6 4c       	sbci	r27, 0xC6	; 198
    32b8:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3995+0xc>
    32bc:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3995+0xd>
    32c0:	2d 93       	st	X+, r18
    32c2:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    32c4:	df 01       	movw	r26, r30
    32c6:	aa 0f       	add	r26, r26
    32c8:	bb 1f       	adc	r27, r27
    32ca:	a5 5a       	subi	r26, 0xA5	; 165
    32cc:	b6 4c       	sbci	r27, 0xC6	; 198
    32ce:	8d 93       	st	X+, r24
    32d0:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    32d2:	ee 0f       	add	r30, r30
    32d4:	ff 1f       	adc	r31, r31
    32d6:	e5 56       	subi	r30, 0x65	; 101
    32d8:	f6 4c       	sbci	r31, 0xC6	; 198
    32da:	10 82       	st	Z, r1
    32dc:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32de:	e1 e0       	ldi	r30, 0x01	; 1
    32e0:	e5 0d       	add	r30, r5
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	53 94       	inc	r5
    32e6:	53 94       	inc	r5
    32e8:	df 01       	movw	r26, r30
    32ea:	aa 0f       	add	r26, r26
    32ec:	bb 1f       	adc	r27, r27
    32ee:	a5 5e       	subi	r26, 0xE5	; 229
    32f0:	b6 4c       	sbci	r27, 0xC6	; 198
    32f2:	cd 92       	st	X+, r12
    32f4:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    32f6:	df 01       	movw	r26, r30
    32f8:	aa 0f       	add	r26, r26
    32fa:	bb 1f       	adc	r27, r27
    32fc:	a5 5a       	subi	r26, 0xA5	; 165
    32fe:	b6 4c       	sbci	r27, 0xC6	; 198
    3300:	ad 92       	st	X+, r10
    3302:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3304:	ee 0f       	add	r30, r30
    3306:	ff 1f       	adc	r31, r31
    3308:	e5 56       	subi	r30, 0x65	; 101
    330a:	f6 4c       	sbci	r31, 0xC6	; 198
    330c:	80 82       	st	Z, r8
    330e:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    3310:	6e 14       	cp	r6, r14
    3312:	7f 04       	cpc	r7, r15
    3314:	09 f0       	breq	.+2      	; 0x3318 <ProcessInput+0x7a8>
    3316:	bb cf       	rjmp	.-138    	; 0x328e <ProcessInput+0x71e>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    3318:	77 24       	eor	r7, r7
    331a:	7a 94       	dec	r7
    331c:	75 0c       	add	r7, r5
    331e:	23 c4       	rjmp	.+2118   	; 0x3b66 <ProcessInput+0xff6>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3320:	9c e8       	ldi	r25, 0x8C	; 140
    3322:	98 0f       	add	r25, r24
    3324:	92 30       	cpi	r25, 0x02	; 2
    3326:	28 f0       	brcs	.+10     	; 0x3332 <ProcessInput+0x7c2>
    3328:	87 36       	cpi	r24, 0x67	; 103
    332a:	19 f0       	breq	.+6      	; 0x3332 <ProcessInput+0x7c2>
    332c:	82 37       	cpi	r24, 0x72	; 114
    332e:	09 f0       	breq	.+2      	; 0x3332 <ProcessInput+0x7c2>
    3330:	d7 c2       	rjmp	.+1454   	; 0x38e0 <ProcessInput+0xd70>
            if ((inputLen<2)||(inputLen>3)) {
    3332:	8e ef       	ldi	r24, 0xFE	; 254
    3334:	8f 0d       	add	r24, r15
    3336:	82 30       	cpi	r24, 0x02	; 2
    3338:	08 f0       	brcs	.+2      	; 0x333c <ProcessInput+0x7cc>
    333a:	49 cc       	rjmp	.-1902   	; 0x2bce <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    333c:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    3340:	ce 2e       	mov	r12, r30
    3342:	d1 2c       	mov	r13, r1
    3344:	d8 01       	movw	r26, r16
    3346:	af 0d       	add	r26, r15
    3348:	b1 1d       	adc	r27, r1
    334a:	11 97       	sbiw	r26, 0x01	; 1
    334c:	f6 01       	movw	r30, r12
    334e:	ee 0f       	add	r30, r30
    3350:	ff 1f       	adc	r31, r31
    3352:	e5 52       	subi	r30, 0x25	; 37
    3354:	f6 4c       	sbci	r31, 0xC6	; 198
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	6c 91       	ld	r22, X
    335c:	80 81       	ld	r24, Z
    335e:	91 81       	ldd	r25, Z+1	; 0x01
    3360:	18 d8       	rcall	.-4048   	; 0x2392 <FindChild>
    3362:	f6 01       	movw	r30, r12
    3364:	ee 0f       	add	r30, r30
    3366:	ff 1f       	adc	r31, r31
    3368:	e3 52       	subi	r30, 0x23	; 35
    336a:	f6 4c       	sbci	r31, 0xC6	; 198
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3370:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	ee 0f       	add	r30, r30
    3378:	ff 1f       	adc	r31, r31
    337a:	e3 52       	subi	r30, 0x23	; 35
    337c:	f6 4c       	sbci	r31, 0xC6	; 198
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	09 f4       	brne	.+2      	; 0x3388 <ProcessInput+0x818>
    3386:	9a c2       	rjmp	.+1332   	; 0x38bc <ProcessInput+0xd4c>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    3388:	b3 e0       	ldi	r27, 0x03	; 3
    338a:	fb 12       	cpse	r15, r27
    338c:	78 c1       	rjmp	.+752    	; 0x367e <ProcessInput+0xb0e>
    338e:	f8 01       	movw	r30, r16
    3390:	20 81       	ld	r18, Z
    3392:	25 37       	cpi	r18, 0x75	; 117
    3394:	19 f0       	breq	.+6      	; 0x339c <ProcessInput+0x82c>
    3396:	27 36       	cpi	r18, 0x67	; 103
    3398:	09 f0       	breq	.+2      	; 0x339c <ProcessInput+0x82c>
    339a:	71 c1       	rjmp	.+738    	; 0x367e <ProcessInput+0xb0e>
    339c:	61 2c       	mov	r6, r1
    339e:	77 24       	eor	r7, r7
    33a0:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33a2:	53 e6       	ldi	r21, 0x63	; 99
    33a4:	c5 2e       	mov	r12, r21
    33a6:	59 e7       	ldi	r21, 0x79	; 121
    33a8:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    33aa:	61 e2       	ldi	r22, 0x21	; 33
    33ac:	a6 2e       	mov	r10, r22
    33ae:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    33b0:	88 24       	eor	r8, r8
    33b2:	83 94       	inc	r8
    33b4:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    33b6:	e6 2c       	mov	r14, r6
    33b8:	f1 2c       	mov	r15, r1
    33ba:	c7 01       	movw	r24, r14
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	9c 01       	movw	r18, r24
    33c2:	22 5c       	subi	r18, 0xC2	; 194
    33c4:	37 4c       	sbci	r19, 0xC7	; 199
    33c6:	79 01       	movw	r14, r18
    33c8:	d9 01       	movw	r26, r18
    33ca:	8d 91       	ld	r24, X+
    33cc:	9c 91       	ld	r25, X
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	81 f0       	breq	.+32     	; 0x33f2 <ProcessInput+0x882>
                                if (CheckLetter(inventory[x], data[1])) {
    33d2:	f8 01       	movw	r30, r16
    33d4:	61 81       	ldd	r22, Z+1	; 0x01
    33d6:	0e 94 75 11 	call	0x22ea	; 0x22ea <CheckLetter>
    33da:	88 23       	and	r24, r24
    33dc:	51 f0       	breq	.+20     	; 0x33f2 <ProcessInput+0x882>
                                    PopulateObject(inventory[x], &actObj2);
    33de:	6f ea       	ldi	r22, 0xAF	; 175
    33e0:	78 e3       	ldi	r23, 0x38	; 56
    33e2:	d7 01       	movw	r26, r14
    33e4:	8d 91       	ld	r24, X+
    33e6:	9c 91       	ld	r25, X
    33e8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>
                                    x = 2;
    33ec:	32 e0       	ldi	r19, 0x02	; 2
    33ee:	63 2e       	mov	r6, r19
    33f0:	1e c0       	rjmp	.+60     	; 0x342e <ProcessInput+0x8be>
                                }
                            }
                            if (x == 1) { 
    33f2:	b1 e0       	ldi	r27, 0x01	; 1
    33f4:	6b 12       	cpse	r6, r27
    33f6:	1a c0       	rjmp	.+52     	; 0x342c <ProcessInput+0x8bc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33f8:	e7 2d       	mov	r30, r7
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	df 01       	movw	r26, r30
    33fe:	aa 0f       	add	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	a5 5e       	subi	r26, 0xE5	; 229
    3404:	b6 4c       	sbci	r27, 0xC6	; 198
    3406:	cd 92       	st	X+, r12
    3408:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    340a:	df 01       	movw	r26, r30
    340c:	aa 0f       	add	r26, r26
    340e:	bb 1f       	adc	r27, r27
    3410:	a5 5a       	subi	r26, 0xA5	; 165
    3412:	b6 4c       	sbci	r27, 0xC6	; 198
    3414:	ad 92       	st	X+, r10
    3416:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3418:	ee 0f       	add	r30, r30
    341a:	ff 1f       	adc	r31, r31
    341c:	e5 56       	subi	r30, 0x65	; 101
    341e:	f6 4c       	sbci	r31, 0xC6	; 198
    3420:	80 82       	st	Z, r8
    3422:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3424:	f8 01       	movw	r30, r16
    3426:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3428:	73 94       	inc	r7
    342a:	01 c0       	rjmp	.+2      	; 0x342e <ProcessInput+0x8be>
    342c:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    342e:	63 94       	inc	r6
    3430:	f1 e0       	ldi	r31, 0x01	; 1
    3432:	6f 16       	cp	r6, r31
    3434:	09 f4       	brne	.+2      	; 0x3438 <ProcessInput+0x8c8>
    3436:	bf cf       	rjmp	.-130    	; 0x33b6 <ProcessInput+0x846>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3438:	d8 01       	movw	r26, r16
    343a:	8c 91       	ld	r24, X
    343c:	88 23       	and	r24, r24
    343e:	09 f4       	brne	.+2      	; 0x3442 <ProcessInput+0x8d2>
    3440:	92 c3       	rjmp	.+1828   	; 0x3b66 <ProcessInput+0xff6>
                            PopulateObject(route[currDepth+1], &actObj1);
    3442:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	ee 0f       	add	r30, r30
    344a:	ff 1f       	adc	r31, r31
    344c:	e3 52       	subi	r30, 0x23	; 35
    344e:	f6 4c       	sbci	r31, 0xC6	; 198
    3450:	6a ed       	ldi	r22, 0xDA	; 218
    3452:	78 e3       	ldi	r23, 0x38	; 56
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    345c:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3995+0x1e>
    3460:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3995+0x1f>
    3464:	b1 e0       	ldi	r27, 0x01	; 1
    3466:	eb 16       	cp	r14, r27
    3468:	f1 04       	cpc	r15, r1
    346a:	09 f0       	breq	.+2      	; 0x346e <ProcessInput+0x8fe>
    346c:	9a c0       	rjmp	.+308    	; 0x35a2 <ProcessInput+0xa32>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    346e:	98 01       	movw	r18, r16
    3470:	2e 5f       	subi	r18, 0xFE	; 254
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	61 e0       	ldi	r22, 0x01	; 1
    3478:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3995+0x10>
    347c:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3995+0x11>
    3480:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ExtEERead>
                                if (data[2] == '1') {
    3484:	f8 01       	movw	r30, r16
    3486:	42 81       	ldd	r20, Z+2	; 0x02
    3488:	21 e0       	ldi	r18, 0x01	; 1
    348a:	27 0d       	add	r18, r7
    348c:	87 2d       	mov	r24, r7
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	41 33       	cpi	r20, 0x31	; 49
    3492:	09 f0       	breq	.+2      	; 0x3496 <ProcessInput+0x926>
    3494:	6b c0       	rjmp	.+214    	; 0x356c <ProcessInput+0x9fc>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3496:	30 91 ba 38 	lds	r19, 0x38BA	; 0x8038ba <actObj2.3996+0xb>
                                    if ((item < 31)||(item > 34)) {
    349a:	51 ee       	ldi	r21, 0xE1	; 225
    349c:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    349e:	fc 01       	movw	r30, r24
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	e5 5e       	subi	r30, 0xE5	; 229
    34a6:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    34a8:	54 30       	cpi	r21, 0x04	; 4
    34aa:	60 f0       	brcs	.+24     	; 0x34c4 <ProcessInput+0x954>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34ac:	43 e0       	ldi	r20, 0x03	; 3
    34ae:	59 e7       	ldi	r21, 0x79	; 121
    34b0:	40 83       	st	Z, r20
    34b2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    34b4:	fc 01       	movw	r30, r24
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	e5 5a       	subi	r30, 0xA5	; 165
    34bc:	f6 4c       	sbci	r31, 0xC6	; 198
    34be:	4a e1       	ldi	r20, 0x1A	; 26
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	64 c0       	rjmp	.+200    	; 0x358c <ProcessInput+0xa1c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c4:	6d e8       	ldi	r22, 0x8D	; 141
    34c6:	75 e7       	ldi	r23, 0x75	; 117
    34c8:	60 83       	st	Z, r22
    34ca:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    34cc:	fc 01       	movw	r30, r24
    34ce:	ee 0f       	add	r30, r30
    34d0:	ff 1f       	adc	r31, r31
    34d2:	e5 5a       	subi	r30, 0xA5	; 165
    34d4:	f6 4c       	sbci	r31, 0xC6	; 198
    34d6:	62 eb       	ldi	r22, 0xB2	; 178
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	60 83       	st	Z, r22
    34dc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    34de:	88 0f       	add	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	fc 01       	movw	r30, r24
    34e4:	e5 56       	subi	r30, 0x65	; 101
    34e6:	f6 4c       	sbci	r31, 0xC6	; 198
    34e8:	e0 82       	st	Z, r14
    34ea:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34ec:	82 2f       	mov	r24, r18
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	fc 01       	movw	r30, r24
    34f2:	ee 0f       	add	r30, r30
    34f4:	ff 1f       	adc	r31, r31
    34f6:	e5 5e       	subi	r30, 0xE5	; 229
    34f8:	f6 4c       	sbci	r31, 0xC6	; 198
    34fa:	6b e5       	ldi	r22, 0x5B	; 91
    34fc:	7a e7       	ldi	r23, 0x7A	; 122
    34fe:	60 83       	st	Z, r22
    3500:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3502:	fc 01       	movw	r30, r24
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	e5 5a       	subi	r30, 0xA5	; 165
    350a:	f6 4c       	sbci	r31, 0xC6	; 198
    350c:	62 e0       	ldi	r22, 0x02	; 2
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	60 83       	st	Z, r22
    3512:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	fc 01       	movw	r30, r24
    351a:	e5 56       	subi	r30, 0x65	; 101
    351c:	f6 4c       	sbci	r31, 0xC6	; 198
    351e:	e0 82       	st	Z, r14
    3520:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	87 0d       	add	r24, r7
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	f3 e0       	ldi	r31, 0x03	; 3
    352a:	7f 0e       	add	r7, r31
    352c:	fc 01       	movw	r30, r24
    352e:	ee 0f       	add	r30, r30
    3530:	ff 1f       	adc	r31, r31
    3532:	e5 5e       	subi	r30, 0xE5	; 229
    3534:	f6 4c       	sbci	r31, 0xC6	; 198
    3536:	6f ea       	ldi	r22, 0xAF	; 175
    3538:	78 e7       	ldi	r23, 0x78	; 120
    353a:	60 83       	st	Z, r22
    353c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    353e:	fc 01       	movw	r30, r24
    3540:	ee 0f       	add	r30, r30
    3542:	ff 1f       	adc	r31, r31
    3544:	e5 5a       	subi	r30, 0xA5	; 165
    3546:	f6 4c       	sbci	r31, 0xC6	; 198
    3548:	62 e1       	ldi	r22, 0x12	; 18
    354a:	70 e0       	ldi	r23, 0x00	; 0
    354c:	60 83       	st	Z, r22
    354e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	fc 01       	movw	r30, r24
    3556:	e5 56       	subi	r30, 0x65	; 101
    3558:	f6 4c       	sbci	r31, 0xC6	; 198
    355a:	e0 82       	st	Z, r14
    355c:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    355e:	40 93 0a 39 	sts	0x390A, r20	; 0x80390a <specialInput>
                                        specialInput[1] = item;
    3562:	30 93 0b 39 	sts	0x390B, r19	; 0x80390b <specialInput+0x1>
                                        specialInput[2] = 0;
    3566:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput+0x2>
    356a:	fd c2       	rjmp	.+1530   	; 0x3b66 <ProcessInput+0xff6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    356c:	fc 01       	movw	r30, r24
    356e:	ee 0f       	add	r30, r30
    3570:	ff 1f       	adc	r31, r31
    3572:	e5 5e       	subi	r30, 0xE5	; 229
    3574:	f6 4c       	sbci	r31, 0xC6	; 198
    3576:	4f e3       	ldi	r20, 0x3F	; 63
    3578:	56 e7       	ldi	r21, 0x76	; 118
    357a:	40 83       	st	Z, r20
    357c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    357e:	fc 01       	movw	r30, r24
    3580:	ee 0f       	add	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	e5 5a       	subi	r30, 0xA5	; 165
    3586:	f6 4c       	sbci	r31, 0xC6	; 198
    3588:	42 e4       	ldi	r20, 0x42	; 66
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	40 83       	st	Z, r20
    358e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	fc 01       	movw	r30, r24
    3596:	e5 56       	subi	r30, 0x65	; 101
    3598:	f6 4c       	sbci	r31, 0xC6	; 198
    359a:	e0 82       	st	Z, r14
    359c:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    359e:	72 2e       	mov	r7, r18
    35a0:	e2 c2       	rjmp	.+1476   	; 0x3b66 <ProcessInput+0xff6>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    35a2:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3995+0x9>
    35a6:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj2.3996+0xb>
    35aa:	98 13       	cpse	r25, r24
    35ac:	2f c0       	rjmp	.+94     	; 0x360c <ProcessInput+0xa9c>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    35ae:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3995+0x26>
    35b2:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3995+0x27>
    35b6:	ff 24       	eor	r15, r15
    35b8:	f3 94       	inc	r15
    35ba:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35bc:	87 2d       	mov	r24, r7
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	fc 01       	movw	r30, r24
    35c2:	ee 0f       	add	r30, r30
    35c4:	ff 1f       	adc	r31, r31
    35c6:	e5 5e       	subi	r30, 0xE5	; 229
    35c8:	f6 4c       	sbci	r31, 0xC6	; 198
    35ca:	40 91 f2 38 	lds	r20, 0x38F2	; 0x8038f2 <actObj1.3995+0x18>
    35ce:	50 91 f3 38 	lds	r21, 0x38F3	; 0x8038f3 <actObj1.3995+0x19>
    35d2:	40 83       	st	Z, r20
    35d4:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35d6:	fc 01       	movw	r30, r24
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	e5 5a       	subi	r30, 0xA5	; 165
    35de:	f6 4c       	sbci	r31, 0xC6	; 198
    35e0:	20 83       	st	Z, r18
    35e2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35e4:	88 0f       	add	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	fc 01       	movw	r30, r24
    35ea:	e5 56       	subi	r30, 0x65	; 101
    35ec:	f6 4c       	sbci	r31, 0xC6	; 198
    35ee:	10 82       	st	Z, r1
    35f0:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    35f2:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3995+0x2a>
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    35fc:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3600:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0xa>
    3604:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3608:	7f 2c       	mov	r7, r15
    360a:	ad c2       	rjmp	.+1370   	; 0x3b66 <ProcessInput+0xff6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    360c:	d8 01       	movw	r26, r16
    360e:	8c 91       	ld	r24, X
    3610:	85 37       	cpi	r24, 0x75	; 117
    3612:	99 f4       	brne	.+38     	; 0x363a <ProcessInput+0xaca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3614:	87 2d       	mov	r24, r7
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	fc 01       	movw	r30, r24
    361a:	ee 0f       	add	r30, r30
    361c:	ff 1f       	adc	r31, r31
    361e:	e5 5e       	subi	r30, 0xE5	; 229
    3620:	f6 4c       	sbci	r31, 0xC6	; 198
    3622:	23 e0       	ldi	r18, 0x03	; 3
    3624:	39 e7       	ldi	r19, 0x79	; 121
    3626:	20 83       	st	Z, r18
    3628:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    362a:	fc 01       	movw	r30, r24
    362c:	ee 0f       	add	r30, r30
    362e:	ff 1f       	adc	r31, r31
    3630:	e5 5a       	subi	r30, 0xA5	; 165
    3632:	f6 4c       	sbci	r31, 0xC6	; 198
    3634:	2a e1       	ldi	r18, 0x1A	; 26
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	15 c0       	rjmp	.+42     	; 0x3664 <ProcessInput+0xaf4>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    363a:	87 36       	cpi	r24, 0x67	; 103
    363c:	09 f0       	breq	.+2      	; 0x3640 <ProcessInput+0xad0>
    363e:	93 c2       	rjmp	.+1318   	; 0x3b66 <ProcessInput+0xff6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3640:	87 2d       	mov	r24, r7
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	fc 01       	movw	r30, r24
    3646:	ee 0f       	add	r30, r30
    3648:	ff 1f       	adc	r31, r31
    364a:	e5 5e       	subi	r30, 0xE5	; 229
    364c:	f6 4c       	sbci	r31, 0xC6	; 198
    364e:	2c ed       	ldi	r18, 0xDC	; 220
    3650:	36 e7       	ldi	r19, 0x76	; 118
    3652:	20 83       	st	Z, r18
    3654:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3656:	fc 01       	movw	r30, r24
    3658:	ee 0f       	add	r30, r30
    365a:	ff 1f       	adc	r31, r31
    365c:	e5 5a       	subi	r30, 0xA5	; 165
    365e:	f6 4c       	sbci	r31, 0xC6	; 198
    3660:	28 e2       	ldi	r18, 0x28	; 40
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	20 83       	st	Z, r18
    3666:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3668:	88 0f       	add	r24, r24
    366a:	99 1f       	adc	r25, r25
    366c:	fc 01       	movw	r30, r24
    366e:	e5 56       	subi	r30, 0x65	; 101
    3670:	f6 4c       	sbci	r31, 0xC6	; 198
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	80 83       	st	Z, r24
    3678:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    367a:	73 94       	inc	r7
    367c:	74 c2       	rjmp	.+1256   	; 0x3b66 <ProcessInput+0xff6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    367e:	6a ed       	ldi	r22, 0xDA	; 218
    3680:	78 e3       	ldi	r23, 0x38	; 56
    3682:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3686:	f8 01       	movw	r30, r16
    3688:	80 81       	ld	r24, Z
    368a:	84 37       	cpi	r24, 0x74	; 116
    368c:	69 f5       	brne	.+90     	; 0x36e8 <ProcessInput+0xb78>
    368e:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3995+0x8>
    3692:	83 fd       	sbrc	r24, 3
    3694:	4a c0       	rjmp	.+148    	; 0x372a <ProcessInput+0xbba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3696:	8d e1       	ldi	r24, 0x1D	; 29
    3698:	99 e7       	ldi	r25, 0x79	; 121
    369a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    369e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    36a2:	8e e1       	ldi	r24, 0x1E	; 30
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    36aa:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    36b6:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36ba:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3995+0x1a>
    36be:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36c2:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3995+0xc>
    36c6:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3995+0xd>
    36ca:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    36ce:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    36d2:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    36d6:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    36da:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    36de:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36e2:	e3 e0       	ldi	r30, 0x03	; 3
    36e4:	7e 2e       	mov	r7, r30
    36e6:	3f c2       	rjmp	.+1150   	; 0x3b66 <ProcessInput+0xff6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    36e8:	85 37       	cpi	r24, 0x75	; 117
    36ea:	69 f4       	brne	.+26     	; 0x3706 <ProcessInput+0xb96>
    36ec:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3995+0x8>
    36f0:	84 fd       	sbrc	r24, 4
    36f2:	1b c0       	rjmp	.+54     	; 0x372a <ProcessInput+0xbba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36f4:	83 e0       	ldi	r24, 0x03	; 3
    36f6:	99 e7       	ldi	r25, 0x79	; 121
    36f8:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    36fc:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3700:	8a e1       	ldi	r24, 0x1A	; 26
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	f9 ca       	rjmp	.-2574   	; 0x2cf8 <ProcessInput+0x188>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3706:	82 37       	cpi	r24, 0x72	; 114
    3708:	69 f4       	brne	.+26     	; 0x3724 <ProcessInput+0xbb4>
    370a:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3995+0x8>
    370e:	85 fd       	sbrc	r24, 5
    3710:	0c c0       	rjmp	.+24     	; 0x372a <ProcessInput+0xbba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3712:	88 ee       	ldi	r24, 0xE8	; 232
    3714:	98 e7       	ldi	r25, 0x78	; 120
    3716:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    371a:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    371e:	8b e1       	ldi	r24, 0x1B	; 27
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	ea ca       	rjmp	.-2604   	; 0x2cf8 <ProcessInput+0x188>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3724:	87 36       	cpi	r24, 0x67	; 103
    3726:	09 f4       	brne	.+2      	; 0x372a <ProcessInput+0xbba>
    3728:	52 ca       	rjmp	.-2908   	; 0x2bce <ProcessInput+0x5e>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    372a:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3995+0x1e>
    372e:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3995+0x1f>
    3732:	f1 e0       	ldi	r31, 0x01	; 1
    3734:	ef 16       	cp	r14, r31
    3736:	f1 04       	cpc	r15, r1
    3738:	11 f5       	brne	.+68     	; 0x377e <ProcessInput+0xc0e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    373a:	98 01       	movw	r18, r16
    373c:	2e 5f       	subi	r18, 0xFE	; 254
    373e:	3f 4f       	sbci	r19, 0xFF	; 255
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	61 e0       	ldi	r22, 0x01	; 1
    3744:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3995+0x10>
    3748:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3995+0x11>
    374c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ExtEERead>
                                if (data[2] == '1') {
    3750:	d8 01       	movw	r26, r16
    3752:	12 96       	adiw	r26, 0x02	; 2
    3754:	8c 91       	ld	r24, X
    3756:	81 33       	cpi	r24, 0x31	; 49
    3758:	09 f0       	breq	.+2      	; 0x375c <ProcessInput+0xbec>
    375a:	8a cc       	rjmp	.-1772   	; 0x3070 <ProcessInput+0x500>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    375c:	82 e6       	ldi	r24, 0x62	; 98
    375e:	95 e7       	ldi	r25, 0x75	; 117
    3760:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3764:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3768:	8b e2       	ldi	r24, 0x2B	; 43
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3770:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3774:	e0 92 9d 39 	sts	0x399D, r14	; 0x80399d <reactStr+0x82>
    3778:	f0 92 9e 39 	sts	0x399E, r15	; 0x80399e <reactStr+0x83>
    377c:	c7 ca       	rjmp	.-2674   	; 0x2d0c <ProcessInput+0x19c>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    377e:	e1 14       	cp	r14, r1
    3780:	f1 04       	cpc	r15, r1
    3782:	09 f4       	brne	.+2      	; 0x3786 <ProcessInput+0xc16>
    3784:	59 c0       	rjmp	.+178    	; 0x3838 <ProcessInput+0xcc8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3786:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3995+0x10>
    378a:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3995+0x11>
    378e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3792:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3796:	e0 92 5d 39 	sts	0x395D, r14	; 0x80395d <reactStr+0x42>
    379a:	f0 92 5e 39 	sts	0x395E, r15	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    379e:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    37a2:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37a6:	8b e5       	ldi	r24, 0x5B	; 91
    37a8:	9a e7       	ldi	r25, 0x7A	; 122
    37aa:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    37ae:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    37b2:	82 e0       	ldi	r24, 0x02	; 2
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    37ba:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    37c6:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ca:	2f ea       	ldi	r18, 0xAF	; 175
    37cc:	38 e7       	ldi	r19, 0x78	; 120
    37ce:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    37d2:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    37d6:	22 e1       	ldi	r18, 0x12	; 18
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    37de:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    37e2:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    37e6:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    37ea:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3995+0x20>
    37ee:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3995+0x21>
    37f2:	40 97       	sbiw	r24, 0x10	; 16
    37f4:	30 f0       	brcs	.+12     	; 0x3802 <ProcessInput+0xc92>
    37f6:	8f e0       	ldi	r24, 0x0F	; 15
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <actObj1.3995+0x20>
    37fe:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <actObj1.3995+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3802:	2a e0       	ldi	r18, 0x0A	; 10
    3804:	39 e3       	ldi	r19, 0x39	; 57
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	60 91 fa 38 	lds	r22, 0x38FA	; 0x8038fa <actObj1.3995+0x20>
    380c:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3995+0x12>
    3810:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3995+0x13>
    3814:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3818:	6a e0       	ldi	r22, 0x0A	; 10
    381a:	79 e3       	ldi	r23, 0x39	; 57
    381c:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3995+0x20>
    3820:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    3824:	e0 91 fa 38 	lds	r30, 0x38FA	; 0x8038fa <actObj1.3995+0x20>
    3828:	f0 91 fb 38 	lds	r31, 0x38FB	; 0x8038fb <actObj1.3995+0x21>
    382c:	e6 5f       	subi	r30, 0xF6	; 246
    382e:	f6 4c       	sbci	r31, 0xC6	; 198
    3830:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    3832:	74 e0       	ldi	r23, 0x04	; 4
    3834:	77 2e       	mov	r7, r23
    3836:	97 c1       	rjmp	.+814    	; 0x3b66 <ProcessInput+0xff6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3838:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3995+0x7>
    383c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <CheckState>
    3840:	88 23       	and	r24, r24
    3842:	01 f1       	breq	.+64     	; 0x3884 <ProcessInput+0xd14>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3844:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3995+0x26>
    3848:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3995+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    384c:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3995+0x18>
    3850:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3995+0x19>
    3854:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3858:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    385c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3860:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3864:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3868:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    386c:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3995+0x2a>
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3876:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    387a:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0xa>
    387e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
    3882:	44 ca       	rjmp	.-2936   	; 0x2d0c <ProcessInput+0x19c>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3884:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3995+0x24>
    3888:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3995+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    388c:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3995+0x16>
    3890:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3995+0x17>
    3894:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3898:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    389c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    38a0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    38a4:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    38a8:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    38ac:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3995+0x29>
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    38b6:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    38ba:	28 ca       	rjmp	.-2992   	; 0x2d0c <ProcessInput+0x19c>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    38bc:	f8 01       	movw	r30, r16
    38be:	80 81       	ld	r24, Z
    38c0:	84 37       	cpi	r24, 0x74	; 116
    38c2:	11 f0       	breq	.+4      	; 0x38c8 <ProcessInput+0xd58>
    38c4:	87 36       	cpi	r24, 0x67	; 103
    38c6:	19 f4       	brne	.+6      	; 0x38ce <ProcessInput+0xd5e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38c8:	8b e3       	ldi	r24, 0x3B	; 59
    38ca:	99 e7       	ldi	r25, 0x79	; 121
    38cc:	02 c0       	rjmp	.+4      	; 0x38d2 <ProcessInput+0xd62>
    38ce:	8f e4       	ldi	r24, 0x4F	; 79
    38d0:	99 e7       	ldi	r25, 0x79	; 121
    38d2:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    38d6:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    38da:	84 e1       	ldi	r24, 0x14	; 20
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	0c ca       	rjmp	.-3048   	; 0x2cf8 <ProcessInput+0x188>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    38e0:	81 36       	cpi	r24, 0x61	; 97
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <ProcessInput+0xd76>
    38e4:	c5 cb       	rjmp	.-2166   	; 0x3070 <ProcessInput+0x500>
            
            //Priest offerings
            if (specialPassed >= 2) {
    38e6:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <specialPassed>
    38ea:	82 30       	cpi	r24, 0x02	; 2
    38ec:	08 f4       	brcc	.+2      	; 0x38f0 <ProcessInput+0xd80>
    38ee:	c9 c0       	rjmp	.+402    	; 0x3a82 <ProcessInput+0xf12>
                if (data[1] > 0) {
    38f0:	d8 01       	movw	r26, r16
    38f2:	11 96       	adiw	r26, 0x01	; 1
    38f4:	3c 91       	ld	r19, X
    38f6:	33 23       	and	r19, r19
    38f8:	09 f4       	brne	.+2      	; 0x38fc <ProcessInput+0xd8c>
    38fa:	b0 c0       	rjmp	.+352    	; 0x3a5c <ProcessInput+0xeec>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    38fc:	fe 01       	movw	r30, r28
    38fe:	31 96       	adiw	r30, 0x01	; 1
    3900:	7f 01       	movw	r14, r30
    3902:	88 e0       	ldi	r24, 0x08	; 8
    3904:	df 01       	movw	r26, r30
    3906:	1d 92       	st	X+, r1
    3908:	8a 95       	dec	r24
    390a:	e9 f7       	brne	.-6      	; 0x3906 <ProcessInput+0xd96>
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    //data[1]+=1; // item 31 needs to become something that results in 0 when doing %4
                    data[2]-='1';
    390c:	f8 01       	movw	r30, r16
    390e:	22 81       	ldd	r18, Z+2	; 0x02
    3910:	21 53       	subi	r18, 0x31	; 49
    3912:	22 83       	std	Z+2, r18	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3914:	83 81       	ldd	r24, Z+3	; 0x03
    3916:	81 36       	cpi	r24, 0x61	; 97
    3918:	11 f4       	brne	.+4      	; 0x391e <ProcessInput+0xdae>
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	08 c0       	rjmp	.+16     	; 0x392e <ProcessInput+0xdbe>
                    else if (data[3] == 'e') data[3] = 0;
    391e:	85 36       	cpi	r24, 0x65	; 101
    3920:	11 f4       	brne	.+4      	; 0x3926 <ProcessInput+0xdb6>
    3922:	13 82       	std	Z+3, r1	; 0x03
    3924:	08 c0       	rjmp	.+16     	; 0x3936 <ProcessInput+0xdc6>
                    else if (data[3] == 'f') data[3] = 3;
    3926:	86 36       	cpi	r24, 0x66	; 102
    3928:	21 f4       	brne	.+8      	; 0x3932 <ProcessInput+0xdc2>
    392a:	83 e0       	ldi	r24, 0x03	; 3
    392c:	f8 01       	movw	r30, r16
    392e:	83 83       	std	Z+3, r24	; 0x03
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <ProcessInput+0xdc6>
                    else data[3] = 2;
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3936:	31 fd       	sbrc	r19, 1
    3938:	04 c0       	rjmp	.+8      	; 0x3942 <ProcessInput+0xdd2>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	dc 01       	movw	r26, r24
    3940:	04 c0       	rjmp	.+8      	; 0x394a <ProcessInput+0xdda>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	a0 e1       	ldi	r26, 0x10	; 16
    3948:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    394a:	30 ff       	sbrs	r19, 0
    394c:	03 c0       	rjmp	.+6      	; 0x3954 <ProcessInput+0xde4>
    394e:	9f 5f       	subi	r25, 0xFF	; 255
    3950:	af 4f       	sbci	r26, 0xFF	; 255
    3952:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3954:	f8 01       	movw	r30, r16
    3956:	33 81       	ldd	r19, Z+3	; 0x03
    3958:	31 fd       	sbrc	r19, 1
    395a:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    395c:	30 ff       	sbrs	r19, 0
    395e:	03 c0       	rjmp	.+6      	; 0x3966 <ProcessInput+0xdf6>
    3960:	40 96       	adiw	r24, 0x10	; 16
    3962:	a1 1d       	adc	r26, r1
    3964:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3966:	21 ff       	sbrs	r18, 1
    3968:	03 c0       	rjmp	.+6      	; 0x3970 <ProcessInput+0xe00>
    396a:	90 5f       	subi	r25, 0xF0	; 240
    396c:	af 4f       	sbci	r26, 0xFF	; 255
    396e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3970:	20 ff       	sbrs	r18, 0
    3972:	03 c0       	rjmp	.+6      	; 0x397a <ProcessInput+0xe0a>
    3974:	01 96       	adiw	r24, 0x01	; 1
    3976:	a1 1d       	adc	r26, r1
    3978:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    397a:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <whoami>
    397e:	24 e0       	ldi	r18, 0x04	; 4
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	24 1b       	sub	r18, r20
    3984:	31 09       	sbc	r19, r1
    3986:	04 c0       	rjmp	.+8      	; 0x3990 <ProcessInput+0xe20>
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	aa 1f       	adc	r26, r26
    398e:	bb 1f       	adc	r27, r27
    3990:	2a 95       	dec	r18
    3992:	d2 f7       	brpl	.-12     	; 0x3988 <ProcessInput+0xe18>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3994:	25 e0       	ldi	r18, 0x05	; 5
    3996:	35 e7       	ldi	r19, 0x75	; 117
    3998:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    399c:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    39a0:	20 e2       	ldi	r18, 0x20	; 32
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    39a8:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    39ac:	21 e0       	ldi	r18, 0x01	; 1
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    39b4:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39b8:	4a ed       	ldi	r20, 0xDA	; 218
    39ba:	54 e7       	ldi	r21, 0x74	; 116
    39bc:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    39c0:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    39c4:	42 e0       	ldi	r20, 0x02	; 2
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    39cc:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    39d0:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    39d4:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39d8:	67 e0       	ldi	r22, 0x07	; 7
    39da:	d6 2e       	mov	r13, r22
                        digit[n] = answer % 16;
    39dc:	f7 01       	movw	r30, r14
    39de:	ed 0d       	add	r30, r13
    39e0:	f1 1d       	adc	r31, r1
    39e2:	28 2f       	mov	r18, r24
    39e4:	2f 70       	andi	r18, 0x0F	; 15
    39e6:	20 83       	st	Z, r18
                        answer /= 16;
    39e8:	54 e0       	ldi	r21, 0x04	; 4
    39ea:	b6 95       	lsr	r27
    39ec:	a7 95       	ror	r26
    39ee:	97 95       	ror	r25
    39f0:	87 95       	ror	r24
    39f2:	5a 95       	dec	r21
    39f4:	d1 f7       	brne	.-12     	; 0x39ea <ProcessInput+0xe7a>
                        if (answer == 0) break;
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	a1 05       	cpc	r26, r1
    39fa:	b1 05       	cpc	r27, r1
    39fc:	51 f4       	brne	.+20     	; 0x3a12 <ProcessInput+0xea2>
    39fe:	2b e1       	ldi	r18, 0x1B	; 27
    3a00:	a2 2e       	mov	r10, r18
    3a02:	29 e3       	ldi	r18, 0x39	; 57
    3a04:	b2 2e       	mov	r11, r18
    3a06:	33 e0       	ldi	r19, 0x03	; 3
    3a08:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3a0a:	88 24       	eor	r8, r8
    3a0c:	83 94       	inc	r8
    3a0e:	91 2c       	mov	r9, r1
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <ProcessInput+0xea6>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a12:	da 94       	dec	r13
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3a14:	e3 cf       	rjmp	.-58     	; 0x39dc <ProcessInput+0xe6c>
    3a16:	b2 e0       	ldi	r27, 0x02	; 2
    3a18:	ab 0e       	add	r10, r27
    3a1a:	b1 1c       	adc	r11, r1

                    for (; n<8; ++n) {
    3a1c:	e7 e0       	ldi	r30, 0x07	; 7
    3a1e:	ed 15       	cp	r30, r13
    3a20:	08 f4       	brcc	.+2      	; 0x3a24 <ProcessInput+0xeb4>
    3a22:	9f c0       	rjmp	.+318    	; 0x3b62 <ProcessInput+0xff2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3a24:	73 94       	inc	r7
    3a26:	f7 01       	movw	r30, r14
    3a28:	ed 0d       	add	r30, r13
    3a2a:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a2c:	80 81       	ld	r24, Z
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	86 53       	subi	r24, 0x36	; 54
    3a32:	9b 48       	sbci	r25, 0x8B	; 139
    3a34:	d5 01       	movw	r26, r10
    3a36:	14 96       	adiw	r26, 0x04	; 4
    3a38:	8d 93       	st	X+, r24
    3a3a:	9c 93       	st	X, r25
    3a3c:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3a3e:	f5 01       	movw	r30, r10
    3a40:	ec 5b       	subi	r30, 0xBC	; 188
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 82       	st	Z, r8
    3a46:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    3a48:	e0 5c       	subi	r30, 0xC0	; 192
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 82       	st	Z, r8
    3a4e:	91 82       	std	Z+1, r9	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3a50:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0xa>
    3a54:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3a58:	d3 94       	inc	r13
    3a5a:	dd cf       	rjmp	.-70     	; 0x3a16 <ProcessInput+0xea6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a5c:	85 e2       	ldi	r24, 0x25	; 37
    3a5e:	95 e7       	ldi	r25, 0x75	; 117
    3a60:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3a64:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a68:	8d e3       	ldi	r24, 0x3D	; 61
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3a70:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3a7c:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3a80:	6e c0       	rjmp	.+220    	; 0x3b5e <ProcessInput+0xfee>
    3a82:	e0 91 2c 38 	lds	r30, 0x382C	; 0x80382c <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	ee 0f       	add	r30, r30
    3a8a:	ff 1f       	adc	r31, r31
    3a8c:	e3 52       	subi	r30, 0x23	; 35
    3a8e:	f6 4c       	sbci	r31, 0xC6	; 198
    3a90:	6a ed       	ldi	r22, 0xDA	; 218
    3a92:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3a94:	81 30       	cpi	r24, 0x01	; 1
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <ProcessInput+0xf2a>
    3a98:	46 c0       	rjmp	.+140    	; 0x3b26 <ProcessInput+0xfb6>
                PopulateObject(route[currDepth+1], &actObj1);
    3a9a:	80 81       	ld	r24, Z
    3a9c:	91 81       	ldd	r25, Z+1	; 0x01
    3a9e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3aa2:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3995+0x7>
    3aa6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <CheckState>
    3aaa:	88 23       	and	r24, r24
    3aac:	01 f1       	breq	.+64     	; 0x3aee <ProcessInput+0xf7e>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3aae:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3995+0x26>
    3ab2:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3995+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ab6:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3995+0x18>
    3aba:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3995+0x19>
    3abe:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3ac2:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3ac6:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3aca:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3ace:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3ad2:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3ad6:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3995+0x2a>
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3ae0:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3ae4:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3995+0xa>
    3ae8:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UpdateState>
    3aec:	38 c0       	rjmp	.+112    	; 0x3b5e <ProcessInput+0xfee>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3aee:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3995+0x24>
    3af2:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3995+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3af6:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3995+0x16>
    3afa:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3995+0x17>
    3afe:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3b02:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3b06:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3b0a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3b0e:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3b12:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3b16:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3995+0x29>
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3b20:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3b24:	1c c0       	rjmp	.+56     	; 0x3b5e <ProcessInput+0xfee>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b2e:	8d e9       	ldi	r24, 0x9D	; 157
    3b30:	98 e7       	ldi	r25, 0x78	; 120
    3b32:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3b36:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3b3a:	82 e1       	ldi	r24, 0x12	; 18
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3b42:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3b4e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3b52:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <getClock>
    3b56:	80 93 07 39 	sts	0x3907, r24	; 0x803907 <PunishmentTime>
    3b5a:	90 93 08 39 	sts	0x3908, r25	; 0x803908 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3b5e:	82 e0       	ldi	r24, 0x02	; 2
    3b60:	78 2e       	mov	r7, r24
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3b62:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b66:	8b e5       	ldi	r24, 0x5B	; 91
    3b68:	9a e7       	ldi	r25, 0x7A	; 122
    3b6a:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    3b6e:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    3b72:	82 e0       	ldi	r24, 0x02	; 2
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    3b7a:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    3b86:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b8a:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    3b8e:	88 23       	and	r24, r24
    3b90:	19 f0       	breq	.+6      	; 0x3b98 <ProcessInput+0x1028>
    3b92:	70 92 1a 39 	sts	0x391A, r7	; 0x80391a <responseList>
    3b96:	9b c0       	rjmp	.+310    	; 0x3cce <ProcessInput+0x115e>
    3b98:	87 2d       	mov	r24, r7
    3b9a:	12 c0       	rjmp	.+36     	; 0x3bc0 <ProcessInput+0x1050>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b9c:	8b e5       	ldi	r24, 0x5B	; 91
    3b9e:	9a e7       	ldi	r25, 0x7A	; 122
    3ba0:	80 93 1b 39 	sts	0x391B, r24	; 0x80391b <reactStr>
    3ba4:	90 93 1c 39 	sts	0x391C, r25	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    3ba8:	82 e0       	ldi	r24, 0x02	; 2
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    3bb0:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	80 93 9b 39 	sts	0x399B, r24	; 0x80399b <reactStr+0x80>
    3bbc:	90 93 9c 39 	sts	0x399C, r25	; 0x80399c <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    3bc0:	0e 94 82 10 	call	0x2104	; 0x2104 <SetStandardResponse>
    3bc4:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    3bc8:	82 c0       	rjmp	.+260    	; 0x3cce <ProcessInput+0x115e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bca:	83 ed       	ldi	r24, 0xD3	; 211
    3bcc:	99 e7       	ldi	r25, 0x79	; 121
    3bce:	94 cd       	rjmp	.-1240   	; 0x36f8 <ProcessInput+0xb88>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3bd0:	b2 e0       	ldi	r27, 0x02	; 2
    3bd2:	fb 12       	cpse	r15, r27
    3bd4:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3bd8:	d8 01       	movw	r26, r16
    3bda:	11 96       	adiw	r26, 0x01	; 1
    3bdc:	6c 91       	ld	r22, X
    3bde:	0e 94 75 11 	call	0x22ea	; 0x22ea <CheckLetter>
    3be2:	88 23       	and	r24, r24
    3be4:	09 f4       	brne	.+2      	; 0x3be8 <ProcessInput+0x1078>
    3be6:	5b c0       	rjmp	.+182    	; 0x3c9e <ProcessInput+0x112e>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3bec:	88 0f       	add	r24, r24
    3bee:	99 1f       	adc	r25, r25
    3bf0:	9c 01       	movw	r18, r24
    3bf2:	22 5c       	subi	r18, 0xC2	; 194
    3bf4:	37 4c       	sbci	r19, 0xC7	; 199
    3bf6:	79 01       	movw	r14, r18
    3bf8:	6a ed       	ldi	r22, 0xDA	; 218
    3bfa:	78 e3       	ldi	r23, 0x38	; 56
    3bfc:	d9 01       	movw	r26, r18
    3bfe:	8d 91       	ld	r24, X+
    3c00:	9c 91       	ld	r25, X
    3c02:	0e 94 fe 10 	call	0x21fc	; 0x21fc <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c06:	83 ed       	ldi	r24, 0xD3	; 211
    3c08:	97 e7       	ldi	r25, 0x77	; 119
    3c0a:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3c0e:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c12:	80 e1       	ldi	r24, 0x10	; 16
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c1a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3c26:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3c2a:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3995+0x1a>
    3c2e:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3995+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c32:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3995+0xc>
    3c36:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3995+0xd>
    3c3a:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3c3e:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3c42:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x44>
    3c46:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3c4a:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    3c4e:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c52:	2b e5       	ldi	r18, 0x5B	; 91
    3c54:	3a e7       	ldi	r19, 0x7A	; 122
    3c56:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3c5a:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3c5e:	22 e0       	ldi	r18, 0x02	; 2
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3c66:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3c6a:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    3c6e:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c72:	26 e9       	ldi	r18, 0x96	; 150
    3c74:	37 e7       	ldi	r19, 0x77	; 119
    3c76:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x8>
    3c7a:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x9>
    reactStr[1][number]=length;
    3c7e:	2d e3       	ldi	r18, 0x3D	; 61
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x48>
    3c86:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x49>
    reactStr[2][number]=type;
    3c8a:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x88>
    3c8e:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c92:	f7 01       	movw	r30, r14
    3c94:	10 82       	st	Z, r1
    3c96:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c98:	f5 e0       	ldi	r31, 0x05	; 5
    3c9a:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    3c9c:	64 cf       	rjmp	.-312    	; 0x3b66 <ProcessInput+0xff6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c9e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3ca2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	49 f0       	breq	.+18     	; 0x3cbc <ProcessInput+0x114c>
                        if (CheckLetter(inventory[x], data[1])) {
    3caa:	f8 01       	movw	r30, r16
    3cac:	61 81       	ldd	r22, Z+1	; 0x01
    3cae:	0e 94 75 11 	call	0x22ea	; 0x22ea <CheckLetter>
    3cb2:	88 23       	and	r24, r24
    3cb4:	19 f0       	breq	.+6      	; 0x3cbc <ProcessInput+0x114c>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	98 cf       	rjmp	.-208    	; 0x3bec <ProcessInput+0x107c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cbc:	83 e6       	ldi	r24, 0x63	; 99
    3cbe:	99 e7       	ldi	r25, 0x79	; 121
    3cc0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3cc4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3cc8:	81 e2       	ldi	r24, 0x21	; 33
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	15 c8       	rjmp	.-4054   	; 0x2cf8 <ProcessInput+0x188>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3cce:	d8 01       	movw	r26, r16
    3cd0:	1c 92       	st	X, r1
    serRxDone = 0;
    3cd2:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    RXCNT = 0;    
    3cd6:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	28 96       	adiw	r28, 0x08	; 8
    3cdc:	cd bf       	out	0x3d, r28	; 61
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	cf 90       	pop	r12
    3cf0:	bf 90       	pop	r11
    3cf2:	af 90       	pop	r10
    3cf4:	9f 90       	pop	r9
    3cf6:	8f 90       	pop	r8
    3cf8:	7f 90       	pop	r7
    3cfa:	6f 90       	pop	r6
    3cfc:	5f 90       	pop	r5
    3cfe:	08 95       	ret

00003d00 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3d00:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3d02:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3d06:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3d0a:	89 2b       	or	r24, r25
    3d0c:	09 f1       	breq	.+66     	; 0x3d50 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3d0e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <getClock>
        if (PunishmentCount < PunishmentTime)
    3d12:	20 91 07 39 	lds	r18, 0x3907	; 0x803907 <PunishmentTime>
    3d16:	30 91 08 39 	lds	r19, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3d1a:	82 17       	cp	r24, r18
    3d1c:	93 07       	cpc	r25, r19
    3d1e:	08 f4       	brcc	.+2      	; 0x3d22 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3d20:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3d22:	ac 01       	movw	r20, r24
    3d24:	42 1b       	sub	r20, r18
    3d26:	53 0b       	sbc	r21, r19
    3d28:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3d2a:	4b 30       	cpi	r20, 0x0B	; 11
    3d2c:	51 05       	cpc	r21, r1
    3d2e:	30 f0       	brcs	.+12     	; 0x3d3c <TextAdventure+0x3c>
            PunishmentTime = 0;
    3d30:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <PunishmentTime>
    3d34:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3d38:	2a e0       	ldi	r18, 0x0A	; 10
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3d3c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    3d40:	81 11       	cpse	r24, r1
    3d42:	06 c0       	rjmp	.+12     	; 0x3d50 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3d44:	65 e0       	ldi	r22, 0x05	; 5
    3d46:	62 1b       	sub	r22, r18
    3d48:	8a e0       	ldi	r24, 0x0A	; 10
    3d4a:	82 1b       	sub	r24, r18
    3d4c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3d50:	0e 94 54 12 	call	0x24a8	; 0x24a8 <CheckSend>
    3d54:	88 23       	and	r24, r24
    3d56:	11 f0       	breq	.+4      	; 0x3d5c <TextAdventure+0x5c>
    3d58:	c1 e0       	ldi	r28, 0x01	; 1
    3d5a:	18 c0       	rjmp	.+48     	; 0x3d8c <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3d5c:	0e 94 c2 12 	call	0x2584	; 0x2584 <CheckResponse>
    3d60:	c8 2f       	mov	r28, r24
    3d62:	81 11       	cpse	r24, r1
    3d64:	f9 cf       	rjmp	.-14     	; 0x3d58 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3d66:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3d6a:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3d6e:	89 2b       	or	r24, r25
    3d70:	69 f4       	brne	.+26     	; 0x3d8c <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d72:	8e e6       	ldi	r24, 0x6E	; 110
    3d74:	98 e3       	ldi	r25, 0x38	; 56
    3d76:	0e 94 09 13 	call	0x2612	; 0x2612 <CheckInput>
    3d7a:	c8 2f       	mov	r28, r24
    3d7c:	81 11       	cpse	r24, r1
    3d7e:	05 c0       	rjmp	.+10     	; 0x3d8a <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3d80:	8e e6       	ldi	r24, 0x6E	; 110
    3d82:	98 e3       	ldi	r25, 0x38	; 56
    3d84:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <ProcessInput>
    3d88:	01 c0       	rjmp	.+2      	; 0x3d8c <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d8a:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d8c:	8c 2f       	mov	r24, r28
    3d8e:	cf 91       	pop	r28
    3d90:	08 95       	ret

00003d92 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d92:	0e 94 48 05 	call	0xa90	; 0xa90 <Setup>

    LoadGameState();
    3d96:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LoadGameState>
            SaveGameState();

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);
            dimValue = 0 - QSINE[31-(adcPhot>>7)];
    3d9a:	cf e1       	ldi	r28, 0x1F	; 31
    3d9c:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();

    LoadGameState();

    while (TRUE) {
        if (GenerateAudio()) {
    3d9e:	0e 94 33 0c 	call	0x1866	; 0x1866 <GenerateAudio>
    3da2:	88 23       	and	r24, r24
    3da4:	e1 f3       	breq	.-8      	; 0x3d9e <main+0xc>
            lastButtonState = buttonState;
    3da6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3daa:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3dae:	0e 94 07 09 	call	0x120e	; 0x120e <CheckButtons>
    3db2:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3db6:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3dba:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3dbe:	82 31       	cpi	r24, 0x12	; 18
    3dc0:	19 f4       	brne	.+6      	; 0x3dc8 <main+0x36>
    3dc2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <SelectAuIn>
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <main+0x3a>
    3dc8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <SelectTSens>

            GenerateBlinks();
    3dcc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3dd0:	97 df       	rcall	.-210    	; 0x3d00 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3dd2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <MagnetMaze>
            LanyardCode();
    3dd6:	0e 94 2e 03 	call	0x65c	; 0x65c <LanyardCode>
            BastetDictates();
    3dda:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <BastetDictates>
            MakeFriends();
    3dde:	0e 94 7a 00 	call	0xf4	; 0xf4 <MakeFriends>

            //Save progress
            SaveGameState();
    3de2:	0e 94 b8 09 	call	0x1370	; 0x1370 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3de6:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3dea:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3dee:	0a 97       	sbiw	r24, 0x0a	; 10
    3df0:	20 f4       	brcc	.+8      	; 0x3dfa <main+0x68>
    3df2:	61 e0       	ldi	r22, 0x01	; 1
    3df4:	84 e7       	ldi	r24, 0x74	; 116
    3df6:	0e 94 3f 0a 	call	0x147e	; 0x147e <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    3dfa:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3dfe:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3e02:	85 36       	cpi	r24, 0x65	; 101
    3e04:	91 05       	cpc	r25, r1
    3e06:	20 f0       	brcs	.+8      	; 0x3e10 <main+0x7e>
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	84 e7       	ldi	r24, 0x74	; 116
    3e0c:	0e 94 3f 0a 	call	0x147e	; 0x147e <WriteStatusBit>
            dimValue = 0 - QSINE[31-(adcPhot>>7)];
    3e10:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3e14:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3e18:	88 0f       	add	r24, r24
    3e1a:	89 2f       	mov	r24, r25
    3e1c:	88 1f       	adc	r24, r24
    3e1e:	99 0b       	sbc	r25, r25
    3e20:	91 95       	neg	r25
    3e22:	fe 01       	movw	r30, r28
    3e24:	e8 1b       	sub	r30, r24
    3e26:	f9 0b       	sbc	r31, r25
    3e28:	ec 57       	subi	r30, 0x7C	; 124
    3e2a:	f1 44       	sbci	r31, 0x41	; 65
    3e2c:	80 81       	ld	r24, Z
    3e2e:	81 95       	neg	r24
    3e30:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValue>

            //Check temperature
            HotSummer();
    3e34:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <HotSummer>
    3e38:	b2 cf       	rjmp	.-156    	; 0x3d9e <main+0xc>

00003e3a <_exit>:
    3e3a:	f8 94       	cli

00003e3c <__stop_program>:
    3e3c:	ff cf       	rjmp	.-2      	; 0x3e3c <__stop_program>
