
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00803800  00003fae  00004062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ef2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0000bef2  00003ef2  00003fa6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00803832  00803832  00004094  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00004104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c4f  00000000  00000000  0000443c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000287d  00000000  00000000  0000b08b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003da1  00000000  00000000  0000d908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009f8  00000000  00000000  000116ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a86  00000000  00000000  000120a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004190  00000000  00000000  00013b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  00017cba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c7       	rjmp	.+3846   	; 0xf20 <__vector_6>
      1a:	00 00       	nop
      1c:	d8 c7       	rjmp	.+4016   	; 0xfce <__vector_7>
      1e:	00 00       	nop
      20:	c0 c5       	rjmp	.+2944   	; 0xba2 <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c6       	rjmp	.+3086   	; 0xc44 <__vector_13>
      36:	00 00       	nop
      38:	38 c6       	rjmp	.+3184   	; 0xcaa <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f3 c6       	rjmp	.+3558   	; 0xe38 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c7       	rjmp	.+3638   	; 0xe90 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c6       	rjmp	.+3292   	; 0xd4a <__vector_27>
      6e:	00 00       	nop
      70:	c7 c6       	rjmp	.+3470   	; 0xe00 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad 0b       	sbc	r26, r29
      7e:	db 0b       	sbc	r29, r27
      80:	e2 0b       	sbc	r30, r18
      82:	ab 0c       	add	r10, r11
      84:	ab 0c       	add	r10, r11
      86:	f8 0b       	sbc	r31, r24
      88:	0c 0c       	add	r0, r12
      8a:	4a 0c       	add	r4, r10
      8c:	71 0c       	add	r7, r1

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	ee ea       	ldi	r30, 0xAE	; 174
      a2:	ff e3       	ldi	r31, 0x3F	; 63
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a2 33       	cpi	r26, 0x32	; 50
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a2 e3       	ldi	r26, 0x32	; 50
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a4 31       	cpi	r26, 0x14	; 20
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <main>
      c4:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      d0:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
      fe:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <chkTmr.3790>
     102:	8f 5f       	subi	r24, 0xFF	; 255
     104:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <chkTmr.3790>
     108:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     10a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     10c:	8c 2f       	mov	r24, r28
     10e:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
     112:	81 11       	cpse	r24, r1
     114:	01 c0       	rjmp	.+2      	; 0x118 <MakeFriends+0x1e>
     116:	d0 e0       	ldi	r29, 0x00	; 0
     118:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     11a:	c8 36       	cpi	r28, 0x68	; 104
     11c:	b9 f7       	brne	.-18     	; 0x10c <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     11e:	dd 23       	and	r29, r29
     120:	19 f0       	breq	.+6      	; 0x128 <MakeFriends+0x2e>
     122:	8c e7       	ldi	r24, 0x7C	; 124
     124:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     128:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <progress.3788>
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	20 f0       	brcs	.+8      	; 0x138 <MakeFriends+0x3e>
        gameNow = FRIENDS; 
     130:	94 e0       	ldi	r25, 0x04	; 4
     132:	90 93 3e 38 	sts	0x383E, r25	; 0x80383e <gameNow>
     136:	0d c0       	rjmp	.+26     	; 0x152 <MakeFriends+0x58>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     138:	81 11       	cpse	r24, r1
     13a:	0b c0       	rjmp	.+22     	; 0x152 <MakeFriends+0x58>
     13c:	90 91 3e 38 	lds	r25, 0x383E	; 0x80383e <gameNow>
     140:	94 30       	cpi	r25, 0x04	; 4
     142:	61 f4       	brne	.+24     	; 0x15c <MakeFriends+0x62>
        gameNow = TEXT; 
     144:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
        effect = 0;
     148:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect>
     14c:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <effect+0x1>
     150:	05 c0       	rjmp	.+10     	; 0x15c <MakeFriends+0x62>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     152:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <detHdPh>
     156:	91 11       	cpse	r25, r1
     158:	f1 cf       	rjmp	.-30     	; 0x13c <MakeFriends+0x42>
     15a:	18 c0       	rjmp	.+48     	; 0x18c <MakeFriends+0x92>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     15c:	81 11       	cpse	r24, r1
     15e:	16 c0       	rjmp	.+44     	; 0x18c <MakeFriends+0x92>
     160:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <detHdPh>
     164:	91 11       	cpse	r25, r1
     166:	12 c0       	rjmp	.+36     	; 0x18c <MakeFriends+0x92>
        setDAC[0] = whoami * 51;
     168:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <whoami>
     16c:	93 e3       	ldi	r25, 0x33	; 51
     16e:	89 9f       	mul	r24, r25
     170:	80 2d       	mov	r24, r0
     172:	11 24       	eor	r1, r1
     174:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	98 e3       	ldi	r25, 0x38	; 56
     17c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     180:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
     18a:	09 c0       	rjmp	.+18     	; 0x19e <MakeFriends+0xa4>
    } else {
        if (progress & NEXT){
     18c:	98 2f       	mov	r25, r24
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	31 f0       	breq	.+12     	; 0x19e <MakeFriends+0xa4>
            progress++;
            progress&=0x0f;
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	8f 70       	andi	r24, 0x0F	; 15
     196:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <progress.3788>
            chkTmr = 0;
     19a:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <chkTmr.3790>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     19e:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
     1a2:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	b9 01       	movw	r22, r18
     1ac:	6a 50       	subi	r22, 0x0A	; 10
     1ae:	71 09       	sbc	r23, r1
     1b0:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <progress.3788>
     1b4:	46 17       	cp	r20, r22
     1b6:	57 07       	cpc	r21, r23
     1b8:	5c f0       	brlt	.+22     	; 0x1d0 <MakeFriends+0xd6>
     1ba:	40 91 c4 3a 	lds	r20, 0x3AC4	; 0x803ac4 <auIn>
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	26 5f       	subi	r18, 0xF6	; 246
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	24 17       	cp	r18, r20
     1c6:	35 07       	cpc	r19, r21
     1c8:	1c f0       	brlt	.+6      	; 0x1d0 <MakeFriends+0xd6>
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	08 f4       	brcc	.+2      	; 0x1d0 <MakeFriends+0xd6>
     1ce:	43 c0       	rjmp	.+134    	; 0x256 <MakeFriends+0x15c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     1d0:	81 11       	cpse	r24, r1
     1d2:	0b c0       	rjmp	.+22     	; 0x1ea <MakeFriends+0xf0>
     1d4:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <detHdPh>
     1d8:	81 11       	cpse	r24, r1
     1da:	95 c0       	rjmp	.+298    	; 0x306 <MakeFriends+0x20c>
            if (chkTmr >= 8) {
     1dc:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <chkTmr.3790>
     1e0:	88 30       	cpi	r24, 0x08	; 8
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <MakeFriends+0xec>
     1e4:	90 c0       	rjmp	.+288    	; 0x306 <MakeFriends+0x20c>
                progress |= NEXT;
     1e6:	80 ef       	ldi	r24, 0xF0	; 240
     1e8:	63 c0       	rjmp	.+198    	; 0x2b0 <MakeFriends+0x1b6>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	41 f5       	brne	.+80     	; 0x23e <MakeFriends+0x144>
            jackIn = chkVolt250();
     1ee:	6d df       	rcall	.-294    	; 0xca <chkVolt250>
     1f0:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <jackIn.3791>
            if (jackIn) {
     1f4:	88 23       	and	r24, r24
     1f6:	79 f1       	breq	.+94     	; 0x256 <MakeFriends+0x15c>
                if (chkTmr >= SHORT_WAIT){
     1f8:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <chkTmr.3790>
     1fc:	98 30       	cpi	r25, 0x08	; 8
     1fe:	08 f4       	brcc	.+2      	; 0x202 <MakeFriends+0x108>
     200:	82 c0       	rjmp	.+260    	; 0x306 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     202:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <whoami>
     206:	91 30       	cpi	r25, 0x01	; 1
     208:	11 f4       	brne	.+4      	; 0x20e <MakeFriends+0x114>
     20a:	83 50       	subi	r24, 0x03	; 3
     20c:	14 c0       	rjmp	.+40     	; 0x236 <MakeFriends+0x13c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     20e:	92 30       	cpi	r25, 0x02	; 2
     210:	31 f4       	brne	.+12     	; 0x21e <MakeFriends+0x124>
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	91 f0       	breq	.+36     	; 0x23a <MakeFriends+0x140>
     216:	85 50       	subi	r24, 0x05	; 5
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	e8 f4       	brcc	.+58     	; 0x256 <MakeFriends+0x15c>
     21c:	0e c0       	rjmp	.+28     	; 0x23a <MakeFriends+0x140>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     21e:	93 30       	cpi	r25, 0x03	; 3
     220:	39 f4       	brne	.+14     	; 0x230 <MakeFriends+0x136>
     222:	9c ef       	ldi	r25, 0xFC	; 252
     224:	98 0f       	add	r25, r24
     226:	92 30       	cpi	r25, 0x02	; 2
     228:	40 f0       	brcs	.+16     	; 0x23a <MakeFriends+0x140>
     22a:	87 30       	cpi	r24, 0x07	; 7
     22c:	a1 f4       	brne	.+40     	; 0x256 <MakeFriends+0x15c>
     22e:	05 c0       	rjmp	.+10     	; 0x23a <MakeFriends+0x140>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     230:	94 30       	cpi	r25, 0x04	; 4
     232:	89 f4       	brne	.+34     	; 0x256 <MakeFriends+0x15c>
     234:	85 50       	subi	r24, 0x05	; 5
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	70 f4       	brcc	.+28     	; 0x256 <MakeFriends+0x15c>
                        progress |= NEXT;
     23a:	81 ef       	ldi	r24, 0xF1	; 241
     23c:	39 c0       	rjmp	.+114    	; 0x2b0 <MakeFriends+0x1b6>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	69 f0       	breq	.+26     	; 0x25c <MakeFriends+0x162>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	c1 f1       	breq	.+112    	; 0x2b6 <MakeFriends+0x1bc>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     246:	84 30       	cpi	r24, 0x04	; 4
     248:	09 f0       	breq	.+2      	; 0x24c <MakeFriends+0x152>
     24a:	5d c0       	rjmp	.+186    	; 0x306 <MakeFriends+0x20c>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     24c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <chkTmr.3790>
     250:	80 34       	cpi	r24, 0x40	; 64
     252:	08 f4       	brcc	.+2      	; 0x256 <MakeFriends+0x15c>
     254:	58 c0       	rjmp	.+176    	; 0x306 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     256:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <progress.3788>
     25a:	55 c0       	rjmp	.+170    	; 0x306 <MakeFriends+0x20c>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     264:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     268:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <chkTmr.3790>
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	38 f0       	brcs	.+14     	; 0x27e <MakeFriends+0x184>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     270:	2f ef       	ldi	r18, 0xFF	; 255
     272:	44 e6       	ldi	r20, 0x64	; 100
     274:	68 e0       	ldi	r22, 0x08	; 8
     276:	80 e8       	ldi	r24, 0x80	; 128
     278:	fe d7       	rcall	.+4092   	; 0x1276 <floatAround>
     27a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     27e:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <chkTmr.3790>
     282:	8a 3f       	cpi	r24, 0xFA	; 250
     284:	08 f4       	brcc	.+2      	; 0x288 <MakeFriends+0x18e>
     286:	3f c0       	rjmp	.+126    	; 0x306 <MakeFriends+0x20c>
                candidate = jackIn-whoami;
     288:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <whoami>
     28c:	90 91 33 38 	lds	r25, 0x3833	; 0x803833 <jackIn.3791>
     290:	98 1b       	sub	r25, r24
     292:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <__data_end>
                if (candidate > whoami) {
     296:	89 17       	cp	r24, r25
     298:	10 f4       	brcc	.+4      	; 0x29e <MakeFriends+0x1a4>
                    setDAC[0] = 249;
     29a:	89 ef       	ldi	r24, 0xF9	; 249
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <MakeFriends+0x1ac>
                } else {
                    setDAC[0] = whoami * 51;
     29e:	93 e3       	ldi	r25, 0x33	; 51
     2a0:	89 9f       	mul	r24, r25
     2a2:	80 2d       	mov	r24, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2aa:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <progress.3788>
     2ae:	80 6f       	ori	r24, 0xF0	; 240
     2b0:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <progress.3788>
     2b4:	28 c0       	rjmp	.+80     	; 0x306 <MakeFriends+0x20c>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2b6:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <chkTmr.3790>
     2ba:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2bc:	20 f1       	brcs	.+72     	; 0x306 <MakeFriends+0x20c>
     2be:	05 df       	rcall	.-502    	; 0xca <chkVolt250>
     2c0:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <jackIn.3791>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2c4:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <__data_end>
     2c8:	48 2f       	mov	r20, r24
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	20 91 3f 38 	lds	r18, 0x383F	; 0x80383f <whoami>
     2d0:	29 17       	cp	r18, r25
     2d2:	08 f4       	brcc	.+2      	; 0x2d6 <MakeFriends+0x1dc>
     2d4:	29 2f       	mov	r18, r25
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	2b 5f       	subi	r18, 0xFB	; 251
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	42 17       	cp	r20, r18
     2de:	53 07       	cpc	r21, r19
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <MakeFriends+0x1ea>
     2e2:	b9 cf       	rjmp	.-142    	; 0x256 <MakeFriends+0x15c>
                    UpdateState(99+candidate);
     2e4:	83 e6       	ldi	r24, 0x63	; 99
     2e6:	89 0f       	add	r24, r25
     2e8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
                 
                    effect = 31;
     2ec:	8f e1       	ldi	r24, 0x1F	; 31
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     2f4:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                    WingBar(candidate, whoami);
     2f8:	60 91 3f 38 	lds	r22, 0x383F	; 0x80383f <whoami>
     2fc:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <__data_end>
     300:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <WingBar>
     304:	d2 cf       	rjmp	.-92     	; 0x2aa <MakeFriends+0x1b0>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     314:	e6 e2       	ldi	r30, 0x26	; 38
     316:	f4 e0       	ldi	r31, 0x04	; 4
     318:	80 83       	st	Z, r24
     31a:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     31e:	a1 e2       	ldi	r26, 0x21	; 33
     320:	b4 e0       	ldi	r27, 0x04	; 4
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	9c 93       	st	X, r25
     326:	90 83       	st	Z, r25
     328:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     32c:	e0 e1       	ldi	r30, 0x10	; 16
     32e:	f8 e0       	ldi	r31, 0x08	; 8
     330:	97 e0       	ldi	r25, 0x07	; 7
     332:	96 83       	std	Z+6, r25	; 0x06
     334:	98 e0       	ldi	r25, 0x08	; 8
     336:	94 83       	std	Z+4, r25	; 0x04
     338:	83 83       	std	Z+3, r24	; 0x03
     33a:	8c 93       	st	X, r24
     33c:	85 81       	ldd	r24, Z+5	; 0x05
     33e:	81 60       	ori	r24, 0x01	; 1
     340:	85 83       	std	Z+5, r24	; 0x05
     342:	85 81       	ldd	r24, Z+5	; 0x05
     344:	84 6c       	ori	r24, 0xC4	; 196
     346:	85 83       	std	Z+5, r24	; 0x05
     348:	08 95       	ret

0000034a <I2C_recover>:
     34a:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     34e:	88 60       	ori	r24, 0x08	; 8
     350:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     354:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     35e:	99 e0       	ldi	r25, 0x09	; 9
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     368:	30 e1       	ldi	r19, 0x10	; 16
     36a:	3a 95       	dec	r19
     36c:	f1 f7       	brne	.-4      	; 0x36a <I2C_recover+0x20>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <I2C_recover+0x26>
     370:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     374:	30 e1       	ldi	r19, 0x10	; 16
     376:	3a 95       	dec	r19
     378:	f1 f7       	brne	.-4      	; 0x376 <I2C_recover+0x2c>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <I2C_recover+0x32>
     37c:	91 50       	subi	r25, 0x01	; 1
     37e:	89 f7       	brne	.-30     	; 0x362 <I2C_recover+0x18>
     380:	28 e0       	ldi	r18, 0x08	; 8
     382:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     386:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     390:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     394:	91 60       	ori	r25, 0x01	; 1
     396:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39e:	94 6c       	ori	r25, 0xC4	; 196
     3a0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a4:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3a8:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3ac:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3b0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ba:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3be:	84 6c       	ori	r24, 0xC4	; 196
     3c0:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c4:	08 95       	ret

000003c6 <I2C_start>:
     3c6:	28 2f       	mov	r18, r24
     3c8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3cc:	90 6c       	ori	r25, 0xC0	; 192
     3ce:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d6:	89 2f       	mov	r24, r25
     3d8:	84 70       	andi	r24, 0x04	; 4
     3da:	92 fd       	sbrc	r25, 2
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <I2C_start+0x1e>
     3de:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3e2:	08 95       	ret
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	08 95       	ret

000003e8 <I2C_wait_ACK>:
     3e8:	8c e0       	ldi	r24, 0x0C	; 12
     3ea:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
     3ee:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f2:	87 fd       	sbrc	r24, 7
     3f4:	0a c0       	rjmp	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	86 fd       	sbrc	r24, 6
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fe:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     402:	81 11       	cpse	r24, r1
     404:	f4 cf       	rjmp	.-24     	; 0x3ee <I2C_wait_ACK+0x6>
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	08 95       	ret
     40a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40e:	80 6c       	ori	r24, 0xC0	; 192
     410:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     414:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     418:	82 fd       	sbrc	r24, 2
     41a:	09 c0       	rjmp	.+18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     41c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	83 fd       	sbrc	r24, 3
     422:	07 c0       	rjmp	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     424:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     428:	82 95       	swap	r24
     42a:	81 70       	andi	r24, 0x01	; 1
     42c:	08 95       	ret
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	08 95       	ret
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	08 95       	ret

00000436 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     436:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     438:	8c e0       	ldi	r24, 0x0C	; 12
     43a:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     43e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     442:	89 2f       	mov	r24, r25
     444:	83 70       	andi	r24, 0x03	; 3
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	11 f0       	breq	.+4      	; 0x44e <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     44e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     452:	97 fd       	sbrc	r25, 7
     454:	06 c0       	rjmp	.+12     	; 0x462 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     456:	90 91 62 3a 	lds	r25, 0x3A62	; 0x803a62 <timeout_I2C>
     45a:	91 11       	cpse	r25, r1
     45c:	f8 cf       	rjmp	.-16     	; 0x44e <I2C_read+0x18>
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     462:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     466:	90 6c       	ori	r25, 0xC0	; 192
     468:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     46c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     470:	92 fd       	sbrc	r25, 2
     472:	1e c0       	rjmp	.+60     	; 0x4b0 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     474:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     478:	93 fd       	sbrc	r25, 3
     47a:	1d c0       	rjmp	.+58     	; 0x4b6 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     47c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     480:	89 2f       	mov	r24, r25
     482:	80 71       	andi	r24, 0x10	; 16
     484:	94 fd       	sbrc	r25, 4
     486:	16 c0       	rjmp	.+44     	; 0x4b4 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     488:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     48c:	61 11       	cpse	r22, r1
     48e:	02 c0       	rjmp	.+4      	; 0x494 <I2C_read+0x5e>
     490:	9b 7f       	andi	r25, 0xFB	; 251
     492:	01 c0       	rjmp	.+2      	; 0x496 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     494:	94 60       	ori	r25, 0x04	; 4
     496:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     49a:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     49e:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     4a0:	61 11       	cpse	r22, r1
     4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <I2C_read+0x80>
     4a4:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4a8:	92 60       	ori	r25, 0x02	; 2
     4aa:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4ae:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4b4:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     4b6:	08 95       	ret

000004b8 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     4b8:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4c0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c4:	93 70       	andi	r25, 0x03	; 3
     4c6:	92 30       	cpi	r25, 0x02	; 2
     4c8:	b1 f4       	brne	.+44     	; 0x4f6 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4ca:	80 81       	ld	r24, Z
     4cc:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4d0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d4:	86 fd       	sbrc	r24, 6
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4d8:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     4dc:	81 11       	cpse	r24, r1
     4de:	f8 cf       	rjmp	.-16     	; 0x4d0 <I2C_write+0x18>
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4e4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e8:	82 fd       	sbrc	r24, 2
     4ea:	07 c0       	rjmp	.+14     	; 0x4fa <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4ec:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4f0:	82 95       	swap	r24
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     4f6:	88 e0       	ldi	r24, 0x08	; 8
     4f8:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4fa:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     4fc:	08 95       	ret

000004fe <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     4fe:	e0 e1       	ldi	r30, 0x10	; 16
     500:	f8 e0       	ldi	r31, 0x08	; 8
     502:	84 81       	ldd	r24, Z+4	; 0x04
     504:	83 60       	ori	r24, 0x03	; 3
     506:	84 83       	std	Z+4, r24	; 0x04
     508:	08 95       	ret

0000050a <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	6b 01       	movw	r12, r22
     51a:	f4 2e       	mov	r15, r20
     51c:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     51e:	18 2f       	mov	r17, r24
     520:	11 0f       	add	r17, r17
     522:	81 2f       	mov	r24, r17
     524:	50 df       	rcall	.-352    	; 0x3c6 <I2C_start>
	if (status != 0) goto error;
     526:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     528:	2b c0       	rjmp	.+86     	; 0x580 <I2C_read_bytes+0x76>
     52a:	5e df       	rcall	.-324    	; 0x3e8 <I2C_wait_ACK>
	if (status == 1) {
     52c:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     52e:	19 f4       	brne	.+6      	; 0x536 <I2C_read_bytes+0x2c>
     530:	e6 df       	rcall	.-52     	; 0x4fe <I2C_stop>
		return 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	27 c0       	rjmp	.+78     	; 0x584 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     536:	81 11       	cpse	r24, r1
     538:	23 c0       	rjmp	.+70     	; 0x580 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     53a:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     53c:	49 f0       	breq	.+18     	; 0x550 <I2C_read_bytes+0x46>
     53e:	c6 01       	movw	r24, r12
     540:	bb df       	rcall	.-138    	; 0x4b8 <I2C_write>
	    if (status != 0) goto error;
     542:	81 11       	cpse	r24, r1
     544:	1d c0       	rjmp	.+58     	; 0x580 <I2C_read_bytes+0x76>
        ++reg_ptr;
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	c8 1a       	sub	r12, r24
     54a:	d8 0a       	sbc	r13, r24
        --reg_len;
     54c:	fa 94       	dec	r15
     54e:	f5 cf       	rjmp	.-22     	; 0x53a <I2C_read_bytes+0x30>
     550:	01 34       	cpi	r16, 0x41	; 65
     552:	08 f0       	brcs	.+2      	; 0x556 <I2C_read_bytes+0x4c>
     554:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     556:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     558:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     55c:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     55e:	40 f0       	brcs	.+16     	; 0x570 <I2C_read_bytes+0x66>
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	ce 01       	movw	r24, r28
     564:	68 df       	rcall	.-304    	; 0x436 <I2C_read>
		if (status != 0) goto error;
     566:	81 11       	cpse	r24, r1
     568:	0b c0       	rjmp	.+22     	; 0x580 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     56a:	21 96       	adiw	r28, 0x01	; 1
     56c:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     56e:	f6 cf       	rjmp	.-20     	; 0x55c <I2C_read_bytes+0x52>
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     574:	60 df       	rcall	.-320    	; 0x436 <I2C_read>
     576:	81 11       	cpse	r24, r1
	I2C_stop();
     578:	03 c0       	rjmp	.+6      	; 0x580 <I2C_read_bytes+0x76>
     57a:	c1 df       	rcall	.-126    	; 0x4fe <I2C_stop>
	return 0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     580:	e4 de       	rcall	.-568    	; 0x34a <I2C_recover>
     582:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     584:	df 91       	pop	r29
}
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	08 95       	ret

00000594 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     594:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <lanyardPos>
    lanyardCnt      = 0;
     598:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <lanyardCnt>
    lanyardState    = TRUE;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    ClearHackerLeds();
     5a2:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <ClearHackerLeds>

000005a6 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     5a6:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     5a8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	81 f4       	brne	.+32     	; 0x5d0 <LanyardCode+0x2a>
     5b0:	6a e0       	ldi	r22, 0x0A	; 10
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <lanyardLastActive>
     5b8:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <lanyardLastActive+0x1>
     5bc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <idleTimeout>
     5c0:	88 23       	and	r24, r24
     5c2:	31 f0       	breq	.+12     	; 0x5d0 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        initLanyard();
     5c4:	e7 df       	rcall	.-50     	; 0x594 <initLanyard>
        gameNow = TEXT;
     5c6:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
        ClearHackerLeds();
     5ca:	0e 94 22 0b 	call	0x1644	; 0x1644 <ClearHackerLeds>
        return 0;
     5ce:	9b c0       	rjmp	.+310    	; 0x706 <LanyardCode+0x160>
    }

    if (CheckState(LANYARD_COMPLETED))
     5d0:	8b e7       	ldi	r24, 0x7B	; 123
     5d2:	2b d7       	rcall	.+3670   	; 0x142a <CheckState>
     5d4:	81 11       	cpse	r24, r1
     5d6:	97 c0       	rjmp	.+302    	; 0x706 <LanyardCode+0x160>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5d8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     5dc:	88 23       	and	r24, r24
     5de:	19 f0       	breq	.+6      	; 0x5e6 <LanyardCode+0x40>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <LanyardCode+0x40>
     5e4:	90 c0       	rjmp	.+288    	; 0x706 <LanyardCode+0x160>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     5e6:	c0 91 1a bf 	lds	r28, 0xBF1A	; 0x80bf1a <__bss_end+0x8406>
     5ea:	ec 2f       	mov	r30, r28
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5f2:	8f 3f       	cpi	r24, 0xFF	; 255
     5f4:	19 f0       	breq	.+6      	; 0x5fc <LanyardCode+0x56>
     5f6:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <LanyardCode+0x58>
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	eb 53       	subi	r30, 0x3B	; 59
     600:	f5 4c       	sbci	r31, 0xC5	; 197
     602:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	09 f4       	brne	.+2      	; 0x60a <LanyardCode+0x64>
     608:	7e c0       	rjmp	.+252    	; 0x706 <LanyardCode+0x160>
        return 0;

    if (buttonState == lastButtonState)
     60a:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     60e:	89 17       	cp	r24, r25
     610:	09 f4       	brne	.+2      	; 0x614 <LanyardCode+0x6e>
     612:	79 c0       	rjmp	.+242    	; 0x706 <LanyardCode+0x160>
        return 0;

    lanyardLastActive = getClock();
     614:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <getClock>
     618:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <lanyardLastActive>
     61c:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     620:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     624:	8f 3f       	cpi	r24, 0xFF	; 255
     626:	09 f0       	breq	.+2      	; 0x62a <LanyardCode+0x84>
     628:	6e c0       	rjmp	.+220    	; 0x706 <LanyardCode+0x160>
        effect = 0x13f + (buttonState << 5);
     62a:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     62e:	20 e2       	ldi	r18, 0x20	; 32
     630:	82 9f       	mul	r24, r18
     632:	c0 01       	movw	r24, r0
     634:	11 24       	eor	r1, r1
     636:	81 5c       	subi	r24, 0xC1	; 193
     638:	9e 4f       	sbci	r25, 0xFE	; 254
     63a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     63e:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>

        if (gameNow != LANYARD)
     642:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     646:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     648:	09 f0       	breq	.+2      	; 0x64c <LanyardCode+0xa6>
     64a:	a4 df       	rcall	.-184    	; 0x594 <initLanyard>
        gameNow = LANYARD;
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     652:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <lanyardPos>
     656:	e8 2f       	mov	r30, r24
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ee 5f       	subi	r30, 0xFE	; 254
     65c:	f0 44       	sbci	r31, 0x40	; 64
     65e:	20 81       	ld	r18, Z
     660:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     664:	29 13       	cpse	r18, r25
     666:	12 c0       	rjmp	.+36     	; 0x68c <LanyardCode+0xe6>
            lanyardState &= TRUE;
     668:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     66c:	91 70       	andi	r25, 0x01	; 1
     66e:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     672:	e0 91 29 bf 	lds	r30, 0xBF29	; 0x80bf29 <__bss_end+0x8415>
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	eb 53       	subi	r30, 0x3B	; 59
     67a:	f5 4c       	sbci	r31, 0xC5	; 197
     67c:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     67e:	e0 91 28 bf 	lds	r30, 0xBF28	; 0x80bf28 <__bss_end+0x8414>
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	eb 53       	subi	r30, 0x3B	; 59
     686:	f5 4c       	sbci	r31, 0xC5	; 197
     688:	10 82       	st	Z, r1
     68a:	09 c0       	rjmp	.+18     	; 0x69e <LanyardCode+0xf8>
        } else {
            lanyardState = FALSE;
     68c:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     690:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     692:	28 f4       	brcc	.+10     	; 0x69e <LanyardCode+0xf8>
     694:	7f df       	rcall	.-258    	; 0x594 <initLanyard>
                gameNow         = BASTET;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>
                return 0;
     69c:	34 c0       	rjmp	.+104    	; 0x706 <LanyardCode+0x160>
            }
        }
        lanyardPos++;
     69e:	8f 5f       	subi	r24, 0xFF	; 255
     6a0:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <lanyardPos>
        lanyardCnt++;            
     6a4:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <lanyardCnt>
     6a8:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     6aa:	94 30       	cpi	r25, 0x04	; 4
     6ac:	18 f4       	brcc	.+6      	; 0x6b4 <LanyardCode+0x10e>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     6ae:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <lanyardCnt>
     6b2:	29 c0       	rjmp	.+82     	; 0x706 <LanyardCode+0x160>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     6b4:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <lanyardCnt>
            if (lanyardState == TRUE) {
     6b8:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6bc:	91 30       	cpi	r25, 0x01	; 1
     6be:	e1 f4       	brne	.+56     	; 0x6f8 <LanyardCode+0x152>
                if ((lanyardPos % 4) == 0) {
     6c0:	98 2f       	mov	r25, r24
     6c2:	93 70       	andi	r25, 0x03	; 3
     6c4:	69 f4       	brne	.+26     	; 0x6e0 <LanyardCode+0x13a>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     6c6:	e8 2f       	mov	r30, r24
     6c8:	e6 95       	lsr	r30
     6ca:	e6 95       	lsr	r30
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	e4 5d       	subi	r30, 0xD4	; 212
     6d0:	f0 44       	sbci	r31, 0x40	; 64
     6d2:	e5 81       	ldd	r30, Z+5	; 0x05
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6da:	eb 53       	subi	r30, 0x3B	; 59
     6dc:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == LANYARD_LEN) {
     6de:	90 83       	st	Z, r25
     6e0:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     6e2:	89 f4       	brne	.+34     	; 0x706 <LanyardCode+0x160>
     6e4:	8b e7       	ldi	r24, 0x7B	; 123
     6e6:	80 d6       	rcall	.+3328   	; 0x13e8 <UpdateState>
                    iLED[CAT]       = 0;
     6e8:	ec 2f       	mov	r30, r28
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	eb 53       	subi	r30, 0x3B	; 59
     6ee:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     6f0:	10 82       	st	Z, r1
     6f2:	82 e4       	ldi	r24, 0x42	; 66
     6f4:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <LanyardCode+0x158>
     6f8:	4d df       	rcall	.-358    	; 0x594 <initLanyard>
                effect = 0x21;
     6fa:	81 e2       	ldi	r24, 0x21	; 33
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     702:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
            }
        }
    }

    return 0;
}
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     70c:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <mazeHckrPos>
    mazePos = 0;
     710:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <mazePos>
    mazeCnt = 0;
     714:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazeCnt>
    mazeState = TRUE;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     71e:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <inverted>
    ClearHackerLeds();
     722:	90 c7       	rjmp	.+3872   	; 0x1644 <ClearHackerLeds>

00000724 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t field;
 
    field = abs(val);
     724:	97 ff       	sbrs	r25, 7
     726:	03 c0       	rjmp	.+6      	; 0x72e <showFieldStrength+0xa>
     728:	91 95       	neg	r25
     72a:	81 95       	neg	r24
     72c:	91 09       	sbc	r25, r1
 
    if ( field > HALL_FIELD_0 )
     72e:	8d 33       	cpi	r24, 0x3D	; 61
     730:	91 05       	cpc	r25, r1
     732:	1c f0       	brlt	.+6      	; 0x73a <showFieldStrength+0x16>
         gameNow = MAZE;
     734:	21 e0       	ldi	r18, 0x01	; 1
     736:	20 93 3e 38 	sts	0x383E, r18	; 0x80383e <gameNow>

    if (gameNow == MAZE) {
     73a:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <gameNow>
     73e:	21 30       	cpi	r18, 0x01	; 1
     740:	09 f5       	brne	.+66     	; 0x784 <showFieldStrength+0x60>
        if ( field < HALL_FIELD_0 )
     742:	8c 33       	cpi	r24, 0x3C	; 60
     744:	91 05       	cpc	r25, r1
     746:	1c f4       	brge	.+6      	; 0x74e <showFieldStrength+0x2a>
            WingBar(0,0);
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	1a c0       	rjmp	.+52     	; 0x782 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_1 )
     74e:	88 37       	cpi	r24, 0x78	; 120
     750:	91 05       	cpc	r25, r1
     752:	1c f4       	brge	.+6      	; 0x75a <showFieldStrength+0x36>
            WingBar(1,1);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	14 c0       	rjmp	.+40     	; 0x782 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_2 )
     75a:	86 39       	cpi	r24, 0x96	; 150
     75c:	91 05       	cpc	r25, r1
     75e:	1c f4       	brge	.+6      	; 0x766 <showFieldStrength+0x42>
            WingBar(2,2);
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	0e c0       	rjmp	.+28     	; 0x782 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_3 )
     766:	88 3c       	cpi	r24, 0xC8	; 200
     768:	91 05       	cpc	r25, r1
     76a:	1c f4       	brge	.+6      	; 0x772 <showFieldStrength+0x4e>
            WingBar(3,3);
     76c:	63 e0       	ldi	r22, 0x03	; 3
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	08 c0       	rjmp	.+16     	; 0x782 <showFieldStrength+0x5e>
        else if ( field < HALL_FIELD_4 )
     772:	8c 32       	cpi	r24, 0x2C	; 44
     774:	91 40       	sbci	r25, 0x01	; 1
     776:	1c f4       	brge	.+6      	; 0x77e <showFieldStrength+0x5a>
            WingBar(4,4);
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	02 c0       	rjmp	.+4      	; 0x782 <showFieldStrength+0x5e>
        else
            WingBar(5,5);
     77e:	65 e0       	ldi	r22, 0x05	; 5
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	22 c7       	rjmp	.+3652   	; 0x15c8 <WingBar>
     784:	08 95       	ret

00000786 <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     78a:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	71 f4       	brne	.+28     	; 0x7ae <MagnetMaze+0x28>
     792:	6a e0       	ldi	r22, 0x0A	; 10
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <mazeLastActive>
     79a:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeLastActive+0x1>
     79e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <idleTimeout>
     7a2:	88 23       	and	r24, r24
     7a4:	21 f0       	breq	.+8      	; 0x7ae <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     7a6:	b2 df       	rcall	.-156    	; 0x70c <initMaze>
        gameNow = TEXT;
     7a8:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
        return 0;
     7ac:	e5 c0       	rjmp	.+458    	; 0x978 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     7ae:	87 ef       	ldi	r24, 0xF7	; 247
     7b0:	3c d6       	rcall	.+3192   	; 0x142a <CheckState>
     7b2:	81 11       	cpse	r24, r1
     7b4:	e1 c0       	rjmp	.+450    	; 0x978 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7b6:	8d e7       	ldi	r24, 0x7D	; 125
     7b8:	38 d6       	rcall	.+3184   	; 0x142a <CheckState>
     7ba:	81 11       	cpse	r24, r1
     7bc:	dd c0       	rjmp	.+442    	; 0x978 <MagnetMaze+0x1f2>
     7be:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <MagnetMaze+0x42>
     7c6:	d8 c0       	rjmp	.+432    	; 0x978 <MagnetMaze+0x1f2>
     7c8:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <calHall>
        return 0;

    if (calHall == 0)
     7cc:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <calHall+0x1>
     7d0:	89 2b       	or	r24, r25
     7d2:	41 f4       	brne	.+16     	; 0x7e4 <MagnetMaze+0x5e>
     7d4:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcHall>
        calHall = adcHall;
     7d8:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcHall+0x1>
     7dc:	80 93 ed 3a 	sts	0x3AED, r24	; 0x803aed <calHall>
     7e0:	90 93 ee 3a 	sts	0x3AEE, r25	; 0x803aee <calHall+0x1>
     7e4:	c0 91 bd 3a 	lds	r28, 0x3ABD	; 0x803abd <adcHall>

    int16_t valHall = adcHall - calHall;
     7e8:	d0 91 be 3a 	lds	r29, 0x3ABE	; 0x803abe <adcHall+0x1>
     7ec:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <calHall>
     7f0:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <calHall+0x1>
     7f4:	c8 1b       	sub	r28, r24
     7f6:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     7f8:	ce 01       	movw	r24, r28
     7fa:	94 df       	rcall	.-216    	; 0x724 <showFieldStrength>
     7fc:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <curHallState>

    switch (curHallState) {
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	89 f0       	breq	.+34     	; 0x826 <MagnetMaze+0xa0>
     804:	18 f0       	brcs	.+6      	; 0x80c <MagnetMaze+0x86>
     806:	82 30       	cpi	r24, 0x02	; 2
     808:	c1 f0       	breq	.+48     	; 0x83a <MagnetMaze+0xb4>
     80a:	1f c0       	rjmp	.+62     	; 0x84a <MagnetMaze+0xc4>
     80c:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     80e:	9e ef       	ldi	r25, 0xFE	; 254
     810:	d9 07       	cpc	r29, r25
     812:	14 f4       	brge	.+4      	; 0x818 <MagnetMaze+0x92>
     814:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     816:	04 c0       	rjmp	.+8      	; 0x820 <MagnetMaze+0x9a>
     818:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     81a:	d1 40       	sbci	r29, 0x01	; 1
     81c:	5c f0       	brlt	.+22     	; 0x834 <MagnetMaze+0xae>
     81e:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     820:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <newHallState>
     824:	12 c0       	rjmp	.+36     	; 0x84a <MagnetMaze+0xc4>
     826:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	d9 07       	cpc	r29, r25
     82c:	c4 f7       	brge	.-16     	; 0x81e <MagnetMaze+0x98>
     82e:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     830:	df 4f       	sbci	r29, 0xFF	; 255
     832:	84 f3       	brlt	.-32     	; 0x814 <MagnetMaze+0x8e>
     834:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     838:	08 c0       	rjmp	.+16     	; 0x84a <MagnetMaze+0xc4>
     83a:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     83c:	9e ef       	ldi	r25, 0xFE	; 254
     83e:	d9 07       	cpc	r29, r25
     840:	4c f3       	brlt	.-46     	; 0x814 <MagnetMaze+0x8e>
     842:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     844:	d1 05       	cpc	r29, r1
     846:	b4 f3       	brlt	.-20     	; 0x834 <MagnetMaze+0xae>
     848:	ea cf       	rjmp	.-44     	; 0x81e <MagnetMaze+0x98>
     84a:	c0 91 1a bf 	lds	r28, 0xBF1A	; 0x80bf1a <__bss_end+0x8406>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     84e:	ec 2f       	mov	r30, r28
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	90 91 4d 38 	lds	r25, 0x384D	; 0x80384d <newHallState>
     856:	99 23       	and	r25, r25
     858:	19 f0       	breq	.+6      	; 0x860 <MagnetMaze+0xda>
     85a:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     85e:	01 c0       	rjmp	.+2      	; 0x862 <MagnetMaze+0xdc>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	eb 53       	subi	r30, 0x3B	; 59
     864:	f5 4c       	sbci	r31, 0xC5	; 197
     866:	20 83       	st	Z, r18
     868:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     86a:	31 e0       	ldi	r19, 0x01	; 1
     86c:	20 93 3c 38 	sts	0x383C, r18	; 0x80383c <effect>
     870:	30 93 3d 38 	sts	0x383D, r19	; 0x80383d <effect+0x1>
     874:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     876:	09 f4       	brne	.+2      	; 0x87a <MagnetMaze+0xf4>
     878:	7f c0       	rjmp	.+254    	; 0x978 <MagnetMaze+0x1f2>
     87a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     87e:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <mazeLastActive>
     882:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeLastActive+0x1>
     886:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     88a:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <newHallState>
     88e:	91 11       	cpse	r25, r1
     890:	08 c0       	rjmp	.+16     	; 0x8a2 <MagnetMaze+0x11c>
     892:	88 23       	and	r24, r24
     894:	31 f0       	breq	.+12     	; 0x8a2 <MagnetMaze+0x11c>
     896:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     898:	81 30       	cpi	r24, 0x01	; 1
     89a:	09 f4       	brne	.+2      	; 0x89e <MagnetMaze+0x118>
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <inverted>
     8a2:	80 93 4e 38 	sts	0x384E, r24	; 0x80384e <curHallState>

        curHallState = newHallState;
     8a6:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     8a8:	09 f4       	brne	.+2      	; 0x8ac <MagnetMaze+0x126>
     8aa:	66 c0       	rjmp	.+204    	; 0x978 <MagnetMaze+0x1f2>
     8ac:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
            if (gameNow == TEXT)
     8b0:	81 11       	cpse	r24, r1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <MagnetMaze+0x130>
                initMaze();
     8b4:	2b df       	rcall	.-426    	; 0x70c <initMaze>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     8b8:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>
     8bc:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     8c0:	20 91 4e 38 	lds	r18, 0x384E	; 0x80384e <curHallState>
     8c4:	88 23       	and	r24, r24
     8c6:	11 f0       	breq	.+4      	; 0x8cc <MagnetMaze+0x146>
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	28 27       	eor	r18, r24
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <mazePos>
     8d2:	e8 2f       	mov	r30, r24
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	e8 59       	subi	r30, 0x98	; 152
     8d8:	f0 44       	sbci	r31, 0x40	; 64
     8da:	40 81       	ld	r20, Z
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	24 17       	cp	r18, r20
     8e0:	35 07       	cpc	r19, r21
     8e2:	91 f4       	brne	.+36     	; 0x908 <MagnetMaze+0x182>
     8e4:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     8e8:	91 70       	andi	r25, 0x01	; 1
     8ea:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     8ee:	e0 91 29 bf 	lds	r30, 0xBF29	; 0x80bf29 <__bss_end+0x8415>
                iLED[EYE[R][L]] = 0;
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	eb 53       	subi	r30, 0x3B	; 59
     8f6:	f5 4c       	sbci	r31, 0xC5	; 197
     8f8:	10 82       	st	Z, r1
     8fa:	e0 91 28 bf 	lds	r30, 0xBF28	; 0x80bf28 <__bss_end+0x8414>
                iLED[EYE[R][R]] = 0;
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	eb 53       	subi	r30, 0x3B	; 59
     902:	f5 4c       	sbci	r31, 0xC5	; 197
     904:	10 82       	st	Z, r1
     906:	02 c0       	rjmp	.+4      	; 0x90c <MagnetMaze+0x186>
     908:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     90c:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     90e:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <mazePos>
     912:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazeCnt>
            mazeCnt++;            
     916:	9f 5f       	subi	r25, 0xFF	; 255
     918:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     91a:	18 f4       	brcc	.+6      	; 0x922 <MagnetMaze+0x19c>
     91c:	90 93 4a 38 	sts	0x384A, r25	; 0x80384a <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     920:	2b c0       	rjmp	.+86     	; 0x978 <MagnetMaze+0x1f2>
     922:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     926:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     92a:	91 30       	cpi	r25, 0x01	; 1
     92c:	e1 f4       	brne	.+56     	; 0x966 <MagnetMaze+0x1e0>
     92e:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     932:	e9 2f       	mov	r30, r25
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	e4 5d       	subi	r30, 0xD4	; 212
     938:	f0 44       	sbci	r31, 0x40	; 64
     93a:	e6 81       	ldd	r30, Z+6	; 0x06
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     942:	eb 53       	subi	r30, 0x3B	; 59
     944:	f5 4c       	sbci	r31, 0xC5	; 197
     946:	20 83       	st	Z, r18
     948:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     94a:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     94e:	82 31       	cpi	r24, 0x12	; 18
     950:	99 f4       	brne	.+38     	; 0x978 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     952:	8d e7       	ldi	r24, 0x7D	; 125
     954:	49 d5       	rcall	.+2706   	; 0x13e8 <UpdateState>
     956:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	eb 53       	subi	r30, 0x3B	; 59
     95c:	f5 4c       	sbci	r31, 0xC5	; 197
     95e:	10 82       	st	Z, r1
                        effect = 0x42;
     960:	82 e4       	ldi	r24, 0x42	; 66
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	05 c0       	rjmp	.+10     	; 0x970 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     966:	d2 de       	rcall	.-604    	; 0x70c <initMaze>
     968:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
                    gameNow   = TEXT;
     96c:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
     974:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
     978:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <Setup>:
     980:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     982:	df 93       	push	r29
    cli();
     984:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     986:	88 ed       	ldi	r24, 0xD8	; 216
     988:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     98a:	c1 e0       	ldi	r28, 0x01	; 1
     98c:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     990:	8a e4       	ldi	r24, 0x4A	; 74
     992:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     996:	8c e7       	ldi	r24, 0x7C	; 124
     998:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     99c:	9f e3       	ldi	r25, 0x3F	; 63
     99e:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     9a2:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9a6:	80 68       	ori	r24, 0x80	; 128
     9a8:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     9ac:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9b0:	80 68       	ori	r24, 0x80	; 128
     9b2:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     9b6:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9ba:	80 68       	ori	r24, 0x80	; 128
     9bc:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     9c0:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9c4:	80 68       	ori	r24, 0x80	; 128
     9c6:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     9ca:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     9d4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     9de:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     9e2:	d2 e0       	ldi	r29, 0x02	; 2
     9e4:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     9e8:	2b e5       	ldi	r18, 0x5B	; 91
     9ea:	31 e0       	ldi	r19, 0x01	; 1
     9ec:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     9f0:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     9f4:	80 ea       	ldi	r24, 0xA0	; 160
     9f6:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     9fa:	80 ec       	ldi	r24, 0xC0	; 192
     9fc:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a06:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a08:	1d ba       	out	0x1d, r1	; 29
    GPIOR3 = 0;    //
     a0a:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a0c:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a16:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a1a:	87 e7       	ldi	r24, 0x77	; 119
     a1c:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a20:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a24:	8b e0       	ldi	r24, 0x0B	; 11
     a26:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     a2a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     a3a:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a46:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     a4a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     a4e:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     a52:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     a56:	8b e8       	ldi	r24, 0x8B	; 139
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a5e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     a62:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     a66:	53 dc       	rcall	.-1882   	; 0x30e <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     a68:	82 e1       	ldi	r24, 0x12	; 18
     a6a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     a6e:	80 e2       	ldi	r24, 0x20	; 32
     a70:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     a74:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     a78:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     a7c:	84 e4       	ldi	r24, 0x44	; 68
     a7e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     a82:	8e e1       	ldi	r24, 0x1E	; 30
     a84:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     a88:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     a8c:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a90:	81 60       	ori	r24, 0x01	; 1
     a92:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     a96:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     a9a:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     a9e:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     aa2:	82 e5       	ldi	r24, 0x52	; 82
     aa4:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     aa8:	84 e0       	ldi	r24, 0x04	; 4
     aaa:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     aae:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     ab2:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     ab6:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     aba:	81 60       	ori	r24, 0x01	; 1
     abc:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     ac0:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     ad0:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     ada:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     ade:	80 fd       	sbrc	r24, 0
     ae0:	fc cf       	rjmp	.-8      	; 0xada <Setup+0x15a>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     ae2:	80 e3       	ldi	r24, 0x30	; 48
     ae4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     ae8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     aec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     af0:	82 fd       	sbrc	r24, 2
     af2:	fc cf       	rjmp	.-8      	; 0xaec <Setup+0x16c>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	98 e7       	ldi	r25, 0x78	; 120
     af8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     afc:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b00:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b04:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b08:	82 96       	adiw	r24, 0x22	; 34
     b0a:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <tmp16bit>
     b0e:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b12:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b16:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b1a:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     b1e:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     b22:	28 17       	cp	r18, r24
     b24:	39 07       	cpc	r19, r25
     b26:	70 f4       	brcc	.+28     	; 0xb44 <Setup+0x1c4>
     b28:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b2c:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b30:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     b34:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     b38:	82 1b       	sub	r24, r18
     b3a:	93 0b       	sbc	r25, r19
     b3c:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <tmp16bit>
     b40:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     b44:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b48:	83 fd       	sbrc	r24, 3
     b4a:	fc cf       	rjmp	.-8      	; 0xb44 <Setup+0x1c4>
    RTC_CMP            = tmp16bit;                         //Button timing
     b4c:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     b50:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     b54:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b58:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     b6e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b72:	80 fd       	sbrc	r24, 0
     b74:	fc cf       	rjmp	.-8      	; 0xb6e <Setup+0x1ee>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     b76:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     b80:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     b8a:	10 92 77 3a 	sts	0x3A77, r1	; 0x803a77 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     b8e:	87 e7       	ldi	r24, 0x77	; 119
     b90:	9a e3       	ldi	r25, 0x3A	; 58
     b92:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <serTxAddr>
     b96:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <serTxAddr+0x1>

    sei();
     b9a:	78 94       	sei
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
     bb0:	af 93       	push	r26
     bb2:	bf 93       	push	r27
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     bb8:	87 e0       	ldi	r24, 0x07	; 7
     bba:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     bbe:	84 e4       	ldi	r24, 0x44	; 68
     bc0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     bc4:	ec b3       	in	r30, 0x1c	; 28
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	e8 9f       	mul	r30, r24
     bca:	f0 01       	movw	r30, r0
     bcc:	11 24       	eor	r1, r1
     bce:	eb 53       	subi	r30, 0x3B	; 59
     bd0:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     bd2:	a8 e2       	ldi	r26, 0x28	; 40
     bd4:	ba e0       	ldi	r27, 0x0A	; 10
     bd6:	96 e0       	ldi	r25, 0x06	; 6
     bd8:	81 91       	ld	r24, Z+
     bda:	8d 93       	st	X+, r24
     bdc:	9a 95       	dec	r25
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     be0:	8b e0       	ldi	r24, 0x0B	; 11
     be2:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     be6:	8c b3       	in	r24, 0x1c	; 28
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	58 f4       	brcc	.+22     	; 0xc02 <__vector_8+0x60>
        asm(
     bec:	8c b3       	in	r24, 0x1c	; 28
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <__vector_8+0x52>
     bf2:	99 0f       	add	r25, r25
     bf4:	8a 95       	dec	r24
     bf6:	ea f7       	brpl	.-6      	; 0xbf2 <__vector_8+0x50>
     bf8:	99 b9       	out	0x09, r25	; 9
     bfa:	8c b3       	in	r24, 0x1c	; 28
     bfc:	83 95       	inc	r24
     bfe:	8c bb       	out	0x1c, r24	; 28
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c02:	8c b3       	in	r24, 0x1c	; 28
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	21 f4       	brne	.+8      	; 0xc10 <__vector_8+0x6e>
     c08:	2a 9a       	sbi	0x05, 2	; 5
     c0a:	83 95       	inc	r24
     c0c:	8c bb       	out	0x1c, r24	; 28
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <__vector_8+0x74>
     c10:	2e 9a       	sbi	0x05, 6	; 5
     c12:	88 27       	eor	r24, r24
     c14:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c16:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     c1a:	88 23       	and	r24, r24
     c1c:	29 f0       	breq	.+10     	; 0xc28 <__vector_8+0x86>
     c1e:	80 91 62 3a 	lds	r24, 0x3A62	; 0x803a62 <timeout_I2C>
     c22:	81 50       	subi	r24, 0x01	; 1
     c24:	80 93 62 3a 	sts	0x3A62, r24	; 0x803a62 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
    if (*serTxAddr) {
     c56:	e0 91 bb 3a 	lds	r30, 0x3ABB	; 0x803abb <serTxAddr>
     c5a:	f0 91 bc 3a 	lds	r31, 0x3ABC	; 0x803abc <serTxAddr+0x1>
     c5e:	80 81       	ld	r24, Z
     c60:	88 23       	and	r24, r24
     c62:	91 f0       	breq	.+36     	; 0xc88 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     c64:	80 81       	ld	r24, Z
     c66:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     c6a:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <serTxAddr>
     c6e:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <serTxAddr+0x1>
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <serTxAddr>
     c78:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     c7c:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c80:	80 62       	ori	r24, 0x20	; 32
     c82:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     c8e:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     cc2:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cc6:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     cca:	80 81       	ld	r24, Z
     ccc:	81 11       	cpse	r24, r1
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <__vector_14+0x36>
     cd0:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     cd4:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     cd8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     cdc:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     ce0:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ce4:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	e1 f0       	breq	.+56     	; 0xd26 <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     cee:	20 81       	ld	r18, Z
     cf0:	40 91 b8 3a 	lds	r20, 0x3AB8	; 0x803ab8 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	2f 57       	subi	r18, 0x7F	; 127
     cf8:	31 09       	sbc	r19, r1
     cfa:	42 9f       	mul	r20, r18
     cfc:	c0 01       	movw	r24, r0
     cfe:	43 9f       	mul	r20, r19
     d00:	90 0d       	add	r25, r0
     d02:	11 24       	eor	r1, r1
     d04:	89 2f       	mov	r24, r25
     d06:	99 0f       	add	r25, r25
     d08:	99 0b       	sbc	r25, r25
     d0a:	80 58       	subi	r24, 0x80	; 128
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d12:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d16:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d20:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <__vector_14+0x82>
    } else {
        DAC0_DATA = 0x80;
     d26:	80 e8       	ldi	r24, 0x80	; 128
     d28:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	4f 91       	pop	r20
     d3c:	3f 91       	pop	r19
     d3e:	2f 91       	pop	r18
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	8f 93       	push	r24
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
    if (serRxDone == 0){
     d5a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <serRxDone>
     d5e:	81 11       	cpse	r24, r1
     d60:	44 c0       	rjmp	.+136    	; 0xdea <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     d62:	ed b3       	in	r30, 0x1d	; 29
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d6a:	e9 58       	subi	r30, 0x89	; 137
     d6c:	f5 4c       	sbci	r31, 0xC5	; 197
     d6e:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     d70:	ed b3       	in	r30, 0x1d	; 29
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	e9 58       	subi	r30, 0x89	; 137
     d76:	f5 4c       	sbci	r31, 0xC5	; 197
     d78:	80 81       	ld	r24, Z
     d7a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     d7e:	ed b3       	in	r30, 0x1d	; 29
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	e9 58       	subi	r30, 0x89	; 137
     d84:	f5 4c       	sbci	r31, 0xC5	; 197
     d86:	80 81       	ld	r24, Z
     d88:	8a 30       	cpi	r24, 0x0A	; 10
     d8a:	39 f0       	breq	.+14     	; 0xd9a <__vector_27+0x50>
     d8c:	ed b3       	in	r30, 0x1d	; 29
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	e9 58       	subi	r30, 0x89	; 137
     d92:	f5 4c       	sbci	r31, 0xC5	; 197
     d94:	80 81       	ld	r24, Z
     d96:	8d 30       	cpi	r24, 0x0D	; 13
     d98:	49 f4       	brne	.+18     	; 0xdac <__vector_27+0x62>
            serRx[RXCNT] = 0;
     d9a:	ed b3       	in	r30, 0x1d	; 29
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	e9 58       	subi	r30, 0x89	; 137
     da0:	f5 4c       	sbci	r31, 0xC5	; 197
     da2:	10 82       	st	Z, r1
            serRxDone = 1;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <serRxDone>
     daa:	1f c0       	rjmp	.+62     	; 0xdea <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     dac:	ed b3       	in	r30, 0x1d	; 29
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	e9 58       	subi	r30, 0x89	; 137
     db2:	f5 4c       	sbci	r31, 0xC5	; 197
     db4:	80 81       	ld	r24, Z
     db6:	88 30       	cpi	r24, 0x08	; 8
     db8:	39 f0       	breq	.+14     	; 0xdc8 <__vector_27+0x7e>
     dba:	ed b3       	in	r30, 0x1d	; 29
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	e9 58       	subi	r30, 0x89	; 137
     dc0:	f5 4c       	sbci	r31, 0xC5	; 197
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 37       	cpi	r24, 0x7F	; 127
     dc6:	59 f4       	brne	.+22     	; 0xdde <__vector_27+0x94>
     dc8:	8d b3       	in	r24, 0x1d	; 29
     dca:	88 23       	and	r24, r24
     dcc:	41 f0       	breq	.+16     	; 0xdde <__vector_27+0x94>
            serRx[RXCNT] = 0;
     dce:	ed b3       	in	r30, 0x1d	; 29
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	e9 58       	subi	r30, 0x89	; 137
     dd4:	f5 4c       	sbci	r31, 0xC5	; 197
     dd6:	10 82       	st	Z, r1
            --RXCNT;
     dd8:	8d b3       	in	r24, 0x1d	; 29
     dda:	81 50       	subi	r24, 0x01	; 1
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     dde:	8d b3       	in	r24, 0x1d	; 29
     de0:	80 34       	cpi	r24, 0x40	; 64
     de2:	18 f4       	brcc	.+6      	; 0xdea <__vector_27+0xa0>
     de4:	8d b3       	in	r24, 0x1d	; 29
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     dea:	80 e8       	ldi	r24, 0x80	; 128
     dec:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	8f 91       	pop	r24
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	8f 93       	push	r24
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
    TCB0_CNT = 0;
     e10:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e14:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e1e:	e5 e0       	ldi	r30, 0x05	; 5
     e20:	f8 e0       	ldi	r31, 0x08	; 8
     e22:	80 81       	ld	r24, Z
     e24:	8f 7d       	andi	r24, 0xDF	; 223
     e26:	80 83       	st	Z, r24
};
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	8f 91       	pop	r24
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     e46:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <adc0Chg>
     e4a:	81 11       	cpse	r24, r1
     e4c:	12 c0       	rjmp	.+36     	; 0xe72 <__vector_20+0x3a>
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn=ADC0_RESL;
     e4e:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e52:	8e 31       	cpi	r24, 0x1E	; 30
     e54:	49 f4       	brne	.+18     	; 0xe68 <__vector_20+0x30>
     e56:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e5a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e5e:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <adcTemp>
     e62:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <adcTemp+0x1>
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <__vector_20+0x44>
     e68:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e6c:	80 93 c4 3a 	sts	0x3AC4, r24	; 0x803ac4 <auIn>
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <__vector_20+0x44>
    } else --adc0Chg;
     e72:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <adc0Chg>
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     e9e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ea2:	81 11       	cpse	r24, r1
     ea4:	0a c0       	rjmp	.+20     	; 0xeba <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     ea6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     eaa:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     eae:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <adcPhot>
     eb2:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     eba:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	79 f4       	brne	.+30     	; 0xee0 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     ec8:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ecc:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ed0:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcHall>
     ed4:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ede:	10 c0       	rjmp	.+32     	; 0xf00 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     ee0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ee4:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ee8:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <adcBtns>
     eec:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <adcBtns+0x1>
        if (A1CNT == 15){
     ef0:	8f b3       	in	r24, 0x1f	; 31
     ef2:	8f 30       	cpi	r24, 0x0F	; 15
     ef4:	29 f4       	brne	.+10     	; 0xf00 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     ef6:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     efa:	88 e0       	ldi	r24, 0x08	; 8
     efc:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f00:	8f b3       	in	r24, 0x1f	; 31
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	8f 70       	andi	r24, 0x0F	; 15
     f08:	99 27       	eor	r25, r25
     f0a:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     f32:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f36:	81 ff       	sbrs	r24, 1
     f38:	39 c0       	rjmp	.+114    	; 0xfac <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     f3a:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
     f3e:	8f 3f       	cpi	r24, 0xFF	; 255
     f40:	29 f0       	breq	.+10     	; 0xf4c <__vector_6+0x2c>
     f42:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     f4c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f50:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f54:	82 96       	adiw	r24, 0x22	; 34
     f56:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <tmp16bit>
     f5a:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     f5e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f62:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f66:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     f6a:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     f6e:	28 17       	cp	r18, r24
     f70:	39 07       	cpc	r19, r25
     f72:	70 f4       	brcc	.+28     	; 0xf90 <__vector_6+0x70>
     f74:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f78:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f7c:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     f80:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     f84:	82 1b       	sub	r24, r18
     f86:	93 0b       	sbc	r25, r19
     f88:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <tmp16bit>
     f8c:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
     f90:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     f94:	83 fd       	sbrc	r24, 3
     f96:	fc cf       	rjmp	.-8      	; 0xf90 <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
     f98:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <tmp16bit>
     f9c:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <tmp16bit+0x1>
     fa0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fa4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
     fac:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <minuteMark>
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
     fe0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
     fe4:	8f 91       	pop	r24
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
     ff0:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     ff4:	91 fd       	sbrc	r25, 1
     ff6:	fc cf       	rjmp	.-8      	; 0xff0 <EERead>
     ff8:	fb 01       	movw	r30, r22
     ffa:	48 0f       	add	r20, r24

    while(size){
     ffc:	84 17       	cp	r24, r20
     ffe:	39 f0       	breq	.+14     	; 0x100e <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    1000:	a8 2f       	mov	r26, r24
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	bc 5e       	subi	r27, 0xEC	; 236
    1006:	9c 91       	ld	r25, X
    1008:	91 93       	st	Z+, r25
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	f7 cf       	rjmp	.-18     	; 0xffc <EERead+0xc>
        --size;
    }
}
    100e:	08 95       	ret

00001010 <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1010:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1012:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    1014:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    1016:	44 23       	and	r20, r20
    1018:	09 f1       	breq	.+66     	; 0x105c <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    101a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    101e:	51 fd       	sbrc	r21, 1
    1020:	fc cf       	rjmp	.-8      	; 0x101a <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1022:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1024:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1028:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    102a:	58 2f       	mov	r21, r24
    102c:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	db 01       	movw	r26, r22
    1036:	11 97       	sbiw	r26, 0x01	; 1
    1038:	ac 91       	ld	r26, X
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	fc 5e       	subi	r31, 0xEC	; 236
    103e:	a0 83       	st	Z, r26
            --size;
    1040:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1042:	19 f0       	breq	.+6      	; 0x104a <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1044:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1046:	5f 31       	cpi	r21, 0x1F	; 31
    1048:	81 f7       	brne	.-32     	; 0x102a <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    104a:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    104c:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    1050:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1054:	52 ff       	sbrs	r21, 2
    1056:	df cf       	rjmp	.-66     	; 0x1016 <EEWrite+0x6>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    105a:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	08 95       	ret

00001060 <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1060:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1062:	9c 01       	movw	r18, r24
    1064:	2e 1b       	sub	r18, r30
    1066:	3f 0b       	sbc	r19, r31
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	48 9f       	mul	r20, r24
    106c:	a0 01       	movw	r20, r0
    106e:	11 24       	eor	r1, r1
    1070:	48 5a       	subi	r20, 0xA8	; 168
    1072:	50 44       	sbci	r21, 0x40	; 64
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    1074:	66 23       	and	r22, r22
    1076:	69 f0       	breq	.+26     	; 0x1092 <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1078:	df 01       	movw	r26, r30
    107a:	a2 0f       	add	r26, r18
    107c:	b3 1f       	adc	r27, r19
    107e:	a7 70       	andi	r26, 0x07	; 7
    1080:	bb 27       	eor	r27, r27
    1082:	a4 0f       	add	r26, r20
    1084:	b5 1f       	adc	r27, r21
    1086:	80 81       	ld	r24, Z
    1088:	9c 91       	ld	r25, X
    108a:	98 27       	eor	r25, r24
    108c:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    108e:	61 50       	subi	r22, 0x01	; 1
    1090:	f1 cf       	rjmp	.-30     	; 0x1074 <DecryptData+0x14>
    }
}
    1092:	08 95       	ret

00001094 <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <ExtEERead+0x16>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	d6 2e       	mov	r13, r22
    10b0:	c4 2e       	mov	r12, r20
    10b2:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    10b4:	7c 01       	movw	r14, r24
    10b6:	e8 94       	clt
    10b8:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    10ba:	f9 82       	std	Y+1, r15	; 0x01
    10bc:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    10be:	06 2f       	mov	r16, r22
    10c0:	42 e0       	ldi	r20, 0x02	; 2
    10c2:	be 01       	movw	r22, r28
    10c4:	6f 5f       	subi	r22, 0xFF	; 255
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	80 e5       	ldi	r24, 0x50	; 80
    10ca:	1f da       	rcall	.-3010   	; 0x50a <I2C_read_bytes>
    10cc:	18 2f       	mov	r17, r24
    if (error) return error;
    10ce:	81 11       	cpse	r24, r1
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <ExtEERead+0x48>
    DecryptData(offset, length, type, data);
    10d2:	95 01       	movw	r18, r10
    10d4:	4c 2d       	mov	r20, r12
    10d6:	6d 2d       	mov	r22, r13
    10d8:	c7 01       	movw	r24, r14
    10da:	c2 df       	rcall	.-124    	; 0x1060 <DecryptData>
    return 0;
}
    10dc:	81 2f       	mov	r24, r17
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	af 90       	pop	r10
    10f6:	08 95       	ret

000010f8 <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    10f8:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    10fc:	22 23       	and	r18, r18
    10fe:	59 f0       	breq	.+22     	; 0x1116 <SerSend+0x1e>
        serTxAddr = addr;
    1100:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <serTxAddr>
    1104:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <serTxAddr+0x1>
        serTxDone = 0;
    1108:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	08 95       	ret
    } else return 1;    //Error: Still sending data
    1116:	81 e0       	ldi	r24, 0x01	; 1
};
    1118:	08 95       	ret

0000111a <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    111a:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    111c:	81 11       	cpse	r24, r1
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <SerSpeed+0x8>
    1120:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	82 1b       	sub	r24, r18
    1128:	91 09       	sbc	r25, r1
    112a:	98 2f       	mov	r25, r24
    112c:	88 27       	eor	r24, r24
    112e:	81 50       	subi	r24, 0x01	; 1
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1136:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    113a:	08 95       	ret

0000113c <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    113c:	82 e1       	ldi	r24, 0x12	; 18
    113e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1142:	e0 e0       	ldi	r30, 0x00	; 0
    1144:	f6 e0       	ldi	r31, 0x06	; 6
    1146:	80 81       	ld	r24, Z
    1148:	8b 7f       	andi	r24, 0xFB	; 251
    114a:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    114c:	8e e1       	ldi	r24, 0x1E	; 30
    114e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1152:	83 e0       	ldi	r24, 0x03	; 3
    1154:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <adc0Chg>
    1158:	08 95       	ret

0000115a <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    115a:	82 e2       	ldi	r24, 0x22	; 34
    115c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    1160:	e0 e0       	ldi	r30, 0x00	; 0
    1162:	f6 e0       	ldi	r31, 0x06	; 6
    1164:	80 81       	ld	r24, Z
    1166:	84 60       	ori	r24, 0x04	; 4
    1168:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <adc0Chg>
    1176:	08 95       	ret

00001178 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    1178:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <adcBtns>
    117c:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1180:	24 e0       	ldi	r18, 0x04	; 4
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	2a 95       	dec	r18
    1188:	e1 f7       	brne	.-8      	; 0x1182 <CheckButtons+0xa>
    118a:	99 27       	eor	r25, r25
    118c:	80 36       	cpi	r24, 0x60	; 96
    118e:	91 05       	cpc	r25, r1
    1190:	40 f4       	brcc	.+16     	; 0x11a2 <CheckButtons+0x2a>
    1192:	8f 34       	cpi	r24, 0x4F	; 79
    1194:	91 05       	cpc	r25, r1
    1196:	88 f4       	brcc	.+34     	; 0x11ba <CheckButtons+0x42>
    1198:	c0 97       	sbiw	r24, 0x30	; 48
    119a:	09 97       	sbiw	r24, 0x09	; 9
    119c:	90 f4       	brcc	.+36     	; 0x11c2 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	11 c0       	rjmp	.+34     	; 0x11c4 <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    11a2:	85 37       	cpi	r24, 0x75	; 117
    11a4:	91 05       	cpc	r25, r1
    11a6:	68 f0       	brcs	.+26     	; 0x11c2 <CheckButtons+0x4a>
    11a8:	8e 38       	cpi	r24, 0x8E	; 142
    11aa:	91 05       	cpc	r25, r1
    11ac:	40 f0       	brcs	.+16     	; 0x11be <CheckButtons+0x46>
    11ae:	8e 59       	subi	r24, 0x9E	; 158
    11b0:	91 09       	sbc	r25, r1
    11b2:	81 97       	sbiw	r24, 0x21	; 33
    11b4:	30 f4       	brcc	.+12     	; 0x11c2 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    11b6:	90 e0       	ldi	r25, 0x00	; 0
            break;
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    11ba:	93 e0       	ldi	r25, 0x03	; 3
            break;
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    11be:	91 e0       	ldi	r25, 0x01	; 1
            break;
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    11c4:	80 91 27 38 	lds	r24, 0x3827	; 0x803827 <previousValue.3900>
    11c8:	98 17       	cp	r25, r24
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <CheckButtons+0x5a>
            previousValue = button;
    11cc:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <previousValue.3900>
            return 0xFF;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    11d2:	08 95       	ret

000011d4 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    11d4:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <state.3910>
    11d8:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <state.3910+0x1>
    11dc:	9c 01       	movw	r18, r24
    11de:	32 2f       	mov	r19, r18
    11e0:	22 27       	eor	r18, r18
    11e2:	32 95       	swap	r19
    11e4:	33 0f       	add	r19, r19
    11e6:	30 7e       	andi	r19, 0xE0	; 224
    11e8:	82 27       	eor	r24, r18
    11ea:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    11ec:	9c 01       	movw	r18, r24
    11ee:	23 2f       	mov	r18, r19
    11f0:	33 27       	eor	r19, r19
    11f2:	26 95       	lsr	r18
    11f4:	82 27       	eor	r24, r18
    11f6:	93 27       	eor	r25, r19
    state ^= (state << 7);
    11f8:	9c 01       	movw	r18, r24
    11fa:	36 95       	lsr	r19
    11fc:	32 2f       	mov	r19, r18
    11fe:	22 27       	eor	r18, r18
    1200:	37 95       	ror	r19
    1202:	27 95       	ror	r18
    1204:	82 27       	eor	r24, r18
    1206:	93 27       	eor	r25, r19
    1208:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <state.3910>
    120c:	90 93 26 38 	sts	0x3826, r25	; 0x803826 <state.3910+0x1>
    return (state & 0xff);
}
    1210:	08 95       	ret

00001212 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	7b 01       	movw	r14, r22
    1222:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    1224:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1228:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    122c:	e8 2f       	mov	r30, r24
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	31 97       	sbiw	r30, 0x01	; 1
    1232:	e7 70       	andi	r30, 0x07	; 7
    1234:	ff 27       	eor	r31, r31
    1236:	e8 5d       	subi	r30, 0xD8	; 216
    1238:	f7 4c       	sbci	r31, 0xC7	; 199
    123a:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    123c:	cb df       	rcall	.-106    	; 0x11d4 <lfsr>
    123e:	8d 21       	and	r24, r13
    1240:	c8 0f       	add	r28, r24
    1242:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    1244:	c7 df       	rcall	.-114    	; 0x11d4 <lfsr>
    1246:	8d 21       	and	r24, r13
    1248:	c8 1b       	sub	r28, r24
    124a:	d1 09       	sbc	r29, r1
    124c:	0c 17       	cp	r16, r28
    124e:	1d 07       	cpc	r17, r29
    1250:	08 f4       	brcc	.+2      	; 0x1254 <floatSpeed+0x42>
    1252:	e8 01       	movw	r28, r16
    1254:	c7 01       	movw	r24, r14
    1256:	ec 16       	cp	r14, r28
    1258:	fd 06       	cpc	r15, r29
    125a:	08 f4       	brcc	.+2      	; 0x125e <floatSpeed+0x4c>
    125c:	ce 01       	movw	r24, r28
    125e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1262:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1266:	df 91       	pop	r29
}
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	08 95       	ret

00001276 <floatAround>:
    1276:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	c8 2f       	mov	r28, r24
    1280:	d4 2f       	mov	r29, r20
    1282:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1284:	e6 2f       	mov	r30, r22
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	31 97       	sbiw	r30, 0x01	; 1
    128a:	e7 70       	andi	r30, 0x07	; 7
    128c:	ff 27       	eor	r31, r31
    128e:	e8 5d       	subi	r30, 0xD8	; 216
    1290:	f7 4c       	sbci	r31, 0xC7	; 199
    1292:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    1294:	9f df       	rcall	.-194    	; 0x11d4 <lfsr>
    1296:	81 23       	and	r24, r17
    1298:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    129a:	9c df       	rcall	.-200    	; 0x11d4 <lfsr>
    129c:	81 23       	and	r24, r17
    129e:	c8 1b       	sub	r28, r24
    12a0:	8c 2f       	mov	r24, r28
    12a2:	00 23       	and	r16, r16
    if (max){
    12a4:	41 f0       	breq	.+16     	; 0x12b6 <floatAround+0x40>
    12a6:	9c 2f       	mov	r25, r28
    12a8:	0c 17       	cp	r16, r28
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <floatAround+0x38>
    12ac:	90 2f       	mov	r25, r16
    12ae:	8d 2f       	mov	r24, r29
    12b0:	d9 17       	cp	r29, r25
    12b2:	08 f4       	brcc	.+2      	; 0x12b6 <floatAround+0x40>
    12b4:	89 2f       	mov	r24, r25
    12b6:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	8d 17       	cp	r24, r29
    12bc:	10 f0       	brcs	.+4      	; 0x12c2 <floatAround+0x4c>
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	2d 2f       	mov	r18, r29
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	24 23       	and	r18, r20
    12c8:	35 23       	and	r19, r21
    12ca:	23 2b       	or	r18, r19
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <floatAround+0x5a>
    12ce:	8d 2f       	mov	r24, r29
    12d0:	df 91       	pop	r29

    return sample;
}
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <SaveGameState>:
    12da:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    12dc:	df 92       	push	r13
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	64 97       	sbiw	r28, 0x14	; 20
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    12f2:	44 e1       	ldi	r20, 0x14	; 20
    12f4:	be 01       	movw	r22, r28
    12f6:	6f 5f       	subi	r22, 0xFF	; 255
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	79 de       	rcall	.-782    	; 0xff0 <EERead>
    12fe:	83 e6       	ldi	r24, 0x63	; 99
    1300:	c8 2e       	mov	r12, r24
    1302:	8a e3       	ldi	r24, 0x3A	; 58
    1304:	d8 2e       	mov	r13, r24
    1306:	8e 01       	movw	r16, r28
    1308:	0f 5f       	subi	r16, 0xFF	; 255
    130a:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    130c:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    130e:	f8 01       	movw	r30, r16
    1310:	81 91       	ld	r24, Z+
    1312:	8f 01       	movw	r16, r30
    1314:	f6 01       	movw	r30, r12
    1316:	90 81       	ld	r25, Z
    1318:	98 13       	cpse	r25, r24
    131a:	08 c0       	rjmp	.+16     	; 0x132c <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    131c:	f3 94       	inc	r15
    131e:	ff ef       	ldi	r31, 0xFF	; 255
    1320:	cf 1a       	sub	r12, r31
    1322:	df 0a       	sbc	r13, r31
    1324:	80 e1       	ldi	r24, 0x10	; 16
    1326:	f8 12       	cpse	r15, r24
    1328:	f2 cf       	rjmp	.-28     	; 0x130e <SaveGameState+0x34>
    132a:	08 c0       	rjmp	.+16     	; 0x133c <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	b6 01       	movw	r22, r12
    1330:	8f 2d       	mov	r24, r15
    1332:	6e de       	rcall	.-804    	; 0x1010 <EEWrite>
    1334:	88 23       	and	r24, r24
    1336:	91 f3       	breq	.-28     	; 0x131c <SaveGameState+0x42>
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	36 c0       	rjmp	.+108    	; 0x13a8 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    133c:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory>
    1340:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x1>
    1344:	30 93 73 3a 	sts	0x3A73, r19	; 0x803a73 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    1348:	20 93 74 3a 	sts	0x3A74, r18	; 0x803a74 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    134c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    1350:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    1354:	90 93 75 3a 	sts	0x3A75, r25	; 0x803a75 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    1358:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    135c:	89 89       	ldd	r24, Y+17	; 0x11
    135e:	9a 89       	ldd	r25, Y+18	; 0x12
    1360:	98 27       	eor	r25, r24
    1362:	89 27       	eor	r24, r25
    1364:	98 27       	eor	r25, r24
    1366:	28 17       	cp	r18, r24
    1368:	39 07       	cpc	r19, r25
    136a:	69 f4       	brne	.+26     	; 0x1386 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    136c:	8b 89       	ldd	r24, Y+19	; 0x13
    136e:	9c 89       	ldd	r25, Y+20	; 0x14
    1370:	98 27       	eor	r25, r24
    1372:	89 27       	eor	r24, r25
    1374:	98 27       	eor	r25, r24
    1376:	20 91 42 38 	lds	r18, 0x3842	; 0x803842 <inventory+0x2>
    137a:	30 91 43 38 	lds	r19, 0x3843	; 0x803843 <inventory+0x3>
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	49 f4       	brne	.+18     	; 0x1396 <SaveGameState+0xbc>
    1384:	10 c0       	rjmp	.+32     	; 0x13a6 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1386:	42 e0       	ldi	r20, 0x02	; 2
    1388:	63 e7       	ldi	r22, 0x73	; 115
    138a:	7a e3       	ldi	r23, 0x3A	; 58
    138c:	80 e1       	ldi	r24, 0x10	; 16
    138e:	40 de       	rcall	.-896    	; 0x1010 <EEWrite>
    1390:	88 23       	and	r24, r24
    1392:	61 f3       	breq	.-40     	; 0x136c <SaveGameState+0x92>
    1394:	d1 cf       	rjmp	.-94     	; 0x1338 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	65 e7       	ldi	r22, 0x75	; 117
    139a:	7a e3       	ldi	r23, 0x3A	; 58
    139c:	82 e1       	ldi	r24, 0x12	; 18
    139e:	38 de       	rcall	.-912    	; 0x1010 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	81 11       	cpse	r24, r1
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <SaveGameState+0xce>
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    13a8:	89 2f       	mov	r24, r25
    13aa:	64 96       	adiw	r28, 0x14	; 20
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	08 95       	ret

000013c0 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    13c0:	e8 2f       	mov	r30, r24
    13c2:	ef 77       	andi	r30, 0x7F	; 127
    13c4:	e6 95       	lsr	r30
    13c6:	e6 95       	lsr	r30
    13c8:	e6 95       	lsr	r30
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	ed 59       	subi	r30, 0x9D	; 157
    13ce:	f5 4c       	sbci	r31, 0xC5	; 197
    13d0:	20 81       	ld	r18, Z
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	87 70       	andi	r24, 0x07	; 7
    13d6:	a9 01       	movw	r20, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <ReadStatusBit+0x1e>
    13da:	55 95       	asr	r21
    13dc:	47 95       	ror	r20
    13de:	8a 95       	dec	r24
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <ReadStatusBit+0x1a>
    13e2:	ca 01       	movw	r24, r20
}
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	08 95       	ret

000013e8 <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    13e8:	e8 2f       	mov	r30, r24
    13ea:	ef 77       	andi	r30, 0x7F	; 127
    
    if (num) {
    13ec:	e9 f0       	breq	.+58     	; 0x1428 <UpdateState+0x40>
    13ee:	e6 95       	lsr	r30
    13f0:	e6 95       	lsr	r30
    13f2:	e6 95       	lsr	r30
    13f4:	28 2f       	mov	r18, r24
    13f6:	27 70       	andi	r18, 0x07	; 7
        if (clearBit) {
            gameState[num>>3] &= ~(1<<(num&7));
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	ed 59       	subi	r30, 0x9D	; 157
    13fc:	f5 4c       	sbci	r31, 0xC5	; 197
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    
    if (num) {
        if (clearBit) {
    13fe:	87 ff       	sbrs	r24, 7
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <UpdateState+0x2e>
            gameState[num>>3] &= ~(1<<(num&7));
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	01 c0       	rjmp	.+2      	; 0x140a <UpdateState+0x22>
    1408:	88 0f       	add	r24, r24
    140a:	2a 95       	dec	r18
    140c:	ea f7       	brpl	.-6      	; 0x1408 <UpdateState+0x20>
    140e:	80 95       	com	r24
    1410:	90 81       	ld	r25, Z
    1412:	89 23       	and	r24, r25
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <UpdateState+0x3e>
        } else {
            gameState[num>>3] |= 1<<(num&7);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	01 c0       	rjmp	.+2      	; 0x141e <UpdateState+0x36>
    141c:	88 0f       	add	r24, r24
    141e:	2a 95       	dec	r18
    1420:	ea f7       	brpl	.-6      	; 0x141c <UpdateState+0x34>
    1422:	90 81       	ld	r25, Z
    1424:	89 2b       	or	r24, r25
    1426:	80 83       	st	Z, r24
    1428:	08 95       	ret

0000142a <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    142a:	cf 93       	push	r28
    142c:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    142e:	8f 77       	andi	r24, 0x7F	; 127
    1430:	c7 df       	rcall	.-114    	; 0x13c0 <ReadStatusBit>
    1432:	2c 2f       	mov	r18, r28
    1434:	22 1f       	adc	r18, r18
    1436:	22 27       	eor	r18, r18
    1438:	22 1f       	adc	r18, r18
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	81 11       	cpse	r24, r1
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <CheckState+0x18>
    1440:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    1442:	82 2f       	mov	r24, r18
    1444:	89 27       	eor	r24, r25
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    144a:	e3 e0       	ldi	r30, 0x03	; 3
    144c:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    144e:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    1450:	91 91       	ld	r25, Z+
    1452:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    1454:	ed 30       	cpi	r30, 0x0D	; 13
    1456:	91 e1       	ldi	r25, 0x11	; 17
    1458:	f9 07       	cpc	r31, r25
    145a:	d1 f7       	brne	.-12     	; 0x1450 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    145c:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	98 0f       	add	r25, r24
    1462:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <whoami>
    return id;
}
    1466:	08 95       	ret

00001468 <Reset>:

void Reset(){
    1468:	cf 93       	push	r28
    146a:	e3 e6       	ldi	r30, 0x63	; 99
    146c:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    146e:	11 92       	st	Z+, r1
    //Reset game progress (all zeros) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1470:	8a e3       	ldi	r24, 0x3A	; 58
    1472:	e7 37       	cpi	r30, 0x77	; 119
    1474:	f8 07       	cpc	r31, r24
    1476:	d9 f7       	brne	.-10     	; 0x146e <Reset+0x6>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1478:	e8 df       	rcall	.-48     	; 0x144a <getID>
    147a:	c8 2f       	mov	r28, r24

    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    147c:	81 11       	cpse	r24, r1
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <Reset+0x1c>
    1480:	8e e6       	ldi	r24, 0x6E	; 110
    1482:	0b c0       	rjmp	.+22     	; 0x149a <Reset+0x32>
    else if (id == 1) UpdateState(111);
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	11 f4       	brne	.+4      	; 0x148c <Reset+0x24>
    1488:	8f e6       	ldi	r24, 0x6F	; 111
    148a:	07 c0       	rjmp	.+14     	; 0x149a <Reset+0x32>
    else if (id == 2) UpdateState(112);
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	11 f4       	brne	.+4      	; 0x1494 <Reset+0x2c>
    1490:	80 e7       	ldi	r24, 0x70	; 112
    1492:	03 c0       	rjmp	.+6      	; 0x149a <Reset+0x32>
    else if (id == 3) UpdateState(113);
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	11 f4       	brne	.+4      	; 0x149c <Reset+0x34>
    1498:	81 e7       	ldi	r24, 0x71	; 113
    149a:	a6 df       	rcall	.-180    	; 0x13e8 <UpdateState>
    UpdateState(100+id);
    149c:	84 e6       	ldi	r24, 0x64	; 100

    //Write bit 0, must always be 1!

}
    149e:	8c 0f       	add	r24, r28
    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    else if (id == 1) UpdateState(111);
    else if (id == 2) UpdateState(112);
    else if (id == 3) UpdateState(113);
    UpdateState(100+id);
    14a0:	cf 91       	pop	r28
    14a2:	a2 cf       	rjmp	.-188    	; 0x13e8 <UpdateState>

000014a4 <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    14a8:	44 e1       	ldi	r20, 0x14	; 20
    14aa:	63 e6       	ldi	r22, 0x63	; 99
    14ac:	7a e3       	ldi	r23, 0x3A	; 58
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	9f dd       	rcall	.-1218   	; 0xff0 <EERead>
    14b2:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    14b4:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    14b6:	8c 2f       	mov	r24, r28
    14b8:	83 df       	rcall	.-250    	; 0x13c0 <ReadStatusBit>
    14ba:	d8 0f       	add	r29, r24
    14bc:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    14be:	c2 37       	cpi	r28, 0x72	; 114
    14c0:	d1 f7       	brne	.-12     	; 0x14b6 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    14c2:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    14c4:	11 f0       	breq	.+4      	; 0x14ca <LoadGameState+0x26>
    14c6:	d0 df       	rcall	.-96     	; 0x1468 <Reset>
    } else getID();
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <LoadGameState+0x28>
    14ca:	bf df       	rcall	.-130    	; 0x144a <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    14cc:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x10>
    14d0:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x11>
    14d4:	98 27       	eor	r25, r24
    14d6:	89 27       	eor	r24, r25
    14d8:	98 27       	eor	r25, r24
    14da:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory>
    14de:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    14e2:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <gameState+0x12>
    14e6:	90 91 76 3a 	lds	r25, 0x3A76	; 0x803a76 <gameState+0x13>
    14ea:	98 27       	eor	r25, r24
    14ec:	89 27       	eor	r24, r25
    14ee:	98 27       	eor	r25, r24
    14f0:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <inventory+0x2>
    14f4:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <inventory+0x3>
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <HotSummer>:
    //Write bit 0, must always be 1!

}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    14fe:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1500:	86 e7       	ldi	r24, 0x76	; 118
    1502:	93 df       	rcall	.-218    	; 0x142a <CheckState>
    1504:	c8 2f       	mov	r28, r24
    1506:	88 23       	and	r24, r24
    1508:	81 f0       	breq	.+32     	; 0x152a <HotSummer+0x2c>
        iLED[SCARAB[R]] = 0;
    150a:	e0 91 1c bf 	lds	r30, 0xBF1C	; 0x80bf1c <__bss_end+0x8408>
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	eb 53       	subi	r30, 0x3B	; 59
    1512:	f5 4c       	sbci	r31, 0xC5	; 197
    1514:	10 82       	st	Z, r1
        iLED[SCARAB[G]] = dimValue;
    1516:	e0 91 1d bf 	lds	r30, 0xBF1D	; 0x80bf1d <__bss_end+0x8409>
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1520:	eb 53       	subi	r30, 0x3B	; 59
    1522:	f5 4c       	sbci	r31, 0xC5	; 197
    1524:	80 83       	st	Z, r24
        return 1;
    1526:	c1 e0       	ldi	r28, 0x01	; 1
    1528:	4c c0       	rjmp	.+152    	; 0x15c2 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    152a:	85 e7       	ldi	r24, 0x75	; 117
    152c:	7e df       	rcall	.-260    	; 0x142a <CheckState>
    152e:	88 23       	and	r24, r24
    1530:	59 f1       	breq	.+86     	; 0x1588 <HotSummer+0x8a>
        iLED[SCARAB[R]] = dimValue;
    1532:	e0 91 1c bf 	lds	r30, 0xBF1C	; 0x80bf1c <__bss_end+0x8408>
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    153c:	eb 53       	subi	r30, 0x3B	; 59
    153e:	f5 4c       	sbci	r31, 0xC5	; 197
    1540:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    1542:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <cooledDown.3965>
    1546:	88 23       	and	r24, r24
    1548:	79 f0       	breq	.+30     	; 0x1568 <HotSummer+0x6a>
    154a:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    154e:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    1552:	20 91 ef 3a 	lds	r18, 0x3AEF	; 0x803aef <adcTemp>
    1556:	30 91 f0 3a 	lds	r19, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    155a:	80 96       	adiw	r24, 0x20	; 32
    155c:	28 17       	cp	r18, r24
    155e:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    1560:	18 f0       	brcs	.+6      	; 0x1568 <HotSummer+0x6a>
    1562:	86 e7       	ldi	r24, 0x76	; 118
    1564:	41 df       	rcall	.-382    	; 0x13e8 <UpdateState>
            return 0;
    1566:	2d c0       	rjmp	.+90     	; 0x15c2 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1568:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    156c:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    1570:	20 91 ef 3a 	lds	r18, 0x3AEF	; 0x803aef <adcTemp>
    1574:	30 91 f0 3a 	lds	r19, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    1578:	08 96       	adiw	r24, 0x08	; 8
    157a:	82 17       	cp	r24, r18
    157c:	93 07       	cpc	r25, r19
    157e:	08 f1       	brcs	.+66     	; 0x15c2 <HotSummer+0xc4>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <cooledDown.3965>
    1586:	1d c0       	rjmp	.+58     	; 0x15c2 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1588:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    158c:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    1590:	89 2b       	or	r24, r25
    1592:	41 f4       	brne	.+16     	; 0x15a4 <HotSummer+0xa6>
    1594:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <adcTemp>
    1598:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    159c:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <calTemp>
    15a0:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    15a4:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <calTemp>
    15a8:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <calTemp+0x1>
    15ac:	20 91 ef 3a 	lds	r18, 0x3AEF	; 0x803aef <adcTemp>
    15b0:	30 91 f0 3a 	lds	r19, 0x3AF0	; 0x803af0 <adcTemp+0x1>
    15b4:	80 96       	adiw	r24, 0x20	; 32
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    15ba:	18 f0       	brcs	.+6      	; 0x15c2 <HotSummer+0xc4>
    15bc:	85 e7       	ldi	r24, 0x75	; 117
    15be:	14 df       	rcall	.-472    	; 0x13e8 <UpdateState>
        }
    }
    return 0;
    15c0:	c0 e0       	ldi	r28, 0x00	; 0
}
    15c2:	8c 2f       	mov	r24, r28
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    15c8:	ee e1       	ldi	r30, 0x1E	; 30
    15ca:	ff eb       	ldi	r31, 0xBF	; 191
    for (int8_t i=0; i<5; i++) {
    15cc:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    15ce:	a5 81       	ldd	r26, Z+5	; 0x05
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    15d2:	98 17       	cp	r25, r24
    15d4:	34 f4       	brge	.+12     	; 0x15e2 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    15d6:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15da:	ab 53       	subi	r26, 0x3B	; 59
    15dc:	b5 4c       	sbci	r27, 0xC5	; 197
    15de:	2c 93       	st	X, r18
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    15e2:	ab 53       	subi	r26, 0x3B	; 59
    15e4:	b5 4c       	sbci	r27, 0xC5	; 197
    15e6:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    15e8:	a0 81       	ld	r26, Z
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    15ec:	96 17       	cp	r25, r22
    15ee:	34 f4       	brge	.+12     	; 0x15fc <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    15f0:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15f4:	ab 53       	subi	r26, 0x3B	; 59
    15f6:	b5 4c       	sbci	r27, 0xC5	; 197
    15f8:	2c 93       	st	X, r18
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    15fc:	ab 53       	subi	r26, 0x3B	; 59
    15fe:	b5 4c       	sbci	r27, 0xC5	; 197
    1600:	1c 92       	st	X, r1
    1602:	9f 5f       	subi	r25, 0xFF	; 255
    1604:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    1606:	95 30       	cpi	r25, 0x05	; 5
    1608:	11 f7       	brne	.-60     	; 0x15ce <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    160a:	08 95       	ret

0000160c <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    160c:	a8 e2       	ldi	r26, 0x28	; 40
    160e:	bf eb       	ldi	r27, 0xBF	; 191
    1610:	ec 91       	ld	r30, X
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	eb 53       	subi	r30, 0x3B	; 59
    1616:	f5 4c       	sbci	r31, 0xC5	; 197
    1618:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	ec 91       	ld	r30, X
    161e:	12 97       	sbiw	r26, 0x02	; 2
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	eb 53       	subi	r30, 0x3B	; 59
    1624:	f5 4c       	sbci	r31, 0xC5	; 197
    1626:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	ec 91       	ld	r30, X
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	eb 53       	subi	r30, 0x3B	; 59
    1632:	f5 4c       	sbci	r31, 0xC5	; 197
    1634:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1636:	13 96       	adiw	r26, 0x03	; 3
    1638:	ec 91       	ld	r30, X
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	eb 53       	subi	r30, 0x3B	; 59
    163e:	f5 4c       	sbci	r31, 0xC5	; 197
    1640:	60 83       	st	Z, r22
    1642:	08 95       	ret

00001644 <ClearHackerLeds>:
    }
}

void ClearHackerLeds() {
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	ec e2       	ldi	r30, 0x2C	; 44
    164a:	ff eb       	ldi	r31, 0xBF	; 191
    164c:	ef 01       	movw	r28, r30
    for (uint8_t i=0;i<6;i++) {
        iLED[HCKR[G][i]] = 0;
    164e:	a6 81       	ldd	r26, Z+6	; 0x06
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ab 53       	subi	r26, 0x3B	; 59
    1654:	b5 4c       	sbci	r27, 0xC5	; 197
    1656:	1c 92       	st	X, r1
    1658:	31 96       	adiw	r30, 0x01	; 1
        iLED[HCKR[R][i]] = 0;
    165a:	a8 81       	ld	r26, Y
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ab 53       	subi	r26, 0x3B	; 59
    1660:	b5 4c       	sbci	r27, 0xC5	; 197
    1662:	1c 92       	st	X, r1
        iLED[EYE[G][i]] = g;
    }
}

void ClearHackerLeds() {
    for (uint8_t i=0;i<6;i++) {
    1664:	8f eb       	ldi	r24, 0xBF	; 191
    1666:	e2 33       	cpi	r30, 0x32	; 50
    1668:	f8 07       	cpc	r31, r24
    166a:	81 f7       	brne	.-32     	; 0x164c <ClearHackerLeds+0x8>
        iLED[HCKR[G][i]] = 0;
        iLED[HCKR[R][i]] = 0;
    }
}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <GenerateBlinks>:


void GenerateBlinks(){
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1682:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1686:	88 23       	and	r24, r24
    1688:	29 f0       	breq	.+10     	; 0x1694 <GenerateBlinks+0x22>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    168a:	80 e4       	ldi	r24, 0x40	; 64
    168c:	ce de       	rcall	.-612    	; 0x142a <CheckState>
    168e:	81 11       	cpse	r24, r1
    1690:	24 c0       	rjmp	.+72     	; 0x16da <GenerateBlinks+0x68>
    1692:	50 c0       	rjmp	.+160    	; 0x1734 <GenerateBlinks+0xc2>
    1694:	cc e2       	ldi	r28, 0x2C	; 44
    1696:	df eb       	ldi	r29, 0xBF	; 191
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1698:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    169a:	81 2f       	mov	r24, r17
    169c:	c6 de       	rcall	.-628    	; 0x142a <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    169e:	ee 81       	ldd	r30, Y+6	; 0x06
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    16a2:	88 23       	and	r24, r24
    16a4:	59 f0       	breq	.+22     	; 0x16bc <GenerateBlinks+0x4a>
                iLED[HCKR[G][i]] = dimValue;
    16a6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16aa:	eb 53       	subi	r30, 0x3B	; 59
    16ac:	f5 4c       	sbci	r31, 0xC5	; 197
    16ae:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    16b0:	e8 81       	ld	r30, Y
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	eb 53       	subi	r30, 0x3B	; 59
    16b6:	f5 4c       	sbci	r31, 0xC5	; 197
    16b8:	10 82       	st	Z, r1
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <GenerateBlinks+0x5e>
            } else {
                iLED[HCKR[G][i]] = 0;
    16bc:	eb 53       	subi	r30, 0x3B	; 59
    16be:	f5 4c       	sbci	r31, 0xC5	; 197
    16c0:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    16c2:	e8 81       	ld	r30, Y
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16ca:	eb 53       	subi	r30, 0x3B	; 59
    16cc:	f5 4c       	sbci	r31, 0xC5	; 197
    16ce:	80 83       	st	Z, r24
    16d0:	1f 5f       	subi	r17, 0xFF	; 255
    16d2:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    16d4:	10 38       	cpi	r17, 0x80	; 128
    16d6:	09 f7       	brne	.-62     	; 0x169a <GenerateBlinks+0x28>
    16d8:	d8 cf       	rjmp	.-80     	; 0x168a <GenerateBlinks+0x18>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16da:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <HeartCount>
    16de:	98 2f       	mov	r25, r24
    16e0:	9d 7f       	andi	r25, 0xFD	; 253
    16e2:	e0 91 1b bf 	lds	r30, 0xBF1B	; 0x80bf1b <__bss_end+0x8407>
            iLED[BADGER] = dimValue>>1 ;
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16e8:	91 30       	cpi	r25, 0x01	; 1
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <GenerateBlinks+0x7e>
    16ec:	85 30       	cpi	r24, 0x05	; 5
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <GenerateBlinks+0x86>
            iLED[BADGER] = dimValue>>1 ;
    16f0:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16f4:	96 95       	lsr	r25
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <GenerateBlinks+0x92>
        else if ( HeartCount == 2 || HeartCount == 4 )
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	11 f0       	breq	.+4      	; 0x1700 <GenerateBlinks+0x8e>
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	31 f4       	brne	.+12     	; 0x170c <GenerateBlinks+0x9a>
            iLED[BADGER] = dimValue;
    1700:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1704:	eb 53       	subi	r30, 0x3B	; 59
    1706:	f5 4c       	sbci	r31, 0xC5	; 197
    1708:	90 83       	st	Z, r25
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <GenerateBlinks+0xb2>
        else if ( HeartCount == 0 || HeartCount == 6 )
    170c:	88 23       	and	r24, r24
    170e:	11 f0       	breq	.+4      	; 0x1714 <GenerateBlinks+0xa2>
    1710:	86 30       	cpi	r24, 0x06	; 6
    1712:	29 f4       	brne	.+10     	; 0x171e <GenerateBlinks+0xac>
            iLED[BADGER] = dimValue>>2;
    1714:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1718:	96 95       	lsr	r25
    171a:	96 95       	lsr	r25
    171c:	f3 cf       	rjmp	.-26     	; 0x1704 <GenerateBlinks+0x92>
        else
            iLED[BADGER] = 0;
    171e:	eb 53       	subi	r30, 0x3B	; 59
    1720:	f5 4c       	sbci	r31, 0xC5	; 197
    1722:	10 82       	st	Z, r1
        if (HeartCount<32)
    1724:	80 32       	cpi	r24, 0x20	; 32
    1726:	20 f4       	brcc	.+8      	; 0x1730 <GenerateBlinks+0xbe>
            HeartCount++;
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <HeartCount>
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GenerateBlinks+0xc2>
        else
            HeartCount = 0;
    1730:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    1734:	90 91 5c 38 	lds	r25, 0x385C	; 0x80385c <LedCount>
    1738:	9f 5f       	subi	r25, 0xFF	; 255
    173a:	90 93 5c 38 	sts	0x385C, r25	; 0x80385c <LedCount>

    switch (effect&0x1f) {
    173e:	e0 91 3c 38 	lds	r30, 0x383C	; 0x80383c <effect>
    1742:	f0 91 3d 38 	lds	r31, 0x383D	; 0x80383d <effect+0x1>
    1746:	ef 71       	andi	r30, 0x1F	; 31
    1748:	ff 27       	eor	r31, r31
    174a:	e9 30       	cpi	r30, 0x09	; 9
    174c:	f1 05       	cpc	r31, r1
    174e:	08 f0       	brcs	.+2      	; 0x1752 <GenerateBlinks+0xe0>
    1750:	02 c1       	rjmp	.+516    	; 0x1956 <GenerateBlinks+0x2e4>
    1752:	e2 5c       	subi	r30, 0xC2	; 194
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	34 df       	rcall	.-408    	; 0x15c8 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1760:	e0 91 28 bf 	lds	r30, 0xBF28	; 0x80bf28 <__bss_end+0x8414>
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	eb 53       	subi	r30, 0x3B	; 59
    1768:	f5 4c       	sbci	r31, 0xC5	; 197
    176a:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    176c:	e0 91 2a bf 	lds	r30, 0xBF2A	; 0x80bf2a <__bss_end+0x8416>
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	eb 53       	subi	r30, 0x3B	; 59
    1774:	f5 4c       	sbci	r31, 0xC5	; 197
    1776:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1778:	e0 91 1c bf 	lds	r30, 0xBF1C	; 0x80bf1c <__bss_end+0x8408>
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	eb 53       	subi	r30, 0x3B	; 59
    1780:	f5 4c       	sbci	r31, 0xC5	; 197
    1782:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1784:	e0 91 29 bf 	lds	r30, 0xBF29	; 0x80bf29 <__bss_end+0x8415>
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	eb 53       	subi	r30, 0x3B	; 59
    178c:	f5 4c       	sbci	r31, 0xC5	; 197
    178e:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1790:	e0 91 2b bf 	lds	r30, 0xBF2B	; 0x80bf2b <__bss_end+0x8417>
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	eb 53       	subi	r30, 0x3B	; 59
    1798:	f5 4c       	sbci	r31, 0xC5	; 197
    179a:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    179c:	e0 91 1d bf 	lds	r30, 0xBF1D	; 0x80bf1d <__bss_end+0x8409>
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	eb 53       	subi	r30, 0x3B	; 59
    17a4:	f5 4c       	sbci	r31, 0xC5	; 197
    17a6:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    17a8:	e0 91 1a bf 	lds	r30, 0xBF1A	; 0x80bf1a <__bss_end+0x8406>
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	eb 53       	subi	r30, 0x3B	; 59
    17b0:	f5 4c       	sbci	r31, 0xC5	; 197
    17b2:	10 82       	st	Z, r1
            break;
    17b4:	d0 c0       	rjmp	.+416    	; 0x1956 <GenerateBlinks+0x2e4>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    17b6:	89 2f       	mov	r24, r25
    17b8:	81 70       	andi	r24, 0x01	; 1
    17ba:	90 fd       	sbrc	r25, 0
    17bc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	0d c0       	rjmp	.+26     	; 0x17de <GenerateBlinks+0x16c>
    17c4:	69 2f       	mov	r22, r25
    17c6:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17c8:	93 ff       	sbrs	r25, 3
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <GenerateBlinks+0x15e>
    17cc:	60 95       	com	r22
    17ce:	70 95       	com	r23
    17d0:	95 e0       	ldi	r25, 0x05	; 5
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	9a 95       	dec	r25
    17d8:	e1 f7       	brne	.-8      	; 0x17d2 <GenerateBlinks+0x160>
    17da:	61 5e       	subi	r22, 0xE1	; 225
    17dc:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17ec:	cf 90       	pop	r12
    17ee:	0e cf       	rjmp	.-484    	; 0x160c <SetBothEyes>
            break;

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    17f0:	89 2f       	mov	r24, r25
    17f2:	83 70       	andi	r24, 0x03	; 3
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <GenerateBlinks+0x186>
    17f6:	af c0       	rjmp	.+350    	; 0x1956 <GenerateBlinks+0x2e4>
                if (LedCount & 4)
    17f8:	92 ff       	sbrs	r25, 2
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <GenerateBlinks+0x190>
                    WingBar(5,5);
    17fc:	65 e0       	ldi	r22, 0x05	; 5
    17fe:	85 e0       	ldi	r24, 0x05	; 5
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GenerateBlinks+0x194>
                else
                    WingBar(0,0);
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
        case 5:
            if ((LedCount & 3) == 0) {
                if (LedCount & 4)
                    WingBar(5,5);
                else
                    WingBar(0,0);
    1814:	cf 90       	pop	r12
    1816:	d8 ce       	rjmp	.-592    	; 0x15c8 <WingBar>
            }
            break;

        //'circle the wing leds'
        case 6:
            if (LedCount > 4) LedCount = 0;
    1818:	95 30       	cpi	r25, 0x05	; 5
    181a:	10 f0       	brcs	.+4      	; 0x1820 <GenerateBlinks+0x1ae>
    181c:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <LedCount>
            iLED[WING[L][LedCount]] = 0;
    1820:	40 91 5c 38 	lds	r20, 0x385C	; 0x80385c <LedCount>
    1824:	24 2f       	mov	r18, r20
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	f9 01       	movw	r30, r18
    182a:	e2 5e       	subi	r30, 0xE2	; 226
    182c:	f0 44       	sbci	r31, 0x40	; 64
    182e:	e5 81       	ldd	r30, Z+5	; 0x05
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	eb 53       	subi	r30, 0x3B	; 59
    1834:	f5 4c       	sbci	r31, 0xC5	; 197
    1836:	10 82       	st	Z, r1
            iLED[WING[L][LedCount == 4 ? 0 : LedCount+1]] = dimValue;
    1838:	44 30       	cpi	r20, 0x04	; 4
    183a:	19 f0       	breq	.+6      	; 0x1842 <GenerateBlinks+0x1d0>
    183c:	c9 01       	movw	r24, r18
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GenerateBlinks+0x1d4>
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	e2 5e       	subi	r30, 0xE2	; 226
    184a:	f0 44       	sbci	r31, 0x40	; 64
    184c:	e5 81       	ldd	r30, Z+5	; 0x05
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1854:	eb 53       	subi	r30, 0x3B	; 59
    1856:	f5 4c       	sbci	r31, 0xC5	; 197
    1858:	80 83       	st	Z, r24
            iLED[WING[R][4-LedCount]] = 0;
    185a:	e2 e2       	ldi	r30, 0x22	; 34
    185c:	ff eb       	ldi	r31, 0xBF	; 191
    185e:	e2 1b       	sub	r30, r18
    1860:	f3 0b       	sbc	r31, r19
    1862:	e0 81       	ld	r30, Z
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	eb 53       	subi	r30, 0x3B	; 59
    1868:	f5 4c       	sbci	r31, 0xC5	; 197
    186a:	10 82       	st	Z, r1
            iLED[WING[R][LedCount == 4 ? 4 : 3-LedCount]] = dimValue;
    186c:	44 30       	cpi	r20, 0x04	; 4
    186e:	29 f0       	breq	.+10     	; 0x187a <GenerateBlinks+0x208>
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	82 1b       	sub	r24, r18
    1876:	93 0b       	sbc	r25, r19
    1878:	02 c0       	rjmp	.+4      	; 0x187e <GenerateBlinks+0x20c>
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	fc 01       	movw	r30, r24
    1880:	e2 5e       	subi	r30, 0xE2	; 226
    1882:	f0 44       	sbci	r31, 0x40	; 64
    1884:	e0 81       	ld	r30, Z
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    188c:	eb 53       	subi	r30, 0x3B	; 59
    188e:	f5 4c       	sbci	r31, 0xC5	; 197
    1890:	80 83       	st	Z, r24
            break;
    1892:	61 c0       	rjmp	.+194    	; 0x1956 <GenerateBlinks+0x2e4>
    1894:	ce e1       	ldi	r28, 0x1E	; 30
    1896:	df eb       	ldi	r29, 0xBF	; 191
    1898:	83 e2       	ldi	r24, 0x23	; 35
    189a:	e8 2e       	mov	r14, r24
    189c:	8f eb       	ldi	r24, 0xBF	; 191
    189e:	f8 2e       	mov	r15, r24

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    18a0:	6e 01       	movw	r12, r28
    18a2:	0d 81       	ldd	r16, Y+5	; 0x05
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	96 dc       	rcall	.-1748   	; 0x11d4 <lfsr>
    18a8:	87 ff       	sbrs	r24, 7
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <GenerateBlinks+0x240>
    18ac:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <GenerateBlinks+0x242>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	f8 01       	movw	r30, r16
    18b6:	eb 53       	subi	r30, 0x3B	; 59
    18b8:	f5 4c       	sbci	r31, 0xC5	; 197
    18ba:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    18bc:	21 96       	adiw	r28, 0x01	; 1
    18be:	f6 01       	movw	r30, r12
    18c0:	00 81       	ld	r16, Z
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	87 dc       	rcall	.-1778   	; 0x11d4 <lfsr>
    18c6:	87 ff       	sbrs	r24, 7
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <GenerateBlinks+0x25e>
    18ca:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <GenerateBlinks+0x260>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	f8 01       	movw	r30, r16
    18d4:	eb 53       	subi	r30, 0x3B	; 59
    18d6:	f5 4c       	sbci	r31, 0xC5	; 197
    18d8:	80 83       	st	Z, r24
            iLED[WING[R][LedCount == 4 ? 4 : 3-LedCount]] = dimValue;
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    18da:	ec 16       	cp	r14, r28
    18dc:	fd 06       	cpc	r15, r29
    18de:	01 f7       	brne	.-64     	; 0x18a0 <GenerateBlinks+0x22e>
    18e0:	3a c0       	rjmp	.+116    	; 0x1956 <GenerateBlinks+0x2e4>
            }
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
    18e2:	90 fd       	sbrc	r25, 0
    18e4:	38 c0       	rjmp	.+112    	; 0x1956 <GenerateBlinks+0x2e4>
    18e6:	ee e1       	ldi	r30, 0x1E	; 30
    18e8:	ff eb       	ldi	r31, 0xBF	; 191
    18ea:	82 e2       	ldi	r24, 0x22	; 34
    18ec:	9f eb       	ldi	r25, 0xBF	; 191
    18ee:	9f 01       	movw	r18, r30
                for (uint8_t x=0; x<4; ++x){
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
    18f0:	a5 81       	ldd	r26, Z+5	; 0x05
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	c6 81       	ldd	r28, Z+6	; 0x06
    18f6:	d0 e0       	ldi	r29, 0x00	; 0
    18f8:	cb 53       	subi	r28, 0x3B	; 59
    18fa:	d5 4c       	sbci	r29, 0xC5	; 197
    18fc:	48 81       	ld	r20, Y
    18fe:	ab 53       	subi	r26, 0x3B	; 59
    1900:	b5 4c       	sbci	r27, 0xC5	; 197
    1902:	4c 93       	st	X, r20
    1904:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
    1906:	e9 01       	movw	r28, r18
    1908:	a8 81       	ld	r26, Y
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	c0 81       	ld	r28, Z
    190e:	d0 e0       	ldi	r29, 0x00	; 0
    1910:	cb 53       	subi	r28, 0x3B	; 59
    1912:	d5 4c       	sbci	r29, 0xC5	; 197
    1914:	28 81       	ld	r18, Y
    1916:	ab 53       	subi	r26, 0x3B	; 59
    1918:	b5 4c       	sbci	r27, 0xC5	; 197
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
                for (uint8_t x=0; x<4; ++x){
    191a:	2c 93       	st	X, r18
    191c:	8e 17       	cp	r24, r30
    191e:	9f 07       	cpc	r25, r31
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
                }
                iLED[WING[L][4]] = (lfsr() > 224)?dimValue:0;
    1920:	31 f7       	brne	.-52     	; 0x18ee <GenerateBlinks+0x27c>
    1922:	c0 91 27 bf 	lds	r28, 0xBF27	; 0x80bf27 <__bss_end+0x8413>
    1926:	d0 e0       	ldi	r29, 0x00	; 0
    1928:	55 dc       	rcall	.-1878   	; 0x11d4 <lfsr>
    192a:	81 3e       	cpi	r24, 0xE1	; 225
    192c:	18 f0       	brcs	.+6      	; 0x1934 <GenerateBlinks+0x2c2>
    192e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <GenerateBlinks+0x2c4>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	cb 53       	subi	r28, 0x3B	; 59
    1938:	d5 4c       	sbci	r29, 0xC5	; 197
                iLED[WING[R][4]] = (lfsr() > 224)?dimValue:0;
    193a:	88 83       	st	Y, r24
    193c:	c0 91 22 bf 	lds	r28, 0xBF22	; 0x80bf22 <__bss_end+0x840e>
    1940:	d0 e0       	ldi	r29, 0x00	; 0
    1942:	48 dc       	rcall	.-1904   	; 0x11d4 <lfsr>
    1944:	81 3e       	cpi	r24, 0xE1	; 225
    1946:	18 f0       	brcs	.+6      	; 0x194e <GenerateBlinks+0x2dc>
    1948:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <GenerateBlinks+0x2de>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	cb 53       	subi	r28, 0x3B	; 59
    1952:	d5 4c       	sbci	r29, 0xC5	; 197
    1954:	88 83       	st	Y, r24
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	08 95       	ret

00001968 <GenerateAudio>:


uint8_t GenerateAudio(){
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28

    if (auIn < HPLVL) {
    196e:	80 91 c4 3a 	lds	r24, 0x3AC4	; 0x803ac4 <auIn>
    1972:	89 31       	cpi	r24, 0x19	; 25
    1974:	08 f0       	brcs	.+2      	; 0x1978 <GenerateAudio+0x10>
    1976:	6c c1       	rjmp	.+728    	; 0x1c50 <GenerateAudio+0x2e8>

        detHdPh = 1;
    1978:	c1 e0       	ldi	r28, 0x01	; 1
    197a:	c0 93 c1 3a 	sts	0x3AC1, r28	; 0x803ac1 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    197e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1982:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1986:	88 27       	eor	r24, r24
    1988:	89 2b       	or	r24, r25
    198a:	09 f0       	breq	.+2      	; 0x198e <GenerateAudio+0x26>
    198c:	0b c1       	rjmp	.+534    	; 0x1ba4 <GenerateAudio+0x23c>

            //Silence
            if ((effect&0xE0)==0){
    198e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1992:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1996:	80 7e       	andi	r24, 0xE0	; 224
    1998:	99 27       	eor	r25, r25
    199a:	89 2b       	or	r24, r25
    199c:	31 f4       	brne	.+12     	; 0x19aa <GenerateAudio+0x42>
                auRepAddr = &zero;
    199e:	8b e3       	ldi	r24, 0x3B	; 59
    19a0:	98 e3       	ldi	r25, 0x38	; 56
    19a2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19a6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    19aa:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    19ae:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    19b2:	80 7e       	andi	r24, 0xE0	; 224
    19b4:	99 27       	eor	r25, r25
    19b6:	80 97       	sbiw	r24, 0x20	; 32
    19b8:	09 f0       	breq	.+2      	; 0x19bc <GenerateAudio+0x54>
    19ba:	53 c0       	rjmp	.+166    	; 0x1a62 <GenerateAudio+0xfa>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	52 e2       	ldi	r21, 0x22	; 34
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	70 e2       	ldi	r23, 0x20	; 32
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	25 dc       	rcall	.-1974   	; 0x1212 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	65 e0       	ldi	r22, 0x05	; 5
    19ce:	80 e8       	ldi	r24, 0x80	; 128
    19d0:	52 dc       	rcall	.-1884   	; 0x1276 <floatAround>
    19d2:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <auBuffer.4018+0x2>

                if (buttonMark){
    19d6:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    19da:	88 23       	and	r24, r24
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <GenerateAudio+0x78>
    19de:	41 c0       	rjmp	.+130    	; 0x1a62 <GenerateAudio+0xfa>
                    if (start == 0) {
    19e0:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <start.4020>
    19e4:	81 11       	cpse	r24, r1
    19e6:	0f c0       	rjmp	.+30     	; 0x1a06 <GenerateAudio+0x9e>
                        duration = 4;
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <duration.4019>
                        auVolume = 255;
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        auRepAddr = &auBuffer[0];
    19f4:	84 e1       	ldi	r24, 0x14	; 20
    19f6:	98 e3       	ldi	r25, 0x38	; 56
    19f8:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19fc:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <start.4020>
                    }
                    
                    if ((auVolume)&&(duration == 0)) auVolume >>= 1; 
    1a06:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1a0a:	88 23       	and	r24, r24
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <GenerateAudio+0xb8>
    1a0e:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <duration.4019>
    1a12:	81 11       	cpse	r24, r1
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <GenerateAudio+0xb8>
    1a16:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1a1a:	86 95       	lsr	r24
    1a1c:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>

                    if (auVolume == 0){
    1a20:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1a24:	81 11       	cpse	r24, r1
    1a26:	16 c0       	rjmp	.+44     	; 0x1a54 <GenerateAudio+0xec>
                        start = 0;
    1a28:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <start.4020>
                        auRepAddr = &zero;
    1a2c:	8b e3       	ldi	r24, 0x3B	; 59
    1a2e:	98 e3       	ldi	r25, 0x38	; 56
    1a30:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a34:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        effect &= 0x1f;
    1a38:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1a3c:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1a40:	8f 71       	andi	r24, 0x1F	; 31
    1a42:	99 27       	eor	r25, r25
    1a44:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1a48:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                        auVolume = 255;
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <GenerateAudio+0xfa>
                    } else if (duration) --duration;
    1a54:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <duration.4019>
    1a58:	88 23       	and	r24, r24
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <GenerateAudio+0xfa>
    1a5c:	81 50       	subi	r24, 0x01	; 1
    1a5e:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <duration.4019>

                }
            }

            //Good (bell)
            if (((effect&0xE0)==64)||((effect&0xE0)==160)){
    1a62:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1a66:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1a6a:	80 7e       	andi	r24, 0xE0	; 224
    1a6c:	99 27       	eor	r25, r25
    1a6e:	80 34       	cpi	r24, 0x40	; 64
    1a70:	91 05       	cpc	r25, r1
    1a72:	51 f0       	breq	.+20     	; 0x1a88 <GenerateAudio+0x120>
    1a74:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1a78:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1a7c:	80 7e       	andi	r24, 0xE0	; 224
    1a7e:	99 27       	eor	r25, r25
    1a80:	80 3a       	cpi	r24, 0xA0	; 160
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <GenerateAudio+0x120>
    1a86:	47 c0       	rjmp	.+142    	; 0x1b16 <GenerateAudio+0x1ae>
                static uint8_t start, auBuffer[3] = {255, 1, 0};
                
                if (buttonMark){
    1a88:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    1a8c:	88 23       	and	r24, r24
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <GenerateAudio+0x12a>
    1a90:	42 c0       	rjmp	.+132    	; 0x1b16 <GenerateAudio+0x1ae>
                    if (start == 0) {
    1a92:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <start.4021>
    1a96:	81 11       	cpse	r24, r1
    1a98:	12 c0       	rjmp	.+36     	; 0x1abe <GenerateAudio+0x156>
                        auVolume = 255;
    1a9a:	8f ef       	ldi	r24, 0xFF	; 255
    1a9c:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        TCB1_CCMP = 0x0a00;
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	9a e0       	ldi	r25, 0x0A	; 10
    1aa4:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1aa8:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1aac:	81 e1       	ldi	r24, 0x11	; 17
    1aae:	98 e3       	ldi	r25, 0x38	; 56
    1ab0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ab4:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <start.4021>
                    }
                     
                    TCB1_CCMP -= (0x080<<((uint8_t)(effect>64)?2:0));                    
    1abe:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1ac2:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1ac6:	81 34       	cpi	r24, 0x41	; 65
    1ac8:	91 05       	cpc	r25, r1
    1aca:	18 f4       	brcc	.+6      	; 0x1ad2 <GenerateAudio+0x16a>
    1acc:	20 e8       	ldi	r18, 0x80	; 128
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <GenerateAudio+0x16e>
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	32 e0       	ldi	r19, 0x02	; 2
    1ad6:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ada:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1ade:	82 1b       	sub	r24, r18
    1ae0:	93 0b       	sbc	r25, r19
    1ae2:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ae6:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume > 32) auVolume -=32; else 
    1aea:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1aee:	81 32       	cpi	r24, 0x21	; 33
    1af0:	30 f0       	brcs	.+12     	; 0x1afe <GenerateAudio+0x196>
    1af2:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1af6:	80 52       	subi	r24, 0x20	; 32
    1af8:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
    1afc:	0c c0       	rjmp	.+24     	; 0x1b16 <GenerateAudio+0x1ae>
                    {
                        start = 0;
    1afe:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <start.4021>
                        auRepAddr = &zero;
    1b02:	8b e3       	ldi	r24, 0x3B	; 59
    1b04:	98 e3       	ldi	r25, 0x38	; 56
    1b06:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b0a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        effect = 0;
    1b0e:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <effect>
    1b12:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <effect+0x1>
                    }
                }
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1b16:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1b1a:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1b1e:	80 7e       	andi	r24, 0xE0	; 224
    1b20:	99 27       	eor	r25, r25
    1b22:	80 36       	cpi	r24, 0x60	; 96
    1b24:	91 05       	cpc	r25, r1
    1b26:	a9 f5       	brne	.+106    	; 0x1b92 <GenerateAudio+0x22a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1b28:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <auBuffer.4023+0x6>
                auRepAddr = &auBuffer[0];
    1b2c:	81 e5       	ldi	r24, 0x51	; 81
    1b2e:	98 e3       	ldi	r25, 0x38	; 56
    1b30:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b34:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1b38:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b3a:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1b3c:	c3 30       	cpi	r28, 0x03	; 3
    1b3e:	39 f0       	breq	.+14     	; 0x1b4e <GenerateAudio+0x1e6>
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	65 e0       	ldi	r22, 0x05	; 5
    1b46:	80 e8       	ldi	r24, 0x80	; 128
    1b48:	96 db       	rcall	.-2260   	; 0x1276 <floatAround>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b4e:	cf 5f       	subi	r28, 0xFF	; 255
    1b50:	0f 5f       	subi	r16, 0xFF	; 255
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	c6 30       	cpi	r28, 0x06	; 6
    1b56:	91 f7       	brne	.-28     	; 0x1b3c <GenerateAudio+0x1d4>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b58:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    1b5c:	88 23       	and	r24, r24
    1b5e:	c9 f0       	breq	.+50     	; 0x1b92 <GenerateAudio+0x22a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	54 e0       	ldi	r21, 0x04	; 4
    1b64:	60 e8       	ldi	r22, 0x80	; 128
    1b66:	72 e0       	ldi	r23, 0x02	; 2
    1b68:	85 e0       	ldi	r24, 0x05	; 5
    1b6a:	53 db       	rcall	.-2394   	; 0x1212 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b6c:	80 91 b8 3a 	lds	r24, 0x3AB8	; 0x803ab8 <auVolume>
    1b70:	20 ea       	ldi	r18, 0xA0	; 160
    1b72:	40 e1       	ldi	r20, 0x10	; 16
    1b74:	62 e0       	ldi	r22, 0x02	; 2
    1b76:	7f db       	rcall	.-2306   	; 0x1276 <floatAround>
    1b78:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b7c:	20 e9       	ldi	r18, 0x90	; 144
    1b7e:	40 e7       	ldi	r20, 0x70	; 112
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <auBuffer.4023>
    1b86:	77 db       	rcall	.-2322   	; 0x1276 <floatAround>
    1b88:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <auBuffer.4023>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b8c:	80 95       	com	r24
    1b8e:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <auBuffer.4023+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1b92:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1b96:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
                    if (auVolume) --auVolume;
                }
            }*/

            //
            if ((effect&0xE0)==192){
    1b9a:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1b9e:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1ba2:	58 c0       	rjmp	.+176    	; 0x1c54 <GenerateAudio+0x2ec>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1ba4:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1ba8:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1bac:	88 27       	eor	r24, r24
    1bae:	81 15       	cp	r24, r1
    1bb0:	91 40       	sbci	r25, 0x01	; 1
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <GenerateAudio+0x24e>
    1bb4:	4f c0       	rjmp	.+158    	; 0x1c54 <GenerateAudio+0x2ec>
            if ((effect&0xE0) <= 0x90) {
    1bb6:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1bba:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1bbe:	80 7e       	andi	r24, 0xE0	; 224
    1bc0:	99 27       	eor	r25, r25
    1bc2:	81 39       	cpi	r24, 0x91	; 145
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <GenerateAudio+0x262>
    1bc8:	45 c0       	rjmp	.+138    	; 0x1c54 <GenerateAudio+0x2ec>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1bca:	60 91 3c 38 	lds	r22, 0x383C	; 0x80383c <effect>
    1bce:	70 91 3d 38 	lds	r23, 0x383D	; 0x80383d <effect+0x1>
    1bd2:	60 7e       	andi	r22, 0xE0	; 224
    1bd4:	77 27       	eor	r23, r23
    1bd6:	6f 5f       	subi	r22, 0xFF	; 255
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	86 e0       	ldi	r24, 0x06	; 6
    1bdc:	66 0f       	add	r22, r22
    1bde:	77 1f       	adc	r23, r23
    1be0:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <GenerateAudio+0x274>
    1be4:	ab 01       	movw	r20, r22
    1be6:	5d 5f       	subi	r21, 0xFD	; 253
    1be8:	7e 5f       	subi	r23, 0xFE	; 254
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	12 db       	rcall	.-2524   	; 0x1212 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1bee:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
    1bf2:	88 23       	and	r24, r24
    1bf4:	79 f1       	breq	.+94     	; 0x1c54 <GenerateAudio+0x2ec>
                    if (start == 0) {
    1bf6:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <start.4030>
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	0e c0       	rjmp	.+28     	; 0x1c1a <GenerateAudio+0x2b2>
                        duration = 3;
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <duration.4029>
                        auRepAddr = &auBuffer[0];
    1c04:	8e e0       	ldi	r24, 0x0E	; 14
    1c06:	98 e3       	ldi	r25, 0x38	; 56
    1c08:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c0c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	80 93 b8 3a 	sts	0x3AB8, r24	; 0x803ab8 <auVolume>
                        start = 1;
    1c16:	c0 93 50 38 	sts	0x3850, r28	; 0x803850 <start.4030>
                    }   if (duration == 0) {
    1c1a:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <duration.4029>
    1c1e:	81 11       	cpse	r24, r1
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <GenerateAudio+0x2e0>
                        effect &= 0x1f;
    1c22:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <effect>
    1c26:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <effect+0x1>
    1c2a:	8f 71       	andi	r24, 0x1F	; 31
    1c2c:	99 27       	eor	r25, r25
    1c2e:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1c32:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                        auRepAddr = &zero;
    1c36:	8b e3       	ldi	r24, 0x3B	; 59
    1c38:	98 e3       	ldi	r25, 0x38	; 56
    1c3a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c3e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        //auSmpAddr = &zero;
                        //auVolume = 0xff;
                        start = 0;
    1c42:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <start.4030>
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <GenerateAudio+0x2ec>
                    } else duration--;
    1c48:	81 50       	subi	r24, 0x01	; 1
    1c4a:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <duration.4029>
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <GenerateAudio+0x2ec>
                }
            }
        }
    } else {
        detHdPh = 0;
    1c50:	10 92 c1 3a 	sts	0x3AC1, r1	; 0x803ac1 <detHdPh>
    }
    return buttonMark;
    1c54:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <buttonMark>
}
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <getClock>:

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1c60:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1c64:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1c68:	20 91 45 38 	lds	r18, 0x3845	; 0x803845 <minuteMark>
    1c6c:	89 2f       	mov	r24, r25
    1c6e:	99 27       	eor	r25, r25
    1c70:	86 95       	lsr	r24
}
    1c72:	3c e3       	ldi	r19, 0x3C	; 60
    1c74:	23 9f       	mul	r18, r19
    1c76:	80 0d       	add	r24, r0
    1c78:	91 1d       	adc	r25, r1
    1c7a:	11 24       	eor	r1, r1
    1c7c:	08 95       	ret

00001c7e <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	8c 01       	movw	r16, r24
    1c88:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c8a:	ea df       	rcall	.-44     	; 0x1c60 <getClock>
    1c8c:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1c8e:	80 17       	cp	r24, r16
    1c90:	91 07       	cpc	r25, r17
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <idleTimeout+0x18>
        curClock += 256 * 60;
    1c94:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1c96:	c0 0f       	add	r28, r16
    1c98:	d1 1f       	adc	r29, r17
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	c2 17       	cp	r28, r18
    1c9e:	d3 07       	cpc	r29, r19
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <idleTimeout+0x26>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <SelfTest>:

uint8_t SelfTest(){
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <SelfTest+0x8>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <SelfTest+0xa>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    uint8_t tstVal[4] = {0x01, 0};
    1cbc:	19 82       	std	Y+1, r1	; 0x01
    1cbe:	1a 82       	std	Y+2, r1	; 0x02
    1cc0:	1b 82       	std	Y+3, r1	; 0x03
    1cc2:	1c 82       	std	Y+4, r1	; 0x04
    1cc4:	ac e2       	ldi	r26, 0x2C	; 44
    1cc6:	bf eb       	ldi	r27, 0xBF	; 191
    1cc8:	82 e3       	ldi	r24, 0x32	; 50
    1cca:	9f eb       	ldi	r25, 0xBF	; 191

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1ccc:	2f ef       	ldi	r18, 0xFF	; 255
    1cce:	ed 91       	ld	r30, X+
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	eb 53       	subi	r30, 0x3B	; 59
    1cd4:	f5 4c       	sbci	r31, 0xC5	; 197
    1cd6:	20 83       	st	Z, r18

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1cd8:	8a 17       	cp	r24, r26
    1cda:	9b 07       	cpc	r25, r27
    1cdc:	c1 f7       	brne	.-16     	; 0x1cce <SelfTest+0x20>
    iLED[HCKR[R][0]] = 0x00;
    iLED[HCKR[G][0]] = 0xff;
    auRepAddr = &zero;*/

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1cde:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <adcPhot>
    1ce2:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1ce8:	99 27       	eor	r25, r25
    1cea:	20 91 bf 3a 	lds	r18, 0x3ABF	; 0x803abf <adcPhot>
    1cee:	30 91 c0 3a 	lds	r19, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    1cf2:	33 27       	eor	r19, r19
    1cf4:	28 17       	cp	r18, r24
    1cf6:	39 07       	cpc	r19, r25
    1cf8:	c1 f3       	breq	.-16     	; 0x1cea <SelfTest+0x3c>
    iLED[HCKR[R][1]] = 0x00;
    1cfa:	e0 91 2d bf 	lds	r30, 0xBF2D	; 0x80bf2d <__bss_end+0x8419>
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	eb 53       	subi	r30, 0x3B	; 59
    1d02:	f5 4c       	sbci	r31, 0xC5	; 197
    1d04:	10 82       	st	Z, r1
    while (tstVal[0] == (adcTemp&0xff)) ;
    iLED[HCKR[R][3]] = 0x00;*/
    //iLED[HCKR[G][3]] = 0xff;

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d06:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <adcBtns>
    1d0a:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <adcBtns+0x1>
    1d0e:	80 38       	cpi	r24, 0x80	; 128
    1d10:	9c 40       	sbci	r25, 0x0C	; 12
    1d12:	c8 f3       	brcs	.-14     	; 0x1d06 <SelfTest+0x58>
    iLED[HCKR[R][4]] = 0x00;
    1d14:	e0 91 30 bf 	lds	r30, 0xBF30	; 0x80bf30 <__bss_end+0x841c>
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	eb 53       	subi	r30, 0x3B	; 59
    1d1c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d1e:	10 82       	st	Z, r1
        0x3CCD              Level 6, open_acl=0
        0x3CCE              Level 6, action_acl=192
        0x3CCF              Level 6, action_mask=20
    */
    
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    1d20:	9e 01       	movw	r18, r28
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	3f 4f       	sbci	r19, 0xFF	; 255
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	64 e0       	ldi	r22, 0x04	; 4
    1d2a:	8c ec       	ldi	r24, 0xCC	; 204
    1d2c:	9c e3       	ldi	r25, 0x3C	; 60
    1d2e:	b2 d9       	rcall	.-3228   	; 0x1094 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	8f 33       	cpi	r24, 0x3F	; 63
    1d34:	49 f4       	brne	.+18     	; 0x1d48 <SelfTest+0x9a>
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	81 11       	cpse	r24, r1
    1d3a:	06 c0       	rjmp	.+12     	; 0x1d48 <SelfTest+0x9a>
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	80 3c       	cpi	r24, 0xC0	; 192
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <SelfTest+0x9a>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	84 31       	cpi	r24, 0x14	; 20
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <SelfTest+0x9c>
    1d48:	ff cf       	rjmp	.-2      	; 0x1d48 <SelfTest+0x9a>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
        while(1);
    }
        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1d4e:	fc 01       	movw	r30, r24
    1d50:	eb 53       	subi	r30, 0x3B	; 59
    1d52:	f5 4c       	sbci	r31, 0xC5	; 197
    1d54:	10 82       	st	Z, r1
    1d56:	01 96       	adiw	r24, 0x01	; 1
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
        while(1);
    }
        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1d58:	88 32       	cpi	r24, 0x28	; 40
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	c1 f7       	brne	.-16     	; 0x1d4e <SelfTest+0xa0>
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
        iLED[x]=0;
    }

    for(uint8_t x=0; x<(adcPhot&0x3f); ++x) lfsr();
    1d60:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <adcPhot>
    1d64:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    1d68:	21 2f       	mov	r18, r17
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	8f 73       	andi	r24, 0x3F	; 63
    1d6e:	99 27       	eor	r25, r25
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	18 f4       	brcc	.+6      	; 0x1d7c <SelfTest+0xce>
    1d76:	2e da       	rcall	.-2980   	; 0x11d4 <lfsr>
    1d78:	1f 5f       	subi	r17, 0xFF	; 255
    1d7a:	f2 cf       	rjmp	.-28     	; 0x1d60 <SelfTest+0xb2>

    return 0;
}
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	24 96       	adiw	r28, 0x04	; 4
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	08 95       	ret

00001d8c <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	ee e1       	ldi	r30, 0x1E	; 30
    1d92:	ff eb       	ldi	r31, 0xBF	; 191
    1d94:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1d96:	a5 81       	ldd	r26, Z+5	; 0x05
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	ab 53       	subi	r26, 0x3B	; 59
    1d9c:	b5 4c       	sbci	r27, 0xC5	; 197
    1d9e:	1c 92       	st	X, r1
    1da0:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1da2:	a8 81       	ld	r26, Y
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ab 53       	subi	r26, 0x3B	; 59
    1da8:	b5 4c       	sbci	r27, 0xC5	; 197
    1daa:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1dac:	9f eb       	ldi	r25, 0xBF	; 191
    1dae:	e3 32       	cpi	r30, 0x23	; 35
    1db0:	f9 07       	cpc	r31, r25
    1db2:	81 f7       	brne	.-32     	; 0x1d94 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	d9 f4       	brne	.+54     	; 0x1dee <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1db8:	e0 91 23 bf 	lds	r30, 0xBF23	; 0x80bf23 <__bss_end+0x840f>
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dc2:	eb 53       	subi	r30, 0x3B	; 59
    1dc4:	f5 4c       	sbci	r31, 0xC5	; 197
    1dc6:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1dc8:	e0 91 24 bf 	lds	r30, 0xBF24	; 0x80bf24 <__bss_end+0x8410>
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dd2:	eb 53       	subi	r30, 0x3B	; 59
    1dd4:	f5 4c       	sbci	r31, 0xC5	; 197
    1dd6:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1dd8:	e0 91 25 bf 	lds	r30, 0xBF25	; 0x80bf25 <__bss_end+0x8411>
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1de2:	eb 53       	subi	r30, 0x3B	; 59
    1de4:	f5 4c       	sbci	r31, 0xC5	; 197
    1de6:	80 83       	st	Z, r24
        effect = 0x013f;
    1de8:	8f e3       	ldi	r24, 0x3F	; 63
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	46 c0       	rjmp	.+140    	; 0x1e7a <simonLed+0xee>
    } else if (val == 1) {  //
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	99 f4       	brne	.+38     	; 0x1e18 <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1df2:	e0 91 26 bf 	lds	r30, 0xBF26	; 0x80bf26 <__bss_end+0x8412>
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dfc:	eb 53       	subi	r30, 0x3B	; 59
    1dfe:	f5 4c       	sbci	r31, 0xC5	; 197
    1e00:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e02:	e0 91 27 bf 	lds	r30, 0xBF27	; 0x80bf27 <__bss_end+0x8413>
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e0c:	eb 53       	subi	r30, 0x3B	; 59
    1e0e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e10:	80 83       	st	Z, r24
        effect = 0x015f;
    1e12:	8f e5       	ldi	r24, 0x5F	; 95
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	31 c0       	rjmp	.+98     	; 0x1e7a <simonLed+0xee>
    } else if (val == 4) {  // III
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	d9 f4       	brne	.+54     	; 0x1e52 <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1e1c:	e0 91 1e bf 	lds	r30, 0xBF1E	; 0x80bf1e <__bss_end+0x840a>
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e26:	eb 53       	subi	r30, 0x3B	; 59
    1e28:	f5 4c       	sbci	r31, 0xC5	; 197
    1e2a:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1e2c:	e0 91 1f bf 	lds	r30, 0xBF1F	; 0x80bf1f <__bss_end+0x840b>
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e36:	eb 53       	subi	r30, 0x3B	; 59
    1e38:	f5 4c       	sbci	r31, 0xC5	; 197
    1e3a:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1e3c:	e0 91 20 bf 	lds	r30, 0xBF20	; 0x80bf20 <__bss_end+0x840c>
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e46:	eb 53       	subi	r30, 0x3B	; 59
    1e48:	f5 4c       	sbci	r31, 0xC5	; 197
    1e4a:	80 83       	st	Z, r24
        effect = 0x017f;
    1e4c:	8f e7       	ldi	r24, 0x7F	; 127
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <simonLed+0xee>
    } else if (val == 2) {  // I
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	b1 f4       	brne	.+44     	; 0x1e82 <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1e56:	e0 91 21 bf 	lds	r30, 0xBF21	; 0x80bf21 <__bss_end+0x840d>
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e60:	eb 53       	subi	r30, 0x3B	; 59
    1e62:	f5 4c       	sbci	r31, 0xC5	; 197
    1e64:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1e66:	e0 91 22 bf 	lds	r30, 0xBF22	; 0x80bf22 <__bss_end+0x840e>
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e70:	eb 53       	subi	r30, 0x3B	; 59
    1e72:	f5 4c       	sbci	r31, 0xC5	; 197
    1e74:	80 83       	st	Z, r24
        effect = 0x019f;
    1e76:	8f e9       	ldi	r24, 0x9F	; 159
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    1e7e:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    }
}
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1e8c:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1e90:	8d 7f       	andi	r24, 0xFD	; 253
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <BastetDictates+0xe>
    1e94:	73 c1       	rjmp	.+742    	; 0x217c <BastetDictates+0x2f4>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1e96:	8a e7       	ldi	r24, 0x7A	; 122
    1e98:	c8 da       	rcall	.-2672   	; 0x142a <CheckState>
    1e9a:	88 23       	and	r24, r24
    1e9c:	41 f0       	breq	.+16     	; 0x1eae <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1e9e:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <BastetDictates+0x20>
    1ea6:	6a c1       	rjmp	.+724    	; 0x217c <BastetDictates+0x2f4>
            gameNow = TEXT;
    1ea8:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
    1eac:	67 c1       	rjmp	.+718    	; 0x217c <BastetDictates+0x2f4>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1eae:	8b e7       	ldi	r24, 0x7B	; 123
    1eb0:	bc da       	rcall	.-2696   	; 0x142a <CheckState>
    1eb2:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1eb6:	88 23       	and	r24, r24
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1eba:	9f 3f       	cpi	r25, 0xFF	; 255
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <BastetDictates+0x3c>
            gameNow = BASTET;
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1ec4:	e0 91 1a bf 	lds	r30, 0xBF1A	; 0x80bf1a <__bss_end+0x8406>
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	9f 3f       	cpi	r25, 0xFF	; 255
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <BastetDictates+0x4c>
    1ece:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <BastetDictates+0x4e>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	eb 53       	subi	r30, 0x3B	; 59
    1ed8:	f5 4c       	sbci	r31, 0xC5	; 197
    1eda:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1edc:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	0c c0       	rjmp	.+24     	; 0x1efc <BastetDictates+0x74>
    1ee4:	c4 e6       	ldi	r28, 0x64	; 100
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1ee6:	d8 e3       	ldi	r29, 0x38	; 56
    1ee8:	75 d9       	rcall	.-3350   	; 0x11d4 <lfsr>
    1eea:	83 70       	andi	r24, 0x03	; 3
    1eec:	89 93       	st	Y+, r24
            gameNow = BASTET;

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1eee:	88 e3       	ldi	r24, 0x38	; 56
    1ef0:	c0 37       	cpi	r28, 0x70	; 112
    1ef2:	d8 07       	cpc	r29, r24
    1ef4:	c9 f7       	brne	.-14     	; 0x1ee8 <BastetDictates+0x60>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1efc:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	71 f4       	brne	.+28     	; 0x1f20 <BastetDictates+0x98>
    1f04:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	51 f4       	brne	.+20     	; 0x1f20 <BastetDictates+0x98>
        simonGameState = BASTET_GAME_INTRO;
    1f0c:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
        simonPos = 0;
    1f10:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonPos>
        simonInputPos = 0;
    1f14:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
        simonTimer = 0;
    1f18:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        simonCounter = 0;
    1f1c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f20:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	19 f5       	brne	.+70     	; 0x1f6e <BastetDictates+0xe6>
        if (simonTimer > 5) {   // ±.33 seconds
    1f28:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1f2c:	86 30       	cpi	r24, 0x06	; 6
    1f2e:	38 f0       	brcs	.+14     	; 0x1f3e <BastetDictates+0xb6>
            simonCounter++;
    1f30:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonCounter>
            simonTimer = 0;
    1f3a:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        }
        if (simonCounter > 5) {
    1f3e:	e0 91 5f 38 	lds	r30, 0x385F	; 0x80385f <simonCounter>
    1f42:	e6 30       	cpi	r30, 0x06	; 6
    1f44:	48 f0       	brcs	.+18     	; 0x1f58 <BastetDictates+0xd0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
            simonTimer = 0;
    1f4c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonCounter = 0;
    1f50:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
            ClearHackerLeds();
    1f54:	77 db       	rcall	.-2322   	; 0x1644 <ClearHackerLeds>
            return 0;
    1f56:	12 c1       	rjmp	.+548    	; 0x217c <BastetDictates+0x2f4>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	e4 5d       	subi	r30, 0xD4	; 212
    1f5c:	f0 44       	sbci	r31, 0x40	; 64
    1f5e:	e0 81       	ld	r30, Z
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f66:	eb 53       	subi	r30, 0x3B	; 59
    1f68:	f5 4c       	sbci	r31, 0xC5	; 197
    1f6a:	80 83       	st	Z, r24
    1f6c:	2b c0       	rjmp	.+86     	; 0x1fc4 <BastetDictates+0x13c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f6e:	83 30       	cpi	r24, 0x03	; 3
    1f70:	49 f5       	brne	.+82     	; 0x1fc4 <BastetDictates+0x13c>
        if (simonTimer > 7) {   // ±.5 second
    1f72:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1f76:	88 30       	cpi	r24, 0x08	; 8
    1f78:	38 f0       	brcs	.+14     	; 0x1f88 <BastetDictates+0x100>
            simonCounter++;
    1f7a:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonCounter>
            simonTimer = 0;
    1f84:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1f88:	e0 91 5f 38 	lds	r30, 0x385F	; 0x80385f <simonCounter>
    1f8c:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonPos>
    1f90:	8e 17       	cp	r24, r30
    1f92:	40 f4       	brcc	.+16     	; 0x1fa4 <BastetDictates+0x11c>
            simonInputPos = 0;
    1f94:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
            simonLed(0);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	f5 de       	rcall	.-534    	; 0x1d8c <simonLed>
    1fa2:	98 c0       	rjmp	.+304    	; 0x20d4 <BastetDictates+0x24c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1fa4:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	30 f4       	brcc	.+12     	; 0x1fb8 <BastetDictates+0x130>
            simonLed(simonState[simonCounter] + 1);
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	ec 59       	subi	r30, 0x9C	; 156
    1fb0:	f7 4c       	sbci	r31, 0xC7	; 199
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	ea de       	rcall	.-556    	; 0x1d8c <simonLed>
        }
        if (simonTimer > 6) {
    1fb8:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    1fbc:	87 30       	cpi	r24, 0x07	; 7
    1fbe:	10 f0       	brcs	.+4      	; 0x1fc4 <BastetDictates+0x13c>
            simonLed(0);
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	e4 de       	rcall	.-568    	; 0x1d8c <simonLed>
    1fc4:	c0 91 5e 38 	lds	r28, 0x385E	; 0x80385e <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1fc8:	c5 30       	cpi	r28, 0x05	; 5
    1fca:	09 f0       	breq	.+2      	; 0x1fce <BastetDictates+0x146>
    1fcc:	86 c0       	rjmp	.+268    	; 0x20da <BastetDictates+0x252>
    1fce:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1fd2:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1fd6:	98 17       	cp	r25, r24
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <BastetDictates+0x154>
    1fda:	71 c0       	rjmp	.+226    	; 0x20be <BastetDictates+0x236>
    1fdc:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    1fe0:	91 11       	cpse	r25, r1
    1fe2:	6f c0       	rjmp	.+222    	; 0x20c2 <BastetDictates+0x23a>
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <BastetDictates+0x162>
    1fe8:	6c c0       	rjmp	.+216    	; 0x20c2 <BastetDictates+0x23a>
                simonWait = 1;
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <simonWait>
                simonTimer = 0;
    1ff0:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                simonLed(buttonState+1);
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	ca de       	rcall	.-620    	; 0x1d8c <simonLed>
    1ff8:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    1ffa:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
    1ffe:	c0 93 30 38 	sts	0x3830, r28	; 0x803830 <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    2002:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    2006:	e8 2f       	mov	r30, r24
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	ec 59       	subi	r30, 0x9C	; 156
    200c:	f7 4c       	sbci	r31, 0xC7	; 199
    200e:	20 81       	ld	r18, Z
    2010:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    2014:	29 13       	cpse	r18, r25
    2016:	1d c0       	rjmp	.+58     	; 0x2052 <BastetDictates+0x1ca>
    2018:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    201a:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonInputPos>
    201e:	e0 91 63 38 	lds	r30, 0x3863	; 0x803863 <simonPos>
                    if (simonInputPos > simonPos) {
    2022:	e8 17       	cp	r30, r24
    2024:	a0 f5       	brcc	.+104    	; 0x208e <BastetDictates+0x206>
    2026:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    2028:	e0 93 63 38 	sts	0x3863, r30	; 0x803863 <simonPos>
    202c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                        simonTimer = 0;
    2030:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
                        simonCounter = 0;
    2034:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    2036:	59 f0       	breq	.+22     	; 0x204e <BastetDictates+0x1c6>
    2038:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e4 5d       	subi	r30, 0xD4	; 212
    203e:	f0 44       	sbci	r31, 0x40	; 64
    2040:	e5 81       	ldd	r30, Z+5	; 0x05
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2048:	eb 53       	subi	r30, 0x3B	; 59
    204a:	f5 4c       	sbci	r31, 0xC5	; 197
    204c:	80 83       	st	Z, r24
    204e:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    2050:	1c c0       	rjmp	.+56     	; 0x208a <BastetDictates+0x202>
    2052:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    205a:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    205e:	ac e2       	ldi	r26, 0x2C	; 44
    2060:	bf eb       	ldi	r27, 0xBF	; 191
    2062:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    206a:	eb 53       	subi	r30, 0x3B	; 59
    206c:	f5 4c       	sbci	r31, 0xC5	; 197
    206e:	80 83       	st	Z, r24
    2070:	8f eb       	ldi	r24, 0xBF	; 191
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    2072:	a2 33       	cpi	r26, 0x32	; 50
    2074:	b8 07       	cpc	r27, r24
    2076:	a9 f7       	brne	.-22     	; 0x2062 <BastetDictates+0x1da>
    2078:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    207c:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonPos>
                    simonPos = 0;
    2080:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                    simonTimer = 0;
    2084:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
                    simonCounter = 0;
    2088:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    208a:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <simonNextGameState>
    208e:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    2092:	8c 30       	cpi	r24, 0x0C	; 12
    2094:	20 f4       	brcc	.+8      	; 0x209e <BastetDictates+0x216>
    2096:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonPos>
    209a:	8c 30       	cpi	r24, 0x0C	; 12
    209c:	90 f0       	brcs	.+36     	; 0x20c2 <BastetDictates+0x23a>
                    effect = 64|2;
    209e:	82 e4       	ldi	r24, 0x42	; 66
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    20a6:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20aa:	8a e7       	ldi	r24, 0x7A	; 122
    20ac:	9d d9       	rcall	.-3270   	; 0x13e8 <UpdateState>
    20ae:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
                    simonTimer = 0;
    20b2:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
                    simonCounter = 0;
    20b6:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    20b8:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <simonNextGameState>
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <BastetDictates+0x23a>
    20be:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20c2:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    20c6:	88 3c       	cpi	r24, 0xC8	; 200
    20c8:	41 f4       	brne	.+16     	; 0x20da <BastetDictates+0x252>
    20ca:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20cc:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
    20d0:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
            simonCounter = 0;
    20d4:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonTimer = 0;
    20d8:	51 c0       	rjmp	.+162    	; 0x217c <BastetDictates+0x2f4>
            return 0;
    20da:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	81 f4       	brne	.+32     	; 0x2102 <BastetDictates+0x27a>
        if (simonTimer >= 7) {
    20e2:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    20e6:	87 30       	cpi	r24, 0x07	; 7
    20e8:	60 f0       	brcs	.+24     	; 0x2102 <BastetDictates+0x27a>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	4f de       	rcall	.-866    	; 0x1d8c <simonLed>
    20ee:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonWait>
            simonWait = 0;
    20f2:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonTimer = 0;
    20f6:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
            simonCounter = 0;
    20fa:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <simonNextGameState>
            simonGameState = simonNextGameState;
    20fe:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
    2102:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2106:	86 30       	cpi	r24, 0x06	; 6
    2108:	41 f5       	brne	.+80     	; 0x215a <BastetDictates+0x2d2>
    210a:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
        if (simonTimer > 3) {
    210e:	84 30       	cpi	r24, 0x04	; 4
    2110:	38 f0       	brcs	.+14     	; 0x2120 <BastetDictates+0x298>
    2112:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
            simonCounter++;
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonCounter>
    211c:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonTimer = 0;
    2120:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonCounter>
        }
        if (simonCounter > 5) {
    2124:	86 30       	cpi	r24, 0x06	; 6
    2126:	40 f0       	brcs	.+16     	; 0x2138 <BastetDictates+0x2b0>
    2128:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonTimer>
            simonTimer = 0;
    212c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonCounter>
            simonCounter = 0;
    2130:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    2132:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <simonGameState>
    2136:	22 c0       	rjmp	.+68     	; 0x217c <BastetDictates+0x2f4>
            return 0;
    2138:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	e8 1b       	sub	r30, r24
    213e:	f1 09       	sbc	r31, r1
    2140:	e4 5d       	subi	r30, 0xD4	; 212
    2142:	f0 44       	sbci	r31, 0x40	; 64
    2144:	a0 81       	ld	r26, Z
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	ab 53       	subi	r26, 0x3B	; 59
    214a:	b5 4c       	sbci	r27, 0xC5	; 197
    214c:	1c 92       	st	X, r1
    214e:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	eb 53       	subi	r30, 0x3B	; 59
    2154:	f5 4c       	sbci	r31, 0xC5	; 197
    2156:	10 82       	st	Z, r1
    2158:	0c c0       	rjmp	.+24     	; 0x2172 <BastetDictates+0x2ea>
    215a:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    215c:	51 f4       	brne	.+20     	; 0x2172 <BastetDictates+0x2ea>
        simonInputPos = 0;
    215e:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonInputPos>
        simonPos = 0;
    2162:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    2166:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonGameState>
        gameNow = TEXT;
    216a:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <gameNow>
        simonLed(0);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	0d de       	rcall	.-998    	; 0x1d8c <simonLed>
    2172:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonTimer>
    }

    ++simonTimer;
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <simonTimer>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <Cheat>:
    2184:	1f 93       	push	r17

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	62 97       	sbiw	r28, 0x12	; 18
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	8a 8b       	std	Y+18, r24	; 0x12
    2196:	80 e1       	ldi	r24, 0x10	; 16
    2198:	e2 ef       	ldi	r30, 0xF2	; 242
    219a:	fe eb       	ldi	r31, 0xBE	; 190
    219c:	de 01       	movw	r26, r28
    219e:	11 96       	adiw	r26, 0x01	; 1
    21a0:	01 90       	ld	r0, Z+
    21a2:	0d 92       	st	X+, r0
    21a4:	8a 95       	dec	r24
    21a6:	e1 f7       	brne	.-8      	; 0x21a0 <Cheat+0x1c>
    21a8:	fe 01       	movw	r30, r28
    21aa:	31 96       	adiw	r30, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	21 91       	ld	r18, Z+
    21b2:	31 91       	ld	r19, Z+
    21b4:	26 17       	cp	r18, r22
    21b6:	37 07       	cpc	r19, r23
    21b8:	09 f4       	brne	.+2      	; 0x21bc <Cheat+0x38>
    21ba:	89 2f       	mov	r24, r25
    21bc:	9f 5f       	subi	r25, 0xFF	; 255
    21be:	98 30       	cpi	r25, 0x08	; 8
    21c0:	b9 f7       	brne	.-18     	; 0x21b0 <Cheat+0x2c>
    21c2:	88 30       	cpi	r24, 0x08	; 8
    21c4:	10 f0       	brcs	.+4      	; 0x21ca <Cheat+0x46>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <Cheat+0x6e>
    21ca:	18 e1       	ldi	r17, 0x18	; 24
    21cc:	18 0f       	add	r17, r24
    21ce:	41 e0       	ldi	r20, 0x01	; 1
    21d0:	be 01       	movw	r22, r28
    21d2:	6f 5e       	subi	r22, 0xEF	; 239
    21d4:	7f 4f       	sbci	r23, 0xFF	; 255
    21d6:	81 2f       	mov	r24, r17
    21d8:	0e 94 f8 07 	call	0xff0	; 0xff0 <EERead>
    21dc:	89 89       	ldd	r24, Y+17	; 0x11
    21de:	8f 3f       	cpi	r24, 0xFF	; 255
    21e0:	91 f7       	brne	.-28     	; 0x21c6 <Cheat+0x42>
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	be 01       	movw	r22, r28
    21e6:	6e 5e       	subi	r22, 0xEE	; 238
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	81 2f       	mov	r24, r17
    21ec:	0e 94 08 08 	call	0x1010	; 0x1010 <EEWrite>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	62 96       	adiw	r28, 0x12	; 18
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	08 95       	ret

00002200 <UnflipData>:
    2200:	26 2f       	mov	r18, r22
    2202:	fb 01       	movw	r30, r22
    2204:	35 e5       	ldi	r19, 0x55	; 85
    2206:	9e 2f       	mov	r25, r30
    2208:	92 1b       	sub	r25, r18
    220a:	98 17       	cp	r25, r24
    220c:	28 f4       	brcc	.+10     	; 0x2218 <UnflipData+0x18>
    220e:	90 81       	ld	r25, Z
    2210:	92 95       	swap	r25
    2212:	93 27       	eor	r25, r19
    2214:	91 93       	st	Z+, r25
    2216:	f7 cf       	rjmp	.-18     	; 0x2206 <UnflipData+0x6>
    2218:	08 95       	ret

0000221a <ClearTxAfter>:
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	88 30       	cpi	r24, 0x08	; 8
    221e:	30 f4       	brcc	.+12     	; 0x222c <ClearTxAfter+0x12>
    2220:	e8 2f       	mov	r30, r24
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	e6 5b       	subi	r30, 0xB6	; 182
    2226:	f5 4c       	sbci	r31, 0xC5	; 197
    2228:	10 82       	st	Z, r1
    222a:	f7 cf       	rjmp	.-18     	; 0x221a <ClearTxAfter>
    222c:	08 95       	ret

0000222e <StartsWith>:
    222e:	ac 01       	movw	r20, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	e9 2f       	mov	r30, r25
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	da 01       	movw	r26, r20
    2238:	ae 0f       	add	r26, r30
    223a:	bf 1f       	adc	r27, r31
    223c:	3c 91       	ld	r19, X
    223e:	e6 0f       	add	r30, r22
    2240:	f7 1f       	adc	r31, r23
    2242:	31 11       	cpse	r19, r1
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <StartsWith+0x22>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 81       	ld	r25, Z
    224a:	99 23       	and	r25, r25
    224c:	49 f0       	breq	.+18     	; 0x2260 <StartsWith+0x32>
    224e:	07 c0       	rjmp	.+14     	; 0x225e <StartsWith+0x30>
    2250:	20 81       	ld	r18, Z
    2252:	22 23       	and	r18, r18
    2254:	c1 f3       	breq	.-16     	; 0x2246 <StartsWith+0x18>
    2256:	32 13       	cpse	r19, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <StartsWith+0x30>
    225a:	9f 5f       	subi	r25, 0xFF	; 255
    225c:	ea cf       	rjmp	.-44     	; 0x2232 <StartsWith+0x4>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	08 95       	ret

00002262 <PrepareSending>:
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	fc 01       	movw	r30, r24
    2268:	61 15       	cp	r22, r1
    226a:	71 05       	cpc	r23, r1
    226c:	59 f1       	breq	.+86     	; 0x22c4 <PrepareSending+0x62>
    226e:	a2 e5       	ldi	r26, 0x52	; 82
    2270:	ba e3       	ldi	r27, 0x3A	; 58
    2272:	ca e4       	ldi	r28, 0x4A	; 74
    2274:	da e3       	ldi	r29, 0x3A	; 58
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	9f ef       	ldi	r25, 0xFF	; 255
    227a:	6f 3f       	cpi	r22, 0xFF	; 255
    227c:	71 05       	cpc	r23, r1
    227e:	69 f0       	breq	.+26     	; 0x229a <PrepareSending+0x38>
    2280:	60 f0       	brcs	.+24     	; 0x229a <PrepareSending+0x38>
    2282:	ed 93       	st	X+, r30
    2284:	fd 93       	st	X+, r31
    2286:	99 93       	st	Y+, r25
    2288:	e1 50       	subi	r30, 0x01	; 1
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	6f 5f       	subi	r22, 0xFF	; 255
    228e:	71 09       	sbc	r23, r1
    2290:	8f 5f       	subi	r24, 0xFF	; 255
    2292:	87 30       	cpi	r24, 0x07	; 7
    2294:	91 f7       	brne	.-28     	; 0x227a <PrepareSending+0x18>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	1e c0       	rjmp	.+60     	; 0x22d6 <PrepareSending+0x74>
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	d9 01       	movw	r26, r18
    22a0:	aa 0f       	add	r26, r26
    22a2:	bb 1f       	adc	r27, r27
    22a4:	ae 5a       	subi	r26, 0xAE	; 174
    22a6:	b5 4c       	sbci	r27, 0xC5	; 197
    22a8:	ed 93       	st	X+, r30
    22aa:	fc 93       	st	X, r31
    22ac:	6f 3f       	cpi	r22, 0xFF	; 255
    22ae:	71 05       	cpc	r23, r1
    22b0:	11 f4       	brne	.+4      	; 0x22b6 <PrepareSending+0x54>
    22b2:	6e ef       	ldi	r22, 0xFE	; 254
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	f9 01       	movw	r30, r18
    22b8:	e6 5b       	subi	r30, 0xB6	; 182
    22ba:	f5 4c       	sbci	r31, 0xC5	; 197
    22bc:	60 83       	st	Z, r22
    22be:	40 93 48 3a 	sts	0x3A48, r20	; 0x803a48 <txTypeNow>
    22c2:	05 c0       	rjmp	.+10     	; 0x22ce <PrepareSending+0x6c>
    22c4:	10 92 52 3a 	sts	0x3A52, r1	; 0x803a52 <txAddrList>
    22c8:	10 92 53 3a 	sts	0x3A53, r1	; 0x803a53 <txAddrList+0x1>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	a5 df       	rcall	.-182    	; 0x221a <ClearTxAfter>
    22d0:	10 92 49 3a 	sts	0x3A49, r1	; 0x803a49 <txAddrNow>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	08 95       	ret

000022dc <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	f9 01       	movw	r30, r18
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	e3 5e       	subi	r30, 0xE3	; 227
    22ec:	f6 4c       	sbci	r31, 0xC6	; 198
    22ee:	a9 e5       	ldi	r26, 0x59	; 89
    22f0:	ba e7       	ldi	r27, 0x7A	; 122
    22f2:	a0 83       	st	Z, r26
    22f4:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    22f6:	f9 01       	movw	r30, r18
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	e3 5a       	subi	r30, 0xA3	; 163
    22fe:	f6 4c       	sbci	r31, 0xC6	; 198
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	60 83       	st	Z, r22
    2306:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2308:	22 0f       	add	r18, r18
    230a:	33 1f       	adc	r19, r19
    230c:	f9 01       	movw	r30, r18
    230e:	e3 56       	subi	r30, 0x63	; 99
    2310:	f6 4c       	sbci	r31, 0xC6	; 198
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	40 83       	st	Z, r20
    2318:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	28 0f       	add	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	f9 01       	movw	r30, r18
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	e3 5e       	subi	r30, 0xE3	; 227
    2328:	f6 4c       	sbci	r31, 0xC6	; 198
    232a:	c2 e6       	ldi	r28, 0x62	; 98
    232c:	da e7       	ldi	r29, 0x7A	; 122
    232e:	c0 83       	st	Z, r28
    2330:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2332:	f9 01       	movw	r30, r18
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	e3 5a       	subi	r30, 0xA3	; 163
    233a:	f6 4c       	sbci	r31, 0xC6	; 198
    233c:	cc e0       	ldi	r28, 0x0C	; 12
    233e:	d0 e0       	ldi	r29, 0x00	; 0
    2340:	c0 83       	st	Z, r28
    2342:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    2344:	22 0f       	add	r18, r18
    2346:	33 1f       	adc	r19, r19
    2348:	f9 01       	movw	r30, r18
    234a:	e3 56       	subi	r30, 0x63	; 99
    234c:	f6 4c       	sbci	r31, 0xC6	; 198
    234e:	40 83       	st	Z, r20
    2350:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2352:	e2 e0       	ldi	r30, 0x02	; 2
    2354:	e8 0f       	add	r30, r24
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e3 5e       	subi	r30, 0xE3	; 227
    235e:	f6 4c       	sbci	r31, 0xC6	; 198
    2360:	20 ef       	ldi	r18, 0xF0	; 240
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	20 83       	st	Z, r18
    2366:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2368:	23 e0       	ldi	r18, 0x03	; 3
    236a:	28 0f       	add	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	f9 01       	movw	r30, r18
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	e3 5e       	subi	r30, 0xE3	; 227
    2376:	f6 4c       	sbci	r31, 0xC6	; 198
    2378:	a0 83       	st	Z, r26
    237a:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    237c:	f9 01       	movw	r30, r18
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	e3 5a       	subi	r30, 0xA3	; 163
    2384:	f6 4c       	sbci	r31, 0xC6	; 198
    2386:	60 83       	st	Z, r22
    2388:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    238a:	22 0f       	add	r18, r18
    238c:	33 1f       	adc	r19, r19
    238e:	f9 01       	movw	r30, r18
    2390:	e3 56       	subi	r30, 0x63	; 99
    2392:	f6 4c       	sbci	r31, 0xC6	; 198
    2394:	40 83       	st	Z, r20
    2396:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2398:	24 e0       	ldi	r18, 0x04	; 4
    239a:	28 0f       	add	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	f9 01       	movw	r30, r18
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	e3 5e       	subi	r30, 0xE3	; 227
    23a6:	f6 4c       	sbci	r31, 0xC6	; 198
    23a8:	a5 e5       	ldi	r26, 0x55	; 85
    23aa:	ba e7       	ldi	r27, 0x7A	; 122
    23ac:	a0 83       	st	Z, r26
    23ae:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23b0:	f9 01       	movw	r30, r18
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	e3 5a       	subi	r30, 0xA3	; 163
    23b8:	f6 4c       	sbci	r31, 0xC6	; 198
    23ba:	60 83       	st	Z, r22
    23bc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23be:	22 0f       	add	r18, r18
    23c0:	33 1f       	adc	r19, r19
    23c2:	f9 01       	movw	r30, r18
    23c4:	e3 56       	subi	r30, 0x63	; 99
    23c6:	f6 4c       	sbci	r31, 0xC6	; 198
    23c8:	40 83       	st	Z, r20
    23ca:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23cc:	8b 5f       	subi	r24, 0xFB	; 251
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	2c 97       	sbiw	r28, 0x0c	; 12
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	7c 01       	movw	r14, r24
    23f2:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    23f4:	9e 01       	movw	r18, r28
    23f6:	2f 5f       	subi	r18, 0xFF	; 255
    23f8:	3f 4f       	sbci	r19, 0xFF	; 255
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	6c e0       	ldi	r22, 0x0C	; 12
    23fe:	80 96       	adiw	r24, 0x20	; 32
    2400:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	9a 81       	ldd	r25, Y+2	; 0x02
    2408:	98 27       	eor	r25, r24
    240a:	89 27       	eor	r24, r25
    240c:	98 27       	eor	r25, r24
    240e:	80 96       	adiw	r24, 0x20	; 32
    2410:	f8 01       	movw	r30, r16
    2412:	80 83       	st	Z, r24
    2414:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	98 27       	eor	r25, r24
    241c:	89 27       	eor	r24, r25
    241e:	98 27       	eor	r25, r24
    2420:	80 96       	adiw	r24, 0x20	; 32
    2422:	82 83       	std	Z+2, r24	; 0x02
    2424:	93 83       	std	Z+3, r25	; 0x03
    2426:	de 01       	movw	r26, r28
    2428:	15 96       	adiw	r26, 0x05	; 5
    242a:	34 96       	adiw	r30, 0x04	; 4
    242c:	c8 01       	movw	r24, r16
    242e:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2430:	2d 91       	ld	r18, X+
    2432:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2434:	e8 17       	cp	r30, r24
    2436:	f9 07       	cpc	r31, r25
    2438:	d9 f7       	brne	.-10     	; 0x2430 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    243a:	fc e2       	ldi	r31, 0x2C	; 44
    243c:	ef 0e       	add	r14, r31
    243e:	f1 1c       	adc	r15, r1
    2440:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2442:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    2444:	9e 01       	movw	r18, r28
    2446:	2f 5f       	subi	r18, 0xFF	; 255
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	63 e0       	ldi	r22, 0x03	; 3
    244e:	c7 01       	movw	r24, r14
    2450:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	98 27       	eor	r25, r24
    245a:	89 27       	eor	r24, r25
    245c:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    245e:	97 01       	movw	r18, r14
    2460:	2e 5f       	subi	r18, 0xFE	; 254
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    2464:	43 e0       	ldi	r20, 0x03	; 3
    2466:	4d 15       	cp	r20, r13
    2468:	80 f4       	brcc	.+32     	; 0x248a <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    246a:	ac 01       	movw	r20, r24
    246c:	41 50       	subi	r20, 0x01	; 1
    246e:	51 09       	sbc	r21, r1
    2470:	f8 01       	movw	r30, r16
    2472:	42 8f       	std	Z+26, r20	; 0x1a
    2474:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2476:	f3 e0       	ldi	r31, 0x03	; 3
    2478:	ef 0e       	add	r14, r31
    247a:	f1 1c       	adc	r15, r1
    247c:	f8 01       	movw	r30, r16
    247e:	e4 86       	std	Z+12, r14	; 0x0c
    2480:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    2482:	4b 81       	ldd	r20, Y+3	; 0x03
    2484:	f5 01       	movw	r30, r10
    2486:	44 a3       	std	Z+36, r20	; 0x24
    2488:	05 c0       	rjmp	.+10     	; 0x2494 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    248a:	f8 01       	movw	r30, r16
    248c:	82 8f       	std	Z+26, r24	; 0x1a
    248e:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    2490:	24 87       	std	Z+12, r18	; 0x0c
    2492:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    2494:	7c 01       	movw	r14, r24
    2496:	e2 0e       	add	r14, r18
    2498:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    249a:	d3 94       	inc	r13
    249c:	0e 5f       	subi	r16, 0xFE	; 254
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	ff ef       	ldi	r31, 0xFF	; 255
    24a2:	af 1a       	sub	r10, r31
    24a4:	bf 0a       	sbc	r11, r31
    24a6:	47 e0       	ldi	r20, 0x07	; 7
    24a8:	d4 12       	cpse	r13, r20
    24aa:	cc cf       	rjmp	.-104    	; 0x2444 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24ac:	2c 96       	adiw	r28, 0x0c	; 12
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	df 90       	pop	r13
    24c0:	bf 90       	pop	r11
    24c2:	af 90       	pop	r10
    24c4:	08 95       	ret

000024c6 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24c6:	cf 92       	push	r12
    24c8:	df 92       	push	r13
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	a0 97       	sbiw	r28, 0x20	; 32
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    24e2:	7c 01       	movw	r14, r24
    24e4:	20 e2       	ldi	r18, 0x20	; 32
    24e6:	e2 0e       	add	r14, r18
    24e8:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    24ea:	9e 01       	movw	r18, r28
    24ec:	2f 5f       	subi	r18, 0xFF	; 255
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	62 e0       	ldi	r22, 0x02	; 2
    24f4:	8c 96       	adiw	r24, 0x2c	; 44
    24f6:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    24fa:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    24fc:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    24fe:	11 23       	and	r17, r17
    2500:	59 f1       	breq	.+86     	; 0x2558 <CheckLetter+0x92>
    2502:	01 2f       	mov	r16, r17
    2504:	11 32       	cpi	r17, 0x21	; 33
    2506:	08 f0       	brcs	.+2      	; 0x250a <CheckLetter+0x44>
    2508:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    250a:	9e 01       	movw	r18, r28
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	60 2f       	mov	r22, r16
    2514:	c7 01       	movw	r24, r14
    2516:	0e 96       	adiw	r24, 0x0e	; 14
    2518:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
    251c:	fe 01       	movw	r30, r28
    251e:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2520:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2522:	dd 20       	and	r13, r13
    2524:	61 f0       	breq	.+24     	; 0x253e <CheckLetter+0x78>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    2526:	e1 e0       	ldi	r30, 0x01	; 1
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	ec 0f       	add	r30, r28
    252c:	fd 1f       	adc	r31, r29
    252e:	e8 0f       	add	r30, r24
    2530:	f1 1d       	adc	r31, r1
    2532:	90 81       	ld	r25, Z
    2534:	90 62       	ori	r25, 0x20	; 32
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	9c 11       	cpse	r25, r12
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <CheckLetter+0x92>
    253c:	0e c0       	rjmp	.+28     	; 0x255a <CheckLetter+0x94>
            }
            if (data[y] == '[') found = 1;
    253e:	91 91       	ld	r25, Z+
    2540:	dd 24       	eor	r13, r13
    2542:	d3 94       	inc	r13
    2544:	9b 35       	cpi	r25, 0x5B	; 91
    2546:	09 f0       	breq	.+2      	; 0x254a <CheckLetter+0x84>
    2548:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	80 17       	cp	r24, r16
    254e:	48 f3       	brcs	.-46     	; 0x2522 <CheckLetter+0x5c>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2550:	e0 0e       	add	r14, r16
    2552:	f1 1c       	adc	r15, r1
        x -= max;
    2554:	10 1b       	sub	r17, r16
    2556:	d3 cf       	rjmp	.-90     	; 0x24fe <CheckLetter+0x38>
    }
    return 0;
    2558:	80 e0       	ldi	r24, 0x00	; 0
}
    255a:	a0 96       	adiw	r28, 0x20	; 32
    255c:	cd bf       	out	0x3d, r28	; 61
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	cf 90       	pop	r12
    2570:	08 95       	ret

00002572 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    2572:	af 92       	push	r10
    2574:	bf 92       	push	r11
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	00 d0       	rcall	.+0      	; 0x2586 <FindChild+0x14>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <FindChild+0x16>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	d6 2e       	mov	r13, r22
    258e:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    2590:	9e 01       	movw	r18, r28
    2592:	2f 5f       	subi	r18, 0xFF	; 255
    2594:	3f 4f       	sbci	r19, 0xFF	; 255
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	64 e0       	ldi	r22, 0x04	; 4
    259a:	80 96       	adiw	r24, 0x20	; 32
    259c:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
    25a0:	e9 80       	ldd	r14, Y+1	; 0x01
    25a2:	fa 80       	ldd	r15, Y+2	; 0x02
    25a4:	fe 24       	eor	r15, r14
    25a6:	ef 24       	eor	r14, r15
    25a8:	fe 24       	eor	r15, r14
    25aa:	0b 81       	ldd	r16, Y+3	; 0x03
    25ac:	1c 81       	ldd	r17, Y+4	; 0x04
    25ae:	10 27       	eor	r17, r16
    25b0:	01 27       	eor	r16, r17
    25b2:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    25b4:	0e 15       	cp	r16, r14
    25b6:	1f 05       	cpc	r17, r15
    25b8:	48 f5       	brcc	.+82     	; 0x260c <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    25ba:	a0 16       	cp	r10, r16
    25bc:	b1 06       	cpc	r11, r17
    25be:	60 f0       	brcs	.+24     	; 0x25d8 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    25c0:	9e 01       	movw	r18, r28
    25c2:	2f 5f       	subi	r18, 0xFF	; 255
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	62 e0       	ldi	r22, 0x02	; 2
    25ca:	c8 01       	movw	r24, r16
    25cc:	80 96       	adiw	r24, 0x20	; 32
    25ce:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
    25d2:	09 81       	ldd	r16, Y+1	; 0x01
    25d4:	1a 81       	ldd	r17, Y+2	; 0x02
    25d6:	eb cf       	rjmp	.-42     	; 0x25ae <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25d8:	9e 01       	movw	r18, r28
    25da:	2f 5f       	subi	r18, 0xFF	; 255
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	61 e0       	ldi	r22, 0x01	; 1
    25e2:	c8 01       	movw	r24, r16
    25e4:	85 96       	adiw	r24, 0x25	; 37
    25e6:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	81 11       	cpse	r24, r1
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25f0:	d1 10       	cpse	r13, r1
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <FindChild+0x8e>
    25f4:	0e c0       	rjmp	.+28     	; 0x2612 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25f6:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
    25fa:	81 11       	cpse	r24, r1
    25fc:	f9 cf       	rjmp	.-14     	; 0x25f0 <FindChild+0x7e>
    25fe:	e0 cf       	rjmp	.-64     	; 0x25c0 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2600:	6d 2d       	mov	r22, r13
    2602:	c8 01       	movw	r24, r16
    2604:	60 df       	rcall	.-320    	; 0x24c6 <CheckLetter>
    2606:	88 23       	and	r24, r24
    2608:	d9 f2       	breq	.-74     	; 0x25c0 <FindChild+0x4e>
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <FindChild+0xa2>
    2612:	c8 01       	movw	r24, r16
}
    2614:	24 96       	adiw	r28, 0x04	; 4
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	df 90       	pop	r13
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	08 95       	ret

0000262e <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    262e:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2630:	9f e9       	ldi	r25, 0x9F	; 159
    2632:	98 0f       	add	r25, r24
    2634:	9a 31       	cpi	r25, 0x1A	; 26
    2636:	38 f0       	brcs	.+14     	; 0x2646 <InpOkChk+0x18>
    2638:	90 ed       	ldi	r25, 0xD0	; 208
    263a:	98 0f       	add	r25, r24
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	9a 30       	cpi	r25, 0x0A	; 10
    2640:	18 f0       	brcs	.+6      	; 0x2648 <InpOkChk+0x1a>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	08 95       	ret
    2646:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2648:	08 95       	ret

0000264a <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2654:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    2656:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2658:	f8 01       	movw	r30, r16
    265a:	ed 0f       	add	r30, r29
    265c:	f1 1d       	adc	r31, r1
    265e:	20 81       	ld	r18, Z
    2660:	8c 2f       	mov	r24, r28
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	22 23       	and	r18, r18
    2666:	51 f0       	breq	.+20     	; 0x267c <CleanInput+0x32>
        data[cnt] = data[x];
    2668:	d8 01       	movw	r26, r16
    266a:	a8 0f       	add	r26, r24
    266c:	b9 1f       	adc	r27, r25
    266e:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2670:	80 81       	ld	r24, Z
    2672:	dd df       	rcall	.-70     	; 0x262e <InpOkChk>
    2674:	81 11       	cpse	r24, r1
    2676:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2678:	df 5f       	subi	r29, 0xFF	; 255
    267a:	ee cf       	rjmp	.-36     	; 0x2658 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    267c:	f8 01       	movw	r30, r16
    267e:	e8 0f       	add	r30, r24
    2680:	f9 1f       	adc	r31, r25
    2682:	10 82       	st	Z, r1
    return cnt;
}
    2684:	8c 2f       	mov	r24, r28
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2690:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    2692:	20 91 49 3a 	lds	r18, 0x3A49	; 0x803a49 <txAddrNow>
    2696:	28 30       	cpi	r18, 0x08	; 8
    2698:	08 f0       	brcs	.+2      	; 0x269c <CheckSend+0xc>
    269a:	49 c0       	rjmp	.+146    	; 0x272e <CheckSend+0x9e>
    269c:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    26a0:	88 23       	and	r24, r24
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <CheckSend+0x16>
    26a4:	44 c0       	rjmp	.+136    	; 0x272e <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    26a6:	82 2f       	mov	r24, r18
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	fc 01       	movw	r30, r24
    26ac:	e6 5b       	subi	r30, 0xB6	; 182
    26ae:	f5 4c       	sbci	r31, 0xC5	; 197
    26b0:	e0 81       	ld	r30, Z
    26b2:	e1 11       	cpse	r30, r1
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <CheckSend+0x32>
            txPart = 0;
    26b6:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <txPart.3937>
            txAddrNow = TXLISTLEN;
    26ba:	88 e0       	ldi	r24, 0x08	; 8
    26bc:	80 93 49 3a 	sts	0x3A49, r24	; 0x803a49 <txAddrNow>
    26c0:	2e c0       	rjmp	.+92     	; 0x271e <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    26c2:	50 91 08 39 	lds	r21, 0x3908	; 0x803908 <txPart.3937>
    26c6:	5e 17       	cp	r21, r30
    26c8:	60 f5       	brcc	.+88     	; 0x2722 <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    26ca:	ce 2f       	mov	r28, r30
    26cc:	c5 1b       	sub	r28, r21
    26ce:	c1 32       	cpi	r28, 0x21	; 33
    26d0:	08 f0       	brcs	.+2      	; 0x26d4 <CheckSend+0x44>
    26d2:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	fc 01       	movw	r30, r24
    26da:	ee 5a       	subi	r30, 0xAE	; 174
    26dc:	f5 4c       	sbci	r31, 0xC5	; 197
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	23 ef       	ldi	r18, 0xF3	; 243
    26e4:	3a e3       	ldi	r19, 0x3A	; 58
    26e6:	40 91 48 3a 	lds	r20, 0x3A48	; 0x803a48 <txTypeNow>
    26ea:	6c 2f       	mov	r22, r28
    26ec:	85 0f       	add	r24, r21
    26ee:	91 1d       	adc	r25, r1
    26f0:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
            txPart += EEreadLength;
    26f4:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <txPart.3937>
    26f8:	8c 0f       	add	r24, r28
    26fa:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    26fe:	ec 2f       	mov	r30, r28
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	ed 50       	subi	r30, 0x0D	; 13
    2704:	f5 4c       	sbci	r31, 0xC5	; 197
    2706:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    2708:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <txBuffer>
    270c:	81 11       	cpse	r24, r1
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <CheckSend+0x86>
    2710:	8b ed       	ldi	r24, 0xDB	; 219
    2712:	80 93 f3 3a 	sts	0x3AF3, r24	; 0x803af3 <txBuffer>
            SerSend(&txBuffer[0]);
    2716:	83 ef       	ldi	r24, 0xF3	; 243
    2718:	9a e3       	ldi	r25, 0x3A	; 58
    271a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	0b c0       	rjmp	.+22     	; 0x2738 <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2722:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <txPart.3937>
            ++txAddrNow;
    2726:	2f 5f       	subi	r18, 0xFF	; 255
    2728:	20 93 49 3a 	sts	0x3A49, r18	; 0x803a49 <txAddrNow>
    272c:	f8 cf       	rjmp	.-16     	; 0x271e <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    272e:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	91 11       	cpse	r25, r1
    2736:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2740:	c0 91 1c 39 	lds	r28, 0x391C	; 0x80391c <responseList>
    2744:	cc 23       	and	r28, r28
    2746:	b1 f1       	breq	.+108    	; 0x27b4 <CheckResponse+0x78>
        --responseList;
    2748:	c1 50       	subi	r28, 0x01	; 1
    274a:	c0 93 1c 39 	sts	0x391C, r28	; 0x80391c <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    274e:	d0 91 07 39 	lds	r29, 0x3907	; 0x803907 <number.3941>
    2752:	2d 2f       	mov	r18, r29
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	f9 01       	movw	r30, r18
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	e3 5e       	subi	r30, 0xE3	; 227
    275e:	f6 4c       	sbci	r31, 0xC6	; 198
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	80 3f       	cpi	r24, 0xF0	; 240
    2766:	4f ef       	ldi	r20, 0xFF	; 255
    2768:	94 07       	cpc	r25, r20
    276a:	51 f4       	brne	.+20     	; 0x2780 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    276c:	60 91 37 3a 	lds	r22, 0x3A37	; 0x803a37 <currObj+0x1a>
    2770:	70 91 38 3a 	lds	r23, 0x3A38	; 0x803a38 <currObj+0x1b>
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	80 91 29 3a 	lds	r24, 0x3A29	; 0x803a29 <currObj+0xc>
    277a:	90 91 2a 3a 	lds	r25, 0x3A2A	; 0x803a2a <currObj+0xd>
    277e:	0d c0       	rjmp	.+26     	; 0x279a <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2780:	d9 01       	movw	r26, r18
    2782:	aa 0f       	add	r26, r26
    2784:	bb 1f       	adc	r27, r27
    2786:	a3 56       	subi	r26, 0x63	; 99
    2788:	b6 4c       	sbci	r27, 0xC6	; 198
    278a:	22 0f       	add	r18, r18
    278c:	33 1f       	adc	r19, r19
    278e:	f9 01       	movw	r30, r18
    2790:	e3 5a       	subi	r30, 0xA3	; 163
    2792:	f6 4c       	sbci	r31, 0xC6	; 198
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	4c 91       	ld	r20, X
    279a:	63 dd       	rcall	.-1338   	; 0x2262 <PrepareSending>
        }
        number++;
    279c:	df 5f       	subi	r29, 0xFF	; 255
    279e:	d0 93 07 39 	sts	0x3907, r29	; 0x803907 <number.3941>

        if (responseList == 0) {
    27a2:	c1 11       	cpse	r28, r1
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    27a6:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    27a8:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <serRxDone>
            number = 0;
    27ac:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <number.3941>
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <CheckResponse+0x78>
            return 0;
        }
        return 1;
    27b2:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    27b4:	8c 2f       	mov	r24, r28
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    27bc:	5f 92       	push	r5
    27be:	6f 92       	push	r6
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	2a 97       	sbiw	r28, 0x0a	; 10
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    27e6:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <currDepth>
    27ea:	8f 3f       	cpi	r24, 0xFF	; 255
    27ec:	49 f4       	brne	.+18     	; 0x2800 <CheckInput+0x44>
        //Start at first location
        PopulateObject(route[0], &currObj);
    27ee:	6d e1       	ldi	r22, 0x1D	; 29
    27f0:	7a e3       	ldi	r23, 0x3A	; 58
    27f2:	80 91 dd 39 	lds	r24, 0x39DD	; 0x8039dd <route>
    27f6:	90 91 de 39 	lds	r25, 0x39DE	; 0x8039de <route+0x1>
    27fa:	ec dd       	rcall	.-1064   	; 0x23d4 <PopulateObject>
        currDepth = 0;
    27fc:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <currDepth>
    }

    if (serRxDone){
    2800:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <serRxDone>
    2804:	88 23       	and	r24, r24
    2806:	09 f4       	brne	.+2      	; 0x280a <CheckInput+0x4e>
    2808:	d4 c1       	rjmp	.+936    	; 0x2bb2 <CheckInput+0x3f6>

        //Special input requested from user by game
        if (specialInput[0]){
    280a:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput>
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <CheckInput+0x58>
    2812:	4f c0       	rjmp	.+158    	; 0x28b2 <CheckInput+0xf6>
            specialPassed = 0;
    2814:	10 92 0b 39 	sts	0x390B, r1	; 0x80390b <specialPassed>
            data[0] = 'a';
    2818:	81 e6       	ldi	r24, 0x61	; 97
    281a:	f8 01       	movw	r30, r16
    281c:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    281e:	6c e0       	ldi	r22, 0x0C	; 12
    2820:	79 e3       	ldi	r23, 0x39	; 57
    2822:	87 e7       	ldi	r24, 0x77	; 119
    2824:	9a e3       	ldi	r25, 0x3A	; 58
    2826:	03 dd       	rcall	.-1530   	; 0x222e <StartsWith>
    2828:	f8 2e       	mov	r15, r24
    282a:	88 23       	and	r24, r24
    282c:	21 f0       	breq	.+8      	; 0x2836 <CheckInput+0x7a>
                specialPassed = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 0b 39 	sts	0x390B, r24	; 0x80390b <specialPassed>
    2834:	04 c0       	rjmp	.+8      	; 0x283e <CheckInput+0x82>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2836:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput>
    283a:	81 33       	cpi	r24, 0x31	; 49
    283c:	11 f0       	breq	.+4      	; 0x2842 <CheckInput+0x86>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    283e:	f1 2c       	mov	r15, r1
    2840:	ba c1       	rjmp	.+884    	; 0x2bb6 <CheckInput+0x3fa>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2842:	80 91 0e 39 	lds	r24, 0x390E	; 0x80390e <specialInput+0x2>
    2846:	81 11       	cpse	r24, r1
    2848:	fa cf       	rjmp	.-12     	; 0x283e <CheckInput+0x82>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    284a:	87 e7       	ldi	r24, 0x77	; 119
    284c:	9a e3       	ldi	r25, 0x3A	; 58
    284e:	fd de       	rcall	.-518    	; 0x264a <CleanInput>
                specialPassed = 2;
    2850:	92 e0       	ldi	r25, 0x02	; 2
    2852:	90 93 0b 39 	sts	0x390B, r25	; 0x80390b <specialPassed>
                data[1] = 0;
    2856:	f8 01       	movw	r30, r16
    2858:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	80 f3       	brcs	.-32     	; 0x283e <CheckInput+0x82>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    285e:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    2862:	81 33       	cpi	r24, 0x31	; 49
    2864:	60 f3       	brcs	.-40     	; 0x283e <CheckInput+0x82>
    2866:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    286a:	85 33       	cpi	r24, 0x35	; 53
    286c:	40 f7       	brcc	.-48     	; 0x283e <CheckInput+0x82>
                        serRx[1] |= 0x20;
    286e:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    2872:	80 62       	ori	r24, 0x20	; 32
    2874:	80 93 78 3a 	sts	0x3A78, r24	; 0x803a78 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2878:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    287c:	81 36       	cpi	r24, 0x61	; 97
    287e:	61 f0       	breq	.+24     	; 0x2898 <CheckInput+0xdc>
    2880:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    2884:	85 36       	cpi	r24, 0x65	; 101
    2886:	41 f0       	breq	.+16     	; 0x2898 <CheckInput+0xdc>
    2888:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    288c:	86 36       	cpi	r24, 0x66	; 102
    288e:	21 f0       	breq	.+8      	; 0x2898 <CheckInput+0xdc>
    2890:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    2894:	87 37       	cpi	r24, 0x77	; 119
    2896:	99 f6       	brne	.-90     	; 0x283e <CheckInput+0x82>
                            data[1] = specialInput[1]+0x11;
    2898:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <specialInput+0x1>
    289c:	8f 5e       	subi	r24, 0xEF	; 239
    289e:	f8 01       	movw	r30, r16
    28a0:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    28a2:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    28a6:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    28a8:	80 91 78 3a 	lds	r24, 0x3A78	; 0x803a78 <serRx+0x1>
    28ac:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    28ae:	14 82       	std	Z+4, r1	; 0x04
    28b0:	82 c1       	rjmp	.+772    	; 0x2bb6 <CheckInput+0x3fa>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    28b2:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
    28b6:	83 32       	cpi	r24, 0x23	; 35
    28b8:	89 f5       	brne	.+98     	; 0x291c <CheckInput+0x160>
    28ba:	8d b3       	in	r24, 0x1d	; 29
    28bc:	86 30       	cpi	r24, 0x06	; 6
    28be:	71 f5       	brne	.+92     	; 0x291c <CheckInput+0x160>
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    28c6:	fc 01       	movw	r30, r24
    28c8:	e9 58       	subi	r30, 0x89	; 137
    28ca:	f5 4c       	sbci	r31, 0xC5	; 197
    28cc:	20 81       	ld	r18, Z
    28ce:	20 53       	subi	r18, 0x30	; 48
    28d0:	20 83       	st	Z, r18
                    bitNr *= 10;
    28d2:	11 0f       	add	r17, r17
    28d4:	21 2f       	mov	r18, r17
    28d6:	22 0f       	add	r18, r18
    28d8:	22 0f       	add	r18, r18
    28da:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    28dc:	20 91 78 3a 	lds	r18, 0x3A78	; 0x803a78 <serRx+0x1>
    28e0:	23 30       	cpi	r18, 0x03	; 3
    28e2:	48 f4       	brcc	.+18     	; 0x28f6 <CheckInput+0x13a>
                    if (serRx[x] < 10) {
    28e4:	20 81       	ld	r18, Z
    28e6:	2a 30       	cpi	r18, 0x0A	; 10
    28e8:	b8 f4       	brcc	.+46     	; 0x2918 <CheckInput+0x15c>
                        bitNr += serRx[x];
    28ea:	20 81       	ld	r18, Z
    28ec:	12 0f       	add	r17, r18
    28ee:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    28f0:	84 30       	cpi	r24, 0x04	; 4
    28f2:	91 05       	cpc	r25, r1
    28f4:	41 f7       	brne	.-48     	; 0x28c6 <CheckInput+0x10a>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    28f6:	81 2f       	mov	r24, r17
    28f8:	8f 77       	andi	r24, 0x7F	; 127
    28fa:	71 f0       	breq	.+28     	; 0x2918 <CheckInput+0x15c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    28fc:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx+0x4>
    2900:	60 91 7c 3a 	lds	r22, 0x3A7C	; 0x803a7c <serRx+0x5>
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	78 2b       	or	r23, r24
    2908:	81 2f       	mov	r24, r17
    290a:	80 95       	com	r24
    290c:	3b dc       	rcall	.-1930   	; 0x2184 <Cheat>
    290e:	88 23       	and	r24, r24
    2910:	19 f0       	breq	.+6      	; 0x2918 <CheckInput+0x15c>
    2912:	81 2f       	mov	r24, r17
    2914:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	48 c1       	rjmp	.+656    	; 0x2bac <CheckInput+0x3f0>
    291c:	d8 01       	movw	r26, r16
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2922:	fc 01       	movw	r30, r24
    2924:	e9 58       	subi	r30, 0x89	; 137
    2926:	f5 4c       	sbci	r31, 0xC5	; 197
    2928:	20 81       	ld	r18, Z
    292a:	21 34       	cpi	r18, 0x41	; 65
    292c:	18 f0       	brcs	.+6      	; 0x2934 <CheckInput+0x178>
    292e:	20 81       	ld	r18, Z
    2930:	2b 35       	cpi	r18, 0x5B	; 91
    2932:	10 f0       	brcs	.+4      	; 0x2938 <CheckInput+0x17c>
    2934:	20 81       	ld	r18, Z
    2936:	02 c0       	rjmp	.+4      	; 0x293c <CheckInput+0x180>
    2938:	20 81       	ld	r18, Z
    293a:	20 62       	ori	r18, 0x20	; 32
    293c:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    293e:	20 81       	ld	r18, Z
    2940:	21 11       	cpse	r18, r1
    2942:	05 c0       	rjmp	.+10     	; 0x294e <CheckInput+0x192>
                    data[x] = 0;
    2944:	f8 01       	movw	r30, r16
    2946:	e8 0f       	add	r30, r24
    2948:	f1 1d       	adc	r31, r1
    294a:	10 82       	st	Z, r1
                    break;
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <CheckInput+0x19c>
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2952:	81 34       	cpi	r24, 0x41	; 65
    2954:	91 05       	cpc	r25, r1
    2956:	29 f7       	brne	.-54     	; 0x2922 <CheckInput+0x166>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2958:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <serRx>
                data[0] = 0;
    295c:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    295e:	81 11       	cpse	r24, r1
    2960:	05 c0       	rjmp	.+10     	; 0x296c <CheckInput+0x1b0>
                data[0] = 0;
    2962:	10 82       	st	Z, r1
                RXCNT = 0;
    2964:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2966:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <serRxDone>
    296a:	23 c1       	rjmp	.+582    	; 0x2bb2 <CheckInput+0x3f6>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    296c:	80 81       	ld	r24, Z
    296e:	8f 33       	cpi	r24, 0x3F	; 63
    2970:	11 f0       	breq	.+4      	; 0x2976 <CheckInput+0x1ba>
    2972:	88 36       	cpi	r24, 0x68	; 104
    2974:	49 f4       	brne	.+18     	; 0x2988 <CheckInput+0x1cc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2976:	83 e9       	ldi	r24, 0x93	; 147
    2978:	9b e7       	ldi	r25, 0x7B	; 123
    297a:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    297e:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2982:	8d e6       	ldi	r24, 0x6D	; 109
    2984:	94 e0       	ldi	r25, 0x04	; 4
    2986:	0a c0       	rjmp	.+20     	; 0x299c <CheckInput+0x1e0>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2988:	81 36       	cpi	r24, 0x61	; 97
    298a:	a1 f4       	brne	.+40     	; 0x29b4 <CheckInput+0x1f8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    298c:	8e e6       	ldi	r24, 0x6E	; 110
    298e:	9a e7       	ldi	r25, 0x7A	; 122
    2990:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    2994:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2998:	85 e2       	ldi	r24, 0x25	; 37
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    29a0:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    29ac:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    29b0:	82 e0       	ldi	r24, 0x02	; 2
    29b2:	fc c0       	rjmp	.+504    	; 0x2bac <CheckInput+0x3f0>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    29b4:	87 37       	cpi	r24, 0x77	; 119
    29b6:	09 f0       	breq	.+2      	; 0x29ba <CheckInput+0x1fe>
    29b8:	41 c0       	rjmp	.+130    	; 0x2a3c <CheckInput+0x280>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29ba:	8d e8       	ldi	r24, 0x8D	; 141
    29bc:	96 e7       	ldi	r25, 0x76	; 118
    29be:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    29c2:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    29c6:	82 e1       	ldi	r24, 0x12	; 18
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    29ce:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    29d2:	21 e0       	ldi	r18, 0x01	; 1
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x82>
    29da:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    29de:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <whoami>
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	fc 01       	movw	r30, r24
    29e6:	ee 0f       	add	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	ec 55       	subi	r30, 0x5C	; 92
    29ec:	f0 44       	sbci	r31, 0x40	; 64
    29ee:	40 81       	ld	r20, Z
    29f0:	51 81       	ldd	r21, Z+1	; 0x01
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	fc 01       	movw	r30, r24
    29f8:	e4 56       	subi	r30, 0x64	; 100
    29fa:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2a04:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    2a08:	40 93 61 39 	sts	0x3961, r20	; 0x803961 <reactStr+0x44>
    2a0c:	50 93 62 39 	sts	0x3962, r21	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    2a10:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x84>
    2a14:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a18:	8f e5       	ldi	r24, 0x5F	; 95
    2a1a:	96 e7       	ldi	r25, 0x76	; 118
    2a1c:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x6>
    2a20:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    2a24:	8a e1       	ldi	r24, 0x1A	; 26
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x46>
    2a2c:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    2a30:	20 93 a3 39 	sts	0x39A3, r18	; 0x8039a3 <reactStr+0x86>
    2a34:	30 93 a4 39 	sts	0x39A4, r19	; 0x8039a4 <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2a38:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2a3a:	b8 c0       	rjmp	.+368    	; 0x2bac <CheckInput+0x3f0>
    2a3c:	6a e7       	ldi	r22, 0x7A	; 122
    2a3e:	7f eb       	ldi	r23, 0xBF	; 191
    2a40:	c8 01       	movw	r24, r16
    2a42:	f5 db       	rcall	.-2070   	; 0x222e <StartsWith>
    2a44:	88 23       	and	r24, r24
    2a46:	19 f1       	breq	.+70     	; 0x2a8e <CheckInput+0x2d2>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a48:	8e ee       	ldi	r24, 0xEE	; 238
    2a4a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    2a4e:	8f ee       	ldi	r24, 0xEF	; 239
    2a50:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    2a54:	80 ef       	ldi	r24, 0xF0	; 240
    2a56:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    2a5a:	81 ef       	ldi	r24, 0xF1	; 241
    2a5c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
                }
                SaveGameState();
    2a60:	0e 94 6d 09 	call	0x12da	; 0x12da <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a64:	89 e0       	ldi	r24, 0x09	; 9
    2a66:	ed e8       	ldi	r30, 0x8D	; 141
    2a68:	ff eb       	ldi	r31, 0xBF	; 191
    2a6a:	de 01       	movw	r26, r28
    2a6c:	11 96       	adiw	r26, 0x01	; 1
    2a6e:	01 90       	ld	r0, Z+
    2a70:	0d 92       	st	X+, r0
    2a72:	8a 95       	dec	r24
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <CheckInput+0x2b2>
                SerSpeed(60);
    2a76:	8c e3       	ldi	r24, 0x3C	; 60
    2a78:	0e 94 8d 08 	call	0x111a	; 0x111a <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a7c:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a80:	88 23       	and	r24, r24
    2a82:	e1 f3       	breq	.-8      	; 0x2a7c <CheckInput+0x2c0>
    2a84:	ce 01       	movw	r24, r28
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2a8c:	f7 cf       	rjmp	.-18     	; 0x2a7c <CheckInput+0x2c0>
    2a8e:	60 e8       	ldi	r22, 0x80	; 128
    2a90:	7f eb       	ldi	r23, 0xBF	; 191
    2a92:	c8 01       	movw	r24, r16
    2a94:	cc db       	rcall	.-2152   	; 0x222e <StartsWith>
    2a96:	88 23       	and	r24, r24
    2a98:	81 f1       	breq	.+96     	; 0x2afa <CheckInput+0x33e>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
    2a9c:	8a 87       	std	Y+10, r24	; 0x0a
    2a9e:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	be 01       	movw	r22, r28
    2aa4:	66 5f       	subi	r22, 0xF6	; 246
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	81 2f       	mov	r24, r17
    2aaa:	0e 94 08 08 	call	0x1010	; 0x1010 <EEWrite>
    2aae:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2ab0:	10 32       	cpi	r17, 0x20	; 32
    2ab2:	b1 f7       	brne	.-20     	; 0x2aa0 <CheckInput+0x2e4>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2ab4:	8e ee       	ldi	r24, 0xEE	; 238
    2ab6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    2aba:	8f ee       	ldi	r24, 0xEF	; 239
    2abc:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    2ac0:	80 ef       	ldi	r24, 0xF0	; 240
    2ac2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    2ac6:	81 ef       	ldi	r24, 0xF1	; 241
    2ac8:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
                }
                
                SaveGameState();
    2acc:	0e 94 6d 09 	call	0x12da	; 0x12da <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2ad0:	88 e0       	ldi	r24, 0x08	; 8
    2ad2:	e6 e9       	ldi	r30, 0x96	; 150
    2ad4:	ff eb       	ldi	r31, 0xBF	; 191
    2ad6:	de 01       	movw	r26, r28
    2ad8:	11 96       	adiw	r26, 0x01	; 1
    2ada:	01 90       	ld	r0, Z+
    2adc:	0d 92       	st	X+, r0
    2ade:	8a 95       	dec	r24
    2ae0:	e1 f7       	brne	.-8      	; 0x2ada <CheckInput+0x31e>
                SerSpeed(60);
    2ae2:	8c e3       	ldi	r24, 0x3C	; 60
    2ae4:	0e 94 8d 08 	call	0x111a	; 0x111a <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2ae8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2aec:	88 23       	and	r24, r24
    2aee:	e1 f3       	breq	.-8      	; 0x2ae8 <CheckInput+0x32c>
    2af0:	ce 01       	movw	r24, r28
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2af8:	f7 cf       	rjmp	.-18     	; 0x2ae8 <CheckInput+0x32c>
    2afa:	67 e8       	ldi	r22, 0x87	; 135
    2afc:	7f eb       	ldi	r23, 0xBF	; 191
    2afe:	c8 01       	movw	r24, r16
    2b00:	96 db       	rcall	.-2260   	; 0x222e <StartsWith>
    2b02:	88 23       	and	r24, r24
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <CheckInput+0x34c>
    2b06:	9b ce       	rjmp	.-714    	; 0x283e <CheckInput+0x82>
    2b08:	8d e1       	ldi	r24, 0x1D	; 29
    2b0a:	c8 2e       	mov	r12, r24
    2b0c:	89 e3       	ldi	r24, 0x39	; 57
    2b0e:	d8 2e       	mov	r13, r24
    2b10:	9d e5       	ldi	r25, 0x5D	; 93
    2b12:	e9 2e       	mov	r14, r25
    2b14:	99 e3       	ldi	r25, 0x39	; 57
    2b16:	f9 2e       	mov	r15, r25
    2b18:	0d e9       	ldi	r16, 0x9D	; 157
    2b1a:	19 e3       	ldi	r17, 0x39	; 57
    2b1c:	28 e1       	ldi	r18, 0x18	; 24
    2b1e:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2b20:	aa 24       	eor	r10, r10
    2b22:	a3 94       	inc	r10
    2b24:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b26:	47 e5       	ldi	r20, 0x57	; 87
    2b28:	84 2e       	mov	r8, r20
    2b2a:	4a e7       	ldi	r20, 0x7A	; 122
    2b2c:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2b2e:	52 e0       	ldi	r21, 0x02	; 2
    2b30:	65 2e       	mov	r6, r21
    2b32:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2b34:	41 e0       	ldi	r20, 0x01	; 1
    2b36:	be 01       	movw	r22, r28
    2b38:	6f 5f       	subi	r22, 0xFF	; 255
    2b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3c:	85 2d       	mov	r24, r5
    2b3e:	0e 94 f8 07 	call	0xff0	; 0xff0 <EERead>
                    bit = 0xff-bit;
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	80 95       	com	r24
    2b46:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b48:	28 2f       	mov	r18, r24
    2b4a:	22 95       	swap	r18
    2b4c:	2f 70       	andi	r18, 0x0F	; 15
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	23 57       	subi	r18, 0x73	; 115
    2b52:	3b 48       	sbci	r19, 0x8B	; 139
    2b54:	f6 01       	movw	r30, r12
    2b56:	20 83       	st	Z, r18
    2b58:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b5a:	f7 01       	movw	r30, r14
    2b5c:	a0 82       	st	Z, r10
    2b5e:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b60:	f8 01       	movw	r30, r16
    2b62:	a0 82       	st	Z, r10
    2b64:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b66:	8f 70       	andi	r24, 0x0F	; 15
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	83 57       	subi	r24, 0x73	; 115
    2b6c:	9b 48       	sbci	r25, 0x8B	; 139
    2b6e:	f6 01       	movw	r30, r12
    2b70:	82 83       	std	Z+2, r24	; 0x02
    2b72:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2b74:	f7 01       	movw	r30, r14
    2b76:	a2 82       	std	Z+2, r10	; 0x02
    2b78:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	a2 82       	std	Z+2, r10	; 0x02
    2b7e:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b80:	f6 01       	movw	r30, r12
    2b82:	84 82       	std	Z+4, r8	; 0x04
    2b84:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2b86:	f7 01       	movw	r30, r14
    2b88:	64 82       	std	Z+4, r6	; 0x04
    2b8a:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	a4 82       	std	Z+4, r10	; 0x04
    2b90:	b5 82       	std	Z+5, r11	; 0x05
    2b92:	53 94       	inc	r5
    2b94:	f6 e0       	ldi	r31, 0x06	; 6
    2b96:	cf 0e       	add	r12, r31
    2b98:	d1 1c       	adc	r13, r1
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	e8 0e       	add	r14, r24
    2b9e:	f1 1c       	adc	r15, r1
    2ba0:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	e0 e2       	ldi	r30, 0x20	; 32
    2ba6:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2ba8:	c5 cf       	rjmp	.-118    	; 0x2b34 <CheckInput+0x378>
    2baa:	88 e1       	ldi	r24, 0x18	; 24
    2bac:	97 db       	rcall	.-2258   	; 0x22dc <SetStandardResponse>
    2bae:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2bb2:	ff 24       	eor	r15, r15
    2bb4:	f3 94       	inc	r15
}
    2bb6:	8f 2d       	mov	r24, r15
    2bb8:	2a 96       	adiw	r28, 0x0a	; 10
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ff 90       	pop	r15
    2bc8:	ef 90       	pop	r14
    2bca:	df 90       	pop	r13
    2bcc:	cf 90       	pop	r12
    2bce:	bf 90       	pop	r11
    2bd0:	af 90       	pop	r10
    2bd2:	9f 90       	pop	r9
    2bd4:	8f 90       	pop	r8
    2bd6:	7f 90       	pop	r7
    2bd8:	6f 90       	pop	r6
    2bda:	5f 90       	pop	r5
    2bdc:	08 95       	ret

00002bde <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2bde:	9f 92       	push	r9
    2be0:	af 92       	push	r10
    2be2:	bf 92       	push	r11
    2be4:	cf 92       	push	r12
    2be6:	df 92       	push	r13
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	ab 97       	sbiw	r28, 0x2b	; 43
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	de bf       	out	0x3e, r29	; 62
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2bfe:	99 24       	eor	r9, r9
    2c00:	93 94       	inc	r9
    2c02:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	fc 01       	movw	r30, r24
    2c08:	ee 0f       	add	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	e3 5e       	subi	r30, 0xE3	; 227
    2c0e:	f6 4c       	sbci	r31, 0xC6	; 198
    2c10:	2c ec       	ldi	r18, 0xCC	; 204
    2c12:	37 e7       	ldi	r19, 0x77	; 119
    2c14:	20 83       	st	Z, r18
    2c16:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2c18:	fc 01       	movw	r30, r24
    2c1a:	ee 0f       	add	r30, r30
    2c1c:	ff 1f       	adc	r31, r31
    2c1e:	e3 5a       	subi	r30, 0xA3	; 163
    2c20:	f6 4c       	sbci	r31, 0xC6	; 198
    2c22:	26 e1       	ldi	r18, 0x16	; 22
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	20 83       	st	Z, r18
    2c28:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	fc 01       	movw	r30, r24
    2c30:	e3 56       	subi	r30, 0x63	; 99
    2c32:	f6 4c       	sbci	r31, 0xC6	; 198
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 83       	st	Z, r24
    2c3a:	91 83       	std	Z+1, r25	; 0x01
    2c3c:	00 e4       	ldi	r16, 0x40	; 64
    2c3e:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c40:	37 e5       	ldi	r19, 0x57	; 87
    2c42:	e3 2e       	mov	r14, r19
    2c44:	3a e7       	ldi	r19, 0x7A	; 122
    2c46:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2c48:	42 e0       	ldi	r20, 0x02	; 2
    2c4a:	c4 2e       	mov	r12, r20
    2c4c:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2c4e:	aa 24       	eor	r10, r10
    2c50:	a3 94       	inc	r10
    2c52:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2c54:	f8 01       	movw	r30, r16
    2c56:	81 91       	ld	r24, Z+
    2c58:	91 91       	ld	r25, Z+
    2c5a:	8f 01       	movw	r16, r30
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	c9 f1       	breq	.+114    	; 0x2cd2 <ShowInventory+0xf4>
            PopulateObject(inventory[x], &actObj1);
    2c60:	be 01       	movw	r22, r28
    2c62:	6f 5f       	subi	r22, 0xFF	; 255
    2c64:	7f 4f       	sbci	r23, 0xFF	; 255
    2c66:	b6 db       	rcall	.-2196   	; 0x23d4 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2c68:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2c6a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c6c:	89 2d       	mov	r24, r9
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	fc 01       	movw	r30, r24
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	e3 5e       	subi	r30, 0xE3	; 227
    2c78:	f6 4c       	sbci	r31, 0xC6	; 198
    2c7a:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c7c:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c7e:	40 83       	st	Z, r20
    2c80:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c82:	fc 01       	movw	r30, r24
    2c84:	ee 0f       	add	r30, r30
    2c86:	ff 1f       	adc	r31, r31
    2c88:	e3 5a       	subi	r30, 0xA3	; 163
    2c8a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c8c:	20 83       	st	Z, r18
    2c8e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	fc 01       	movw	r30, r24
    2c96:	e3 56       	subi	r30, 0x63	; 99
    2c98:	f6 4c       	sbci	r31, 0xC6	; 198
    2c9a:	10 82       	st	Z, r1
    2c9c:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	89 0d       	add	r24, r9
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	93 94       	inc	r9
    2ca6:	93 94       	inc	r9
    2ca8:	fc 01       	movw	r30, r24
    2caa:	ee 0f       	add	r30, r30
    2cac:	ff 1f       	adc	r31, r31
    2cae:	e3 5e       	subi	r30, 0xE3	; 227
    2cb0:	f6 4c       	sbci	r31, 0xC6	; 198
    2cb2:	e0 82       	st	Z, r14
    2cb4:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	e3 5a       	subi	r30, 0xA3	; 163
    2cbe:	f6 4c       	sbci	r31, 0xC6	; 198
    2cc0:	c0 82       	st	Z, r12
    2cc2:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	fc 01       	movw	r30, r24
    2cca:	e3 56       	subi	r30, 0x63	; 99
    2ccc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cce:	a0 82       	st	Z, r10
    2cd0:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2cd2:	f8 e3       	ldi	r31, 0x38	; 56
    2cd4:	04 34       	cpi	r16, 0x44	; 68
    2cd6:	1f 07       	cpc	r17, r31
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <ShowInventory+0xfe>
    2cda:	bc cf       	rjmp	.-136    	; 0x2c54 <ShowInventory+0x76>
        }
    }
    elements -= 1;
            
    return elements;
}
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	89 0d       	add	r24, r9
    2ce0:	ab 96       	adiw	r28, 0x2b	; 43
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	ef 90       	pop	r14
    2cf2:	df 90       	pop	r13
    2cf4:	cf 90       	pop	r12
    2cf6:	bf 90       	pop	r11
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	08 95       	ret

00002cfe <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2cfe:	6f 92       	push	r6
    2d00:	7f 92       	push	r7
    2d02:	8f 92       	push	r8
    2d04:	9f 92       	push	r9
    2d06:	af 92       	push	r10
    2d08:	bf 92       	push	r11
    2d0a:	cf 92       	push	r12
    2d0c:	df 92       	push	r13
    2d0e:	ef 92       	push	r14
    2d10:	ff 92       	push	r15
    2d12:	0f 93       	push	r16
    2d14:	1f 93       	push	r17
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	28 97       	sbiw	r28, 0x08	; 8
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2d26:	91 dc       	rcall	.-1758   	; 0x264a <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2d28:	c3 01       	movw	r24, r6
    2d2a:	8f dc       	rcall	.-1762   	; 0x264a <CleanInput>
    2d2c:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d2e:	29 e5       	ldi	r18, 0x59	; 89
    2d30:	3a e7       	ldi	r19, 0x7A	; 122
    2d32:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr>
    2d36:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x1>
    reactStr[1][number]=length;
    2d3a:	84 e0       	ldi	r24, 0x04	; 4
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x40>
    2d42:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x41>
    reactStr[2][number]=type;
    2d46:	01 e0       	ldi	r16, 0x01	; 1
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    2d4a:	00 93 9d 39 	sts	0x399D, r16	; 0x80399d <reactStr+0x80>
    2d4e:	10 93 9e 39 	sts	0x399E, r17	; 0x80399e <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2d52:	ff 20       	and	r15, r15
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <ProcessInput+0x5a>
    2d56:	54 c7       	rjmp	.+3752   	; 0x3c00 <ProcessInput+0xf02>

        //eXit to previous location
        if (data[0] == 'x'){
    2d58:	d3 01       	movw	r26, r6
    2d5a:	8c 91       	ld	r24, X
    2d5c:	88 37       	cpi	r24, 0x78	; 120
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <ProcessInput+0x64>
    2d60:	45 c0       	rjmp	.+138    	; 0x2dec <ProcessInput+0xee>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2d62:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <currDepth>
    2d66:	e8 2f       	mov	r30, r24
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	ee 0f       	add	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	e3 52       	subi	r30, 0x23	; 35
    2d70:	f6 4c       	sbci	r31, 0xC6	; 198
    2d72:	20 81       	ld	r18, Z
    2d74:	31 81       	ldd	r19, Z+1	; 0x01
    2d76:	23 2b       	or	r18, r19
    2d78:	11 f0       	breq	.+4      	; 0x2d7e <ProcessInput+0x80>
    2d7a:	81 11       	cpse	r24, r1
    2d7c:	03 c0       	rjmp	.+6      	; 0x2d84 <ProcessInput+0x86>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d7e:	84 e4       	ldi	r24, 0x44	; 68
    2d80:	96 e7       	ldi	r25, 0x76	; 118
    2d82:	13 c5       	rjmp	.+2598   	; 0x37aa <ProcessInput+0xaac>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2d84:	80 91 23 3a 	lds	r24, 0x3A23	; 0x803a23 <currObj+0x6>
    2d88:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
    2d8c:	88 23       	and	r24, r24
    2d8e:	b9 f0       	breq	.+46     	; 0x2dbe <ProcessInput+0xc0>
                --currDepth;
    2d90:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    2d94:	e1 50       	subi	r30, 0x01	; 1
    2d96:	e0 93 31 38 	sts	0x3831, r30	; 0x803831 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	ee 0f       	add	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	e3 52       	subi	r30, 0x23	; 35
    2da2:	f6 4c       	sbci	r31, 0xC6	; 198
    2da4:	6d e1       	ldi	r22, 0x1D	; 29
    2da6:	7a e3       	ldi	r23, 0x3A	; 58
    2da8:	80 81       	ld	r24, Z
    2daa:	91 81       	ldd	r25, Z+1	; 0x01
    2dac:	13 db       	rcall	.-2522   	; 0x23d4 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2dae:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x4>
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    2db8:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    2dbc:	2a c2       	rjmp	.+1108   	; 0x3212 <ProcessInput+0x514>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2dbe:	80 91 3f 3a 	lds	r24, 0x3A3F	; 0x803a3f <currObj+0x22>
    2dc2:	90 91 40 3a 	lds	r25, 0x3A40	; 0x803a40 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dc6:	20 91 31 3a 	lds	r18, 0x3A31	; 0x803a31 <currObj+0x14>
    2dca:	30 91 32 3a 	lds	r19, 0x3A32	; 0x803a32 <currObj+0x15>
    2dce:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2dd2:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2dd6:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2dda:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2dde:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2de2:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2de6:	80 91 45 3a 	lds	r24, 0x3A45	; 0x803a45 <currObj+0x28>
    2dea:	a9 c5       	rjmp	.+2898   	; 0x393e <ProcessInput+0xc40>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2dec:	85 36       	cpi	r24, 0x65	; 101
    2dee:	19 f0       	breq	.+6      	; 0x2df6 <ProcessInput+0xf8>
    2df0:	8f 36       	cpi	r24, 0x6F	; 111
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <ProcessInput+0xf8>
    2df4:	de c0       	rjmp	.+444    	; 0x2fb2 <ProcessInput+0x2b4>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2df6:	b2 e0       	ldi	r27, 0x02	; 2
    2df8:	fb 12       	cpse	r15, r27
    2dfa:	c1 cf       	rjmp	.-126    	; 0x2d7e <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2dfc:	00 91 31 38 	lds	r16, 0x3831	; 0x803831 <currDepth>
    2e00:	10 e0       	ldi	r17, 0x00	; 0
    2e02:	f8 01       	movw	r30, r16
    2e04:	ee 0f       	add	r30, r30
    2e06:	ff 1f       	adc	r31, r31
    2e08:	e3 52       	subi	r30, 0x23	; 35
    2e0a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	d3 01       	movw	r26, r6
    2e12:	11 96       	adiw	r26, 0x01	; 1
    2e14:	6c 91       	ld	r22, X
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	ab db       	rcall	.-2218   	; 0x2572 <FindChild>
    2e1c:	00 0f       	add	r16, r16
    2e1e:	11 1f       	adc	r17, r17
    2e20:	f8 01       	movw	r30, r16
    2e22:	e1 52       	subi	r30, 0x21	; 33
    2e24:	f6 4c       	sbci	r31, 0xC6	; 198
    2e26:	80 83       	st	Z, r24
    2e28:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2e2a:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <currDepth>
    2e2e:	29 2f       	mov	r18, r25
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	f9 01       	movw	r30, r18
    2e34:	ee 0f       	add	r30, r30
    2e36:	ff 1f       	adc	r31, r31
    2e38:	e1 52       	subi	r30, 0x21	; 33
    2e3a:	f6 4c       	sbci	r31, 0xC6	; 198
    2e3c:	40 81       	ld	r20, Z
    2e3e:	51 81       	ldd	r21, Z+1	; 0x01
    2e40:	41 15       	cp	r20, r1
    2e42:	51 05       	cpc	r21, r1
    2e44:	21 f0       	breq	.+8      	; 0x2e4e <ProcessInput+0x150>
                    PopulateObject(route[currDepth+1], &actObj1);
    2e46:	6c ed       	ldi	r22, 0xDC	; 220
    2e48:	78 e3       	ldi	r23, 0x38	; 56
    2e4a:	ca 01       	movw	r24, r20
    2e4c:	1c c0       	rjmp	.+56     	; 0x2e86 <ProcessInput+0x188>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2e4e:	99 23       	and	r25, r25
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <ProcessInput+0x156>
    2e52:	dc c6       	rjmp	.+3512   	; 0x3c0c <ProcessInput+0xf0e>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2e54:	22 0f       	add	r18, r18
    2e56:	33 1f       	adc	r19, r19
    2e58:	f9 01       	movw	r30, r18
    2e5a:	e5 52       	subi	r30, 0x25	; 37
    2e5c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e5e:	d3 01       	movw	r26, r6
    2e60:	11 96       	adiw	r26, 0x01	; 1
    2e62:	6c 91       	ld	r22, X
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	2e db       	rcall	.-2468   	; 0x24c6 <CheckLetter>
    2e6a:	88 23       	and	r24, r24
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <ProcessInput+0x172>
    2e6e:	ce c6       	rjmp	.+3484   	; 0x3c0c <ProcessInput+0xf0e>
                        PopulateObject(route[currDepth-1], &actObj1);
    2e70:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	ee 0f       	add	r30, r30
    2e78:	ff 1f       	adc	r31, r31
    2e7a:	e5 52       	subi	r30, 0x25	; 37
    2e7c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e7e:	6c ed       	ldi	r22, 0xDC	; 220
    2e80:	78 e3       	ldi	r23, 0x38	; 56
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	a6 da       	rcall	.-2740   	; 0x23d4 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2e88:	d3 01       	movw	r26, r6
    2e8a:	8c 91       	ld	r24, X
    2e8c:	85 36       	cpi	r24, 0x65	; 101
    2e8e:	c1 f4       	brne	.+48     	; 0x2ec0 <ProcessInput+0x1c2>
    2e90:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x8>
    2e94:	80 fd       	sbrc	r24, 0
    2e96:	1d c0       	rjmp	.+58     	; 0x2ed2 <ProcessInput+0x1d4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e98:	8d e9       	ldi	r24, 0x9D	; 157
    2e9a:	99 e7       	ldi	r25, 0x79	; 121
    2e9c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    2ea0:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2ea4:	8e e1       	ldi	r24, 0x1E	; 30
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2eac:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    2eb8:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2ebc:	12 e0       	ldi	r17, 0x02	; 2
    2ebe:	97 c6       	rjmp	.+3374   	; 0x3bee <ProcessInput+0xef0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2ec0:	8f 36       	cpi	r24, 0x6F	; 111
    2ec2:	39 f4       	brne	.+14     	; 0x2ed2 <ProcessInput+0x1d4>
    2ec4:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x8>
    2ec8:	81 fd       	sbrc	r24, 1
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <ProcessInput+0x1d4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ecc:	82 e8       	ldi	r24, 0x82	; 130
    2ece:	99 e7       	ldi	r25, 0x79	; 121
    2ed0:	6c c4       	rjmp	.+2264   	; 0x37aa <ProcessInput+0xaac>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2ed2:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x6>
    2ed6:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
    2eda:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    2ede:	88 23       	and	r24, r24
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <ProcessInput+0x1e6>
    2ee2:	49 c0       	rjmp	.+146    	; 0x2f76 <ProcessInput+0x278>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2ee4:	ae 2f       	mov	r26, r30
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	aa 0f       	add	r26, r26
    2eea:	bb 1f       	adc	r27, r27
    2eec:	a1 52       	subi	r26, 0x21	; 33
    2eee:	b6 4c       	sbci	r27, 0xC6	; 198
    2ef0:	8d 91       	ld	r24, X+
    2ef2:	9c 91       	ld	r25, X
    2ef4:	89 2b       	or	r24, r25
    2ef6:	11 f0       	breq	.+4      	; 0x2efc <ProcessInput+0x1fe>
    2ef8:	ef 5f       	subi	r30, 0xFF	; 255
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <ProcessInput+0x200>
    2efc:	e1 50       	subi	r30, 0x01	; 1
    2efe:	e0 93 31 38 	sts	0x3831, r30	; 0x803831 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2f02:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	ee 0f       	add	r30, r30
    2f0a:	ff 1f       	adc	r31, r31
    2f0c:	e3 52       	subi	r30, 0x23	; 35
    2f0e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f10:	6d e1       	ldi	r22, 0x1D	; 29
    2f12:	7a e3       	ldi	r23, 0x3A	; 58
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	5d da       	rcall	.-2886   	; 0x23d4 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f1a:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <currObj+0x1c>
    2f1e:	90 91 3a 3a 	lds	r25, 0x3A3A	; 0x803a3a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f22:	20 91 2b 3a 	lds	r18, 0x3A2B	; 0x803a2b <currObj+0xe>
    2f26:	30 91 2c 3a 	lds	r19, 0x3A2C	; 0x803a2c <currObj+0xf>
    2f2a:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2f2e:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2f32:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2f36:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2f3a:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2f3e:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f42:	89 e5       	ldi	r24, 0x59	; 89
    2f44:	9a e7       	ldi	r25, 0x7A	; 122
    2f46:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    2f4a:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    2f56:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x84>
    2f62:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2f66:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x4>
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    2f70:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    2f74:	07 c4       	rjmp	.+2062   	; 0x3784 <ProcessInput+0xa86>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	ee 0f       	add	r30, r30
    2f7a:	ff 1f       	adc	r31, r31
    2f7c:	e1 52       	subi	r30, 0x21	; 33
    2f7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f80:	10 82       	st	Z, r1
    2f82:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2f84:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x22>
    2f88:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f8c:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x14>
    2f90:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x15>
    2f94:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    2f98:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2f9c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2fa0:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2fa4:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2fa8:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2fac:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x28>
    2fb0:	c6 c4       	rjmp	.+2444   	; 0x393e <ProcessInput+0xc40>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2fb2:	8c 36       	cpi	r24, 0x6C	; 108
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <ProcessInput+0x2ba>
    2fb6:	59 c1       	rjmp	.+690    	; 0x326a <ProcessInput+0x56c>
    2fb8:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
            if (inputLen == 1) {
    2fbc:	b1 e0       	ldi	r27, 0x01	; 1
    2fbe:	fb 12       	cpse	r15, r27
    2fc0:	f1 c0       	rjmp	.+482    	; 0x31a4 <ProcessInput+0x4a6>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2fc2:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <currObj+0x1c>
    2fc6:	90 91 3a 3a 	lds	r25, 0x3A3A	; 0x803a3a <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fca:	40 91 2b 3a 	lds	r20, 0x3A2B	; 0x803a2b <currObj+0xe>
    2fce:	50 91 2c 3a 	lds	r21, 0x3A2C	; 0x803a2c <currObj+0xf>
    2fd2:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x2>
    2fd6:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    2fda:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    2fde:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    2fe2:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    2fe6:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fea:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x4>
    2fee:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    2ff2:	82 e0       	ldi	r24, 0x02	; 2
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    2ffa:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    2ffe:	00 93 a1 39 	sts	0x39A1, r16	; 0x8039a1 <reactStr+0x84>
    3002:	10 93 a2 39 	sts	0x39A2, r17	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3006:	8b ee       	ldi	r24, 0xEB	; 235
    3008:	99 e7       	ldi	r25, 0x79	; 121
    300a:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x6>
    300e:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    3012:	85 e1       	ldi	r24, 0x15	; 21
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x46>
    301a:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    301e:	00 93 a3 39 	sts	0x39A3, r16	; 0x8039a3 <reactStr+0x86>
    3022:	10 93 a4 39 	sts	0x39A4, r17	; 0x8039a4 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	ee 0f       	add	r30, r30
    302a:	ff 1f       	adc	r31, r31
    302c:	e1 52       	subi	r30, 0x21	; 33
    302e:	f6 4c       	sbci	r31, 0xC6	; 198
    3030:	10 82       	st	Z, r1
    3032:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    3034:	b4 e0       	ldi	r27, 0x04	; 4
    3036:	9b 2e       	mov	r9, r27
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3038:	17 e5       	ldi	r17, 0x57	; 87
    303a:	e1 2e       	mov	r14, r17
    303c:	1a e7       	ldi	r17, 0x7A	; 122
    303e:	f1 2e       	mov	r15, r17
    reactStr[1][number]=length;
    3040:	02 e0       	ldi	r16, 0x02	; 2
    3042:	c0 2e       	mov	r12, r16
    3044:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    3046:	aa 24       	eor	r10, r10
    3048:	a3 94       	inc	r10
    304a:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    304c:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <currDepth>
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	8c 01       	movw	r16, r24
    3054:	00 0f       	add	r16, r16
    3056:	11 1f       	adc	r17, r17
    3058:	01 52       	subi	r16, 0x21	; 33
    305a:	16 4c       	sbci	r17, 0xC6	; 198
    305c:	f8 01       	movw	r30, r16
    305e:	40 81       	ld	r20, Z
    3060:	51 81       	ldd	r21, Z+1	; 0x01
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	fc 01       	movw	r30, r24
    3068:	e3 52       	subi	r30, 0x23	; 35
    306a:	f6 4c       	sbci	r31, 0xC6	; 198
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	91 81       	ldd	r25, Z+1	; 0x01
    3072:	7f da       	rcall	.-2818   	; 0x2572 <FindChild>
    3074:	d8 01       	movw	r26, r16
    3076:	8d 93       	st	X+, r24
    3078:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    307a:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	ee 0f       	add	r30, r30
    3082:	ff 1f       	adc	r31, r31
    3084:	e1 52       	subi	r30, 0x21	; 33
    3086:	f6 4c       	sbci	r31, 0xC6	; 198
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	09 f4       	brne	.+2      	; 0x3092 <ProcessInput+0x394>
    3090:	4a c0       	rjmp	.+148    	; 0x3126 <ProcessInput+0x428>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    3092:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory>
    3096:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x1>
    309a:	82 17       	cp	r24, r18
    309c:	93 07       	cpc	r25, r19
    309e:	09 f4       	brne	.+2      	; 0x30a2 <ProcessInput+0x3a4>
    30a0:	42 c0       	rjmp	.+132    	; 0x3126 <ProcessInput+0x428>
    30a2:	20 91 42 38 	lds	r18, 0x3842	; 0x803842 <inventory+0x2>
    30a6:	30 91 43 38 	lds	r19, 0x3843	; 0x803843 <inventory+0x3>
    30aa:	82 17       	cp	r24, r18
    30ac:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    30ae:	d9 f1       	breq	.+118    	; 0x3126 <ProcessInput+0x428>
    30b0:	6c ed       	ldi	r22, 0xDC	; 220
    30b2:	78 e3       	ldi	r23, 0x38	; 56
    30b4:	8f d9       	rcall	.-3298   	; 0x23d4 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30b6:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3989+0x1a>
    30ba:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30be:	e9 2d       	mov	r30, r9
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	df 01       	movw	r26, r30
    30c4:	aa 0f       	add	r26, r26
    30c6:	bb 1f       	adc	r27, r27
    30c8:	a3 5e       	subi	r26, 0xE3	; 227
    30ca:	b6 4c       	sbci	r27, 0xC6	; 198
    30cc:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0xc>
    30d0:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0xd>
    30d4:	2d 93       	st	X+, r18
    30d6:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    30d8:	df 01       	movw	r26, r30
    30da:	aa 0f       	add	r26, r26
    30dc:	bb 1f       	adc	r27, r27
    30de:	a3 5a       	subi	r26, 0xA3	; 163
    30e0:	b6 4c       	sbci	r27, 0xC6	; 198
    30e2:	8d 93       	st	X+, r24
    30e4:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    30e6:	ee 0f       	add	r30, r30
    30e8:	ff 1f       	adc	r31, r31
    30ea:	e3 56       	subi	r30, 0x63	; 99
    30ec:	f6 4c       	sbci	r31, 0xC6	; 198
    30ee:	10 82       	st	Z, r1
    30f0:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	89 0d       	add	r24, r9
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	93 94       	inc	r9
    30fa:	93 94       	inc	r9
    30fc:	fc 01       	movw	r30, r24
    30fe:	ee 0f       	add	r30, r30
    3100:	ff 1f       	adc	r31, r31
    3102:	e3 5e       	subi	r30, 0xE3	; 227
    3104:	f6 4c       	sbci	r31, 0xC6	; 198
    3106:	e0 82       	st	Z, r14
    3108:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    310a:	fc 01       	movw	r30, r24
    310c:	ee 0f       	add	r30, r30
    310e:	ff 1f       	adc	r31, r31
    3110:	e3 5a       	subi	r30, 0xA3	; 163
    3112:	f6 4c       	sbci	r31, 0xC6	; 198
    3114:	c0 82       	st	Z, r12
    3116:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    3118:	88 0f       	add	r24, r24
    311a:	99 1f       	adc	r25, r25
    311c:	fc 01       	movw	r30, r24
    311e:	e3 56       	subi	r30, 0x63	; 99
    3120:	f6 4c       	sbci	r31, 0xC6	; 198
    3122:	a0 82       	st	Z, r10
    3124:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    3126:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <currDepth>
    312a:	82 2f       	mov	r24, r18
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	fc 01       	movw	r30, r24
    3130:	ee 0f       	add	r30, r30
    3132:	ff 1f       	adc	r31, r31
    3134:	e1 52       	subi	r30, 0x21	; 33
    3136:	f6 4c       	sbci	r31, 0xC6	; 198
    3138:	40 81       	ld	r20, Z
    313a:	51 81       	ldd	r21, Z+1	; 0x01
    313c:	45 2b       	or	r20, r21
    313e:	09 f0       	breq	.+2      	; 0x3142 <ProcessInput+0x444>
    3140:	85 cf       	rjmp	.-246    	; 0x304c <ProcessInput+0x34e>

                //Look back if not on level 0
                if (currDepth) {
    3142:	22 23       	and	r18, r18
    3144:	61 f1       	breq	.+88     	; 0x319e <ProcessInput+0x4a0>
                    PopulateObject(route[currDepth-1], &actObj1);
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	fc 01       	movw	r30, r24
    314c:	e5 52       	subi	r30, 0x25	; 37
    314e:	f6 4c       	sbci	r31, 0xC6	; 198
    3150:	6c ed       	ldi	r22, 0xDC	; 220
    3152:	78 e3       	ldi	r23, 0x38	; 56
    3154:	80 81       	ld	r24, Z
    3156:	91 81       	ldd	r25, Z+1	; 0x01
    3158:	3d d9       	rcall	.-3462   	; 0x23d4 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    315a:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3989+0x1a>
    315e:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3989+0x1b>
    3162:	11 e0       	ldi	r17, 0x01	; 1
    3164:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3166:	89 2d       	mov	r24, r9
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	fc 01       	movw	r30, r24
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	e3 5e       	subi	r30, 0xE3	; 227
    3172:	f6 4c       	sbci	r31, 0xC6	; 198
    3174:	40 91 e8 38 	lds	r20, 0x38E8	; 0x8038e8 <actObj1.3989+0xc>
    3178:	50 91 e9 38 	lds	r21, 0x38E9	; 0x8038e9 <actObj1.3989+0xd>
    317c:	40 83       	st	Z, r20
    317e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3180:	fc 01       	movw	r30, r24
    3182:	ee 0f       	add	r30, r30
    3184:	ff 1f       	adc	r31, r31
    3186:	e3 5a       	subi	r30, 0xA3	; 163
    3188:	f6 4c       	sbci	r31, 0xC6	; 198
    318a:	20 83       	st	Z, r18
    318c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	fc 01       	movw	r30, r24
    3194:	e3 56       	subi	r30, 0x63	; 99
    3196:	f6 4c       	sbci	r31, 0xC6	; 198
    3198:	10 82       	st	Z, r1
    319a:	11 82       	std	Z+1, r1	; 0x01
    319c:	28 c5       	rjmp	.+2640   	; 0x3bee <ProcessInput+0xef0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    319e:	1f ef       	ldi	r17, 0xFF	; 255
    31a0:	19 0d       	add	r17, r9
    31a2:	25 c5       	rjmp	.+2634   	; 0x3bee <ProcessInput+0xef0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    31a4:	ee 2e       	mov	r14, r30
    31a6:	f1 2c       	mov	r15, r1
    31a8:	f7 01       	movw	r30, r14
    31aa:	ee 0f       	add	r30, r30
    31ac:	ff 1f       	adc	r31, r31
    31ae:	e3 52       	subi	r30, 0x23	; 35
    31b0:	f6 4c       	sbci	r31, 0xC6	; 198
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	d3 01       	movw	r26, r6
    31b8:	11 96       	adiw	r26, 0x01	; 1
    31ba:	6c 91       	ld	r22, X
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	d8 d9       	rcall	.-3152   	; 0x2572 <FindChild>
    31c2:	f7 01       	movw	r30, r14
    31c4:	ee 0f       	add	r30, r30
    31c6:	ff 1f       	adc	r31, r31
    31c8:	e1 52       	subi	r30, 0x21	; 33
    31ca:	f6 4c       	sbci	r31, 0xC6	; 198
    31cc:	80 83       	st	Z, r24
    31ce:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    31d0:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <currDepth>
    31d4:	29 2f       	mov	r18, r25
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	f9 01       	movw	r30, r18
    31da:	ee 0f       	add	r30, r30
    31dc:	ff 1f       	adc	r31, r31
    31de:	e1 52       	subi	r30, 0x21	; 33
    31e0:	f6 4c       	sbci	r31, 0xC6	; 198
    31e2:	40 81       	ld	r20, Z
    31e4:	51 81       	ldd	r21, Z+1	; 0x01
    31e6:	41 15       	cp	r20, r1
    31e8:	51 05       	cpc	r21, r1
    31ea:	21 f0       	breq	.+8      	; 0x31f4 <ProcessInput+0x4f6>
                    PopulateObject(route[currDepth+1], &actObj1);
    31ec:	6c ed       	ldi	r22, 0xDC	; 220
    31ee:	78 e3       	ldi	r23, 0x38	; 56
    31f0:	ca 01       	movw	r24, r20
    31f2:	1c c0       	rjmp	.+56     	; 0x322c <ProcessInput+0x52e>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    31f4:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    31f6:	81 f1       	breq	.+96     	; 0x3258 <ProcessInput+0x55a>
    31f8:	22 0f       	add	r18, r18
    31fa:	33 1f       	adc	r19, r19
    31fc:	f9 01       	movw	r30, r18
    31fe:	e5 52       	subi	r30, 0x25	; 37
    3200:	f6 4c       	sbci	r31, 0xC6	; 198
    3202:	d3 01       	movw	r26, r6
    3204:	11 96       	adiw	r26, 0x01	; 1
    3206:	6c 91       	ld	r22, X
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	5c d9       	rcall	.-3400   	; 0x24c6 <CheckLetter>
    320e:	81 11       	cpse	r24, r1
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <ProcessInput+0x518>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    3212:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    3214:	ec c4       	rjmp	.+2520   	; 0x3bee <ProcessInput+0xef0>
    3216:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	ee 0f       	add	r30, r30
    321e:	ff 1f       	adc	r31, r31
    3220:	e5 52       	subi	r30, 0x25	; 37
    3222:	f6 4c       	sbci	r31, 0xC6	; 198
    3224:	6c ed       	ldi	r22, 0xDC	; 220
    3226:	78 e3       	ldi	r23, 0x38	; 56
    3228:	80 81       	ld	r24, Z
    322a:	91 81       	ldd	r25, Z+1	; 0x01
    322c:	d3 d8       	rcall	.-3674   	; 0x23d4 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    322e:	80 91 f8 38 	lds	r24, 0x38F8	; 0x8038f8 <actObj1.3989+0x1c>
    3232:	90 91 f9 38 	lds	r25, 0x38F9	; 0x8038f9 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3236:	20 91 ea 38 	lds	r18, 0x38EA	; 0x8038ea <actObj1.3989+0xe>
    323a:	30 91 eb 38 	lds	r19, 0x38EB	; 0x8038eb <actObj1.3989+0xf>
    323e:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3242:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3246:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    324a:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    324e:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3252:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    3256:	32 ce       	rjmp	.-924    	; 0x2ebc <ProcessInput+0x1be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3258:	81 ed       	ldi	r24, 0xD1	; 209
    325a:	99 e7       	ldi	r25, 0x79	; 121
    325c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3260:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3264:	8a e1       	ldi	r24, 0x1A	; 26
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	c9 c2       	rjmp	.+1426   	; 0x37fc <ProcessInput+0xafe>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    326a:	80 37       	cpi	r24, 0x70	; 112
    326c:	09 f0       	breq	.+2      	; 0x3270 <ProcessInput+0x572>
    326e:	92 c0       	rjmp	.+292    	; 0x3394 <ProcessInput+0x696>
            if (inventory[0]&&inventory[1]) {
    3270:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    3274:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    3278:	89 2b       	or	r24, r25
    327a:	79 f0       	breq	.+30     	; 0x329a <ProcessInput+0x59c>
    327c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    3280:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    3284:	89 2b       	or	r24, r25
    3286:	49 f0       	breq	.+18     	; 0x329a <ProcessInput+0x59c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3288:	87 e0       	ldi	r24, 0x07	; 7
    328a:	98 e7       	ldi	r25, 0x78	; 120
    328c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3290:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3294:	89 e5       	ldi	r24, 0x59	; 89
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	b1 c2       	rjmp	.+1378   	; 0x37fc <ProcessInput+0xafe>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    329a:	b2 e0       	ldi	r27, 0x02	; 2
    329c:	fb 12       	cpse	r15, r27
    329e:	6f cd       	rjmp	.-1314   	; 0x2d7e <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    32a0:	00 91 31 38 	lds	r16, 0x3831	; 0x803831 <currDepth>
    32a4:	10 e0       	ldi	r17, 0x00	; 0
    32a6:	f8 01       	movw	r30, r16
    32a8:	ee 0f       	add	r30, r30
    32aa:	ff 1f       	adc	r31, r31
    32ac:	e3 52       	subi	r30, 0x23	; 35
    32ae:	f6 4c       	sbci	r31, 0xC6	; 198
    32b0:	40 e0       	ldi	r20, 0x00	; 0
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	d3 01       	movw	r26, r6
    32b6:	11 96       	adiw	r26, 0x01	; 1
    32b8:	6c 91       	ld	r22, X
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	59 d9       	rcall	.-3406   	; 0x2572 <FindChild>
    32c0:	00 0f       	add	r16, r16
    32c2:	11 1f       	adc	r17, r17
    32c4:	f8 01       	movw	r30, r16
    32c6:	e1 52       	subi	r30, 0x21	; 33
    32c8:	f6 4c       	sbci	r31, 0xC6	; 198
    32ca:	80 83       	st	Z, r24
    32cc:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    32ce:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <currDepth>
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	2f 5f       	subi	r18, 0xFF	; 255
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	22 0f       	add	r18, r18
    32da:	33 1f       	adc	r19, r19
    32dc:	f9 01       	movw	r30, r18
    32de:	e3 52       	subi	r30, 0x23	; 35
    32e0:	f6 4c       	sbci	r31, 0xC6	; 198
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	09 f4       	brne	.+2      	; 0x32ec <ProcessInput+0x5ee>
    32ea:	38 c3       	rjmp	.+1648   	; 0x395c <ProcessInput+0xc5e>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    32ec:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory>
    32f0:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x1>
    32f4:	84 17       	cp	r24, r20
    32f6:	95 07       	cpc	r25, r21
    32f8:	39 f0       	breq	.+14     	; 0x3308 <ProcessInput+0x60a>
    32fa:	40 91 42 38 	lds	r20, 0x3842	; 0x803842 <inventory+0x2>
    32fe:	50 91 43 38 	lds	r21, 0x3843	; 0x803843 <inventory+0x3>
    3302:	84 17       	cp	r24, r20
    3304:	95 07       	cpc	r25, r21
    3306:	c1 f4       	brne	.+48     	; 0x3338 <ProcessInput+0x63a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3308:	82 ee       	ldi	r24, 0xE2	; 226
    330a:	97 e7       	ldi	r25, 0x77	; 119
    330c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3310:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3314:	85 e2       	ldi	r24, 0x25	; 37
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    331c:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3328:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    332c:	f9 01       	movw	r30, r18
    332e:	e3 52       	subi	r30, 0x23	; 35
    3330:	f6 4c       	sbci	r31, 0xC6	; 198
    3332:	10 82       	st	Z, r1
    3334:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3336:	c2 cd       	rjmp	.-1148   	; 0x2ebc <ProcessInput+0x1be>
    3338:	6c ed       	ldi	r22, 0xDC	; 220
    333a:	78 e3       	ldi	r23, 0x38	; 56
    333c:	4b d8       	rcall	.-3946   	; 0x23d4 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    333e:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3989+0x7>
    3342:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
    3346:	88 23       	and	r24, r24
    3348:	09 f4       	brne	.+2      	; 0x334c <ProcessInput+0x64e>
    334a:	e3 c2       	rjmp	.+1478   	; 0x3912 <ProcessInput+0xc14>
                            if (actObj1.byteField[ITEM_NR]) {
    334c:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3989+0xb>
    3350:	88 23       	and	r24, r24
    3352:	09 f4       	brne	.+2      	; 0x3356 <ProcessInput+0x658>
    3354:	14 cd       	rjmp	.-1496   	; 0x2d7e <ProcessInput+0x80>
                                if (inventory[0]) {
    3356:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    335a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    335e:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
                                    inventory[1] = route[currDepth+1];
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	ee 0f       	add	r30, r30
    3366:	ff 1f       	adc	r31, r31
    3368:	e1 52       	subi	r30, 0x21	; 33
    336a:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    336c:	89 2b       	or	r24, r25
    336e:	39 f0       	breq	.+14     	; 0x337e <ProcessInput+0x680>
                                    inventory[1] = route[currDepth+1];
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <inventory+0x2>
    3378:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <inventory+0x3>
    337c:	06 c0       	rjmp	.+12     	; 0x338a <ProcessInput+0x68c>
                                } else {
                                    inventory[0] = route[currDepth+1];
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory>
    3386:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    338a:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0xa>
    338e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    3392:	2b c0       	rjmp	.+86     	; 0x33ea <ProcessInput+0x6ec>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    3394:	84 36       	cpi	r24, 0x64	; 100
    3396:	d9 f4       	brne	.+54     	; 0x33ce <ProcessInput+0x6d0>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3398:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    339c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <ProcessInput+0x6a8>
    33a4:	3c c4       	rjmp	.+2168   	; 0x3c1e <ProcessInput+0xf20>
    33a6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    33aa:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    33ae:	89 2b       	or	r24, r25
    33b0:	49 f4       	brne	.+18     	; 0x33c4 <ProcessInput+0x6c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33b2:	86 ea       	ldi	r24, 0xA6	; 166
    33b4:	97 e7       	ldi	r25, 0x77	; 119
    33b6:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    33ba:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    33be:	86 e2       	ldi	r24, 0x26	; 38
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	72 cd       	rjmp	.-1308   	; 0x2ea8 <ProcessInput+0x1aa>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    33c4:	b2 e0       	ldi	r27, 0x02	; 2
    33c6:	fb 16       	cp	r15, r27
    33c8:	09 f4       	brne	.+2      	; 0x33cc <ProcessInput+0x6ce>
    33ca:	8b c4       	rjmp	.+2326   	; 0x3ce2 <ProcessInput+0xfe4>
    33cc:	d8 cc       	rjmp	.-1616   	; 0x2d7e <ProcessInput+0x80>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    33ce:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    33d0:	81 f4       	brne	.+32     	; 0x33f2 <ProcessInput+0x6f4>
    33d2:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory>
    33d6:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x1>
    33da:	89 2b       	or	r24, r25
    33dc:	31 f4       	brne	.+12     	; 0x33ea <ProcessInput+0x6ec>
    33de:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    33e2:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    33e6:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    33e8:	21 f3       	breq	.-56     	; 0x33b2 <ProcessInput+0x6b4>
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	f8 db       	rcall	.-2064   	; 0x2bde <ShowInventory>
    33ee:	18 2f       	mov	r17, r24
    33f0:	fe c3       	rjmp	.+2044   	; 0x3bee <ProcessInput+0xef0>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    33f2:	9c e8       	ldi	r25, 0x8C	; 140
    33f4:	98 0f       	add	r25, r24
    33f6:	92 30       	cpi	r25, 0x02	; 2
    33f8:	28 f0       	brcs	.+10     	; 0x3404 <ProcessInput+0x706>
    33fa:	87 36       	cpi	r24, 0x67	; 103
    33fc:	19 f0       	breq	.+6      	; 0x3404 <ProcessInput+0x706>
    33fe:	82 37       	cpi	r24, 0x72	; 114
    3400:	09 f0       	breq	.+2      	; 0x3404 <ProcessInput+0x706>
    3402:	b5 c2       	rjmp	.+1386   	; 0x396e <ProcessInput+0xc70>
            if ((inputLen<2)||(inputLen>3)) {
    3404:	8e ef       	ldi	r24, 0xFE	; 254
    3406:	8f 0d       	add	r24, r15
    3408:	82 30       	cpi	r24, 0x02	; 2
    340a:	08 f0       	brcs	.+2      	; 0x340e <ProcessInput+0x710>
    340c:	b8 cc       	rjmp	.-1680   	; 0x2d7e <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    340e:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    3412:	0e 2f       	mov	r16, r30
    3414:	10 e0       	ldi	r17, 0x00	; 0
    3416:	d3 01       	movw	r26, r6
    3418:	af 0d       	add	r26, r15
    341a:	b1 1d       	adc	r27, r1
    341c:	11 97       	sbiw	r26, 0x01	; 1
    341e:	f8 01       	movw	r30, r16
    3420:	ee 0f       	add	r30, r30
    3422:	ff 1f       	adc	r31, r31
    3424:	e3 52       	subi	r30, 0x23	; 35
    3426:	f6 4c       	sbci	r31, 0xC6	; 198
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	50 e0       	ldi	r21, 0x00	; 0
    342c:	6c 91       	ld	r22, X
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	9f d8       	rcall	.-3778   	; 0x2572 <FindChild>
    3434:	f8 01       	movw	r30, r16
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	e1 52       	subi	r30, 0x21	; 33
    343c:	f6 4c       	sbci	r31, 0xC6	; 198
    343e:	80 83       	st	Z, r24
    3440:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3442:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	ee 0f       	add	r30, r30
    344a:	ff 1f       	adc	r31, r31
    344c:	e1 52       	subi	r30, 0x21	; 33
    344e:	f6 4c       	sbci	r31, 0xC6	; 198
    3450:	80 81       	ld	r24, Z
    3452:	91 81       	ldd	r25, Z+1	; 0x01
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	09 f4       	brne	.+2      	; 0x345a <ProcessInput+0x75c>
    3458:	78 c2       	rjmp	.+1264   	; 0x394a <ProcessInput+0xc4c>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    345a:	f3 e0       	ldi	r31, 0x03	; 3
    345c:	ff 12       	cpse	r15, r31
    345e:	60 c1       	rjmp	.+704    	; 0x3720 <ProcessInput+0xa22>
    3460:	d3 01       	movw	r26, r6
    3462:	2c 91       	ld	r18, X
    3464:	25 37       	cpi	r18, 0x75	; 117
    3466:	19 f0       	breq	.+6      	; 0x346e <ProcessInput+0x770>
    3468:	27 36       	cpi	r18, 0x67	; 103
    346a:	09 f0       	breq	.+2      	; 0x346e <ProcessInput+0x770>
    346c:	59 c1       	rjmp	.+690    	; 0x3720 <ProcessInput+0xa22>
    346e:	00 e0       	ldi	r16, 0x00	; 0
    3470:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3472:	41 e6       	ldi	r20, 0x61	; 97
    3474:	c4 2e       	mov	r12, r20
    3476:	49 e7       	ldi	r20, 0x79	; 121
    3478:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    347a:	51 e2       	ldi	r21, 0x21	; 33
    347c:	a5 2e       	mov	r10, r21
    347e:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    3480:	88 24       	eor	r8, r8
    3482:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    3484:	91 2c       	mov	r9, r1
    3486:	e0 2e       	mov	r14, r16
    3488:	f1 2c       	mov	r15, r1
    348a:	c7 01       	movw	r24, r14
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	fc 01       	movw	r30, r24
    3492:	e0 5c       	subi	r30, 0xC0	; 192
    3494:	f7 4c       	sbci	r31, 0xC7	; 199
    3496:	7f 01       	movw	r14, r30
    3498:	80 81       	ld	r24, Z
    349a:	91 81       	ldd	r25, Z+1	; 0x01
    349c:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    349e:	79 f0       	breq	.+30     	; 0x34be <ProcessInput+0x7c0>
    34a0:	d3 01       	movw	r26, r6
    34a2:	11 96       	adiw	r26, 0x01	; 1
    34a4:	6c 91       	ld	r22, X
    34a6:	0f d8       	rcall	.-4066   	; 0x24c6 <CheckLetter>
    34a8:	88 23       	and	r24, r24
    34aa:	49 f0       	breq	.+18     	; 0x34be <ProcessInput+0x7c0>
                                    PopulateObject(inventory[x], &actObj2);
    34ac:	61 eb       	ldi	r22, 0xB1	; 177
    34ae:	78 e3       	ldi	r23, 0x38	; 56
    34b0:	f7 01       	movw	r30, r14
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <PopulateObject>
                                    x = 2;
    34ba:	02 e0       	ldi	r16, 0x02	; 2
    34bc:	1d c0       	rjmp	.+58     	; 0x34f8 <ProcessInput+0x7fa>
                                }
                            }
                            if (x == 1) { 
    34be:	01 30       	cpi	r16, 0x01	; 1
    34c0:	d1 f4       	brne	.+52     	; 0x34f6 <ProcessInput+0x7f8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c2:	e1 2f       	mov	r30, r17
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	df 01       	movw	r26, r30
    34c8:	aa 0f       	add	r26, r26
    34ca:	bb 1f       	adc	r27, r27
    34cc:	a3 5e       	subi	r26, 0xE3	; 227
    34ce:	b6 4c       	sbci	r27, 0xC6	; 198
    34d0:	cd 92       	st	X+, r12
    34d2:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    34d4:	df 01       	movw	r26, r30
    34d6:	aa 0f       	add	r26, r26
    34d8:	bb 1f       	adc	r27, r27
    34da:	a3 5a       	subi	r26, 0xA3	; 163
    34dc:	b6 4c       	sbci	r27, 0xC6	; 198
    34de:	ad 92       	st	X+, r10
    34e0:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	e3 56       	subi	r30, 0x63	; 99
    34e8:	f6 4c       	sbci	r31, 0xC6	; 198
    34ea:	80 82       	st	Z, r8
    34ec:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    34ee:	d3 01       	movw	r26, r6
    34f0:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    34f2:	1f 5f       	subi	r17, 0xFF	; 255
    34f4:	01 c0       	rjmp	.+2      	; 0x34f8 <ProcessInput+0x7fa>
    34f6:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    34f8:	0f 5f       	subi	r16, 0xFF	; 255
    34fa:	01 30       	cpi	r16, 0x01	; 1
    34fc:	21 f2       	breq	.-120    	; 0x3486 <ProcessInput+0x788>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    34fe:	f3 01       	movw	r30, r6
    3500:	80 81       	ld	r24, Z
    3502:	88 23       	and	r24, r24
    3504:	09 f4       	brne	.+2      	; 0x3508 <ProcessInput+0x80a>
    3506:	73 c3       	rjmp	.+1766   	; 0x3bee <ProcessInput+0xef0>
                            PopulateObject(route[currDepth+1], &actObj1);
    3508:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	e1 52       	subi	r30, 0x21	; 33
    3514:	f6 4c       	sbci	r31, 0xC6	; 198
    3516:	6c ed       	ldi	r22, 0xDC	; 220
    3518:	78 e3       	ldi	r23, 0x38	; 56
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3522:	e0 90 fa 38 	lds	r14, 0x38FA	; 0x8038fa <actObj1.3989+0x1e>
    3526:	f0 90 fb 38 	lds	r15, 0x38FB	; 0x8038fb <actObj1.3989+0x1f>
    352a:	f1 e0       	ldi	r31, 0x01	; 1
    352c:	ef 16       	cp	r14, r31
    352e:	f1 04       	cpc	r15, r1
    3530:	09 f0       	breq	.+2      	; 0x3534 <ProcessInput+0x836>
    3532:	89 c0       	rjmp	.+274    	; 0x3646 <ProcessInput+0x948>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3534:	93 01       	movw	r18, r6
    3536:	2e 5f       	subi	r18, 0xFE	; 254
    3538:	3f 4f       	sbci	r19, 0xFF	; 255
    353a:	40 e0       	ldi	r20, 0x00	; 0
    353c:	61 e0       	ldi	r22, 0x01	; 1
    353e:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x10>
    3542:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x11>
    3546:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
                                if (data[2] == '1') {
    354a:	d3 01       	movw	r26, r6
    354c:	12 96       	adiw	r26, 0x02	; 2
    354e:	3c 91       	ld	r19, X
    3550:	31 33       	cpi	r19, 0x31	; 49
    3552:	09 f0       	breq	.+2      	; 0x3556 <ProcessInput+0x858>
    3554:	4c c3       	rjmp	.+1688   	; 0x3bee <ProcessInput+0xef0>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3556:	20 91 bc 38 	lds	r18, 0x38BC	; 0x8038bc <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    355a:	51 ee       	ldi	r21, 0xE1	; 225
    355c:	52 0f       	add	r21, r18
    355e:	41 e0       	ldi	r20, 0x01	; 1
    3560:	41 0f       	add	r20, r17
    3562:	81 2f       	mov	r24, r17
    3564:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3566:	fc 01       	movw	r30, r24
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	e3 5e       	subi	r30, 0xE3	; 227
    356e:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3570:	54 30       	cpi	r21, 0x04	; 4
    3572:	b0 f0       	brcs	.+44     	; 0x35a0 <ProcessInput+0x8a2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3574:	21 e0       	ldi	r18, 0x01	; 1
    3576:	39 e7       	ldi	r19, 0x79	; 121
    3578:	20 83       	st	Z, r18
    357a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    357c:	fc 01       	movw	r30, r24
    357e:	ee 0f       	add	r30, r30
    3580:	ff 1f       	adc	r31, r31
    3582:	e3 5a       	subi	r30, 0xA3	; 163
    3584:	f6 4c       	sbci	r31, 0xC6	; 198
    3586:	2a e1       	ldi	r18, 0x1A	; 26
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	20 83       	st	Z, r18
    358c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	fc 01       	movw	r30, r24
    3594:	e3 56       	subi	r30, 0x63	; 99
    3596:	f6 4c       	sbci	r31, 0xC6	; 198
    3598:	e0 82       	st	Z, r14
    359a:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    359c:	14 2f       	mov	r17, r20
    359e:	27 c3       	rjmp	.+1614   	; 0x3bee <ProcessInput+0xef0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35a0:	60 e5       	ldi	r22, 0x50	; 80
    35a2:	75 e7       	ldi	r23, 0x75	; 117
    35a4:	60 83       	st	Z, r22
    35a6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    35a8:	fc 01       	movw	r30, r24
    35aa:	ee 0f       	add	r30, r30
    35ac:	ff 1f       	adc	r31, r31
    35ae:	e3 5a       	subi	r30, 0xA3	; 163
    35b0:	f6 4c       	sbci	r31, 0xC6	; 198
    35b2:	62 eb       	ldi	r22, 0xB2	; 178
    35b4:	70 e0       	ldi	r23, 0x00	; 0
    35b6:	60 83       	st	Z, r22
    35b8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	fc 01       	movw	r30, r24
    35c0:	e3 56       	subi	r30, 0x63	; 99
    35c2:	f6 4c       	sbci	r31, 0xC6	; 198
    35c4:	e0 82       	st	Z, r14
    35c6:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35c8:	84 2f       	mov	r24, r20
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	fc 01       	movw	r30, r24
    35ce:	ee 0f       	add	r30, r30
    35d0:	ff 1f       	adc	r31, r31
    35d2:	e3 5e       	subi	r30, 0xE3	; 227
    35d4:	f6 4c       	sbci	r31, 0xC6	; 198
    35d6:	49 e5       	ldi	r20, 0x59	; 89
    35d8:	5a e7       	ldi	r21, 0x7A	; 122
    35da:	40 83       	st	Z, r20
    35dc:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35de:	fc 01       	movw	r30, r24
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	e3 5a       	subi	r30, 0xA3	; 163
    35e6:	f6 4c       	sbci	r31, 0xC6	; 198
    35e8:	42 e0       	ldi	r20, 0x02	; 2
    35ea:	50 e0       	ldi	r21, 0x00	; 0
    35ec:	40 83       	st	Z, r20
    35ee:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	fc 01       	movw	r30, r24
    35f6:	e3 56       	subi	r30, 0x63	; 99
    35f8:	f6 4c       	sbci	r31, 0xC6	; 198
    35fa:	e0 82       	st	Z, r14
    35fc:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	81 0f       	add	r24, r17
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	1d 5f       	subi	r17, 0xFD	; 253
    3606:	fc 01       	movw	r30, r24
    3608:	ee 0f       	add	r30, r30
    360a:	ff 1f       	adc	r31, r31
    360c:	e3 5e       	subi	r30, 0xE3	; 227
    360e:	f6 4c       	sbci	r31, 0xC6	; 198
    3610:	4d ea       	ldi	r20, 0xAD	; 173
    3612:	58 e7       	ldi	r21, 0x78	; 120
    3614:	40 83       	st	Z, r20
    3616:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3618:	fc 01       	movw	r30, r24
    361a:	ee 0f       	add	r30, r30
    361c:	ff 1f       	adc	r31, r31
    361e:	e3 5a       	subi	r30, 0xA3	; 163
    3620:	f6 4c       	sbci	r31, 0xC6	; 198
    3622:	42 e1       	ldi	r20, 0x12	; 18
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	40 83       	st	Z, r20
    3628:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	fc 01       	movw	r30, r24
    3630:	e3 56       	subi	r30, 0x63	; 99
    3632:	f6 4c       	sbci	r31, 0xC6	; 198
    3634:	e0 82       	st	Z, r14
    3636:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    3638:	30 93 0c 39 	sts	0x390C, r19	; 0x80390c <specialInput>
                                        specialInput[1] = item;
    363c:	20 93 0d 39 	sts	0x390D, r18	; 0x80390d <specialInput+0x1>
                                        specialInput[2] = 0;
    3640:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <specialInput+0x2>
    3644:	d4 c2       	rjmp	.+1448   	; 0x3bee <ProcessInput+0xef0>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    3646:	90 91 e5 38 	lds	r25, 0x38E5	; 0x8038e5 <actObj1.3989+0x9>
    364a:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj2.3990+0xb>
    364e:	98 13       	cpse	r25, r24
    3650:	2e c0       	rjmp	.+92     	; 0x36ae <ProcessInput+0x9b0>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3652:	20 91 02 39 	lds	r18, 0x3902	; 0x803902 <actObj1.3989+0x26>
    3656:	30 91 03 39 	lds	r19, 0x3903	; 0x803903 <actObj1.3989+0x27>
    365a:	01 e0       	ldi	r16, 0x01	; 1
    365c:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    365e:	81 2f       	mov	r24, r17
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	fc 01       	movw	r30, r24
    3664:	ee 0f       	add	r30, r30
    3666:	ff 1f       	adc	r31, r31
    3668:	e3 5e       	subi	r30, 0xE3	; 227
    366a:	f6 4c       	sbci	r31, 0xC6	; 198
    366c:	40 91 f4 38 	lds	r20, 0x38F4	; 0x8038f4 <actObj1.3989+0x18>
    3670:	50 91 f5 38 	lds	r21, 0x38F5	; 0x8038f5 <actObj1.3989+0x19>
    3674:	40 83       	st	Z, r20
    3676:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3678:	fc 01       	movw	r30, r24
    367a:	ee 0f       	add	r30, r30
    367c:	ff 1f       	adc	r31, r31
    367e:	e3 5a       	subi	r30, 0xA3	; 163
    3680:	f6 4c       	sbci	r31, 0xC6	; 198
    3682:	20 83       	st	Z, r18
    3684:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	fc 01       	movw	r30, r24
    368c:	e3 56       	subi	r30, 0x63	; 99
    368e:	f6 4c       	sbci	r31, 0xC6	; 198
    3690:	10 82       	st	Z, r1
    3692:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3694:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3989+0x2a>
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    369e:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    36a2:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0xa>
    36a6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    36aa:	10 2f       	mov	r17, r16
    36ac:	a0 c2       	rjmp	.+1344   	; 0x3bee <ProcessInput+0xef0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    36ae:	f3 01       	movw	r30, r6
    36b0:	80 81       	ld	r24, Z
    36b2:	85 37       	cpi	r24, 0x75	; 117
    36b4:	99 f4       	brne	.+38     	; 0x36dc <ProcessInput+0x9de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b6:	81 2f       	mov	r24, r17
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	fc 01       	movw	r30, r24
    36bc:	ee 0f       	add	r30, r30
    36be:	ff 1f       	adc	r31, r31
    36c0:	e3 5e       	subi	r30, 0xE3	; 227
    36c2:	f6 4c       	sbci	r31, 0xC6	; 198
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    36c6:	39 e7       	ldi	r19, 0x79	; 121
    36c8:	20 83       	st	Z, r18
    36ca:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    36cc:	fc 01       	movw	r30, r24
    36ce:	ee 0f       	add	r30, r30
    36d0:	ff 1f       	adc	r31, r31
    36d2:	e3 5a       	subi	r30, 0xA3	; 163
    36d4:	f6 4c       	sbci	r31, 0xC6	; 198
    36d6:	2a e1       	ldi	r18, 0x1A	; 26
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	15 c0       	rjmp	.+42     	; 0x3706 <ProcessInput+0xa08>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    36dc:	87 36       	cpi	r24, 0x67	; 103
    36de:	09 f0       	breq	.+2      	; 0x36e2 <ProcessInput+0x9e4>
    36e0:	86 c2       	rjmp	.+1292   	; 0x3bee <ProcessInput+0xef0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36e2:	81 2f       	mov	r24, r17
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	fc 01       	movw	r30, r24
    36e8:	ee 0f       	add	r30, r30
    36ea:	ff 1f       	adc	r31, r31
    36ec:	e3 5e       	subi	r30, 0xE3	; 227
    36ee:	f6 4c       	sbci	r31, 0xC6	; 198
    36f0:	2f e9       	ldi	r18, 0x9F	; 159
    36f2:	36 e7       	ldi	r19, 0x76	; 118
    36f4:	20 83       	st	Z, r18
    36f6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    36f8:	fc 01       	movw	r30, r24
    36fa:	ee 0f       	add	r30, r30
    36fc:	ff 1f       	adc	r31, r31
    36fe:	e3 5a       	subi	r30, 0xA3	; 163
    3700:	f6 4c       	sbci	r31, 0xC6	; 198
    3702:	28 e2       	ldi	r18, 0x28	; 40
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	20 83       	st	Z, r18
    3708:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	fc 01       	movw	r30, r24
    3710:	e3 56       	subi	r30, 0x63	; 99
    3712:	f6 4c       	sbci	r31, 0xC6	; 198
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	80 83       	st	Z, r24
    371a:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    371c:	1f 5f       	subi	r17, 0xFF	; 255
    371e:	67 c2       	rjmp	.+1230   	; 0x3bee <ProcessInput+0xef0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3720:	6c ed       	ldi	r22, 0xDC	; 220
    3722:	78 e3       	ldi	r23, 0x38	; 56
    3724:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3728:	d3 01       	movw	r26, r6
    372a:	8c 91       	ld	r24, X
    372c:	84 37       	cpi	r24, 0x74	; 116
    372e:	61 f5       	brne	.+88     	; 0x3788 <ProcessInput+0xa8a>
    3730:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x8>
    3734:	83 fd       	sbrc	r24, 3
    3736:	43 c0       	rjmp	.+134    	; 0x37be <ProcessInput+0xac0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3738:	8b e1       	ldi	r24, 0x1B	; 27
    373a:	99 e7       	ldi	r25, 0x79	; 121
    373c:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3740:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3744:	8e e1       	ldi	r24, 0x1E	; 30
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    374c:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3758:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    375c:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3989+0x1a>
    3760:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3764:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0xc>
    3768:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0xd>
    376c:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x4>
    3770:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3774:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    3778:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    377c:	10 92 a1 39 	sts	0x39A1, r1	; 0x8039a1 <reactStr+0x84>
    3780:	10 92 a2 39 	sts	0x39A2, r1	; 0x8039a2 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3784:	13 e0       	ldi	r17, 0x03	; 3
    3786:	33 c2       	rjmp	.+1126   	; 0x3bee <ProcessInput+0xef0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    3788:	85 37       	cpi	r24, 0x75	; 117
    378a:	39 f4       	brne	.+14     	; 0x379a <ProcessInput+0xa9c>
    378c:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x8>
    3790:	84 fd       	sbrc	r24, 4
    3792:	15 c0       	rjmp	.+42     	; 0x37be <ProcessInput+0xac0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	99 e7       	ldi	r25, 0x79	; 121
    3798:	3b c2       	rjmp	.+1142   	; 0x3c10 <ProcessInput+0xf12>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    379a:	82 37       	cpi	r24, 0x72	; 114
    379c:	69 f4       	brne	.+26     	; 0x37b8 <ProcessInput+0xaba>
    379e:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0x8>
    37a2:	85 fd       	sbrc	r24, 5
    37a4:	0c c0       	rjmp	.+24     	; 0x37be <ProcessInput+0xac0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37a6:	86 ee       	ldi	r24, 0xE6	; 230
    37a8:	98 e7       	ldi	r25, 0x78	; 120
    37aa:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    37ae:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    37b2:	8b e1       	ldi	r24, 0x1B	; 27
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	78 cb       	rjmp	.-2320   	; 0x2ea8 <ProcessInput+0x1aa>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    37b8:	87 36       	cpi	r24, 0x67	; 103
    37ba:	09 f4       	brne	.+2      	; 0x37be <ProcessInput+0xac0>
    37bc:	e0 ca       	rjmp	.-2624   	; 0x2d7e <ProcessInput+0x80>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    37be:	00 91 fa 38 	lds	r16, 0x38FA	; 0x8038fa <actObj1.3989+0x1e>
    37c2:	10 91 fb 38 	lds	r17, 0x38FB	; 0x8038fb <actObj1.3989+0x1f>
    37c6:	01 30       	cpi	r16, 0x01	; 1
    37c8:	11 05       	cpc	r17, r1
    37ca:	09 f5       	brne	.+66     	; 0x380e <ProcessInput+0xb10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    37cc:	93 01       	movw	r18, r6
    37ce:	2e 5f       	subi	r18, 0xFE	; 254
    37d0:	3f 4f       	sbci	r19, 0xFF	; 255
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	61 e0       	ldi	r22, 0x01	; 1
    37d6:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x10>
    37da:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x11>
    37de:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
                                if (data[2] == '1') {
    37e2:	f3 01       	movw	r30, r6
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	81 33       	cpi	r24, 0x31	; 49
    37e8:	09 f0       	breq	.+2      	; 0x37ec <ProcessInput+0xaee>
    37ea:	13 cd       	rjmp	.-1498   	; 0x3212 <ProcessInput+0x514>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37ec:	85 e2       	ldi	r24, 0x25	; 37
    37ee:	95 e7       	ldi	r25, 0x75	; 117
    37f0:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    37f4:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    37f8:	8b e2       	ldi	r24, 0x2B	; 43
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3800:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3804:	00 93 9f 39 	sts	0x399F, r16	; 0x80399f <reactStr+0x82>
    3808:	10 93 a0 39 	sts	0x39A0, r17	; 0x8039a0 <reactStr+0x83>
    380c:	57 cb       	rjmp	.-2386   	; 0x2ebc <ProcessInput+0x1be>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    380e:	01 15       	cp	r16, r1
    3810:	11 05       	cpc	r17, r1
    3812:	09 f4       	brne	.+2      	; 0x3816 <ProcessInput+0xb18>
    3814:	58 c0       	rjmp	.+176    	; 0x38c6 <ProcessInput+0xbc8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3816:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x10>
    381a:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x11>
    381e:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3822:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3826:	00 93 5f 39 	sts	0x395F, r16	; 0x80395f <reactStr+0x42>
    382a:	10 93 60 39 	sts	0x3960, r17	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    382e:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3832:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3836:	89 e5       	ldi	r24, 0x59	; 89
    3838:	9a e7       	ldi	r25, 0x7A	; 122
    383a:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x4>
    383e:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3842:	82 e0       	ldi	r24, 0x02	; 2
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x44>
    384a:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x84>
    3856:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    385a:	2d ea       	ldi	r18, 0xAD	; 173
    385c:	38 e7       	ldi	r19, 0x78	; 120
    385e:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x6>
    3862:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    3866:	22 e1       	ldi	r18, 0x12	; 18
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x46>
    386e:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    3872:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x86>
    3876:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    387a:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3989+0x20>
    387e:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3989+0x21>
    3882:	40 97       	sbiw	r24, 0x10	; 16
    3884:	30 f0       	brcs	.+12     	; 0x3892 <ProcessInput+0xb94>
    3886:	8f e0       	ldi	r24, 0x0F	; 15
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	80 93 fc 38 	sts	0x38FC, r24	; 0x8038fc <actObj1.3989+0x20>
    388e:	90 93 fd 38 	sts	0x38FD, r25	; 0x8038fd <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3892:	2c e0       	ldi	r18, 0x0C	; 12
    3894:	39 e3       	ldi	r19, 0x39	; 57
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	60 91 fc 38 	lds	r22, 0x38FC	; 0x8038fc <actObj1.3989+0x20>
    389c:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3989+0x12>
    38a0:	90 91 ef 38 	lds	r25, 0x38EF	; 0x8038ef <actObj1.3989+0x13>
    38a4:	0e 94 4a 08 	call	0x1094	; 0x1094 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    38a8:	6c e0       	ldi	r22, 0x0C	; 12
    38aa:	79 e3       	ldi	r23, 0x39	; 57
    38ac:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3989+0x20>
    38b0:	0e 94 00 11 	call	0x2200	; 0x2200 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    38b4:	e0 91 fc 38 	lds	r30, 0x38FC	; 0x8038fc <actObj1.3989+0x20>
    38b8:	f0 91 fd 38 	lds	r31, 0x38FD	; 0x8038fd <actObj1.3989+0x21>
    38bc:	e4 5f       	subi	r30, 0xF4	; 244
    38be:	f6 4c       	sbci	r31, 0xC6	; 198
    38c0:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    38c2:	14 e0       	ldi	r17, 0x04	; 4
    38c4:	94 c1       	rjmp	.+808    	; 0x3bee <ProcessInput+0xef0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    38c6:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3989+0x7>
    38ca:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
    38ce:	88 23       	and	r24, r24
    38d0:	01 f1       	breq	.+64     	; 0x3912 <ProcessInput+0xc14>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    38d2:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3989+0x26>
    38d6:	90 91 03 39 	lds	r25, 0x3903	; 0x803903 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38da:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x18>
    38de:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x19>
    38e2:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    38e6:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    38ea:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    38ee:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    38f2:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    38f6:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    38fa:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3989+0x2a>
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3904:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3908:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0xa>
    390c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    3910:	d5 ca       	rjmp	.-2646   	; 0x2ebc <ProcessInput+0x1be>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3912:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x24>
    3916:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    391a:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x16>
    391e:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x17>
    3922:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3926:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    392a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    392e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3932:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3936:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    393a:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3989+0x29>
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3944:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    3948:	b9 ca       	rjmp	.-2702   	; 0x2ebc <ProcessInput+0x1be>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    394a:	d3 01       	movw	r26, r6
    394c:	8c 91       	ld	r24, X
    394e:	84 37       	cpi	r24, 0x74	; 116
    3950:	11 f0       	breq	.+4      	; 0x3956 <ProcessInput+0xc58>
    3952:	87 36       	cpi	r24, 0x67	; 103
    3954:	19 f4       	brne	.+6      	; 0x395c <ProcessInput+0xc5e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3956:	89 e3       	ldi	r24, 0x39	; 57
    3958:	99 e7       	ldi	r25, 0x79	; 121
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <ProcessInput+0xc62>
    395c:	8d e4       	ldi	r24, 0x4D	; 77
    395e:	99 e7       	ldi	r25, 0x79	; 121
    3960:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3964:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3968:	84 e1       	ldi	r24, 0x14	; 20
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	9d ca       	rjmp	.-2758   	; 0x2ea8 <ProcessInput+0x1aa>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    396e:	81 36       	cpi	r24, 0x61	; 97
    3970:	09 f0       	breq	.+2      	; 0x3974 <ProcessInput+0xc76>
    3972:	4f cc       	rjmp	.-1890   	; 0x3212 <ProcessInput+0x514>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3974:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialPassed>
    3978:	82 30       	cpi	r24, 0x02	; 2
    397a:	08 f4       	brcc	.+2      	; 0x397e <ProcessInput+0xc80>
    397c:	c7 c0       	rjmp	.+398    	; 0x3b0c <ProcessInput+0xe0e>
                if (data[1] > 0) {
    397e:	f3 01       	movw	r30, r6
    3980:	21 81       	ldd	r18, Z+1	; 0x01
    3982:	22 23       	and	r18, r18
    3984:	09 f4       	brne	.+2      	; 0x3988 <ProcessInput+0xc8a>
    3986:	af c0       	rjmp	.+350    	; 0x3ae6 <ProcessInput+0xde8>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3988:	ce 01       	movw	r24, r28
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	7c 01       	movw	r14, r24
    398e:	88 e0       	ldi	r24, 0x08	; 8
    3990:	d7 01       	movw	r26, r14
    3992:	1d 92       	st	X+, r1
    3994:	8a 95       	dec	r24
    3996:	e9 f7       	brne	.-6      	; 0x3992 <ProcessInput+0xc94>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3998:	20 53       	subi	r18, 0x30	; 48
    399a:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    399c:	32 81       	ldd	r19, Z+2	; 0x02
    399e:	31 53       	subi	r19, 0x31	; 49
    39a0:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    39a2:	83 81       	ldd	r24, Z+3	; 0x03
    39a4:	81 36       	cpi	r24, 0x61	; 97
    39a6:	11 f4       	brne	.+4      	; 0x39ac <ProcessInput+0xcae>
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	0c c0       	rjmp	.+24     	; 0x39c4 <ProcessInput+0xcc6>
                    else if (data[3] == 'e') data[3] = 0;
    39ac:	85 36       	cpi	r24, 0x65	; 101
    39ae:	19 f4       	brne	.+6      	; 0x39b6 <ProcessInput+0xcb8>
    39b0:	f3 01       	movw	r30, r6
    39b2:	13 82       	std	Z+3, r1	; 0x03
    39b4:	08 c0       	rjmp	.+16     	; 0x39c6 <ProcessInput+0xcc8>
                    else if (data[3] == 'f') data[3] = 3;
    39b6:	86 36       	cpi	r24, 0x66	; 102
    39b8:	19 f4       	brne	.+6      	; 0x39c0 <ProcessInput+0xcc2>
    39ba:	83 e0       	ldi	r24, 0x03	; 3
    39bc:	83 83       	std	Z+3, r24	; 0x03
    39be:	03 c0       	rjmp	.+6      	; 0x39c6 <ProcessInput+0xcc8>
                    else data[3] = 2;
    39c0:	82 e0       	ldi	r24, 0x02	; 2
    39c2:	f3 01       	movw	r30, r6
    39c4:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    39c6:	21 fd       	sbrc	r18, 1
    39c8:	04 c0       	rjmp	.+8      	; 0x39d2 <ProcessInput+0xcd4>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	dc 01       	movw	r26, r24
    39d0:	04 c0       	rjmp	.+8      	; 0x39da <ProcessInput+0xcdc>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	a0 e1       	ldi	r26, 0x10	; 16
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    39da:	20 ff       	sbrs	r18, 0
    39dc:	03 c0       	rjmp	.+6      	; 0x39e4 <ProcessInput+0xce6>
    39de:	9f 5f       	subi	r25, 0xFF	; 255
    39e0:	af 4f       	sbci	r26, 0xFF	; 255
    39e2:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    39e4:	f3 01       	movw	r30, r6
    39e6:	23 81       	ldd	r18, Z+3	; 0x03
    39e8:	21 fd       	sbrc	r18, 1
    39ea:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    39ec:	20 ff       	sbrs	r18, 0
    39ee:	03 c0       	rjmp	.+6      	; 0x39f6 <ProcessInput+0xcf8>
    39f0:	40 96       	adiw	r24, 0x10	; 16
    39f2:	a1 1d       	adc	r26, r1
    39f4:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    39f6:	31 ff       	sbrs	r19, 1
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <ProcessInput+0xd02>
    39fa:	90 5f       	subi	r25, 0xF0	; 240
    39fc:	af 4f       	sbci	r26, 0xFF	; 255
    39fe:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3a00:	30 ff       	sbrs	r19, 0
    3a02:	03 c0       	rjmp	.+6      	; 0x3a0a <ProcessInput+0xd0c>
    3a04:	01 96       	adiw	r24, 0x01	; 1
    3a06:	a1 1d       	adc	r26, r1
    3a08:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3a0a:	40 91 3f 38 	lds	r20, 0x383F	; 0x80383f <whoami>
    3a0e:	24 e0       	ldi	r18, 0x04	; 4
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	24 1b       	sub	r18, r20
    3a14:	31 09       	sbc	r19, r1
    3a16:	04 c0       	rjmp	.+8      	; 0x3a20 <ProcessInput+0xd22>
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	aa 1f       	adc	r26, r26
    3a1e:	bb 1f       	adc	r27, r27
    3a20:	2a 95       	dec	r18
    3a22:	d2 f7       	brpl	.-12     	; 0x3a18 <ProcessInput+0xd1a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a24:	28 ec       	ldi	r18, 0xC8	; 200
    3a26:	34 e7       	ldi	r19, 0x74	; 116
    3a28:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3a2c:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3a30:	20 e2       	ldi	r18, 0x20	; 32
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x42>
    3a38:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3a3c:	21 e0       	ldi	r18, 0x01	; 1
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x82>
    3a44:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a48:	4d e9       	ldi	r20, 0x9D	; 157
    3a4a:	54 e7       	ldi	r21, 0x74	; 116
    3a4c:	40 93 21 39 	sts	0x3921, r20	; 0x803921 <reactStr+0x4>
    3a50:	50 93 22 39 	sts	0x3922, r21	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3a54:	42 e0       	ldi	r20, 0x02	; 2
    3a56:	50 e0       	ldi	r21, 0x00	; 0
    3a58:	40 93 61 39 	sts	0x3961, r20	; 0x803961 <reactStr+0x44>
    3a5c:	50 93 62 39 	sts	0x3962, r21	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    3a60:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x84>
    3a64:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a68:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3a6a:	f7 01       	movw	r30, r14
    3a6c:	e0 0f       	add	r30, r16
    3a6e:	f1 1d       	adc	r31, r1
    3a70:	28 2f       	mov	r18, r24
    3a72:	2f 70       	andi	r18, 0x0F	; 15
    3a74:	20 83       	st	Z, r18
                        answer /= 16;
    3a76:	44 e0       	ldi	r20, 0x04	; 4
    3a78:	b6 95       	lsr	r27
    3a7a:	a7 95       	ror	r26
    3a7c:	97 95       	ror	r25
    3a7e:	87 95       	ror	r24
    3a80:	4a 95       	dec	r20
    3a82:	d1 f7       	brne	.-12     	; 0x3a78 <ProcessInput+0xd7a>
                        if (answer == 0) break;
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	a1 05       	cpc	r26, r1
    3a88:	b1 05       	cpc	r27, r1
    3a8a:	49 f4       	brne	.+18     	; 0x3a9e <ProcessInput+0xda0>
    3a8c:	2d e1       	ldi	r18, 0x1D	; 29
    3a8e:	c2 2e       	mov	r12, r18
    3a90:	29 e3       	ldi	r18, 0x39	; 57
    3a92:	d2 2e       	mov	r13, r18
    3a94:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3a96:	aa 24       	eor	r10, r10
    3a98:	a3 94       	inc	r10
    3a9a:	b1 2c       	mov	r11, r1
    3a9c:	02 c0       	rjmp	.+4      	; 0x3aa2 <ProcessInput+0xda4>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3a9e:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3aa0:	e4 cf       	rjmp	.-56     	; 0x3a6a <ProcessInput+0xd6c>
    3aa2:	b2 e0       	ldi	r27, 0x02	; 2
    3aa4:	cb 0e       	add	r12, r27
    3aa6:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3aa8:	08 30       	cpi	r16, 0x08	; 8
    3aaa:	08 f0       	brcs	.+2      	; 0x3aae <ProcessInput+0xdb0>
    3aac:	9e c0       	rjmp	.+316    	; 0x3bea <ProcessInput+0xeec>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3aae:	1f 5f       	subi	r17, 0xFF	; 255
    3ab0:	f7 01       	movw	r30, r14
    3ab2:	e0 0f       	add	r30, r16
    3ab4:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ab6:	80 81       	ld	r24, Z
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	83 57       	subi	r24, 0x73	; 115
    3abc:	9b 48       	sbci	r25, 0x8B	; 139
    3abe:	d6 01       	movw	r26, r12
    3ac0:	14 96       	adiw	r26, 0x04	; 4
    3ac2:	8d 93       	st	X+, r24
    3ac4:	9c 93       	st	X, r25
    3ac6:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3ac8:	f6 01       	movw	r30, r12
    3aca:	ec 5b       	subi	r30, 0xBC	; 188
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	a0 82       	st	Z, r10
    3ad0:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3ad2:	e0 5c       	subi	r30, 0xC0	; 192
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	a0 82       	st	Z, r10
    3ad8:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3ada:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0xa>
    3ade:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3ae2:	0f 5f       	subi	r16, 0xFF	; 255
    3ae4:	de cf       	rjmp	.-68     	; 0x3aa2 <ProcessInput+0xda4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ae6:	88 ee       	ldi	r24, 0xE8	; 232
    3ae8:	94 e7       	ldi	r25, 0x74	; 116
    3aea:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3aee:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3af2:	8d e3       	ldi	r24, 0x3D	; 61
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3afa:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3b06:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
    3b0a:	6e c0       	rjmp	.+220    	; 0x3be8 <ProcessInput+0xeea>
    3b0c:	e0 91 31 38 	lds	r30, 0x3831	; 0x803831 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	ee 0f       	add	r30, r30
    3b14:	ff 1f       	adc	r31, r31
    3b16:	e1 52       	subi	r30, 0x21	; 33
    3b18:	f6 4c       	sbci	r31, 0xC6	; 198
    3b1a:	6c ed       	ldi	r22, 0xDC	; 220
    3b1c:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3b1e:	81 30       	cpi	r24, 0x01	; 1
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <ProcessInput+0xe26>
    3b22:	46 c0       	rjmp	.+140    	; 0x3bb0 <ProcessInput+0xeb2>
                PopulateObject(route[currDepth+1], &actObj1);
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3b2c:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3989+0x7>
    3b30:	0e 94 15 0a 	call	0x142a	; 0x142a <CheckState>
    3b34:	88 23       	and	r24, r24
    3b36:	01 f1       	breq	.+64     	; 0x3b78 <ProcessInput+0xe7a>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3b38:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3989+0x26>
    3b3c:	90 91 03 39 	lds	r25, 0x3903	; 0x803903 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b40:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x18>
    3b44:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x19>
    3b48:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3b4c:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3b50:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3b54:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3b58:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3b5c:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3b60:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3989+0x2a>
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3b6a:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3b6e:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0xa>
    3b72:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
    3b76:	38 c0       	rjmp	.+112    	; 0x3be8 <ProcessInput+0xeea>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3b78:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x24>
    3b7c:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b80:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x16>
    3b84:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x17>
    3b88:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x2>
    3b8c:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3b90:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3b94:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3b98:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x82>
    3b9c:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3ba0:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3989+0x29>
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <effect>
    3baa:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <effect+0x1>
    3bae:	1c c0       	rjmp	.+56     	; 0x3be8 <ProcessInput+0xeea>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3bb0:	80 81       	ld	r24, Z
    3bb2:	91 81       	ldd	r25, Z+1	; 0x01
    3bb4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bb8:	80 e6       	ldi	r24, 0x60	; 96
    3bba:	98 e7       	ldi	r25, 0x78	; 120
    3bbc:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3bc0:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3bc4:	8d e4       	ldi	r24, 0x4D	; 77
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3bcc:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3bd8:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3bdc:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <getClock>
    3be0:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <PunishmentTime>
    3be4:	90 93 0a 39 	sts	0x390A, r25	; 0x80390a <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3be8:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3bea:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3bee:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput>
    3bf2:	88 23       	and	r24, r24
    3bf4:	19 f0       	breq	.+6      	; 0x3bfc <ProcessInput+0xefe>
    3bf6:	10 93 1c 39 	sts	0x391C, r17	; 0x80391c <responseList>
    3bfa:	8b c0       	rjmp	.+278    	; 0x3d12 <ProcessInput+0x1014>
    3bfc:	81 2f       	mov	r24, r17
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <ProcessInput+0xf04>

    } else {

        responseList = SetStandardResponse(1);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	0e 94 6e 11 	call	0x22dc	; 0x22dc <SetStandardResponse>
    3c06:	80 93 1c 39 	sts	0x391C, r24	; 0x80391c <responseList>
    3c0a:	83 c0       	rjmp	.+262    	; 0x3d12 <ProcessInput+0x1014>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c0c:	81 ed       	ldi	r24, 0xD1	; 209
    3c0e:	99 e7       	ldi	r25, 0x79	; 121
    3c10:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3c14:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3c18:	8a e1       	ldi	r24, 0x1A	; 26
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	45 c9       	rjmp	.-3446   	; 0x2ea8 <ProcessInput+0x1aa>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3c1e:	f2 e0       	ldi	r31, 0x02	; 2
    3c20:	ff 12       	cpse	r15, r31
    3c22:	ad c8       	rjmp	.-3750   	; 0x2d7e <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3c24:	f3 01       	movw	r30, r6
    3c26:	61 81       	ldd	r22, Z+1	; 0x01
    3c28:	0e 94 63 12 	call	0x24c6	; 0x24c6 <CheckLetter>
    3c2c:	88 23       	and	r24, r24
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <ProcessInput+0xf34>
    3c30:	58 c0       	rjmp	.+176    	; 0x3ce2 <ProcessInput+0xfe4>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c32:	00 e0       	ldi	r16, 0x00	; 0
    3c34:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3c36:	00 0f       	add	r16, r16
    3c38:	11 1f       	adc	r17, r17
    3c3a:	00 5c       	subi	r16, 0xC0	; 192
    3c3c:	17 4c       	sbci	r17, 0xC7	; 199
    3c3e:	6c ed       	ldi	r22, 0xDC	; 220
    3c40:	78 e3       	ldi	r23, 0x38	; 56
    3c42:	d8 01       	movw	r26, r16
    3c44:	8d 91       	ld	r24, X+
    3c46:	9c 91       	ld	r25, X
    3c48:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c4c:	86 e9       	ldi	r24, 0x96	; 150
    3c4e:	97 e7       	ldi	r25, 0x77	; 119
    3c50:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3c54:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3c58:	80 e1       	ldi	r24, 0x10	; 16
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x42>
    3c60:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x43>
    reactStr[2][number]=type;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x82>
    3c6c:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3c70:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3989+0x1a>
    3c74:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c78:	40 91 e8 38 	lds	r20, 0x38E8	; 0x8038e8 <actObj1.3989+0xc>
    3c7c:	50 91 e9 38 	lds	r21, 0x38E9	; 0x8038e9 <actObj1.3989+0xd>
    3c80:	40 93 21 39 	sts	0x3921, r20	; 0x803921 <reactStr+0x4>
    3c84:	50 93 22 39 	sts	0x3922, r21	; 0x803922 <reactStr+0x5>
    reactStr[1][number]=length;
    3c88:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x44>
    3c8c:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x45>
    reactStr[2][number]=type;
    3c90:	10 92 a1 39 	sts	0x39A1, r1	; 0x8039a1 <reactStr+0x84>
    3c94:	10 92 a2 39 	sts	0x39A2, r1	; 0x8039a2 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c98:	29 e5       	ldi	r18, 0x59	; 89
    3c9a:	3a e7       	ldi	r19, 0x7A	; 122
    3c9c:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x6>
    3ca0:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x7>
    reactStr[1][number]=length;
    3ca4:	22 e0       	ldi	r18, 0x02	; 2
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x46>
    3cac:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x47>
    reactStr[2][number]=type;
    3cb0:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x86>
    3cb4:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cb8:	29 e5       	ldi	r18, 0x59	; 89
    3cba:	37 e7       	ldi	r19, 0x77	; 119
    3cbc:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x8>
    3cc0:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x9>
    reactStr[1][number]=length;
    3cc4:	2d e3       	ldi	r18, 0x3D	; 61
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	20 93 65 39 	sts	0x3965, r18	; 0x803965 <reactStr+0x48>
    3ccc:	30 93 66 39 	sts	0x3966, r19	; 0x803966 <reactStr+0x49>
    reactStr[2][number]=type;
    3cd0:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x88>
    3cd4:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3cd8:	f8 01       	movw	r30, r16
    3cda:	10 82       	st	Z, r1
    3cdc:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3cde:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3ce0:	86 cf       	rjmp	.-244    	; 0x3bee <ProcessInput+0xef0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3ce2:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <inventory+0x2>
    3ce6:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inventory+0x3>
    3cea:	00 97       	sbiw	r24, 0x00	; 0
    3cec:	49 f0       	breq	.+18     	; 0x3d00 <ProcessInput+0x1002>
                        if (CheckLetter(inventory[x], data[1])) {
    3cee:	f3 01       	movw	r30, r6
    3cf0:	61 81       	ldd	r22, Z+1	; 0x01
    3cf2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <CheckLetter>
    3cf6:	88 23       	and	r24, r24
    3cf8:	19 f0       	breq	.+6      	; 0x3d00 <ProcessInput+0x1002>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3cfa:	01 e0       	ldi	r16, 0x01	; 1
    3cfc:	10 e0       	ldi	r17, 0x00	; 0
    3cfe:	9b cf       	rjmp	.-202    	; 0x3c36 <ProcessInput+0xf38>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d00:	81 e6       	ldi	r24, 0x61	; 97
    3d02:	99 e7       	ldi	r25, 0x79	; 121
    3d04:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x2>
    3d08:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x3>
    reactStr[1][number]=length;
    3d0c:	81 e2       	ldi	r24, 0x21	; 33
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	cb c8       	rjmp	.-3690   	; 0x2ea8 <ProcessInput+0x1aa>
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3d12:	f3 01       	movw	r30, r6
    3d14:	10 82       	st	Z, r1
    serRxDone = 0;
    3d16:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <serRxDone>
    RXCNT = 0;    
    3d1a:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	28 96       	adiw	r28, 0x08	; 8
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	9f 90       	pop	r9
    3d3a:	8f 90       	pop	r8
    3d3c:	7f 90       	pop	r7
    3d3e:	6f 90       	pop	r6
    3d40:	08 95       	ret

00003d42 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3d42:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3d44:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <PunishmentTime>
    3d48:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <PunishmentTime+0x1>
    3d4c:	89 2b       	or	r24, r25
    3d4e:	09 f1       	breq	.+66     	; 0x3d92 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3d50:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <getClock>
        if (PunishmentCount < PunishmentTime)
    3d54:	20 91 09 39 	lds	r18, 0x3909	; 0x803909 <PunishmentTime>
    3d58:	30 91 0a 39 	lds	r19, 0x390A	; 0x80390a <PunishmentTime+0x1>
    3d5c:	82 17       	cp	r24, r18
    3d5e:	93 07       	cpc	r25, r19
    3d60:	08 f4       	brcc	.+2      	; 0x3d64 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3d62:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3d64:	ac 01       	movw	r20, r24
    3d66:	42 1b       	sub	r20, r18
    3d68:	53 0b       	sbc	r21, r19
    3d6a:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3d6c:	4b 30       	cpi	r20, 0x0B	; 11
    3d6e:	51 05       	cpc	r21, r1
    3d70:	30 f0       	brcs	.+12     	; 0x3d7e <TextAdventure+0x3c>
            PunishmentTime = 0;
    3d72:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <PunishmentTime>
    3d76:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <PunishmentTime+0x1>
            PunishmentCount = 10;
    3d7a:	2a e0       	ldi	r18, 0x0A	; 10
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3d7e:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <gameNow>
    3d82:	81 11       	cpse	r24, r1
    3d84:	06 c0       	rjmp	.+12     	; 0x3d92 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3d86:	65 e0       	ldi	r22, 0x05	; 5
    3d88:	62 1b       	sub	r22, r18
    3d8a:	8a e0       	ldi	r24, 0x0A	; 10
    3d8c:	82 1b       	sub	r24, r18
    3d8e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3d92:	0e 94 48 13 	call	0x2690	; 0x2690 <CheckSend>
    3d96:	88 23       	and	r24, r24
    3d98:	11 f0       	breq	.+4      	; 0x3d9e <TextAdventure+0x5c>
    3d9a:	c1 e0       	ldi	r28, 0x01	; 1
    3d9c:	18 c0       	rjmp	.+48     	; 0x3dce <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3d9e:	0e 94 9e 13 	call	0x273c	; 0x273c <CheckResponse>
    3da2:	c8 2f       	mov	r28, r24
    3da4:	81 11       	cpse	r24, r1
    3da6:	f9 cf       	rjmp	.-14     	; 0x3d9a <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3da8:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <PunishmentTime>
    3dac:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <PunishmentTime+0x1>
    3db0:	89 2b       	or	r24, r25
    3db2:	69 f4       	brne	.+26     	; 0x3dce <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3db4:	80 e7       	ldi	r24, 0x70	; 112
    3db6:	98 e3       	ldi	r25, 0x38	; 56
    3db8:	0e 94 de 13 	call	0x27bc	; 0x27bc <CheckInput>
    3dbc:	c8 2f       	mov	r28, r24
    3dbe:	81 11       	cpse	r24, r1
    3dc0:	05 c0       	rjmp	.+10     	; 0x3dcc <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3dc2:	80 e7       	ldi	r24, 0x70	; 112
    3dc4:	98 e3       	ldi	r25, 0x38	; 56
    3dc6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <ProcessInput>
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3dcc:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3dce:	8c 2f       	mov	r24, r28
    3dd0:	cf 91       	pop	r28
    3dd2:	08 95       	ret

00003dd4 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3dd4:	0e 94 c0 04 	call	0x980	; 0x980 <Setup>
    LoadGameState();
    3dd8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <LoadGameState>
    gameState[0]|=1;
    3ddc:	80 91 63 3a 	lds	r24, 0x3A63	; 0x803a63 <gameState>
    3de0:	81 60       	ori	r24, 0x01	; 1
    3de2:	80 93 63 3a 	sts	0x3A63, r24	; 0x803a63 <gameState>
    SelfTest();
    3de6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SelfTest>
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3dea:	cf e1       	ldi	r28, 0x1F	; 31
    3dec:	d0 e0       	ldi	r29, 0x00	; 0
    LoadGameState();
    gameState[0]|=1;
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3dee:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GenerateAudio>
    3df2:	88 23       	and	r24, r24
    3df4:	e1 f3       	breq	.-8      	; 0x3dee <main+0x1a>
            lastButtonState = buttonState;
    3df6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3dfa:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3dfe:	0e 94 bc 08 	call	0x1178	; 0x1178 <CheckButtons>
    3e02:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3e06:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3e0a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3e0e:	82 31       	cpi	r24, 0x12	; 18
    3e10:	19 f4       	brne	.+6      	; 0x3e18 <main+0x44>
    3e12:	0e 94 ad 08 	call	0x115a	; 0x115a <SelectAuIn>
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <main+0x48>
    3e18:	0e 94 9e 08 	call	0x113c	; 0x113c <SelectTSens>

            GenerateBlinks();
    3e1c:	0e 94 39 0b 	call	0x1672	; 0x1672 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3e20:	90 df       	rcall	.-224    	; 0x3d42 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3e22:	0e 94 c3 03 	call	0x786	; 0x786 <MagnetMaze>
            LanyardCode();
    3e26:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LanyardCode>
            BastetDictates();
    3e2a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <BastetDictates>
            MakeFriends();
    3e2e:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    3e32:	0e 94 6d 09 	call	0x12da	; 0x12da <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3e36:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <adcPhot>
    3e3a:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    3e3e:	0a 97       	sbiw	r24, 0x0a	; 10
    3e40:	18 f4       	brcc	.+6      	; 0x3e48 <main+0x74>
    3e42:	84 e7       	ldi	r24, 0x74	; 116
    3e44:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3e48:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <adcPhot>
    3e4c:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    3e50:	85 36       	cpi	r24, 0x65	; 101
    3e52:	91 05       	cpc	r25, r1
    3e54:	18 f0       	brcs	.+6      	; 0x3e5c <main+0x88>
    3e56:	84 ef       	ldi	r24, 0xF4	; 244
    3e58:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3e5c:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3e60:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e64:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e68:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e6c:	46 e0       	ldi	r20, 0x06	; 6
    3e6e:	36 95       	lsr	r19
    3e70:	27 95       	ror	r18
    3e72:	4a 95       	dec	r20
    3e74:	e1 f7       	brne	.-8      	; 0x3e6e <main+0x9a>
    3e76:	82 1b       	sub	r24, r18
    3e78:	93 0b       	sbc	r25, r19
    3e7a:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e7e:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3e82:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e86:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e8a:	93 95       	inc	r25
    3e8c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3e90:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3e94:	20 91 bf 3a 	lds	r18, 0x3ABF	; 0x803abf <adcPhot>
    3e98:	30 91 c0 3a 	lds	r19, 0x3AC0	; 0x803ac0 <adcPhot+0x1>
    3e9c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3ea0:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3ea4:	22 0f       	add	r18, r18
    3ea6:	23 2f       	mov	r18, r19
    3ea8:	22 1f       	adc	r18, r18
    3eaa:	33 0b       	sbc	r19, r19
    3eac:	31 95       	neg	r19
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e2 1b       	sub	r30, r18
    3eb2:	f3 0b       	sbc	r31, r19
    3eb4:	e8 5c       	subi	r30, 0xC8	; 200
    3eb6:	f0 44       	sbci	r31, 0x40	; 64
    3eb8:	20 81       	ld	r18, Z
    3eba:	82 1b       	sub	r24, r18
    3ebc:	91 09       	sbc	r25, r1
    3ebe:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3ec2:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3ec6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3eca:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3ece:	66 e0       	ldi	r22, 0x06	; 6
    3ed0:	96 95       	lsr	r25
    3ed2:	87 95       	ror	r24
    3ed4:	6a 95       	dec	r22
    3ed6:	e1 f7       	brne	.-8      	; 0x3ed0 <main+0xfc>
    3ed8:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3edc:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <HotSummer>
    3ee0:	86 cf       	rjmp	.-244    	; 0x3dee <main+0x1a>

00003ee2 <__tablejump2__>:
    3ee2:	ee 0f       	add	r30, r30
    3ee4:	ff 1f       	adc	r31, r31
    3ee6:	05 90       	lpm	r0, Z+
    3ee8:	f4 91       	lpm	r31, Z
    3eea:	e0 2d       	mov	r30, r0
    3eec:	09 94       	ijmp

00003eee <_exit>:
    3eee:	f8 94       	cli

00003ef0 <__stop_program>:
    3ef0:	ff cf       	rjmp	.-2      	; 0x3ef0 <__stop_program>
