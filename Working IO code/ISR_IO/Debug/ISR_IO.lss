
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00803800  00003ef0  00003fa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e40  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0000be40  00003e40  00003ef4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e5  00803836  00803836  00003fda  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003fda  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000340  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006e97  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028dc  00000000  00000000  0000b223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003d93  00000000  00000000  0000daff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000910  00000000  00000000  00011894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ac7  00000000  00000000  000121a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d0d  00000000  00000000  00013c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  00017978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
       2:	00 00       	nop
       4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
       6:	00 00       	nop
       8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
       a:	00 00       	nop
       c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
       e:	00 00       	nop
      10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
      12:	00 00       	nop
      14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
      16:	00 00       	nop
      18:	92 c7       	rjmp	.+3876   	; 0xf3e <__vector_6>
      1a:	00 00       	nop
      1c:	e4 c7       	rjmp	.+4040   	; 0xfe6 <__vector_7>
      1e:	00 00       	nop
      20:	cc c5       	rjmp	.+2968   	; 0xbba <__vector_8>
      22:	00 00       	nop
      24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
      26:	00 00       	nop
      28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
      2a:	00 00       	nop
      2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
      2e:	00 00       	nop
      30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c6       	rjmp	.+3110   	; 0xc5c <__vector_13>
      36:	00 00       	nop
      38:	44 c6       	rjmp	.+3208   	; 0xcc2 <__vector_14>
      3a:	00 00       	nop
      3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
      3e:	00 00       	nop
      40:	4c c0       	rjmp	.+152    	; 0xda <__bad_interrupt>
      42:	00 00       	nop
      44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
      46:	00 00       	nop
      48:	48 c0       	rjmp	.+144    	; 0xda <__bad_interrupt>
      4a:	00 00       	nop
      4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c7       	rjmp	.+3588   	; 0xe56 <__vector_20>
      52:	00 00       	nop
      54:	42 c0       	rjmp	.+132    	; 0xda <__bad_interrupt>
      56:	00 00       	nop
      58:	2a c7       	rjmp	.+3668   	; 0xeae <__vector_22>
      5a:	00 00       	nop
      5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
      5e:	00 00       	nop
      60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
      62:	00 00       	nop
      64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
      66:	00 00       	nop
      68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7d c6       	rjmp	.+3322   	; 0xd68 <__vector_27>
      6e:	00 00       	nop
      70:	d6 c6       	rjmp	.+3500   	; 0xe1e <__vector_28>
      72:	00 00       	nop
      74:	32 c0       	rjmp	.+100    	; 0xda <__bad_interrupt>
      76:	00 00       	nop
      78:	30 c0       	rjmp	.+96     	; 0xda <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 0b       	sbc	r26, r20
      7e:	bd 0b       	sbc	r27, r29
      80:	cf 0b       	sbc	r28, r31
      82:	8a 0c       	add	r8, r10
      84:	8a 0c       	add	r8, r10
      86:	de 0b       	sbc	r29, r30
      88:	eb 0b       	sbc	r30, r27
      8a:	29 0c       	add	r2, r9
      8c:	50 0c       	add	r5, r0
      8e:	8a 0c       	add	r8, r10
      90:	8a 0c       	add	r8, r10
      92:	8a 0c       	add	r8, r10
      94:	8a 0c       	add	r8, r10
      96:	8a 0c       	add	r8, r10
      98:	8a 0c       	add	r8, r10
      9a:	8a 0c       	add	r8, r10
      9c:	a4 0b       	sbc	r26, r20
      9e:	bd 0b       	sbc	r27, r29

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	cd bf       	out	0x3d, r28	; 61
      a8:	df e3       	ldi	r29, 0x3F	; 63
      aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
      ac:	18 e3       	ldi	r17, 0x38	; 56
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b8 e3       	ldi	r27, 0x38	; 56
      b2:	e0 ef       	ldi	r30, 0xF0	; 240
      b4:	fe e3       	ldi	r31, 0x3E	; 62
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 33       	cpi	r26, 0x36	; 54
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	2b e3       	ldi	r18, 0x3B	; 59
      c4:	a6 e3       	ldi	r26, 0x36	; 54
      c6:	b8 e3       	ldi	r27, 0x38	; 56
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	ab 31       	cpi	r26, 0x1B	; 27
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <main>
      d6:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <_exit>

000000da <__bad_interrupt>:
      da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      dc:	28 ed       	ldi	r18, 0xD8	; 216
      de:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      e0:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      e2:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	42 17       	cp	r20, r18
      ea:	53 07       	cpc	r21, r19
      ec:	4c f0       	brlt	.+18     	; 0x100 <chkVolt250+0x24>
      ee:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
      f2:	50 e0       	ldi	r21, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	6e 5e       	subi	r22, 0xEE	; 238
      f8:	7f 4f       	sbci	r23, 0xFF	; 255
      fa:	64 17       	cp	r22, r20
      fc:	75 07       	cpc	r23, r21
      fe:	2c f4       	brge	.+10     	; 0x10a <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
     100:	81 50       	subi	r24, 0x01	; 1
     102:	29 51       	subi	r18, 0x19	; 25
     104:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
     106:	81 11       	cpse	r24, r1
     108:	ec cf       	rjmp	.-40     	; 0xe2 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
     10a:	08 95       	ret

0000010c <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
     110:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     114:	8f 5f       	subi	r24, 0xFF	; 255
     116:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <chkTmr.3794>
     11a:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     11c:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     11e:	8c 2f       	mov	r24, r28
     120:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
     124:	81 11       	cpse	r24, r1
     126:	01 c0       	rjmp	.+2      	; 0x12a <MakeFriends+0x1e>
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     12c:	c8 36       	cpi	r28, 0x68	; 104
     12e:	b9 f7       	brne	.-18     	; 0x11e <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     130:	dd 23       	and	r29, r29
     132:	19 f0       	breq	.+6      	; 0x13a <MakeFriends+0x2e>
     134:	8c e7       	ldi	r24, 0x7C	; 124
     136:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     13a:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3792>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	20 f0       	brcs	.+8      	; 0x14a <MakeFriends+0x3e>
        gameNow = FRIENDS; 
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <gameNow>
     148:	0d c0       	rjmp	.+26     	; 0x164 <MakeFriends+0x58>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     14a:	81 11       	cpse	r24, r1
     14c:	0b c0       	rjmp	.+22     	; 0x164 <MakeFriends+0x58>
     14e:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <gameNow>
     152:	94 30       	cpi	r25, 0x04	; 4
     154:	61 f4       	brne	.+24     	; 0x16e <MakeFriends+0x62>
        gameNow = TEXT; 
     156:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     15a:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     15e:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
     162:	05 c0       	rjmp	.+10     	; 0x16e <MakeFriends+0x62>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     164:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <detHdPh>
     168:	91 11       	cpse	r25, r1
     16a:	f1 cf       	rjmp	.-30     	; 0x14e <MakeFriends+0x42>
     16c:	18 c0       	rjmp	.+48     	; 0x19e <MakeFriends+0x92>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     16e:	81 11       	cpse	r24, r1
     170:	16 c0       	rjmp	.+44     	; 0x19e <MakeFriends+0x92>
     172:	90 91 c8 3a 	lds	r25, 0x3AC8	; 0x803ac8 <detHdPh>
     176:	91 11       	cpse	r25, r1
     178:	12 c0       	rjmp	.+36     	; 0x19e <MakeFriends+0x92>
        setDAC[0] = whoami * 51;
     17a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     17e:	93 e3       	ldi	r25, 0x33	; 51
     180:	89 9f       	mul	r24, r25
     182:	80 2d       	mov	r24, r0
     184:	11 24       	eor	r1, r1
     186:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	98 e3       	ldi	r25, 0x38	; 56
     18e:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     192:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <MakeFriends+0xa4>
    } else {
        if (progress & NEXT){
     19e:	98 2f       	mov	r25, r24
     1a0:	90 7f       	andi	r25, 0xF0	; 240
     1a2:	31 f0       	breq	.+12     	; 0x1b0 <MakeFriends+0xa4>
            progress++;
            progress&=0x0f;
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3792>
            chkTmr = 0;
     1ac:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <chkTmr.3794>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     1b0:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
     1b4:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	b9 01       	movw	r22, r18
     1be:	6a 50       	subi	r22, 0x0A	; 10
     1c0:	71 09       	sbc	r23, r1
     1c2:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3792>
     1c6:	46 17       	cp	r20, r22
     1c8:	57 07       	cpc	r21, r23
     1ca:	5c f0       	brlt	.+22     	; 0x1e2 <MakeFriends+0xd6>
     1cc:	40 91 cb 3a 	lds	r20, 0x3ACB	; 0x803acb <auIn>
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	26 5f       	subi	r18, 0xF6	; 246
     1d4:	3f 4f       	sbci	r19, 0xFF	; 255
     1d6:	24 17       	cp	r18, r20
     1d8:	35 07       	cpc	r19, r21
     1da:	1c f0       	brlt	.+6      	; 0x1e2 <MakeFriends+0xd6>
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	08 f4       	brcc	.+2      	; 0x1e2 <MakeFriends+0xd6>
     1e0:	43 c0       	rjmp	.+134    	; 0x268 <MakeFriends+0x15c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     1e2:	81 11       	cpse	r24, r1
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <MakeFriends+0xf0>
     1e6:	80 91 c8 3a 	lds	r24, 0x3AC8	; 0x803ac8 <detHdPh>
     1ea:	81 11       	cpse	r24, r1
     1ec:	95 c0       	rjmp	.+298    	; 0x318 <MakeFriends+0x20c>
            if (chkTmr >= 8) {
     1ee:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     1f2:	88 30       	cpi	r24, 0x08	; 8
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <MakeFriends+0xec>
     1f6:	90 c0       	rjmp	.+288    	; 0x318 <MakeFriends+0x20c>
                progress |= NEXT;
     1f8:	80 ef       	ldi	r24, 0xF0	; 240
     1fa:	63 c0       	rjmp	.+198    	; 0x2c2 <MakeFriends+0x1b6>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1fc:	81 30       	cpi	r24, 0x01	; 1
     1fe:	41 f5       	brne	.+80     	; 0x250 <MakeFriends+0x144>
            jackIn = chkVolt250();
     200:	6d df       	rcall	.-294    	; 0xdc <chkVolt250>
     202:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3795>
            if (jackIn) {
     206:	88 23       	and	r24, r24
     208:	79 f1       	breq	.+94     	; 0x268 <MakeFriends+0x15c>
                if (chkTmr >= SHORT_WAIT){
     20a:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <chkTmr.3794>
     20e:	98 30       	cpi	r25, 0x08	; 8
     210:	08 f4       	brcc	.+2      	; 0x214 <MakeFriends+0x108>
     212:	82 c0       	rjmp	.+260    	; 0x318 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     214:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <whoami>
     218:	91 30       	cpi	r25, 0x01	; 1
     21a:	11 f4       	brne	.+4      	; 0x220 <MakeFriends+0x114>
     21c:	83 50       	subi	r24, 0x03	; 3
     21e:	14 c0       	rjmp	.+40     	; 0x248 <MakeFriends+0x13c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	31 f4       	brne	.+12     	; 0x230 <MakeFriends+0x124>
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	91 f0       	breq	.+36     	; 0x24c <MakeFriends+0x140>
     228:	85 50       	subi	r24, 0x05	; 5
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	e8 f4       	brcc	.+58     	; 0x268 <MakeFriends+0x15c>
     22e:	0e c0       	rjmp	.+28     	; 0x24c <MakeFriends+0x140>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     230:	93 30       	cpi	r25, 0x03	; 3
     232:	39 f4       	brne	.+14     	; 0x242 <MakeFriends+0x136>
     234:	9c ef       	ldi	r25, 0xFC	; 252
     236:	98 0f       	add	r25, r24
     238:	92 30       	cpi	r25, 0x02	; 2
     23a:	40 f0       	brcs	.+16     	; 0x24c <MakeFriends+0x140>
     23c:	87 30       	cpi	r24, 0x07	; 7
     23e:	a1 f4       	brne	.+40     	; 0x268 <MakeFriends+0x15c>
     240:	05 c0       	rjmp	.+10     	; 0x24c <MakeFriends+0x140>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     242:	94 30       	cpi	r25, 0x04	; 4
     244:	89 f4       	brne	.+34     	; 0x268 <MakeFriends+0x15c>
     246:	85 50       	subi	r24, 0x05	; 5
     248:	83 30       	cpi	r24, 0x03	; 3
     24a:	70 f4       	brcc	.+28     	; 0x268 <MakeFriends+0x15c>
                        progress |= NEXT;
     24c:	81 ef       	ldi	r24, 0xF1	; 241
     24e:	39 c0       	rjmp	.+114    	; 0x2c2 <MakeFriends+0x1b6>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     250:	82 30       	cpi	r24, 0x02	; 2
     252:	69 f0       	breq	.+26     	; 0x26e <MakeFriends+0x162>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     254:	83 30       	cpi	r24, 0x03	; 3
     256:	c1 f1       	breq	.+112    	; 0x2c8 <MakeFriends+0x1bc>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     258:	84 30       	cpi	r24, 0x04	; 4
     25a:	09 f0       	breq	.+2      	; 0x25e <MakeFriends+0x152>
     25c:	5d c0       	rjmp	.+186    	; 0x318 <MakeFriends+0x20c>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     25e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     262:	80 34       	cpi	r24, 0x40	; 64
     264:	08 f4       	brcc	.+2      	; 0x268 <MakeFriends+0x15c>
     266:	58 c0       	rjmp	.+176    	; 0x318 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     268:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <progress.3792>
     26c:	55 c0       	rjmp	.+170    	; 0x318 <MakeFriends+0x20c>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     26e:	87 e0       	ldi	r24, 0x07	; 7
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     276:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     27a:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     27e:	88 30       	cpi	r24, 0x08	; 8
     280:	38 f0       	brcs	.+14     	; 0x290 <MakeFriends+0x184>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     282:	2f ef       	ldi	r18, 0xFF	; 255
     284:	44 e6       	ldi	r20, 0x64	; 100
     286:	68 e0       	ldi	r22, 0x08	; 8
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	f4 d7       	rcall	.+4072   	; 0x1274 <floatAround>
     28c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     290:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     294:	8a 3f       	cpi	r24, 0xFA	; 250
     296:	08 f4       	brcc	.+2      	; 0x29a <MakeFriends+0x18e>
     298:	3f c0       	rjmp	.+126    	; 0x318 <MakeFriends+0x20c>
                candidate = jackIn-whoami;
     29a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     29e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <jackIn.3795>
     2a2:	98 1b       	sub	r25, r24
     2a4:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <__data_end>
                if (candidate > whoami) {
     2a8:	89 17       	cp	r24, r25
     2aa:	10 f4       	brcc	.+4      	; 0x2b0 <MakeFriends+0x1a4>
                    setDAC[0] = 249;
     2ac:	89 ef       	ldi	r24, 0xF9	; 249
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <MakeFriends+0x1ac>
                } else {
                    setDAC[0] = whoami * 51;
     2b0:	93 e3       	ldi	r25, 0x33	; 51
     2b2:	89 9f       	mul	r24, r25
     2b4:	80 2d       	mov	r24, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2bc:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3792>
     2c0:	80 6f       	ori	r24, 0xF0	; 240
     2c2:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3792>
     2c6:	28 c0       	rjmp	.+80     	; 0x318 <MakeFriends+0x20c>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2c8:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3794>
     2cc:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2ce:	20 f1       	brcs	.+72     	; 0x318 <MakeFriends+0x20c>
     2d0:	05 df       	rcall	.-502    	; 0xdc <chkVolt250>
     2d2:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3795>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2d6:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <__data_end>
     2da:	48 2f       	mov	r20, r24
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <whoami>
     2e2:	29 17       	cp	r18, r25
     2e4:	08 f4       	brcc	.+2      	; 0x2e8 <MakeFriends+0x1dc>
     2e6:	29 2f       	mov	r18, r25
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	2b 5f       	subi	r18, 0xFB	; 251
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	42 17       	cp	r20, r18
     2f0:	53 07       	cpc	r21, r19
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <MakeFriends+0x1ea>
     2f4:	b9 cf       	rjmp	.-142    	; 0x268 <MakeFriends+0x15c>
                    UpdateState(99+candidate);
     2f6:	83 e6       	ldi	r24, 0x63	; 99
     2f8:	89 0f       	add	r24, r25
     2fa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
                 
                    effect = 31;
     2fe:	8f e1       	ldi	r24, 0x1F	; 31
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     306:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    WingBar(candidate, whoami);
     30a:	60 91 43 38 	lds	r22, 0x3843	; 0x803843 <whoami>
     30e:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <__data_end>
     312:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <WingBar>
     316:	d2 cf       	rjmp	.-92     	; 0x2bc <MakeFriends+0x1b0>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     326:	e6 e2       	ldi	r30, 0x26	; 38
     328:	f4 e0       	ldi	r31, 0x04	; 4
     32a:	80 83       	st	Z, r24
     32c:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     330:	a1 e2       	ldi	r26, 0x21	; 33
     332:	b4 e0       	ldi	r27, 0x04	; 4
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	9c 93       	st	X, r25
     338:	90 83       	st	Z, r25
     33a:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     33e:	e0 e1       	ldi	r30, 0x10	; 16
     340:	f8 e0       	ldi	r31, 0x08	; 8
     342:	97 e0       	ldi	r25, 0x07	; 7
     344:	96 83       	std	Z+6, r25	; 0x06
     346:	98 e0       	ldi	r25, 0x08	; 8
     348:	94 83       	std	Z+4, r25	; 0x04
     34a:	83 83       	std	Z+3, r24	; 0x03
     34c:	8c 93       	st	X, r24
     34e:	85 81       	ldd	r24, Z+5	; 0x05
     350:	81 60       	ori	r24, 0x01	; 1
     352:	85 83       	std	Z+5, r24	; 0x05
     354:	85 81       	ldd	r24, Z+5	; 0x05
     356:	84 6c       	ori	r24, 0xC4	; 196
     358:	85 83       	std	Z+5, r24	; 0x05
     35a:	08 95       	ret

0000035c <I2C_recover>:
     35c:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     360:	88 60       	ori	r24, 0x08	; 8
     362:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     366:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     370:	99 e0       	ldi	r25, 0x09	; 9
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     37a:	30 e1       	ldi	r19, 0x10	; 16
     37c:	3a 95       	dec	r19
     37e:	f1 f7       	brne	.-4      	; 0x37c <I2C_recover+0x20>
     380:	00 c0       	rjmp	.+0      	; 0x382 <I2C_recover+0x26>
     382:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     386:	30 e1       	ldi	r19, 0x10	; 16
     388:	3a 95       	dec	r19
     38a:	f1 f7       	brne	.-4      	; 0x388 <I2C_recover+0x2c>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <I2C_recover+0x32>
     38e:	91 50       	subi	r25, 0x01	; 1
     390:	89 f7       	brne	.-30     	; 0x374 <I2C_recover+0x18>
     392:	28 e0       	ldi	r18, 0x08	; 8
     394:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     398:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3a2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a6:	91 60       	ori	r25, 0x01	; 1
     3a8:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ac:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b0:	94 6c       	ori	r25, 0xC4	; 196
     3b2:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b6:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ba:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3be:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3c2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3cc:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d0:	84 6c       	ori	r24, 0xC4	; 196
     3d2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d6:	08 95       	ret

000003d8 <I2C_start>:
     3d8:	28 2f       	mov	r18, r24
     3da:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3de:	90 6c       	ori	r25, 0xC0	; 192
     3e0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e8:	89 2f       	mov	r24, r25
     3ea:	84 70       	andi	r24, 0x04	; 4
     3ec:	92 fd       	sbrc	r25, 2
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <I2C_start+0x1e>
     3f0:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3f4:	08 95       	ret
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	08 95       	ret

000003fa <I2C_wait_ACK>:
     3fa:	8c e0       	ldi	r24, 0x0C	; 12
     3fc:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
     400:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     404:	87 fd       	sbrc	r24, 7
     406:	0a c0       	rjmp	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     408:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40c:	86 fd       	sbrc	r24, 6
     40e:	06 c0       	rjmp	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     410:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     414:	81 11       	cpse	r24, r1
     416:	f4 cf       	rjmp	.-24     	; 0x400 <__LOCK_REGION_LENGTH__>
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	08 95       	ret
     41c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	80 6c       	ori	r24, 0xC0	; 192
     422:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     426:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42a:	82 fd       	sbrc	r24, 2
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	83 fd       	sbrc	r24, 3
     434:	07 c0       	rjmp	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     436:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43a:	82 95       	swap	r24
     43c:	81 70       	andi	r24, 0x01	; 1
     43e:	08 95       	ret
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	08 95       	ret
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	08 95       	ret

00000448 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     448:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     44a:	8c e0       	ldi	r24, 0x0C	; 12
     44c:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     450:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     454:	89 2f       	mov	r24, r25
     456:	83 70       	andi	r24, 0x03	; 3
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	11 f0       	breq	.+4      	; 0x460 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     460:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     464:	97 fd       	sbrc	r25, 7
     466:	06 c0       	rjmp	.+12     	; 0x474 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     468:	90 91 69 3a 	lds	r25, 0x3A69	; 0x803a69 <timeout_I2C>
     46c:	91 11       	cpse	r25, r1
     46e:	f8 cf       	rjmp	.-16     	; 0x460 <I2C_read+0x18>
     470:	8f ef       	ldi	r24, 0xFF	; 255
     472:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     474:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     478:	90 6c       	ori	r25, 0xC0	; 192
     47a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     47e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     482:	92 fd       	sbrc	r25, 2
     484:	1e c0       	rjmp	.+60     	; 0x4c2 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     486:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     48a:	93 fd       	sbrc	r25, 3
     48c:	1d c0       	rjmp	.+58     	; 0x4c8 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     48e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     492:	89 2f       	mov	r24, r25
     494:	80 71       	andi	r24, 0x10	; 16
     496:	94 fd       	sbrc	r25, 4
     498:	16 c0       	rjmp	.+44     	; 0x4c6 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     49a:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     49e:	61 11       	cpse	r22, r1
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <I2C_read+0x5e>
     4a2:	9b 7f       	andi	r25, 0xFB	; 251
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4a6:	94 60       	ori	r25, 0x04	; 4
     4a8:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     4ac:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     4b0:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     4b2:	61 11       	cpse	r22, r1
     4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <I2C_read+0x80>
     4b6:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4ba:	92 60       	ori	r25, 0x02	; 2
     4bc:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4c0:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4c6:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     4c8:	08 95       	ret

000004ca <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     4ca:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4d2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d6:	93 70       	andi	r25, 0x03	; 3
     4d8:	92 30       	cpi	r25, 0x02	; 2
     4da:	b1 f4       	brne	.+44     	; 0x508 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4dc:	80 81       	ld	r24, Z
     4de:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4e2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e6:	86 fd       	sbrc	r24, 6
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4ea:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     4ee:	81 11       	cpse	r24, r1
     4f0:	f8 cf       	rjmp	.-16     	; 0x4e2 <I2C_write+0x18>
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4fa:	82 fd       	sbrc	r24, 2
     4fc:	07 c0       	rjmp	.+14     	; 0x50c <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4fe:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     502:	82 95       	swap	r24
     504:	81 70       	andi	r24, 0x01	; 1
     506:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     508:	88 e0       	ldi	r24, 0x08	; 8
     50a:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     50c:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     50e:	08 95       	ret

00000510 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     510:	e0 e1       	ldi	r30, 0x10	; 16
     512:	f8 e0       	ldi	r31, 0x08	; 8
     514:	84 81       	ldd	r24, Z+4	; 0x04
     516:	83 60       	ori	r24, 0x03	; 3
     518:	84 83       	std	Z+4, r24	; 0x04
     51a:	08 95       	ret

0000051c <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	6b 01       	movw	r12, r22
     52c:	f4 2e       	mov	r15, r20
     52e:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     530:	18 2f       	mov	r17, r24
     532:	11 0f       	add	r17, r17
     534:	81 2f       	mov	r24, r17
     536:	50 df       	rcall	.-352    	; 0x3d8 <I2C_start>
	if (status != 0) goto error;
     538:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     53a:	2b c0       	rjmp	.+86     	; 0x592 <I2C_read_bytes+0x76>
     53c:	5e df       	rcall	.-324    	; 0x3fa <I2C_wait_ACK>
	if (status == 1) {
     53e:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     540:	19 f4       	brne	.+6      	; 0x548 <I2C_read_bytes+0x2c>
     542:	e6 df       	rcall	.-52     	; 0x510 <I2C_stop>
		return 1;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	27 c0       	rjmp	.+78     	; 0x596 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     548:	81 11       	cpse	r24, r1
     54a:	23 c0       	rjmp	.+70     	; 0x592 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     54c:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     54e:	49 f0       	breq	.+18     	; 0x562 <I2C_read_bytes+0x46>
     550:	c6 01       	movw	r24, r12
     552:	bb df       	rcall	.-138    	; 0x4ca <I2C_write>
	    if (status != 0) goto error;
     554:	81 11       	cpse	r24, r1
     556:	1d c0       	rjmp	.+58     	; 0x592 <I2C_read_bytes+0x76>
        ++reg_ptr;
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	c8 1a       	sub	r12, r24
     55c:	d8 0a       	sbc	r13, r24
        --reg_len;
     55e:	fa 94       	dec	r15
     560:	f5 cf       	rjmp	.-22     	; 0x54c <I2C_read_bytes+0x30>
     562:	01 34       	cpi	r16, 0x41	; 65
     564:	08 f0       	brcs	.+2      	; 0x568 <I2C_read_bytes+0x4c>
     566:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     568:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     56a:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     56e:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     570:	40 f0       	brcs	.+16     	; 0x582 <I2C_read_bytes+0x66>
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	ce 01       	movw	r24, r28
     576:	68 df       	rcall	.-304    	; 0x448 <I2C_read>
		if (status != 0) goto error;
     578:	81 11       	cpse	r24, r1
     57a:	0b c0       	rjmp	.+22     	; 0x592 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     57c:	21 96       	adiw	r28, 0x01	; 1
     57e:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     580:	f6 cf       	rjmp	.-20     	; 0x56e <I2C_read_bytes+0x52>
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     586:	60 df       	rcall	.-320    	; 0x448 <I2C_read>
     588:	81 11       	cpse	r24, r1
	I2C_stop();
     58a:	03 c0       	rjmp	.+6      	; 0x592 <I2C_read_bytes+0x76>
     58c:	c1 df       	rcall	.-126    	; 0x510 <I2C_stop>
	return 0;
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	02 c0       	rjmp	.+4      	; 0x596 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     592:	e4 de       	rcall	.-568    	; 0x35c <I2C_recover>
     594:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     596:	df 91       	pop	r29
}
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	08 95       	ret

000005a6 <LanyardCode>:
     5a6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
uint16_t        lanyardLastActive = 0;


// Main game loop
uint8_t LanyardCode(){
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	89 f4       	brne	.+34     	; 0x5d0 <LanyardCode+0x2a>
     5ae:	6a e0       	ldi	r22, 0x0A	; 10
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <lanyardLastActive>
     5b6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <lanyardLastActive+0x1>
     5ba:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <idleTimeout>
     5be:	88 23       	and	r24, r24
     5c0:	39 f0       	breq	.+14     	; 0x5d0 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        gameNow = TEXT;
     5c2:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     5c6:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     5ca:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
        return 0;
     5ce:	92 c0       	rjmp	.+292    	; 0x6f4 <LanyardCode+0x14e>
    }

    if (CheckState(LANYARD_COMPLETED))
     5d0:	8b e7       	ldi	r24, 0x7B	; 123
     5d2:	2a d7       	rcall	.+3668   	; 0x1428 <CheckState>
     5d4:	81 11       	cpse	r24, r1
     5d6:	8e c0       	rjmp	.+284    	; 0x6f4 <LanyardCode+0x14e>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5d8:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     5dc:	88 23       	and	r24, r24
     5de:	19 f0       	breq	.+6      	; 0x5e6 <LanyardCode+0x40>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <LanyardCode+0x40>
     5e4:	87 c0       	rjmp	.+270    	; 0x6f4 <LanyardCode+0x14e>
        return 0;

    if (buttonState == 0xff)
     5e6:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <LanyardCode+0x4a>
     5ee:	82 c0       	rjmp	.+260    	; 0x6f4 <LanyardCode+0x14e>
        return 0;

    if (buttonState == lastButtonState)
     5f0:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     5f4:	89 17       	cp	r24, r25
     5f6:	09 f4       	brne	.+2      	; 0x5fa <LanyardCode+0x54>
     5f8:	7d c0       	rjmp	.+250    	; 0x6f4 <LanyardCode+0x14e>
        return 0;

    lanyardLastActive = getClock();
     5fa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <getClock>
     5fe:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <lanyardLastActive>
     602:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     606:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     60a:	8f 3f       	cpi	r24, 0xFF	; 255
     60c:	09 f0       	breq	.+2      	; 0x610 <LanyardCode+0x6a>
     60e:	72 c0       	rjmp	.+228    	; 0x6f4 <LanyardCode+0x14e>
        if ((gameNow != LANYARD) || (lanyardState == LANYARD_GAMEOVER)) {
     610:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	21 f4       	brne	.+8      	; 0x620 <LanyardCode+0x7a>
     618:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     61c:	83 30       	cpi	r24, 0x03	; 3
     61e:	a1 f4       	brne	.+40     	; 0x648 <LanyardCode+0xa2>
            // init Lanyard game
            gameNow         = LANYARD;
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
            lanyardPos      = 0;
     626:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <lanyardPos>
            lanyardCnt      = 0;
     62a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            lanyardState    = LANYARD_GOOD;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
            SetHackerLeds(0,0);
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 1f 0b 	call	0x163e	; 0x163e <SetHackerLeds>
            effect = 16;
     63c:	80 e1       	ldi	r24, 0x10	; 16
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     644:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
        }

        if (buttonState != lanyardCode[lanyardPos]) {
     648:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     64c:	e8 2f       	mov	r30, r24
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	e0 5b       	subi	r30, 0xB0	; 176
     652:	f1 44       	sbci	r31, 0x41	; 65
     654:	20 81       	ld	r18, Z
     656:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     65a:	29 17       	cp	r18, r25
     65c:	41 f0       	breq	.+16     	; 0x66e <LanyardCode+0xc8>
            if (lanyardPos == 0 ) {
     65e:	81 11       	cpse	r24, r1
     660:	03 c0       	rjmp	.+6      	; 0x668 <LanyardCode+0xc2>
                gameNow = TEXT;
     662:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                return 0;
     666:	46 c0       	rjmp	.+140    	; 0x6f4 <LanyardCode+0x14e>
            }
            lanyardState = LANYARD_MISTAKE;
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
        }
        lanyardPos++;
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <lanyardPos>
        lanyardCnt++;            
     674:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <lanyardCnt>
        WingBar(lanyardCnt,lanyardCnt);
     67e:	68 2f       	mov	r22, r24
     680:	a0 d7       	rcall	.+3904   	; 0x15c2 <WingBar>
        if (lanyardCnt >= 4) {
     682:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <lanyardCnt>
     686:	84 30       	cpi	r24, 0x04	; 4
     688:	a8 f1       	brcs	.+106    	; 0x6f4 <LanyardCode+0x14e>
            lanyardCnt = 0;
     68a:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            if (lanyardState == LANYARD_GOOD) {
     68e:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <lanyardState>
     692:	81 30       	cpi	r24, 0x01	; 1
     694:	19 f5       	brne	.+70     	; 0x6dc <LanyardCode+0x136>
                if (lanyardCnt == 0) {
                    WingBar(0,0);
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	93 d7       	rcall	.+3878   	; 0x15c2 <WingBar>
                    iLED[HCKR[G][(lanyardPos>>1)-2]] = dimValue;
     69c:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     6a0:	e8 2f       	mov	r30, r24
     6a2:	e6 95       	lsr	r30
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	e2 59       	subi	r30, 0x92	; 146
     6a8:	f1 44       	sbci	r31, 0x41	; 65
     6aa:	a4 81       	ldd	r26, Z+4	; 0x04
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6b2:	a4 53       	subi	r26, 0x34	; 52
     6b4:	b5 4c       	sbci	r27, 0xC5	; 197
     6b6:	9c 93       	st	X, r25
                    iLED[HCKR[G][(lanyardPos>>1)-1]] = dimValue;
     6b8:	e5 81       	ldd	r30, Z+5	; 0x05
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6c0:	e4 53       	subi	r30, 0x34	; 52
     6c2:	f5 4c       	sbci	r31, 0xC5	; 197
     6c4:	90 83       	st	Z, r25
                }
                if (lanyardPos == LANYARD_LEN) {
     6c6:	8c 30       	cpi	r24, 0x0C	; 12
                    UpdateState(LANYARD_COMPLETED);
     6c8:	a9 f4       	brne	.+42     	; 0x6f4 <LanyardCode+0x14e>
     6ca:	8b e7       	ldi	r24, 0x7B	; 123
     6cc:	8c d6       	rcall	.+3352   	; 0x13e6 <UpdateState>
                    effect    = 0x42;
     6ce:	82 e4       	ldi	r24, 0x42	; 66
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     6d6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <LanyardCode+0x14e>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                lanyardState = LANYARD_GAMEOVER;
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                effect  = 0x31;
     6e2:	81 e3       	ldi	r24, 0x31	; 49
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     6ea:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                WingBar(0,0);
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	67 d7       	rcall	.+3790   	; 0x15c2 <WingBar>
            }
        }
    }

    return 0;
}
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	08 95       	ret

000006f8 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     6f8:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <mazeHckrPos>
    mazePos = 0;
     6fc:	10 92 52 38 	sts	0x3852, r1	; 0x803852 <mazePos>
    mazeCnt = 0;
     700:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeCnt>
    mazeState = TRUE;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     70a:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <inverted>
    effect = 16;
     70e:	80 e1       	ldi	r24, 0x10	; 16
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     716:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    SetHackerLeds(0,0);
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	8f c7       	rjmp	.+3870   	; 0x163e <SetHackerLeds>
     720:	08 95       	ret

00000722 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     728:	97 ff       	sbrs	r25, 7
     72a:	03 c0       	rjmp	.+6      	; 0x732 <showFieldStrength+0x10>
     72c:	d1 95       	neg	r29
     72e:	c1 95       	neg	r28
     730:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     732:	cd 33       	cpi	r28, 0x3D	; 61
     734:	d1 05       	cpc	r29, r1
     736:	44 f0       	brlt	.+16     	; 0x748 <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     738:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     73c:	81 11       	cpse	r24, r1
     73e:	04 c0       	rjmp	.+8      	; 0x748 <showFieldStrength+0x26>
            initMaze();
     740:	db df       	rcall	.-74     	; 0x6f8 <initMaze>
            gameNow = MAZE;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
        }
    }

    if (gameNow == MAZE) {
     748:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	09 f5       	brne	.+66     	; 0x792 <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     750:	cc 33       	cpi	r28, 0x3C	; 60
     752:	d1 05       	cpc	r29, r1
     754:	1c f4       	brge	.+6      	; 0x75c <showFieldStrength+0x3a>
            WingBar(0,0);
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	1a c0       	rjmp	.+52     	; 0x790 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     75c:	c8 37       	cpi	r28, 0x78	; 120
     75e:	d1 05       	cpc	r29, r1
     760:	1c f4       	brge	.+6      	; 0x768 <showFieldStrength+0x46>
            WingBar(1,1);
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	14 c0       	rjmp	.+40     	; 0x790 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     768:	c6 39       	cpi	r28, 0x96	; 150
     76a:	d1 05       	cpc	r29, r1
     76c:	1c f4       	brge	.+6      	; 0x774 <showFieldStrength+0x52>
            WingBar(2,2);
     76e:	62 e0       	ldi	r22, 0x02	; 2
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e c0       	rjmp	.+28     	; 0x790 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     774:	c8 3c       	cpi	r28, 0xC8	; 200
     776:	d1 05       	cpc	r29, r1
     778:	1c f4       	brge	.+6      	; 0x780 <showFieldStrength+0x5e>
            WingBar(3,3);
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	08 c0       	rjmp	.+16     	; 0x790 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     780:	cc 32       	cpi	r28, 0x2C	; 44
     782:	d1 40       	sbci	r29, 0x01	; 1
     784:	1c f4       	brge	.+6      	; 0x78c <showFieldStrength+0x6a>
            WingBar(4,4);
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	02 c0       	rjmp	.+4      	; 0x790 <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     78c:	65 e0       	ldi	r22, 0x05	; 5
     78e:	85 e0       	ldi	r24, 0x05	; 5
     790:	18 d7       	rcall	.+3632   	; 0x15c2 <WingBar>
    }
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     79c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	71 f4       	brne	.+28     	; 0x7c0 <MagnetMaze+0x28>
     7a4:	6a e0       	ldi	r22, 0x0A	; 10
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <mazeLastActive>
     7ac:	90 91 4e 38 	lds	r25, 0x384E	; 0x80384e <mazeLastActive+0x1>
     7b0:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <idleTimeout>
     7b4:	88 23       	and	r24, r24
     7b6:	21 f0       	breq	.+8      	; 0x7c0 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     7b8:	9f df       	rcall	.-194    	; 0x6f8 <initMaze>
        gameNow = TEXT;
     7ba:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        return 0;
     7be:	e5 c0       	rjmp	.+458    	; 0x98a <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     7c0:	87 ef       	ldi	r24, 0xF7	; 247
     7c2:	32 d6       	rcall	.+3172   	; 0x1428 <CheckState>
     7c4:	81 11       	cpse	r24, r1
     7c6:	e1 c0       	rjmp	.+450    	; 0x98a <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7c8:	8d e7       	ldi	r24, 0x7D	; 125
     7ca:	2e d6       	rcall	.+3164   	; 0x1428 <CheckState>
     7cc:	81 11       	cpse	r24, r1
     7ce:	dd c0       	rjmp	.+442    	; 0x98a <MagnetMaze+0x1f2>
     7d0:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	08 f0       	brcs	.+2      	; 0x7da <MagnetMaze+0x42>
     7d8:	d8 c0       	rjmp	.+432    	; 0x98a <MagnetMaze+0x1f2>
     7da:	80 91 f4 3a 	lds	r24, 0x3AF4	; 0x803af4 <calHall>
        return 0;

    if (calHall == 0)
     7de:	90 91 f5 3a 	lds	r25, 0x3AF5	; 0x803af5 <calHall+0x1>
     7e2:	89 2b       	or	r24, r25
     7e4:	41 f4       	brne	.+16     	; 0x7f6 <MagnetMaze+0x5e>
     7e6:	80 91 c4 3a 	lds	r24, 0x3AC4	; 0x803ac4 <adcHall>
        calHall = adcHall;
     7ea:	90 91 c5 3a 	lds	r25, 0x3AC5	; 0x803ac5 <adcHall+0x1>
     7ee:	80 93 f4 3a 	sts	0x3AF4, r24	; 0x803af4 <calHall>
     7f2:	90 93 f5 3a 	sts	0x3AF5, r25	; 0x803af5 <calHall+0x1>
     7f6:	c0 91 c4 3a 	lds	r28, 0x3AC4	; 0x803ac4 <adcHall>

    int16_t valHall = adcHall - calHall;
     7fa:	d0 91 c5 3a 	lds	r29, 0x3AC5	; 0x803ac5 <adcHall+0x1>
     7fe:	80 91 f4 3a 	lds	r24, 0x3AF4	; 0x803af4 <calHall>
     802:	90 91 f5 3a 	lds	r25, 0x3AF5	; 0x803af5 <calHall+0x1>
     806:	c8 1b       	sub	r28, r24
     808:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     80a:	ce 01       	movw	r24, r28
     80c:	8a df       	rcall	.-236    	; 0x722 <showFieldStrength>
     80e:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <curHallState>

    switch (curHallState) {
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	89 f0       	breq	.+34     	; 0x838 <MagnetMaze+0xa0>
     816:	18 f0       	brcs	.+6      	; 0x81e <MagnetMaze+0x86>
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	c1 f0       	breq	.+48     	; 0x84c <MagnetMaze+0xb4>
     81c:	1f c0       	rjmp	.+62     	; 0x85c <MagnetMaze+0xc4>
     81e:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     820:	9e ef       	ldi	r25, 0xFE	; 254
     822:	d9 07       	cpc	r29, r25
     824:	14 f4       	brge	.+4      	; 0x82a <MagnetMaze+0x92>
     826:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     828:	04 c0       	rjmp	.+8      	; 0x832 <MagnetMaze+0x9a>
     82a:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     82c:	d1 40       	sbci	r29, 0x01	; 1
     82e:	5c f0       	brlt	.+22     	; 0x846 <MagnetMaze+0xae>
     830:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     832:	90 93 53 38 	sts	0x3853, r25	; 0x803853 <newHallState>
     836:	12 c0       	rjmp	.+36     	; 0x85c <MagnetMaze+0xc4>
     838:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	d9 07       	cpc	r29, r25
     83e:	c4 f7       	brge	.-16     	; 0x830 <MagnetMaze+0x98>
     840:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	84 f3       	brlt	.-32     	; 0x826 <MagnetMaze+0x8e>
     846:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     84a:	08 c0       	rjmp	.+16     	; 0x85c <MagnetMaze+0xc4>
     84c:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     84e:	9e ef       	ldi	r25, 0xFE	; 254
     850:	d9 07       	cpc	r29, r25
     852:	4c f3       	brlt	.-46     	; 0x826 <MagnetMaze+0x8e>
     854:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     856:	d1 05       	cpc	r29, r1
     858:	b4 f3       	brlt	.-20     	; 0x846 <MagnetMaze+0xae>
     85a:	ea cf       	rjmp	.-44     	; 0x830 <MagnetMaze+0x98>
     85c:	c0 91 5c be 	lds	r28, 0xBE5C	; 0x80be5c <__bss_end+0x8341>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     860:	ec 2f       	mov	r30, r28
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	90 91 53 38 	lds	r25, 0x3853	; 0x803853 <newHallState>
     868:	99 23       	and	r25, r25
     86a:	19 f0       	breq	.+6      	; 0x872 <MagnetMaze+0xda>
     86c:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     870:	01 c0       	rjmp	.+2      	; 0x874 <MagnetMaze+0xdc>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	e4 53       	subi	r30, 0x34	; 52
     876:	f5 4c       	sbci	r31, 0xC5	; 197
     878:	20 83       	st	Z, r18
     87a:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     87c:	31 e0       	ldi	r19, 0x01	; 1
     87e:	20 93 40 38 	sts	0x3840, r18	; 0x803840 <effect>
     882:	30 93 41 38 	sts	0x3841, r19	; 0x803841 <effect+0x1>
     886:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     888:	09 f4       	brne	.+2      	; 0x88c <MagnetMaze+0xf4>
     88a:	7f c0       	rjmp	.+254    	; 0x98a <MagnetMaze+0x1f2>
     88c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     890:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <mazeLastActive>
     894:	90 93 4e 38 	sts	0x384E, r25	; 0x80384e <mazeLastActive+0x1>
     898:	90 91 52 38 	lds	r25, 0x3852	; 0x803852 <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     89c:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <newHallState>
     8a0:	91 11       	cpse	r25, r1
     8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <MagnetMaze+0x11c>
     8a4:	88 23       	and	r24, r24
     8a6:	31 f0       	breq	.+12     	; 0x8b4 <MagnetMaze+0x11c>
     8a8:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <MagnetMaze+0x118>
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <inverted>
     8b4:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <curHallState>

        curHallState = newHallState;
     8b8:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     8ba:	09 f4       	brne	.+2      	; 0x8be <MagnetMaze+0x126>
     8bc:	66 c0       	rjmp	.+204    	; 0x98a <MagnetMaze+0x1f2>
     8be:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
            if (gameNow == TEXT)
     8c2:	81 11       	cpse	r24, r1
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <MagnetMaze+0x130>
                initMaze();
     8c6:	18 df       	rcall	.-464    	; 0x6f8 <initMaze>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     8ca:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
     8ce:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     8d2:	20 91 54 38 	lds	r18, 0x3854	; 0x803854 <curHallState>
     8d6:	88 23       	and	r24, r24
     8d8:	11 f0       	breq	.+4      	; 0x8de <MagnetMaze+0x146>
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	28 27       	eor	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <mazePos>
     8e4:	e8 2f       	mov	r30, r24
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	e6 55       	subi	r30, 0x56	; 86
     8ea:	f1 44       	sbci	r31, 0x41	; 65
     8ec:	40 81       	ld	r20, Z
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	24 17       	cp	r18, r20
     8f2:	35 07       	cpc	r19, r21
     8f4:	91 f4       	brne	.+36     	; 0x91a <MagnetMaze+0x182>
     8f6:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     8fa:	91 70       	andi	r25, 0x01	; 1
     8fc:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     900:	e0 91 6b be 	lds	r30, 0xBE6B	; 0x80be6b <__bss_end+0x8350>
                iLED[EYE[R][L]] = 0;
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	e4 53       	subi	r30, 0x34	; 52
     908:	f5 4c       	sbci	r31, 0xC5	; 197
     90a:	10 82       	st	Z, r1
     90c:	e0 91 6a be 	lds	r30, 0xBE6A	; 0x80be6a <__bss_end+0x834f>
                iLED[EYE[R][R]] = 0;
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	e4 53       	subi	r30, 0x34	; 52
     914:	f5 4c       	sbci	r31, 0xC5	; 197
     916:	10 82       	st	Z, r1
     918:	02 c0       	rjmp	.+4      	; 0x91e <MagnetMaze+0x186>
     91a:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     91e:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     920:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <mazePos>
     924:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <mazeCnt>
            mazeCnt++;            
     928:	9f 5f       	subi	r25, 0xFF	; 255
     92a:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     92c:	18 f4       	brcc	.+6      	; 0x934 <MagnetMaze+0x19c>
     92e:	90 93 50 38 	sts	0x3850, r25	; 0x803850 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     932:	2b c0       	rjmp	.+86     	; 0x98a <MagnetMaze+0x1f2>
     934:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     938:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     93c:	91 30       	cpi	r25, 0x01	; 1
     93e:	e1 f4       	brne	.+56     	; 0x978 <MagnetMaze+0x1e0>
     940:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     944:	e9 2f       	mov	r30, r25
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	e2 59       	subi	r30, 0x92	; 146
     94a:	f1 44       	sbci	r31, 0x41	; 65
     94c:	e6 81       	ldd	r30, Z+6	; 0x06
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     954:	e4 53       	subi	r30, 0x34	; 52
     956:	f5 4c       	sbci	r31, 0xC5	; 197
     958:	20 83       	st	Z, r18
     95a:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     95c:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     960:	82 31       	cpi	r24, 0x12	; 18
     962:	99 f4       	brne	.+38     	; 0x98a <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     964:	8d e7       	ldi	r24, 0x7D	; 125
     966:	3f d5       	rcall	.+2686   	; 0x13e6 <UpdateState>
     968:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	e4 53       	subi	r30, 0x34	; 52
     96e:	f5 4c       	sbci	r31, 0xC5	; 197
     970:	10 82       	st	Z, r1
                        effect = 0x42;
     972:	82 e4       	ldi	r24, 0x42	; 66
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	05 c0       	rjmp	.+10     	; 0x982 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     978:	bf de       	rcall	.-642    	; 0x6f8 <initMaze>
     97a:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                    gameNow   = TEXT;
     97e:	81 e3       	ldi	r24, 0x31	; 49
                    effect = 0x31;
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     986:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     98a:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <Setup>:
     992:	cf 93       	push	r28
    TCB1_CCMP = pitch;
    if (repeat) auRepAddr = auBuffer;
    else auSmpAddr = auBuffer;
    auVolume = volume;
    return 1;
}
     994:	df 93       	push	r29
     996:	f8 94       	cli
     998:	88 ed       	ldi	r24, 0xD8	; 216
     99a:	84 bf       	out	0x34, r24	; 52
     99c:	c1 e0       	ldi	r28, 0x01	; 1
     99e:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     9a2:	8a e4       	ldi	r24, 0x4A	; 74
     9a4:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     9a8:	8c e7       	ldi	r24, 0x7C	; 124
     9aa:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     9ae:	9f e3       	ldi	r25, 0x3F	; 63
     9b0:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     9b4:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9b8:	80 68       	ori	r24, 0x80	; 128
     9ba:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9be:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9c2:	80 68       	ori	r24, 0x80	; 128
     9c4:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9c8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9d2:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9d6:	80 68       	ori	r24, 0x80	; 128
     9d8:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9dc:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9e0:	80 68       	ori	r24, 0x80	; 128
     9e2:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9e6:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9ea:	80 68       	ori	r24, 0x80	; 128
     9ec:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9f0:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     9f4:	d2 e0       	ldi	r29, 0x02	; 2
     9f6:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     9fa:	2b e5       	ldi	r18, 0x5B	; 91
     9fc:	31 e0       	ldi	r19, 0x01	; 1
     9fe:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a02:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     a06:	80 ea       	ldi	r24, 0xA0	; 160
     a08:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     a0c:	80 ec       	ldi	r24, 0xC0	; 192
     a0e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     a18:	1c ba       	out	0x1c, r1	; 28
     a1a:	1d ba       	out	0x1d, r1	; 29
     a1c:	1f ba       	out	0x1f, r1	; 31
     a1e:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a28:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     a2c:	87 e7       	ldi	r24, 0x77	; 119
     a2e:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     a32:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     a36:	8b e0       	ldi	r24, 0x0B	; 11
     a38:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a3c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a46:	85 e0       	ldi	r24, 0x05	; 5
     a48:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     a4c:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     a50:	8f ef       	ldi	r24, 0xFF	; 255
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a58:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     a5c:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a60:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     a64:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     a68:	8b e8       	ldi	r24, 0x8B	; 139
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a70:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     a74:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     a78:	53 dc       	rcall	.-1882   	; 0x320 <I2C_init>
     a7a:	82 e1       	ldi	r24, 0x12	; 18
     a7c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     a80:	80 e2       	ldi	r24, 0x20	; 32
     a82:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     a86:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     a8a:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     a8e:	84 e4       	ldi	r24, 0x44	; 68
     a90:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     a94:	8e e1       	ldi	r24, 0x1E	; 30
     a96:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     a9a:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     a9e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     aa8:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     aac:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ab0:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     ab4:	82 e5       	ldi	r24, 0x52	; 82
     ab6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     ac0:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ac4:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     ac8:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     acc:	81 60       	ori	r24, 0x01	; 1
     ace:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ad2:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     ad6:	80 e4       	ldi	r24, 0x40	; 64
     ad8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     adc:	80 e8       	ldi	r24, 0x80	; 128
     ade:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     ae2:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     aec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     af0:	80 fd       	sbrc	r24, 0
     af2:	fc cf       	rjmp	.-8      	; 0xaec <Setup+0x15a>
     af4:	80 e3       	ldi	r24, 0x30	; 48
     af6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     afa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     afe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b02:	82 fd       	sbrc	r24, 2
     b04:	fc cf       	rjmp	.-8      	; 0xafe <Setup+0x16c>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	98 e7       	ldi	r25, 0x78	; 120
     b0a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b0e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b12:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b16:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b1a:	82 96       	adiw	r24, 0x22	; 34
     b1c:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     b20:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
     b24:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b28:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b2c:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b30:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	70 f4       	brcc	.+28     	; 0xb56 <Setup+0x1c4>
     b3a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b3e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b42:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b46:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b4a:	82 1b       	sub	r24, r18
     b4c:	93 0b       	sbc	r25, r19
     b4e:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     b52:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
     b56:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b5a:	83 fd       	sbrc	r24, 3
     b5c:	fc cf       	rjmp	.-8      	; 0xb56 <Setup+0x1c4>
     b5e:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     b62:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     b66:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b6a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     b7a:	88 e0       	ldi	r24, 0x08	; 8
     b7c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b80:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b84:	80 fd       	sbrc	r24, 0
     b86:	fc cf       	rjmp	.-8      	; 0xb80 <Setup+0x1ee>
     b88:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b92:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b9c:	10 92 7e 3a 	sts	0x3A7E, r1	; 0x803a7e <serRx>
     ba0:	8e e7       	ldi	r24, 0x7E	; 126
     ba2:	9a e3       	ldi	r25, 0x3A	; 58
     ba4:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <serTxAddr>
     ba8:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <serTxAddr+0x1>
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     bb2:	78 94       	sei
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <__vector_8>:
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     bd6:	84 e4       	ldi	r24, 0x44	; 68
     bd8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     bdc:	ec b3       	in	r30, 0x1c	; 28
     bde:	88 e0       	ldi	r24, 0x08	; 8
     be0:	e8 9f       	mul	r30, r24
     be2:	f0 01       	movw	r30, r0
     be4:	11 24       	eor	r1, r1
     be6:	e4 53       	subi	r30, 0x34	; 52
     be8:	f5 4c       	sbci	r31, 0xC5	; 197
     bea:	a8 e2       	ldi	r26, 0x28	; 40
     bec:	ba e0       	ldi	r27, 0x0A	; 10
     bee:	96 e0       	ldi	r25, 0x06	; 6
     bf0:	81 91       	ld	r24, Z+
     bf2:	8d 93       	st	X+, r24
     bf4:	9a 95       	dec	r25
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <__vector_8+0x36>
     bf8:	8b e0       	ldi	r24, 0x0B	; 11
     bfa:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     bfe:	8c b3       	in	r24, 0x1c	; 28
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	58 f4       	brcc	.+22     	; 0xc1a <__vector_8+0x60>
     c04:	8c b3       	in	r24, 0x1c	; 28
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <__vector_8+0x52>
     c0a:	99 0f       	add	r25, r25
     c0c:	8a 95       	dec	r24
     c0e:	ea f7       	brpl	.-6      	; 0xc0a <__vector_8+0x50>
     c10:	99 b9       	out	0x09, r25	; 9
     c12:	8c b3       	in	r24, 0x1c	; 28
     c14:	83 95       	inc	r24
     c16:	8c bb       	out	0x1c, r24	; 28
     c18:	0a c0       	rjmp	.+20     	; 0xc2e <__vector_8+0x74>
     c1a:	8c b3       	in	r24, 0x1c	; 28
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	21 f4       	brne	.+8      	; 0xc28 <__vector_8+0x6e>
     c20:	2a 9a       	sbi	0x05, 2	; 5
     c22:	83 95       	inc	r24
     c24:	8c bb       	out	0x1c, r24	; 28
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <__vector_8+0x74>
     c28:	2e 9a       	sbi	0x05, 6	; 5
     c2a:	88 27       	eor	r24, r24
     c2c:	8c bb       	out	0x1c, r24	; 28
     c2e:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     c32:	88 23       	and	r24, r24
     c34:	29 f0       	breq	.+10     	; 0xc40 <__vector_8+0x86>
     c36:	80 91 69 3a 	lds	r24, 0x3A69	; 0x803a69 <timeout_I2C>
     c3a:	81 50       	subi	r24, 0x01	; 1
     c3c:	80 93 69 3a 	sts	0x3A69, r24	; 0x803a69 <timeout_I2C>
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_13>:
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
     c6e:	e0 91 c2 3a 	lds	r30, 0x3AC2	; 0x803ac2 <serTxAddr>
     c72:	f0 91 c3 3a 	lds	r31, 0x3AC3	; 0x803ac3 <serTxAddr+0x1>
     c76:	80 81       	ld	r24, Z
     c78:	88 23       	and	r24, r24
     c7a:	91 f0       	breq	.+36     	; 0xca0 <__vector_13+0x44>
     c7c:	80 81       	ld	r24, Z
     c7e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     c82:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <serTxAddr>
     c86:	90 91 c3 3a 	lds	r25, 0x3AC3	; 0x803ac3 <serTxAddr+0x1>
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <serTxAddr>
     c90:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <serTxAddr+0x1>
     c94:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c98:	80 62       	ori	r24, 0x20	; 32
     c9a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <__vector_13+0x4e>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
     ca6:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <__vector_14>:
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
     cda:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cde:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ce2:	80 81       	ld	r24, Z
     ce4:	81 11       	cpse	r24, r1
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <__vector_14+0x36>
     ce8:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     cec:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     cf0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     cf4:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     cf8:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cfc:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d00:	80 81       	ld	r24, Z
     d02:	88 23       	and	r24, r24
     d04:	e1 f0       	breq	.+56     	; 0xd3e <__vector_14+0x7c>
     d06:	20 81       	ld	r18, Z
     d08:	40 91 bf 3a 	lds	r20, 0x3ABF	; 0x803abf <auVolume>
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	2f 57       	subi	r18, 0x7F	; 127
     d10:	31 09       	sbc	r19, r1
     d12:	42 9f       	mul	r20, r18
     d14:	c0 01       	movw	r24, r0
     d16:	43 9f       	mul	r20, r19
     d18:	90 0d       	add	r25, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	89 2f       	mov	r24, r25
     d1e:	99 0f       	add	r25, r25
     d20:	99 0b       	sbc	r25, r25
     d22:	80 58       	subi	r24, 0x80	; 128
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     d2a:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d2e:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d38:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <__vector_14+0x88>
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_27>:
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	8f 93       	push	r24
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
     d78:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <serRxDone>
     d7c:	81 11       	cpse	r24, r1
     d7e:	44 c0       	rjmp	.+136    	; 0xe08 <__vector_27+0xa0>
     d80:	ed b3       	in	r30, 0x1d	; 29
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d88:	e2 58       	subi	r30, 0x82	; 130
     d8a:	f5 4c       	sbci	r31, 0xC5	; 197
     d8c:	80 83       	st	Z, r24
     d8e:	ed b3       	in	r30, 0x1d	; 29
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	e2 58       	subi	r30, 0x82	; 130
     d94:	f5 4c       	sbci	r31, 0xC5	; 197
     d96:	80 81       	ld	r24, Z
     d98:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     d9c:	ed b3       	in	r30, 0x1d	; 29
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	e2 58       	subi	r30, 0x82	; 130
     da2:	f5 4c       	sbci	r31, 0xC5	; 197
     da4:	80 81       	ld	r24, Z
     da6:	8a 30       	cpi	r24, 0x0A	; 10
     da8:	39 f0       	breq	.+14     	; 0xdb8 <__vector_27+0x50>
     daa:	ed b3       	in	r30, 0x1d	; 29
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	e2 58       	subi	r30, 0x82	; 130
     db0:	f5 4c       	sbci	r31, 0xC5	; 197
     db2:	80 81       	ld	r24, Z
     db4:	8d 30       	cpi	r24, 0x0D	; 13
     db6:	49 f4       	brne	.+18     	; 0xdca <__vector_27+0x62>
     db8:	ed b3       	in	r30, 0x1d	; 29
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	e2 58       	subi	r30, 0x82	; 130
     dbe:	f5 4c       	sbci	r31, 0xC5	; 197
     dc0:	10 82       	st	Z, r1
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <serRxDone>
     dc8:	1f c0       	rjmp	.+62     	; 0xe08 <__vector_27+0xa0>
     dca:	ed b3       	in	r30, 0x1d	; 29
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	e2 58       	subi	r30, 0x82	; 130
     dd0:	f5 4c       	sbci	r31, 0xC5	; 197
     dd2:	80 81       	ld	r24, Z
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	39 f0       	breq	.+14     	; 0xde6 <__vector_27+0x7e>
     dd8:	ed b3       	in	r30, 0x1d	; 29
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	e2 58       	subi	r30, 0x82	; 130
     dde:	f5 4c       	sbci	r31, 0xC5	; 197
     de0:	80 81       	ld	r24, Z
     de2:	8f 37       	cpi	r24, 0x7F	; 127
     de4:	59 f4       	brne	.+22     	; 0xdfc <__vector_27+0x94>
     de6:	8d b3       	in	r24, 0x1d	; 29
     de8:	88 23       	and	r24, r24
     dea:	41 f0       	breq	.+16     	; 0xdfc <__vector_27+0x94>
     dec:	ed b3       	in	r30, 0x1d	; 29
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	e2 58       	subi	r30, 0x82	; 130
     df2:	f5 4c       	sbci	r31, 0xC5	; 197
     df4:	10 82       	st	Z, r1
     df6:	8d b3       	in	r24, 0x1d	; 29
     df8:	81 50       	subi	r24, 0x01	; 1
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <__vector_27+0x9e>
     dfc:	8d b3       	in	r24, 0x1d	; 29
     dfe:	80 34       	cpi	r24, 0x40	; 64
     e00:	18 f4       	brcc	.+6      	; 0xe08 <__vector_27+0xa0>
     e02:	8d b3       	in	r24, 0x1d	; 29
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	8d bb       	out	0x1d, r24	; 29
     e08:	80 e8       	ldi	r24, 0x80	; 128
     e0a:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     e0e:	ff 91       	pop	r31
     e10:	ef 91       	pop	r30
     e12:	8f 91       	pop	r24
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <__vector_28>:
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	8f 93       	push	r24
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e32:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e3c:	e5 e0       	ldi	r30, 0x05	; 5
     e3e:	f8 e0       	ldi	r31, 0x08	; 8
     e40:	80 81       	ld	r24, Z
     e42:	8f 7d       	andi	r24, 0xDF	; 223
     e44:	80 83       	st	Z, r24
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	8f 91       	pop	r24
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_20>:
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     e68:	81 11       	cpse	r24, r1
     e6a:	12 c0       	rjmp	.+36     	; 0xe90 <__vector_20+0x3a>
     e6c:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e70:	8e 31       	cpi	r24, 0x1E	; 30
     e72:	49 f4       	brne	.+18     	; 0xe86 <__vector_20+0x30>
     e74:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e78:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e7c:	80 93 f6 3a 	sts	0x3AF6, r24	; 0x803af6 <adcTemp>
     e80:	90 93 f7 3a 	sts	0x3AF7, r25	; 0x803af7 <adcTemp+0x1>
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <__vector_20+0x44>
     e86:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e8a:	80 93 cb 3a 	sts	0x3ACB, r24	; 0x803acb <auIn>
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <__vector_20+0x44>
     e90:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_22>:
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ec0:	81 11       	cpse	r24, r1
     ec2:	0a c0       	rjmp	.+20     	; 0xed8 <__vector_22+0x2a>
     ec4:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ec8:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ecc:	80 93 c6 3a 	sts	0x3AC6, r24	; 0x803ac6 <adcPhot>
     ed0:	90 93 c7 3a 	sts	0x3AC7, r25	; 0x803ac7 <adcPhot+0x1>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	10 c0       	rjmp	.+32     	; 0xef8 <__vector_22+0x4a>
     ed8:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	79 f4       	brne	.+30     	; 0xefe <__vector_22+0x50>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     ee6:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     eea:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     eee:	80 93 c4 3a 	sts	0x3AC4, r24	; 0x803ac4 <adcHall>
     ef2:	90 93 c5 3a 	sts	0x3AC5, r25	; 0x803ac5 <adcHall+0x1>
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     efc:	10 c0       	rjmp	.+32     	; 0xf1e <__vector_22+0x70>
     efe:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f02:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f06:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <adcBtns>
     f0a:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <adcBtns+0x1>
     f0e:	8f b3       	in	r24, 0x1f	; 31
     f10:	8f 30       	cpi	r24, 0x0F	; 15
     f12:	29 f4       	brne	.+10     	; 0xf1e <__vector_22+0x70>
     f14:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f18:	88 e0       	ldi	r24, 0x08	; 8
     f1a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     f1e:	8f b3       	in	r24, 0x1f	; 31
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	8f 70       	andi	r24, 0x0F	; 15
     f26:	99 27       	eor	r25, r25
     f28:	8f bb       	out	0x1f, r24	; 31
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0
     f3a:	1f 90       	pop	r1
     f3c:	18 95       	reti

00000f3e <__vector_6>:
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	2f 93       	push	r18
     f4a:	3f 93       	push	r19
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
     f50:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f54:	81 ff       	sbrs	r24, 1
     f56:	36 c0       	rjmp	.+108    	; 0xfc4 <__vector_6+0x86>
     f58:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f5c:	8f 3f       	cpi	r24, 0xFF	; 255
     f5e:	29 f0       	breq	.+10     	; 0xf6a <__vector_6+0x2c>
     f60:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>
     f6a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f6e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f72:	82 96       	adiw	r24, 0x22	; 34
     f74:	80 93 f8 3a 	sts	0x3AF8, r24	; 0x803af8 <tmp16bit>
     f78:	90 93 f9 3a 	sts	0x3AF9, r25	; 0x803af9 <tmp16bit+0x1>
     f7c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f80:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f84:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     f88:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     f8c:	28 17       	cp	r18, r24
     f8e:	39 07       	cpc	r19, r25
     f90:	58 f4       	brcc	.+22     	; 0xfa8 <__vector_6+0x6a>
     f92:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f96:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f9a:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     f9e:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     fa2:	82 1b       	sub	r24, r18
     fa4:	93 0b       	sbc	r25, r19
     fa6:	e6 cf       	rjmp	.-52     	; 0xf74 <__vector_6+0x36>
     fa8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     fac:	83 fd       	sbrc	r24, 3
     fae:	fc cf       	rjmp	.-8      	; 0xfa8 <__vector_6+0x6a>
     fb0:	80 91 f8 3a 	lds	r24, 0x3AF8	; 0x803af8 <tmp16bit>
     fb4:	90 91 f9 3a 	lds	r25, 0x3AF9	; 0x803af9 <tmp16bit+0x1>
     fb8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fbc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <__vector_6+0x92>
     fc4:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <minuteMark>
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <minuteMark>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti

00000fe6 <__vector_7>:
     fe6:	1f 92       	push	r1
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	0f 92       	push	r0
     fee:	11 24       	eor	r1, r1
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     ffa:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <fastTicker>
    1004:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <EERead>:
    1016:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    101a:	91 fd       	sbrc	r25, 1
    101c:	fc cf       	rjmp	.-8      	; 0x1016 <EERead>
    101e:	fb 01       	movw	r30, r22
    1020:	48 0f       	add	r20, r24
    1022:	84 17       	cp	r24, r20
    1024:	39 f0       	breq	.+14     	; 0x1034 <EERead+0x1e>
    1026:	a8 2f       	mov	r26, r24
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	bc 5e       	subi	r27, 0xEC	; 236
    102c:	9c 91       	ld	r25, X
    102e:	91 93       	st	Z+, r25
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	f7 cf       	rjmp	.-18     	; 0x1022 <EERead+0xc>
    1034:	08 95       	ret

00001036 <EEWrite>:
    1036:	9d e9       	ldi	r25, 0x9D	; 157
    1038:	24 e0       	ldi	r18, 0x04	; 4
    103a:	33 e0       	ldi	r19, 0x03	; 3
    103c:	44 23       	and	r20, r20
    103e:	09 f1       	breq	.+66     	; 0x1082 <EEWrite+0x4c>
    1040:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1044:	51 fd       	sbrc	r21, 1
    1046:	fc cf       	rjmp	.-8      	; 0x1040 <EEWrite+0xa>
    1048:	94 bf       	out	0x34, r25	; 52
    104a:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    104e:	e8 2f       	mov	r30, r24
    1050:	58 2f       	mov	r21, r24
    1052:	5f 71       	andi	r21, 0x1F	; 31
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	db 01       	movw	r26, r22
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	ac 91       	ld	r26, X
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	fc 5e       	subi	r31, 0xEC	; 236
    1064:	a0 83       	st	Z, r26
    1066:	41 50       	subi	r20, 0x01	; 1
    1068:	19 f0       	breq	.+6      	; 0x1070 <EEWrite+0x3a>
    106a:	e8 2f       	mov	r30, r24
    106c:	5f 31       	cpi	r21, 0x1F	; 31
    106e:	81 f7       	brne	.-32     	; 0x1050 <EEWrite+0x1a>
    1070:	94 bf       	out	0x34, r25	; 52
    1072:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1076:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    107a:	52 ff       	sbrs	r21, 2
    107c:	df cf       	rjmp	.-66     	; 0x103c <EEWrite+0x6>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret

00001086 <DecryptData>:
    1086:	f9 01       	movw	r30, r18
    1088:	9c 01       	movw	r18, r24
    108a:	2e 1b       	sub	r18, r30
    108c:	3f 0b       	sbc	r19, r31
    108e:	88 e0       	ldi	r24, 0x08	; 8
    1090:	48 9f       	mul	r20, r24
    1092:	a0 01       	movw	r20, r0
    1094:	11 24       	eor	r1, r1
    1096:	46 56       	subi	r20, 0x66	; 102
    1098:	51 44       	sbci	r21, 0x41	; 65
    109a:	66 23       	and	r22, r22
    109c:	69 f0       	breq	.+26     	; 0x10b8 <DecryptData+0x32>
    109e:	df 01       	movw	r26, r30
    10a0:	a2 0f       	add	r26, r18
    10a2:	b3 1f       	adc	r27, r19
    10a4:	a7 70       	andi	r26, 0x07	; 7
    10a6:	bb 27       	eor	r27, r27
    10a8:	a4 0f       	add	r26, r20
    10aa:	b5 1f       	adc	r27, r21
    10ac:	80 81       	ld	r24, Z
    10ae:	9c 91       	ld	r25, X
    10b0:	98 27       	eor	r25, r24
    10b2:	91 93       	st	Z+, r25
    10b4:	61 50       	subi	r22, 0x01	; 1
    10b6:	f1 cf       	rjmp	.-30     	; 0x109a <DecryptData+0x14>
    10b8:	08 95       	ret

000010ba <ExtEERead>:
    10ba:	a2 e0       	ldi	r26, 0x02	; 2
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e3 e6       	ldi	r30, 0x63	; 99
    10c0:	f8 e0       	ldi	r31, 0x08	; 8
    10c2:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__+0x10>
    10c6:	d6 2e       	mov	r13, r22
    10c8:	c4 2e       	mov	r12, r20
    10ca:	59 01       	movw	r10, r18
    10cc:	7c 01       	movw	r14, r24
    10ce:	e8 94       	clt
    10d0:	f7 f8       	bld	r15, 7
    10d2:	f9 82       	std	Y+1, r15	; 0x01
    10d4:	ea 82       	std	Y+2, r14	; 0x02
    10d6:	06 2f       	mov	r16, r22
    10d8:	42 e0       	ldi	r20, 0x02	; 2
    10da:	be 01       	movw	r22, r28
    10dc:	6f 5f       	subi	r22, 0xFF	; 255
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	80 e5       	ldi	r24, 0x50	; 80
    10e2:	1c da       	rcall	.-3016   	; 0x51c <I2C_read_bytes>
    10e4:	18 2f       	mov	r17, r24
    10e6:	81 11       	cpse	r24, r1
    10e8:	05 c0       	rjmp	.+10     	; 0x10f4 <ExtEERead+0x3a>
    10ea:	95 01       	movw	r18, r10
    10ec:	4c 2d       	mov	r20, r12
    10ee:	6d 2d       	mov	r22, r13
    10f0:	c7 01       	movw	r24, r14
    10f2:	c9 df       	rcall	.-110    	; 0x1086 <DecryptData>
    10f4:	81 2f       	mov	r24, r17
    10f6:	22 96       	adiw	r28, 0x02	; 2
    10f8:	ea e0       	ldi	r30, 0x0A	; 10
    10fa:	0c 94 0e 1f 	jmp	0x3e1c	; 0x3e1c <__epilogue_restores__+0x10>

000010fe <SerSend>:
    10fe:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    1102:	22 23       	and	r18, r18
    1104:	59 f0       	breq	.+22     	; 0x111c <SerSend+0x1e>
    1106:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <serTxAddr>
    110a:	90 93 c3 3a 	sts	0x3AC3, r25	; 0x803ac3 <serTxAddr+0x1>
    110e:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	08 95       	ret

00001120 <SerSpeed>:
    1120:	28 2f       	mov	r18, r24
    1122:	81 11       	cpse	r24, r1
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <SerSpeed+0x8>
    1126:	21 e0       	ldi	r18, 0x01	; 1
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	82 1b       	sub	r24, r18
    112e:	91 09       	sbc	r25, r1
    1130:	98 2f       	mov	r25, r24
    1132:	88 27       	eor	r24, r24
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    113c:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    1140:	08 95       	ret

00001142 <SelectTSens>:
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    1148:	82 e1       	ldi	r24, 0x12	; 18
    114a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    114e:	e0 e0       	ldi	r30, 0x00	; 0
    1150:	f6 e0       	ldi	r31, 0x06	; 6
    1152:	80 81       	ld	r24, Z
    1154:	8b 7f       	andi	r24, 0xFB	; 251
    1156:	80 83       	st	Z, r24
    1158:	8e e1       	ldi	r24, 0x1E	; 30
    115a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    115e:	08 95       	ret

00001160 <SelectAuIn>:
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    1166:	82 e2       	ldi	r24, 0x22	; 34
    1168:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    116c:	e0 e0       	ldi	r30, 0x00	; 0
    116e:	f6 e0       	ldi	r31, 0x06	; 6
    1170:	80 81       	ld	r24, Z
    1172:	84 60       	ori	r24, 0x04	; 4
    1174:	80 83       	st	Z, r24
    1176:	87 e0       	ldi	r24, 0x07	; 7
    1178:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    117c:	08 95       	ret

0000117e <CheckButtons>:
    117e:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <adcBtns>
    1182:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <adcBtns+0x1>
    1186:	24 e0       	ldi	r18, 0x04	; 4
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	2a 95       	dec	r18
    118e:	e1 f7       	brne	.-8      	; 0x1188 <CheckButtons+0xa>
    1190:	99 27       	eor	r25, r25
    1192:	80 36       	cpi	r24, 0x60	; 96
    1194:	91 05       	cpc	r25, r1
    1196:	40 f4       	brcc	.+16     	; 0x11a8 <CheckButtons+0x2a>
    1198:	8f 34       	cpi	r24, 0x4F	; 79
    119a:	91 05       	cpc	r25, r1
    119c:	88 f4       	brcc	.+34     	; 0x11c0 <CheckButtons+0x42>
    119e:	c0 97       	sbiw	r24, 0x30	; 48
    11a0:	09 97       	sbiw	r24, 0x09	; 9
    11a2:	90 f4       	brcc	.+36     	; 0x11c8 <CheckButtons+0x4a>
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	11 c0       	rjmp	.+34     	; 0x11ca <CheckButtons+0x4c>
    11a8:	85 37       	cpi	r24, 0x75	; 117
    11aa:	91 05       	cpc	r25, r1
    11ac:	68 f0       	brcs	.+26     	; 0x11c8 <CheckButtons+0x4a>
    11ae:	8e 38       	cpi	r24, 0x8E	; 142
    11b0:	91 05       	cpc	r25, r1
    11b2:	40 f0       	brcs	.+16     	; 0x11c4 <CheckButtons+0x46>
    11b4:	8e 59       	subi	r24, 0x9E	; 158
    11b6:	91 09       	sbc	r25, r1
    11b8:	81 97       	sbiw	r24, 0x21	; 33
    11ba:	30 f4       	brcc	.+12     	; 0x11c8 <CheckButtons+0x4a>
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <CheckButtons+0x4c>
    11c0:	93 e0       	ldi	r25, 0x03	; 3
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <CheckButtons+0x4c>
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <CheckButtons+0x4c>
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
    11ca:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <previousValue.3908>
    11ce:	98 17       	cp	r25, r24
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <CheckButtons+0x5a>
    11d2:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <previousValue.3908>
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	08 95       	ret

000011da <lfsr>:
    11da:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <lfsrSeed>
    11de:	90 91 64 38 	lds	r25, 0x3864	; 0x803864 <lfsrSeed+0x1>
    11e2:	9c 01       	movw	r18, r24
    11e4:	32 2f       	mov	r19, r18
    11e6:	22 27       	eor	r18, r18
    11e8:	32 95       	swap	r19
    11ea:	33 0f       	add	r19, r19
    11ec:	30 7e       	andi	r19, 0xE0	; 224
    11ee:	82 27       	eor	r24, r18
    11f0:	93 27       	eor	r25, r19
    11f2:	9c 01       	movw	r18, r24
    11f4:	23 2f       	mov	r18, r19
    11f6:	33 27       	eor	r19, r19
    11f8:	26 95       	lsr	r18
    11fa:	82 27       	eor	r24, r18
    11fc:	93 27       	eor	r25, r19
    11fe:	9c 01       	movw	r18, r24
    1200:	36 95       	lsr	r19
    1202:	32 2f       	mov	r19, r18
    1204:	22 27       	eor	r18, r18
    1206:	37 95       	ror	r19
    1208:	27 95       	ror	r18
    120a:	82 27       	eor	r24, r18
    120c:	93 27       	eor	r25, r19
    120e:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <lfsrSeed>
    1212:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <lfsrSeed+0x1>
    1216:	08 95       	ret

00001218 <floatSpeed>:
    1218:	a0 e0       	ldi	r26, 0x00	; 0
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e2 e1       	ldi	r30, 0x12	; 18
    121e:	f9 e0       	ldi	r31, 0x09	; 9
    1220:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__prologue_saves__+0x16>
    1224:	7b 01       	movw	r14, r22
    1226:	8a 01       	movw	r16, r20
    1228:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    122c:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1230:	e8 2f       	mov	r30, r24
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	31 97       	sbiw	r30, 0x01	; 1
    1236:	e7 70       	andi	r30, 0x07	; 7
    1238:	ff 27       	eor	r31, r31
    123a:	e4 5d       	subi	r30, 0xD4	; 212
    123c:	f7 4c       	sbci	r31, 0xC7	; 199
    123e:	d0 80       	ld	r13, Z
    1240:	cc df       	rcall	.-104    	; 0x11da <lfsr>
    1242:	8d 21       	and	r24, r13
    1244:	c8 0f       	add	r28, r24
    1246:	d1 1d       	adc	r29, r1
    1248:	c8 df       	rcall	.-112    	; 0x11da <lfsr>
    124a:	8d 21       	and	r24, r13
    124c:	c8 1b       	sub	r28, r24
    124e:	d1 09       	sbc	r29, r1
    1250:	0c 17       	cp	r16, r28
    1252:	1d 07       	cpc	r17, r29
    1254:	08 f4       	brcc	.+2      	; 0x1258 <floatSpeed+0x40>
    1256:	e8 01       	movw	r28, r16
    1258:	c7 01       	movw	r24, r14
    125a:	ec 16       	cp	r14, r28
    125c:	fd 06       	cpc	r15, r29
    125e:	08 f4       	brcc	.+2      	; 0x1262 <floatSpeed+0x4a>
    1260:	ce 01       	movw	r24, r28
    1262:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1266:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	e7 e0       	ldi	r30, 0x07	; 7
    1270:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__+0x16>

00001274 <floatAround>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	c8 2f       	mov	r28, r24
    127e:	d4 2f       	mov	r29, r20
    1280:	02 2f       	mov	r16, r18
    1282:	e6 2f       	mov	r30, r22
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	e7 70       	andi	r30, 0x07	; 7
    128a:	ff 27       	eor	r31, r31
    128c:	e4 5d       	subi	r30, 0xD4	; 212
    128e:	f7 4c       	sbci	r31, 0xC7	; 199
    1290:	10 81       	ld	r17, Z
    1292:	a3 df       	rcall	.-186    	; 0x11da <lfsr>
    1294:	81 23       	and	r24, r17
    1296:	c8 0f       	add	r28, r24
    1298:	a0 df       	rcall	.-192    	; 0x11da <lfsr>
    129a:	81 23       	and	r24, r17
    129c:	c8 1b       	sub	r28, r24
    129e:	8c 2f       	mov	r24, r28
    12a0:	00 23       	and	r16, r16
    12a2:	41 f0       	breq	.+16     	; 0x12b4 <floatAround+0x40>
    12a4:	9c 2f       	mov	r25, r28
    12a6:	0c 17       	cp	r16, r28
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <floatAround+0x38>
    12aa:	90 2f       	mov	r25, r16
    12ac:	8d 2f       	mov	r24, r29
    12ae:	d9 17       	cp	r29, r25
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <floatAround+0x40>
    12b2:	89 2f       	mov	r24, r25
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	8d 17       	cp	r24, r29
    12ba:	10 f0       	brcs	.+4      	; 0x12c0 <floatAround+0x4c>
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	2d 2f       	mov	r18, r29
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	24 23       	and	r18, r20
    12c6:	35 23       	and	r19, r21
    12c8:	23 2b       	or	r18, r19
    12ca:	09 f0       	breq	.+2      	; 0x12ce <floatAround+0x5a>
    12cc:	8d 2f       	mov	r24, r29
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <SaveGameState>:
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	64 97       	sbiw	r28, 0x14	; 20
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	44 e1       	ldi	r20, 0x14	; 20
    12f2:	be 01       	movw	r22, r28
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	8d de       	rcall	.-742    	; 0x1016 <EERead>
    12fc:	8a e6       	ldi	r24, 0x6A	; 106
    12fe:	c8 2e       	mov	r12, r24
    1300:	8a e3       	ldi	r24, 0x3A	; 58
    1302:	d8 2e       	mov	r13, r24
    1304:	8e 01       	movw	r16, r28
    1306:	0f 5f       	subi	r16, 0xFF	; 255
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	f1 2c       	mov	r15, r1
    130c:	f8 01       	movw	r30, r16
    130e:	81 91       	ld	r24, Z+
    1310:	8f 01       	movw	r16, r30
    1312:	f6 01       	movw	r30, r12
    1314:	90 81       	ld	r25, Z
    1316:	98 13       	cpse	r25, r24
    1318:	08 c0       	rjmp	.+16     	; 0x132a <SaveGameState+0x52>
    131a:	f3 94       	inc	r15
    131c:	ff ef       	ldi	r31, 0xFF	; 255
    131e:	cf 1a       	sub	r12, r31
    1320:	df 0a       	sbc	r13, r31
    1322:	80 e1       	ldi	r24, 0x10	; 16
    1324:	f8 12       	cpse	r15, r24
    1326:	f2 cf       	rjmp	.-28     	; 0x130c <SaveGameState+0x34>
    1328:	08 c0       	rjmp	.+16     	; 0x133a <SaveGameState+0x62>
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	b6 01       	movw	r22, r12
    132e:	8f 2d       	mov	r24, r15
    1330:	82 de       	rcall	.-764    	; 0x1036 <EEWrite>
    1332:	88 23       	and	r24, r24
    1334:	91 f3       	breq	.-28     	; 0x131a <SaveGameState+0x42>
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	36 c0       	rjmp	.+108    	; 0x13a6 <SaveGameState+0xce>
    133a:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    133e:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    1342:	30 93 7a 3a 	sts	0x3A7A, r19	; 0x803a7a <gameState+0x10>
    1346:	20 93 7b 3a 	sts	0x3A7B, r18	; 0x803a7b <gameState+0x11>
    134a:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    134e:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    1352:	90 93 7c 3a 	sts	0x3A7C, r25	; 0x803a7c <gameState+0x12>
    1356:	80 93 7d 3a 	sts	0x3A7D, r24	; 0x803a7d <gameState+0x13>
    135a:	89 89       	ldd	r24, Y+17	; 0x11
    135c:	9a 89       	ldd	r25, Y+18	; 0x12
    135e:	98 27       	eor	r25, r24
    1360:	89 27       	eor	r24, r25
    1362:	98 27       	eor	r25, r24
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	69 f4       	brne	.+26     	; 0x1384 <SaveGameState+0xac>
    136a:	8b 89       	ldd	r24, Y+19	; 0x13
    136c:	9c 89       	ldd	r25, Y+20	; 0x14
    136e:	98 27       	eor	r25, r24
    1370:	89 27       	eor	r24, r25
    1372:	98 27       	eor	r25, r24
    1374:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    1378:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    137c:	28 17       	cp	r18, r24
    137e:	39 07       	cpc	r19, r25
    1380:	49 f4       	brne	.+18     	; 0x1394 <SaveGameState+0xbc>
    1382:	10 c0       	rjmp	.+32     	; 0x13a4 <SaveGameState+0xcc>
    1384:	42 e0       	ldi	r20, 0x02	; 2
    1386:	6a e7       	ldi	r22, 0x7A	; 122
    1388:	7a e3       	ldi	r23, 0x3A	; 58
    138a:	80 e1       	ldi	r24, 0x10	; 16
    138c:	54 de       	rcall	.-856    	; 0x1036 <EEWrite>
    138e:	88 23       	and	r24, r24
    1390:	61 f3       	breq	.-40     	; 0x136a <SaveGameState+0x92>
    1392:	d1 cf       	rjmp	.-94     	; 0x1336 <SaveGameState+0x5e>
    1394:	42 e0       	ldi	r20, 0x02	; 2
    1396:	6c e7       	ldi	r22, 0x7C	; 124
    1398:	7a e3       	ldi	r23, 0x3A	; 58
    139a:	82 e1       	ldi	r24, 0x12	; 18
    139c:	4c de       	rcall	.-872    	; 0x1036 <EEWrite>
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	81 11       	cpse	r24, r1
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <SaveGameState+0xce>
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	89 2f       	mov	r24, r25
    13a8:	64 96       	adiw	r28, 0x14	; 20
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	08 95       	ret

000013be <ReadStatusBit>:
    13be:	e8 2f       	mov	r30, r24
    13c0:	ef 77       	andi	r30, 0x7F	; 127
    13c2:	e6 95       	lsr	r30
    13c4:	e6 95       	lsr	r30
    13c6:	e6 95       	lsr	r30
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	e6 59       	subi	r30, 0x96	; 150
    13cc:	f5 4c       	sbci	r31, 0xC5	; 197
    13ce:	20 81       	ld	r18, Z
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	87 70       	andi	r24, 0x07	; 7
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <ReadStatusBit+0x1e>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <ReadStatusBit+0x1a>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	08 95       	ret

000013e6 <UpdateState>:
    13e6:	e8 2f       	mov	r30, r24
    13e8:	ef 77       	andi	r30, 0x7F	; 127
    13ea:	e9 f0       	breq	.+58     	; 0x1426 <UpdateState+0x40>
    13ec:	e6 95       	lsr	r30
    13ee:	e6 95       	lsr	r30
    13f0:	e6 95       	lsr	r30
    13f2:	28 2f       	mov	r18, r24
    13f4:	27 70       	andi	r18, 0x07	; 7
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e6 59       	subi	r30, 0x96	; 150
    13fa:	f5 4c       	sbci	r31, 0xC5	; 197
    13fc:	87 ff       	sbrs	r24, 7
    13fe:	0a c0       	rjmp	.+20     	; 0x1414 <UpdateState+0x2e>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <UpdateState+0x22>
    1406:	88 0f       	add	r24, r24
    1408:	2a 95       	dec	r18
    140a:	ea f7       	brpl	.-6      	; 0x1406 <UpdateState+0x20>
    140c:	80 95       	com	r24
    140e:	90 81       	ld	r25, Z
    1410:	89 23       	and	r24, r25
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <UpdateState+0x3e>
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	01 c0       	rjmp	.+2      	; 0x141c <UpdateState+0x36>
    141a:	88 0f       	add	r24, r24
    141c:	2a 95       	dec	r18
    141e:	ea f7       	brpl	.-6      	; 0x141a <UpdateState+0x34>
    1420:	90 81       	ld	r25, Z
    1422:	89 2b       	or	r24, r25
    1424:	80 83       	st	Z, r24
    1426:	08 95       	ret

00001428 <CheckState>:
    1428:	cf 93       	push	r28
    142a:	c8 2f       	mov	r28, r24
    142c:	8f 77       	andi	r24, 0x7F	; 127
    142e:	c7 df       	rcall	.-114    	; 0x13be <ReadStatusBit>
    1430:	2c 2f       	mov	r18, r28
    1432:	22 1f       	adc	r18, r18
    1434:	22 27       	eor	r18, r18
    1436:	22 1f       	adc	r18, r18
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	81 11       	cpse	r24, r1
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <CheckState+0x18>
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	82 2f       	mov	r24, r18
    1442:	89 27       	eor	r24, r25
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <getID>:
    1448:	e3 e0       	ldi	r30, 0x03	; 3
    144a:	f1 e1       	ldi	r31, 0x11	; 17
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	91 91       	ld	r25, Z+
    1450:	89 0f       	add	r24, r25
    1452:	ed 30       	cpi	r30, 0x0D	; 13
    1454:	91 e1       	ldi	r25, 0x11	; 17
    1456:	f9 07       	cpc	r31, r25
    1458:	d1 f7       	brne	.-12     	; 0x144e <getID+0x6>
    145a:	83 70       	andi	r24, 0x03	; 3
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	98 0f       	add	r25, r24
    1460:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <whoami>
    1464:	08 95       	ret

00001466 <Reset>:
    1466:	cf 93       	push	r28
    1468:	ea e6       	ldi	r30, 0x6A	; 106
    146a:	fa e3       	ldi	r31, 0x3A	; 58
    146c:	11 92       	st	Z+, r1
    146e:	8a e3       	ldi	r24, 0x3A	; 58
    1470:	ee 37       	cpi	r30, 0x7E	; 126
    1472:	f8 07       	cpc	r31, r24
    1474:	d9 f7       	brne	.-10     	; 0x146c <Reset+0x6>
    1476:	e8 df       	rcall	.-48     	; 0x1448 <getID>
    1478:	c8 2f       	mov	r28, r24
    147a:	81 11       	cpse	r24, r1
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <Reset+0x1c>
    147e:	8e e6       	ldi	r24, 0x6E	; 110
    1480:	0b c0       	rjmp	.+22     	; 0x1498 <Reset+0x32>
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	11 f4       	brne	.+4      	; 0x148a <Reset+0x24>
    1486:	8f e6       	ldi	r24, 0x6F	; 111
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <Reset+0x32>
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	11 f4       	brne	.+4      	; 0x1492 <Reset+0x2c>
    148e:	80 e7       	ldi	r24, 0x70	; 112
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <Reset+0x32>
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	11 f4       	brne	.+4      	; 0x149a <Reset+0x34>
    1496:	81 e7       	ldi	r24, 0x71	; 113
    1498:	a6 df       	rcall	.-180    	; 0x13e6 <UpdateState>
    149a:	84 e6       	ldi	r24, 0x64	; 100
    149c:	8c 0f       	add	r24, r28
    149e:	a3 df       	rcall	.-186    	; 0x13e6 <UpdateState>
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <LoadGameState>:
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	44 e1       	ldi	r20, 0x14	; 20
    14aa:	6a e6       	ldi	r22, 0x6A	; 106
    14ac:	7a e3       	ldi	r23, 0x3A	; 58
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	b2 dd       	rcall	.-1180   	; 0x1016 <EERead>
    14b2:	ce e6       	ldi	r28, 0x6E	; 110
    14b4:	d0 e0       	ldi	r29, 0x00	; 0
    14b6:	8c 2f       	mov	r24, r28
    14b8:	82 df       	rcall	.-252    	; 0x13be <ReadStatusBit>
    14ba:	d8 0f       	add	r29, r24
    14bc:	cf 5f       	subi	r28, 0xFF	; 255
    14be:	c2 37       	cpi	r28, 0x72	; 114
    14c0:	d1 f7       	brne	.-12     	; 0x14b6 <LoadGameState+0x12>
    14c2:	d1 30       	cpi	r29, 0x01	; 1
    14c4:	11 f0       	breq	.+4      	; 0x14ca <LoadGameState+0x26>
    14c6:	cf df       	rcall	.-98     	; 0x1466 <Reset>
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <LoadGameState+0x28>
    14ca:	be df       	rcall	.-132    	; 0x1448 <getID>
    14cc:	80 91 7a 3a 	lds	r24, 0x3A7A	; 0x803a7a <gameState+0x10>
    14d0:	90 91 7b 3a 	lds	r25, 0x3A7B	; 0x803a7b <gameState+0x11>
    14d4:	98 27       	eor	r25, r24
    14d6:	89 27       	eor	r24, r25
    14d8:	98 27       	eor	r25, r24
    14da:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    14de:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
    14e2:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <gameState+0x12>
    14e6:	90 91 7d 3a 	lds	r25, 0x3A7D	; 0x803a7d <gameState+0x13>
    14ea:	98 27       	eor	r25, r24
    14ec:	89 27       	eor	r24, r25
    14ee:	98 27       	eor	r25, r24
    14f0:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    14f4:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <HotSummer>:
    14fe:	cf 93       	push	r28
    1500:	86 e7       	ldi	r24, 0x76	; 118
    1502:	92 df       	rcall	.-220    	; 0x1428 <CheckState>
    1504:	c8 2f       	mov	r28, r24
    1506:	88 23       	and	r24, r24
    1508:	81 f0       	breq	.+32     	; 0x152a <HotSummer+0x2c>
    150a:	e0 91 5e be 	lds	r30, 0xBE5E	; 0x80be5e <__bss_end+0x8343>
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	e4 53       	subi	r30, 0x34	; 52
    1512:	f5 4c       	sbci	r31, 0xC5	; 197
    1514:	10 82       	st	Z, r1
    1516:	e0 91 5f be 	lds	r30, 0xBE5F	; 0x80be5f <__bss_end+0x8344>
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1520:	e4 53       	subi	r30, 0x34	; 52
    1522:	f5 4c       	sbci	r31, 0xC5	; 197
    1524:	80 83       	st	Z, r24
    1526:	c1 e0       	ldi	r28, 0x01	; 1
    1528:	49 c0       	rjmp	.+146    	; 0x15bc <HotSummer+0xbe>
    152a:	85 e7       	ldi	r24, 0x75	; 117
    152c:	7d df       	rcall	.-262    	; 0x1428 <CheckState>
    152e:	88 23       	and	r24, r24
    1530:	49 f1       	breq	.+82     	; 0x1584 <HotSummer+0x86>
    1532:	e0 91 5e be 	lds	r30, 0xBE5E	; 0x80be5e <__bss_end+0x8343>
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    153c:	e4 53       	subi	r30, 0x34	; 52
    153e:	f5 4c       	sbci	r31, 0xC5	; 197
    1540:	80 83       	st	Z, r24
    1542:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <cooledDown.3972>
    1546:	88 23       	and	r24, r24
    1548:	71 f0       	breq	.+28     	; 0x1566 <HotSummer+0x68>
    154a:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    154e:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    1552:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    1556:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    155a:	80 96       	adiw	r24, 0x20	; 32
    155c:	28 17       	cp	r18, r24
    155e:	39 07       	cpc	r19, r25
    1560:	10 f0       	brcs	.+4      	; 0x1566 <HotSummer+0x68>
    1562:	86 e7       	ldi	r24, 0x76	; 118
    1564:	2a c0       	rjmp	.+84     	; 0x15ba <HotSummer+0xbc>
    1566:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    156a:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    156e:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    1572:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1576:	08 96       	adiw	r24, 0x08	; 8
    1578:	82 17       	cp	r24, r18
    157a:	93 07       	cpc	r25, r19
    157c:	18 f0       	brcs	.+6      	; 0x1584 <HotSummer+0x86>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <cooledDown.3972>
    1584:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    1588:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    158c:	89 2b       	or	r24, r25
    158e:	41 f4       	brne	.+16     	; 0x15a0 <HotSummer+0xa2>
    1590:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    1594:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1598:	80 93 c9 3a 	sts	0x3AC9, r24	; 0x803ac9 <calTemp>
    159c:	90 93 ca 3a 	sts	0x3ACA, r25	; 0x803aca <calTemp+0x1>
    15a0:	80 91 c9 3a 	lds	r24, 0x3AC9	; 0x803ac9 <calTemp>
    15a4:	90 91 ca 3a 	lds	r25, 0x3ACA	; 0x803aca <calTemp+0x1>
    15a8:	20 91 f6 3a 	lds	r18, 0x3AF6	; 0x803af6 <adcTemp>
    15ac:	30 91 f7 3a 	lds	r19, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    15b0:	80 96       	adiw	r24, 0x20	; 32
    15b2:	28 17       	cp	r18, r24
    15b4:	39 07       	cpc	r19, r25
    15b6:	10 f0       	brcs	.+4      	; 0x15bc <HotSummer+0xbe>
    15b8:	85 e7       	ldi	r24, 0x75	; 117
    15ba:	15 df       	rcall	.-470    	; 0x13e6 <UpdateState>
    15bc:	8c 2f       	mov	r24, r28
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <WingBar>:
    15c2:	e0 e6       	ldi	r30, 0x60	; 96
    15c4:	fe eb       	ldi	r31, 0xBE	; 190
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a5 81       	ldd	r26, Z+5	; 0x05
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	98 17       	cp	r25, r24
    15ce:	34 f4       	brge	.+12     	; 0x15dc <WingBar+0x1a>
    15d0:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15d4:	a4 53       	subi	r26, 0x34	; 52
    15d6:	b5 4c       	sbci	r27, 0xC5	; 197
    15d8:	2c 93       	st	X, r18
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <WingBar+0x20>
    15dc:	a4 53       	subi	r26, 0x34	; 52
    15de:	b5 4c       	sbci	r27, 0xC5	; 197
    15e0:	1c 92       	st	X, r1
    15e2:	a0 81       	ld	r26, Z
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	96 17       	cp	r25, r22
    15e8:	34 f4       	brge	.+12     	; 0x15f6 <WingBar+0x34>
    15ea:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15ee:	a4 53       	subi	r26, 0x34	; 52
    15f0:	b5 4c       	sbci	r27, 0xC5	; 197
    15f2:	2c 93       	st	X, r18
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <WingBar+0x3a>
    15f6:	a4 53       	subi	r26, 0x34	; 52
    15f8:	b5 4c       	sbci	r27, 0xC5	; 197
    15fa:	1c 92       	st	X, r1
    15fc:	9f 5f       	subi	r25, 0xFF	; 255
    15fe:	31 96       	adiw	r30, 0x01	; 1
    1600:	95 30       	cpi	r25, 0x05	; 5
    1602:	11 f7       	brne	.-60     	; 0x15c8 <WingBar+0x6>
    1604:	08 95       	ret

00001606 <SetBothEyes>:
    1606:	aa e6       	ldi	r26, 0x6A	; 106
    1608:	be eb       	ldi	r27, 0xBE	; 190
    160a:	ec 91       	ld	r30, X
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	e4 53       	subi	r30, 0x34	; 52
    1610:	f5 4c       	sbci	r31, 0xC5	; 197
    1612:	80 83       	st	Z, r24
    1614:	12 96       	adiw	r26, 0x02	; 2
    1616:	ec 91       	ld	r30, X
    1618:	12 97       	sbiw	r26, 0x02	; 2
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	e4 53       	subi	r30, 0x34	; 52
    161e:	f5 4c       	sbci	r31, 0xC5	; 197
    1620:	60 83       	st	Z, r22
    1622:	11 96       	adiw	r26, 0x01	; 1
    1624:	ec 91       	ld	r30, X
    1626:	11 97       	sbiw	r26, 0x01	; 1
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	e4 53       	subi	r30, 0x34	; 52
    162c:	f5 4c       	sbci	r31, 0xC5	; 197
    162e:	80 83       	st	Z, r24
    1630:	13 96       	adiw	r26, 0x03	; 3
    1632:	ec 91       	ld	r30, X
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	e4 53       	subi	r30, 0x34	; 52
    1638:	f5 4c       	sbci	r31, 0xC5	; 197
    163a:	60 83       	st	Z, r22
    163c:	08 95       	ret

0000163e <SetHackerLeds>:
    163e:	ae e6       	ldi	r26, 0x6E	; 110
    1640:	be eb       	ldi	r27, 0xBE	; 190
    1642:	ed 91       	ld	r30, X+
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	e4 53       	subi	r30, 0x34	; 52
    1648:	f5 4c       	sbci	r31, 0xC5	; 197
    164a:	80 83       	st	Z, r24
    164c:	15 96       	adiw	r26, 0x05	; 5
    164e:	ec 91       	ld	r30, X
    1650:	15 97       	sbiw	r26, 0x05	; 5
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e4 53       	subi	r30, 0x34	; 52
    1656:	f5 4c       	sbci	r31, 0xC5	; 197
    1658:	60 83       	st	Z, r22
    165a:	9e eb       	ldi	r25, 0xBE	; 190
    165c:	a4 37       	cpi	r26, 0x74	; 116
    165e:	b9 07       	cpc	r27, r25
    1660:	81 f7       	brne	.-32     	; 0x1642 <SetHackerLeds+0x4>
    1662:	08 95       	ret

00001664 <GenerateBlinks>:
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	fb e0       	ldi	r31, 0x0B	; 11
    166c:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__prologue_saves__+0x14>
    1670:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1674:	88 23       	and	r24, r24
    1676:	29 f0       	breq	.+10     	; 0x1682 <GenerateBlinks+0x1e>
    1678:	80 e4       	ldi	r24, 0x40	; 64
    167a:	d6 de       	rcall	.-596    	; 0x1428 <CheckState>
    167c:	81 11       	cpse	r24, r1
    167e:	24 c0       	rjmp	.+72     	; 0x16c8 <GenerateBlinks+0x64>
    1680:	50 c0       	rjmp	.+160    	; 0x1722 <GenerateBlinks+0xbe>
    1682:	ce e6       	ldi	r28, 0x6E	; 110
    1684:	de eb       	ldi	r29, 0xBE	; 190
    1686:	1a e7       	ldi	r17, 0x7A	; 122
    1688:	81 2f       	mov	r24, r17
    168a:	ce de       	rcall	.-612    	; 0x1428 <CheckState>
    168c:	ee 81       	ldd	r30, Y+6	; 0x06
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	88 23       	and	r24, r24
    1692:	59 f0       	breq	.+22     	; 0x16aa <GenerateBlinks+0x46>
    1694:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1698:	e4 53       	subi	r30, 0x34	; 52
    169a:	f5 4c       	sbci	r31, 0xC5	; 197
    169c:	80 83       	st	Z, r24
    169e:	e8 81       	ld	r30, Y
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	e4 53       	subi	r30, 0x34	; 52
    16a4:	f5 4c       	sbci	r31, 0xC5	; 197
    16a6:	10 82       	st	Z, r1
    16a8:	0a c0       	rjmp	.+20     	; 0x16be <GenerateBlinks+0x5a>
    16aa:	e4 53       	subi	r30, 0x34	; 52
    16ac:	f5 4c       	sbci	r31, 0xC5	; 197
    16ae:	10 82       	st	Z, r1
    16b0:	e8 81       	ld	r30, Y
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16b8:	e4 53       	subi	r30, 0x34	; 52
    16ba:	f5 4c       	sbci	r31, 0xC5	; 197
    16bc:	80 83       	st	Z, r24
    16be:	1f 5f       	subi	r17, 0xFF	; 255
    16c0:	21 96       	adiw	r28, 0x01	; 1
    16c2:	10 38       	cpi	r17, 0x80	; 128
    16c4:	09 f7       	brne	.-62     	; 0x1688 <GenerateBlinks+0x24>
    16c6:	d8 cf       	rjmp	.-80     	; 0x1678 <GenerateBlinks+0x14>
    16c8:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <HeartCount>
    16cc:	98 2f       	mov	r25, r24
    16ce:	9d 7f       	andi	r25, 0xFD	; 253
    16d0:	e0 91 5d be 	lds	r30, 0xBE5D	; 0x80be5d <__bss_end+0x8342>
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	91 30       	cpi	r25, 0x01	; 1
    16d8:	11 f0       	breq	.+4      	; 0x16de <GenerateBlinks+0x7a>
    16da:	85 30       	cpi	r24, 0x05	; 5
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <GenerateBlinks+0x82>
    16de:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16e2:	96 95       	lsr	r25
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <GenerateBlinks+0x8e>
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	11 f0       	breq	.+4      	; 0x16ee <GenerateBlinks+0x8a>
    16ea:	84 30       	cpi	r24, 0x04	; 4
    16ec:	31 f4       	brne	.+12     	; 0x16fa <GenerateBlinks+0x96>
    16ee:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16f2:	e4 53       	subi	r30, 0x34	; 52
    16f4:	f5 4c       	sbci	r31, 0xC5	; 197
    16f6:	90 83       	st	Z, r25
    16f8:	0c c0       	rjmp	.+24     	; 0x1712 <GenerateBlinks+0xae>
    16fa:	88 23       	and	r24, r24
    16fc:	11 f0       	breq	.+4      	; 0x1702 <GenerateBlinks+0x9e>
    16fe:	86 30       	cpi	r24, 0x06	; 6
    1700:	29 f4       	brne	.+10     	; 0x170c <GenerateBlinks+0xa8>
    1702:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1706:	96 95       	lsr	r25
    1708:	96 95       	lsr	r25
    170a:	f3 cf       	rjmp	.-26     	; 0x16f2 <GenerateBlinks+0x8e>
    170c:	e4 53       	subi	r30, 0x34	; 52
    170e:	f5 4c       	sbci	r31, 0xC5	; 197
    1710:	10 82       	st	Z, r1
    1712:	80 32       	cpi	r24, 0x20	; 32
    1714:	20 f4       	brcc	.+8      	; 0x171e <GenerateBlinks+0xba>
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <HeartCount>
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GenerateBlinks+0xbe>
    171e:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <HeartCount>
    1722:	90 91 61 38 	lds	r25, 0x3861	; 0x803861 <LedCount>
    1726:	9f 5f       	subi	r25, 0xFF	; 255
    1728:	90 93 61 38 	sts	0x3861, r25	; 0x803861 <LedCount>
    172c:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <effect>
    1730:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <effect+0x1>
    1734:	ef 71       	andi	r30, 0x1F	; 31
    1736:	ff 27       	eor	r31, r31
    1738:	e2 31       	cpi	r30, 0x12	; 18
    173a:	f1 05       	cpc	r31, r1
    173c:	08 f0       	brcs	.+2      	; 0x1740 <GenerateBlinks+0xdc>
    173e:	ea c0       	rjmp	.+468    	; 0x1914 <GenerateBlinks+0x2b0>
    1740:	e2 5c       	subi	r30, 0xC2	; 194
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__tablejump2__>
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	5c df       	rcall	.-328    	; 0x1606 <SetBothEyes>
    174e:	8f e1       	ldi	r24, 0x1F	; 31
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1756:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    175a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    175e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1762:	84 fd       	sbrc	r24, 4
    1764:	d7 c0       	rjmp	.+430    	; 0x1914 <GenerateBlinks+0x2b0>
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	2b df       	rcall	.-426    	; 0x15c2 <WingBar>
    176c:	e0 91 5c be 	lds	r30, 0xBE5C	; 0x80be5c <__bss_end+0x8341>
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	e4 53       	subi	r30, 0x34	; 52
    1774:	f5 4c       	sbci	r31, 0xC5	; 197
    1776:	10 82       	st	Z, r1
    1778:	cd c0       	rjmp	.+410    	; 0x1914 <GenerateBlinks+0x2b0>
    177a:	89 2f       	mov	r24, r25
    177c:	81 70       	andi	r24, 0x01	; 1
    177e:	90 fd       	sbrc	r25, 0
    1780:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	3f df       	rcall	.-386    	; 0x1606 <SetBothEyes>
    1788:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    178c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1790:	84 ff       	sbrs	r24, 4
    1792:	c0 c0       	rjmp	.+384    	; 0x1914 <GenerateBlinks+0x2b0>
    1794:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	51 df       	rcall	.-350    	; 0x163e <SetHackerLeds>
    179c:	bb c0       	rjmp	.+374    	; 0x1914 <GenerateBlinks+0x2b0>
    179e:	69 2f       	mov	r22, r25
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	93 ff       	sbrs	r25, 3
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GenerateBlinks+0x146>
    17a6:	60 95       	com	r22
    17a8:	70 95       	com	r23
    17aa:	95 e0       	ldi	r25, 0x05	; 5
    17ac:	66 0f       	add	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	9a 95       	dec	r25
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <GenerateBlinks+0x148>
    17b4:	61 5e       	subi	r22, 0xE1	; 225
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	26 df       	rcall	.-436    	; 0x1606 <SetBothEyes>
    17ba:	ac c0       	rjmp	.+344    	; 0x1914 <GenerateBlinks+0x2b0>
    17bc:	89 2f       	mov	r24, r25
    17be:	83 70       	andi	r24, 0x03	; 3
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <GenerateBlinks+0x160>
    17c2:	a8 c0       	rjmp	.+336    	; 0x1914 <GenerateBlinks+0x2b0>
    17c4:	92 ff       	sbrs	r25, 2
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <GenerateBlinks+0x16a>
    17c8:	65 e0       	ldi	r22, 0x05	; 5
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <GenerateBlinks+0x16e>
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	f7 de       	rcall	.-530    	; 0x15c2 <WingBar>
    17d4:	9f c0       	rjmp	.+318    	; 0x1914 <GenerateBlinks+0x2b0>
    17d6:	95 30       	cpi	r25, 0x05	; 5
    17d8:	10 f0       	brcs	.+4      	; 0x17de <GenerateBlinks+0x17a>
    17da:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <LedCount>
    17de:	40 91 61 38 	lds	r20, 0x3861	; 0x803861 <LedCount>
    17e2:	24 2f       	mov	r18, r20
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	f9 01       	movw	r30, r18
    17e8:	e0 5a       	subi	r30, 0xA0	; 160
    17ea:	f1 44       	sbci	r31, 0x41	; 65
    17ec:	e5 81       	ldd	r30, Z+5	; 0x05
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	e4 53       	subi	r30, 0x34	; 52
    17f2:	f5 4c       	sbci	r31, 0xC5	; 197
    17f4:	10 82       	st	Z, r1
    17f6:	44 30       	cpi	r20, 0x04	; 4
    17f8:	19 f0       	breq	.+6      	; 0x1800 <GenerateBlinks+0x19c>
    17fa:	c9 01       	movw	r24, r18
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <GenerateBlinks+0x1a0>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	fc 01       	movw	r30, r24
    1806:	e0 5a       	subi	r30, 0xA0	; 160
    1808:	f1 44       	sbci	r31, 0x41	; 65
    180a:	e5 81       	ldd	r30, Z+5	; 0x05
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1812:	e4 53       	subi	r30, 0x34	; 52
    1814:	f5 4c       	sbci	r31, 0xC5	; 197
    1816:	80 83       	st	Z, r24
    1818:	e4 e6       	ldi	r30, 0x64	; 100
    181a:	fe eb       	ldi	r31, 0xBE	; 190
    181c:	e2 1b       	sub	r30, r18
    181e:	f3 0b       	sbc	r31, r19
    1820:	e0 81       	ld	r30, Z
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	e4 53       	subi	r30, 0x34	; 52
    1826:	f5 4c       	sbci	r31, 0xC5	; 197
    1828:	10 82       	st	Z, r1
    182a:	44 30       	cpi	r20, 0x04	; 4
    182c:	29 f0       	breq	.+10     	; 0x1838 <GenerateBlinks+0x1d4>
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	82 1b       	sub	r24, r18
    1834:	93 0b       	sbc	r25, r19
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GenerateBlinks+0x1d8>
    1838:	84 e0       	ldi	r24, 0x04	; 4
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	fc 01       	movw	r30, r24
    183e:	e0 5a       	subi	r30, 0xA0	; 160
    1840:	f1 44       	sbci	r31, 0x41	; 65
    1842:	e0 81       	ld	r30, Z
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    184a:	e4 53       	subi	r30, 0x34	; 52
    184c:	f5 4c       	sbci	r31, 0xC5	; 197
    184e:	80 83       	st	Z, r24
    1850:	61 c0       	rjmp	.+194    	; 0x1914 <GenerateBlinks+0x2b0>
    1852:	c0 e6       	ldi	r28, 0x60	; 96
    1854:	de eb       	ldi	r29, 0xBE	; 190
    1856:	85 e6       	ldi	r24, 0x65	; 101
    1858:	e8 2e       	mov	r14, r24
    185a:	8e eb       	ldi	r24, 0xBE	; 190
    185c:	f8 2e       	mov	r15, r24
    185e:	6e 01       	movw	r12, r28
    1860:	0d 81       	ldd	r16, Y+5	; 0x05
    1862:	10 e0       	ldi	r17, 0x00	; 0
    1864:	ba dc       	rcall	.-1676   	; 0x11da <lfsr>
    1866:	87 ff       	sbrs	r24, 7
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <GenerateBlinks+0x20c>
    186a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <GenerateBlinks+0x20e>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	f8 01       	movw	r30, r16
    1874:	e4 53       	subi	r30, 0x34	; 52
    1876:	f5 4c       	sbci	r31, 0xC5	; 197
    1878:	80 83       	st	Z, r24
    187a:	21 96       	adiw	r28, 0x01	; 1
    187c:	f6 01       	movw	r30, r12
    187e:	00 81       	ld	r16, Z
    1880:	10 e0       	ldi	r17, 0x00	; 0
    1882:	ab dc       	rcall	.-1706   	; 0x11da <lfsr>
    1884:	87 ff       	sbrs	r24, 7
    1886:	03 c0       	rjmp	.+6      	; 0x188e <GenerateBlinks+0x22a>
    1888:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <GenerateBlinks+0x22c>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	f8 01       	movw	r30, r16
    1892:	e4 53       	subi	r30, 0x34	; 52
    1894:	f5 4c       	sbci	r31, 0xC5	; 197
    1896:	80 83       	st	Z, r24
    1898:	ec 16       	cp	r14, r28
    189a:	fd 06       	cpc	r15, r29
    189c:	01 f7       	brne	.-64     	; 0x185e <GenerateBlinks+0x1fa>
    189e:	3a c0       	rjmp	.+116    	; 0x1914 <GenerateBlinks+0x2b0>
    18a0:	90 fd       	sbrc	r25, 0
    18a2:	38 c0       	rjmp	.+112    	; 0x1914 <GenerateBlinks+0x2b0>
    18a4:	e0 e6       	ldi	r30, 0x60	; 96
    18a6:	fe eb       	ldi	r31, 0xBE	; 190
    18a8:	84 e6       	ldi	r24, 0x64	; 100
    18aa:	9e eb       	ldi	r25, 0xBE	; 190
    18ac:	9f 01       	movw	r18, r30
    18ae:	a5 81       	ldd	r26, Z+5	; 0x05
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	c6 81       	ldd	r28, Z+6	; 0x06
    18b4:	d0 e0       	ldi	r29, 0x00	; 0
    18b6:	c4 53       	subi	r28, 0x34	; 52
    18b8:	d5 4c       	sbci	r29, 0xC5	; 197
    18ba:	48 81       	ld	r20, Y
    18bc:	a4 53       	subi	r26, 0x34	; 52
    18be:	b5 4c       	sbci	r27, 0xC5	; 197
    18c0:	4c 93       	st	X, r20
    18c2:	31 96       	adiw	r30, 0x01	; 1
    18c4:	e9 01       	movw	r28, r18
    18c6:	a8 81       	ld	r26, Y
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	c0 81       	ld	r28, Z
    18cc:	d0 e0       	ldi	r29, 0x00	; 0
    18ce:	c4 53       	subi	r28, 0x34	; 52
    18d0:	d5 4c       	sbci	r29, 0xC5	; 197
    18d2:	28 81       	ld	r18, Y
    18d4:	a4 53       	subi	r26, 0x34	; 52
    18d6:	b5 4c       	sbci	r27, 0xC5	; 197
    18d8:	2c 93       	st	X, r18
    18da:	8e 17       	cp	r24, r30
    18dc:	9f 07       	cpc	r25, r31
    18de:	31 f7       	brne	.-52     	; 0x18ac <GenerateBlinks+0x248>
    18e0:	c0 91 69 be 	lds	r28, 0xBE69	; 0x80be69 <__bss_end+0x834e>
    18e4:	d0 e0       	ldi	r29, 0x00	; 0
    18e6:	79 dc       	rcall	.-1806   	; 0x11da <lfsr>
    18e8:	81 3e       	cpi	r24, 0xE1	; 225
    18ea:	18 f0       	brcs	.+6      	; 0x18f2 <GenerateBlinks+0x28e>
    18ec:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <GenerateBlinks+0x290>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	c4 53       	subi	r28, 0x34	; 52
    18f6:	d5 4c       	sbci	r29, 0xC5	; 197
    18f8:	88 83       	st	Y, r24
    18fa:	c0 91 64 be 	lds	r28, 0xBE64	; 0x80be64 <__bss_end+0x8349>
    18fe:	d0 e0       	ldi	r29, 0x00	; 0
    1900:	6c dc       	rcall	.-1832   	; 0x11da <lfsr>
    1902:	81 3e       	cpi	r24, 0xE1	; 225
    1904:	18 f0       	brcs	.+6      	; 0x190c <GenerateBlinks+0x2a8>
    1906:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    190a:	01 c0       	rjmp	.+2      	; 0x190e <GenerateBlinks+0x2aa>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	c4 53       	subi	r28, 0x34	; 52
    1910:	d5 4c       	sbci	r29, 0xC5	; 197
    1912:	88 83       	st	Y, r24
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	e8 e0       	ldi	r30, 0x08	; 8
    191a:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__epilogue_restores__+0x14>

0000191e <FadeOut>:
    191e:	e0 91 03 38 	lds	r30, 0x3803	; 0x803803 <auRepAddr>
    1922:	f0 91 04 38 	lds	r31, 0x3804	; 0x803804 <auRepAddr+0x1>
    1926:	90 81       	ld	r25, Z
    1928:	99 23       	and	r25, r25
    192a:	a1 f1       	breq	.+104    	; 0x1994 <FadeOut+0x76>
    192c:	20 91 4b 38 	lds	r18, 0x384B	; 0x80384b <fastTicker>
    1930:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <oldTicker>
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	29 1b       	sub	r18, r25
    1938:	31 09       	sbc	r19, r1
    193a:	80 95       	com	r24
    193c:	87 70       	andi	r24, 0x07	; 7
    193e:	a9 01       	movw	r20, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <FadeOut+0x28>
    1942:	55 95       	asr	r21
    1944:	47 95       	ror	r20
    1946:	8a 95       	dec	r24
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <FadeOut+0x24>
    194a:	ca 01       	movw	r24, r20
    194c:	44 23       	and	r20, r20
    194e:	11 f1       	breq	.+68     	; 0x1994 <FadeOut+0x76>
    1950:	30 91 bf 3a 	lds	r19, 0x3ABF	; 0x803abf <auVolume>
    1954:	43 17       	cp	r20, r19
    1956:	30 f4       	brcc	.+12     	; 0x1964 <FadeOut+0x46>
    1958:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <auVolume>
    195c:	98 1b       	sub	r25, r24
    195e:	90 93 bf 3a 	sts	0x3ABF, r25	; 0x803abf <auVolume>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <FadeOut+0x6e>
    1964:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <auVolume>
    1968:	66 23       	and	r22, r22
    196a:	81 f0       	breq	.+32     	; 0x198c <FadeOut+0x6e>
    196c:	8f e3       	ldi	r24, 0x3F	; 63
    196e:	98 e3       	ldi	r25, 0x38	; 56
    1970:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1974:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1978:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    197c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1980:	8f 71       	andi	r24, 0x1F	; 31
    1982:	99 27       	eor	r25, r25
    1984:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1988:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    198c:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <fastTicker>
    1990:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <oldTicker>
    1994:	08 95       	ret

00001996 <GenerateAudio>:

uint8_t GenerateAudio(){
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    static uint8_t start = 0;
    static uint8_t duration;

    //Headphones detected?
    if (auIn < HPLVL) {
    199e:	80 91 cb 3a 	lds	r24, 0x3ACB	; 0x803acb <auIn>
    19a2:	89 31       	cpi	r24, 0x19	; 25
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <GenerateAudio+0x12>
    19a6:	62 c1       	rjmp	.+708    	; 0x1c6c <GenerateAudio+0x2d6>

        detHdPh = 1;
    19a8:	c1 e0       	ldi	r28, 0x01	; 1
    19aa:	c0 93 c8 3a 	sts	0x3AC8, r28	; 0x803ac8 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    19ae:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    19b2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19b6:	88 27       	eor	r24, r24
    19b8:	89 2b       	or	r24, r25
    19ba:	09 f0       	breq	.+2      	; 0x19be <GenerateAudio+0x28>
    19bc:	0d c1       	rjmp	.+538    	; 0x1bd8 <GenerateAudio+0x242>
        
            //Silence, I kill u
            if ((effect&0xE0)==0){
    19be:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    19c2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19c6:	80 7e       	andi	r24, 0xE0	; 224
    19c8:	99 27       	eor	r25, r25
    19ca:	89 2b       	or	r24, r25
    19cc:	49 f4       	brne	.+18     	; 0x19e0 <GenerateAudio+0x4a>
                auRepAddr = &zero;
    19ce:	8f e3       	ldi	r24, 0x3F	; 63
    19d0:	98 e3       	ldi	r25, 0x38	; 56
    19d2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19d6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                start = 0;
    19da:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <start.4036>
    19de:	48 c1       	rjmp	.+656    	; 0x1c70 <GenerateAudio+0x2da>
            }

            //Bad answer (buzzer, also used in other games)
            else if ((effect&0xE0)==32){
    19e0:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    19e4:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    19e8:	80 7e       	andi	r24, 0xE0	; 224
    19ea:	99 27       	eor	r25, r25
    19ec:	80 97       	sbiw	r24, 0x20	; 32
    19ee:	61 f5       	brne	.+88     	; 0x1a48 <GenerateAudio+0xb2>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	65 e0       	ldi	r22, 0x05	; 5
    19f6:	80 e8       	ldi	r24, 0x80	; 128
    19f8:	3d dc       	rcall	.-1926   	; 0x1274 <floatAround>
    19fa:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <auBuffer.4038+0x2>

                if (start == 0) {
    19fe:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4036>
    1a02:	81 11       	cpse	r24, r1
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <GenerateAudio+0x98>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	91 e2       	ldi	r25, 0x21	; 33
    1a0a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a0e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1a12:	8a e1       	ldi	r24, 0x1A	; 26
    1a14:	98 e3       	ldi	r25, 0x38	; 56
    1a16:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a1a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
    1a20:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
            else if ((effect&0xE0)==32){
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2100, 0xff);
    1a24:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4036>
                    duration = 4;
    1a28:	84 e0       	ldi	r24, 0x04	; 4
    1a2a:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4037>
                }

                if (duration == 0) FadeOut(4, start);
    1a2e:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4037>
    1a32:	81 11       	cpse	r24, r1
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <GenerateAudio+0xa8>
    1a36:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4036>
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	70 df       	rcall	.-288    	; 0x191e <FadeOut>
                floatSpeed(1, 0x2000, 0x2200);
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	52 e2       	ldi	r21, 0x22	; 34
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e2       	ldi	r23, 0x20	; 32
    1a46:	0f c1       	rjmp	.+542    	; 0x1c66 <GenerateAudio+0x2d0>
            }

            //Good (bell)
            else if ((effect&0xE0)==64){
    1a48:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a4c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a50:	80 7e       	andi	r24, 0xE0	; 224
    1a52:	99 27       	eor	r25, r25
    1a54:	80 34       	cpi	r24, 0x40	; 64
    1a56:	91 05       	cpc	r25, r1
    1a58:	c1 f5       	brne	.+112    	; 0x1aca <GenerateAudio+0x134>
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
    1a5a:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4036>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <GenerateAudio+0xf4>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	9a e0       	ldi	r25, 0x0A	; 10
    1a66:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a6a:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    if (repeat) auRepAddr = auBuffer;
    1a6e:	87 e1       	ldi	r24, 0x17	; 23
    1a70:	98 e3       	ldi	r25, 0x38	; 56
    1a72:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a76:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
            //Good (bell)
            else if ((effect&0xE0)==64){
                static uint8_t auBuffer[3] = {255, 1, 0};

                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x0a00, 0xff);
    1a80:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4036>
                    duration = 4;
    1a84:	84 e0       	ldi	r24, 0x04	; 4
    1a86:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4037>
                }

                if (duration == 0) FadeOut(4, start);
    1a8a:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4037>
    1a8e:	81 11       	cpse	r24, r1
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <GenerateAudio+0x104>
    1a92:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4036>
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	42 df       	rcall	.-380    	; 0x191e <FadeOut>
                if (buttonMark){
    1a9a:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1a9e:	88 23       	and	r24, r24
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <GenerateAudio+0x10e>
    1aa2:	e6 c0       	rjmp	.+460    	; 0x1c70 <GenerateAudio+0x2da>
                    TCB1_CCMP -= 0x080;                    
    1aa4:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1aa8:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1aac:	80 58       	subi	r24, 0x80	; 128
    1aae:	91 09       	sbc	r25, r1
    1ab0:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1ab4:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume == 0) effect = 0;
    1ab8:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <auVolume>
    1abc:	81 11       	cpse	r24, r1
    1abe:	d8 c0       	rjmp	.+432    	; 0x1c70 <GenerateAudio+0x2da>
    1ac0:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1ac4:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    1ac8:	d3 c0       	rjmp	.+422    	; 0x1c70 <GenerateAudio+0x2da>
                }
            }

            //Rain storm with whistling wind
            else if ((effect&0xE0)==96){
    1aca:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1ace:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1ad2:	80 7e       	andi	r24, 0xE0	; 224
    1ad4:	99 27       	eor	r25, r25
    1ad6:	80 36       	cpi	r24, 0x60	; 96
    1ad8:	91 05       	cpc	r25, r1
    1ada:	b9 f5       	brne	.+110    	; 0x1b4a <GenerateAudio+0x1b4>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1adc:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <auBuffer.4040+0x6>
                auRepAddr = &auBuffer[0];
    1ae0:	87 e5       	ldi	r24, 0x57	; 87
    1ae2:	98 e3       	ldi	r25, 0x38	; 56
    1ae4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ae8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1aec:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1aee:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1af0:	c3 30       	cpi	r28, 0x03	; 3
    1af2:	39 f0       	breq	.+14     	; 0x1b02 <GenerateAudio+0x16c>
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	65 e0       	ldi	r22, 0x05	; 5
    1afa:	80 e8       	ldi	r24, 0x80	; 128
    1afc:	bb db       	rcall	.-2186   	; 0x1274 <floatAround>
    1afe:	f8 01       	movw	r30, r16
    1b00:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b02:	cf 5f       	subi	r28, 0xFF	; 255
    1b04:	0f 5f       	subi	r16, 0xFF	; 255
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	c6 30       	cpi	r28, 0x06	; 6
    1b0a:	91 f7       	brne	.-28     	; 0x1af0 <GenerateAudio+0x15a>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b0c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1b10:	88 23       	and	r24, r24
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <GenerateAudio+0x180>
    1b14:	ad c0       	rjmp	.+346    	; 0x1c70 <GenerateAudio+0x2da>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	54 e0       	ldi	r21, 0x04	; 4
    1b1a:	60 e8       	ldi	r22, 0x80	; 128
    1b1c:	72 e0       	ldi	r23, 0x02	; 2
    1b1e:	85 e0       	ldi	r24, 0x05	; 5
    1b20:	7b db       	rcall	.-2314   	; 0x1218 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b22:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <auVolume>
    1b26:	20 ea       	ldi	r18, 0xA0	; 160
    1b28:	40 e1       	ldi	r20, 0x10	; 16
    1b2a:	62 e0       	ldi	r22, 0x02	; 2
    1b2c:	a3 db       	rcall	.-2234   	; 0x1274 <floatAround>
    1b2e:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b32:	20 e9       	ldi	r18, 0x90	; 144
    1b34:	40 e7       	ldi	r20, 0x70	; 112
    1b36:	62 e0       	ldi	r22, 0x02	; 2
    1b38:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <auBuffer.4040>
    1b3c:	9b db       	rcall	.-2250   	; 0x1274 <floatAround>
    1b3e:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <auBuffer.4040>
    1b42:	80 95       	com	r24
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b44:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <auBuffer.4040+0x3>
    1b48:	93 c0       	rjmp	.+294    	; 0x1c70 <GenerateAudio+0x2da>
    1b4a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                }
            }

            //Footsteps
            else if ((effect&0xE0)==128){
    1b4e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b52:	80 7e       	andi	r24, 0xE0	; 224
    1b54:	99 27       	eor	r25, r25
    1b56:	80 38       	cpi	r24, 0x80	; 128
    1b58:	91 05       	cpc	r25, r1
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <GenerateAudio+0x1c8>
    1b5c:	89 c0       	rjmp	.+274    	; 0x1c70 <GenerateAudio+0x2da>
    1b5e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>

            }

            //Bleeps
            else if ((effect&0xE0)==160){
    1b62:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b66:	80 7e       	andi	r24, 0xE0	; 224
    1b68:	99 27       	eor	r25, r25
    1b6a:	80 3a       	cpi	r24, 0xA0	; 160
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	79 f5       	brne	.+94     	; 0x1bce <GenerateAudio+0x238>
    1b70:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4036>
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                if (start == 0) {
    1b74:	81 11       	cpse	r24, r1
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <GenerateAudio+0x20a>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1b7a:	90 e2       	ldi	r25, 0x20	; 32
    1b7c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1b80:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1b84:	81 e1       	ldi	r24, 0x11	; 17
    if (repeat) auRepAddr = auBuffer;
    1b86:	98 e3       	ldi	r25, 0x38	; 56
    1b88:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b8c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1b90:	8f ef       	ldi	r24, 0xFF	; 255
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1b92:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
    1b96:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4036>
            //Bleeps
            else if ((effect&0xE0)==160){
                static uint8_t auBuffer[6] = {255, 192, 128, 64 ,1 ,0};
                
                if (start == 0) {
                    start = Play(&auBuffer[0], 1, 0x2000, 0xff);
    1b9a:	8a e0       	ldi	r24, 0x0A	; 10
                    duration = 10;
    1b9c:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4037>
    1ba0:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4037>
                }

                if (duration == 0) FadeOut(2, start);
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <GenerateAudio+0x21a>
    1ba8:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4036>
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	b7 de       	rcall	.-658    	; 0x191e <FadeOut>
                if (buttonMark){
    1bb0:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <GenerateAudio+0x224>
    1bb8:	5b c0       	rjmp	.+182    	; 0x1c70 <GenerateAudio+0x2da>
    1bba:	c1 e1       	ldi	r28, 0x11	; 17
    1bbc:	d8 e3       	ldi	r29, 0x38	; 56
                    for(uint8_t x=0; x<6; ++x){
                        auBuffer[x]=lfsr()|0x01;
    1bbe:	0d db       	rcall	.-2534   	; 0x11da <lfsr>
    1bc0:	81 60       	ori	r24, 0x01	; 1
    1bc2:	89 93       	st	Y+, r24
    1bc4:	f8 e3       	ldi	r31, 0x38	; 56
                    duration = 10;
                }

                if (duration == 0) FadeOut(2, start);
                if (buttonMark){
                    for(uint8_t x=0; x<6; ++x){
    1bc6:	c7 31       	cpi	r28, 0x17	; 23
    1bc8:	df 07       	cpc	r29, r31
    1bca:	c9 f7       	brne	.-14     	; 0x1bbe <GenerateAudio+0x228>
    1bcc:	51 c0       	rjmp	.+162    	; 0x1c70 <GenerateAudio+0x2da>
    1bce:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                    }
                }
            }

            //
            else if ((effect&0xE0)==192){
    1bd2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1bd6:	4c c0       	rjmp	.+152    	; 0x1c70 <GenerateAudio+0x2da>
    1bd8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1bdc:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1be0:	88 27       	eor	r24, r24
    1be2:	81 15       	cp	r24, r1
    1be4:	91 40       	sbci	r25, 0x01	; 1
    1be6:	09 f0       	breq	.+2      	; 0x1bea <GenerateAudio+0x254>
    1be8:	43 c0       	rjmp	.+134    	; 0x1c70 <GenerateAudio+0x2da>
    1bea:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
            if ((effect&0xE0) <= 0x90) {
    1bee:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1bf2:	80 7e       	andi	r24, 0xE0	; 224
    1bf4:	99 27       	eor	r25, r25
    1bf6:	81 39       	cpi	r24, 0x91	; 145
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	d0 f5       	brcc	.+116    	; 0x1c70 <GenerateAudio+0x2da>
    1bfc:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <start.4036>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
    1c00:	81 11       	cpse	r24, r1
    1c02:	22 c0       	rjmp	.+68     	; 0x1c48 <GenerateAudio+0x2b2>
    1c04:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
                    freq = ((effect&0xE0)+1)<<6;
    1c08:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c0c:	80 7e       	andi	r24, 0xE0	; 224
    1c0e:	99 27       	eor	r25, r25
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	26 e0       	ldi	r18, 0x06	; 6
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	2a 95       	dec	r18
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <GenerateAudio+0x27e>
    1c1c:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <freq.4051>
    1c20:	90 93 56 38 	sts	0x3856, r25	; 0x803856 <freq.4051+0x1>
    1c24:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    }
}

uint8_t Play(uint8_t * auBuffer, uint8_t repeat, uint16_t pitch, uint8_t volume)
{
    TCB1_CCMP = pitch;
    1c28:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1c2c:	8e e0       	ldi	r24, 0x0E	; 14
    if (repeat) auRepAddr = auBuffer;
    1c2e:	98 e3       	ldi	r25, 0x38	; 56
    1c30:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c34:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    else auSmpAddr = auBuffer;
    auVolume = volume;
    1c3a:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <auVolume>
    1c3e:	c0 93 5f 38 	sts	0x385F, r28	; 0x80385f <start.4036>
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint16_t freq;

                if (start == 0) {
                    freq = ((effect&0xE0)+1)<<6;
                    start = Play(&auBuffer[0], 1, freq, 0xff);
    1c42:	83 e0       	ldi	r24, 0x03	; 3
                    duration = 3;
    1c44:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4037>
                }

                if (duration == 0) FadeOut(7, start);
    1c48:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4037>
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <GenerateAudio+0x2c2>
    1c50:	60 91 5f 38 	lds	r22, 0x385F	; 0x80385f <start.4036>
    1c54:	87 e0       	ldi	r24, 0x07	; 7
    1c56:	63 de       	rcall	.-826    	; 0x191e <FadeOut>
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1c58:	60 91 55 38 	lds	r22, 0x3855	; 0x803855 <freq.4051>
    1c5c:	70 91 56 38 	lds	r23, 0x3856	; 0x803856 <freq.4051+0x1>
    1c60:	ab 01       	movw	r20, r22
    1c62:	5d 5f       	subi	r21, 0xFD	; 253
    1c64:	7e 5f       	subi	r23, 0xFE	; 254
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	d7 da       	rcall	.-2642   	; 0x1218 <floatSpeed>
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GenerateAudio+0x2da>
    1c6c:	10 92 c8 3a 	sts	0x3AC8, r1	; 0x803ac8 <detHdPh>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);
            }
        }
    } else {
        detHdPh = 0;
    1c70:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    }

    if (buttonMark && duration) --duration;
    1c74:	88 23       	and	r24, r24
    1c76:	39 f0       	breq	.+14     	; 0x1c86 <GenerateAudio+0x2f0>
    1c78:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <duration.4037>
    1c7c:	88 23       	and	r24, r24
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <GenerateAudio+0x2f0>
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <duration.4037>
    1c86:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>

    return buttonMark;
    1c8a:	df 91       	pop	r29
}
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <getClock>:
    1c94:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1c98:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1c9c:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <minuteMark>
    1ca0:	89 2f       	mov	r24, r25
    1ca2:	99 27       	eor	r25, r25
    1ca4:	86 95       	lsr	r24
}
    1ca6:	3c e3       	ldi	r19, 0x3C	; 60
    1ca8:	23 9f       	mul	r18, r19
    1caa:	80 0d       	add	r24, r0
    1cac:	91 1d       	adc	r25, r1
    1cae:	11 24       	eor	r1, r1
    1cb0:	08 95       	ret

00001cb2 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	8c 01       	movw	r16, r24
    1cbc:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1cbe:	ea df       	rcall	.-44     	; 0x1c94 <getClock>
    1cc0:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1cc2:	80 17       	cp	r24, r16
    1cc4:	91 07       	cpc	r25, r17
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <idleTimeout+0x18>
        curClock += 256 * 60;
    1cc8:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1cca:	c0 0f       	add	r28, r16
    1ccc:	d1 1f       	adc	r29, r17
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	c2 17       	cp	r28, r18
    1cd2:	d3 07       	cpc	r29, r19
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <idleTimeout+0x26>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	08 95       	ret

00001ce2 <SelfTest>:

uint8_t SelfTest(){
    1ce2:	a4 e0       	ldi	r26, 0x04	; 4
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e7 e7       	ldi	r30, 0x77	; 119
    1ce8:	fe e0       	ldi	r31, 0x0E	; 14
    1cea:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__prologue_saves__+0x20>
    uint8_t tstVal[4] = {0x01, 0};
    1cee:	19 82       	std	Y+1, r1	; 0x01
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
    1cf2:	1b 82       	std	Y+3, r1	; 0x03
    1cf4:	1c 82       	std	Y+4, r1	; 0x04
    1cf6:	ae e6       	ldi	r26, 0x6E	; 110
    1cf8:	be eb       	ldi	r27, 0xBE	; 190
    1cfa:	84 e7       	ldi	r24, 0x74	; 116
    1cfc:	9e eb       	ldi	r25, 0xBE	; 190

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1cfe:	2f ef       	ldi	r18, 0xFF	; 255
    1d00:	ed 91       	ld	r30, X+
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	e4 53       	subi	r30, 0x34	; 52
    1d06:	f5 4c       	sbci	r31, 0xC5	; 197
    1d08:	20 83       	st	Z, r18

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1d0a:	8a 17       	cp	r24, r26
    1d0c:	9b 07       	cpc	r25, r27
    1d0e:	c1 f7       	brne	.-16     	; 0x1d00 <SelfTest+0x1e>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1d10:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <adcPhot>
    1d14:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    1d18:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1d1a:	99 27       	eor	r25, r25
    1d1c:	20 91 c6 3a 	lds	r18, 0x3AC6	; 0x803ac6 <adcPhot>
    1d20:	30 91 c7 3a 	lds	r19, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    1d24:	33 27       	eor	r19, r19
    1d26:	28 17       	cp	r18, r24
    1d28:	39 07       	cpc	r19, r25
    1d2a:	c1 f3       	breq	.-16     	; 0x1d1c <SelfTest+0x3a>
    iLED[HCKR[R][1]] = 0x00;
    1d2c:	e0 91 6f be 	lds	r30, 0xBE6F	; 0x80be6f <__bss_end+0x8354>
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	e4 53       	subi	r30, 0x34	; 52
    1d34:	f5 4c       	sbci	r31, 0xC5	; 197
    1d36:	10 82       	st	Z, r1

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d38:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <adcBtns>
    1d3c:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <adcBtns+0x1>
    1d40:	80 38       	cpi	r24, 0x80	; 128
    1d42:	9c 40       	sbci	r25, 0x0C	; 12
    1d44:	c8 f3       	brcs	.-14     	; 0x1d38 <SelfTest+0x56>
    iLED[HCKR[R][4]] = 0x00;
    1d46:	e0 91 72 be 	lds	r30, 0xBE72	; 0x80be72 <__bss_end+0x8357>
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	e4 53       	subi	r30, 0x34	; 52
    1d4e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d50:	10 82       	st	Z, r1
    
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    1d52:	9e 01       	movw	r18, r28
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	64 e0       	ldi	r22, 0x04	; 4
    1d5c:	8c ec       	ldi	r24, 0xCC	; 204
    1d5e:	9c e3       	ldi	r25, 0x3C	; 60
    1d60:	ac d9       	rcall	.-3240   	; 0x10ba <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	8f 33       	cpi	r24, 0x3F	; 63
    1d66:	49 f4       	brne	.+18     	; 0x1d7a <SelfTest+0x98>
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <SelfTest+0x98>
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	80 3c       	cpi	r24, 0xC0	; 192
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <SelfTest+0x98>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	84 31       	cpi	r24, 0x14	; 20
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <SelfTest+0x9a>
    1d7a:	ff cf       	rjmp	.-2      	; 0x1d7a <SelfTest+0x98>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1d80:	fc 01       	movw	r30, r24
    1d82:	e4 53       	subi	r30, 0x34	; 52
    1d84:	f5 4c       	sbci	r31, 0xC5	; 197
    1d86:	10 82       	st	Z, r1
    1d88:	01 96       	adiw	r24, 0x01	; 1
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1d8a:	88 32       	cpi	r24, 0x28	; 40
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	c1 f7       	brne	.-16     	; 0x1d80 <SelfTest+0x9e>
        iLED[x]=0;
    }

    //for(uint8_t x=0; x<(adcPhot&0x3f); ++x) lfsr();
    lfsrSeed = (adcPhot + adcTemp)<<1 | 0x0001; 
    1d90:	20 91 c6 3a 	lds	r18, 0x3AC6	; 0x803ac6 <adcPhot>
    1d94:	30 91 c7 3a 	lds	r19, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    1d98:	80 91 f6 3a 	lds	r24, 0x3AF6	; 0x803af6 <adcTemp>
    1d9c:	90 91 f7 3a 	lds	r25, 0x3AF7	; 0x803af7 <adcTemp+0x1>
    1da0:	82 0f       	add	r24, r18
    1da2:	93 1f       	adc	r25, r19
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	81 60       	ori	r24, 0x01	; 1
    1daa:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <lfsrSeed>
    1dae:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <lfsrSeed+0x1>

    return 0;
}
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	24 96       	adiw	r28, 0x04	; 4
    1db6:	e2 e0       	ldi	r30, 0x02	; 2
    1db8:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__epilogue_restores__+0x20>

00001dbc <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1dbc:	cf 93       	push	r28
    1dbe:	c8 2f       	mov	r28, r24
    WingBar(0,0);
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	fe db       	rcall	.-2052   	; 0x15c2 <WingBar>
    if (val == 1) {                     //
    1dc6:	c1 30       	cpi	r28, 0x01	; 1
    1dc8:	19 f4       	brne	.+6      	; 0x1dd0 <simonLed+0x14>
        iLED[WING[L][4]] = dimValue;
    1dca:	e0 91 69 be 	lds	r30, 0xBE69	; 0x80be69 <__bss_end+0x834e>
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <simonLed+0x30>
    } else if (val == 2) {              // I
    1dd0:	c2 30       	cpi	r28, 0x02	; 2
    1dd2:	19 f4       	brne	.+6      	; 0x1dda <simonLed+0x1e>
        iLED[WING[R][4]] = dimValue;
    1dd4:	e0 91 64 be 	lds	r30, 0xBE64	; 0x80be64 <__bss_end+0x8349>
    1dd8:	09 c0       	rjmp	.+18     	; 0x1dec <simonLed+0x30>
    } else if (val == 3) {              // II
    1dda:	c3 30       	cpi	r28, 0x03	; 3
    1ddc:	19 f4       	brne	.+6      	; 0x1de4 <simonLed+0x28>
        iLED[WING[L][2]] = dimValue;
    1dde:	e0 91 67 be 	lds	r30, 0xBE67	; 0x80be67 <__bss_end+0x834c>
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <simonLed+0x30>
    } else if (val == 4) {              // III
    1de4:	c4 30       	cpi	r28, 0x04	; 4
    1de6:	41 f4       	brne	.+16     	; 0x1df8 <simonLed+0x3c>
        iLED[WING[R][2]] = dimValue;
    1de8:	e0 91 62 be 	lds	r30, 0xBE62	; 0x80be62 <__bss_end+0x8347>
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1df2:	e4 53       	subi	r30, 0x34	; 52
    1df4:	f5 4c       	sbci	r31, 0xC5	; 197
    1df6:	80 83       	st	Z, r24
    }
}
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1e04:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1e08:	88 23       	and	r24, r24
    1e0a:	21 f0       	breq	.+8      	; 0x1e14 <BastetDictates+0x18>
    1e0c:	82 30       	cpi	r24, 0x02	; 2
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <BastetDictates+0x16>
    1e10:	69 c1       	rjmp	.+722    	; 0x20e4 <BastetDictates+0x2e8>
    1e12:	07 c0       	rjmp	.+14     	; 0x1e22 <BastetDictates+0x26>
        return 0;
    }
    */

    if (TEXT == gameNow)
        if (buttonState!=0xff)
    1e14:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1e18:	8f 3f       	cpi	r24, 0xFF	; 255
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <BastetDictates+0x26>
            gameNow = BASTET;
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>

    if (BASTET_BOOT == simonGameState) {
    1e22:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    1e26:	81 11       	cpse	r24, r1
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <BastetDictates+0x48>
    1e2a:	cb e6       	ldi	r28, 0x6B	; 107
    1e2c:	d8 e3       	ldi	r29, 0x38	; 56
    1e2e:	07 e7       	ldi	r16, 0x77	; 119
    1e30:	18 e3       	ldi	r17, 0x38	; 56
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1e32:	d3 d9       	rcall	.-3162   	; 0x11da <lfsr>
    1e34:	83 70       	andi	r24, 0x03	; 3
    1e36:	89 93       	st	Y+, r24
    if (TEXT == gameNow)
        if (buttonState!=0xff)
            gameNow = BASTET;

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1e38:	0c 17       	cp	r16, r28
    1e3a:	1d 07       	cpc	r17, r29
    1e3c:	d1 f7       	brne	.-12     	; 0x1e32 <BastetDictates+0x36>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1e44:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	91 f4       	brne	.+36     	; 0x1e70 <BastetDictates+0x74>
    1e4c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	71 f4       	brne	.+28     	; 0x1e70 <BastetDictates+0x74>
        simonGameState = BASTET_GAME_INTRO;
    1e54:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
        simonPos = 0;
    1e58:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonPos>
        simonInputPos = 0;
    1e5c:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
        simonTimer = 0;
    1e60:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        simonCounter = 0;
    1e64:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
        effect = 0;
    1e68:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1e6c:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1e70:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	51 f5       	brne	.+84     	; 0x1ecc <BastetDictates+0xd0>
        if (simonTimer > 5) {   // ±.33 seconds
    1e78:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1e7c:	86 30       	cpi	r24, 0x06	; 6
    1e7e:	38 f0       	brcs	.+14     	; 0x1e8e <BastetDictates+0x92>
            simonCounter++;
    1e80:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
    1e84:	8f 5f       	subi	r24, 0xFF	; 255
    1e86:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonCounter>
            simonTimer = 0;
    1e8a:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        }
        if (simonCounter > 5) {
    1e8e:	e0 91 66 38 	lds	r30, 0x3866	; 0x803866 <simonCounter>
    1e92:	e6 30       	cpi	r30, 0x06	; 6
    1e94:	58 f0       	brcs	.+22     	; 0x1eac <BastetDictates+0xb0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1e96:	83 e0       	ldi	r24, 0x03	; 3
    1e98:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
            simonTimer = 0;
    1e9c:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonCounter = 0;
    1ea0:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            SetHackerLeds(0,0);
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	ca db       	rcall	.-2156   	; 0x163e <SetHackerLeds>
            return 0;
    1eaa:	1c c1       	rjmp	.+568    	; 0x20e4 <BastetDictates+0x2e8>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	e2 59       	subi	r30, 0x92	; 146
    1eb0:	f1 44       	sbci	r31, 0x41	; 65
    1eb2:	a0 81       	ld	r26, Z
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1eba:	a4 53       	subi	r26, 0x34	; 52
    1ebc:	b5 4c       	sbci	r27, 0xC5	; 197
    1ebe:	8c 93       	st	X, r24
        iLED[HCKR[G][simonCounter]] = 0;
    1ec0:	e6 81       	ldd	r30, Z+6	; 0x06
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	e4 53       	subi	r30, 0x34	; 52
    1ec6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ec8:	10 82       	st	Z, r1
    1eca:	2b c0       	rjmp	.+86     	; 0x1f22 <BastetDictates+0x126>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	49 f5       	brne	.+82     	; 0x1f22 <BastetDictates+0x126>
        if (simonTimer > 7) {   // ±.5 second
    1ed0:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1ed4:	88 30       	cpi	r24, 0x08	; 8
    1ed6:	38 f0       	brcs	.+14     	; 0x1ee6 <BastetDictates+0xea>
            simonCounter++;
    1ed8:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
    1edc:	8f 5f       	subi	r24, 0xFF	; 255
    1ede:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonCounter>
            simonTimer = 0;
    1ee2:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1ee6:	e0 91 66 38 	lds	r30, 0x3866	; 0x803866 <simonCounter>
    1eea:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <simonPos>
    1eee:	8e 17       	cp	r24, r30
    1ef0:	40 f4       	brcc	.+16     	; 0x1f02 <BastetDictates+0x106>
            simonInputPos = 0;
    1ef2:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1ef6:	85 e0       	ldi	r24, 0x05	; 5
    1ef8:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
            simonLed(0);
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	5e df       	rcall	.-324    	; 0x1dbc <simonLed>
    1f00:	99 c0       	rjmp	.+306    	; 0x2034 <BastetDictates+0x238>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1f02:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1f06:	83 30       	cpi	r24, 0x03	; 3
    1f08:	30 f4       	brcc	.+12     	; 0x1f16 <BastetDictates+0x11a>
            simonLed(simonState[simonCounter] + 1);
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	e5 59       	subi	r30, 0x95	; 149
    1f0e:	f7 4c       	sbci	r31, 0xC7	; 199
    1f10:	80 81       	ld	r24, Z
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	53 df       	rcall	.-346    	; 0x1dbc <simonLed>
        }
        if (simonTimer > 6) {
    1f16:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    1f1a:	87 30       	cpi	r24, 0x07	; 7
            simonLed(0);
    1f1c:	10 f0       	brcs	.+4      	; 0x1f22 <BastetDictates+0x126>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	4d df       	rcall	.-358    	; 0x1dbc <simonLed>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1f22:	c0 91 65 38 	lds	r28, 0x3865	; 0x803865 <simonGameState>
    1f26:	c5 30       	cpi	r28, 0x05	; 5
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <BastetDictates+0x130>
    1f2a:	87 c0       	rjmp	.+270    	; 0x203a <BastetDictates+0x23e>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1f2c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    1f30:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1f34:	98 17       	cp	r25, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <BastetDictates+0x13e>
    1f38:	72 c0       	rjmp	.+228    	; 0x201e <BastetDictates+0x222>
            if (simonWait == 0 && buttonState < 4) {
    1f3a:	90 91 67 38 	lds	r25, 0x3867	; 0x803867 <simonWait>
    1f3e:	91 11       	cpse	r25, r1
    1f40:	70 c0       	rjmp	.+224    	; 0x2022 <BastetDictates+0x226>
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	08 f0       	brcs	.+2      	; 0x1f48 <BastetDictates+0x14c>
    1f46:	6d c0       	rjmp	.+218    	; 0x2022 <BastetDictates+0x226>
                simonWait = 1;
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	90 93 67 38 	sts	0x3867, r25	; 0x803867 <simonWait>
                simonTimer = 0;
    1f4e:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                simonLed(buttonState+1);
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	33 df       	rcall	.-410    	; 0x1dbc <simonLed>
                simonGameState = BASTET_GAME_WAIT_LEDS;
    1f56:	84 e0       	ldi	r24, 0x04	; 4
    1f58:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    1f5c:	c0 93 34 38 	sts	0x3834, r28	; 0x803834 <simonNextGameState>

                if (simonState[simonInputPos] == buttonState) {
    1f60:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonInputPos>
    1f64:	e8 2f       	mov	r30, r24
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	e5 59       	subi	r30, 0x95	; 149
    1f6a:	f7 4c       	sbci	r31, 0xC7	; 199
    1f6c:	20 81       	ld	r18, Z
    1f6e:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1f72:	29 13       	cpse	r18, r25
    1f74:	1d c0       	rjmp	.+58     	; 0x1fb0 <BastetDictates+0x1b4>
                    simonInputPos++;
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	80 93 69 38 	sts	0x3869, r24	; 0x803869 <simonInputPos>
                    if (simonInputPos > simonPos) {
    1f7c:	e0 91 6a 38 	lds	r30, 0x386A	; 0x80386a <simonPos>
    1f80:	e8 17       	cp	r30, r24
    1f82:	a8 f5       	brcc	.+106    	; 0x1fee <BastetDictates+0x1f2>
                        simonPos++;
    1f84:	ef 5f       	subi	r30, 0xFF	; 255
    1f86:	e0 93 6a 38 	sts	0x386A, r30	; 0x80386a <simonPos>
                        simonTimer = 0;
    1f8a:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                        simonCounter = 0;
    1f8e:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    1f92:	e1 30       	cpi	r30, 0x01	; 1
    1f94:	59 f0       	breq	.+22     	; 0x1fac <BastetDictates+0x1b0>
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    1f96:	e6 95       	lsr	r30
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	e2 59       	subi	r30, 0x92	; 146
    1f9c:	f1 44       	sbci	r31, 0x41	; 65
    1f9e:	e5 81       	ldd	r30, Z+5	; 0x05
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1fa6:	e4 53       	subi	r30, 0x34	; 52
    1fa8:	f5 4c       	sbci	r31, 0xC5	; 197
    1faa:	80 83       	st	Z, r24
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    1fac:	83 e0       	ldi	r24, 0x03	; 3
    1fae:	1d c0       	rjmp	.+58     	; 0x1fea <BastetDictates+0x1ee>
                    }
                } else {
                    effect = 32|1;
    1fb0:	81 e2       	ldi	r24, 0x21	; 33
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1fb8:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    1fbc:	ae e6       	ldi	r26, 0x6E	; 110
    1fbe:	be eb       	ldi	r27, 0xBE	; 190
    1fc0:	84 e7       	ldi	r24, 0x74	; 116
    1fc2:	9e eb       	ldi	r25, 0xBE	; 190
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    1fc4:	ed 91       	ld	r30, X+
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1fcc:	e4 53       	subi	r30, 0x34	; 52
    1fce:	f5 4c       	sbci	r31, 0xC5	; 197
    1fd0:	20 83       	st	Z, r18
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32|1;
                    for (uint8_t n=0; n<6; n++){
    1fd2:	8a 17       	cp	r24, r26
    1fd4:	9b 07       	cpc	r25, r27
    1fd6:	b1 f7       	brne	.-20     	; 0x1fc4 <BastetDictates+0x1c8>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    1fd8:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
                    simonPos = 0;
    1fdc:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonPos>
                    simonTimer = 0;
    1fe0:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                    simonCounter = 0;
    1fe4:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
                    simonNextGameState = BASTET_GAME_OUTRO;
    1fe8:	86 e0       	ldi	r24, 0x06	; 6
    1fea:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    1fee:	80 91 69 38 	lds	r24, 0x3869	; 0x803869 <simonInputPos>
    1ff2:	8c 30       	cpi	r24, 0x0C	; 12
    1ff4:	20 f4       	brcc	.+8      	; 0x1ffe <BastetDictates+0x202>
    1ff6:	80 91 6a 38 	lds	r24, 0x386A	; 0x80386a <simonPos>
    1ffa:	8c 30       	cpi	r24, 0x0C	; 12
    1ffc:	90 f0       	brcs	.+36     	; 0x2022 <BastetDictates+0x226>
                    effect = 64|2;
    1ffe:	82 e4       	ldi	r24, 0x42	; 66
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2006:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    200a:	8a e7       	ldi	r24, 0x7A	; 122
    200c:	ec d9       	rcall	.-3112   	; 0x13e6 <UpdateState>
                    simonTimer = 0;
    200e:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
                    simonCounter = 0;
    2012:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
                    simonNextGameState = BASTET_GAME_OVER;
    2016:	87 e0       	ldi	r24, 0x07	; 7
    2018:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <simonNextGameState>
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <BastetDictates+0x226>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    201e:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonWait>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    2022:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    2026:	88 3c       	cpi	r24, 0xC8	; 200
    2028:	41 f4       	brne	.+16     	; 0x203a <BastetDictates+0x23e>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    202a:	83 e0       	ldi	r24, 0x03	; 3
    202c:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
            simonCounter = 0;
    2030:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            simonTimer = 0;
    2034:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            return 0;
    2038:	55 c0       	rjmp	.+170    	; 0x20e4 <BastetDictates+0x2e8>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    203a:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    203e:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    2040:	81 f4       	brne	.+32     	; 0x2062 <BastetDictates+0x266>
    2042:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    2046:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    2048:	60 f0       	brcs	.+24     	; 0x2062 <BastetDictates+0x266>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	b7 de       	rcall	.-658    	; 0x1dbc <simonLed>
            simonWait = 0;
    204e:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonWait>
            simonTimer = 0;
    2052:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonCounter = 0;
    2056:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            simonGameState = simonNextGameState;
    205a:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <simonNextGameState>
    205e:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2062:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonGameState>
    2066:	86 30       	cpi	r24, 0x06	; 6
    2068:	41 f5       	brne	.+80     	; 0x20ba <BastetDictates+0x2be>
        if (simonTimer > 3) {
    206a:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    206e:	84 30       	cpi	r24, 0x04	; 4
    2070:	38 f0       	brcs	.+14     	; 0x2080 <BastetDictates+0x284>
            simonCounter++;
    2072:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
    2076:	8f 5f       	subi	r24, 0xFF	; 255
    2078:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonCounter>
            simonTimer = 0;
    207c:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
        }
        if (simonCounter > 5) {
    2080:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonCounter>
    2084:	86 30       	cpi	r24, 0x06	; 6
    2086:	40 f0       	brcs	.+16     	; 0x2098 <BastetDictates+0x29c>
            simonTimer = 0;
    2088:	10 92 68 38 	sts	0x3868, r1	; 0x803868 <simonTimer>
            simonCounter = 0;
    208c:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonCounter>
            simonGameState = BASTET_GAME_OVER;
    2090:	87 e0       	ldi	r24, 0x07	; 7
    2092:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonGameState>
            return 0;
    2096:	26 c0       	rjmp	.+76     	; 0x20e4 <BastetDictates+0x2e8>
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    2098:	e5 e0       	ldi	r30, 0x05	; 5
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	e8 1b       	sub	r30, r24
    209e:	f1 09       	sbc	r31, r1
    20a0:	e2 59       	subi	r30, 0x92	; 146
    20a2:	f1 44       	sbci	r31, 0x41	; 65
    20a4:	a0 81       	ld	r26, Z
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	a4 53       	subi	r26, 0x34	; 52
    20aa:	b5 4c       	sbci	r27, 0xC5	; 197
    20ac:	1c 92       	st	X, r1
        iLED[HCKR[G][5-simonCounter]] = 0;
    20ae:	e6 81       	ldd	r30, Z+6	; 0x06
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	e4 53       	subi	r30, 0x34	; 52
    20b4:	f5 4c       	sbci	r31, 0xC5	; 197
    20b6:	10 82       	st	Z, r1
    20b8:	10 c0       	rjmp	.+32     	; 0x20da <BastetDictates+0x2de>
    }

    if (BASTET_GAME_OVER == simonGameState) {
    20ba:	87 30       	cpi	r24, 0x07	; 7
    20bc:	71 f4       	brne	.+28     	; 0x20da <BastetDictates+0x2de>
        simonInputPos = 0;
    20be:	10 92 69 38 	sts	0x3869, r1	; 0x803869 <simonInputPos>
        simonPos = 0;
    20c2:	10 92 6a 38 	sts	0x386A, r1	; 0x80386a <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    20c6:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonGameState>
        gameNow = TEXT;
    20ca:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        simonLed(0);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	75 de       	rcall	.-790    	; 0x1dbc <simonLed>
        effect = 0;
    20d2:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    20d6:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
    }

    ++simonTimer;
    20da:	80 91 68 38 	lds	r24, 0x3868	; 0x803868 <simonTimer>
    20de:	8f 5f       	subi	r24, 0xFF	; 255
    20e0:	80 93 68 38 	sts	0x3868, r24	; 0x803868 <simonTimer>
    return 0;
}
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	08 95       	ret

000020f0 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    20f0:	a2 e1       	ldi	r26, 0x12	; 18
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ee e7       	ldi	r30, 0x7E	; 126
    20f6:	f0 e1       	ldi	r31, 0x10	; 16
    20f8:	0c 94 fc 1e 	jmp	0x3df8	; 0x3df8 <__prologue_saves__+0x1e>
    20fc:	8a 8b       	std	Y+18, r24	; 0x12
    20fe:	80 e1       	ldi	r24, 0x10	; 16
    2100:	e0 e4       	ldi	r30, 0x40	; 64
    2102:	fe eb       	ldi	r31, 0xBE	; 190
    2104:	de 01       	movw	r26, r28
    2106:	11 96       	adiw	r26, 0x01	; 1
    2108:	01 90       	ld	r0, Z+
    210a:	0d 92       	st	X+, r0
    210c:	8a 95       	dec	r24
    210e:	e1 f7       	brne	.-8      	; 0x2108 <Cheat+0x18>
    2110:	fe 01       	movw	r30, r28
    2112:	31 96       	adiw	r30, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	21 91       	ld	r18, Z+
    211a:	31 91       	ld	r19, Z+
    211c:	26 17       	cp	r18, r22
    211e:	37 07       	cpc	r19, r23
    2120:	09 f4       	brne	.+2      	; 0x2124 <Cheat+0x34>
    2122:	89 2f       	mov	r24, r25
    2124:	9f 5f       	subi	r25, 0xFF	; 255
    2126:	98 30       	cpi	r25, 0x08	; 8
    2128:	b9 f7       	brne	.-18     	; 0x2118 <Cheat+0x28>
    212a:	88 30       	cpi	r24, 0x08	; 8
    212c:	10 f0       	brcs	.+4      	; 0x2132 <Cheat+0x42>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	14 c0       	rjmp	.+40     	; 0x215a <Cheat+0x6a>
    2132:	18 e1       	ldi	r17, 0x18	; 24
    2134:	18 0f       	add	r17, r24
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	be 01       	movw	r22, r28
    213a:	6f 5e       	subi	r22, 0xEF	; 239
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	81 2f       	mov	r24, r17
    2140:	0e 94 0b 08 	call	0x1016	; 0x1016 <EERead>
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	8f 3f       	cpi	r24, 0xFF	; 255
    2148:	91 f7       	brne	.-28     	; 0x212e <Cheat+0x3e>
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	be 01       	movw	r22, r28
    214e:	6e 5e       	subi	r22, 0xEE	; 238
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	81 2f       	mov	r24, r17
    2154:	0e 94 1b 08 	call	0x1036	; 0x1036 <EEWrite>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	62 96       	adiw	r28, 0x12	; 18
    215c:	e3 e0       	ldi	r30, 0x03	; 3
    215e:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__epilogue_restores__+0x1e>

00002162 <UnflipData>:
    2162:	26 2f       	mov	r18, r22
    2164:	fb 01       	movw	r30, r22
    2166:	35 e5       	ldi	r19, 0x55	; 85
    2168:	9e 2f       	mov	r25, r30
    216a:	92 1b       	sub	r25, r18
    216c:	98 17       	cp	r25, r24
    216e:	28 f4       	brcc	.+10     	; 0x217a <UnflipData+0x18>
    2170:	90 81       	ld	r25, Z
    2172:	92 95       	swap	r25
    2174:	93 27       	eor	r25, r19
    2176:	91 93       	st	Z+, r25
    2178:	f7 cf       	rjmp	.-18     	; 0x2168 <UnflipData+0x6>
    217a:	08 95       	ret

0000217c <ClearTxAfter>:
    217c:	8f 5f       	subi	r24, 0xFF	; 255
    217e:	88 30       	cpi	r24, 0x08	; 8
    2180:	30 f4       	brcc	.+12     	; 0x218e <ClearTxAfter+0x12>
    2182:	e8 2f       	mov	r30, r24
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	ef 5a       	subi	r30, 0xAF	; 175
    2188:	f5 4c       	sbci	r31, 0xC5	; 197
    218a:	10 82       	st	Z, r1
    218c:	f7 cf       	rjmp	.-18     	; 0x217c <ClearTxAfter>
    218e:	08 95       	ret

00002190 <StartsWith>:
    2190:	ac 01       	movw	r20, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	e9 2f       	mov	r30, r25
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	da 01       	movw	r26, r20
    219a:	ae 0f       	add	r26, r30
    219c:	bf 1f       	adc	r27, r31
    219e:	3c 91       	ld	r19, X
    21a0:	e6 0f       	add	r30, r22
    21a2:	f7 1f       	adc	r31, r23
    21a4:	31 11       	cpse	r19, r1
    21a6:	05 c0       	rjmp	.+10     	; 0x21b2 <StartsWith+0x22>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 81       	ld	r25, Z
    21ac:	99 23       	and	r25, r25
    21ae:	49 f0       	breq	.+18     	; 0x21c2 <StartsWith+0x32>
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <StartsWith+0x30>
    21b2:	20 81       	ld	r18, Z
    21b4:	22 23       	and	r18, r18
    21b6:	c1 f3       	breq	.-16     	; 0x21a8 <StartsWith+0x18>
    21b8:	32 13       	cpse	r19, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <StartsWith+0x30>
    21bc:	9f 5f       	subi	r25, 0xFF	; 255
    21be:	ea cf       	rjmp	.-44     	; 0x2194 <StartsWith+0x4>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	08 95       	ret

000021c4 <PrepareSending>:
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	fc 01       	movw	r30, r24
    21ca:	61 15       	cp	r22, r1
    21cc:	71 05       	cpc	r23, r1
    21ce:	59 f1       	breq	.+86     	; 0x2226 <PrepareSending+0x62>
    21d0:	a9 e5       	ldi	r26, 0x59	; 89
    21d2:	ba e3       	ldi	r27, 0x3A	; 58
    21d4:	c1 e5       	ldi	r28, 0x51	; 81
    21d6:	da e3       	ldi	r29, 0x3A	; 58
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	9f ef       	ldi	r25, 0xFF	; 255
    21dc:	6f 3f       	cpi	r22, 0xFF	; 255
    21de:	71 05       	cpc	r23, r1
    21e0:	69 f0       	breq	.+26     	; 0x21fc <PrepareSending+0x38>
    21e2:	60 f0       	brcs	.+24     	; 0x21fc <PrepareSending+0x38>
    21e4:	ed 93       	st	X+, r30
    21e6:	fd 93       	st	X+, r31
    21e8:	99 93       	st	Y+, r25
    21ea:	e1 50       	subi	r30, 0x01	; 1
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	6f 5f       	subi	r22, 0xFF	; 255
    21f0:	71 09       	sbc	r23, r1
    21f2:	8f 5f       	subi	r24, 0xFF	; 255
    21f4:	87 30       	cpi	r24, 0x07	; 7
    21f6:	91 f7       	brne	.-28     	; 0x21dc <PrepareSending+0x18>
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	1e c0       	rjmp	.+60     	; 0x2238 <PrepareSending+0x74>
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	d9 01       	movw	r26, r18
    2202:	aa 0f       	add	r26, r26
    2204:	bb 1f       	adc	r27, r27
    2206:	a7 5a       	subi	r26, 0xA7	; 167
    2208:	b5 4c       	sbci	r27, 0xC5	; 197
    220a:	ed 93       	st	X+, r30
    220c:	fc 93       	st	X, r31
    220e:	6f 3f       	cpi	r22, 0xFF	; 255
    2210:	71 05       	cpc	r23, r1
    2212:	11 f4       	brne	.+4      	; 0x2218 <PrepareSending+0x54>
    2214:	6e ef       	ldi	r22, 0xFE	; 254
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	f9 01       	movw	r30, r18
    221a:	ef 5a       	subi	r30, 0xAF	; 175
    221c:	f5 4c       	sbci	r31, 0xC5	; 197
    221e:	60 83       	st	Z, r22
    2220:	40 93 4f 3a 	sts	0x3A4F, r20	; 0x803a4f <txTypeNow>
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <PrepareSending+0x6c>
    2226:	10 92 59 3a 	sts	0x3A59, r1	; 0x803a59 <txAddrList>
    222a:	10 92 5a 3a 	sts	0x3A5A, r1	; 0x803a5a <txAddrList+0x1>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	a5 df       	rcall	.-182    	; 0x217c <ClearTxAfter>
    2232:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrNow>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	f9 01       	movw	r30, r18
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	ec 5d       	subi	r30, 0xDC	; 220
    224e:	f6 4c       	sbci	r31, 0xC6	; 198
    2250:	a9 e5       	ldi	r26, 0x59	; 89
    2252:	ba e7       	ldi	r27, 0x7A	; 122
    2254:	a0 83       	st	Z, r26
    2256:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2258:	f9 01       	movw	r30, r18
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	ec 59       	subi	r30, 0x9C	; 156
    2260:	f6 4c       	sbci	r31, 0xC6	; 198
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	60 83       	st	Z, r22
    2268:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    226a:	22 0f       	add	r18, r18
    226c:	33 1f       	adc	r19, r19
    226e:	f9 01       	movw	r30, r18
    2270:	ec 55       	subi	r30, 0x5C	; 92
    2272:	f6 4c       	sbci	r31, 0xC6	; 198
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	40 83       	st	Z, r20
    227a:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    227c:	21 e0       	ldi	r18, 0x01	; 1
    227e:	28 0f       	add	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	f9 01       	movw	r30, r18
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	ec 5d       	subi	r30, 0xDC	; 220
    228a:	f6 4c       	sbci	r31, 0xC6	; 198
    228c:	c2 e6       	ldi	r28, 0x62	; 98
    228e:	da e7       	ldi	r29, 0x7A	; 122
    2290:	c0 83       	st	Z, r28
    2292:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2294:	f9 01       	movw	r30, r18
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ec 59       	subi	r30, 0x9C	; 156
    229c:	f6 4c       	sbci	r31, 0xC6	; 198
    229e:	cc e0       	ldi	r28, 0x0C	; 12
    22a0:	d0 e0       	ldi	r29, 0x00	; 0
    22a2:	c0 83       	st	Z, r28
    22a4:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	f9 01       	movw	r30, r18
    22ac:	ec 55       	subi	r30, 0x5C	; 92
    22ae:	f6 4c       	sbci	r31, 0xC6	; 198
    22b0:	40 83       	st	Z, r20
    22b2:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    22b4:	e2 e0       	ldi	r30, 0x02	; 2
    22b6:	e8 0f       	add	r30, r24
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	ec 5d       	subi	r30, 0xDC	; 220
    22c0:	f6 4c       	sbci	r31, 0xC6	; 198
    22c2:	20 ef       	ldi	r18, 0xF0	; 240
    22c4:	3f ef       	ldi	r19, 0xFF	; 255
    22c6:	20 83       	st	Z, r18
    22c8:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22ca:	23 e0       	ldi	r18, 0x03	; 3
    22cc:	28 0f       	add	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	f9 01       	movw	r30, r18
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ec 5d       	subi	r30, 0xDC	; 220
    22d8:	f6 4c       	sbci	r31, 0xC6	; 198
    22da:	a0 83       	st	Z, r26
    22dc:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    22de:	f9 01       	movw	r30, r18
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ec 59       	subi	r30, 0x9C	; 156
    22e6:	f6 4c       	sbci	r31, 0xC6	; 198
    22e8:	60 83       	st	Z, r22
    22ea:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    22ec:	22 0f       	add	r18, r18
    22ee:	33 1f       	adc	r19, r19
    22f0:	f9 01       	movw	r30, r18
    22f2:	ec 55       	subi	r30, 0x5C	; 92
    22f4:	f6 4c       	sbci	r31, 0xC6	; 198
    22f6:	40 83       	st	Z, r20
    22f8:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22fa:	24 e0       	ldi	r18, 0x04	; 4
    22fc:	28 0f       	add	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	f9 01       	movw	r30, r18
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	ec 5d       	subi	r30, 0xDC	; 220
    2308:	f6 4c       	sbci	r31, 0xC6	; 198
    230a:	a5 e5       	ldi	r26, 0x55	; 85
    230c:	ba e7       	ldi	r27, 0x7A	; 122
    230e:	a0 83       	st	Z, r26
    2310:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2312:	f9 01       	movw	r30, r18
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	ec 59       	subi	r30, 0x9C	; 156
    231a:	f6 4c       	sbci	r31, 0xC6	; 198
    231c:	60 83       	st	Z, r22
    231e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	f9 01       	movw	r30, r18
    2326:	ec 55       	subi	r30, 0x5C	; 92
    2328:	f6 4c       	sbci	r31, 0xC6	; 198
    232a:	40 83       	st	Z, r20
    232c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    232e:	8b 5f       	subi	r24, 0xFB	; 251
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	df 92       	push	r13
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	2c 97       	sbiw	r28, 0x0c	; 12
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	7c 01       	movw	r14, r24
    2354:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    2356:	9e 01       	movw	r18, r28
    2358:	2f 5f       	subi	r18, 0xFF	; 255
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	6c e0       	ldi	r22, 0x0C	; 12
    2360:	80 96       	adiw	r24, 0x20	; 32
    2362:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	98 27       	eor	r25, r24
    236c:	89 27       	eor	r24, r25
    236e:	98 27       	eor	r25, r24
    2370:	80 96       	adiw	r24, 0x20	; 32
    2372:	f8 01       	movw	r30, r16
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	98 27       	eor	r25, r24
    237e:	89 27       	eor	r24, r25
    2380:	98 27       	eor	r25, r24
    2382:	80 96       	adiw	r24, 0x20	; 32
    2384:	82 83       	std	Z+2, r24	; 0x02
    2386:	93 83       	std	Z+3, r25	; 0x03
    2388:	de 01       	movw	r26, r28
    238a:	15 96       	adiw	r26, 0x05	; 5
    238c:	34 96       	adiw	r30, 0x04	; 4
    238e:	c8 01       	movw	r24, r16
    2390:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2392:	2d 91       	ld	r18, X+
    2394:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    2396:	e8 17       	cp	r30, r24
    2398:	f9 07       	cpc	r31, r25
    239a:	d9 f7       	brne	.-10     	; 0x2392 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    239c:	fc e2       	ldi	r31, 0x2C	; 44
    239e:	ef 0e       	add	r14, r31
    23a0:	f1 1c       	adc	r15, r1
    23a2:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    23a4:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    23a6:	9e 01       	movw	r18, r28
    23a8:	2f 5f       	subi	r18, 0xFF	; 255
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	63 e0       	ldi	r22, 0x03	; 3
    23b0:	c7 01       	movw	r24, r14
    23b2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	98 27       	eor	r25, r24
    23bc:	89 27       	eor	r24, r25
    23be:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    23c0:	97 01       	movw	r18, r14
    23c2:	2e 5f       	subi	r18, 0xFE	; 254
    23c4:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    23c6:	43 e0       	ldi	r20, 0x03	; 3
    23c8:	4d 15       	cp	r20, r13
    23ca:	80 f4       	brcc	.+32     	; 0x23ec <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    23cc:	ac 01       	movw	r20, r24
    23ce:	41 50       	subi	r20, 0x01	; 1
    23d0:	51 09       	sbc	r21, r1
    23d2:	f8 01       	movw	r30, r16
    23d4:	42 8f       	std	Z+26, r20	; 0x1a
    23d6:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    23d8:	f3 e0       	ldi	r31, 0x03	; 3
    23da:	ef 0e       	add	r14, r31
    23dc:	f1 1c       	adc	r15, r1
    23de:	f8 01       	movw	r30, r16
    23e0:	e4 86       	std	Z+12, r14	; 0x0c
    23e2:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    23e4:	4b 81       	ldd	r20, Y+3	; 0x03
    23e6:	f5 01       	movw	r30, r10
    23e8:	44 a3       	std	Z+36, r20	; 0x24
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    23ec:	f8 01       	movw	r30, r16
    23ee:	82 8f       	std	Z+26, r24	; 0x1a
    23f0:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    23f2:	24 87       	std	Z+12, r18	; 0x0c
    23f4:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    23f6:	7c 01       	movw	r14, r24
    23f8:	e2 0e       	add	r14, r18
    23fa:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    23fc:	d3 94       	inc	r13
    23fe:	0e 5f       	subi	r16, 0xFE	; 254
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	ff ef       	ldi	r31, 0xFF	; 255
    2404:	af 1a       	sub	r10, r31
    2406:	bf 0a       	sbc	r11, r31
    2408:	47 e0       	ldi	r20, 0x07	; 7
    240a:	d4 12       	cpse	r13, r20
    240c:	cc cf       	rjmp	.-104    	; 0x23a6 <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    240e:	2c 96       	adiw	r28, 0x0c	; 12
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	ff 90       	pop	r15
    241e:	ef 90       	pop	r14
    2420:	df 90       	pop	r13
    2422:	bf 90       	pop	r11
    2424:	af 90       	pop	r10
    2426:	08 95       	ret

00002428 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    2428:	a0 e2       	ldi	r26, 0x20	; 32
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	ea e1       	ldi	r30, 0x1A	; 26
    242e:	f2 e1       	ldi	r31, 0x12	; 18
    2430:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__prologue_saves__+0x14>
    2434:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    2436:	7c 01       	movw	r14, r24
    2438:	20 e2       	ldi	r18, 0x20	; 32
    243a:	e2 0e       	add	r14, r18
    243c:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    243e:	9e 01       	movw	r18, r28
    2440:	2f 5f       	subi	r18, 0xFF	; 255
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	8c 96       	adiw	r24, 0x2c	; 44
    244a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    244e:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    2450:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2452:	11 23       	and	r17, r17
    2454:	59 f1       	breq	.+86     	; 0x24ac <CheckLetter+0x84>
    2456:	01 2f       	mov	r16, r17
    2458:	11 32       	cpi	r17, 0x21	; 33
    245a:	08 f0       	brcs	.+2      	; 0x245e <CheckLetter+0x36>
    245c:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    245e:	9e 01       	movw	r18, r28
    2460:	2f 5f       	subi	r18, 0xFF	; 255
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	60 2f       	mov	r22, r16
    2468:	c7 01       	movw	r24, r14
    246a:	0e 96       	adiw	r24, 0x0e	; 14
    246c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
    2470:	fe 01       	movw	r30, r28
    2472:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2474:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    2476:	dd 20       	and	r13, r13
    2478:	61 f0       	breq	.+24     	; 0x2492 <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    247a:	e1 e0       	ldi	r30, 0x01	; 1
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	ec 0f       	add	r30, r28
    2480:	fd 1f       	adc	r31, r29
    2482:	e8 0f       	add	r30, r24
    2484:	f1 1d       	adc	r31, r1
    2486:	90 81       	ld	r25, Z
    2488:	90 62       	ori	r25, 0x20	; 32
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	9c 11       	cpse	r25, r12
    248e:	0e c0       	rjmp	.+28     	; 0x24ac <CheckLetter+0x84>
    2490:	0e c0       	rjmp	.+28     	; 0x24ae <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    2492:	91 91       	ld	r25, Z+
    2494:	dd 24       	eor	r13, r13
    2496:	d3 94       	inc	r13
    2498:	9b 35       	cpi	r25, 0x5B	; 91
    249a:	09 f0       	breq	.+2      	; 0x249e <CheckLetter+0x76>
    249c:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	80 17       	cp	r24, r16
    24a2:	48 f3       	brcs	.-46     	; 0x2476 <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    24a4:	e0 0e       	add	r14, r16
    24a6:	f1 1c       	adc	r15, r1
        x -= max;
    24a8:	10 1b       	sub	r17, r16
    24aa:	d3 cf       	rjmp	.-90     	; 0x2452 <CheckLetter+0x2a>
    }
    return 0;
    24ac:	80 e0       	ldi	r24, 0x00	; 0
}
    24ae:	a0 96       	adiw	r28, 0x20	; 32
    24b0:	e8 e0       	ldi	r30, 0x08	; 8
    24b2:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__epilogue_restores__+0x14>

000024b6 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <FindChild+0x14>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <FindChild+0x16>
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	d6 2e       	mov	r13, r22
    24d2:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    24d4:	9e 01       	movw	r18, r28
    24d6:	2f 5f       	subi	r18, 0xFF	; 255
    24d8:	3f 4f       	sbci	r19, 0xFF	; 255
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	64 e0       	ldi	r22, 0x04	; 4
    24de:	80 96       	adiw	r24, 0x20	; 32
    24e0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
    24e4:	e9 80       	ldd	r14, Y+1	; 0x01
    24e6:	fa 80       	ldd	r15, Y+2	; 0x02
    24e8:	fe 24       	eor	r15, r14
    24ea:	ef 24       	eor	r14, r15
    24ec:	fe 24       	eor	r15, r14
    24ee:	0b 81       	ldd	r16, Y+3	; 0x03
    24f0:	1c 81       	ldd	r17, Y+4	; 0x04
    24f2:	10 27       	eor	r17, r16
    24f4:	01 27       	eor	r16, r17
    24f6:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    24f8:	0e 15       	cp	r16, r14
    24fa:	1f 05       	cpc	r17, r15
    24fc:	48 f5       	brcc	.+82     	; 0x2550 <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    24fe:	a0 16       	cp	r10, r16
    2500:	b1 06       	cpc	r11, r17
    2502:	60 f0       	brcs	.+24     	; 0x251c <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    2504:	9e 01       	movw	r18, r28
    2506:	2f 5f       	subi	r18, 0xFF	; 255
    2508:	3f 4f       	sbci	r19, 0xFF	; 255
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	c8 01       	movw	r24, r16
    2510:	80 96       	adiw	r24, 0x20	; 32
    2512:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
    2516:	09 81       	ldd	r16, Y+1	; 0x01
    2518:	1a 81       	ldd	r17, Y+2	; 0x02
    251a:	eb cf       	rjmp	.-42     	; 0x24f2 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    251c:	9e 01       	movw	r18, r28
    251e:	2f 5f       	subi	r18, 0xFF	; 255
    2520:	3f 4f       	sbci	r19, 0xFF	; 255
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	c8 01       	movw	r24, r16
    2528:	85 96       	adiw	r24, 0x25	; 37
    252a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	81 11       	cpse	r24, r1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2534:	d1 10       	cpse	r13, r1
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <FindChild+0x8e>
    2538:	0e c0       	rjmp	.+28     	; 0x2556 <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    253a:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
    253e:	81 11       	cpse	r24, r1
    2540:	f9 cf       	rjmp	.-14     	; 0x2534 <FindChild+0x7e>
    2542:	e0 cf       	rjmp	.-64     	; 0x2504 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    2544:	6d 2d       	mov	r22, r13
    2546:	c8 01       	movw	r24, r16
    2548:	6f df       	rcall	.-290    	; 0x2428 <CheckLetter>
    254a:	88 23       	and	r24, r24
    254c:	d9 f2       	breq	.-74     	; 0x2504 <FindChild+0x4e>
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <FindChild+0xa2>
    2556:	c8 01       	movw	r24, r16
}
    2558:	24 96       	adiw	r28, 0x04	; 4
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	bf 90       	pop	r11
    256e:	af 90       	pop	r10
    2570:	08 95       	ret

00002572 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2572:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2574:	9f e9       	ldi	r25, 0x9F	; 159
    2576:	98 0f       	add	r25, r24
    2578:	9a 31       	cpi	r25, 0x1A	; 26
    257a:	38 f0       	brcs	.+14     	; 0x258a <InpOkChk+0x18>
    257c:	90 ed       	ldi	r25, 0xD0	; 208
    257e:	98 0f       	add	r25, r24
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	9a 30       	cpi	r25, 0x0A	; 10
    2584:	18 f0       	brcs	.+6      	; 0x258c <InpOkChk+0x1a>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	08 95       	ret
    258a:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    258c:	08 95       	ret

0000258e <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2598:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    259a:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    259c:	f8 01       	movw	r30, r16
    259e:	ed 0f       	add	r30, r29
    25a0:	f1 1d       	adc	r31, r1
    25a2:	80 81       	ld	r24, Z
    25a4:	2c 2f       	mov	r18, r28
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	88 23       	and	r24, r24
    25aa:	61 f0       	breq	.+24     	; 0x25c4 <CleanInput+0x36>
        data[cnt] = data[x];
    25ac:	d8 01       	movw	r26, r16
    25ae:	a2 0f       	add	r26, r18
    25b0:	b3 1f       	adc	r27, r19
    25b2:	8c 93       	st	X, r24
        if (data[x] == 0x1b) break; //Escape characters are not supported!
    25b4:	80 81       	ld	r24, Z
    25b6:	8b 31       	cpi	r24, 0x1B	; 27
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <CleanInput+0x36>
        if (InpOkChk(data[x])) ++cnt;
    25ba:	db df       	rcall	.-74     	; 0x2572 <InpOkChk>
    25bc:	81 11       	cpse	r24, r1
    25be:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    25c0:	df 5f       	subi	r29, 0xFF	; 255
    25c2:	ec cf       	rjmp	.-40     	; 0x259c <CleanInput+0xe>
        data[cnt] = data[x];
        if (data[x] == 0x1b) break; //Escape characters are not supported!
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    25c4:	f8 01       	movw	r30, r16
    25c6:	e2 0f       	add	r30, r18
    25c8:	f3 1f       	adc	r31, r19
    25ca:	10 82       	st	Z, r1
    return cnt;
}
    25cc:	8c 2f       	mov	r24, r28
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	08 95       	ret

000025d8 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    25d8:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    25da:	20 91 50 3a 	lds	r18, 0x3A50	; 0x803a50 <txAddrNow>
    25de:	28 30       	cpi	r18, 0x08	; 8
    25e0:	08 f0       	brcs	.+2      	; 0x25e4 <CheckSend+0xc>
    25e2:	49 c0       	rjmp	.+146    	; 0x2676 <CheckSend+0x9e>
    25e4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    25e8:	88 23       	and	r24, r24
    25ea:	09 f4       	brne	.+2      	; 0x25ee <CheckSend+0x16>
    25ec:	44 c0       	rjmp	.+136    	; 0x2676 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    25ee:	82 2f       	mov	r24, r18
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	fc 01       	movw	r30, r24
    25f4:	ef 5a       	subi	r30, 0xAF	; 175
    25f6:	f5 4c       	sbci	r31, 0xC5	; 197
    25f8:	e0 81       	ld	r30, Z
    25fa:	e1 11       	cpse	r30, r1
    25fc:	06 c0       	rjmp	.+12     	; 0x260a <CheckSend+0x32>
            txPart = 0;
    25fe:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <txPart.3941>
            txAddrNow = TXLISTLEN;
    2602:	88 e0       	ldi	r24, 0x08	; 8
    2604:	80 93 50 3a 	sts	0x3A50, r24	; 0x803a50 <txAddrNow>
    2608:	2e c0       	rjmp	.+92     	; 0x2666 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    260a:	50 91 0f 39 	lds	r21, 0x390F	; 0x80390f <txPart.3941>
    260e:	5e 17       	cp	r21, r30
    2610:	60 f5       	brcc	.+88     	; 0x266a <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    2612:	ce 2f       	mov	r28, r30
    2614:	c5 1b       	sub	r28, r21
    2616:	c1 32       	cpi	r28, 0x21	; 33
    2618:	08 f0       	brcs	.+2      	; 0x261c <CheckSend+0x44>
    261a:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	fc 01       	movw	r30, r24
    2622:	e7 5a       	subi	r30, 0xA7	; 167
    2624:	f5 4c       	sbci	r31, 0xC5	; 197
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	2a ef       	ldi	r18, 0xFA	; 250
    262c:	3a e3       	ldi	r19, 0x3A	; 58
    262e:	40 91 4f 3a 	lds	r20, 0x3A4F	; 0x803a4f <txTypeNow>
    2632:	6c 2f       	mov	r22, r28
    2634:	85 0f       	add	r24, r21
    2636:	91 1d       	adc	r25, r1
    2638:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
            txPart += EEreadLength;
    263c:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <txPart.3941>
    2640:	8c 0f       	add	r24, r28
    2642:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <txPart.3941>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    2646:	ec 2f       	mov	r30, r28
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	e6 50       	subi	r30, 0x06	; 6
    264c:	f5 4c       	sbci	r31, 0xC5	; 197
    264e:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    2650:	80 91 fa 3a 	lds	r24, 0x3AFA	; 0x803afa <txBuffer>
    2654:	81 11       	cpse	r24, r1
    2656:	03 c0       	rjmp	.+6      	; 0x265e <CheckSend+0x86>
    2658:	8b ed       	ldi	r24, 0xDB	; 219
    265a:	80 93 fa 3a 	sts	0x3AFA, r24	; 0x803afa <txBuffer>
            SerSend(&txBuffer[0]);
    265e:	8a ef       	ldi	r24, 0xFA	; 250
    2660:	9a e3       	ldi	r25, 0x3A	; 58
    2662:	0e 94 7f 08 	call	0x10fe	; 0x10fe <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	0b c0       	rjmp	.+22     	; 0x2680 <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    266a:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <txPart.3941>
            ++txAddrNow;
    266e:	2f 5f       	subi	r18, 0xFF	; 255
    2670:	20 93 50 3a 	sts	0x3A50, r18	; 0x803a50 <txAddrNow>
    2674:	f8 cf       	rjmp	.-16     	; 0x2666 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2676:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	91 11       	cpse	r25, r1
    267e:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2680:	cf 91       	pop	r28
    2682:	08 95       	ret

00002684 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2688:	c0 91 23 39 	lds	r28, 0x3923	; 0x803923 <responseList>
    268c:	cc 23       	and	r28, r28
    268e:	b1 f1       	breq	.+108    	; 0x26fc <CheckResponse+0x78>
        --responseList;
    2690:	c1 50       	subi	r28, 0x01	; 1
    2692:	c0 93 23 39 	sts	0x3923, r28	; 0x803923 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2696:	d0 91 0e 39 	lds	r29, 0x390E	; 0x80390e <number.3945>
    269a:	2d 2f       	mov	r18, r29
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	f9 01       	movw	r30, r18
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	ec 5d       	subi	r30, 0xDC	; 220
    26a6:	f6 4c       	sbci	r31, 0xC6	; 198
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	80 3f       	cpi	r24, 0xF0	; 240
    26ae:	4f ef       	ldi	r20, 0xFF	; 255
    26b0:	94 07       	cpc	r25, r20
    26b2:	51 f4       	brne	.+20     	; 0x26c8 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    26b4:	60 91 3e 3a 	lds	r22, 0x3A3E	; 0x803a3e <currObj+0x1a>
    26b8:	70 91 3f 3a 	lds	r23, 0x3A3F	; 0x803a3f <currObj+0x1b>
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	80 91 30 3a 	lds	r24, 0x3A30	; 0x803a30 <currObj+0xc>
    26c2:	90 91 31 3a 	lds	r25, 0x3A31	; 0x803a31 <currObj+0xd>
    26c6:	0d c0       	rjmp	.+26     	; 0x26e2 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    26c8:	d9 01       	movw	r26, r18
    26ca:	aa 0f       	add	r26, r26
    26cc:	bb 1f       	adc	r27, r27
    26ce:	ac 55       	subi	r26, 0x5C	; 92
    26d0:	b6 4c       	sbci	r27, 0xC6	; 198
    26d2:	22 0f       	add	r18, r18
    26d4:	33 1f       	adc	r19, r19
    26d6:	f9 01       	movw	r30, r18
    26d8:	ec 59       	subi	r30, 0x9C	; 156
    26da:	f6 4c       	sbci	r31, 0xC6	; 198
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	4c 91       	ld	r20, X
    26e2:	70 dd       	rcall	.-1312   	; 0x21c4 <PrepareSending>
        }
        ++number;
    26e4:	df 5f       	subi	r29, 0xFF	; 255
    26e6:	d0 93 0e 39 	sts	0x390E, r29	; 0x80390e <number.3945>

        if (responseList == 0) {
    26ea:	c1 11       	cpse	r28, r1
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    26ee:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    26f0:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
            number = 0;
    26f4:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <number.3945>
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <CheckResponse+0x78>
            return 0;
        }
        return 1;
    26fa:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    26fc:	8c 2f       	mov	r24, r28
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2704:	aa e0       	ldi	r26, 0x0A	; 10
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e8 e8       	ldi	r30, 0x88	; 136
    270a:	f3 e1       	ldi	r31, 0x13	; 19
    270c:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__prologue_saves__+0x6>
    2710:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    2712:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2716:	8f 3f       	cpi	r24, 0xFF	; 255
    2718:	49 f4       	brne	.+18     	; 0x272c <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    271a:	64 e2       	ldi	r22, 0x24	; 36
    271c:	7a e3       	ldi	r23, 0x3A	; 58
    271e:	80 91 e4 39 	lds	r24, 0x39E4	; 0x8039e4 <route>
    2722:	90 91 e5 39 	lds	r25, 0x39E5	; 0x8039e5 <route+0x1>
    2726:	07 de       	rcall	.-1010   	; 0x2336 <PopulateObject>
        currDepth = 0;
    2728:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <currDepth>
    }

    if (serRxDone){
    272c:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <serRxDone>
    2730:	88 23       	and	r24, r24
    2732:	09 f4       	brne	.+2      	; 0x2736 <CheckInput+0x32>
    2734:	d4 c1       	rjmp	.+936    	; 0x2ade <CheckInput+0x3da>

        //Special input requested from user by game
        if (specialInput[0]){
    2736:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput>
    273a:	88 23       	and	r24, r24
    273c:	09 f4       	brne	.+2      	; 0x2740 <CheckInput+0x3c>
    273e:	4f c0       	rjmp	.+158    	; 0x27de <CheckInput+0xda>
            specialPassed = 0;
    2740:	10 92 12 39 	sts	0x3912, r1	; 0x803912 <specialPassed>
            data[0] = 'a';
    2744:	81 e6       	ldi	r24, 0x61	; 97
    2746:	f8 01       	movw	r30, r16
    2748:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    274a:	63 e1       	ldi	r22, 0x13	; 19
    274c:	79 e3       	ldi	r23, 0x39	; 57
    274e:	8e e7       	ldi	r24, 0x7E	; 126
    2750:	9a e3       	ldi	r25, 0x3A	; 58
    2752:	1e dd       	rcall	.-1476   	; 0x2190 <StartsWith>
    2754:	f8 2e       	mov	r15, r24
    2756:	88 23       	and	r24, r24
    2758:	21 f0       	breq	.+8      	; 0x2762 <CheckInput+0x5e>
                specialPassed = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <specialPassed>
    2760:	04 c0       	rjmp	.+8      	; 0x276a <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2762:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput>
    2766:	81 33       	cpi	r24, 0x31	; 49
    2768:	11 f0       	breq	.+4      	; 0x276e <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    276a:	f1 2c       	mov	r15, r1
    276c:	ba c1       	rjmp	.+884    	; 0x2ae2 <CheckInput+0x3de>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    276e:	80 91 15 39 	lds	r24, 0x3915	; 0x803915 <specialInput+0x2>
    2772:	81 11       	cpse	r24, r1
    2774:	fa cf       	rjmp	.-12     	; 0x276a <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2776:	8e e7       	ldi	r24, 0x7E	; 126
    2778:	9a e3       	ldi	r25, 0x3A	; 58
    277a:	09 df       	rcall	.-494    	; 0x258e <CleanInput>
                specialPassed = 2;
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	90 93 12 39 	sts	0x3912, r25	; 0x803912 <specialPassed>
                data[1] = 0;
    2782:	f8 01       	movw	r30, r16
    2784:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	80 f3       	brcs	.-32     	; 0x276a <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    278a:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    278e:	81 33       	cpi	r24, 0x31	; 49
    2790:	60 f3       	brcs	.-40     	; 0x276a <CheckInput+0x66>
    2792:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    2796:	85 33       	cpi	r24, 0x35	; 53
    2798:	40 f7       	brcc	.-48     	; 0x276a <CheckInput+0x66>
                        serRx[1] |= 0x20;
    279a:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    279e:	80 62       	ori	r24, 0x20	; 32
    27a0:	80 93 7f 3a 	sts	0x3A7F, r24	; 0x803a7f <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    27a4:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    27a8:	81 36       	cpi	r24, 0x61	; 97
    27aa:	61 f0       	breq	.+24     	; 0x27c4 <CheckInput+0xc0>
    27ac:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    27b0:	85 36       	cpi	r24, 0x65	; 101
    27b2:	41 f0       	breq	.+16     	; 0x27c4 <CheckInput+0xc0>
    27b4:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    27b8:	86 36       	cpi	r24, 0x66	; 102
    27ba:	21 f0       	breq	.+8      	; 0x27c4 <CheckInput+0xc0>
    27bc:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    27c0:	87 37       	cpi	r24, 0x77	; 119
    27c2:	99 f6       	brne	.-90     	; 0x276a <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    27c4:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <specialInput+0x1>
    27c8:	8f 5e       	subi	r24, 0xEF	; 239
    27ca:	f8 01       	movw	r30, r16
    27cc:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    27ce:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    27d2:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    27d4:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x1>
    27d8:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    27da:	14 82       	std	Z+4, r1	; 0x04
    27dc:	82 c1       	rjmp	.+772    	; 0x2ae2 <CheckInput+0x3de>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    27de:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
    27e2:	83 32       	cpi	r24, 0x23	; 35
    27e4:	89 f5       	brne	.+98     	; 0x2848 <CheckInput+0x144>
    27e6:	8d b3       	in	r24, 0x1d	; 29
    27e8:	86 30       	cpi	r24, 0x06	; 6
    27ea:	71 f5       	brne	.+92     	; 0x2848 <CheckInput+0x144>
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    27f2:	fc 01       	movw	r30, r24
    27f4:	e2 58       	subi	r30, 0x82	; 130
    27f6:	f5 4c       	sbci	r31, 0xC5	; 197
    27f8:	20 81       	ld	r18, Z
    27fa:	20 53       	subi	r18, 0x30	; 48
    27fc:	20 83       	st	Z, r18
                    bitNr *= 10;
    27fe:	11 0f       	add	r17, r17
    2800:	21 2f       	mov	r18, r17
    2802:	22 0f       	add	r18, r18
    2804:	22 0f       	add	r18, r18
    2806:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2808:	20 91 7f 3a 	lds	r18, 0x3A7F	; 0x803a7f <serRx+0x1>
    280c:	23 30       	cpi	r18, 0x03	; 3
    280e:	48 f4       	brcc	.+18     	; 0x2822 <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    2810:	20 81       	ld	r18, Z
    2812:	2a 30       	cpi	r18, 0x0A	; 10
    2814:	b8 f4       	brcc	.+46     	; 0x2844 <CheckInput+0x140>
                        bitNr += serRx[x];
    2816:	20 81       	ld	r18, Z
    2818:	12 0f       	add	r17, r18
    281a:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	91 05       	cpc	r25, r1
    2820:	41 f7       	brne	.-48     	; 0x27f2 <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    2822:	81 2f       	mov	r24, r17
    2824:	8f 77       	andi	r24, 0x7F	; 127
    2826:	71 f0       	breq	.+28     	; 0x2844 <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2828:	80 91 82 3a 	lds	r24, 0x3A82	; 0x803a82 <serRx+0x4>
    282c:	60 91 83 3a 	lds	r22, 0x3A83	; 0x803a83 <serRx+0x5>
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	78 2b       	or	r23, r24
    2834:	81 2f       	mov	r24, r17
    2836:	80 95       	com	r24
    2838:	5b dc       	rcall	.-1866   	; 0x20f0 <Cheat>
    283a:	88 23       	and	r24, r24
    283c:	19 f0       	breq	.+6      	; 0x2844 <CheckInput+0x140>
    283e:	81 2f       	mov	r24, r17
    2840:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	48 c1       	rjmp	.+656    	; 0x2ad8 <CheckInput+0x3d4>
    2848:	d8 01       	movw	r26, r16
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    284e:	fc 01       	movw	r30, r24
    2850:	e2 58       	subi	r30, 0x82	; 130
    2852:	f5 4c       	sbci	r31, 0xC5	; 197
    2854:	20 81       	ld	r18, Z
    2856:	21 34       	cpi	r18, 0x41	; 65
    2858:	18 f0       	brcs	.+6      	; 0x2860 <CheckInput+0x15c>
    285a:	20 81       	ld	r18, Z
    285c:	2b 35       	cpi	r18, 0x5B	; 91
    285e:	10 f0       	brcs	.+4      	; 0x2864 <CheckInput+0x160>
    2860:	20 81       	ld	r18, Z
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <CheckInput+0x164>
    2864:	20 81       	ld	r18, Z
    2866:	20 62       	ori	r18, 0x20	; 32
    2868:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    286a:	20 81       	ld	r18, Z
    286c:	21 11       	cpse	r18, r1
    286e:	05 c0       	rjmp	.+10     	; 0x287a <CheckInput+0x176>
                    data[x] = 0;
    2870:	f8 01       	movw	r30, r16
    2872:	e8 0f       	add	r30, r24
    2874:	f1 1d       	adc	r31, r1
    2876:	10 82       	st	Z, r1
                    break;
    2878:	05 c0       	rjmp	.+10     	; 0x2884 <CheckInput+0x180>
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    287e:	81 34       	cpi	r24, 0x41	; 65
    2880:	91 05       	cpc	r25, r1
    2882:	29 f7       	brne	.-54     	; 0x284e <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2884:	80 91 7e 3a 	lds	r24, 0x3A7E	; 0x803a7e <serRx>
                data[0] = 0;
    2888:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    288a:	81 11       	cpse	r24, r1
    288c:	05 c0       	rjmp	.+10     	; 0x2898 <CheckInput+0x194>
                data[0] = 0;
    288e:	10 82       	st	Z, r1
                RXCNT = 0;
    2890:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2892:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
    2896:	23 c1       	rjmp	.+582    	; 0x2ade <CheckInput+0x3da>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2898:	80 81       	ld	r24, Z
    289a:	8f 33       	cpi	r24, 0x3F	; 63
    289c:	11 f0       	breq	.+4      	; 0x28a2 <CheckInput+0x19e>
    289e:	88 36       	cpi	r24, 0x68	; 104
    28a0:	49 f4       	brne	.+18     	; 0x28b4 <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28a2:	83 e9       	ldi	r24, 0x93	; 147
    28a4:	9b e7       	ldi	r25, 0x7B	; 123
    28a6:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    28aa:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    28ae:	8d e6       	ldi	r24, 0x6D	; 109
    28b0:	94 e0       	ldi	r25, 0x04	; 4
    28b2:	0a c0       	rjmp	.+20     	; 0x28c8 <CheckInput+0x1c4>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    28b4:	81 36       	cpi	r24, 0x61	; 97
    28b6:	a1 f4       	brne	.+40     	; 0x28e0 <CheckInput+0x1dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28b8:	8e e6       	ldi	r24, 0x6E	; 110
    28ba:	9a e7       	ldi	r25, 0x7A	; 122
    28bc:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    28c0:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    28c4:	85 e2       	ldi	r24, 0x25	; 37
    28c6:	91 e0       	ldi	r25, 0x01	; 1
    28c8:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    28cc:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    28d8:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	fc c0       	rjmp	.+504    	; 0x2ad8 <CheckInput+0x3d4>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    28e0:	87 37       	cpi	r24, 0x77	; 119
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <CheckInput+0x1e2>
    28e4:	41 c0       	rjmp	.+130    	; 0x2968 <CheckInput+0x264>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28e6:	8d e8       	ldi	r24, 0x8D	; 141
    28e8:	96 e7       	ldi	r25, 0x76	; 118
    28ea:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    28ee:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    28f2:	82 e1       	ldi	r24, 0x12	; 18
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    28fa:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    28fe:	21 e0       	ldi	r18, 0x01	; 1
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	20 93 a6 39 	sts	0x39A6, r18	; 0x8039a6 <reactStr+0x82>
    2906:	30 93 a7 39 	sts	0x39A7, r19	; 0x8039a7 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    290a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	fc 01       	movw	r30, r24
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	ea 51       	subi	r30, 0x1A	; 26
    2918:	f1 44       	sbci	r31, 0x41	; 65
    291a:	40 81       	ld	r20, Z
    291c:	51 81       	ldd	r21, Z+1	; 0x01
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	fc 01       	movw	r30, r24
    2924:	e2 52       	subi	r30, 0x22	; 34
    2926:	f1 44       	sbci	r31, 0x41	; 65
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	80 93 28 39 	sts	0x3928, r24	; 0x803928 <reactStr+0x4>
    2930:	90 93 29 39 	sts	0x3929, r25	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    2934:	40 93 68 39 	sts	0x3968, r20	; 0x803968 <reactStr+0x44>
    2938:	50 93 69 39 	sts	0x3969, r21	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    293c:	20 93 a8 39 	sts	0x39A8, r18	; 0x8039a8 <reactStr+0x84>
    2940:	30 93 a9 39 	sts	0x39A9, r19	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2944:	8f e5       	ldi	r24, 0x5F	; 95
    2946:	96 e7       	ldi	r25, 0x76	; 118
    2948:	80 93 2a 39 	sts	0x392A, r24	; 0x80392a <reactStr+0x6>
    294c:	90 93 2b 39 	sts	0x392B, r25	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    2950:	8a e1       	ldi	r24, 0x1A	; 26
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	80 93 6a 39 	sts	0x396A, r24	; 0x80396a <reactStr+0x46>
    2958:	90 93 6b 39 	sts	0x396B, r25	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    295c:	20 93 aa 39 	sts	0x39AA, r18	; 0x8039aa <reactStr+0x86>
    2960:	30 93 ab 39 	sts	0x39AB, r19	; 0x8039ab <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2964:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2966:	b8 c0       	rjmp	.+368    	; 0x2ad8 <CheckInput+0x3d4>
    2968:	6c eb       	ldi	r22, 0xBC	; 188
    296a:	7e eb       	ldi	r23, 0xBE	; 190
    296c:	c8 01       	movw	r24, r16
    296e:	10 dc       	rcall	.-2016   	; 0x2190 <StartsWith>
    2970:	88 23       	and	r24, r24
    2972:	19 f1       	breq	.+70     	; 0x29ba <CheckInput+0x2b6>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2974:	8e ee       	ldi	r24, 0xEE	; 238
    2976:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    297a:	8f ee       	ldi	r24, 0xEF	; 239
    297c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    2980:	80 ef       	ldi	r24, 0xF0	; 240
    2982:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    2986:	81 ef       	ldi	r24, 0xF1	; 241
    2988:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
                }
                SaveGameState();
    298c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2990:	89 e0       	ldi	r24, 0x09	; 9
    2992:	ef ec       	ldi	r30, 0xCF	; 207
    2994:	fe eb       	ldi	r31, 0xBE	; 190
    2996:	de 01       	movw	r26, r28
    2998:	11 96       	adiw	r26, 0x01	; 1
    299a:	01 90       	ld	r0, Z+
    299c:	0d 92       	st	X+, r0
    299e:	8a 95       	dec	r24
    29a0:	e1 f7       	brne	.-8      	; 0x299a <CheckInput+0x296>
                SerSpeed(60);
    29a2:	8c e3       	ldi	r24, 0x3C	; 60
    29a4:	0e 94 90 08 	call	0x1120	; 0x1120 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    29a8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    29ac:	88 23       	and	r24, r24
    29ae:	e1 f3       	breq	.-8      	; 0x29a8 <CheckInput+0x2a4>
    29b0:	ce 01       	movw	r24, r28
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    29b8:	f7 cf       	rjmp	.-18     	; 0x29a8 <CheckInput+0x2a4>
    29ba:	62 ec       	ldi	r22, 0xC2	; 194
    29bc:	7e eb       	ldi	r23, 0xBE	; 190
    29be:	c8 01       	movw	r24, r16
    29c0:	e7 db       	rcall	.-2098   	; 0x2190 <StartsWith>
    29c2:	88 23       	and	r24, r24
    29c4:	81 f1       	breq	.+96     	; 0x2a26 <CheckInput+0x322>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	8a 87       	std	Y+10, r24	; 0x0a
    29ca:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    29cc:	41 e0       	ldi	r20, 0x01	; 1
    29ce:	be 01       	movw	r22, r28
    29d0:	66 5f       	subi	r22, 0xF6	; 246
    29d2:	7f 4f       	sbci	r23, 0xFF	; 255
    29d4:	81 2f       	mov	r24, r17
    29d6:	0e 94 1b 08 	call	0x1036	; 0x1036 <EEWrite>
    29da:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    29dc:	10 32       	cpi	r17, 0x20	; 32
    29de:	b1 f7       	brne	.-20     	; 0x29cc <CheckInput+0x2c8>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    29e0:	8e ee       	ldi	r24, 0xEE	; 238
    29e2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    29e6:	8f ee       	ldi	r24, 0xEF	; 239
    29e8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    29ec:	80 ef       	ldi	r24, 0xF0	; 240
    29ee:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    29f2:	81 ef       	ldi	r24, 0xF1	; 241
    29f4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
                }
                
                SaveGameState();
    29f8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    29fc:	88 e0       	ldi	r24, 0x08	; 8
    29fe:	e8 ed       	ldi	r30, 0xD8	; 216
    2a00:	fe eb       	ldi	r31, 0xBE	; 190
    2a02:	de 01       	movw	r26, r28
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	01 90       	ld	r0, Z+
    2a08:	0d 92       	st	X+, r0
    2a0a:	8a 95       	dec	r24
    2a0c:	e1 f7       	brne	.-8      	; 0x2a06 <CheckInput+0x302>
                SerSpeed(60);
    2a0e:	8c e3       	ldi	r24, 0x3C	; 60
    2a10:	0e 94 90 08 	call	0x1120	; 0x1120 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a14:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a18:	88 23       	and	r24, r24
    2a1a:	e1 f3       	breq	.-8      	; 0x2a14 <CheckInput+0x310>
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	0e 94 7f 08 	call	0x10fe	; 0x10fe <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2a24:	f7 cf       	rjmp	.-18     	; 0x2a14 <CheckInput+0x310>
    2a26:	69 ec       	ldi	r22, 0xC9	; 201
    2a28:	7e eb       	ldi	r23, 0xBE	; 190
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	b1 db       	rcall	.-2206   	; 0x2190 <StartsWith>
    2a2e:	88 23       	and	r24, r24
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <CheckInput+0x330>
    2a32:	9b ce       	rjmp	.-714    	; 0x276a <CheckInput+0x66>
    2a34:	84 e2       	ldi	r24, 0x24	; 36
    2a36:	c8 2e       	mov	r12, r24
    2a38:	89 e3       	ldi	r24, 0x39	; 57
    2a3a:	d8 2e       	mov	r13, r24
    2a3c:	94 e6       	ldi	r25, 0x64	; 100
    2a3e:	e9 2e       	mov	r14, r25
    2a40:	99 e3       	ldi	r25, 0x39	; 57
    2a42:	f9 2e       	mov	r15, r25
    2a44:	04 ea       	ldi	r16, 0xA4	; 164
    2a46:	19 e3       	ldi	r17, 0x39	; 57
    2a48:	28 e1       	ldi	r18, 0x18	; 24
    2a4a:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2a4c:	aa 24       	eor	r10, r10
    2a4e:	a3 94       	inc	r10
    2a50:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a52:	47 e5       	ldi	r20, 0x57	; 87
    2a54:	84 2e       	mov	r8, r20
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2a5a:	52 e0       	ldi	r21, 0x02	; 2
    2a5c:	65 2e       	mov	r6, r21
    2a5e:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2a60:	41 e0       	ldi	r20, 0x01	; 1
    2a62:	be 01       	movw	r22, r28
    2a64:	6f 5f       	subi	r22, 0xFF	; 255
    2a66:	7f 4f       	sbci	r23, 0xFF	; 255
    2a68:	85 2d       	mov	r24, r5
    2a6a:	0e 94 0b 08 	call	0x1016	; 0x1016 <EERead>
                    bit = 0xff-bit;
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	80 95       	com	r24
    2a72:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a74:	28 2f       	mov	r18, r24
    2a76:	22 95       	swap	r18
    2a78:	2f 70       	andi	r18, 0x0F	; 15
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	23 57       	subi	r18, 0x73	; 115
    2a7e:	3b 48       	sbci	r19, 0x8B	; 139
    2a80:	f6 01       	movw	r30, r12
    2a82:	20 83       	st	Z, r18
    2a84:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2a86:	f7 01       	movw	r30, r14
    2a88:	a0 82       	st	Z, r10
    2a8a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	a0 82       	st	Z, r10
    2a90:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a92:	8f 70       	andi	r24, 0x0F	; 15
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	83 57       	subi	r24, 0x73	; 115
    2a98:	9b 48       	sbci	r25, 0x8B	; 139
    2a9a:	f6 01       	movw	r30, r12
    2a9c:	82 83       	std	Z+2, r24	; 0x02
    2a9e:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2aa0:	f7 01       	movw	r30, r14
    2aa2:	a2 82       	std	Z+2, r10	; 0x02
    2aa4:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	a2 82       	std	Z+2, r10	; 0x02
    2aaa:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aac:	f6 01       	movw	r30, r12
    2aae:	84 82       	std	Z+4, r8	; 0x04
    2ab0:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2ab2:	f7 01       	movw	r30, r14
    2ab4:	64 82       	std	Z+4, r6	; 0x04
    2ab6:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2ab8:	f8 01       	movw	r30, r16
    2aba:	a4 82       	std	Z+4, r10	; 0x04
    2abc:	b5 82       	std	Z+5, r11	; 0x05
    2abe:	53 94       	inc	r5
    2ac0:	f6 e0       	ldi	r31, 0x06	; 6
    2ac2:	cf 0e       	add	r12, r31
    2ac4:	d1 1c       	adc	r13, r1
    2ac6:	86 e0       	ldi	r24, 0x06	; 6
    2ac8:	e8 0e       	add	r14, r24
    2aca:	f1 1c       	adc	r15, r1
    2acc:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	e0 e2       	ldi	r30, 0x20	; 32
    2ad2:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2ad4:	c5 cf       	rjmp	.-118    	; 0x2a60 <CheckInput+0x35c>
    2ad6:	88 e1       	ldi	r24, 0x18	; 24
    2ad8:	b2 db       	rcall	.-2204   	; 0x223e <SetStandardResponse>
    2ada:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2ade:	ff 24       	eor	r15, r15
    2ae0:	f3 94       	inc	r15
}
    2ae2:	8f 2d       	mov	r24, r15
    2ae4:	2a 96       	adiw	r28, 0x0a	; 10
    2ae6:	ef e0       	ldi	r30, 0x0F	; 15
    2ae8:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__+0x6>

00002aec <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2aec:	ab e2       	ldi	r26, 0x2B	; 43
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	ec e7       	ldi	r30, 0x7C	; 124
    2af2:	f5 e1       	ldi	r31, 0x15	; 21
    2af4:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2af8:	99 24       	eor	r9, r9
    2afa:	93 94       	inc	r9
    2afc:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	fc 01       	movw	r30, r24
    2b02:	ee 0f       	add	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	ec 5d       	subi	r30, 0xDC	; 220
    2b08:	f6 4c       	sbci	r31, 0xC6	; 198
    2b0a:	2c ec       	ldi	r18, 0xCC	; 204
    2b0c:	37 e7       	ldi	r19, 0x77	; 119
    2b0e:	20 83       	st	Z, r18
    2b10:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b12:	fc 01       	movw	r30, r24
    2b14:	ee 0f       	add	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	ec 59       	subi	r30, 0x9C	; 156
    2b1a:	f6 4c       	sbci	r31, 0xC6	; 198
    2b1c:	26 e1       	ldi	r18, 0x16	; 22
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	20 83       	st	Z, r18
    2b22:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	fc 01       	movw	r30, r24
    2b2a:	ec 55       	subi	r30, 0x5C	; 92
    2b2c:	f6 4c       	sbci	r31, 0xC6	; 198
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	80 83       	st	Z, r24
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	04 e4       	ldi	r16, 0x44	; 68
    2b38:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3a:	37 e5       	ldi	r19, 0x57	; 87
    2b3c:	e3 2e       	mov	r14, r19
    2b3e:	3a e7       	ldi	r19, 0x7A	; 122
    2b40:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2b42:	42 e0       	ldi	r20, 0x02	; 2
    2b44:	c4 2e       	mov	r12, r20
    2b46:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2b48:	aa 24       	eor	r10, r10
    2b4a:	a3 94       	inc	r10
    2b4c:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2b4e:	f8 01       	movw	r30, r16
    2b50:	81 91       	ld	r24, Z+
    2b52:	91 91       	ld	r25, Z+
    2b54:	8f 01       	movw	r16, r30
    2b56:	00 97       	sbiw	r24, 0x00	; 0
    2b58:	c9 f1       	breq	.+114    	; 0x2bcc <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2b5a:	be 01       	movw	r22, r28
    2b5c:	6f 5f       	subi	r22, 0xFF	; 255
    2b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b60:	ea db       	rcall	.-2092   	; 0x2336 <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2b62:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2b64:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b66:	89 2d       	mov	r24, r9
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	ec 5d       	subi	r30, 0xDC	; 220
    2b72:	f6 4c       	sbci	r31, 0xC6	; 198
    2b74:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b76:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b78:	40 83       	st	Z, r20
    2b7a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	ee 0f       	add	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	ec 59       	subi	r30, 0x9C	; 156
    2b84:	f6 4c       	sbci	r31, 0xC6	; 198
    2b86:	20 83       	st	Z, r18
    2b88:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	fc 01       	movw	r30, r24
    2b90:	ec 55       	subi	r30, 0x5C	; 92
    2b92:	f6 4c       	sbci	r31, 0xC6	; 198
    2b94:	10 82       	st	Z, r1
    2b96:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	89 0d       	add	r24, r9
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	93 94       	inc	r9
    2ba0:	93 94       	inc	r9
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
    2ba8:	ec 5d       	subi	r30, 0xDC	; 220
    2baa:	f6 4c       	sbci	r31, 0xC6	; 198
    2bac:	e0 82       	st	Z, r14
    2bae:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	ee 0f       	add	r30, r30
    2bb4:	ff 1f       	adc	r31, r31
    2bb6:	ec 59       	subi	r30, 0x9C	; 156
    2bb8:	f6 4c       	sbci	r31, 0xC6	; 198
    2bba:	c0 82       	st	Z, r12
    2bbc:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	ec 55       	subi	r30, 0x5C	; 92
    2bc6:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc8:	a0 82       	st	Z, r10
    2bca:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2bcc:	f8 e3       	ldi	r31, 0x38	; 56
    2bce:	08 34       	cpi	r16, 0x48	; 72
    2bd0:	1f 07       	cpc	r17, r31
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <ShowInventory+0xea>
    2bd4:	bc cf       	rjmp	.-136    	; 0x2b4e <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	89 0d       	add	r24, r9
    2bda:	ab 96       	adiw	r28, 0x2b	; 43
    2bdc:	eb e0       	ldi	r30, 0x0B	; 11
    2bde:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__+0xe>

00002be2 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2be2:	a8 e0       	ldi	r26, 0x08	; 8
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e7 ef       	ldi	r30, 0xF7	; 247
    2be8:	f5 e1       	ldi	r31, 0x15	; 21
    2bea:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__+0x8>
    2bee:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2bf0:	ce dc       	rcall	.-1636   	; 0x258e <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2bf2:	c3 01       	movw	r24, r6
    2bf4:	cc dc       	rcall	.-1640   	; 0x258e <CleanInput>
    2bf6:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bf8:	29 e5       	ldi	r18, 0x59	; 89
    2bfa:	3a e7       	ldi	r19, 0x7A	; 122
    2bfc:	20 93 24 39 	sts	0x3924, r18	; 0x803924 <reactStr>
    2c00:	30 93 25 39 	sts	0x3925, r19	; 0x803925 <reactStr+0x1>
    reactStr[1][number]=length;
    2c04:	84 e0       	ldi	r24, 0x04	; 4
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	80 93 64 39 	sts	0x3964, r24	; 0x803964 <reactStr+0x40>
    2c0c:	90 93 65 39 	sts	0x3965, r25	; 0x803965 <reactStr+0x41>
    reactStr[2][number]=type;
    2c10:	01 e0       	ldi	r16, 0x01	; 1
    2c12:	10 e0       	ldi	r17, 0x00	; 0
    2c14:	00 93 a4 39 	sts	0x39A4, r16	; 0x8039a4 <reactStr+0x80>
    2c18:	10 93 a5 39 	sts	0x39A5, r17	; 0x8039a5 <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2c1c:	ff 20       	and	r15, r15
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <ProcessInput+0x40>
    2c20:	54 c7       	rjmp	.+3752   	; 0x3aca <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2c22:	d3 01       	movw	r26, r6
    2c24:	8c 91       	ld	r24, X
    2c26:	88 37       	cpi	r24, 0x78	; 120
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <ProcessInput+0x4a>
    2c2a:	45 c0       	rjmp	.+138    	; 0x2cb6 <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2c2c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2c30:	e8 2f       	mov	r30, r24
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	ee 0f       	add	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	ec 51       	subi	r30, 0x1C	; 28
    2c3a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c3c:	20 81       	ld	r18, Z
    2c3e:	31 81       	ldd	r19, Z+1	; 0x01
    2c40:	23 2b       	or	r18, r19
    2c42:	11 f0       	breq	.+4      	; 0x2c48 <ProcessInput+0x66>
    2c44:	81 11       	cpse	r24, r1
    2c46:	03 c0       	rjmp	.+6      	; 0x2c4e <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c48:	84 e4       	ldi	r24, 0x44	; 68
    2c4a:	96 e7       	ldi	r25, 0x76	; 118
    2c4c:	13 c5       	rjmp	.+2598   	; 0x3674 <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2c4e:	80 91 2a 3a 	lds	r24, 0x3A2A	; 0x803a2a <currObj+0x6>
    2c52:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
    2c56:	88 23       	and	r24, r24
    2c58:	b9 f0       	breq	.+46     	; 0x2c88 <ProcessInput+0xa6>
                --currDepth;
    2c5a:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2c5e:	e1 50       	subi	r30, 0x01	; 1
    2c60:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	ee 0f       	add	r30, r30
    2c68:	ff 1f       	adc	r31, r31
    2c6a:	ec 51       	subi	r30, 0x1C	; 28
    2c6c:	f6 4c       	sbci	r31, 0xC6	; 198
    2c6e:	64 e2       	ldi	r22, 0x24	; 36
    2c70:	7a e3       	ldi	r23, 0x3A	; 58
    2c72:	80 81       	ld	r24, Z
    2c74:	91 81       	ldd	r25, Z+1	; 0x01
    2c76:	5f db       	rcall	.-2370   	; 0x2336 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2c78:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <currObj+0x4>
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2c82:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2c86:	2a c2       	rjmp	.+1108   	; 0x30dc <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2c88:	80 91 46 3a 	lds	r24, 0x3A46	; 0x803a46 <currObj+0x22>
    2c8c:	90 91 47 3a 	lds	r25, 0x3A47	; 0x803a47 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c90:	20 91 38 3a 	lds	r18, 0x3A38	; 0x803a38 <currObj+0x14>
    2c94:	30 91 39 3a 	lds	r19, 0x3A39	; 0x803a39 <currObj+0x15>
    2c98:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    2c9c:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2ca0:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2ca4:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2ca8:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2cac:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2cb0:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <currObj+0x28>
    2cb4:	a9 c5       	rjmp	.+2898   	; 0x3808 <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2cb6:	85 36       	cpi	r24, 0x65	; 101
    2cb8:	19 f0       	breq	.+6      	; 0x2cc0 <ProcessInput+0xde>
    2cba:	8f 36       	cpi	r24, 0x6F	; 111
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <ProcessInput+0xde>
    2cbe:	de c0       	rjmp	.+444    	; 0x2e7c <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2cc0:	b2 e0       	ldi	r27, 0x02	; 2
    2cc2:	fb 12       	cpse	r15, r27
    2cc4:	c1 cf       	rjmp	.-126    	; 0x2c48 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2cc6:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    2cca:	10 e0       	ldi	r17, 0x00	; 0
    2ccc:	f8 01       	movw	r30, r16
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	ec 51       	subi	r30, 0x1C	; 28
    2cd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	50 e0       	ldi	r21, 0x00	; 0
    2cda:	d3 01       	movw	r26, r6
    2cdc:	11 96       	adiw	r26, 0x01	; 1
    2cde:	6c 91       	ld	r22, X
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	e8 db       	rcall	.-2096   	; 0x24b6 <FindChild>
    2ce6:	00 0f       	add	r16, r16
    2ce8:	11 1f       	adc	r17, r17
    2cea:	f8 01       	movw	r30, r16
    2cec:	ea 51       	subi	r30, 0x1A	; 26
    2cee:	f6 4c       	sbci	r31, 0xC6	; 198
    2cf0:	80 83       	st	Z, r24
    2cf2:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2cf4:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    2cf8:	29 2f       	mov	r18, r25
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	ee 0f       	add	r30, r30
    2d00:	ff 1f       	adc	r31, r31
    2d02:	ea 51       	subi	r30, 0x1A	; 26
    2d04:	f6 4c       	sbci	r31, 0xC6	; 198
    2d06:	40 81       	ld	r20, Z
    2d08:	51 81       	ldd	r21, Z+1	; 0x01
    2d0a:	41 15       	cp	r20, r1
    2d0c:	51 05       	cpc	r21, r1
    2d0e:	21 f0       	breq	.+8      	; 0x2d18 <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2d10:	63 ee       	ldi	r22, 0xE3	; 227
    2d12:	78 e3       	ldi	r23, 0x38	; 56
    2d14:	ca 01       	movw	r24, r20
    2d16:	1c c0       	rjmp	.+56     	; 0x2d50 <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2d18:	99 23       	and	r25, r25
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <ProcessInput+0x13c>
    2d1c:	dc c6       	rjmp	.+3512   	; 0x3ad6 <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2d1e:	22 0f       	add	r18, r18
    2d20:	33 1f       	adc	r19, r19
    2d22:	f9 01       	movw	r30, r18
    2d24:	ee 51       	subi	r30, 0x1E	; 30
    2d26:	f6 4c       	sbci	r31, 0xC6	; 198
    2d28:	d3 01       	movw	r26, r6
    2d2a:	11 96       	adiw	r26, 0x01	; 1
    2d2c:	6c 91       	ld	r22, X
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	7a db       	rcall	.-2316   	; 0x2428 <CheckLetter>
    2d34:	88 23       	and	r24, r24
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <ProcessInput+0x158>
    2d38:	ce c6       	rjmp	.+3484   	; 0x3ad6 <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2d3a:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	ee 51       	subi	r30, 0x1E	; 30
    2d46:	f6 4c       	sbci	r31, 0xC6	; 198
    2d48:	63 ee       	ldi	r22, 0xE3	; 227
    2d4a:	78 e3       	ldi	r23, 0x38	; 56
    2d4c:	80 81       	ld	r24, Z
    2d4e:	91 81       	ldd	r25, Z+1	; 0x01
    2d50:	f2 da       	rcall	.-2588   	; 0x2336 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2d52:	d3 01       	movw	r26, r6
    2d54:	8c 91       	ld	r24, X
    2d56:	85 36       	cpi	r24, 0x65	; 101
    2d58:	c1 f4       	brne	.+48     	; 0x2d8a <ProcessInput+0x1a8>
    2d5a:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    2d5e:	80 fd       	sbrc	r24, 0
    2d60:	1d c0       	rjmp	.+58     	; 0x2d9c <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d62:	8d e9       	ldi	r24, 0x9D	; 157
    2d64:	99 e7       	ldi	r25, 0x79	; 121
    2d66:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    2d6a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2d6e:	8e e1       	ldi	r24, 0x1E	; 30
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2d76:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    2d82:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2d86:	12 e0       	ldi	r17, 0x02	; 2
    2d88:	97 c6       	rjmp	.+3374   	; 0x3ab8 <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2d8a:	8f 36       	cpi	r24, 0x6F	; 111
    2d8c:	39 f4       	brne	.+14     	; 0x2d9c <ProcessInput+0x1ba>
    2d8e:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    2d92:	81 fd       	sbrc	r24, 1
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d96:	82 e8       	ldi	r24, 0x82	; 130
    2d98:	99 e7       	ldi	r25, 0x79	; 121
    2d9a:	6c c4       	rjmp	.+2264   	; 0x3674 <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2d9c:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj1.3993+0x6>
    2da0:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
    2da4:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2da8:	88 23       	and	r24, r24
    2daa:	09 f4       	brne	.+2      	; 0x2dae <ProcessInput+0x1cc>
    2dac:	49 c0       	rjmp	.+146    	; 0x2e40 <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2dae:	ae 2f       	mov	r26, r30
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	aa 0f       	add	r26, r26
    2db4:	bb 1f       	adc	r27, r27
    2db6:	aa 51       	subi	r26, 0x1A	; 26
    2db8:	b6 4c       	sbci	r27, 0xC6	; 198
    2dba:	8d 91       	ld	r24, X+
    2dbc:	9c 91       	ld	r25, X
    2dbe:	89 2b       	or	r24, r25
    2dc0:	11 f0       	breq	.+4      	; 0x2dc6 <ProcessInput+0x1e4>
    2dc2:	ef 5f       	subi	r30, 0xFF	; 255
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <ProcessInput+0x1e6>
    2dc6:	e1 50       	subi	r30, 0x01	; 1
    2dc8:	e0 93 35 38 	sts	0x3835, r30	; 0x803835 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2dcc:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	ec 51       	subi	r30, 0x1C	; 28
    2dd8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dda:	64 e2       	ldi	r22, 0x24	; 36
    2ddc:	7a e3       	ldi	r23, 0x3A	; 58
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	a9 da       	rcall	.-2734   	; 0x2336 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2de4:	80 91 40 3a 	lds	r24, 0x3A40	; 0x803a40 <currObj+0x1c>
    2de8:	90 91 41 3a 	lds	r25, 0x3A41	; 0x803a41 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dec:	20 91 32 3a 	lds	r18, 0x3A32	; 0x803a32 <currObj+0xe>
    2df0:	30 91 33 3a 	lds	r19, 0x3A33	; 0x803a33 <currObj+0xf>
    2df4:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    2df8:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2dfc:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2e00:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2e04:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2e08:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e0c:	89 e5       	ldi	r24, 0x59	; 89
    2e0e:	9a e7       	ldi	r25, 0x7A	; 122
    2e10:	80 93 28 39 	sts	0x3928, r24	; 0x803928 <reactStr+0x4>
    2e14:	90 93 29 39 	sts	0x3929, r25	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    2e20:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	80 93 a8 39 	sts	0x39A8, r24	; 0x8039a8 <reactStr+0x84>
    2e2c:	90 93 a9 39 	sts	0x39A9, r25	; 0x8039a9 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2e30:	80 91 28 3a 	lds	r24, 0x3A28	; 0x803a28 <currObj+0x4>
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2e3a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2e3e:	07 c4       	rjmp	.+2062   	; 0x364e <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	ee 0f       	add	r30, r30
    2e44:	ff 1f       	adc	r31, r31
    2e46:	ea 51       	subi	r30, 0x1A	; 26
    2e48:	f6 4c       	sbci	r31, 0xC6	; 198
    2e4a:	10 82       	st	Z, r1
    2e4c:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2e4e:	80 91 05 39 	lds	r24, 0x3905	; 0x803905 <actObj1.3993+0x22>
    2e52:	90 91 06 39 	lds	r25, 0x3906	; 0x803906 <actObj1.3993+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e56:	20 91 f7 38 	lds	r18, 0x38F7	; 0x8038f7 <actObj1.3993+0x14>
    2e5a:	30 91 f8 38 	lds	r19, 0x38F8	; 0x8038f8 <actObj1.3993+0x15>
    2e5e:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    2e62:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2e66:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2e6a:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2e6e:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2e72:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2e76:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <actObj1.3993+0x28>
    2e7a:	c6 c4       	rjmp	.+2444   	; 0x3808 <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2e7c:	8c 36       	cpi	r24, 0x6C	; 108
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <ProcessInput+0x2a0>
    2e80:	59 c1       	rjmp	.+690    	; 0x3134 <ProcessInput+0x552>
    2e82:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
            if (inputLen == 1) {
    2e86:	b1 e0       	ldi	r27, 0x01	; 1
    2e88:	fb 12       	cpse	r15, r27
    2e8a:	f1 c0       	rjmp	.+482    	; 0x306e <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e8c:	80 91 40 3a 	lds	r24, 0x3A40	; 0x803a40 <currObj+0x1c>
    2e90:	90 91 41 3a 	lds	r25, 0x3A41	; 0x803a41 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e94:	40 91 32 3a 	lds	r20, 0x3A32	; 0x803a32 <currObj+0xe>
    2e98:	50 91 33 3a 	lds	r21, 0x3A33	; 0x803a33 <currObj+0xf>
    2e9c:	40 93 26 39 	sts	0x3926, r20	; 0x803926 <reactStr+0x2>
    2ea0:	50 93 27 39 	sts	0x3927, r21	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    2ea4:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    2ea8:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    2eac:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    2eb0:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eb4:	20 93 28 39 	sts	0x3928, r18	; 0x803928 <reactStr+0x4>
    2eb8:	30 93 29 39 	sts	0x3929, r19	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    2ec4:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    2ec8:	00 93 a8 39 	sts	0x39A8, r16	; 0x8039a8 <reactStr+0x84>
    2ecc:	10 93 a9 39 	sts	0x39A9, r17	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ed0:	8b ee       	ldi	r24, 0xEB	; 235
    2ed2:	99 e7       	ldi	r25, 0x79	; 121
    2ed4:	80 93 2a 39 	sts	0x392A, r24	; 0x80392a <reactStr+0x6>
    2ed8:	90 93 2b 39 	sts	0x392B, r25	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    2edc:	85 e1       	ldi	r24, 0x15	; 21
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	80 93 6a 39 	sts	0x396A, r24	; 0x80396a <reactStr+0x46>
    2ee4:	90 93 6b 39 	sts	0x396B, r25	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    2ee8:	00 93 aa 39 	sts	0x39AA, r16	; 0x8039aa <reactStr+0x86>
    2eec:	10 93 ab 39 	sts	0x39AB, r17	; 0x8039ab <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	ee 0f       	add	r30, r30
    2ef4:	ff 1f       	adc	r31, r31
    2ef6:	ea 51       	subi	r30, 0x1A	; 26
    2ef8:	f6 4c       	sbci	r31, 0xC6	; 198
    2efa:	10 82       	st	Z, r1
    2efc:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2efe:	14 e0       	ldi	r17, 0x04	; 4
    2f00:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f02:	07 e5       	ldi	r16, 0x57	; 87
    2f04:	e0 2e       	mov	r14, r16
    2f06:	0a e7       	ldi	r16, 0x7A	; 122
    2f08:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	c8 2e       	mov	r12, r24
    2f0e:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2f10:	aa 24       	eor	r10, r10
    2f12:	a3 94       	inc	r10
    2f14:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2f16:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <currDepth>
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	8c 01       	movw	r16, r24
    2f1e:	00 0f       	add	r16, r16
    2f20:	11 1f       	adc	r17, r17
    2f22:	0a 51       	subi	r16, 0x1A	; 26
    2f24:	16 4c       	sbci	r17, 0xC6	; 198
    2f26:	f8 01       	movw	r30, r16
    2f28:	40 81       	ld	r20, Z
    2f2a:	51 81       	ldd	r21, Z+1	; 0x01
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	fc 01       	movw	r30, r24
    2f32:	ec 51       	subi	r30, 0x1C	; 28
    2f34:	f6 4c       	sbci	r31, 0xC6	; 198
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	bc da       	rcall	.-2696   	; 0x24b6 <FindChild>
    2f3e:	d8 01       	movw	r26, r16
    2f40:	8d 93       	st	X+, r24
    2f42:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2f44:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	ee 0f       	add	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	ea 51       	subi	r30, 0x1A	; 26
    2f50:	f6 4c       	sbci	r31, 0xC6	; 198
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <ProcessInput+0x37a>
    2f5a:	4a c0       	rjmp	.+148    	; 0x2ff0 <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2f5c:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    2f60:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    2f64:	82 17       	cp	r24, r18
    2f66:	93 07       	cpc	r25, r19
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <ProcessInput+0x38a>
    2f6a:	42 c0       	rjmp	.+132    	; 0x2ff0 <ProcessInput+0x40e>
    2f6c:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    2f70:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    2f74:	82 17       	cp	r24, r18
    2f76:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2f78:	d9 f1       	breq	.+118    	; 0x2ff0 <ProcessInput+0x40e>
    2f7a:	63 ee       	ldi	r22, 0xE3	; 227
    2f7c:	78 e3       	ldi	r23, 0x38	; 56
    2f7e:	db d9       	rcall	.-3146   	; 0x2336 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2f80:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    2f84:	90 91 fe 38 	lds	r25, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f88:	e9 2d       	mov	r30, r9
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	df 01       	movw	r26, r30
    2f8e:	aa 0f       	add	r26, r26
    2f90:	bb 1f       	adc	r27, r27
    2f92:	ac 5d       	subi	r26, 0xDC	; 220
    2f94:	b6 4c       	sbci	r27, 0xC6	; 198
    2f96:	20 91 ef 38 	lds	r18, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    2f9a:	30 91 f0 38 	lds	r19, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    2f9e:	2d 93       	st	X+, r18
    2fa0:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2fa2:	df 01       	movw	r26, r30
    2fa4:	aa 0f       	add	r26, r26
    2fa6:	bb 1f       	adc	r27, r27
    2fa8:	ac 59       	subi	r26, 0x9C	; 156
    2faa:	b6 4c       	sbci	r27, 0xC6	; 198
    2fac:	8d 93       	st	X+, r24
    2fae:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2fb0:	ee 0f       	add	r30, r30
    2fb2:	ff 1f       	adc	r31, r31
    2fb4:	ec 55       	subi	r30, 0x5C	; 92
    2fb6:	f6 4c       	sbci	r31, 0xC6	; 198
    2fb8:	10 82       	st	Z, r1
    2fba:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	89 0d       	add	r24, r9
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	93 94       	inc	r9
    2fc4:	93 94       	inc	r9
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	ee 0f       	add	r30, r30
    2fca:	ff 1f       	adc	r31, r31
    2fcc:	ec 5d       	subi	r30, 0xDC	; 220
    2fce:	f6 4c       	sbci	r31, 0xC6	; 198
    2fd0:	e0 82       	st	Z, r14
    2fd2:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	ee 0f       	add	r30, r30
    2fd8:	ff 1f       	adc	r31, r31
    2fda:	ec 59       	subi	r30, 0x9C	; 156
    2fdc:	f6 4c       	sbci	r31, 0xC6	; 198
    2fde:	c0 82       	st	Z, r12
    2fe0:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	ec 55       	subi	r30, 0x5C	; 92
    2fea:	f6 4c       	sbci	r31, 0xC6	; 198
    2fec:	a0 82       	st	Z, r10
    2fee:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2ff0:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    2ff4:	82 2f       	mov	r24, r18
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	ee 0f       	add	r30, r30
    2ffc:	ff 1f       	adc	r31, r31
    2ffe:	ea 51       	subi	r30, 0x1A	; 26
    3000:	f6 4c       	sbci	r31, 0xC6	; 198
    3002:	40 81       	ld	r20, Z
    3004:	51 81       	ldd	r21, Z+1	; 0x01
    3006:	45 2b       	or	r20, r21
    3008:	09 f0       	breq	.+2      	; 0x300c <ProcessInput+0x42a>
    300a:	85 cf       	rjmp	.-246    	; 0x2f16 <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    300c:	22 23       	and	r18, r18
    300e:	61 f1       	breq	.+88     	; 0x3068 <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	fc 01       	movw	r30, r24
    3016:	ee 51       	subi	r30, 0x1E	; 30
    3018:	f6 4c       	sbci	r31, 0xC6	; 198
    301a:	63 ee       	ldi	r22, 0xE3	; 227
    301c:	78 e3       	ldi	r23, 0x38	; 56
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	89 d9       	rcall	.-3310   	; 0x2336 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3024:	20 91 fd 38 	lds	r18, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    3028:	30 91 fe 38 	lds	r19, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    302c:	11 e0       	ldi	r17, 0x01	; 1
    302e:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3030:	89 2d       	mov	r24, r9
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	fc 01       	movw	r30, r24
    3036:	ee 0f       	add	r30, r30
    3038:	ff 1f       	adc	r31, r31
    303a:	ec 5d       	subi	r30, 0xDC	; 220
    303c:	f6 4c       	sbci	r31, 0xC6	; 198
    303e:	40 91 ef 38 	lds	r20, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    3042:	50 91 f0 38 	lds	r21, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    3046:	40 83       	st	Z, r20
    3048:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    304a:	fc 01       	movw	r30, r24
    304c:	ee 0f       	add	r30, r30
    304e:	ff 1f       	adc	r31, r31
    3050:	ec 59       	subi	r30, 0x9C	; 156
    3052:	f6 4c       	sbci	r31, 0xC6	; 198
    3054:	20 83       	st	Z, r18
    3056:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3058:	88 0f       	add	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	fc 01       	movw	r30, r24
    305e:	ec 55       	subi	r30, 0x5C	; 92
    3060:	f6 4c       	sbci	r31, 0xC6	; 198
    3062:	10 82       	st	Z, r1
    3064:	11 82       	std	Z+1, r1	; 0x01
    3066:	28 c5       	rjmp	.+2640   	; 0x3ab8 <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    3068:	1f ef       	ldi	r17, 0xFF	; 255
    306a:	19 0d       	add	r17, r9
    306c:	25 c5       	rjmp	.+2634   	; 0x3ab8 <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    306e:	ee 2e       	mov	r14, r30
    3070:	f1 2c       	mov	r15, r1
    3072:	f7 01       	movw	r30, r14
    3074:	ee 0f       	add	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	ec 51       	subi	r30, 0x1C	; 28
    307a:	f6 4c       	sbci	r31, 0xC6	; 198
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	d3 01       	movw	r26, r6
    3082:	11 96       	adiw	r26, 0x01	; 1
    3084:	6c 91       	ld	r22, X
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	15 da       	rcall	.-3030   	; 0x24b6 <FindChild>
    308c:	f7 01       	movw	r30, r14
    308e:	ee 0f       	add	r30, r30
    3090:	ff 1f       	adc	r31, r31
    3092:	ea 51       	subi	r30, 0x1A	; 26
    3094:	f6 4c       	sbci	r31, 0xC6	; 198
    3096:	80 83       	st	Z, r24
    3098:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    309a:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <currDepth>
    309e:	29 2f       	mov	r18, r25
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	f9 01       	movw	r30, r18
    30a4:	ee 0f       	add	r30, r30
    30a6:	ff 1f       	adc	r31, r31
    30a8:	ea 51       	subi	r30, 0x1A	; 26
    30aa:	f6 4c       	sbci	r31, 0xC6	; 198
    30ac:	40 81       	ld	r20, Z
    30ae:	51 81       	ldd	r21, Z+1	; 0x01
    30b0:	41 15       	cp	r20, r1
    30b2:	51 05       	cpc	r21, r1
    30b4:	21 f0       	breq	.+8      	; 0x30be <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    30b6:	63 ee       	ldi	r22, 0xE3	; 227
    30b8:	78 e3       	ldi	r23, 0x38	; 56
    30ba:	ca 01       	movw	r24, r20
    30bc:	1c c0       	rjmp	.+56     	; 0x30f6 <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    30be:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    30c0:	81 f1       	breq	.+96     	; 0x3122 <ProcessInput+0x540>
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	f9 01       	movw	r30, r18
    30c8:	ee 51       	subi	r30, 0x1E	; 30
    30ca:	f6 4c       	sbci	r31, 0xC6	; 198
    30cc:	d3 01       	movw	r26, r6
    30ce:	11 96       	adiw	r26, 0x01	; 1
    30d0:	6c 91       	ld	r22, X
    30d2:	80 81       	ld	r24, Z
    30d4:	91 81       	ldd	r25, Z+1	; 0x01
    30d6:	a8 d9       	rcall	.-3248   	; 0x2428 <CheckLetter>
    30d8:	81 11       	cpse	r24, r1
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    30dc:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    30de:	ec c4       	rjmp	.+2520   	; 0x3ab8 <ProcessInput+0xed6>
    30e0:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	ee 0f       	add	r30, r30
    30e8:	ff 1f       	adc	r31, r31
    30ea:	ee 51       	subi	r30, 0x1E	; 30
    30ec:	f6 4c       	sbci	r31, 0xC6	; 198
    30ee:	63 ee       	ldi	r22, 0xE3	; 227
    30f0:	78 e3       	ldi	r23, 0x38	; 56
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	1f d9       	rcall	.-3522   	; 0x2336 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    30f8:	80 91 ff 38 	lds	r24, 0x38FF	; 0x8038ff <actObj1.3993+0x1c>
    30fc:	90 91 00 39 	lds	r25, 0x3900	; 0x803900 <actObj1.3993+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3100:	20 91 f1 38 	lds	r18, 0x38F1	; 0x8038f1 <actObj1.3993+0xe>
    3104:	30 91 f2 38 	lds	r19, 0x38F2	; 0x8038f2 <actObj1.3993+0xf>
    3108:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    310c:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3110:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3114:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3118:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    311c:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    3120:	32 ce       	rjmp	.-924    	; 0x2d86 <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3122:	81 ed       	ldi	r24, 0xD1	; 209
    3124:	99 e7       	ldi	r25, 0x79	; 121
    3126:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    312a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    312e:	8a e1       	ldi	r24, 0x1A	; 26
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	c9 c2       	rjmp	.+1426   	; 0x36c6 <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    3134:	80 37       	cpi	r24, 0x70	; 112
    3136:	09 f0       	breq	.+2      	; 0x313a <ProcessInput+0x558>
    3138:	92 c0       	rjmp	.+292    	; 0x325e <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    313a:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    313e:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3142:	89 2b       	or	r24, r25
    3144:	79 f0       	breq	.+30     	; 0x3164 <ProcessInput+0x582>
    3146:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    314a:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    314e:	89 2b       	or	r24, r25
    3150:	49 f0       	breq	.+18     	; 0x3164 <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3152:	87 e0       	ldi	r24, 0x07	; 7
    3154:	98 e7       	ldi	r25, 0x78	; 120
    3156:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    315a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    315e:	89 e5       	ldi	r24, 0x59	; 89
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	b1 c2       	rjmp	.+1378   	; 0x36c6 <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    3164:	b2 e0       	ldi	r27, 0x02	; 2
    3166:	fb 12       	cpse	r15, r27
    3168:	6f cd       	rjmp	.-1314   	; 0x2c48 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    316a:	00 91 35 38 	lds	r16, 0x3835	; 0x803835 <currDepth>
    316e:	10 e0       	ldi	r17, 0x00	; 0
    3170:	f8 01       	movw	r30, r16
    3172:	ee 0f       	add	r30, r30
    3174:	ff 1f       	adc	r31, r31
    3176:	ec 51       	subi	r30, 0x1C	; 28
    3178:	f6 4c       	sbci	r31, 0xC6	; 198
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	d3 01       	movw	r26, r6
    3180:	11 96       	adiw	r26, 0x01	; 1
    3182:	6c 91       	ld	r22, X
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	96 d9       	rcall	.-3284   	; 0x24b6 <FindChild>
    318a:	00 0f       	add	r16, r16
    318c:	11 1f       	adc	r17, r17
    318e:	f8 01       	movw	r30, r16
    3190:	ea 51       	subi	r30, 0x1A	; 26
    3192:	f6 4c       	sbci	r31, 0xC6	; 198
    3194:	80 83       	st	Z, r24
    3196:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3198:	20 91 35 38 	lds	r18, 0x3835	; 0x803835 <currDepth>
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	2f 5f       	subi	r18, 0xFF	; 255
    31a0:	3f 4f       	sbci	r19, 0xFF	; 255
    31a2:	22 0f       	add	r18, r18
    31a4:	33 1f       	adc	r19, r19
    31a6:	f9 01       	movw	r30, r18
    31a8:	ec 51       	subi	r30, 0x1C	; 28
    31aa:	f6 4c       	sbci	r31, 0xC6	; 198
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <ProcessInput+0x5d4>
    31b4:	38 c3       	rjmp	.+1648   	; 0x3826 <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    31b6:	40 91 44 38 	lds	r20, 0x3844	; 0x803844 <inventory>
    31ba:	50 91 45 38 	lds	r21, 0x3845	; 0x803845 <inventory+0x1>
    31be:	84 17       	cp	r24, r20
    31c0:	95 07       	cpc	r25, r21
    31c2:	39 f0       	breq	.+14     	; 0x31d2 <ProcessInput+0x5f0>
    31c4:	40 91 46 38 	lds	r20, 0x3846	; 0x803846 <inventory+0x2>
    31c8:	50 91 47 38 	lds	r21, 0x3847	; 0x803847 <inventory+0x3>
    31cc:	84 17       	cp	r24, r20
    31ce:	95 07       	cpc	r25, r21
    31d0:	c1 f4       	brne	.+48     	; 0x3202 <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31d2:	82 ee       	ldi	r24, 0xE2	; 226
    31d4:	97 e7       	ldi	r25, 0x77	; 119
    31d6:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    31da:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    31de:	85 e2       	ldi	r24, 0x25	; 37
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    31e6:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    31f2:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    31f6:	f9 01       	movw	r30, r18
    31f8:	ec 51       	subi	r30, 0x1C	; 28
    31fa:	f6 4c       	sbci	r31, 0xC6	; 198
    31fc:	10 82       	st	Z, r1
    31fe:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3200:	c2 cd       	rjmp	.-1148   	; 0x2d86 <ProcessInput+0x1a4>
    3202:	63 ee       	ldi	r22, 0xE3	; 227
    3204:	78 e3       	ldi	r23, 0x38	; 56
    3206:	97 d8       	rcall	.-3794   	; 0x2336 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    3208:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x7>
    320c:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
    3210:	88 23       	and	r24, r24
    3212:	09 f4       	brne	.+2      	; 0x3216 <ProcessInput+0x634>
    3214:	e3 c2       	rjmp	.+1478   	; 0x37dc <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    3216:	80 91 ee 38 	lds	r24, 0x38EE	; 0x8038ee <actObj1.3993+0xb>
    321a:	88 23       	and	r24, r24
    321c:	09 f4       	brne	.+2      	; 0x3220 <ProcessInput+0x63e>
    321e:	14 cd       	rjmp	.-1496   	; 0x2c48 <ProcessInput+0x66>
                                if (inventory[0]) {
    3220:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3224:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3228:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                                    inventory[1] = route[currDepth+1];
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	ee 0f       	add	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	ea 51       	subi	r30, 0x1A	; 26
    3234:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    3236:	89 2b       	or	r24, r25
    3238:	39 f0       	breq	.+14     	; 0x3248 <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    3242:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    3246:	06 c0       	rjmp	.+12     	; 0x3254 <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    3250:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3254:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3258:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    325c:	2b c0       	rjmp	.+86     	; 0x32b4 <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    325e:	84 36       	cpi	r24, 0x64	; 100
    3260:	d9 f4       	brne	.+54     	; 0x3298 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    3262:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3266:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	09 f0       	breq	.+2      	; 0x3270 <ProcessInput+0x68e>
    326e:	3c c4       	rjmp	.+2168   	; 0x3ae8 <ProcessInput+0xf06>
    3270:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3274:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3278:	89 2b       	or	r24, r25
    327a:	49 f4       	brne	.+18     	; 0x328e <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    327c:	86 ea       	ldi	r24, 0xA6	; 166
    327e:	97 e7       	ldi	r25, 0x77	; 119
    3280:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3284:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3288:	86 e2       	ldi	r24, 0x26	; 38
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	72 cd       	rjmp	.-1308   	; 0x2d72 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    328e:	b2 e0       	ldi	r27, 0x02	; 2
    3290:	fb 16       	cp	r15, r27
    3292:	09 f4       	brne	.+2      	; 0x3296 <ProcessInput+0x6b4>
    3294:	8b c4       	rjmp	.+2326   	; 0x3bac <ProcessInput+0xfca>
    3296:	d8 cc       	rjmp	.-1616   	; 0x2c48 <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    3298:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    329a:	81 f4       	brne	.+32     	; 0x32bc <ProcessInput+0x6da>
    329c:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    32a0:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    32a4:	89 2b       	or	r24, r25
    32a6:	31 f4       	brne	.+12     	; 0x32b4 <ProcessInput+0x6d2>
    32a8:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    32ac:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    32b0:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    32b2:	21 f3       	breq	.-56     	; 0x327c <ProcessInput+0x69a>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	1a dc       	rcall	.-1996   	; 0x2aec <ShowInventory>
    32b8:	18 2f       	mov	r17, r24
    32ba:	fe c3       	rjmp	.+2044   	; 0x3ab8 <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    32bc:	9c e8       	ldi	r25, 0x8C	; 140
    32be:	98 0f       	add	r25, r24
    32c0:	92 30       	cpi	r25, 0x02	; 2
    32c2:	28 f0       	brcs	.+10     	; 0x32ce <ProcessInput+0x6ec>
    32c4:	87 36       	cpi	r24, 0x67	; 103
    32c6:	19 f0       	breq	.+6      	; 0x32ce <ProcessInput+0x6ec>
    32c8:	82 37       	cpi	r24, 0x72	; 114
    32ca:	09 f0       	breq	.+2      	; 0x32ce <ProcessInput+0x6ec>
    32cc:	b5 c2       	rjmp	.+1386   	; 0x3838 <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    32ce:	8e ef       	ldi	r24, 0xFE	; 254
    32d0:	8f 0d       	add	r24, r15
    32d2:	82 30       	cpi	r24, 0x02	; 2
    32d4:	08 f0       	brcs	.+2      	; 0x32d8 <ProcessInput+0x6f6>
    32d6:	b8 cc       	rjmp	.-1680   	; 0x2c48 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    32d8:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    32dc:	0e 2f       	mov	r16, r30
    32de:	10 e0       	ldi	r17, 0x00	; 0
    32e0:	d3 01       	movw	r26, r6
    32e2:	af 0d       	add	r26, r15
    32e4:	b1 1d       	adc	r27, r1
    32e6:	11 97       	sbiw	r26, 0x01	; 1
    32e8:	f8 01       	movw	r30, r16
    32ea:	ee 0f       	add	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	ec 51       	subi	r30, 0x1C	; 28
    32f0:	f6 4c       	sbci	r31, 0xC6	; 198
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	6c 91       	ld	r22, X
    32f8:	80 81       	ld	r24, Z
    32fa:	91 81       	ldd	r25, Z+1	; 0x01
    32fc:	dc d8       	rcall	.-3656   	; 0x24b6 <FindChild>
    32fe:	f8 01       	movw	r30, r16
    3300:	ee 0f       	add	r30, r30
    3302:	ff 1f       	adc	r31, r31
    3304:	ea 51       	subi	r30, 0x1A	; 26
    3306:	f6 4c       	sbci	r31, 0xC6	; 198
    3308:	80 83       	st	Z, r24
    330a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    330c:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	ee 0f       	add	r30, r30
    3314:	ff 1f       	adc	r31, r31
    3316:	ea 51       	subi	r30, 0x1A	; 26
    3318:	f6 4c       	sbci	r31, 0xC6	; 198
    331a:	80 81       	ld	r24, Z
    331c:	91 81       	ldd	r25, Z+1	; 0x01
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	09 f4       	brne	.+2      	; 0x3324 <ProcessInput+0x742>
    3322:	78 c2       	rjmp	.+1264   	; 0x3814 <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    3324:	f3 e0       	ldi	r31, 0x03	; 3
    3326:	ff 12       	cpse	r15, r31
    3328:	60 c1       	rjmp	.+704    	; 0x35ea <ProcessInput+0xa08>
    332a:	d3 01       	movw	r26, r6
    332c:	2c 91       	ld	r18, X
    332e:	25 37       	cpi	r18, 0x75	; 117
    3330:	19 f0       	breq	.+6      	; 0x3338 <ProcessInput+0x756>
    3332:	27 36       	cpi	r18, 0x67	; 103
    3334:	09 f0       	breq	.+2      	; 0x3338 <ProcessInput+0x756>
    3336:	59 c1       	rjmp	.+690    	; 0x35ea <ProcessInput+0xa08>
    3338:	00 e0       	ldi	r16, 0x00	; 0
    333a:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    333c:	41 e6       	ldi	r20, 0x61	; 97
    333e:	c4 2e       	mov	r12, r20
    3340:	49 e7       	ldi	r20, 0x79	; 121
    3342:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    3344:	51 e2       	ldi	r21, 0x21	; 33
    3346:	a5 2e       	mov	r10, r21
    3348:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    334a:	88 24       	eor	r8, r8
    334c:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    334e:	91 2c       	mov	r9, r1
    3350:	e0 2e       	mov	r14, r16
    3352:	f1 2c       	mov	r15, r1
    3354:	c7 01       	movw	r24, r14
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	fc 01       	movw	r30, r24
    335c:	ec 5b       	subi	r30, 0xBC	; 188
    335e:	f7 4c       	sbci	r31, 0xC7	; 199
    3360:	7f 01       	movw	r14, r30
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    3368:	79 f0       	breq	.+30     	; 0x3388 <ProcessInput+0x7a6>
    336a:	d3 01       	movw	r26, r6
    336c:	11 96       	adiw	r26, 0x01	; 1
    336e:	6c 91       	ld	r22, X
    3370:	5b d8       	rcall	.-3914   	; 0x2428 <CheckLetter>
    3372:	88 23       	and	r24, r24
    3374:	49 f0       	breq	.+18     	; 0x3388 <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    3376:	68 eb       	ldi	r22, 0xB8	; 184
    3378:	78 e3       	ldi	r23, 0x38	; 56
    337a:	f7 01       	movw	r30, r14
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	0e 94 9b 11 	call	0x2336	; 0x2336 <PopulateObject>
                                    x = 2;
    3384:	02 e0       	ldi	r16, 0x02	; 2
    3386:	1d c0       	rjmp	.+58     	; 0x33c2 <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    3388:	01 30       	cpi	r16, 0x01	; 1
    338a:	d1 f4       	brne	.+52     	; 0x33c0 <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    338c:	e1 2f       	mov	r30, r17
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	df 01       	movw	r26, r30
    3392:	aa 0f       	add	r26, r26
    3394:	bb 1f       	adc	r27, r27
    3396:	ac 5d       	subi	r26, 0xDC	; 220
    3398:	b6 4c       	sbci	r27, 0xC6	; 198
    339a:	cd 92       	st	X+, r12
    339c:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    339e:	df 01       	movw	r26, r30
    33a0:	aa 0f       	add	r26, r26
    33a2:	bb 1f       	adc	r27, r27
    33a4:	ac 59       	subi	r26, 0x9C	; 156
    33a6:	b6 4c       	sbci	r27, 0xC6	; 198
    33a8:	ad 92       	st	X+, r10
    33aa:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    33ac:	ee 0f       	add	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	ec 55       	subi	r30, 0x5C	; 92
    33b2:	f6 4c       	sbci	r31, 0xC6	; 198
    33b4:	80 82       	st	Z, r8
    33b6:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    33b8:	d3 01       	movw	r26, r6
    33ba:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    33bc:	1f 5f       	subi	r17, 0xFF	; 255
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <ProcessInput+0x7e0>
    33c0:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    33c2:	0f 5f       	subi	r16, 0xFF	; 255
    33c4:	01 30       	cpi	r16, 0x01	; 1
    33c6:	21 f2       	breq	.-120    	; 0x3350 <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    33c8:	f3 01       	movw	r30, r6
    33ca:	80 81       	ld	r24, Z
    33cc:	88 23       	and	r24, r24
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <ProcessInput+0x7f0>
    33d0:	73 c3       	rjmp	.+1766   	; 0x3ab8 <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    33d2:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	ee 0f       	add	r30, r30
    33da:	ff 1f       	adc	r31, r31
    33dc:	ea 51       	subi	r30, 0x1A	; 26
    33de:	f6 4c       	sbci	r31, 0xC6	; 198
    33e0:	63 ee       	ldi	r22, 0xE3	; 227
    33e2:	78 e3       	ldi	r23, 0x38	; 56
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	0e 94 9b 11 	call	0x2336	; 0x2336 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    33ec:	e0 90 01 39 	lds	r14, 0x3901	; 0x803901 <actObj1.3993+0x1e>
    33f0:	f0 90 02 39 	lds	r15, 0x3902	; 0x803902 <actObj1.3993+0x1f>
    33f4:	f1 e0       	ldi	r31, 0x01	; 1
    33f6:	ef 16       	cp	r14, r31
    33f8:	f1 04       	cpc	r15, r1
    33fa:	09 f0       	breq	.+2      	; 0x33fe <ProcessInput+0x81c>
    33fc:	89 c0       	rjmp	.+274    	; 0x3510 <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    33fe:	93 01       	movw	r18, r6
    3400:	2e 5f       	subi	r18, 0xFE	; 254
    3402:	3f 4f       	sbci	r19, 0xFF	; 255
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	61 e0       	ldi	r22, 0x01	; 1
    3408:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x10>
    340c:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x11>
    3410:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
                                if (data[2] == '1') {
    3414:	d3 01       	movw	r26, r6
    3416:	12 96       	adiw	r26, 0x02	; 2
    3418:	3c 91       	ld	r19, X
    341a:	31 33       	cpi	r19, 0x31	; 49
    341c:	09 f0       	breq	.+2      	; 0x3420 <ProcessInput+0x83e>
    341e:	4c c3       	rjmp	.+1688   	; 0x3ab8 <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    3420:	20 91 c3 38 	lds	r18, 0x38C3	; 0x8038c3 <actObj2.3994+0xb>
                                    if ((item < 31)||(item > 34)) {
    3424:	51 ee       	ldi	r21, 0xE1	; 225
    3426:	52 0f       	add	r21, r18
    3428:	41 e0       	ldi	r20, 0x01	; 1
    342a:	41 0f       	add	r20, r17
    342c:	81 2f       	mov	r24, r17
    342e:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3430:	fc 01       	movw	r30, r24
    3432:	ee 0f       	add	r30, r30
    3434:	ff 1f       	adc	r31, r31
    3436:	ec 5d       	subi	r30, 0xDC	; 220
    3438:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    343a:	54 30       	cpi	r21, 0x04	; 4
    343c:	b0 f0       	brcs	.+44     	; 0x346a <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    343e:	21 e0       	ldi	r18, 0x01	; 1
    3440:	39 e7       	ldi	r19, 0x79	; 121
    3442:	20 83       	st	Z, r18
    3444:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3446:	fc 01       	movw	r30, r24
    3448:	ee 0f       	add	r30, r30
    344a:	ff 1f       	adc	r31, r31
    344c:	ec 59       	subi	r30, 0x9C	; 156
    344e:	f6 4c       	sbci	r31, 0xC6	; 198
    3450:	2a e1       	ldi	r18, 0x1A	; 26
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	20 83       	st	Z, r18
    3456:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	fc 01       	movw	r30, r24
    345e:	ec 55       	subi	r30, 0x5C	; 92
    3460:	f6 4c       	sbci	r31, 0xC6	; 198
    3462:	e0 82       	st	Z, r14
    3464:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    3466:	14 2f       	mov	r17, r20
    3468:	27 c3       	rjmp	.+1614   	; 0x3ab8 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    346a:	60 e5       	ldi	r22, 0x50	; 80
    346c:	75 e7       	ldi	r23, 0x75	; 117
    346e:	60 83       	st	Z, r22
    3470:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3472:	fc 01       	movw	r30, r24
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	ec 59       	subi	r30, 0x9C	; 156
    347a:	f6 4c       	sbci	r31, 0xC6	; 198
    347c:	62 eb       	ldi	r22, 0xB2	; 178
    347e:	70 e0       	ldi	r23, 0x00	; 0
    3480:	60 83       	st	Z, r22
    3482:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	fc 01       	movw	r30, r24
    348a:	ec 55       	subi	r30, 0x5C	; 92
    348c:	f6 4c       	sbci	r31, 0xC6	; 198
    348e:	e0 82       	st	Z, r14
    3490:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3492:	84 2f       	mov	r24, r20
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	fc 01       	movw	r30, r24
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	ec 5d       	subi	r30, 0xDC	; 220
    349e:	f6 4c       	sbci	r31, 0xC6	; 198
    34a0:	49 e5       	ldi	r20, 0x59	; 89
    34a2:	5a e7       	ldi	r21, 0x7A	; 122
    34a4:	40 83       	st	Z, r20
    34a6:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    34a8:	fc 01       	movw	r30, r24
    34aa:	ee 0f       	add	r30, r30
    34ac:	ff 1f       	adc	r31, r31
    34ae:	ec 59       	subi	r30, 0x9C	; 156
    34b0:	f6 4c       	sbci	r31, 0xC6	; 198
    34b2:	42 e0       	ldi	r20, 0x02	; 2
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	40 83       	st	Z, r20
    34b8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	fc 01       	movw	r30, r24
    34c0:	ec 55       	subi	r30, 0x5C	; 92
    34c2:	f6 4c       	sbci	r31, 0xC6	; 198
    34c4:	e0 82       	st	Z, r14
    34c6:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c8:	82 e0       	ldi	r24, 0x02	; 2
    34ca:	81 0f       	add	r24, r17
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	1d 5f       	subi	r17, 0xFD	; 253
    34d0:	fc 01       	movw	r30, r24
    34d2:	ee 0f       	add	r30, r30
    34d4:	ff 1f       	adc	r31, r31
    34d6:	ec 5d       	subi	r30, 0xDC	; 220
    34d8:	f6 4c       	sbci	r31, 0xC6	; 198
    34da:	4d ea       	ldi	r20, 0xAD	; 173
    34dc:	58 e7       	ldi	r21, 0x78	; 120
    34de:	40 83       	st	Z, r20
    34e0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    34e2:	fc 01       	movw	r30, r24
    34e4:	ee 0f       	add	r30, r30
    34e6:	ff 1f       	adc	r31, r31
    34e8:	ec 59       	subi	r30, 0x9C	; 156
    34ea:	f6 4c       	sbci	r31, 0xC6	; 198
    34ec:	42 e1       	ldi	r20, 0x12	; 18
    34ee:	50 e0       	ldi	r21, 0x00	; 0
    34f0:	40 83       	st	Z, r20
    34f2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	fc 01       	movw	r30, r24
    34fa:	ec 55       	subi	r30, 0x5C	; 92
    34fc:	f6 4c       	sbci	r31, 0xC6	; 198
    34fe:	e0 82       	st	Z, r14
    3500:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    3502:	30 93 13 39 	sts	0x3913, r19	; 0x803913 <specialInput>
                                        specialInput[1] = item;
    3506:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <specialInput+0x1>
                                        specialInput[2] = 0;
    350a:	10 92 15 39 	sts	0x3915, r1	; 0x803915 <specialInput+0x2>
    350e:	d4 c2       	rjmp	.+1448   	; 0x3ab8 <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    3510:	90 91 ec 38 	lds	r25, 0x38EC	; 0x8038ec <actObj1.3993+0x9>
    3514:	80 91 c3 38 	lds	r24, 0x38C3	; 0x8038c3 <actObj2.3994+0xb>
    3518:	98 13       	cpse	r25, r24
    351a:	2e c0       	rjmp	.+92     	; 0x3578 <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    351c:	20 91 09 39 	lds	r18, 0x3909	; 0x803909 <actObj1.3993+0x26>
    3520:	30 91 0a 39 	lds	r19, 0x390A	; 0x80390a <actObj1.3993+0x27>
    3524:	01 e0       	ldi	r16, 0x01	; 1
    3526:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3528:	81 2f       	mov	r24, r17
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	fc 01       	movw	r30, r24
    352e:	ee 0f       	add	r30, r30
    3530:	ff 1f       	adc	r31, r31
    3532:	ec 5d       	subi	r30, 0xDC	; 220
    3534:	f6 4c       	sbci	r31, 0xC6	; 198
    3536:	40 91 fb 38 	lds	r20, 0x38FB	; 0x8038fb <actObj1.3993+0x18>
    353a:	50 91 fc 38 	lds	r21, 0x38FC	; 0x8038fc <actObj1.3993+0x19>
    353e:	40 83       	st	Z, r20
    3540:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3542:	fc 01       	movw	r30, r24
    3544:	ee 0f       	add	r30, r30
    3546:	ff 1f       	adc	r31, r31
    3548:	ec 59       	subi	r30, 0x9C	; 156
    354a:	f6 4c       	sbci	r31, 0xC6	; 198
    354c:	20 83       	st	Z, r18
    354e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	fc 01       	movw	r30, r24
    3556:	ec 55       	subi	r30, 0x5C	; 92
    3558:	f6 4c       	sbci	r31, 0xC6	; 198
    355a:	10 82       	st	Z, r1
    355c:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    355e:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3993+0x2a>
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3568:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    356c:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3570:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3574:	10 2f       	mov	r17, r16
    3576:	a0 c2       	rjmp	.+1344   	; 0x3ab8 <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3578:	f3 01       	movw	r30, r6
    357a:	80 81       	ld	r24, Z
    357c:	85 37       	cpi	r24, 0x75	; 117
    357e:	99 f4       	brne	.+38     	; 0x35a6 <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3580:	81 2f       	mov	r24, r17
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	fc 01       	movw	r30, r24
    3586:	ee 0f       	add	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	ec 5d       	subi	r30, 0xDC	; 220
    358c:	f6 4c       	sbci	r31, 0xC6	; 198
    358e:	21 e0       	ldi	r18, 0x01	; 1
    3590:	39 e7       	ldi	r19, 0x79	; 121
    3592:	20 83       	st	Z, r18
    3594:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3596:	fc 01       	movw	r30, r24
    3598:	ee 0f       	add	r30, r30
    359a:	ff 1f       	adc	r31, r31
    359c:	ec 59       	subi	r30, 0x9C	; 156
    359e:	f6 4c       	sbci	r31, 0xC6	; 198
    35a0:	2a e1       	ldi	r18, 0x1A	; 26
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	15 c0       	rjmp	.+42     	; 0x35d0 <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    35a6:	87 36       	cpi	r24, 0x67	; 103
    35a8:	09 f0       	breq	.+2      	; 0x35ac <ProcessInput+0x9ca>
    35aa:	86 c2       	rjmp	.+1292   	; 0x3ab8 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35ac:	81 2f       	mov	r24, r17
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	fc 01       	movw	r30, r24
    35b2:	ee 0f       	add	r30, r30
    35b4:	ff 1f       	adc	r31, r31
    35b6:	ec 5d       	subi	r30, 0xDC	; 220
    35b8:	f6 4c       	sbci	r31, 0xC6	; 198
    35ba:	2f e9       	ldi	r18, 0x9F	; 159
    35bc:	36 e7       	ldi	r19, 0x76	; 118
    35be:	20 83       	st	Z, r18
    35c0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    35c2:	fc 01       	movw	r30, r24
    35c4:	ee 0f       	add	r30, r30
    35c6:	ff 1f       	adc	r31, r31
    35c8:	ec 59       	subi	r30, 0x9C	; 156
    35ca:	f6 4c       	sbci	r31, 0xC6	; 198
    35cc:	28 e2       	ldi	r18, 0x28	; 40
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	20 83       	st	Z, r18
    35d2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35d4:	88 0f       	add	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	fc 01       	movw	r30, r24
    35da:	ec 55       	subi	r30, 0x5C	; 92
    35dc:	f6 4c       	sbci	r31, 0xC6	; 198
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	80 83       	st	Z, r24
    35e4:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    35e6:	1f 5f       	subi	r17, 0xFF	; 255
    35e8:	67 c2       	rjmp	.+1230   	; 0x3ab8 <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    35ea:	63 ee       	ldi	r22, 0xE3	; 227
    35ec:	78 e3       	ldi	r23, 0x38	; 56
    35ee:	0e 94 9b 11 	call	0x2336	; 0x2336 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    35f2:	d3 01       	movw	r26, r6
    35f4:	8c 91       	ld	r24, X
    35f6:	84 37       	cpi	r24, 0x74	; 116
    35f8:	61 f5       	brne	.+88     	; 0x3652 <ProcessInput+0xa70>
    35fa:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    35fe:	83 fd       	sbrc	r24, 3
    3600:	43 c0       	rjmp	.+134    	; 0x3688 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3602:	8b e1       	ldi	r24, 0x1B	; 27
    3604:	99 e7       	ldi	r25, 0x79	; 121
    3606:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    360a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    360e:	8e e1       	ldi	r24, 0x1E	; 30
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3616:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    3622:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3626:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    362a:	90 91 fe 38 	lds	r25, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    362e:	20 91 ef 38 	lds	r18, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    3632:	30 91 f0 38 	lds	r19, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    3636:	20 93 28 39 	sts	0x3928, r18	; 0x803928 <reactStr+0x4>
    363a:	30 93 29 39 	sts	0x3929, r19	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    363e:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    3642:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    3646:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x84>
    364a:	10 92 a9 39 	sts	0x39A9, r1	; 0x8039a9 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    364e:	13 e0       	ldi	r17, 0x03	; 3
    3650:	33 c2       	rjmp	.+1126   	; 0x3ab8 <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    3652:	85 37       	cpi	r24, 0x75	; 117
    3654:	39 f4       	brne	.+14     	; 0x3664 <ProcessInput+0xa82>
    3656:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    365a:	84 fd       	sbrc	r24, 4
    365c:	15 c0       	rjmp	.+42     	; 0x3688 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	99 e7       	ldi	r25, 0x79	; 121
    3662:	3b c2       	rjmp	.+1142   	; 0x3ada <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    3664:	82 37       	cpi	r24, 0x72	; 114
    3666:	69 f4       	brne	.+26     	; 0x3682 <ProcessInput+0xaa0>
    3668:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3993+0x8>
    366c:	85 fd       	sbrc	r24, 5
    366e:	0c c0       	rjmp	.+24     	; 0x3688 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3670:	86 ee       	ldi	r24, 0xE6	; 230
    3672:	98 e7       	ldi	r25, 0x78	; 120
    3674:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3678:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    367c:	8b e1       	ldi	r24, 0x1B	; 27
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	78 cb       	rjmp	.-2320   	; 0x2d72 <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3682:	87 36       	cpi	r24, 0x67	; 103
    3684:	09 f4       	brne	.+2      	; 0x3688 <ProcessInput+0xaa6>
    3686:	e0 ca       	rjmp	.-2624   	; 0x2c48 <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3688:	00 91 01 39 	lds	r16, 0x3901	; 0x803901 <actObj1.3993+0x1e>
    368c:	10 91 02 39 	lds	r17, 0x3902	; 0x803902 <actObj1.3993+0x1f>
    3690:	01 30       	cpi	r16, 0x01	; 1
    3692:	11 05       	cpc	r17, r1
    3694:	09 f5       	brne	.+66     	; 0x36d8 <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3696:	93 01       	movw	r18, r6
    3698:	2e 5f       	subi	r18, 0xFE	; 254
    369a:	3f 4f       	sbci	r19, 0xFF	; 255
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	61 e0       	ldi	r22, 0x01	; 1
    36a0:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x10>
    36a4:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x11>
    36a8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
                                if (data[2] == '1') {
    36ac:	f3 01       	movw	r30, r6
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	81 33       	cpi	r24, 0x31	; 49
    36b2:	09 f0       	breq	.+2      	; 0x36b6 <ProcessInput+0xad4>
    36b4:	13 cd       	rjmp	.-1498   	; 0x30dc <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b6:	85 e2       	ldi	r24, 0x25	; 37
    36b8:	95 e7       	ldi	r25, 0x75	; 117
    36ba:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    36be:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    36c2:	8b e2       	ldi	r24, 0x2B	; 43
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    36ca:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    36ce:	00 93 a6 39 	sts	0x39A6, r16	; 0x8039a6 <reactStr+0x82>
    36d2:	10 93 a7 39 	sts	0x39A7, r17	; 0x8039a7 <reactStr+0x83>
    36d6:	57 cb       	rjmp	.-2386   	; 0x2d86 <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    36d8:	01 15       	cp	r16, r1
    36da:	11 05       	cpc	r17, r1
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <ProcessInput+0xafe>
    36de:	58 c0       	rjmp	.+176    	; 0x3790 <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36e0:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x10>
    36e4:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x11>
    36e8:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    36ec:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    36f0:	00 93 66 39 	sts	0x3966, r16	; 0x803966 <reactStr+0x42>
    36f4:	10 93 67 39 	sts	0x3967, r17	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    36f8:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    36fc:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3700:	89 e5       	ldi	r24, 0x59	; 89
    3702:	9a e7       	ldi	r25, 0x7A	; 122
    3704:	80 93 28 39 	sts	0x3928, r24	; 0x803928 <reactStr+0x4>
    3708:	90 93 29 39 	sts	0x3929, r25	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    370c:	82 e0       	ldi	r24, 0x02	; 2
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	80 93 68 39 	sts	0x3968, r24	; 0x803968 <reactStr+0x44>
    3714:	90 93 69 39 	sts	0x3969, r25	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	80 93 a8 39 	sts	0x39A8, r24	; 0x8039a8 <reactStr+0x84>
    3720:	90 93 a9 39 	sts	0x39A9, r25	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3724:	2d ea       	ldi	r18, 0xAD	; 173
    3726:	38 e7       	ldi	r19, 0x78	; 120
    3728:	20 93 2a 39 	sts	0x392A, r18	; 0x80392a <reactStr+0x6>
    372c:	30 93 2b 39 	sts	0x392B, r19	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    3730:	22 e1       	ldi	r18, 0x12	; 18
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	20 93 6a 39 	sts	0x396A, r18	; 0x80396a <reactStr+0x46>
    3738:	30 93 6b 39 	sts	0x396B, r19	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    373c:	80 93 aa 39 	sts	0x39AA, r24	; 0x8039aa <reactStr+0x86>
    3740:	90 93 ab 39 	sts	0x39AB, r25	; 0x8039ab <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    3744:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3993+0x20>
    3748:	90 91 04 39 	lds	r25, 0x3904	; 0x803904 <actObj1.3993+0x21>
    374c:	40 97       	sbiw	r24, 0x10	; 16
    374e:	30 f0       	brcs	.+12     	; 0x375c <ProcessInput+0xb7a>
    3750:	8f e0       	ldi	r24, 0x0F	; 15
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	80 93 03 39 	sts	0x3903, r24	; 0x803903 <actObj1.3993+0x20>
    3758:	90 93 04 39 	sts	0x3904, r25	; 0x803904 <actObj1.3993+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    375c:	23 e1       	ldi	r18, 0x13	; 19
    375e:	39 e3       	ldi	r19, 0x39	; 57
    3760:	40 e0       	ldi	r20, 0x00	; 0
    3762:	60 91 03 39 	lds	r22, 0x3903	; 0x803903 <actObj1.3993+0x20>
    3766:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <actObj1.3993+0x12>
    376a:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <actObj1.3993+0x13>
    376e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3772:	63 e1       	ldi	r22, 0x13	; 19
    3774:	79 e3       	ldi	r23, 0x39	; 57
    3776:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3993+0x20>
    377a:	0e 94 b1 10 	call	0x2162	; 0x2162 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    377e:	e0 91 03 39 	lds	r30, 0x3903	; 0x803903 <actObj1.3993+0x20>
    3782:	f0 91 04 39 	lds	r31, 0x3904	; 0x803904 <actObj1.3993+0x21>
    3786:	ed 5e       	subi	r30, 0xED	; 237
    3788:	f6 4c       	sbci	r31, 0xC6	; 198
    378a:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    378c:	14 e0       	ldi	r17, 0x04	; 4
    378e:	94 c1       	rjmp	.+808    	; 0x3ab8 <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3790:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x7>
    3794:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
    3798:	88 23       	and	r24, r24
    379a:	01 f1       	breq	.+64     	; 0x37dc <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    379c:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <actObj1.3993+0x26>
    37a0:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37a4:	20 91 fb 38 	lds	r18, 0x38FB	; 0x8038fb <actObj1.3993+0x18>
    37a8:	30 91 fc 38 	lds	r19, 0x38FC	; 0x8038fc <actObj1.3993+0x19>
    37ac:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    37b0:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    37b4:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    37b8:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    37bc:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    37c0:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    37c4:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3993+0x2a>
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    37ce:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    37d2:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    37d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    37da:	d5 ca       	rjmp	.-2646   	; 0x2d86 <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    37dc:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <actObj1.3993+0x24>
    37e0:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37e4:	20 91 f9 38 	lds	r18, 0x38F9	; 0x8038f9 <actObj1.3993+0x16>
    37e8:	30 91 fa 38 	lds	r19, 0x38FA	; 0x8038fa <actObj1.3993+0x17>
    37ec:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    37f0:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    37f4:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    37f8:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    37fc:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    3800:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3804:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3993+0x29>
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    380e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3812:	b9 ca       	rjmp	.-2702   	; 0x2d86 <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3814:	d3 01       	movw	r26, r6
    3816:	8c 91       	ld	r24, X
    3818:	84 37       	cpi	r24, 0x74	; 116
    381a:	11 f0       	breq	.+4      	; 0x3820 <ProcessInput+0xc3e>
    381c:	87 36       	cpi	r24, 0x67	; 103
    381e:	19 f4       	brne	.+6      	; 0x3826 <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3820:	89 e3       	ldi	r24, 0x39	; 57
    3822:	99 e7       	ldi	r25, 0x79	; 121
    3824:	02 c0       	rjmp	.+4      	; 0x382a <ProcessInput+0xc48>
    3826:	8d e4       	ldi	r24, 0x4D	; 77
    3828:	99 e7       	ldi	r25, 0x79	; 121
    382a:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    382e:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3832:	84 e1       	ldi	r24, 0x14	; 20
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9d ca       	rjmp	.-2758   	; 0x2d72 <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3838:	81 36       	cpi	r24, 0x61	; 97
    383a:	09 f0       	breq	.+2      	; 0x383e <ProcessInput+0xc5c>
    383c:	4f cc       	rjmp	.-1890   	; 0x30dc <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    383e:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <specialPassed>
    3842:	82 30       	cpi	r24, 0x02	; 2
    3844:	08 f4       	brcc	.+2      	; 0x3848 <ProcessInput+0xc66>
    3846:	c7 c0       	rjmp	.+398    	; 0x39d6 <ProcessInput+0xdf4>
                if (data[1] > 0) {
    3848:	f3 01       	movw	r30, r6
    384a:	21 81       	ldd	r18, Z+1	; 0x01
    384c:	22 23       	and	r18, r18
    384e:	09 f4       	brne	.+2      	; 0x3852 <ProcessInput+0xc70>
    3850:	af c0       	rjmp	.+350    	; 0x39b0 <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3852:	ce 01       	movw	r24, r28
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	7c 01       	movw	r14, r24
    3858:	88 e0       	ldi	r24, 0x08	; 8
    385a:	d7 01       	movw	r26, r14
    385c:	1d 92       	st	X+, r1
    385e:	8a 95       	dec	r24
    3860:	e9 f7       	brne	.-6      	; 0x385c <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3862:	20 53       	subi	r18, 0x30	; 48
    3864:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3866:	32 81       	ldd	r19, Z+2	; 0x02
    3868:	31 53       	subi	r19, 0x31	; 49
    386a:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    386c:	83 81       	ldd	r24, Z+3	; 0x03
    386e:	81 36       	cpi	r24, 0x61	; 97
    3870:	11 f4       	brne	.+4      	; 0x3876 <ProcessInput+0xc94>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	0c c0       	rjmp	.+24     	; 0x388e <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    3876:	85 36       	cpi	r24, 0x65	; 101
    3878:	19 f4       	brne	.+6      	; 0x3880 <ProcessInput+0xc9e>
    387a:	f3 01       	movw	r30, r6
    387c:	13 82       	std	Z+3, r1	; 0x03
    387e:	08 c0       	rjmp	.+16     	; 0x3890 <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    3880:	86 36       	cpi	r24, 0x66	; 102
    3882:	19 f4       	brne	.+6      	; 0x388a <ProcessInput+0xca8>
    3884:	83 e0       	ldi	r24, 0x03	; 3
    3886:	83 83       	std	Z+3, r24	; 0x03
    3888:	03 c0       	rjmp	.+6      	; 0x3890 <ProcessInput+0xcae>
                    else data[3] = 2;
    388a:	82 e0       	ldi	r24, 0x02	; 2
    388c:	f3 01       	movw	r30, r6
    388e:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3890:	21 fd       	sbrc	r18, 1
    3892:	04 c0       	rjmp	.+8      	; 0x389c <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	dc 01       	movw	r26, r24
    389a:	04 c0       	rjmp	.+8      	; 0x38a4 <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e1       	ldi	r26, 0x10	; 16
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    38a4:	20 ff       	sbrs	r18, 0
    38a6:	03 c0       	rjmp	.+6      	; 0x38ae <ProcessInput+0xccc>
    38a8:	9f 5f       	subi	r25, 0xFF	; 255
    38aa:	af 4f       	sbci	r26, 0xFF	; 255
    38ac:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    38ae:	f3 01       	movw	r30, r6
    38b0:	23 81       	ldd	r18, Z+3	; 0x03
    38b2:	21 fd       	sbrc	r18, 1
    38b4:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    38b6:	20 ff       	sbrs	r18, 0
    38b8:	03 c0       	rjmp	.+6      	; 0x38c0 <ProcessInput+0xcde>
    38ba:	40 96       	adiw	r24, 0x10	; 16
    38bc:	a1 1d       	adc	r26, r1
    38be:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    38c0:	31 ff       	sbrs	r19, 1
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <ProcessInput+0xce8>
    38c4:	90 5f       	subi	r25, 0xF0	; 240
    38c6:	af 4f       	sbci	r26, 0xFF	; 255
    38c8:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    38ca:	30 ff       	sbrs	r19, 0
    38cc:	03 c0       	rjmp	.+6      	; 0x38d4 <ProcessInput+0xcf2>
    38ce:	01 96       	adiw	r24, 0x01	; 1
    38d0:	a1 1d       	adc	r26, r1
    38d2:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    38d4:	40 91 43 38 	lds	r20, 0x3843	; 0x803843 <whoami>
    38d8:	24 e0       	ldi	r18, 0x04	; 4
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	24 1b       	sub	r18, r20
    38de:	31 09       	sbc	r19, r1
    38e0:	04 c0       	rjmp	.+8      	; 0x38ea <ProcessInput+0xd08>
    38e2:	88 0f       	add	r24, r24
    38e4:	99 1f       	adc	r25, r25
    38e6:	aa 1f       	adc	r26, r26
    38e8:	bb 1f       	adc	r27, r27
    38ea:	2a 95       	dec	r18
    38ec:	d2 f7       	brpl	.-12     	; 0x38e2 <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38ee:	28 ec       	ldi	r18, 0xC8	; 200
    38f0:	34 e7       	ldi	r19, 0x74	; 116
    38f2:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    38f6:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    38fa:	20 e2       	ldi	r18, 0x20	; 32
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	20 93 66 39 	sts	0x3966, r18	; 0x803966 <reactStr+0x42>
    3902:	30 93 67 39 	sts	0x3967, r19	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3906:	21 e0       	ldi	r18, 0x01	; 1
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	20 93 a6 39 	sts	0x39A6, r18	; 0x8039a6 <reactStr+0x82>
    390e:	30 93 a7 39 	sts	0x39A7, r19	; 0x8039a7 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3912:	4d e9       	ldi	r20, 0x9D	; 157
    3914:	54 e7       	ldi	r21, 0x74	; 116
    3916:	40 93 28 39 	sts	0x3928, r20	; 0x803928 <reactStr+0x4>
    391a:	50 93 29 39 	sts	0x3929, r21	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    391e:	42 e0       	ldi	r20, 0x02	; 2
    3920:	50 e0       	ldi	r21, 0x00	; 0
    3922:	40 93 68 39 	sts	0x3968, r20	; 0x803968 <reactStr+0x44>
    3926:	50 93 69 39 	sts	0x3969, r21	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    392a:	20 93 a8 39 	sts	0x39A8, r18	; 0x8039a8 <reactStr+0x84>
    392e:	30 93 a9 39 	sts	0x39A9, r19	; 0x8039a9 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3932:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3934:	f7 01       	movw	r30, r14
    3936:	e0 0f       	add	r30, r16
    3938:	f1 1d       	adc	r31, r1
    393a:	28 2f       	mov	r18, r24
    393c:	2f 70       	andi	r18, 0x0F	; 15
    393e:	20 83       	st	Z, r18
                        answer /= 16;
    3940:	44 e0       	ldi	r20, 0x04	; 4
    3942:	b6 95       	lsr	r27
    3944:	a7 95       	ror	r26
    3946:	97 95       	ror	r25
    3948:	87 95       	ror	r24
    394a:	4a 95       	dec	r20
    394c:	d1 f7       	brne	.-12     	; 0x3942 <ProcessInput+0xd60>
                        if (answer == 0) break;
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	a1 05       	cpc	r26, r1
    3952:	b1 05       	cpc	r27, r1
    3954:	49 f4       	brne	.+18     	; 0x3968 <ProcessInput+0xd86>
    3956:	24 e2       	ldi	r18, 0x24	; 36
    3958:	c2 2e       	mov	r12, r18
    395a:	29 e3       	ldi	r18, 0x39	; 57
    395c:	d2 2e       	mov	r13, r18
    395e:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3960:	aa 24       	eor	r10, r10
    3962:	a3 94       	inc	r10
    3964:	b1 2c       	mov	r11, r1
    3966:	02 c0       	rjmp	.+4      	; 0x396c <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3968:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    396a:	e4 cf       	rjmp	.-56     	; 0x3934 <ProcessInput+0xd52>
    396c:	b2 e0       	ldi	r27, 0x02	; 2
    396e:	cb 0e       	add	r12, r27
    3970:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3972:	08 30       	cpi	r16, 0x08	; 8
    3974:	08 f0       	brcs	.+2      	; 0x3978 <ProcessInput+0xd96>
    3976:	9e c0       	rjmp	.+316    	; 0x3ab4 <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3978:	1f 5f       	subi	r17, 0xFF	; 255
    397a:	f7 01       	movw	r30, r14
    397c:	e0 0f       	add	r30, r16
    397e:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3980:	80 81       	ld	r24, Z
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	83 57       	subi	r24, 0x73	; 115
    3986:	9b 48       	sbci	r25, 0x8B	; 139
    3988:	d6 01       	movw	r26, r12
    398a:	14 96       	adiw	r26, 0x04	; 4
    398c:	8d 93       	st	X+, r24
    398e:	9c 93       	st	X, r25
    3990:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3992:	f6 01       	movw	r30, r12
    3994:	ec 5b       	subi	r30, 0xBC	; 188
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	a0 82       	st	Z, r10
    399a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    399c:	e0 5c       	subi	r30, 0xC0	; 192
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	a0 82       	st	Z, r10
    39a2:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    39a4:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    39a8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    39ac:	0f 5f       	subi	r16, 0xFF	; 255
    39ae:	de cf       	rjmp	.-68     	; 0x396c <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39b0:	88 ee       	ldi	r24, 0xE8	; 232
    39b2:	94 e7       	ldi	r25, 0x74	; 116
    39b4:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    39b8:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    39bc:	8d e3       	ldi	r24, 0x3D	; 61
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    39c4:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    39d0:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
    39d4:	6e c0       	rjmp	.+220    	; 0x3ab2 <ProcessInput+0xed0>
    39d6:	e0 91 35 38 	lds	r30, 0x3835	; 0x803835 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	ee 0f       	add	r30, r30
    39de:	ff 1f       	adc	r31, r31
    39e0:	ea 51       	subi	r30, 0x1A	; 26
    39e2:	f6 4c       	sbci	r31, 0xC6	; 198
    39e4:	63 ee       	ldi	r22, 0xE3	; 227
    39e6:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    39e8:	81 30       	cpi	r24, 0x01	; 1
    39ea:	09 f0       	breq	.+2      	; 0x39ee <ProcessInput+0xe0c>
    39ec:	46 c0       	rjmp	.+140    	; 0x3a7a <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    39ee:	80 81       	ld	r24, Z
    39f0:	91 81       	ldd	r25, Z+1	; 0x01
    39f2:	0e 94 9b 11 	call	0x2336	; 0x2336 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    39f6:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3993+0x7>
    39fa:	0e 94 14 0a 	call	0x1428	; 0x1428 <CheckState>
    39fe:	88 23       	and	r24, r24
    3a00:	01 f1       	breq	.+64     	; 0x3a42 <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3a02:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <actObj1.3993+0x26>
    3a06:	90 91 0a 39 	lds	r25, 0x390A	; 0x80390a <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a0a:	20 91 fb 38 	lds	r18, 0x38FB	; 0x8038fb <actObj1.3993+0x18>
    3a0e:	30 91 fc 38 	lds	r19, 0x38FC	; 0x8038fc <actObj1.3993+0x19>
    3a12:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    3a16:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3a1a:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3a1e:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3a22:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    3a26:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3a2a:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <actObj1.3993+0x2a>
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3a34:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3a38:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0xa>
    3a3c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
    3a40:	38 c0       	rjmp	.+112    	; 0x3ab2 <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3a42:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <actObj1.3993+0x24>
    3a46:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a4a:	20 91 f9 38 	lds	r18, 0x38F9	; 0x8038f9 <actObj1.3993+0x16>
    3a4e:	30 91 fa 38 	lds	r19, 0x38FA	; 0x8038fa <actObj1.3993+0x17>
    3a52:	20 93 26 39 	sts	0x3926, r18	; 0x803926 <reactStr+0x2>
    3a56:	30 93 27 39 	sts	0x3927, r19	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3a5a:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3a5e:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3a62:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x82>
    3a66:	10 92 a7 39 	sts	0x39A7, r1	; 0x8039a7 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3a6a:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <actObj1.3993+0x29>
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3a74:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3a78:	1c c0       	rjmp	.+56     	; 0x3ab2 <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3a7a:	80 81       	ld	r24, Z
    3a7c:	91 81       	ldd	r25, Z+1	; 0x01
    3a7e:	0e 94 9b 11 	call	0x2336	; 0x2336 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a82:	80 e6       	ldi	r24, 0x60	; 96
    3a84:	98 e7       	ldi	r25, 0x78	; 120
    3a86:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3a8a:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3a8e:	8d e4       	ldi	r24, 0x4D	; 77
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3a96:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    3aa2:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3aa6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <getClock>
    3aaa:	80 93 10 39 	sts	0x3910, r24	; 0x803910 <PunishmentTime>
    3aae:	90 93 11 39 	sts	0x3911, r25	; 0x803911 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3ab2:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3ab4:	10 92 13 39 	sts	0x3913, r1	; 0x803913 <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3ab8:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <specialInput>
    3abc:	88 23       	and	r24, r24
    3abe:	19 f0       	breq	.+6      	; 0x3ac6 <ProcessInput+0xee4>
    3ac0:	10 93 23 39 	sts	0x3923, r17	; 0x803923 <responseList>
    3ac4:	8b c0       	rjmp	.+278    	; 0x3bdc <ProcessInput+0xffa>
    3ac6:	81 2f       	mov	r24, r17
    3ac8:	01 c0       	rjmp	.+2      	; 0x3acc <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	0e 94 1f 11 	call	0x223e	; 0x223e <SetStandardResponse>
    3ad0:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <responseList>
    3ad4:	83 c0       	rjmp	.+262    	; 0x3bdc <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ad6:	81 ed       	ldi	r24, 0xD1	; 209
    3ad8:	99 e7       	ldi	r25, 0x79	; 121
    3ada:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3ade:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3ae2:	8a e1       	ldi	r24, 0x1A	; 26
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	45 c9       	rjmp	.-3446   	; 0x2d72 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3ae8:	f2 e0       	ldi	r31, 0x02	; 2
    3aea:	ff 12       	cpse	r15, r31
    3aec:	ad c8       	rjmp	.-3750   	; 0x2c48 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3aee:	f3 01       	movw	r30, r6
    3af0:	61 81       	ldd	r22, Z+1	; 0x01
    3af2:	0e 94 14 12 	call	0x2428	; 0x2428 <CheckLetter>
    3af6:	88 23       	and	r24, r24
    3af8:	09 f4       	brne	.+2      	; 0x3afc <ProcessInput+0xf1a>
    3afa:	58 c0       	rjmp	.+176    	; 0x3bac <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3afc:	00 e0       	ldi	r16, 0x00	; 0
    3afe:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3b00:	00 0f       	add	r16, r16
    3b02:	11 1f       	adc	r17, r17
    3b04:	0c 5b       	subi	r16, 0xBC	; 188
    3b06:	17 4c       	sbci	r17, 0xC7	; 199
    3b08:	63 ee       	ldi	r22, 0xE3	; 227
    3b0a:	78 e3       	ldi	r23, 0x38	; 56
    3b0c:	d8 01       	movw	r26, r16
    3b0e:	8d 91       	ld	r24, X+
    3b10:	9c 91       	ld	r25, X
    3b12:	0e 94 9b 11 	call	0x2336	; 0x2336 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b16:	86 e9       	ldi	r24, 0x96	; 150
    3b18:	97 e7       	ldi	r25, 0x77	; 119
    3b1a:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3b1e:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3b22:	80 e1       	ldi	r24, 0x10	; 16
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	80 93 66 39 	sts	0x3966, r24	; 0x803966 <reactStr+0x42>
    3b2a:	90 93 67 39 	sts	0x3967, r25	; 0x803967 <reactStr+0x43>
    reactStr[2][number]=type;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	80 93 a6 39 	sts	0x39A6, r24	; 0x8039a6 <reactStr+0x82>
    3b36:	90 93 a7 39 	sts	0x39A7, r25	; 0x8039a7 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3b3a:	20 91 fd 38 	lds	r18, 0x38FD	; 0x8038fd <actObj1.3993+0x1a>
    3b3e:	30 91 fe 38 	lds	r19, 0x38FE	; 0x8038fe <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b42:	40 91 ef 38 	lds	r20, 0x38EF	; 0x8038ef <actObj1.3993+0xc>
    3b46:	50 91 f0 38 	lds	r21, 0x38F0	; 0x8038f0 <actObj1.3993+0xd>
    3b4a:	40 93 28 39 	sts	0x3928, r20	; 0x803928 <reactStr+0x4>
    3b4e:	50 93 29 39 	sts	0x3929, r21	; 0x803929 <reactStr+0x5>
    reactStr[1][number]=length;
    3b52:	20 93 68 39 	sts	0x3968, r18	; 0x803968 <reactStr+0x44>
    3b56:	30 93 69 39 	sts	0x3969, r19	; 0x803969 <reactStr+0x45>
    reactStr[2][number]=type;
    3b5a:	10 92 a8 39 	sts	0x39A8, r1	; 0x8039a8 <reactStr+0x84>
    3b5e:	10 92 a9 39 	sts	0x39A9, r1	; 0x8039a9 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b62:	29 e5       	ldi	r18, 0x59	; 89
    3b64:	3a e7       	ldi	r19, 0x7A	; 122
    3b66:	20 93 2a 39 	sts	0x392A, r18	; 0x80392a <reactStr+0x6>
    3b6a:	30 93 2b 39 	sts	0x392B, r19	; 0x80392b <reactStr+0x7>
    reactStr[1][number]=length;
    3b6e:	22 e0       	ldi	r18, 0x02	; 2
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	20 93 6a 39 	sts	0x396A, r18	; 0x80396a <reactStr+0x46>
    3b76:	30 93 6b 39 	sts	0x396B, r19	; 0x80396b <reactStr+0x47>
    reactStr[2][number]=type;
    3b7a:	80 93 aa 39 	sts	0x39AA, r24	; 0x8039aa <reactStr+0x86>
    3b7e:	90 93 ab 39 	sts	0x39AB, r25	; 0x8039ab <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b82:	29 e5       	ldi	r18, 0x59	; 89
    3b84:	37 e7       	ldi	r19, 0x77	; 119
    3b86:	20 93 2c 39 	sts	0x392C, r18	; 0x80392c <reactStr+0x8>
    3b8a:	30 93 2d 39 	sts	0x392D, r19	; 0x80392d <reactStr+0x9>
    reactStr[1][number]=length;
    3b8e:	2d e3       	ldi	r18, 0x3D	; 61
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	20 93 6c 39 	sts	0x396C, r18	; 0x80396c <reactStr+0x48>
    3b96:	30 93 6d 39 	sts	0x396D, r19	; 0x80396d <reactStr+0x49>
    reactStr[2][number]=type;
    3b9a:	80 93 ac 39 	sts	0x39AC, r24	; 0x8039ac <reactStr+0x88>
    3b9e:	90 93 ad 39 	sts	0x39AD, r25	; 0x8039ad <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3ba2:	f8 01       	movw	r30, r16
    3ba4:	10 82       	st	Z, r1
    3ba6:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3ba8:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3baa:	86 cf       	rjmp	.-244    	; 0x3ab8 <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3bac:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3bb0:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	49 f0       	breq	.+18     	; 0x3bca <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3bb8:	f3 01       	movw	r30, r6
    3bba:	61 81       	ldd	r22, Z+1	; 0x01
    3bbc:	0e 94 14 12 	call	0x2428	; 0x2428 <CheckLetter>
    3bc0:	88 23       	and	r24, r24
    3bc2:	19 f0       	breq	.+6      	; 0x3bca <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3bc4:	01 e0       	ldi	r16, 0x01	; 1
    3bc6:	10 e0       	ldi	r17, 0x00	; 0
    3bc8:	9b cf       	rjmp	.-202    	; 0x3b00 <ProcessInput+0xf1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bca:	81 e6       	ldi	r24, 0x61	; 97
    3bcc:	99 e7       	ldi	r25, 0x79	; 121
    3bce:	80 93 26 39 	sts	0x3926, r24	; 0x803926 <reactStr+0x2>
    3bd2:	90 93 27 39 	sts	0x3927, r25	; 0x803927 <reactStr+0x3>
    reactStr[1][number]=length;
    3bd6:	81 e2       	ldi	r24, 0x21	; 33
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3bda:	cb c8       	rjmp	.-3690   	; 0x2d72 <ProcessInput+0x190>
    3bdc:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3bde:	10 82       	st	Z, r1
    3be0:	10 92 4c 38 	sts	0x384C, r1	; 0x80384c <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3be4:	1d ba       	out	0x1d, r1	; 29
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	28 96       	adiw	r28, 0x08	; 8
    3bea:	ee e0       	ldi	r30, 0x0E	; 14
    3bec:	13 c1       	rjmp	.+550    	; 0x3e14 <__epilogue_restores__+0x8>

00003bee <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3bee:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3bf0:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <PunishmentTime>
    3bf4:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <PunishmentTime+0x1>
    3bf8:	89 2b       	or	r24, r25
    3bfa:	09 f1       	breq	.+66     	; 0x3c3e <TextAdventure+0x50>
        PunishmentCount = getClock();
    3bfc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <getClock>
        if (PunishmentCount < PunishmentTime)
    3c00:	20 91 10 39 	lds	r18, 0x3910	; 0x803910 <PunishmentTime>
    3c04:	30 91 11 39 	lds	r19, 0x3911	; 0x803911 <PunishmentTime+0x1>
    3c08:	82 17       	cp	r24, r18
    3c0a:	93 07       	cpc	r25, r19
    3c0c:	08 f4       	brcc	.+2      	; 0x3c10 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3c0e:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3c10:	ac 01       	movw	r20, r24
    3c12:	42 1b       	sub	r20, r18
    3c14:	53 0b       	sbc	r21, r19
    3c16:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3c18:	4b 30       	cpi	r20, 0x0B	; 11
    3c1a:	51 05       	cpc	r21, r1
    3c1c:	30 f0       	brcs	.+12     	; 0x3c2a <TextAdventure+0x3c>
            PunishmentTime = 0;
    3c1e:	10 92 10 39 	sts	0x3910, r1	; 0x803910 <PunishmentTime>
    3c22:	10 92 11 39 	sts	0x3911, r1	; 0x803911 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3c26:	2a e0       	ldi	r18, 0x0A	; 10
    3c28:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3c2a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    3c2e:	81 11       	cpse	r24, r1
    3c30:	06 c0       	rjmp	.+12     	; 0x3c3e <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3c32:	65 e0       	ldi	r22, 0x05	; 5
    3c34:	62 1b       	sub	r22, r18
    3c36:	8a e0       	ldi	r24, 0x0A	; 10
    3c38:	82 1b       	sub	r24, r18
    3c3a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3c3e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <CheckSend>
    3c42:	88 23       	and	r24, r24
    3c44:	11 f0       	breq	.+4      	; 0x3c4a <TextAdventure+0x5c>
    3c46:	c1 e0       	ldi	r28, 0x01	; 1
    3c48:	18 c0       	rjmp	.+48     	; 0x3c7a <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3c4a:	0e 94 42 13 	call	0x2684	; 0x2684 <CheckResponse>
    3c4e:	c8 2f       	mov	r28, r24
    3c50:	81 11       	cpse	r24, r1
    3c52:	f9 cf       	rjmp	.-14     	; 0x3c46 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3c54:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <PunishmentTime>
    3c58:	90 91 11 39 	lds	r25, 0x3911	; 0x803911 <PunishmentTime+0x1>
    3c5c:	89 2b       	or	r24, r25
    3c5e:	69 f4       	brne	.+26     	; 0x3c7a <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3c60:	87 e7       	ldi	r24, 0x77	; 119
    3c62:	98 e3       	ldi	r25, 0x38	; 56
    3c64:	0e 94 82 13 	call	0x2704	; 0x2704 <CheckInput>
    3c68:	c8 2f       	mov	r28, r24
    3c6a:	81 11       	cpse	r24, r1
    3c6c:	05 c0       	rjmp	.+10     	; 0x3c78 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3c6e:	87 e7       	ldi	r24, 0x77	; 119
    3c70:	98 e3       	ldi	r25, 0x38	; 56
    3c72:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <ProcessInput>
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3c78:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3c7a:	8c 2f       	mov	r24, r28
    3c7c:	cf 91       	pop	r28
    3c7e:	08 95       	ret

00003c80 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3c80:	0e 94 c9 04 	call	0x992	; 0x992 <Setup>
    LoadGameState();
    3c84:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <LoadGameState>
    gameState[0]|=1;
    3c88:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <gameState>
    3c8c:	81 60       	ori	r24, 0x01	; 1
    3c8e:	80 93 6a 3a 	sts	0x3A6A, r24	; 0x803a6a <gameState>
    SelfTest();
    3c92:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <SelfTest>
    3c96:	c0 91 5c be 	lds	r28, 0xBE5C	; 0x80be5c <__bss_end+0x8341>
            if (buttonState != 0xff) {
                iLED[CAT] = dimValue;
                if ((effect & 0xffe0)==0)
                    effect = 0x13f + (buttonState << 5);
            } else {
                iLED[CAT] = 0;
    3c9a:	d0 e0       	ldi	r29, 0x00	; 0
    3c9c:	c4 53       	subi	r28, 0x34	; 52
    3c9e:	d5 4c       	sbci	r29, 0xC5	; 197
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3ca0:	0f e1       	ldi	r16, 0x1F	; 31
    3ca2:	10 e0       	ldi	r17, 0x00	; 0
    LoadGameState();
    gameState[0]|=1;
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3ca4:	0e 94 cb 0c 	call	0x1996	; 0x1996 <GenerateAudio>
    3ca8:	88 23       	and	r24, r24
    3caa:	e1 f3       	breq	.-8      	; 0x3ca4 <main+0x24>

            //Some sound effects and button readout 
            lastButtonState = buttonState;
    3cac:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3cb0:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3cb4:	0e 94 bf 08 	call	0x117e	; 0x117e <CheckButtons>
    3cb8:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            if (buttonState != 0xff) {
    3cbc:	8f 3f       	cpi	r24, 0xFF	; 255
    3cbe:	a9 f0       	breq	.+42     	; 0x3cea <main+0x6a>
                iLED[CAT] = dimValue;
    3cc0:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    3cc4:	98 83       	st	Y, r25
                if ((effect & 0xffe0)==0)
    3cc6:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <effect>
    3cca:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <effect+0x1>
    3cce:	20 7e       	andi	r18, 0xE0	; 224
    3cd0:	23 2b       	or	r18, r19
    3cd2:	61 f4       	brne	.+24     	; 0x3cec <main+0x6c>
                    effect = 0x13f + (buttonState << 5);
    3cd4:	20 e2       	ldi	r18, 0x20	; 32
    3cd6:	82 9f       	mul	r24, r18
    3cd8:	c0 01       	movw	r24, r0
    3cda:	11 24       	eor	r1, r1
    3cdc:	81 5c       	subi	r24, 0xC1	; 193
    3cde:	9e 4f       	sbci	r25, 0xFE	; 254
    3ce0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3ce4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3ce8:	01 c0       	rjmp	.+2      	; 0x3cec <main+0x6c>
            } else {
                iLED[CAT] = 0;
    3cea:	18 82       	st	Y, r1
            }
            --buttonMark;
    3cec:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    3cf0:	81 50       	subi	r24, 0x01	; 1
    3cf2:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>

            //Switch between audio port input (badge to badge comms) and onboard temperature sensor
            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3cf6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3cfa:	82 31       	cpi	r24, 0x12	; 18
    3cfc:	19 f4       	brne	.+6      	; 0x3d04 <main+0x84>
    3cfe:	0e 94 b0 08 	call	0x1160	; 0x1160 <SelectAuIn>
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <main+0x88>
    3d04:	0e 94 a1 08 	call	0x1142	; 0x1142 <SelectTSens>

            GenerateBlinks();
    3d08:	0e 94 32 0b 	call	0x1664	; 0x1664 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3d0c:	70 df       	rcall	.-288    	; 0x3bee <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3d0e:	0e 94 cc 03 	call	0x798	; 0x798 <MagnetMaze>
            LanyardCode();
    3d12:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LanyardCode>
            BastetDictates();
    3d16:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <BastetDictates>
            MakeFriends();
    3d1a:	0e 94 86 00 	call	0x10c	; 0x10c <MakeFriends>

            //Save progress
            SaveGameState();
    3d1e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3d22:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <adcPhot>
    3d26:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    3d2a:	0a 97       	sbiw	r24, 0x0a	; 10
    3d2c:	18 f4       	brcc	.+6      	; 0x3d34 <main+0xb4>
    3d2e:	84 e7       	ldi	r24, 0x74	; 116
    3d30:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3d34:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <adcPhot>
    3d38:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    3d3c:	85 36       	cpi	r24, 0x65	; 101
    3d3e:	91 05       	cpc	r25, r1
    3d40:	18 f0       	brcs	.+6      	; 0x3d48 <main+0xc8>
    3d42:	84 ef       	ldi	r24, 0xF4	; 244
    3d44:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3d48:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3d4c:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d50:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3d54:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d58:	46 e0       	ldi	r20, 0x06	; 6
    3d5a:	36 95       	lsr	r19
    3d5c:	27 95       	ror	r18
    3d5e:	4a 95       	dec	r20
    3d60:	e1 f7       	brne	.-8      	; 0x3d5a <main+0xda>
    3d62:	82 1b       	sub	r24, r18
    3d64:	93 0b       	sbc	r25, r19
    3d66:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3d6a:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3d6e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3d72:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d76:	93 95       	inc	r25
    3d78:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3d7c:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3d80:	20 91 c6 3a 	lds	r18, 0x3AC6	; 0x803ac6 <adcPhot>
    3d84:	30 91 c7 3a 	lds	r19, 0x3AC7	; 0x803ac7 <adcPhot+0x1>
    3d88:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3d8c:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3d90:	22 0f       	add	r18, r18
    3d92:	23 2f       	mov	r18, r19
    3d94:	22 1f       	adc	r18, r18
    3d96:	33 0b       	sbc	r19, r19
    3d98:	31 95       	neg	r19
    3d9a:	f8 01       	movw	r30, r16
    3d9c:	e2 1b       	sub	r30, r18
    3d9e:	f3 0b       	sbc	r31, r19
    3da0:	e6 58       	subi	r30, 0x86	; 134
    3da2:	f1 44       	sbci	r31, 0x41	; 65
    3da4:	20 81       	ld	r18, Z
    3da6:	82 1b       	sub	r24, r18
    3da8:	91 09       	sbc	r25, r1
    3daa:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dae:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3db2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3db6:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3dba:	66 e0       	ldi	r22, 0x06	; 6
    3dbc:	96 95       	lsr	r25
    3dbe:	87 95       	ror	r24
    3dc0:	6a 95       	dec	r22
    3dc2:	e1 f7       	brne	.-8      	; 0x3dbc <main+0x13c>
    3dc4:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3dc8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <HotSummer>
    3dcc:	6b cf       	rjmp	.-298    	; 0x3ca4 <main+0x24>

00003dce <__tablejump2__>:
    3dce:	ee 0f       	add	r30, r30
    3dd0:	ff 1f       	adc	r31, r31
    3dd2:	05 90       	lpm	r0, Z+
    3dd4:	f4 91       	lpm	r31, Z
    3dd6:	e0 2d       	mov	r30, r0
    3dd8:	09 94       	ijmp

00003dda <__prologue_saves__>:
    3dda:	2f 92       	push	r2
    3ddc:	3f 92       	push	r3
    3dde:	4f 92       	push	r4
    3de0:	5f 92       	push	r5
    3de2:	6f 92       	push	r6
    3de4:	7f 92       	push	r7
    3de6:	8f 92       	push	r8
    3de8:	9f 92       	push	r9
    3dea:	af 92       	push	r10
    3dec:	bf 92       	push	r11
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    3e02:	ca 1b       	sub	r28, r26
    3e04:	db 0b       	sbc	r29, r27
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	de bf       	out	0x3e, r29	; 62
    3e0a:	09 94       	ijmp

00003e0c <__epilogue_restores__>:
    3e0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3e0e:	39 88       	ldd	r3, Y+17	; 0x11
    3e10:	48 88       	ldd	r4, Y+16	; 0x10
    3e12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3e20:	c8 84       	ldd	r12, Y+8	; 0x08
    3e22:	df 80       	ldd	r13, Y+7	; 0x07
    3e24:	ee 80       	ldd	r14, Y+6	; 0x06
    3e26:	fd 80       	ldd	r15, Y+5	; 0x05
    3e28:	0c 81       	ldd	r16, Y+4	; 0x04
    3e2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3e2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e30:	ce 0f       	add	r28, r30
    3e32:	d1 1d       	adc	r29, r1
    3e34:	cd bf       	out	0x3d, r28	; 61
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	ed 01       	movw	r28, r26
    3e3a:	08 95       	ret

00003e3c <_exit>:
    3e3c:	f8 94       	cli

00003e3e <__stop_program>:
    3e3e:	ff cf       	rjmp	.-2      	; 0x3e3e <__stop_program>
