
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00803800  000040c8  0000417c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000400c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0000c00c  0000400c  000040c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00803830  00803830  000041ac  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000041ac  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  0000421c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d5d  00000000  00000000  00004554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028cd  00000000  00000000  0000b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e77  00000000  00000000  0000db7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a18  00000000  00000000  000119f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a89  00000000  00000000  00012410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000042d2  00000000  00000000  00013e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  0001816b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	bf c7       	rjmp	.+3966   	; 0xf98 <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_7>
      20:	fc c5       	rjmp	.+3064   	; 0xc1a <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	43 c6       	rjmp	.+3206   	; 0xcbc <__vector_13>
      36:	00 00       	nop
      38:	74 c6       	rjmp	.+3304   	; 0xd22 <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2f c7       	rjmp	.+3678   	; 0xeb0 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c7       	rjmp	.+3758   	; 0xf08 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	aa c6       	rjmp	.+3412   	; 0xdc2 <__vector_27>
      6e:	00 00       	nop
      70:	03 c7       	rjmp	.+3590   	; 0xe78 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 0b       	sbc	r30, r19
      7e:	11 0c       	add	r1, r1
      80:	18 0c       	add	r1, r8
      82:	c7 0c       	add	r12, r7
      84:	c7 0c       	add	r12, r7
      86:	2c 0c       	add	r2, r12
      88:	3e 0c       	add	r3, r14
      8a:	69 0c       	add	r6, r9
      8c:	8d 0c       	add	r8, r13

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	e8 ec       	ldi	r30, 0xC8	; 200
      a2:	f0 e4       	ldi	r31, 0x40	; 64
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a0 33       	cpi	r26, 0x30	; 48
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a0 e3       	ldi	r26, 0x30	; 48
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a2 31       	cpi	r26, 0x12	; 18
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <main>
      c4:	0c 94 04 20 	jmp	0x4008	; 0x4008 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      d0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	c4 e6       	ldi	r28, 0x64	; 100
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     108:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     10a:	8c 2f       	mov	r24, r28
     10c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
     110:	81 11       	cpse	r24, r1
     112:	01 c0       	rjmp	.+2      	; 0x116 <MakeFriends+0x1c>
     114:	d0 e0       	ldi	r29, 0x00	; 0
     116:	cf 5f       	subi	r28, 0xFF	; 255
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     118:	c8 36       	cpi	r28, 0x68	; 104
     11a:	b9 f7       	brne	.-18     	; 0x10a <MakeFriends+0x10>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     11c:	dd 23       	and	r29, r29
     11e:	19 f0       	breq	.+6      	; 0x126 <MakeFriends+0x2c>
     120:	8c e7       	ldi	r24, 0x7C	; 124
     122:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     126:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <progress.3788>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	50 f0       	brcs	.+20     	; 0x142 <MakeFriends+0x48>
        gameNow = FRIENDS; 
     12e:	94 e0       	ldi	r25, 0x04	; 4
     130:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <gameNow>
        effect = 31;
     134:	2f e1       	ldi	r18, 0x1F	; 31
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     13c:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
     140:	0c c0       	rjmp	.+24     	; 0x15a <MakeFriends+0x60>
    }
    
    //Clear game state
    if ((progress == NO_OTHER) && (gameNow == FRIENDS)) {
     142:	81 11       	cpse	r24, r1
     144:	0a c0       	rjmp	.+20     	; 0x15a <MakeFriends+0x60>
     146:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <gameNow>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	31 f4       	brne	.+12     	; 0x15a <MakeFriends+0x60>
        gameNow = TEXT; 
     14e:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     152:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     156:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
    }

    //Checking for headphones
    if (detHdPh) return 0;
     15a:	90 91 bf 3a 	lds	r25, 0x3ABF	; 0x803abf <detHdPh>
     15e:	91 11       	cpse	r25, r1
     160:	fe c0       	rjmp	.+508    	; 0x35e <MakeFriends+0x264>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     162:	81 11       	cpse	r24, r1
     164:	11 c0       	rjmp	.+34     	; 0x188 <MakeFriends+0x8e>
        setDAC[0] = whoami * 51;
     166:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     16a:	23 e3       	ldi	r18, 0x33	; 51
     16c:	92 9f       	mul	r25, r18
     16e:	90 2d       	mov	r25, r0
     170:	11 24       	eor	r1, r1
     172:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	38 e3       	ldi	r19, 0x38	; 56
     17a:	20 93 03 38 	sts	0x3803, r18	; 0x803803 <auRepAddr>
     17e:	30 93 04 38 	sts	0x3804, r19	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     182:	9f ef       	ldi	r25, 0xFF	; 255
     184:	90 93 b6 3a 	sts	0x3AB6, r25	; 0x803ab6 <auVolume>
    }

    //Check for other badges
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     188:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     18c:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	b9 01       	movw	r22, r18
     196:	6a 50       	subi	r22, 0x0A	; 10
     198:	71 09       	sbc	r23, r1
     19a:	46 17       	cp	r20, r22
     19c:	57 07       	cpc	r21, r23
     19e:	64 f0       	brlt	.+24     	; 0x1b8 <MakeFriends+0xbe>
     1a0:	40 91 c2 3a 	lds	r20, 0x3AC2	; 0x803ac2 <auIn>
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	26 5f       	subi	r18, 0xF6	; 246
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	24 17       	cp	r18, r20
     1ac:	35 07       	cpc	r19, r21
     1ae:	24 f0       	brlt	.+8      	; 0x1b8 <MakeFriends+0xbe>
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <MakeFriends+0xbc>
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <MakeFriends+0x13c>
     1b6:	d1 c0       	rjmp	.+418    	; 0x35a <MakeFriends+0x260>
        if (progress == NO_OTHER) {
     1b8:	81 11       	cpse	r24, r1
     1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <MakeFriends+0xd6>
            ++chkTmr;
     1bc:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3790>
            if (chkTmr >= 8) {
     1c6:	88 30       	cpi	r24, 0x08	; 8
     1c8:	08 f4       	brcc	.+2      	; 0x1cc <MakeFriends+0xd2>
     1ca:	c9 c0       	rjmp	.+402    	; 0x35e <MakeFriends+0x264>
                progress = FIRST_CONTACT;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	7e c0       	rjmp	.+252    	; 0x2cc <MakeFriends+0x1d2>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	89 f5       	brne	.+98     	; 0x236 <MakeFriends+0x13c>
            jackIn = chkVolt250();
     1d4:	7a df       	rcall	.-268    	; 0xca <chkVolt250>
     1d6:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3791>
            if (jackIn) {
     1da:	88 23       	and	r24, r24
     1dc:	49 f1       	breq	.+82     	; 0x230 <MakeFriends+0x136>
                ++chkTmr;
     1de:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <chkTmr.3790>
     1e2:	9f 5f       	subi	r25, 0xFF	; 255
     1e4:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <chkTmr.3790>
                if (chkTmr >= SHORT_WAIT){
     1e8:	98 30       	cpi	r25, 0x08	; 8
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <MakeFriends+0xf4>
     1ec:	b8 c0       	rjmp	.+368    	; 0x35e <MakeFriends+0x264>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1ee:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     1f2:	91 30       	cpi	r25, 0x01	; 1
     1f4:	29 f4       	brne	.+10     	; 0x200 <MakeFriends+0x106>
     1f6:	83 50       	subi	r24, 0x03	; 3
     1f8:	83 30       	cpi	r24, 0x03	; 3
     1fa:	b8 f4       	brcc	.+46     	; 0x22a <MakeFriends+0x130>
                        progress = SECOND_LOVE; 
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	66 c0       	rjmp	.+204    	; 0x2cc <MakeFriends+0x1d2>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     200:	92 30       	cpi	r25, 0x02	; 2
     202:	31 f4       	brne	.+12     	; 0x210 <MakeFriends+0x116>
     204:	83 30       	cpi	r24, 0x03	; 3
     206:	d1 f3       	breq	.-12     	; 0x1fc <MakeFriends+0x102>
     208:	85 50       	subi	r24, 0x05	; 5
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	70 f4       	brcc	.+28     	; 0x22a <MakeFriends+0x130>
     20e:	f6 cf       	rjmp	.-20     	; 0x1fc <MakeFriends+0x102>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     210:	93 30       	cpi	r25, 0x03	; 3
     212:	39 f4       	brne	.+14     	; 0x222 <MakeFriends+0x128>
     214:	9c ef       	ldi	r25, 0xFC	; 252
     216:	98 0f       	add	r25, r24
     218:	92 30       	cpi	r25, 0x02	; 2
     21a:	80 f3       	brcs	.-32     	; 0x1fc <MakeFriends+0x102>
     21c:	87 30       	cpi	r24, 0x07	; 7
     21e:	29 f4       	brne	.+10     	; 0x22a <MakeFriends+0x130>
     220:	ed cf       	rjmp	.-38     	; 0x1fc <MakeFriends+0x102>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     222:	94 30       	cpi	r25, 0x04	; 4
     224:	11 f4       	brne	.+4      	; 0x22a <MakeFriends+0x130>
     226:	85 50       	subi	r24, 0x05	; 5
     228:	e7 cf       	rjmp	.-50     	; 0x1f8 <MakeFriends+0xfe>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     22a:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3788>
     22e:	50 c0       	rjmp	.+160    	; 0x2d0 <MakeFriends+0x1d6>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     230:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3790>
     234:	92 c0       	rjmp	.+292    	; 0x35a <MakeFriends+0x260>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     236:	82 30       	cpi	r24, 0x02	; 2
     238:	09 f0       	breq	.+2      	; 0x23c <MakeFriends+0x142>
     23a:	4d c0       	rjmp	.+154    	; 0x2d6 <MakeFriends+0x1dc>
            ++chkTmr;
     23c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     240:	8f 5f       	subi	r24, 0xFF	; 255
     242:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3790>
     246:	c8 e3       	ldi	r28, 0x38	; 56
     248:	d0 ec       	ldi	r29, 0xC0	; 192
     24a:	7e 01       	movw	r14, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     24c:	0d 81       	ldd	r16, Y+5	; 0x05
     24e:	10 e0       	ldi	r17, 0x00	; 0
     250:	fd d7       	rcall	.+4090   	; 0x124c <lfsr>
     252:	87 ff       	sbrs	r24, 7
     254:	03 c0       	rjmp	.+6      	; 0x25c <MakeFriends+0x162>
     256:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     25a:	01 c0       	rjmp	.+2      	; 0x25e <MakeFriends+0x164>
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	f8 01       	movw	r30, r16
     260:	ed 53       	subi	r30, 0x3D	; 61
     262:	f5 4c       	sbci	r31, 0xC5	; 197
     264:	80 83       	st	Z, r24
     266:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     268:	f7 01       	movw	r30, r14
     26a:	00 81       	ld	r16, Z
     26c:	10 e0       	ldi	r17, 0x00	; 0
     26e:	ee d7       	rcall	.+4060   	; 0x124c <lfsr>
     270:	87 ff       	sbrs	r24, 7
     272:	03 c0       	rjmp	.+6      	; 0x27a <MakeFriends+0x180>
     274:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
     278:	01 c0       	rjmp	.+2      	; 0x27c <MakeFriends+0x182>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	f8 01       	movw	r30, r16
     27e:	ed 53       	subi	r30, 0x3D	; 61
     280:	f5 4c       	sbci	r31, 0xC5	; 197
     282:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     284:	f0 ec       	ldi	r31, 0xC0	; 192
     286:	cd 33       	cpi	r28, 0x3D	; 61
     288:	df 07       	cpc	r29, r31
     28a:	f9 f6       	brne	.-66     	; 0x24a <MakeFriends+0x150>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= SHORT_WAIT) {
     28c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     290:	88 30       	cpi	r24, 0x08	; 8
     292:	40 f0       	brcs	.+16     	; 0x2a4 <MakeFriends+0x1aa>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     294:	2f ef       	ldi	r18, 0xFF	; 255
     296:	44 e6       	ldi	r20, 0x64	; 100
     298:	68 e0       	ldi	r22, 0x08	; 8
     29a:	80 e8       	ldi	r24, 0x80	; 128
     29c:	0e 94 77 09 	call	0x12ee	; 0x12ee <floatAround>
     2a0:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     2a4:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     2a8:	8a 3f       	cpi	r24, 0xFA	; 250
     2aa:	08 f4       	brcc	.+2      	; 0x2ae <MakeFriends+0x1b4>
     2ac:	58 c0       	rjmp	.+176    	; 0x35e <MakeFriends+0x264>
                candidate = jackIn-whoami;
     2ae:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <whoami>
     2b2:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <jackIn.3791>
     2b6:	89 1b       	sub	r24, r25
     2b8:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <__data_end>
                if (candidate > whoami) {
     2bc:	98 17       	cp	r25, r24
     2be:	10 f4       	brcc	.+4      	; 0x2c4 <MakeFriends+0x1ca>
                    setDAC[0] = 249;
     2c0:	89 ef       	ldi	r24, 0xF9	; 249
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <MakeFriends+0x1cc>
                } else {
                    setDAC[0] = 1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress = THIRD_KISS;
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <progress.3788>
                chkTmr = 0;
     2d0:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <chkTmr.3790>
     2d4:	44 c0       	rjmp	.+136    	; 0x35e <MakeFriends+0x264>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	f9 f4       	brne	.+62     	; 0x318 <MakeFriends+0x21e>
            chkTmr++;
     2da:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3790>
            if (chkTmr >= SHORT_WAIT) {
     2e4:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2e6:	d8 f1       	brcs	.+118    	; 0x35e <MakeFriends+0x264>
     2e8:	f0 de       	rcall	.-544    	; 0xca <chkVolt250>
     2ea:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <jackIn.3791>
                if (jackIn == 5) {
     2ee:	85 30       	cpi	r24, 0x05	; 5
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <MakeFriends+0x1fa>
     2f2:	9b cf       	rjmp	.-202    	; 0x22a <MakeFriends+0x130>
                    UpdateState(99+candidate);
     2f4:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     2f8:	8d 59       	subi	r24, 0x9D	; 157
     2fa:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                    UpdateState(99+whoami);
     2fe:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
     302:	8d 59       	subi	r24, 0x9D	; 157
     304:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                    WingBar(candidate, whoami);
     308:	60 91 3d 38 	lds	r22, 0x383D	; 0x80383d <whoami>
     30c:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <__data_end>
     310:	0e 94 1c 0b 	call	0x1638	; 0x1638 <WingBar>
                    progress = FOURTH_BASE;
     314:	84 e0       	ldi	r24, 0x04	; 4
     316:	da cf       	rjmp	.-76     	; 0x2cc <MakeFriends+0x1d2>
                } else progress = NO_OTHER;                
                chkTmr = 0;
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     318:	84 30       	cpi	r24, 0x04	; 4
     31a:	09 f5       	brne	.+66     	; 0x35e <MakeFriends+0x264>
            ++chkTmr;
     31c:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <chkTmr.3790>
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <chkTmr.3790>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     326:	80 34       	cpi	r24, 0x40	; 64
     328:	d0 f0       	brcs	.+52     	; 0x35e <MakeFriends+0x264>
     32a:	e8 e3       	ldi	r30, 0x38	; 56
     32c:	f0 ec       	ldi	r31, 0xC0	; 192
     32e:	8d e3       	ldi	r24, 0x3D	; 61
     330:	90 ec       	ldi	r25, 0xC0	; 192
     332:	ef 01       	movw	r28, r30
                for (uint8_t x=0; x<5; ++x) {
                    iLED[WING[L][x]] = 0;
     334:	a5 81       	ldd	r26, Z+5	; 0x05
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	ad 53       	subi	r26, 0x3D	; 61
     33a:	b5 4c       	sbci	r27, 0xC5	; 197
     33c:	1c 92       	st	X, r1
     33e:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = 0;
     340:	a8 81       	ld	r26, Y
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	ad 53       	subi	r26, 0x3D	; 61
     346:	b5 4c       	sbci	r27, 0xC5	; 197
     348:	1c 92       	st	X, r1

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
            ++chkTmr;
            if (chkTmr >= (SHORT_WAIT<<3)) {
                for (uint8_t x=0; x<5; ++x) {
     34a:	8e 17       	cp	r24, r30
     34c:	9f 07       	cpc	r25, r31
     34e:	89 f7       	brne	.-30     	; 0x332 <MakeFriends+0x238>
                    iLED[WING[L][x]] = 0;
                    iLED[WING[R][x]] = 0;
                }                 
                progress = NO_OTHER;
     350:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3788>
                gameNow = TEXT;
     354:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
     358:	02 c0       	rjmp	.+4      	; 0x35e <MakeFriends+0x264>
            }
        }

    } else {
        progress = NO_OTHER;
     35a:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <progress.3788>
    }
      
    return 0;
}
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	08 95       	ret

0000036e <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     374:	e6 e2       	ldi	r30, 0x26	; 38
     376:	f4 e0       	ldi	r31, 0x04	; 4
     378:	80 83       	st	Z, r24
     37a:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     37e:	a1 e2       	ldi	r26, 0x21	; 33
     380:	b4 e0       	ldi	r27, 0x04	; 4
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	9c 93       	st	X, r25
     386:	90 83       	st	Z, r25
     388:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     38c:	e0 e1       	ldi	r30, 0x10	; 16
     38e:	f8 e0       	ldi	r31, 0x08	; 8
     390:	97 e0       	ldi	r25, 0x07	; 7
     392:	96 83       	std	Z+6, r25	; 0x06
     394:	98 e0       	ldi	r25, 0x08	; 8
     396:	94 83       	std	Z+4, r25	; 0x04
     398:	83 83       	std	Z+3, r24	; 0x03
     39a:	8c 93       	st	X, r24
     39c:	85 81       	ldd	r24, Z+5	; 0x05
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	85 83       	std	Z+5, r24	; 0x05
     3a2:	85 81       	ldd	r24, Z+5	; 0x05
     3a4:	84 6c       	ori	r24, 0xC4	; 196
     3a6:	85 83       	std	Z+5, r24	; 0x05
     3a8:	08 95       	ret

000003aa <I2C_recover>:
     3aa:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3ae:	88 60       	ori	r24, 0x08	; 8
     3b0:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3b4:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3be:	99 e0       	ldi	r25, 0x09	; 9
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3c8:	30 e1       	ldi	r19, 0x10	; 16
     3ca:	3a 95       	dec	r19
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <I2C_recover+0x20>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <I2C_recover+0x26>
     3d0:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     3d4:	30 e1       	ldi	r19, 0x10	; 16
     3d6:	3a 95       	dec	r19
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <I2C_recover+0x2c>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <I2C_recover+0x32>
     3dc:	91 50       	subi	r25, 0x01	; 1
     3de:	89 f7       	brne	.-30     	; 0x3c2 <I2C_recover+0x18>
     3e0:	28 e0       	ldi	r18, 0x08	; 8
     3e2:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3e6:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3f0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f4:	91 60       	ori	r25, 0x01	; 1
     3f6:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fe:	94 6c       	ori	r25, 0xC4	; 196
     400:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     404:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     408:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     40c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     410:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     414:	81 60       	ori	r24, 0x01	; 1
     416:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41e:	84 6c       	ori	r24, 0xC4	; 196
     420:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     424:	08 95       	ret

00000426 <I2C_start>:
     426:	28 2f       	mov	r18, r24
     428:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     42c:	90 6c       	ori	r25, 0xC0	; 192
     42e:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     436:	89 2f       	mov	r24, r25
     438:	84 70       	andi	r24, 0x04	; 4
     43a:	92 fd       	sbrc	r25, 2
     43c:	03 c0       	rjmp	.+6      	; 0x444 <I2C_start+0x1e>
     43e:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     442:	08 95       	ret
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	08 95       	ret

00000448 <I2C_wait_ACK>:
     448:	8c e0       	ldi	r24, 0x0C	; 12
     44a:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
     44e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     452:	87 fd       	sbrc	r24, 7
     454:	0a c0       	rjmp	.+20     	; 0x46a <I2C_wait_ACK+0x22>
     456:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     45a:	86 fd       	sbrc	r24, 6
     45c:	06 c0       	rjmp	.+12     	; 0x46a <I2C_wait_ACK+0x22>
     45e:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     462:	81 11       	cpse	r24, r1
     464:	f4 cf       	rjmp	.-24     	; 0x44e <I2C_wait_ACK+0x6>
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	08 95       	ret
     46a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     46e:	80 6c       	ori	r24, 0xC0	; 192
     470:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     474:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     478:	82 fd       	sbrc	r24, 2
     47a:	09 c0       	rjmp	.+18     	; 0x48e <I2C_wait_ACK+0x46>
     47c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     480:	83 fd       	sbrc	r24, 3
     482:	07 c0       	rjmp	.+14     	; 0x492 <I2C_wait_ACK+0x4a>
     484:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     488:	82 95       	swap	r24
     48a:	81 70       	andi	r24, 0x01	; 1
     48c:	08 95       	ret
     48e:	84 e0       	ldi	r24, 0x04	; 4
     490:	08 95       	ret
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	08 95       	ret

00000496 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     496:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     498:	8c e0       	ldi	r24, 0x0C	; 12
     49a:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     49e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a2:	89 2f       	mov	r24, r25
     4a4:	83 70       	andi	r24, 0x03	; 3
     4a6:	82 30       	cpi	r24, 0x02	; 2
     4a8:	11 f0       	breq	.+4      	; 0x4ae <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     4aa:	88 e0       	ldi	r24, 0x08	; 8
     4ac:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     4ae:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b2:	97 fd       	sbrc	r25, 7
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4b6:	90 91 60 3a 	lds	r25, 0x3A60	; 0x803a60 <timeout_I2C>
     4ba:	91 11       	cpse	r25, r1
     4bc:	f8 cf       	rjmp	.-16     	; 0x4ae <I2C_read+0x18>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     4c2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c6:	90 6c       	ori	r25, 0xC0	; 192
     4c8:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4cc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d0:	92 fd       	sbrc	r25, 2
     4d2:	1e c0       	rjmp	.+60     	; 0x510 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     4d4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d8:	93 fd       	sbrc	r25, 3
     4da:	1d c0       	rjmp	.+58     	; 0x516 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4dc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e0:	89 2f       	mov	r24, r25
     4e2:	80 71       	andi	r24, 0x10	; 16
     4e4:	94 fd       	sbrc	r25, 4
     4e6:	16 c0       	rjmp	.+44     	; 0x514 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     4e8:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4ec:	61 11       	cpse	r22, r1
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <I2C_read+0x5e>
     4f0:	9b 7f       	andi	r25, 0xFB	; 251
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     4f4:	94 60       	ori	r25, 0x04	; 4
     4f6:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     4fa:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     4fe:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     500:	61 11       	cpse	r22, r1
     502:	09 c0       	rjmp	.+18     	; 0x516 <I2C_read+0x80>
     504:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     508:	92 60       	ori	r25, 0x02	; 2
     50a:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     50e:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     514:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     516:	08 95       	ret

00000518 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     518:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     51a:	8c e0       	ldi	r24, 0x0C	; 12
     51c:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     520:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     524:	93 70       	andi	r25, 0x03	; 3
     526:	92 30       	cpi	r25, 0x02	; 2
     528:	b1 f4       	brne	.+44     	; 0x556 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     52a:	80 81       	ld	r24, Z
     52c:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     530:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     534:	86 fd       	sbrc	r24, 6
     536:	06 c0       	rjmp	.+12     	; 0x544 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     538:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     53c:	81 11       	cpse	r24, r1
     53e:	f8 cf       	rjmp	.-16     	; 0x530 <I2C_write+0x18>
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     544:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     548:	82 fd       	sbrc	r24, 2
     54a:	07 c0       	rjmp	.+14     	; 0x55a <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     54c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     550:	82 95       	swap	r24
     552:	81 70       	andi	r24, 0x01	; 1
     554:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     556:	88 e0       	ldi	r24, 0x08	; 8
     558:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     55a:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     55c:	08 95       	ret

0000055e <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     55e:	e0 e1       	ldi	r30, 0x10	; 16
     560:	f8 e0       	ldi	r31, 0x08	; 8
     562:	84 81       	ldd	r24, Z+4	; 0x04
     564:	83 60       	ori	r24, 0x03	; 3
     566:	84 83       	std	Z+4, r24	; 0x04
     568:	08 95       	ret

0000056a <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	6b 01       	movw	r12, r22
     57a:	f4 2e       	mov	r15, r20
     57c:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     57e:	18 2f       	mov	r17, r24
     580:	11 0f       	add	r17, r17
     582:	81 2f       	mov	r24, r17
     584:	50 df       	rcall	.-352    	; 0x426 <I2C_start>
	if (status != 0) goto error;
     586:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     588:	2b c0       	rjmp	.+86     	; 0x5e0 <I2C_read_bytes+0x76>
     58a:	5e df       	rcall	.-324    	; 0x448 <I2C_wait_ACK>
	if (status == 1) {
     58c:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     58e:	19 f4       	brne	.+6      	; 0x596 <I2C_read_bytes+0x2c>
     590:	e6 df       	rcall	.-52     	; 0x55e <I2C_stop>
		return 1;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	27 c0       	rjmp	.+78     	; 0x5e4 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     596:	81 11       	cpse	r24, r1
     598:	23 c0       	rjmp	.+70     	; 0x5e0 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     59a:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     59c:	49 f0       	breq	.+18     	; 0x5b0 <I2C_read_bytes+0x46>
     59e:	c6 01       	movw	r24, r12
     5a0:	bb df       	rcall	.-138    	; 0x518 <I2C_write>
	    if (status != 0) goto error;
     5a2:	81 11       	cpse	r24, r1
     5a4:	1d c0       	rjmp	.+58     	; 0x5e0 <I2C_read_bytes+0x76>
        ++reg_ptr;
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	c8 1a       	sub	r12, r24
     5aa:	d8 0a       	sbc	r13, r24
        --reg_len;
     5ac:	fa 94       	dec	r15
     5ae:	f5 cf       	rjmp	.-22     	; 0x59a <I2C_read_bytes+0x30>
     5b0:	01 34       	cpi	r16, 0x41	; 65
     5b2:	08 f0       	brcs	.+2      	; 0x5b6 <I2C_read_bytes+0x4c>
     5b4:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     5b6:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     5b8:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     5bc:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     5be:	40 f0       	brcs	.+16     	; 0x5d0 <I2C_read_bytes+0x66>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	ce 01       	movw	r24, r28
     5c4:	68 df       	rcall	.-304    	; 0x496 <I2C_read>
		if (status != 0) goto error;
     5c6:	81 11       	cpse	r24, r1
     5c8:	0b c0       	rjmp	.+22     	; 0x5e0 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     5ce:	f6 cf       	rjmp	.-20     	; 0x5bc <I2C_read_bytes+0x52>
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     5d4:	60 df       	rcall	.-320    	; 0x496 <I2C_read>
     5d6:	81 11       	cpse	r24, r1
	I2C_stop();
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <I2C_read_bytes+0x76>
     5da:	c1 df       	rcall	.-126    	; 0x55e <I2C_stop>
	return 0;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     5e0:	e4 de       	rcall	.-568    	; 0x3aa <I2C_recover>
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     5e4:	df 91       	pop	r29
}
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	08 95       	ret

000005f4 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     5f4:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <lanyardPos>
    lanyardCnt      = 0;
     5f8:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
    lanyardState    = TRUE;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    ClearHackerLeds();
     602:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <ClearHackerLeds>

00000606 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     606:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     608:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	91 f4       	brne	.+36     	; 0x634 <LanyardCode+0x2e>
     610:	6a e0       	ldi	r22, 0x0A	; 10
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <lanyardLastActive>
     618:	90 91 35 38 	lds	r25, 0x3835	; 0x803835 <lanyardLastActive+0x1>
     61c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <idleTimeout>
     620:	88 23       	and	r24, r24
     622:	41 f0       	breq	.+16     	; 0x634 <LanyardCode+0x2e>
        /* clean up maze game and go back to text game */
        initLanyard();
     624:	e7 df       	rcall	.-50     	; 0x5f4 <initLanyard>
        gameNow = TEXT;
     626:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        effect = 0;
     62a:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     62e:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
        return 0;
     632:	9b c0       	rjmp	.+310    	; 0x76a <LanyardCode+0x164>
    }

    if (CheckState(LANYARD_COMPLETED))
     634:	8b e7       	ldi	r24, 0x7B	; 123
     636:	35 d7       	rcall	.+3690   	; 0x14a2 <CheckState>
     638:	81 11       	cpse	r24, r1
     63a:	97 c0       	rjmp	.+302    	; 0x76a <LanyardCode+0x164>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     63c:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     640:	88 23       	and	r24, r24
     642:	19 f0       	breq	.+6      	; 0x64a <LanyardCode+0x44>
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	09 f0       	breq	.+2      	; 0x64a <LanyardCode+0x44>
     648:	90 c0       	rjmp	.+288    	; 0x76a <LanyardCode+0x164>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     64a:	c0 91 34 c0 	lds	r28, 0xC034	; 0x80c034 <__bss_end+0x8522>
     64e:	ec 2f       	mov	r30, r28
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     656:	8f 3f       	cpi	r24, 0xFF	; 255
     658:	19 f0       	breq	.+6      	; 0x660 <LanyardCode+0x5a>
     65a:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     65e:	01 c0       	rjmp	.+2      	; 0x662 <LanyardCode+0x5c>
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	ed 53       	subi	r30, 0x3D	; 61
     664:	f5 4c       	sbci	r31, 0xC5	; 197
     666:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     668:	8f 3f       	cpi	r24, 0xFF	; 255
     66a:	09 f4       	brne	.+2      	; 0x66e <LanyardCode+0x68>
     66c:	7e c0       	rjmp	.+252    	; 0x76a <LanyardCode+0x164>
        return 0;

    if (buttonState == lastButtonState)
     66e:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     672:	89 17       	cp	r24, r25
     674:	09 f4       	brne	.+2      	; 0x678 <LanyardCode+0x72>
     676:	79 c0       	rjmp	.+242    	; 0x76a <LanyardCode+0x164>
        return 0;

    lanyardLastActive = getClock();
     678:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <getClock>
     67c:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <lanyardLastActive>
     680:	90 93 35 38 	sts	0x3835, r25	; 0x803835 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     684:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     688:	8f 3f       	cpi	r24, 0xFF	; 255
     68a:	09 f0       	breq	.+2      	; 0x68e <LanyardCode+0x88>
     68c:	6e c0       	rjmp	.+220    	; 0x76a <LanyardCode+0x164>
        effect = 0x13f + (buttonState << 5);
     68e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     692:	20 e2       	ldi	r18, 0x20	; 32
     694:	82 9f       	mul	r24, r18
     696:	c0 01       	movw	r24, r0
     698:	11 24       	eor	r1, r1
     69a:	81 5c       	subi	r24, 0xC1	; 193
     69c:	9e 4f       	sbci	r25, 0xFE	; 254
     69e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     6a2:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>

        if (gameNow != LANYARD)
     6a6:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     6aa:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <LanyardCode+0xaa>
     6ae:	a2 df       	rcall	.-188    	; 0x5f4 <initLanyard>
        gameNow = LANYARD;
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     6b6:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <lanyardPos>
     6ba:	e8 2f       	mov	r30, r24
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e4 5e       	subi	r30, 0xE4	; 228
     6c0:	ff 43       	sbci	r31, 0x3F	; 63
     6c2:	20 81       	ld	r18, Z
     6c4:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     6c8:	29 13       	cpse	r18, r25
     6ca:	12 c0       	rjmp	.+36     	; 0x6f0 <LanyardCode+0xea>
            lanyardState &= TRUE;
     6cc:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6d0:	91 70       	andi	r25, 0x01	; 1
     6d2:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     6d6:	e0 91 43 c0 	lds	r30, 0xC043	; 0x80c043 <__bss_end+0x8531>
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ed 53       	subi	r30, 0x3D	; 61
     6de:	f5 4c       	sbci	r31, 0xC5	; 197
     6e0:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     6e2:	e0 91 42 c0 	lds	r30, 0xC042	; 0x80c042 <__bss_end+0x8530>
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ed 53       	subi	r30, 0x3D	; 61
     6ea:	f5 4c       	sbci	r31, 0xC5	; 197
     6ec:	10 82       	st	Z, r1
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <LanyardCode+0xfc>
        } else {
            lanyardState = FALSE;
     6f0:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     6f4:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     6f6:	28 f4       	brcc	.+10     	; 0x702 <LanyardCode+0xfc>
     6f8:	7d df       	rcall	.-262    	; 0x5f4 <initLanyard>
                gameNow         = BASTET;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
                return 0;
     700:	34 c0       	rjmp	.+104    	; 0x76a <LanyardCode+0x164>
            }
        }
        lanyardPos++;
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <lanyardPos>
        lanyardCnt++;            
     708:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <lanyardCnt>
     70c:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     70e:	94 30       	cpi	r25, 0x04	; 4
     710:	18 f4       	brcc	.+6      	; 0x718 <LanyardCode+0x112>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     712:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <lanyardCnt>
     716:	29 c0       	rjmp	.+82     	; 0x76a <LanyardCode+0x164>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     718:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <lanyardCnt>
            if (lanyardState == TRUE) {
     71c:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     720:	91 30       	cpi	r25, 0x01	; 1
     722:	e1 f4       	brne	.+56     	; 0x75c <LanyardCode+0x156>
                if ((lanyardPos % 4) == 0) {
     724:	98 2f       	mov	r25, r24
     726:	93 70       	andi	r25, 0x03	; 3
     728:	69 f4       	brne	.+26     	; 0x744 <LanyardCode+0x13e>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     72a:	e8 2f       	mov	r30, r24
     72c:	e6 95       	lsr	r30
     72e:	e6 95       	lsr	r30
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ea 5b       	subi	r30, 0xBA	; 186
     734:	ff 43       	sbci	r31, 0x3F	; 63
     736:	e5 81       	ldd	r30, Z+5	; 0x05
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     73e:	ed 53       	subi	r30, 0x3D	; 61
     740:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == sizeof(lanyardCode)) {
     742:	90 83       	st	Z, r25
     744:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     746:	89 f4       	brne	.+34     	; 0x76a <LanyardCode+0x164>
     748:	8b e7       	ldi	r24, 0x7B	; 123
     74a:	8a d6       	rcall	.+3348   	; 0x1460 <UpdateState>
                    iLED[CAT]       = 0;
     74c:	ec 2f       	mov	r30, r28
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	ed 53       	subi	r30, 0x3D	; 61
     752:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     754:	10 82       	st	Z, r1
     756:	82 e4       	ldi	r24, 0x42	; 66
     758:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     75a:	03 c0       	rjmp	.+6      	; 0x762 <LanyardCode+0x15c>
     75c:	4b df       	rcall	.-362    	; 0x5f4 <initLanyard>
                effect = 0x21;
     75e:	81 e2       	ldi	r24, 0x21	; 33
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     766:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
            }
        }
    }

    return 0;
}
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     770:	10 92 49 38 	sts	0x3849, r1	; 0x803849 <mazeHckrPos>
    mazePos = 0;
     774:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <mazePos>
    mazeCnt = 0;
     778:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
    mazeState = TRUE;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     782:	10 92 47 38 	sts	0x3847, r1	; 0x803847 <inverted>
    effect = 0;
     786:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <effect>
     78a:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <effect+0x1>
     78e:	08 95       	ret

00000790 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
    int16_t tmp;

    tmp = abs(val);
     790:	97 ff       	sbrs	r25, 7
     792:	03 c0       	rjmp	.+6      	; 0x79a <showFieldStrength+0xa>
     794:	91 95       	neg	r25
     796:	81 95       	neg	r24
     798:	91 09       	sbc	r25, r1

    if ( tmp*2 > HALL_LOW )
     79a:	9c 01       	movw	r18, r24
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	29 37       	cpi	r18, 0x79	; 121
     7a2:	31 05       	cpc	r19, r1
     7a4:	1c f0       	brlt	.+6      	; 0x7ac <showFieldStrength+0x1c>
        gameNow = MAZE;
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	40 93 3c 38 	sts	0x383C, r20	; 0x80383c <gameNow>

    if (gameNow == MAZE) {
     7ac:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <gameNow>
     7b0:	41 30       	cpi	r20, 0x01	; 1
     7b2:	21 f5       	brne	.+72     	; 0x7fc <showFieldStrength+0x6c>
        if ( tmp*2 < HALL_LOW )
     7b4:	28 37       	cpi	r18, 0x78	; 120
     7b6:	31 05       	cpc	r19, r1
     7b8:	1c f4       	brge	.+6      	; 0x7c0 <showFieldStrength+0x30>
            WingBar(0,0);
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	1d c0       	rjmp	.+58     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp   < HALL_LOW )
     7c0:	88 37       	cpi	r24, 0x78	; 120
     7c2:	91 05       	cpc	r25, r1
     7c4:	1c f4       	brge	.+6      	; 0x7cc <showFieldStrength+0x3c>
            WingBar(1,1);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	17 c0       	rjmp	.+46     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp*2 < HALL_HIGH )
     7cc:	2c 32       	cpi	r18, 0x2C	; 44
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	34 07       	cpc	r19, r20
     7d2:	1c f4       	brge	.+6      	; 0x7da <showFieldStrength+0x4a>
            WingBar(2,2);
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	10 c0       	rjmp	.+32     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp*3 < HALL_HIGH*2 )
     7da:	28 0f       	add	r18, r24
     7dc:	39 1f       	adc	r19, r25
     7de:	28 35       	cpi	r18, 0x58	; 88
     7e0:	32 40       	sbci	r19, 0x02	; 2
     7e2:	1c f4       	brge	.+6      	; 0x7ea <showFieldStrength+0x5a>
            WingBar(3,3);
     7e4:	63 e0       	ldi	r22, 0x03	; 3
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	08 c0       	rjmp	.+16     	; 0x7fa <showFieldStrength+0x6a>
        else if ( tmp   < HALL_HIGH )
     7ea:	8c 32       	cpi	r24, 0x2C	; 44
     7ec:	91 40       	sbci	r25, 0x01	; 1
     7ee:	1c f4       	brge	.+6      	; 0x7f6 <showFieldStrength+0x66>
            WingBar(4,4);
     7f0:	64 e0       	ldi	r22, 0x04	; 4
     7f2:	84 e0       	ldi	r24, 0x04	; 4
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <showFieldStrength+0x6a>
        else
            WingBar(5,5);
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	1e c7       	rjmp	.+3644   	; 0x1638 <WingBar>
     7fc:	08 95       	ret

000007fe <MagnetMaze>:
    }
}

// Main game loop
uint8_t MagnetMaze(){
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     802:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	71 f4       	brne	.+28     	; 0x826 <MagnetMaze+0x28>
     80a:	6a e0       	ldi	r22, 0x0A	; 10
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	80 91 45 38 	lds	r24, 0x3845	; 0x803845 <mazeLastActive>
     812:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <mazeLastActive+0x1>
     816:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <idleTimeout>
     81a:	88 23       	and	r24, r24
     81c:	21 f0       	breq	.+8      	; 0x826 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     81e:	a8 df       	rcall	.-176    	; 0x770 <initMaze>
        gameNow = TEXT;
     820:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        return 0;
     824:	e5 c0       	rjmp	.+458    	; 0x9f0 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     826:	87 ef       	ldi	r24, 0xF7	; 247
     828:	3c d6       	rcall	.+3192   	; 0x14a2 <CheckState>
     82a:	81 11       	cpse	r24, r1
     82c:	e1 c0       	rjmp	.+450    	; 0x9f0 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     82e:	8d e7       	ldi	r24, 0x7D	; 125
     830:	38 d6       	rcall	.+3184   	; 0x14a2 <CheckState>
     832:	81 11       	cpse	r24, r1
     834:	dd c0       	rjmp	.+442    	; 0x9f0 <MagnetMaze+0x1f2>
     836:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	08 f0       	brcs	.+2      	; 0x840 <MagnetMaze+0x42>
     83e:	d8 c0       	rjmp	.+432    	; 0x9f0 <MagnetMaze+0x1f2>
     840:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <calHall>
        return 0;

    if (calHall == 0)
     844:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <calHall+0x1>
     848:	89 2b       	or	r24, r25
     84a:	41 f4       	brne	.+16     	; 0x85c <MagnetMaze+0x5e>
     84c:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
        calHall = adcHall;
     850:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
     854:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <calHall>
     858:	90 93 ec 3a 	sts	0x3AEC, r25	; 0x803aec <calHall+0x1>
     85c:	c0 91 bb 3a 	lds	r28, 0x3ABB	; 0x803abb <adcHall>

    int16_t valHall = adcHall - calHall;
     860:	d0 91 bc 3a 	lds	r29, 0x3ABC	; 0x803abc <adcHall+0x1>
     864:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <calHall>
     868:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <calHall+0x1>
     86c:	c8 1b       	sub	r28, r24
     86e:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     870:	ce 01       	movw	r24, r28
     872:	8e df       	rcall	.-228    	; 0x790 <showFieldStrength>
     874:	80 91 4c 38 	lds	r24, 0x384C	; 0x80384c <curHallState>

    switch (curHallState) {
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	89 f0       	breq	.+34     	; 0x89e <MagnetMaze+0xa0>
     87c:	18 f0       	brcs	.+6      	; 0x884 <MagnetMaze+0x86>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	c1 f0       	breq	.+48     	; 0x8b2 <MagnetMaze+0xb4>
     882:	1f c0       	rjmp	.+62     	; 0x8c2 <MagnetMaze+0xc4>
     884:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     886:	9e ef       	ldi	r25, 0xFE	; 254
     888:	d9 07       	cpc	r29, r25
     88a:	14 f4       	brge	.+4      	; 0x890 <MagnetMaze+0x92>
     88c:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     88e:	04 c0       	rjmp	.+8      	; 0x898 <MagnetMaze+0x9a>
     890:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     892:	d1 40       	sbci	r29, 0x01	; 1
     894:	5c f0       	brlt	.+22     	; 0x8ac <MagnetMaze+0xae>
     896:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     898:	90 93 4b 38 	sts	0x384B, r25	; 0x80384b <newHallState>
     89c:	12 c0       	rjmp	.+36     	; 0x8c2 <MagnetMaze+0xc4>
     89e:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	d9 07       	cpc	r29, r25
     8a4:	c4 f7       	brge	.-16     	; 0x896 <MagnetMaze+0x98>
     8a6:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     8a8:	df 4f       	sbci	r29, 0xFF	; 255
     8aa:	84 f3       	brlt	.-32     	; 0x88c <MagnetMaze+0x8e>
     8ac:	10 92 4b 38 	sts	0x384B, r1	; 0x80384b <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <MagnetMaze+0xc4>
     8b2:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     8b4:	9e ef       	ldi	r25, 0xFE	; 254
     8b6:	d9 07       	cpc	r29, r25
     8b8:	4c f3       	brlt	.-46     	; 0x88c <MagnetMaze+0x8e>
     8ba:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     8bc:	d1 05       	cpc	r29, r1
     8be:	b4 f3       	brlt	.-20     	; 0x8ac <MagnetMaze+0xae>
     8c0:	ea cf       	rjmp	.-44     	; 0x896 <MagnetMaze+0x98>
     8c2:	c0 91 34 c0 	lds	r28, 0xC034	; 0x80c034 <__bss_end+0x8522>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     8c6:	ec 2f       	mov	r30, r28
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	90 91 4b 38 	lds	r25, 0x384B	; 0x80384b <newHallState>
     8ce:	99 23       	and	r25, r25
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <MagnetMaze+0xda>
     8d2:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <MagnetMaze+0xdc>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	ed 53       	subi	r30, 0x3D	; 61
     8dc:	f5 4c       	sbci	r31, 0xC5	; 197
     8de:	20 83       	st	Z, r18
     8e0:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <effect>
     8e8:	30 93 3b 38 	sts	0x383B, r19	; 0x80383b <effect+0x1>
     8ec:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <MagnetMaze+0xf4>
     8f0:	7f c0       	rjmp	.+254    	; 0x9f0 <MagnetMaze+0x1f2>
     8f2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     8f6:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazeLastActive>
     8fa:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <mazeLastActive+0x1>
     8fe:	90 91 4a 38 	lds	r25, 0x384A	; 0x80384a <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     902:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <newHallState>
     906:	91 11       	cpse	r25, r1
     908:	08 c0       	rjmp	.+16     	; 0x91a <MagnetMaze+0x11c>
     90a:	88 23       	and	r24, r24
     90c:	31 f0       	breq	.+12     	; 0x91a <MagnetMaze+0x11c>
     90e:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	09 f4       	brne	.+2      	; 0x916 <MagnetMaze+0x118>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inverted>
     91a:	80 93 4c 38 	sts	0x384C, r24	; 0x80384c <curHallState>

        curHallState = newHallState;
     91e:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     920:	09 f4       	brne	.+2      	; 0x924 <MagnetMaze+0x126>
     922:	66 c0       	rjmp	.+204    	; 0x9f0 <MagnetMaze+0x1f2>
     924:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
            if (gameNow == TEXT)
     928:	81 11       	cpse	r24, r1
     92a:	01 c0       	rjmp	.+2      	; 0x92e <MagnetMaze+0x130>
                initMaze();
     92c:	21 df       	rcall	.-446    	; 0x770 <initMaze>
     92e:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     930:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>
     934:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     938:	20 91 4c 38 	lds	r18, 0x384C	; 0x80384c <curHallState>
     93c:	88 23       	and	r24, r24
     93e:	11 f0       	breq	.+4      	; 0x944 <MagnetMaze+0x146>
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	28 27       	eor	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <mazePos>
     94a:	e8 2f       	mov	r30, r24
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	ee 57       	subi	r30, 0x7E	; 126
     950:	ff 43       	sbci	r31, 0x3F	; 63
     952:	40 81       	ld	r20, Z
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	24 17       	cp	r18, r20
     958:	35 07       	cpc	r19, r21
     95a:	91 f4       	brne	.+36     	; 0x980 <MagnetMaze+0x182>
     95c:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     960:	91 70       	andi	r25, 0x01	; 1
     962:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     966:	e0 91 43 c0 	lds	r30, 0xC043	; 0x80c043 <__bss_end+0x8531>
                iLED[EYE[R][L]] = 0;
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	ed 53       	subi	r30, 0x3D	; 61
     96e:	f5 4c       	sbci	r31, 0xC5	; 197
     970:	10 82       	st	Z, r1
     972:	e0 91 42 c0 	lds	r30, 0xC042	; 0x80c042 <__bss_end+0x8530>
                iLED[EYE[R][R]] = 0;
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	ed 53       	subi	r30, 0x3D	; 61
     97a:	f5 4c       	sbci	r31, 0xC5	; 197
     97c:	10 82       	st	Z, r1
     97e:	02 c0       	rjmp	.+4      	; 0x984 <MagnetMaze+0x186>
     980:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     984:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     986:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <mazePos>
     98a:	90 91 48 38 	lds	r25, 0x3848	; 0x803848 <mazeCnt>
            mazeCnt++;            
     98e:	9f 5f       	subi	r25, 0xFF	; 255
     990:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     992:	18 f4       	brcc	.+6      	; 0x99a <MagnetMaze+0x19c>
     994:	90 93 48 38 	sts	0x3848, r25	; 0x803848 <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     998:	2b c0       	rjmp	.+86     	; 0x9f0 <MagnetMaze+0x1f2>
     99a:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     99e:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     9a2:	91 30       	cpi	r25, 0x01	; 1
     9a4:	e1 f4       	brne	.+56     	; 0x9de <MagnetMaze+0x1e0>
     9a6:	90 91 49 38 	lds	r25, 0x3849	; 0x803849 <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     9aa:	e9 2f       	mov	r30, r25
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ea 5b       	subi	r30, 0xBA	; 186
     9b0:	ff 43       	sbci	r31, 0x3F	; 63
     9b2:	e6 81       	ldd	r30, Z+6	; 0x06
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     9ba:	ed 53       	subi	r30, 0x3D	; 61
     9bc:	f5 4c       	sbci	r31, 0xC5	; 197
     9be:	20 83       	st	Z, r18
     9c0:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     9c2:	90 93 49 38 	sts	0x3849, r25	; 0x803849 <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     9c6:	82 31       	cpi	r24, 0x12	; 18
     9c8:	99 f4       	brne	.+38     	; 0x9f0 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     9ca:	8d e7       	ldi	r24, 0x7D	; 125
     9cc:	49 d5       	rcall	.+2706   	; 0x1460 <UpdateState>
     9ce:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	ed 53       	subi	r30, 0x3D	; 61
     9d4:	f5 4c       	sbci	r31, 0xC5	; 197
     9d6:	10 82       	st	Z, r1
                        effect = 0x42;
     9d8:	82 e4       	ldi	r24, 0x42	; 66
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     9de:	c8 de       	rcall	.-624    	; 0x770 <initMaze>
     9e0:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
                    gameNow   = TEXT;
     9e4:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
     9ec:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <Setup>:
     9f8:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     9fa:	df 93       	push	r29
    cli();
     9fc:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     9fe:	88 ed       	ldi	r24, 0xD8	; 216
     a00:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     a02:	c1 e0       	ldi	r28, 0x01	; 1
     a04:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     a08:	8a e4       	ldi	r24, 0x4A	; 74
     a0a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     a0e:	8c e7       	ldi	r24, 0x7C	; 124
     a10:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     a14:	9f e3       	ldi	r25, 0x3F	; 63
     a16:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
    PORTC_PIN3CTRL |= 0x80;
     a1a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     a1e:	80 68       	ori	r24, 0x80	; 128
     a20:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     a24:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     a2e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     a32:	80 68       	ori	r24, 0x80	; 128
     a34:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     a38:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     a42:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     a46:	80 68       	ori	r24, 0x80	; 128
     a48:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     a4c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     a50:	80 68       	ori	r24, 0x80	; 128
     a52:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     a56:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     a5a:	d2 e0       	ldi	r29, 0x02	; 2
     a5c:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     a60:	2b e5       	ldi	r18, 0x5B	; 91
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a68:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
     a6e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     a72:	80 ec       	ldi	r24, 0xC0	; 192
     a74:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a7e:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a80:	1d ba       	out	0x1d, r1	; 29
    GPIOR3 = 0;    //
     a82:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a84:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a8e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a92:	87 e7       	ldi	r24, 0x77	; 119
     a94:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a98:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a9c:	8b e0       	ldi	r24, 0x0B	; 11
     a9e:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     aa2:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     aac:	85 e0       	ldi	r24, 0x05	; 5
     aae:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     ab2:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     abe:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     ac2:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     ac6:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     aca:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     ace:	8b e8       	ldi	r24, 0x8B	; 139
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     ad6:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     ada:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     ade:	47 dc       	rcall	.-1906   	; 0x36e <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ae0:	82 e1       	ldi	r24, 0x12	; 18
     ae2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     ae6:	80 e2       	ldi	r24, 0x20	; 32
     ae8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     aec:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     af0:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     af4:	84 e4       	ldi	r24, 0x44	; 68
     af6:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     b00:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     b04:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     b0e:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     b12:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     b16:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     b1a:	82 e5       	ldi	r24, 0x52	; 82
     b1c:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     b26:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     b2a:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     b2e:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     b32:	81 60       	ori	r24, 0x01	; 1
     b34:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     b38:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     b3c:	80 e4       	ldi	r24, 0x40	; 64
     b3e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     b48:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     b4c:	81 60       	ori	r24, 0x01	; 1
     b4e:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     b52:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b56:	80 fd       	sbrc	r24, 0
     b58:	fc cf       	rjmp	.-8      	; 0xb52 <Setup+0x15a>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     b5a:	80 e3       	ldi	r24, 0x30	; 48
     b5c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     b60:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     b64:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b68:	82 fd       	sbrc	r24, 2
     b6a:	fc cf       	rjmp	.-8      	; 0xb64 <Setup+0x16c>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	98 e7       	ldi	r25, 0x78	; 120
     b70:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b74:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b78:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b7c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b80:	82 96       	adiw	r24, 0x22	; 34
     b82:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     b86:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b8a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b8e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b92:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     b96:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	70 f4       	brcc	.+28     	; 0xbbc <Setup+0x1c4>
     ba0:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ba4:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     ba8:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     bac:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     bb0:	82 1b       	sub	r24, r18
     bb2:	93 0b       	sbc	r25, r19
     bb4:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     bb8:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     bbc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bc0:	83 fd       	sbrc	r24, 3
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <Setup+0x1c4>
    RTC_CMP            = tmp16bit;                         //Button timing
     bc4:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     bc8:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     bcc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     bd0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     be0:	88 e0       	ldi	r24, 0x08	; 8
     be2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     be6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bea:	80 fd       	sbrc	r24, 0
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <Setup+0x1ee>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     bee:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     bf8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     bfc:	81 60       	ori	r24, 0x01	; 1
     bfe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     c02:	10 92 75 3a 	sts	0x3A75, r1	; 0x803a75 <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     c06:	85 e7       	ldi	r24, 0x75	; 117
     c08:	9a e3       	ldi	r25, 0x3A	; 58
     c0a:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     c0e:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>

    sei();
     c12:	78 94       	sei
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	ef 93       	push	r30
     c2e:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     c36:	84 e4       	ldi	r24, 0x44	; 68
     c38:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     c3c:	ec b3       	in	r30, 0x1c	; 28
     c3e:	88 e0       	ldi	r24, 0x08	; 8
     c40:	e8 9f       	mul	r30, r24
     c42:	f0 01       	movw	r30, r0
     c44:	11 24       	eor	r1, r1
     c46:	ed 53       	subi	r30, 0x3D	; 61
     c48:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     c4a:	a8 e2       	ldi	r26, 0x28	; 40
     c4c:	ba e0       	ldi	r27, 0x0A	; 10
     c4e:	96 e0       	ldi	r25, 0x06	; 6
     c50:	81 91       	ld	r24, Z+
     c52:	8d 93       	st	X+, r24
     c54:	9a 95       	dec	r25
     c56:	e1 f7       	brne	.-8      	; 0xc50 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     c58:	8b e0       	ldi	r24, 0x0B	; 11
     c5a:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     c5e:	8c b3       	in	r24, 0x1c	; 28
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	58 f4       	brcc	.+22     	; 0xc7a <__vector_8+0x60>
        asm(
     c64:	8c b3       	in	r24, 0x1c	; 28
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <__vector_8+0x52>
     c6a:	99 0f       	add	r25, r25
     c6c:	8a 95       	dec	r24
     c6e:	ea f7       	brpl	.-6      	; 0xc6a <__vector_8+0x50>
     c70:	99 b9       	out	0x09, r25	; 9
     c72:	8c b3       	in	r24, 0x1c	; 28
     c74:	83 95       	inc	r24
     c76:	8c bb       	out	0x1c, r24	; 28
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c7a:	8c b3       	in	r24, 0x1c	; 28
     c7c:	83 30       	cpi	r24, 0x03	; 3
     c7e:	21 f4       	brne	.+8      	; 0xc88 <__vector_8+0x6e>
     c80:	2a 9a       	sbi	0x05, 2	; 5
     c82:	83 95       	inc	r24
     c84:	8c bb       	out	0x1c, r24	; 28
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <__vector_8+0x74>
     c88:	2e 9a       	sbi	0x05, 6	; 5
     c8a:	88 27       	eor	r24, r24
     c8c:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c8e:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     c92:	88 23       	and	r24, r24
     c94:	29 f0       	breq	.+10     	; 0xca0 <__vector_8+0x86>
     c96:	80 91 60 3a 	lds	r24, 0x3A60	; 0x803a60 <timeout_I2C>
     c9a:	81 50       	subi	r24, 0x01	; 1
     c9c:	80 93 60 3a 	sts	0x3A60, r24	; 0x803a60 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
    if (*serTxAddr) {
     cce:	e0 91 b9 3a 	lds	r30, 0x3AB9	; 0x803ab9 <serTxAddr>
     cd2:	f0 91 ba 3a 	lds	r31, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	91 f0       	breq	.+36     	; 0xd00 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     cdc:	80 81       	ld	r24, Z
     cde:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        serTxAddr++;
     ce2:	80 91 b9 3a 	lds	r24, 0x3AB9	; 0x803ab9 <serTxAddr>
     ce6:	90 91 ba 3a 	lds	r25, 0x3ABA	; 0x803aba <serTxAddr+0x1>
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
     cf0:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     cf4:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     d06:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     d3a:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d3e:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d42:	80 81       	ld	r24, Z
     d44:	81 11       	cpse	r24, r1
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <__vector_14+0x36>
     d48:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     d4c:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     d50:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d54:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     d58:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     d5c:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	e1 f0       	breq	.+56     	; 0xd9e <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     d66:	20 81       	ld	r18, Z
     d68:	40 91 b6 3a 	lds	r20, 0x3AB6	; 0x803ab6 <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	2f 57       	subi	r18, 0x7F	; 127
     d70:	31 09       	sbc	r19, r1
     d72:	42 9f       	mul	r20, r18
     d74:	c0 01       	movw	r24, r0
     d76:	43 9f       	mul	r20, r19
     d78:	90 0d       	add	r25, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	89 2f       	mov	r24, r25
     d7e:	99 0f       	add	r25, r25
     d80:	99 0b       	sbc	r25, r25
     d82:	80 58       	subi	r24, 0x80	; 128
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d8a:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d8e:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d98:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <__vector_14+0x82>
    } else {
        DAC0_DATA = 0x80;
     d9e:	80 e8       	ldi	r24, 0x80	; 128
     da0:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	8f 93       	push	r24
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
    if (serRxDone == 0){
     dd2:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
     dd6:	81 11       	cpse	r24, r1
     dd8:	44 c0       	rjmp	.+136    	; 0xe62 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     dda:	ed b3       	in	r30, 0x1d	; 29
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     de2:	eb 58       	subi	r30, 0x8B	; 139
     de4:	f5 4c       	sbci	r31, 0xC5	; 197
     de6:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     de8:	ed b3       	in	r30, 0x1d	; 29
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	eb 58       	subi	r30, 0x8B	; 139
     dee:	f5 4c       	sbci	r31, 0xC5	; 197
     df0:	80 81       	ld	r24, Z
     df2:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     df6:	ed b3       	in	r30, 0x1d	; 29
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	eb 58       	subi	r30, 0x8B	; 139
     dfc:	f5 4c       	sbci	r31, 0xC5	; 197
     dfe:	80 81       	ld	r24, Z
     e00:	8a 30       	cpi	r24, 0x0A	; 10
     e02:	39 f0       	breq	.+14     	; 0xe12 <__vector_27+0x50>
     e04:	ed b3       	in	r30, 0x1d	; 29
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	eb 58       	subi	r30, 0x8B	; 139
     e0a:	f5 4c       	sbci	r31, 0xC5	; 197
     e0c:	80 81       	ld	r24, Z
     e0e:	8d 30       	cpi	r24, 0x0D	; 13
     e10:	49 f4       	brne	.+18     	; 0xe24 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     e12:	ed b3       	in	r30, 0x1d	; 29
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	eb 58       	subi	r30, 0x8B	; 139
     e18:	f5 4c       	sbci	r31, 0xC5	; 197
     e1a:	10 82       	st	Z, r1
            serRxDone = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <serRxDone>
     e22:	1f c0       	rjmp	.+62     	; 0xe62 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     e24:	ed b3       	in	r30, 0x1d	; 29
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	eb 58       	subi	r30, 0x8B	; 139
     e2a:	f5 4c       	sbci	r31, 0xC5	; 197
     e2c:	80 81       	ld	r24, Z
     e2e:	88 30       	cpi	r24, 0x08	; 8
     e30:	39 f0       	breq	.+14     	; 0xe40 <__vector_27+0x7e>
     e32:	ed b3       	in	r30, 0x1d	; 29
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	eb 58       	subi	r30, 0x8B	; 139
     e38:	f5 4c       	sbci	r31, 0xC5	; 197
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 37       	cpi	r24, 0x7F	; 127
     e3e:	59 f4       	brne	.+22     	; 0xe56 <__vector_27+0x94>
     e40:	8d b3       	in	r24, 0x1d	; 29
     e42:	88 23       	and	r24, r24
     e44:	41 f0       	breq	.+16     	; 0xe56 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     e46:	ed b3       	in	r30, 0x1d	; 29
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	eb 58       	subi	r30, 0x8B	; 139
     e4c:	f5 4c       	sbci	r31, 0xC5	; 197
     e4e:	10 82       	st	Z, r1
            --RXCNT;
     e50:	8d b3       	in	r24, 0x1d	; 29
     e52:	81 50       	subi	r24, 0x01	; 1
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     e56:	8d b3       	in	r24, 0x1d	; 29
     e58:	80 34       	cpi	r24, 0x40	; 64
     e5a:	18 f4       	brcc	.+6      	; 0xe62 <__vector_27+0xa0>
     e5c:	8d b3       	in	r24, 0x1d	; 29
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	8f 91       	pop	r24
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	8f 93       	push	r24
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
    TCB0_CNT = 0;
     e88:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e8c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e96:	e5 e0       	ldi	r30, 0x05	; 5
     e98:	f8 e0       	ldi	r31, 0x08	; 8
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	80 83       	st	Z, r24
};
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	8f 91       	pop	r24
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     ebe:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     ec2:	81 11       	cpse	r24, r1
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__vector_20+0x3a>
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn=ADC0_RESL;
     ec6:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     eca:	8e 31       	cpi	r24, 0x1E	; 30
     ecc:	49 f4       	brne	.+18     	; 0xee0 <__vector_20+0x30>
     ece:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ed2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     ed6:	80 93 ed 3a 	sts	0x3AED, r24	; 0x803aed <adcTemp>
     eda:	90 93 ee 3a 	sts	0x3AEE, r25	; 0x803aee <adcTemp+0x1>
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <__vector_20+0x44>
     ee0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ee4:	80 93 c2 3a 	sts	0x3AC2, r24	; 0x803ac2 <auIn>
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <__vector_20+0x44>
    } else --adc0Chg;
     eea:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <adc0Chg>
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	0f 90       	pop	r0
     f04:	1f 90       	pop	r1
     f06:	18 95       	reti

00000f08 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     f08:	1f 92       	push	r1
     f0a:	0f 92       	push	r0
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	0f 92       	push	r0
     f10:	11 24       	eor	r1, r1
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     f16:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f1a:	81 11       	cpse	r24, r1
     f1c:	0a c0       	rjmp	.+20     	; 0xf32 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     f1e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f22:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f26:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcPhot>
     f2a:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     f32:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	79 f4       	brne	.+30     	; 0xf58 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     f3a:	88 e0       	ldi	r24, 0x08	; 8
     f3c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     f40:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f44:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f48:	80 93 bb 3a 	sts	0x3ABB, r24	; 0x803abb <adcHall>
     f4c:	90 93 bc 3a 	sts	0x3ABC, r25	; 0x803abc <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f56:	10 c0       	rjmp	.+32     	; 0xf78 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     f58:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f5c:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f60:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <adcBtns>
     f64:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <adcBtns+0x1>
        if (A1CNT == 15){
     f68:	8f b3       	in	r24, 0x1f	; 31
     f6a:	8f 30       	cpi	r24, 0x0F	; 15
     f6c:	29 f4       	brne	.+10     	; 0xf78 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     f6e:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     f72:	88 e0       	ldi	r24, 0x08	; 8
     f74:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f78:	8f b3       	in	r24, 0x1f	; 31
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	8f 70       	andi	r24, 0x0F	; 15
     f80:	99 27       	eor	r25, r25
     f82:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     faa:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     fae:	81 ff       	sbrs	r24, 1
     fb0:	39 c0       	rjmp	.+114    	; 0x1024 <__vector_6+0x8c>
        if (buttonMark<0xff) buttonMark++;   // For button timing purposes
     fb2:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     fb6:	8f 3f       	cpi	r24, 0xFF	; 255
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__vector_6+0x2c>
     fba:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <buttonMark>
        //tmp16bit = (RTC_CNT + BTN_TMR)%RTC_PER;
        tmp16bit = (RTC_CNT + BTN_TMR);
     fc4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     fc8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     fcc:	82 96       	adiw	r24, 0x22	; 34
     fce:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
     fd2:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
        if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     fd6:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     fda:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     fde:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     fe2:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     fe6:	28 17       	cp	r18, r24
     fe8:	39 07       	cpc	r19, r25
     fea:	70 f4       	brcc	.+28     	; 0x1008 <__vector_6+0x70>
     fec:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     ff0:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     ff4:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
     ff8:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
     ffc:	82 1b       	sub	r24, r18
     ffe:	93 0b       	sbc	r25, r19
    1000:	80 93 ef 3a 	sts	0x3AEF, r24	; 0x803aef <tmp16bit>
    1004:	90 93 f0 3a 	sts	0x3AF0, r25	; 0x803af0 <tmp16bit+0x1>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
    1008:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    100c:	83 fd       	sbrc	r24, 3
    100e:	fc cf       	rjmp	.-8      	; 0x1008 <__vector_6+0x70>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
    1010:	80 91 ef 3a 	lds	r24, 0x3AEF	; 0x803aef <tmp16bit>
    1014:	90 91 f0 3a 	lds	r25, 0x3AF0	; 0x803af0 <tmp16bit+0x1>
    1018:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    101c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <__vector_6+0x98>
    } else {
        minuteMark++;                       // For very slow timing purposes, overflows to 0
    1024:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <minuteMark>
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f 90       	pop	r0
    1042:	1f 90       	pop	r1
    1044:	18 95       	reti

00001046 <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
    1058:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    105c:	8f 91       	pop	r24
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1068:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    106c:	91 fd       	sbrc	r25, 1
    106e:	fc cf       	rjmp	.-8      	; 0x1068 <EERead>
    1070:	fb 01       	movw	r30, r22
    1072:	48 0f       	add	r20, r24

    while(size){
    1074:	84 17       	cp	r24, r20
    1076:	39 f0       	breq	.+14     	; 0x1086 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    1078:	a8 2f       	mov	r26, r24
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	bc 5e       	subi	r27, 0xEC	; 236
    107e:	9c 91       	ld	r25, X
    1080:	91 93       	st	Z+, r25
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	f7 cf       	rjmp	.-18     	; 0x1074 <EERead+0xc>
        --size;
    }
}
    1086:	08 95       	ret

00001088 <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1088:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    108a:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    108c:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    108e:	44 23       	and	r20, r20
    1090:	09 f1       	breq	.+66     	; 0x10d4 <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1092:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1096:	51 fd       	sbrc	r21, 1
    1098:	fc cf       	rjmp	.-8      	; 0x1092 <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    109a:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    109c:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    10a0:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    10a2:	58 2f       	mov	r21, r24
    10a4:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	db 01       	movw	r26, r22
    10ae:	11 97       	sbiw	r26, 0x01	; 1
    10b0:	ac 91       	ld	r26, X
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	fc 5e       	subi	r31, 0xEC	; 236
    10b6:	a0 83       	st	Z, r26
            --size;
    10b8:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    10bc:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    10be:	5f 31       	cpi	r21, 0x1F	; 31
    10c0:	81 f7       	brne	.-32     	; 0x10a2 <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    10c2:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    10c4:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    10c8:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10cc:	52 ff       	sbrs	r21, 2
    10ce:	df cf       	rjmp	.-66     	; 0x108e <EEWrite+0x6>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    10d2:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	08 95       	ret

000010d8 <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    10d8:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    10da:	9c 01       	movw	r18, r24
    10dc:	2e 1b       	sub	r18, r30
    10de:	3f 0b       	sbc	r19, r31
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	48 9f       	mul	r20, r24
    10e4:	a0 01       	movw	r20, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	4e 58       	subi	r20, 0x8E	; 142
    10ea:	5f 43       	sbci	r21, 0x3F	; 63
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    10ec:	66 23       	and	r22, r22
    10ee:	69 f0       	breq	.+26     	; 0x110a <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    10f0:	df 01       	movw	r26, r30
    10f2:	a2 0f       	add	r26, r18
    10f4:	b3 1f       	adc	r27, r19
    10f6:	a7 70       	andi	r26, 0x07	; 7
    10f8:	bb 27       	eor	r27, r27
    10fa:	a4 0f       	add	r26, r20
    10fc:	b5 1f       	adc	r27, r21
    10fe:	80 81       	ld	r24, Z
    1100:	9c 91       	ld	r25, X
    1102:	98 27       	eor	r25, r24
    1104:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    1106:	61 50       	subi	r22, 0x01	; 1
    1108:	f1 cf       	rjmp	.-30     	; 0x10ec <DecryptData+0x14>
    }
}
    110a:	08 95       	ret

0000110c <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <ExtEERead+0x16>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	d6 2e       	mov	r13, r22
    1128:	c4 2e       	mov	r12, r20
    112a:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    112c:	7c 01       	movw	r14, r24
    112e:	e8 94       	clt
    1130:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    1132:	f9 82       	std	Y+1, r15	; 0x01
    1134:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    1136:	06 2f       	mov	r16, r22
    1138:	42 e0       	ldi	r20, 0x02	; 2
    113a:	be 01       	movw	r22, r28
    113c:	6f 5f       	subi	r22, 0xFF	; 255
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	80 e5       	ldi	r24, 0x50	; 80
    1142:	13 da       	rcall	.-3034   	; 0x56a <I2C_read_bytes>
    1144:	18 2f       	mov	r17, r24
    if (error) return error;
    1146:	81 11       	cpse	r24, r1
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <ExtEERead+0x48>
    DecryptData(offset, length, type, data);
    114a:	95 01       	movw	r18, r10
    114c:	4c 2d       	mov	r20, r12
    114e:	6d 2d       	mov	r22, r13
    1150:	c7 01       	movw	r24, r14
    1152:	c2 df       	rcall	.-124    	; 0x10d8 <DecryptData>
    return 0;
}
    1154:	81 2f       	mov	r24, r17
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	08 95       	ret

00001170 <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    1170:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    1174:	22 23       	and	r18, r18
    1176:	59 f0       	breq	.+22     	; 0x118e <SerSend+0x1e>
        serTxAddr = addr;
    1178:	80 93 b9 3a 	sts	0x3AB9, r24	; 0x803ab9 <serTxAddr>
    117c:	90 93 ba 3a 	sts	0x3ABA, r25	; 0x803aba <serTxAddr+0x1>
        serTxDone = 0;
    1180:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	08 95       	ret
    } else return 1;    //Error: Still sending data
    118e:	81 e0       	ldi	r24, 0x01	; 1
};
    1190:	08 95       	ret

00001192 <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    1192:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    1194:	81 11       	cpse	r24, r1
    1196:	01 c0       	rjmp	.+2      	; 0x119a <SerSpeed+0x8>
    1198:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	82 1b       	sub	r24, r18
    11a0:	91 09       	sbc	r25, r1
    11a2:	98 2f       	mov	r25, r24
    11a4:	88 27       	eor	r24, r24
    11a6:	81 50       	subi	r24, 0x01	; 1
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    11ae:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    11b2:	08 95       	ret

000011b4 <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11b4:	82 e1       	ldi	r24, 0x12	; 18
    11b6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    11ba:	e0 e0       	ldi	r30, 0x00	; 0
    11bc:	f6 e0       	ldi	r31, 0x06	; 6
    11be:	80 81       	ld	r24, Z
    11c0:	8b 7f       	andi	r24, 0xFB	; 251
    11c2:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    11c4:	8e e1       	ldi	r24, 0x1E	; 30
    11c6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    11d0:	08 95       	ret

000011d2 <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    11d2:	82 e2       	ldi	r24, 0x22	; 34
    11d4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	f6 e0       	ldi	r31, 0x06	; 6
    11dc:	80 81       	ld	r24, Z
    11de:	84 60       	ori	r24, 0x04	; 4
    11e0:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <adc0Chg>
    11ee:	08 95       	ret

000011f0 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    11f0:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    11f4:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    11f8:	24 e0       	ldi	r18, 0x04	; 4
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	2a 95       	dec	r18
    1200:	e1 f7       	brne	.-8      	; 0x11fa <CheckButtons+0xa>
    1202:	99 27       	eor	r25, r25
    1204:	80 36       	cpi	r24, 0x60	; 96
    1206:	91 05       	cpc	r25, r1
    1208:	40 f4       	brcc	.+16     	; 0x121a <CheckButtons+0x2a>
    120a:	8f 34       	cpi	r24, 0x4F	; 79
    120c:	91 05       	cpc	r25, r1
    120e:	88 f4       	brcc	.+34     	; 0x1232 <CheckButtons+0x42>
    1210:	c0 97       	sbiw	r24, 0x30	; 48
    1212:	09 97       	sbiw	r24, 0x09	; 9
    1214:	90 f4       	brcc	.+36     	; 0x123a <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	11 c0       	rjmp	.+34     	; 0x123c <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    121a:	85 37       	cpi	r24, 0x75	; 117
    121c:	91 05       	cpc	r25, r1
    121e:	68 f0       	brcs	.+26     	; 0x123a <CheckButtons+0x4a>
    1220:	8e 38       	cpi	r24, 0x8E	; 142
    1222:	91 05       	cpc	r25, r1
    1224:	40 f0       	brcs	.+16     	; 0x1236 <CheckButtons+0x46>
    1226:	8e 59       	subi	r24, 0x9E	; 158
    1228:	91 09       	sbc	r25, r1
    122a:	81 97       	sbiw	r24, 0x21	; 33
    122c:	30 f4       	brcc	.+12     	; 0x123a <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    122e:	90 e0       	ldi	r25, 0x00	; 0
            break;
    1230:	05 c0       	rjmp	.+10     	; 0x123c <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    1232:	93 e0       	ldi	r25, 0x03	; 3
            break;
    1234:	03 c0       	rjmp	.+6      	; 0x123c <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    1236:	91 e0       	ldi	r25, 0x01	; 1
            break;
    1238:	01 c0       	rjmp	.+2      	; 0x123c <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    123a:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    123c:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <previousValue.3900>
    1240:	98 17       	cp	r25, r24
    1242:	19 f0       	breq	.+6      	; 0x124a <CheckButtons+0x5a>
            previousValue = button;
    1244:	90 93 24 38 	sts	0x3824, r25	; 0x803824 <previousValue.3900>
            return 0xFF;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    124a:	08 95       	ret

0000124c <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    124c:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <state.3910>
    1250:	90 91 23 38 	lds	r25, 0x3823	; 0x803823 <state.3910+0x1>
    1254:	9c 01       	movw	r18, r24
    1256:	32 2f       	mov	r19, r18
    1258:	22 27       	eor	r18, r18
    125a:	32 95       	swap	r19
    125c:	33 0f       	add	r19, r19
    125e:	30 7e       	andi	r19, 0xE0	; 224
    1260:	82 27       	eor	r24, r18
    1262:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    1264:	9c 01       	movw	r18, r24
    1266:	23 2f       	mov	r18, r19
    1268:	33 27       	eor	r19, r19
    126a:	26 95       	lsr	r18
    126c:	82 27       	eor	r24, r18
    126e:	93 27       	eor	r25, r19
    state ^= (state << 7);
    1270:	9c 01       	movw	r18, r24
    1272:	36 95       	lsr	r19
    1274:	32 2f       	mov	r19, r18
    1276:	22 27       	eor	r18, r18
    1278:	37 95       	ror	r19
    127a:	27 95       	ror	r18
    127c:	82 27       	eor	r24, r18
    127e:	93 27       	eor	r25, r19
    1280:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <state.3910>
    1284:	90 93 23 38 	sts	0x3823, r25	; 0x803823 <state.3910+0x1>
    return (state & 0xff);
}
    1288:	08 95       	ret

0000128a <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	7b 01       	movw	r14, r22
    129a:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    129c:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    12a0:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    12a4:	e8 2f       	mov	r30, r24
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	31 97       	sbiw	r30, 0x01	; 1
    12aa:	e7 70       	andi	r30, 0x07	; 7
    12ac:	ff 27       	eor	r31, r31
    12ae:	eb 5d       	subi	r30, 0xDB	; 219
    12b0:	f7 4c       	sbci	r31, 0xC7	; 199
    12b2:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    12b4:	cb df       	rcall	.-106    	; 0x124c <lfsr>
    12b6:	8d 21       	and	r24, r13
    12b8:	c8 0f       	add	r28, r24
    12ba:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    12bc:	c7 df       	rcall	.-114    	; 0x124c <lfsr>
    12be:	8d 21       	and	r24, r13
    12c0:	c8 1b       	sub	r28, r24
    12c2:	d1 09       	sbc	r29, r1
    12c4:	0c 17       	cp	r16, r28
    12c6:	1d 07       	cpc	r17, r29
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <floatSpeed+0x42>
    12ca:	e8 01       	movw	r28, r16
    12cc:	c7 01       	movw	r24, r14
    12ce:	ec 16       	cp	r14, r28
    12d0:	fd 06       	cpc	r15, r29
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <floatSpeed+0x4c>
    12d4:	ce 01       	movw	r24, r28
    12d6:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    12da:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    12de:	df 91       	pop	r29
}
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	08 95       	ret

000012ee <floatAround>:
    12ee:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	c8 2f       	mov	r28, r24
    12f8:	d4 2f       	mov	r29, r20
    12fa:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    12fc:	e6 2f       	mov	r30, r22
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	31 97       	sbiw	r30, 0x01	; 1
    1302:	e7 70       	andi	r30, 0x07	; 7
    1304:	ff 27       	eor	r31, r31
    1306:	eb 5d       	subi	r30, 0xDB	; 219
    1308:	f7 4c       	sbci	r31, 0xC7	; 199
    130a:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    130c:	9f df       	rcall	.-194    	; 0x124c <lfsr>
    130e:	81 23       	and	r24, r17
    1310:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1312:	9c df       	rcall	.-200    	; 0x124c <lfsr>
    1314:	81 23       	and	r24, r17
    1316:	c8 1b       	sub	r28, r24
    1318:	8c 2f       	mov	r24, r28
    131a:	00 23       	and	r16, r16
    if (max){
    131c:	41 f0       	breq	.+16     	; 0x132e <floatAround+0x40>
    131e:	9c 2f       	mov	r25, r28
    1320:	0c 17       	cp	r16, r28
    1322:	08 f4       	brcc	.+2      	; 0x1326 <floatAround+0x38>
    1324:	90 2f       	mov	r25, r16
    1326:	8d 2f       	mov	r24, r29
    1328:	d9 17       	cp	r29, r25
    132a:	08 f4       	brcc	.+2      	; 0x132e <floatAround+0x40>
    132c:	89 2f       	mov	r24, r25
    132e:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	8d 17       	cp	r24, r29
    1334:	10 f0       	brcs	.+4      	; 0x133a <floatAround+0x4c>
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	2d 2f       	mov	r18, r29
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	24 23       	and	r18, r20
    1340:	35 23       	and	r19, r21
    1342:	23 2b       	or	r18, r19
    1344:	09 f0       	breq	.+2      	; 0x1348 <floatAround+0x5a>
    1346:	8d 2f       	mov	r24, r29
    1348:	df 91       	pop	r29

    return sample;
}
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <SaveGameState>:
    1352:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    1354:	df 92       	push	r13
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	64 97       	sbiw	r28, 0x14	; 20
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    136a:	44 e1       	ldi	r20, 0x14	; 20
    136c:	be 01       	movw	r22, r28
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	79 de       	rcall	.-782    	; 0x1068 <EERead>
    1376:	81 e6       	ldi	r24, 0x61	; 97
    1378:	c8 2e       	mov	r12, r24
    137a:	8a e3       	ldi	r24, 0x3A	; 58
    137c:	d8 2e       	mov	r13, r24
    137e:	8e 01       	movw	r16, r28
    1380:	0f 5f       	subi	r16, 0xFF	; 255
    1382:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1384:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    1386:	f8 01       	movw	r30, r16
    1388:	81 91       	ld	r24, Z+
    138a:	8f 01       	movw	r16, r30
    138c:	f6 01       	movw	r30, r12
    138e:	90 81       	ld	r25, Z
    1390:	98 13       	cpse	r25, r24
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1394:	f3 94       	inc	r15
    1396:	ff ef       	ldi	r31, 0xFF	; 255
    1398:	cf 1a       	sub	r12, r31
    139a:	df 0a       	sbc	r13, r31
    139c:	80 e1       	ldi	r24, 0x10	; 16
    139e:	f8 12       	cpse	r15, r24
    13a0:	f2 cf       	rjmp	.-28     	; 0x1386 <SaveGameState+0x34>
    13a2:	08 c0       	rjmp	.+16     	; 0x13b4 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	b6 01       	movw	r22, r12
    13a8:	8f 2d       	mov	r24, r15
    13aa:	6e de       	rcall	.-804    	; 0x1088 <EEWrite>
    13ac:	88 23       	and	r24, r24
    13ae:	91 f3       	breq	.-28     	; 0x1394 <SaveGameState+0x42>
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	36 c0       	rjmp	.+108    	; 0x1420 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    13b4:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    13b8:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    13bc:	30 93 71 3a 	sts	0x3A71, r19	; 0x803a71 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    13c0:	20 93 72 3a 	sts	0x3A72, r18	; 0x803a72 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    13c4:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    13c8:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    13cc:	90 93 73 3a 	sts	0x3A73, r25	; 0x803a73 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    13d0:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    13d4:	89 89       	ldd	r24, Y+17	; 0x11
    13d6:	9a 89       	ldd	r25, Y+18	; 0x12
    13d8:	98 27       	eor	r25, r24
    13da:	89 27       	eor	r24, r25
    13dc:	98 27       	eor	r25, r24
    13de:	28 17       	cp	r18, r24
    13e0:	39 07       	cpc	r19, r25
    13e2:	69 f4       	brne	.+26     	; 0x13fe <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    13e4:	8b 89       	ldd	r24, Y+19	; 0x13
    13e6:	9c 89       	ldd	r25, Y+20	; 0x14
    13e8:	98 27       	eor	r25, r24
    13ea:	89 27       	eor	r24, r25
    13ec:	98 27       	eor	r25, r24
    13ee:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    13f2:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    13f6:	28 17       	cp	r18, r24
    13f8:	39 07       	cpc	r19, r25
    13fa:	49 f4       	brne	.+18     	; 0x140e <SaveGameState+0xbc>
    13fc:	10 c0       	rjmp	.+32     	; 0x141e <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    13fe:	42 e0       	ldi	r20, 0x02	; 2
    1400:	61 e7       	ldi	r22, 0x71	; 113
    1402:	7a e3       	ldi	r23, 0x3A	; 58
    1404:	80 e1       	ldi	r24, 0x10	; 16
    1406:	40 de       	rcall	.-896    	; 0x1088 <EEWrite>
    1408:	88 23       	and	r24, r24
    140a:	61 f3       	breq	.-40     	; 0x13e4 <SaveGameState+0x92>
    140c:	d1 cf       	rjmp	.-94     	; 0x13b0 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    140e:	42 e0       	ldi	r20, 0x02	; 2
    1410:	63 e7       	ldi	r22, 0x73	; 115
    1412:	7a e3       	ldi	r23, 0x3A	; 58
    1414:	82 e1       	ldi	r24, 0x12	; 18
    1416:	38 de       	rcall	.-912    	; 0x1088 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1418:	91 e0       	ldi	r25, 0x01	; 1
    141a:	81 11       	cpse	r24, r1
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <SaveGameState+0xce>
    141e:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1420:	89 2f       	mov	r24, r25
    1422:	64 96       	adiw	r28, 0x14	; 20
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	08 95       	ret

00001438 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    1438:	e8 2f       	mov	r30, r24
    143a:	ef 77       	andi	r30, 0x7F	; 127
    143c:	e6 95       	lsr	r30
    143e:	e6 95       	lsr	r30
    1440:	e6 95       	lsr	r30
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	ef 59       	subi	r30, 0x9F	; 159
    1446:	f5 4c       	sbci	r31, 0xC5	; 197
    1448:	20 81       	ld	r18, Z
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	87 70       	andi	r24, 0x07	; 7
    144e:	a9 01       	movw	r20, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <ReadStatusBit+0x1e>
    1452:	55 95       	asr	r21
    1454:	47 95       	ror	r20
    1456:	8a 95       	dec	r24
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <ReadStatusBit+0x1a>
    145a:	ca 01       	movw	r24, r20
}
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	08 95       	ret

00001460 <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    1460:	e8 2f       	mov	r30, r24
    1462:	ef 77       	andi	r30, 0x7F	; 127
    if (num) {
    1464:	e9 f0       	breq	.+58     	; 0x14a0 <UpdateState+0x40>
    1466:	e6 95       	lsr	r30
    1468:	e6 95       	lsr	r30
    146a:	e6 95       	lsr	r30
    146c:	28 2f       	mov	r18, r24
    146e:	27 70       	andi	r18, 0x07	; 7
        if (clearBit) {
            gameState[num>>3] &= ~(1<<(num&7));
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	ef 59       	subi	r30, 0x9F	; 159
    1474:	f5 4c       	sbci	r31, 0xC5	; 197
//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    if (num) {
        if (clearBit) {
    1476:	87 ff       	sbrs	r24, 7
    1478:	0a c0       	rjmp	.+20     	; 0x148e <UpdateState+0x2e>
            gameState[num>>3] &= ~(1<<(num&7));
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <UpdateState+0x22>
    1480:	88 0f       	add	r24, r24
    1482:	2a 95       	dec	r18
    1484:	ea f7       	brpl	.-6      	; 0x1480 <UpdateState+0x20>
    1486:	80 95       	com	r24
    1488:	90 81       	ld	r25, Z
    148a:	89 23       	and	r24, r25
    148c:	08 c0       	rjmp	.+16     	; 0x149e <UpdateState+0x3e>
        } else {
            gameState[num>>3] |= 1<<(num&7);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <UpdateState+0x36>
    1494:	88 0f       	add	r24, r24
    1496:	2a 95       	dec	r18
    1498:	ea f7       	brpl	.-6      	; 0x1494 <UpdateState+0x34>
    149a:	90 81       	ld	r25, Z
    149c:	89 2b       	or	r24, r25
    149e:	80 83       	st	Z, r24
    14a0:	08 95       	ret

000014a2 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    14a2:	cf 93       	push	r28
    14a4:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    14a6:	8f 77       	andi	r24, 0x7F	; 127
    14a8:	c7 df       	rcall	.-114    	; 0x1438 <ReadStatusBit>
    14aa:	2c 2f       	mov	r18, r28
    14ac:	22 1f       	adc	r18, r18
    14ae:	22 27       	eor	r18, r18
    14b0:	22 1f       	adc	r18, r18
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	81 11       	cpse	r24, r1
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <CheckState+0x18>
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    14ba:	82 2f       	mov	r24, r18
    14bc:	89 27       	eor	r24, r25
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    14c2:	e3 e0       	ldi	r30, 0x03	; 3
    14c4:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    14c8:	91 91       	ld	r25, Z+
    14ca:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    14cc:	ed 30       	cpi	r30, 0x0D	; 13
    14ce:	91 e1       	ldi	r25, 0x11	; 17
    14d0:	f9 07       	cpc	r31, r25
    14d2:	d1 f7       	brne	.-12     	; 0x14c8 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    14d4:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	98 0f       	add	r25, r24
    14da:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <whoami>
    return id;
}
    14de:	08 95       	ret

000014e0 <Reset>:

void Reset(){
    14e0:	e1 e6       	ldi	r30, 0x61	; 97
    14e2:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    14e4:	11 92       	st	Z+, r1
    //Reset game progress (all zeros) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    14e6:	8a e3       	ldi	r24, 0x3A	; 58
    14e8:	e5 37       	cpi	r30, 0x75	; 117
    14ea:	f8 07       	cpc	r31, r24
    14ec:	d9 f7       	brne	.-10     	; 0x14e4 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    14ee:	e9 df       	rcall	.-46     	; 0x14c2 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    14f0:	81 11       	cpse	r24, r1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <Reset+0x18>
    14f4:	8e e6       	ldi	r24, 0x6E	; 110
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <Reset+0x2e>
    else if (id == 1) UpdateState(111);
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	11 f4       	brne	.+4      	; 0x1500 <Reset+0x20>
    14fc:	8f e6       	ldi	r24, 0x6F	; 111
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <Reset+0x2e>
    else if (id == 2) UpdateState(112);
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	11 f4       	brne	.+4      	; 0x1508 <Reset+0x28>
    1504:	80 e7       	ldi	r24, 0x70	; 112
    1506:	03 c0       	rjmp	.+6      	; 0x150e <Reset+0x2e>
    else if (id == 3) UpdateState(113);
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	11 f4       	brne	.+4      	; 0x1510 <Reset+0x30>
    150c:	81 e7       	ldi	r24, 0x71	; 113
    150e:	a8 df       	rcall	.-176    	; 0x1460 <UpdateState>

    //Write bit 0, must always be 1!
    UpdateState(0);
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	a6 cf       	rjmp	.-180    	; 0x1460 <UpdateState>

00001514 <LoadGameState>:
    1514:	cf 93       	push	r28

    return sample;
}

//Load game status
void LoadGameState(){
    1516:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1518:	44 e1       	ldi	r20, 0x14	; 20
    151a:	61 e6       	ldi	r22, 0x61	; 97
    151c:	7a e3       	ldi	r23, 0x3A	; 58
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	a3 dd       	rcall	.-1210   	; 0x1068 <EERead>
    1522:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    1524:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    1526:	8c 2f       	mov	r24, r28
    1528:	87 df       	rcall	.-242    	; 0x1438 <ReadStatusBit>
    152a:	d8 0f       	add	r29, r24
    152c:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    152e:	c2 37       	cpi	r28, 0x72	; 114
    1530:	d1 f7       	brne	.-12     	; 0x1526 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    1532:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    1534:	11 f0       	breq	.+4      	; 0x153a <LoadGameState+0x26>
    1536:	d4 df       	rcall	.-88     	; 0x14e0 <Reset>
    } else getID();
    1538:	01 c0       	rjmp	.+2      	; 0x153c <LoadGameState+0x28>
    153a:	c3 df       	rcall	.-122    	; 0x14c2 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    153c:	80 91 71 3a 	lds	r24, 0x3A71	; 0x803a71 <gameState+0x10>
    1540:	90 91 72 3a 	lds	r25, 0x3A72	; 0x803a72 <gameState+0x11>
    1544:	98 27       	eor	r25, r24
    1546:	89 27       	eor	r24, r25
    1548:	98 27       	eor	r25, r24
    154a:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    154e:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1552:	80 91 73 3a 	lds	r24, 0x3A73	; 0x803a73 <gameState+0x12>
    1556:	90 91 74 3a 	lds	r25, 0x3A74	; 0x803a74 <gameState+0x13>
    155a:	98 27       	eor	r25, r24
    155c:	89 27       	eor	r24, r25
    155e:	98 27       	eor	r25, r24
    1560:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    1564:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	08 95       	ret

0000156e <HotSummer>:
    //Write bit 0, must always be 1!
    UpdateState(0);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    156e:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    1570:	86 e7       	ldi	r24, 0x76	; 118
    1572:	97 df       	rcall	.-210    	; 0x14a2 <CheckState>
    1574:	c8 2f       	mov	r28, r24
    1576:	88 23       	and	r24, r24
    1578:	81 f0       	breq	.+32     	; 0x159a <HotSummer+0x2c>
        iLED[SCARAB[R]] = 0;
    157a:	e0 91 36 c0 	lds	r30, 0xC036	; 0x80c036 <__bss_end+0x8524>
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	ed 53       	subi	r30, 0x3D	; 61
    1582:	f5 4c       	sbci	r31, 0xC5	; 197
    1584:	10 82       	st	Z, r1
        iLED[SCARAB[G]] = dimValue;
    1586:	e0 91 37 c0 	lds	r30, 0xC037	; 0x80c037 <__bss_end+0x8525>
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1590:	ed 53       	subi	r30, 0x3D	; 61
    1592:	f5 4c       	sbci	r31, 0xC5	; 197
    1594:	80 83       	st	Z, r24
        return 1;
    1596:	c1 e0       	ldi	r28, 0x01	; 1
    1598:	4c c0       	rjmp	.+152    	; 0x1632 <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    159a:	85 e7       	ldi	r24, 0x75	; 117
    159c:	82 df       	rcall	.-252    	; 0x14a2 <CheckState>
    159e:	88 23       	and	r24, r24
    15a0:	59 f1       	breq	.+86     	; 0x15f8 <HotSummer+0x8a>
        iLED[SCARAB[R]] = dimValue;
    15a2:	e0 91 36 c0 	lds	r30, 0xC036	; 0x80c036 <__bss_end+0x8524>
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    15ac:	ed 53       	subi	r30, 0x3D	; 61
    15ae:	f5 4c       	sbci	r31, 0xC5	; 197
    15b0:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    15b2:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <cooledDown.3965>
    15b6:	88 23       	and	r24, r24
    15b8:	79 f0       	breq	.+30     	; 0x15d8 <HotSummer+0x6a>
    15ba:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    15be:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    15c2:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    15c6:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    15ca:	80 96       	adiw	r24, 0x20	; 32
    15cc:	28 17       	cp	r18, r24
    15ce:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    15d0:	18 f0       	brcs	.+6      	; 0x15d8 <HotSummer+0x6a>
    15d2:	86 e7       	ldi	r24, 0x76	; 118
    15d4:	45 df       	rcall	.-374    	; 0x1460 <UpdateState>
            return 0;
    15d6:	2d c0       	rjmp	.+90     	; 0x1632 <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    15d8:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    15dc:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    15e0:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    15e4:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    15e8:	08 96       	adiw	r24, 0x08	; 8
    15ea:	82 17       	cp	r24, r18
    15ec:	93 07       	cpc	r25, r19
    15ee:	08 f1       	brcs	.+66     	; 0x1632 <HotSummer+0xc4>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	80 93 59 38 	sts	0x3859, r24	; 0x803859 <cooledDown.3965>
    15f6:	1d c0       	rjmp	.+58     	; 0x1632 <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    15f8:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    15fc:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    1600:	89 2b       	or	r24, r25
    1602:	41 f4       	brne	.+16     	; 0x1614 <HotSummer+0xa6>
    1604:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1608:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    160c:	80 93 c0 3a 	sts	0x3AC0, r24	; 0x803ac0 <calTemp>
    1610:	90 93 c1 3a 	sts	0x3AC1, r25	; 0x803ac1 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    1614:	80 91 c0 3a 	lds	r24, 0x3AC0	; 0x803ac0 <calTemp>
    1618:	90 91 c1 3a 	lds	r25, 0x3AC1	; 0x803ac1 <calTemp+0x1>
    161c:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1620:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1624:	80 96       	adiw	r24, 0x20	; 32
    1626:	28 17       	cp	r18, r24
    1628:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    162a:	18 f0       	brcs	.+6      	; 0x1632 <HotSummer+0xc4>
    162c:	85 e7       	ldi	r24, 0x75	; 117
    162e:	18 df       	rcall	.-464    	; 0x1460 <UpdateState>
        }
    }
    return 0;
    1630:	c0 e0       	ldi	r28, 0x00	; 0
}
    1632:	8c 2f       	mov	r24, r28
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    1638:	e8 e3       	ldi	r30, 0x38	; 56
    163a:	f0 ec       	ldi	r31, 0xC0	; 192
    for (int8_t i=0; i<5; i++) {
    163c:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    163e:	a5 81       	ldd	r26, Z+5	; 0x05
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    1642:	98 17       	cp	r25, r24
    1644:	34 f4       	brge	.+12     	; 0x1652 <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    1646:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    164a:	ad 53       	subi	r26, 0x3D	; 61
    164c:	b5 4c       	sbci	r27, 0xC5	; 197
    164e:	2c 93       	st	X, r18
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    1652:	ad 53       	subi	r26, 0x3D	; 61
    1654:	b5 4c       	sbci	r27, 0xC5	; 197
    1656:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    1658:	a0 81       	ld	r26, Z
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    165c:	96 17       	cp	r25, r22
    165e:	34 f4       	brge	.+12     	; 0x166c <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    1660:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    1664:	ad 53       	subi	r26, 0x3D	; 61
    1666:	b5 4c       	sbci	r27, 0xC5	; 197
    1668:	2c 93       	st	X, r18
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    166c:	ad 53       	subi	r26, 0x3D	; 61
    166e:	b5 4c       	sbci	r27, 0xC5	; 197
    1670:	1c 92       	st	X, r1
    1672:	9f 5f       	subi	r25, 0xFF	; 255
    1674:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    1676:	95 30       	cpi	r25, 0x05	; 5
    1678:	11 f7       	brne	.-60     	; 0x163e <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    167a:	08 95       	ret

0000167c <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    167c:	a2 e4       	ldi	r26, 0x42	; 66
    167e:	b0 ec       	ldi	r27, 0xC0	; 192
    1680:	ec 91       	ld	r30, X
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	ed 53       	subi	r30, 0x3D	; 61
    1686:	f5 4c       	sbci	r31, 0xC5	; 197
    1688:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    168a:	12 96       	adiw	r26, 0x02	; 2
    168c:	ec 91       	ld	r30, X
    168e:	12 97       	sbiw	r26, 0x02	; 2
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	ed 53       	subi	r30, 0x3D	; 61
    1694:	f5 4c       	sbci	r31, 0xC5	; 197
    1696:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	ec 91       	ld	r30, X
    169c:	11 97       	sbiw	r26, 0x01	; 1
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	ed 53       	subi	r30, 0x3D	; 61
    16a2:	f5 4c       	sbci	r31, 0xC5	; 197
    16a4:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    16a6:	13 96       	adiw	r26, 0x03	; 3
    16a8:	ec 91       	ld	r30, X
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	ed 53       	subi	r30, 0x3D	; 61
    16ae:	f5 4c       	sbci	r31, 0xC5	; 197
    16b0:	60 83       	st	Z, r22
    16b2:	08 95       	ret

000016b4 <ClearHackerLeds>:
    }
}

void ClearHackerLeds() {
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	e6 e4       	ldi	r30, 0x46	; 70
    16ba:	f0 ec       	ldi	r31, 0xC0	; 192
    16bc:	ef 01       	movw	r28, r30
    for (uint8_t i=0;i<6;i++) {
        iLED[HCKR[G][i]] = 0;
    16be:	a6 81       	ldd	r26, Z+6	; 0x06
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ad 53       	subi	r26, 0x3D	; 61
    16c4:	b5 4c       	sbci	r27, 0xC5	; 197
    16c6:	1c 92       	st	X, r1
    16c8:	31 96       	adiw	r30, 0x01	; 1
        iLED[HCKR[R][i]] = 0;
    16ca:	a8 81       	ld	r26, Y
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ad 53       	subi	r26, 0x3D	; 61
    16d0:	b5 4c       	sbci	r27, 0xC5	; 197
    16d2:	1c 92       	st	X, r1
        iLED[EYE[G][i]] = g;
    }
}

void ClearHackerLeds() {
    for (uint8_t i=0;i<6;i++) {
    16d4:	80 ec       	ldi	r24, 0xC0	; 192
    16d6:	ec 34       	cpi	r30, 0x4C	; 76
    16d8:	f8 07       	cpc	r31, r24
    16da:	81 f7       	brne	.-32     	; 0x16bc <ClearHackerLeds+0x8>
        iLED[HCKR[G][i]] = 0;
        iLED[HCKR[R][i]] = 0;
    }
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <GenerateBlinks>:


void GenerateBlinks(){
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    16ee:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    16f2:	88 23       	and	r24, r24
    16f4:	29 f0       	breq	.+10     	; 0x1700 <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    16f6:	80 e4       	ldi	r24, 0x40	; 64
    16f8:	d4 de       	rcall	.-600    	; 0x14a2 <CheckState>
    16fa:	81 11       	cpse	r24, r1
    16fc:	24 c0       	rjmp	.+72     	; 0x1746 <GenerateBlinks+0x64>
    16fe:	50 c0       	rjmp	.+160    	; 0x17a0 <GenerateBlinks+0xbe>
    1700:	c6 e4       	ldi	r28, 0x46	; 70
    1702:	d0 ec       	ldi	r29, 0xC0	; 192
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1704:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1706:	81 2f       	mov	r24, r17
    1708:	cc de       	rcall	.-616    	; 0x14a2 <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    170a:	ee 81       	ldd	r30, Y+6	; 0x06
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    170e:	88 23       	and	r24, r24
    1710:	59 f0       	breq	.+22     	; 0x1728 <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    1712:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1716:	ed 53       	subi	r30, 0x3D	; 61
    1718:	f5 4c       	sbci	r31, 0xC5	; 197
    171a:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    171c:	e8 81       	ld	r30, Y
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	ed 53       	subi	r30, 0x3D	; 61
    1722:	f5 4c       	sbci	r31, 0xC5	; 197
    1724:	10 82       	st	Z, r1
    1726:	0a c0       	rjmp	.+20     	; 0x173c <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    1728:	ed 53       	subi	r30, 0x3D	; 61
    172a:	f5 4c       	sbci	r31, 0xC5	; 197
    172c:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    172e:	e8 81       	ld	r30, Y
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1736:	ed 53       	subi	r30, 0x3D	; 61
    1738:	f5 4c       	sbci	r31, 0xC5	; 197
    173a:	80 83       	st	Z, r24
    173c:	1f 5f       	subi	r17, 0xFF	; 255
    173e:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    1740:	10 38       	cpi	r17, 0x80	; 128
    1742:	09 f7       	brne	.-62     	; 0x1706 <GenerateBlinks+0x24>
    1744:	d8 cf       	rjmp	.-80     	; 0x16f6 <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1746:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <HeartCount>
    174a:	98 2f       	mov	r25, r24
    174c:	9d 7f       	andi	r25, 0xFD	; 253
    174e:	e0 91 35 c0 	lds	r30, 0xC035	; 0x80c035 <__bss_end+0x8523>
            iLED[BADGER] = dimValue>>1 ;
    1752:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    1754:	91 30       	cpi	r25, 0x01	; 1
    1756:	11 f0       	breq	.+4      	; 0x175c <GenerateBlinks+0x7a>
    1758:	85 30       	cpi	r24, 0x05	; 5
    175a:	21 f4       	brne	.+8      	; 0x1764 <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    175c:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1760:	96 95       	lsr	r25
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	11 f0       	breq	.+4      	; 0x176c <GenerateBlinks+0x8a>
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	31 f4       	brne	.+12     	; 0x1778 <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    176c:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1770:	ed 53       	subi	r30, 0x3D	; 61
    1772:	f5 4c       	sbci	r31, 0xC5	; 197
    1774:	90 83       	st	Z, r25
    1776:	0c c0       	rjmp	.+24     	; 0x1790 <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    1778:	88 23       	and	r24, r24
    177a:	11 f0       	breq	.+4      	; 0x1780 <GenerateBlinks+0x9e>
    177c:	86 30       	cpi	r24, 0x06	; 6
    177e:	29 f4       	brne	.+10     	; 0x178a <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    1780:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1784:	96 95       	lsr	r25
    1786:	96 95       	lsr	r25
    1788:	f3 cf       	rjmp	.-26     	; 0x1770 <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    178a:	ed 53       	subi	r30, 0x3D	; 61
    178c:	f5 4c       	sbci	r31, 0xC5	; 197
    178e:	10 82       	st	Z, r1
        if (HeartCount<32)
    1790:	80 32       	cpi	r24, 0x20	; 32
    1792:	20 f4       	brcc	.+8      	; 0x179c <GenerateBlinks+0xba>
            HeartCount++;
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	80 93 5b 38 	sts	0x385B, r24	; 0x80385b <HeartCount>
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    179c:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    17a0:	90 91 5a 38 	lds	r25, 0x385A	; 0x80385a <LedCount>
    17a4:	9f 5f       	subi	r25, 0xFF	; 255
    17a6:	90 93 5a 38 	sts	0x385A, r25	; 0x80385a <LedCount>

    switch (effect&0x1f) {
    17aa:	e0 91 3a 38 	lds	r30, 0x383A	; 0x80383a <effect>
    17ae:	f0 91 3b 38 	lds	r31, 0x383B	; 0x80383b <effect+0x1>
    17b2:	ef 71       	andi	r30, 0x1F	; 31
    17b4:	ff 27       	eor	r31, r31
    17b6:	e9 30       	cpi	r30, 0x09	; 9
    17b8:	f1 05       	cpc	r31, r1
    17ba:	08 f0       	brcs	.+2      	; 0x17be <GenerateBlinks+0xdc>
    17bc:	e8 c0       	rjmp	.+464    	; 0x198e <GenerateBlinks+0x2ac>
    17be:	e2 5c       	subi	r30, 0xC2	; 194
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	36 df       	rcall	.-404    	; 0x1638 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17cc:	e0 91 42 c0 	lds	r30, 0xC042	; 0x80c042 <__bss_end+0x8530>
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	ed 53       	subi	r30, 0x3D	; 61
    17d4:	f5 4c       	sbci	r31, 0xC5	; 197
    17d6:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    17d8:	e0 91 44 c0 	lds	r30, 0xC044	; 0x80c044 <__bss_end+0x8532>
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	ed 53       	subi	r30, 0x3D	; 61
    17e0:	f5 4c       	sbci	r31, 0xC5	; 197
    17e2:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    17e4:	e0 91 36 c0 	lds	r30, 0xC036	; 0x80c036 <__bss_end+0x8524>
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	ed 53       	subi	r30, 0x3D	; 61
    17ec:	f5 4c       	sbci	r31, 0xC5	; 197
    17ee:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    17f0:	e0 91 43 c0 	lds	r30, 0xC043	; 0x80c043 <__bss_end+0x8531>
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ed 53       	subi	r30, 0x3D	; 61
    17f8:	f5 4c       	sbci	r31, 0xC5	; 197
    17fa:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    17fc:	e0 91 45 c0 	lds	r30, 0xC045	; 0x80c045 <__bss_end+0x8533>
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	ed 53       	subi	r30, 0x3D	; 61
    1804:	f5 4c       	sbci	r31, 0xC5	; 197
    1806:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1808:	e0 91 37 c0 	lds	r30, 0xC037	; 0x80c037 <__bss_end+0x8525>
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	ed 53       	subi	r30, 0x3D	; 61
    1810:	f5 4c       	sbci	r31, 0xC5	; 197
    1812:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1814:	e0 91 34 c0 	lds	r30, 0xC034	; 0x80c034 <__bss_end+0x8522>
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	ed 53       	subi	r30, 0x3D	; 61
    181c:	f5 4c       	sbci	r31, 0xC5	; 197
    181e:	10 82       	st	Z, r1
            break;
    1820:	b6 c0       	rjmp	.+364    	; 0x198e <GenerateBlinks+0x2ac>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    1822:	89 2f       	mov	r24, r25
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	90 fd       	sbrc	r25, 0
    1828:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	0d c0       	rjmp	.+26     	; 0x184a <GenerateBlinks+0x168>
    1830:	69 2f       	mov	r22, r25
    1832:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1834:	93 ff       	sbrs	r25, 3
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GenerateBlinks+0x15a>
    1838:	60 95       	com	r22
    183a:	70 95       	com	r23
    183c:	85 e0       	ldi	r24, 0x05	; 5
    183e:	66 0f       	add	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	8a 95       	dec	r24
    1844:	e1 f7       	brne	.-8      	; 0x183e <GenerateBlinks+0x15c>
    1846:	61 5e       	subi	r22, 0xE1	; 225
    1848:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    1854:	ef 90       	pop	r14
    1856:	12 cf       	rjmp	.-476    	; 0x167c <SetBothEyes>
            break;

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    1858:	89 2f       	mov	r24, r25
    185a:	83 70       	andi	r24, 0x03	; 3
    185c:	09 f0       	breq	.+2      	; 0x1860 <GenerateBlinks+0x17e>
    185e:	97 c0       	rjmp	.+302    	; 0x198e <GenerateBlinks+0x2ac>
                if (LedCount & 4)
    1860:	92 ff       	sbrs	r25, 2
    1862:	03 c0       	rjmp	.+6      	; 0x186a <GenerateBlinks+0x188>
                    WingBar(5,5);
    1864:	65 e0       	ldi	r22, 0x05	; 5
    1866:	85 e0       	ldi	r24, 0x05	; 5
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GenerateBlinks+0x18c>
                else
                    WingBar(0,0);
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	80 e0       	ldi	r24, 0x00	; 0
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
        case 5:
            if ((LedCount & 3) == 0) {
                if (LedCount & 4)
                    WingBar(5,5);
                else
                    WingBar(0,0);
    1878:	ef 90       	pop	r14
    187a:	de ce       	rjmp	.-580    	; 0x1638 <WingBar>
            }
            break;

        //'circle the wing leds'
        case 6:
            if (LedCount > 4) LedCount = 0;
    187c:	95 30       	cpi	r25, 0x05	; 5
    187e:	10 f0       	brcs	.+4      	; 0x1884 <GenerateBlinks+0x1a2>
    1880:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <LedCount>
            iLED[WING[L][LedCount]] = 0;
    1884:	e0 91 5a 38 	lds	r30, 0x385A	; 0x80385a <LedCount>
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	e8 5c       	subi	r30, 0xC8	; 200
    188c:	ff 43       	sbci	r31, 0x3F	; 63
    188e:	a5 81       	ldd	r26, Z+5	; 0x05
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ad 53       	subi	r26, 0x3D	; 61
    1894:	b5 4c       	sbci	r27, 0xC5	; 197
    1896:	1c 92       	st	X, r1
            iLED[WING[L][(LedCount+1)]] = dimValue;
    1898:	e6 81       	ldd	r30, Z+6	; 0x06
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18a0:	ed 53       	subi	r30, 0x3D	; 61
    18a2:	f5 4c       	sbci	r31, 0xC5	; 197
    18a4:	80 83       	st	Z, r24
    18a6:	88 e3       	ldi	r24, 0x38	; 56
    18a8:	90 ec       	ldi	r25, 0xC0	; 192
    18aa:	c2 e4       	ldi	r28, 0x42	; 66
    18ac:	d0 ec       	ldi	r29, 0xC0	; 192
    18ae:	2d e3       	ldi	r18, 0x3D	; 61
    18b0:	30 ec       	ldi	r19, 0xC0	; 192

            for (uint8_t x=0; x<5; ++x){
                iLED[WING[R][x]] = iLED[WING[L][4-x]];
    18b2:	dc 01       	movw	r26, r24
    18b4:	ed 91       	ld	r30, X+
    18b6:	cd 01       	movw	r24, r26
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	aa 91       	ld	r26, -Y
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	ad 53       	subi	r26, 0x3D	; 61
    18c0:	b5 4c       	sbci	r27, 0xC5	; 197
    18c2:	4c 91       	ld	r20, X
    18c4:	ed 53       	subi	r30, 0x3D	; 61
    18c6:	f5 4c       	sbci	r31, 0xC5	; 197
    18c8:	40 83       	st	Z, r20
        case 6:
            if (LedCount > 4) LedCount = 0;
            iLED[WING[L][LedCount]] = 0;
            iLED[WING[L][(LedCount+1)]] = dimValue;

            for (uint8_t x=0; x<5; ++x){
    18ca:	2c 17       	cp	r18, r28
    18cc:	3d 07       	cpc	r19, r29
    18ce:	89 f7       	brne	.-30     	; 0x18b2 <GenerateBlinks+0x1d0>
    18d0:	5e c0       	rjmp	.+188    	; 0x198e <GenerateBlinks+0x2ac>
    18d2:	c8 e3       	ldi	r28, 0x38	; 56
    18d4:	d0 ec       	ldi	r29, 0xC0	; 192
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    18d6:	7e 01       	movw	r14, r28
    18d8:	0d 81       	ldd	r16, Y+5	; 0x05
    18da:	10 e0       	ldi	r17, 0x00	; 0
    18dc:	b7 dc       	rcall	.-1682   	; 0x124c <lfsr>
    18de:	87 ff       	sbrs	r24, 7
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <GenerateBlinks+0x206>
    18e2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <GenerateBlinks+0x208>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	f8 01       	movw	r30, r16
    18ec:	ed 53       	subi	r30, 0x3D	; 61
    18ee:	f5 4c       	sbci	r31, 0xC5	; 197
    18f0:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    18f2:	21 96       	adiw	r28, 0x01	; 1
    18f4:	f7 01       	movw	r30, r14
    18f6:	00 81       	ld	r16, Z
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	a8 dc       	rcall	.-1712   	; 0x124c <lfsr>
    18fc:	87 ff       	sbrs	r24, 7
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <GenerateBlinks+0x224>
    1900:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <GenerateBlinks+0x226>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	f8 01       	movw	r30, r16
    190a:	ed 53       	subi	r30, 0x3D	; 61
    190c:	f5 4c       	sbci	r31, 0xC5	; 197
    190e:	80 83       	st	Z, r24
            }
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    1910:	f0 ec       	ldi	r31, 0xC0	; 192
    1912:	cd 33       	cpi	r28, 0x3D	; 61
    1914:	df 07       	cpc	r29, r31
    1916:	f9 f6       	brne	.-66     	; 0x18d6 <GenerateBlinks+0x1f4>
    1918:	3a c0       	rjmp	.+116    	; 0x198e <GenerateBlinks+0x2ac>
            }
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
    191a:	90 fd       	sbrc	r25, 0
    191c:	38 c0       	rjmp	.+112    	; 0x198e <GenerateBlinks+0x2ac>
    191e:	e8 e3       	ldi	r30, 0x38	; 56
    1920:	f0 ec       	ldi	r31, 0xC0	; 192
    1922:	8c e3       	ldi	r24, 0x3C	; 60
    1924:	90 ec       	ldi	r25, 0xC0	; 192
    1926:	9f 01       	movw	r18, r30
                for (uint8_t x=0; x<4; ++x){
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
    1928:	a5 81       	ldd	r26, Z+5	; 0x05
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	c6 81       	ldd	r28, Z+6	; 0x06
    192e:	d0 e0       	ldi	r29, 0x00	; 0
    1930:	cd 53       	subi	r28, 0x3D	; 61
    1932:	d5 4c       	sbci	r29, 0xC5	; 197
    1934:	48 81       	ld	r20, Y
    1936:	ad 53       	subi	r26, 0x3D	; 61
    1938:	b5 4c       	sbci	r27, 0xC5	; 197
    193a:	4c 93       	st	X, r20
    193c:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
    193e:	e9 01       	movw	r28, r18
    1940:	a8 81       	ld	r26, Y
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	c0 81       	ld	r28, Z
    1946:	d0 e0       	ldi	r29, 0x00	; 0
    1948:	cd 53       	subi	r28, 0x3D	; 61
    194a:	d5 4c       	sbci	r29, 0xC5	; 197
    194c:	28 81       	ld	r18, Y
    194e:	ad 53       	subi	r26, 0x3D	; 61
    1950:	b5 4c       	sbci	r27, 0xC5	; 197
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
                for (uint8_t x=0; x<4; ++x){
    1952:	2c 93       	st	X, r18
    1954:	8e 17       	cp	r24, r30
    1956:	9f 07       	cpc	r25, r31
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
                }
                iLED[WING[L][4]] = (lfsr() > 224)?dimValue:0;
    1958:	31 f7       	brne	.-52     	; 0x1926 <GenerateBlinks+0x244>
    195a:	c0 91 41 c0 	lds	r28, 0xC041	; 0x80c041 <__bss_end+0x852f>
    195e:	d0 e0       	ldi	r29, 0x00	; 0
    1960:	75 dc       	rcall	.-1814   	; 0x124c <lfsr>
    1962:	81 3e       	cpi	r24, 0xE1	; 225
    1964:	18 f0       	brcs	.+6      	; 0x196c <GenerateBlinks+0x28a>
    1966:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    196a:	01 c0       	rjmp	.+2      	; 0x196e <GenerateBlinks+0x28c>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	cd 53       	subi	r28, 0x3D	; 61
    1970:	d5 4c       	sbci	r29, 0xC5	; 197
                iLED[WING[R][4]] = (lfsr() > 224)?dimValue:0;
    1972:	88 83       	st	Y, r24
    1974:	c0 91 3c c0 	lds	r28, 0xC03C	; 0x80c03c <__bss_end+0x852a>
    1978:	d0 e0       	ldi	r29, 0x00	; 0
    197a:	68 dc       	rcall	.-1840   	; 0x124c <lfsr>
    197c:	81 3e       	cpi	r24, 0xE1	; 225
    197e:	18 f0       	brcs	.+6      	; 0x1986 <GenerateBlinks+0x2a4>
    1980:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <GenerateBlinks+0x2a6>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	cd 53       	subi	r28, 0x3D	; 61
    198a:	d5 4c       	sbci	r29, 0xC5	; 197
    198c:	88 83       	st	Y, r24
        // No LED action, game will do it's own LED magic
        case 31:
        default:
            break;
    }
}
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	08 95       	ret

0000199c <GenerateAudio>:


uint8_t GenerateAudio(){
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28

    if (auIn < HPLVL) {
    19a2:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    19a6:	89 31       	cpi	r24, 0x19	; 25
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <GenerateAudio+0x10>
    19aa:	27 c1       	rjmp	.+590    	; 0x1bfa <GenerateAudio+0x25e>

        detHdPh = 1;
    19ac:	c1 e0       	ldi	r28, 0x01	; 1
    19ae:	c0 93 bf 3a 	sts	0x3ABF, r28	; 0x803abf <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    19b2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19b6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19ba:	88 27       	eor	r24, r24
    19bc:	89 2b       	or	r24, r25
    19be:	09 f0       	breq	.+2      	; 0x19c2 <GenerateAudio+0x26>
    19c0:	bf c0       	rjmp	.+382    	; 0x1b40 <GenerateAudio+0x1a4>

            //Silence
            if ((effect&0xE0)==0){
    19c2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19c6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19ca:	80 7e       	andi	r24, 0xE0	; 224
    19cc:	99 27       	eor	r25, r25
    19ce:	89 2b       	or	r24, r25
    19d0:	31 f4       	brne	.+12     	; 0x19de <GenerateAudio+0x42>
                auRepAddr = &zero;
    19d2:	89 e3       	ldi	r24, 0x39	; 57
    19d4:	98 e3       	ldi	r25, 0x38	; 56
    19d6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19da:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    19de:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    19e2:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    19e6:	80 7e       	andi	r24, 0xE0	; 224
    19e8:	99 27       	eor	r25, r25
    19ea:	80 97       	sbiw	r24, 0x20	; 32
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <GenerateAudio+0x54>
    19ee:	59 c0       	rjmp	.+178    	; 0x1aa2 <GenerateAudio+0x106>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	52 e2       	ldi	r21, 0x22	; 34
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e2       	ldi	r23, 0x20	; 32
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	47 dc       	rcall	.-1906   	; 0x128a <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	65 e0       	ldi	r22, 0x05	; 5
    1a02:	80 e8       	ldi	r24, 0x80	; 128
    1a04:	74 dc       	rcall	.-1816   	; 0x12ee <floatAround>
    1a06:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <auBuffer.4022+0x2>

                if (buttonMark) {
    1a0a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1a0e:	88 23       	and	r24, r24
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <GenerateAudio+0x78>
    1a12:	47 c0       	rjmp	.+142    	; 0x1aa2 <GenerateAudio+0x106>
                    if (start == 0) {
    1a14:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <start.4025>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	15 c0       	rjmp	.+42     	; 0x1a46 <GenerateAudio+0xaa>
                        duration = 4;
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	80 93 57 38 	sts	0x3857, r24	; 0x803857 <duration.4024>
                        loudness = 0xff;
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4023>
                        TCB1_CCMP = 0x2000;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e2       	ldi	r25, 0x20	; 32
    1a2c:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a30:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1a34:	81 e1       	ldi	r24, 0x11	; 17
    1a36:	98 e3       	ldi	r25, 0x38	; 56
    1a38:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a3c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <start.4025>
                    }

                    if (loudness) {
    1a46:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4023>
    1a4a:	88 23       	and	r24, r24
    1a4c:	69 f0       	breq	.+26     	; 0x1a68 <GenerateAudio+0xcc>
                        auVolume = loudness;
    1a4e:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1a52:	90 91 57 38 	lds	r25, 0x3857	; 0x803857 <duration.4024>
    1a56:	99 23       	and	r25, r25
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <GenerateAudio+0xc6>
    1a5a:	91 50       	subi	r25, 0x01	; 1
    1a5c:	90 93 57 38 	sts	0x3857, r25	; 0x803857 <duration.4024>
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <GenerateAudio+0xcc>
    1a62:	86 95       	lsr	r24
    1a64:	80 93 56 38 	sts	0x3856, r24	; 0x803856 <loudness.4023>
                    } 

                    if (loudness == 0) {
    1a68:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <loudness.4023>
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	19 c0       	rjmp	.+50     	; 0x1aa2 <GenerateAudio+0x106>
                        effect &= 0x1f;
    1a70:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1a74:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1a78:	8f 71       	andi	r24, 0x1F	; 31
    1a7a:	99 27       	eor	r25, r25
    1a7c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1a80:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1a84:	89 e3       	ldi	r24, 0x39	; 57
    1a86:	98 e3       	ldi	r25, 0x38	; 56
    1a88:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a8c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1a90:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1a94:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1a98:	8f ef       	ldi	r24, 0xFF	; 255
    1a9a:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1a9e:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <start.4025>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1aa2:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1aa6:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1aaa:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1aae:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1ab2:	80 7e       	andi	r24, 0xE0	; 224
    1ab4:	99 27       	eor	r25, r25
    1ab6:	80 36       	cpi	r24, 0x60	; 96
    1ab8:	91 05       	cpc	r25, r1
    1aba:	a9 f5       	brne	.+106    	; 0x1b26 <GenerateAudio+0x18a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1abc:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <auBuffer.4026+0x6>
                auRepAddr = &auBuffer[0];
    1ac0:	8f e4       	ldi	r24, 0x4F	; 79
    1ac2:	98 e3       	ldi	r25, 0x38	; 56
    1ac4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ac8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1acc:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1ace:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1ad0:	c3 30       	cpi	r28, 0x03	; 3
    1ad2:	39 f0       	breq	.+14     	; 0x1ae2 <GenerateAudio+0x146>
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	65 e0       	ldi	r22, 0x05	; 5
    1ada:	80 e8       	ldi	r24, 0x80	; 128
    1adc:	08 dc       	rcall	.-2032   	; 0x12ee <floatAround>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1ae2:	cf 5f       	subi	r28, 0xFF	; 255
    1ae4:	0f 5f       	subi	r16, 0xFF	; 255
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	c6 30       	cpi	r28, 0x06	; 6
    1aea:	91 f7       	brne	.-28     	; 0x1ad0 <GenerateAudio+0x134>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1aec:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1af0:	88 23       	and	r24, r24
    1af2:	c9 f0       	breq	.+50     	; 0x1b26 <GenerateAudio+0x18a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	54 e0       	ldi	r21, 0x04	; 4
    1af8:	60 e8       	ldi	r22, 0x80	; 128
    1afa:	72 e0       	ldi	r23, 0x02	; 2
    1afc:	85 e0       	ldi	r24, 0x05	; 5
    1afe:	c5 db       	rcall	.-2166   	; 0x128a <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b00:	80 91 b6 3a 	lds	r24, 0x3AB6	; 0x803ab6 <auVolume>
    1b04:	20 ea       	ldi	r18, 0xA0	; 160
    1b06:	40 e1       	ldi	r20, 0x10	; 16
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	f1 db       	rcall	.-2078   	; 0x12ee <floatAround>
    1b0c:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b10:	20 e9       	ldi	r18, 0x90	; 144
    1b12:	40 e7       	ldi	r20, 0x70	; 112
    1b14:	62 e0       	ldi	r22, 0x02	; 2
    1b16:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <auBuffer.4026>
    1b1a:	e9 db       	rcall	.-2094   	; 0x12ee <floatAround>
    1b1c:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <auBuffer.4026>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b20:	80 95       	com	r24
    1b22:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <auBuffer.4026+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1b26:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b2a:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    1b2e:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b32:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1b36:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b3a:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b3e:	5f c0       	rjmp	.+190    	; 0x1bfe <GenerateAudio+0x262>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1b40:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b44:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b48:	88 27       	eor	r24, r24
    1b4a:	81 15       	cp	r24, r1
    1b4c:	91 40       	sbci	r25, 0x01	; 1
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <GenerateAudio+0x1b6>
    1b50:	56 c0       	rjmp	.+172    	; 0x1bfe <GenerateAudio+0x262>
            if ((effect&0xE0) <= 0x90) {
    1b52:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1b56:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1b5a:	80 7e       	andi	r24, 0xE0	; 224
    1b5c:	99 27       	eor	r25, r25
    1b5e:	81 39       	cpi	r24, 0x91	; 145
    1b60:	91 05       	cpc	r25, r1
    1b62:	08 f0       	brcs	.+2      	; 0x1b66 <GenerateAudio+0x1ca>
    1b64:	4c c0       	rjmp	.+152    	; 0x1bfe <GenerateAudio+0x262>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1b66:	60 91 3a 38 	lds	r22, 0x383A	; 0x80383a <effect>
    1b6a:	70 91 3b 38 	lds	r23, 0x383B	; 0x80383b <effect+0x1>
    1b6e:	60 7e       	andi	r22, 0xE0	; 224
    1b70:	77 27       	eor	r23, r23
    1b72:	6f 5f       	subi	r22, 0xFF	; 255
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	66 0f       	add	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <GenerateAudio+0x1dc>
    1b80:	ab 01       	movw	r20, r22
    1b82:	5d 5f       	subi	r21, 0xFD	; 253
    1b84:	7e 5f       	subi	r23, 0xFE	; 254
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	80 db       	rcall	.-2304   	; 0x128a <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1b8a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
    1b8e:	88 23       	and	r24, r24
    1b90:	b1 f1       	breq	.+108    	; 0x1bfe <GenerateAudio+0x262>
                    if (start == 0) {
    1b92:	80 91 4e 38 	lds	r24, 0x384E	; 0x80384e <start.4033>
    1b96:	81 11       	cpse	r24, r1
    1b98:	0e c0       	rjmp	.+28     	; 0x1bb6 <GenerateAudio+0x21a>
                        duration = 3;
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
    1b9c:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4032>
                        auRepAddr = &auBuffer[0];
    1ba0:	8e e0       	ldi	r24, 0x0E	; 14
    1ba2:	98 e3       	ldi	r25, 0x38	; 56
    1ba4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ba8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 1;
    1bb2:	c0 93 4e 38 	sts	0x384E, r28	; 0x80384e <start.4033>
                    }   if (duration == 0) {
    1bb6:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <duration.4032>
    1bba:	81 11       	cpse	r24, r1
    1bbc:	1a c0       	rjmp	.+52     	; 0x1bf2 <GenerateAudio+0x256>
                        effect &= 0x1f;
    1bbe:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    1bc2:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    1bc6:	8f 71       	andi	r24, 0x1F	; 31
    1bc8:	99 27       	eor	r25, r25
    1bca:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1bce:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                        auRepAddr = &zero;
    1bd2:	89 e3       	ldi	r24, 0x39	; 57
    1bd4:	98 e3       	ldi	r25, 0x38	; 56
    1bd6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1bda:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1bde:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    1be2:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                        auVolume = 0xff;
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <auVolume>
                        start = 0;
    1bec:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <start.4033>
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <GenerateAudio+0x262>
                    } else duration--;
    1bf2:	81 50       	subi	r24, 0x01	; 1
    1bf4:	80 93 4d 38 	sts	0x384D, r24	; 0x80384d <duration.4032>
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GenerateAudio+0x262>
                }
            }
        }
    } else {
        detHdPh = 0;
    1bfa:	10 92 bf 3a 	sts	0x3ABF, r1	; 0x803abf <detHdPh>
    }
    return buttonMark;
    1bfe:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <buttonMark>
}
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	08 95       	ret

00001c0a <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    1c0a:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <minuteMark>
    1c0e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1c12:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    1c16:	89 2f       	mov	r24, r25
    1c18:	99 27       	eor	r25, r25
    1c1a:	86 95       	lsr	r24
}
    1c1c:	3c e3       	ldi	r19, 0x3C	; 60
    1c1e:	23 9f       	mul	r18, r19
    1c20:	80 0d       	add	r24, r0
    1c22:	91 1d       	adc	r25, r1
    1c24:	11 24       	eor	r1, r1
    1c26:	08 95       	ret

00001c28 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	8c 01       	movw	r16, r24
    1c32:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c34:	ea df       	rcall	.-44     	; 0x1c0a <getClock>
    1c36:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1c38:	80 17       	cp	r24, r16
    1c3a:	91 07       	cpc	r25, r17
    1c3c:	08 f4       	brcc	.+2      	; 0x1c40 <idleTimeout+0x18>
        curClock += 256 * 60;
    1c3e:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1c40:	c0 0f       	add	r28, r16
    1c42:	d1 1f       	adc	r29, r17
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	c2 17       	cp	r28, r18
    1c48:	d3 07       	cpc	r29, r19
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <idleTimeout+0x26>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	08 95       	ret

00001c58 <SelfTest>:

uint8_t SelfTest(){
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <SelfTest+0x10>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <SelfTest+0x12>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    uint8_t tstVal[4] = {0x01, 0};
    1c6e:	19 82       	std	Y+1, r1	; 0x01
    1c70:	1a 82       	std	Y+2, r1	; 0x02
    1c72:	1b 82       	std	Y+3, r1	; 0x03
    1c74:	1c 82       	std	Y+4, r1	; 0x04
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	a6 e4       	ldi	r26, 0x46	; 70
    1c7c:	b0 ec       	ldi	r27, 0xC0	; 192

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	ed 91       	ld	r30, X+
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	ed 53       	subi	r30, 0x3D	; 61
    1c86:	f5 4c       	sbci	r31, 0xC5	; 197
    1c88:	80 83       	st	Z, r24

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1c8a:	20 ec       	ldi	r18, 0xC0	; 192
    1c8c:	ac 34       	cpi	r26, 0x4C	; 76
    1c8e:	b2 07       	cpc	r27, r18
    1c90:	b9 f7       	brne	.-18     	; 0x1c80 <SelfTest+0x28>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Audio in/out
    SelectAuIn();
    1c92:	9f da       	rcall	.-2754   	; 0x11d2 <SelectAuIn>
    auRepAddr = &tstVal[0];
    while (auIn > 0x04) ;
    1c94:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1c98:	85 30       	cpi	r24, 0x05	; 5
    1c9a:	e0 f7       	brcc	.-8      	; 0x1c94 <SelfTest+0x3c>
    tstVal[0] = 0xff;
    while (auIn < 0x04) ;
    1c9c:	80 91 c2 3a 	lds	r24, 0x3AC2	; 0x803ac2 <auIn>
    1ca0:	84 30       	cpi	r24, 0x04	; 4
    1ca2:	e0 f3       	brcs	.-8      	; 0x1c9c <SelfTest+0x44>
    iLED[HCKR[R][0]] = 0x00;
    1ca4:	e0 91 46 c0 	lds	r30, 0xC046	; 0x80c046 <__bss_end+0x8534>
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	ed 53       	subi	r30, 0x3D	; 61
    1cac:	f5 4c       	sbci	r31, 0xC5	; 197
    1cae:	10 82       	st	Z, r1
    iLED[HCKR[G][0]] = 0xff;
    1cb0:	e0 91 4c c0 	lds	r30, 0xC04C	; 0x80c04c <__bss_end+0x853a>
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	ed 53       	subi	r30, 0x3D	; 61
    1cb8:	f5 4c       	sbci	r31, 0xC5	; 197
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	80 83       	st	Z, r24
    auRepAddr = &zero;
    1cbe:	89 e3       	ldi	r24, 0x39	; 57
    1cc0:	98 e3       	ldi	r25, 0x38	; 56
    1cc2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1cc6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1cca:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    1cce:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    while (tstVal[0] == (adcPhot&0xff)) ;
    1cd2:	99 27       	eor	r25, r25
    1cd4:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    1cd8:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1cdc:	33 27       	eor	r19, r19
    1cde:	28 17       	cp	r18, r24
    1ce0:	39 07       	cpc	r19, r25
    1ce2:	c1 f3       	breq	.-16     	; 0x1cd4 <SelfTest+0x7c>
    iLED[HCKR[R][1]] = 0x00;
    1ce4:	e0 91 47 c0 	lds	r30, 0xC047	; 0x80c047 <__bss_end+0x8535>
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	ed 53       	subi	r30, 0x3D	; 61
    1cec:	f5 4c       	sbci	r31, 0xC5	; 197
    1cee:	10 82       	st	Z, r1
    iLED[HCKR[G][1]] = 0xff;
    1cf0:	e0 91 4d c0 	lds	r30, 0xC04D	; 0x80c04d <__bss_end+0x853b>
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	ed 53       	subi	r30, 0x3D	; 61
    1cf8:	f5 4c       	sbci	r31, 0xC5	; 197
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	80 83       	st	Z, r24

    //Magnet
    tstVal[0] = adcHall&0xff;
    1cfe:	80 91 bb 3a 	lds	r24, 0x3ABB	; 0x803abb <adcHall>
    1d02:	90 91 bc 3a 	lds	r25, 0x3ABC	; 0x803abc <adcHall+0x1>
    1d06:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcHall&0xff)) ;
    1d08:	99 27       	eor	r25, r25
    1d0a:	20 91 bb 3a 	lds	r18, 0x3ABB	; 0x803abb <adcHall>
    1d0e:	30 91 bc 3a 	lds	r19, 0x3ABC	; 0x803abc <adcHall+0x1>
    1d12:	33 27       	eor	r19, r19
    1d14:	28 17       	cp	r18, r24
    1d16:	39 07       	cpc	r19, r25
    1d18:	c1 f3       	breq	.-16     	; 0x1d0a <SelfTest+0xb2>
    iLED[HCKR[R][2]] = 0x00;
    1d1a:	e0 91 48 c0 	lds	r30, 0xC048	; 0x80c048 <__bss_end+0x8536>
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	ed 53       	subi	r30, 0x3D	; 61
    1d22:	f5 4c       	sbci	r31, 0xC5	; 197
    1d24:	10 82       	st	Z, r1
    iLED[HCKR[G][2]] = 0xff;
    1d26:	e0 91 4e c0 	lds	r30, 0xC04E	; 0x80c04e <__bss_end+0x853c>
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	ed 53       	subi	r30, 0x3D	; 61
    1d2e:	f5 4c       	sbci	r31, 0xC5	; 197
    1d30:	8f ef       	ldi	r24, 0xFF	; 255

    //Temperature
    SelectTSens();
    1d32:	80 83       	st	Z, r24
    1d34:	3f da       	rcall	.-2946   	; 0x11b4 <SelectTSens>
    tstVal[0] = adcTemp&0xff;
    1d36:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1d3a:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcTemp&0xff)) ;
    1d40:	99 27       	eor	r25, r25
    1d42:	20 91 ed 3a 	lds	r18, 0x3AED	; 0x803aed <adcTemp>
    1d46:	30 91 ee 3a 	lds	r19, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1d4a:	33 27       	eor	r19, r19
    1d4c:	28 17       	cp	r18, r24
    1d4e:	39 07       	cpc	r19, r25
    1d50:	c1 f3       	breq	.-16     	; 0x1d42 <SelfTest+0xea>
    iLED[HCKR[R][3]] = 0x00;
    1d52:	e0 91 49 c0 	lds	r30, 0xC049	; 0x80c049 <__bss_end+0x8537>
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	ed 53       	subi	r30, 0x3D	; 61
    1d5a:	f5 4c       	sbci	r31, 0xC5	; 197
    1d5c:	10 82       	st	Z, r1
    iLED[HCKR[G][3]] = 0xff;
    1d5e:	e0 91 4f c0 	lds	r30, 0xC04F	; 0x80c04f <__bss_end+0x853d>
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	ed 53       	subi	r30, 0x3D	; 61
    1d66:	f5 4c       	sbci	r31, 0xC5	; 197
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	80 83       	st	Z, r24

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d6c:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <adcBtns>
    1d70:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <adcBtns+0x1>
    1d74:	80 38       	cpi	r24, 0x80	; 128
    1d76:	9c 40       	sbci	r25, 0x0C	; 12
    1d78:	c8 f3       	brcs	.-14     	; 0x1d6c <SelfTest+0x114>
    iLED[HCKR[R][4]] = 0x00;
    1d7a:	e0 90 4a c0 	lds	r14, 0xC04A	; 0x80c04a <__bss_end+0x8538>
    1d7e:	8e 2d       	mov	r24, r14
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	fc 01       	movw	r30, r24
    1d84:	ed 53       	subi	r30, 0x3D	; 61
    1d86:	f5 4c       	sbci	r31, 0xC5	; 197
    1d88:	7f 01       	movw	r14, r30
    1d8a:	10 82       	st	Z, r1
    iLED[HCKR[G][4]] = 0xff;
    1d8c:	00 91 50 c0 	lds	r16, 0xC050	; 0x80c050 <__bss_end+0x853e>
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	0d 53       	subi	r16, 0x3D	; 61
    1d94:	15 4c       	sbci	r17, 0xC5	; 197
    1d96:	dd 24       	eor	r13, r13
    1d98:	da 94       	dec	r13
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	d0 82       	st	Z, r13
        0x3CCD              Level 6, open_acl=0
        0x3CCE              Level 6, action_acl=192
        0x3CCF              Level 6, action_mask=20
    */

    ExtEERead(0x3CCC, 4, 0, &tstVal[0]);
    1d9e:	9e 01       	movw	r18, r28
    1da0:	2f 5f       	subi	r18, 0xFF	; 255
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	8c ec       	ldi	r24, 0xCC	; 204
    1daa:	9c e3       	ldi	r25, 0x3C	; 60
    1dac:	af d9       	rcall	.-3234   	; 0x110c <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	8f 33       	cpi	r24, 0x3F	; 63
    1db2:	49 f4       	brne	.+18     	; 0x1dc6 <SelfTest+0x16e>
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	81 11       	cpse	r24, r1
    1db8:	06 c0       	rjmp	.+12     	; 0x1dc6 <SelfTest+0x16e>
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	80 3c       	cpi	r24, 0xC0	; 192
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <SelfTest+0x16e>
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	84 31       	cpi	r24, 0x14	; 20
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <SelfTest+0x170>
    1dc6:	ff cf       	rjmp	.-2      	; 0x1dc6 <SelfTest+0x16e>
        while(1);
    } else {
        iLED[HCKR[R][4]] = 0x00;
    1dc8:	f7 01       	movw	r30, r14
    1dca:	10 82       	st	Z, r1
        iLED[HCKR[G][4]] = 0xff;
    1dcc:	f8 01       	movw	r30, r16
    1dce:	d0 82       	st	Z, r13
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	ed 53       	subi	r30, 0x3D	; 61
    1dd8:	f5 4c       	sbci	r31, 0xC5	; 197
    1dda:	10 82       	st	Z, r1
    1ddc:	01 96       	adiw	r24, 0x01	; 1
        iLED[HCKR[R][4]] = 0x00;
        iLED[HCKR[G][4]] = 0xff;
    }

        //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1dde:	88 32       	cpi	r24, 0x28	; 40
    1de0:	91 05       	cpc	r25, r1
    1de2:	c1 f7       	brne	.-16     	; 0x1dd4 <SelfTest+0x17c>
    1de4:	10 e0       	ldi	r17, 0x00	; 0
        iLED[x]=0;
    }

    for(uint8_t x=0; x<((adcPhot+adcTemp)&0x3f); ++x) lfsr();
    1de6:	40 91 bd 3a 	lds	r20, 0x3ABD	; 0x803abd <adcPhot>
    1dea:	50 91 be 3a 	lds	r21, 0x3ABE	; 0x803abe <adcPhot+0x1>
    1dee:	80 91 ed 3a 	lds	r24, 0x3AED	; 0x803aed <adcTemp>
    1df2:	90 91 ee 3a 	lds	r25, 0x3AEE	; 0x803aee <adcTemp+0x1>
    1df6:	21 2f       	mov	r18, r17
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	84 0f       	add	r24, r20
    1dfc:	95 1f       	adc	r25, r21
    1dfe:	8f 73       	andi	r24, 0x3F	; 63
    1e00:	99 27       	eor	r25, r25
    1e02:	28 17       	cp	r18, r24
    1e04:	39 07       	cpc	r19, r25
    1e06:	18 f4       	brcc	.+6      	; 0x1e0e <SelfTest+0x1b6>
    1e08:	21 da       	rcall	.-3006   	; 0x124c <lfsr>
    1e0a:	1f 5f       	subi	r17, 0xFF	; 255
    1e0c:	ec cf       	rjmp	.-40     	; 0x1de6 <SelfTest+0x18e>

    return 0;
}
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	24 96       	adiw	r28, 0x04	; 4
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	08 95       	ret

00001e26 <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	e8 e3       	ldi	r30, 0x38	; 56
    1e2c:	f0 ec       	ldi	r31, 0xC0	; 192
    1e2e:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1e30:	a5 81       	ldd	r26, Z+5	; 0x05
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ad 53       	subi	r26, 0x3D	; 61
    1e36:	b5 4c       	sbci	r27, 0xC5	; 197
    1e38:	1c 92       	st	X, r1
    1e3a:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1e3c:	a8 81       	ld	r26, Y
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ad 53       	subi	r26, 0x3D	; 61
    1e42:	b5 4c       	sbci	r27, 0xC5	; 197
    1e44:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1e46:	90 ec       	ldi	r25, 0xC0	; 192
    1e48:	ed 33       	cpi	r30, 0x3D	; 61
    1e4a:	f9 07       	cpc	r31, r25
    1e4c:	81 f7       	brne	.-32     	; 0x1e2e <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1e4e:	83 30       	cpi	r24, 0x03	; 3
    1e50:	d9 f4       	brne	.+54     	; 0x1e88 <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1e52:	e0 91 3d c0 	lds	r30, 0xC03D	; 0x80c03d <__bss_end+0x852b>
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e5c:	ed 53       	subi	r30, 0x3D	; 61
    1e5e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e60:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1e62:	e0 91 3e c0 	lds	r30, 0xC03E	; 0x80c03e <__bss_end+0x852c>
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e6c:	ed 53       	subi	r30, 0x3D	; 61
    1e6e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e70:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1e72:	e0 91 3f c0 	lds	r30, 0xC03F	; 0x80c03f <__bss_end+0x852d>
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e7c:	ed 53       	subi	r30, 0x3D	; 61
    1e7e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e80:	80 83       	st	Z, r24
        effect = 0x013f;
    1e82:	8f e3       	ldi	r24, 0x3F	; 63
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	46 c0       	rjmp	.+140    	; 0x1f14 <simonLed+0xee>
    } else if (val == 1) {  //
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	99 f4       	brne	.+38     	; 0x1eb2 <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1e8c:	e0 91 40 c0 	lds	r30, 0xC040	; 0x80c040 <__bss_end+0x852e>
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e96:	ed 53       	subi	r30, 0x3D	; 61
    1e98:	f5 4c       	sbci	r31, 0xC5	; 197
    1e9a:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e9c:	e0 91 41 c0 	lds	r30, 0xC041	; 0x80c041 <__bss_end+0x852f>
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ea6:	ed 53       	subi	r30, 0x3D	; 61
    1ea8:	f5 4c       	sbci	r31, 0xC5	; 197
    1eaa:	80 83       	st	Z, r24
        effect = 0x015f;
    1eac:	8f e5       	ldi	r24, 0x5F	; 95
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	31 c0       	rjmp	.+98     	; 0x1f14 <simonLed+0xee>
    } else if (val == 4) {  // III
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	d9 f4       	brne	.+54     	; 0x1eec <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1eb6:	e0 91 38 c0 	lds	r30, 0xC038	; 0x80c038 <__bss_end+0x8526>
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ec0:	ed 53       	subi	r30, 0x3D	; 61
    1ec2:	f5 4c       	sbci	r31, 0xC5	; 197
    1ec4:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1ec6:	e0 91 39 c0 	lds	r30, 0xC039	; 0x80c039 <__bss_end+0x8527>
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ed0:	ed 53       	subi	r30, 0x3D	; 61
    1ed2:	f5 4c       	sbci	r31, 0xC5	; 197
    1ed4:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1ed6:	e0 91 3a c0 	lds	r30, 0xC03A	; 0x80c03a <__bss_end+0x8528>
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ee0:	ed 53       	subi	r30, 0x3D	; 61
    1ee2:	f5 4c       	sbci	r31, 0xC5	; 197
    1ee4:	80 83       	st	Z, r24
        effect = 0x017f;
    1ee6:	8f e7       	ldi	r24, 0x7F	; 127
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <simonLed+0xee>
    } else if (val == 2) {  // I
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	b1 f4       	brne	.+44     	; 0x1f1c <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1ef0:	e0 91 3b c0 	lds	r30, 0xC03B	; 0x80c03b <__bss_end+0x8529>
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1efa:	ed 53       	subi	r30, 0x3D	; 61
    1efc:	f5 4c       	sbci	r31, 0xC5	; 197
    1efe:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1f00:	e0 91 3c c0 	lds	r30, 0xC03C	; 0x80c03c <__bss_end+0x852a>
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f0a:	ed 53       	subi	r30, 0x3D	; 61
    1f0c:	f5 4c       	sbci	r31, 0xC5	; 197
    1f0e:	80 83       	st	Z, r24
        effect = 0x019f;
    1f10:	8f e9       	ldi	r24, 0x9F	; 159
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    1f18:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }
}
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1f26:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1f2a:	8d 7f       	andi	r24, 0xFD	; 253
    1f2c:	09 f0       	breq	.+2      	; 0x1f30 <BastetDictates+0xe>
    1f2e:	73 c1       	rjmp	.+742    	; 0x2216 <BastetDictates+0x2f4>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1f30:	8a e7       	ldi	r24, 0x7A	; 122
    1f32:	b7 da       	rcall	.-2706   	; 0x14a2 <CheckState>
    1f34:	88 23       	and	r24, r24
    1f36:	41 f0       	breq	.+16     	; 0x1f48 <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1f38:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <BastetDictates+0x20>
    1f40:	6a c1       	rjmp	.+724    	; 0x2216 <BastetDictates+0x2f4>
            gameNow = TEXT;
    1f42:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
    1f46:	67 c1       	rjmp	.+718    	; 0x2216 <BastetDictates+0x2f4>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1f48:	8b e7       	ldi	r24, 0x7B	; 123
    1f4a:	ab da       	rcall	.-2730   	; 0x14a2 <CheckState>
    1f4c:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1f50:	88 23       	and	r24, r24
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1f54:	9f 3f       	cpi	r25, 0xFF	; 255
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <BastetDictates+0x3c>
            gameNow = BASTET;
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1f5e:	e0 91 34 c0 	lds	r30, 0xC034	; 0x80c034 <__bss_end+0x8522>
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	9f 3f       	cpi	r25, 0xFF	; 255
    1f66:	19 f0       	breq	.+6      	; 0x1f6e <BastetDictates+0x4c>
    1f68:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <BastetDictates+0x4e>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	ed 53       	subi	r30, 0x3D	; 61
    1f72:	f5 4c       	sbci	r31, 0xC5	; 197
    1f74:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1f76:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	0c c0       	rjmp	.+24     	; 0x1f96 <BastetDictates+0x74>
    1f7e:	c2 e6       	ldi	r28, 0x62	; 98
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1f80:	d8 e3       	ldi	r29, 0x38	; 56
    1f82:	64 d9       	rcall	.-3384   	; 0x124c <lfsr>
    1f84:	83 70       	andi	r24, 0x03	; 3
    1f86:	89 93       	st	Y+, r24
            gameNow = BASTET;

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1f88:	88 e3       	ldi	r24, 0x38	; 56
    1f8a:	ce 36       	cpi	r28, 0x6E	; 110
    1f8c:	d8 07       	cpc	r29, r24
    1f8e:	c9 f7       	brne	.-14     	; 0x1f82 <BastetDictates+0x60>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1f96:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	71 f4       	brne	.+28     	; 0x1fba <BastetDictates+0x98>
    1f9e:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    1fa2:	82 30       	cpi	r24, 0x02	; 2
    1fa4:	51 f4       	brne	.+20     	; 0x1fba <BastetDictates+0x98>
        simonGameState = BASTET_GAME_INTRO;
    1fa6:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
        simonPos = 0;
    1faa:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonInputPos = 0;
    1fae:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonTimer = 0;
    1fb2:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        simonCounter = 0;
    1fb6:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1fba:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	19 f5       	brne	.+70     	; 0x2008 <BastetDictates+0xe6>
        if (simonTimer > 5) {   // ±.33 seconds
    1fc2:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    1fc6:	86 30       	cpi	r24, 0x06	; 6
    1fc8:	38 f0       	brcs	.+14     	; 0x1fd8 <BastetDictates+0xb6>
            simonCounter++;
    1fca:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    1fd4:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > 5) {
    1fd8:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    1fdc:	e6 30       	cpi	r30, 0x06	; 6
    1fde:	48 f0       	brcs	.+18     	; 0x1ff2 <BastetDictates+0xd0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonTimer = 0;
    1fe6:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonCounter = 0;
    1fea:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            ClearHackerLeds();
    1fee:	62 db       	rcall	.-2364   	; 0x16b4 <ClearHackerLeds>
            return 0;
    1ff0:	12 c1       	rjmp	.+548    	; 0x2216 <BastetDictates+0x2f4>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	ea 5b       	subi	r30, 0xBA	; 186
    1ff6:	ff 43       	sbci	r31, 0x3F	; 63
    1ff8:	e0 81       	ld	r30, Z
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2000:	ed 53       	subi	r30, 0x3D	; 61
    2002:	f5 4c       	sbci	r31, 0xC5	; 197
    2004:	80 83       	st	Z, r24
    2006:	2b c0       	rjmp	.+86     	; 0x205e <BastetDictates+0x13c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    2008:	83 30       	cpi	r24, 0x03	; 3
    200a:	49 f5       	brne	.+82     	; 0x205e <BastetDictates+0x13c>
        if (simonTimer > 7) {   // ±.5 second
    200c:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    2010:	88 30       	cpi	r24, 0x08	; 8
    2012:	38 f0       	brcs	.+14     	; 0x2022 <BastetDictates+0x100>
            simonCounter++;
    2014:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
            simonTimer = 0;
    201e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
        }
        if (simonCounter > simonPos) {
    2022:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <simonCounter>
    2026:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    202a:	8e 17       	cp	r24, r30
    202c:	40 f4       	brcc	.+16     	; 0x203e <BastetDictates+0x11c>
            simonInputPos = 0;
    202e:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    2032:	85 e0       	ldi	r24, 0x05	; 5
    2034:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
            simonLed(0);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	f5 de       	rcall	.-534    	; 0x1e26 <simonLed>
    203c:	98 c0       	rjmp	.+304    	; 0x216e <BastetDictates+0x24c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    203e:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	30 f4       	brcc	.+12     	; 0x2052 <BastetDictates+0x130>
            simonLed(simonState[simonCounter] + 1);
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	ee 59       	subi	r30, 0x9E	; 158
    204a:	f7 4c       	sbci	r31, 0xC7	; 199
    204c:	80 81       	ld	r24, Z
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	ea de       	rcall	.-556    	; 0x1e26 <simonLed>
        }
        if (simonTimer > 6) {
    2052:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    2056:	87 30       	cpi	r24, 0x07	; 7
    2058:	10 f0       	brcs	.+4      	; 0x205e <BastetDictates+0x13c>
            simonLed(0);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	e4 de       	rcall	.-568    	; 0x1e26 <simonLed>
    205e:	c0 91 5c 38 	lds	r28, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    2062:	c5 30       	cpi	r28, 0x05	; 5
    2064:	09 f0       	breq	.+2      	; 0x2068 <BastetDictates+0x146>
    2066:	86 c0       	rjmp	.+268    	; 0x2174 <BastetDictates+0x252>
    2068:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    206c:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    2070:	98 17       	cp	r25, r24
    2072:	09 f4       	brne	.+2      	; 0x2076 <BastetDictates+0x154>
    2074:	71 c0       	rjmp	.+226    	; 0x2158 <BastetDictates+0x236>
    2076:	90 91 5e 38 	lds	r25, 0x385E	; 0x80385e <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    207a:	91 11       	cpse	r25, r1
    207c:	6f c0       	rjmp	.+222    	; 0x215c <BastetDictates+0x23a>
    207e:	84 30       	cpi	r24, 0x04	; 4
    2080:	08 f0       	brcs	.+2      	; 0x2084 <BastetDictates+0x162>
    2082:	6c c0       	rjmp	.+216    	; 0x215c <BastetDictates+0x23a>
                simonWait = 1;
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	90 93 5e 38 	sts	0x385E, r25	; 0x80385e <simonWait>
                simonTimer = 0;
    208a:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                simonLed(buttonState+1);
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	ca de       	rcall	.-620    	; 0x1e26 <simonLed>
    2092:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    2094:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    2098:	c0 93 2d 38 	sts	0x382D, r28	; 0x80382d <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    209c:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    20a0:	e8 2f       	mov	r30, r24
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	ee 59       	subi	r30, 0x9E	; 158
    20a6:	f7 4c       	sbci	r31, 0xC7	; 199
    20a8:	20 81       	ld	r18, Z
    20aa:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    20ae:	29 13       	cpse	r18, r25
    20b0:	1d c0       	rjmp	.+58     	; 0x20ec <BastetDictates+0x1ca>
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    20b4:	80 93 60 38 	sts	0x3860, r24	; 0x803860 <simonInputPos>
    20b8:	e0 91 61 38 	lds	r30, 0x3861	; 0x803861 <simonPos>
                    if (simonInputPos > simonPos) {
    20bc:	e8 17       	cp	r30, r24
    20be:	a0 f5       	brcc	.+104    	; 0x2128 <BastetDictates+0x206>
    20c0:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    20c2:	e0 93 61 38 	sts	0x3861, r30	; 0x803861 <simonPos>
    20c6:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                        simonTimer = 0;
    20ca:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                        simonCounter = 0;
    20ce:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    20d0:	59 f0       	breq	.+22     	; 0x20e8 <BastetDictates+0x1c6>
    20d2:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	ea 5b       	subi	r30, 0xBA	; 186
    20d8:	ff 43       	sbci	r31, 0x3F	; 63
    20da:	e5 81       	ldd	r30, Z+5	; 0x05
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    20e2:	ed 53       	subi	r30, 0x3D	; 61
    20e4:	f5 4c       	sbci	r31, 0xC5	; 197
    20e6:	80 83       	st	Z, r24
    20e8:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    20ea:	1c c0       	rjmp	.+56     	; 0x2124 <BastetDictates+0x202>
    20ec:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    20f4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    20f8:	a6 e4       	ldi	r26, 0x46	; 70
    20fa:	b0 ec       	ldi	r27, 0xC0	; 192
    20fc:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2104:	ed 53       	subi	r30, 0x3D	; 61
    2106:	f5 4c       	sbci	r31, 0xC5	; 197
    2108:	80 83       	st	Z, r24
    210a:	80 ec       	ldi	r24, 0xC0	; 192
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    210c:	ac 34       	cpi	r26, 0x4C	; 76
    210e:	b8 07       	cpc	r27, r24
    2110:	a9 f7       	brne	.-22     	; 0x20fc <BastetDictates+0x1da>
    2112:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    2116:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
                    simonPos = 0;
    211a:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonTimer = 0;
    211e:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonCounter = 0;
    2122:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    2124:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    2128:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    212c:	8c 30       	cpi	r24, 0x0C	; 12
    212e:	20 f4       	brcc	.+8      	; 0x2138 <BastetDictates+0x216>
    2130:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <simonPos>
    2134:	8c 30       	cpi	r24, 0x0C	; 12
    2136:	90 f0       	brcs	.+36     	; 0x215c <BastetDictates+0x23a>
                    effect = 64|2;
    2138:	82 e4       	ldi	r24, 0x42	; 66
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2140:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    2144:	8a e7       	ldi	r24, 0x7A	; 122
    2146:	8c d9       	rcall	.-3304   	; 0x1460 <UpdateState>
    2148:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
                    simonTimer = 0;
    214c:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
                    simonCounter = 0;
    2150:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    2152:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <simonNextGameState>
    2156:	02 c0       	rjmp	.+4      	; 0x215c <BastetDictates+0x23a>
    2158:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    215c:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    2160:	88 3c       	cpi	r24, 0xC8	; 200
    2162:	41 f4       	brne	.+16     	; 0x2174 <BastetDictates+0x252>
    2164:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    2166:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    216a:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    216e:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2172:	51 c0       	rjmp	.+162    	; 0x2216 <BastetDictates+0x2f4>
            return 0;
    2174:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    2178:	84 30       	cpi	r24, 0x04	; 4
    217a:	81 f4       	brne	.+32     	; 0x219c <BastetDictates+0x27a>
        if (simonTimer >= 7) {
    217c:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    2180:	87 30       	cpi	r24, 0x07	; 7
    2182:	60 f0       	brcs	.+24     	; 0x219c <BastetDictates+0x27a>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	4f de       	rcall	.-866    	; 0x1e26 <simonLed>
    2188:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <simonWait>
            simonWait = 0;
    218c:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    2190:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    2194:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <simonNextGameState>
            simonGameState = simonNextGameState;
    2198:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    219c:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    21a0:	86 30       	cpi	r24, 0x06	; 6
    21a2:	41 f5       	brne	.+80     	; 0x21f4 <BastetDictates+0x2d2>
    21a4:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
        if (simonTimer > 3) {
    21a8:	84 30       	cpi	r24, 0x04	; 4
    21aa:	38 f0       	brcs	.+14     	; 0x21ba <BastetDictates+0x298>
    21ac:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
            simonCounter++;
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <simonCounter>
    21b6:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    21ba:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <simonCounter>
        }
        if (simonCounter > 5) {
    21be:	86 30       	cpi	r24, 0x06	; 6
    21c0:	40 f0       	brcs	.+16     	; 0x21d2 <BastetDictates+0x2b0>
    21c2:	10 92 5f 38 	sts	0x385F, r1	; 0x80385f <simonTimer>
            simonTimer = 0;
    21c6:	10 92 5d 38 	sts	0x385D, r1	; 0x80385d <simonCounter>
            simonCounter = 0;
    21ca:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    21cc:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <simonGameState>
    21d0:	22 c0       	rjmp	.+68     	; 0x2216 <BastetDictates+0x2f4>
            return 0;
    21d2:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	e8 1b       	sub	r30, r24
    21d8:	f1 09       	sbc	r31, r1
    21da:	ea 5b       	subi	r30, 0xBA	; 186
    21dc:	ff 43       	sbci	r31, 0x3F	; 63
    21de:	a0 81       	ld	r26, Z
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	ad 53       	subi	r26, 0x3D	; 61
    21e4:	b5 4c       	sbci	r27, 0xC5	; 197
    21e6:	1c 92       	st	X, r1
    21e8:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	ed 53       	subi	r30, 0x3D	; 61
    21ee:	f5 4c       	sbci	r31, 0xC5	; 197
    21f0:	10 82       	st	Z, r1
    21f2:	0c c0       	rjmp	.+24     	; 0x220c <BastetDictates+0x2ea>
    21f4:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    21f6:	51 f4       	brne	.+20     	; 0x220c <BastetDictates+0x2ea>
        simonInputPos = 0;
    21f8:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <simonInputPos>
        simonPos = 0;
    21fc:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    2200:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <simonGameState>
        gameNow = TEXT;
    2204:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <gameNow>
        simonLed(0);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	0d de       	rcall	.-998    	; 0x1e26 <simonLed>
    220c:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <simonTimer>
    }

    ++simonTimer;
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <simonTimer>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	08 95       	ret

0000221e <Cheat>:
    221e:	1f 93       	push	r17

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	62 97       	sbiw	r28, 0x12	; 18
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	8a 8b       	std	Y+18, r24	; 0x12
    2230:	80 e1       	ldi	r24, 0x10	; 16
    2232:	ec e0       	ldi	r30, 0x0C	; 12
    2234:	f0 ec       	ldi	r31, 0xC0	; 192
    2236:	de 01       	movw	r26, r28
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	01 90       	ld	r0, Z+
    223c:	0d 92       	st	X+, r0
    223e:	8a 95       	dec	r24
    2240:	e1 f7       	brne	.-8      	; 0x223a <Cheat+0x1c>
    2242:	fe 01       	movw	r30, r28
    2244:	31 96       	adiw	r30, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	21 91       	ld	r18, Z+
    224c:	31 91       	ld	r19, Z+
    224e:	26 17       	cp	r18, r22
    2250:	37 07       	cpc	r19, r23
    2252:	09 f4       	brne	.+2      	; 0x2256 <Cheat+0x38>
    2254:	89 2f       	mov	r24, r25
    2256:	9f 5f       	subi	r25, 0xFF	; 255
    2258:	98 30       	cpi	r25, 0x08	; 8
    225a:	b9 f7       	brne	.-18     	; 0x224a <Cheat+0x2c>
    225c:	88 30       	cpi	r24, 0x08	; 8
    225e:	10 f0       	brcs	.+4      	; 0x2264 <Cheat+0x46>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	14 c0       	rjmp	.+40     	; 0x228c <Cheat+0x6e>
    2264:	18 e1       	ldi	r17, 0x18	; 24
    2266:	18 0f       	add	r17, r24
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	be 01       	movw	r22, r28
    226c:	6f 5e       	subi	r22, 0xEF	; 239
    226e:	7f 4f       	sbci	r23, 0xFF	; 255
    2270:	81 2f       	mov	r24, r17
    2272:	0e 94 34 08 	call	0x1068	; 0x1068 <EERead>
    2276:	89 89       	ldd	r24, Y+17	; 0x11
    2278:	8f 3f       	cpi	r24, 0xFF	; 255
    227a:	91 f7       	brne	.-28     	; 0x2260 <Cheat+0x42>
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	be 01       	movw	r22, r28
    2280:	6e 5e       	subi	r22, 0xEE	; 238
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	81 2f       	mov	r24, r17
    2286:	0e 94 44 08 	call	0x1088	; 0x1088 <EEWrite>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	62 96       	adiw	r28, 0x12	; 18
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	08 95       	ret

0000229a <UnflipData>:
    229a:	26 2f       	mov	r18, r22
    229c:	fb 01       	movw	r30, r22
    229e:	35 e5       	ldi	r19, 0x55	; 85
    22a0:	9e 2f       	mov	r25, r30
    22a2:	92 1b       	sub	r25, r18
    22a4:	98 17       	cp	r25, r24
    22a6:	28 f4       	brcc	.+10     	; 0x22b2 <UnflipData+0x18>
    22a8:	90 81       	ld	r25, Z
    22aa:	92 95       	swap	r25
    22ac:	93 27       	eor	r25, r19
    22ae:	91 93       	st	Z+, r25
    22b0:	f7 cf       	rjmp	.-18     	; 0x22a0 <UnflipData+0x6>
    22b2:	08 95       	ret

000022b4 <ClearTxAfter>:
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	88 30       	cpi	r24, 0x08	; 8
    22b8:	30 f4       	brcc	.+12     	; 0x22c6 <ClearTxAfter+0x12>
    22ba:	e8 2f       	mov	r30, r24
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	e8 5b       	subi	r30, 0xB8	; 184
    22c0:	f5 4c       	sbci	r31, 0xC5	; 197
    22c2:	10 82       	st	Z, r1
    22c4:	f7 cf       	rjmp	.-18     	; 0x22b4 <ClearTxAfter>
    22c6:	08 95       	ret

000022c8 <StartsWith>:
    22c8:	ac 01       	movw	r20, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	e9 2f       	mov	r30, r25
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	da 01       	movw	r26, r20
    22d2:	ae 0f       	add	r26, r30
    22d4:	bf 1f       	adc	r27, r31
    22d6:	3c 91       	ld	r19, X
    22d8:	e6 0f       	add	r30, r22
    22da:	f7 1f       	adc	r31, r23
    22dc:	31 11       	cpse	r19, r1
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <StartsWith+0x22>
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 81       	ld	r25, Z
    22e4:	99 23       	and	r25, r25
    22e6:	49 f0       	breq	.+18     	; 0x22fa <StartsWith+0x32>
    22e8:	07 c0       	rjmp	.+14     	; 0x22f8 <StartsWith+0x30>
    22ea:	20 81       	ld	r18, Z
    22ec:	22 23       	and	r18, r18
    22ee:	c1 f3       	breq	.-16     	; 0x22e0 <StartsWith+0x18>
    22f0:	32 13       	cpse	r19, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <StartsWith+0x30>
    22f4:	9f 5f       	subi	r25, 0xFF	; 255
    22f6:	ea cf       	rjmp	.-44     	; 0x22cc <StartsWith+0x4>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	08 95       	ret

000022fc <PrepareSending>:
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	fc 01       	movw	r30, r24
    2302:	61 15       	cp	r22, r1
    2304:	71 05       	cpc	r23, r1
    2306:	59 f1       	breq	.+86     	; 0x235e <PrepareSending+0x62>
    2308:	a0 e5       	ldi	r26, 0x50	; 80
    230a:	ba e3       	ldi	r27, 0x3A	; 58
    230c:	c8 e4       	ldi	r28, 0x48	; 72
    230e:	da e3       	ldi	r29, 0x3A	; 58
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	9f ef       	ldi	r25, 0xFF	; 255
    2314:	6f 3f       	cpi	r22, 0xFF	; 255
    2316:	71 05       	cpc	r23, r1
    2318:	69 f0       	breq	.+26     	; 0x2334 <PrepareSending+0x38>
    231a:	60 f0       	brcs	.+24     	; 0x2334 <PrepareSending+0x38>
    231c:	ed 93       	st	X+, r30
    231e:	fd 93       	st	X+, r31
    2320:	99 93       	st	Y+, r25
    2322:	e1 50       	subi	r30, 0x01	; 1
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	6f 5f       	subi	r22, 0xFF	; 255
    2328:	71 09       	sbc	r23, r1
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	87 30       	cpi	r24, 0x07	; 7
    232e:	91 f7       	brne	.-28     	; 0x2314 <PrepareSending+0x18>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	1e c0       	rjmp	.+60     	; 0x2370 <PrepareSending+0x74>
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	d9 01       	movw	r26, r18
    233a:	aa 0f       	add	r26, r26
    233c:	bb 1f       	adc	r27, r27
    233e:	a0 5b       	subi	r26, 0xB0	; 176
    2340:	b5 4c       	sbci	r27, 0xC5	; 197
    2342:	ed 93       	st	X+, r30
    2344:	fc 93       	st	X, r31
    2346:	6f 3f       	cpi	r22, 0xFF	; 255
    2348:	71 05       	cpc	r23, r1
    234a:	11 f4       	brne	.+4      	; 0x2350 <PrepareSending+0x54>
    234c:	6e ef       	ldi	r22, 0xFE	; 254
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	f9 01       	movw	r30, r18
    2352:	e8 5b       	subi	r30, 0xB8	; 184
    2354:	f5 4c       	sbci	r31, 0xC5	; 197
    2356:	60 83       	st	Z, r22
    2358:	40 93 46 3a 	sts	0x3A46, r20	; 0x803a46 <txTypeNow>
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <PrepareSending+0x6c>
    235e:	10 92 50 3a 	sts	0x3A50, r1	; 0x803a50 <txAddrList>
    2362:	10 92 51 3a 	sts	0x3A51, r1	; 0x803a51 <txAddrList+0x1>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	a5 df       	rcall	.-182    	; 0x22b4 <ClearTxAfter>
    236a:	10 92 47 3a 	sts	0x3A47, r1	; 0x803a47 <txAddrNow>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	08 95       	ret

00002376 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	f9 01       	movw	r30, r18
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	e5 5e       	subi	r30, 0xE5	; 229
    2386:	f6 4c       	sbci	r31, 0xC6	; 198
    2388:	a9 e5       	ldi	r26, 0x59	; 89
    238a:	ba e7       	ldi	r27, 0x7A	; 122
    238c:	a0 83       	st	Z, r26
    238e:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2390:	f9 01       	movw	r30, r18
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	e5 5a       	subi	r30, 0xA5	; 165
    2398:	f6 4c       	sbci	r31, 0xC6	; 198
    239a:	62 e0       	ldi	r22, 0x02	; 2
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	60 83       	st	Z, r22
    23a0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	f9 01       	movw	r30, r18
    23a8:	e5 56       	subi	r30, 0x65	; 101
    23aa:	f6 4c       	sbci	r31, 0xC6	; 198
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	50 e0       	ldi	r21, 0x00	; 0
    23b0:	40 83       	st	Z, r20
    23b2:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	28 0f       	add	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	f9 01       	movw	r30, r18
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	e5 5e       	subi	r30, 0xE5	; 229
    23c2:	f6 4c       	sbci	r31, 0xC6	; 198
    23c4:	c2 e6       	ldi	r28, 0x62	; 98
    23c6:	da e7       	ldi	r29, 0x7A	; 122
    23c8:	c0 83       	st	Z, r28
    23ca:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    23cc:	f9 01       	movw	r30, r18
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e5 5a       	subi	r30, 0xA5	; 165
    23d4:	f6 4c       	sbci	r31, 0xC6	; 198
    23d6:	cc e0       	ldi	r28, 0x0C	; 12
    23d8:	d0 e0       	ldi	r29, 0x00	; 0
    23da:	c0 83       	st	Z, r28
    23dc:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    23de:	22 0f       	add	r18, r18
    23e0:	33 1f       	adc	r19, r19
    23e2:	f9 01       	movw	r30, r18
    23e4:	e5 56       	subi	r30, 0x65	; 101
    23e6:	f6 4c       	sbci	r31, 0xC6	; 198
    23e8:	40 83       	st	Z, r20
    23ea:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    23ec:	e2 e0       	ldi	r30, 0x02	; 2
    23ee:	e8 0f       	add	r30, r24
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e5 5e       	subi	r30, 0xE5	; 229
    23f8:	f6 4c       	sbci	r31, 0xC6	; 198
    23fa:	20 ef       	ldi	r18, 0xF0	; 240
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	20 83       	st	Z, r18
    2400:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2402:	23 e0       	ldi	r18, 0x03	; 3
    2404:	28 0f       	add	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	f9 01       	movw	r30, r18
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	e5 5e       	subi	r30, 0xE5	; 229
    2410:	f6 4c       	sbci	r31, 0xC6	; 198
    2412:	a0 83       	st	Z, r26
    2414:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2416:	f9 01       	movw	r30, r18
    2418:	ee 0f       	add	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	e5 5a       	subi	r30, 0xA5	; 165
    241e:	f6 4c       	sbci	r31, 0xC6	; 198
    2420:	60 83       	st	Z, r22
    2422:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2424:	22 0f       	add	r18, r18
    2426:	33 1f       	adc	r19, r19
    2428:	f9 01       	movw	r30, r18
    242a:	e5 56       	subi	r30, 0x65	; 101
    242c:	f6 4c       	sbci	r31, 0xC6	; 198
    242e:	40 83       	st	Z, r20
    2430:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2432:	24 e0       	ldi	r18, 0x04	; 4
    2434:	28 0f       	add	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	f9 01       	movw	r30, r18
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	e5 5e       	subi	r30, 0xE5	; 229
    2440:	f6 4c       	sbci	r31, 0xC6	; 198
    2442:	a5 e5       	ldi	r26, 0x55	; 85
    2444:	ba e7       	ldi	r27, 0x7A	; 122
    2446:	a0 83       	st	Z, r26
    2448:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    244a:	f9 01       	movw	r30, r18
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	e5 5a       	subi	r30, 0xA5	; 165
    2452:	f6 4c       	sbci	r31, 0xC6	; 198
    2454:	60 83       	st	Z, r22
    2456:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2458:	22 0f       	add	r18, r18
    245a:	33 1f       	adc	r19, r19
    245c:	f9 01       	movw	r30, r18
    245e:	e5 56       	subi	r30, 0x65	; 101
    2460:	f6 4c       	sbci	r31, 0xC6	; 198
    2462:	40 83       	st	Z, r20
    2464:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    2466:	8b 5f       	subi	r24, 0xFB	; 251
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    246e:	af 92       	push	r10
    2470:	bf 92       	push	r11
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	2c 97       	sbiw	r28, 0x0c	; 12
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	7c 01       	movw	r14, r24
    248c:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    248e:	9e 01       	movw	r18, r28
    2490:	2f 5f       	subi	r18, 0xFF	; 255
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	6c e0       	ldi	r22, 0x0C	; 12
    2498:	80 96       	adiw	r24, 0x20	; 32
    249a:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	98 27       	eor	r25, r24
    24a4:	89 27       	eor	r24, r25
    24a6:	98 27       	eor	r25, r24
    24a8:	80 96       	adiw	r24, 0x20	; 32
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	98 27       	eor	r25, r24
    24b6:	89 27       	eor	r24, r25
    24b8:	98 27       	eor	r25, r24
    24ba:	80 96       	adiw	r24, 0x20	; 32
    24bc:	82 83       	std	Z+2, r24	; 0x02
    24be:	93 83       	std	Z+3, r25	; 0x03
    24c0:	de 01       	movw	r26, r28
    24c2:	15 96       	adiw	r26, 0x05	; 5
    24c4:	34 96       	adiw	r30, 0x04	; 4
    24c6:	c8 01       	movw	r24, r16
    24c8:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    24ca:	2d 91       	ld	r18, X+
    24cc:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    24ce:	e8 17       	cp	r30, r24
    24d0:	f9 07       	cpc	r31, r25
    24d2:	d9 f7       	brne	.-10     	; 0x24ca <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    24d4:	fc e2       	ldi	r31, 0x2C	; 44
    24d6:	ef 0e       	add	r14, r31
    24d8:	f1 1c       	adc	r15, r1
    24da:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    24dc:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    24de:	9e 01       	movw	r18, r28
    24e0:	2f 5f       	subi	r18, 0xFF	; 255
    24e2:	3f 4f       	sbci	r19, 0xFF	; 255
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	63 e0       	ldi	r22, 0x03	; 3
    24e8:	c7 01       	movw	r24, r14
    24ea:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	98 27       	eor	r25, r24
    24f4:	89 27       	eor	r24, r25
    24f6:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    24f8:	97 01       	movw	r18, r14
    24fa:	2e 5f       	subi	r18, 0xFE	; 254
    24fc:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    24fe:	43 e0       	ldi	r20, 0x03	; 3
    2500:	4d 15       	cp	r20, r13
    2502:	80 f4       	brcc	.+32     	; 0x2524 <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    2504:	ac 01       	movw	r20, r24
    2506:	41 50       	subi	r20, 0x01	; 1
    2508:	51 09       	sbc	r21, r1
    250a:	f8 01       	movw	r30, r16
    250c:	42 8f       	std	Z+26, r20	; 0x1a
    250e:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    2510:	f3 e0       	ldi	r31, 0x03	; 3
    2512:	ef 0e       	add	r14, r31
    2514:	f1 1c       	adc	r15, r1
    2516:	f8 01       	movw	r30, r16
    2518:	e4 86       	std	Z+12, r14	; 0x0c
    251a:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    251c:	4b 81       	ldd	r20, Y+3	; 0x03
    251e:	f5 01       	movw	r30, r10
    2520:	44 a3       	std	Z+36, r20	; 0x24
    2522:	05 c0       	rjmp	.+10     	; 0x252e <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    2524:	f8 01       	movw	r30, r16
    2526:	82 8f       	std	Z+26, r24	; 0x1a
    2528:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    252a:	24 87       	std	Z+12, r18	; 0x0c
    252c:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    252e:	7c 01       	movw	r14, r24
    2530:	e2 0e       	add	r14, r18
    2532:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2534:	d3 94       	inc	r13
    2536:	0e 5f       	subi	r16, 0xFE	; 254
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	ff ef       	ldi	r31, 0xFF	; 255
    253c:	af 1a       	sub	r10, r31
    253e:	bf 0a       	sbc	r11, r31
    2540:	47 e0       	ldi	r20, 0x07	; 7
    2542:	d4 12       	cpse	r13, r20
    2544:	cc cf       	rjmp	.-104    	; 0x24de <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    2546:	2c 96       	adiw	r28, 0x0c	; 12
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	ef 90       	pop	r14
    2558:	df 90       	pop	r13
    255a:	bf 90       	pop	r11
    255c:	af 90       	pop	r10
    255e:	08 95       	ret

00002560 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	a0 97       	sbiw	r28, 0x20	; 32
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    257c:	7c 01       	movw	r14, r24
    257e:	20 e2       	ldi	r18, 0x20	; 32
    2580:	e2 0e       	add	r14, r18
    2582:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    2584:	9e 01       	movw	r18, r28
    2586:	2f 5f       	subi	r18, 0xFF	; 255
    2588:	3f 4f       	sbci	r19, 0xFF	; 255
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	62 e0       	ldi	r22, 0x02	; 2
    258e:	8c 96       	adiw	r24, 0x2c	; 44
    2590:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    2594:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    2596:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    2598:	11 23       	and	r17, r17
    259a:	59 f1       	breq	.+86     	; 0x25f2 <CheckLetter+0x92>
    259c:	01 2f       	mov	r16, r17
    259e:	11 32       	cpi	r17, 0x21	; 33
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <CheckLetter+0x44>
    25a2:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    25a4:	9e 01       	movw	r18, r28
    25a6:	2f 5f       	subi	r18, 0xFF	; 255
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	60 2f       	mov	r22, r16
    25ae:	c7 01       	movw	r24, r14
    25b0:	0e 96       	adiw	r24, 0x0e	; 14
    25b2:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
    25b6:	fe 01       	movw	r30, r28
    25b8:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    25ba:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    25bc:	dd 20       	and	r13, r13
    25be:	61 f0       	breq	.+24     	; 0x25d8 <CheckLetter+0x78>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    25c0:	e1 e0       	ldi	r30, 0x01	; 1
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	ec 0f       	add	r30, r28
    25c6:	fd 1f       	adc	r31, r29
    25c8:	e8 0f       	add	r30, r24
    25ca:	f1 1d       	adc	r31, r1
    25cc:	90 81       	ld	r25, Z
    25ce:	90 62       	ori	r25, 0x20	; 32
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	9c 11       	cpse	r25, r12
    25d4:	0e c0       	rjmp	.+28     	; 0x25f2 <CheckLetter+0x92>
    25d6:	0e c0       	rjmp	.+28     	; 0x25f4 <CheckLetter+0x94>
            }
            if (data[y] == '[') found = 1;
    25d8:	91 91       	ld	r25, Z+
    25da:	dd 24       	eor	r13, r13
    25dc:	d3 94       	inc	r13
    25de:	9b 35       	cpi	r25, 0x5B	; 91
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <CheckLetter+0x84>
    25e2:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    25e4:	8f 5f       	subi	r24, 0xFF	; 255
    25e6:	80 17       	cp	r24, r16
    25e8:	48 f3       	brcs	.-46     	; 0x25bc <CheckLetter+0x5c>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    25ea:	e0 0e       	add	r14, r16
    25ec:	f1 1c       	adc	r15, r1
        x -= max;
    25ee:	10 1b       	sub	r17, r16
    25f0:	d3 cf       	rjmp	.-90     	; 0x2598 <CheckLetter+0x38>
    }
    return 0;
    25f2:	80 e0       	ldi	r24, 0x00	; 0
}
    25f4:	a0 96       	adiw	r28, 0x20	; 32
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	08 95       	ret

0000260c <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    260c:	af 92       	push	r10
    260e:	bf 92       	push	r11
    2610:	df 92       	push	r13
    2612:	ef 92       	push	r14
    2614:	ff 92       	push	r15
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	00 d0       	rcall	.+0      	; 0x2620 <FindChild+0x14>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <FindChild+0x16>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	d6 2e       	mov	r13, r22
    2628:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    262a:	9e 01       	movw	r18, r28
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	64 e0       	ldi	r22, 0x04	; 4
    2634:	80 96       	adiw	r24, 0x20	; 32
    2636:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
    263a:	e9 80       	ldd	r14, Y+1	; 0x01
    263c:	fa 80       	ldd	r15, Y+2	; 0x02
    263e:	fe 24       	eor	r15, r14
    2640:	ef 24       	eor	r14, r15
    2642:	fe 24       	eor	r15, r14
    2644:	0b 81       	ldd	r16, Y+3	; 0x03
    2646:	1c 81       	ldd	r17, Y+4	; 0x04
    2648:	10 27       	eor	r17, r16
    264a:	01 27       	eor	r16, r17
    264c:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    264e:	0e 15       	cp	r16, r14
    2650:	1f 05       	cpc	r17, r15
    2652:	48 f5       	brcc	.+82     	; 0x26a6 <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    2654:	a0 16       	cp	r10, r16
    2656:	b1 06       	cpc	r11, r17
    2658:	60 f0       	brcs	.+24     	; 0x2672 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    265a:	9e 01       	movw	r18, r28
    265c:	2f 5f       	subi	r18, 0xFF	; 255
    265e:	3f 4f       	sbci	r19, 0xFF	; 255
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	62 e0       	ldi	r22, 0x02	; 2
    2664:	c8 01       	movw	r24, r16
    2666:	80 96       	adiw	r24, 0x20	; 32
    2668:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
    266c:	09 81       	ldd	r16, Y+1	; 0x01
    266e:	1a 81       	ldd	r17, Y+2	; 0x02
    2670:	eb cf       	rjmp	.-42     	; 0x2648 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    2672:	9e 01       	movw	r18, r28
    2674:	2f 5f       	subi	r18, 0xFF	; 255
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	c8 01       	movw	r24, r16
    267e:	85 96       	adiw	r24, 0x25	; 37
    2680:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	81 11       	cpse	r24, r1
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    268a:	d1 10       	cpse	r13, r1
    268c:	06 c0       	rjmp	.+12     	; 0x269a <FindChild+0x8e>
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    2690:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
    2694:	81 11       	cpse	r24, r1
    2696:	f9 cf       	rjmp	.-14     	; 0x268a <FindChild+0x7e>
    2698:	e0 cf       	rjmp	.-64     	; 0x265a <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    269a:	6d 2d       	mov	r22, r13
    269c:	c8 01       	movw	r24, r16
    269e:	60 df       	rcall	.-320    	; 0x2560 <CheckLetter>
    26a0:	88 23       	and	r24, r24
    26a2:	d9 f2       	breq	.-74     	; 0x265a <FindChild+0x4e>
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <FindChild+0xa2>
    26ac:	c8 01       	movw	r24, r16
}
    26ae:	24 96       	adiw	r28, 0x04	; 4
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	bf 90       	pop	r11
    26c4:	af 90       	pop	r10
    26c6:	08 95       	ret

000026c8 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    26c8:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    26ca:	9f e9       	ldi	r25, 0x9F	; 159
    26cc:	98 0f       	add	r25, r24
    26ce:	9a 31       	cpi	r25, 0x1A	; 26
    26d0:	38 f0       	brcs	.+14     	; 0x26e0 <InpOkChk+0x18>
    26d2:	90 ed       	ldi	r25, 0xD0	; 208
    26d4:	98 0f       	add	r25, r24
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	9a 30       	cpi	r25, 0x0A	; 10
    26da:	18 f0       	brcs	.+6      	; 0x26e2 <InpOkChk+0x1a>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	08 95       	ret
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    26e2:	08 95       	ret

000026e4 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    26ee:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    26f0:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    26f2:	f8 01       	movw	r30, r16
    26f4:	ed 0f       	add	r30, r29
    26f6:	f1 1d       	adc	r31, r1
    26f8:	20 81       	ld	r18, Z
    26fa:	8c 2f       	mov	r24, r28
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	22 23       	and	r18, r18
    2700:	51 f0       	breq	.+20     	; 0x2716 <CleanInput+0x32>
        data[cnt] = data[x];
    2702:	d8 01       	movw	r26, r16
    2704:	a8 0f       	add	r26, r24
    2706:	b9 1f       	adc	r27, r25
    2708:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    270a:	80 81       	ld	r24, Z
    270c:	dd df       	rcall	.-70     	; 0x26c8 <InpOkChk>
    270e:	81 11       	cpse	r24, r1
    2710:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2712:	df 5f       	subi	r29, 0xFF	; 255
    2714:	ee cf       	rjmp	.-36     	; 0x26f2 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2716:	f8 01       	movw	r30, r16
    2718:	e8 0f       	add	r30, r24
    271a:	f9 1f       	adc	r31, r25
    271c:	10 82       	st	Z, r1
    return cnt;
}
    271e:	8c 2f       	mov	r24, r28
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	08 95       	ret

0000272a <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    272a:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    272c:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <effect>
    2730:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <effect+0x1>
    2734:	89 2b       	or	r24, r25
    2736:	39 f4       	brne	.+14     	; 0x2746 <CheckSend+0x1c>
        effect = currObj.byteField[EFFECTS];
    2738:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2742:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    2746:	20 91 47 3a 	lds	r18, 0x3A47	; 0x803a47 <txAddrNow>
    274a:	28 30       	cpi	r18, 0x08	; 8
    274c:	08 f0       	brcs	.+2      	; 0x2750 <CheckSend+0x26>
    274e:	49 c0       	rjmp	.+146    	; 0x27e2 <CheckSend+0xb8>
    2750:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2754:	88 23       	and	r24, r24
    2756:	09 f4       	brne	.+2      	; 0x275a <CheckSend+0x30>
    2758:	44 c0       	rjmp	.+136    	; 0x27e2 <CheckSend+0xb8>
        if (txStrLen[txAddrNow] == 0){
    275a:	82 2f       	mov	r24, r18
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	fc 01       	movw	r30, r24
    2760:	e8 5b       	subi	r30, 0xB8	; 184
    2762:	f5 4c       	sbci	r31, 0xC5	; 197
    2764:	e0 81       	ld	r30, Z
    2766:	e1 11       	cpse	r30, r1
    2768:	06 c0       	rjmp	.+12     	; 0x2776 <CheckSend+0x4c>
            txPart = 0;
    276a:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3937>
            txAddrNow = TXLISTLEN;
    276e:	88 e0       	ldi	r24, 0x08	; 8
    2770:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <txAddrNow>
    2774:	2e c0       	rjmp	.+92     	; 0x27d2 <CheckSend+0xa8>
        } else if (txPart < txStrLen[txAddrNow]){
    2776:	50 91 06 39 	lds	r21, 0x3906	; 0x803906 <txPart.3937>
    277a:	5e 17       	cp	r21, r30
    277c:	60 f5       	brcc	.+88     	; 0x27d6 <CheckSend+0xac>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    277e:	ce 2f       	mov	r28, r30
    2780:	c5 1b       	sub	r28, r21
    2782:	c1 32       	cpi	r28, 0x21	; 33
    2784:	08 f0       	brcs	.+2      	; 0x2788 <CheckSend+0x5e>
    2786:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	fc 01       	movw	r30, r24
    278e:	e0 5b       	subi	r30, 0xB0	; 176
    2790:	f5 4c       	sbci	r31, 0xC5	; 197
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	21 ef       	ldi	r18, 0xF1	; 241
    2798:	3a e3       	ldi	r19, 0x3A	; 58
    279a:	40 91 46 3a 	lds	r20, 0x3A46	; 0x803a46 <txTypeNow>
    279e:	6c 2f       	mov	r22, r28
    27a0:	85 0f       	add	r24, r21
    27a2:	91 1d       	adc	r25, r1
    27a4:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
            txPart += EEreadLength;
    27a8:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <txPart.3937>
    27ac:	8c 0f       	add	r24, r28
    27ae:	80 93 06 39 	sts	0x3906, r24	; 0x803906 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    27b2:	ec 2f       	mov	r30, r28
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	ef 50       	subi	r30, 0x0F	; 15
    27b8:	f5 4c       	sbci	r31, 0xC5	; 197
    27ba:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    27bc:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <txBuffer>
    27c0:	81 11       	cpse	r24, r1
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <CheckSend+0xa0>
    27c4:	8b ed       	ldi	r24, 0xDB	; 219
    27c6:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <txBuffer>
            SerSend(&txBuffer[0]);
    27ca:	81 ef       	ldi	r24, 0xF1	; 241
    27cc:	9a e3       	ldi	r25, 0x3A	; 58
    27ce:	0e 94 b8 08 	call	0x1170	; 0x1170 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	0b c0       	rjmp	.+22     	; 0x27ec <CheckSend+0xc2>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    27d6:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <txPart.3937>
            ++txAddrNow;
    27da:	2f 5f       	subi	r18, 0xFF	; 255
    27dc:	20 93 47 3a 	sts	0x3A47, r18	; 0x803a47 <txAddrNow>
    27e0:	f8 cf       	rjmp	.-16     	; 0x27d2 <CheckSend+0xa8>
        }
    } else if (serTxDone) return 0; //All is sent!
    27e2:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	91 11       	cpse	r25, r1
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    27ec:	cf 91       	pop	r28
    27ee:	08 95       	ret

000027f0 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    27f4:	c0 91 1a 39 	lds	r28, 0x391A	; 0x80391a <responseList>
    27f8:	cc 23       	and	r28, r28
    27fa:	b1 f1       	breq	.+108    	; 0x2868 <CheckResponse+0x78>
        --responseList;
    27fc:	c1 50       	subi	r28, 0x01	; 1
    27fe:	c0 93 1a 39 	sts	0x391A, r28	; 0x80391a <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2802:	d0 91 05 39 	lds	r29, 0x3905	; 0x803905 <number.3941>
    2806:	2d 2f       	mov	r18, r29
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	f9 01       	movw	r30, r18
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	e5 5e       	subi	r30, 0xE5	; 229
    2812:	f6 4c       	sbci	r31, 0xC6	; 198
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	80 3f       	cpi	r24, 0xF0	; 240
    281a:	4f ef       	ldi	r20, 0xFF	; 255
    281c:	94 07       	cpc	r25, r20
    281e:	51 f4       	brne	.+20     	; 0x2834 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2820:	60 91 35 3a 	lds	r22, 0x3A35	; 0x803a35 <currObj+0x1a>
    2824:	70 91 36 3a 	lds	r23, 0x3A36	; 0x803a36 <currObj+0x1b>
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0xc>
    282e:	90 91 28 3a 	lds	r25, 0x3A28	; 0x803a28 <currObj+0xd>
    2832:	0d c0       	rjmp	.+26     	; 0x284e <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2834:	d9 01       	movw	r26, r18
    2836:	aa 0f       	add	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	a5 56       	subi	r26, 0x65	; 101
    283c:	b6 4c       	sbci	r27, 0xC6	; 198
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	f9 01       	movw	r30, r18
    2844:	e5 5a       	subi	r30, 0xA5	; 165
    2846:	f6 4c       	sbci	r31, 0xC6	; 198
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	4c 91       	ld	r20, X
    284e:	56 dd       	rcall	.-1364   	; 0x22fc <PrepareSending>
        }
        number++;
    2850:	df 5f       	subi	r29, 0xFF	; 255
    2852:	d0 93 05 39 	sts	0x3905, r29	; 0x803905 <number.3941>

        if (responseList == 0) {
    2856:	c1 11       	cpse	r28, r1
    2858:	06 c0       	rjmp	.+12     	; 0x2866 <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    285a:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    285c:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
            number = 0;
    2860:	10 92 05 39 	sts	0x3905, r1	; 0x803905 <number.3941>
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <CheckResponse+0x78>
            return 0;
        }
        return 1;
    2866:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    2868:	8c 2f       	mov	r24, r28
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	08 95       	ret

00002870 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2870:	3f 92       	push	r3
    2872:	4f 92       	push	r4
    2874:	5f 92       	push	r5
    2876:	6f 92       	push	r6
    2878:	7f 92       	push	r7
    287a:	8f 92       	push	r8
    287c:	9f 92       	push	r9
    287e:	af 92       	push	r10
    2880:	bf 92       	push	r11
    2882:	cf 92       	push	r12
    2884:	df 92       	push	r13
    2886:	ef 92       	push	r14
    2888:	ff 92       	push	r15
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	2a 97       	sbiw	r28, 0x0a	; 10
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    289e:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    28a2:	8f 3f       	cpi	r24, 0xFF	; 255
    28a4:	49 f4       	brne	.+18     	; 0x28b8 <CheckInput+0x48>
        //Start at first location
        PopulateObject(route[0], &currObj);
    28a6:	6b e1       	ldi	r22, 0x1B	; 27
    28a8:	7a e3       	ldi	r23, 0x3A	; 58
    28aa:	80 91 db 39 	lds	r24, 0x39DB	; 0x8039db <route>
    28ae:	90 91 dc 39 	lds	r25, 0x39DC	; 0x8039dc <route+0x1>
    28b2:	dd dd       	rcall	.-1094   	; 0x246e <PopulateObject>
        currDepth = 0;
    28b4:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <currDepth>
    }

    if (serRxDone){
    28b8:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <serRxDone>
    28bc:	88 23       	and	r24, r24
    28be:	09 f4       	brne	.+2      	; 0x28c2 <CheckInput+0x52>
    28c0:	f4 c1       	rjmp	.+1000   	; 0x2caa <CheckInput+0x43a>

        //Special input requested from user by game
        if (specialInput[0]){
    28c2:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    28c6:	88 23       	and	r24, r24
    28c8:	09 f4       	brne	.+2      	; 0x28cc <CheckInput+0x5c>
    28ca:	4f c0       	rjmp	.+158    	; 0x296a <CheckInput+0xfa>
            specialPassed = 0;
    28cc:	10 92 09 39 	sts	0x3909, r1	; 0x803909 <specialPassed>
            data[0] = 'a';
    28d0:	81 e6       	ldi	r24, 0x61	; 97
    28d2:	f8 01       	movw	r30, r16
    28d4:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    28d6:	6a e0       	ldi	r22, 0x0A	; 10
    28d8:	79 e3       	ldi	r23, 0x39	; 57
    28da:	85 e7       	ldi	r24, 0x75	; 117
    28dc:	9a e3       	ldi	r25, 0x3A	; 58
    28de:	f4 dc       	rcall	.-1560   	; 0x22c8 <StartsWith>
    28e0:	f8 2e       	mov	r15, r24
    28e2:	88 23       	and	r24, r24
    28e4:	21 f0       	breq	.+8      	; 0x28ee <CheckInput+0x7e>
                specialPassed = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	80 93 09 39 	sts	0x3909, r24	; 0x803909 <specialPassed>
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <CheckInput+0x86>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    28ee:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    28f2:	81 33       	cpi	r24, 0x31	; 49
    28f4:	11 f0       	breq	.+4      	; 0x28fa <CheckInput+0x8a>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    28f6:	f1 2c       	mov	r15, r1
    28f8:	da c1       	rjmp	.+948    	; 0x2cae <CheckInput+0x43e>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    28fa:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <specialInput+0x2>
    28fe:	81 11       	cpse	r24, r1
    2900:	fa cf       	rjmp	.-12     	; 0x28f6 <CheckInput+0x86>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2902:	85 e7       	ldi	r24, 0x75	; 117
    2904:	9a e3       	ldi	r25, 0x3A	; 58
    2906:	ee de       	rcall	.-548    	; 0x26e4 <CleanInput>
                specialPassed = 2;
    2908:	92 e0       	ldi	r25, 0x02	; 2
    290a:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <specialPassed>
                data[1] = 0;
    290e:	f8 01       	movw	r30, r16
    2910:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2912:	82 30       	cpi	r24, 0x02	; 2
    2914:	80 f3       	brcs	.-32     	; 0x28f6 <CheckInput+0x86>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    2916:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    291a:	81 33       	cpi	r24, 0x31	; 49
    291c:	60 f3       	brcs	.-40     	; 0x28f6 <CheckInput+0x86>
    291e:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    2922:	85 33       	cpi	r24, 0x35	; 53
    2924:	40 f7       	brcc	.-48     	; 0x28f6 <CheckInput+0x86>
                        serRx[1] |= 0x20;
    2926:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    292a:	80 62       	ori	r24, 0x20	; 32
    292c:	80 93 76 3a 	sts	0x3A76, r24	; 0x803a76 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2930:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    2934:	81 36       	cpi	r24, 0x61	; 97
    2936:	61 f0       	breq	.+24     	; 0x2950 <CheckInput+0xe0>
    2938:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    293c:	85 36       	cpi	r24, 0x65	; 101
    293e:	41 f0       	breq	.+16     	; 0x2950 <CheckInput+0xe0>
    2940:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    2944:	86 36       	cpi	r24, 0x66	; 102
    2946:	21 f0       	breq	.+8      	; 0x2950 <CheckInput+0xe0>
    2948:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    294c:	87 37       	cpi	r24, 0x77	; 119
    294e:	99 f6       	brne	.-90     	; 0x28f6 <CheckInput+0x86>
                            data[1] = specialInput[1]+0x11;
    2950:	80 91 0b 39 	lds	r24, 0x390B	; 0x80390b <specialInput+0x1>
    2954:	8f 5e       	subi	r24, 0xEF	; 239
    2956:	f8 01       	movw	r30, r16
    2958:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    295a:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    295e:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2960:	80 91 76 3a 	lds	r24, 0x3A76	; 0x803a76 <serRx+0x1>
    2964:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    2966:	14 82       	std	Z+4, r1	; 0x04
    2968:	a2 c1       	rjmp	.+836    	; 0x2cae <CheckInput+0x43e>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    296a:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
    296e:	83 32       	cpi	r24, 0x23	; 35
    2970:	89 f5       	brne	.+98     	; 0x29d4 <CheckInput+0x164>
    2972:	8d b3       	in	r24, 0x1d	; 29
    2974:	86 30       	cpi	r24, 0x06	; 6
    2976:	71 f5       	brne	.+92     	; 0x29d4 <CheckInput+0x164>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    297e:	fc 01       	movw	r30, r24
    2980:	eb 58       	subi	r30, 0x8B	; 139
    2982:	f5 4c       	sbci	r31, 0xC5	; 197
    2984:	20 81       	ld	r18, Z
    2986:	20 53       	subi	r18, 0x30	; 48
    2988:	20 83       	st	Z, r18
                    bitNr *= 10;
    298a:	11 0f       	add	r17, r17
    298c:	21 2f       	mov	r18, r17
    298e:	22 0f       	add	r18, r18
    2990:	22 0f       	add	r18, r18
    2992:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2994:	20 91 76 3a 	lds	r18, 0x3A76	; 0x803a76 <serRx+0x1>
    2998:	23 30       	cpi	r18, 0x03	; 3
    299a:	48 f4       	brcc	.+18     	; 0x29ae <CheckInput+0x13e>
                    if (serRx[x] < 10) {
    299c:	20 81       	ld	r18, Z
    299e:	2a 30       	cpi	r18, 0x0A	; 10
    29a0:	b8 f4       	brcc	.+46     	; 0x29d0 <CheckInput+0x160>
                        bitNr += serRx[x];
    29a2:	20 81       	ld	r18, Z
    29a4:	12 0f       	add	r17, r18
    29a6:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    29a8:	84 30       	cpi	r24, 0x04	; 4
    29aa:	91 05       	cpc	r25, r1
    29ac:	41 f7       	brne	.-48     	; 0x297e <CheckInput+0x10e>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    29ae:	81 2f       	mov	r24, r17
    29b0:	8f 77       	andi	r24, 0x7F	; 127
    29b2:	71 f0       	breq	.+28     	; 0x29d0 <CheckInput+0x160>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    29b4:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <serRx+0x4>
    29b8:	60 91 7a 3a 	lds	r22, 0x3A7A	; 0x803a7a <serRx+0x5>
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	78 2b       	or	r23, r24
    29c0:	81 2f       	mov	r24, r17
    29c2:	80 95       	com	r24
    29c4:	2c dc       	rcall	.-1960   	; 0x221e <Cheat>
    29c6:	88 23       	and	r24, r24
    29c8:	19 f0       	breq	.+6      	; 0x29d0 <CheckInput+0x160>
    29ca:	81 2f       	mov	r24, r17
    29cc:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	40 c0       	rjmp	.+128    	; 0x2a54 <CheckInput+0x1e4>
    29d4:	d8 01       	movw	r26, r16
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    29da:	fc 01       	movw	r30, r24
    29dc:	eb 58       	subi	r30, 0x8B	; 139
    29de:	f5 4c       	sbci	r31, 0xC5	; 197
    29e0:	20 81       	ld	r18, Z
    29e2:	21 34       	cpi	r18, 0x41	; 65
    29e4:	18 f0       	brcs	.+6      	; 0x29ec <CheckInput+0x17c>
    29e6:	20 81       	ld	r18, Z
    29e8:	2b 35       	cpi	r18, 0x5B	; 91
    29ea:	10 f0       	brcs	.+4      	; 0x29f0 <CheckInput+0x180>
    29ec:	20 81       	ld	r18, Z
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <CheckInput+0x184>
    29f0:	20 81       	ld	r18, Z
    29f2:	20 62       	ori	r18, 0x20	; 32
    29f4:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    29f6:	20 81       	ld	r18, Z
    29f8:	21 11       	cpse	r18, r1
    29fa:	05 c0       	rjmp	.+10     	; 0x2a06 <CheckInput+0x196>
                    data[x] = 0;
    29fc:	f8 01       	movw	r30, r16
    29fe:	e8 0f       	add	r30, r24
    2a00:	f1 1d       	adc	r31, r1
    2a02:	10 82       	st	Z, r1
                    break;
    2a04:	05 c0       	rjmp	.+10     	; 0x2a10 <CheckInput+0x1a0>
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2a0a:	81 34       	cpi	r24, 0x41	; 65
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	29 f7       	brne	.-54     	; 0x29da <CheckInput+0x16a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2a10:	80 91 75 3a 	lds	r24, 0x3A75	; 0x803a75 <serRx>
                data[0] = 0;
    2a14:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2a16:	81 11       	cpse	r24, r1
    2a18:	05 c0       	rjmp	.+10     	; 0x2a24 <CheckInput+0x1b4>
                data[0] = 0;
    2a1a:	10 82       	st	Z, r1
                RXCNT = 0;
    2a1c:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2a1e:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    2a22:	43 c1       	rjmp	.+646    	; 0x2caa <CheckInput+0x43a>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2a24:	80 81       	ld	r24, Z
    2a26:	8f 33       	cpi	r24, 0x3F	; 63
    2a28:	11 f0       	breq	.+4      	; 0x2a2e <CheckInput+0x1be>
    2a2a:	88 36       	cpi	r24, 0x68	; 104
    2a2c:	b9 f4       	brne	.+46     	; 0x2a5c <CheckInput+0x1ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a2e:	83 e9       	ldi	r24, 0x93	; 147
    2a30:	9b e7       	ldi	r25, 0x7B	; 123
    2a32:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2a36:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2a3a:	8d e6       	ldi	r24, 0x6D	; 109
    2a3c:	94 e0       	ldi	r25, 0x04	; 4
    2a3e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2a42:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2a4e:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	90 dc       	rcall	.-1760   	; 0x2376 <SetStandardResponse>
    2a56:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    2a5a:	27 c1       	rjmp	.+590    	; 0x2caa <CheckInput+0x43a>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2a5c:	81 36       	cpi	r24, 0x61	; 97
    2a5e:	49 f4       	brne	.+18     	; 0x2a72 <CheckInput+0x202>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a60:	8e e6       	ldi	r24, 0x6E	; 110
    2a62:	9a e7       	ldi	r25, 0x7A	; 122
    2a64:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2a68:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2a6c:	85 e2       	ldi	r24, 0x25	; 37
    2a6e:	91 e0       	ldi	r25, 0x01	; 1
    2a70:	e6 cf       	rjmp	.-52     	; 0x2a3e <CheckInput+0x1ce>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2a72:	87 37       	cpi	r24, 0x77	; 119
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <CheckInput+0x208>
    2a76:	41 c0       	rjmp	.+130    	; 0x2afa <CheckInput+0x28a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a78:	8d e8       	ldi	r24, 0x8D	; 141
    2a7a:	96 e7       	ldi	r25, 0x76	; 118
    2a7c:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2a80:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2a84:	82 e1       	ldi	r24, 0x12	; 18
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2a8c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2a90:	21 e0       	ldi	r18, 0x01	; 1
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    2a98:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    2a9c:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <whoami>
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	ee 0f       	add	r30, r30
    2aa6:	ff 1f       	adc	r31, r31
    2aa8:	e2 54       	subi	r30, 0x42	; 66
    2aaa:	ff 43       	sbci	r31, 0x3F	; 63
    2aac:	40 81       	ld	r20, Z
    2aae:	51 81       	ldd	r21, Z+1	; 0x01
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	ea 54       	subi	r30, 0x4A	; 74
    2ab8:	ff 43       	sbci	r31, 0x3F	; 63
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2aba:	80 81       	ld	r24, Z
    2abc:	91 81       	ldd	r25, Z+1	; 0x01
    2abe:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    2ac2:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    2ac6:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    2aca:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    2ace:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    2ad2:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad6:	8f e5       	ldi	r24, 0x5F	; 95
    2ad8:	96 e7       	ldi	r25, 0x76	; 118
    2ada:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    2ade:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    2ae2:	8a e1       	ldi	r24, 0x1A	; 26
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    2aea:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    2aee:	20 93 a1 39 	sts	0x39A1, r18	; 0x8039a1 <reactStr+0x86>
    2af2:	30 93 a2 39 	sts	0x39A2, r19	; 0x8039a2 <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    2af6:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2af8:	ad cf       	rjmp	.-166    	; 0x2a54 <CheckInput+0x1e4>
    2afa:	64 e9       	ldi	r22, 0x94	; 148
    2afc:	70 ec       	ldi	r23, 0xC0	; 192
    2afe:	c8 01       	movw	r24, r16
    2b00:	e3 db       	rcall	.-2106   	; 0x22c8 <StartsWith>
    2b02:	88 23       	and	r24, r24
    2b04:	19 f1       	breq	.+70     	; 0x2b4c <CheckInput+0x2dc>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2b06:	8e ee       	ldi	r24, 0xEE	; 238
    2b08:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    2b0c:	8f ee       	ldi	r24, 0xEF	; 239
    2b0e:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    2b12:	80 ef       	ldi	r24, 0xF0	; 240
    2b14:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    2b18:	81 ef       	ldi	r24, 0xF1	; 241
    2b1a:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                }
                SaveGameState();
    2b1e:	0e 94 a9 09 	call	0x1352	; 0x1352 <SaveGameState>

                uint8_t cheat[] = "Got ya! ";
    2b22:	89 e0       	ldi	r24, 0x09	; 9
    2b24:	e7 ea       	ldi	r30, 0xA7	; 167
    2b26:	f0 ec       	ldi	r31, 0xC0	; 192
    2b28:	de 01       	movw	r26, r28
    2b2a:	11 96       	adiw	r26, 0x01	; 1
    2b2c:	01 90       	ld	r0, Z+
    2b2e:	0d 92       	st	X+, r0
    2b30:	8a 95       	dec	r24
    2b32:	e1 f7       	brne	.-8      	; 0x2b2c <CheckInput+0x2bc>
                SerSpeed(60);
    2b34:	8c e3       	ldi	r24, 0x3C	; 60
    2b36:	0e 94 c9 08 	call	0x1192	; 0x1192 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2b3a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2b3e:	88 23       	and	r24, r24
    2b40:	e1 f3       	breq	.-8      	; 0x2b3a <CheckInput+0x2ca>
    2b42:	ce 01       	movw	r24, r28
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	0e 94 b8 08 	call	0x1170	; 0x1170 <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2b4a:	f7 cf       	rjmp	.-18     	; 0x2b3a <CheckInput+0x2ca>
    2b4c:	6a e9       	ldi	r22, 0x9A	; 154
    2b4e:	70 ec       	ldi	r23, 0xC0	; 192
    2b50:	c8 01       	movw	r24, r16
    2b52:	ba db       	rcall	.-2188   	; 0x22c8 <StartsWith>
    2b54:	88 23       	and	r24, r24
    2b56:	81 f1       	breq	.+96     	; 0x2bb8 <CheckInput+0x348>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2b58:	8f ef       	ldi	r24, 0xFF	; 255
    2b5a:	8a 87       	std	Y+10, r24	; 0x0a
    2b5c:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	be 01       	movw	r22, r28
    2b62:	66 5f       	subi	r22, 0xF6	; 246
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	81 2f       	mov	r24, r17
    2b68:	0e 94 44 08 	call	0x1088	; 0x1088 <EEWrite>
    2b6c:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b6e:	10 32       	cpi	r17, 0x20	; 32
    2b70:	b1 f7       	brne	.-20     	; 0x2b5e <CheckInput+0x2ee>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2b72:	8e ee       	ldi	r24, 0xEE	; 238
    2b74:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    2b78:	8f ee       	ldi	r24, 0xEF	; 239
    2b7a:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    2b7e:	80 ef       	ldi	r24, 0xF0	; 240
    2b80:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    2b84:	81 ef       	ldi	r24, 0xF1	; 241
    2b86:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                }
                
                SaveGameState();
    2b8a:	0e 94 a9 09 	call	0x1352	; 0x1352 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2b8e:	88 e0       	ldi	r24, 0x08	; 8
    2b90:	e0 eb       	ldi	r30, 0xB0	; 176
    2b92:	f0 ec       	ldi	r31, 0xC0	; 192
    2b94:	de 01       	movw	r26, r28
    2b96:	11 96       	adiw	r26, 0x01	; 1
    2b98:	01 90       	ld	r0, Z+
    2b9a:	0d 92       	st	X+, r0
    2b9c:	8a 95       	dec	r24
    2b9e:	e1 f7       	brne	.-8      	; 0x2b98 <CheckInput+0x328>
                SerSpeed(60);
    2ba0:	8c e3       	ldi	r24, 0x3C	; 60
    2ba2:	0e 94 c9 08 	call	0x1192	; 0x1192 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2ba6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2baa:	88 23       	and	r24, r24
    2bac:	e1 f3       	breq	.-8      	; 0x2ba6 <CheckInput+0x336>
    2bae:	ce 01       	movw	r24, r28
    2bb0:	01 96       	adiw	r24, 0x01	; 1
    2bb2:	0e 94 b8 08 	call	0x1170	; 0x1170 <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2bb6:	f7 cf       	rjmp	.-18     	; 0x2ba6 <CheckInput+0x336>
    2bb8:	61 ea       	ldi	r22, 0xA1	; 161
    2bba:	70 ec       	ldi	r23, 0xC0	; 192
    2bbc:	c8 01       	movw	r24, r16
    2bbe:	84 db       	rcall	.-2296   	; 0x22c8 <StartsWith>
    2bc0:	88 23       	and	r24, r24
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <CheckInput+0x356>
    2bc4:	98 ce       	rjmp	.-720    	; 0x28f6 <CheckInput+0x86>
    2bc6:	8b e1       	ldi	r24, 0x1B	; 27
    2bc8:	c8 2e       	mov	r12, r24
    2bca:	89 e3       	ldi	r24, 0x39	; 57
    2bcc:	d8 2e       	mov	r13, r24
    2bce:	9b e5       	ldi	r25, 0x5B	; 91
    2bd0:	e9 2e       	mov	r14, r25
    2bd2:	99 e3       	ldi	r25, 0x39	; 57
    2bd4:	f9 2e       	mov	r15, r25
    2bd6:	0b e9       	ldi	r16, 0x9B	; 155
    2bd8:	19 e3       	ldi	r17, 0x39	; 57
    2bda:	28 e1       	ldi	r18, 0x18	; 24
    2bdc:	32 2e       	mov	r3, r18
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bde:	3d e9       	ldi	r19, 0x9D	; 157
    2be0:	63 2e       	mov	r6, r19
    2be2:	34 e7       	ldi	r19, 0x74	; 116
    2be4:	73 2e       	mov	r7, r19
    reactStr[1][number]=length;
    2be6:	42 e0       	ldi	r20, 0x02	; 2
    2be8:	84 2e       	mov	r8, r20
    2bea:	91 2c       	mov	r9, r1
    reactStr[2][number]=type;
    2bec:	aa 24       	eor	r10, r10
    2bee:	a3 94       	inc	r10
    2bf0:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bf2:	67 e5       	ldi	r22, 0x57	; 87
    2bf4:	46 2e       	mov	r4, r22
    2bf6:	6a e7       	ldi	r22, 0x7A	; 122
    2bf8:	56 2e       	mov	r5, r22
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	be 01       	movw	r22, r28
    2bfe:	6f 5f       	subi	r22, 0xFF	; 255
    2c00:	7f 4f       	sbci	r23, 0xFF	; 255
    2c02:	83 2d       	mov	r24, r3
    2c04:	0e 94 34 08 	call	0x1068	; 0x1068 <EERead>
                    bit = 0xff-bit;
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	80 95       	com	r24
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c0e:	f6 01       	movw	r30, r12
    2c10:	60 82       	st	Z, r6
    2c12:	71 82       	std	Z+1, r7	; 0x01
    reactStr[1][number]=length;
    2c14:	f7 01       	movw	r30, r14
    2c16:	80 82       	st	Z, r8
    2c18:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	a0 82       	st	Z, r10
    2c1e:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c20:	28 2f       	mov	r18, r24
    2c22:	22 95       	swap	r18
    2c24:	2f 70       	andi	r18, 0x0F	; 15
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	23 57       	subi	r18, 0x73	; 115
    2c2a:	3b 48       	sbci	r19, 0x8B	; 139
    2c2c:	f6 01       	movw	r30, r12
    2c2e:	22 83       	std	Z+2, r18	; 0x02
    2c30:	33 83       	std	Z+3, r19	; 0x03
    reactStr[1][number]=length;
    2c32:	f7 01       	movw	r30, r14
    2c34:	a2 82       	std	Z+2, r10	; 0x02
    2c36:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2c38:	f8 01       	movw	r30, r16
    2c3a:	a2 82       	std	Z+2, r10	; 0x02
    2c3c:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c3e:	8f 70       	andi	r24, 0x0F	; 15
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	83 57       	subi	r24, 0x73	; 115
    2c44:	9b 48       	sbci	r25, 0x8B	; 139
    2c46:	f6 01       	movw	r30, r12
    2c48:	84 83       	std	Z+4, r24	; 0x04
    2c4a:	95 83       	std	Z+5, r25	; 0x05
    reactStr[1][number]=length;
    2c4c:	f7 01       	movw	r30, r14
    2c4e:	a4 82       	std	Z+4, r10	; 0x04
    2c50:	b5 82       	std	Z+5, r11	; 0x05
    reactStr[2][number]=type;
    2c52:	f8 01       	movw	r30, r16
    2c54:	a4 82       	std	Z+4, r10	; 0x04
    2c56:	b5 82       	std	Z+5, r11	; 0x05
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c58:	f6 01       	movw	r30, r12
    2c5a:	46 82       	std	Z+6, r4	; 0x06
    2c5c:	57 82       	std	Z+7, r5	; 0x07
    reactStr[1][number]=length;
    2c5e:	f7 01       	movw	r30, r14
    2c60:	86 82       	std	Z+6, r8	; 0x06
    2c62:	97 82       	std	Z+7, r9	; 0x07
    reactStr[2][number]=type;
    2c64:	f8 01       	movw	r30, r16
    2c66:	a6 82       	std	Z+6, r10	; 0x06
    2c68:	b7 82       	std	Z+7, r11	; 0x07
    2c6a:	33 94       	inc	r3
    2c6c:	f8 e0       	ldi	r31, 0x08	; 8
    2c6e:	cf 0e       	add	r12, r31
    2c70:	d1 1c       	adc	r13, r1
    2c72:	88 e0       	ldi	r24, 0x08	; 8
    2c74:	e8 0e       	add	r14, r24
    2c76:	f1 1c       	adc	r15, r1
    2c78:	08 5f       	subi	r16, 0xF8	; 248
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2c7c:	e0 e2       	ldi	r30, 0x20	; 32
    2c7e:	3e 12       	cpse	r3, r30
    2c80:	bc cf       	rjmp	.-136    	; 0x2bfa <CheckInput+0x38a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c82:	89 e5       	ldi	r24, 0x59	; 89
    2c84:	9a e7       	ldi	r25, 0x7A	; 122
    2c86:	80 93 59 39 	sts	0x3959, r24	; 0x803959 <reactStr+0x3e>
    2c8a:	90 93 5a 39 	sts	0x395A, r25	; 0x80395a <reactStr+0x3f>
    reactStr[1][number]=length;
    2c8e:	84 e0       	ldi	r24, 0x04	; 4
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	80 93 99 39 	sts	0x3999, r24	; 0x803999 <reactStr+0x7e>
    2c96:	90 93 9a 39 	sts	0x399A, r25	; 0x80399a <reactStr+0x7f>
    reactStr[2][number]=type;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	80 93 d9 39 	sts	0x39D9, r24	; 0x8039d9 <reactStr+0xbe>
    2ca2:	90 93 da 39 	sts	0x39DA, r25	; 0x8039da <reactStr+0xbf>
                    SetResponse(x*4+1, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*4+2, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    2ca6:	30 92 1a 39 	sts	0x391A, r3	; 0x80391a <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2caa:	ff 24       	eor	r15, r15
    2cac:	f3 94       	inc	r15
}
    2cae:	8f 2d       	mov	r24, r15
    2cb0:	2a 96       	adiw	r28, 0x0a	; 10
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	bf 90       	pop	r11
    2cc8:	af 90       	pop	r10
    2cca:	9f 90       	pop	r9
    2ccc:	8f 90       	pop	r8
    2cce:	7f 90       	pop	r7
    2cd0:	6f 90       	pop	r6
    2cd2:	5f 90       	pop	r5
    2cd4:	4f 90       	pop	r4
    2cd6:	3f 90       	pop	r3
    2cd8:	08 95       	ret

00002cda <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2cda:	9f 92       	push	r9
    2cdc:	af 92       	push	r10
    2cde:	bf 92       	push	r11
    2ce0:	cf 92       	push	r12
    2ce2:	df 92       	push	r13
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	ab 97       	sbiw	r28, 0x2b	; 43
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	de bf       	out	0x3e, r29	; 62
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2cfa:	99 24       	eor	r9, r9
    2cfc:	93 94       	inc	r9
    2cfe:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	fc 01       	movw	r30, r24
    2d04:	ee 0f       	add	r30, r30
    2d06:	ff 1f       	adc	r31, r31
    2d08:	e5 5e       	subi	r30, 0xE5	; 229
    2d0a:	f6 4c       	sbci	r31, 0xC6	; 198
    2d0c:	2c ec       	ldi	r18, 0xCC	; 204
    2d0e:	37 e7       	ldi	r19, 0x77	; 119
    2d10:	20 83       	st	Z, r18
    2d12:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2d14:	fc 01       	movw	r30, r24
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	e5 5a       	subi	r30, 0xA5	; 165
    2d1c:	f6 4c       	sbci	r31, 0xC6	; 198
    2d1e:	26 e1       	ldi	r18, 0x16	; 22
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	20 83       	st	Z, r18
    2d24:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	e5 56       	subi	r30, 0x65	; 101
    2d2e:	f6 4c       	sbci	r31, 0xC6	; 198
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	80 83       	st	Z, r24
    2d36:	91 83       	std	Z+1, r25	; 0x01
    2d38:	0e e3       	ldi	r16, 0x3E	; 62
    2d3a:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d3c:	37 e5       	ldi	r19, 0x57	; 87
    2d3e:	e3 2e       	mov	r14, r19
    2d40:	3a e7       	ldi	r19, 0x7A	; 122
    2d42:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2d44:	42 e0       	ldi	r20, 0x02	; 2
    2d46:	c4 2e       	mov	r12, r20
    2d48:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2d4a:	aa 24       	eor	r10, r10
    2d4c:	a3 94       	inc	r10
    2d4e:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2d50:	f8 01       	movw	r30, r16
    2d52:	81 91       	ld	r24, Z+
    2d54:	91 91       	ld	r25, Z+
    2d56:	8f 01       	movw	r16, r30
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	c9 f1       	breq	.+114    	; 0x2dce <ShowInventory+0xf4>
            PopulateObject(inventory[x], &actObj1);
    2d5c:	be 01       	movw	r22, r28
    2d5e:	6f 5f       	subi	r22, 0xFF	; 255
    2d60:	7f 4f       	sbci	r23, 0xFF	; 255
    2d62:	85 db       	rcall	.-2294   	; 0x246e <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2d64:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2d66:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d68:	89 2d       	mov	r24, r9
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	ee 0f       	add	r30, r30
    2d70:	ff 1f       	adc	r31, r31
    2d72:	e5 5e       	subi	r30, 0xE5	; 229
    2d74:	f6 4c       	sbci	r31, 0xC6	; 198
    2d76:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d78:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d7a:	40 83       	st	Z, r20
    2d7c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2d7e:	fc 01       	movw	r30, r24
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	e5 5a       	subi	r30, 0xA5	; 165
    2d86:	f6 4c       	sbci	r31, 0xC6	; 198
    2d88:	20 83       	st	Z, r18
    2d8a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	fc 01       	movw	r30, r24
    2d92:	e5 56       	subi	r30, 0x65	; 101
    2d94:	f6 4c       	sbci	r31, 0xC6	; 198
    2d96:	10 82       	st	Z, r1
    2d98:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	89 0d       	add	r24, r9
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	93 94       	inc	r9
    2da2:	93 94       	inc	r9
    2da4:	fc 01       	movw	r30, r24
    2da6:	ee 0f       	add	r30, r30
    2da8:	ff 1f       	adc	r31, r31
    2daa:	e5 5e       	subi	r30, 0xE5	; 229
    2dac:	f6 4c       	sbci	r31, 0xC6	; 198
    2dae:	e0 82       	st	Z, r14
    2db0:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2db2:	fc 01       	movw	r30, r24
    2db4:	ee 0f       	add	r30, r30
    2db6:	ff 1f       	adc	r31, r31
    2db8:	e5 5a       	subi	r30, 0xA5	; 165
    2dba:	f6 4c       	sbci	r31, 0xC6	; 198
    2dbc:	c0 82       	st	Z, r12
    2dbe:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2dc0:	88 0f       	add	r24, r24
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e5 56       	subi	r30, 0x65	; 101
    2dc8:	f6 4c       	sbci	r31, 0xC6	; 198
    2dca:	a0 82       	st	Z, r10
    2dcc:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2dce:	f8 e3       	ldi	r31, 0x38	; 56
    2dd0:	02 34       	cpi	r16, 0x42	; 66
    2dd2:	1f 07       	cpc	r17, r31
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <ShowInventory+0xfe>
    2dd6:	bc cf       	rjmp	.-136    	; 0x2d50 <ShowInventory+0x76>
        }
    }
    elements -= 1;
            
    return elements;
}
    2dd8:	8f ef       	ldi	r24, 0xFF	; 255
    2dda:	89 0d       	add	r24, r9
    2ddc:	ab 96       	adiw	r28, 0x2b	; 43
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	1f 91       	pop	r17
    2de8:	0f 91       	pop	r16
    2dea:	ff 90       	pop	r15
    2dec:	ef 90       	pop	r14
    2dee:	df 90       	pop	r13
    2df0:	cf 90       	pop	r12
    2df2:	bf 90       	pop	r11
    2df4:	af 90       	pop	r10
    2df6:	9f 90       	pop	r9
    2df8:	08 95       	ret

00002dfa <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2dfa:	6f 92       	push	r6
    2dfc:	7f 92       	push	r7
    2dfe:	8f 92       	push	r8
    2e00:	9f 92       	push	r9
    2e02:	af 92       	push	r10
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	28 97       	sbiw	r28, 0x08	; 8
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2e22:	60 dc       	rcall	.-1856   	; 0x26e4 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2e24:	c3 01       	movw	r24, r6
    2e26:	5e dc       	rcall	.-1860   	; 0x26e4 <CleanInput>
    2e28:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e2a:	29 e5       	ldi	r18, 0x59	; 89
    2e2c:	3a e7       	ldi	r19, 0x7A	; 122
    2e2e:	20 93 1b 39 	sts	0x391B, r18	; 0x80391b <reactStr>
    2e32:	30 93 1c 39 	sts	0x391C, r19	; 0x80391c <reactStr+0x1>
    reactStr[1][number]=length;
    2e36:	84 e0       	ldi	r24, 0x04	; 4
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	80 93 5b 39 	sts	0x395B, r24	; 0x80395b <reactStr+0x40>
    2e3e:	90 93 5c 39 	sts	0x395C, r25	; 0x80395c <reactStr+0x41>
    reactStr[2][number]=type;
    2e42:	01 e0       	ldi	r16, 0x01	; 1
    2e44:	10 e0       	ldi	r17, 0x00	; 0
    2e46:	00 93 9b 39 	sts	0x399B, r16	; 0x80399b <reactStr+0x80>
    2e4a:	10 93 9c 39 	sts	0x399C, r17	; 0x80399c <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2e4e:	ff 20       	and	r15, r15
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <ProcessInput+0x5a>
    2e52:	68 c7       	rjmp	.+3792   	; 0x3d24 <ProcessInput+0xf2a>

        //eXit to previous location
        if (data[0] == 'x'){
    2e54:	d3 01       	movw	r26, r6
    2e56:	8c 91       	ld	r24, X
    2e58:	88 37       	cpi	r24, 0x78	; 120
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <ProcessInput+0x64>
    2e5c:	45 c0       	rjmp	.+138    	; 0x2ee8 <ProcessInput+0xee>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2e5e:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    2e62:	e8 2f       	mov	r30, r24
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	ee 0f       	add	r30, r30
    2e68:	ff 1f       	adc	r31, r31
    2e6a:	e5 52       	subi	r30, 0x25	; 37
    2e6c:	f6 4c       	sbci	r31, 0xC6	; 198
    2e6e:	20 81       	ld	r18, Z
    2e70:	31 81       	ldd	r19, Z+1	; 0x01
    2e72:	23 2b       	or	r18, r19
    2e74:	11 f0       	breq	.+4      	; 0x2e7a <ProcessInput+0x80>
    2e76:	81 11       	cpse	r24, r1
    2e78:	03 c0       	rjmp	.+6      	; 0x2e80 <ProcessInput+0x86>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e7a:	84 e4       	ldi	r24, 0x44	; 68
    2e7c:	96 e7       	ldi	r25, 0x76	; 118
    2e7e:	27 c5       	rjmp	.+2638   	; 0x38ce <ProcessInput+0xad4>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2e80:	80 91 21 3a 	lds	r24, 0x3A21	; 0x803a21 <currObj+0x6>
    2e84:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
    2e88:	88 23       	and	r24, r24
    2e8a:	b9 f0       	breq	.+46     	; 0x2eba <ProcessInput+0xc0>
                --currDepth;
    2e8c:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2e90:	e1 50       	subi	r30, 0x01	; 1
    2e92:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	ee 0f       	add	r30, r30
    2e9a:	ff 1f       	adc	r31, r31
    2e9c:	e5 52       	subi	r30, 0x25	; 37
    2e9e:	f6 4c       	sbci	r31, 0xC6	; 198
    2ea0:	6b e1       	ldi	r22, 0x1B	; 27
    2ea2:	7a e3       	ldi	r23, 0x3A	; 58
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	e2 da       	rcall	.-2620   	; 0x246e <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2eaa:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    2eb4:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    2eb8:	31 c0       	rjmp	.+98     	; 0x2f1c <ProcessInput+0x122>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2eba:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x22>
    2ebe:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ec2:	20 91 2f 3a 	lds	r18, 0x3A2F	; 0x803a2f <currObj+0x14>
    2ec6:	30 91 30 3a 	lds	r19, 0x3A30	; 0x803a30 <currObj+0x15>
    2eca:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    2ece:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2ed2:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2ed6:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2eda:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    2ede:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2ee2:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <currObj+0x28>
    2ee6:	bd c5       	rjmp	.+2938   	; 0x3a62 <ProcessInput+0xc68>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2ee8:	85 36       	cpi	r24, 0x65	; 101
    2eea:	19 f0       	breq	.+6      	; 0x2ef2 <ProcessInput+0xf8>
    2eec:	8f 36       	cpi	r24, 0x6F	; 111
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <ProcessInput+0xf8>
    2ef0:	f2 c0       	rjmp	.+484    	; 0x30d6 <ProcessInput+0x2dc>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2ef2:	b2 e0       	ldi	r27, 0x02	; 2
    2ef4:	fb 16       	cp	r15, r27
    2ef6:	a1 f0       	breq	.+40     	; 0x2f20 <ProcessInput+0x126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ef8:	84 e4       	ldi	r24, 0x44	; 68
    2efa:	96 e7       	ldi	r25, 0x76	; 118
    2efc:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2f00:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2f04:	8b e1       	ldi	r24, 0x1B	; 27
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2f0c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2f18:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2f1c:	11 e0       	ldi	r17, 0x01	; 1
    2f1e:	f9 c6       	rjmp	.+3570   	; 0x3d12 <ProcessInput+0xf18>
            //Not possible, too many/little characters
            if (inputLen != 2){
                SetResponse(elements, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2f20:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <currDepth>
    2f24:	10 e0       	ldi	r17, 0x00	; 0
    2f26:	f8 01       	movw	r30, r16
    2f28:	ee 0f       	add	r30, r30
    2f2a:	ff 1f       	adc	r31, r31
    2f2c:	e5 52       	subi	r30, 0x25	; 37
    2f2e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	d3 01       	movw	r26, r6
    2f36:	11 96       	adiw	r26, 0x01	; 1
    2f38:	6c 91       	ld	r22, X
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	66 db       	rcall	.-2356   	; 0x260c <FindChild>
    2f40:	00 0f       	add	r16, r16
    2f42:	11 1f       	adc	r17, r17
    2f44:	f8 01       	movw	r30, r16
    2f46:	e3 52       	subi	r30, 0x23	; 35
    2f48:	f6 4c       	sbci	r31, 0xC6	; 198
    2f4a:	80 83       	st	Z, r24
    2f4c:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2f4e:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    2f52:	29 2f       	mov	r18, r25
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	f9 01       	movw	r30, r18
    2f58:	ee 0f       	add	r30, r30
    2f5a:	ff 1f       	adc	r31, r31
    2f5c:	e3 52       	subi	r30, 0x23	; 35
    2f5e:	f6 4c       	sbci	r31, 0xC6	; 198
    2f60:	40 81       	ld	r20, Z
    2f62:	51 81       	ldd	r21, Z+1	; 0x01
    2f64:	41 15       	cp	r20, r1
    2f66:	51 05       	cpc	r21, r1
    2f68:	21 f0       	breq	.+8      	; 0x2f72 <ProcessInput+0x178>
                    PopulateObject(route[currDepth+1], &actObj1);
    2f6a:	6a ed       	ldi	r22, 0xDA	; 218
    2f6c:	78 e3       	ldi	r23, 0x38	; 56
    2f6e:	ca 01       	movw	r24, r20
    2f70:	1c c0       	rjmp	.+56     	; 0x2faa <ProcessInput+0x1b0>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2f72:	99 23       	and	r25, r25
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <ProcessInput+0x17e>
    2f76:	dc c6       	rjmp	.+3512   	; 0x3d30 <ProcessInput+0xf36>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2f78:	22 0f       	add	r18, r18
    2f7a:	33 1f       	adc	r19, r19
    2f7c:	f9 01       	movw	r30, r18
    2f7e:	e7 52       	subi	r30, 0x27	; 39
    2f80:	f6 4c       	sbci	r31, 0xC6	; 198
    2f82:	d3 01       	movw	r26, r6
    2f84:	11 96       	adiw	r26, 0x01	; 1
    2f86:	6c 91       	ld	r22, X
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	e9 da       	rcall	.-2606   	; 0x2560 <CheckLetter>
    2f8e:	88 23       	and	r24, r24
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <ProcessInput+0x19a>
    2f92:	ce c6       	rjmp	.+3484   	; 0x3d30 <ProcessInput+0xf36>
                        PopulateObject(route[currDepth-1], &actObj1);
    2f94:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	ee 0f       	add	r30, r30
    2f9c:	ff 1f       	adc	r31, r31
    2f9e:	e7 52       	subi	r30, 0x27	; 39
    2fa0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fa2:	6a ed       	ldi	r22, 0xDA	; 218
    2fa4:	78 e3       	ldi	r23, 0x38	; 56
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	61 da       	rcall	.-2878   	; 0x246e <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2fac:	d3 01       	movw	r26, r6
    2fae:	8c 91       	ld	r24, X
    2fb0:	85 36       	cpi	r24, 0x65	; 101
    2fb2:	c1 f4       	brne	.+48     	; 0x2fe4 <ProcessInput+0x1ea>
    2fb4:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    2fb8:	80 fd       	sbrc	r24, 0
    2fba:	1d c0       	rjmp	.+58     	; 0x2ff6 <ProcessInput+0x1fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2fbc:	8d e9       	ldi	r24, 0x9D	; 157
    2fbe:	99 e7       	ldi	r25, 0x79	; 121
    2fc0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    2fc4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    2fc8:	8e e1       	ldi	r24, 0x1E	; 30
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    2fd0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    2fdc:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2fe0:	12 e0       	ldi	r17, 0x02	; 2
    2fe2:	97 c6       	rjmp	.+3374   	; 0x3d12 <ProcessInput+0xf18>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2fe4:	8f 36       	cpi	r24, 0x6F	; 111
    2fe6:	39 f4       	brne	.+14     	; 0x2ff6 <ProcessInput+0x1fc>
    2fe8:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    2fec:	81 fd       	sbrc	r24, 1
    2fee:	03 c0       	rjmp	.+6      	; 0x2ff6 <ProcessInput+0x1fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ff0:	82 e8       	ldi	r24, 0x82	; 130
    2ff2:	99 e7       	ldi	r25, 0x79	; 121
    2ff4:	6c c4       	rjmp	.+2264   	; 0x38ce <ProcessInput+0xad4>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2ff6:	80 91 e0 38 	lds	r24, 0x38E0	; 0x8038e0 <actObj1.3989+0x6>
    2ffa:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
    2ffe:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3002:	88 23       	and	r24, r24
    3004:	09 f4       	brne	.+2      	; 0x3008 <ProcessInput+0x20e>
    3006:	49 c0       	rjmp	.+146    	; 0x309a <ProcessInput+0x2a0>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    3008:	ae 2f       	mov	r26, r30
    300a:	b0 e0       	ldi	r27, 0x00	; 0
    300c:	aa 0f       	add	r26, r26
    300e:	bb 1f       	adc	r27, r27
    3010:	a3 52       	subi	r26, 0x23	; 35
    3012:	b6 4c       	sbci	r27, 0xC6	; 198
    3014:	8d 91       	ld	r24, X+
    3016:	9c 91       	ld	r25, X
    3018:	89 2b       	or	r24, r25
    301a:	11 f0       	breq	.+4      	; 0x3020 <ProcessInput+0x226>
    301c:	ef 5f       	subi	r30, 0xFF	; 255
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <ProcessInput+0x228>
    3020:	e1 50       	subi	r30, 0x01	; 1
    3022:	e0 93 2e 38 	sts	0x382E, r30	; 0x80382e <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    3026:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	ee 0f       	add	r30, r30
    302e:	ff 1f       	adc	r31, r31
    3030:	e5 52       	subi	r30, 0x25	; 37
    3032:	f6 4c       	sbci	r31, 0xC6	; 198
    3034:	6b e1       	ldi	r22, 0x1B	; 27
    3036:	7a e3       	ldi	r23, 0x3A	; 58
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	18 da       	rcall	.-3024   	; 0x246e <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    303e:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    3042:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3046:	20 91 29 3a 	lds	r18, 0x3A29	; 0x803a29 <currObj+0xe>
    304a:	30 91 2a 3a 	lds	r19, 0x3A2A	; 0x803a2a <currObj+0xf>
    304e:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3052:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3056:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    305a:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    305e:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3062:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3066:	89 e5       	ldi	r24, 0x59	; 89
    3068:	9a e7       	ldi	r25, 0x7A	; 122
    306a:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    306e:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    307a:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    3086:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    308a:	80 91 1f 3a 	lds	r24, 0x3A1F	; 0x803a1f <currObj+0x4>
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3094:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3098:	07 c4       	rjmp	.+2062   	; 0x38a8 <ProcessInput+0xaae>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	ee 0f       	add	r30, r30
    309e:	ff 1f       	adc	r31, r31
    30a0:	e3 52       	subi	r30, 0x23	; 35
    30a2:	f6 4c       	sbci	r31, 0xC6	; 198
    30a4:	10 82       	st	Z, r1
    30a6:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    30a8:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3989+0x22>
    30ac:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30b0:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3989+0x14>
    30b4:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3989+0x15>
    30b8:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    30bc:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    30c0:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    30c4:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    30c8:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    30cc:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    30d0:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3989+0x28>
    30d4:	c6 c4       	rjmp	.+2444   	; 0x3a62 <ProcessInput+0xc68>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    30d6:	8c 36       	cpi	r24, 0x6C	; 108
    30d8:	09 f0       	breq	.+2      	; 0x30dc <ProcessInput+0x2e2>
    30da:	58 c1       	rjmp	.+688    	; 0x338c <ProcessInput+0x592>
    30dc:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
            if (inputLen == 1) {
    30e0:	b1 e0       	ldi	r27, 0x01	; 1
    30e2:	fb 12       	cpse	r15, r27
    30e4:	f1 c0       	rjmp	.+482    	; 0x32c8 <ProcessInput+0x4ce>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    30e6:	80 91 37 3a 	lds	r24, 0x3A37	; 0x803a37 <currObj+0x1c>
    30ea:	90 91 38 3a 	lds	r25, 0x3A38	; 0x803a38 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30ee:	40 91 29 3a 	lds	r20, 0x3A29	; 0x803a29 <currObj+0xe>
    30f2:	50 91 2a 3a 	lds	r21, 0x3A2A	; 0x803a2a <currObj+0xf>
    30f6:	40 93 1d 39 	sts	0x391D, r20	; 0x80391d <reactStr+0x2>
    30fa:	50 93 1e 39 	sts	0x391E, r21	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    30fe:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3102:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3106:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    310a:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    310e:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    3112:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    311e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3122:	00 93 9f 39 	sts	0x399F, r16	; 0x80399f <reactStr+0x84>
    3126:	10 93 a0 39 	sts	0x39A0, r17	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    312a:	8b ee       	ldi	r24, 0xEB	; 235
    312c:	99 e7       	ldi	r25, 0x79	; 121
    312e:	80 93 21 39 	sts	0x3921, r24	; 0x803921 <reactStr+0x6>
    3132:	90 93 22 39 	sts	0x3922, r25	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3136:	85 e1       	ldi	r24, 0x15	; 21
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x46>
    313e:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3142:	00 93 a1 39 	sts	0x39A1, r16	; 0x8039a1 <reactStr+0x86>
    3146:	10 93 a2 39 	sts	0x39A2, r17	; 0x8039a2 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	ee 0f       	add	r30, r30
    314e:	ff 1f       	adc	r31, r31
    3150:	e3 52       	subi	r30, 0x23	; 35
    3152:	f6 4c       	sbci	r31, 0xC6	; 198
    3154:	10 82       	st	Z, r1
    3156:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    3158:	b4 e0       	ldi	r27, 0x04	; 4
    315a:	9b 2e       	mov	r9, r27
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    315c:	17 e5       	ldi	r17, 0x57	; 87
    315e:	e1 2e       	mov	r14, r17
    3160:	1a e7       	ldi	r17, 0x7A	; 122
    3162:	f1 2e       	mov	r15, r17
    reactStr[1][number]=length;
    3164:	02 e0       	ldi	r16, 0x02	; 2
    3166:	c0 2e       	mov	r12, r16
    3168:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    316a:	aa 24       	eor	r10, r10
    316c:	a3 94       	inc	r10
    316e:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    3170:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <currDepth>
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	8c 01       	movw	r16, r24
    3178:	00 0f       	add	r16, r16
    317a:	11 1f       	adc	r17, r17
    317c:	03 52       	subi	r16, 0x23	; 35
    317e:	16 4c       	sbci	r17, 0xC6	; 198
    3180:	f8 01       	movw	r30, r16
    3182:	40 81       	ld	r20, Z
    3184:	51 81       	ldd	r21, Z+1	; 0x01
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	fc 01       	movw	r30, r24
    318c:	e5 52       	subi	r30, 0x25	; 37
    318e:	f6 4c       	sbci	r31, 0xC6	; 198
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	3a da       	rcall	.-2956   	; 0x260c <FindChild>
    3198:	d8 01       	movw	r26, r16
    319a:	8d 93       	st	X+, r24
    319c:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    319e:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	ee 0f       	add	r30, r30
    31a6:	ff 1f       	adc	r31, r31
    31a8:	e3 52       	subi	r30, 0x23	; 35
    31aa:	f6 4c       	sbci	r31, 0xC6	; 198
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <ProcessInput+0x3bc>
    31b4:	4a c0       	rjmp	.+148    	; 0x324a <ProcessInput+0x450>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    31b6:	20 91 3e 38 	lds	r18, 0x383E	; 0x80383e <inventory>
    31ba:	30 91 3f 38 	lds	r19, 0x383F	; 0x80383f <inventory+0x1>
    31be:	82 17       	cp	r24, r18
    31c0:	93 07       	cpc	r25, r19
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <ProcessInput+0x3cc>
    31c4:	42 c0       	rjmp	.+132    	; 0x324a <ProcessInput+0x450>
    31c6:	20 91 40 38 	lds	r18, 0x3840	; 0x803840 <inventory+0x2>
    31ca:	30 91 41 38 	lds	r19, 0x3841	; 0x803841 <inventory+0x3>
    31ce:	82 17       	cp	r24, r18
    31d0:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    31d2:	d9 f1       	breq	.+118    	; 0x324a <ProcessInput+0x450>
    31d4:	6a ed       	ldi	r22, 0xDA	; 218
    31d6:	78 e3       	ldi	r23, 0x38	; 56
    31d8:	4a d9       	rcall	.-3436   	; 0x246e <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    31da:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    31de:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31e2:	e9 2d       	mov	r30, r9
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	df 01       	movw	r26, r30
    31e8:	aa 0f       	add	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	a5 5e       	subi	r26, 0xE5	; 229
    31ee:	b6 4c       	sbci	r27, 0xC6	; 198
    31f0:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    31f4:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    31f8:	2d 93       	st	X+, r18
    31fa:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    31fc:	df 01       	movw	r26, r30
    31fe:	aa 0f       	add	r26, r26
    3200:	bb 1f       	adc	r27, r27
    3202:	a5 5a       	subi	r26, 0xA5	; 165
    3204:	b6 4c       	sbci	r27, 0xC6	; 198
    3206:	8d 93       	st	X+, r24
    3208:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    320a:	ee 0f       	add	r30, r30
    320c:	ff 1f       	adc	r31, r31
    320e:	e5 56       	subi	r30, 0x65	; 101
    3210:	f6 4c       	sbci	r31, 0xC6	; 198
    3212:	10 82       	st	Z, r1
    3214:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	89 0d       	add	r24, r9
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	93 94       	inc	r9
    321e:	93 94       	inc	r9
    3220:	fc 01       	movw	r30, r24
    3222:	ee 0f       	add	r30, r30
    3224:	ff 1f       	adc	r31, r31
    3226:	e5 5e       	subi	r30, 0xE5	; 229
    3228:	f6 4c       	sbci	r31, 0xC6	; 198
    322a:	e0 82       	st	Z, r14
    322c:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    322e:	fc 01       	movw	r30, r24
    3230:	ee 0f       	add	r30, r30
    3232:	ff 1f       	adc	r31, r31
    3234:	e5 5a       	subi	r30, 0xA5	; 165
    3236:	f6 4c       	sbci	r31, 0xC6	; 198
    3238:	c0 82       	st	Z, r12
    323a:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	fc 01       	movw	r30, r24
    3242:	e5 56       	subi	r30, 0x65	; 101
    3244:	f6 4c       	sbci	r31, 0xC6	; 198
    3246:	a0 82       	st	Z, r10
    3248:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    324a:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    324e:	82 2f       	mov	r24, r18
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	fc 01       	movw	r30, r24
    3254:	ee 0f       	add	r30, r30
    3256:	ff 1f       	adc	r31, r31
    3258:	e3 52       	subi	r30, 0x23	; 35
    325a:	f6 4c       	sbci	r31, 0xC6	; 198
    325c:	40 81       	ld	r20, Z
    325e:	51 81       	ldd	r21, Z+1	; 0x01
    3260:	45 2b       	or	r20, r21
    3262:	09 f0       	breq	.+2      	; 0x3266 <ProcessInput+0x46c>
    3264:	85 cf       	rjmp	.-246    	; 0x3170 <ProcessInput+0x376>

                //Look back if not on level 0
                if (currDepth) {
    3266:	22 23       	and	r18, r18
    3268:	61 f1       	breq	.+88     	; 0x32c2 <ProcessInput+0x4c8>
                    PopulateObject(route[currDepth-1], &actObj1);
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	fc 01       	movw	r30, r24
    3270:	e7 52       	subi	r30, 0x27	; 39
    3272:	f6 4c       	sbci	r31, 0xC6	; 198
    3274:	6a ed       	ldi	r22, 0xDA	; 218
    3276:	78 e3       	ldi	r23, 0x38	; 56
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	f8 d8       	rcall	.-3600   	; 0x246e <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    327e:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3282:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    3286:	11 e0       	ldi	r17, 0x01	; 1
    3288:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    328a:	89 2d       	mov	r24, r9
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	fc 01       	movw	r30, r24
    3290:	ee 0f       	add	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	e5 5e       	subi	r30, 0xE5	; 229
    3296:	f6 4c       	sbci	r31, 0xC6	; 198
    3298:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    329c:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    32a0:	40 83       	st	Z, r20
    32a2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    32a4:	fc 01       	movw	r30, r24
    32a6:	ee 0f       	add	r30, r30
    32a8:	ff 1f       	adc	r31, r31
    32aa:	e5 5a       	subi	r30, 0xA5	; 165
    32ac:	f6 4c       	sbci	r31, 0xC6	; 198
    32ae:	20 83       	st	Z, r18
    32b0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	fc 01       	movw	r30, r24
    32b8:	e5 56       	subi	r30, 0x65	; 101
    32ba:	f6 4c       	sbci	r31, 0xC6	; 198
    32bc:	10 82       	st	Z, r1
    32be:	11 82       	std	Z+1, r1	; 0x01
    32c0:	28 c5       	rjmp	.+2640   	; 0x3d12 <ProcessInput+0xf18>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    32c2:	1f ef       	ldi	r17, 0xFF	; 255
    32c4:	19 0d       	add	r17, r9
    32c6:	25 c5       	rjmp	.+2634   	; 0x3d12 <ProcessInput+0xf18>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    32c8:	ee 2e       	mov	r14, r30
    32ca:	f1 2c       	mov	r15, r1
    32cc:	f7 01       	movw	r30, r14
    32ce:	ee 0f       	add	r30, r30
    32d0:	ff 1f       	adc	r31, r31
    32d2:	e5 52       	subi	r30, 0x25	; 37
    32d4:	f6 4c       	sbci	r31, 0xC6	; 198
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	d3 01       	movw	r26, r6
    32dc:	11 96       	adiw	r26, 0x01	; 1
    32de:	6c 91       	ld	r22, X
    32e0:	80 81       	ld	r24, Z
    32e2:	91 81       	ldd	r25, Z+1	; 0x01
    32e4:	93 d9       	rcall	.-3290   	; 0x260c <FindChild>
    32e6:	f7 01       	movw	r30, r14
    32e8:	ee 0f       	add	r30, r30
    32ea:	ff 1f       	adc	r31, r31
    32ec:	e3 52       	subi	r30, 0x23	; 35
    32ee:	f6 4c       	sbci	r31, 0xC6	; 198
    32f0:	80 83       	st	Z, r24
    32f2:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    32f4:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <currDepth>
    32f8:	29 2f       	mov	r18, r25
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	f9 01       	movw	r30, r18
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	e3 52       	subi	r30, 0x23	; 35
    3304:	f6 4c       	sbci	r31, 0xC6	; 198
    3306:	40 81       	ld	r20, Z
    3308:	51 81       	ldd	r21, Z+1	; 0x01
    330a:	41 15       	cp	r20, r1
    330c:	51 05       	cpc	r21, r1
    330e:	21 f0       	breq	.+8      	; 0x3318 <ProcessInput+0x51e>
                    PopulateObject(route[currDepth+1], &actObj1);
    3310:	6a ed       	ldi	r22, 0xDA	; 218
    3312:	78 e3       	ldi	r23, 0x38	; 56
    3314:	ca 01       	movw	r24, r20
    3316:	1b c0       	rjmp	.+54     	; 0x334e <ProcessInput+0x554>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    3318:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    331a:	79 f1       	breq	.+94     	; 0x337a <ProcessInput+0x580>
    331c:	22 0f       	add	r18, r18
    331e:	33 1f       	adc	r19, r19
    3320:	f9 01       	movw	r30, r18
    3322:	e7 52       	subi	r30, 0x27	; 39
    3324:	f6 4c       	sbci	r31, 0xC6	; 198
    3326:	d3 01       	movw	r26, r6
    3328:	11 96       	adiw	r26, 0x01	; 1
    332a:	6c 91       	ld	r22, X
    332c:	80 81       	ld	r24, Z
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	17 d9       	rcall	.-3538   	; 0x2560 <CheckLetter>
    3332:	88 23       	and	r24, r24
    3334:	09 f4       	brne	.+2      	; 0x3338 <ProcessInput+0x53e>
                        PopulateObject(route[currDepth-1], &actObj1);
    3336:	f2 cd       	rjmp	.-1052   	; 0x2f1c <ProcessInput+0x122>
    3338:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	ee 0f       	add	r30, r30
    3340:	ff 1f       	adc	r31, r31
    3342:	e7 52       	subi	r30, 0x27	; 39
    3344:	f6 4c       	sbci	r31, 0xC6	; 198
    3346:	6a ed       	ldi	r22, 0xDA	; 218
    3348:	78 e3       	ldi	r23, 0x38	; 56
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	8f d8       	rcall	.-3810   	; 0x246e <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    3350:	80 91 f6 38 	lds	r24, 0x38F6	; 0x8038f6 <actObj1.3989+0x1c>
    3354:	90 91 f7 38 	lds	r25, 0x38F7	; 0x8038f7 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3358:	20 91 e8 38 	lds	r18, 0x38E8	; 0x8038e8 <actObj1.3989+0xe>
    335c:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj1.3989+0xf>
    3360:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3364:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3368:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    336c:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3370:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3374:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    3378:	33 ce       	rjmp	.-922    	; 0x2fe0 <ProcessInput+0x1e6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    337a:	81 ed       	ldi	r24, 0xD1	; 209
    337c:	99 e7       	ldi	r25, 0x79	; 121
    337e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3382:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3386:	8a e1       	ldi	r24, 0x1A	; 26
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	ca c2       	rjmp	.+1428   	; 0x3920 <ProcessInput+0xb26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    338c:	80 37       	cpi	r24, 0x70	; 112
    338e:	09 f0       	breq	.+2      	; 0x3392 <ProcessInput+0x598>
    3390:	92 c0       	rjmp	.+292    	; 0x34b6 <ProcessInput+0x6bc>
            if (inventory[0]&&inventory[1]) {
    3392:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    3396:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    339a:	89 2b       	or	r24, r25
    339c:	79 f0       	breq	.+30     	; 0x33bc <ProcessInput+0x5c2>
    339e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    33a2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    33a6:	89 2b       	or	r24, r25
    33a8:	49 f0       	breq	.+18     	; 0x33bc <ProcessInput+0x5c2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33aa:	87 e0       	ldi	r24, 0x07	; 7
    33ac:	98 e7       	ldi	r25, 0x78	; 120
    33ae:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    33b2:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    33b6:	89 e5       	ldi	r24, 0x59	; 89
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	b2 c2       	rjmp	.+1380   	; 0x3920 <ProcessInput+0xb26>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    33bc:	b2 e0       	ldi	r27, 0x02	; 2
    33be:	fb 12       	cpse	r15, r27
    33c0:	5c cd       	rjmp	.-1352   	; 0x2e7a <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    33c2:	00 91 2e 38 	lds	r16, 0x382E	; 0x80382e <currDepth>
    33c6:	10 e0       	ldi	r17, 0x00	; 0
    33c8:	f8 01       	movw	r30, r16
    33ca:	ee 0f       	add	r30, r30
    33cc:	ff 1f       	adc	r31, r31
    33ce:	e5 52       	subi	r30, 0x25	; 37
    33d0:	f6 4c       	sbci	r31, 0xC6	; 198
    33d2:	40 e0       	ldi	r20, 0x00	; 0
    33d4:	50 e0       	ldi	r21, 0x00	; 0
    33d6:	d3 01       	movw	r26, r6
    33d8:	11 96       	adiw	r26, 0x01	; 1
    33da:	6c 91       	ld	r22, X
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	15 d9       	rcall	.-3542   	; 0x260c <FindChild>
    33e2:	00 0f       	add	r16, r16
    33e4:	11 1f       	adc	r17, r17
    33e6:	f8 01       	movw	r30, r16
    33e8:	e3 52       	subi	r30, 0x23	; 35
    33ea:	f6 4c       	sbci	r31, 0xC6	; 198
    33ec:	80 83       	st	Z, r24
    33ee:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    33f0:	20 91 2e 38 	lds	r18, 0x382E	; 0x80382e <currDepth>
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	2f 5f       	subi	r18, 0xFF	; 255
    33f8:	3f 4f       	sbci	r19, 0xFF	; 255
    33fa:	22 0f       	add	r18, r18
    33fc:	33 1f       	adc	r19, r19
    33fe:	f9 01       	movw	r30, r18
    3400:	e5 52       	subi	r30, 0x25	; 37
    3402:	f6 4c       	sbci	r31, 0xC6	; 198
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	09 f4       	brne	.+2      	; 0x340e <ProcessInput+0x614>
    340c:	3f c3       	rjmp	.+1662   	; 0x3a8c <ProcessInput+0xc92>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    340e:	40 91 3e 38 	lds	r20, 0x383E	; 0x80383e <inventory>
    3412:	50 91 3f 38 	lds	r21, 0x383F	; 0x80383f <inventory+0x1>
    3416:	84 17       	cp	r24, r20
    3418:	95 07       	cpc	r25, r21
    341a:	39 f0       	breq	.+14     	; 0x342a <ProcessInput+0x630>
    341c:	40 91 40 38 	lds	r20, 0x3840	; 0x803840 <inventory+0x2>
    3420:	50 91 41 38 	lds	r21, 0x3841	; 0x803841 <inventory+0x3>
    3424:	84 17       	cp	r24, r20
    3426:	95 07       	cpc	r25, r21
    3428:	c1 f4       	brne	.+48     	; 0x345a <ProcessInput+0x660>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    342a:	82 ee       	ldi	r24, 0xE2	; 226
    342c:	97 e7       	ldi	r25, 0x77	; 119
    342e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3432:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3436:	85 e2       	ldi	r24, 0x25	; 37
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    343e:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    344a:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    344e:	f9 01       	movw	r30, r18
    3450:	e5 52       	subi	r30, 0x25	; 37
    3452:	f6 4c       	sbci	r31, 0xC6	; 198
    3454:	10 82       	st	Z, r1
    3456:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3458:	c3 cd       	rjmp	.-1146   	; 0x2fe0 <ProcessInput+0x1e6>
    345a:	6a ed       	ldi	r22, 0xDA	; 218
    345c:	78 e3       	ldi	r23, 0x38	; 56
    345e:	07 d8       	rcall	.-4082   	; 0x246e <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    3460:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    3464:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
    3468:	88 23       	and	r24, r24
    346a:	09 f4       	brne	.+2      	; 0x346e <ProcessInput+0x674>
    346c:	e4 c2       	rjmp	.+1480   	; 0x3a36 <ProcessInput+0xc3c>
                            if (actObj1.byteField[ITEM_NR]) {
    346e:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3989+0xb>
    3472:	88 23       	and	r24, r24
    3474:	09 f4       	brne	.+2      	; 0x3478 <ProcessInput+0x67e>
    3476:	01 cd       	rjmp	.-1534   	; 0x2e7a <ProcessInput+0x80>
                                if (inventory[0]) {
    3478:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    347c:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    3480:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                                    inventory[1] = route[currDepth+1];
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	ee 0f       	add	r30, r30
    3488:	ff 1f       	adc	r31, r31
    348a:	e3 52       	subi	r30, 0x23	; 35
    348c:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    348e:	89 2b       	or	r24, r25
    3490:	39 f0       	breq	.+14     	; 0x34a0 <ProcessInput+0x6a6>
                                    inventory[1] = route[currDepth+1];
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <inventory+0x2>
    349a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <inventory+0x3>
    349e:	06 c0       	rjmp	.+12     	; 0x34ac <ProcessInput+0x6b2>
                                } else {
                                    inventory[0] = route[currDepth+1];
    34a0:	80 81       	ld	r24, Z
    34a2:	91 81       	ldd	r25, Z+1	; 0x01
    34a4:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <inventory>
    34a8:	90 93 3f 38 	sts	0x383F, r25	; 0x80383f <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    34ac:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    34b0:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    34b4:	2b c0       	rjmp	.+86     	; 0x350c <ProcessInput+0x712>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    34b6:	84 36       	cpi	r24, 0x64	; 100
    34b8:	d9 f4       	brne	.+54     	; 0x34f0 <ProcessInput+0x6f6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    34ba:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    34be:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	09 f0       	breq	.+2      	; 0x34c8 <ProcessInput+0x6ce>
    34c6:	3d c4       	rjmp	.+2170   	; 0x3d42 <ProcessInput+0xf48>
    34c8:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    34cc:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    34d0:	89 2b       	or	r24, r25
    34d2:	49 f4       	brne	.+18     	; 0x34e6 <ProcessInput+0x6ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34d4:	86 ea       	ldi	r24, 0xA6	; 166
    34d6:	97 e7       	ldi	r25, 0x77	; 119
    34d8:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    34dc:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    34e0:	86 e2       	ldi	r24, 0x26	; 38
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	73 cd       	rjmp	.-1306   	; 0x2fcc <ProcessInput+0x1d2>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    34e6:	b2 e0       	ldi	r27, 0x02	; 2
    34e8:	fb 16       	cp	r15, r27
    34ea:	09 f4       	brne	.+2      	; 0x34ee <ProcessInput+0x6f4>
    34ec:	8c c4       	rjmp	.+2328   	; 0x3e06 <ProcessInput+0x100c>
    34ee:	c5 cc       	rjmp	.-1654   	; 0x2e7a <ProcessInput+0x80>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    34f0:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    34f2:	81 f4       	brne	.+32     	; 0x3514 <ProcessInput+0x71a>
    34f4:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <inventory>
    34f8:	90 91 3f 38 	lds	r25, 0x383F	; 0x80383f <inventory+0x1>
    34fc:	89 2b       	or	r24, r25
    34fe:	31 f4       	brne	.+12     	; 0x350c <ProcessInput+0x712>
    3500:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3504:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3508:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    350a:	21 f3       	breq	.-56     	; 0x34d4 <ProcessInput+0x6da>
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	e5 db       	rcall	.-2102   	; 0x2cda <ShowInventory>
    3510:	18 2f       	mov	r17, r24
    3512:	ff c3       	rjmp	.+2046   	; 0x3d12 <ProcessInput+0xf18>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    3514:	9c e8       	ldi	r25, 0x8C	; 140
    3516:	98 0f       	add	r25, r24
    3518:	92 30       	cpi	r25, 0x02	; 2
    351a:	28 f0       	brcs	.+10     	; 0x3526 <ProcessInput+0x72c>
    351c:	87 36       	cpi	r24, 0x67	; 103
    351e:	19 f0       	breq	.+6      	; 0x3526 <ProcessInput+0x72c>
    3520:	82 37       	cpi	r24, 0x72	; 114
    3522:	09 f0       	breq	.+2      	; 0x3526 <ProcessInput+0x72c>
    3524:	b6 c2       	rjmp	.+1388   	; 0x3a92 <ProcessInput+0xc98>
            if ((inputLen<2)||(inputLen>3)) {
    3526:	8e ef       	ldi	r24, 0xFE	; 254
    3528:	8f 0d       	add	r24, r15
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	08 f0       	brcs	.+2      	; 0x3530 <ProcessInput+0x736>
    352e:	a5 cc       	rjmp	.-1718   	; 0x2e7a <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    3530:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3534:	0e 2f       	mov	r16, r30
    3536:	10 e0       	ldi	r17, 0x00	; 0
    3538:	d3 01       	movw	r26, r6
    353a:	af 0d       	add	r26, r15
    353c:	b1 1d       	adc	r27, r1
    353e:	11 97       	sbiw	r26, 0x01	; 1
    3540:	f8 01       	movw	r30, r16
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	e5 52       	subi	r30, 0x25	; 37
    3548:	f6 4c       	sbci	r31, 0xC6	; 198
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	6c 91       	ld	r22, X
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	5b d8       	rcall	.-3914   	; 0x260c <FindChild>
    3556:	f8 01       	movw	r30, r16
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	e3 52       	subi	r30, 0x23	; 35
    355e:	f6 4c       	sbci	r31, 0xC6	; 198
    3560:	80 83       	st	Z, r24
    3562:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3564:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	ee 0f       	add	r30, r30
    356c:	ff 1f       	adc	r31, r31
    356e:	e3 52       	subi	r30, 0x23	; 35
    3570:	f6 4c       	sbci	r31, 0xC6	; 198
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	09 f4       	brne	.+2      	; 0x357c <ProcessInput+0x782>
    357a:	79 c2       	rjmp	.+1266   	; 0x3a6e <ProcessInput+0xc74>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    357c:	f3 e0       	ldi	r31, 0x03	; 3
    357e:	ff 12       	cpse	r15, r31
    3580:	61 c1       	rjmp	.+706    	; 0x3844 <ProcessInput+0xa4a>
    3582:	d3 01       	movw	r26, r6
    3584:	2c 91       	ld	r18, X
    3586:	25 37       	cpi	r18, 0x75	; 117
    3588:	19 f0       	breq	.+6      	; 0x3590 <ProcessInput+0x796>
    358a:	27 36       	cpi	r18, 0x67	; 103
    358c:	09 f0       	breq	.+2      	; 0x3590 <ProcessInput+0x796>
    358e:	5a c1       	rjmp	.+692    	; 0x3844 <ProcessInput+0xa4a>
    3590:	00 e0       	ldi	r16, 0x00	; 0
    3592:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3594:	41 e6       	ldi	r20, 0x61	; 97
    3596:	c4 2e       	mov	r12, r20
    3598:	49 e7       	ldi	r20, 0x79	; 121
    359a:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    359c:	51 e2       	ldi	r21, 0x21	; 33
    359e:	a5 2e       	mov	r10, r21
    35a0:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    35a2:	88 24       	eor	r8, r8
    35a4:	83 94       	inc	r8
    35a6:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    35a8:	e0 2e       	mov	r14, r16
    35aa:	f1 2c       	mov	r15, r1
    35ac:	c7 01       	movw	r24, r14
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	fc 01       	movw	r30, r24
    35b4:	e2 5c       	subi	r30, 0xC2	; 194
    35b6:	f7 4c       	sbci	r31, 0xC7	; 199
    35b8:	7f 01       	movw	r14, r30
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	81 f0       	breq	.+32     	; 0x35e2 <ProcessInput+0x7e8>
                                if (CheckLetter(inventory[x], data[1])) {
    35c2:	d3 01       	movw	r26, r6
    35c4:	11 96       	adiw	r26, 0x01	; 1
    35c6:	6c 91       	ld	r22, X
    35c8:	0e 94 b0 12 	call	0x2560	; 0x2560 <CheckLetter>
    35cc:	88 23       	and	r24, r24
    35ce:	49 f0       	breq	.+18     	; 0x35e2 <ProcessInput+0x7e8>
                                    PopulateObject(inventory[x], &actObj2);
    35d0:	6f ea       	ldi	r22, 0xAF	; 175
    35d2:	78 e3       	ldi	r23, 0x38	; 56
    35d4:	f7 01       	movw	r30, r14
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	0e 94 37 12 	call	0x246e	; 0x246e <PopulateObject>
                                    x = 2;
    35de:	02 e0       	ldi	r16, 0x02	; 2
    35e0:	1d c0       	rjmp	.+58     	; 0x361c <ProcessInput+0x822>
                                }
                            }
                            if (x == 1) { 
    35e2:	01 30       	cpi	r16, 0x01	; 1
    35e4:	d1 f4       	brne	.+52     	; 0x361a <ProcessInput+0x820>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35e6:	e1 2f       	mov	r30, r17
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	df 01       	movw	r26, r30
    35ec:	aa 0f       	add	r26, r26
    35ee:	bb 1f       	adc	r27, r27
    35f0:	a5 5e       	subi	r26, 0xE5	; 229
    35f2:	b6 4c       	sbci	r27, 0xC6	; 198
    35f4:	cd 92       	st	X+, r12
    35f6:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    35f8:	df 01       	movw	r26, r30
    35fa:	aa 0f       	add	r26, r26
    35fc:	bb 1f       	adc	r27, r27
    35fe:	a5 5a       	subi	r26, 0xA5	; 165
    3600:	b6 4c       	sbci	r27, 0xC6	; 198
    3602:	ad 92       	st	X+, r10
    3604:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    3606:	ee 0f       	add	r30, r30
    3608:	ff 1f       	adc	r31, r31
    360a:	e5 56       	subi	r30, 0x65	; 101
    360c:	f6 4c       	sbci	r31, 0xC6	; 198
    360e:	80 82       	st	Z, r8
    3610:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3612:	d3 01       	movw	r26, r6
    3614:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    3616:	1f 5f       	subi	r17, 0xFF	; 255
    3618:	01 c0       	rjmp	.+2      	; 0x361c <ProcessInput+0x822>
    361a:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    361c:	0f 5f       	subi	r16, 0xFF	; 255
    361e:	01 30       	cpi	r16, 0x01	; 1
    3620:	19 f2       	breq	.-122    	; 0x35a8 <ProcessInput+0x7ae>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3622:	f3 01       	movw	r30, r6
    3624:	80 81       	ld	r24, Z
    3626:	88 23       	and	r24, r24
    3628:	09 f4       	brne	.+2      	; 0x362c <ProcessInput+0x832>
    362a:	73 c3       	rjmp	.+1766   	; 0x3d12 <ProcessInput+0xf18>
                            PopulateObject(route[currDepth+1], &actObj1);
    362c:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	ee 0f       	add	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	e3 52       	subi	r30, 0x23	; 35
    3638:	f6 4c       	sbci	r31, 0xC6	; 198
    363a:	6a ed       	ldi	r22, 0xDA	; 218
    363c:	78 e3       	ldi	r23, 0x38	; 56
    363e:	80 81       	ld	r24, Z
    3640:	91 81       	ldd	r25, Z+1	; 0x01
    3642:	0e 94 37 12 	call	0x246e	; 0x246e <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3646:	e0 90 f8 38 	lds	r14, 0x38F8	; 0x8038f8 <actObj1.3989+0x1e>
    364a:	f0 90 f9 38 	lds	r15, 0x38F9	; 0x8038f9 <actObj1.3989+0x1f>
    364e:	f1 e0       	ldi	r31, 0x01	; 1
    3650:	ef 16       	cp	r14, r31
    3652:	f1 04       	cpc	r15, r1
    3654:	09 f0       	breq	.+2      	; 0x3658 <ProcessInput+0x85e>
    3656:	89 c0       	rjmp	.+274    	; 0x376a <ProcessInput+0x970>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3658:	93 01       	movw	r18, r6
    365a:	2e 5f       	subi	r18, 0xFE	; 254
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	40 e0       	ldi	r20, 0x00	; 0
    3660:	61 e0       	ldi	r22, 0x01	; 1
    3662:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    3666:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    366a:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
                                if (data[2] == '1') {
    366e:	d3 01       	movw	r26, r6
    3670:	12 96       	adiw	r26, 0x02	; 2
    3672:	3c 91       	ld	r19, X
    3674:	31 33       	cpi	r19, 0x31	; 49
    3676:	09 f0       	breq	.+2      	; 0x367a <ProcessInput+0x880>
    3678:	4c c3       	rjmp	.+1688   	; 0x3d12 <ProcessInput+0xf18>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    367a:	20 91 ba 38 	lds	r18, 0x38BA	; 0x8038ba <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    367e:	51 ee       	ldi	r21, 0xE1	; 225
    3680:	52 0f       	add	r21, r18
    3682:	41 e0       	ldi	r20, 0x01	; 1
    3684:	41 0f       	add	r20, r17
    3686:	81 2f       	mov	r24, r17
    3688:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    368a:	fc 01       	movw	r30, r24
    368c:	ee 0f       	add	r30, r30
    368e:	ff 1f       	adc	r31, r31
    3690:	e5 5e       	subi	r30, 0xE5	; 229
    3692:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    3694:	54 30       	cpi	r21, 0x04	; 4
    3696:	b0 f0       	brcs	.+44     	; 0x36c4 <ProcessInput+0x8ca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3698:	21 e0       	ldi	r18, 0x01	; 1
    369a:	39 e7       	ldi	r19, 0x79	; 121
    369c:	20 83       	st	Z, r18
    369e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    36a0:	fc 01       	movw	r30, r24
    36a2:	ee 0f       	add	r30, r30
    36a4:	ff 1f       	adc	r31, r31
    36a6:	e5 5a       	subi	r30, 0xA5	; 165
    36a8:	f6 4c       	sbci	r31, 0xC6	; 198
    36aa:	2a e1       	ldi	r18, 0x1A	; 26
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	20 83       	st	Z, r18
    36b0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	fc 01       	movw	r30, r24
    36b8:	e5 56       	subi	r30, 0x65	; 101
    36ba:	f6 4c       	sbci	r31, 0xC6	; 198
    36bc:	e0 82       	st	Z, r14
    36be:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    36c0:	14 2f       	mov	r17, r20
    36c2:	27 c3       	rjmp	.+1614   	; 0x3d12 <ProcessInput+0xf18>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36c4:	60 e5       	ldi	r22, 0x50	; 80
    36c6:	75 e7       	ldi	r23, 0x75	; 117
    36c8:	60 83       	st	Z, r22
    36ca:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    36cc:	fc 01       	movw	r30, r24
    36ce:	ee 0f       	add	r30, r30
    36d0:	ff 1f       	adc	r31, r31
    36d2:	e5 5a       	subi	r30, 0xA5	; 165
    36d4:	f6 4c       	sbci	r31, 0xC6	; 198
    36d6:	62 eb       	ldi	r22, 0xB2	; 178
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	60 83       	st	Z, r22
    36dc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	fc 01       	movw	r30, r24
    36e4:	e5 56       	subi	r30, 0x65	; 101
    36e6:	f6 4c       	sbci	r31, 0xC6	; 198
    36e8:	e0 82       	st	Z, r14
    36ea:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36ec:	84 2f       	mov	r24, r20
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	fc 01       	movw	r30, r24
    36f2:	ee 0f       	add	r30, r30
    36f4:	ff 1f       	adc	r31, r31
    36f6:	e5 5e       	subi	r30, 0xE5	; 229
    36f8:	f6 4c       	sbci	r31, 0xC6	; 198
    36fa:	49 e5       	ldi	r20, 0x59	; 89
    36fc:	5a e7       	ldi	r21, 0x7A	; 122
    36fe:	40 83       	st	Z, r20
    3700:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3702:	fc 01       	movw	r30, r24
    3704:	ee 0f       	add	r30, r30
    3706:	ff 1f       	adc	r31, r31
    3708:	e5 5a       	subi	r30, 0xA5	; 165
    370a:	f6 4c       	sbci	r31, 0xC6	; 198
    370c:	42 e0       	ldi	r20, 0x02	; 2
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	40 83       	st	Z, r20
    3712:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3714:	88 0f       	add	r24, r24
    3716:	99 1f       	adc	r25, r25
    3718:	fc 01       	movw	r30, r24
    371a:	e5 56       	subi	r30, 0x65	; 101
    371c:	f6 4c       	sbci	r31, 0xC6	; 198
    371e:	e0 82       	st	Z, r14
    3720:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3722:	82 e0       	ldi	r24, 0x02	; 2
    3724:	81 0f       	add	r24, r17
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	1d 5f       	subi	r17, 0xFD	; 253
    372a:	fc 01       	movw	r30, r24
    372c:	ee 0f       	add	r30, r30
    372e:	ff 1f       	adc	r31, r31
    3730:	e5 5e       	subi	r30, 0xE5	; 229
    3732:	f6 4c       	sbci	r31, 0xC6	; 198
    3734:	4d ea       	ldi	r20, 0xAD	; 173
    3736:	58 e7       	ldi	r21, 0x78	; 120
    3738:	40 83       	st	Z, r20
    373a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    373c:	fc 01       	movw	r30, r24
    373e:	ee 0f       	add	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	e5 5a       	subi	r30, 0xA5	; 165
    3744:	f6 4c       	sbci	r31, 0xC6	; 198
    3746:	42 e1       	ldi	r20, 0x12	; 18
    3748:	50 e0       	ldi	r21, 0x00	; 0
    374a:	40 83       	st	Z, r20
    374c:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	fc 01       	movw	r30, r24
    3754:	e5 56       	subi	r30, 0x65	; 101
    3756:	f6 4c       	sbci	r31, 0xC6	; 198
    3758:	e0 82       	st	Z, r14
    375a:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    375c:	30 93 0a 39 	sts	0x390A, r19	; 0x80390a <specialInput>
                                        specialInput[1] = item;
    3760:	20 93 0b 39 	sts	0x390B, r18	; 0x80390b <specialInput+0x1>
                                        specialInput[2] = 0;
    3764:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <specialInput+0x2>
    3768:	d4 c2       	rjmp	.+1448   	; 0x3d12 <ProcessInput+0xf18>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    376a:	90 91 e3 38 	lds	r25, 0x38E3	; 0x8038e3 <actObj1.3989+0x9>
    376e:	80 91 ba 38 	lds	r24, 0x38BA	; 0x8038ba <actObj2.3990+0xb>
    3772:	98 13       	cpse	r25, r24
    3774:	2e c0       	rjmp	.+92     	; 0x37d2 <ProcessInput+0x9d8>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3776:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <actObj1.3989+0x26>
    377a:	30 91 01 39 	lds	r19, 0x3901	; 0x803901 <actObj1.3989+0x27>
    377e:	01 e0       	ldi	r16, 0x01	; 1
    3780:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3782:	81 2f       	mov	r24, r17
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	fc 01       	movw	r30, r24
    3788:	ee 0f       	add	r30, r30
    378a:	ff 1f       	adc	r31, r31
    378c:	e5 5e       	subi	r30, 0xE5	; 229
    378e:	f6 4c       	sbci	r31, 0xC6	; 198
    3790:	40 91 f2 38 	lds	r20, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3794:	50 91 f3 38 	lds	r21, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3798:	40 83       	st	Z, r20
    379a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    379c:	fc 01       	movw	r30, r24
    379e:	ee 0f       	add	r30, r30
    37a0:	ff 1f       	adc	r31, r31
    37a2:	e5 5a       	subi	r30, 0xA5	; 165
    37a4:	f6 4c       	sbci	r31, 0xC6	; 198
    37a6:	20 83       	st	Z, r18
    37a8:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	fc 01       	movw	r30, r24
    37b0:	e5 56       	subi	r30, 0x65	; 101
    37b2:	f6 4c       	sbci	r31, 0xC6	; 198
    37b4:	10 82       	st	Z, r1
    37b6:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    37b8:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    37c2:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    37c6:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    37ca:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    37ce:	10 2f       	mov	r17, r16
    37d0:	a0 c2       	rjmp	.+1344   	; 0x3d12 <ProcessInput+0xf18>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    37d2:	f3 01       	movw	r30, r6
    37d4:	80 81       	ld	r24, Z
    37d6:	85 37       	cpi	r24, 0x75	; 117
    37d8:	99 f4       	brne	.+38     	; 0x3800 <ProcessInput+0xa06>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37da:	81 2f       	mov	r24, r17
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	fc 01       	movw	r30, r24
    37e0:	ee 0f       	add	r30, r30
    37e2:	ff 1f       	adc	r31, r31
    37e4:	e5 5e       	subi	r30, 0xE5	; 229
    37e6:	f6 4c       	sbci	r31, 0xC6	; 198
    37e8:	21 e0       	ldi	r18, 0x01	; 1
    37ea:	39 e7       	ldi	r19, 0x79	; 121
    37ec:	20 83       	st	Z, r18
    37ee:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    37f0:	fc 01       	movw	r30, r24
    37f2:	ee 0f       	add	r30, r30
    37f4:	ff 1f       	adc	r31, r31
    37f6:	e5 5a       	subi	r30, 0xA5	; 165
    37f8:	f6 4c       	sbci	r31, 0xC6	; 198
    37fa:	2a e1       	ldi	r18, 0x1A	; 26
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	15 c0       	rjmp	.+42     	; 0x382a <ProcessInput+0xa30>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3800:	87 36       	cpi	r24, 0x67	; 103
    3802:	09 f0       	breq	.+2      	; 0x3806 <ProcessInput+0xa0c>
    3804:	86 c2       	rjmp	.+1292   	; 0x3d12 <ProcessInput+0xf18>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3806:	81 2f       	mov	r24, r17
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	fc 01       	movw	r30, r24
    380c:	ee 0f       	add	r30, r30
    380e:	ff 1f       	adc	r31, r31
    3810:	e5 5e       	subi	r30, 0xE5	; 229
    3812:	f6 4c       	sbci	r31, 0xC6	; 198
    3814:	2f e9       	ldi	r18, 0x9F	; 159
    3816:	36 e7       	ldi	r19, 0x76	; 118
    3818:	20 83       	st	Z, r18
    381a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    381c:	fc 01       	movw	r30, r24
    381e:	ee 0f       	add	r30, r30
    3820:	ff 1f       	adc	r31, r31
    3822:	e5 5a       	subi	r30, 0xA5	; 165
    3824:	f6 4c       	sbci	r31, 0xC6	; 198
    3826:	28 e2       	ldi	r18, 0x28	; 40
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	20 83       	st	Z, r18
    382c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    382e:	88 0f       	add	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	fc 01       	movw	r30, r24
    3834:	e5 56       	subi	r30, 0x65	; 101
    3836:	f6 4c       	sbci	r31, 0xC6	; 198
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	80 83       	st	Z, r24
    383e:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3840:	1f 5f       	subi	r17, 0xFF	; 255
    3842:	67 c2       	rjmp	.+1230   	; 0x3d12 <ProcessInput+0xf18>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3844:	6a ed       	ldi	r22, 0xDA	; 218
    3846:	78 e3       	ldi	r23, 0x38	; 56
    3848:	0e 94 37 12 	call	0x246e	; 0x246e <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    384c:	d3 01       	movw	r26, r6
    384e:	8c 91       	ld	r24, X
    3850:	84 37       	cpi	r24, 0x74	; 116
    3852:	61 f5       	brne	.+88     	; 0x38ac <ProcessInput+0xab2>
    3854:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    3858:	83 fd       	sbrc	r24, 3
    385a:	43 c0       	rjmp	.+134    	; 0x38e2 <ProcessInput+0xae8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    385c:	8b e1       	ldi	r24, 0x1B	; 27
    385e:	99 e7       	ldi	r25, 0x79	; 121
    3860:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3864:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3868:	8e e1       	ldi	r24, 0x1E	; 30
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3870:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    387c:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3880:	80 91 f4 38 	lds	r24, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3884:	90 91 f5 38 	lds	r25, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3888:	20 91 e6 38 	lds	r18, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    388c:	30 91 e7 38 	lds	r19, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    3890:	20 93 1f 39 	sts	0x391F, r18	; 0x80391f <reactStr+0x4>
    3894:	30 93 20 39 	sts	0x3920, r19	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3898:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    389c:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    38a0:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    38a4:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    38a8:	13 e0       	ldi	r17, 0x03	; 3
    38aa:	33 c2       	rjmp	.+1126   	; 0x3d12 <ProcessInput+0xf18>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    38ac:	85 37       	cpi	r24, 0x75	; 117
    38ae:	39 f4       	brne	.+14     	; 0x38be <ProcessInput+0xac4>
    38b0:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    38b4:	84 fd       	sbrc	r24, 4
    38b6:	15 c0       	rjmp	.+42     	; 0x38e2 <ProcessInput+0xae8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	99 e7       	ldi	r25, 0x79	; 121
    38bc:	3b c2       	rjmp	.+1142   	; 0x3d34 <ProcessInput+0xf3a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    38be:	82 37       	cpi	r24, 0x72	; 114
    38c0:	69 f4       	brne	.+26     	; 0x38dc <ProcessInput+0xae2>
    38c2:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <actObj1.3989+0x8>
    38c6:	85 fd       	sbrc	r24, 5
    38c8:	0c c0       	rjmp	.+24     	; 0x38e2 <ProcessInput+0xae8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38ca:	86 ee       	ldi	r24, 0xE6	; 230
    38cc:	98 e7       	ldi	r25, 0x78	; 120
    38ce:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    38d2:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    38d6:	8b e1       	ldi	r24, 0x1B	; 27
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	78 cb       	rjmp	.-2320   	; 0x2fcc <ProcessInput+0x1d2>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    38dc:	87 36       	cpi	r24, 0x67	; 103
    38de:	09 f4       	brne	.+2      	; 0x38e2 <ProcessInput+0xae8>
    38e0:	cc ca       	rjmp	.-2664   	; 0x2e7a <ProcessInput+0x80>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    38e2:	00 91 f8 38 	lds	r16, 0x38F8	; 0x8038f8 <actObj1.3989+0x1e>
    38e6:	10 91 f9 38 	lds	r17, 0x38F9	; 0x8038f9 <actObj1.3989+0x1f>
    38ea:	01 30       	cpi	r16, 0x01	; 1
    38ec:	11 05       	cpc	r17, r1
    38ee:	09 f5       	brne	.+66     	; 0x3932 <ProcessInput+0xb38>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    38f0:	93 01       	movw	r18, r6
    38f2:	2e 5f       	subi	r18, 0xFE	; 254
    38f4:	3f 4f       	sbci	r19, 0xFF	; 255
    38f6:	40 e0       	ldi	r20, 0x00	; 0
    38f8:	61 e0       	ldi	r22, 0x01	; 1
    38fa:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    38fe:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    3902:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
                                if (data[2] == '1') {
    3906:	f3 01       	movw	r30, r6
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	81 33       	cpi	r24, 0x31	; 49
    390c:	09 f0       	breq	.+2      	; 0x3910 <ProcessInput+0xb16>
    390e:	06 cb       	rjmp	.-2548   	; 0x2f1c <ProcessInput+0x122>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3910:	85 e2       	ldi	r24, 0x25	; 37
    3912:	95 e7       	ldi	r25, 0x75	; 117
    3914:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3918:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    391c:	8b e2       	ldi	r24, 0x2B	; 43
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3924:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3928:	00 93 9d 39 	sts	0x399D, r16	; 0x80399d <reactStr+0x82>
    392c:	10 93 9e 39 	sts	0x399E, r17	; 0x80399e <reactStr+0x83>
    3930:	57 cb       	rjmp	.-2386   	; 0x2fe0 <ProcessInput+0x1e6>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3932:	01 15       	cp	r16, r1
    3934:	11 05       	cpc	r17, r1
    3936:	09 f4       	brne	.+2      	; 0x393a <ProcessInput+0xb40>
    3938:	58 c0       	rjmp	.+176    	; 0x39ea <ProcessInput+0xbf0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    393a:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0x10>
    393e:	90 91 eb 38 	lds	r25, 0x38EB	; 0x8038eb <actObj1.3989+0x11>
    3942:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3946:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    394a:	00 93 5d 39 	sts	0x395D, r16	; 0x80395d <reactStr+0x42>
    394e:	10 93 5e 39 	sts	0x395E, r17	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3952:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3956:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    395a:	89 e5       	ldi	r24, 0x59	; 89
    395c:	9a e7       	ldi	r25, 0x7A	; 122
    395e:	80 93 1f 39 	sts	0x391F, r24	; 0x80391f <reactStr+0x4>
    3962:	90 93 20 39 	sts	0x3920, r25	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3966:	82 e0       	ldi	r24, 0x02	; 2
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	80 93 5f 39 	sts	0x395F, r24	; 0x80395f <reactStr+0x44>
    396e:	90 93 60 39 	sts	0x3960, r25	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	80 93 9f 39 	sts	0x399F, r24	; 0x80399f <reactStr+0x84>
    397a:	90 93 a0 39 	sts	0x39A0, r25	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    397e:	2d ea       	ldi	r18, 0xAD	; 173
    3980:	38 e7       	ldi	r19, 0x78	; 120
    3982:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3986:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    398a:	22 e1       	ldi	r18, 0x12	; 18
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3992:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3996:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    399a:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    399e:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    39a2:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3989+0x21>
    39a6:	40 97       	sbiw	r24, 0x10	; 16
    39a8:	30 f0       	brcs	.+12     	; 0x39b6 <ProcessInput+0xbbc>
    39aa:	8f e0       	ldi	r24, 0x0F	; 15
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <actObj1.3989+0x20>
    39b2:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    39b6:	2a e0       	ldi	r18, 0x0A	; 10
    39b8:	39 e3       	ldi	r19, 0x39	; 57
    39ba:	40 e0       	ldi	r20, 0x00	; 0
    39bc:	60 91 fa 38 	lds	r22, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    39c0:	80 91 ec 38 	lds	r24, 0x38EC	; 0x8038ec <actObj1.3989+0x12>
    39c4:	90 91 ed 38 	lds	r25, 0x38ED	; 0x8038ed <actObj1.3989+0x13>
    39c8:	0e 94 86 08 	call	0x110c	; 0x110c <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    39cc:	6a e0       	ldi	r22, 0x0A	; 10
    39ce:	79 e3       	ldi	r23, 0x39	; 57
    39d0:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    39d4:	0e 94 4d 11 	call	0x229a	; 0x229a <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    39d8:	e0 91 fa 38 	lds	r30, 0x38FA	; 0x8038fa <actObj1.3989+0x20>
    39dc:	f0 91 fb 38 	lds	r31, 0x38FB	; 0x8038fb <actObj1.3989+0x21>
    39e0:	e6 5f       	subi	r30, 0xF6	; 246
    39e2:	f6 4c       	sbci	r31, 0xC6	; 198
    39e4:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    39e6:	14 e0       	ldi	r17, 0x04	; 4
    39e8:	94 c1       	rjmp	.+808    	; 0x3d12 <ProcessInput+0xf18>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    39ea:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    39ee:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
    39f2:	88 23       	and	r24, r24
    39f4:	01 f1       	breq	.+64     	; 0x3a36 <ProcessInput+0xc3c>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    39f6:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x26>
    39fa:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39fe:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3a02:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3a06:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3a0a:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a0e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3a12:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3a16:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3a1a:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3a1e:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3a28:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3a2c:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3a30:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    3a34:	d5 ca       	rjmp	.-2646   	; 0x2fe0 <ProcessInput+0x1e6>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3a36:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x24>
    3a3a:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a3e:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x16>
    3a42:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x17>
    3a46:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3a4a:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a4e:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3a52:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3a56:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3a5a:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3a5e:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3989+0x29>
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3a68:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3a6c:	b9 ca       	rjmp	.-2702   	; 0x2fe0 <ProcessInput+0x1e6>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3a6e:	d3 01       	movw	r26, r6
    3a70:	8c 91       	ld	r24, X
    3a72:	84 37       	cpi	r24, 0x74	; 116
    3a74:	11 f0       	breq	.+4      	; 0x3a7a <ProcessInput+0xc80>
    3a76:	87 36       	cpi	r24, 0x67	; 103
    3a78:	49 f4       	brne	.+18     	; 0x3a8c <ProcessInput+0xc92>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a7a:	89 e3       	ldi	r24, 0x39	; 57
    3a7c:	99 e7       	ldi	r25, 0x79	; 121
    3a7e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3a82:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3a86:	84 e1       	ldi	r24, 0x14	; 20
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	a0 ca       	rjmp	.-2752   	; 0x2fcc <ProcessInput+0x1d2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a8c:	8d e4       	ldi	r24, 0x4D	; 77
    3a8e:	99 e7       	ldi	r25, 0x79	; 121
    3a90:	f6 cf       	rjmp	.-20     	; 0x3a7e <ProcessInput+0xc84>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3a92:	81 36       	cpi	r24, 0x61	; 97
    3a94:	09 f0       	breq	.+2      	; 0x3a98 <ProcessInput+0xc9e>
    3a96:	42 ca       	rjmp	.-2940   	; 0x2f1c <ProcessInput+0x122>
            
            //Priest offerings
            if (specialPassed >= 2) {
    3a98:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <specialPassed>
    3a9c:	82 30       	cpi	r24, 0x02	; 2
    3a9e:	08 f4       	brcc	.+2      	; 0x3aa2 <ProcessInput+0xca8>
    3aa0:	c7 c0       	rjmp	.+398    	; 0x3c30 <ProcessInput+0xe36>
                if (data[1] > 0) {
    3aa2:	f3 01       	movw	r30, r6
    3aa4:	21 81       	ldd	r18, Z+1	; 0x01
    3aa6:	22 23       	and	r18, r18
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <ProcessInput+0xcb2>
    3aaa:	af c0       	rjmp	.+350    	; 0x3c0a <ProcessInput+0xe10>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    3aac:	ce 01       	movw	r24, r28
    3aae:	01 96       	adiw	r24, 0x01	; 1
    3ab0:	7c 01       	movw	r14, r24
    3ab2:	88 e0       	ldi	r24, 0x08	; 8
    3ab4:	d7 01       	movw	r26, r14
    3ab6:	1d 92       	st	X+, r1
    3ab8:	8a 95       	dec	r24
    3aba:	e9 f7       	brne	.-6      	; 0x3ab6 <ProcessInput+0xcbc>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    3abc:	20 53       	subi	r18, 0x30	; 48
    3abe:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3ac0:	32 81       	ldd	r19, Z+2	; 0x02
    3ac2:	31 53       	subi	r19, 0x31	; 49
    3ac4:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    3ac6:	83 81       	ldd	r24, Z+3	; 0x03
    3ac8:	81 36       	cpi	r24, 0x61	; 97
    3aca:	11 f4       	brne	.+4      	; 0x3ad0 <ProcessInput+0xcd6>
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	0c c0       	rjmp	.+24     	; 0x3ae8 <ProcessInput+0xcee>
                    else if (data[3] == 'e') data[3] = 0;
    3ad0:	85 36       	cpi	r24, 0x65	; 101
    3ad2:	19 f4       	brne	.+6      	; 0x3ada <ProcessInput+0xce0>
    3ad4:	f3 01       	movw	r30, r6
    3ad6:	13 82       	std	Z+3, r1	; 0x03
    3ad8:	08 c0       	rjmp	.+16     	; 0x3aea <ProcessInput+0xcf0>
                    else if (data[3] == 'f') data[3] = 3;
    3ada:	86 36       	cpi	r24, 0x66	; 102
    3adc:	19 f4       	brne	.+6      	; 0x3ae4 <ProcessInput+0xcea>
    3ade:	83 e0       	ldi	r24, 0x03	; 3
    3ae0:	83 83       	std	Z+3, r24	; 0x03
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <ProcessInput+0xcf0>
                    else data[3] = 2;
    3ae4:	82 e0       	ldi	r24, 0x02	; 2
    3ae6:	f3 01       	movw	r30, r6
    3ae8:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3aea:	21 fd       	sbrc	r18, 1
    3aec:	04 c0       	rjmp	.+8      	; 0x3af6 <ProcessInput+0xcfc>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	dc 01       	movw	r26, r24
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <ProcessInput+0xd04>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    3af6:	80 e0       	ldi	r24, 0x00	; 0
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	a0 e1       	ldi	r26, 0x10	; 16
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3afe:	20 ff       	sbrs	r18, 0
    3b00:	03 c0       	rjmp	.+6      	; 0x3b08 <ProcessInput+0xd0e>
    3b02:	9f 5f       	subi	r25, 0xFF	; 255
    3b04:	af 4f       	sbci	r26, 0xFF	; 255
    3b06:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    3b08:	f3 01       	movw	r30, r6
    3b0a:	23 81       	ldd	r18, Z+3	; 0x03
    3b0c:	21 fd       	sbrc	r18, 1
    3b0e:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3b10:	20 ff       	sbrs	r18, 0
    3b12:	03 c0       	rjmp	.+6      	; 0x3b1a <ProcessInput+0xd20>
    3b14:	40 96       	adiw	r24, 0x10	; 16
    3b16:	a1 1d       	adc	r26, r1
    3b18:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3b1a:	31 ff       	sbrs	r19, 1
    3b1c:	03 c0       	rjmp	.+6      	; 0x3b24 <ProcessInput+0xd2a>
    3b1e:	90 5f       	subi	r25, 0xF0	; 240
    3b20:	af 4f       	sbci	r26, 0xFF	; 255
    3b22:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    3b24:	30 ff       	sbrs	r19, 0
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <ProcessInput+0xd34>
    3b28:	01 96       	adiw	r24, 0x01	; 1
    3b2a:	a1 1d       	adc	r26, r1
    3b2c:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3b2e:	40 91 3d 38 	lds	r20, 0x383D	; 0x80383d <whoami>
    3b32:	24 e0       	ldi	r18, 0x04	; 4
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	24 1b       	sub	r18, r20
    3b38:	31 09       	sbc	r19, r1
    3b3a:	04 c0       	rjmp	.+8      	; 0x3b44 <ProcessInput+0xd4a>
    3b3c:	88 0f       	add	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	aa 1f       	adc	r26, r26
    3b42:	bb 1f       	adc	r27, r27
    3b44:	2a 95       	dec	r18
    3b46:	d2 f7       	brpl	.-12     	; 0x3b3c <ProcessInput+0xd42>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b48:	28 ec       	ldi	r18, 0xC8	; 200
    3b4a:	34 e7       	ldi	r19, 0x74	; 116
    3b4c:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3b50:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3b54:	20 e2       	ldi	r18, 0x20	; 32
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	20 93 5d 39 	sts	0x395D, r18	; 0x80395d <reactStr+0x42>
    3b5c:	30 93 5e 39 	sts	0x395E, r19	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3b60:	21 e0       	ldi	r18, 0x01	; 1
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	20 93 9d 39 	sts	0x399D, r18	; 0x80399d <reactStr+0x82>
    3b68:	30 93 9e 39 	sts	0x399E, r19	; 0x80399e <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b6c:	4d e9       	ldi	r20, 0x9D	; 157
    3b6e:	54 e7       	ldi	r21, 0x74	; 116
    3b70:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3b74:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3b78:	42 e0       	ldi	r20, 0x02	; 2
    3b7a:	50 e0       	ldi	r21, 0x00	; 0
    3b7c:	40 93 5f 39 	sts	0x395F, r20	; 0x80395f <reactStr+0x44>
    3b80:	50 93 60 39 	sts	0x3960, r21	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3b84:	20 93 9f 39 	sts	0x399F, r18	; 0x80399f <reactStr+0x84>
    3b88:	30 93 a0 39 	sts	0x39A0, r19	; 0x8039a0 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3b8c:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    3b8e:	f7 01       	movw	r30, r14
    3b90:	e0 0f       	add	r30, r16
    3b92:	f1 1d       	adc	r31, r1
    3b94:	28 2f       	mov	r18, r24
    3b96:	2f 70       	andi	r18, 0x0F	; 15
    3b98:	20 83       	st	Z, r18
                        answer /= 16;
    3b9a:	44 e0       	ldi	r20, 0x04	; 4
    3b9c:	b6 95       	lsr	r27
    3b9e:	a7 95       	ror	r26
    3ba0:	97 95       	ror	r25
    3ba2:	87 95       	ror	r24
    3ba4:	4a 95       	dec	r20
    3ba6:	d1 f7       	brne	.-12     	; 0x3b9c <ProcessInput+0xda2>
                        if (answer == 0) break;
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	a1 05       	cpc	r26, r1
    3bac:	b1 05       	cpc	r27, r1
    3bae:	49 f4       	brne	.+18     	; 0x3bc2 <ProcessInput+0xdc8>
    3bb0:	2b e1       	ldi	r18, 0x1B	; 27
    3bb2:	c2 2e       	mov	r12, r18
    3bb4:	29 e3       	ldi	r18, 0x39	; 57
    3bb6:	d2 2e       	mov	r13, r18
    3bb8:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3bba:	aa 24       	eor	r10, r10
    3bbc:	a3 94       	inc	r10
    3bbe:	b1 2c       	mov	r11, r1
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <ProcessInput+0xdcc>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    3bc2:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    3bc4:	e4 cf       	rjmp	.-56     	; 0x3b8e <ProcessInput+0xd94>
    3bc6:	b2 e0       	ldi	r27, 0x02	; 2
    3bc8:	cb 0e       	add	r12, r27
    3bca:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3bcc:	08 30       	cpi	r16, 0x08	; 8
    3bce:	08 f0       	brcs	.+2      	; 0x3bd2 <ProcessInput+0xdd8>
    3bd0:	9e c0       	rjmp	.+316    	; 0x3d0e <ProcessInput+0xf14>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3bd2:	1f 5f       	subi	r17, 0xFF	; 255
    3bd4:	f7 01       	movw	r30, r14
    3bd6:	e0 0f       	add	r30, r16
    3bd8:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bda:	80 81       	ld	r24, Z
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	83 57       	subi	r24, 0x73	; 115
    3be0:	9b 48       	sbci	r25, 0x8B	; 139
    3be2:	d6 01       	movw	r26, r12
    3be4:	14 96       	adiw	r26, 0x04	; 4
    3be6:	8d 93       	st	X+, r24
    3be8:	9c 93       	st	X, r25
    3bea:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3bec:	f6 01       	movw	r30, r12
    3bee:	ec 5b       	subi	r30, 0xBC	; 188
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	a0 82       	st	Z, r10
    3bf4:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3bf6:	e0 5c       	subi	r30, 0xC0	; 192
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	a0 82       	st	Z, r10
    3bfc:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3bfe:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3c02:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3c06:	0f 5f       	subi	r16, 0xFF	; 255
    3c08:	de cf       	rjmp	.-68     	; 0x3bc6 <ProcessInput+0xdcc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c0a:	88 ee       	ldi	r24, 0xE8	; 232
    3c0c:	94 e7       	ldi	r25, 0x74	; 116
    3c0e:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3c12:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c16:	8d e3       	ldi	r24, 0x3D	; 61
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c1e:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3c2a:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
    3c2e:	6e c0       	rjmp	.+220    	; 0x3d0c <ProcessInput+0xf12>
    3c30:	e0 91 2e 38 	lds	r30, 0x382E	; 0x80382e <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	ee 0f       	add	r30, r30
    3c38:	ff 1f       	adc	r31, r31
    3c3a:	e3 52       	subi	r30, 0x23	; 35
    3c3c:	f6 4c       	sbci	r31, 0xC6	; 198
    3c3e:	6a ed       	ldi	r22, 0xDA	; 218
    3c40:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <ProcessInput+0xe4e>
    3c46:	46 c0       	rjmp	.+140    	; 0x3cd4 <ProcessInput+0xeda>
                PopulateObject(route[currDepth+1], &actObj1);
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	0e 94 37 12 	call	0x246e	; 0x246e <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3c50:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <actObj1.3989+0x7>
    3c54:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <CheckState>
    3c58:	88 23       	and	r24, r24
    3c5a:	01 f1       	breq	.+64     	; 0x3c9c <ProcessInput+0xea2>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3c5c:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x26>
    3c60:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c64:	20 91 f2 38 	lds	r18, 0x38F2	; 0x8038f2 <actObj1.3989+0x18>
    3c68:	30 91 f3 38 	lds	r19, 0x38F3	; 0x8038f3 <actObj1.3989+0x19>
    3c6c:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3c70:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3c74:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3c78:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3c7c:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3c80:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3c84:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x2a>
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3c8e:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3c92:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <actObj1.3989+0xa>
    3c96:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
    3c9a:	38 c0       	rjmp	.+112    	; 0x3d0c <ProcessInput+0xf12>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3c9c:	80 91 fe 38 	lds	r24, 0x38FE	; 0x8038fe <actObj1.3989+0x24>
    3ca0:	90 91 ff 38 	lds	r25, 0x38FF	; 0x8038ff <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ca4:	20 91 f0 38 	lds	r18, 0x38F0	; 0x8038f0 <actObj1.3989+0x16>
    3ca8:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj1.3989+0x17>
    3cac:	20 93 1d 39 	sts	0x391D, r18	; 0x80391d <reactStr+0x2>
    3cb0:	30 93 1e 39 	sts	0x391E, r19	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3cb4:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3cb8:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3cbc:	10 92 9d 39 	sts	0x399D, r1	; 0x80399d <reactStr+0x82>
    3cc0:	10 92 9e 39 	sts	0x399E, r1	; 0x80399e <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3cc4:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <actObj1.3989+0x29>
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <effect>
    3cce:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <effect+0x1>
    3cd2:	1c c0       	rjmp	.+56     	; 0x3d0c <ProcessInput+0xf12>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	0e 94 37 12 	call	0x246e	; 0x246e <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3cdc:	80 e6       	ldi	r24, 0x60	; 96
    3cde:	98 e7       	ldi	r25, 0x78	; 120
    3ce0:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3ce4:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3ce8:	8d e4       	ldi	r24, 0x4D	; 77
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3cf0:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3cfc:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3d00:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <getClock>
    3d04:	80 93 07 39 	sts	0x3907, r24	; 0x803907 <PunishmentTime>
    3d08:	90 93 08 39 	sts	0x3908, r25	; 0x803908 <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3d0c:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3d0e:	10 92 0a 39 	sts	0x390A, r1	; 0x80390a <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3d12:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <specialInput>
    3d16:	88 23       	and	r24, r24
    3d18:	19 f0       	breq	.+6      	; 0x3d20 <ProcessInput+0xf26>
    3d1a:	10 93 1a 39 	sts	0x391A, r17	; 0x80391a <responseList>
    3d1e:	8b c0       	rjmp	.+278    	; 0x3e36 <ProcessInput+0x103c>
    3d20:	81 2f       	mov	r24, r17
    3d22:	01 c0       	rjmp	.+2      	; 0x3d26 <ProcessInput+0xf2c>

    } else {

        responseList = SetStandardResponse(1);
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	0e 94 bb 11 	call	0x2376	; 0x2376 <SetStandardResponse>
    3d2a:	80 93 1a 39 	sts	0x391A, r24	; 0x80391a <responseList>
    3d2e:	83 c0       	rjmp	.+262    	; 0x3e36 <ProcessInput+0x103c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d30:	81 ed       	ldi	r24, 0xD1	; 209
    3d32:	99 e7       	ldi	r25, 0x79	; 121
    3d34:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3d38:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3d3c:	8a e1       	ldi	r24, 0x1A	; 26
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	45 c9       	rjmp	.-3446   	; 0x2fcc <ProcessInput+0x1d2>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3d42:	f2 e0       	ldi	r31, 0x02	; 2
    3d44:	ff 12       	cpse	r15, r31
    3d46:	99 c8       	rjmp	.-3790   	; 0x2e7a <ProcessInput+0x80>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3d48:	f3 01       	movw	r30, r6
    3d4a:	61 81       	ldd	r22, Z+1	; 0x01
    3d4c:	0e 94 b0 12 	call	0x2560	; 0x2560 <CheckLetter>
    3d50:	88 23       	and	r24, r24
    3d52:	09 f4       	brne	.+2      	; 0x3d56 <ProcessInput+0xf5c>
    3d54:	58 c0       	rjmp	.+176    	; 0x3e06 <ProcessInput+0x100c>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3d56:	00 e0       	ldi	r16, 0x00	; 0
    3d58:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3d5a:	00 0f       	add	r16, r16
    3d5c:	11 1f       	adc	r17, r17
    3d5e:	02 5c       	subi	r16, 0xC2	; 194
    3d60:	17 4c       	sbci	r17, 0xC7	; 199
    3d62:	6a ed       	ldi	r22, 0xDA	; 218
    3d64:	78 e3       	ldi	r23, 0x38	; 56
    3d66:	d8 01       	movw	r26, r16
    3d68:	8d 91       	ld	r24, X+
    3d6a:	9c 91       	ld	r25, X
    3d6c:	0e 94 37 12 	call	0x246e	; 0x246e <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d70:	86 e9       	ldi	r24, 0x96	; 150
    3d72:	97 e7       	ldi	r25, 0x77	; 119
    3d74:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3d78:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3d7c:	80 e1       	ldi	r24, 0x10	; 16
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	80 93 5d 39 	sts	0x395D, r24	; 0x80395d <reactStr+0x42>
    3d84:	90 93 5e 39 	sts	0x395E, r25	; 0x80395e <reactStr+0x43>
    reactStr[2][number]=type;
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	80 93 9d 39 	sts	0x399D, r24	; 0x80399d <reactStr+0x82>
    3d90:	90 93 9e 39 	sts	0x399E, r25	; 0x80399e <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3d94:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x1a>
    3d98:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3d9c:	40 91 e6 38 	lds	r20, 0x38E6	; 0x8038e6 <actObj1.3989+0xc>
    3da0:	50 91 e7 38 	lds	r21, 0x38E7	; 0x8038e7 <actObj1.3989+0xd>
    3da4:	40 93 1f 39 	sts	0x391F, r20	; 0x80391f <reactStr+0x4>
    3da8:	50 93 20 39 	sts	0x3920, r21	; 0x803920 <reactStr+0x5>
    reactStr[1][number]=length;
    3dac:	20 93 5f 39 	sts	0x395F, r18	; 0x80395f <reactStr+0x44>
    3db0:	30 93 60 39 	sts	0x3960, r19	; 0x803960 <reactStr+0x45>
    reactStr[2][number]=type;
    3db4:	10 92 9f 39 	sts	0x399F, r1	; 0x80399f <reactStr+0x84>
    3db8:	10 92 a0 39 	sts	0x39A0, r1	; 0x8039a0 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3dbc:	29 e5       	ldi	r18, 0x59	; 89
    3dbe:	3a e7       	ldi	r19, 0x7A	; 122
    3dc0:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr+0x6>
    3dc4:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x7>
    reactStr[1][number]=length;
    3dc8:	22 e0       	ldi	r18, 0x02	; 2
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	20 93 61 39 	sts	0x3961, r18	; 0x803961 <reactStr+0x46>
    3dd0:	30 93 62 39 	sts	0x3962, r19	; 0x803962 <reactStr+0x47>
    reactStr[2][number]=type;
    3dd4:	80 93 a1 39 	sts	0x39A1, r24	; 0x8039a1 <reactStr+0x86>
    3dd8:	90 93 a2 39 	sts	0x39A2, r25	; 0x8039a2 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ddc:	29 e5       	ldi	r18, 0x59	; 89
    3dde:	37 e7       	ldi	r19, 0x77	; 119
    3de0:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x8>
    3de4:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x9>
    reactStr[1][number]=length;
    3de8:	2d e3       	ldi	r18, 0x3D	; 61
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x48>
    3df0:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x49>
    reactStr[2][number]=type;
    3df4:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x88>
    3df8:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	10 82       	st	Z, r1
    3e00:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3e02:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3e04:	86 cf       	rjmp	.-244    	; 0x3d12 <ProcessInput+0xf18>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3e06:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <inventory+0x2>
    3e0a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <inventory+0x3>
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	49 f0       	breq	.+18     	; 0x3e24 <ProcessInput+0x102a>
                        if (CheckLetter(inventory[x], data[1])) {
    3e12:	f3 01       	movw	r30, r6
    3e14:	61 81       	ldd	r22, Z+1	; 0x01
    3e16:	0e 94 b0 12 	call	0x2560	; 0x2560 <CheckLetter>
    3e1a:	88 23       	and	r24, r24
    3e1c:	19 f0       	breq	.+6      	; 0x3e24 <ProcessInput+0x102a>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3e1e:	01 e0       	ldi	r16, 0x01	; 1
    3e20:	10 e0       	ldi	r17, 0x00	; 0
    3e22:	9b cf       	rjmp	.-202    	; 0x3d5a <ProcessInput+0xf60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3e24:	81 e6       	ldi	r24, 0x61	; 97
    3e26:	99 e7       	ldi	r25, 0x79	; 121
    3e28:	80 93 1d 39 	sts	0x391D, r24	; 0x80391d <reactStr+0x2>
    3e2c:	90 93 1e 39 	sts	0x391E, r25	; 0x80391e <reactStr+0x3>
    reactStr[1][number]=length;
    3e30:	81 e2       	ldi	r24, 0x21	; 33
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	cb c8       	rjmp	.-3690   	; 0x2fcc <ProcessInput+0x1d2>
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3e36:	f3 01       	movw	r30, r6
    3e38:	10 82       	st	Z, r1
    serRxDone = 0;
    3e3a:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <serRxDone>
    RXCNT = 0;    
    3e3e:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	28 96       	adiw	r28, 0x08	; 8
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	cf 90       	pop	r12
    3e58:	bf 90       	pop	r11
    3e5a:	af 90       	pop	r10
    3e5c:	9f 90       	pop	r9
    3e5e:	8f 90       	pop	r8
    3e60:	7f 90       	pop	r7
    3e62:	6f 90       	pop	r6
    3e64:	08 95       	ret

00003e66 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3e66:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3e68:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3e6c:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3e70:	89 2b       	or	r24, r25
    3e72:	09 f1       	breq	.+66     	; 0x3eb6 <TextAdventure+0x50>
        PunishmentCount = getClock();
    3e74:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <getClock>
        if (PunishmentCount < PunishmentTime)
    3e78:	20 91 07 39 	lds	r18, 0x3907	; 0x803907 <PunishmentTime>
    3e7c:	30 91 08 39 	lds	r19, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3e80:	82 17       	cp	r24, r18
    3e82:	93 07       	cpc	r25, r19
    3e84:	08 f4       	brcc	.+2      	; 0x3e88 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3e86:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3e88:	ac 01       	movw	r20, r24
    3e8a:	42 1b       	sub	r20, r18
    3e8c:	53 0b       	sbc	r21, r19
    3e8e:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3e90:	4b 30       	cpi	r20, 0x0B	; 11
    3e92:	51 05       	cpc	r21, r1
    3e94:	30 f0       	brcs	.+12     	; 0x3ea2 <TextAdventure+0x3c>
            PunishmentTime = 0;
    3e96:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <PunishmentTime>
    3e9a:	10 92 08 39 	sts	0x3908, r1	; 0x803908 <PunishmentTime+0x1>
            PunishmentCount = 10;
    3e9e:	2a e0       	ldi	r18, 0x0A	; 10
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3ea2:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <gameNow>
    3ea6:	81 11       	cpse	r24, r1
    3ea8:	06 c0       	rjmp	.+12     	; 0x3eb6 <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3eaa:	65 e0       	ldi	r22, 0x05	; 5
    3eac:	62 1b       	sub	r22, r18
    3eae:	8a e0       	ldi	r24, 0x0A	; 10
    3eb0:	82 1b       	sub	r24, r18
    3eb2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3eb6:	0e 94 95 13 	call	0x272a	; 0x272a <CheckSend>
    3eba:	88 23       	and	r24, r24
    3ebc:	11 f0       	breq	.+4      	; 0x3ec2 <TextAdventure+0x5c>
    3ebe:	c1 e0       	ldi	r28, 0x01	; 1
    3ec0:	18 c0       	rjmp	.+48     	; 0x3ef2 <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3ec2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <CheckResponse>
    3ec6:	c8 2f       	mov	r28, r24
    3ec8:	81 11       	cpse	r24, r1
    3eca:	f9 cf       	rjmp	.-14     	; 0x3ebe <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3ecc:	80 91 07 39 	lds	r24, 0x3907	; 0x803907 <PunishmentTime>
    3ed0:	90 91 08 39 	lds	r25, 0x3908	; 0x803908 <PunishmentTime+0x1>
    3ed4:	89 2b       	or	r24, r25
    3ed6:	69 f4       	brne	.+26     	; 0x3ef2 <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3ed8:	8e e6       	ldi	r24, 0x6E	; 110
    3eda:	98 e3       	ldi	r25, 0x38	; 56
    3edc:	0e 94 38 14 	call	0x2870	; 0x2870 <CheckInput>
    3ee0:	c8 2f       	mov	r28, r24
    3ee2:	81 11       	cpse	r24, r1
    3ee4:	05 c0       	rjmp	.+10     	; 0x3ef0 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3ee6:	8e e6       	ldi	r24, 0x6E	; 110
    3ee8:	98 e3       	ldi	r25, 0x38	; 56
    3eea:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <ProcessInput>
    3eee:	01 c0       	rjmp	.+2      	; 0x3ef2 <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3ef0:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3ef2:	8c 2f       	mov	r24, r28
    3ef4:	cf 91       	pop	r28
    3ef6:	08 95       	ret

00003ef8 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3ef8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Setup>
    LoadGameState();
    3efc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <LoadGameState>
    SelfTest();
    3f00:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <SelfTest>
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3f04:	cf e1       	ldi	r28, 0x1F	; 31
    3f06:	d0 e0       	ldi	r29, 0x00	; 0
    Setup();
    LoadGameState();
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3f08:	0e 94 ce 0c 	call	0x199c	; 0x199c <GenerateAudio>
    3f0c:	88 23       	and	r24, r24
    3f0e:	e1 f3       	breq	.-8      	; 0x3f08 <main+0x10>
            lastButtonState = buttonState;
    3f10:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3f14:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3f18:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <CheckButtons>
    3f1c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3f20:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3f24:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3f28:	82 31       	cpi	r24, 0x12	; 18
    3f2a:	19 f4       	brne	.+6      	; 0x3f32 <main+0x3a>
    3f2c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <SelectAuIn>
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <main+0x3e>
    3f32:	0e 94 da 08 	call	0x11b4	; 0x11b4 <SelectTSens>

            GenerateBlinks();
    3f36:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3f3a:	95 df       	rcall	.-214    	; 0x3e66 <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3f3c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <MagnetMaze>
            LanyardCode();
    3f40:	0e 94 03 03 	call	0x606	; 0x606 <LanyardCode>
            BastetDictates();
    3f44:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <BastetDictates>
            MakeFriends();
    3f48:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    3f4c:	0e 94 a9 09 	call	0x1352	; 0x1352 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3f50:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3f54:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3f58:	0a 97       	sbiw	r24, 0x0a	; 10
    3f5a:	18 f4       	brcc	.+6      	; 0x3f62 <main+0x6a>
    3f5c:	84 e7       	ldi	r24, 0x74	; 116
    3f5e:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3f62:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcPhot>
    3f66:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3f6a:	85 36       	cpi	r24, 0x65	; 101
    3f6c:	91 05       	cpc	r25, r1
    3f6e:	18 f0       	brcs	.+6      	; 0x3f76 <main+0x7e>
    3f70:	84 ef       	ldi	r24, 0xF4	; 244
    3f72:	0e 94 30 0a 	call	0x1460	; 0x1460 <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3f76:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3f7a:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f7e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3f82:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3f86:	46 e0       	ldi	r20, 0x06	; 6
    3f88:	36 95       	lsr	r19
    3f8a:	27 95       	ror	r18
    3f8c:	4a 95       	dec	r20
    3f8e:	e1 f7       	brne	.-8      	; 0x3f88 <main+0x90>
    3f90:	82 1b       	sub	r24, r18
    3f92:	93 0b       	sbc	r25, r19
    3f94:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3f98:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3f9c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3fa0:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3fa4:	93 95       	inc	r25
    3fa6:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3faa:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3fae:	20 91 bd 3a 	lds	r18, 0x3ABD	; 0x803abd <adcPhot>
    3fb2:	30 91 be 3a 	lds	r19, 0x3ABE	; 0x803abe <adcPhot+0x1>
    3fb6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3fba:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3fbe:	22 0f       	add	r18, r18
    3fc0:	23 2f       	mov	r18, r19
    3fc2:	22 1f       	adc	r18, r18
    3fc4:	33 0b       	sbc	r19, r19
    3fc6:	31 95       	neg	r19
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e2 1b       	sub	r30, r18
    3fcc:	f3 0b       	sbc	r31, r19
    3fce:	ee 5a       	subi	r30, 0xAE	; 174
    3fd0:	ff 43       	sbci	r31, 0x3F	; 63
    3fd2:	20 81       	ld	r18, Z
    3fd4:	82 1b       	sub	r24, r18
    3fd6:	91 09       	sbc	r25, r1
    3fd8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3fdc:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3fe0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3fe4:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3fe8:	66 e0       	ldi	r22, 0x06	; 6
    3fea:	96 95       	lsr	r25
    3fec:	87 95       	ror	r24
    3fee:	6a 95       	dec	r22
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <main+0xf2>
    3ff2:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3ff6:	0e 94 b7 0a 	call	0x156e	; 0x156e <HotSummer>
    3ffa:	86 cf       	rjmp	.-244    	; 0x3f08 <main+0x10>

00003ffc <__tablejump2__>:
    3ffc:	ee 0f       	add	r30, r30
    3ffe:	ff 1f       	adc	r31, r31
    4000:	05 90       	lpm	r0, Z+
    4002:	f4 91       	lpm	r31, Z
    4004:	e0 2d       	mov	r30, r0
    4006:	09 94       	ijmp

00004008 <_exit>:
    4008:	f8 94       	cli

0000400a <__stop_program>:
    400a:	ff cf       	rjmp	.-2      	; 0x400a <__stop_program>
