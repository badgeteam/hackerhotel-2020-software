
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00803800  00003104  000031b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003042  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c2  0000b042  00003042  000030f6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002d3  00803892  00803892  0000324a  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000324a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000327c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000288  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005d62  00000000  00000000  00003544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024aa  00000000  00000000  000092a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002d6f  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000808  00000000  00000000  0000e4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000017fb  00000000  00000000  0000ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f67  00000000  00000000  000104c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000318  00000000  00000000  0001442a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	95 c5       	rjmp	.+2858   	; 0xb44 <__vector_6>
      1a:	00 00       	nop
      1c:	dd c5       	rjmp	.+3002   	; 0xbd8 <__vector_7>
      1e:	00 00       	nop
      20:	cd c3       	rjmp	.+1946   	; 0x7bc <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c4       	rjmp	.+2088   	; 0x85e <__vector_13>
      36:	00 00       	nop
      38:	45 c4       	rjmp	.+2186   	; 0x8c4 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	03 c5       	rjmp	.+2566   	; 0xa58 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c5       	rjmp	.+2650   	; 0xab4 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7e c4       	rjmp	.+2300   	; 0x96a <__vector_27>
      6e:	00 00       	nop
      70:	d7 c4       	rjmp	.+2478   	; 0xa20 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e4 e0       	ldi	r30, 0x04	; 4
      90:	f1 e3       	ldi	r31, 0x31	; 49
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 39       	cpi	r26, 0x92	; 146
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a2 e9       	ldi	r26, 0x92	; 146
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 36       	cpi	r26, 0x65	; 101
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 23 17 	call	0x2e46	; 0x2e46 <main>
      b2:	0c 94 1f 18 	jmp	0x303e	; 0x303e <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	80 83       	st	Z, r24
      c4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      c8:	a1 e2       	ldi	r26, 0x21	; 33
      ca:	b4 e0       	ldi	r27, 0x04	; 4
      cc:	92 e0       	ldi	r25, 0x02	; 2
      ce:	9c 93       	st	X, r25
      d0:	90 83       	st	Z, r25
      d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      d6:	e0 e1       	ldi	r30, 0x10	; 16
      d8:	f8 e0       	ldi	r31, 0x08	; 8
      da:	97 e0       	ldi	r25, 0x07	; 7
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	94 83       	std	Z+4, r25	; 0x04
      e2:	83 83       	std	Z+3, r24	; 0x03
      e4:	8c 93       	st	X, r24
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	85 81       	ldd	r24, Z+5	; 0x05
      ee:	84 6c       	ori	r24, 0xC4	; 196
      f0:	85 83       	std	Z+5, r24	; 0x05
      f2:	08 95       	ret

000000f4 <I2C_recover>:
      f4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     108:	99 e0       	ldi	r25, 0x09	; 9
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     112:	30 e1       	ldi	r19, 0x10	; 16
     114:	3a 95       	dec	r19
     116:	f1 f7       	brne	.-4      	; 0x114 <I2C_recover+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_recover+0x26>
     11a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     11e:	30 e1       	ldi	r19, 0x10	; 16
     120:	3a 95       	dec	r19
     122:	f1 f7       	brne	.-4      	; 0x120 <I2C_recover+0x2c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <I2C_recover+0x32>
     126:	91 50       	subi	r25, 0x01	; 1
     128:	89 f7       	brne	.-30     	; 0x10c <I2C_recover+0x18>
     12a:	28 e0       	ldi	r18, 0x08	; 8
     12c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     130:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     13e:	91 60       	ori	r25, 0x01	; 1
     140:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     144:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	94 6c       	ori	r25, 0xC4	; 196
     14a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     152:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     156:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	84 6c       	ori	r24, 0xC4	; 196
     16a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16e:	08 95       	ret

00000170 <I2C_start>:
     170:	28 2f       	mov	r18, r24
     172:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     176:	90 6c       	ori	r25, 0xC0	; 192
     178:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	89 2f       	mov	r24, r25
     182:	84 70       	andi	r24, 0x04	; 4
     184:	92 fd       	sbrc	r25, 2
     186:	03 c0       	rjmp	.+6      	; 0x18e <I2C_start+0x1e>
     188:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     18c:	08 95       	ret
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	08 95       	ret

00000192 <I2C_wait_ACK>:
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	80 93 95 3a 	sts	0x3A95, r24	; 0x803a95 <timeout_I2C>
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     19c:	87 fd       	sbrc	r24, 7
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a8:	80 91 95 3a 	lds	r24, 0x3A95	; 0x803a95 <timeout_I2C>
     1ac:	81 11       	cpse	r24, r1
     1ae:	f4 cf       	rjmp	.-24     	; 0x198 <I2C_wait_ACK+0x6>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	82 fd       	sbrc	r24, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <I2C_wait_ACK+0x46>
     1c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ca:	83 fd       	sbrc	r24, 3
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <I2C_wait_ACK+0x4a>
     1ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d2:	82 95       	swap	r24
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret

000001e0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e2:	8c e0       	ldi	r24, 0x0C	; 12
     1e4:	80 93 95 3a 	sts	0x3A95, r24	; 0x803a95 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1e8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ec:	89 2f       	mov	r24, r25
     1ee:	83 70       	andi	r24, 0x03	; 3
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1f8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1fc:	97 fd       	sbrc	r25, 7
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     200:	90 91 95 3a 	lds	r25, 0x3A95	; 0x803a95 <timeout_I2C>
     204:	91 11       	cpse	r25, r1
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <I2C_read+0x18>
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     20c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     210:	90 6c       	ori	r25, 0xC0	; 192
     212:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     216:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21a:	92 fd       	sbrc	r25, 2
     21c:	1e c0       	rjmp	.+60     	; 0x25a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     21e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     222:	93 fd       	sbrc	r25, 3
     224:	1d c0       	rjmp	.+58     	; 0x260 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     226:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22a:	89 2f       	mov	r24, r25
     22c:	80 71       	andi	r24, 0x10	; 16
     22e:	94 fd       	sbrc	r25, 4
     230:	16 c0       	rjmp	.+44     	; 0x25e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     232:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <I2C_read+0x5e>
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	01 c0       	rjmp	.+2      	; 0x240 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     23e:	94 60       	ori	r25, 0x04	; 4
     240:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     244:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     248:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24a:	61 11       	cpse	r22, r1
     24c:	09 c0       	rjmp	.+18     	; 0x260 <I2C_read+0x80>
     24e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     252:	92 60       	ori	r25, 0x02	; 2
     254:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     258:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     25e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     260:	08 95       	ret

00000262 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     262:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	80 93 95 3a 	sts	0x3A95, r24	; 0x803a95 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	b1 f4       	brne	.+44     	; 0x2a0 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     274:	80 81       	ld	r24, Z
     276:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     27e:	86 fd       	sbrc	r24, 6
     280:	06 c0       	rjmp	.+12     	; 0x28e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     282:	80 91 95 3a 	lds	r24, 0x3A95	; 0x803a95 <timeout_I2C>
     286:	81 11       	cpse	r24, r1
     288:	f8 cf       	rjmp	.-16     	; 0x27a <I2C_write+0x18>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     28e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     292:	82 fd       	sbrc	r24, 2
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     296:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29a:	82 95       	swap	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a4:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2a6:	08 95       	ret

000002a8 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2a8:	e0 e1       	ldi	r30, 0x10	; 16
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 83       	std	Z+4, r24	; 0x04
     2b2:	08 95       	ret

000002b4 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	6b 01       	movw	r12, r22
     2c4:	f4 2e       	mov	r15, r20
     2c6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2c8:	18 2f       	mov	r17, r24
     2ca:	11 0f       	add	r17, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	50 df       	rcall	.-352    	; 0x170 <I2C_start>
	if (status != 0) goto error;
     2d0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d2:	2b c0       	rjmp	.+86     	; 0x32a <I2C_read_bytes+0x76>
     2d4:	5e df       	rcall	.-324    	; 0x192 <I2C_wait_ACK>
	if (status == 1) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <I2C_read_bytes+0x2c>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <I2C_stop>
		return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	27 c0       	rjmp	.+78     	; 0x32e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e0:	81 11       	cpse	r24, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2e6:	49 f0       	breq	.+18     	; 0x2fa <I2C_read_bytes+0x46>
     2e8:	c6 01       	movw	r24, r12
     2ea:	bb df       	rcall	.-138    	; 0x262 <I2C_write>
	    if (status != 0) goto error;
     2ec:	81 11       	cpse	r24, r1
     2ee:	1d c0       	rjmp	.+58     	; 0x32a <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	c8 1a       	sub	r12, r24
     2f4:	d8 0a       	sbc	r13, r24
        --reg_len;
     2f6:	fa 94       	dec	r15
     2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <I2C_read_bytes+0x30>
     2fa:	01 34       	cpi	r16, 0x41	; 65
     2fc:	08 f0       	brcs	.+2      	; 0x300 <I2C_read_bytes+0x4c>
     2fe:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     300:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     302:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     306:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     308:	40 f0       	brcs	.+16     	; 0x31a <I2C_read_bytes+0x66>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	ce 01       	movw	r24, r28
     30e:	68 df       	rcall	.-304    	; 0x1e0 <I2C_read>
		if (status != 0) goto error;
     310:	81 11       	cpse	r24, r1
     312:	0b c0       	rjmp	.+22     	; 0x32a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     318:	f6 cf       	rjmp	.-20     	; 0x306 <I2C_read_bytes+0x52>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     31e:	60 df       	rcall	.-320    	; 0x1e0 <I2C_read>
     320:	81 11       	cpse	r24, r1
	I2C_stop();
     322:	03 c0       	rjmp	.+6      	; 0x32a <I2C_read_bytes+0x76>
     324:	c1 df       	rcall	.-126    	; 0x2a8 <I2C_stop>
	return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32a:	e4 de       	rcall	.-568    	; 0xf4 <I2C_recover>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     32e:	df 91       	pop	r29
}
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <MagnetMaze>:
     33e:	cf 93       	push	r28
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     340:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     342:	87 ef       	ldi	r24, 0xF7	; 247
     344:	2f d6       	rcall	.+3166   	; 0xfa4 <CheckState>
     346:	81 11       	cpse	r24, r1
     348:	35 c1       	rjmp	.+618    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     34a:	8d e7       	ldi	r24, 0x7D	; 125
     34c:	2b d6       	rcall	.+3158   	; 0xfa4 <CheckState>
     34e:	81 11       	cpse	r24, r1
     350:	31 c1       	rjmp	.+610    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     352:	80 91 97 38 	lds	r24, 0x3897	; 0x803897 <gameNow>
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	08 f0       	brcs	.+2      	; 0x35c <MagnetMaze+0x1e>
     35a:	2c c1       	rjmp	.+600    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        return 0;

    if (calHall == 0)
     35c:	80 91 3f 3b 	lds	r24, 0x3B3F	; 0x803b3f <calHall>
     360:	90 91 40 3b 	lds	r25, 0x3B40	; 0x803b40 <calHall+0x1>
     364:	89 2b       	or	r24, r25
     366:	41 f4       	brne	.+16     	; 0x378 <MagnetMaze+0x3a>
        calHall = adcHall;
     368:	80 91 f0 3a 	lds	r24, 0x3AF0	; 0x803af0 <adcHall>
     36c:	90 91 f1 3a 	lds	r25, 0x3AF1	; 0x803af1 <adcHall+0x1>
     370:	80 93 3f 3b 	sts	0x3B3F, r24	; 0x803b3f <calHall>
     374:	90 93 40 3b 	sts	0x3B40, r25	; 0x803b40 <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     378:	80 91 f0 3a 	lds	r24, 0x3AF0	; 0x803af0 <adcHall>
     37c:	90 91 f1 3a 	lds	r25, 0x3AF1	; 0x803af1 <adcHall+0x1>
     380:	20 91 3f 3b 	lds	r18, 0x3B3F	; 0x803b3f <calHall>
     384:	30 91 40 3b 	lds	r19, 0x3B40	; 0x803b40 <calHall+0x1>
     388:	82 1b       	sub	r24, r18
     38a:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     38c:	30 91 a4 38 	lds	r19, 0x38A4	; 0x8038a4 <curHallState>
     390:	31 30       	cpi	r19, 0x01	; 1
     392:	89 f0       	breq	.+34     	; 0x3b6 <MagnetMaze+0x78>
     394:	18 f0       	brcs	.+6      	; 0x39c <MagnetMaze+0x5e>
     396:	32 30       	cpi	r19, 0x02	; 2
     398:	c1 f0       	breq	.+48     	; 0x3ca <MagnetMaze+0x8c>
     39a:	1f c0       	rjmp	.+62     	; 0x3da <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     39c:	84 3d       	cpi	r24, 0xD4	; 212
     39e:	2e ef       	ldi	r18, 0xFE	; 254
     3a0:	92 07       	cpc	r25, r18
     3a2:	14 f4       	brge	.+4      	; 0x3a8 <MagnetMaze+0x6a>
                newHallState = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     3a8:	8d 32       	cpi	r24, 0x2D	; 45
     3aa:	91 40       	sbci	r25, 0x01	; 1
     3ac:	5c f0       	brlt	.+22     	; 0x3c4 <MagnetMaze+0x86>
                newHallState = 2;
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <newHallState>
     3b4:	12 c0       	rjmp	.+36     	; 0x3da <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     3b6:	8d 32       	cpi	r24, 0x2D	; 45
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	92 07       	cpc	r25, r18
     3bc:	c4 f7       	brge	.-16     	; 0x3ae <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     3be:	89 38       	cpi	r24, 0x89	; 137
     3c0:	9f 4f       	sbci	r25, 0xFF	; 255
     3c2:	84 f3       	brlt	.-32     	; 0x3a4 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     3c4:	10 92 a3 38 	sts	0x38A3, r1	; 0x8038a3 <newHallState>
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     3ca:	84 3d       	cpi	r24, 0xD4	; 212
     3cc:	2e ef       	ldi	r18, 0xFE	; 254
     3ce:	92 07       	cpc	r25, r18
     3d0:	4c f3       	brlt	.-46     	; 0x3a4 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     3d2:	88 37       	cpi	r24, 0x78	; 120
     3d4:	91 05       	cpc	r25, r1
     3d6:	b4 f3       	brlt	.-20     	; 0x3c4 <MagnetMaze+0x86>
     3d8:	ea cf       	rjmp	.-44     	; 0x3ae <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[GEM[G]] = (newHallState ? 255 : 0);
     3da:	c0 91 55 b0 	lds	r28, 0xB055	; 0x80b055 <__bss_end+0x74f0>
     3de:	ec 2f       	mov	r30, r28
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 91 a3 38 	lds	r24, 0x38A3	; 0x8038a3 <newHallState>
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	81 11       	cpse	r24, r1
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <MagnetMaze+0xb0>
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	91 95       	neg	r25
     3f0:	ea 5e       	subi	r30, 0xEA	; 234
     3f2:	f4 4c       	sbci	r31, 0xC4	; 196
     3f4:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     3f6:	88 23       	and	r24, r24
     3f8:	09 f4       	brne	.+2      	; 0x3fc <MagnetMaze+0xbe>
     3fa:	a8 c0       	rjmp	.+336    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     3fc:	20 91 a2 38 	lds	r18, 0x38A2	; 0x8038a2 <mazePos>
     400:	21 11       	cpse	r18, r1
     402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 a0 38 	sts	0x38A0, r25	; 0x8038a0 <inverted>

    if (newHallState != curHallState) {
     410:	38 17       	cp	r19, r24
     412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	cf c0       	rjmp	.+414    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        curHallState = newHallState;
     416:	80 93 a4 38 	sts	0x38A4, r24	; 0x8038a4 <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     420:	90 91 a0 38 	lds	r25, 0x38A0	; 0x8038a0 <inverted>
     424:	99 23       	and	r25, r25
     426:	11 f0       	breq	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     428:	93 e0       	ldi	r25, 0x03	; 3
     42a:	89 27       	eor	r24, r25
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	e2 2f       	mov	r30, r18
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	e0 59       	subi	r30, 0x90	; 144
     434:	ff 44       	sbci	r31, 0x4F	; 79
     436:	40 81       	ld	r20, Z
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	84 17       	cp	r24, r20
     43c:	95 07       	cpc	r25, r21
     43e:	91 f4       	brne	.+36     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
                mazeState &= TRUE;
     440:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <mazeState>
     444:	81 70       	andi	r24, 0x01	; 1
     446:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <mazeState>
                iLED[EYE[R][L]] = 0;
     44a:	e0 91 61 b0 	lds	r30, 0xB061	; 0x80b061 <__bss_end+0x74fc>
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	ea 5e       	subi	r30, 0xEA	; 234
     452:	f4 4c       	sbci	r31, 0xC4	; 196
     454:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     456:	e0 91 60 b0 	lds	r30, 0xB060	; 0x80b060 <__bss_end+0x74fb>
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ea 5e       	subi	r30, 0xEA	; 234
     45e:	f4 4c       	sbci	r31, 0xC4	; 196
     460:	10 82       	st	Z, r1
     462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
            } else {
                mazeState = FALSE;
     464:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     468:	2f 5f       	subi	r18, 0xFF	; 255
     46a:	20 93 a2 38 	sts	0x38A2, r18	; 0x8038a2 <mazePos>
            mazeCnt++;            
     46e:	80 91 a1 38 	lds	r24, 0x38A1	; 0x8038a1 <mazeCnt>
     472:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     474:	83 30       	cpi	r24, 0x03	; 3
     476:	18 f4       	brcc	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     478:	80 93 a1 38 	sts	0x38A1, r24	; 0x8038a1 <mazeCnt>
     47c:	9b c0       	rjmp	.+310    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     47e:	10 92 a1 38 	sts	0x38A1, r1	; 0x8038a1 <mazeCnt>
                if (mazeState == TRUE) {
     482:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <mazeState>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	89 f5       	brne	.+98     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = 255;
     48a:	eb ea       	ldi	r30, 0xAB	; 171
     48c:	2e 9f       	mul	r18, r30
     48e:	e1 2d       	mov	r30, r1
     490:	11 24       	eor	r1, r1
     492:	e6 95       	lsr	r30
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ec 59       	subi	r30, 0x9C	; 156
     498:	ff 44       	sbci	r31, 0x4F	; 79
     49a:	e5 81       	ldd	r30, Z+5	; 0x05
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ea 5e       	subi	r30, 0xEA	; 234
     4a0:	f4 4c       	sbci	r31, 0xC4	; 196
     4a2:	df ef       	ldi	r29, 0xFF	; 255
     4a4:	d0 83       	st	Z, r29
                    if (mazePos == sizeof(mazeCode)) {
     4a6:	22 31       	cpi	r18, 0x12	; 18
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
                        UpdateState(MAZE_COMPLETED);
     4aa:	84 c0       	rjmp	.+264    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     4ac:	8d e7       	ldi	r24, 0x7D	; 125
     4ae:	72 d5       	rcall	.+2788   	; 0xf94 <UpdateState>
                        iLED[GEM[G]]    = 0;
     4b0:	ec 2f       	mov	r30, r28
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	ea 5e       	subi	r30, 0xEA	; 234
     4b6:	f4 4c       	sbci	r31, 0xC4	; 196
     4b8:	10 82       	st	Z, r1
                        iLED[EYE[R][L]] = 0;
     4ba:	e0 91 61 b0 	lds	r30, 0xB061	; 0x80b061 <__bss_end+0x74fc>
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	ea 5e       	subi	r30, 0xEA	; 234
     4c2:	f4 4c       	sbci	r31, 0xC4	; 196
     4c4:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     4c6:	e0 91 60 b0 	lds	r30, 0xB060	; 0x80b060 <__bss_end+0x74fb>
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	ea 5e       	subi	r30, 0xEA	; 234
     4ce:	f4 4c       	sbci	r31, 0xC4	; 196
     4d0:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = 255;
     4d2:	e0 91 63 b0 	lds	r30, 0xB063	; 0x80b063 <__bss_end+0x74fe>
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	ea 5e       	subi	r30, 0xEA	; 234
     4da:	f4 4c       	sbci	r31, 0xC4	; 196
     4dc:	d0 83       	st	Z, r29
                        iLED[EYE[G][R]] = 255;
     4de:	e0 91 62 b0 	lds	r30, 0xB062	; 0x80b062 <__bss_end+0x74fd>
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	ea 5e       	subi	r30, 0xEA	; 234
     4e6:	f4 4c       	sbci	r31, 0xC4	; 196
     4e8:	d0 83       	st	Z, r29
     4ea:	64 c0       	rjmp	.+200    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     4ec:	10 92 97 38 	sts	0x3897, r1	; 0x803897 <gameNow>
                    mazePos   = 0;
     4f0:	10 92 a2 38 	sts	0x38A2, r1	; 0x8038a2 <mazePos>
                    mazeState = TRUE;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <mazeState>
                    iLED[GEM[G]]    = 0;
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
     4fc:	ca 5e       	subi	r28, 0xEA	; 234
     4fe:	d4 4c       	sbci	r29, 0xC4	; 196
     500:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     502:	e0 91 63 b0 	lds	r30, 0xB063	; 0x80b063 <__bss_end+0x74fe>
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	ea 5e       	subi	r30, 0xEA	; 234
     50a:	f4 4c       	sbci	r31, 0xC4	; 196
     50c:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     50e:	e0 91 62 b0 	lds	r30, 0xB062	; 0x80b062 <__bss_end+0x74fd>
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	ea 5e       	subi	r30, 0xEA	; 234
     516:	f4 4c       	sbci	r31, 0xC4	; 196
     518:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 255;
     51a:	e0 91 61 b0 	lds	r30, 0xB061	; 0x80b061 <__bss_end+0x74fc>
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	ea 5e       	subi	r30, 0xEA	; 234
     522:	f4 4c       	sbci	r31, 0xC4	; 196
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = 255;
     528:	e0 91 60 b0 	lds	r30, 0xB060	; 0x80b060 <__bss_end+0x74fb>
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ea 5e       	subi	r30, 0xEA	; 234
     530:	f4 4c       	sbci	r31, 0xC4	; 196
     532:	80 83       	st	Z, r24
     534:	aa e6       	ldi	r26, 0x6A	; 106
     536:	b0 eb       	ldi	r27, 0xB0	; 176
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     538:	ed 91       	ld	r30, X+
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ea 5e       	subi	r30, 0xEA	; 234
     53e:	f4 4c       	sbci	r31, 0xC4	; 196
     540:	10 82       	st	Z, r1
                    iLED[GEM[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = 255;
                    iLED[EYE[R][R]] = 255;
                    for (int i=0; i<6; i++ )
     542:	80 eb       	ldi	r24, 0xB0	; 176
     544:	a0 37       	cpi	r26, 0x70	; 112
     546:	b8 07       	cpc	r27, r24
     548:	b9 f7       	brne	.-18     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
     54a:	34 c0       	rjmp	.+104    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     54c:	33 23       	and	r19, r19
     54e:	91 f1       	breq	.+100    	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
        curHallState = newHallState;
     550:	10 92 a4 38 	sts	0x38A4, r1	; 0x8038a4 <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     554:	80 91 a2 38 	lds	r24, 0x38A2	; 0x8038a2 <mazePos>
     558:	82 31       	cpi	r24, 0x12	; 18
     55a:	61 f5       	brne	.+88     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
                gameNow   = TEXT;
     55c:	10 92 97 38 	sts	0x3897, r1	; 0x803897 <gameNow>
                mazePos   = 0;
     560:	10 92 a2 38 	sts	0x38A2, r1	; 0x8038a2 <mazePos>
                mazeState = TRUE;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <mazeState>
                iLED[GEM[G]]    = 0;
     56a:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     56c:	e0 91 63 b0 	lds	r30, 0xB063	; 0x80b063 <__bss_end+0x74fe>
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ea 5e       	subi	r30, 0xEA	; 234
     574:	f4 4c       	sbci	r31, 0xC4	; 196
     576:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     578:	e0 91 62 b0 	lds	r30, 0xB062	; 0x80b062 <__bss_end+0x74fd>
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	ea 5e       	subi	r30, 0xEA	; 234
     580:	f4 4c       	sbci	r31, 0xC4	; 196
     582:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     584:	e0 91 61 b0 	lds	r30, 0xB061	; 0x80b061 <__bss_end+0x74fc>
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	ea 5e       	subi	r30, 0xEA	; 234
     58c:	f4 4c       	sbci	r31, 0xC4	; 196
     58e:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     590:	e0 91 60 b0 	lds	r30, 0xB060	; 0x80b060 <__bss_end+0x74fb>
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ea 5e       	subi	r30, 0xEA	; 234
     598:	f4 4c       	sbci	r31, 0xC4	; 196
     59a:	10 82       	st	Z, r1
     59c:	aa e6       	ldi	r26, 0x6A	; 106
     59e:	b0 eb       	ldi	r27, 0xB0	; 176
     5a0:	80 e7       	ldi	r24, 0x70	; 112
     5a2:	90 eb       	ldi	r25, 0xB0	; 176
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     5a4:	ed 91       	ld	r30, X+
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	ea 5e       	subi	r30, 0xEA	; 234
     5aa:	f4 4c       	sbci	r31, 0xC4	; 196
     5ac:	10 82       	st	Z, r1
                iLED[GEM[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     5ae:	8a 17       	cp	r24, r26
     5b0:	9b 07       	cpc	r25, r27
     5b2:	c1 f7       	brne	.-16     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <Setup>:
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	f8 94       	cli
     5c2:	88 ed       	ldi	r24, 0xD8	; 216
     5c4:	84 bf       	out	0x34, r24	; 52
     5c6:	c1 e0       	ldi	r28, 0x01	; 1
     5c8:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     5cc:	8a e4       	ldi	r24, 0x4A	; 74
     5ce:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     5d2:	8c e7       	ldi	r24, 0x7C	; 124
     5d4:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     5d8:	9f e3       	ldi	r25, 0x3F	; 63
     5da:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     5de:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     5e2:	80 68       	ori	r24, 0x80	; 128
     5e4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     5e8:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     5ec:	80 68       	ori	r24, 0x80	; 128
     5ee:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     5f2:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     5f6:	80 68       	ori	r24, 0x80	; 128
     5f8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     5fc:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     600:	80 68       	ori	r24, 0x80	; 128
     602:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     606:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     610:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     614:	80 68       	ori	r24, 0x80	; 128
     616:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     61a:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     61e:	d2 e0       	ldi	r29, 0x02	; 2
     620:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     624:	2b e5       	ldi	r18, 0x5B	; 91
     626:	31 e0       	ldi	r19, 0x01	; 1
     628:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     62c:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     630:	80 ea       	ldi	r24, 0xA0	; 160
     632:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     636:	80 ec       	ldi	r24, 0xC0	; 192
     638:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     642:	1c ba       	out	0x1c, r1	; 28
     644:	1d ba       	out	0x1d, r1	; 29
     646:	1e ba       	out	0x1e, r1	; 30
     648:	1f ba       	out	0x1f, r1	; 31
     64a:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     654:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     658:	87 e7       	ldi	r24, 0x77	; 119
     65a:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     65e:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     662:	8b e0       	ldi	r24, 0x0B	; 11
     664:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     668:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     66c:	81 60       	ori	r24, 0x01	; 1
     66e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     678:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     684:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     688:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     68c:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     690:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     694:	8b e8       	ldi	r24, 0x8B	; 139
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     69c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     6a0:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     6a4:	09 dd       	rcall	.-1518   	; 0xb8 <I2C_init>
     6a6:	82 e1       	ldi	r24, 0x12	; 18
     6a8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     6ac:	80 e2       	ldi	r24, 0x20	; 32
     6ae:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     6b2:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     6b6:	86 e0       	ldi	r24, 0x06	; 6
     6b8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     6bc:	84 e4       	ldi	r24, 0x44	; 68
     6be:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     6c8:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     6cc:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     6d0:	81 60       	ori	r24, 0x01	; 1
     6d2:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     6d6:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     6da:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     6de:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     6e2:	82 e5       	ldi	r24, 0x52	; 82
     6e4:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     6ee:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     6f2:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     6f6:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     6fa:	81 60       	ori	r24, 0x01	; 1
     6fc:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     700:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     70a:	80 e8       	ldi	r24, 0x80	; 128
     70c:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     710:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     714:	81 60       	ori	r24, 0x01	; 1
     716:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     71a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     71e:	80 fd       	sbrc	r24, 0
     720:	fc cf       	rjmp	.-8      	; 0x71a <Setup+0x15e>
     722:	80 e3       	ldi	r24, 0x30	; 48
     724:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     728:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     72c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     730:	82 fd       	sbrc	r24, 2
     732:	fc cf       	rjmp	.-8      	; 0x72c <Setup+0x170>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	98 e7       	ldi	r25, 0x78	; 120
     738:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     73c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     740:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     744:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     748:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     74c:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     750:	82 96       	adiw	r24, 0x22	; 34
     752:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
     756:	80 93 42 3b 	sts	0x3B42, r24	; 0x803b42 <tmp16bit>
     75a:	90 93 43 3b 	sts	0x3B43, r25	; 0x803b43 <tmp16bit+0x1>
     75e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     762:	83 fd       	sbrc	r24, 3
     764:	fc cf       	rjmp	.-8      	; 0x75e <Setup+0x1a2>
     766:	80 91 42 3b 	lds	r24, 0x3B42	; 0x803b42 <tmp16bit>
     76a:	90 91 43 3b 	lds	r25, 0x3B43	; 0x803b43 <tmp16bit+0x1>
     76e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     772:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     782:	88 e0       	ldi	r24, 0x08	; 8
     784:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     788:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     78c:	80 fd       	sbrc	r24, 0
     78e:	fc cf       	rjmp	.-8      	; 0x788 <Setup+0x1cc>
     790:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     794:	81 60       	ori	r24, 0x01	; 1
     796:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     79a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     7a4:	10 92 aa 3a 	sts	0x3AAA, r1	; 0x803aaa <serRx>
     7a8:	8a ea       	ldi	r24, 0xAA	; 170
     7aa:	9a e3       	ldi	r25, 0x3A	; 58
     7ac:	80 93 ee 3a 	sts	0x3AEE, r24	; 0x803aee <serTxAddr>
     7b0:	90 93 ef 3a 	sts	0x3AEF, r25	; 0x803aef <serTxAddr+0x1>
     7b4:	78 94       	sei
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <__vector_8>:
     7bc:	1f 92       	push	r1
     7be:	0f 92       	push	r0
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	0f 92       	push	r0
     7c4:	11 24       	eor	r1, r1
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
     7d2:	87 e0       	ldi	r24, 0x07	; 7
     7d4:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     7d8:	84 e4       	ldi	r24, 0x44	; 68
     7da:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     7de:	ec b3       	in	r30, 0x1c	; 28
     7e0:	88 e0       	ldi	r24, 0x08	; 8
     7e2:	e8 9f       	mul	r30, r24
     7e4:	f0 01       	movw	r30, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	ea 5e       	subi	r30, 0xEA	; 234
     7ea:	f4 4c       	sbci	r31, 0xC4	; 196
     7ec:	a8 e2       	ldi	r26, 0x28	; 40
     7ee:	ba e0       	ldi	r27, 0x0A	; 10
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	81 91       	ld	r24, Z+
     7f4:	8d 93       	st	X+, r24
     7f6:	9a 95       	dec	r25
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <__vector_8+0x36>
     7fa:	8b e0       	ldi	r24, 0x0B	; 11
     7fc:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     800:	8c b3       	in	r24, 0x1c	; 28
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	58 f4       	brcc	.+22     	; 0x81c <__vector_8+0x60>
     806:	8c b3       	in	r24, 0x1c	; 28
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	01 c0       	rjmp	.+2      	; 0x80e <__vector_8+0x52>
     80c:	99 0f       	add	r25, r25
     80e:	8a 95       	dec	r24
     810:	ea f7       	brpl	.-6      	; 0x80c <__vector_8+0x50>
     812:	99 b9       	out	0x09, r25	; 9
     814:	8c b3       	in	r24, 0x1c	; 28
     816:	83 95       	inc	r24
     818:	8c bb       	out	0x1c, r24	; 28
     81a:	0a c0       	rjmp	.+20     	; 0x830 <__vector_8+0x74>
     81c:	8c b3       	in	r24, 0x1c	; 28
     81e:	83 30       	cpi	r24, 0x03	; 3
     820:	21 f4       	brne	.+8      	; 0x82a <__vector_8+0x6e>
     822:	2a 9a       	sbi	0x05, 2	; 5
     824:	83 95       	inc	r24
     826:	8c bb       	out	0x1c, r24	; 28
     828:	03 c0       	rjmp	.+6      	; 0x830 <__vector_8+0x74>
     82a:	2e 9a       	sbi	0x05, 6	; 5
     82c:	88 27       	eor	r24, r24
     82e:	8c bb       	out	0x1c, r24	; 28
     830:	80 91 95 3a 	lds	r24, 0x3A95	; 0x803a95 <timeout_I2C>
     834:	88 23       	and	r24, r24
     836:	29 f0       	breq	.+10     	; 0x842 <__vector_8+0x86>
     838:	80 91 95 3a 	lds	r24, 0x3A95	; 0x803a95 <timeout_I2C>
     83c:	81 50       	subi	r24, 0x01	; 1
     83e:	80 93 95 3a 	sts	0x3A95, r24	; 0x803a95 <timeout_I2C>
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_13>:
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	e0 91 ee 3a 	lds	r30, 0x3AEE	; 0x803aee <serTxAddr>
     874:	f0 91 ef 3a 	lds	r31, 0x3AEF	; 0x803aef <serTxAddr+0x1>
     878:	80 81       	ld	r24, Z
     87a:	88 23       	and	r24, r24
     87c:	91 f0       	breq	.+36     	; 0x8a2 <__vector_13+0x44>
     87e:	80 81       	ld	r24, Z
     880:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     884:	80 91 ee 3a 	lds	r24, 0x3AEE	; 0x803aee <serTxAddr>
     888:	90 91 ef 3a 	lds	r25, 0x3AEF	; 0x803aef <serTxAddr+0x1>
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	80 93 ee 3a 	sts	0x3AEE, r24	; 0x803aee <serTxAddr>
     892:	90 93 ef 3a 	sts	0x3AEF, r25	; 0x803aef <serTxAddr+0x1>
     896:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     89a:	80 62       	ori	r24, 0x20	; 32
     89c:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <__vector_13+0x4e>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <serTxDone>
     8a8:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	9f 91       	pop	r25
     8b8:	8f 91       	pop	r24
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <__vector_14>:
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	8f 93       	push	r24
     8d6:	9f 93       	push	r25
     8d8:	ef 93       	push	r30
     8da:	ff 93       	push	r31
     8dc:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <auSmpAddr>
     8e0:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <auSmpAddr+0x1>
     8e4:	80 81       	ld	r24, Z
     8e6:	81 11       	cpse	r24, r1
     8e8:	08 c0       	rjmp	.+16     	; 0x8fa <__vector_14+0x36>
     8ea:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
     8ee:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__data_start+0x1>
     8f2:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <auSmpAddr>
     8f6:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <auSmpAddr+0x1>
     8fa:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <auSmpAddr>
     8fe:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <auSmpAddr+0x1>
     902:	80 81       	ld	r24, Z
     904:	88 23       	and	r24, r24
     906:	e1 f0       	breq	.+56     	; 0x940 <__vector_14+0x7c>
     908:	20 81       	ld	r18, Z
     90a:	40 91 eb 3a 	lds	r20, 0x3AEB	; 0x803aeb <auVolume>
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	2f 57       	subi	r18, 0x7F	; 127
     912:	31 09       	sbc	r19, r1
     914:	42 9f       	mul	r20, r18
     916:	c0 01       	movw	r24, r0
     918:	43 9f       	mul	r20, r19
     91a:	90 0d       	add	r25, r0
     91c:	11 24       	eor	r1, r1
     91e:	89 2f       	mov	r24, r25
     920:	99 0f       	add	r25, r25
     922:	99 0b       	sbc	r25, r25
     924:	80 58       	subi	r24, 0x80	; 128
     926:	9f 4f       	sbci	r25, 0xFF	; 255
     928:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     92c:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <auSmpAddr>
     930:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <auSmpAddr+0x1>
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <auSmpAddr>
     93a:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <auSmpAddr+0x1>
     93e:	06 c0       	rjmp	.+12     	; 0x94c <__vector_14+0x88>
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	80 93 3e 3b 	sts	0x3B3E, r24	; 0x803b3e <auPlayDone>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	4f 91       	pop	r20
     95c:	3f 91       	pop	r19
     95e:	2f 91       	pop	r18
     960:	0f 90       	pop	r0
     962:	0f be       	out	0x3f, r0	; 63
     964:	0f 90       	pop	r0
     966:	1f 90       	pop	r1
     968:	18 95       	reti

0000096a <__vector_27>:
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	8f 93       	push	r24
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
     97a:	80 91 9f 38 	lds	r24, 0x389F	; 0x80389f <serRxDone>
     97e:	81 11       	cpse	r24, r1
     980:	44 c0       	rjmp	.+136    	; 0xa0a <__vector_27+0xa0>
     982:	ed b3       	in	r30, 0x1d	; 29
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     98a:	e6 55       	subi	r30, 0x56	; 86
     98c:	f5 4c       	sbci	r31, 0xC5	; 197
     98e:	80 83       	st	Z, r24
     990:	ed b3       	in	r30, 0x1d	; 29
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	e6 55       	subi	r30, 0x56	; 86
     996:	f5 4c       	sbci	r31, 0xC5	; 197
     998:	80 81       	ld	r24, Z
     99a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     99e:	ed b3       	in	r30, 0x1d	; 29
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	e6 55       	subi	r30, 0x56	; 86
     9a4:	f5 4c       	sbci	r31, 0xC5	; 197
     9a6:	80 81       	ld	r24, Z
     9a8:	8a 30       	cpi	r24, 0x0A	; 10
     9aa:	39 f0       	breq	.+14     	; 0x9ba <__vector_27+0x50>
     9ac:	ed b3       	in	r30, 0x1d	; 29
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	e6 55       	subi	r30, 0x56	; 86
     9b2:	f5 4c       	sbci	r31, 0xC5	; 197
     9b4:	80 81       	ld	r24, Z
     9b6:	8d 30       	cpi	r24, 0x0D	; 13
     9b8:	49 f4       	brne	.+18     	; 0x9cc <__vector_27+0x62>
     9ba:	ed b3       	in	r30, 0x1d	; 29
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e6 55       	subi	r30, 0x56	; 86
     9c0:	f5 4c       	sbci	r31, 0xC5	; 197
     9c2:	10 82       	st	Z, r1
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <serRxDone>
     9ca:	1f c0       	rjmp	.+62     	; 0xa0a <__vector_27+0xa0>
     9cc:	ed b3       	in	r30, 0x1d	; 29
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e6 55       	subi	r30, 0x56	; 86
     9d2:	f5 4c       	sbci	r31, 0xC5	; 197
     9d4:	80 81       	ld	r24, Z
     9d6:	88 30       	cpi	r24, 0x08	; 8
     9d8:	39 f0       	breq	.+14     	; 0x9e8 <__vector_27+0x7e>
     9da:	ed b3       	in	r30, 0x1d	; 29
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e6 55       	subi	r30, 0x56	; 86
     9e0:	f5 4c       	sbci	r31, 0xC5	; 197
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 37       	cpi	r24, 0x7F	; 127
     9e6:	59 f4       	brne	.+22     	; 0x9fe <__vector_27+0x94>
     9e8:	8d b3       	in	r24, 0x1d	; 29
     9ea:	88 23       	and	r24, r24
     9ec:	41 f0       	breq	.+16     	; 0x9fe <__vector_27+0x94>
     9ee:	ed b3       	in	r30, 0x1d	; 29
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	e6 55       	subi	r30, 0x56	; 86
     9f4:	f5 4c       	sbci	r31, 0xC5	; 197
     9f6:	10 82       	st	Z, r1
     9f8:	8d b3       	in	r24, 0x1d	; 29
     9fa:	81 50       	subi	r24, 0x01	; 1
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <__vector_27+0x9e>
     9fe:	8d b3       	in	r24, 0x1d	; 29
     a00:	80 34       	cpi	r24, 0x40	; 64
     a02:	18 f4       	brcc	.+6      	; 0xa0a <__vector_27+0xa0>
     a04:	8d b3       	in	r24, 0x1d	; 29
     a06:	8f 5f       	subi	r24, 0xFF	; 255
     a08:	8d bb       	out	0x1d, r24	; 29
     a0a:	80 e8       	ldi	r24, 0x80	; 128
     a0c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	8f 91       	pop	r24
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <__vector_28>:
     a20:	1f 92       	push	r1
     a22:	0f 92       	push	r0
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	8f 93       	push	r24
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
     a30:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     a34:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     a3e:	e5 e0       	ldi	r30, 0x05	; 5
     a40:	f8 e0       	ldi	r31, 0x08	; 8
     a42:	80 81       	ld	r24, Z
     a44:	8f 7d       	andi	r24, 0xDF	; 223
     a46:	80 83       	st	Z, r24
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	8f 91       	pop	r24
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <__vector_20>:
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	8f 93       	push	r24
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
     a68:	80 91 92 38 	lds	r24, 0x3892	; 0x803892 <__data_end>
     a6c:	81 11       	cpse	r24, r1
     a6e:	15 c0       	rjmp	.+42     	; 0xa9a <__vector_20+0x42>
     a70:	8e b3       	in	r24, 0x1e	; 30
     a72:	8f 5f       	subi	r24, 0xFF	; 255
     a74:	8f 71       	andi	r24, 0x1F	; 31
     a76:	8e bb       	out	0x1e, r24	; 30
     a78:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     a7c:	8e 31       	cpi	r24, 0x1E	; 30
     a7e:	29 f4       	brne	.+10     	; 0xa8a <__vector_20+0x32>
     a80:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     a84:	80 93 41 3b 	sts	0x3B41, r24	; 0x803b41 <adcTemp>
     a88:	0a c0       	rjmp	.+20     	; 0xa9e <__vector_20+0x46>
     a8a:	ee b3       	in	r30, 0x1e	; 30
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     a92:	ea 50       	subi	r30, 0x0A	; 10
     a94:	f5 4c       	sbci	r31, 0xC5	; 197
     a96:	80 83       	st	Z, r24
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__vector_20+0x46>
     a9a:	10 92 92 38 	sts	0x3892, r1	; 0x803892 <__data_end>
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	8f 91       	pop	r24
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <__vector_22>:
     ab4:	1f 92       	push	r1
     ab6:	0f 92       	push	r0
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ac6:	81 11       	cpse	r24, r1
     ac8:	0a c0       	rjmp	.+20     	; 0xade <__vector_22+0x2a>
     aca:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ace:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ad2:	80 93 f2 3a 	sts	0x3AF2, r24	; 0x803af2 <adcPhot>
     ad6:	90 93 f3 3a 	sts	0x3AF3, r25	; 0x803af3 <adcPhot+0x1>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	10 c0       	rjmp	.+32     	; 0xafe <__vector_22+0x4a>
     ade:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	79 f4       	brne	.+30     	; 0xb04 <__vector_22+0x50>
     ae6:	88 e0       	ldi	r24, 0x08	; 8
     ae8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     aec:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     af0:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     af4:	80 93 f0 3a 	sts	0x3AF0, r24	; 0x803af0 <adcHall>
     af8:	90 93 f1 3a 	sts	0x3AF1, r25	; 0x803af1 <adcHall+0x1>
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     b02:	10 c0       	rjmp	.+32     	; 0xb24 <__vector_22+0x70>
     b04:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     b08:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     b0c:	80 93 ec 3a 	sts	0x3AEC, r24	; 0x803aec <adcBtns>
     b10:	90 93 ed 3a 	sts	0x3AED, r25	; 0x803aed <adcBtns+0x1>
     b14:	8f b3       	in	r24, 0x1f	; 31
     b16:	8f 30       	cpi	r24, 0x0F	; 15
     b18:	29 f4       	brne	.+10     	; 0xb24 <__vector_22+0x70>
     b1a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     b1e:	88 e0       	ldi	r24, 0x08	; 8
     b20:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     b24:	8f b3       	in	r24, 0x1f	; 31
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	8f 70       	andi	r24, 0x0F	; 15
     b2c:	99 27       	eor	r25, r25
     b2e:	8f bb       	out	0x1f, r24	; 31
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_6>:
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     b60:	81 ff       	sbrs	r24, 1
     b62:	26 c0       	rjmp	.+76     	; 0xbb0 <__vector_6+0x6c>
     b64:	80 91 9d 38 	lds	r24, 0x389D	; 0x80389d <buttonMark>
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	29 f0       	breq	.+10     	; 0xb76 <__vector_6+0x32>
     b6c:	80 91 9d 38 	lds	r24, 0x389D	; 0x80389d <buttonMark>
     b70:	8f 5f       	subi	r24, 0xFF	; 255
     b72:	80 93 9d 38 	sts	0x389D, r24	; 0x80389d <buttonMark>
     b76:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b7a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b7e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b82:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b86:	82 96       	adiw	r24, 0x22	; 34
     b88:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
     b8c:	80 93 42 3b 	sts	0x3B42, r24	; 0x803b42 <tmp16bit>
     b90:	90 93 43 3b 	sts	0x3B43, r25	; 0x803b43 <tmp16bit+0x1>
     b94:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b98:	83 fd       	sbrc	r24, 3
     b9a:	fc cf       	rjmp	.-8      	; 0xb94 <__vector_6+0x50>
     b9c:	80 91 42 3b 	lds	r24, 0x3B42	; 0x803b42 <tmp16bit>
     ba0:	90 91 43 3b 	lds	r25, 0x3B43	; 0x803b43 <tmp16bit+0x1>
     ba4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     ba8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <__vector_6+0x78>
     bb0:	80 91 9e 38 	lds	r24, 0x389E	; 0x80389e <minuteMark>
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 9e 38 	sts	0x389E, r24	; 0x80389e <minuteMark>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     bc0:	bf 91       	pop	r27
     bc2:	af 91       	pop	r26
     bc4:	9f 91       	pop	r25
     bc6:	8f 91       	pop	r24
     bc8:	7f 91       	pop	r23
     bca:	6f 91       	pop	r22
     bcc:	5f 91       	pop	r21
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_7>:
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	8f 93       	push	r24
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     bea:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     bee:	8f 91       	pop	r24
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <EERead>:
     bfa:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     bfe:	91 fd       	sbrc	r25, 1
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <EERead>
     c02:	fb 01       	movw	r30, r22
     c04:	48 0f       	add	r20, r24
     c06:	84 17       	cp	r24, r20
     c08:	39 f0       	breq	.+14     	; 0xc18 <EERead+0x1e>
     c0a:	a8 2f       	mov	r26, r24
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	bc 5e       	subi	r27, 0xEC	; 236
     c10:	9c 91       	ld	r25, X
     c12:	91 93       	st	Z+, r25
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	f7 cf       	rjmp	.-18     	; 0xc06 <EERead+0xc>
     c18:	08 95       	ret

00000c1a <EEWrite>:
     c1a:	9d e9       	ldi	r25, 0x9D	; 157
     c1c:	24 e0       	ldi	r18, 0x04	; 4
     c1e:	33 e0       	ldi	r19, 0x03	; 3
     c20:	44 23       	and	r20, r20
     c22:	09 f1       	breq	.+66     	; 0xc66 <EEWrite+0x4c>
     c24:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     c28:	51 fd       	sbrc	r21, 1
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <EEWrite+0xa>
     c2c:	94 bf       	out	0x34, r25	; 52
     c2e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     c32:	e8 2f       	mov	r30, r24
     c34:	58 2f       	mov	r21, r24
     c36:	5f 71       	andi	r21, 0x1F	; 31
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	db 01       	movw	r26, r22
     c40:	11 97       	sbiw	r26, 0x01	; 1
     c42:	ac 91       	ld	r26, X
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	fc 5e       	subi	r31, 0xEC	; 236
     c48:	a0 83       	st	Z, r26
     c4a:	41 50       	subi	r20, 0x01	; 1
     c4c:	19 f0       	breq	.+6      	; 0xc54 <EEWrite+0x3a>
     c4e:	e8 2f       	mov	r30, r24
     c50:	5f 31       	cpi	r21, 0x1F	; 31
     c52:	81 f7       	brne	.-32     	; 0xc34 <EEWrite+0x1a>
     c54:	94 bf       	out	0x34, r25	; 52
     c56:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     c5a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     c5e:	52 ff       	sbrs	r21, 2
     c60:	df cf       	rjmp	.-66     	; 0xc20 <EEWrite+0x6>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	08 95       	ret
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 95       	ret

00000c6a <SerSend>:
     c6a:	20 91 05 38 	lds	r18, 0x3805	; 0x803805 <serTxDone>
     c6e:	22 23       	and	r18, r18
     c70:	59 f0       	breq	.+22     	; 0xc88 <SerSend+0x1e>
     c72:	80 93 ee 3a 	sts	0x3AEE, r24	; 0x803aee <serTxAddr>
     c76:	90 93 ef 3a 	sts	0x3AEF, r25	; 0x803aef <serTxAddr+0x1>
     c7a:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <serTxDone>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	08 95       	ret
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret

00000c8c <SerSpeed>:
     c8c:	28 2f       	mov	r18, r24
     c8e:	81 11       	cpse	r24, r1
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <SerSpeed+0x8>
     c92:	21 e0       	ldi	r18, 0x01	; 1
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	82 1b       	sub	r24, r18
     c9a:	91 09       	sbc	r25, r1
     c9c:	98 2f       	mov	r25, r24
     c9e:	88 27       	eor	r24, r24
     ca0:	81 50       	subi	r24, 0x01	; 1
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     ca8:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     cac:	08 95       	ret

00000cae <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     cae:	20 91 ec 3a 	lds	r18, 0x3AEC	; 0x803aec <adcBtns>
     cb2:	30 91 ed 3a 	lds	r19, 0x3AED	; 0x803aed <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	36 95       	lsr	r19
     cba:	27 95       	ror	r18
     cbc:	9a 95       	dec	r25
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <CheckButtons+0xa>
     cc0:	33 27       	eor	r19, r19
     cc2:	2c 35       	cpi	r18, 0x5C	; 92
     cc4:	31 05       	cpc	r19, r1
     cc6:	d0 f4       	brcc	.+52     	; 0xcfc <CheckButtons+0x4e>
     cc8:	23 35       	cpi	r18, 0x53	; 83
     cca:	31 05       	cpc	r19, r1
     ccc:	a8 f5       	brcc	.+106    	; 0xd38 <CheckButtons+0x8a>
     cce:	22 33       	cpi	r18, 0x32	; 50
     cd0:	31 05       	cpc	r19, r1
     cd2:	50 f4       	brcc	.+20     	; 0xce8 <CheckButtons+0x3a>
     cd4:	2d 32       	cpi	r18, 0x2D	; 45
     cd6:	31 05       	cpc	r19, r1
     cd8:	58 f5       	brcc	.+86     	; 0xd30 <CheckButtons+0x82>
     cda:	23 52       	subi	r18, 0x23	; 35
     cdc:	31 09       	sbc	r19, r1
     cde:	25 30       	cpi	r18, 0x05	; 5
     ce0:	31 05       	cpc	r19, r1
     ce2:	80 f5       	brcc	.+96     	; 0xd44 <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     ce4:	9c e0       	ldi	r25, 0x0C	; 12
     ce6:	2f c0       	rjmp	.+94     	; 0xd46 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ce8:	27 33       	cpi	r18, 0x37	; 55
     cea:	31 05       	cpc	r19, r1
     cec:	18 f1       	brcs	.+70     	; 0xd34 <CheckButtons+0x86>
     cee:	2e 53       	subi	r18, 0x3E	; 62
     cf0:	31 09       	sbc	r19, r1
     cf2:	27 30       	cpi	r18, 0x07	; 7
     cf4:	31 05       	cpc	r19, r1
     cf6:	30 f5       	brcc	.+76     	; 0xd44 <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     cf8:	96 e0       	ldi	r25, 0x06	; 6
        break;
     cfa:	25 c0       	rjmp	.+74     	; 0xd46 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     cfc:	2a 38       	cpi	r18, 0x8A	; 138
     cfe:	31 05       	cpc	r19, r1
     d00:	50 f4       	brcc	.+20     	; 0xd16 <CheckButtons+0x68>
     d02:	29 37       	cpi	r18, 0x79	; 121
     d04:	31 05       	cpc	r19, r1
     d06:	d0 f4       	brcc	.+52     	; 0xd3c <CheckButtons+0x8e>
     d08:	23 56       	subi	r18, 0x63	; 99
     d0a:	31 09       	sbc	r19, r1
     d0c:	2b 30       	cpi	r18, 0x0B	; 11
     d0e:	31 05       	cpc	r19, r1
     d10:	c8 f4       	brcc	.+50     	; 0xd44 <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     d12:	93 e0       	ldi	r25, 0x03	; 3
        break;
     d14:	18 c0       	rjmp	.+48     	; 0xd46 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     d16:	22 3a       	cpi	r18, 0xA2	; 162
     d18:	31 05       	cpc	r19, r1
     d1a:	a0 f0       	brcs	.+40     	; 0xd44 <CheckButtons+0x96>
     d1c:	2b 3b       	cpi	r18, 0xBB	; 187
     d1e:	31 05       	cpc	r19, r1
     d20:	78 f0       	brcs	.+30     	; 0xd40 <CheckButtons+0x92>
     d22:	20 5f       	subi	r18, 0xF0	; 240
     d24:	31 09       	sbc	r19, r1
     d26:	20 31       	cpi	r18, 0x10	; 16
     d28:	31 05       	cpc	r19, r1
     d2a:	60 f4       	brcc	.+24     	; 0xd44 <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     d2c:	90 e0       	ldi	r25, 0x00	; 0
        break;
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     d30:	99 e0       	ldi	r25, 0x09	; 9
        break;
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     d34:	98 e0       	ldi	r25, 0x08	; 8
        break;
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     d38:	94 e0       	ldi	r25, 0x04	; 4
        break;
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     d3c:	92 e0       	ldi	r25, 0x02	; 2
        break;
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     d40:	91 e0       	ldi	r25, 0x01	; 1
        break;
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     d44:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     d46:	28 2f       	mov	r18, r24
     d48:	2f 70       	andi	r18, 0x0F	; 15
     d4a:	92 13       	cpse	r25, r18
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     d4e:	98 2f       	mov	r25, r24
     d50:	90 7f       	andi	r25, 0xF0	; 240
     d52:	90 3f       	cpi	r25, 0xF0	; 240
     d54:	39 f0       	breq	.+14     	; 0xd64 <CheckButtons+0xb6>
     d56:	80 5f       	subi	r24, 0xF0	; 240
     d58:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     d5a:	99 23       	and	r25, r25
     d5c:	11 f0       	breq	.+4      	; 0xd62 <CheckButtons+0xb4>
     d5e:	89 2f       	mov	r24, r25
     d60:	08 95       	ret
     d62:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     d64:	08 95       	ret

00000d66 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     d66:	80 91 87 38 	lds	r24, 0x3887	; 0x803887 <state.3874>
     d6a:	90 91 88 38 	lds	r25, 0x3888	; 0x803888 <state.3874+0x1>
     d6e:	9c 01       	movw	r18, r24
     d70:	32 2f       	mov	r19, r18
     d72:	22 27       	eor	r18, r18
     d74:	32 95       	swap	r19
     d76:	33 0f       	add	r19, r19
     d78:	30 7e       	andi	r19, 0xE0	; 224
     d7a:	82 27       	eor	r24, r18
     d7c:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     d7e:	9c 01       	movw	r18, r24
     d80:	23 2f       	mov	r18, r19
     d82:	33 27       	eor	r19, r19
     d84:	26 95       	lsr	r18
     d86:	82 27       	eor	r24, r18
     d88:	93 27       	eor	r25, r19
    state ^= (state << 7);
     d8a:	9c 01       	movw	r18, r24
     d8c:	36 95       	lsr	r19
     d8e:	32 2f       	mov	r19, r18
     d90:	22 27       	eor	r18, r18
     d92:	37 95       	ror	r19
     d94:	27 95       	ror	r18
     d96:	82 27       	eor	r24, r18
     d98:	93 27       	eor	r25, r19
     d9a:	80 93 87 38 	sts	0x3887, r24	; 0x803887 <state.3874>
     d9e:	90 93 88 38 	sts	0x3888, r25	; 0x803888 <state.3874+0x1>
    return (state & 0xff);
}
     da2:	08 95       	ret

00000da4 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	7b 01       	movw	r14, r22
     db4:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     db6:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     dba:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     dbe:	e8 2f       	mov	r30, r24
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	e7 70       	andi	r30, 0x07	; 7
     dc6:	ff 27       	eor	r31, r31
     dc8:	e7 57       	subi	r30, 0x77	; 119
     dca:	f7 4c       	sbci	r31, 0xC7	; 199
     dcc:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     dce:	cb df       	rcall	.-106    	; 0xd66 <lfsr>
     dd0:	8d 21       	and	r24, r13
     dd2:	c8 0f       	add	r28, r24
     dd4:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     dd6:	c7 df       	rcall	.-114    	; 0xd66 <lfsr>
     dd8:	8d 21       	and	r24, r13
     dda:	c8 1b       	sub	r28, r24
     ddc:	d1 09       	sbc	r29, r1
     dde:	0c 17       	cp	r16, r28
     de0:	1d 07       	cpc	r17, r29
     de2:	08 f4       	brcc	.+2      	; 0xde6 <floatSpeed+0x42>
     de4:	e8 01       	movw	r28, r16
     de6:	c7 01       	movw	r24, r14
     de8:	ec 16       	cp	r14, r28
     dea:	fd 06       	cpc	r15, r29
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <floatSpeed+0x4c>
     dee:	ce 01       	movw	r24, r28
     df0:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    //0x038B is normal rate, for wind we need to be a bit slower
    if (val < min) val = min;  
    TCB1_CCMP = val;
     df4:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     df8:	df 91       	pop	r29
}
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <floatAround>:
     e08:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	c8 2f       	mov	r28, r24
     e12:	04 2f       	mov	r16, r20
     e14:	12 2f       	mov	r17, r18
    bits = mask[(bits-1)&0x07];
     e16:	e6 2f       	mov	r30, r22
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	e7 70       	andi	r30, 0x07	; 7
     e1e:	ff 27       	eor	r31, r31
     e20:	e7 57       	subi	r30, 0x77	; 119
     e22:	f7 4c       	sbci	r31, 0xC7	; 199
     e24:	d0 81       	ld	r29, Z
    sample += lfsr()&bits;
     e26:	9f df       	rcall	.-194    	; 0xd66 <lfsr>
     e28:	8d 23       	and	r24, r29
     e2a:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
     e2c:	9c df       	rcall	.-200    	; 0xd66 <lfsr>
     e2e:	8d 23       	and	r24, r29
     e30:	c8 1b       	sub	r28, r24
     e32:	8c 2f       	mov	r24, r28
     e34:	11 23       	and	r17, r17
    if (max){
     e36:	41 f0       	breq	.+16     	; 0xe48 <floatAround+0x40>
     e38:	9c 2f       	mov	r25, r28
     e3a:	1c 17       	cp	r17, r28
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <floatAround+0x38>
     e3e:	91 2f       	mov	r25, r17
     e40:	80 2f       	mov	r24, r16
     e42:	09 17       	cp	r16, r25
     e44:	08 f4       	brcc	.+2      	; 0xe48 <floatAround+0x40>
     e46:	89 2f       	mov	r24, r25
     e48:	df 91       	pop	r29
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    return sample;
}
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	08 95       	ret

00000e52 <SaveGameState>:
     e52:	cf 92       	push	r12

//Save changed data to EEPROM
uint8_t SaveGameState(){
     e54:	df 92       	push	r13
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	64 97       	sbiw	r28, 0x14	; 20
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
     e6a:	44 e1       	ldi	r20, 0x14	; 20
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	c2 de       	rcall	.-636    	; 0xbfa <EERead>
     e76:	86 e9       	ldi	r24, 0x96	; 150
     e78:	c8 2e       	mov	r12, r24
     e7a:	8a e3       	ldi	r24, 0x3A	; 58
     e7c:	d8 2e       	mov	r13, r24
     e7e:	8e 01       	movw	r16, r28
     e80:	0f 5f       	subi	r16, 0xFF	; 255
     e82:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     e84:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
     e86:	f8 01       	movw	r30, r16
     e88:	81 91       	ld	r24, Z+
     e8a:	8f 01       	movw	r16, r30
     e8c:	f6 01       	movw	r30, r12
     e8e:	90 81       	ld	r25, Z
     e90:	98 13       	cpse	r25, r24
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     e94:	f3 94       	inc	r15
     e96:	ff ef       	ldi	r31, 0xFF	; 255
     e98:	cf 1a       	sub	r12, r31
     e9a:	df 0a       	sbc	r13, r31
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	f8 12       	cpse	r15, r24
     ea0:	f2 cf       	rjmp	.-28     	; 0xe86 <SaveGameState+0x34>
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     ea4:	41 e0       	ldi	r20, 0x01	; 1
     ea6:	b6 01       	movw	r22, r12
     ea8:	8f 2d       	mov	r24, r15
     eaa:	b7 de       	rcall	.-658    	; 0xc1a <EEWrite>
     eac:	88 23       	and	r24, r24
     eae:	91 f3       	breq	.-28     	; 0xe94 <SaveGameState+0x42>
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	36 c0       	rjmp	.+108    	; 0xf20 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
     eb4:	20 91 99 38 	lds	r18, 0x3899	; 0x803899 <inventory>
     eb8:	30 91 9a 38 	lds	r19, 0x389A	; 0x80389a <inventory+0x1>
     ebc:	30 93 a6 3a 	sts	0x3AA6, r19	; 0x803aa6 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
     ec0:	20 93 a7 3a 	sts	0x3AA7, r18	; 0x803aa7 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
     ec4:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <inventory+0x2>
     ec8:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <inventory+0x3>
     ecc:	90 93 a8 3a 	sts	0x3AA8, r25	; 0x803aa8 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
     ed0:	80 93 a9 3a 	sts	0x3AA9, r24	; 0x803aa9 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
     ed4:	89 89       	ldd	r24, Y+17	; 0x11
     ed6:	9a 89       	ldd	r25, Y+18	; 0x12
     ed8:	98 27       	eor	r25, r24
     eda:	89 27       	eor	r24, r25
     edc:	98 27       	eor	r25, r24
     ede:	28 17       	cp	r18, r24
     ee0:	39 07       	cpc	r19, r25
     ee2:	69 f4       	brne	.+26     	; 0xefe <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
     ee4:	8b 89       	ldd	r24, Y+19	; 0x13
     ee6:	9c 89       	ldd	r25, Y+20	; 0x14
     ee8:	98 27       	eor	r25, r24
     eea:	89 27       	eor	r24, r25
     eec:	98 27       	eor	r25, r24
     eee:	20 91 9b 38 	lds	r18, 0x389B	; 0x80389b <inventory+0x2>
     ef2:	30 91 9c 38 	lds	r19, 0x389C	; 0x80389c <inventory+0x3>
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	49 f4       	brne	.+18     	; 0xf0e <SaveGameState+0xbc>
     efc:	10 c0       	rjmp	.+32     	; 0xf1e <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
     efe:	42 e0       	ldi	r20, 0x02	; 2
     f00:	66 ea       	ldi	r22, 0xA6	; 166
     f02:	7a e3       	ldi	r23, 0x3A	; 58
     f04:	80 e1       	ldi	r24, 0x10	; 16
     f06:	89 de       	rcall	.-750    	; 0xc1a <EEWrite>
     f08:	88 23       	and	r24, r24
     f0a:	61 f3       	breq	.-40     	; 0xee4 <SaveGameState+0x92>
     f0c:	d1 cf       	rjmp	.-94     	; 0xeb0 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
     f0e:	42 e0       	ldi	r20, 0x02	; 2
     f10:	68 ea       	ldi	r22, 0xA8	; 168
     f12:	7a e3       	ldi	r23, 0x3A	; 58
     f14:	82 e1       	ldi	r24, 0x12	; 18
     f16:	81 de       	rcall	.-766    	; 0xc1a <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	81 11       	cpse	r24, r1
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <SaveGameState+0xce>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
     f20:	89 2f       	mov	r24, r25
     f22:	64 96       	adiw	r28, 0x14	; 20
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
     f38:	e8 2f       	mov	r30, r24
     f3a:	ef 77       	andi	r30, 0x7F	; 127
     f3c:	e6 95       	lsr	r30
     f3e:	e6 95       	lsr	r30
     f40:	e6 95       	lsr	r30
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	ea 56       	subi	r30, 0x6A	; 106
     f46:	f5 4c       	sbci	r31, 0xC5	; 197
     f48:	20 81       	ld	r18, Z
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	87 70       	andi	r24, 0x07	; 7
     f4e:	a9 01       	movw	r20, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <ReadStatusBit+0x1e>
     f52:	55 95       	asr	r21
     f54:	47 95       	ror	r20
     f56:	8a 95       	dec	r24
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <ReadStatusBit+0x1a>
     f5a:	ca 01       	movw	r24, r20
}
     f5c:	81 70       	andi	r24, 0x01	; 1
     f5e:	08 95       	ret

00000f60 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
     f60:	e8 2f       	mov	r30, r24
     f62:	ef 77       	andi	r30, 0x7F	; 127
     f64:	e6 95       	lsr	r30
     f66:	e6 95       	lsr	r30
     f68:	e6 95       	lsr	r30
     f6a:	28 2f       	mov	r18, r24
     f6c:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ea 56       	subi	r30, 0x6A	; 106
     f72:	f5 4c       	sbci	r31, 0xC5	; 197
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <WriteStatusBit+0x1c>
     f7a:	88 0f       	add	r24, r24
     f7c:	2a 95       	dec	r18
     f7e:	ea f7       	brpl	.-6      	; 0xf7a <WriteStatusBit+0x1a>
     f80:	66 23       	and	r22, r22
     f82:	19 f0       	breq	.+6      	; 0xf8a <WriteStatusBit+0x2a>
     f84:	90 81       	ld	r25, Z
     f86:	89 2b       	or	r24, r25
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
     f8a:	80 95       	com	r24
     f8c:	90 81       	ld	r25, Z
     f8e:	89 23       	and	r24, r25
     f90:	80 83       	st	Z, r24
     f92:	08 95       	ret

00000f94 <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
     f94:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
     f96:	8f 77       	andi	r24, 0x7F	; 127
    if (clearBit) {
     f98:	97 ff       	sbrs	r25, 7
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <UpdateState+0xc>
        WriteStatusBit(num, 0);
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <UpdateState+0xe>
    } else {
        WriteStatusBit(num, 1);
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	de cf       	rjmp	.-68     	; 0xf60 <WriteStatusBit>

00000fa4 <CheckState>:
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
     fa4:	cf 93       	push	r28
     fa6:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	c6 df       	rcall	.-116    	; 0xf38 <ReadStatusBit>
     fac:	2c 2f       	mov	r18, r28
     fae:	22 1f       	adc	r18, r18
     fb0:	22 27       	eor	r18, r18
     fb2:	22 1f       	adc	r18, r18
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	81 11       	cpse	r24, r1
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <CheckState+0x18>
     fba:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
     fbc:	82 2f       	mov	r24, r18
     fbe:	89 27       	eor	r24, r25
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <getID>:
uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
     fc4:	e3 e0       	ldi	r30, 0x03	; 3
     fc6:	f1 e1       	ldi	r31, 0x11	; 17
    }
    return 0;
}
uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
     fca:	91 91       	ld	r25, Z+
     fcc:	89 0f       	add	r24, r25
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
     fce:	ed 30       	cpi	r30, 0x0D	; 13
     fd0:	91 e1       	ldi	r25, 0x11	; 17
     fd2:	f9 07       	cpc	r31, r25
     fd4:	d1 f7       	brne	.-12     	; 0xfca <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
     fd6:	83 70       	andi	r24, 0x03	; 3
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <whoami>
    return whoami;
}
     fde:	08 95       	ret

00000fe0 <Reset>:

void Reset(){
     fe0:	e6 e9       	ldi	r30, 0x96	; 150
     fe2:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
     fe4:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
     fe6:	8a e3       	ldi	r24, 0x3A	; 58
     fe8:	ea 3a       	cpi	r30, 0xAA	; 170
     fea:	f8 07       	cpc	r31, r24
     fec:	d9 f7       	brne	.-10     	; 0xfe4 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
     fee:	ea df       	rcall	.-44     	; 0xfc4 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
     ff0:	81 11       	cpse	r24, r1
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     ff4:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <gameState+0xd>
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	31 f4       	brne	.+12     	; 0x100c <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1000:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <gameState+0xd>
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	80 93 a3 3a 	sts	0x3AA3, r24	; 0x803aa3 <gameState+0xd>
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	21 f4       	brne	.+8      	; 0x1018 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1010:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <gameState+0xe>
    1014:	81 60       	ori	r24, 0x01	; 1
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	29 f4       	brne	.+10     	; 0x1026 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    101c:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <gameState+0xe>
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <gameState+0xe>
    1026:	80 91 96 3a 	lds	r24, 0x3A96	; 0x803a96 <gameState>
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 93 96 3a 	sts	0x3A96, r24	; 0x803a96 <gameState>
    1030:	08 95       	ret

00001032 <GenerateAudio>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}


void GenerateAudio(){
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    static uint8_t auBuffer[128] = {0x80, 0};
    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
    103a:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    103e:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>
    1042:	88 27       	eor	r24, r24
    1044:	89 2b       	or	r24, r25
    1046:	09 f0       	breq	.+2      	; 0x104a <GenerateAudio+0x18>
    1048:	65 c0       	rjmp	.+202    	; 0x1114 <GenerateAudio+0xe2>

        //Silence
        if ((effect&0xE0)==0){
    104a:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    104e:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>
    1052:	80 7e       	andi	r24, 0xE0	; 224
    1054:	99 27       	eor	r25, r25
    1056:	89 2b       	or	r24, r25
    1058:	31 f4       	brne	.+12     	; 0x1066 <GenerateAudio+0x34>
            auRepAddr = &zero;
    105a:	83 e9       	ldi	r24, 0x93	; 147
    105c:	98 e3       	ldi	r25, 0x38	; 56
    105e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
    1062:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
    1066:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    106a:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>

        }

        //Good (bell)
        if ((effect&0xE0)==64){
    106e:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    1072:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
    1076:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    107a:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>
    107e:	80 7e       	andi	r24, 0xE0	; 224
    1080:	99 27       	eor	r25, r25
    1082:	80 36       	cpi	r24, 0x60	; 96
    1084:	91 05       	cpc	r25, r1
    1086:	d1 f5       	brne	.+116    	; 0x10fc <GenerateAudio+0xca>
            auBuffer[6]= 0;        
    1088:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <auBuffer.3926+0x6>
            auRepAddr = &auBuffer[0];
    108c:	87 e0       	ldi	r24, 0x07	; 7
    108e:	98 e3       	ldi	r25, 0x38	; 56
    1090:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
    1094:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
    1098:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    109a:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    109c:	d3 e0       	ldi	r29, 0x03	; 3
    109e:	8c 2f       	mov	r24, r28
    10a0:	6d 2f       	mov	r22, r29
    10a2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodqi4>
    10a6:	99 23       	and	r25, r25
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <GenerateAudio+0x86>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	65 e0       	ldi	r22, 0x05	; 5
    10b0:	80 e8       	ldi	r24, 0x80	; 128
    10b2:	aa de       	rcall	.-684    	; 0xe08 <floatAround>
    10b4:	f8 01       	movw	r30, r16
    10b6:	81 83       	std	Z+1, r24	; 0x01
        if ((effect&0xE0)==96){
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    10b8:	cf 5f       	subi	r28, 0xFF	; 255
    10ba:	0f 5f       	subi	r16, 0xFF	; 255
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	c6 30       	cpi	r28, 0x06	; 6
    10c0:	71 f7       	brne	.-36     	; 0x109e <GenerateAudio+0x6c>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
    10c2:	80 91 9d 38 	lds	r24, 0x389D	; 0x80389d <buttonMark>
    10c6:	88 23       	and	r24, r24
    10c8:	c9 f0       	breq	.+50     	; 0x10fc <GenerateAudio+0xca>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	54 e0       	ldi	r21, 0x04	; 4
    10ce:	60 e8       	ldi	r22, 0x80	; 128
    10d0:	72 e0       	ldi	r23, 0x02	; 2
    10d2:	85 e0       	ldi	r24, 0x05	; 5
    10d4:	67 de       	rcall	.-818    	; 0xda4 <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    10d6:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <auVolume>
    10da:	20 ea       	ldi	r18, 0xA0	; 160
    10dc:	40 e1       	ldi	r20, 0x10	; 16
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	93 de       	rcall	.-730    	; 0xe08 <floatAround>
    10e2:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    10e6:	20 e9       	ldi	r18, 0x90	; 144
    10e8:	40 e7       	ldi	r20, 0x70	; 112
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <auBuffer.3926>
    10f0:	8b de       	rcall	.-746    	; 0xe08 <floatAround>
    10f2:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auBuffer.3926>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    10f6:	80 95       	com	r24
    10f8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <auBuffer.3926+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
    10fc:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    1100:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
    1104:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    1108:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
    110c:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    1110:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>

        //Rain storm with whistling wind
        else {
        }
    }
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 95       	ret

00001122 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	62 97       	sbiw	r28, 0x12	; 18
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	8a 8b       	std	Y+18, r24	; 0x12
    1134:	80 e1       	ldi	r24, 0x10	; 16
    1136:	e2 e4       	ldi	r30, 0x42	; 66
    1138:	f0 eb       	ldi	r31, 0xB0	; 176
    113a:	de 01       	movw	r26, r28
    113c:	11 96       	adiw	r26, 0x01	; 1
    113e:	01 90       	ld	r0, Z+
    1140:	0d 92       	st	X+, r0
    1142:	8a 95       	dec	r24
    1144:	e1 f7       	brne	.-8      	; 0x113e <Cheat+0x1c>
    1146:	fe 01       	movw	r30, r28
    1148:	31 96       	adiw	r30, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	21 91       	ld	r18, Z+
    1150:	31 91       	ld	r19, Z+
    1152:	26 17       	cp	r18, r22
    1154:	37 07       	cpc	r19, r23
    1156:	09 f4       	brne	.+2      	; 0x115a <Cheat+0x38>
    1158:	89 2f       	mov	r24, r25
    115a:	9f 5f       	subi	r25, 0xFF	; 255
    115c:	98 30       	cpi	r25, 0x08	; 8
    115e:	b9 f7       	brne	.-18     	; 0x114e <Cheat+0x2c>
    1160:	88 30       	cpi	r24, 0x08	; 8
    1162:	10 f0       	brcs	.+4      	; 0x1168 <Cheat+0x46>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	12 c0       	rjmp	.+36     	; 0x118c <Cheat+0x6a>
    1168:	18 e1       	ldi	r17, 0x18	; 24
    116a:	18 0f       	add	r17, r24
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	be 01       	movw	r22, r28
    1170:	6f 5e       	subi	r22, 0xEF	; 239
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	81 2f       	mov	r24, r17
    1176:	41 dd       	rcall	.-1406   	; 0xbfa <EERead>
    1178:	89 89       	ldd	r24, Y+17	; 0x11
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	99 f7       	brne	.-26     	; 0x1164 <Cheat+0x42>
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	be 01       	movw	r22, r28
    1182:	6e 5e       	subi	r22, 0xEE	; 238
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	81 2f       	mov	r24, r17
    1188:	48 dd       	rcall	.-1392   	; 0xc1a <EEWrite>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	62 96       	adiw	r28, 0x12	; 18
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	08 95       	ret

0000119a <DecryptData>:
    119a:	f9 01       	movw	r30, r18
    119c:	9c 01       	movw	r18, r24
    119e:	2e 1b       	sub	r18, r30
    11a0:	3f 0b       	sbc	r19, r31
    11a2:	88 e0       	ldi	r24, 0x08	; 8
    11a4:	48 9f       	mul	r20, r24
    11a6:	a0 01       	movw	r20, r0
    11a8:	11 24       	eor	r1, r1
    11aa:	4c 50       	subi	r20, 0x0C	; 12
    11ac:	5f 44       	sbci	r21, 0x4F	; 79
    11ae:	66 23       	and	r22, r22
    11b0:	69 f0       	breq	.+26     	; 0x11cc <DecryptData+0x32>
    11b2:	df 01       	movw	r26, r30
    11b4:	a2 0f       	add	r26, r18
    11b6:	b3 1f       	adc	r27, r19
    11b8:	a7 70       	andi	r26, 0x07	; 7
    11ba:	bb 27       	eor	r27, r27
    11bc:	a4 0f       	add	r26, r20
    11be:	b5 1f       	adc	r27, r21
    11c0:	80 81       	ld	r24, Z
    11c2:	9c 91       	ld	r25, X
    11c4:	98 27       	eor	r25, r24
    11c6:	91 93       	st	Z+, r25
    11c8:	61 50       	subi	r22, 0x01	; 1
    11ca:	f1 cf       	rjmp	.-30     	; 0x11ae <DecryptData+0x14>
    11cc:	08 95       	ret

000011ce <UnflipData>:
    11ce:	26 2f       	mov	r18, r22
    11d0:	fb 01       	movw	r30, r22
    11d2:	35 e5       	ldi	r19, 0x55	; 85
    11d4:	9e 2f       	mov	r25, r30
    11d6:	92 1b       	sub	r25, r18
    11d8:	98 17       	cp	r25, r24
    11da:	28 f4       	brcc	.+10     	; 0x11e6 <UnflipData+0x18>
    11dc:	90 81       	ld	r25, Z
    11de:	92 95       	swap	r25
    11e0:	93 27       	eor	r25, r19
    11e2:	91 93       	st	Z+, r25
    11e4:	f7 cf       	rjmp	.-18     	; 0x11d4 <UnflipData+0x6>
    11e6:	08 95       	ret

000011e8 <ExtEERead>:
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <ExtEERead+0x16>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	d6 2e       	mov	r13, r22
    1204:	c4 2e       	mov	r12, r20
    1206:	59 01       	movw	r10, r18
    1208:	7c 01       	movw	r14, r24
    120a:	e8 94       	clt
    120c:	f7 f8       	bld	r15, 7
    120e:	f9 82       	std	Y+1, r15	; 0x01
    1210:	ea 82       	std	Y+2, r14	; 0x02
    1212:	06 2f       	mov	r16, r22
    1214:	42 e0       	ldi	r20, 0x02	; 2
    1216:	be 01       	movw	r22, r28
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	80 e5       	ldi	r24, 0x50	; 80
    121e:	4a d8       	rcall	.-3948   	; 0x2b4 <I2C_read_bytes>
    1220:	18 2f       	mov	r17, r24
    1222:	81 11       	cpse	r24, r1
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <ExtEERead+0x48>
    1226:	95 01       	movw	r18, r10
    1228:	4c 2d       	mov	r20, r12
    122a:	6d 2d       	mov	r22, r13
    122c:	c7 01       	movw	r24, r14
    122e:	b5 df       	rcall	.-150    	; 0x119a <DecryptData>
    1230:	81 2f       	mov	r24, r17
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	08 95       	ret

0000124c <ClearTxAfter>:
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	30 f4       	brcc	.+12     	; 0x125e <ClearTxAfter+0x12>
    1252:	e8 2f       	mov	r30, r24
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	e3 58       	subi	r30, 0x83	; 131
    1258:	f5 4c       	sbci	r31, 0xC5	; 197
    125a:	10 82       	st	Z, r1
    125c:	f7 cf       	rjmp	.-18     	; 0x124c <ClearTxAfter>
    125e:	08 95       	ret

00001260 <StartsWith>:
    1260:	ac 01       	movw	r20, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	e9 2f       	mov	r30, r25
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	da 01       	movw	r26, r20
    126a:	ae 0f       	add	r26, r30
    126c:	bf 1f       	adc	r27, r31
    126e:	3c 91       	ld	r19, X
    1270:	e6 0f       	add	r30, r22
    1272:	f7 1f       	adc	r31, r23
    1274:	31 11       	cpse	r19, r1
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <StartsWith+0x22>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 81       	ld	r25, Z
    127c:	99 23       	and	r25, r25
    127e:	49 f0       	breq	.+18     	; 0x1292 <StartsWith+0x32>
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <StartsWith+0x30>
    1282:	20 81       	ld	r18, Z
    1284:	22 23       	and	r18, r18
    1286:	c1 f3       	breq	.-16     	; 0x1278 <StartsWith+0x18>
    1288:	32 13       	cpse	r19, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <StartsWith+0x30>
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	ea cf       	rjmp	.-44     	; 0x1264 <StartsWith+0x4>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	08 95       	ret

00001294 <PrepareSending>:
    1294:	61 15       	cp	r22, r1
    1296:	71 05       	cpc	r23, r1
    1298:	51 f1       	breq	.+84     	; 0x12ee <PrepareSending+0x5a>
    129a:	e5 e8       	ldi	r30, 0x85	; 133
    129c:	fa e3       	ldi	r31, 0x3A	; 58
    129e:	ad e7       	ldi	r26, 0x7D	; 125
    12a0:	ba e3       	ldi	r27, 0x3A	; 58
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	6f 3f       	cpi	r22, 0xFF	; 255
    12a8:	71 05       	cpc	r23, r1
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <PrepareSending+0x32>
    12ac:	60 f0       	brcs	.+24     	; 0x12c6 <PrepareSending+0x32>
    12ae:	81 93       	st	Z+, r24
    12b0:	91 93       	st	Z+, r25
    12b2:	3d 93       	st	X+, r19
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	6f 5f       	subi	r22, 0xFF	; 255
    12ba:	71 09       	sbc	r23, r1
    12bc:	2f 5f       	subi	r18, 0xFF	; 255
    12be:	27 30       	cpi	r18, 0x07	; 7
    12c0:	91 f7       	brne	.-28     	; 0x12a6 <PrepareSending+0x12>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	08 95       	ret
    12c6:	e2 2f       	mov	r30, r18
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	df 01       	movw	r26, r30
    12cc:	aa 0f       	add	r26, r26
    12ce:	bb 1f       	adc	r27, r27
    12d0:	ab 57       	subi	r26, 0x7B	; 123
    12d2:	b5 4c       	sbci	r27, 0xC5	; 197
    12d4:	8d 93       	st	X+, r24
    12d6:	9c 93       	st	X, r25
    12d8:	e3 58       	subi	r30, 0x83	; 131
    12da:	f5 4c       	sbci	r31, 0xC5	; 197
    12dc:	cb 01       	movw	r24, r22
    12de:	6f ef       	ldi	r22, 0xFF	; 255
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__udivmodhi4>
    12e6:	80 83       	st	Z, r24
    12e8:	40 93 7b 3a 	sts	0x3A7B, r20	; 0x803a7b <txTypeNow>
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <PrepareSending+0x64>
    12ee:	10 92 85 3a 	sts	0x3A85, r1	; 0x803a85 <txAddrList>
    12f2:	10 92 86 3a 	sts	0x3A86, r1	; 0x803a86 <txAddrList+0x1>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	82 2f       	mov	r24, r18
    12fa:	a8 df       	rcall	.-176    	; 0x124c <ClearTxAfter>
    12fc:	10 92 7c 3a 	sts	0x3A7C, r1	; 0x803a7c <txAddrNow>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret

00001304 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	f9 01       	movw	r30, r18
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	e0 5b       	subi	r30, 0xB0	; 176
    1314:	f6 4c       	sbci	r31, 0xC6	; 198
    1316:	ab e5       	ldi	r26, 0x5B	; 91
    1318:	ba e7       	ldi	r27, 0x7A	; 122
    131a:	a0 83       	st	Z, r26
    131c:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    131e:	f9 01       	movw	r30, r18
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	e0 57       	subi	r30, 0x70	; 112
    1326:	f6 4c       	sbci	r31, 0xC6	; 198
    1328:	62 e0       	ldi	r22, 0x02	; 2
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	60 83       	st	Z, r22
    132e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	f9 01       	movw	r30, r18
    1336:	e0 53       	subi	r30, 0x30	; 48
    1338:	f6 4c       	sbci	r31, 0xC6	; 198
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	40 83       	st	Z, r20
    1340:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	28 0f       	add	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	f9 01       	movw	r30, r18
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e0 5b       	subi	r30, 0xB0	; 176
    1350:	f6 4c       	sbci	r31, 0xC6	; 198
    1352:	c4 e6       	ldi	r28, 0x64	; 100
    1354:	da e7       	ldi	r29, 0x7A	; 122
    1356:	c0 83       	st	Z, r28
    1358:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    135a:	f9 01       	movw	r30, r18
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	e0 57       	subi	r30, 0x70	; 112
    1362:	f6 4c       	sbci	r31, 0xC6	; 198
    1364:	ca e0       	ldi	r28, 0x0A	; 10
    1366:	d0 e0       	ldi	r29, 0x00	; 0
    1368:	c0 83       	st	Z, r28
    136a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    136c:	22 0f       	add	r18, r18
    136e:	33 1f       	adc	r19, r19
    1370:	f9 01       	movw	r30, r18
    1372:	e0 53       	subi	r30, 0x30	; 48
    1374:	f6 4c       	sbci	r31, 0xC6	; 198
    1376:	40 83       	st	Z, r20
    1378:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    137a:	e2 e0       	ldi	r30, 0x02	; 2
    137c:	e8 0f       	add	r30, r24
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	e0 5b       	subi	r30, 0xB0	; 176
    1386:	f6 4c       	sbci	r31, 0xC6	; 198
    1388:	20 ef       	ldi	r18, 0xF0	; 240
    138a:	3f ef       	ldi	r19, 0xFF	; 255
    138c:	20 83       	st	Z, r18
    138e:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1390:	23 e0       	ldi	r18, 0x03	; 3
    1392:	28 0f       	add	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	f9 01       	movw	r30, r18
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	e0 5b       	subi	r30, 0xB0	; 176
    139e:	f6 4c       	sbci	r31, 0xC6	; 198
    13a0:	a0 83       	st	Z, r26
    13a2:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    13a4:	f9 01       	movw	r30, r18
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	e0 57       	subi	r30, 0x70	; 112
    13ac:	f6 4c       	sbci	r31, 0xC6	; 198
    13ae:	60 83       	st	Z, r22
    13b0:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    13b2:	22 0f       	add	r18, r18
    13b4:	33 1f       	adc	r19, r19
    13b6:	f9 01       	movw	r30, r18
    13b8:	e0 53       	subi	r30, 0x30	; 48
    13ba:	f6 4c       	sbci	r31, 0xC6	; 198
    13bc:	40 83       	st	Z, r20
    13be:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    13c0:	24 e0       	ldi	r18, 0x04	; 4
    13c2:	28 0f       	add	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	f9 01       	movw	r30, r18
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	e0 5b       	subi	r30, 0xB0	; 176
    13ce:	f6 4c       	sbci	r31, 0xC6	; 198
    13d0:	a7 e5       	ldi	r26, 0x57	; 87
    13d2:	ba e7       	ldi	r27, 0x7A	; 122
    13d4:	a0 83       	st	Z, r26
    13d6:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    13d8:	f9 01       	movw	r30, r18
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	e0 57       	subi	r30, 0x70	; 112
    13e0:	f6 4c       	sbci	r31, 0xC6	; 198
    13e2:	60 83       	st	Z, r22
    13e4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	f9 01       	movw	r30, r18
    13ec:	e0 53       	subi	r30, 0x30	; 48
    13ee:	f6 4c       	sbci	r31, 0xC6	; 198
    13f0:	40 83       	st	Z, r20
    13f2:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    13f4:	8b 5f       	subi	r24, 0xFB	; 251
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    13fc:	af 92       	push	r10
    13fe:	bf 92       	push	r11
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	2c 97       	sbiw	r28, 0x0c	; 12
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	7c 01       	movw	r14, r24
    141a:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    141c:	9e 01       	movw	r18, r28
    141e:	2f 5f       	subi	r18, 0xFF	; 255
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	6c e0       	ldi	r22, 0x0C	; 12
    1426:	80 96       	adiw	r24, 0x20	; 32
    1428:	df de       	rcall	.-578    	; 0x11e8 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	98 27       	eor	r25, r24
    1430:	89 27       	eor	r24, r25
    1432:	98 27       	eor	r25, r24
    1434:	80 96       	adiw	r24, 0x20	; 32
    1436:	f8 01       	movw	r30, r16
    1438:	80 83       	st	Z, r24
    143a:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	98 27       	eor	r25, r24
    1442:	89 27       	eor	r24, r25
    1444:	98 27       	eor	r25, r24
    1446:	80 96       	adiw	r24, 0x20	; 32
    1448:	82 83       	std	Z+2, r24	; 0x02
    144a:	93 83       	std	Z+3, r25	; 0x03
    144c:	de 01       	movw	r26, r28
    144e:	15 96       	adiw	r26, 0x05	; 5
    1450:	34 96       	adiw	r30, 0x04	; 4
    1452:	c8 01       	movw	r24, r16
    1454:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1456:	2d 91       	ld	r18, X+
    1458:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    145a:	e8 17       	cp	r30, r24
    145c:	f9 07       	cpc	r31, r25
    145e:	d9 f7       	brne	.-10     	; 0x1456 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1460:	fc e2       	ldi	r31, 0x2C	; 44
    1462:	ef 0e       	add	r14, r31
    1464:	f1 1c       	adc	r15, r1
    1466:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1468:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    146a:	9e 01       	movw	r18, r28
    146c:	2f 5f       	subi	r18, 0xFF	; 255
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	c7 01       	movw	r24, r14
    1476:	b8 de       	rcall	.-656    	; 0x11e8 <ExtEERead>
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	98 27       	eor	r25, r24
    147e:	89 27       	eor	r24, r25
    1480:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1482:	97 01       	movw	r18, r14
    1484:	2e 5f       	subi	r18, 0xFE	; 254
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1488:	43 e0       	ldi	r20, 0x03	; 3
    148a:	4d 15       	cp	r20, r13
    148c:	80 f4       	brcc	.+32     	; 0x14ae <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    148e:	ac 01       	movw	r20, r24
    1490:	41 50       	subi	r20, 0x01	; 1
    1492:	51 09       	sbc	r21, r1
    1494:	f8 01       	movw	r30, r16
    1496:	42 8f       	std	Z+26, r20	; 0x1a
    1498:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    149a:	f3 e0       	ldi	r31, 0x03	; 3
    149c:	ef 0e       	add	r14, r31
    149e:	f1 1c       	adc	r15, r1
    14a0:	f8 01       	movw	r30, r16
    14a2:	e4 86       	std	Z+12, r14	; 0x0c
    14a4:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    14a6:	4b 81       	ldd	r20, Y+3	; 0x03
    14a8:	f5 01       	movw	r30, r10
    14aa:	44 a3       	std	Z+36, r20	; 0x24
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    14ae:	f8 01       	movw	r30, r16
    14b0:	82 8f       	std	Z+26, r24	; 0x1a
    14b2:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    14b4:	24 87       	std	Z+12, r18	; 0x0c
    14b6:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    14b8:	7c 01       	movw	r14, r24
    14ba:	e2 0e       	add	r14, r18
    14bc:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    14be:	d3 94       	inc	r13
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	ff ef       	ldi	r31, 0xFF	; 255
    14c6:	af 1a       	sub	r10, r31
    14c8:	bf 0a       	sbc	r11, r31
    14ca:	47 e0       	ldi	r20, 0x07	; 7
    14cc:	d4 12       	cpse	r13, r20
    14ce:	cd cf       	rjmp	.-102    	; 0x146a <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    14d0:	2c 96       	adiw	r28, 0x0c	; 12
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	08 95       	ret

000014ea <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	a0 97       	sbiw	r28, 0x20	; 32
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1506:	7c 01       	movw	r14, r24
    1508:	20 e2       	ldi	r18, 0x20	; 32
    150a:	e2 0e       	add	r14, r18
    150c:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    150e:	9e 01       	movw	r18, r28
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	62 e0       	ldi	r22, 0x02	; 2
    1518:	8c 96       	adiw	r24, 0x2c	; 44
    151a:	66 de       	rcall	.-820    	; 0x11e8 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    151c:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    151e:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1520:	11 23       	and	r17, r17
    1522:	51 f1       	breq	.+84     	; 0x1578 <CheckLetter+0x8e>
    1524:	01 2f       	mov	r16, r17
    1526:	11 32       	cpi	r17, 0x21	; 33
    1528:	08 f0       	brcs	.+2      	; 0x152c <CheckLetter+0x42>
    152a:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    152c:	9e 01       	movw	r18, r28
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	60 2f       	mov	r22, r16
    1536:	c7 01       	movw	r24, r14
    1538:	0e 96       	adiw	r24, 0x0e	; 14
    153a:	56 de       	rcall	.-852    	; 0x11e8 <ExtEERead>
    153c:	fe 01       	movw	r30, r28
    153e:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1540:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1542:	dd 20       	and	r13, r13
    1544:	61 f0       	breq	.+24     	; 0x155e <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1546:	e1 e0       	ldi	r30, 0x01	; 1
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	ec 0f       	add	r30, r28
    154c:	fd 1f       	adc	r31, r29
    154e:	e8 0f       	add	r30, r24
    1550:	f1 1d       	adc	r31, r1
    1552:	90 81       	ld	r25, Z
    1554:	90 62       	ori	r25, 0x20	; 32
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	9c 11       	cpse	r25, r12
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <CheckLetter+0x8e>
    155c:	0e c0       	rjmp	.+28     	; 0x157a <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    155e:	91 91       	ld	r25, Z+
    1560:	dd 24       	eor	r13, r13
    1562:	d3 94       	inc	r13
    1564:	9b 35       	cpi	r25, 0x5B	; 91
    1566:	09 f0       	breq	.+2      	; 0x156a <CheckLetter+0x80>
    1568:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	80 17       	cp	r24, r16
    156e:	48 f3       	brcs	.-46     	; 0x1542 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1570:	e0 0e       	add	r14, r16
    1572:	f1 1c       	adc	r15, r1
        x -= max;
    1574:	10 1b       	sub	r17, r16
    1576:	d4 cf       	rjmp	.-88     	; 0x1520 <CheckLetter+0x36>
    }
    return 0;
    1578:	80 e0       	ldi	r24, 0x00	; 0
}
    157a:	a0 96       	adiw	r28, 0x20	; 32
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	08 95       	ret

00001592 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <FindChild+0x14>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <FindChild+0x16>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	d6 2e       	mov	r13, r22
    15ae:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    15b0:	9e 01       	movw	r18, r28
    15b2:	2f 5f       	subi	r18, 0xFF	; 255
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	64 e0       	ldi	r22, 0x04	; 4
    15ba:	80 96       	adiw	r24, 0x20	; 32
    15bc:	15 de       	rcall	.-982    	; 0x11e8 <ExtEERead>
    15be:	e9 80       	ldd	r14, Y+1	; 0x01
    15c0:	fa 80       	ldd	r15, Y+2	; 0x02
    15c2:	fe 24       	eor	r15, r14
    15c4:	ef 24       	eor	r14, r15
    15c6:	fe 24       	eor	r15, r14
    15c8:	0b 81       	ldd	r16, Y+3	; 0x03
    15ca:	1c 81       	ldd	r17, Y+4	; 0x04
    15cc:	10 27       	eor	r17, r16
    15ce:	01 27       	eor	r16, r17
    15d0:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    15d2:	0e 15       	cp	r16, r14
    15d4:	1f 05       	cpc	r17, r15
    15d6:	30 f5       	brcc	.+76     	; 0x1624 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    15d8:	a0 16       	cp	r10, r16
    15da:	b1 06       	cpc	r11, r17
    15dc:	58 f0       	brcs	.+22     	; 0x15f4 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    15de:	9e 01       	movw	r18, r28
    15e0:	2f 5f       	subi	r18, 0xFF	; 255
    15e2:	3f 4f       	sbci	r19, 0xFF	; 255
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	62 e0       	ldi	r22, 0x02	; 2
    15e8:	c8 01       	movw	r24, r16
    15ea:	80 96       	adiw	r24, 0x20	; 32
    15ec:	fd dd       	rcall	.-1030   	; 0x11e8 <ExtEERead>
    15ee:	09 81       	ldd	r16, Y+1	; 0x01
    15f0:	1a 81       	ldd	r17, Y+2	; 0x02
    15f2:	ec cf       	rjmp	.-40     	; 0x15cc <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    15f4:	9e 01       	movw	r18, r28
    15f6:	2f 5f       	subi	r18, 0xFF	; 255
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	61 e0       	ldi	r22, 0x01	; 1
    15fe:	c8 01       	movw	r24, r16
    1600:	85 96       	adiw	r24, 0x25	; 37
    1602:	f2 dd       	rcall	.-1052   	; 0x11e8 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	81 11       	cpse	r24, r1
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    160a:	d1 10       	cpse	r13, r1
    160c:	05 c0       	rjmp	.+10     	; 0x1618 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    160e:	0d c0       	rjmp	.+26     	; 0x162a <FindChild+0x98>
    1610:	c9 dc       	rcall	.-1646   	; 0xfa4 <CheckState>
    1612:	81 11       	cpse	r24, r1
    1614:	fa cf       	rjmp	.-12     	; 0x160a <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1616:	e3 cf       	rjmp	.-58     	; 0x15de <FindChild+0x4c>
    1618:	6d 2d       	mov	r22, r13
    161a:	c8 01       	movw	r24, r16
    161c:	66 df       	rcall	.-308    	; 0x14ea <CheckLetter>
    161e:	88 23       	and	r24, r24
    1620:	f1 f2       	breq	.-68     	; 0x15de <FindChild+0x4c>
    1622:	03 c0       	rjmp	.+6      	; 0x162a <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	01 c0       	rjmp	.+2      	; 0x162c <FindChild+0x9a>
    162a:	c8 01       	movw	r24, r16
}
    162c:	24 96       	adiw	r28, 0x04	; 4
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	08 95       	ret

00001646 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1646:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1648:	9f e9       	ldi	r25, 0x9F	; 159
    164a:	98 0f       	add	r25, r24
    164c:	9a 31       	cpi	r25, 0x1A	; 26
    164e:	38 f0       	brcs	.+14     	; 0x165e <InpOkChk+0x18>
    1650:	90 ed       	ldi	r25, 0xD0	; 208
    1652:	98 0f       	add	r25, r24
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	9a 30       	cpi	r25, 0x0A	; 10
    1658:	18 f0       	brcs	.+6      	; 0x1660 <InpOkChk+0x1a>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 95       	ret
    165e:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1660:	08 95       	ret

00001662 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    166c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    166e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1670:	f8 01       	movw	r30, r16
    1672:	ed 0f       	add	r30, r29
    1674:	f1 1d       	adc	r31, r1
    1676:	20 81       	ld	r18, Z
    1678:	8c 2f       	mov	r24, r28
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	22 23       	and	r18, r18
    167e:	51 f0       	breq	.+20     	; 0x1694 <CleanInput+0x32>
        data[cnt] = data[x];
    1680:	d8 01       	movw	r26, r16
    1682:	a8 0f       	add	r26, r24
    1684:	b9 1f       	adc	r27, r25
    1686:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1688:	80 81       	ld	r24, Z
    168a:	dd df       	rcall	.-70     	; 0x1646 <InpOkChk>
    168c:	81 11       	cpse	r24, r1
    168e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1690:	df 5f       	subi	r29, 0xFF	; 255
    1692:	ee cf       	rjmp	.-36     	; 0x1670 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1694:	f8 01       	movw	r30, r16
    1696:	e8 0f       	add	r30, r24
    1698:	f9 1f       	adc	r31, r25
    169a:	10 82       	st	Z, r1
    return cnt;
}
    169c:	8c 2f       	mov	r24, r28
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	08 95       	ret

000016a8 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    16a8:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    16aa:	20 91 7c 3a 	lds	r18, 0x3A7C	; 0x803a7c <txAddrNow>
    16ae:	28 30       	cpi	r18, 0x08	; 8
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <CheckSend+0xc>
    16b2:	47 c0       	rjmp	.+142    	; 0x1742 <CheckSend+0x9a>
    16b4:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <serTxDone>
    16b8:	88 23       	and	r24, r24
    16ba:	09 f4       	brne	.+2      	; 0x16be <CheckSend+0x16>
    16bc:	42 c0       	rjmp	.+132    	; 0x1742 <CheckSend+0x9a>
        if (txStrLen[txAddrNow] == 0){
    16be:	82 2f       	mov	r24, r18
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	fc 01       	movw	r30, r24
    16c4:	e3 58       	subi	r30, 0x83	; 131
    16c6:	f5 4c       	sbci	r31, 0xC5	; 197
    16c8:	e0 81       	ld	r30, Z
    16ca:	e1 11       	cpse	r30, r1
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <CheckSend+0x32>
            txPart = 0;
    16ce:	10 92 3d 39 	sts	0x393D, r1	; 0x80393d <txPart.3932>
            txAddrNow = TXLISTLEN;
    16d2:	88 e0       	ldi	r24, 0x08	; 8
    16d4:	80 93 7c 3a 	sts	0x3A7C, r24	; 0x803a7c <txAddrNow>
    16d8:	2c c0       	rjmp	.+88     	; 0x1732 <CheckSend+0x8a>
        } else if (txPart < txStrLen[txAddrNow]){
    16da:	50 91 3d 39 	lds	r21, 0x393D	; 0x80393d <txPart.3932>
    16de:	5e 17       	cp	r21, r30
    16e0:	50 f5       	brcc	.+84     	; 0x1736 <CheckSend+0x8e>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    16e2:	ce 2f       	mov	r28, r30
    16e4:	c5 1b       	sub	r28, r21
    16e6:	c1 32       	cpi	r28, 0x21	; 33
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <CheckSend+0x44>
    16ea:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	fc 01       	movw	r30, r24
    16f2:	eb 57       	subi	r30, 0x7B	; 123
    16f4:	f5 4c       	sbci	r31, 0xC5	; 197
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	24 e4       	ldi	r18, 0x44	; 68
    16fc:	3b e3       	ldi	r19, 0x3B	; 59
    16fe:	40 91 7b 3a 	lds	r20, 0x3A7B	; 0x803a7b <txTypeNow>
    1702:	6c 2f       	mov	r22, r28
    1704:	85 0f       	add	r24, r21
    1706:	91 1d       	adc	r25, r1
    1708:	6f dd       	rcall	.-1314   	; 0x11e8 <ExtEERead>
            txPart += EEreadLength;
    170a:	80 91 3d 39 	lds	r24, 0x393D	; 0x80393d <txPart.3932>
    170e:	8c 0f       	add	r24, r28
    1710:	80 93 3d 39 	sts	0x393D, r24	; 0x80393d <txPart.3932>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1714:	ec 2f       	mov	r30, r28
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	ec 5b       	subi	r30, 0xBC	; 188
    171a:	f4 4c       	sbci	r31, 0xC4	; 196
    171c:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    171e:	80 91 44 3b 	lds	r24, 0x3B44	; 0x803b44 <txBuffer>
    1722:	81 11       	cpse	r24, r1
    1724:	03 c0       	rjmp	.+6      	; 0x172c <CheckSend+0x84>
    1726:	8b ed       	ldi	r24, 0xDB	; 219
    1728:	80 93 44 3b 	sts	0x3B44, r24	; 0x803b44 <txBuffer>
            SerSend(&txBuffer[0]);
    172c:	84 e4       	ldi	r24, 0x44	; 68
    172e:	9b e3       	ldi	r25, 0x3B	; 59
    1730:	9c da       	rcall	.-2760   	; 0xc6a <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	0b c0       	rjmp	.+22     	; 0x174c <CheckSend+0xa4>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1736:	10 92 3d 39 	sts	0x393D, r1	; 0x80393d <txPart.3932>
            ++txAddrNow;
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	20 93 7c 3a 	sts	0x3A7C, r18	; 0x803a7c <txAddrNow>
    1740:	f8 cf       	rjmp	.-16     	; 0x1732 <CheckSend+0x8a>
        }
    } else if (serTxDone) return 0; //All is sent!
    1742:	90 91 05 38 	lds	r25, 0x3805	; 0x803805 <serTxDone>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	91 11       	cpse	r25, r1
    174a:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1754:	c0 91 4f 39 	lds	r28, 0x394F	; 0x80394f <responseList>
    1758:	cc 23       	and	r28, r28
    175a:	e9 f1       	breq	.+122    	; 0x17d6 <CheckResponse+0x86>
        --responseList;
    175c:	c1 50       	subi	r28, 0x01	; 1
    175e:	c0 93 4f 39 	sts	0x394F, r28	; 0x80394f <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1762:	d0 91 3c 39 	lds	r29, 0x393C	; 0x80393c <number.3936>
    1766:	2d 2f       	mov	r18, r29
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 01       	movw	r30, r18
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	e0 5b       	subi	r30, 0xB0	; 176
    1772:	f6 4c       	sbci	r31, 0xC6	; 198
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	80 3f       	cpi	r24, 0xF0	; 240
    177a:	4f ef       	ldi	r20, 0xFF	; 255
    177c:	94 07       	cpc	r25, r20
    177e:	51 f4       	brne	.+20     	; 0x1794 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    1780:	60 91 6a 3a 	lds	r22, 0x3A6A	; 0x803a6a <currObj+0x1a>
    1784:	70 91 6b 3a 	lds	r23, 0x3A6B	; 0x803a6b <currObj+0x1b>
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	80 91 5c 3a 	lds	r24, 0x3A5C	; 0x803a5c <currObj+0xc>
    178e:	90 91 5d 3a 	lds	r25, 0x3A5D	; 0x803a5d <currObj+0xd>
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    1794:	d9 01       	movw	r26, r18
    1796:	aa 0f       	add	r26, r26
    1798:	bb 1f       	adc	r27, r27
    179a:	a0 53       	subi	r26, 0x30	; 48
    179c:	b6 4c       	sbci	r27, 0xC6	; 198
    179e:	22 0f       	add	r18, r18
    17a0:	33 1f       	adc	r19, r19
    17a2:	f9 01       	movw	r30, r18
    17a4:	e0 57       	subi	r30, 0x70	; 112
    17a6:	f6 4c       	sbci	r31, 0xC6	; 198
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	4c 91       	ld	r20, X
    17ae:	72 dd       	rcall	.-1308   	; 0x1294 <PrepareSending>
        }
        ++number;
    17b0:	df 5f       	subi	r29, 0xFF	; 255
    17b2:	d0 93 3c 39 	sts	0x393C, r29	; 0x80393c <number.3936>

        if (responseList == 0) {
    17b6:	c1 11       	cpse	r28, r1
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    17ba:	80 91 54 3a 	lds	r24, 0x3A54	; 0x803a54 <currObj+0x4>
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <effect>
    17c4:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <effect+0x1>
            RXCNT = 0;
    17c8:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    17ca:	10 92 9f 38 	sts	0x389F, r1	; 0x80389f <serRxDone>
            number = 0;
    17ce:	10 92 3c 39 	sts	0x393C, r1	; 0x80393c <number.3936>
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    17d4:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    17d6:	8c 2f       	mov	r24, r28
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    17de:	4f 92       	push	r4
    17e0:	5f 92       	push	r5
    17e2:	6f 92       	push	r6
    17e4:	7f 92       	push	r7
    17e6:	8f 92       	push	r8
    17e8:	9f 92       	push	r9
    17ea:	af 92       	push	r10
    17ec:	bf 92       	push	r11
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	a1 97       	sbiw	r28, 0x21	; 33
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    180a:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <currDepth>
    180e:	8f 3f       	cpi	r24, 0xFF	; 255
    1810:	09 f0       	breq	.+2      	; 0x1814 <CheckInput+0x36>
    1812:	57 c0       	rjmp	.+174    	; 0x18c2 <CheckInput+0xe4>
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1814:	44 e1       	ldi	r20, 0x14	; 20
    1816:	66 e9       	ldi	r22, 0x96	; 150
    1818:	7a e3       	ldi	r23, 0x3A	; 58
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	ee d9       	rcall	.-3108   	; 0xbfa <EERead>
    181e:	2e e6       	ldi	r18, 0x6E	; 110
    1820:	f2 2e       	mov	r15, r18

        uint8_t idSet = 0;
    1822:	e1 2c       	mov	r14, r1
        for (uint8_t x=0; x<4; ++x){
            idSet += ReadStatusBit(110+x);
    1824:	8f 2d       	mov	r24, r15
    1826:	88 db       	rcall	.-2288   	; 0xf38 <ReadStatusBit>
    1828:	e8 0e       	add	r14, r24
    182a:	f3 94       	inc	r15
    if (currDepth == 0xff) {
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

        uint8_t idSet = 0;
        for (uint8_t x=0; x<4; ++x){
    182c:	82 e7       	ldi	r24, 0x72	; 114
    182e:	f8 12       	cpse	r15, r24
    1830:	f9 cf       	rjmp	.-14     	; 0x1824 <CheckInput+0x46>
            idSet += ReadStatusBit(110+x);
        }

        //Check if badge is reset(0 = cheated!) or new(3) or error(2)
        if (idSet != 1) {
    1832:	e1 e0       	ldi	r30, 0x01	; 1
    1834:	ee 16       	cp	r14, r30
            Reset();
    1836:	11 f0       	breq	.+4      	; 0x183c <CheckInput+0x5e>
    1838:	d3 db       	rcall	.-2138   	; 0xfe0 <Reset>
        } else getID();
    183a:	01 c0       	rjmp	.+2      	; 0x183e <CheckInput+0x60>
    183c:	c3 db       	rcall	.-2170   	; 0xfc4 <getID>

        inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    183e:	80 91 a6 3a 	lds	r24, 0x3AA6	; 0x803aa6 <gameState+0x10>
    1842:	90 91 a7 3a 	lds	r25, 0x3AA7	; 0x803aa7 <gameState+0x11>
    1846:	98 27       	eor	r25, r24
    1848:	89 27       	eor	r24, r25
    184a:	98 27       	eor	r25, r24
    184c:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <inventory>
    1850:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <inventory+0x1>
        inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1854:	80 91 a8 3a 	lds	r24, 0x3AA8	; 0x803aa8 <gameState+0x12>
    1858:	90 91 a9 3a 	lds	r25, 0x3AA9	; 0x803aa9 <gameState+0x13>
    185c:	98 27       	eor	r25, r24
    185e:	89 27       	eor	r24, r25
    1860:	98 27       	eor	r25, r24
    1862:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <inventory+0x2>
    1866:	90 93 9c 38 	sts	0x389C, r25	; 0x80389c <inventory+0x3>
        SaveGameState();
    186a:	f3 da       	rcall	.-2586   	; 0xe52 <SaveGameState>

        //Start at first location
        PopulateObject(route[0], &currObj);
    186c:	60 e5       	ldi	r22, 0x50	; 80
    186e:	7a e3       	ldi	r23, 0x3A	; 58
    1870:	80 91 10 3a 	lds	r24, 0x3A10	; 0x803a10 <route>
    1874:	90 91 11 3a 	lds	r25, 0x3A11	; 0x803a11 <route+0x1>
    1878:	c1 dd       	rcall	.-1150   	; 0x13fc <PopulateObject>
        currDepth = 0;
    187a:	10 92 91 38 	sts	0x3891, r1	; 0x803891 <currDepth>

        //Play an effect if configured
        if ((effect < 0x0100) && (effect ^ currObj.byteField[EFFECTS])){
    187e:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    1882:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>
    1886:	8f 3f       	cpi	r24, 0xFF	; 255
    1888:	91 05       	cpc	r25, r1
    188a:	09 f0       	breq	.+2      	; 0x188e <CheckInput+0xb0>
    188c:	d0 f4       	brcc	.+52     	; 0x18c2 <CheckInput+0xe4>
    188e:	80 91 54 3a 	lds	r24, 0x3A54	; 0x803a54 <currObj+0x4>
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	20 91 95 38 	lds	r18, 0x3895	; 0x803895 <effect>
    1898:	30 91 96 38 	lds	r19, 0x3896	; 0x803896 <effect+0x1>
    189c:	82 17       	cp	r24, r18
    189e:	93 07       	cpc	r25, r19
    18a0:	81 f0       	breq	.+32     	; 0x18c2 <CheckInput+0xe4>
            effect = currObj.byteField[EFFECTS];
    18a2:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <effect>
    18a6:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <effect+0x1>
            auStart = ((effect&0xE0)>0);
    18aa:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <effect>
    18ae:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <effect+0x1>
    18b2:	80 7e       	andi	r24, 0xE0	; 224
    18b4:	99 27       	eor	r25, r25
    18b6:	21 e0       	ldi	r18, 0x01	; 1
    18b8:	89 2b       	or	r24, r25
    18ba:	09 f4       	brne	.+2      	; 0x18be <CheckInput+0xe0>
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	20 93 94 38 	sts	0x3894, r18	; 0x803894 <auStart>
        }
    }

    if (serRxDone){
    18c2:	80 91 9f 38 	lds	r24, 0x389F	; 0x80389f <serRxDone>
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <CheckInput+0xee>
    18ca:	5c c2       	rjmp	.+1208   	; 0x1d84 <CheckInput+0x5a6>

        //Special input requested from user by game
        if (specialInput[0]){
    18cc:	80 91 3f 39 	lds	r24, 0x393F	; 0x80393f <specialInput>
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <CheckInput+0xf8>
    18d4:	57 c0       	rjmp	.+174    	; 0x1984 <CheckInput+0x1a6>
            specialPassed = 0;
    18d6:	10 92 3e 39 	sts	0x393E, r1	; 0x80393e <specialPassed>
            data[0] = 'a';
    18da:	81 e6       	ldi	r24, 0x61	; 97
    18dc:	f8 01       	movw	r30, r16
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    18de:	80 83       	st	Z, r24
    18e0:	6f e3       	ldi	r22, 0x3F	; 63
    18e2:	79 e3       	ldi	r23, 0x39	; 57
    18e4:	8a ea       	ldi	r24, 0xAA	; 170
    18e6:	9a e3       	ldi	r25, 0x3A	; 58
    18e8:	bb dc       	rcall	.-1674   	; 0x1260 <StartsWith>
    18ea:	f8 2e       	mov	r15, r24
    18ec:	88 23       	and	r24, r24
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <CheckInput+0x11a>
                specialPassed = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 3e 39 	sts	0x393E, r24	; 0x80393e <specialPassed>
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <CheckInput+0x122>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    18f8:	80 91 3f 39 	lds	r24, 0x393F	; 0x80393f <specialInput>
    18fc:	81 33       	cpi	r24, 0x31	; 49
    18fe:	11 f0       	breq	.+4      	; 0x1904 <CheckInput+0x126>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1900:	f1 2c       	mov	r15, r1
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1902:	42 c2       	rjmp	.+1156   	; 0x1d88 <CheckInput+0x5aa>
    1904:	80 91 41 39 	lds	r24, 0x3941	; 0x803941 <specialInput+0x2>
    1908:	81 11       	cpse	r24, r1
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    190a:	fa cf       	rjmp	.-12     	; 0x1900 <CheckInput+0x122>
    190c:	8a ea       	ldi	r24, 0xAA	; 170
    190e:	9a e3       	ldi	r25, 0x3A	; 58
    1910:	a8 de       	rcall	.-688    	; 0x1662 <CleanInput>
                specialPassed = 2;
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	90 93 3e 39 	sts	0x393E, r25	; 0x80393e <specialPassed>
                data[1] = 0;
    1918:	f8 01       	movw	r30, r16
    191a:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	80 f3       	brcs	.-32     	; 0x1900 <CheckInput+0x122>
                    if ((serRx[0] == '0')||(serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')) {
    1920:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
    1924:	80 33       	cpi	r24, 0x30	; 48
    1926:	61 f0       	breq	.+24     	; 0x1940 <CheckInput+0x162>
    1928:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
    192c:	81 33       	cpi	r24, 0x31	; 49
    192e:	41 f0       	breq	.+16     	; 0x1940 <CheckInput+0x162>
    1930:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
    1934:	82 33       	cpi	r24, 0x32	; 50
    1936:	21 f0       	breq	.+8      	; 0x1940 <CheckInput+0x162>
    1938:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
    193c:	83 33       	cpi	r24, 0x33	; 51
    193e:	01 f7       	brne	.-64     	; 0x1900 <CheckInput+0x122>
                        serRx[1] |= 0x20;
    1940:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serRx+0x1>
    1944:	80 62       	ori	r24, 0x20	; 32
    1946:	80 93 ab 3a 	sts	0x3AAB, r24	; 0x803aab <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    194a:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serRx+0x1>
    194e:	81 36       	cpi	r24, 0x61	; 97
    1950:	61 f0       	breq	.+24     	; 0x196a <CheckInput+0x18c>
    1952:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serRx+0x1>
    1956:	85 36       	cpi	r24, 0x65	; 101
    1958:	41 f0       	breq	.+16     	; 0x196a <CheckInput+0x18c>
    195a:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serRx+0x1>
    195e:	86 36       	cpi	r24, 0x66	; 102
    1960:	21 f0       	breq	.+8      	; 0x196a <CheckInput+0x18c>
    1962:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serRx+0x1>
    1966:	87 37       	cpi	r24, 0x77	; 119
    1968:	59 f6       	brne	.-106    	; 0x1900 <CheckInput+0x122>
                            data[1] = specialInput[1]+0x11;
    196a:	80 91 40 39 	lds	r24, 0x3940	; 0x803940 <specialInput+0x1>
    196e:	8f 5e       	subi	r24, 0xEF	; 239
    1970:	f8 01       	movw	r30, r16
    1972:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1974:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
    1978:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    197a:	80 91 ab 3a 	lds	r24, 0x3AAB	; 0x803aab <serRx+0x1>
    197e:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1980:	14 82       	std	Z+4, r1	; 0x04
    1982:	02 c2       	rjmp	.+1028   	; 0x1d88 <CheckInput+0x5aa>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    1984:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
    1988:	83 32       	cpi	r24, 0x23	; 35
    198a:	81 f5       	brne	.+96     	; 0x19ec <CheckInput+0x20e>
    198c:	8d b3       	in	r24, 0x1d	; 29
    198e:	86 30       	cpi	r24, 0x06	; 6
    1990:	69 f5       	brne	.+90     	; 0x19ec <CheckInput+0x20e>
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1998:	fc 01       	movw	r30, r24
    199a:	e6 55       	subi	r30, 0x56	; 86
    199c:	f5 4c       	sbci	r31, 0xC5	; 197
    199e:	20 81       	ld	r18, Z
    19a0:	20 53       	subi	r18, 0x30	; 48
    19a2:	20 83       	st	Z, r18
                    bitNr *= 10;
    19a4:	11 0f       	add	r17, r17
    19a6:	21 2f       	mov	r18, r17
    19a8:	22 0f       	add	r18, r18
    19aa:	22 0f       	add	r18, r18
    19ac:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    19ae:	20 91 ab 3a 	lds	r18, 0x3AAB	; 0x803aab <serRx+0x1>
    19b2:	23 30       	cpi	r18, 0x03	; 3
    19b4:	48 f4       	brcc	.+18     	; 0x19c8 <CheckInput+0x1ea>
                    if (serRx[x] < 10) {
    19b6:	20 81       	ld	r18, Z
    19b8:	2a 30       	cpi	r18, 0x0A	; 10
    19ba:	b0 f4       	brcc	.+44     	; 0x19e8 <CheckInput+0x20a>
                        bitNr += serRx[x];
    19bc:	20 81       	ld	r18, Z
    19be:	12 0f       	add	r17, r18
    19c0:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	91 05       	cpc	r25, r1
    19c6:	41 f7       	brne	.-48     	; 0x1998 <CheckInput+0x1ba>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    19c8:	81 2f       	mov	r24, r17
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	69 f0       	breq	.+26     	; 0x19e8 <CheckInput+0x20a>
                    if (Cheat(255-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    19ce:	80 91 ae 3a 	lds	r24, 0x3AAE	; 0x803aae <serRx+0x4>
    19d2:	60 91 af 3a 	lds	r22, 0x3AAF	; 0x803aaf <serRx+0x5>
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	78 2b       	or	r23, r24
    19da:	81 2f       	mov	r24, r17
    19dc:	80 95       	com	r24
    19de:	a1 db       	rcall	.-2238   	; 0x1122 <Cheat>
    19e0:	88 23       	and	r24, r24
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <CheckInput+0x20a>
    19e4:	81 2f       	mov	r24, r17
    19e6:	d6 da       	rcall	.-2644   	; 0xf94 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	50 c0       	rjmp	.+160    	; 0x1a8c <CheckInput+0x2ae>
    19ec:	d8 01       	movw	r26, r16
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    19f2:	fc 01       	movw	r30, r24
    19f4:	e6 55       	subi	r30, 0x56	; 86
    19f6:	f5 4c       	sbci	r31, 0xC5	; 197
    19f8:	20 81       	ld	r18, Z
    19fa:	21 34       	cpi	r18, 0x41	; 65
    19fc:	18 f0       	brcs	.+6      	; 0x1a04 <CheckInput+0x226>
    19fe:	20 81       	ld	r18, Z
    1a00:	2b 35       	cpi	r18, 0x5B	; 91
    1a02:	10 f0       	brcs	.+4      	; 0x1a08 <CheckInput+0x22a>
    1a04:	20 81       	ld	r18, Z
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <CheckInput+0x22e>
    1a08:	20 81       	ld	r18, Z
    1a0a:	20 62       	ori	r18, 0x20	; 32
    1a0c:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1a0e:	20 81       	ld	r18, Z
    1a10:	21 11       	cpse	r18, r1
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <CheckInput+0x240>
                    data[x] = 0;
    1a14:	f8 01       	movw	r30, r16
    1a16:	e8 0f       	add	r30, r24
    1a18:	f1 1d       	adc	r31, r1
    1a1a:	10 82       	st	Z, r1
                    break;
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <CheckInput+0x24a>
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    1a22:	81 34       	cpi	r24, 0x41	; 65
    1a24:	91 05       	cpc	r25, r1
    1a26:	29 f7       	brne	.-54     	; 0x19f2 <CheckInput+0x214>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1a28:	80 91 aa 3a 	lds	r24, 0x3AAA	; 0x803aaa <serRx>
                data[0] = 0;
    1a2c:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1a2e:	81 11       	cpse	r24, r1
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <CheckInput+0x25e>
                data[0] = 0;
    1a32:	10 82       	st	Z, r1
                RXCNT = 0;
    1a34:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    1a36:	10 92 9f 38 	sts	0x389F, r1	; 0x80389f <serRxDone>
    1a3a:	a4 c1       	rjmp	.+840    	; 0x1d84 <CheckInput+0x5a6>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8f 33       	cpi	r24, 0x3F	; 63
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <CheckInput+0x268>
    1a42:	88 36       	cpi	r24, 0x68	; 104
    1a44:	39 f5       	brne	.+78     	; 0x1a94 <CheckInput+0x2b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a46:	8b e5       	ldi	r24, 0x5B	; 91
    1a48:	9a e7       	ldi	r25, 0x7A	; 122
    1a4a:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr>
    1a4e:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x1>
    reactStr[1][number]=length;
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x40>
    1a5a:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x41>
    reactStr[2][number]=type;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x80>
    1a66:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a6a:	23 e9       	ldi	r18, 0x93	; 147
    1a6c:	3b e7       	ldi	r19, 0x7B	; 123
    1a6e:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    1a72:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    1a76:	2d e6       	ldi	r18, 0x6D	; 109
    1a78:	34 e0       	ldi	r19, 0x04	; 4
    1a7a:	20 93 92 39 	sts	0x3992, r18	; 0x803992 <reactStr+0x42>
    1a7e:	30 93 93 39 	sts	0x3993, r19	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    1a82:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    1a86:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	3b dc       	rcall	.-1930   	; 0x1304 <SetStandardResponse>
    1a8e:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <responseList>
    1a92:	78 c1       	rjmp	.+752    	; 0x1d84 <CheckInput+0x5a6>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    1a94:	81 36       	cpi	r24, 0x61	; 97
    1a96:	d9 f4       	brne	.+54     	; 0x1ace <CheckInput+0x2f0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a98:	8b e5       	ldi	r24, 0x5B	; 91
    1a9a:	9a e7       	ldi	r25, 0x7A	; 122
    1a9c:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr>
    1aa0:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x1>
    reactStr[1][number]=length;
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x40>
    1aac:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x41>
    reactStr[2][number]=type;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x80>
    1ab8:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1abc:	2e e6       	ldi	r18, 0x6E	; 110
    1abe:	3a e7       	ldi	r19, 0x7A	; 122
    1ac0:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    1ac4:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    1ac8:	25 e2       	ldi	r18, 0x25	; 37
    1aca:	31 e0       	ldi	r19, 0x01	; 1
    1acc:	d6 cf       	rjmp	.-84     	; 0x1a7a <CheckInput+0x29c>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    1ace:	87 37       	cpi	r24, 0x77	; 119
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <CheckInput+0x2f6>
    1ad2:	6e c0       	rjmp	.+220    	; 0x1bb0 <CheckInput+0x3d2>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ad4:	8b e5       	ldi	r24, 0x5B	; 91
    1ad6:	9a e7       	ldi	r25, 0x7A	; 122
    1ad8:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr>
    1adc:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x1>
    reactStr[1][number]=length;
    1ae0:	84 e0       	ldi	r24, 0x04	; 4
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x40>
    1ae8:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x41>
    reactStr[2][number]=type;
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	20 93 d0 39 	sts	0x39D0, r18	; 0x8039d0 <reactStr+0x80>
    1af4:	30 93 d1 39 	sts	0x39D1, r19	; 0x8039d1 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1af8:	8b ec       	ldi	r24, 0xCB	; 203
    1afa:	96 e7       	ldi	r25, 0x76	; 118
    1afc:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    1b00:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    1b04:	82 e1       	ldi	r24, 0x12	; 18
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    1b0c:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    1b10:	20 93 d2 39 	sts	0x39D2, r18	; 0x8039d2 <reactStr+0x82>
    1b14:	30 93 d3 39 	sts	0x39D3, r19	; 0x8039d3 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    1b18:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <whoami>
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <CheckInput+0x348>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b20:	85 ec       	ldi	r24, 0xC5	; 197
    1b22:	96 e7       	ldi	r25, 0x76	; 118
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <CheckInput+0x366>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	49 f4       	brne	.+18     	; 0x1b3c <CheckInput+0x35e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b2a:	82 ec       	ldi	r24, 0xC2	; 194
    1b2c:	96 e7       	ldi	r25, 0x76	; 118
    1b2e:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    1b32:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	1e c0       	rjmp	.+60     	; 0x1b78 <CheckInput+0x39a>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	49 f4       	brne	.+18     	; 0x1b52 <CheckInput+0x374>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b40:	8c eb       	ldi	r24, 0xBC	; 188
    1b42:	96 e7       	ldi	r25, 0x76	; 118
    1b44:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    1b48:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    1b4c:	86 e0       	ldi	r24, 0x06	; 6
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	13 c0       	rjmp	.+38     	; 0x1b78 <CheckInput+0x39a>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	49 f4       	brne	.+18     	; 0x1b68 <CheckInput+0x38a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b56:	87 eb       	ldi	r24, 0xB7	; 183
    1b58:	96 e7       	ldi	r25, 0x76	; 118
    1b5a:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    1b5e:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    1b62:	85 e0       	ldi	r24, 0x05	; 5
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <CheckInput+0x39a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b68:	80 e4       	ldi	r24, 0x40	; 64
    1b6a:	96 e7       	ldi	r25, 0x76	; 118
    1b6c:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    1b70:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    1b74:	82 e4       	ldi	r24, 0x42	; 66
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x44>
    1b7c:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x45>
    reactStr[2][number]=type;
    1b80:	20 93 d4 39 	sts	0x39D4, r18	; 0x8039d4 <reactStr+0x84>
    1b84:	30 93 d5 39 	sts	0x39D5, r19	; 0x8039d5 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b88:	8d e9       	ldi	r24, 0x9D	; 157
    1b8a:	96 e7       	ldi	r25, 0x76	; 118
    1b8c:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <reactStr+0x6>
    1b90:	90 93 57 39 	sts	0x3957, r25	; 0x803957 <reactStr+0x7>
    reactStr[1][number]=length;
    1b94:	8a e1       	ldi	r24, 0x1A	; 26
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	80 93 96 39 	sts	0x3996, r24	; 0x803996 <reactStr+0x46>
    1b9c:	90 93 97 39 	sts	0x3997, r25	; 0x803997 <reactStr+0x47>
    reactStr[2][number]=type;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	80 93 d6 39 	sts	0x39D6, r24	; 0x8039d6 <reactStr+0x86>
    1ba8:	90 93 d7 39 	sts	0x39D7, r25	; 0x8039d7 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    1bac:	84 e0       	ldi	r24, 0x04	; 4
    1bae:	6e cf       	rjmp	.-292    	; 0x1a8c <CheckInput+0x2ae>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    1bb0:	81 37       	cpi	r24, 0x71	; 113
    1bb2:	d9 f4       	brne	.+54     	; 0x1bea <CheckInput+0x40c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1bb4:	8b e5       	ldi	r24, 0x5B	; 91
    1bb6:	9a e7       	ldi	r25, 0x7A	; 122
    1bb8:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr>
    1bbc:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x1>
    reactStr[1][number]=length;
    1bc0:	84 e0       	ldi	r24, 0x04	; 4
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x40>
    1bc8:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x41>
    reactStr[2][number]=type;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x80>
    1bd4:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1bd8:	23 e0       	ldi	r18, 0x03	; 3
    1bda:	3a e7       	ldi	r19, 0x7A	; 122
    1bdc:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    1be0:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    1be4:	24 e5       	ldi	r18, 0x54	; 84
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	48 cf       	rjmp	.-368    	; 0x1a7a <CheckInput+0x29c>
    1bea:	62 e8       	ldi	r22, 0x82	; 130
    1bec:	70 eb       	ldi	r23, 0xB0	; 176
    1bee:	c8 01       	movw	r24, r16
    1bf0:	37 db       	rcall	.-2450   	; 0x1260 <StartsWith>
    1bf2:	88 23       	and	r24, r24
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1bf4:	d9 f0       	breq	.+54     	; 0x1c2c <CheckInput+0x44e>
    1bf6:	1e e6       	ldi	r17, 0x6E	; 110
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	81 2f       	mov	r24, r17
    1bfc:	b1 d9       	rcall	.-3230   	; 0xf60 <WriteStatusBit>

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1bfe:	1f 5f       	subi	r17, 0xFF	; 255
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    1c00:	12 37       	cpi	r17, 0x72	; 114
    1c02:	d1 f7       	brne	.-12     	; 0x1bf8 <CheckInput+0x41a>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    1c04:	26 d9       	rcall	.-3508   	; 0xe52 <SaveGameState>
    1c06:	80 e2       	ldi	r24, 0x20	; 32
    1c08:	e5 ec       	ldi	r30, 0xC5	; 197
    1c0a:	f0 eb       	ldi	r31, 0xB0	; 176
    1c0c:	de 01       	movw	r26, r28
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	01 90       	ld	r0, Z+
    1c12:	0d 92       	st	X+, r0
                SerSpeed(60);
    1c14:	8a 95       	dec	r24
    1c16:	e1 f7       	brne	.-8      	; 0x1c10 <CheckInput+0x432>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1c18:	8c e3       	ldi	r24, 0x3C	; 60
    1c1a:	38 d8       	rcall	.-3984   	; 0xc8c <SerSpeed>
    1c1c:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <serTxDone>
    1c20:	88 23       	and	r24, r24
    1c22:	e1 f3       	breq	.-8      	; 0x1c1c <CheckInput+0x43e>
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	20 d8       	rcall	.-4032   	; 0xc6a <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    1c2a:	f8 cf       	rjmp	.-16     	; 0x1c1c <CheckInput+0x43e>
    1c2c:	68 e8       	ldi	r22, 0x88	; 136
    1c2e:	70 eb       	ldi	r23, 0xB0	; 176
    1c30:	c8 01       	movw	r24, r16
    1c32:	16 db       	rcall	.-2516   	; 0x1260 <StartsWith>
    1c34:	68 2e       	mov	r6, r24
    1c36:	88 23       	and	r24, r24
    1c38:	49 f1       	breq	.+82     	; 0x1c8c <CheckInput+0x4ae>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    1c3e:	18 e1       	ldi	r17, 0x18	; 24
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	be 01       	movw	r22, r28
    1c44:	6f 5d       	subi	r22, 0xDF	; 223
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	81 2f       	mov	r24, r17
    1c4a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEWrite>
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    1c4e:	1f 5f       	subi	r17, 0xFF	; 255
    1c50:	10 32       	cpi	r17, 0x20	; 32
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1c52:	b1 f7       	brne	.-20     	; 0x1c40 <CheckInput+0x462>
    1c54:	1e e6       	ldi	r17, 0x6E	; 110
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	81 2f       	mov	r24, r17
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    1c5a:	82 d9       	rcall	.-3324   	; 0xf60 <WriteStatusBit>
    1c5c:	1f 5f       	subi	r17, 0xFF	; 255
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    1c5e:	12 37       	cpi	r17, 0x72	; 114
    1c60:	d1 f7       	brne	.-12     	; 0x1c56 <CheckInput+0x478>

                uint8_t cheat[] = "Reset please! ";
    1c62:	f7 d8       	rcall	.-3602   	; 0xe52 <SaveGameState>
    1c64:	8f e0       	ldi	r24, 0x0F	; 15
    1c66:	e5 ee       	ldi	r30, 0xE5	; 229
    1c68:	f0 eb       	ldi	r31, 0xB0	; 176
    1c6a:	de 01       	movw	r26, r28
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	01 90       	ld	r0, Z+
    1c70:	0d 92       	st	X+, r0
                SerSpeed(60);
    1c72:	8a 95       	dec	r24
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <CheckInput+0x490>
    1c76:	8c e3       	ldi	r24, 0x3C	; 60
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1c78:	09 d8       	rcall	.-4078   	; 0xc8c <SerSpeed>
    1c7a:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <serTxDone>
    1c7e:	88 23       	and	r24, r24
    1c80:	e1 f3       	breq	.-8      	; 0x1c7a <CheckInput+0x49c>
    1c82:	ce 01       	movw	r24, r28
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	0e 94 35 06 	call	0xc6a	; 0xc6a <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    1c8a:	f7 cf       	rjmp	.-18     	; 0x1c7a <CheckInput+0x49c>
    1c8c:	6f eb       	ldi	r22, 0xBF	; 191
    1c8e:	70 eb       	ldi	r23, 0xB0	; 176
    1c90:	c8 01       	movw	r24, r16
    1c92:	e6 da       	rcall	.-2612   	; 0x1260 <StartsWith>
    1c94:	88 23       	and	r24, r24
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <CheckInput+0x4bc>
    1c98:	33 ce       	rjmp	.-922    	; 0x1900 <CheckInput+0x122>
    1c9a:	00 e5       	ldi	r16, 0x50	; 80
    1c9c:	19 e3       	ldi	r17, 0x39	; 57
    1c9e:	78 e1       	ldi	r23, 0x18	; 24
    1ca0:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 255-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1ca2:	ea e0       	ldi	r30, 0x0A	; 10
    1ca4:	5e 2e       	mov	r5, r30
                        bit /= 10;
    1ca6:	f4 e6       	ldi	r31, 0x64	; 100
    1ca8:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    1caa:	ee 24       	eor	r14, r14
    1cac:	e3 94       	inc	r14
    1cae:	f1 2c       	mov	r15, r1
    1cb0:	cc 24       	eor	r12, r12
    1cb2:	c3 94       	inc	r12
    1cb4:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1cb6:	89 e5       	ldi	r24, 0x59	; 89
    1cb8:	88 2e       	mov	r8, r24
    1cba:	8a e7       	ldi	r24, 0x7A	; 122
    1cbc:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    1cbe:	92 e0       	ldi	r25, 0x02	; 2
    1cc0:	a9 2e       	mov	r10, r25
    1cc2:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	be 01       	movw	r22, r28
    1cc8:	6f 5d       	subi	r22, 0xDF	; 223
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	87 2d       	mov	r24, r7
    1cce:	0e 94 fd 05 	call	0xbfa	; 0xbfa <EERead>
                    bit = 255-bit;
    1cd2:	29 a1       	ldd	r18, Y+33	; 0x21
    1cd4:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1cd6:	82 2f       	mov	r24, r18
    1cd8:	65 2d       	mov	r22, r5
    1cda:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodqi4>
    1cde:	9b 83       	std	Y+3, r25	; 0x03
    1ce0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodqi4>
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    1ce6:	82 2f       	mov	r24, r18
    1ce8:	64 2d       	mov	r22, r4
    1cea:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 255-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	19 a2       	std	Y+33, r1	; 0x21
    1cf2:	de 01       	movw	r26, r28
    1cf4:	11 96       	adiw	r26, 0x01	; 1
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    1cf8:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1cfa:	86 2d       	mov	r24, r6
    1cfc:	84 0f       	add	r24, r20
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	fc 01       	movw	r30, r24
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	e0 5b       	subi	r30, 0xB0	; 176
    1d08:	f6 4c       	sbci	r31, 0xC6	; 198
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	2d 52       	subi	r18, 0x2D	; 45
    1d0e:	3b 48       	sbci	r19, 0x8B	; 139
    1d10:	20 83       	st	Z, r18
    1d12:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    1d14:	fc 01       	movw	r30, r24
    1d16:	ee 0f       	add	r30, r30
    1d18:	ff 1f       	adc	r31, r31
    1d1a:	e0 57       	subi	r30, 0x70	; 112
    1d1c:	f6 4c       	sbci	r31, 0xC6	; 198
    1d1e:	e0 82       	st	Z, r14
    1d20:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	fc 01       	movw	r30, r24
    1d28:	e0 53       	subi	r30, 0x30	; 48
    1d2a:	f6 4c       	sbci	r31, 0xC6	; 198
    1d2c:	e0 82       	st	Z, r14
    1d2e:	f1 82       	std	Z+1, r15	; 0x01
    1d30:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    1d32:	43 30       	cpi	r20, 0x03	; 3
    1d34:	09 f7       	brne	.-62     	; 0x1cf8 <CheckInput+0x51a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d36:	f8 01       	movw	r30, r16
    1d38:	86 82       	std	Z+6, r8	; 0x06
    1d3a:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    1d3c:	ea 5b       	subi	r30, 0xBA	; 186
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	a0 82       	st	Z, r10
    1d42:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    1d44:	e0 5c       	subi	r30, 0xC0	; 192
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	c0 82       	st	Z, r12
    1d4a:	d1 82       	std	Z+1, r13	; 0x01
    1d4c:	73 94       	inc	r7
    1d4e:	08 5f       	subi	r16, 0xF8	; 248
    1d50:	1f 4f       	sbci	r17, 0xFF	; 255
    1d52:	f4 e0       	ldi	r31, 0x04	; 4
    1d54:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    1d56:	80 e2       	ldi	r24, 0x20	; 32
    1d58:	78 12       	cpse	r7, r24
    1d5a:	b4 cf       	rjmp	.-152    	; 0x1cc4 <CheckInput+0x4e6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d5c:	8b e5       	ldi	r24, 0x5B	; 91
    1d5e:	9a e7       	ldi	r25, 0x7A	; 122
    1d60:	80 93 8e 39 	sts	0x398E, r24	; 0x80398e <reactStr+0x3e>
    1d64:	90 93 8f 39 	sts	0x398F, r25	; 0x80398f <reactStr+0x3f>
    reactStr[1][number]=length;
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x7e>
    1d70:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x7f>
    reactStr[2][number]=type;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	80 93 0e 3a 	sts	0x3A0E, r24	; 0x803a0e <reactStr+0xbe>
    1d7c:	90 93 0f 3a 	sts	0x3A0F, r25	; 0x803a0f <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    1d80:	70 92 4f 39 	sts	0x394F, r7	; 0x80394f <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    1d84:	ff 24       	eor	r15, r15
    1d86:	f3 94       	inc	r15
}
    1d88:	8f 2d       	mov	r24, r15
    1d8a:	a1 96       	adiw	r28, 0x21	; 33
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	7f 90       	pop	r7
    1daa:	6f 90       	pop	r6
    1dac:	5f 90       	pop	r5
    1dae:	4f 90       	pop	r4
    1db0:	08 95       	ret

00001db2 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	2a 97       	sbiw	r28, 0x0a	; 10
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    1dde:	41 dc       	rcall	.-1918   	; 0x1662 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    1de0:	c8 01       	movw	r24, r16
    1de2:	3f dc       	rcall	.-1922   	; 0x1662 <CleanInput>
    1de4:	f8 2e       	mov	r15, r24

    if (inputLen) {

        //eXit to previous location
        if (data[0] == 'x'){
    1de6:	d8 01       	movw	r26, r16
    uint8_t elements = 1;

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);

    if (inputLen) {
    1de8:	88 23       	and	r24, r24
    1dea:	09 f4       	brne	.+2      	; 0x1dee <ProcessInput+0x3c>
    1dec:	58 c7       	rjmp	.+3760   	; 0x2c9e <ProcessInput+0xeec>

        //eXit to previous location
        if (data[0] == 'x'){
    1dee:	8c 91       	ld	r24, X
    1df0:	88 37       	cpi	r24, 0x78	; 120
    1df2:	79 f5       	brne	.+94     	; 0x1e52 <ProcessInput+0xa0>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    1df4:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <currDepth>
    1df8:	e8 2f       	mov	r30, r24
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	e0 5f       	subi	r30, 0xF0	; 240
    1e02:	f5 4c       	sbci	r31, 0xC5	; 197
    1e04:	20 81       	ld	r18, Z
    1e06:	31 81       	ldd	r19, Z+1	; 0x01
    1e08:	23 2b       	or	r18, r19
    1e0a:	11 f0       	breq	.+4      	; 0x1e10 <ProcessInput+0x5e>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <ProcessInput+0x64>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e10:	82 e8       	ldi	r24, 0x82	; 130
    1e12:	96 e7       	ldi	r25, 0x76	; 118
    1e14:	58 c5       	rjmp	.+2736   	; 0x28c6 <ProcessInput+0xb14>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    1e16:	80 91 56 3a 	lds	r24, 0x3A56	; 0x803a56 <currObj+0x6>
    1e1a:	c4 d8       	rcall	.-3704   	; 0xfa4 <CheckState>
    1e1c:	88 23       	and	r24, r24
    1e1e:	81 f0       	breq	.+32     	; 0x1e40 <ProcessInput+0x8e>
                --currDepth;
    1e20:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    1e24:	e1 50       	subi	r30, 0x01	; 1
    1e26:	e0 93 91 38 	sts	0x3891, r30	; 0x803891 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	ee 0f       	add	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	e0 5f       	subi	r30, 0xF0	; 240
    1e32:	f5 4c       	sbci	r31, 0xC5	; 197
    1e34:	60 e5       	ldi	r22, 0x50	; 80
    1e36:	7a e3       	ldi	r23, 0x3A	; 58
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	df da       	rcall	.-2626   	; 0x13fc <PopulateObject>
    1e3e:	0d c2       	rjmp	.+1050   	; 0x225a <ProcessInput+0x4a8>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
    1e40:	80 91 72 3a 	lds	r24, 0x3A72	; 0x803a72 <currObj+0x22>
    1e44:	90 91 73 3a 	lds	r25, 0x3A73	; 0x803a73 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e48:	20 91 64 3a 	lds	r18, 0x3A64	; 0x803a64 <currObj+0x14>
    1e4c:	30 91 65 3a 	lds	r19, 0x3A65	; 0x803a65 <currObj+0x15>
    1e50:	f2 c5       	rjmp	.+3044   	; 0x2a36 <ProcessInput+0xc84>
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    1e52:	85 36       	cpi	r24, 0x65	; 101
    1e54:	19 f0       	breq	.+6      	; 0x1e5c <ProcessInput+0xaa>
    1e56:	8f 36       	cpi	r24, 0x6F	; 111
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <ProcessInput+0xaa>
    1e5a:	c9 c0       	rjmp	.+402    	; 0x1fee <ProcessInput+0x23c>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    1e5c:	b2 e0       	ldi	r27, 0x02	; 2
    1e5e:	fb 12       	cpse	r15, r27
    1e60:	d7 cf       	rjmp	.-82     	; 0x1e10 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    1e62:	e0 90 91 38 	lds	r14, 0x3891	; 0x803891 <currDepth>
    1e66:	f1 2c       	mov	r15, r1
    1e68:	f7 01       	movw	r30, r14
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	e0 5f       	subi	r30, 0xF0	; 240
    1e70:	f5 4c       	sbci	r31, 0xC5	; 197
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	d8 01       	movw	r26, r16
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	6c 91       	ld	r22, X
    1e7c:	80 81       	ld	r24, Z
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
    1e80:	88 db       	rcall	.-2288   	; 0x1592 <FindChild>
    1e82:	f7 01       	movw	r30, r14
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	ee 5e       	subi	r30, 0xEE	; 238
    1e8a:	f5 4c       	sbci	r31, 0xC5	; 197
    1e8c:	80 83       	st	Z, r24
    1e8e:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    1e90:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <currDepth>
    1e94:	29 2f       	mov	r18, r25
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	f9 01       	movw	r30, r18
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	ee 5e       	subi	r30, 0xEE	; 238
    1ea0:	f5 4c       	sbci	r31, 0xC5	; 197
    1ea2:	40 81       	ld	r20, Z
    1ea4:	51 81       	ldd	r21, Z+1	; 0x01
    1ea6:	41 15       	cp	r20, r1
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <ProcessInput+0x102>
                    PopulateObject(route[currDepth+1], &actObj1);
    1eac:	61 e1       	ldi	r22, 0x11	; 17
    1eae:	79 e3       	ldi	r23, 0x39	; 57
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	1c c0       	rjmp	.+56     	; 0x1eec <ProcessInput+0x13a>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    1eb4:	99 23       	and	r25, r25
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <ProcessInput+0x108>
    1eb8:	0d c7       	rjmp	.+3610   	; 0x2cd4 <ProcessInput+0xf22>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	f9 01       	movw	r30, r18
    1ec0:	e2 5f       	subi	r30, 0xF2	; 242
    1ec2:	f5 4c       	sbci	r31, 0xC5	; 197
    1ec4:	d8 01       	movw	r26, r16
    1ec6:	11 96       	adiw	r26, 0x01	; 1
    1ec8:	6c 91       	ld	r22, X
    1eca:	80 81       	ld	r24, Z
    1ecc:	91 81       	ldd	r25, Z+1	; 0x01
    1ece:	0d db       	rcall	.-2534   	; 0x14ea <CheckLetter>
    1ed0:	88 23       	and	r24, r24
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <ProcessInput+0x124>
    1ed4:	ff c6       	rjmp	.+3582   	; 0x2cd4 <ProcessInput+0xf22>
                        PopulateObject(route[currDepth-1], &actObj1);
    1ed6:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	ee 0f       	add	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	e2 5f       	subi	r30, 0xF2	; 242
    1ee2:	f5 4c       	sbci	r31, 0xC5	; 197
    1ee4:	61 e1       	ldi	r22, 0x11	; 17
    1ee6:	79 e3       	ldi	r23, 0x39	; 57
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	87 da       	rcall	.-2802   	; 0x13fc <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    1eee:	f8 01       	movw	r30, r16
    1ef0:	80 81       	ld	r24, Z
    1ef2:	85 36       	cpi	r24, 0x65	; 101
    1ef4:	c9 f4       	brne	.+50     	; 0x1f28 <ProcessInput+0x176>
    1ef6:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x8>
    1efa:	80 fd       	sbrc	r24, 0
    1efc:	1e c0       	rjmp	.+60     	; 0x1f3a <ProcessInput+0x188>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1efe:	80 ea       	ldi	r24, 0xA0	; 160
    1f00:	99 e7       	ldi	r25, 0x79	; 121
    1f02:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    1f06:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    1f0a:	8e e1       	ldi	r24, 0x1E	; 30
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    1f12:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    1f1e:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    1f22:	72 e0       	ldi	r23, 0x02	; 2
    1f24:	77 2e       	mov	r7, r23
    1f26:	9b c6       	rjmp	.+3382   	; 0x2c5e <ProcessInput+0xeac>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    1f28:	8f 36       	cpi	r24, 0x6F	; 111
    1f2a:	39 f4       	brne	.+14     	; 0x1f3a <ProcessInput+0x188>
    1f2c:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x8>
    1f30:	81 fd       	sbrc	r24, 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <ProcessInput+0x188>
    1f34:	85 e8       	ldi	r24, 0x85	; 133
    1f36:	99 e7       	ldi	r25, 0x79	; 121
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    1f38:	c6 c4       	rjmp	.+2444   	; 0x28c6 <ProcessInput+0xb14>
    1f3a:	80 91 17 39 	lds	r24, 0x3917	; 0x803917 <actObj1.3989+0x6>
    1f3e:	32 d8       	rcall	.-3996   	; 0xfa4 <CheckState>
    1f40:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    1f44:	88 23       	and	r24, r24
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <ProcessInput+0x198>
    1f48:	42 c0       	rjmp	.+132    	; 0x1fce <ProcessInput+0x21c>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    1f4a:	ae 2f       	mov	r26, r30
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	aa 0f       	add	r26, r26
    1f50:	bb 1f       	adc	r27, r27
    1f52:	ae 5e       	subi	r26, 0xEE	; 238
    1f54:	b5 4c       	sbci	r27, 0xC5	; 197
    1f56:	8d 91       	ld	r24, X+
    1f58:	9c 91       	ld	r25, X
    1f5a:	89 2b       	or	r24, r25
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <ProcessInput+0x1b0>
    1f5e:	ef 5f       	subi	r30, 0xFF	; 255
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <ProcessInput+0x1b2>
    1f62:	e1 50       	subi	r30, 0x01	; 1
    1f64:	e0 93 91 38 	sts	0x3891, r30	; 0x803891 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    1f68:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	ee 0f       	add	r30, r30
    1f70:	ff 1f       	adc	r31, r31
    1f72:	e0 5f       	subi	r30, 0xF0	; 240
    1f74:	f5 4c       	sbci	r31, 0xC5	; 197
    1f76:	60 e5       	ldi	r22, 0x50	; 80
    1f78:	7a e3       	ldi	r23, 0x3A	; 58
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	3e da       	rcall	.-2948   	; 0x13fc <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    1f80:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <currObj+0x1c>
    1f84:	90 91 6d 3a 	lds	r25, 0x3A6D	; 0x803a6d <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f88:	20 91 5e 3a 	lds	r18, 0x3A5E	; 0x803a5e <currObj+0xe>
    1f8c:	30 91 5f 3a 	lds	r19, 0x3A5F	; 0x803a5f <currObj+0xf>
    1f90:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    1f94:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    1f98:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    1f9c:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    1fa0:	10 92 d2 39 	sts	0x39D2, r1	; 0x8039d2 <reactStr+0x82>
    1fa4:	10 92 d3 39 	sts	0x39D3, r1	; 0x8039d3 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fa8:	8b e5       	ldi	r24, 0x5B	; 91
    1faa:	9a e7       	ldi	r25, 0x7A	; 122
    1fac:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    1fb0:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x44>
    1fbc:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x45>
    reactStr[2][number]=type;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	80 93 d4 39 	sts	0x39D4, r24	; 0x8039d4 <reactStr+0x84>
    1fc8:	90 93 d5 39 	sts	0x39D5, r25	; 0x8039d5 <reactStr+0x85>
    1fcc:	68 c4       	rjmp	.+2256   	; 0x289e <ProcessInput+0xaec>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	ee 0f       	add	r30, r30
    1fd2:	ff 1f       	adc	r31, r31
    1fd4:	ee 5e       	subi	r30, 0xEE	; 238
    1fd6:	f5 4c       	sbci	r31, 0xC5	; 197
    1fd8:	10 82       	st	Z, r1
    1fda:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);                
    1fdc:	80 91 33 39 	lds	r24, 0x3933	; 0x803933 <actObj1.3989+0x22>
    1fe0:	90 91 34 39 	lds	r25, 0x3934	; 0x803934 <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fe4:	20 91 25 39 	lds	r18, 0x3925	; 0x803925 <actObj1.3989+0x14>
    1fe8:	30 91 26 39 	lds	r19, 0x3926	; 0x803926 <actObj1.3989+0x15>
    1fec:	24 c5       	rjmp	.+2632   	; 0x2a36 <ProcessInput+0xc84>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    1fee:	8c 36       	cpi	r24, 0x6C	; 108
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <ProcessInput+0x242>
    1ff2:	4b c1       	rjmp	.+662    	; 0x228a <ProcessInput+0x4d8>
    1ff4:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
            if (inputLen == 1) {
    1ff8:	b1 e0       	ldi	r27, 0x01	; 1
    1ffa:	fb 12       	cpse	r15, r27
    1ffc:	f6 c0       	rjmp	.+492    	; 0x21ea <ProcessInput+0x438>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    1ffe:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <currObj+0x1c>
    2002:	90 91 6d 3a 	lds	r25, 0x3A6D	; 0x803a6d <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2006:	20 91 5e 3a 	lds	r18, 0x3A5E	; 0x803a5e <currObj+0xe>
    200a:	30 91 5f 3a 	lds	r19, 0x3A5F	; 0x803a5f <currObj+0xf>
    200e:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    2012:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2016:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    201a:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    201e:	10 92 d2 39 	sts	0x39D2, r1	; 0x8039d2 <reactStr+0x82>
    2022:	10 92 d3 39 	sts	0x39D3, r1	; 0x8039d3 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2026:	8b e5       	ldi	r24, 0x5B	; 91
    2028:	9a e7       	ldi	r25, 0x7A	; 122
    202a:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    202e:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x44>
    203a:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x45>
    reactStr[2][number]=type;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	80 93 d4 39 	sts	0x39D4, r24	; 0x8039d4 <reactStr+0x84>
    2046:	90 93 d5 39 	sts	0x39D5, r25	; 0x8039d5 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    204a:	2e ee       	ldi	r18, 0xEE	; 238
    204c:	39 e7       	ldi	r19, 0x79	; 121
    204e:	20 93 56 39 	sts	0x3956, r18	; 0x803956 <reactStr+0x6>
    2052:	30 93 57 39 	sts	0x3957, r19	; 0x803957 <reactStr+0x7>
    reactStr[1][number]=length;
    2056:	25 e1       	ldi	r18, 0x15	; 21
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	20 93 96 39 	sts	0x3996, r18	; 0x803996 <reactStr+0x46>
    205e:	30 93 97 39 	sts	0x3997, r19	; 0x803997 <reactStr+0x47>
    reactStr[2][number]=type;
    2062:	80 93 d6 39 	sts	0x39D6, r24	; 0x8039d6 <reactStr+0x86>
    2066:	90 93 d7 39 	sts	0x39D7, r25	; 0x8039d7 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	ee 5e       	subi	r30, 0xEE	; 238
    2072:	f5 4c       	sbci	r31, 0xC5	; 197
    2074:	10 82       	st	Z, r1
    2076:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2078:	84 e0       	ldi	r24, 0x04	; 4
    207a:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    207c:	99 e5       	ldi	r25, 0x59	; 89
    207e:	c9 2e       	mov	r12, r25
    2080:	9a e7       	ldi	r25, 0x7A	; 122
    2082:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2084:	22 e0       	ldi	r18, 0x02	; 2
    2086:	a2 2e       	mov	r10, r18
    2088:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    208a:	88 24       	eor	r8, r8
    208c:	83 94       	inc	r8
    208e:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2090:	80 91 91 38 	lds	r24, 0x3891	; 0x803891 <currDepth>
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 01       	movw	r18, r24
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	f9 01       	movw	r30, r18
    209e:	ee 5e       	subi	r30, 0xEE	; 238
    20a0:	f5 4c       	sbci	r31, 0xC5	; 197
    20a2:	7f 01       	movw	r14, r30
    20a4:	40 81       	ld	r20, Z
    20a6:	51 81       	ldd	r21, Z+1	; 0x01
    20a8:	f9 01       	movw	r30, r18
    20aa:	e0 5f       	subi	r30, 0xF0	; 240
    20ac:	f5 4c       	sbci	r31, 0xC5	; 197
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	91 81       	ldd	r25, Z+1	; 0x01
    20b4:	6e da       	rcall	.-2852   	; 0x1592 <FindChild>
    20b6:	d7 01       	movw	r26, r14
    20b8:	8d 93       	st	X+, r24
    20ba:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    20bc:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 5e       	subi	r30, 0xEE	; 238
    20c8:	f5 4c       	sbci	r31, 0xC5	; 197
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <ProcessInput+0x322>
    20d2:	4a c0       	rjmp	.+148    	; 0x2168 <ProcessInput+0x3b6>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    20d4:	20 91 99 38 	lds	r18, 0x3899	; 0x803899 <inventory>
    20d8:	30 91 9a 38 	lds	r19, 0x389A	; 0x80389a <inventory+0x1>
    20dc:	82 17       	cp	r24, r18
    20de:	93 07       	cpc	r25, r19
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <ProcessInput+0x332>
    20e2:	42 c0       	rjmp	.+132    	; 0x2168 <ProcessInput+0x3b6>
    20e4:	20 91 9b 38 	lds	r18, 0x389B	; 0x80389b <inventory+0x2>
    20e8:	30 91 9c 38 	lds	r19, 0x389C	; 0x80389c <inventory+0x3>
    20ec:	82 17       	cp	r24, r18
    20ee:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    20f0:	d9 f1       	breq	.+118    	; 0x2168 <ProcessInput+0x3b6>
    20f2:	61 e1       	ldi	r22, 0x11	; 17
    20f4:	79 e3       	ldi	r23, 0x39	; 57
    20f6:	82 d9       	rcall	.-3324   	; 0x13fc <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    20f8:	80 91 2b 39 	lds	r24, 0x392B	; 0x80392b <actObj1.3989+0x1a>
    20fc:	90 91 2c 39 	lds	r25, 0x392C	; 0x80392c <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2100:	e6 2d       	mov	r30, r6
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	df 01       	movw	r26, r30
    2106:	aa 0f       	add	r26, r26
    2108:	bb 1f       	adc	r27, r27
    210a:	a0 5b       	subi	r26, 0xB0	; 176
    210c:	b6 4c       	sbci	r27, 0xC6	; 198
    210e:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <actObj1.3989+0xc>
    2112:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <actObj1.3989+0xd>
    2116:	2d 93       	st	X+, r18
    2118:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    211a:	df 01       	movw	r26, r30
    211c:	aa 0f       	add	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	a0 57       	subi	r26, 0x70	; 112
    2122:	b6 4c       	sbci	r27, 0xC6	; 198
    2124:	8d 93       	st	X+, r24
    2126:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	e0 53       	subi	r30, 0x30	; 48
    212e:	f6 4c       	sbci	r31, 0xC6	; 198
    2130:	10 82       	st	Z, r1
    2132:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	86 0d       	add	r24, r6
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	63 94       	inc	r6
    213c:	63 94       	inc	r6
    213e:	fc 01       	movw	r30, r24
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	e0 5b       	subi	r30, 0xB0	; 176
    2146:	f6 4c       	sbci	r31, 0xC6	; 198
    2148:	c0 82       	st	Z, r12
    214a:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    214c:	fc 01       	movw	r30, r24
    214e:	ee 0f       	add	r30, r30
    2150:	ff 1f       	adc	r31, r31
    2152:	e0 57       	subi	r30, 0x70	; 112
    2154:	f6 4c       	sbci	r31, 0xC6	; 198
    2156:	a0 82       	st	Z, r10
    2158:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	fc 01       	movw	r30, r24
    2160:	e0 53       	subi	r30, 0x30	; 48
    2162:	f6 4c       	sbci	r31, 0xC6	; 198
    2164:	80 82       	st	Z, r8
    2166:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2168:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <currDepth>
    216c:	82 2f       	mov	r24, r18
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	ee 5e       	subi	r30, 0xEE	; 238
    2178:	f5 4c       	sbci	r31, 0xC5	; 197
    217a:	40 81       	ld	r20, Z
    217c:	51 81       	ldd	r21, Z+1	; 0x01
    217e:	45 2b       	or	r20, r21
    2180:	09 f0       	breq	.+2      	; 0x2184 <ProcessInput+0x3d2>
    2182:	86 cf       	rjmp	.-244    	; 0x2090 <ProcessInput+0x2de>

                //Look back if not on level 0
                if (currDepth) {
    2184:	22 23       	and	r18, r18
                    PopulateObject(route[currDepth-1], &actObj1);
    2186:	69 f1       	breq	.+90     	; 0x21e2 <ProcessInput+0x430>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	fc 01       	movw	r30, r24
    218e:	e2 5f       	subi	r30, 0xF2	; 242
    2190:	f5 4c       	sbci	r31, 0xC5	; 197
    2192:	61 e1       	ldi	r22, 0x11	; 17
    2194:	79 e3       	ldi	r23, 0x39	; 57
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	30 d9       	rcall	.-3488   	; 0x13fc <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    219c:	20 91 2b 39 	lds	r18, 0x392B	; 0x80392b <actObj1.3989+0x1a>
    21a0:	30 91 2c 39 	lds	r19, 0x392C	; 0x80392c <actObj1.3989+0x1b>
    21a4:	77 24       	eor	r7, r7
    21a6:	73 94       	inc	r7
    21a8:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21aa:	86 2d       	mov	r24, r6
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	fc 01       	movw	r30, r24
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	e0 5b       	subi	r30, 0xB0	; 176
    21b6:	f6 4c       	sbci	r31, 0xC6	; 198
    21b8:	40 91 1d 39 	lds	r20, 0x391D	; 0x80391d <actObj1.3989+0xc>
    21bc:	50 91 1e 39 	lds	r21, 0x391E	; 0x80391e <actObj1.3989+0xd>
    21c0:	40 83       	st	Z, r20
    21c2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    21c4:	fc 01       	movw	r30, r24
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	e0 57       	subi	r30, 0x70	; 112
    21cc:	f6 4c       	sbci	r31, 0xC6	; 198
    21ce:	20 83       	st	Z, r18
    21d0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	fc 01       	movw	r30, r24
    21d8:	e0 53       	subi	r30, 0x30	; 48
    21da:	f6 4c       	sbci	r31, 0xC6	; 198
    21dc:	10 82       	st	Z, r1
    21de:	11 82       	std	Z+1, r1	; 0x01
    21e0:	3e c5       	rjmp	.+2684   	; 0x2c5e <ProcessInput+0xeac>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    21e2:	77 24       	eor	r7, r7
    21e4:	7a 94       	dec	r7
    21e6:	76 0c       	add	r7, r6
    21e8:	3a c5       	rjmp	.+2676   	; 0x2c5e <ProcessInput+0xeac>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    21ea:	ee 2e       	mov	r14, r30
    21ec:	f1 2c       	mov	r15, r1
    21ee:	f7 01       	movw	r30, r14
    21f0:	ee 0f       	add	r30, r30
    21f2:	ff 1f       	adc	r31, r31
    21f4:	e0 5f       	subi	r30, 0xF0	; 240
    21f6:	f5 4c       	sbci	r31, 0xC5	; 197
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	d8 01       	movw	r26, r16
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	6c 91       	ld	r22, X
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	c5 d9       	rcall	.-3190   	; 0x1592 <FindChild>
    2208:	f7 01       	movw	r30, r14
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	ee 5e       	subi	r30, 0xEE	; 238
    2210:	f5 4c       	sbci	r31, 0xC5	; 197
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2216:	90 91 91 38 	lds	r25, 0x3891	; 0x803891 <currDepth>
    221a:	29 2f       	mov	r18, r25
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	f9 01       	movw	r30, r18
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 5e       	subi	r30, 0xEE	; 238
    2226:	f5 4c       	sbci	r31, 0xC5	; 197
    2228:	40 81       	ld	r20, Z
    222a:	51 81       	ldd	r21, Z+1	; 0x01
    222c:	41 15       	cp	r20, r1
    222e:	51 05       	cpc	r21, r1
    2230:	21 f0       	breq	.+8      	; 0x223a <ProcessInput+0x488>
                    PopulateObject(route[currDepth+1], &actObj1);
    2232:	61 e1       	ldi	r22, 0x11	; 17
    2234:	79 e3       	ldi	r23, 0x39	; 57
    2236:	ca 01       	movw	r24, r20
    2238:	1e c0       	rjmp	.+60     	; 0x2276 <ProcessInput+0x4c4>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    223a:	99 23       	and	r25, r25
    223c:	09 f4       	brne	.+2      	; 0x2240 <ProcessInput+0x48e>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    223e:	4a c5       	rjmp	.+2708   	; 0x2cd4 <ProcessInput+0xf22>
    2240:	22 0f       	add	r18, r18
    2242:	33 1f       	adc	r19, r19
    2244:	f9 01       	movw	r30, r18
    2246:	e2 5f       	subi	r30, 0xF2	; 242
    2248:	f5 4c       	sbci	r31, 0xC5	; 197
    224a:	d8 01       	movw	r26, r16
    224c:	11 96       	adiw	r26, 0x01	; 1
    224e:	6c 91       	ld	r22, X
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	4a d9       	rcall	.-3436   	; 0x14ea <CheckLetter>
    2256:	81 11       	cpse	r24, r1
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <ProcessInput+0x4ae>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    225a:	77 24       	eor	r7, r7
    225c:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    225e:	ff c4       	rjmp	.+2558   	; 0x2c5e <ProcessInput+0xeac>
    2260:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	e2 5f       	subi	r30, 0xF2	; 242
    226c:	f5 4c       	sbci	r31, 0xC5	; 197
    226e:	61 e1       	ldi	r22, 0x11	; 17
    2270:	79 e3       	ldi	r23, 0x39	; 57
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	c2 d8       	rcall	.-3708   	; 0x13fc <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2278:	80 91 2d 39 	lds	r24, 0x392D	; 0x80392d <actObj1.3989+0x1c>
    227c:	90 91 2e 39 	lds	r25, 0x392E	; 0x80392e <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2280:	20 91 1f 39 	lds	r18, 0x391F	; 0x80391f <actObj1.3989+0xe>
    2284:	30 91 20 39 	lds	r19, 0x3920	; 0x803920 <actObj1.3989+0xf>
    2288:	d6 c3       	rjmp	.+1964   	; 0x2a36 <ProcessInput+0xc84>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    228a:	80 37       	cpi	r24, 0x70	; 112
    228c:	09 f0       	breq	.+2      	; 0x2290 <ProcessInput+0x4de>
    228e:	96 c0       	rjmp	.+300    	; 0x23bc <ProcessInput+0x60a>
            if (inventory[0]&&inventory[1]) {
    2290:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <inventory>
    2294:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <inventory+0x1>
    2298:	89 2b       	or	r24, r25
    229a:	79 f0       	breq	.+30     	; 0x22ba <ProcessInput+0x508>
    229c:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <inventory+0x2>
    22a0:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <inventory+0x3>
    22a4:	89 2b       	or	r24, r25
    22a6:	49 f0       	breq	.+18     	; 0x22ba <ProcessInput+0x508>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22a8:	85 e4       	ldi	r24, 0x45	; 69
    22aa:	98 e7       	ldi	r25, 0x78	; 120
    22ac:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    22b0:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    22b4:	89 e5       	ldi	r24, 0x59	; 89
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	2a ce       	rjmp	.-940    	; 0x1f0e <ProcessInput+0x15c>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    22ba:	b2 e0       	ldi	r27, 0x02	; 2
    22bc:	fb 12       	cpse	r15, r27
    22be:	a8 cd       	rjmp	.-1200   	; 0x1e10 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    22c0:	e0 90 91 38 	lds	r14, 0x3891	; 0x803891 <currDepth>
    22c4:	f1 2c       	mov	r15, r1
    22c6:	f7 01       	movw	r30, r14
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	e0 5f       	subi	r30, 0xF0	; 240
    22ce:	f5 4c       	sbci	r31, 0xC5	; 197
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	d8 01       	movw	r26, r16
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	6c 91       	ld	r22, X
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	59 d9       	rcall	.-3406   	; 0x1592 <FindChild>
    22e0:	f7 01       	movw	r30, r14
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	ee 5e       	subi	r30, 0xEE	; 238
    22e8:	f5 4c       	sbci	r31, 0xC5	; 197
    22ea:	80 83       	st	Z, r24
    22ec:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    22ee:	20 91 91 38 	lds	r18, 0x3891	; 0x803891 <currDepth>
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	2f 5f       	subi	r18, 0xFF	; 255
    22f6:	3f 4f       	sbci	r19, 0xFF	; 255
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	f9 01       	movw	r30, r18
    22fe:	e0 5f       	subi	r30, 0xF0	; 240
    2300:	f5 4c       	sbci	r31, 0xC5	; 197
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	09 f4       	brne	.+2      	; 0x230c <ProcessInput+0x55a>
    230a:	ab c3       	rjmp	.+1878   	; 0x2a62 <ProcessInput+0xcb0>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    230c:	40 91 99 38 	lds	r20, 0x3899	; 0x803899 <inventory>
    2310:	50 91 9a 38 	lds	r21, 0x389A	; 0x80389a <inventory+0x1>
    2314:	84 17       	cp	r24, r20
    2316:	95 07       	cpc	r25, r21
    2318:	39 f0       	breq	.+14     	; 0x2328 <ProcessInput+0x576>
    231a:	40 91 9b 38 	lds	r20, 0x389B	; 0x80389b <inventory+0x2>
    231e:	50 91 9c 38 	lds	r21, 0x389C	; 0x80389c <inventory+0x3>
    2322:	84 17       	cp	r24, r20
    2324:	95 07       	cpc	r25, r21
    2326:	c1 f4       	brne	.+48     	; 0x2358 <ProcessInput+0x5a6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2328:	80 e2       	ldi	r24, 0x20	; 32
    232a:	98 e7       	ldi	r25, 0x78	; 120
    232c:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2330:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2334:	85 e2       	ldi	r24, 0x25	; 37
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    233c:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    2348:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    234c:	f9 01       	movw	r30, r18
    234e:	e0 5f       	subi	r30, 0xF0	; 240
    2350:	f5 4c       	sbci	r31, 0xC5	; 197
    2352:	10 82       	st	Z, r1
    2354:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2356:	e5 cd       	rjmp	.-1078   	; 0x1f22 <ProcessInput+0x170>
    2358:	61 e1       	ldi	r22, 0x11	; 17
    235a:	79 e3       	ldi	r23, 0x39	; 57
    235c:	4f d8       	rcall	.-3938   	; 0x13fc <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    235e:	80 91 18 39 	lds	r24, 0x3918	; 0x803918 <actObj1.3989+0x7>
    2362:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CheckState>
    2366:	88 23       	and	r24, r24
    2368:	09 f4       	brne	.+2      	; 0x236c <ProcessInput+0x5ba>
    236a:	5d c3       	rjmp	.+1722   	; 0x2a26 <ProcessInput+0xc74>
                            if (actObj1.byteField[ITEM_NR]) {
    236c:	80 91 1c 39 	lds	r24, 0x391C	; 0x80391c <actObj1.3989+0xb>
    2370:	88 23       	and	r24, r24
    2372:	09 f4       	brne	.+2      	; 0x2376 <ProcessInput+0x5c4>
    2374:	4d cd       	rjmp	.-1382   	; 0x1e10 <ProcessInput+0x5e>
                                if (inventory[0]) {
    2376:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <inventory>
    237a:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <inventory+0x1>
    237e:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	ee 5e       	subi	r30, 0xEE	; 238
    238a:	f5 4c       	sbci	r31, 0xC5	; 197
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    238c:	89 2b       	or	r24, r25
    238e:	39 f0       	breq	.+14     	; 0x239e <ProcessInput+0x5ec>
                                    inventory[1] = route[currDepth+1];
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <inventory+0x2>
    2398:	90 93 9c 38 	sts	0x389C, r25	; 0x80389c <inventory+0x3>
    239c:	06 c0       	rjmp	.+12     	; 0x23aa <ProcessInput+0x5f8>
                                } else {
                                    inventory[0] = route[currDepth+1];
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	80 93 99 38 	sts	0x3899, r24	; 0x803899 <inventory>
    23a6:	90 93 9a 38 	sts	0x389A, r25	; 0x80389a <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23aa:	8a e0       	ldi	r24, 0x0A	; 10
    23ac:	98 e7       	ldi	r25, 0x78	; 120
    23ae:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    23b2:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    23b6:	86 e1       	ldi	r24, 0x16	; 22
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	53 c2       	rjmp	.+1190   	; 0x2862 <ProcessInput+0xab0>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    23bc:	84 36       	cpi	r24, 0x64	; 100
    23be:	d9 f4       	brne	.+54     	; 0x23f6 <ProcessInput+0x644>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    23c0:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <inventory>
    23c4:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <inventory+0x1>
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	09 f0       	breq	.+2      	; 0x23ce <ProcessInput+0x61c>
    23cc:	8c c4       	rjmp	.+2328   	; 0x2ce6 <ProcessInput+0xf34>
    23ce:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <inventory+0x2>
    23d2:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <inventory+0x3>
    23d6:	89 2b       	or	r24, r25
    23d8:	49 f4       	brne	.+18     	; 0x23ec <ProcessInput+0x63a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23da:	84 ee       	ldi	r24, 0xE4	; 228
    23dc:	97 e7       	ldi	r25, 0x77	; 119
    23de:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    23e2:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    23e6:	86 e2       	ldi	r24, 0x26	; 38
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	91 cd       	rjmp	.-1246   	; 0x1f0e <ProcessInput+0x15c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    23ec:	b2 e0       	ldi	r27, 0x02	; 2
    23ee:	fb 16       	cp	r15, r27
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <ProcessInput+0x642>
    23f2:	df c4       	rjmp	.+2494   	; 0x2db2 <ProcessInput+0x1000>
    23f4:	0d cd       	rjmp	.-1510   	; 0x1e10 <ProcessInput+0x5e>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    23f6:	89 36       	cpi	r24, 0x69	; 105
    23f8:	09 f0       	breq	.+2      	; 0x23fc <ProcessInput+0x64a>
    23fa:	7b c0       	rjmp	.+246    	; 0x24f2 <ProcessInput+0x740>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    23fc:	80 91 99 38 	lds	r24, 0x3899	; 0x803899 <inventory>
    2400:	90 91 9a 38 	lds	r25, 0x389A	; 0x80389a <inventory+0x1>
    2404:	89 2b       	or	r24, r25
    2406:	31 f4       	brne	.+12     	; 0x2414 <ProcessInput+0x662>
    2408:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <inventory+0x2>
    240c:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <inventory+0x3>
    2410:	89 2b       	or	r24, r25
    2412:	19 f3       	breq	.-58     	; 0x23da <ProcessInput+0x628>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2414:	8a e0       	ldi	r24, 0x0A	; 10
    2416:	98 e7       	ldi	r25, 0x78	; 120
    2418:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    241c:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2420:	86 e1       	ldi	r24, 0x16	; 22
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2428:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    2434:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>
    2438:	29 e9       	ldi	r18, 0x99	; 153
    243a:	e2 2e       	mov	r14, r18
    243c:	28 e3       	ldi	r18, 0x38	; 56
    243e:	f2 2e       	mov	r15, r18
    2440:	3d e9       	ldi	r19, 0x9D	; 157
    2442:	63 2e       	mov	r6, r19
    2444:	38 e3       	ldi	r19, 0x38	; 56
    2446:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2448:	42 e0       	ldi	r20, 0x02	; 2
    244a:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    244c:	59 e5       	ldi	r21, 0x59	; 89
    244e:	c5 2e       	mov	r12, r21
    2450:	5a e7       	ldi	r21, 0x7A	; 122
    2452:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	a6 2e       	mov	r10, r22
    2458:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    245a:	88 24       	eor	r8, r8
    245c:	83 94       	inc	r8
    245e:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2460:	d7 01       	movw	r26, r14
    2462:	8d 91       	ld	r24, X+
    2464:	9d 91       	ld	r25, X+
    2466:	7d 01       	movw	r14, r26
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	d9 f1       	breq	.+118    	; 0x24e2 <ProcessInput+0x730>
                        PopulateObject(inventory[x], &actObj1);
    246c:	61 e1       	ldi	r22, 0x11	; 17
    246e:	79 e3       	ldi	r23, 0x39	; 57
    2470:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2474:	80 91 2b 39 	lds	r24, 0x392B	; 0x80392b <actObj1.3989+0x1a>
    2478:	90 91 2c 39 	lds	r25, 0x392C	; 0x80392c <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    247c:	e5 2d       	mov	r30, r5
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	df 01       	movw	r26, r30
    2482:	aa 0f       	add	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	a0 5b       	subi	r26, 0xB0	; 176
    2488:	b6 4c       	sbci	r27, 0xC6	; 198
    248a:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <actObj1.3989+0xc>
    248e:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <actObj1.3989+0xd>
    2492:	2d 93       	st	X+, r18
    2494:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2496:	df 01       	movw	r26, r30
    2498:	aa 0f       	add	r26, r26
    249a:	bb 1f       	adc	r27, r27
    249c:	a0 57       	subi	r26, 0x70	; 112
    249e:	b6 4c       	sbci	r27, 0xC6	; 198
    24a0:	8d 93       	st	X+, r24
    24a2:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	e0 53       	subi	r30, 0x30	; 48
    24aa:	f6 4c       	sbci	r31, 0xC6	; 198
    24ac:	10 82       	st	Z, r1
    24ae:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24b0:	e1 e0       	ldi	r30, 0x01	; 1
    24b2:	e5 0d       	add	r30, r5
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	53 94       	inc	r5
    24b8:	53 94       	inc	r5
    24ba:	df 01       	movw	r26, r30
    24bc:	aa 0f       	add	r26, r26
    24be:	bb 1f       	adc	r27, r27
    24c0:	a0 5b       	subi	r26, 0xB0	; 176
    24c2:	b6 4c       	sbci	r27, 0xC6	; 198
    24c4:	cd 92       	st	X+, r12
    24c6:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    24c8:	df 01       	movw	r26, r30
    24ca:	aa 0f       	add	r26, r26
    24cc:	bb 1f       	adc	r27, r27
    24ce:	a0 57       	subi	r26, 0x70	; 112
    24d0:	b6 4c       	sbci	r27, 0xC6	; 198
    24d2:	ad 92       	st	X+, r10
    24d4:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	e0 53       	subi	r30, 0x30	; 48
    24dc:	f6 4c       	sbci	r31, 0xC6	; 198
    24de:	80 82       	st	Z, r8
    24e0:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    24e2:	6e 14       	cp	r6, r14
    24e4:	7f 04       	cpc	r7, r15
    24e6:	09 f0       	breq	.+2      	; 0x24ea <ProcessInput+0x738>
    24e8:	bb cf       	rjmp	.-138    	; 0x2460 <ProcessInput+0x6ae>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    24ea:	77 24       	eor	r7, r7
    24ec:	7a 94       	dec	r7
    24ee:	75 0c       	add	r7, r5
    24f0:	b6 c3       	rjmp	.+1900   	; 0x2c5e <ProcessInput+0xeac>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    24f2:	9c e8       	ldi	r25, 0x8C	; 140
    24f4:	98 0f       	add	r25, r24
    24f6:	92 30       	cpi	r25, 0x02	; 2
    24f8:	28 f0       	brcs	.+10     	; 0x2504 <ProcessInput+0x752>
    24fa:	87 36       	cpi	r24, 0x67	; 103
    24fc:	19 f0       	breq	.+6      	; 0x2504 <ProcessInput+0x752>
    24fe:	82 37       	cpi	r24, 0x72	; 114
    2500:	09 f0       	breq	.+2      	; 0x2504 <ProcessInput+0x752>
    2502:	b8 c2       	rjmp	.+1392   	; 0x2a74 <ProcessInput+0xcc2>
            if ((inputLen<2)||(inputLen>3)) {
    2504:	8e ef       	ldi	r24, 0xFE	; 254
    2506:	8f 0d       	add	r24, r15
    2508:	82 30       	cpi	r24, 0x02	; 2
    250a:	08 f0       	brcs	.+2      	; 0x250e <ProcessInput+0x75c>
    250c:	81 cc       	rjmp	.-1790   	; 0x1e10 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    250e:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    2512:	ce 2e       	mov	r12, r30
    2514:	d1 2c       	mov	r13, r1
    2516:	d8 01       	movw	r26, r16
    2518:	af 0d       	add	r26, r15
    251a:	b1 1d       	adc	r27, r1
    251c:	11 97       	sbiw	r26, 0x01	; 1
    251e:	f6 01       	movw	r30, r12
    2520:	ee 0f       	add	r30, r30
    2522:	ff 1f       	adc	r31, r31
    2524:	e0 5f       	subi	r30, 0xF0	; 240
    2526:	f5 4c       	sbci	r31, 0xC5	; 197
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	6c 91       	ld	r22, X
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	2f d8       	rcall	.-4002   	; 0x1592 <FindChild>
    2534:	f6 01       	movw	r30, r12
    2536:	ee 0f       	add	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	ee 5e       	subi	r30, 0xEE	; 238
    253c:	f5 4c       	sbci	r31, 0xC5	; 197
    253e:	80 83       	st	Z, r24
    2540:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2542:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ee 5e       	subi	r30, 0xEE	; 238
    254e:	f5 4c       	sbci	r31, 0xC5	; 197
    2550:	80 81       	ld	r24, Z
    2552:	91 81       	ldd	r25, Z+1	; 0x01
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	09 f4       	brne	.+2      	; 0x255a <ProcessInput+0x7a8>
    2558:	7b c2       	rjmp	.+1270   	; 0x2a50 <ProcessInput+0xc9e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    255a:	b3 e0       	ldi	r27, 0x03	; 3
    255c:	fb 12       	cpse	r15, r27
    255e:	6d c1       	rjmp	.+730    	; 0x283a <ProcessInput+0xa88>
    2560:	f8 01       	movw	r30, r16
    2562:	20 81       	ld	r18, Z
    2564:	25 37       	cpi	r18, 0x75	; 117
    2566:	19 f0       	breq	.+6      	; 0x256e <ProcessInput+0x7bc>
    2568:	27 36       	cpi	r18, 0x67	; 103
    256a:	09 f0       	breq	.+2      	; 0x256e <ProcessInput+0x7bc>
    256c:	66 c1       	rjmp	.+716    	; 0x283a <ProcessInput+0xa88>
    256e:	61 2c       	mov	r6, r1
    2570:	77 24       	eor	r7, r7
    2572:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2574:	54 e6       	ldi	r21, 0x64	; 100
    2576:	c5 2e       	mov	r12, r21
    2578:	59 e7       	ldi	r21, 0x79	; 121
    257a:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    257c:	61 e2       	ldi	r22, 0x21	; 33
    257e:	a6 2e       	mov	r10, r22
    2580:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2582:	88 24       	eor	r8, r8
    2584:	83 94       	inc	r8
    2586:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2588:	e6 2c       	mov	r14, r6
    258a:	f1 2c       	mov	r15, r1
    258c:	c7 01       	movw	r24, r14
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	9c 01       	movw	r18, r24
    2594:	27 56       	subi	r18, 0x67	; 103
    2596:	37 4c       	sbci	r19, 0xC7	; 199
    2598:	79 01       	movw	r14, r18
    259a:	d9 01       	movw	r26, r18
    259c:	8d 91       	ld	r24, X+
    259e:	9c 91       	ld	r25, X
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	81 f0       	breq	.+32     	; 0x25c4 <ProcessInput+0x812>
                                if (CheckLetter(inventory[x], data[1])) {
    25a4:	f8 01       	movw	r30, r16
    25a6:	61 81       	ldd	r22, Z+1	; 0x01
    25a8:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CheckLetter>
    25ac:	88 23       	and	r24, r24
    25ae:	51 f0       	breq	.+20     	; 0x25c4 <ProcessInput+0x812>
                                    PopulateObject(inventory[x], &actObj2);
    25b0:	66 ee       	ldi	r22, 0xE6	; 230
    25b2:	78 e3       	ldi	r23, 0x38	; 56
    25b4:	d7 01       	movw	r26, r14
    25b6:	8d 91       	ld	r24, X+
    25b8:	9c 91       	ld	r25, X
    25ba:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>
                                    x = 2;
    25be:	32 e0       	ldi	r19, 0x02	; 2
    25c0:	63 2e       	mov	r6, r19
    25c2:	1e c0       	rjmp	.+60     	; 0x2600 <ProcessInput+0x84e>
                                }
                            }
                            if (x == 1) { 
    25c4:	b1 e0       	ldi	r27, 0x01	; 1
    25c6:	6b 12       	cpse	r6, r27
    25c8:	1a c0       	rjmp	.+52     	; 0x25fe <ProcessInput+0x84c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25ca:	e7 2d       	mov	r30, r7
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	df 01       	movw	r26, r30
    25d0:	aa 0f       	add	r26, r26
    25d2:	bb 1f       	adc	r27, r27
    25d4:	a0 5b       	subi	r26, 0xB0	; 176
    25d6:	b6 4c       	sbci	r27, 0xC6	; 198
    25d8:	cd 92       	st	X+, r12
    25da:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    25dc:	df 01       	movw	r26, r30
    25de:	aa 0f       	add	r26, r26
    25e0:	bb 1f       	adc	r27, r27
    25e2:	a0 57       	subi	r26, 0x70	; 112
    25e4:	b6 4c       	sbci	r27, 0xC6	; 198
    25e6:	ad 92       	st	X+, r10
    25e8:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    25ea:	ee 0f       	add	r30, r30
    25ec:	ff 1f       	adc	r31, r31
    25ee:	e0 53       	subi	r30, 0x30	; 48
    25f0:	f6 4c       	sbci	r31, 0xC6	; 198
    25f2:	80 82       	st	Z, r8
    25f4:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    25f6:	f8 01       	movw	r30, r16
    25f8:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    25fa:	73 94       	inc	r7
    25fc:	01 c0       	rjmp	.+2      	; 0x2600 <ProcessInput+0x84e>
    25fe:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2600:	63 94       	inc	r6
    2602:	f1 e0       	ldi	r31, 0x01	; 1
    2604:	6f 16       	cp	r6, r31
    2606:	09 f4       	brne	.+2      	; 0x260a <ProcessInput+0x858>
    2608:	bf cf       	rjmp	.-130    	; 0x2588 <ProcessInput+0x7d6>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    260a:	d8 01       	movw	r26, r16
    260c:	8c 91       	ld	r24, X
    260e:	88 23       	and	r24, r24
    2610:	09 f4       	brne	.+2      	; 0x2614 <ProcessInput+0x862>
    2612:	25 c3       	rjmp	.+1610   	; 0x2c5e <ProcessInput+0xeac>
                            PopulateObject(route[currDepth+1], &actObj1);
    2614:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	ee 5e       	subi	r30, 0xEE	; 238
    2620:	f5 4c       	sbci	r31, 0xC5	; 197
    2622:	61 e1       	ldi	r22, 0x11	; 17
    2624:	79 e3       	ldi	r23, 0x39	; 57
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    262e:	e0 90 2f 39 	lds	r14, 0x392F	; 0x80392f <actObj1.3989+0x1e>
    2632:	f0 90 30 39 	lds	r15, 0x3930	; 0x803930 <actObj1.3989+0x1f>
    2636:	b1 e0       	ldi	r27, 0x01	; 1
    2638:	eb 16       	cp	r14, r27
    263a:	f1 04       	cpc	r15, r1
    263c:	09 f0       	breq	.+2      	; 0x2640 <ProcessInput+0x88e>
    263e:	9a c0       	rjmp	.+308    	; 0x2774 <ProcessInput+0x9c2>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2640:	98 01       	movw	r18, r16
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	61 e0       	ldi	r22, 0x01	; 1
    264a:	80 91 21 39 	lds	r24, 0x3921	; 0x803921 <actObj1.3989+0x10>
    264e:	90 91 22 39 	lds	r25, 0x3922	; 0x803922 <actObj1.3989+0x11>
    2652:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <ExtEERead>
                                if (data[2] == '1') {
    2656:	f8 01       	movw	r30, r16
    2658:	42 81       	ldd	r20, Z+2	; 0x02
    265a:	21 e0       	ldi	r18, 0x01	; 1
    265c:	27 0d       	add	r18, r7
    265e:	87 2d       	mov	r24, r7
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	41 33       	cpi	r20, 0x31	; 49
    2664:	09 f0       	breq	.+2      	; 0x2668 <ProcessInput+0x8b6>
    2666:	6b c0       	rjmp	.+214    	; 0x273e <ProcessInput+0x98c>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    2668:	30 91 f1 38 	lds	r19, 0x38F1	; 0x8038f1 <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    266c:	51 ee       	ldi	r21, 0xE1	; 225
    266e:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2670:	fc 01       	movw	r30, r24
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	e0 5b       	subi	r30, 0xB0	; 176
    2678:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    267a:	54 30       	cpi	r21, 0x04	; 4
    267c:	60 f0       	brcs	.+24     	; 0x2696 <ProcessInput+0x8e4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    267e:	44 e0       	ldi	r20, 0x04	; 4
    2680:	59 e7       	ldi	r21, 0x79	; 121
    2682:	40 83       	st	Z, r20
    2684:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2686:	fc 01       	movw	r30, r24
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	e0 57       	subi	r30, 0x70	; 112
    268e:	f6 4c       	sbci	r31, 0xC6	; 198
    2690:	4a e1       	ldi	r20, 0x1A	; 26
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	64 c0       	rjmp	.+200    	; 0x275e <ProcessInput+0x9ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2696:	6e e8       	ldi	r22, 0x8E	; 142
    2698:	75 e7       	ldi	r23, 0x75	; 117
    269a:	60 83       	st	Z, r22
    269c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    269e:	fc 01       	movw	r30, r24
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	e0 57       	subi	r30, 0x70	; 112
    26a6:	f6 4c       	sbci	r31, 0xC6	; 198
    26a8:	62 eb       	ldi	r22, 0xB2	; 178
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	60 83       	st	Z, r22
    26ae:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	fc 01       	movw	r30, r24
    26b6:	e0 53       	subi	r30, 0x30	; 48
    26b8:	f6 4c       	sbci	r31, 0xC6	; 198
    26ba:	e0 82       	st	Z, r14
    26bc:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26be:	82 2f       	mov	r24, r18
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	fc 01       	movw	r30, r24
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	e0 5b       	subi	r30, 0xB0	; 176
    26ca:	f6 4c       	sbci	r31, 0xC6	; 198
    26cc:	6b e5       	ldi	r22, 0x5B	; 91
    26ce:	7a e7       	ldi	r23, 0x7A	; 122
    26d0:	60 83       	st	Z, r22
    26d2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    26d4:	fc 01       	movw	r30, r24
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	e0 57       	subi	r30, 0x70	; 112
    26dc:	f6 4c       	sbci	r31, 0xC6	; 198
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	60 83       	st	Z, r22
    26e4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	fc 01       	movw	r30, r24
    26ec:	e0 53       	subi	r30, 0x30	; 48
    26ee:	f6 4c       	sbci	r31, 0xC6	; 198
    26f0:	e0 82       	st	Z, r14
    26f2:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	87 0d       	add	r24, r7
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	f3 e0       	ldi	r31, 0x03	; 3
    26fc:	7f 0e       	add	r7, r31
    26fe:	fc 01       	movw	r30, r24
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	e0 5b       	subi	r30, 0xB0	; 176
    2706:	f6 4c       	sbci	r31, 0xC6	; 198
    2708:	60 eb       	ldi	r22, 0xB0	; 176
    270a:	78 e7       	ldi	r23, 0x78	; 120
    270c:	60 83       	st	Z, r22
    270e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2710:	fc 01       	movw	r30, r24
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	e0 57       	subi	r30, 0x70	; 112
    2718:	f6 4c       	sbci	r31, 0xC6	; 198
    271a:	62 e1       	ldi	r22, 0x12	; 18
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	60 83       	st	Z, r22
    2720:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	fc 01       	movw	r30, r24
    2728:	e0 53       	subi	r30, 0x30	; 48
    272a:	f6 4c       	sbci	r31, 0xC6	; 198
    272c:	e0 82       	st	Z, r14
    272e:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2730:	40 93 3f 39 	sts	0x393F, r20	; 0x80393f <specialInput>
                                        specialInput[1] = item;
    2734:	30 93 40 39 	sts	0x3940, r19	; 0x803940 <specialInput+0x1>
                                        specialInput[2] = 0;
    2738:	10 92 41 39 	sts	0x3941, r1	; 0x803941 <specialInput+0x2>
    273c:	90 c2       	rjmp	.+1312   	; 0x2c5e <ProcessInput+0xeac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    273e:	fc 01       	movw	r30, r24
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	e0 5b       	subi	r30, 0xB0	; 176
    2746:	f6 4c       	sbci	r31, 0xC6	; 198
    2748:	40 e4       	ldi	r20, 0x40	; 64
    274a:	56 e7       	ldi	r21, 0x76	; 118
    274c:	40 83       	st	Z, r20
    274e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2750:	fc 01       	movw	r30, r24
    2752:	ee 0f       	add	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	e0 57       	subi	r30, 0x70	; 112
    2758:	f6 4c       	sbci	r31, 0xC6	; 198
    275a:	42 e4       	ldi	r20, 0x42	; 66
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	40 83       	st	Z, r20
    2760:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	fc 01       	movw	r30, r24
    2768:	e0 53       	subi	r30, 0x30	; 48
    276a:	f6 4c       	sbci	r31, 0xC6	; 198
    276c:	e0 82       	st	Z, r14
    276e:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    2770:	72 2e       	mov	r7, r18
    2772:	75 c2       	rjmp	.+1258   	; 0x2c5e <ProcessInput+0xeac>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    2774:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3989+0x9>
    2778:	80 91 f1 38 	lds	r24, 0x38F1	; 0x8038f1 <actObj2.3990+0xb>
    277c:	98 13       	cpse	r25, r24
    277e:	24 c0       	rjmp	.+72     	; 0x27c8 <ProcessInput+0xa16>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2780:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <actObj1.3989+0xa>
    2784:	0e 94 ca 07 	call	0xf94	; 0xf94 <UpdateState>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2788:	20 91 37 39 	lds	r18, 0x3937	; 0x803937 <actObj1.3989+0x26>
    278c:	30 91 38 39 	lds	r19, 0x3938	; 0x803938 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2790:	87 2d       	mov	r24, r7
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	fc 01       	movw	r30, r24
    2796:	ee 0f       	add	r30, r30
    2798:	ff 1f       	adc	r31, r31
    279a:	e0 5b       	subi	r30, 0xB0	; 176
    279c:	f6 4c       	sbci	r31, 0xC6	; 198
    279e:	40 91 29 39 	lds	r20, 0x3929	; 0x803929 <actObj1.3989+0x18>
    27a2:	50 91 2a 39 	lds	r21, 0x392A	; 0x80392a <actObj1.3989+0x19>
    27a6:	40 83       	st	Z, r20
    27a8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    27aa:	fc 01       	movw	r30, r24
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	e0 57       	subi	r30, 0x70	; 112
    27b2:	f6 4c       	sbci	r31, 0xC6	; 198
    27b4:	20 83       	st	Z, r18
    27b6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	fc 01       	movw	r30, r24
    27be:	e0 53       	subi	r30, 0x30	; 48
    27c0:	f6 4c       	sbci	r31, 0xC6	; 198
    27c2:	10 82       	st	Z, r1
    27c4:	11 82       	std	Z+1, r1	; 0x01
    27c6:	37 c0       	rjmp	.+110    	; 0x2836 <ProcessInput+0xa84>
                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
    27c8:	d8 01       	movw	r26, r16
    27ca:	8c 91       	ld	r24, X
    27cc:	85 37       	cpi	r24, 0x75	; 117
    27ce:	99 f4       	brne	.+38     	; 0x27f6 <ProcessInput+0xa44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27d0:	87 2d       	mov	r24, r7
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	fc 01       	movw	r30, r24
    27d6:	ee 0f       	add	r30, r30
    27d8:	ff 1f       	adc	r31, r31
    27da:	e0 5b       	subi	r30, 0xB0	; 176
    27dc:	f6 4c       	sbci	r31, 0xC6	; 198
    27de:	24 e0       	ldi	r18, 0x04	; 4
    27e0:	39 e7       	ldi	r19, 0x79	; 121
    27e2:	20 83       	st	Z, r18
    27e4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    27e6:	fc 01       	movw	r30, r24
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	e0 57       	subi	r30, 0x70	; 112
    27ee:	f6 4c       	sbci	r31, 0xC6	; 198
    27f0:	2a e1       	ldi	r18, 0x1A	; 26
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	15 c0       	rjmp	.+42     	; 0x2820 <ProcessInput+0xa6e>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    27f6:	87 36       	cpi	r24, 0x67	; 103
    27f8:	09 f0       	breq	.+2      	; 0x27fc <ProcessInput+0xa4a>
    27fa:	31 c2       	rjmp	.+1122   	; 0x2c5e <ProcessInput+0xeac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27fc:	87 2d       	mov	r24, r7
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	fc 01       	movw	r30, r24
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	e0 5b       	subi	r30, 0xB0	; 176
    2808:	f6 4c       	sbci	r31, 0xC6	; 198
    280a:	2d ed       	ldi	r18, 0xDD	; 221
    280c:	36 e7       	ldi	r19, 0x76	; 118
    280e:	20 83       	st	Z, r18
    2810:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2812:	fc 01       	movw	r30, r24
    2814:	ee 0f       	add	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	e0 57       	subi	r30, 0x70	; 112
    281a:	f6 4c       	sbci	r31, 0xC6	; 198
    281c:	28 e2       	ldi	r18, 0x28	; 40
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	20 83       	st	Z, r18
    2822:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	fc 01       	movw	r30, r24
    282a:	e0 53       	subi	r30, 0x30	; 48
    282c:	f6 4c       	sbci	r31, 0xC6	; 198
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	80 83       	st	Z, r24
    2834:	91 83       	std	Z+1, r25	; 0x01
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2836:	73 94       	inc	r7
    2838:	12 c2       	rjmp	.+1060   	; 0x2c5e <ProcessInput+0xeac>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    283a:	61 e1       	ldi	r22, 0x11	; 17
    283c:	79 e3       	ldi	r23, 0x39	; 57
    283e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    2842:	f8 01       	movw	r30, r16
    2844:	80 81       	ld	r24, Z
    2846:	84 37       	cpi	r24, 0x74	; 116
    2848:	69 f5       	brne	.+90     	; 0x28a4 <ProcessInput+0xaf2>
    284a:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x8>
    284e:	83 fd       	sbrc	r24, 3
    2850:	44 c0       	rjmp	.+136    	; 0x28da <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2852:	8e e1       	ldi	r24, 0x1E	; 30
    2854:	99 e7       	ldi	r25, 0x79	; 121
    2856:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    285a:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    285e:	8e e1       	ldi	r24, 0x1E	; 30
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2866:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    2872:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2876:	80 91 2b 39 	lds	r24, 0x392B	; 0x80392b <actObj1.3989+0x1a>
    287a:	90 91 2c 39 	lds	r25, 0x392C	; 0x80392c <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    287e:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <actObj1.3989+0xc>
    2882:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <actObj1.3989+0xd>
    2886:	20 93 54 39 	sts	0x3954, r18	; 0x803954 <reactStr+0x4>
    288a:	30 93 55 39 	sts	0x3955, r19	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    288e:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x44>
    2892:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x45>
    reactStr[2][number]=type;
    2896:	10 92 d4 39 	sts	0x39D4, r1	; 0x8039d4 <reactStr+0x84>
    289a:	10 92 d5 39 	sts	0x39D5, r1	; 0x8039d5 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	76 2e       	mov	r7, r22
    28a2:	dd c1       	rjmp	.+954    	; 0x2c5e <ProcessInput+0xeac>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    28a4:	85 37       	cpi	r24, 0x75	; 117
    28a6:	39 f4       	brne	.+14     	; 0x28b6 <ProcessInput+0xb04>
    28a8:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x8>
    28ac:	84 fd       	sbrc	r24, 4
    28ae:	15 c0       	rjmp	.+42     	; 0x28da <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28b0:	84 e0       	ldi	r24, 0x04	; 4
    28b2:	99 e7       	ldi	r25, 0x79	; 121
    28b4:	11 c2       	rjmp	.+1058   	; 0x2cd8 <ProcessInput+0xf26>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    28b6:	82 37       	cpi	r24, 0x72	; 114
    28b8:	69 f4       	brne	.+26     	; 0x28d4 <ProcessInput+0xb22>
    28ba:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3989+0x8>
    28be:	85 fd       	sbrc	r24, 5
    28c0:	0c c0       	rjmp	.+24     	; 0x28da <ProcessInput+0xb28>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28c2:	89 ee       	ldi	r24, 0xE9	; 233
    28c4:	98 e7       	ldi	r25, 0x78	; 120
    28c6:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    28ca:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    28ce:	8b e1       	ldi	r24, 0x1B	; 27
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	1d cb       	rjmp	.-2502   	; 0x1f0e <ProcessInput+0x15c>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    28d4:	87 36       	cpi	r24, 0x67	; 103
    28d6:	09 f4       	brne	.+2      	; 0x28da <ProcessInput+0xb28>
    28d8:	9b ca       	rjmp	.-2762   	; 0x1e10 <ProcessInput+0x5e>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    28da:	e0 90 2f 39 	lds	r14, 0x392F	; 0x80392f <actObj1.3989+0x1e>
    28de:	f0 90 30 39 	lds	r15, 0x3930	; 0x803930 <actObj1.3989+0x1f>
    28e2:	f1 e0       	ldi	r31, 0x01	; 1
    28e4:	ef 16       	cp	r14, r31
    28e6:	f1 04       	cpc	r15, r1
    28e8:	11 f5       	brne	.+68     	; 0x292e <ProcessInput+0xb7c>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    28ea:	98 01       	movw	r18, r16
    28ec:	2e 5f       	subi	r18, 0xFE	; 254
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	80 91 21 39 	lds	r24, 0x3921	; 0x803921 <actObj1.3989+0x10>
    28f8:	90 91 22 39 	lds	r25, 0x3922	; 0x803922 <actObj1.3989+0x11>
    28fc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <ExtEERead>
                                if (data[2] == '1') {
    2900:	d8 01       	movw	r26, r16
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	8c 91       	ld	r24, X
    2906:	81 33       	cpi	r24, 0x31	; 49
    2908:	09 f0       	breq	.+2      	; 0x290c <ProcessInput+0xb5a>
    290a:	a7 cc       	rjmp	.-1714   	; 0x225a <ProcessInput+0x4a8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    290c:	83 e6       	ldi	r24, 0x63	; 99
    290e:	95 e7       	ldi	r25, 0x75	; 117
    2910:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2914:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2918:	8b e2       	ldi	r24, 0x2B	; 43
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2920:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2924:	e0 92 d2 39 	sts	0x39D2, r14	; 0x8039d2 <reactStr+0x82>
    2928:	f0 92 d3 39 	sts	0x39D3, r15	; 0x8039d3 <reactStr+0x83>
    292c:	fa ca       	rjmp	.-2572   	; 0x1f22 <ProcessInput+0x170>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    292e:	e1 14       	cp	r14, r1
    2930:	f1 04       	cpc	r15, r1
    2932:	09 f4       	brne	.+2      	; 0x2936 <ProcessInput+0xb84>
    2934:	59 c0       	rjmp	.+178    	; 0x29e8 <ProcessInput+0xc36>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2936:	80 91 21 39 	lds	r24, 0x3921	; 0x803921 <actObj1.3989+0x10>
    293a:	90 91 22 39 	lds	r25, 0x3922	; 0x803922 <actObj1.3989+0x11>
    293e:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2942:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2946:	e0 92 92 39 	sts	0x3992, r14	; 0x803992 <reactStr+0x42>
    294a:	f0 92 93 39 	sts	0x3993, r15	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    294e:	10 92 d2 39 	sts	0x39D2, r1	; 0x8039d2 <reactStr+0x82>
    2952:	10 92 d3 39 	sts	0x39D3, r1	; 0x8039d3 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2956:	8b e5       	ldi	r24, 0x5B	; 91
    2958:	9a e7       	ldi	r25, 0x7A	; 122
    295a:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x4>
    295e:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x44>
    296a:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x45>
    reactStr[2][number]=type;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	80 93 d4 39 	sts	0x39D4, r24	; 0x8039d4 <reactStr+0x84>
    2976:	90 93 d5 39 	sts	0x39D5, r25	; 0x8039d5 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    297a:	20 eb       	ldi	r18, 0xB0	; 176
    297c:	38 e7       	ldi	r19, 0x78	; 120
    297e:	20 93 56 39 	sts	0x3956, r18	; 0x803956 <reactStr+0x6>
    2982:	30 93 57 39 	sts	0x3957, r19	; 0x803957 <reactStr+0x7>
    reactStr[1][number]=length;
    2986:	22 e1       	ldi	r18, 0x12	; 18
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	20 93 96 39 	sts	0x3996, r18	; 0x803996 <reactStr+0x46>
    298e:	30 93 97 39 	sts	0x3997, r19	; 0x803997 <reactStr+0x47>
    reactStr[2][number]=type;
    2992:	80 93 d6 39 	sts	0x39D6, r24	; 0x8039d6 <reactStr+0x86>
    2996:	90 93 d7 39 	sts	0x39D7, r25	; 0x8039d7 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    299a:	80 91 31 39 	lds	r24, 0x3931	; 0x803931 <actObj1.3989+0x20>
    299e:	90 91 32 39 	lds	r25, 0x3932	; 0x803932 <actObj1.3989+0x21>
    29a2:	40 97       	sbiw	r24, 0x10	; 16
    29a4:	30 f0       	brcs	.+12     	; 0x29b2 <ProcessInput+0xc00>
    29a6:	8f e0       	ldi	r24, 0x0F	; 15
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	80 93 31 39 	sts	0x3931, r24	; 0x803931 <actObj1.3989+0x20>
    29ae:	90 93 32 39 	sts	0x3932, r25	; 0x803932 <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    29b2:	2f e3       	ldi	r18, 0x3F	; 63
    29b4:	39 e3       	ldi	r19, 0x39	; 57
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	60 91 31 39 	lds	r22, 0x3931	; 0x803931 <actObj1.3989+0x20>
    29bc:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3989+0x12>
    29c0:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3989+0x13>
    29c4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    29c8:	6f e3       	ldi	r22, 0x3F	; 63
    29ca:	79 e3       	ldi	r23, 0x39	; 57
    29cc:	80 91 31 39 	lds	r24, 0x3931	; 0x803931 <actObj1.3989+0x20>
    29d0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    29d4:	e0 91 31 39 	lds	r30, 0x3931	; 0x803931 <actObj1.3989+0x20>
    29d8:	f0 91 32 39 	lds	r31, 0x3932	; 0x803932 <actObj1.3989+0x21>
    29dc:	e1 5c       	subi	r30, 0xC1	; 193
    29de:	f6 4c       	sbci	r31, 0xC6	; 198
    29e0:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    29e2:	54 e0       	ldi	r21, 0x04	; 4
    29e4:	75 2e       	mov	r7, r21
    29e6:	3b c1       	rjmp	.+630    	; 0x2c5e <ProcessInput+0xeac>
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    29e8:	80 91 18 39 	lds	r24, 0x3918	; 0x803918 <actObj1.3989+0x7>
    29ec:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CheckState>
    29f0:	88 23       	and	r24, r24
    29f2:	c9 f0       	breq	.+50     	; 0x2a26 <ProcessInput+0xc74>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    29f4:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <actObj1.3989+0x26>
    29f8:	90 91 38 39 	lds	r25, 0x3938	; 0x803938 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29fc:	20 91 29 39 	lds	r18, 0x3929	; 0x803929 <actObj1.3989+0x18>
    2a00:	30 91 2a 39 	lds	r19, 0x392A	; 0x80392a <actObj1.3989+0x19>
    2a04:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    2a08:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2a0c:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2a10:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2a14:	10 92 d2 39 	sts	0x39D2, r1	; 0x8039d2 <reactStr+0x82>
    2a18:	10 92 d3 39 	sts	0x39D3, r1	; 0x8039d3 <reactStr+0x83>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2a1c:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <actObj1.3989+0xa>
    2a20:	0e 94 ca 07 	call	0xf94	; 0xf94 <UpdateState>
    2a24:	7e ca       	rjmp	.-2820   	; 0x1f22 <ProcessInput+0x170>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    2a26:	80 91 35 39 	lds	r24, 0x3935	; 0x803935 <actObj1.3989+0x24>
    2a2a:	90 91 36 39 	lds	r25, 0x3936	; 0x803936 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a2e:	20 91 27 39 	lds	r18, 0x3927	; 0x803927 <actObj1.3989+0x16>
    2a32:	30 91 28 39 	lds	r19, 0x3928	; 0x803928 <actObj1.3989+0x17>
    2a36:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    2a3a:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2a3e:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2a42:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2a46:	10 92 d2 39 	sts	0x39D2, r1	; 0x8039d2 <reactStr+0x82>
    2a4a:	10 92 d3 39 	sts	0x39D3, r1	; 0x8039d3 <reactStr+0x83>
    2a4e:	69 ca       	rjmp	.-2862   	; 0x1f22 <ProcessInput+0x170>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    2a50:	f8 01       	movw	r30, r16
    2a52:	80 81       	ld	r24, Z
    2a54:	84 37       	cpi	r24, 0x74	; 116
    2a56:	11 f0       	breq	.+4      	; 0x2a5c <ProcessInput+0xcaa>
    2a58:	87 36       	cpi	r24, 0x67	; 103
    2a5a:	19 f4       	brne	.+6      	; 0x2a62 <ProcessInput+0xcb0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a5c:	8c e3       	ldi	r24, 0x3C	; 60
    2a5e:	99 e7       	ldi	r25, 0x79	; 121
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <ProcessInput+0xcb4>
    2a62:	80 e5       	ldi	r24, 0x50	; 80
    2a64:	99 e7       	ldi	r25, 0x79	; 121
    2a66:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2a6a:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2a6e:	84 e1       	ldi	r24, 0x14	; 20
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	4d ca       	rjmp	.-2918   	; 0x1f0e <ProcessInput+0x15c>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    2a74:	81 36       	cpi	r24, 0x61	; 97
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <ProcessInput+0xcc8>
    2a78:	f0 cb       	rjmp	.-2080   	; 0x225a <ProcessInput+0x4a8>
            
            //Priest offerings
            if (specialPassed >= 2) {
    2a7a:	80 91 3e 39 	lds	r24, 0x393E	; 0x80393e <specialPassed>
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	08 f4       	brcc	.+2      	; 0x2a84 <ProcessInput+0xcd2>
    2a82:	ab c0       	rjmp	.+342    	; 0x2bda <ProcessInput+0xe28>
                if (data[1] > 0) {
    2a84:	d8 01       	movw	r26, r16
    2a86:	11 96       	adiw	r26, 0x01	; 1
    2a88:	2c 91       	ld	r18, X
    2a8a:	22 23       	and	r18, r18
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <ProcessInput+0xcde>
    2a8e:	9c c0       	rjmp	.+312    	; 0x2bc8 <ProcessInput+0xe16>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    2a90:	fe 01       	movw	r30, r28
    2a92:	31 96       	adiw	r30, 0x01	; 1
    2a94:	7f 01       	movw	r14, r30
    2a96:	8a e0       	ldi	r24, 0x0A	; 10
    2a98:	df 01       	movw	r26, r30
    2a9a:	1d 92       	st	X+, r1
    2a9c:	8a 95       	dec	r24
    2a9e:	e9 f7       	brne	.-6      	; 0x2a9a <ProcessInput+0xce8>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0';
    2aa0:	20 53       	subi	r18, 0x30	; 48
    2aa2:	f8 01       	movw	r30, r16
    2aa4:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    2aa6:	32 81       	ldd	r19, Z+2	; 0x02
    2aa8:	31 53       	subi	r19, 0x31	; 49
    2aaa:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    2aac:	83 81       	ldd	r24, Z+3	; 0x03
    2aae:	81 36       	cpi	r24, 0x61	; 97
    2ab0:	11 f4       	brne	.+4      	; 0x2ab6 <ProcessInput+0xd04>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	08 c0       	rjmp	.+16     	; 0x2ac6 <ProcessInput+0xd14>
                    else if (data[3] == 'e') data[3] = 0;
    2ab6:	85 36       	cpi	r24, 0x65	; 101
    2ab8:	11 f4       	brne	.+4      	; 0x2abe <ProcessInput+0xd0c>
    2aba:	13 82       	std	Z+3, r1	; 0x03
    2abc:	08 c0       	rjmp	.+16     	; 0x2ace <ProcessInput+0xd1c>
                    else if (data[3] == 'f') data[3] = 3;
    2abe:	86 36       	cpi	r24, 0x66	; 102
    2ac0:	21 f4       	brne	.+8      	; 0x2aca <ProcessInput+0xd18>
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	83 83       	std	Z+3, r24	; 0x03
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <ProcessInput+0xd1c>
                    else data[3] = 2;
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    2ace:	21 fd       	sbrc	r18, 1
    2ad0:	04 c0       	rjmp	.+8      	; 0x2ada <ProcessInput+0xd28>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	04 c0       	rjmp	.+8      	; 0x2ae2 <ProcessInput+0xd30>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a0 e1       	ldi	r26, 0x10	; 16
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    2ae2:	20 ff       	sbrs	r18, 0
    2ae4:	03 c0       	rjmp	.+6      	; 0x2aec <ProcessInput+0xd3a>
    2ae6:	9f 5f       	subi	r25, 0xFF	; 255
    2ae8:	af 4f       	sbci	r26, 0xFF	; 255
    2aea:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    2aec:	f8 01       	movw	r30, r16
    2aee:	23 81       	ldd	r18, Z+3	; 0x03
    2af0:	21 fd       	sbrc	r18, 1
    2af2:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    2af4:	20 ff       	sbrs	r18, 0
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <ProcessInput+0xd4c>
    2af8:	40 96       	adiw	r24, 0x10	; 16
    2afa:	a1 1d       	adc	r26, r1
    2afc:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    2afe:	31 ff       	sbrs	r19, 1
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <ProcessInput+0xd56>
    2b02:	90 5f       	subi	r25, 0xF0	; 240
    2b04:	af 4f       	sbci	r26, 0xFF	; 255
    2b06:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    2b08:	30 ff       	sbrs	r19, 0
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <ProcessInput+0xd60>
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	a1 1d       	adc	r26, r1
    2b10:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    2b12:	40 91 98 38 	lds	r20, 0x3898	; 0x803898 <whoami>
    2b16:	24 e0       	ldi	r18, 0x04	; 4
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	24 1b       	sub	r18, r20
    2b1c:	31 09       	sbc	r19, r1
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	04 c0       	rjmp	.+8      	; 0x2b2c <ProcessInput+0xd7a>
    2b24:	66 0f       	add	r22, r22
    2b26:	77 1f       	adc	r23, r23
    2b28:	88 1f       	adc	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	2a 95       	dec	r18
    2b2e:	d2 f7       	brpl	.-12     	; 0x2b24 <ProcessInput+0xd72>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b30:	26 e0       	ldi	r18, 0x06	; 6
    2b32:	35 e7       	ldi	r19, 0x75	; 117
    2b34:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    2b38:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2b3c:	20 e2       	ldi	r18, 0x20	; 32
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	20 93 92 39 	sts	0x3992, r18	; 0x803992 <reactStr+0x42>
    2b44:	30 93 93 39 	sts	0x3993, r19	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2b48:	21 e0       	ldi	r18, 0x01	; 1
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	20 93 d2 39 	sts	0x39D2, r18	; 0x8039d2 <reactStr+0x82>
    2b50:	30 93 d3 39 	sts	0x39D3, r19	; 0x8039d3 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    2b54:	39 e0       	ldi	r19, 0x09	; 9
                        digit[n] = answer % 10;
    2b56:	b3 2e       	mov	r11, r19
    2b58:	4a e0       	ldi	r20, 0x0A	; 10
    2b5a:	44 2e       	mov	r4, r20
    2b5c:	51 2c       	mov	r5, r1
    2b5e:	61 2c       	mov	r6, r1
    2b60:	71 2c       	mov	r7, r1
    2b62:	67 01       	movw	r12, r14
    2b64:	cb 0c       	add	r12, r11
    2b66:	d1 1c       	adc	r13, r1
    2b68:	a3 01       	movw	r20, r6
    2b6a:	92 01       	movw	r18, r4
    2b6c:	46 d2       	rcall	.+1164   	; 0x2ffa <__udivmodsi4>
    2b6e:	d6 01       	movw	r26, r12
    2b70:	6c 93       	st	X, r22
                        answer /= 10;
    2b72:	b9 01       	movw	r22, r18
    2b74:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    2b76:	61 15       	cp	r22, r1
    2b78:	71 05       	cpc	r23, r1
    2b7a:	81 05       	cpc	r24, r1
    2b7c:	91 05       	cpc	r25, r1
    2b7e:	39 f4       	brne	.+14     	; 0x2b8e <ProcessInput+0xddc>
    2b80:	e0 e5       	ldi	r30, 0x50	; 80
    2b82:	f9 e3       	ldi	r31, 0x39	; 57
    2b84:	22 e0       	ldi	r18, 0x02	; 2
    2b86:	72 2e       	mov	r7, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2b88:	21 e0       	ldi	r18, 0x01	; 1
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <ProcessInput+0xde0>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    2b8e:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    2b90:	e8 cf       	rjmp	.-48     	; 0x2b62 <ProcessInput+0xdb0>
    2b92:	32 96       	adiw	r30, 0x02	; 2
                    for (; n<10; ++n) {
    2b94:	b9 e0       	ldi	r27, 0x09	; 9
    2b96:	bb 15       	cp	r27, r11
    2b98:	08 f4       	brcc	.+2      	; 0x2b9c <ProcessInput+0xdea>
    2b9a:	5f c0       	rjmp	.+190    	; 0x2c5a <ProcessInput+0xea8>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    2b9c:	73 94       	inc	r7
    2b9e:	d7 01       	movw	r26, r14
    2ba0:	ab 0d       	add	r26, r11
    2ba2:	b1 1d       	adc	r27, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ba4:	8c 91       	ld	r24, X
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	8d 52       	subi	r24, 0x2D	; 45
    2baa:	9b 48       	sbci	r25, 0x8B	; 139
    2bac:	82 83       	std	Z+2, r24	; 0x02
    2bae:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2bb0:	df 01       	movw	r26, r30
    2bb2:	ae 5b       	subi	r26, 0xBE	; 190
    2bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb6:	2d 93       	st	X+, r18
    2bb8:	3c 93       	st	X, r19
    2bba:	11 97       	sbiw	r26, 0x01	; 1
    reactStr[2][number]=type;
    2bbc:	a0 5c       	subi	r26, 0xC0	; 192
    2bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc0:	2d 93       	st	X+, r18
    2bc2:	3c 93       	st	X, r19
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    2bc4:	b3 94       	inc	r11
    2bc6:	e5 cf       	rjmp	.-54     	; 0x2b92 <ProcessInput+0xde0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bc8:	86 e2       	ldi	r24, 0x26	; 38
    2bca:	95 e7       	ldi	r25, 0x75	; 117
    2bcc:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2bd0:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2bd4:	8d e3       	ldi	r24, 0x3D	; 61
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	34 c0       	rjmp	.+104    	; 0x2c42 <ProcessInput+0xe90>
    2bda:	e0 91 91 38 	lds	r30, 0x3891	; 0x803891 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	ee 0f       	add	r30, r30
    2be2:	ff 1f       	adc	r31, r31
    2be4:	ee 5e       	subi	r30, 0xEE	; 238
    2be6:	f5 4c       	sbci	r31, 0xC5	; 197
    2be8:	61 e1       	ldi	r22, 0x11	; 17
    2bea:	79 e3       	ldi	r23, 0x39	; 57
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	e9 f4       	brne	.+58     	; 0x2c2a <ProcessInput+0xe78>
                PopulateObject(route[currDepth+1], &actObj1);
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2bf8:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <actObj1.3989+0x26>
    2bfc:	90 91 38 39 	lds	r25, 0x3938	; 0x803938 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c00:	20 91 29 39 	lds	r18, 0x3929	; 0x803929 <actObj1.3989+0x18>
    2c04:	30 91 2a 39 	lds	r19, 0x392A	; 0x80392a <actObj1.3989+0x19>
    2c08:	20 93 52 39 	sts	0x3952, r18	; 0x803952 <reactStr+0x2>
    2c0c:	30 93 53 39 	sts	0x3953, r19	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2c10:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2c14:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2c18:	10 92 d2 39 	sts	0x39D2, r1	; 0x8039d2 <reactStr+0x82>
    2c1c:	10 92 d3 39 	sts	0x39D3, r1	; 0x8039d3 <reactStr+0x83>
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                UpdateState(actObj1.byteField[ACTION_STATE]);
    2c20:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <actObj1.3989+0xa>
    2c24:	0e 94 ca 07 	call	0xf94	; 0xf94 <UpdateState>
    2c28:	16 c0       	rjmp	.+44     	; 0x2c56 <ProcessInput+0xea4>
            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c32:	8e e9       	ldi	r24, 0x9E	; 158
    2c34:	98 e7       	ldi	r25, 0x78	; 120
    2c36:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2c3a:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2c3e:	82 e1       	ldi	r24, 0x12	; 18
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2c46:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    2c52:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                UpdateState(actObj1.byteField[ACTION_STATE]);
            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    2c5a:	10 92 3f 39 	sts	0x393F, r1	; 0x80393f <specialInput>
        } else {
               
        }
            
        //Input handled
        data[0] = 0;
    2c5e:	f8 01       	movw	r30, r16
    2c60:	10 82       	st	Z, r1
        serRxDone = 0;
    2c62:	10 92 9f 38 	sts	0x389F, r1	; 0x80389f <serRxDone>
        RXCNT = 0;
    2c66:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c68:	8b e5       	ldi	r24, 0x5B	; 91
    2c6a:	9a e7       	ldi	r25, 0x7A	; 122
    2c6c:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr>
    2c70:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x1>
    reactStr[1][number]=length;
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x40>
    2c7c:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x41>
    reactStr[2][number]=type;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x80>
    2c88:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x81>
        //Input handled
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    2c8c:	80 91 3f 39 	lds	r24, 0x393F	; 0x80393f <specialInput>
    2c90:	88 23       	and	r24, r24
    2c92:	19 f0       	breq	.+6      	; 0x2c9a <ProcessInput+0xee8>
    2c94:	70 92 4f 39 	sts	0x394F, r7	; 0x80394f <responseList>
    2c98:	a4 c0       	rjmp	.+328    	; 0x2de2 <ProcessInput+0x1030>
    2c9a:	87 2d       	mov	r24, r7
    2c9c:	16 c0       	rjmp	.+44     	; 0x2cca <ProcessInput+0xf18>

    } else {
        data[0] = 0;
    2c9e:	1c 92       	st	X, r1
        serRxDone = 0;
    2ca0:	10 92 9f 38 	sts	0x389F, r1	; 0x80389f <serRxDone>
        RXCNT = 0;
    2ca4:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ca6:	8b e5       	ldi	r24, 0x5B	; 91
    2ca8:	9a e7       	ldi	r25, 0x7A	; 122
    2caa:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr>
    2cae:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x1>
    reactStr[1][number]=length;
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x40>
    2cba:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x41>
    reactStr[2][number]=type;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x80>
    2cc6:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x81>
    } else {
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    2cca:	0e 94 82 09 	call	0x1304	; 0x1304 <SetStandardResponse>
    2cce:	80 93 4f 39 	sts	0x394F, r24	; 0x80394f <responseList>
    }
    
    return 0;
    2cd2:	87 c0       	rjmp	.+270    	; 0x2de2 <ProcessInput+0x1030>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cd4:	84 ed       	ldi	r24, 0xD4	; 212
    2cd6:	99 e7       	ldi	r25, 0x79	; 121
    2cd8:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2cdc:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2ce0:	8a e1       	ldi	r24, 0x1A	; 26
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	14 c9       	rjmp	.-3544   	; 0x1f0e <ProcessInput+0x15c>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2ce6:	b2 e0       	ldi	r27, 0x02	; 2
    2ce8:	fb 12       	cpse	r15, r27
    2cea:	92 c8       	rjmp	.-3804   	; 0x1e10 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    2cec:	d8 01       	movw	r26, r16
    2cee:	11 96       	adiw	r26, 0x01	; 1
    2cf0:	6c 91       	ld	r22, X
    2cf2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CheckLetter>
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <ProcessInput+0xf4a>
    2cfa:	5b c0       	rjmp	.+182    	; 0x2db2 <ProcessInput+0x1000>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	9c 01       	movw	r18, r24
    2d06:	27 56       	subi	r18, 0x67	; 103
    2d08:	37 4c       	sbci	r19, 0xC7	; 199
    2d0a:	79 01       	movw	r14, r18
    2d0c:	61 e1       	ldi	r22, 0x11	; 17
    2d0e:	79 e3       	ldi	r23, 0x39	; 57
    2d10:	d9 01       	movw	r26, r18
    2d12:	8d 91       	ld	r24, X+
    2d14:	9c 91       	ld	r25, X
    2d16:	0e 94 fe 09 	call	0x13fc	; 0x13fc <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d1a:	84 ed       	ldi	r24, 0xD4	; 212
    2d1c:	97 e7       	ldi	r25, 0x77	; 119
    2d1e:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2d22:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2d26:	80 e1       	ldi	r24, 0x10	; 16
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x42>
    2d2e:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x43>
    reactStr[2][number]=type;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	80 93 d2 39 	sts	0x39D2, r24	; 0x8039d2 <reactStr+0x82>
    2d3a:	90 93 d3 39 	sts	0x39D3, r25	; 0x8039d3 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2d3e:	20 91 2b 39 	lds	r18, 0x392B	; 0x80392b <actObj1.3989+0x1a>
    2d42:	30 91 2c 39 	lds	r19, 0x392C	; 0x80392c <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d46:	40 91 1d 39 	lds	r20, 0x391D	; 0x80391d <actObj1.3989+0xc>
    2d4a:	50 91 1e 39 	lds	r21, 0x391E	; 0x80391e <actObj1.3989+0xd>
    2d4e:	40 93 54 39 	sts	0x3954, r20	; 0x803954 <reactStr+0x4>
    2d52:	50 93 55 39 	sts	0x3955, r21	; 0x803955 <reactStr+0x5>
    reactStr[1][number]=length;
    2d56:	20 93 94 39 	sts	0x3994, r18	; 0x803994 <reactStr+0x44>
    2d5a:	30 93 95 39 	sts	0x3995, r19	; 0x803995 <reactStr+0x45>
    reactStr[2][number]=type;
    2d5e:	10 92 d4 39 	sts	0x39D4, r1	; 0x8039d4 <reactStr+0x84>
    2d62:	10 92 d5 39 	sts	0x39D5, r1	; 0x8039d5 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d66:	2b e5       	ldi	r18, 0x5B	; 91
    2d68:	3a e7       	ldi	r19, 0x7A	; 122
    2d6a:	20 93 56 39 	sts	0x3956, r18	; 0x803956 <reactStr+0x6>
    2d6e:	30 93 57 39 	sts	0x3957, r19	; 0x803957 <reactStr+0x7>
    reactStr[1][number]=length;
    2d72:	22 e0       	ldi	r18, 0x02	; 2
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	20 93 96 39 	sts	0x3996, r18	; 0x803996 <reactStr+0x46>
    2d7a:	30 93 97 39 	sts	0x3997, r19	; 0x803997 <reactStr+0x47>
    reactStr[2][number]=type;
    2d7e:	80 93 d6 39 	sts	0x39D6, r24	; 0x8039d6 <reactStr+0x86>
    2d82:	90 93 d7 39 	sts	0x39D7, r25	; 0x8039d7 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d86:	27 e9       	ldi	r18, 0x97	; 151
    2d88:	37 e7       	ldi	r19, 0x77	; 119
    2d8a:	20 93 58 39 	sts	0x3958, r18	; 0x803958 <reactStr+0x8>
    2d8e:	30 93 59 39 	sts	0x3959, r19	; 0x803959 <reactStr+0x9>
    reactStr[1][number]=length;
    2d92:	2d e3       	ldi	r18, 0x3D	; 61
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	20 93 98 39 	sts	0x3998, r18	; 0x803998 <reactStr+0x48>
    2d9a:	30 93 99 39 	sts	0x3999, r19	; 0x803999 <reactStr+0x49>
    reactStr[2][number]=type;
    2d9e:	80 93 d8 39 	sts	0x39D8, r24	; 0x8039d8 <reactStr+0x88>
    2da2:	90 93 d9 39 	sts	0x39D9, r25	; 0x8039d9 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    2da6:	f7 01       	movw	r30, r14
    2da8:	10 82       	st	Z, r1
    2daa:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    2dac:	f5 e0       	ldi	r31, 0x05	; 5
    2dae:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    2db0:	56 cf       	rjmp	.-340    	; 0x2c5e <ProcessInput+0xeac>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2db2:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <inventory+0x2>
    2db6:	90 91 9c 38 	lds	r25, 0x389C	; 0x80389c <inventory+0x3>
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	49 f0       	breq	.+18     	; 0x2dd0 <ProcessInput+0x101e>
                        if (CheckLetter(inventory[x], data[1])) {
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	61 81       	ldd	r22, Z+1	; 0x01
    2dc2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <CheckLetter>
    2dc6:	88 23       	and	r24, r24
    2dc8:	19 f0       	breq	.+6      	; 0x2dd0 <ProcessInput+0x101e>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	98 cf       	rjmp	.-208    	; 0x2d00 <ProcessInput+0xf4e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dd0:	84 e6       	ldi	r24, 0x64	; 100
    2dd2:	99 e7       	ldi	r25, 0x79	; 121
    2dd4:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x2>
    2dd8:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x3>
    reactStr[1][number]=length;
    2ddc:	81 e2       	ldi	r24, 0x21	; 33
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	96 c8       	rjmp	.-3796   	; 0x1f0e <ProcessInput+0x15c>
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }
    
    return 0;
}
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	2a 96       	adiw	r28, 0x0a	; 10
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	ff 90       	pop	r15
    2df4:	ef 90       	pop	r14
    2df6:	df 90       	pop	r13
    2df8:	cf 90       	pop	r12
    2dfa:	bf 90       	pop	r11
    2dfc:	af 90       	pop	r10
    2dfe:	9f 90       	pop	r9
    2e00:	8f 90       	pop	r8
    2e02:	7f 90       	pop	r7
    2e04:	6f 90       	pop	r6
    2e06:	5f 90       	pop	r5
    2e08:	4f 90       	pop	r4
    2e0a:	08 95       	ret

00002e0c <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    2e0c:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    2e0e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <CheckSend>
    2e12:	88 23       	and	r24, r24
    2e14:	11 f0       	breq	.+4      	; 0x2e1a <TextAdventure+0xe>
    2e16:	c1 e0       	ldi	r28, 0x01	; 1
    2e18:	13 c0       	rjmp	.+38     	; 0x2e40 <TextAdventure+0x34>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    2e1a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <CheckResponse>
    2e1e:	81 11       	cpse	r24, r1
    2e20:	fa cf       	rjmp	.-12     	; 0x2e16 <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    2e22:	85 ea       	ldi	r24, 0xA5	; 165
    2e24:	98 e3       	ldi	r25, 0x38	; 56
    2e26:	0e 94 ef 0b 	call	0x17de	; 0x17de <CheckInput>
    2e2a:	c8 2f       	mov	r28, r24
    2e2c:	81 11       	cpse	r24, r1
    2e2e:	07 c0       	rjmp	.+14     	; 0x2e3e <TextAdventure+0x32>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    2e30:	85 ea       	ldi	r24, 0xA5	; 165
    2e32:	98 e3       	ldi	r25, 0x38	; 56
    2e34:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <ProcessInput>
    SaveGameState();
    2e38:	0e 94 29 07 	call	0xe52	; 0xe52 <SaveGameState>

    return 0;
    2e3c:	01 c0       	rjmp	.+2      	; 0x2e40 <TextAdventure+0x34>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    2e3e:	c2 e0       	ldi	r28, 0x02	; 2
    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    SaveGameState();

    return 0;
    2e40:	8c 2f       	mov	r24, r28
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    2e46:	0e 94 de 02 	call	0x5bc	; 0x5bc <Setup>

    SerSpeed(255);
    2e4a:	8f ef       	ldi	r24, 0xFF	; 255
    2e4c:	0e 94 46 06 	call	0xc8c	; 0xc8c <SerSpeed>
    2e50:	a4 e6       	ldi	r26, 0x64	; 100
    2e52:	b0 eb       	ldi	r27, 0xB0	; 176
    2e54:	2a e6       	ldi	r18, 0x6A	; 106
    2e56:	30 eb       	ldi	r19, 0xB0	; 176
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	ed 91       	ld	r30, X+
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	ea 5e       	subi	r30, 0xEA	; 234
    2e60:	f4 4c       	sbci	r31, 0xC4	; 196
    2e62:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    2e64:	15 96       	adiw	r26, 0x05	; 5
    2e66:	ec 91       	ld	r30, X
    2e68:	15 97       	sbiw	r26, 0x05	; 5
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	ea 5e       	subi	r30, 0xEA	; 234
    2e6e:	f4 4c       	sbci	r31, 0xC4	; 196
    2e70:	80 83       	st	Z, r24

    SerSpeed(255);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    2e72:	2a 17       	cp	r18, r26
    2e74:	3b 07       	cpc	r19, r27
    2e76:	89 f7       	brne	.-30     	; 0x2e5a <main+0x14>
    2e78:	2b e5       	ldi	r18, 0x5B	; 91
    2e7a:	30 eb       	ldi	r19, 0xB0	; 176
    2e7c:	e6 e5       	ldi	r30, 0x56	; 86
    2e7e:	f0 eb       	ldi	r31, 0xB0	; 176
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    2e80:	91 e0       	ldi	r25, 0x01	; 1
    2e82:	ef 01       	movw	r28, r30
    2e84:	a5 81       	ldd	r26, Z+5	; 0x05
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	aa 5e       	subi	r26, 0xEA	; 234
    2e8a:	b4 4c       	sbci	r27, 0xC4	; 196
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	9c 93       	st	X, r25
    2e90:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    2e92:	a8 81       	ld	r26, Y
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	aa 5e       	subi	r26, 0xEA	; 234
    2e98:	b4 4c       	sbci	r27, 0xC4	; 196
    2e9a:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    2e9c:	2e 17       	cp	r18, r30
    2e9e:	3f 07       	cpc	r19, r31
    2ea0:	81 f7       	brne	.-32     	; 0x2e82 <main+0x3c>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    2ea2:	e0 91 62 b0 	lds	r30, 0xB062	; 0x80b062 <__bss_end+0x74fd>
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	ea 5e       	subi	r30, 0xEA	; 234
    2eaa:	f4 4c       	sbci	r31, 0xC4	; 196
    2eac:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    2eae:	e0 91 63 b0 	lds	r30, 0xB063	; 0x80b063 <__bss_end+0x74fe>
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	ea 5e       	subi	r30, 0xEA	; 234
    2eb6:	f4 4c       	sbci	r31, 0xC4	; 196
    2eb8:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    2eba:	e0 91 60 b0 	lds	r30, 0xB060	; 0x80b060 <__bss_end+0x74fb>
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	ea 5e       	subi	r30, 0xEA	; 234
    2ec2:	f4 4c       	sbci	r31, 0xC4	; 196
    2ec4:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    2ec6:	e0 91 61 b0 	lds	r30, 0xB061	; 0x80b061 <__bss_end+0x74fc>
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	ea 5e       	subi	r30, 0xEA	; 234
    2ece:	f4 4c       	sbci	r31, 0xC4	; 196
    2ed0:	80 83       	st	Z, r24
    iLED[GEM[R]] = 1;
    2ed2:	e0 91 54 b0 	lds	r30, 0xB054	; 0x80b054 <__bss_end+0x74ef>
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	ea 5e       	subi	r30, 0xEA	; 234
    2eda:	f4 4c       	sbci	r31, 0xC4	; 196
    2edc:	80 83       	st	Z, r24
    iLED[GEM[G]] = 1;
    2ede:	e0 91 55 b0 	lds	r30, 0xB055	; 0x80b055 <__bss_end+0x74f0>
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	ea 5e       	subi	r30, 0xEA	; 234
    2ee6:	f4 4c       	sbci	r31, 0xC4	; 196
    2ee8:	80 83       	st	Z, r24
    iLED[RAT] = 1;
    2eea:	e0 91 53 b0 	lds	r30, 0xB053	; 0x80b053 <__bss_end+0x74ee>
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	ea 5e       	subi	r30, 0xEA	; 234
    2ef2:	f4 4c       	sbci	r31, 0xC4	; 196
    2ef4:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    2ef6:	e0 91 52 b0 	lds	r30, 0xB052	; 0x80b052 <__bss_end+0x74ed>
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	ea 5e       	subi	r30, 0xEA	; 234
    2efe:	f4 4c       	sbci	r31, 0xC4	; 196
    2f00:	80 83       	st	Z, r24

    while (1)
    {
        GenerateAudio();
    2f02:	0e 94 19 08 	call	0x1032	; 0x1032 <GenerateAudio>
        //GenerateBlinks();

        if (buttonMark){
    2f06:	80 91 9d 38 	lds	r24, 0x389D	; 0x80389d <buttonMark>
    2f0a:	88 23       	and	r24, r24
    2f0c:	d1 f3       	breq	.-12     	; 0x2f02 <main+0xbc>
            buttonState = CheckButtons(buttonState);
    2f0e:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <buttonState>
    2f12:	0e 94 57 06 	call	0xcae	; 0xcae <CheckButtons>
    2f16:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <buttonState>
            buttonMark = 0;
    2f1a:	10 92 9d 38 	sts	0x389D, r1	; 0x80389d <buttonMark>
            
            TextAdventure();
    2f1e:	76 df       	rcall	.-276    	; 0x2e0c <TextAdventure>
          
            //Other games & user interaction checks
            MagnetMaze();
    2f20:	0e 94 9f 01 	call	0x33e	; 0x33e <MagnetMaze>
            BastetDictates();
    2f24:	0e 94 8f 08 	call	0x111e	; 0x111e <BastetDictates>
            //LanyardCode();
            //MakeFriends();
             
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    2f28:	80 91 f2 3a 	lds	r24, 0x3AF2	; 0x803af2 <adcPhot>
    2f2c:	90 91 f3 3a 	lds	r25, 0x3AF3	; 0x803af3 <adcPhot+0x1>
    2f30:	0a 97       	sbiw	r24, 0x0a	; 10
    2f32:	20 f4       	brcc	.+8      	; 0x2f3c <main+0xf6>
    2f34:	61 e0       	ldi	r22, 0x01	; 1
    2f36:	84 e7       	ldi	r24, 0x74	; 116
    2f38:	0e 94 b0 07 	call	0xf60	; 0xf60 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    2f3c:	80 91 f2 3a 	lds	r24, 0x3AF2	; 0x803af2 <adcPhot>
    2f40:	90 91 f3 3a 	lds	r25, 0x3AF3	; 0x803af3 <adcPhot+0x1>
    2f44:	85 36       	cpi	r24, 0x65	; 101
    2f46:	91 05       	cpc	r25, r1
    2f48:	20 f0       	brcs	.+8      	; 0x2f52 <main+0x10c>
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	84 e7       	ldi	r24, 0x74	; 116
    2f4e:	0e 94 b0 07 	call	0xf60	; 0xf60 <WriteStatusBit>

            for (int i=0; i<4; i++) {
                iLED[WING[L][i]] = ((buttonState>>i)&1) ? 128 : 0;
    2f52:	20 91 04 38 	lds	r18, 0x3804	; 0x803804 <buttonState>
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	a6 e5       	ldi	r26, 0x56	; 86
    2f5a:	b0 eb       	ldi	r27, 0xB0	; 176
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	ed 01       	movw	r28, r26
    2f62:	15 96       	adiw	r26, 0x05	; 5
    2f64:	ec 91       	ld	r30, X
    2f66:	15 97       	sbiw	r26, 0x05	; 5
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	a9 01       	movw	r20, r18
    2f6c:	08 2e       	mov	r0, r24
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <main+0x12e>
    2f70:	55 95       	asr	r21
    2f72:	47 95       	ror	r20
    2f74:	0a 94       	dec	r0
    2f76:	e2 f7       	brpl	.-8      	; 0x2f70 <main+0x12a>
    2f78:	40 fd       	sbrc	r20, 0
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <main+0x13a>
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	01 c0       	rjmp	.+2      	; 0x2f82 <main+0x13c>
    2f80:	40 e8       	ldi	r20, 0x80	; 128
    2f82:	ea 5e       	subi	r30, 0xEA	; 234
    2f84:	f4 4c       	sbci	r31, 0xC4	; 196
    2f86:	40 83       	st	Z, r20
    2f88:	11 96       	adiw	r26, 0x01	; 1
                iLED[WING[R][i]] = ((buttonState>>(i+4))&1) ? 128 : 0;
    2f8a:	e8 81       	ld	r30, Y
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	ac 01       	movw	r20, r24
    2f90:	4c 5f       	subi	r20, 0xFC	; 252
    2f92:	5f 4f       	sbci	r21, 0xFF	; 255
    2f94:	b9 01       	movw	r22, r18
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <main+0x156>
    2f98:	75 95       	asr	r23
    2f9a:	67 95       	ror	r22
    2f9c:	4a 95       	dec	r20
    2f9e:	e2 f7       	brpl	.-8      	; 0x2f98 <main+0x152>
    2fa0:	60 fd       	sbrc	r22, 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <main+0x162>
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <main+0x164>
    2fa8:	40 e8       	ldi	r20, 0x80	; 128
    2faa:	ea 5e       	subi	r30, 0xEA	; 234
    2fac:	f4 4c       	sbci	r31, 0xC4	; 196
    2fae:	40 83       	st	Z, r20
             
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
            if (adcPhot > 100) WriteStatusBit(116, 0);

            for (int i=0; i<4; i++) {
    2fb0:	01 96       	adiw	r24, 0x01	; 1
    2fb2:	84 30       	cpi	r24, 0x04	; 4
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	a1 f6       	brne	.-88     	; 0x2f60 <main+0x11a>
    2fb8:	a4 cf       	rjmp	.-184    	; 0x2f02 <main+0xbc>

00002fba <__udivmodqi4>:
    2fba:	99 1b       	sub	r25, r25
    2fbc:	79 e0       	ldi	r23, 0x09	; 9
    2fbe:	04 c0       	rjmp	.+8      	; 0x2fc8 <__udivmodqi4_ep>

00002fc0 <__udivmodqi4_loop>:
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	96 17       	cp	r25, r22
    2fc4:	08 f0       	brcs	.+2      	; 0x2fc8 <__udivmodqi4_ep>
    2fc6:	96 1b       	sub	r25, r22

00002fc8 <__udivmodqi4_ep>:
    2fc8:	88 1f       	adc	r24, r24
    2fca:	7a 95       	dec	r23
    2fcc:	c9 f7       	brne	.-14     	; 0x2fc0 <__udivmodqi4_loop>
    2fce:	80 95       	com	r24
    2fd0:	08 95       	ret

00002fd2 <__udivmodhi4>:
    2fd2:	aa 1b       	sub	r26, r26
    2fd4:	bb 1b       	sub	r27, r27
    2fd6:	51 e1       	ldi	r21, 0x11	; 17
    2fd8:	07 c0       	rjmp	.+14     	; 0x2fe8 <__udivmodhi4_ep>

00002fda <__udivmodhi4_loop>:
    2fda:	aa 1f       	adc	r26, r26
    2fdc:	bb 1f       	adc	r27, r27
    2fde:	a6 17       	cp	r26, r22
    2fe0:	b7 07       	cpc	r27, r23
    2fe2:	10 f0       	brcs	.+4      	; 0x2fe8 <__udivmodhi4_ep>
    2fe4:	a6 1b       	sub	r26, r22
    2fe6:	b7 0b       	sbc	r27, r23

00002fe8 <__udivmodhi4_ep>:
    2fe8:	88 1f       	adc	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	5a 95       	dec	r21
    2fee:	a9 f7       	brne	.-22     	; 0x2fda <__udivmodhi4_loop>
    2ff0:	80 95       	com	r24
    2ff2:	90 95       	com	r25
    2ff4:	bc 01       	movw	r22, r24
    2ff6:	cd 01       	movw	r24, r26
    2ff8:	08 95       	ret

00002ffa <__udivmodsi4>:
    2ffa:	a1 e2       	ldi	r26, 0x21	; 33
    2ffc:	1a 2e       	mov	r1, r26
    2ffe:	aa 1b       	sub	r26, r26
    3000:	bb 1b       	sub	r27, r27
    3002:	fd 01       	movw	r30, r26
    3004:	0d c0       	rjmp	.+26     	; 0x3020 <__udivmodsi4_ep>

00003006 <__udivmodsi4_loop>:
    3006:	aa 1f       	adc	r26, r26
    3008:	bb 1f       	adc	r27, r27
    300a:	ee 1f       	adc	r30, r30
    300c:	ff 1f       	adc	r31, r31
    300e:	a2 17       	cp	r26, r18
    3010:	b3 07       	cpc	r27, r19
    3012:	e4 07       	cpc	r30, r20
    3014:	f5 07       	cpc	r31, r21
    3016:	20 f0       	brcs	.+8      	; 0x3020 <__udivmodsi4_ep>
    3018:	a2 1b       	sub	r26, r18
    301a:	b3 0b       	sbc	r27, r19
    301c:	e4 0b       	sbc	r30, r20
    301e:	f5 0b       	sbc	r31, r21

00003020 <__udivmodsi4_ep>:
    3020:	66 1f       	adc	r22, r22
    3022:	77 1f       	adc	r23, r23
    3024:	88 1f       	adc	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	1a 94       	dec	r1
    302a:	69 f7       	brne	.-38     	; 0x3006 <__udivmodsi4_loop>
    302c:	60 95       	com	r22
    302e:	70 95       	com	r23
    3030:	80 95       	com	r24
    3032:	90 95       	com	r25
    3034:	9b 01       	movw	r18, r22
    3036:	ac 01       	movw	r20, r24
    3038:	bd 01       	movw	r22, r26
    303a:	cf 01       	movw	r24, r30
    303c:	08 95       	ret

0000303e <_exit>:
    303e:	f8 94       	cli

00003040 <__stop_program>:
    3040:	ff cf       	rjmp	.-2      	; 0x3040 <__stop_program>
