
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00803800  00003b40  00003bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a5e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e2  0000ba5e  00003a5e  00003b12  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e7  0080382a  0080382a  00003c1e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00003c1e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c50  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000320  00000000  00000000  00003c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000069fa  00000000  00000000  00003fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028a3  00000000  00000000  0000a9aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003902  00000000  00000000  0000d24d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000980  00000000  00000000  00010b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a07  00000000  00000000  000114d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004411  00000000  00000000  00012ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	f3 c7       	rjmp	.+4070   	; 0x1000 <__vector_6>
      1a:	00 00       	nop
      1c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_7>
      20:	22 c6       	rjmp	.+3140   	; 0xc66 <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c6       	rjmp	.+3282   	; 0xd08 <__vector_13>
      36:	00 00       	nop
      38:	9a c6       	rjmp	.+3380   	; 0xd6e <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c7       	rjmp	.+3760   	; 0xf02 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c7       	rjmp	.+3862   	; 0xf70 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d3 c6       	rjmp	.+3494   	; 0xe14 <__vector_27>
      6e:	00 00       	nop
      70:	2c c7       	rjmp	.+3672   	; 0xeca <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e0 e4       	ldi	r30, 0x40	; 64
      90:	fb e3       	ldi	r31, 0x3B	; 59
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 32       	cpi	r26, 0x2A	; 42
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	aa e2       	ldi	r26, 0x2A	; 42
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 31       	cpi	r26, 0x11	; 17
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 42 1c 	call	0x3884	; 0x3884 <main>
      b2:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      b8:	85 e1       	ldi	r24, 0x15	; 21
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	44 e0       	ldi	r20, 0x04	; 4
      be:	48 0f       	add	r20, r24
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<250; x+=25) {
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
      c0:	20 91 b9 3a 	lds	r18, 0x3AB9	; 0x803ab9 <auIn>
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	28 17       	cp	r18, r24
      c8:	39 07       	cpc	r19, r25
      ca:	64 f0       	brlt	.+24     	; 0xe4 <chkVolt250+0x2c>
      cc:	20 91 b9 3a 	lds	r18, 0x3AB9	; 0x803ab9 <auIn>
      d0:	30 e0       	ldi	r19, 0x00	; 0
      d2:	bc 01       	movw	r22, r24
      d4:	68 5f       	subi	r22, 0xF8	; 248
      d6:	7f 4f       	sbci	r23, 0xFF	; 255
      d8:	62 17       	cp	r22, r18
      da:	73 07       	cpc	r23, r19
      dc:	1c f0       	brlt	.+6      	; 0xe4 <chkVolt250+0x2c>
            avgVolt = x;
      de:	40 93 2e 38 	sts	0x382E, r20	; 0x80382e <avgVolt.3768>
            break;
      e2:	04 c0       	rjmp	.+8      	; 0xec <chkVolt250+0x34>
      e4:	49 96       	adiw	r24, 0x19	; 25

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    static uint8_t avgVolt = 0;
        
    for (uint8_t x=25; x<250; x+=25) {
      e6:	86 3f       	cpi	r24, 0xF6	; 246
      e8:	91 05       	cpc	r25, r1
      ea:	41 f7       	brne	.-48     	; 0xbc <chkVolt250+0x4>
        if ((auIn[0] > (x-DELTA)) && (auIn[0] < (x+DELTA))) {
            avgVolt = x;
            break;
        }
    }
    return avgVolt/25;
      ec:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <avgVolt.3768>
      f0:	69 e1       	ldi	r22, 0x19	; 25
      f2:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__udivmodqi4>
}
      f6:	08 95       	ret

000000f8 <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    //Checking for headphones
    if (detHdPh) return 0;
     108:	80 91 b6 3a 	lds	r24, 0x3AB6	; 0x803ab6 <detHdPh>
     10c:	81 11       	cpse	r24, r1
     10e:	db c0       	rjmp	.+438    	; 0x2c6 <MakeFriends+0x1ce>

    //Audio off, set voltage level (setDAC[0]*10mV)
    if (progress == NO_OTHER) {
     110:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <progress.3775>
     114:	81 11       	cpse	r24, r1
     116:	11 c0       	rjmp	.+34     	; 0x13a <MakeFriends+0x42>
        setDAC[0] = whoami * 50;
     118:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <whoami>
     11c:	22 e3       	ldi	r18, 0x32	; 50
     11e:	92 9f       	mul	r25, r18
     120:	90 2d       	mov	r25, r0
     122:	11 24       	eor	r1, r1
     124:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	38 e3       	ldi	r19, 0x38	; 56
     12c:	20 93 05 38 	sts	0x3805, r18	; 0x803805 <auRepAddr>
     130:	30 93 06 38 	sts	0x3806, r19	; 0x803806 <auRepAddr+0x1>
        auVolume = 255;
     134:	9f ef       	ldi	r25, 0xFF	; 255
     136:	90 93 ad 3a 	sts	0x3AAD, r25	; 0x803aad <auVolume>
    }

    //Check for other badges
    if ((auIn[0] < (setDAC[0] - DELTA)) || (auIn[0] > (setDAC[0] + DELTA)) ||((progress > FIRST_CONTACT))) {
     13a:	40 91 b9 3a 	lds	r20, 0x3AB9	; 0x803ab9 <auIn>
     13e:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	b9 01       	movw	r22, r18
     148:	65 50       	subi	r22, 0x05	; 5
     14a:	71 09       	sbc	r23, r1
     14c:	46 17       	cp	r20, r22
     14e:	57 07       	cpc	r21, r23
     150:	64 f0       	brlt	.+24     	; 0x16a <MakeFriends+0x72>
     152:	40 91 b9 3a 	lds	r20, 0x3AB9	; 0x803ab9 <auIn>
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	2b 5f       	subi	r18, 0xFB	; 251
     15a:	3f 4f       	sbci	r19, 0xFF	; 255
     15c:	24 17       	cp	r18, r20
     15e:	35 07       	cpc	r19, r21
     160:	24 f0       	brlt	.+8      	; 0x16a <MakeFriends+0x72>
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	08 f0       	brcs	.+2      	; 0x168 <MakeFriends+0x70>
     166:	40 c0       	rjmp	.+128    	; 0x1e8 <MakeFriends+0xf0>
     168:	ac c0       	rjmp	.+344    	; 0x2c2 <MakeFriends+0x1ca>
        if (progress == NO_OTHER) {
     16a:	81 11       	cpse	r24, r1
     16c:	0a c0       	rjmp	.+20     	; 0x182 <MakeFriends+0x8a>
            ++chkTmr;
     16e:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     172:	8f 5f       	subi	r24, 0xFF	; 255
     174:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
            if (chkTmr >= 8) {
     178:	88 30       	cpi	r24, 0x08	; 8
     17a:	08 f4       	brcc	.+2      	; 0x17e <MakeFriends+0x86>
     17c:	a4 c0       	rjmp	.+328    	; 0x2c6 <MakeFriends+0x1ce>
                progress = FIRST_CONTACT;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	83 c0       	rjmp	.+262    	; 0x288 <MakeFriends+0x190>
                chkTmr = 0;
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	89 f5       	brne	.+98     	; 0x1e8 <MakeFriends+0xf0>
            jackIn = chkVolt250();
     186:	98 df       	rcall	.-208    	; 0xb8 <chkVolt250>
     188:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <jackIn.3778>
            if (jackIn) {
     18c:	88 23       	and	r24, r24
     18e:	49 f1       	breq	.+82     	; 0x1e2 <MakeFriends+0xea>
                ++chkTmr;
     190:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <chkTmr.3777>
     194:	9f 5f       	subi	r25, 0xFF	; 255
     196:	90 93 2c 38 	sts	0x382C, r25	; 0x80382c <chkTmr.3777>
                if (chkTmr >= 8){
     19a:	98 30       	cpi	r25, 0x08	; 8
     19c:	08 f4       	brcc	.+2      	; 0x1a0 <MakeFriends+0xa8>
     19e:	93 c0       	rjmp	.+294    	; 0x2c6 <MakeFriends+0x1ce>
                    if ((whoami == 1)&&((jackIn == 3)||(jackIn == 4)||(jackIn == 5))) {
     1a0:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <whoami>
     1a4:	91 30       	cpi	r25, 0x01	; 1
     1a6:	29 f4       	brne	.+10     	; 0x1b2 <MakeFriends+0xba>
     1a8:	83 50       	subi	r24, 0x03	; 3
     1aa:	83 30       	cpi	r24, 0x03	; 3
     1ac:	b8 f4       	brcc	.+46     	; 0x1dc <MakeFriends+0xe4>
                        progress = SECOND_LOVE; 
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	6b c0       	rjmp	.+214    	; 0x288 <MakeFriends+0x190>
                    } else if ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6))) {
     1b2:	92 30       	cpi	r25, 0x02	; 2
     1b4:	31 f4       	brne	.+12     	; 0x1c2 <MakeFriends+0xca>
     1b6:	83 30       	cpi	r24, 0x03	; 3
     1b8:	d1 f3       	breq	.-12     	; 0x1ae <MakeFriends+0xb6>
     1ba:	85 50       	subi	r24, 0x05	; 5
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	70 f4       	brcc	.+28     	; 0x1dc <MakeFriends+0xe4>
     1c0:	f6 cf       	rjmp	.-20     	; 0x1ae <MakeFriends+0xb6>
                        progress = SECOND_LOVE;
                    } else  if ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) {
     1c2:	93 30       	cpi	r25, 0x03	; 3
     1c4:	39 f4       	brne	.+14     	; 0x1d4 <MakeFriends+0xdc>
     1c6:	9c ef       	ldi	r25, 0xFC	; 252
     1c8:	98 0f       	add	r25, r24
     1ca:	92 30       	cpi	r25, 0x02	; 2
     1cc:	80 f3       	brcs	.-32     	; 0x1ae <MakeFriends+0xb6>
     1ce:	87 30       	cpi	r24, 0x07	; 7
     1d0:	29 f4       	brne	.+10     	; 0x1dc <MakeFriends+0xe4>
     1d2:	ed cf       	rjmp	.-38     	; 0x1ae <MakeFriends+0xb6>
                        progress = SECOND_LOVE;
                    } else if ((whoami == 4)&&((jackIn == 5)||(jackIn == 6)||(jackIn == 7))) {
     1d4:	94 30       	cpi	r25, 0x04	; 4
     1d6:	11 f4       	brne	.+4      	; 0x1dc <MakeFriends+0xe4>
     1d8:	85 50       	subi	r24, 0x05	; 5
     1da:	e7 cf       	rjmp	.-50     	; 0x1aa <MakeFriends+0xb2>
                        progress = SECOND_LOVE;
                    } else progress = NO_OTHER;
     1dc:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <progress.3775>
     1e0:	55 c0       	rjmp	.+170    	; 0x28c <MakeFriends+0x194>
                    chkTmr = 0;
                }
            } else {
                chkTmr = 0;
     1e2:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <chkTmr.3777>
     1e6:	6d c0       	rjmp	.+218    	; 0x2c2 <MakeFriends+0x1ca>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	09 f0       	breq	.+2      	; 0x1ee <MakeFriends+0xf6>
     1ec:	52 c0       	rjmp	.+164    	; 0x292 <MakeFriends+0x19a>
            ++chkTmr;
     1ee:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     1f2:	8f 5f       	subi	r24, 0xFF	; 255
     1f4:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
     1f8:	ca e8       	ldi	r28, 0x8A	; 138
     1fa:	da eb       	ldi	r29, 0xBA	; 186
     1fc:	8f e8       	ldi	r24, 0x8F	; 143
     1fe:	e8 2e       	mov	r14, r24
     200:	8a eb       	ldi	r24, 0xBA	; 186
     202:	f8 2e       	mov	r15, r24
     204:	6e 01       	movw	r12, r28
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
     206:	0d 81       	ldd	r16, Y+5	; 0x05
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	0e 94 2f 09 	call	0x125e	; 0x125e <lfsr>
     20e:	87 ff       	sbrs	r24, 7
     210:	03 c0       	rjmp	.+6      	; 0x218 <MakeFriends+0x120>
     212:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     216:	01 c0       	rjmp	.+2      	; 0x21a <MakeFriends+0x122>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	f8 01       	movw	r30, r16
     21c:	ef 53       	subi	r30, 0x3F	; 63
     21e:	f5 4c       	sbci	r31, 0xC5	; 197
     220:	80 83       	st	Z, r24
     222:	21 96       	adiw	r28, 0x01	; 1
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
     224:	f6 01       	movw	r30, r12
     226:	00 81       	ld	r16, Z
     228:	10 e0       	ldi	r17, 0x00	; 0
     22a:	0e 94 2f 09 	call	0x125e	; 0x125e <lfsr>
     22e:	87 ff       	sbrs	r24, 7
     230:	03 c0       	rjmp	.+6      	; 0x238 <MakeFriends+0x140>
     232:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     236:	01 c0       	rjmp	.+2      	; 0x23a <MakeFriends+0x142>
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	f8 01       	movw	r30, r16
     23c:	ef 53       	subi	r30, 0x3F	; 63
     23e:	f5 4c       	sbci	r31, 0xC5	; 197
     240:	80 83       	st	Z, r24
        }

        //Wait for the other badge (and a bit longer)
        else if (progress == SECOND_LOVE){
            ++chkTmr;
            for (uint8_t x=0; x<5; ++x){
     242:	ec 16       	cp	r14, r28
     244:	fd 06       	cpc	r15, r29
     246:	f1 f6       	brne	.-68     	; 0x204 <MakeFriends+0x10c>
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
            }
            if (chkTmr >= 8) {
     248:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     24c:	88 30       	cpi	r24, 0x08	; 8
     24e:	40 f0       	brcs	.+16     	; 0x260 <MakeFriends+0x168>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     250:	2f ef       	ldi	r18, 0xFF	; 255
     252:	44 e6       	ldi	r20, 0x64	; 100
     254:	68 e0       	ldi	r22, 0x08	; 8
     256:	80 e8       	ldi	r24, 0x80	; 128
     258:	0e 94 80 09 	call	0x1300	; 0x1300 <floatAround>
     25c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }
            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= 250){
     260:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     264:	8a 3f       	cpi	r24, 0xFA	; 250
     266:	78 f1       	brcs	.+94     	; 0x2c6 <MakeFriends+0x1ce>
                candidate = jackIn-whoami;
     268:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <whoami>
     26c:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <jackIn.3778>
     270:	89 1b       	sub	r24, r25
     272:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <__data_end>
                if (candidate > whoami) setDAC[0] = 250; else setDAC[0] = 0;
     276:	98 17       	cp	r25, r24
     278:	20 f4       	brcc	.+8      	; 0x282 <MakeFriends+0x18a>
     27a:	8a ef       	ldi	r24, 0xFA	; 250
     27c:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     280:	02 c0       	rjmp	.+4      	; 0x286 <MakeFriends+0x18e>
     282:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                progress = THIRD_KISS;
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <progress.3775>
                chkTmr = 0;
     28c:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <chkTmr.3777>
     290:	1a c0       	rjmp	.+52     	; 0x2c6 <MakeFriends+0x1ce>
            }
        } 
        
        //Wait a bit, check Voltage again 
        else if (progress == THIRD_KISS) {
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	c1 f4       	brne	.+48     	; 0x2c6 <MakeFriends+0x1ce>
            chkTmr++;
     296:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <chkTmr.3777>
     29a:	8f 5f       	subi	r24, 0xFF	; 255
     29c:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <chkTmr.3777>
            if (chkTmr >= 8) {
     2a0:	88 30       	cpi	r24, 0x08	; 8
                if (chkVolt250() == 5) {
     2a2:	88 f0       	brcs	.+34     	; 0x2c6 <MakeFriends+0x1ce>
     2a4:	09 df       	rcall	.-494    	; 0xb8 <chkVolt250>
     2a6:	85 30       	cpi	r24, 0x05	; 5
     2a8:	09 f0       	breq	.+2      	; 0x2ac <MakeFriends+0x1b4>
     2aa:	98 cf       	rjmp	.-208    	; 0x1dc <MakeFriends+0xe4>
                    UpdateState(99+candidate);
     2ac:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <__data_end>
     2b0:	8d 59       	subi	r24, 0x9D	; 157
     2b2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UpdateState>
                    UpdateState(99+whoami);
     2b6:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <whoami>
     2ba:	8d 59       	subi	r24, 0x9D	; 157
     2bc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UpdateState>
     2c0:	e5 cf       	rjmp	.-54     	; 0x28c <MakeFriends+0x194>
                }
                chkTmr = 0;
            }
        }

    } else progress = NO_OTHER;
     2c2:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <progress.3775>
      
    return 0;
}
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	08 95       	ret

000002da <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     2e0:	e6 e2       	ldi	r30, 0x26	; 38
     2e2:	f4 e0       	ldi	r31, 0x04	; 4
     2e4:	80 83       	st	Z, r24
     2e6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     2ea:	a1 e2       	ldi	r26, 0x21	; 33
     2ec:	b4 e0       	ldi	r27, 0x04	; 4
     2ee:	92 e0       	ldi	r25, 0x02	; 2
     2f0:	9c 93       	st	X, r25
     2f2:	90 83       	st	Z, r25
     2f4:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     2f8:	e0 e1       	ldi	r30, 0x10	; 16
     2fa:	f8 e0       	ldi	r31, 0x08	; 8
     2fc:	97 e0       	ldi	r25, 0x07	; 7
     2fe:	96 83       	std	Z+6, r25	; 0x06
     300:	98 e0       	ldi	r25, 0x08	; 8
     302:	94 83       	std	Z+4, r25	; 0x04
     304:	83 83       	std	Z+3, r24	; 0x03
     306:	8c 93       	st	X, r24
     308:	85 81       	ldd	r24, Z+5	; 0x05
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	85 83       	std	Z+5, r24	; 0x05
     30e:	85 81       	ldd	r24, Z+5	; 0x05
     310:	84 6c       	ori	r24, 0xC4	; 196
     312:	85 83       	std	Z+5, r24	; 0x05
     314:	08 95       	ret

00000316 <I2C_recover>:
     316:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     31a:	88 60       	ori	r24, 0x08	; 8
     31c:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     320:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     32a:	99 e0       	ldi	r25, 0x09	; 9
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     334:	30 e1       	ldi	r19, 0x10	; 16
     336:	3a 95       	dec	r19
     338:	f1 f7       	brne	.-4      	; 0x336 <I2C_recover+0x20>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <I2C_recover+0x26>
     33c:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     340:	30 e1       	ldi	r19, 0x10	; 16
     342:	3a 95       	dec	r19
     344:	f1 f7       	brne	.-4      	; 0x342 <I2C_recover+0x2c>
     346:	00 c0       	rjmp	.+0      	; 0x348 <I2C_recover+0x32>
     348:	91 50       	subi	r25, 0x01	; 1
     34a:	89 f7       	brne	.-30     	; 0x32e <I2C_recover+0x18>
     34c:	28 e0       	ldi	r18, 0x08	; 8
     34e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     352:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     35c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     360:	91 60       	ori	r25, 0x01	; 1
     362:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     366:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     36a:	94 6c       	ori	r25, 0xC4	; 196
     36c:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     370:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     374:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     378:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     37c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     380:	81 60       	ori	r24, 0x01	; 1
     382:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     386:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     38a:	84 6c       	ori	r24, 0xC4	; 196
     38c:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     390:	08 95       	ret

00000392 <I2C_start>:
     392:	28 2f       	mov	r18, r24
     394:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     398:	90 6c       	ori	r25, 0xC0	; 192
     39a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a2:	89 2f       	mov	r24, r25
     3a4:	84 70       	andi	r24, 0x04	; 4
     3a6:	92 fd       	sbrc	r25, 2
     3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <I2C_start+0x1e>
     3aa:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3ae:	08 95       	ret
     3b0:	84 e0       	ldi	r24, 0x04	; 4
     3b2:	08 95       	ret

000003b4 <I2C_wait_ACK>:
     3b4:	8c e0       	ldi	r24, 0x0C	; 12
     3b6:	80 93 57 3a 	sts	0x3A57, r24	; 0x803a57 <timeout_I2C>
     3ba:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3be:	87 fd       	sbrc	r24, 7
     3c0:	0a c0       	rjmp	.+20     	; 0x3d6 <I2C_wait_ACK+0x22>
     3c2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c6:	86 fd       	sbrc	r24, 6
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <I2C_wait_ACK+0x22>
     3ca:	80 91 57 3a 	lds	r24, 0x3A57	; 0x803a57 <timeout_I2C>
     3ce:	81 11       	cpse	r24, r1
     3d0:	f4 cf       	rjmp	.-24     	; 0x3ba <I2C_wait_ACK+0x6>
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
     3d4:	08 95       	ret
     3d6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3da:	80 6c       	ori	r24, 0xC0	; 192
     3dc:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3e4:	82 fd       	sbrc	r24, 2
     3e6:	09 c0       	rjmp	.+18     	; 0x3fa <I2C_wait_ACK+0x46>
     3e8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ec:	83 fd       	sbrc	r24, 3
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <I2C_wait_ACK+0x4a>
     3f0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f4:	82 95       	swap	r24
     3f6:	81 70       	andi	r24, 0x01	; 1
     3f8:	08 95       	ret
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	08 95       	ret
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	08 95       	ret

00000402 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     402:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     404:	8c e0       	ldi	r24, 0x0C	; 12
     406:	80 93 57 3a 	sts	0x3A57, r24	; 0x803a57 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     40a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40e:	89 2f       	mov	r24, r25
     410:	83 70       	andi	r24, 0x03	; 3
     412:	82 30       	cpi	r24, 0x02	; 2
     414:	11 f0       	breq	.+4      	; 0x41a <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     41a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     41e:	97 fd       	sbrc	r25, 7
     420:	06 c0       	rjmp	.+12     	; 0x42e <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     422:	90 91 57 3a 	lds	r25, 0x3A57	; 0x803a57 <timeout_I2C>
     426:	91 11       	cpse	r25, r1
     428:	f8 cf       	rjmp	.-16     	; 0x41a <I2C_read+0x18>
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     42e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     432:	90 6c       	ori	r25, 0xC0	; 192
     434:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     438:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     43c:	92 fd       	sbrc	r25, 2
     43e:	1e c0       	rjmp	.+60     	; 0x47c <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     440:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     444:	93 fd       	sbrc	r25, 3
     446:	1d c0       	rjmp	.+58     	; 0x482 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     448:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     44c:	89 2f       	mov	r24, r25
     44e:	80 71       	andi	r24, 0x10	; 16
     450:	94 fd       	sbrc	r25, 4
     452:	16 c0       	rjmp	.+44     	; 0x480 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     454:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     458:	61 11       	cpse	r22, r1
     45a:	02 c0       	rjmp	.+4      	; 0x460 <I2C_read+0x5e>
     45c:	9b 7f       	andi	r25, 0xFB	; 251
     45e:	01 c0       	rjmp	.+2      	; 0x462 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     460:	94 60       	ori	r25, 0x04	; 4
     462:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     466:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     46a:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     46c:	61 11       	cpse	r22, r1
     46e:	09 c0       	rjmp	.+18     	; 0x482 <I2C_read+0x80>
     470:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     474:	92 60       	ori	r25, 0x02	; 2
     476:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     47a:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     480:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     482:	08 95       	ret

00000484 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     484:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     486:	8c e0       	ldi	r24, 0x0C	; 12
     488:	80 93 57 3a 	sts	0x3A57, r24	; 0x803a57 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     48c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     490:	93 70       	andi	r25, 0x03	; 3
     492:	92 30       	cpi	r25, 0x02	; 2
     494:	b1 f4       	brne	.+44     	; 0x4c2 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     496:	80 81       	ld	r24, Z
     498:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     49c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4a0:	86 fd       	sbrc	r24, 6
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4a4:	80 91 57 3a 	lds	r24, 0x3A57	; 0x803a57 <timeout_I2C>
     4a8:	81 11       	cpse	r24, r1
     4aa:	f8 cf       	rjmp	.-16     	; 0x49c <I2C_write+0x18>
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4b0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4b4:	82 fd       	sbrc	r24, 2
     4b6:	07 c0       	rjmp	.+14     	; 0x4c6 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4b8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4bc:	82 95       	swap	r24
     4be:	81 70       	andi	r24, 0x01	; 1
     4c0:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     4c2:	88 e0       	ldi	r24, 0x08	; 8
     4c4:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4c6:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     4c8:	08 95       	ret

000004ca <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     4ca:	e0 e1       	ldi	r30, 0x10	; 16
     4cc:	f8 e0       	ldi	r31, 0x08	; 8
     4ce:	84 81       	ldd	r24, Z+4	; 0x04
     4d0:	83 60       	ori	r24, 0x03	; 3
     4d2:	84 83       	std	Z+4, r24	; 0x04
     4d4:	08 95       	ret

000004d6 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	6b 01       	movw	r12, r22
     4e6:	f4 2e       	mov	r15, r20
     4e8:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     4ea:	18 2f       	mov	r17, r24
     4ec:	11 0f       	add	r17, r17
     4ee:	81 2f       	mov	r24, r17
     4f0:	50 df       	rcall	.-352    	; 0x392 <I2C_start>
	if (status != 0) goto error;
     4f2:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     4f4:	2b c0       	rjmp	.+86     	; 0x54c <I2C_read_bytes+0x76>
     4f6:	5e df       	rcall	.-324    	; 0x3b4 <I2C_wait_ACK>
	if (status == 1) {
     4f8:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     4fa:	19 f4       	brne	.+6      	; 0x502 <I2C_read_bytes+0x2c>
     4fc:	e6 df       	rcall	.-52     	; 0x4ca <I2C_stop>
		return 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	27 c0       	rjmp	.+78     	; 0x550 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     502:	81 11       	cpse	r24, r1
     504:	23 c0       	rjmp	.+70     	; 0x54c <I2C_read_bytes+0x76>
    while(reg_len > 0){
     506:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     508:	49 f0       	breq	.+18     	; 0x51c <I2C_read_bytes+0x46>
     50a:	c6 01       	movw	r24, r12
     50c:	bb df       	rcall	.-138    	; 0x484 <I2C_write>
	    if (status != 0) goto error;
     50e:	81 11       	cpse	r24, r1
     510:	1d c0       	rjmp	.+58     	; 0x54c <I2C_read_bytes+0x76>
        ++reg_ptr;
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	c8 1a       	sub	r12, r24
     516:	d8 0a       	sbc	r13, r24
        --reg_len;
     518:	fa 94       	dec	r15
     51a:	f5 cf       	rjmp	.-22     	; 0x506 <I2C_read_bytes+0x30>
     51c:	01 34       	cpi	r16, 0x41	; 65
     51e:	08 f0       	brcs	.+2      	; 0x522 <I2C_read_bytes+0x4c>
     520:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     522:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     524:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     528:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     52a:	40 f0       	brcs	.+16     	; 0x53c <I2C_read_bytes+0x66>
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	ce 01       	movw	r24, r28
     530:	68 df       	rcall	.-304    	; 0x402 <I2C_read>
		if (status != 0) goto error;
     532:	81 11       	cpse	r24, r1
     534:	0b c0       	rjmp	.+22     	; 0x54c <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     536:	21 96       	adiw	r28, 0x01	; 1
     538:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     53a:	f6 cf       	rjmp	.-20     	; 0x528 <I2C_read_bytes+0x52>
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     540:	60 df       	rcall	.-320    	; 0x402 <I2C_read>
     542:	81 11       	cpse	r24, r1
	I2C_stop();
     544:	03 c0       	rjmp	.+6      	; 0x54c <I2C_read_bytes+0x76>
     546:	c1 df       	rcall	.-126    	; 0x4ca <I2C_stop>
	return 0;
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	02 c0       	rjmp	.+4      	; 0x550 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     54c:	e4 de       	rcall	.-568    	; 0x316 <I2C_recover>
     54e:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     550:	df 91       	pop	r29
}
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	08 95       	ret

00000560 <initLanyard>:
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     560:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <lanyardPos>
    lanyardCnt      = 0;
     564:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <lanyardCnt>
    lanyardState    = TRUE;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <lanyardState>
    lastButtonState = 0xff;
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    iLED[CAT]       = 0;
     574:	e0 91 86 ba 	lds	r30, 0xBA86	; 0x80ba86 <__bss_end+0x7f75>
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	ef 53       	subi	r30, 0x3F	; 63
     57c:	f5 4c       	sbci	r31, 0xC5	; 197
     57e:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     580:	e0 91 97 ba 	lds	r30, 0xBA97	; 0x80ba97 <__bss_end+0x7f86>
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	ef 53       	subi	r30, 0x3F	; 63
     588:	f5 4c       	sbci	r31, 0xC5	; 197
     58a:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     58c:	e0 91 96 ba 	lds	r30, 0xBA96	; 0x80ba96 <__bss_end+0x7f85>
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ef 53       	subi	r30, 0x3F	; 63
     594:	f5 4c       	sbci	r31, 0xC5	; 197
     596:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     598:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	ef 53       	subi	r30, 0x3F	; 63
     5a0:	f5 4c       	sbci	r31, 0xC5	; 197
     5a2:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     5a4:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	ef 53       	subi	r30, 0x3F	; 63
     5ac:	f5 4c       	sbci	r31, 0xC5	; 197
     5ae:	10 82       	st	Z, r1
     5b0:	ae e9       	ldi	r26, 0x9E	; 158
     5b2:	ba eb       	ldi	r27, 0xBA	; 186
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     5b4:	ed 91       	ld	r30, X+
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ef 53       	subi	r30, 0x3F	; 63
     5ba:	f5 4c       	sbci	r31, 0xC5	; 197
     5bc:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     5be:	8a eb       	ldi	r24, 0xBA	; 186
     5c0:	a4 3a       	cpi	r26, 0xA4	; 164
     5c2:	b8 07       	cpc	r27, r24
     5c4:	b9 f7       	brne	.-18     	; 0x5b4 <initLanyard+0x54>
        iLED[HCKR[G][i]] = 0;
}
     5c6:	08 95       	ret

000005c8 <LanyardCode>:

// Main game loop
uint8_t LanyardCode(){
     5c8:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     5ca:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     5ce:	83 30       	cpi	r24, 0x03	; 3
     5d0:	71 f4       	brne	.+28     	; 0x5ee <LanyardCode+0x26>
     5d2:	6a e0       	ldi	r22, 0x0A	; 10
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <lanyardLastActive>
     5da:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <lanyardLastActive+0x1>
     5de:	0e 94 26 0c 	call	0x184c	; 0x184c <idleTimeout>
     5e2:	88 23       	and	r24, r24
     5e4:	21 f0       	breq	.+8      	; 0x5ee <LanyardCode+0x26>
        /* clean up maze game and go back to text game */
        initLanyard();
     5e6:	bc df       	rcall	.-136    	; 0x560 <initLanyard>
        gameNow = TEXT;
     5e8:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
        return 0;
     5ec:	bf c0       	rjmp	.+382    	; 0x76c <LanyardCode+0x1a4>
    }

    if (CheckState(LANYARD_COMPLETED))
     5ee:	8b e7       	ldi	r24, 0x7B	; 123
     5f0:	64 d7       	rcall	.+3784   	; 0x14ba <CheckState>
     5f2:	81 11       	cpse	r24, r1
     5f4:	bb c0       	rjmp	.+374    	; 0x76c <LanyardCode+0x1a4>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5f6:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     5fa:	88 23       	and	r24, r24
     5fc:	19 f0       	breq	.+6      	; 0x604 <LanyardCode+0x3c>
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	09 f0       	breq	.+2      	; 0x604 <LanyardCode+0x3c>
     602:	b4 c0       	rjmp	.+360    	; 0x76c <LanyardCode+0x1a4>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     604:	c0 91 86 ba 	lds	r28, 0xBA86	; 0x80ba86 <__bss_end+0x7f75>
     608:	ec 2f       	mov	r30, r28
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <buttonState>
     610:	9f 3f       	cpi	r25, 0xFF	; 255
     612:	19 f0       	breq	.+6      	; 0x61a <LanyardCode+0x52>
     614:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     618:	01 c0       	rjmp	.+2      	; 0x61c <LanyardCode+0x54>
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	ef 53       	subi	r30, 0x3F	; 63
     61e:	f5 4c       	sbci	r31, 0xC5	; 197
     620:	80 83       	st	Z, r24

    if ( (buttonState & 0xf0) == 0)
     622:	89 2f       	mov	r24, r25
     624:	80 7f       	andi	r24, 0xF0	; 240
     626:	09 f4       	brne	.+2      	; 0x62a <LanyardCode+0x62>
     628:	a1 c0       	rjmp	.+322    	; 0x76c <LanyardCode+0x1a4>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     62a:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <lastButtonState>
     62e:	89 27       	eor	r24, r25
     630:	8f 70       	andi	r24, 0x0F	; 15
     632:	09 f4       	brne	.+2      	; 0x636 <LanyardCode+0x6e>
     634:	9b c0       	rjmp	.+310    	; 0x76c <LanyardCode+0x1a4>
        return 0;

    lanyardLastActive = getClock();
     636:	0e 94 17 0c 	call	0x182e	; 0x182e <getClock>
     63a:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <lanyardLastActive>
     63e:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     642:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <lastButtonState>
     646:	8f 3f       	cpi	r24, 0xFF	; 255
     648:	09 f0       	breq	.+2      	; 0x64c <LanyardCode+0x84>
     64a:	8c c0       	rjmp	.+280    	; 0x764 <LanyardCode+0x19c>
        switch (buttonState & 0x0f) {
     64c:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     650:	8f 70       	andi	r24, 0x0F	; 15
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	61 f0       	breq	.+24     	; 0x66e <LanyardCode+0xa6>
     656:	28 f4       	brcc	.+10     	; 0x662 <LanyardCode+0x9a>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	69 f4       	brne	.+26     	; 0x676 <LanyardCode+0xae>
            case 0b0001:
                digit = 0;
     65c:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <digit>
                break;
     660:	0d c0       	rjmp	.+26     	; 0x67c <LanyardCode+0xb4>
        return 0;

    lanyardLastActive = getClock();

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     662:	84 30       	cpi	r24, 0x04	; 4
     664:	31 f0       	breq	.+12     	; 0x672 <LanyardCode+0xaa>
     666:	88 30       	cpi	r24, 0x08	; 8
     668:	31 f4       	brne	.+12     	; 0x676 <LanyardCode+0xae>
            case 0b0100:
                digit = 3;
                break;

            case 0b1000:
                digit = 2;
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	05 c0       	rjmp	.+10     	; 0x678 <LanyardCode+0xb0>
            case 0b0001:
                digit = 0;
                break;

            case 0b0010:
                digit = 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	03 c0       	rjmp	.+6      	; 0x678 <LanyardCode+0xb0>
                break;

            case 0b0100:
                digit = 3;
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	01 c0       	rjmp	.+2      	; 0x678 <LanyardCode+0xb0>
            case 0b1000:
                digit = 2;
                break;

            default:
                digit = 0xff;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <digit>
                break;
        }
        gameNow = LANYARD;
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <gameNow>
        /* TODO play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     682:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <lanyardPos>
     686:	e8 2f       	mov	r30, r24
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	e2 59       	subi	r30, 0x92	; 146
     68c:	f5 44       	sbci	r31, 0x45	; 69
     68e:	20 81       	ld	r18, Z
     690:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <digit>
     694:	29 13       	cpse	r18, r25
     696:	12 c0       	rjmp	.+36     	; 0x6bc <LanyardCode+0xf4>
            lanyardState &= TRUE;
     698:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     69c:	91 70       	andi	r25, 0x01	; 1
     69e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <lanyardState>
            iLED[EYE[R][L]] = 0;
     6a2:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	ef 53       	subi	r30, 0x3F	; 63
     6aa:	f5 4c       	sbci	r31, 0xC5	; 197
     6ac:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     6ae:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ef 53       	subi	r30, 0x3F	; 63
     6b6:	f5 4c       	sbci	r31, 0xC5	; 197
     6b8:	10 82       	st	Z, r1
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <LanyardCode+0xfe>
        } else {
            lanyardState = FALSE;
     6bc:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <lanyardState>
            if (lanyardPos < 4 ) {
     6c0:	84 30       	cpi	r24, 0x04	; 4
     6c2:	08 f4       	brcc	.+2      	; 0x6c6 <LanyardCode+0xfe>
     6c4:	90 cf       	rjmp	.-224    	; 0x5e6 <LanyardCode+0x1e>
                */
                gameNow         = TEXT;
                return 0;
            }
        }
        lanyardPos++;
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <lanyardPos>
        lanyardCnt++;            
     6cc:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <lanyardCnt>
     6d0:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     6d2:	94 30       	cpi	r25, 0x04	; 4
     6d4:	18 f4       	brcc	.+6      	; 0x6dc <LanyardCode+0x114>
                gameNow         = TEXT;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     6d6:	90 93 31 38 	sts	0x3831, r25	; 0x803831 <lanyardCnt>
     6da:	44 c0       	rjmp	.+136    	; 0x764 <LanyardCode+0x19c>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     6dc:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <lanyardCnt>
            if (lanyardState == TRUE) {
     6e0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <lanyardState>
     6e4:	91 30       	cpi	r25, 0x01	; 1
     6e6:	69 f5       	brne	.+90     	; 0x742 <LanyardCode+0x17a>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     6e8:	e8 2f       	mov	r30, r24
     6ea:	e6 95       	lsr	r30
     6ec:	e6 95       	lsr	r30
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	e8 56       	subi	r30, 0x68	; 104
     6f2:	f5 44       	sbci	r31, 0x45	; 69
     6f4:	e5 81       	ldd	r30, Z+5	; 0x05
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     6fc:	ef 53       	subi	r30, 0x3F	; 63
     6fe:	f5 4c       	sbci	r31, 0xC5	; 197
     700:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     702:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     704:	79 f5       	brne	.+94     	; 0x764 <LanyardCode+0x19c>
     706:	8b e7       	ldi	r24, 0x7B	; 123
     708:	ce d6       	rcall	.+3484   	; 0x14a6 <UpdateState>
                    iLED[CAT]       = 0;
     70a:	ec 2f       	mov	r30, r28
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	ef 53       	subi	r30, 0x3F	; 63
     710:	f5 4c       	sbci	r31, 0xC5	; 197
     712:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     714:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	ef 53       	subi	r30, 0x3F	; 63
     71c:	f5 4c       	sbci	r31, 0xC5	; 197
     71e:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     720:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ef 53       	subi	r30, 0x3F	; 63
     728:	f5 4c       	sbci	r31, 0xC5	; 197
     72a:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     72c:	e0 91 97 ba 	lds	r30, 0xBA97	; 0x80ba97 <__bss_end+0x7f86>
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     736:	ef 53       	subi	r30, 0x3F	; 63
     738:	f5 4c       	sbci	r31, 0xC5	; 197
     73a:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     73c:	e0 91 96 ba 	lds	r30, 0xBA96	; 0x80ba96 <__bss_end+0x7f85>
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     740:	0b c0       	rjmp	.+22     	; 0x758 <LanyardCode+0x190>
     742:	0e df       	rcall	.-484    	; 0x560 <initLanyard>
                iLED[EYE[R][L]] = dimValue;
     744:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     74e:	ef 53       	subi	r30, 0x3F	; 63
     750:	f5 4c       	sbci	r31, 0xC5	; 197
     752:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     754:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     75e:	ef 53       	subi	r30, 0x3F	; 63
     760:	f5 4c       	sbci	r31, 0xC5	; 197
     762:	80 83       	st	Z, r24
            }
        }
    }

    lastButtonState = buttonState;
     764:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
     768:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <lastButtonState>
    return 0;
}
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazePos = 0;
     772:	10 92 45 38 	sts	0x3845, r1	; 0x803845 <mazePos>
    mazeCnt = 0;
     776:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <mazeCnt>
    mazeState = TRUE;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
    inverted  = FALSE;
     780:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <inverted>
    iLED[CAT]       = 0;
     784:	e0 91 86 ba 	lds	r30, 0xBA86	; 0x80ba86 <__bss_end+0x7f75>
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ef 53       	subi	r30, 0x3F	; 63
     78c:	f5 4c       	sbci	r31, 0xC5	; 197
     78e:	10 82       	st	Z, r1
    iLED[EYE[G][L]] = 0;
     790:	e0 91 97 ba 	lds	r30, 0xBA97	; 0x80ba97 <__bss_end+0x7f86>
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ef 53       	subi	r30, 0x3F	; 63
     798:	f5 4c       	sbci	r31, 0xC5	; 197
     79a:	10 82       	st	Z, r1
    iLED[EYE[G][R]] = 0;
     79c:	e0 91 96 ba 	lds	r30, 0xBA96	; 0x80ba96 <__bss_end+0x7f85>
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	ef 53       	subi	r30, 0x3F	; 63
     7a4:	f5 4c       	sbci	r31, 0xC5	; 197
     7a6:	10 82       	st	Z, r1
    iLED[EYE[R][L]] = 0;
     7a8:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	ef 53       	subi	r30, 0x3F	; 63
     7b0:	f5 4c       	sbci	r31, 0xC5	; 197
     7b2:	10 82       	st	Z, r1
    iLED[EYE[R][R]] = 0;
     7b4:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	ef 53       	subi	r30, 0x3F	; 63
     7bc:	f5 4c       	sbci	r31, 0xC5	; 197
     7be:	10 82       	st	Z, r1
     7c0:	ae e9       	ldi	r26, 0x9E	; 158
     7c2:	ba eb       	ldi	r27, 0xBA	; 186
    for (int i=0; i<6; i++ )
        iLED[HCKR[G][i]] = 0;
     7c4:	ed 91       	ld	r30, X+
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ef 53       	subi	r30, 0x3F	; 63
     7ca:	f5 4c       	sbci	r31, 0xC5	; 197
     7cc:	10 82       	st	Z, r1
    iLED[CAT]       = 0;
    iLED[EYE[G][L]] = 0;
    iLED[EYE[G][R]] = 0;
    iLED[EYE[R][L]] = 0;
    iLED[EYE[R][R]] = 0;
    for (int i=0; i<6; i++ )
     7ce:	8a eb       	ldi	r24, 0xBA	; 186
     7d0:	a4 3a       	cpi	r26, 0xA4	; 164
     7d2:	b8 07       	cpc	r27, r24
     7d4:	b9 f7       	brne	.-18     	; 0x7c4 <initMaze+0x52>
        iLED[HCKR[G][i]] = 0;
}
     7d6:	08 95       	ret

000007d8 <showFieldStrength>:

void showFieldStrength(int16_t val) {
    uint8_t count;
    int16_t tmp;

    tmp = abs(val);
     7d8:	97 ff       	sbrs	r25, 7
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <showFieldStrength+0xa>
     7dc:	91 95       	neg	r25
     7de:	81 95       	neg	r24
     7e0:	91 09       	sbc	r25, r1

    if ( tmp*2 < HALL_LOW )
     7e2:	9c 01       	movw	r18, r24
     7e4:	22 0f       	add	r18, r18
     7e6:	33 1f       	adc	r19, r19
     7e8:	28 37       	cpi	r18, 0x78	; 120
     7ea:	31 05       	cpc	r19, r1
     7ec:	8c f0       	brlt	.+34     	; 0x810 <showFieldStrength+0x38>
        count = 0;
    else if ( tmp   < HALL_LOW )
     7ee:	88 37       	cpi	r24, 0x78	; 120
     7f0:	91 05       	cpc	r25, r1
     7f2:	84 f0       	brlt	.+32     	; 0x814 <showFieldStrength+0x3c>
        count = 1;
    else if ( tmp*2 < HALL_HIGH )
     7f4:	2c 32       	cpi	r18, 0x2C	; 44
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	34 07       	cpc	r19, r20
     7fa:	74 f0       	brlt	.+28     	; 0x818 <showFieldStrength+0x40>
        count = 2;
    else if ( tmp*3 < HALL_HIGH*2 )
     7fc:	28 0f       	add	r18, r24
     7fe:	39 1f       	adc	r19, r25
     800:	28 35       	cpi	r18, 0x58	; 88
     802:	32 40       	sbci	r19, 0x02	; 2
     804:	5c f0       	brlt	.+22     	; 0x81c <showFieldStrength+0x44>
        count = 3;
    else if ( tmp   < HALL_HIGH )
     806:	8c 32       	cpi	r24, 0x2C	; 44
     808:	91 40       	sbci	r25, 0x01	; 1
     80a:	54 f0       	brlt	.+20     	; 0x820 <showFieldStrength+0x48>
        count = 4;
    else
        count = 5;
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	09 c0       	rjmp	.+18     	; 0x822 <showFieldStrength+0x4a>
    int16_t tmp;

    tmp = abs(val);

    if ( tmp*2 < HALL_LOW )
        count = 0;
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	07 c0       	rjmp	.+14     	; 0x822 <showFieldStrength+0x4a>
    else if ( tmp   < HALL_LOW )
        count = 1;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	05 c0       	rjmp	.+10     	; 0x822 <showFieldStrength+0x4a>
    else if ( tmp*2 < HALL_HIGH )
        count = 2;
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	03 c0       	rjmp	.+6      	; 0x822 <showFieldStrength+0x4a>
    else if ( tmp*3 < HALL_HIGH*2 )
        count = 3;
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	01 c0       	rjmp	.+2      	; 0x822 <showFieldStrength+0x4a>
    else if ( tmp   < HALL_HIGH )
        count = 4;
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	ea e8       	ldi	r30, 0x8A	; 138
     824:	fa eb       	ldi	r31, 0xBA	; 186
    else
        count = 5;

    for (uint8_t i=0; i<5; i++) {
     826:	90 e0       	ldi	r25, 0x00	; 0
        if (i<count) {
            iLED[WING[L][i]] = dimValue;
     828:	a5 81       	ldd	r26, Z+5	; 0x05
     82a:	b0 e0       	ldi	r27, 0x00	; 0
        count = 4;
    else
        count = 5;

    for (uint8_t i=0; i<5; i++) {
        if (i<count) {
     82c:	98 17       	cp	r25, r24
     82e:	68 f4       	brcc	.+26     	; 0x84a <showFieldStrength+0x72>
            iLED[WING[L][i]] = dimValue;
     830:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     834:	af 53       	subi	r26, 0x3F	; 63
     836:	b5 4c       	sbci	r27, 0xC5	; 197
     838:	2c 93       	st	X, r18
            iLED[WING[R][i]] = dimValue;
     83a:	a0 81       	ld	r26, Z
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     842:	af 53       	subi	r26, 0x3F	; 63
     844:	b5 4c       	sbci	r27, 0xC5	; 197
     846:	2c 93       	st	X, r18
     848:	08 c0       	rjmp	.+16     	; 0x85a <showFieldStrength+0x82>
        } else {
            iLED[WING[L][i]] = 0;
     84a:	af 53       	subi	r26, 0x3F	; 63
     84c:	b5 4c       	sbci	r27, 0xC5	; 197
     84e:	1c 92       	st	X, r1
            iLED[WING[R][i]] = 0;
     850:	a0 81       	ld	r26, Z
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	af 53       	subi	r26, 0x3F	; 63
     856:	b5 4c       	sbci	r27, 0xC5	; 197
     858:	1c 92       	st	X, r1
    else if ( tmp   < HALL_HIGH )
        count = 4;
    else
        count = 5;

    for (uint8_t i=0; i<5; i++) {
     85a:	9f 5f       	subi	r25, 0xFF	; 255
     85c:	31 96       	adiw	r30, 0x01	; 1
     85e:	95 30       	cpi	r25, 0x05	; 5
     860:	19 f7       	brne	.-58     	; 0x828 <showFieldStrength+0x50>
        } else {
            iLED[WING[L][i]] = 0;
            iLED[WING[R][i]] = 0;
        }
    }
}
     862:	08 95       	ret

00000864 <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     868:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	69 f4       	brne	.+26     	; 0x88a <MagnetMaze+0x26>
     870:	6a e0       	ldi	r22, 0x0A	; 10
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	80 91 41 38 	lds	r24, 0x3841	; 0x803841 <mazeLastActive>
     878:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <mazeLastActive+0x1>
     87c:	e7 d7       	rcall	.+4046   	; 0x184c <idleTimeout>
     87e:	88 23       	and	r24, r24
     880:	21 f0       	breq	.+8      	; 0x88a <MagnetMaze+0x26>
        /* clean up maze game and go back to text game */
        initMaze();
     882:	77 df       	rcall	.-274    	; 0x772 <initMaze>
        gameNow = TEXT;
     884:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
        return 0;
     888:	eb c0       	rjmp	.+470    	; 0xa60 <MagnetMaze+0x1fc>

    if (CheckState(MAZE_COMPLETED))
        return 0;

    */
    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     88a:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	08 f0       	brcs	.+2      	; 0x894 <MagnetMaze+0x30>
     892:	e6 c0       	rjmp	.+460    	; 0xa60 <MagnetMaze+0x1fc>
        return 0;

    if (calHall == 0)
     894:	80 91 ea 3a 	lds	r24, 0x3AEA	; 0x803aea <calHall>
     898:	90 91 eb 3a 	lds	r25, 0x3AEB	; 0x803aeb <calHall+0x1>
     89c:	89 2b       	or	r24, r25
     89e:	41 f4       	brne	.+16     	; 0x8b0 <MagnetMaze+0x4c>
        calHall = adcHall;
     8a0:	80 91 b2 3a 	lds	r24, 0x3AB2	; 0x803ab2 <adcHall>
     8a4:	90 91 b3 3a 	lds	r25, 0x3AB3	; 0x803ab3 <adcHall+0x1>
     8a8:	80 93 ea 3a 	sts	0x3AEA, r24	; 0x803aea <calHall>
     8ac:	90 93 eb 3a 	sts	0x3AEB, r25	; 0x803aeb <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     8b0:	c0 91 b2 3a 	lds	r28, 0x3AB2	; 0x803ab2 <adcHall>
     8b4:	d0 91 b3 3a 	lds	r29, 0x3AB3	; 0x803ab3 <adcHall+0x1>
     8b8:	80 91 ea 3a 	lds	r24, 0x3AEA	; 0x803aea <calHall>
     8bc:	90 91 eb 3a 	lds	r25, 0x3AEB	; 0x803aeb <calHall+0x1>
     8c0:	c8 1b       	sub	r28, r24
     8c2:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     8c4:	ce 01       	movw	r24, r28
     8c6:	88 df       	rcall	.-240    	; 0x7d8 <showFieldStrength>

    switch (curHallState) {
     8c8:	80 91 47 38 	lds	r24, 0x3847	; 0x803847 <curHallState>
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	89 f0       	breq	.+34     	; 0x8f2 <MagnetMaze+0x8e>
     8d0:	18 f0       	brcs	.+6      	; 0x8d8 <MagnetMaze+0x74>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	c1 f0       	breq	.+48     	; 0x906 <MagnetMaze+0xa2>
     8d6:	1f c0       	rjmp	.+62     	; 0x916 <MagnetMaze+0xb2>
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     8d8:	c4 3d       	cpi	r28, 0xD4	; 212
     8da:	9e ef       	ldi	r25, 0xFE	; 254
     8dc:	d9 07       	cpc	r29, r25
     8de:	14 f4       	brge	.+4      	; 0x8e4 <MagnetMaze+0x80>
                newHallState = 1;
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <MagnetMaze+0x88>
            } else if ( valHall - HALL_HIGH > 0 ) {
     8e4:	cd 32       	cpi	r28, 0x2D	; 45
     8e6:	d1 40       	sbci	r29, 0x01	; 1
     8e8:	5c f0       	brlt	.+22     	; 0x900 <MagnetMaze+0x9c>
                newHallState = 2;
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	90 93 46 38 	sts	0x3846, r25	; 0x803846 <newHallState>
     8f0:	12 c0       	rjmp	.+36     	; 0x916 <MagnetMaze+0xb2>
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     8f2:	cd 32       	cpi	r28, 0x2D	; 45
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	d9 07       	cpc	r29, r25
     8f8:	c4 f7       	brge	.-16     	; 0x8ea <MagnetMaze+0x86>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     8fa:	c9 38       	cpi	r28, 0x89	; 137
     8fc:	df 4f       	sbci	r29, 0xFF	; 255
     8fe:	84 f3       	brlt	.-32     	; 0x8e0 <MagnetMaze+0x7c>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     900:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <newHallState>
     904:	08 c0       	rjmp	.+16     	; 0x916 <MagnetMaze+0xb2>
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     906:	c4 3d       	cpi	r28, 0xD4	; 212
     908:	9e ef       	ldi	r25, 0xFE	; 254
     90a:	d9 07       	cpc	r29, r25
     90c:	4c f3       	brlt	.-46     	; 0x8e0 <MagnetMaze+0x7c>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     90e:	c8 37       	cpi	r28, 0x78	; 120
     910:	d1 05       	cpc	r29, r1
     912:	b4 f3       	brlt	.-20     	; 0x900 <MagnetMaze+0x9c>
     914:	ea cf       	rjmp	.-44     	; 0x8ea <MagnetMaze+0x86>
            }
            break;
    }

    /* activate led for hallstate */
    iLED[CAT] = (newHallState ? dimValue : 0);
     916:	c0 91 86 ba 	lds	r28, 0xBA86	; 0x80ba86 <__bss_end+0x7f75>
     91a:	ec 2f       	mov	r30, r28
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	90 91 46 38 	lds	r25, 0x3846	; 0x803846 <newHallState>
     922:	99 23       	and	r25, r25
     924:	19 f0       	breq	.+6      	; 0x92c <MagnetMaze+0xc8>
     926:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <dimValue>
     92a:	01 c0       	rjmp	.+2      	; 0x92e <MagnetMaze+0xca>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	ef 53       	subi	r30, 0x3F	; 63
     930:	f5 4c       	sbci	r31, 0xC5	; 197
     932:	20 83       	st	Z, r18

    if (newHallState != curHallState) {
     934:	89 17       	cp	r24, r25
     936:	09 f4       	brne	.+2      	; 0x93a <MagnetMaze+0xd6>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     938:	93 c0       	rjmp	.+294    	; 0xa60 <MagnetMaze+0x1fc>
     93a:	79 d7       	rcall	.+3826   	; 0x182e <getClock>
     93c:	80 93 41 38 	sts	0x3841, r24	; 0x803841 <mazeLastActive>
     940:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <mazeLastActive+0x1>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     944:	20 91 45 38 	lds	r18, 0x3845	; 0x803845 <mazePos>
     948:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <newHallState>
     94c:	21 11       	cpse	r18, r1
     94e:	08 c0       	rjmp	.+16     	; 0x960 <MagnetMaze+0xfc>
     950:	88 23       	and	r24, r24
     952:	31 f0       	breq	.+12     	; 0x960 <MagnetMaze+0xfc>
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	09 f4       	brne	.+2      	; 0x95c <MagnetMaze+0xf8>
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <inverted>

        curHallState = newHallState;
     960:	80 93 47 38 	sts	0x3847, r24	; 0x803847 <curHallState>
        
        if (curHallState != 0) {
     964:	88 23       	and	r24, r24
     966:	09 f4       	brne	.+2      	; 0x96a <MagnetMaze+0x106>
     968:	7b c0       	rjmp	.+246    	; 0xa60 <MagnetMaze+0x1fc>
            gameNow = MAZE;
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     970:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <inverted>
     974:	99 23       	and	r25, r25
     976:	11 f0       	breq	.+4      	; 0x97c <MagnetMaze+0x118>
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	89 27       	eor	r24, r25
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	e2 2f       	mov	r30, r18
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	ec 55       	subi	r30, 0x5C	; 92
     984:	f5 44       	sbci	r31, 0x45	; 69
     986:	40 81       	ld	r20, Z
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	84 17       	cp	r24, r20
     98c:	95 07       	cpc	r25, r21
     98e:	91 f4       	brne	.+36     	; 0x9b4 <MagnetMaze+0x150>
                mazeState &= TRUE;
     990:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <mazeState>
     994:	81 70       	andi	r24, 0x01	; 1
     996:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <mazeState>
                iLED[EYE[R][L]] = 0;
     99a:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	ef 53       	subi	r30, 0x3F	; 63
     9a2:	f5 4c       	sbci	r31, 0xC5	; 197
     9a4:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     9a6:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	ef 53       	subi	r30, 0x3F	; 63
     9ae:	f5 4c       	sbci	r31, 0xC5	; 197
     9b0:	10 82       	st	Z, r1
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <MagnetMaze+0x154>
            } else {
                mazeState = FALSE;
     9b4:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	82 0f       	add	r24, r18
     9bc:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <mazePos>
            mazeCnt++;            
     9c0:	90 91 44 38 	lds	r25, 0x3844	; 0x803844 <mazeCnt>
     9c4:	9f 5f       	subi	r25, 0xFF	; 255
            if (mazeCnt >= 3) {
     9c6:	93 30       	cpi	r25, 0x03	; 3
     9c8:	18 f4       	brcc	.+6      	; 0x9d0 <MagnetMaze+0x16c>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     9ca:	90 93 44 38 	sts	0x3844, r25	; 0x803844 <mazeCnt>
     9ce:	48 c0       	rjmp	.+144    	; 0xa60 <MagnetMaze+0x1fc>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     9d0:	10 92 44 38 	sts	0x3844, r1	; 0x803844 <mazeCnt>
                if (mazeState == TRUE) {
     9d4:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <mazeState>
     9d8:	91 30       	cpi	r25, 0x01	; 1
     9da:	79 f5       	brne	.+94     	; 0xa3a <MagnetMaze+0x1d6>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     9dc:	eb ea       	ldi	r30, 0xAB	; 171
     9de:	8e 9f       	mul	r24, r30
     9e0:	e1 2d       	mov	r30, r1
     9e2:	11 24       	eor	r1, r1
     9e4:	e6 95       	lsr	r30
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	e8 56       	subi	r30, 0x68	; 104
     9ea:	f5 44       	sbci	r31, 0x45	; 69
     9ec:	e5 81       	ldd	r30, Z+5	; 0x05
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValue>
     9f4:	ef 53       	subi	r30, 0x3F	; 63
     9f6:	f5 4c       	sbci	r31, 0xC5	; 197
     9f8:	90 83       	st	Z, r25
                    if (mazePos == sizeof(mazeCode)) {
     9fa:	82 31       	cpi	r24, 0x12	; 18
                        UpdateState(MAZE_COMPLETED);
     9fc:	89 f5       	brne	.+98     	; 0xa60 <MagnetMaze+0x1fc>
     9fe:	8d e7       	ldi	r24, 0x7D	; 125
     a00:	52 d5       	rcall	.+2724   	; 0x14a6 <UpdateState>
                        iLED[CAT]       = 0;
     a02:	ec 2f       	mov	r30, r28
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	ef 53       	subi	r30, 0x3F	; 63
     a08:	f5 4c       	sbci	r31, 0xC5	; 197
     a0a:	10 82       	st	Z, r1
                        iLED[EYE[R][L]] = 0;
     a0c:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	ef 53       	subi	r30, 0x3F	; 63
     a14:	f5 4c       	sbci	r31, 0xC5	; 197
     a16:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     a18:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ef 53       	subi	r30, 0x3F	; 63
     a20:	f5 4c       	sbci	r31, 0xC5	; 197
     a22:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     a24:	e0 91 97 ba 	lds	r30, 0xBA97	; 0x80ba97 <__bss_end+0x7f86>
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     a2e:	ef 53       	subi	r30, 0x3F	; 63
     a30:	f5 4c       	sbci	r31, 0xC5	; 197
                        iLED[EYE[G][R]] = dimValue;
     a32:	80 83       	st	Z, r24
     a34:	e0 91 96 ba 	lds	r30, 0xBA96	; 0x80ba96 <__bss_end+0x7f85>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     a38:	0d c0       	rjmp	.+26     	; 0xa54 <MagnetMaze+0x1f0>
     a3a:	9b de       	rcall	.-714    	; 0x772 <initMaze>
                    gameNow   = TEXT;
     a3c:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
                    iLED[EYE[R][L]] = dimValue;
     a40:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     a4a:	ef 53       	subi	r30, 0x3F	; 63
     a4c:	f5 4c       	sbci	r31, 0xC5	; 197
     a4e:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     a50:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
     a5a:	ef 53       	subi	r30, 0x3F	; 63
     a5c:	f5 4c       	sbci	r31, 0xC5	; 197
     a5e:	80 83       	st	Z, r24
                }
            }
        }
    }
    return 0;
}
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <Setup>:
    ++test;

    for (uint8_t x=0; x<5; ++x){
        iLED[WING[R][x]] = iLED[WING[L][4-x]];
    }
}
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	f8 94       	cli
     a6e:	88 ed       	ldi	r24, 0xD8	; 216
     a70:	84 bf       	out	0x34, r24	; 52
     a72:	c1 e0       	ldi	r28, 0x01	; 1
     a74:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     a78:	8a e4       	ldi	r24, 0x4A	; 74
     a7a:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     a7e:	8c e7       	ldi	r24, 0x7C	; 124
     a80:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     a84:	9f e3       	ldi	r25, 0x3F	; 63
     a86:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     a8a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     a8e:	80 68       	ori	r24, 0x80	; 128
     a90:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     a94:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     a98:	80 68       	ori	r24, 0x80	; 128
     a9a:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     a9e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     aa8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     aac:	80 68       	ori	r24, 0x80	; 128
     aae:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     ab2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     ab6:	80 68       	ori	r24, 0x80	; 128
     ab8:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     abc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     ac0:	80 68       	ori	r24, 0x80	; 128
     ac2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     ac6:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     aca:	d2 e0       	ldi	r29, 0x02	; 2
     acc:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     ad0:	2b e5       	ldi	r18, 0x5B	; 91
     ad2:	31 e0       	ldi	r19, 0x01	; 1
     ad4:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     ad8:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     adc:	80 ea       	ldi	r24, 0xA0	; 160
     ade:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     ae2:	80 ec       	ldi	r24, 0xC0	; 192
     ae4:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     aee:	1c ba       	out	0x1c, r1	; 28
     af0:	1d ba       	out	0x1d, r1	; 29
     af2:	1e ba       	out	0x1e, r1	; 30
     af4:	1f ba       	out	0x1f, r1	; 31
     af6:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     b00:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     b04:	87 e7       	ldi	r24, 0x77	; 119
     b06:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     b0a:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     b0e:	8b e0       	ldi	r24, 0x0B	; 11
     b10:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     b14:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     b24:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     b30:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     b34:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     b38:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     b3c:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     b40:	8b e8       	ldi	r24, 0x8B	; 139
     b42:	93 e0       	ldi	r25, 0x03	; 3
     b44:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     b48:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     b4c:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     b50:	c4 db       	rcall	.-2168   	; 0x2da <I2C_init>
     b52:	82 e1       	ldi	r24, 0x12	; 18
     b54:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     b5e:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     b62:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b66:	84 e4       	ldi	r24, 0x44	; 68
     b68:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     b72:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     b76:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     b80:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     b84:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     b88:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     b8c:	82 e5       	ldi	r24, 0x52	; 82
     b8e:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     b98:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     b9c:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     ba0:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     baa:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     bb4:	80 e8       	ldi	r24, 0x80	; 128
     bb6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     bba:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     bc4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bc8:	80 fd       	sbrc	r24, 0
     bca:	fc cf       	rjmp	.-8      	; 0xbc4 <Setup+0x15c>
     bcc:	80 e3       	ldi	r24, 0x30	; 48
     bce:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     bd2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     bd6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     bda:	82 fd       	sbrc	r24, 2
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <Setup+0x16e>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	98 e7       	ldi	r25, 0x78	; 120
     be2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     be6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     bea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     bee:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     bf2:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     bf6:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     bfa:	82 96       	adiw	r24, 0x22	; 34
     bfc:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__udivmodhi4>
     c00:	80 93 ee 3a 	sts	0x3AEE, r24	; 0x803aee <tmp16bit>
     c04:	90 93 ef 3a 	sts	0x3AEF, r25	; 0x803aef <tmp16bit+0x1>
     c08:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c0c:	83 fd       	sbrc	r24, 3
     c0e:	fc cf       	rjmp	.-8      	; 0xc08 <Setup+0x1a0>
     c10:	80 91 ee 3a 	lds	r24, 0x3AEE	; 0x803aee <tmp16bit>
     c14:	90 91 ef 3a 	lds	r25, 0x3AEF	; 0x803aef <tmp16bit+0x1>
     c18:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     c1c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     c2c:	88 e0       	ldi	r24, 0x08	; 8
     c2e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     c32:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     c36:	80 fd       	sbrc	r24, 0
     c38:	fc cf       	rjmp	.-8      	; 0xc32 <Setup+0x1ca>
     c3a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     c44:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     c4e:	10 92 6c 3a 	sts	0x3A6C, r1	; 0x803a6c <serRx>
     c52:	8c e6       	ldi	r24, 0x6C	; 108
     c54:	9a e3       	ldi	r25, 0x3A	; 58
     c56:	80 93 b0 3a 	sts	0x3AB0, r24	; 0x803ab0 <serTxAddr>
     c5a:	90 93 b1 3a 	sts	0x3AB1, r25	; 0x803ab1 <serTxAddr+0x1>
     c5e:	78 94       	sei
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <__vector_8>:
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	8f 93       	push	r24
     c72:	9f 93       	push	r25
     c74:	af 93       	push	r26
     c76:	bf 93       	push	r27
     c78:	ef 93       	push	r30
     c7a:	ff 93       	push	r31
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     c82:	84 e4       	ldi	r24, 0x44	; 68
     c84:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     c88:	ec b3       	in	r30, 0x1c	; 28
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	e8 9f       	mul	r30, r24
     c8e:	f0 01       	movw	r30, r0
     c90:	11 24       	eor	r1, r1
     c92:	ef 53       	subi	r30, 0x3F	; 63
     c94:	f5 4c       	sbci	r31, 0xC5	; 197
     c96:	a8 e2       	ldi	r26, 0x28	; 40
     c98:	ba e0       	ldi	r27, 0x0A	; 10
     c9a:	96 e0       	ldi	r25, 0x06	; 6
     c9c:	81 91       	ld	r24, Z+
     c9e:	8d 93       	st	X+, r24
     ca0:	9a 95       	dec	r25
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <__vector_8+0x36>
     ca4:	8b e0       	ldi	r24, 0x0B	; 11
     ca6:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     caa:	8c b3       	in	r24, 0x1c	; 28
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	58 f4       	brcc	.+22     	; 0xcc6 <__vector_8+0x60>
     cb0:	8c b3       	in	r24, 0x1c	; 28
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <__vector_8+0x52>
     cb6:	99 0f       	add	r25, r25
     cb8:	8a 95       	dec	r24
     cba:	ea f7       	brpl	.-6      	; 0xcb6 <__vector_8+0x50>
     cbc:	99 b9       	out	0x09, r25	; 9
     cbe:	8c b3       	in	r24, 0x1c	; 28
     cc0:	83 95       	inc	r24
     cc2:	8c bb       	out	0x1c, r24	; 28
     cc4:	0a c0       	rjmp	.+20     	; 0xcda <__vector_8+0x74>
     cc6:	8c b3       	in	r24, 0x1c	; 28
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	21 f4       	brne	.+8      	; 0xcd4 <__vector_8+0x6e>
     ccc:	2a 9a       	sbi	0x05, 2	; 5
     cce:	83 95       	inc	r24
     cd0:	8c bb       	out	0x1c, r24	; 28
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <__vector_8+0x74>
     cd4:	2e 9a       	sbi	0x05, 6	; 5
     cd6:	88 27       	eor	r24, r24
     cd8:	8c bb       	out	0x1c, r24	; 28
     cda:	80 91 57 3a 	lds	r24, 0x3A57	; 0x803a57 <timeout_I2C>
     cde:	88 23       	and	r24, r24
     ce0:	29 f0       	breq	.+10     	; 0xcec <__vector_8+0x86>
     ce2:	80 91 57 3a 	lds	r24, 0x3A57	; 0x803a57 <timeout_I2C>
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	80 93 57 3a 	sts	0x3A57, r24	; 0x803a57 <timeout_I2C>
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     cf2:	ff 91       	pop	r31
     cf4:	ef 91       	pop	r30
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	0f 90       	pop	r0
     d04:	1f 90       	pop	r1
     d06:	18 95       	reti

00000d08 <__vector_13>:
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
     d1a:	e0 91 b0 3a 	lds	r30, 0x3AB0	; 0x803ab0 <serTxAddr>
     d1e:	f0 91 b1 3a 	lds	r31, 0x3AB1	; 0x803ab1 <serTxAddr+0x1>
     d22:	80 81       	ld	r24, Z
     d24:	88 23       	and	r24, r24
     d26:	91 f0       	breq	.+36     	; 0xd4c <__vector_13+0x44>
     d28:	80 81       	ld	r24, Z
     d2a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     d2e:	80 91 b0 3a 	lds	r24, 0x3AB0	; 0x803ab0 <serTxAddr>
     d32:	90 91 b1 3a 	lds	r25, 0x3AB1	; 0x803ab1 <serTxAddr+0x1>
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	80 93 b0 3a 	sts	0x3AB0, r24	; 0x803ab0 <serTxAddr>
     d3c:	90 93 b1 3a 	sts	0x3AB1, r25	; 0x803ab1 <serTxAddr+0x1>
     d40:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d44:	80 62       	ori	r24, 0x20	; 32
     d46:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <__vector_13+0x4e>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <serTxDone>
     d52:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_14>:
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
     d86:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     d8a:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     d8e:	80 81       	ld	r24, Z
     d90:	81 11       	cpse	r24, r1
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <__vector_14+0x36>
     d94:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auRepAddr>
     d98:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auRepAddr+0x1>
     d9c:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     da0:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
     da4:	e0 91 07 38 	lds	r30, 0x3807	; 0x803807 <auSmpAddr>
     da8:	f0 91 08 38 	lds	r31, 0x3808	; 0x803808 <auSmpAddr+0x1>
     dac:	80 81       	ld	r24, Z
     dae:	88 23       	and	r24, r24
     db0:	e1 f0       	breq	.+56     	; 0xdea <__vector_14+0x7c>
     db2:	20 81       	ld	r18, Z
     db4:	40 91 ad 3a 	lds	r20, 0x3AAD	; 0x803aad <auVolume>
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	2f 57       	subi	r18, 0x7F	; 127
     dbc:	31 09       	sbc	r19, r1
     dbe:	42 9f       	mul	r20, r18
     dc0:	c0 01       	movw	r24, r0
     dc2:	43 9f       	mul	r20, r19
     dc4:	90 0d       	add	r25, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	89 2f       	mov	r24, r25
     dca:	99 0f       	add	r25, r25
     dcc:	99 0b       	sbc	r25, r25
     dce:	80 58       	subi	r24, 0x80	; 128
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     dd6:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <auSmpAddr>
     dda:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <auSmpAddr+0x1>
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
     de4:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <__vector_14+0x88>
     dea:	80 e8       	ldi	r24, 0x80	; 128
     dec:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 e9 3a 	sts	0x3AE9, r24	; 0x803ae9 <auPlayDone>
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	4f 91       	pop	r20
     e06:	3f 91       	pop	r19
     e08:	2f 91       	pop	r18
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <__vector_27>:
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	8f 93       	push	r24
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
     e24:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <serRxDone>
     e28:	81 11       	cpse	r24, r1
     e2a:	44 c0       	rjmp	.+136    	; 0xeb4 <__vector_27+0xa0>
     e2c:	ed b3       	in	r30, 0x1d	; 29
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     e34:	e4 59       	subi	r30, 0x94	; 148
     e36:	f5 4c       	sbci	r31, 0xC5	; 197
     e38:	80 83       	st	Z, r24
     e3a:	ed b3       	in	r30, 0x1d	; 29
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	e4 59       	subi	r30, 0x94	; 148
     e40:	f5 4c       	sbci	r31, 0xC5	; 197
     e42:	80 81       	ld	r24, Z
     e44:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     e48:	ed b3       	in	r30, 0x1d	; 29
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	e4 59       	subi	r30, 0x94	; 148
     e4e:	f5 4c       	sbci	r31, 0xC5	; 197
     e50:	80 81       	ld	r24, Z
     e52:	8a 30       	cpi	r24, 0x0A	; 10
     e54:	39 f0       	breq	.+14     	; 0xe64 <__vector_27+0x50>
     e56:	ed b3       	in	r30, 0x1d	; 29
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	e4 59       	subi	r30, 0x94	; 148
     e5c:	f5 4c       	sbci	r31, 0xC5	; 197
     e5e:	80 81       	ld	r24, Z
     e60:	8d 30       	cpi	r24, 0x0D	; 13
     e62:	49 f4       	brne	.+18     	; 0xe76 <__vector_27+0x62>
     e64:	ed b3       	in	r30, 0x1d	; 29
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	e4 59       	subi	r30, 0x94	; 148
     e6a:	f5 4c       	sbci	r31, 0xC5	; 197
     e6c:	10 82       	st	Z, r1
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <serRxDone>
     e74:	1f c0       	rjmp	.+62     	; 0xeb4 <__vector_27+0xa0>
     e76:	ed b3       	in	r30, 0x1d	; 29
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e4 59       	subi	r30, 0x94	; 148
     e7c:	f5 4c       	sbci	r31, 0xC5	; 197
     e7e:	80 81       	ld	r24, Z
     e80:	88 30       	cpi	r24, 0x08	; 8
     e82:	39 f0       	breq	.+14     	; 0xe92 <__vector_27+0x7e>
     e84:	ed b3       	in	r30, 0x1d	; 29
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	e4 59       	subi	r30, 0x94	; 148
     e8a:	f5 4c       	sbci	r31, 0xC5	; 197
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 37       	cpi	r24, 0x7F	; 127
     e90:	59 f4       	brne	.+22     	; 0xea8 <__vector_27+0x94>
     e92:	8d b3       	in	r24, 0x1d	; 29
     e94:	88 23       	and	r24, r24
     e96:	41 f0       	breq	.+16     	; 0xea8 <__vector_27+0x94>
     e98:	ed b3       	in	r30, 0x1d	; 29
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	e4 59       	subi	r30, 0x94	; 148
     e9e:	f5 4c       	sbci	r31, 0xC5	; 197
     ea0:	10 82       	st	Z, r1
     ea2:	8d b3       	in	r24, 0x1d	; 29
     ea4:	81 50       	subi	r24, 0x01	; 1
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <__vector_27+0x9e>
     ea8:	8d b3       	in	r24, 0x1d	; 29
     eaa:	80 34       	cpi	r24, 0x40	; 64
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <__vector_27+0xa0>
     eae:	8d b3       	in	r24, 0x1d	; 29
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	8d bb       	out	0x1d, r24	; 29
     eb4:	80 e8       	ldi	r24, 0x80	; 128
     eb6:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	8f 91       	pop	r24
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_28>:
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	8f 93       	push	r24
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     ede:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     ee8:	e5 e0       	ldi	r30, 0x05	; 5
     eea:	f8 e0       	ldi	r31, 0x08	; 8
     eec:	80 81       	ld	r24, Z
     eee:	8f 7d       	andi	r24, 0xDF	; 223
     ef0:	80 83       	st	Z, r24
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	8f 91       	pop	r24
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_20>:
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	8f 93       	push	r24
     f0e:	9f 93       	push	r25
     f10:	ef 93       	push	r30
     f12:	ff 93       	push	r31
     f14:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <adc0Chg>
     f18:	81 11       	cpse	r24, r1
     f1a:	19 c0       	rjmp	.+50     	; 0xf4e <__vector_20+0x4c>
     f1c:	8e b3       	in	r24, 0x1e	; 30
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	87 70       	andi	r24, 0x07	; 7
     f22:	8e bb       	out	0x1e, r24	; 30
     f24:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     f28:	8e 31       	cpi	r24, 0x1E	; 30
     f2a:	49 f4       	brne	.+18     	; 0xf3e <__vector_20+0x3c>
     f2c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f30:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     f34:	80 93 ec 3a 	sts	0x3AEC, r24	; 0x803aec <adcTemp>
     f38:	90 93 ed 3a 	sts	0x3AED, r25	; 0x803aed <adcTemp+0x1>
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <__vector_20+0x56>
     f3e:	ee b3       	in	r30, 0x1e	; 30
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     f46:	e7 54       	subi	r30, 0x47	; 71
     f48:	f5 4c       	sbci	r31, 0xC5	; 197
     f4a:	80 83       	st	Z, r24
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <__vector_20+0x56>
     f4e:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <adc0Chg>
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <adc0Chg>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_22>:
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f82:	81 11       	cpse	r24, r1
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__vector_22+0x2a>
     f86:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     f8a:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f8e:	80 93 b4 3a 	sts	0x3AB4, r24	; 0x803ab4 <adcPhot>
     f92:	90 93 b5 3a 	sts	0x3AB5, r25	; 0x803ab5 <adcPhot+0x1>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	10 c0       	rjmp	.+32     	; 0xfba <__vector_22+0x4a>
     f9a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	79 f4       	brne	.+30     	; 0xfc0 <__vector_22+0x50>
     fa2:	88 e0       	ldi	r24, 0x08	; 8
     fa4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     fa8:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     fac:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     fb0:	80 93 b2 3a 	sts	0x3AB2, r24	; 0x803ab2 <adcHall>
     fb4:	90 93 b3 3a 	sts	0x3AB3, r25	; 0x803ab3 <adcHall+0x1>
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <__vector_22+0x70>
     fc0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     fc4:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     fc8:	80 93 ae 3a 	sts	0x3AAE, r24	; 0x803aae <adcBtns>
     fcc:	90 93 af 3a 	sts	0x3AAF, r25	; 0x803aaf <adcBtns+0x1>
     fd0:	8f b3       	in	r24, 0x1f	; 31
     fd2:	8f 30       	cpi	r24, 0x0F	; 15
     fd4:	29 f4       	brne	.+10     	; 0xfe0 <__vector_22+0x70>
     fd6:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     fe0:	8f b3       	in	r24, 0x1f	; 31
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	8f 70       	andi	r24, 0x0F	; 15
     fe8:	99 27       	eor	r25, r25
     fea:	8f bb       	out	0x1f, r24	; 31
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_6>:
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    101c:	81 ff       	sbrs	r24, 1
    101e:	26 c0       	rjmp	.+76     	; 0x106c <__vector_6+0x6c>
    1020:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    1024:	8f 3f       	cpi	r24, 0xFF	; 255
    1026:	29 f0       	breq	.+10     	; 0x1032 <__vector_6+0x32>
    1028:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <buttonMark>
    1032:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1036:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    103a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
    103e:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    1042:	82 96       	adiw	r24, 0x22	; 34
    1044:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__udivmodhi4>
    1048:	80 93 ee 3a 	sts	0x3AEE, r24	; 0x803aee <tmp16bit>
    104c:	90 93 ef 3a 	sts	0x3AEF, r25	; 0x803aef <tmp16bit+0x1>
    1050:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1054:	83 fd       	sbrc	r24, 3
    1056:	fc cf       	rjmp	.-8      	; 0x1050 <__vector_6+0x50>
    1058:	80 91 ee 3a 	lds	r24, 0x3AEE	; 0x803aee <tmp16bit>
    105c:	90 91 ef 3a 	lds	r25, 0x3AEF	; 0x803aef <tmp16bit+0x1>
    1060:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
    1064:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <__vector_6+0x78>
    106c:	80 91 3f 38 	lds	r24, 0x383F	; 0x80383f <minuteMark>
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 3f 38 	sts	0x383F, r24	; 0x80383f <minuteMark>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_7>:
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	8f 93       	push	r24
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    10a6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    10aa:	8f 91       	pop	r24
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <EERead>:
    10b6:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10ba:	91 fd       	sbrc	r25, 1
    10bc:	fc cf       	rjmp	.-8      	; 0x10b6 <EERead>
    10be:	fb 01       	movw	r30, r22
    10c0:	48 0f       	add	r20, r24
    10c2:	84 17       	cp	r24, r20
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <EERead+0x1e>
    10c6:	a8 2f       	mov	r26, r24
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	bc 5e       	subi	r27, 0xEC	; 236
    10cc:	9c 91       	ld	r25, X
    10ce:	91 93       	st	Z+, r25
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	f7 cf       	rjmp	.-18     	; 0x10c2 <EERead+0xc>
    10d4:	08 95       	ret

000010d6 <EEWrite>:
    10d6:	9d e9       	ldi	r25, 0x9D	; 157
    10d8:	24 e0       	ldi	r18, 0x04	; 4
    10da:	33 e0       	ldi	r19, 0x03	; 3
    10dc:	44 23       	and	r20, r20
    10de:	09 f1       	breq	.+66     	; 0x1122 <EEWrite+0x4c>
    10e0:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    10e4:	51 fd       	sbrc	r21, 1
    10e6:	fc cf       	rjmp	.-8      	; 0x10e0 <EEWrite+0xa>
    10e8:	94 bf       	out	0x34, r25	; 52
    10ea:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    10ee:	e8 2f       	mov	r30, r24
    10f0:	58 2f       	mov	r21, r24
    10f2:	5f 71       	andi	r21, 0x1F	; 31
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	db 01       	movw	r26, r22
    10fc:	11 97       	sbiw	r26, 0x01	; 1
    10fe:	ac 91       	ld	r26, X
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	fc 5e       	subi	r31, 0xEC	; 236
    1104:	a0 83       	st	Z, r26
    1106:	41 50       	subi	r20, 0x01	; 1
    1108:	19 f0       	breq	.+6      	; 0x1110 <EEWrite+0x3a>
    110a:	e8 2f       	mov	r30, r24
    110c:	5f 31       	cpi	r21, 0x1F	; 31
    110e:	81 f7       	brne	.-32     	; 0x10f0 <EEWrite+0x1a>
    1110:	94 bf       	out	0x34, r25	; 52
    1112:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    1116:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    111a:	52 ff       	sbrs	r21, 2
    111c:	df cf       	rjmp	.-66     	; 0x10dc <EEWrite+0x6>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	08 95       	ret
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret

00001126 <SerSend>:
    1126:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <serTxDone>
    112a:	22 23       	and	r18, r18
    112c:	59 f0       	breq	.+22     	; 0x1144 <SerSend+0x1e>
    112e:	80 93 b0 3a 	sts	0x3AB0, r24	; 0x803ab0 <serTxAddr>
    1132:	90 93 b1 3a 	sts	0x3AB1, r25	; 0x803ab1 <serTxAddr+0x1>
    1136:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <serTxDone>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	08 95       	ret

00001148 <SerSpeed>:
    1148:	28 2f       	mov	r18, r24
    114a:	81 11       	cpse	r24, r1
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <SerSpeed+0x8>
    114e:	21 e0       	ldi	r18, 0x01	; 1
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	82 1b       	sub	r24, r18
    1156:	91 09       	sbc	r25, r1
    1158:	98 2f       	mov	r25, r24
    115a:	88 27       	eor	r24, r24
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1164:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    1168:	08 95       	ret

0000116a <SelectTSens>:
    116a:	82 e1       	ldi	r24, 0x12	; 18
    116c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1170:	e0 e0       	ldi	r30, 0x00	; 0
    1172:	f6 e0       	ldi	r31, 0x06	; 6
    1174:	80 81       	ld	r24, Z
    1176:	8b 7f       	andi	r24, 0xFB	; 251
    1178:	80 83       	st	Z, r24
    117a:	8e e1       	ldi	r24, 0x1E	; 30
    117c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <adc0Chg>
    1186:	08 95       	ret

00001188 <SelectAuIn>:
    1188:	82 e2       	ldi	r24, 0x22	; 34
    118a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    118e:	e0 e0       	ldi	r30, 0x00	; 0
    1190:	f6 e0       	ldi	r31, 0x06	; 6
    1192:	80 81       	ld	r24, Z
    1194:	84 60       	ori	r24, 0x04	; 4
    1196:	80 83       	st	Z, r24
    1198:	87 e0       	ldi	r24, 0x07	; 7
    119a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <adc0Chg>
    11a4:	08 95       	ret

000011a6 <CheckButtons>:
    11a6:	20 91 ae 3a 	lds	r18, 0x3AAE	; 0x803aae <adcBtns>
    11aa:	30 91 af 3a 	lds	r19, 0x3AAF	; 0x803aaf <adcBtns+0x1>
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	36 95       	lsr	r19
    11b2:	27 95       	ror	r18
    11b4:	9a 95       	dec	r25
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <CheckButtons+0xa>
    11b8:	33 27       	eor	r19, r19
    11ba:	2c 35       	cpi	r18, 0x5C	; 92
    11bc:	31 05       	cpc	r19, r1
    11be:	d0 f4       	brcc	.+52     	; 0x11f4 <CheckButtons+0x4e>
    11c0:	23 35       	cpi	r18, 0x53	; 83
    11c2:	31 05       	cpc	r19, r1
    11c4:	a8 f5       	brcc	.+106    	; 0x1230 <CheckButtons+0x8a>
    11c6:	22 33       	cpi	r18, 0x32	; 50
    11c8:	31 05       	cpc	r19, r1
    11ca:	50 f4       	brcc	.+20     	; 0x11e0 <CheckButtons+0x3a>
    11cc:	2d 32       	cpi	r18, 0x2D	; 45
    11ce:	31 05       	cpc	r19, r1
    11d0:	58 f5       	brcc	.+86     	; 0x1228 <CheckButtons+0x82>
    11d2:	23 52       	subi	r18, 0x23	; 35
    11d4:	31 09       	sbc	r19, r1
    11d6:	25 30       	cpi	r18, 0x05	; 5
    11d8:	31 05       	cpc	r19, r1
    11da:	80 f5       	brcc	.+96     	; 0x123c <CheckButtons+0x96>
    11dc:	9c e0       	ldi	r25, 0x0C	; 12
    11de:	2f c0       	rjmp	.+94     	; 0x123e <CheckButtons+0x98>
    11e0:	27 33       	cpi	r18, 0x37	; 55
    11e2:	31 05       	cpc	r19, r1
    11e4:	18 f1       	brcs	.+70     	; 0x122c <CheckButtons+0x86>
    11e6:	2e 53       	subi	r18, 0x3E	; 62
    11e8:	31 09       	sbc	r19, r1
    11ea:	27 30       	cpi	r18, 0x07	; 7
    11ec:	31 05       	cpc	r19, r1
    11ee:	30 f5       	brcc	.+76     	; 0x123c <CheckButtons+0x96>
    11f0:	96 e0       	ldi	r25, 0x06	; 6
    11f2:	25 c0       	rjmp	.+74     	; 0x123e <CheckButtons+0x98>
    11f4:	2a 38       	cpi	r18, 0x8A	; 138
    11f6:	31 05       	cpc	r19, r1
    11f8:	50 f4       	brcc	.+20     	; 0x120e <CheckButtons+0x68>
    11fa:	29 37       	cpi	r18, 0x79	; 121
    11fc:	31 05       	cpc	r19, r1
    11fe:	d0 f4       	brcc	.+52     	; 0x1234 <CheckButtons+0x8e>
    1200:	23 56       	subi	r18, 0x63	; 99
    1202:	31 09       	sbc	r19, r1
    1204:	2b 30       	cpi	r18, 0x0B	; 11
    1206:	31 05       	cpc	r19, r1
    1208:	c8 f4       	brcc	.+50     	; 0x123c <CheckButtons+0x96>
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	18 c0       	rjmp	.+48     	; 0x123e <CheckButtons+0x98>
    120e:	22 3a       	cpi	r18, 0xA2	; 162
    1210:	31 05       	cpc	r19, r1
    1212:	a0 f0       	brcs	.+40     	; 0x123c <CheckButtons+0x96>
    1214:	2b 3b       	cpi	r18, 0xBB	; 187
    1216:	31 05       	cpc	r19, r1
    1218:	78 f0       	brcs	.+30     	; 0x1238 <CheckButtons+0x92>
    121a:	20 5f       	subi	r18, 0xF0	; 240
    121c:	31 09       	sbc	r19, r1
    121e:	20 31       	cpi	r18, 0x10	; 16
    1220:	31 05       	cpc	r19, r1
    1222:	60 f4       	brcc	.+24     	; 0x123c <CheckButtons+0x96>
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0b c0       	rjmp	.+22     	; 0x123e <CheckButtons+0x98>
    1228:	99 e0       	ldi	r25, 0x09	; 9
    122a:	09 c0       	rjmp	.+18     	; 0x123e <CheckButtons+0x98>
    122c:	98 e0       	ldi	r25, 0x08	; 8
    122e:	07 c0       	rjmp	.+14     	; 0x123e <CheckButtons+0x98>
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	05 c0       	rjmp	.+10     	; 0x123e <CheckButtons+0x98>
    1234:	92 e0       	ldi	r25, 0x02	; 2
    1236:	03 c0       	rjmp	.+6      	; 0x123e <CheckButtons+0x98>
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	01 c0       	rjmp	.+2      	; 0x123e <CheckButtons+0x98>
    123c:	9f e0       	ldi	r25, 0x0F	; 15
    123e:	28 2f       	mov	r18, r24
    1240:	2f 70       	andi	r18, 0x0F	; 15
    1242:	92 13       	cpse	r25, r18
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <CheckButtons+0xac>
    1246:	98 2f       	mov	r25, r24
    1248:	90 7f       	andi	r25, 0xF0	; 240
    124a:	90 3f       	cpi	r25, 0xF0	; 240
    124c:	39 f0       	breq	.+14     	; 0x125c <CheckButtons+0xb6>
    124e:	80 5f       	subi	r24, 0xF0	; 240
    1250:	08 95       	ret
    1252:	99 23       	and	r25, r25
    1254:	11 f0       	breq	.+4      	; 0x125a <CheckButtons+0xb4>
    1256:	89 2f       	mov	r24, r25
    1258:	08 95       	ret
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	08 95       	ret

0000125e <lfsr>:
    125e:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <state.3883>
    1262:	90 91 1f 38 	lds	r25, 0x381F	; 0x80381f <state.3883+0x1>
    1266:	9c 01       	movw	r18, r24
    1268:	32 2f       	mov	r19, r18
    126a:	22 27       	eor	r18, r18
    126c:	32 95       	swap	r19
    126e:	33 0f       	add	r19, r19
    1270:	30 7e       	andi	r19, 0xE0	; 224
    1272:	82 27       	eor	r24, r18
    1274:	93 27       	eor	r25, r19
    1276:	9c 01       	movw	r18, r24
    1278:	23 2f       	mov	r18, r19
    127a:	33 27       	eor	r19, r19
    127c:	26 95       	lsr	r18
    127e:	82 27       	eor	r24, r18
    1280:	93 27       	eor	r25, r19
    1282:	9c 01       	movw	r18, r24
    1284:	36 95       	lsr	r19
    1286:	32 2f       	mov	r19, r18
    1288:	22 27       	eor	r18, r18
    128a:	37 95       	ror	r19
    128c:	27 95       	ror	r18
    128e:	82 27       	eor	r24, r18
    1290:	93 27       	eor	r25, r19
    1292:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <state.3883>
    1296:	90 93 1f 38 	sts	0x381F, r25	; 0x80381f <state.3883+0x1>
    129a:	08 95       	ret

0000129c <floatSpeed>:
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	7b 01       	movw	r14, r22
    12ac:	8a 01       	movw	r16, r20
    12ae:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    12b2:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    12b6:	e8 2f       	mov	r30, r24
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	31 97       	sbiw	r30, 0x01	; 1
    12bc:	e7 70       	andi	r30, 0x07	; 7
    12be:	ff 27       	eor	r31, r31
    12c0:	e0 5e       	subi	r30, 0xE0	; 224
    12c2:	f7 4c       	sbci	r31, 0xC7	; 199
    12c4:	d0 80       	ld	r13, Z
    12c6:	cb df       	rcall	.-106    	; 0x125e <lfsr>
    12c8:	8d 21       	and	r24, r13
    12ca:	c8 0f       	add	r28, r24
    12cc:	d1 1d       	adc	r29, r1
    12ce:	c7 df       	rcall	.-114    	; 0x125e <lfsr>
    12d0:	8d 21       	and	r24, r13
    12d2:	c8 1b       	sub	r28, r24
    12d4:	d1 09       	sbc	r29, r1
    12d6:	0c 17       	cp	r16, r28
    12d8:	1d 07       	cpc	r17, r29
    12da:	08 f4       	brcc	.+2      	; 0x12de <floatSpeed+0x42>
    12dc:	e8 01       	movw	r28, r16
    12de:	c7 01       	movw	r24, r14
    12e0:	ec 16       	cp	r14, r28
    12e2:	fd 06       	cpc	r15, r29
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <floatSpeed+0x4c>
    12e6:	ce 01       	movw	r24, r28
    12e8:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    12ec:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	08 95       	ret

00001300 <floatAround>:
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	c8 2f       	mov	r28, r24
    130a:	d4 2f       	mov	r29, r20
    130c:	02 2f       	mov	r16, r18
    130e:	e6 2f       	mov	r30, r22
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	31 97       	sbiw	r30, 0x01	; 1
    1314:	e7 70       	andi	r30, 0x07	; 7
    1316:	ff 27       	eor	r31, r31
    1318:	e0 5e       	subi	r30, 0xE0	; 224
    131a:	f7 4c       	sbci	r31, 0xC7	; 199
    131c:	10 81       	ld	r17, Z
    131e:	9f df       	rcall	.-194    	; 0x125e <lfsr>
    1320:	81 23       	and	r24, r17
    1322:	c8 0f       	add	r28, r24
    1324:	9c df       	rcall	.-200    	; 0x125e <lfsr>
    1326:	81 23       	and	r24, r17
    1328:	c8 1b       	sub	r28, r24
    132a:	8c 2f       	mov	r24, r28
    132c:	00 23       	and	r16, r16
    132e:	41 f0       	breq	.+16     	; 0x1340 <floatAround+0x40>
    1330:	9c 2f       	mov	r25, r28
    1332:	0c 17       	cp	r16, r28
    1334:	08 f4       	brcc	.+2      	; 0x1338 <floatAround+0x38>
    1336:	90 2f       	mov	r25, r16
    1338:	8d 2f       	mov	r24, r29
    133a:	d9 17       	cp	r29, r25
    133c:	08 f4       	brcc	.+2      	; 0x1340 <floatAround+0x40>
    133e:	89 2f       	mov	r24, r25
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	8d 17       	cp	r24, r29
    1346:	10 f0       	brcs	.+4      	; 0x134c <floatAround+0x4c>
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	2d 2f       	mov	r18, r29
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	24 23       	and	r18, r20
    1352:	35 23       	and	r19, r21
    1354:	23 2b       	or	r18, r19
    1356:	09 f0       	breq	.+2      	; 0x135a <floatAround+0x5a>
    1358:	8d 2f       	mov	r24, r29
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	08 95       	ret

00001364 <SaveGameState>:
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	64 97       	sbiw	r28, 0x14	; 20
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	44 e1       	ldi	r20, 0x14	; 20
    137e:	be 01       	movw	r22, r28
    1380:	6f 5f       	subi	r22, 0xFF	; 255
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	97 de       	rcall	.-722    	; 0x10b6 <EERead>
    1388:	88 e5       	ldi	r24, 0x58	; 88
    138a:	c8 2e       	mov	r12, r24
    138c:	8a e3       	ldi	r24, 0x3A	; 58
    138e:	d8 2e       	mov	r13, r24
    1390:	8e 01       	movw	r16, r28
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	f1 2c       	mov	r15, r1
    1398:	f8 01       	movw	r30, r16
    139a:	81 91       	ld	r24, Z+
    139c:	8f 01       	movw	r16, r30
    139e:	f6 01       	movw	r30, r12
    13a0:	90 81       	ld	r25, Z
    13a2:	98 13       	cpse	r25, r24
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <SaveGameState+0x52>
    13a6:	f3 94       	inc	r15
    13a8:	ff ef       	ldi	r31, 0xFF	; 255
    13aa:	cf 1a       	sub	r12, r31
    13ac:	df 0a       	sbc	r13, r31
    13ae:	80 e1       	ldi	r24, 0x10	; 16
    13b0:	f8 12       	cpse	r15, r24
    13b2:	f2 cf       	rjmp	.-28     	; 0x1398 <SaveGameState+0x34>
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <SaveGameState+0x62>
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	b6 01       	movw	r22, r12
    13ba:	8f 2d       	mov	r24, r15
    13bc:	8c de       	rcall	.-744    	; 0x10d6 <EEWrite>
    13be:	88 23       	and	r24, r24
    13c0:	91 f3       	breq	.-28     	; 0x13a6 <SaveGameState+0x42>
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	36 c0       	rjmp	.+108    	; 0x1432 <SaveGameState+0xce>
    13c6:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <inventory>
    13ca:	30 91 3b 38 	lds	r19, 0x383B	; 0x80383b <inventory+0x1>
    13ce:	30 93 68 3a 	sts	0x3A68, r19	; 0x803a68 <gameState+0x10>
    13d2:	20 93 69 3a 	sts	0x3A69, r18	; 0x803a69 <gameState+0x11>
    13d6:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    13da:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    13de:	90 93 6a 3a 	sts	0x3A6A, r25	; 0x803a6a <gameState+0x12>
    13e2:	80 93 6b 3a 	sts	0x3A6B, r24	; 0x803a6b <gameState+0x13>
    13e6:	89 89       	ldd	r24, Y+17	; 0x11
    13e8:	9a 89       	ldd	r25, Y+18	; 0x12
    13ea:	98 27       	eor	r25, r24
    13ec:	89 27       	eor	r24, r25
    13ee:	98 27       	eor	r25, r24
    13f0:	28 17       	cp	r18, r24
    13f2:	39 07       	cpc	r19, r25
    13f4:	69 f4       	brne	.+26     	; 0x1410 <SaveGameState+0xac>
    13f6:	8b 89       	ldd	r24, Y+19	; 0x13
    13f8:	9c 89       	ldd	r25, Y+20	; 0x14
    13fa:	98 27       	eor	r25, r24
    13fc:	89 27       	eor	r24, r25
    13fe:	98 27       	eor	r25, r24
    1400:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <inventory+0x2>
    1404:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <inventory+0x3>
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	49 f4       	brne	.+18     	; 0x1420 <SaveGameState+0xbc>
    140e:	10 c0       	rjmp	.+32     	; 0x1430 <SaveGameState+0xcc>
    1410:	42 e0       	ldi	r20, 0x02	; 2
    1412:	68 e6       	ldi	r22, 0x68	; 104
    1414:	7a e3       	ldi	r23, 0x3A	; 58
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	5e de       	rcall	.-836    	; 0x10d6 <EEWrite>
    141a:	88 23       	and	r24, r24
    141c:	61 f3       	breq	.-40     	; 0x13f6 <SaveGameState+0x92>
    141e:	d1 cf       	rjmp	.-94     	; 0x13c2 <SaveGameState+0x5e>
    1420:	42 e0       	ldi	r20, 0x02	; 2
    1422:	6a e6       	ldi	r22, 0x6A	; 106
    1424:	7a e3       	ldi	r23, 0x3A	; 58
    1426:	82 e1       	ldi	r24, 0x12	; 18
    1428:	56 de       	rcall	.-852    	; 0x10d6 <EEWrite>
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	81 11       	cpse	r24, r1
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <SaveGameState+0xce>
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	89 2f       	mov	r24, r25
    1434:	64 96       	adiw	r28, 0x14	; 20
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	08 95       	ret

0000144a <ReadStatusBit>:
    144a:	e8 2f       	mov	r30, r24
    144c:	ef 77       	andi	r30, 0x7F	; 127
    144e:	e6 95       	lsr	r30
    1450:	e6 95       	lsr	r30
    1452:	e6 95       	lsr	r30
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	e8 5a       	subi	r30, 0xA8	; 168
    1458:	f5 4c       	sbci	r31, 0xC5	; 197
    145a:	20 81       	ld	r18, Z
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	87 70       	andi	r24, 0x07	; 7
    1460:	a9 01       	movw	r20, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <ReadStatusBit+0x1e>
    1464:	55 95       	asr	r21
    1466:	47 95       	ror	r20
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <ReadStatusBit+0x1a>
    146c:	ca 01       	movw	r24, r20
    146e:	81 70       	andi	r24, 0x01	; 1
    1470:	08 95       	ret

00001472 <WriteStatusBit>:
    1472:	e8 2f       	mov	r30, r24
    1474:	ef 77       	andi	r30, 0x7F	; 127
    1476:	e6 95       	lsr	r30
    1478:	e6 95       	lsr	r30
    147a:	e6 95       	lsr	r30
    147c:	28 2f       	mov	r18, r24
    147e:	27 70       	andi	r18, 0x07	; 7
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	e8 5a       	subi	r30, 0xA8	; 168
    1484:	f5 4c       	sbci	r31, 0xC5	; 197
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	01 c0       	rjmp	.+2      	; 0x148e <WriteStatusBit+0x1c>
    148c:	88 0f       	add	r24, r24
    148e:	2a 95       	dec	r18
    1490:	ea f7       	brpl	.-6      	; 0x148c <WriteStatusBit+0x1a>
    1492:	66 23       	and	r22, r22
    1494:	19 f0       	breq	.+6      	; 0x149c <WriteStatusBit+0x2a>
    1496:	90 81       	ld	r25, Z
    1498:	89 2b       	or	r24, r25
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <WriteStatusBit+0x30>
    149c:	80 95       	com	r24
    149e:	90 81       	ld	r25, Z
    14a0:	89 23       	and	r24, r25
    14a2:	80 83       	st	Z, r24
    14a4:	08 95       	ret

000014a6 <UpdateState>:
    14a6:	98 2f       	mov	r25, r24
    14a8:	8f 77       	andi	r24, 0x7F	; 127
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <UpdateState+0x12>
    14ac:	97 ff       	sbrs	r25, 7
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <UpdateState+0xe>
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <UpdateState+0x10>
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	dd cf       	rjmp	.-70     	; 0x1472 <WriteStatusBit>
    14b8:	08 95       	ret

000014ba <CheckState>:
    14ba:	cf 93       	push	r28
    14bc:	c8 2f       	mov	r28, r24
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	c4 df       	rcall	.-120    	; 0x144a <ReadStatusBit>
    14c2:	2c 2f       	mov	r18, r28
    14c4:	22 1f       	adc	r18, r18
    14c6:	22 27       	eor	r18, r18
    14c8:	22 1f       	adc	r18, r18
    14ca:	91 e0       	ldi	r25, 0x01	; 1
    14cc:	81 11       	cpse	r24, r1
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <CheckState+0x18>
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	82 2f       	mov	r24, r18
    14d4:	89 27       	eor	r24, r25
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <getID>:
    14da:	e3 e0       	ldi	r30, 0x03	; 3
    14dc:	f1 e1       	ldi	r31, 0x11	; 17
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	91 91       	ld	r25, Z+
    14e2:	89 0f       	add	r24, r25
    14e4:	ed 30       	cpi	r30, 0x0D	; 13
    14e6:	91 e1       	ldi	r25, 0x11	; 17
    14e8:	f9 07       	cpc	r31, r25
    14ea:	d1 f7       	brne	.-12     	; 0x14e0 <getID+0x6>
    14ec:	83 70       	andi	r24, 0x03	; 3
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <whoami>
    14f4:	08 95       	ret

000014f6 <Reset>:
    14f6:	e8 e5       	ldi	r30, 0x58	; 88
    14f8:	fa e3       	ldi	r31, 0x3A	; 58
    14fa:	11 92       	st	Z+, r1
    14fc:	8a e3       	ldi	r24, 0x3A	; 58
    14fe:	ec 36       	cpi	r30, 0x6C	; 108
    1500:	f8 07       	cpc	r31, r24
    1502:	d9 f7       	brne	.-10     	; 0x14fa <Reset+0x4>
    1504:	ea df       	rcall	.-44     	; 0x14da <getID>
    1506:	81 11       	cpse	r24, r1
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <Reset+0x1c>
    150a:	80 91 65 3a 	lds	r24, 0x3A65	; 0x803a65 <gameState+0xd>
    150e:	80 64       	ori	r24, 0x40	; 64
    1510:	05 c0       	rjmp	.+10     	; 0x151c <Reset+0x26>
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	31 f4       	brne	.+12     	; 0x1522 <Reset+0x2c>
    1516:	80 91 65 3a 	lds	r24, 0x3A65	; 0x803a65 <gameState+0xd>
    151a:	80 68       	ori	r24, 0x80	; 128
    151c:	80 93 65 3a 	sts	0x3A65, r24	; 0x803a65 <gameState+0xd>
    1520:	0d c0       	rjmp	.+26     	; 0x153c <Reset+0x46>
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	21 f4       	brne	.+8      	; 0x152e <Reset+0x38>
    1526:	80 91 66 3a 	lds	r24, 0x3A66	; 0x803a66 <gameState+0xe>
    152a:	81 60       	ori	r24, 0x01	; 1
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <Reset+0x42>
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	29 f4       	brne	.+10     	; 0x153c <Reset+0x46>
    1532:	80 91 66 3a 	lds	r24, 0x3A66	; 0x803a66 <gameState+0xe>
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	80 93 66 3a 	sts	0x3A66, r24	; 0x803a66 <gameState+0xe>
    153c:	80 91 58 3a 	lds	r24, 0x3A58	; 0x803a58 <gameState>
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	80 93 58 3a 	sts	0x3A58, r24	; 0x803a58 <gameState>
    1546:	08 95       	ret

00001548 <LoadGameState>:
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	44 e1       	ldi	r20, 0x14	; 20
    154e:	68 e5       	ldi	r22, 0x58	; 88
    1550:	7a e3       	ldi	r23, 0x3A	; 58
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	b0 dd       	rcall	.-1184   	; 0x10b6 <EERead>
    1556:	ce e6       	ldi	r28, 0x6E	; 110
    1558:	d0 e0       	ldi	r29, 0x00	; 0
    155a:	8c 2f       	mov	r24, r28
    155c:	76 df       	rcall	.-276    	; 0x144a <ReadStatusBit>
    155e:	d8 0f       	add	r29, r24
    1560:	cf 5f       	subi	r28, 0xFF	; 255
    1562:	c2 37       	cpi	r28, 0x72	; 114
    1564:	d1 f7       	brne	.-12     	; 0x155a <LoadGameState+0x12>
    1566:	d1 30       	cpi	r29, 0x01	; 1
    1568:	11 f0       	breq	.+4      	; 0x156e <LoadGameState+0x26>
    156a:	c5 df       	rcall	.-118    	; 0x14f6 <Reset>
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <LoadGameState+0x28>
    156e:	b5 df       	rcall	.-150    	; 0x14da <getID>
    1570:	80 91 68 3a 	lds	r24, 0x3A68	; 0x803a68 <gameState+0x10>
    1574:	90 91 69 3a 	lds	r25, 0x3A69	; 0x803a69 <gameState+0x11>
    1578:	98 27       	eor	r25, r24
    157a:	89 27       	eor	r24, r25
    157c:	98 27       	eor	r25, r24
    157e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <inventory>
    1582:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <inventory+0x1>
    1586:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <gameState+0x12>
    158a:	90 91 6b 3a 	lds	r25, 0x3A6B	; 0x803a6b <gameState+0x13>
    158e:	98 27       	eor	r25, r24
    1590:	89 27       	eor	r24, r25
    1592:	98 27       	eor	r25, r24
    1594:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <inventory+0x2>
    1598:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <inventory+0x3>
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <HotSummer>:
    15a2:	cf 93       	push	r28
    15a4:	86 e7       	ldi	r24, 0x76	; 118
    15a6:	89 df       	rcall	.-238    	; 0x14ba <CheckState>
    15a8:	c8 2f       	mov	r28, r24
    15aa:	88 23       	and	r24, r24
    15ac:	81 f0       	breq	.+32     	; 0x15ce <HotSummer+0x2c>
    15ae:	e0 91 89 ba 	lds	r30, 0xBA89	; 0x80ba89 <__bss_end+0x7f78>
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	ef 53       	subi	r30, 0x3F	; 63
    15b6:	f5 4c       	sbci	r31, 0xC5	; 197
    15b8:	10 82       	st	Z, r1
    15ba:	e0 91 88 ba 	lds	r30, 0xBA88	; 0x80ba88 <__bss_end+0x7f77>
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    15c4:	ef 53       	subi	r30, 0x3F	; 63
    15c6:	f5 4c       	sbci	r31, 0xC5	; 197
    15c8:	80 83       	st	Z, r24
    15ca:	c1 e0       	ldi	r28, 0x01	; 1
    15cc:	4c c0       	rjmp	.+152    	; 0x1666 <HotSummer+0xc4>
    15ce:	85 e7       	ldi	r24, 0x75	; 117
    15d0:	74 df       	rcall	.-280    	; 0x14ba <CheckState>
    15d2:	88 23       	and	r24, r24
    15d4:	59 f1       	breq	.+86     	; 0x162c <HotSummer+0x8a>
    15d6:	e0 91 89 ba 	lds	r30, 0xBA89	; 0x80ba89 <__bss_end+0x7f78>
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    15e0:	ef 53       	subi	r30, 0x3F	; 63
    15e2:	f5 4c       	sbci	r31, 0xC5	; 197
    15e4:	80 83       	st	Z, r24
    15e6:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <cooledDown.3942>
    15ea:	88 23       	and	r24, r24
    15ec:	79 f0       	breq	.+30     	; 0x160c <HotSummer+0x6a>
    15ee:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <calTemp>
    15f2:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <calTemp+0x1>
    15f6:	20 91 ec 3a 	lds	r18, 0x3AEC	; 0x803aec <adcTemp>
    15fa:	30 91 ed 3a 	lds	r19, 0x3AED	; 0x803aed <adcTemp+0x1>
    15fe:	80 96       	adiw	r24, 0x20	; 32
    1600:	28 17       	cp	r18, r24
    1602:	39 07       	cpc	r19, r25
    1604:	18 f0       	brcs	.+6      	; 0x160c <HotSummer+0x6a>
    1606:	86 e7       	ldi	r24, 0x76	; 118
    1608:	4e df       	rcall	.-356    	; 0x14a6 <UpdateState>
    160a:	2d c0       	rjmp	.+90     	; 0x1666 <HotSummer+0xc4>
    160c:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <calTemp>
    1610:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <calTemp+0x1>
    1614:	20 91 ec 3a 	lds	r18, 0x3AEC	; 0x803aec <adcTemp>
    1618:	30 91 ed 3a 	lds	r19, 0x3AED	; 0x803aed <adcTemp+0x1>
    161c:	08 96       	adiw	r24, 0x08	; 8
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	08 f1       	brcs	.+66     	; 0x1666 <HotSummer+0xc4>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <cooledDown.3942>
    162a:	1d c0       	rjmp	.+58     	; 0x1666 <HotSummer+0xc4>
    162c:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <calTemp>
    1630:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <calTemp+0x1>
    1634:	89 2b       	or	r24, r25
    1636:	41 f4       	brne	.+16     	; 0x1648 <HotSummer+0xa6>
    1638:	80 91 ec 3a 	lds	r24, 0x3AEC	; 0x803aec <adcTemp>
    163c:	90 91 ed 3a 	lds	r25, 0x3AED	; 0x803aed <adcTemp+0x1>
    1640:	80 93 b7 3a 	sts	0x3AB7, r24	; 0x803ab7 <calTemp>
    1644:	90 93 b8 3a 	sts	0x3AB8, r25	; 0x803ab8 <calTemp+0x1>
    1648:	80 91 b7 3a 	lds	r24, 0x3AB7	; 0x803ab7 <calTemp>
    164c:	90 91 b8 3a 	lds	r25, 0x3AB8	; 0x803ab8 <calTemp+0x1>
    1650:	20 91 ec 3a 	lds	r18, 0x3AEC	; 0x803aec <adcTemp>
    1654:	30 91 ed 3a 	lds	r19, 0x3AED	; 0x803aed <adcTemp+0x1>
    1658:	80 96       	adiw	r24, 0x20	; 32
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	18 f0       	brcs	.+6      	; 0x1666 <HotSummer+0xc4>
    1660:	85 e7       	ldi	r24, 0x75	; 117
    1662:	21 df       	rcall	.-446    	; 0x14a6 <UpdateState>
    1664:	c0 e0       	ldi	r28, 0x00	; 0
    1666:	8c 2f       	mov	r24, r28
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <GenerateAudio>:


uint8_t GenerateAudio(){
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29

    if (auIn[AULEN>>1] < HPLVL) {
    1674:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <auIn+0x4>
    1678:	89 31       	cpi	r24, 0x19	; 25
    167a:	08 f0       	brcs	.+2      	; 0x167e <GenerateAudio+0x12>
    167c:	cf c0       	rjmp	.+414    	; 0x181c <GenerateAudio+0x1b0>

        detHdPh = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 93 b6 3a 	sts	0x3AB6, r24	; 0x803ab6 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1684:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1688:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    168c:	88 27       	eor	r24, r24
    168e:	89 2b       	or	r24, r25
    1690:	09 f0       	breq	.+2      	; 0x1694 <GenerateAudio+0x28>
    1692:	c6 c0       	rjmp	.+396    	; 0x1820 <GenerateAudio+0x1b4>

            //Silence
            if ((effect&0xE0)==0){
    1694:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1698:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    169c:	80 7e       	andi	r24, 0xE0	; 224
    169e:	99 27       	eor	r25, r25
    16a0:	89 2b       	or	r24, r25
    16a2:	31 f4       	brne	.+12     	; 0x16b0 <GenerateAudio+0x44>
                auRepAddr = &zero;
    16a4:	84 e3       	ldi	r24, 0x34	; 52
    16a6:	98 e3       	ldi	r25, 0x38	; 56
    16a8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    16ac:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    16b0:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    16b4:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    16b8:	80 7e       	andi	r24, 0xE0	; 224
    16ba:	99 27       	eor	r25, r25
    16bc:	80 97       	sbiw	r24, 0x20	; 32
    16be:	09 f0       	breq	.+2      	; 0x16c2 <GenerateAudio+0x56>
    16c0:	59 c0       	rjmp	.+178    	; 0x1774 <GenerateAudio+0x108>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t loudness, duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	52 e2       	ldi	r21, 0x22	; 34
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e2       	ldi	r23, 0x20	; 32
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	e7 dd       	rcall	.-1074   	; 0x129c <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	65 e0       	ldi	r22, 0x05	; 5
    16d4:	80 e8       	ldi	r24, 0x80	; 128
    16d6:	14 de       	rcall	.-984    	; 0x1300 <floatAround>
    16d8:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <auBuffer.3952+0x2>

                if (buttonMark) {
    16dc:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    16e0:	88 23       	and	r24, r24
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <GenerateAudio+0x7a>
    16e4:	47 c0       	rjmp	.+142    	; 0x1774 <GenerateAudio+0x108>
                    if (start == 0) {
    16e6:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <start.3955>
    16ea:	81 11       	cpse	r24, r1
    16ec:	15 c0       	rjmp	.+42     	; 0x1718 <GenerateAudio+0xac>
                        duration = 4;
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <duration.3954>
                        loudness = 0xff;
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <loudness.3953>
                        TCB1_CCMP = 0x2000;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e2       	ldi	r25, 0x20	; 32
    16fe:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1702:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1706:	8d e0       	ldi	r24, 0x0D	; 13
    1708:	98 e3       	ldi	r25, 0x38	; 56
    170a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    170e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        start = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	80 93 51 38 	sts	0x3851, r24	; 0x803851 <start.3955>
                    }

                    if (loudness) {
    1718:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <loudness.3953>
    171c:	88 23       	and	r24, r24
    171e:	69 f0       	breq	.+26     	; 0x173a <GenerateAudio+0xce>
                        auVolume = loudness;
    1720:	80 93 ad 3a 	sts	0x3AAD, r24	; 0x803aad <auVolume>
                        if (duration) duration--; else loudness >>= 1;
    1724:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <duration.3954>
    1728:	99 23       	and	r25, r25
    172a:	21 f0       	breq	.+8      	; 0x1734 <GenerateAudio+0xc8>
    172c:	91 50       	subi	r25, 0x01	; 1
    172e:	90 93 50 38 	sts	0x3850, r25	; 0x803850 <duration.3954>
    1732:	03 c0       	rjmp	.+6      	; 0x173a <GenerateAudio+0xce>
    1734:	86 95       	lsr	r24
    1736:	80 93 4f 38 	sts	0x384F, r24	; 0x80384f <loudness.3953>
                    } 

                    if (loudness == 0) {
    173a:	80 91 4f 38 	lds	r24, 0x384F	; 0x80384f <loudness.3953>
    173e:	81 11       	cpse	r24, r1
    1740:	19 c0       	rjmp	.+50     	; 0x1774 <GenerateAudio+0x108>
                        effect &= 0x10;
    1742:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1746:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    174a:	80 71       	andi	r24, 0x10	; 16
    174c:	99 27       	eor	r25, r25
    174e:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    1752:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                        auRepAddr = &zero;
    1756:	84 e3       	ldi	r24, 0x34	; 52
    1758:	98 e3       	ldi	r25, 0x38	; 56
    175a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    175e:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
                        auSmpAddr = &zero;
    1762:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <auSmpAddr>
    1766:	90 93 08 38 	sts	0x3808, r25	; 0x803808 <auSmpAddr+0x1>
                        auVolume = 0xff;
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	80 93 ad 3a 	sts	0x3AAD, r24	; 0x803aad <auVolume>
                        start = 0;
    1770:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <start.3955>
                    }
                }
            }

            //Good (bell)
            if ((effect&0xE0)==64){
    1774:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1778:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
                //auBuffer = 
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    177c:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1780:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    1784:	80 7e       	andi	r24, 0xE0	; 224
    1786:	99 27       	eor	r25, r25
    1788:	80 36       	cpi	r24, 0x60	; 96
    178a:	91 05       	cpc	r25, r1
    178c:	d1 f5       	brne	.+116    	; 0x1802 <GenerateAudio+0x196>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    178e:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <auBuffer.3956+0x6>
                auRepAddr = &auBuffer[0];
    1792:	88 e4       	ldi	r24, 0x48	; 72
    1794:	98 e3       	ldi	r25, 0x38	; 56
    1796:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auRepAddr>
    179a:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auRepAddr+0x1>
    179e:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    17a0:	c1 e0       	ldi	r28, 0x01	; 1
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    17a2:	d3 e0       	ldi	r29, 0x03	; 3
    17a4:	8c 2f       	mov	r24, r28
    17a6:	6d 2f       	mov	r22, r29
    17a8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__udivmodqi4>
    17ac:	99 23       	and	r25, r25
    17ae:	39 f0       	breq	.+14     	; 0x17be <GenerateAudio+0x152>
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	65 e0       	ldi	r22, 0x05	; 5
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	a3 dd       	rcall	.-1210   	; 0x1300 <floatAround>
    17ba:	f8 01       	movw	r30, r16
    17bc:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    17be:	cf 5f       	subi	r28, 0xFF	; 255
    17c0:	0f 5f       	subi	r16, 0xFF	; 255
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	c6 30       	cpi	r28, 0x06	; 6
    17c6:	71 f7       	brne	.-36     	; 0x17a4 <GenerateAudio+0x138>
                    if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    17c8:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
    17cc:	88 23       	and	r24, r24
    17ce:	c9 f0       	breq	.+50     	; 0x1802 <GenerateAudio+0x196>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	54 e0       	ldi	r21, 0x04	; 4
    17d4:	60 e8       	ldi	r22, 0x80	; 128
    17d6:	72 e0       	ldi	r23, 0x02	; 2
    17d8:	85 e0       	ldi	r24, 0x05	; 5
    17da:	60 dd       	rcall	.-1344   	; 0x129c <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    17dc:	80 91 ad 3a 	lds	r24, 0x3AAD	; 0x803aad <auVolume>
    17e0:	20 ea       	ldi	r18, 0xA0	; 160
    17e2:	40 e1       	ldi	r20, 0x10	; 16
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	8c dd       	rcall	.-1256   	; 0x1300 <floatAround>
    17e8:	80 93 ad 3a 	sts	0x3AAD, r24	; 0x803aad <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    17ec:	20 e9       	ldi	r18, 0x90	; 144
    17ee:	40 e7       	ldi	r20, 0x70	; 112
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <auBuffer.3956>
    17f6:	84 dd       	rcall	.-1272   	; 0x1300 <floatAround>
    17f8:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <auBuffer.3956>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    17fc:	80 95       	com	r24
    17fe:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <auBuffer.3956+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1802:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1806:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>

            }

            //
            if ((effect&0xE0)==160){
    180a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    180e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>

            }

            //
            if ((effect&0xE0)==192){
    1812:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    1816:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GenerateAudio+0x1b4>
            //
            else {
            }
        }
    } else {
        detHdPh = 0;
    181c:	10 92 b6 3a 	sts	0x3AB6, r1	; 0x803ab6 <detHdPh>
    }
    return buttonMark;
    1820:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <buttonMark>
}
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret

0000182e <getClock>:

uint16_t getClock() {
    return 60 * minuteMark + (RTC_CNT>>9);
    182e:	20 91 3f 38 	lds	r18, 0x383F	; 0x80383f <minuteMark>
    1832:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1836:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    183a:	89 2f       	mov	r24, r25
    183c:	99 27       	eor	r25, r25
    183e:	86 95       	lsr	r24
}
    1840:	3c e3       	ldi	r19, 0x3C	; 60
    1842:	23 9f       	mul	r18, r19
    1844:	80 0d       	add	r24, r0
    1846:	91 1d       	adc	r25, r1
    1848:	11 24       	eor	r1, r1
    184a:	08 95       	ret

0000184c <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	8c 01       	movw	r16, r24
    1856:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1858:	ea df       	rcall	.-44     	; 0x182e <getClock>
    185a:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    185c:	80 17       	cp	r24, r16
    185e:	91 07       	cpc	r25, r17
    1860:	08 f4       	brcc	.+2      	; 0x1864 <idleTimeout+0x18>
        curClock += 256 * 60;
    1862:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1864:	c0 0f       	add	r28, r16
    1866:	d1 1f       	adc	r29, r17
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	c2 17       	cp	r28, r18
    186c:	d3 07       	cpc	r29, r19
    186e:	08 f0       	brcs	.+2      	; 0x1872 <idleTimeout+0x26>
    1870:	80 e0       	ldi	r24, 0x00	; 0
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <simonLed>:

void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ea e8       	ldi	r30, 0x8A	; 138
    1882:	fa eb       	ldi	r31, 0xBA	; 186
    1884:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1886:	a5 81       	ldd	r26, Z+5	; 0x05
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	af 53       	subi	r26, 0x3F	; 63
    188c:	b5 4c       	sbci	r27, 0xC5	; 197
    188e:	1c 92       	st	X, r1
    1890:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1892:	a8 81       	ld	r26, Y
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	af 53       	subi	r26, 0x3F	; 63
    1898:	b5 4c       	sbci	r27, 0xC5	; 197
    189a:	1c 92       	st	X, r1
void simonTone(uint8_t val) {
    // TODO some way to set teh audio stuff
}

void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    189c:	9a eb       	ldi	r25, 0xBA	; 186
    189e:	ef 38       	cpi	r30, 0x8F	; 143
    18a0:	f9 07       	cpc	r31, r25
    18a2:	81 f7       	brne	.-32     	; 0x1884 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 1) {
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	99 f4       	brne	.+38     	; 0x18ce <simonLed+0x52>
        iLED[WING[L][0]] = dimValue;
    18a8:	e0 91 8f ba 	lds	r30, 0xBA8F	; 0x80ba8f <__bss_end+0x7f7e>
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    18b2:	ef 53       	subi	r30, 0x3F	; 63
    18b4:	f5 4c       	sbci	r31, 0xC5	; 197
    18b6:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    18b8:	e0 91 90 ba 	lds	r30, 0xBA90	; 0x80ba90 <__bss_end+0x7f7f>
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    18c2:	ef 53       	subi	r30, 0x3F	; 63
    18c4:	f5 4c       	sbci	r31, 0xC5	; 197
    18c6:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    18c8:	e0 91 91 ba 	lds	r30, 0xBA91	; 0x80ba91 <__bss_end+0x7f80>
    18cc:	2e c0       	rjmp	.+92     	; 0x192a <simonLed+0xae>
    } else if (val == 2) {
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	59 f4       	brne	.+22     	; 0x18e8 <simonLed+0x6c>
        iLED[WING[L][3]] = dimValue;
    18d2:	e0 91 92 ba 	lds	r30, 0xBA92	; 0x80ba92 <__bss_end+0x7f81>
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    18dc:	ef 53       	subi	r30, 0x3F	; 63
    18de:	f5 4c       	sbci	r31, 0xC5	; 197
    18e0:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    18e2:	e0 91 93 ba 	lds	r30, 0xBA93	; 0x80ba93 <__bss_end+0x7f82>
    18e6:	21 c0       	rjmp	.+66     	; 0x192a <simonLed+0xae>
    } else if (val == 3) {
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	99 f4       	brne	.+38     	; 0x1912 <simonLed+0x96>
        iLED[WING[R][0]] = dimValue;
    18ec:	e0 91 8a ba 	lds	r30, 0xBA8A	; 0x80ba8a <__bss_end+0x7f79>
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    18f6:	ef 53       	subi	r30, 0x3F	; 63
    18f8:	f5 4c       	sbci	r31, 0xC5	; 197
    18fa:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    18fc:	e0 91 8b ba 	lds	r30, 0xBA8B	; 0x80ba8b <__bss_end+0x7f7a>
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1906:	ef 53       	subi	r30, 0x3F	; 63
    1908:	f5 4c       	sbci	r31, 0xC5	; 197
    190a:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    190c:	e0 91 8c ba 	lds	r30, 0xBA8C	; 0x80ba8c <__bss_end+0x7f7b>
    1910:	0c c0       	rjmp	.+24     	; 0x192a <simonLed+0xae>
    } else if (val == 4) {
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	81 f4       	brne	.+32     	; 0x1936 <simonLed+0xba>
        iLED[WING[R][3]] = dimValue;
    1916:	e0 91 8d ba 	lds	r30, 0xBA8D	; 0x80ba8d <__bss_end+0x7f7c>
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1920:	ef 53       	subi	r30, 0x3F	; 63
    1922:	f5 4c       	sbci	r31, 0xC5	; 197
    1924:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1926:	e0 91 8e ba 	lds	r30, 0xBA8E	; 0x80ba8e <__bss_end+0x7f7d>
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <dimValue>
    1930:	ef 53       	subi	r30, 0x3F	; 63
    1932:	f5 4c       	sbci	r31, 0xC5	; 197
    1934:	80 83       	st	Z, r24
    }
    simonTone(val);
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <BastetDictates>:

// Main game loop
uint8_t BastetDictates() {
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    if (CheckState(BASTET_COMPLETED))
    1940:	8a e7       	ldi	r24, 0x7A	; 122
    1942:	bb dd       	rcall	.-1162   	; 0x14ba <CheckState>
    1944:	81 11       	cpse	r24, r1
    1946:	b8 c0       	rjmp	.+368    	; 0x1ab8 <BastetDictates+0x17c>
        return 0;

    if ((TEXT != gameNow) && (BASTET != gameNow))
    1948:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <gameNow>
    194c:	8d 7f       	andi	r24, 0xFD	; 253
    194e:	09 f0       	breq	.+2      	; 0x1952 <BastetDictates+0x16>
    1950:	b3 c0       	rjmp	.+358    	; 0x1ab8 <BastetDictates+0x17c>
        return 0;

    if (BASTET_BOOT == simonGameState) {
    1952:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonGameState>
    1956:	81 11       	cpse	r24, r1
    1958:	22 c0       	rjmp	.+68     	; 0x199e <BastetDictates+0x62>
        simonPos = ((adcPhot+adcTemp)&0x3f);
    195a:	20 91 b4 3a 	lds	r18, 0x3AB4	; 0x803ab4 <adcPhot>
    195e:	30 91 b5 3a 	lds	r19, 0x3AB5	; 0x803ab5 <adcPhot+0x1>
    1962:	80 91 ec 3a 	lds	r24, 0x3AEC	; 0x803aec <adcTemp>
    1966:	90 91 ed 3a 	lds	r25, 0x3AED	; 0x803aed <adcTemp+0x1>
    196a:	82 0f       	add	r24, r18
    196c:	8f 73       	andi	r24, 0x3F	; 63
    196e:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
        for(uint8_t x=0; x<simonPos; ++x) lfsr();
    1972:	c0 e0       	ldi	r28, 0x00	; 0
    1974:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <simonPos>
    1978:	c8 17       	cp	r28, r24
    197a:	18 f4       	brcc	.+6      	; 0x1982 <BastetDictates+0x46>
    197c:	70 dc       	rcall	.-1824   	; 0x125e <lfsr>
    197e:	cf 5f       	subi	r28, 0xFF	; 255
    1980:	f9 cf       	rjmp	.-14     	; 0x1974 <BastetDictates+0x38>
    1982:	c7 e5       	ldi	r28, 0x57	; 87

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1984:	d8 e3       	ldi	r29, 0x38	; 56
    1986:	6b dc       	rcall	.-1834   	; 0x125e <lfsr>
    1988:	83 70       	andi	r24, 0x03	; 3
    198a:	89 93       	st	Y+, r24

    if (BASTET_BOOT == simonGameState) {
        simonPos = ((adcPhot+adcTemp)&0x3f);
        for(uint8_t x=0; x<simonPos; ++x) lfsr();

        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    198c:	88 e3       	ldi	r24, 0x38	; 56
    198e:	c7 36       	cpi	r28, 0x67	; 103
    1990:	d8 07       	cpc	r29, r24
    1992:	c9 f7       	brne	.-14     	; 0x1986 <BastetDictates+0x4a>
            simonState[i] = (lfsr() % 4);
        }
        simonPos = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
        simonGameState = BASTET_GAME_START;
    199a:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState) {
    199e:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonGameState>
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	29 f4       	brne	.+10     	; 0x19b0 <BastetDictates+0x74>
        // TODO start animu
        simonGameState = BASTET_GAME_SHOW_PATTERN;
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <simonGameState>
        simonTimer = 0;
    19ac:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <simonTimer>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    19b0:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonGameState>
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	d9 f4       	brne	.+54     	; 0x19ee <BastetDictates+0xb2>
        // assuming 15Hz
        uint8_t pos = simonTimer / (15 - (simonPos>>1));
    19b8:	20 91 28 38 	lds	r18, 0x3828	; 0x803828 <simonPos>
    19bc:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <simonTimer>
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	32 2f       	mov	r19, r18
    19c4:	36 95       	lsr	r19
    19c6:	6f e0       	ldi	r22, 0x0F	; 15
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	63 1b       	sub	r22, r19
    19cc:	71 09       	sbc	r23, r1
    19ce:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodhi4>
        if (pos > simonPos) {
    19d2:	26 17       	cp	r18, r22
    19d4:	30 f4       	brcc	.+12     	; 0x19e2 <BastetDictates+0xa6>
            simonGameState = BASTET_GAME_INPUT;
    19d6:	85 e0       	ldi	r24, 0x05	; 5
    19d8:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <simonGameState>
            simonLed(0);
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	4e df       	rcall	.-356    	; 0x187c <simonLed>
            return 0;
    19e0:	6b c0       	rjmp	.+214    	; 0x1ab8 <BastetDictates+0x17c>
        }
        simonLed(simonState[pos]);
    19e2:	77 27       	eor	r23, r23
    19e4:	fb 01       	movw	r30, r22
    19e6:	e9 5a       	subi	r30, 0xA9	; 169
    19e8:	f7 4c       	sbci	r31, 0xC7	; 199
    19ea:	80 81       	ld	r24, Z
    19ec:	47 df       	rcall	.-370    	; 0x187c <simonLed>
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    19ee:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonGameState>
    19f2:	85 30       	cpi	r24, 0x05	; 5
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <BastetDictates+0xbc>
    19f6:	4e c0       	rjmp	.+156    	; 0x1a94 <BastetDictates+0x158>
        uint8_t choice = 0;
        if ((buttonState & 0xf0)&&(buttonState < 0xff)) {
    19f8:	e0 91 09 38 	lds	r30, 0x3809	; 0x803809 <buttonState>
    19fc:	8e 2f       	mov	r24, r30
    19fe:	80 7f       	andi	r24, 0xF0	; 240
    1a00:	c9 f1       	breq	.+114    	; 0x1a74 <BastetDictates+0x138>
    1a02:	ef 3f       	cpi	r30, 0xFF	; 255
    1a04:	b9 f1       	breq	.+110    	; 0x1a74 <BastetDictates+0x138>
    1a06:	ef 70       	andi	r30, 0x0F	; 15
    1a08:	e1 50       	subi	r30, 0x01	; 1
    1a0a:	e8 30       	cpi	r30, 0x08	; 8
    1a0c:	98 f5       	brcc	.+102    	; 0x1a74 <BastetDictates+0x138>
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	ea 54       	subi	r30, 0x4A	; 74
    1a12:	f5 44       	sbci	r31, 0x45	; 69
    1a14:	c0 81       	ld	r28, Z
                    break;
            }
        }

        //Button pressed
        if (choice > 0) {
    1a16:	cc 23       	and	r28, r28
    1a18:	69 f1       	breq	.+90     	; 0x1a74 <BastetDictates+0x138>
            gameNow = BASTET;
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <gameNow>
            if (simonProcessed == 0) {
    1a20:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <simonProcessed>
    1a24:	81 11       	cpse	r24, r1
                simonTimer = 0;
    1a26:	43 c0       	rjmp	.+134    	; 0x1aae <BastetDictates+0x172>
    1a28:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <simonTimer>
                simonLed(choice);
    1a2c:	8c 2f       	mov	r24, r28
    1a2e:	26 df       	rcall	.-436    	; 0x187c <simonLed>
                // TODO something timer something 
                if (simonState[simonInputPos]+1 == choice) {
    1a30:	40 91 56 38 	lds	r20, 0x3856	; 0x803856 <simonInputPos>
    1a34:	e4 2f       	mov	r30, r20
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	e9 5a       	subi	r30, 0xA9	; 169
    1a3a:	f7 4c       	sbci	r31, 0xC7	; 199
    1a3c:	20 81       	ld	r18, Z
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	8c 2f       	mov	r24, r28
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	28 17       	cp	r18, r24
    1a4a:	39 07       	cpc	r19, r25
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <BastetDictates+0x11a>
                    // TODO correct sound
                    simonInputPos++;
    1a4e:	4f 5f       	subi	r20, 0xFF	; 255
    1a50:	40 93 56 38 	sts	0x3856, r20	; 0x803856 <simonInputPos>
                } else {
                    // TODO fail sound
                    simonInputPos = 0;
    1a54:	06 c0       	rjmp	.+12     	; 0x1a62 <BastetDictates+0x126>
    1a56:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <simonInputPos>
                    gameNow = TEXT;
    1a5a:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
                    simonLed(0);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
                }

                if (simonInputPos == BASTET_LENGTH) {
    1a60:	0d df       	rcall	.-486    	; 0x187c <simonLed>
    1a62:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonInputPos>
    1a66:	80 31       	cpi	r24, 0x10	; 16
                    // TODO win animu
                    UpdateState(BASTET_COMPLETED);
    1a68:	a9 f4       	brne	.+42     	; 0x1a94 <BastetDictates+0x158>
    1a6a:	8a e7       	ldi	r24, 0x7A	; 122
    1a6c:	1c dd       	rcall	.-1480   	; 0x14a6 <UpdateState>
                    gameNow = TEXT;
    1a6e:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <gameNow>
    1a72:	10 c0       	rjmp	.+32     	; 0x1a94 <BastetDictates+0x158>
                }
            }
        
        //Button released, next or reset!
        } else {    
            if (simonInputPos == simonPos) {
    1a74:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <simonInputPos>
    1a78:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <simonPos>
    1a7c:	89 13       	cpse	r24, r25
    1a7e:	08 c0       	rjmp	.+16     	; 0x1a90 <BastetDictates+0x154>
                simonPos++;
    1a80:	8f 5f       	subi	r24, 0xFF	; 255
    1a82:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <simonPos>
                simonInputPos = 0;
    1a86:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <simonInputPos>
                simonGameState = BASTET_GAME_SHOW_PATTERN;
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <simonGameState>
            }                    
            simonProcessed = 0;
    1a90:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <simonProcessed>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    1a94:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <simonGameState>
    1a98:	84 30       	cpi	r24, 0x04	; 4
        if (simonTimer >= 7) {
    1a9a:	49 f4       	brne	.+18     	; 0x1aae <BastetDictates+0x172>
    1a9c:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <simonTimer>
    1aa0:	87 30       	cpi	r24, 0x07	; 7
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    1aa2:	28 f0       	brcs	.+10     	; 0x1aae <BastetDictates+0x172>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	ea de       	rcall	.-556    	; 0x187c <simonLed>
            simonGameState = BASTET_GAME_INPUT;
    1aa8:	85 e0       	ldi	r24, 0x05	; 5
    1aaa:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <simonGameState>
        }
    }

    ++simonTimer;
    1aae:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <simonTimer>
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <simonTimer>
    return 0;
}
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	62 97       	sbiw	r28, 0x12	; 18
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	8a 8b       	std	Y+18, r24	; 0x12
    1ad2:	80 e1       	ldi	r24, 0x10	; 16
    1ad4:	ee e5       	ldi	r30, 0x5E	; 94
    1ad6:	fa eb       	ldi	r31, 0xBA	; 186
    1ad8:	de 01       	movw	r26, r28
    1ada:	11 96       	adiw	r26, 0x01	; 1
    1adc:	01 90       	ld	r0, Z+
    1ade:	0d 92       	st	X+, r0
    1ae0:	8a 95       	dec	r24
    1ae2:	e1 f7       	brne	.-8      	; 0x1adc <Cheat+0x1c>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	31 96       	adiw	r30, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	21 91       	ld	r18, Z+
    1aee:	31 91       	ld	r19, Z+
    1af0:	26 17       	cp	r18, r22
    1af2:	37 07       	cpc	r19, r23
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <Cheat+0x38>
    1af6:	89 2f       	mov	r24, r25
    1af8:	9f 5f       	subi	r25, 0xFF	; 255
    1afa:	98 30       	cpi	r25, 0x08	; 8
    1afc:	b9 f7       	brne	.-18     	; 0x1aec <Cheat+0x2c>
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	10 f0       	brcs	.+4      	; 0x1b06 <Cheat+0x46>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	12 c0       	rjmp	.+36     	; 0x1b2a <Cheat+0x6a>
    1b06:	18 e1       	ldi	r17, 0x18	; 24
    1b08:	18 0f       	add	r17, r24
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	be 01       	movw	r22, r28
    1b0e:	6f 5e       	subi	r22, 0xEF	; 239
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	81 2f       	mov	r24, r17
    1b14:	d0 da       	rcall	.-2656   	; 0x10b6 <EERead>
    1b16:	89 89       	ldd	r24, Y+17	; 0x11
    1b18:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1a:	99 f7       	brne	.-26     	; 0x1b02 <Cheat+0x42>
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	be 01       	movw	r22, r28
    1b20:	6e 5e       	subi	r22, 0xEE	; 238
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	81 2f       	mov	r24, r17
    1b26:	d7 da       	rcall	.-2642   	; 0x10d6 <EEWrite>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	62 96       	adiw	r28, 0x12	; 18
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	08 95       	ret

00001b38 <DecryptData>:
    1b38:	f9 01       	movw	r30, r18
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	2e 1b       	sub	r18, r30
    1b3e:	3f 0b       	sbc	r19, r31
    1b40:	88 e0       	ldi	r24, 0x08	; 8
    1b42:	48 9f       	mul	r20, r24
    1b44:	a0 01       	movw	r20, r0
    1b46:	11 24       	eor	r1, r1
    1b48:	40 5d       	subi	r20, 0xD0	; 208
    1b4a:	54 44       	sbci	r21, 0x44	; 68
    1b4c:	66 23       	and	r22, r22
    1b4e:	69 f0       	breq	.+26     	; 0x1b6a <DecryptData+0x32>
    1b50:	df 01       	movw	r26, r30
    1b52:	a2 0f       	add	r26, r18
    1b54:	b3 1f       	adc	r27, r19
    1b56:	a7 70       	andi	r26, 0x07	; 7
    1b58:	bb 27       	eor	r27, r27
    1b5a:	a4 0f       	add	r26, r20
    1b5c:	b5 1f       	adc	r27, r21
    1b5e:	80 81       	ld	r24, Z
    1b60:	9c 91       	ld	r25, X
    1b62:	98 27       	eor	r25, r24
    1b64:	91 93       	st	Z+, r25
    1b66:	61 50       	subi	r22, 0x01	; 1
    1b68:	f1 cf       	rjmp	.-30     	; 0x1b4c <DecryptData+0x14>
    1b6a:	08 95       	ret

00001b6c <UnflipData>:
    1b6c:	26 2f       	mov	r18, r22
    1b6e:	fb 01       	movw	r30, r22
    1b70:	35 e5       	ldi	r19, 0x55	; 85
    1b72:	9e 2f       	mov	r25, r30
    1b74:	92 1b       	sub	r25, r18
    1b76:	98 17       	cp	r25, r24
    1b78:	28 f4       	brcc	.+10     	; 0x1b84 <UnflipData+0x18>
    1b7a:	90 81       	ld	r25, Z
    1b7c:	92 95       	swap	r25
    1b7e:	93 27       	eor	r25, r19
    1b80:	91 93       	st	Z+, r25
    1b82:	f7 cf       	rjmp	.-18     	; 0x1b72 <UnflipData+0x6>
    1b84:	08 95       	ret

00001b86 <ExtEERead>:
    1b86:	af 92       	push	r10
    1b88:	bf 92       	push	r11
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <ExtEERead+0x16>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	d6 2e       	mov	r13, r22
    1ba2:	c4 2e       	mov	r12, r20
    1ba4:	59 01       	movw	r10, r18
    1ba6:	7c 01       	movw	r14, r24
    1ba8:	e8 94       	clt
    1baa:	f7 f8       	bld	r15, 7
    1bac:	f9 82       	std	Y+1, r15	; 0x01
    1bae:	ea 82       	std	Y+2, r14	; 0x02
    1bb0:	06 2f       	mov	r16, r22
    1bb2:	42 e0       	ldi	r20, 0x02	; 2
    1bb4:	be 01       	movw	r22, r28
    1bb6:	6f 5f       	subi	r22, 0xFF	; 255
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	80 e5       	ldi	r24, 0x50	; 80
    1bbc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <I2C_read_bytes>
    1bc0:	18 2f       	mov	r17, r24
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <ExtEERead+0x4a>
    1bc6:	95 01       	movw	r18, r10
    1bc8:	4c 2d       	mov	r20, r12
    1bca:	6d 2d       	mov	r22, r13
    1bcc:	c7 01       	movw	r24, r14
    1bce:	b4 df       	rcall	.-152    	; 0x1b38 <DecryptData>
    1bd0:	81 2f       	mov	r24, r17
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	08 95       	ret

00001bec <ClearTxAfter>:
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	88 30       	cpi	r24, 0x08	; 8
    1bf0:	30 f4       	brcc	.+12     	; 0x1bfe <ClearTxAfter+0x12>
    1bf2:	e8 2f       	mov	r30, r24
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	e1 5c       	subi	r30, 0xC1	; 193
    1bf8:	f5 4c       	sbci	r31, 0xC5	; 197
    1bfa:	10 82       	st	Z, r1
    1bfc:	f7 cf       	rjmp	.-18     	; 0x1bec <ClearTxAfter>
    1bfe:	08 95       	ret

00001c00 <StartsWith>:
    1c00:	ac 01       	movw	r20, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	e9 2f       	mov	r30, r25
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	da 01       	movw	r26, r20
    1c0a:	ae 0f       	add	r26, r30
    1c0c:	bf 1f       	adc	r27, r31
    1c0e:	3c 91       	ld	r19, X
    1c10:	e6 0f       	add	r30, r22
    1c12:	f7 1f       	adc	r31, r23
    1c14:	31 11       	cpse	r19, r1
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <StartsWith+0x22>
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 81       	ld	r25, Z
    1c1c:	99 23       	and	r25, r25
    1c1e:	49 f0       	breq	.+18     	; 0x1c32 <StartsWith+0x32>
    1c20:	07 c0       	rjmp	.+14     	; 0x1c30 <StartsWith+0x30>
    1c22:	20 81       	ld	r18, Z
    1c24:	22 23       	and	r18, r18
    1c26:	c1 f3       	breq	.-16     	; 0x1c18 <StartsWith+0x18>
    1c28:	32 13       	cpse	r19, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <StartsWith+0x30>
    1c2c:	9f 5f       	subi	r25, 0xFF	; 255
    1c2e:	ea cf       	rjmp	.-44     	; 0x1c04 <StartsWith+0x4>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	08 95       	ret

00001c34 <PrepareSending>:
    1c34:	61 15       	cp	r22, r1
    1c36:	71 05       	cpc	r23, r1
    1c38:	51 f1       	breq	.+84     	; 0x1c8e <PrepareSending+0x5a>
    1c3a:	e7 e4       	ldi	r30, 0x47	; 71
    1c3c:	fa e3       	ldi	r31, 0x3A	; 58
    1c3e:	af e3       	ldi	r26, 0x3F	; 63
    1c40:	ba e3       	ldi	r27, 0x3A	; 58
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	6f 3f       	cpi	r22, 0xFF	; 255
    1c48:	71 05       	cpc	r23, r1
    1c4a:	69 f0       	breq	.+26     	; 0x1c66 <PrepareSending+0x32>
    1c4c:	60 f0       	brcs	.+24     	; 0x1c66 <PrepareSending+0x32>
    1c4e:	81 93       	st	Z+, r24
    1c50:	91 93       	st	Z+, r25
    1c52:	3d 93       	st	X+, r19
    1c54:	81 50       	subi	r24, 0x01	; 1
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	6f 5f       	subi	r22, 0xFF	; 255
    1c5a:	71 09       	sbc	r23, r1
    1c5c:	2f 5f       	subi	r18, 0xFF	; 255
    1c5e:	27 30       	cpi	r18, 0x07	; 7
    1c60:	91 f7       	brne	.-28     	; 0x1c46 <PrepareSending+0x12>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	08 95       	ret
    1c66:	e2 2f       	mov	r30, r18
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	df 01       	movw	r26, r30
    1c6c:	aa 0f       	add	r26, r26
    1c6e:	bb 1f       	adc	r27, r27
    1c70:	a9 5b       	subi	r26, 0xB9	; 185
    1c72:	b5 4c       	sbci	r27, 0xC5	; 197
    1c74:	8d 93       	st	X+, r24
    1c76:	9c 93       	st	X, r25
    1c78:	e1 5c       	subi	r30, 0xC1	; 193
    1c7a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__udivmodhi4>
    1c86:	80 83       	st	Z, r24
    1c88:	40 93 3d 3a 	sts	0x3A3D, r20	; 0x803a3d <txTypeNow>
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <PrepareSending+0x64>
    1c8e:	10 92 47 3a 	sts	0x3A47, r1	; 0x803a47 <txAddrList>
    1c92:	10 92 48 3a 	sts	0x3A48, r1	; 0x803a48 <txAddrList+0x1>
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	82 2f       	mov	r24, r18
    1c9a:	a8 df       	rcall	.-176    	; 0x1bec <ClearTxAfter>
    1c9c:	10 92 3e 3a 	sts	0x3A3E, r1	; 0x803a3e <txAddrNow>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	08 95       	ret

00001ca4 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	f9 01       	movw	r30, r18
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	ee 5e       	subi	r30, 0xEE	; 238
    1cb4:	f6 4c       	sbci	r31, 0xC6	; 198
    1cb6:	ab e5       	ldi	r26, 0x5B	; 91
    1cb8:	ba e7       	ldi	r27, 0x7A	; 122
    1cba:	a0 83       	st	Z, r26
    1cbc:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	ee 5a       	subi	r30, 0xAE	; 174
    1cc6:	f6 4c       	sbci	r31, 0xC6	; 198
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	60 83       	st	Z, r22
    1cce:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	f9 01       	movw	r30, r18
    1cd6:	ee 56       	subi	r30, 0x6E	; 110
    1cd8:	f6 4c       	sbci	r31, 0xC6	; 198
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	40 83       	st	Z, r20
    1ce0:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ce2:	21 e0       	ldi	r18, 0x01	; 1
    1ce4:	28 0f       	add	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	f9 01       	movw	r30, r18
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	ee 5e       	subi	r30, 0xEE	; 238
    1cf0:	f6 4c       	sbci	r31, 0xC6	; 198
    1cf2:	c4 e6       	ldi	r28, 0x64	; 100
    1cf4:	da e7       	ldi	r29, 0x7A	; 122
    1cf6:	c0 83       	st	Z, r28
    1cf8:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    1cfa:	f9 01       	movw	r30, r18
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	ee 5a       	subi	r30, 0xAE	; 174
    1d02:	f6 4c       	sbci	r31, 0xC6	; 198
    1d04:	ca e0       	ldi	r28, 0x0A	; 10
    1d06:	d0 e0       	ldi	r29, 0x00	; 0
    1d08:	c0 83       	st	Z, r28
    1d0a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    1d0c:	22 0f       	add	r18, r18
    1d0e:	33 1f       	adc	r19, r19
    1d10:	f9 01       	movw	r30, r18
    1d12:	ee 56       	subi	r30, 0x6E	; 110
    1d14:	f6 4c       	sbci	r31, 0xC6	; 198
    1d16:	40 83       	st	Z, r20
    1d18:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1d1a:	e2 e0       	ldi	r30, 0x02	; 2
    1d1c:	e8 0f       	add	r30, r24
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	ee 0f       	add	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	ee 5e       	subi	r30, 0xEE	; 238
    1d26:	f6 4c       	sbci	r31, 0xC6	; 198
    1d28:	20 ef       	ldi	r18, 0xF0	; 240
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	20 83       	st	Z, r18
    1d2e:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d30:	23 e0       	ldi	r18, 0x03	; 3
    1d32:	28 0f       	add	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	f9 01       	movw	r30, r18
    1d38:	ee 0f       	add	r30, r30
    1d3a:	ff 1f       	adc	r31, r31
    1d3c:	ee 5e       	subi	r30, 0xEE	; 238
    1d3e:	f6 4c       	sbci	r31, 0xC6	; 198
    1d40:	a0 83       	st	Z, r26
    1d42:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1d44:	f9 01       	movw	r30, r18
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	ee 5a       	subi	r30, 0xAE	; 174
    1d4c:	f6 4c       	sbci	r31, 0xC6	; 198
    1d4e:	60 83       	st	Z, r22
    1d50:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	f9 01       	movw	r30, r18
    1d58:	ee 56       	subi	r30, 0x6E	; 110
    1d5a:	f6 4c       	sbci	r31, 0xC6	; 198
    1d5c:	40 83       	st	Z, r20
    1d5e:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d60:	24 e0       	ldi	r18, 0x04	; 4
    1d62:	28 0f       	add	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	f9 01       	movw	r30, r18
    1d68:	ee 0f       	add	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	ee 5e       	subi	r30, 0xEE	; 238
    1d6e:	f6 4c       	sbci	r31, 0xC6	; 198
    1d70:	a7 e5       	ldi	r26, 0x57	; 87
    1d72:	ba e7       	ldi	r27, 0x7A	; 122
    1d74:	a0 83       	st	Z, r26
    1d76:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1d78:	f9 01       	movw	r30, r18
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ee 5a       	subi	r30, 0xAE	; 174
    1d80:	f6 4c       	sbci	r31, 0xC6	; 198
    1d82:	60 83       	st	Z, r22
    1d84:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	f9 01       	movw	r30, r18
    1d8c:	ee 56       	subi	r30, 0x6E	; 110
    1d8e:	f6 4c       	sbci	r31, 0xC6	; 198
    1d90:	40 83       	st	Z, r20
    1d92:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    1d94:	8b 5f       	subi	r24, 0xFB	; 251
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1d9c:	af 92       	push	r10
    1d9e:	bf 92       	push	r11
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	2c 97       	sbiw	r28, 0x0c	; 12
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	7c 01       	movw	r14, r24
    1dba:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    1dbc:	9e 01       	movw	r18, r28
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	6c e0       	ldi	r22, 0x0C	; 12
    1dc6:	80 96       	adiw	r24, 0x20	; 32
    1dc8:	de de       	rcall	.-580    	; 0x1b86 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	98 27       	eor	r25, r24
    1dd0:	89 27       	eor	r24, r25
    1dd2:	98 27       	eor	r25, r24
    1dd4:	80 96       	adiw	r24, 0x20	; 32
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 83       	st	Z, r24
    1dda:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	98 27       	eor	r25, r24
    1de2:	89 27       	eor	r24, r25
    1de4:	98 27       	eor	r25, r24
    1de6:	80 96       	adiw	r24, 0x20	; 32
    1de8:	82 83       	std	Z+2, r24	; 0x02
    1dea:	93 83       	std	Z+3, r25	; 0x03
    1dec:	de 01       	movw	r26, r28
    1dee:	15 96       	adiw	r26, 0x05	; 5
    1df0:	34 96       	adiw	r30, 0x04	; 4
    1df2:	c8 01       	movw	r24, r16
    1df4:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1df6:	2d 91       	ld	r18, X+
    1df8:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    1dfa:	e8 17       	cp	r30, r24
    1dfc:	f9 07       	cpc	r31, r25
    1dfe:	d9 f7       	brne	.-10     	; 0x1df6 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1e00:	fc e2       	ldi	r31, 0x2C	; 44
    1e02:	ef 0e       	add	r14, r31
    1e04:	f1 1c       	adc	r15, r1
    1e06:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1e08:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    1e0a:	9e 01       	movw	r18, r28
    1e0c:	2f 5f       	subi	r18, 0xFF	; 255
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	63 e0       	ldi	r22, 0x03	; 3
    1e14:	c7 01       	movw	r24, r14
    1e16:	b7 de       	rcall	.-658    	; 0x1b86 <ExtEERead>
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	98 27       	eor	r25, r24
    1e1e:	89 27       	eor	r24, r25
    1e20:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1e22:	97 01       	movw	r18, r14
    1e24:	2e 5f       	subi	r18, 0xFE	; 254
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1e28:	43 e0       	ldi	r20, 0x03	; 3
    1e2a:	4d 15       	cp	r20, r13
    1e2c:	80 f4       	brcc	.+32     	; 0x1e4e <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    1e2e:	ac 01       	movw	r20, r24
    1e30:	41 50       	subi	r20, 0x01	; 1
    1e32:	51 09       	sbc	r21, r1
    1e34:	f8 01       	movw	r30, r16
    1e36:	42 8f       	std	Z+26, r20	; 0x1a
    1e38:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1e3a:	f3 e0       	ldi	r31, 0x03	; 3
    1e3c:	ef 0e       	add	r14, r31
    1e3e:	f1 1c       	adc	r15, r1
    1e40:	f8 01       	movw	r30, r16
    1e42:	e4 86       	std	Z+12, r14	; 0x0c
    1e44:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1e46:	4b 81       	ldd	r20, Y+3	; 0x03
    1e48:	f5 01       	movw	r30, r10
    1e4a:	44 a3       	std	Z+36, r20	; 0x24
    1e4c:	05 c0       	rjmp	.+10     	; 0x1e58 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    1e4e:	f8 01       	movw	r30, r16
    1e50:	82 8f       	std	Z+26, r24	; 0x1a
    1e52:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1e54:	24 87       	std	Z+12, r18	; 0x0c
    1e56:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1e58:	7c 01       	movw	r14, r24
    1e5a:	e2 0e       	add	r14, r18
    1e5c:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1e5e:	d3 94       	inc	r13
    1e60:	0e 5f       	subi	r16, 0xFE	; 254
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	ff ef       	ldi	r31, 0xFF	; 255
    1e66:	af 1a       	sub	r10, r31
    1e68:	bf 0a       	sbc	r11, r31
    1e6a:	47 e0       	ldi	r20, 0x07	; 7
    1e6c:	d4 12       	cpse	r13, r20
    1e6e:	cd cf       	rjmp	.-102    	; 0x1e0a <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1e70:	2c 96       	adiw	r28, 0x0c	; 12
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	bf 90       	pop	r11
    1e86:	af 90       	pop	r10
    1e88:	08 95       	ret

00001e8a <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1e8a:	cf 92       	push	r12
    1e8c:	df 92       	push	r13
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	a0 97       	sbiw	r28, 0x20	; 32
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1ea6:	7c 01       	movw	r14, r24
    1ea8:	20 e2       	ldi	r18, 0x20	; 32
    1eaa:	e2 0e       	add	r14, r18
    1eac:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    1eae:	9e 01       	movw	r18, r28
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	62 e0       	ldi	r22, 0x02	; 2
    1eb8:	8c 96       	adiw	r24, 0x2c	; 44
    1eba:	65 de       	rcall	.-822    	; 0x1b86 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    1ebc:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    1ebe:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1ec0:	11 23       	and	r17, r17
    1ec2:	51 f1       	breq	.+84     	; 0x1f18 <CheckLetter+0x8e>
    1ec4:	01 2f       	mov	r16, r17
    1ec6:	11 32       	cpi	r17, 0x21	; 33
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <CheckLetter+0x42>
    1eca:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    1ecc:	9e 01       	movw	r18, r28
    1ece:	2f 5f       	subi	r18, 0xFF	; 255
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	60 2f       	mov	r22, r16
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	0e 96       	adiw	r24, 0x0e	; 14
    1eda:	55 de       	rcall	.-854    	; 0x1b86 <ExtEERead>
    1edc:	fe 01       	movw	r30, r28
    1ede:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1ee2:	dd 20       	and	r13, r13
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1ee6:	e1 e0       	ldi	r30, 0x01	; 1
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	ec 0f       	add	r30, r28
    1eec:	fd 1f       	adc	r31, r29
    1eee:	e8 0f       	add	r30, r24
    1ef0:	f1 1d       	adc	r31, r1
    1ef2:	90 81       	ld	r25, Z
    1ef4:	90 62       	ori	r25, 0x20	; 32
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	9c 11       	cpse	r25, r12
    1efa:	0e c0       	rjmp	.+28     	; 0x1f18 <CheckLetter+0x8e>
    1efc:	0e c0       	rjmp	.+28     	; 0x1f1a <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    1efe:	91 91       	ld	r25, Z+
    1f00:	dd 24       	eor	r13, r13
    1f02:	d3 94       	inc	r13
    1f04:	9b 35       	cpi	r25, 0x5B	; 91
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <CheckLetter+0x80>
    1f08:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	80 17       	cp	r24, r16
    1f0e:	48 f3       	brcs	.-46     	; 0x1ee2 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1f10:	e0 0e       	add	r14, r16
    1f12:	f1 1c       	adc	r15, r1
        x -= max;
    1f14:	10 1b       	sub	r17, r16
    1f16:	d4 cf       	rjmp	.-88     	; 0x1ec0 <CheckLetter+0x36>
    }
    return 0;
    1f18:	80 e0       	ldi	r24, 0x00	; 0
}
    1f1a:	a0 96       	adiw	r28, 0x20	; 32
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	08 95       	ret

00001f32 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1f32:	af 92       	push	r10
    1f34:	bf 92       	push	r11
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <FindChild+0x14>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <FindChild+0x16>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	d6 2e       	mov	r13, r22
    1f4e:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1f50:	9e 01       	movw	r18, r28
    1f52:	2f 5f       	subi	r18, 0xFF	; 255
    1f54:	3f 4f       	sbci	r19, 0xFF	; 255
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	64 e0       	ldi	r22, 0x04	; 4
    1f5a:	80 96       	adiw	r24, 0x20	; 32
    1f5c:	14 de       	rcall	.-984    	; 0x1b86 <ExtEERead>
    1f5e:	e9 80       	ldd	r14, Y+1	; 0x01
    1f60:	fa 80       	ldd	r15, Y+2	; 0x02
    1f62:	fe 24       	eor	r15, r14
    1f64:	ef 24       	eor	r14, r15
    1f66:	fe 24       	eor	r15, r14
    1f68:	0b 81       	ldd	r16, Y+3	; 0x03
    1f6a:	1c 81       	ldd	r17, Y+4	; 0x04
    1f6c:	10 27       	eor	r17, r16
    1f6e:	01 27       	eor	r16, r17
    1f70:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    1f72:	0e 15       	cp	r16, r14
    1f74:	1f 05       	cpc	r17, r15
    1f76:	30 f5       	brcc	.+76     	; 0x1fc4 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    1f78:	a0 16       	cp	r10, r16
    1f7a:	b1 06       	cpc	r11, r17
    1f7c:	58 f0       	brcs	.+22     	; 0x1f94 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1f7e:	9e 01       	movw	r18, r28
    1f80:	2f 5f       	subi	r18, 0xFF	; 255
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	c8 01       	movw	r24, r16
    1f8a:	80 96       	adiw	r24, 0x20	; 32
    1f8c:	fc dd       	rcall	.-1032   	; 0x1b86 <ExtEERead>
    1f8e:	09 81       	ldd	r16, Y+1	; 0x01
    1f90:	1a 81       	ldd	r17, Y+2	; 0x02
    1f92:	ec cf       	rjmp	.-40     	; 0x1f6c <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    1f94:	9e 01       	movw	r18, r28
    1f96:	2f 5f       	subi	r18, 0xFF	; 255
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	85 96       	adiw	r24, 0x25	; 37
    1fa2:	f1 dd       	rcall	.-1054   	; 0x1b86 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	03 c0       	rjmp	.+6      	; 0x1fb0 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1faa:	d1 10       	cpse	r13, r1
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1fae:	0d c0       	rjmp	.+26     	; 0x1fca <FindChild+0x98>
    1fb0:	84 da       	rcall	.-2808   	; 0x14ba <CheckState>
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	fa cf       	rjmp	.-12     	; 0x1faa <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1fb6:	e3 cf       	rjmp	.-58     	; 0x1f7e <FindChild+0x4c>
    1fb8:	6d 2d       	mov	r22, r13
    1fba:	c8 01       	movw	r24, r16
    1fbc:	66 df       	rcall	.-308    	; 0x1e8a <CheckLetter>
    1fbe:	88 23       	and	r24, r24
    1fc0:	f1 f2       	breq	.-68     	; 0x1f7e <FindChild+0x4c>
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <FindChild+0x9a>
    1fca:	c8 01       	movw	r24, r16
}
    1fcc:	24 96       	adiw	r28, 0x04	; 4
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	df 90       	pop	r13
    1fe0:	bf 90       	pop	r11
    1fe2:	af 90       	pop	r10
    1fe4:	08 95       	ret

00001fe6 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1fe6:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1fe8:	9f e9       	ldi	r25, 0x9F	; 159
    1fea:	98 0f       	add	r25, r24
    1fec:	9a 31       	cpi	r25, 0x1A	; 26
    1fee:	38 f0       	brcs	.+14     	; 0x1ffe <InpOkChk+0x18>
    1ff0:	90 ed       	ldi	r25, 0xD0	; 208
    1ff2:	98 0f       	add	r25, r24
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	9a 30       	cpi	r25, 0x0A	; 10
    1ff8:	18 f0       	brcs	.+6      	; 0x2000 <InpOkChk+0x1a>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	08 95       	ret
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2000:	08 95       	ret

00002002 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    200c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    200e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2010:	f8 01       	movw	r30, r16
    2012:	ed 0f       	add	r30, r29
    2014:	f1 1d       	adc	r31, r1
    2016:	20 81       	ld	r18, Z
    2018:	8c 2f       	mov	r24, r28
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	22 23       	and	r18, r18
    201e:	51 f0       	breq	.+20     	; 0x2034 <CleanInput+0x32>
        data[cnt] = data[x];
    2020:	d8 01       	movw	r26, r16
    2022:	a8 0f       	add	r26, r24
    2024:	b9 1f       	adc	r27, r25
    2026:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2028:	80 81       	ld	r24, Z
    202a:	dd df       	rcall	.-70     	; 0x1fe6 <InpOkChk>
    202c:	81 11       	cpse	r24, r1
    202e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2030:	df 5f       	subi	r29, 0xFF	; 255
    2032:	ee cf       	rjmp	.-36     	; 0x2010 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2034:	f8 01       	movw	r30, r16
    2036:	e8 0f       	add	r30, r24
    2038:	f9 1f       	adc	r31, r25
    203a:	10 82       	st	Z, r1
    return cnt;
}
    203c:	8c 2f       	mov	r24, r28
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2048:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    204a:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    204e:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    2052:	89 2b       	or	r24, r25
    2054:	99 f4       	brne	.+38     	; 0x207c <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    2056:	80 91 16 3a 	lds	r24, 0x3A16	; 0x803a16 <currObj+0x4>
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    2060:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
        auStart = ((effect&0xE0)>0);
    2064:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <effect>
    2068:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <effect+0x1>
    206c:	80 7e       	andi	r24, 0xE0	; 224
    206e:	99 27       	eor	r25, r25
    2070:	21 e0       	ldi	r18, 0x01	; 1
    2072:	89 2b       	or	r24, r25
    2074:	09 f4       	brne	.+2      	; 0x2078 <CheckSend+0x30>
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	20 93 35 38 	sts	0x3835, r18	; 0x803835 <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    207c:	20 91 3e 3a 	lds	r18, 0x3A3E	; 0x803a3e <txAddrNow>
    2080:	28 30       	cpi	r18, 0x08	; 8
    2082:	08 f0       	brcs	.+2      	; 0x2086 <CheckSend+0x3e>
    2084:	47 c0       	rjmp	.+142    	; 0x2114 <CheckSend+0xcc>
    2086:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    208a:	88 23       	and	r24, r24
    208c:	09 f4       	brne	.+2      	; 0x2090 <CheckSend+0x48>
    208e:	42 c0       	rjmp	.+132    	; 0x2114 <CheckSend+0xcc>
        if (txStrLen[txAddrNow] == 0){
    2090:	82 2f       	mov	r24, r18
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	fc 01       	movw	r30, r24
    2096:	e1 5c       	subi	r30, 0xC1	; 193
    2098:	f5 4c       	sbci	r31, 0xC5	; 197
    209a:	e0 81       	ld	r30, Z
    209c:	e1 11       	cpse	r30, r1
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <CheckSend+0x64>
            txPart = 0;
    20a0:	10 92 ff 38 	sts	0x38FF, r1	; 0x8038ff <txPart.3941>
            txAddrNow = TXLISTLEN;
    20a4:	88 e0       	ldi	r24, 0x08	; 8
    20a6:	80 93 3e 3a 	sts	0x3A3E, r24	; 0x803a3e <txAddrNow>
    20aa:	2c c0       	rjmp	.+88     	; 0x2104 <CheckSend+0xbc>
        } else if (txPart < txStrLen[txAddrNow]){
    20ac:	50 91 ff 38 	lds	r21, 0x38FF	; 0x8038ff <txPart.3941>
    20b0:	5e 17       	cp	r21, r30
    20b2:	50 f5       	brcc	.+84     	; 0x2108 <CheckSend+0xc0>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    20b4:	ce 2f       	mov	r28, r30
    20b6:	c5 1b       	sub	r28, r21
    20b8:	c1 32       	cpi	r28, 0x21	; 33
    20ba:	08 f0       	brcs	.+2      	; 0x20be <CheckSend+0x76>
    20bc:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	fc 01       	movw	r30, r24
    20c4:	e9 5b       	subi	r30, 0xB9	; 185
    20c6:	f5 4c       	sbci	r31, 0xC5	; 197
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	20 ef       	ldi	r18, 0xF0	; 240
    20ce:	3a e3       	ldi	r19, 0x3A	; 58
    20d0:	40 91 3d 3a 	lds	r20, 0x3A3D	; 0x803a3d <txTypeNow>
    20d4:	6c 2f       	mov	r22, r28
    20d6:	85 0f       	add	r24, r21
    20d8:	91 1d       	adc	r25, r1
    20da:	55 dd       	rcall	.-1366   	; 0x1b86 <ExtEERead>
            txPart += EEreadLength;
    20dc:	80 91 ff 38 	lds	r24, 0x38FF	; 0x8038ff <txPart.3941>
    20e0:	8c 0f       	add	r24, r28
    20e2:	80 93 ff 38 	sts	0x38FF, r24	; 0x8038ff <txPart.3941>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    20e6:	ec 2f       	mov	r30, r28
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	e0 51       	subi	r30, 0x10	; 16
    20ec:	f5 4c       	sbci	r31, 0xC5	; 197
    20ee:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    20f0:	80 91 f0 3a 	lds	r24, 0x3AF0	; 0x803af0 <txBuffer>
    20f4:	81 11       	cpse	r24, r1
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <CheckSend+0xb6>
    20f8:	8b ed       	ldi	r24, 0xDB	; 219
    20fa:	80 93 f0 3a 	sts	0x3AF0, r24	; 0x803af0 <txBuffer>
            SerSend(&txBuffer[0]);
    20fe:	80 ef       	ldi	r24, 0xF0	; 240
    2100:	9a e3       	ldi	r25, 0x3A	; 58
    2102:	11 d8       	rcall	.-4062   	; 0x1126 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	0b c0       	rjmp	.+22     	; 0x211e <CheckSend+0xd6>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    2108:	10 92 ff 38 	sts	0x38FF, r1	; 0x8038ff <txPart.3941>
            ++txAddrNow;
    210c:	2f 5f       	subi	r18, 0xFF	; 255
    210e:	20 93 3e 3a 	sts	0x3A3E, r18	; 0x803a3e <txAddrNow>
    2112:	f8 cf       	rjmp	.-16     	; 0x2104 <CheckSend+0xbc>
        }
    } else if (serTxDone) return 0; //All is sent!
    2114:	90 91 0a 38 	lds	r25, 0x380A	; 0x80380a <serTxDone>
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	91 11       	cpse	r25, r1
    211c:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2126:	c0 91 11 39 	lds	r28, 0x3911	; 0x803911 <responseList>
    212a:	cc 23       	and	r28, r28
    212c:	e9 f1       	breq	.+122    	; 0x21a8 <CheckResponse+0x86>
        --responseList;
    212e:	c1 50       	subi	r28, 0x01	; 1
    2130:	c0 93 11 39 	sts	0x3911, r28	; 0x803911 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2134:	d0 91 fe 38 	lds	r29, 0x38FE	; 0x8038fe <number.3945>
    2138:	2d 2f       	mov	r18, r29
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	f9 01       	movw	r30, r18
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ee 5e       	subi	r30, 0xEE	; 238
    2144:	f6 4c       	sbci	r31, 0xC6	; 198
    2146:	80 81       	ld	r24, Z
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	80 3f       	cpi	r24, 0xF0	; 240
    214c:	4f ef       	ldi	r20, 0xFF	; 255
    214e:	94 07       	cpc	r25, r20
    2150:	51 f4       	brne	.+20     	; 0x2166 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2152:	60 91 2c 3a 	lds	r22, 0x3A2C	; 0x803a2c <currObj+0x1a>
    2156:	70 91 2d 3a 	lds	r23, 0x3A2D	; 0x803a2d <currObj+0x1b>
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	80 91 1e 3a 	lds	r24, 0x3A1E	; 0x803a1e <currObj+0xc>
    2160:	90 91 1f 3a 	lds	r25, 0x3A1F	; 0x803a1f <currObj+0xd>
    2164:	0d c0       	rjmp	.+26     	; 0x2180 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2166:	d9 01       	movw	r26, r18
    2168:	aa 0f       	add	r26, r26
    216a:	bb 1f       	adc	r27, r27
    216c:	ae 56       	subi	r26, 0x6E	; 110
    216e:	b6 4c       	sbci	r27, 0xC6	; 198
    2170:	22 0f       	add	r18, r18
    2172:	33 1f       	adc	r19, r19
    2174:	f9 01       	movw	r30, r18
    2176:	ee 5a       	subi	r30, 0xAE	; 174
    2178:	f6 4c       	sbci	r31, 0xC6	; 198
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	4c 91       	ld	r20, X
    2180:	59 dd       	rcall	.-1358   	; 0x1c34 <PrepareSending>
        }
        ++number;
    2182:	df 5f       	subi	r29, 0xFF	; 255
    2184:	d0 93 fe 38 	sts	0x38FE, r29	; 0x8038fe <number.3945>

        if (responseList == 0) {
    2188:	c1 11       	cpse	r28, r1
    218a:	0d c0       	rjmp	.+26     	; 0x21a6 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    218c:	80 91 16 3a 	lds	r24, 0x3A16	; 0x803a16 <currObj+0x4>
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    2196:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
            RXCNT = 0;
    219a:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    219c:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <serRxDone>
            number = 0;
    21a0:	10 92 fe 38 	sts	0x38FE, r1	; 0x8038fe <number.3945>
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    21a6:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    21a8:	8c 2f       	mov	r24, r28
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    21b0:	4f 92       	push	r4
    21b2:	5f 92       	push	r5
    21b4:	6f 92       	push	r6
    21b6:	7f 92       	push	r7
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	a1 97       	sbiw	r28, 0x21	; 33
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    21dc:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    21e0:	8f 3f       	cpi	r24, 0xFF	; 255
    21e2:	49 f4       	brne	.+18     	; 0x21f6 <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    21e4:	62 e1       	ldi	r22, 0x12	; 18
    21e6:	7a e3       	ldi	r23, 0x3A	; 58
    21e8:	80 91 d2 39 	lds	r24, 0x39D2	; 0x8039d2 <route>
    21ec:	90 91 d3 39 	lds	r25, 0x39D3	; 0x8039d3 <route+0x1>
    21f0:	d5 dd       	rcall	.-1110   	; 0x1d9c <PopulateObject>
        currDepth = 0;
    21f2:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <currDepth>
    }

    if (serRxDone){
    21f6:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <serRxDone>
    21fa:	88 23       	and	r24, r24
    21fc:	09 f4       	brne	.+2      	; 0x2200 <CheckInput+0x50>
    21fe:	63 c2       	rjmp	.+1222   	; 0x26c6 <CheckInput+0x516>

        //Special input requested from user by game
        if (specialInput[0]){
    2200:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <specialInput>
    2204:	88 23       	and	r24, r24
    2206:	09 f4       	brne	.+2      	; 0x220a <CheckInput+0x5a>
    2208:	57 c0       	rjmp	.+174    	; 0x22b8 <CheckInput+0x108>
            specialPassed = 0;
    220a:	10 92 00 39 	sts	0x3900, r1	; 0x803900 <specialPassed>
            data[0] = 'a';
    220e:	81 e6       	ldi	r24, 0x61	; 97
    2210:	f8 01       	movw	r30, r16
    2212:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    2214:	61 e0       	ldi	r22, 0x01	; 1
    2216:	79 e3       	ldi	r23, 0x39	; 57
    2218:	8c e6       	ldi	r24, 0x6C	; 108
    221a:	9a e3       	ldi	r25, 0x3A	; 58
    221c:	f1 dc       	rcall	.-1566   	; 0x1c00 <StartsWith>
    221e:	f8 2e       	mov	r15, r24
    2220:	88 23       	and	r24, r24
    2222:	21 f0       	breq	.+8      	; 0x222c <CheckInput+0x7c>
                specialPassed = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 00 39 	sts	0x3900, r24	; 0x803900 <specialPassed>
    222a:	04 c0       	rjmp	.+8      	; 0x2234 <CheckInput+0x84>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    222c:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <specialInput>
    2230:	81 33       	cpi	r24, 0x31	; 49
    2232:	11 f0       	breq	.+4      	; 0x2238 <CheckInput+0x88>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    2234:	f1 2c       	mov	r15, r1
    2236:	49 c2       	rjmp	.+1170   	; 0x26ca <CheckInput+0x51a>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    2238:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <specialInput+0x2>
    223c:	81 11       	cpse	r24, r1
    223e:	fa cf       	rjmp	.-12     	; 0x2234 <CheckInput+0x84>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2240:	8c e6       	ldi	r24, 0x6C	; 108
    2242:	9a e3       	ldi	r25, 0x3A	; 58
    2244:	de de       	rcall	.-580    	; 0x2002 <CleanInput>
                specialPassed = 2;
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	90 93 00 39 	sts	0x3900, r25	; 0x803900 <specialPassed>
                data[1] = 0;
    224c:	f8 01       	movw	r30, r16
    224e:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	80 f3       	brcs	.-32     	; 0x2234 <CheckInput+0x84>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    2254:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
    2258:	81 33       	cpi	r24, 0x31	; 49
    225a:	61 f0       	breq	.+24     	; 0x2274 <CheckInput+0xc4>
    225c:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
    2260:	82 33       	cpi	r24, 0x32	; 50
    2262:	41 f0       	breq	.+16     	; 0x2274 <CheckInput+0xc4>
    2264:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
    2268:	83 33       	cpi	r24, 0x33	; 51
    226a:	21 f0       	breq	.+8      	; 0x2274 <CheckInput+0xc4>
    226c:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
    2270:	84 33       	cpi	r24, 0x34	; 52
    2272:	01 f7       	brne	.-64     	; 0x2234 <CheckInput+0x84>
                        serRx[1] |= 0x20;
    2274:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <serRx+0x1>
    2278:	80 62       	ori	r24, 0x20	; 32
    227a:	80 93 6d 3a 	sts	0x3A6D, r24	; 0x803a6d <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    227e:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <serRx+0x1>
    2282:	81 36       	cpi	r24, 0x61	; 97
    2284:	61 f0       	breq	.+24     	; 0x229e <CheckInput+0xee>
    2286:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <serRx+0x1>
    228a:	85 36       	cpi	r24, 0x65	; 101
    228c:	41 f0       	breq	.+16     	; 0x229e <CheckInput+0xee>
    228e:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <serRx+0x1>
    2292:	86 36       	cpi	r24, 0x66	; 102
    2294:	21 f0       	breq	.+8      	; 0x229e <CheckInput+0xee>
    2296:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <serRx+0x1>
    229a:	87 37       	cpi	r24, 0x77	; 119
    229c:	59 f6       	brne	.-106    	; 0x2234 <CheckInput+0x84>
                            data[1] = specialInput[1]+0x11;
    229e:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <specialInput+0x1>
    22a2:	8f 5e       	subi	r24, 0xEF	; 239
    22a4:	f8 01       	movw	r30, r16
    22a6:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    22a8:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
    22ac:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    22ae:	80 91 6d 3a 	lds	r24, 0x3A6D	; 0x803a6d <serRx+0x1>
    22b2:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    22b4:	14 82       	std	Z+4, r1	; 0x04
    22b6:	09 c2       	rjmp	.+1042   	; 0x26ca <CheckInput+0x51a>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    22b8:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
    22bc:	83 32       	cpi	r24, 0x23	; 35
    22be:	81 f5       	brne	.+96     	; 0x2320 <CheckInput+0x170>
    22c0:	8d b3       	in	r24, 0x1d	; 29
    22c2:	86 30       	cpi	r24, 0x06	; 6
    22c4:	69 f5       	brne	.+90     	; 0x2320 <CheckInput+0x170>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 59       	subi	r30, 0x94	; 148
    22d0:	f5 4c       	sbci	r31, 0xC5	; 197
    22d2:	20 81       	ld	r18, Z
    22d4:	20 53       	subi	r18, 0x30	; 48
    22d6:	20 83       	st	Z, r18
                    bitNr *= 10;
    22d8:	11 0f       	add	r17, r17
    22da:	21 2f       	mov	r18, r17
    22dc:	22 0f       	add	r18, r18
    22de:	22 0f       	add	r18, r18
    22e0:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    22e2:	20 91 6d 3a 	lds	r18, 0x3A6D	; 0x803a6d <serRx+0x1>
    22e6:	23 30       	cpi	r18, 0x03	; 3
    22e8:	48 f4       	brcc	.+18     	; 0x22fc <CheckInput+0x14c>
                    if (serRx[x] < 10) {
    22ea:	20 81       	ld	r18, Z
    22ec:	2a 30       	cpi	r18, 0x0A	; 10
    22ee:	b0 f4       	brcc	.+44     	; 0x231c <CheckInput+0x16c>
                        bitNr += serRx[x];
    22f0:	20 81       	ld	r18, Z
    22f2:	12 0f       	add	r17, r18
    22f4:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	91 05       	cpc	r25, r1
    22fa:	41 f7       	brne	.-48     	; 0x22cc <CheckInput+0x11c>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    22fc:	81 2f       	mov	r24, r17
    22fe:	8f 77       	andi	r24, 0x7F	; 127
    2300:	69 f0       	breq	.+26     	; 0x231c <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    2302:	80 91 70 3a 	lds	r24, 0x3A70	; 0x803a70 <serRx+0x4>
    2306:	60 91 71 3a 	lds	r22, 0x3A71	; 0x803a71 <serRx+0x5>
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	78 2b       	or	r23, r24
    230e:	81 2f       	mov	r24, r17
    2310:	80 95       	com	r24
    2312:	d6 db       	rcall	.-2132   	; 0x1ac0 <Cheat>
    2314:	88 23       	and	r24, r24
    2316:	11 f0       	breq	.+4      	; 0x231c <CheckInput+0x16c>
    2318:	81 2f       	mov	r24, r17
    231a:	c5 d8       	rcall	.-3702   	; 0x14a6 <UpdateState>
                }
                responseList = SetStandardResponse(0);
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	50 c0       	rjmp	.+160    	; 0x23c0 <CheckInput+0x210>
    2320:	d8 01       	movw	r26, r16
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    2326:	fc 01       	movw	r30, r24
    2328:	e4 59       	subi	r30, 0x94	; 148
    232a:	f5 4c       	sbci	r31, 0xC5	; 197
    232c:	20 81       	ld	r18, Z
    232e:	21 34       	cpi	r18, 0x41	; 65
    2330:	18 f0       	brcs	.+6      	; 0x2338 <CheckInput+0x188>
    2332:	20 81       	ld	r18, Z
    2334:	2b 35       	cpi	r18, 0x5B	; 91
    2336:	10 f0       	brcs	.+4      	; 0x233c <CheckInput+0x18c>
    2338:	20 81       	ld	r18, Z
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <CheckInput+0x190>
    233c:	20 81       	ld	r18, Z
    233e:	20 62       	ori	r18, 0x20	; 32
    2340:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    2342:	20 81       	ld	r18, Z
    2344:	21 11       	cpse	r18, r1
    2346:	05 c0       	rjmp	.+10     	; 0x2352 <CheckInput+0x1a2>
                    data[x] = 0;
    2348:	f8 01       	movw	r30, r16
    234a:	e8 0f       	add	r30, r24
    234c:	f1 1d       	adc	r31, r1
    234e:	10 82       	st	Z, r1
                    break;
    2350:	05 c0       	rjmp	.+10     	; 0x235c <CheckInput+0x1ac>
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    2356:	81 34       	cpi	r24, 0x41	; 65
    2358:	91 05       	cpc	r25, r1
    235a:	29 f7       	brne	.-54     	; 0x2326 <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    235c:	80 91 6c 3a 	lds	r24, 0x3A6C	; 0x803a6c <serRx>
                data[0] = 0;
    2360:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2362:	81 11       	cpse	r24, r1
    2364:	05 c0       	rjmp	.+10     	; 0x2370 <CheckInput+0x1c0>
                data[0] = 0;
    2366:	10 82       	st	Z, r1
                RXCNT = 0;
    2368:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    236a:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <serRxDone>
    236e:	ab c1       	rjmp	.+854    	; 0x26c6 <CheckInput+0x516>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2370:	80 81       	ld	r24, Z
    2372:	8f 33       	cpi	r24, 0x3F	; 63
    2374:	11 f0       	breq	.+4      	; 0x237a <CheckInput+0x1ca>
    2376:	88 36       	cpi	r24, 0x68	; 104
    2378:	39 f5       	brne	.+78     	; 0x23c8 <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    237a:	8b e5       	ldi	r24, 0x5B	; 91
    237c:	9a e7       	ldi	r25, 0x7A	; 122
    237e:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <reactStr>
    2382:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <reactStr+0x1>
    reactStr[1][number]=length;
    2386:	84 e0       	ldi	r24, 0x04	; 4
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x40>
    238e:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x41>
    reactStr[2][number]=type;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x80>
    239a:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    239e:	23 e9       	ldi	r18, 0x93	; 147
    23a0:	3b e7       	ldi	r19, 0x7B	; 123
    23a2:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    23a6:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    23aa:	2d e6       	ldi	r18, 0x6D	; 109
    23ac:	34 e0       	ldi	r19, 0x04	; 4
    23ae:	20 93 54 39 	sts	0x3954, r18	; 0x803954 <reactStr+0x42>
    23b2:	30 93 55 39 	sts	0x3955, r19	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    23b6:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    23ba:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	71 dc       	rcall	.-1822   	; 0x1ca4 <SetStandardResponse>
    23c2:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <responseList>
    23c6:	7f c1       	rjmp	.+766    	; 0x26c6 <CheckInput+0x516>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    23c8:	81 36       	cpi	r24, 0x61	; 97
    23ca:	d9 f4       	brne	.+54     	; 0x2402 <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23cc:	8b e5       	ldi	r24, 0x5B	; 91
    23ce:	9a e7       	ldi	r25, 0x7A	; 122
    23d0:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <reactStr>
    23d4:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <reactStr+0x1>
    reactStr[1][number]=length;
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x40>
    23e0:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x41>
    reactStr[2][number]=type;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x80>
    23ec:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23f0:	2e e6       	ldi	r18, 0x6E	; 110
    23f2:	3a e7       	ldi	r19, 0x7A	; 122
    23f4:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    23f8:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    23fc:	25 e2       	ldi	r18, 0x25	; 37
    23fe:	31 e0       	ldi	r19, 0x01	; 1
    2400:	d6 cf       	rjmp	.-84     	; 0x23ae <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2402:	87 37       	cpi	r24, 0x77	; 119
    2404:	09 f0       	breq	.+2      	; 0x2408 <CheckInput+0x258>
    2406:	6e c0       	rjmp	.+220    	; 0x24e4 <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2408:	8b e5       	ldi	r24, 0x5B	; 91
    240a:	9a e7       	ldi	r25, 0x7A	; 122
    240c:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <reactStr>
    2410:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <reactStr+0x1>
    reactStr[1][number]=length;
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x40>
    241c:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x41>
    reactStr[2][number]=type;
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	20 93 92 39 	sts	0x3992, r18	; 0x803992 <reactStr+0x80>
    2428:	30 93 93 39 	sts	0x3993, r19	; 0x803993 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    242c:	8b ec       	ldi	r24, 0xCB	; 203
    242e:	96 e7       	ldi	r25, 0x76	; 118
    2430:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2434:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2438:	82 e1       	ldi	r24, 0x12	; 18
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    2440:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    2444:	20 93 94 39 	sts	0x3994, r18	; 0x803994 <reactStr+0x82>
    2448:	30 93 95 39 	sts	0x3995, r19	; 0x803995 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    244c:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <whoami>
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	19 f4       	brne	.+6      	; 0x245a <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2454:	85 ec       	ldi	r24, 0xC5	; 197
    2456:	96 e7       	ldi	r25, 0x76	; 118
    2458:	0f c0       	rjmp	.+30     	; 0x2478 <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	49 f4       	brne	.+18     	; 0x2470 <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    245e:	82 ec       	ldi	r24, 0xC2	; 194
    2460:	96 e7       	ldi	r25, 0x76	; 118
    2462:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    2466:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	1e c0       	rjmp	.+60     	; 0x24ac <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	49 f4       	brne	.+18     	; 0x2486 <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2474:	8c eb       	ldi	r24, 0xBC	; 188
    2476:	96 e7       	ldi	r25, 0x76	; 118
    2478:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    247c:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    2480:	86 e0       	ldi	r24, 0x06	; 6
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	13 c0       	rjmp	.+38     	; 0x24ac <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	49 f4       	brne	.+18     	; 0x249c <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    248a:	87 eb       	ldi	r24, 0xB7	; 183
    248c:	96 e7       	ldi	r25, 0x76	; 118
    248e:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    2492:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    2496:	85 e0       	ldi	r24, 0x05	; 5
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	08 c0       	rjmp	.+16     	; 0x24ac <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    249c:	80 e4       	ldi	r24, 0x40	; 64
    249e:	96 e7       	ldi	r25, 0x76	; 118
    24a0:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    24a4:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    24a8:	82 e4       	ldi	r24, 0x42	; 66
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <reactStr+0x44>
    24b0:	90 93 57 39 	sts	0x3957, r25	; 0x803957 <reactStr+0x45>
    reactStr[2][number]=type;
    24b4:	20 93 96 39 	sts	0x3996, r18	; 0x803996 <reactStr+0x84>
    24b8:	30 93 97 39 	sts	0x3997, r19	; 0x803997 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24bc:	8d e9       	ldi	r24, 0x9D	; 157
    24be:	96 e7       	ldi	r25, 0x76	; 118
    24c0:	80 93 18 39 	sts	0x3918, r24	; 0x803918 <reactStr+0x6>
    24c4:	90 93 19 39 	sts	0x3919, r25	; 0x803919 <reactStr+0x7>
    reactStr[1][number]=length;
    24c8:	8a e1       	ldi	r24, 0x1A	; 26
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	80 93 58 39 	sts	0x3958, r24	; 0x803958 <reactStr+0x46>
    24d0:	90 93 59 39 	sts	0x3959, r25	; 0x803959 <reactStr+0x47>
    reactStr[2][number]=type;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <reactStr+0x86>
    24dc:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    24e0:	84 e0       	ldi	r24, 0x04	; 4
    24e2:	6e cf       	rjmp	.-292    	; 0x23c0 <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    24e4:	81 37       	cpi	r24, 0x71	; 113
    24e6:	d9 f4       	brne	.+54     	; 0x251e <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24e8:	8b e5       	ldi	r24, 0x5B	; 91
    24ea:	9a e7       	ldi	r25, 0x7A	; 122
    24ec:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <reactStr>
    24f0:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <reactStr+0x1>
    reactStr[1][number]=length;
    24f4:	84 e0       	ldi	r24, 0x04	; 4
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x40>
    24fc:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x41>
    reactStr[2][number]=type;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x80>
    2508:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    250c:	23 e0       	ldi	r18, 0x03	; 3
    250e:	3a e7       	ldi	r19, 0x7A	; 122
    2510:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    2514:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2518:	24 e5       	ldi	r18, 0x54	; 84
    251a:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    251c:	48 cf       	rjmp	.-368    	; 0x23ae <CheckInput+0x1fe>
    251e:	6e eb       	ldi	r22, 0xBE	; 190
    2520:	7a eb       	ldi	r23, 0xBA	; 186
    2522:	c8 01       	movw	r24, r16
    2524:	6d db       	rcall	.-2342   	; 0x1c00 <StartsWith>
    2526:	88 23       	and	r24, r24
    2528:	f9 f0       	breq	.+62     	; 0x2568 <CheckInput+0x3b8>
    252a:	1e e6       	ldi	r17, 0x6E	; 110
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    252c:	60 e0       	ldi	r22, 0x00	; 0
    252e:	81 2f       	mov	r24, r17
    2530:	0e 94 39 0a 	call	0x1472	; 0x1472 <WriteStatusBit>
    2534:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2536:	12 37       	cpi	r17, 0x72	; 114
    2538:	c9 f7       	brne	.-14     	; 0x252c <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    253a:	0e 94 b2 09 	call	0x1364	; 0x1364 <SaveGameState>

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	e1 e0       	ldi	r30, 0x01	; 1
    2542:	fb eb       	ldi	r31, 0xBB	; 187
    2544:	de 01       	movw	r26, r28
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	01 90       	ld	r0, Z+
    254a:	0d 92       	st	X+, r0
    254c:	8a 95       	dec	r24
    254e:	e1 f7       	brne	.-8      	; 0x2548 <CheckInput+0x398>
                SerSpeed(60);
    2550:	8c e3       	ldi	r24, 0x3C	; 60
    2552:	0e 94 a4 08 	call	0x1148	; 0x1148 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2556:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    255a:	88 23       	and	r24, r24
    255c:	e1 f3       	breq	.-8      	; 0x2556 <CheckInput+0x3a6>
    255e:	ce 01       	movw	r24, r28
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	0e 94 93 08 	call	0x1126	; 0x1126 <SerSend>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    2566:	f7 cf       	rjmp	.-18     	; 0x2556 <CheckInput+0x3a6>
    2568:	64 ec       	ldi	r22, 0xC4	; 196
    256a:	7a eb       	ldi	r23, 0xBA	; 186
    256c:	c8 01       	movw	r24, r16
    256e:	48 db       	rcall	.-2416   	; 0x1c00 <StartsWith>
    2570:	68 2e       	mov	r6, r24
    2572:	88 23       	and	r24, r24
    2574:	61 f1       	breq	.+88     	; 0x25ce <CheckInput+0x41e>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	89 a3       	std	Y+33, r24	; 0x21
    257a:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	be 01       	movw	r22, r28
    2580:	6f 5d       	subi	r22, 0xDF	; 223
    2582:	7f 4f       	sbci	r23, 0xFF	; 255
    2584:	81 2f       	mov	r24, r17
    2586:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <EEWrite>
    258a:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    258c:	10 32       	cpi	r17, 0x20	; 32
    258e:	b1 f7       	brne	.-20     	; 0x257c <CheckInput+0x3cc>
    2590:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	81 2f       	mov	r24, r17
    2596:	0e 94 39 0a 	call	0x1472	; 0x1472 <WriteStatusBit>
    259a:	1f 5f       	subi	r17, 0xFF	; 255
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    259c:	12 37       	cpi	r17, 0x72	; 114
    259e:	c9 f7       	brne	.-14     	; 0x2592 <CheckInput+0x3e2>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    25a0:	0e 94 b2 09 	call	0x1364	; 0x1364 <SaveGameState>

                uint8_t cheat[] = "Reset please! ";
    25a4:	8f e0       	ldi	r24, 0x0F	; 15
    25a6:	e1 e2       	ldi	r30, 0x21	; 33
    25a8:	fb eb       	ldi	r31, 0xBB	; 187
    25aa:	de 01       	movw	r26, r28
    25ac:	11 96       	adiw	r26, 0x01	; 1
    25ae:	01 90       	ld	r0, Z+
    25b0:	0d 92       	st	X+, r0
    25b2:	8a 95       	dec	r24
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <CheckInput+0x3fe>
                SerSpeed(60);
    25b6:	8c e3       	ldi	r24, 0x3C	; 60
    25b8:	0e 94 a4 08 	call	0x1148	; 0x1148 <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    25bc:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <serTxDone>
    25c0:	88 23       	and	r24, r24
    25c2:	e1 f3       	breq	.-8      	; 0x25bc <CheckInput+0x40c>
    25c4:	ce 01       	movw	r24, r28
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	0e 94 93 08 	call	0x1126	; 0x1126 <SerSend>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    25cc:	f7 cf       	rjmp	.-18     	; 0x25bc <CheckInput+0x40c>
    25ce:	6b ef       	ldi	r22, 0xFB	; 251
    25d0:	7a eb       	ldi	r23, 0xBA	; 186
    25d2:	c8 01       	movw	r24, r16
    25d4:	15 db       	rcall	.-2518   	; 0x1c00 <StartsWith>
    25d6:	88 23       	and	r24, r24
    25d8:	09 f4       	brne	.+2      	; 0x25dc <CheckInput+0x42c>
    25da:	2c ce       	rjmp	.-936    	; 0x2234 <CheckInput+0x84>
    25dc:	02 e1       	ldi	r16, 0x12	; 18
    25de:	19 e3       	ldi	r17, 0x39	; 57
    25e0:	78 e1       	ldi	r23, 0x18	; 24
    25e2:	77 2e       	mov	r7, r23
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    25e4:	ea e0       	ldi	r30, 0x0A	; 10
    25e6:	5e 2e       	mov	r5, r30
                        bit /= 10;
    25e8:	f4 e6       	ldi	r31, 0x64	; 100
    25ea:	4f 2e       	mov	r4, r31
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    25ec:	ee 24       	eor	r14, r14
    25ee:	e3 94       	inc	r14
    25f0:	f1 2c       	mov	r15, r1
    25f2:	cc 24       	eor	r12, r12
    25f4:	c3 94       	inc	r12
    25f6:	d1 2c       	mov	r13, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25f8:	89 e5       	ldi	r24, 0x59	; 89
    25fa:	88 2e       	mov	r8, r24
    25fc:	8a e7       	ldi	r24, 0x7A	; 122
    25fe:	98 2e       	mov	r9, r24
    reactStr[1][number]=length;
    2600:	92 e0       	ldi	r25, 0x02	; 2
    2602:	a9 2e       	mov	r10, r25
    2604:	b1 2c       	mov	r11, r1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	be 01       	movw	r22, r28
    260a:	6f 5d       	subi	r22, 0xDF	; 223
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	87 2d       	mov	r24, r7
    2610:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <EERead>
                    bit = 0xff-bit;
    2614:	29 a1       	ldd	r18, Y+33	; 0x21
    2616:	20 95       	com	r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2618:	82 2f       	mov	r24, r18
    261a:	65 2d       	mov	r22, r5
    261c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__udivmodqi4>
    2620:	9b 83       	std	Y+3, r25	; 0x03
    2622:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__udivmodqi4>
    2626:	9a 83       	std	Y+2, r25	; 0x02
                        bit /= 10;
    2628:	82 2f       	mov	r24, r18
    262a:	64 2d       	mov	r22, r4
    262c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__udivmodqi4>
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	19 a2       	std	Y+33, r1	; 0x21
    2634:	de 01       	movw	r26, r28
    2636:	11 96       	adiw	r26, 0x01	; 1
    2638:	40 e0       	ldi	r20, 0x00	; 0
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    263a:	2d 91       	ld	r18, X+
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    263c:	86 2d       	mov	r24, r6
    263e:	84 0f       	add	r24, r20
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	fc 01       	movw	r30, r24
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	ee 5e       	subi	r30, 0xEE	; 238
    264a:	f6 4c       	sbci	r31, 0xC6	; 198
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	2d 52       	subi	r18, 0x2D	; 45
    2650:	3b 48       	sbci	r19, 0x8B	; 139
    2652:	20 83       	st	Z, r18
    2654:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2656:	fc 01       	movw	r30, r24
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	ee 5a       	subi	r30, 0xAE	; 174
    265e:	f6 4c       	sbci	r31, 0xC6	; 198
    2660:	e0 82       	st	Z, r14
    2662:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[2][number]=type;
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	fc 01       	movw	r30, r24
    266a:	ee 56       	subi	r30, 0x6E	; 110
    266c:	f6 4c       	sbci	r31, 0xC6	; 198
    266e:	e0 82       	st	Z, r14
    2670:	f1 82       	std	Z+1, r15	; 0x01
    2672:	4f 5f       	subi	r20, 0xFF	; 255
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    2674:	43 30       	cpi	r20, 0x03	; 3
    2676:	09 f7       	brne	.-62     	; 0x263a <CheckInput+0x48a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2678:	f8 01       	movw	r30, r16
    267a:	86 82       	std	Z+6, r8	; 0x06
    267c:	97 82       	std	Z+7, r9	; 0x07
    reactStr[1][number]=length;
    267e:	ea 5b       	subi	r30, 0xBA	; 186
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	a0 82       	st	Z, r10
    2684:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2686:	e0 5c       	subi	r30, 0xC0	; 192
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	c0 82       	st	Z, r12
    268c:	d1 82       	std	Z+1, r13	; 0x01
    268e:	73 94       	inc	r7
    2690:	08 5f       	subi	r16, 0xF8	; 248
    2692:	1f 4f       	sbci	r17, 0xFF	; 255
    2694:	f4 e0       	ldi	r31, 0x04	; 4
    2696:	6f 0e       	add	r6, r31
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2698:	80 e2       	ldi	r24, 0x20	; 32
    269a:	78 12       	cpse	r7, r24
    269c:	b4 cf       	rjmp	.-152    	; 0x2606 <CheckInput+0x456>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    269e:	8b e5       	ldi	r24, 0x5B	; 91
    26a0:	9a e7       	ldi	r25, 0x7A	; 122
    26a2:	80 93 50 39 	sts	0x3950, r24	; 0x803950 <reactStr+0x3e>
    26a6:	90 93 51 39 	sts	0x3951, r25	; 0x803951 <reactStr+0x3f>
    reactStr[1][number]=length;
    26aa:	84 e0       	ldi	r24, 0x04	; 4
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	80 93 90 39 	sts	0x3990, r24	; 0x803990 <reactStr+0x7e>
    26b2:	90 93 91 39 	sts	0x3991, r25	; 0x803991 <reactStr+0x7f>
    reactStr[2][number]=type;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0xbe>
    26be:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0xbf>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    26c2:	70 92 11 39 	sts	0x3911, r7	; 0x803911 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    26c6:	ff 24       	eor	r15, r15
    26c8:	f3 94       	inc	r15
}
    26ca:	8f 2d       	mov	r24, r15
    26cc:	a1 96       	adiw	r28, 0x21	; 33
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	ff 90       	pop	r15
    26dc:	ef 90       	pop	r14
    26de:	df 90       	pop	r13
    26e0:	cf 90       	pop	r12
    26e2:	bf 90       	pop	r11
    26e4:	af 90       	pop	r10
    26e6:	9f 90       	pop	r9
    26e8:	8f 90       	pop	r8
    26ea:	7f 90       	pop	r7
    26ec:	6f 90       	pop	r6
    26ee:	5f 90       	pop	r5
    26f0:	4f 90       	pop	r4
    26f2:	08 95       	ret

000026f4 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    26f4:	4f 92       	push	r4
    26f6:	5f 92       	push	r5
    26f8:	6f 92       	push	r6
    26fa:	7f 92       	push	r7
    26fc:	8f 92       	push	r8
    26fe:	9f 92       	push	r9
    2700:	af 92       	push	r10
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	2a 97       	sbiw	r28, 0x0a	; 10
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2720:	70 dc       	rcall	.-1824   	; 0x2002 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2722:	c8 01       	movw	r24, r16
    2724:	6e dc       	rcall	.-1828   	; 0x2002 <CleanInput>
    2726:	f8 2e       	mov	r15, r24

    if (inputLen) {
    2728:	88 23       	and	r24, r24
    272a:	09 f4       	brne	.+2      	; 0x272e <ProcessInput+0x3a>
    272c:	de c7       	rjmp	.+4028   	; 0x36ea <ProcessInput+0xff6>

        //eXit to previous location
        if (data[0] == 'x'){
    272e:	d8 01       	movw	r26, r16
    2730:	8c 91       	ld	r24, X
    2732:	88 37       	cpi	r24, 0x78	; 120
    2734:	09 f0       	breq	.+2      	; 0x2738 <ProcessInput+0x44>
    2736:	45 c0       	rjmp	.+138    	; 0x27c2 <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2738:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    273c:	e8 2f       	mov	r30, r24
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	ee 0f       	add	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	ee 52       	subi	r30, 0x2E	; 46
    2746:	f6 4c       	sbci	r31, 0xC6	; 198
    2748:	20 81       	ld	r18, Z
    274a:	31 81       	ldd	r19, Z+1	; 0x01
    274c:	23 2b       	or	r18, r19
    274e:	11 f0       	breq	.+4      	; 0x2754 <ProcessInput+0x60>
    2750:	81 11       	cpse	r24, r1
    2752:	03 c0       	rjmp	.+6      	; 0x275a <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2754:	82 e8       	ldi	r24, 0x82	; 130
    2756:	96 e7       	ldi	r25, 0x76	; 118
    2758:	a1 c5       	rjmp	.+2882   	; 0x329c <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    275a:	80 91 18 3a 	lds	r24, 0x3A18	; 0x803a18 <currObj+0x6>
    275e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <CheckState>
    2762:	88 23       	and	r24, r24
    2764:	b9 f0       	breq	.+46     	; 0x2794 <ProcessInput+0xa0>
                --currDepth;
    2766:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    276a:	e1 50       	subi	r30, 0x01	; 1
    276c:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	ee 52       	subi	r30, 0x2E	; 46
    2778:	f6 4c       	sbci	r31, 0xC6	; 198
    277a:	62 e1       	ldi	r22, 0x12	; 18
    277c:	7a e3       	ldi	r23, 0x3A	; 58
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	0c db       	rcall	.-2536   	; 0x1d9c <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2784:	80 91 16 3a 	lds	r24, 0x3A16	; 0x803a16 <currObj+0x4>
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    278e:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    2792:	31 c2       	rjmp	.+1122   	; 0x2bf6 <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2794:	80 91 34 3a 	lds	r24, 0x3A34	; 0x803a34 <currObj+0x22>
    2798:	90 91 35 3a 	lds	r25, 0x3A35	; 0x803a35 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    279c:	20 91 26 3a 	lds	r18, 0x3A26	; 0x803a26 <currObj+0x14>
    27a0:	30 91 27 3a 	lds	r19, 0x3A27	; 0x803a27 <currObj+0x15>
    27a4:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    27a8:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    27ac:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    27b0:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    27b4:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    27b8:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    27bc:	80 91 3a 3a 	lds	r24, 0x3A3A	; 0x803a3a <currObj+0x28>
    27c0:	3a c6       	rjmp	.+3188   	; 0x3436 <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    27c2:	85 36       	cpi	r24, 0x65	; 101
    27c4:	19 f0       	breq	.+6      	; 0x27cc <ProcessInput+0xd8>
    27c6:	8f 36       	cpi	r24, 0x6F	; 111
    27c8:	09 f0       	breq	.+2      	; 0x27cc <ProcessInput+0xd8>
    27ca:	df c0       	rjmp	.+446    	; 0x298a <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    27cc:	b2 e0       	ldi	r27, 0x02	; 2
    27ce:	fb 12       	cpse	r15, r27
    27d0:	c1 cf       	rjmp	.-126    	; 0x2754 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    27d2:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <currDepth>
    27d6:	f1 2c       	mov	r15, r1
    27d8:	f7 01       	movw	r30, r14
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ee 52       	subi	r30, 0x2E	; 46
    27e0:	f6 4c       	sbci	r31, 0xC6	; 198
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	d8 01       	movw	r26, r16
    27e8:	11 96       	adiw	r26, 0x01	; 1
    27ea:	6c 91       	ld	r22, X
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	a0 db       	rcall	.-2240   	; 0x1f32 <FindChild>
    27f2:	f7 01       	movw	r30, r14
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	ec 52       	subi	r30, 0x2C	; 44
    27fa:	f6 4c       	sbci	r31, 0xC6	; 198
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2800:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <currDepth>
    2804:	29 2f       	mov	r18, r25
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	f9 01       	movw	r30, r18
    280a:	ee 0f       	add	r30, r30
    280c:	ff 1f       	adc	r31, r31
    280e:	ec 52       	subi	r30, 0x2C	; 44
    2810:	f6 4c       	sbci	r31, 0xC6	; 198
    2812:	40 81       	ld	r20, Z
    2814:	51 81       	ldd	r21, Z+1	; 0x01
    2816:	41 15       	cp	r20, r1
    2818:	51 05       	cpc	r21, r1
    281a:	21 f0       	breq	.+8      	; 0x2824 <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    281c:	63 ed       	ldi	r22, 0xD3	; 211
    281e:	78 e3       	ldi	r23, 0x38	; 56
    2820:	ca 01       	movw	r24, r20
    2822:	1c c0       	rjmp	.+56     	; 0x285c <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2824:	99 23       	and	r25, r25
    2826:	09 f4       	brne	.+2      	; 0x282a <ProcessInput+0x136>
    2828:	77 c7       	rjmp	.+3822   	; 0x3718 <ProcessInput+0x1024>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    282a:	22 0f       	add	r18, r18
    282c:	33 1f       	adc	r19, r19
    282e:	f9 01       	movw	r30, r18
    2830:	e0 53       	subi	r30, 0x30	; 48
    2832:	f6 4c       	sbci	r31, 0xC6	; 198
    2834:	d8 01       	movw	r26, r16
    2836:	11 96       	adiw	r26, 0x01	; 1
    2838:	6c 91       	ld	r22, X
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	25 db       	rcall	.-2486   	; 0x1e8a <CheckLetter>
    2840:	88 23       	and	r24, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <ProcessInput+0x152>
    2844:	69 c7       	rjmp	.+3794   	; 0x3718 <ProcessInput+0x1024>
                        PopulateObject(route[currDepth-1], &actObj1);
    2846:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	ee 0f       	add	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	e0 53       	subi	r30, 0x30	; 48
    2852:	f6 4c       	sbci	r31, 0xC6	; 198
    2854:	63 ed       	ldi	r22, 0xD3	; 211
    2856:	78 e3       	ldi	r23, 0x38	; 56
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	9f da       	rcall	.-2754   	; 0x1d9c <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    285e:	f8 01       	movw	r30, r16
    2860:	80 81       	ld	r24, Z
    2862:	85 36       	cpi	r24, 0x65	; 101
    2864:	c9 f4       	brne	.+50     	; 0x2898 <ProcessInput+0x1a4>
    2866:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3993+0x8>
    286a:	80 fd       	sbrc	r24, 0
    286c:	1e c0       	rjmp	.+60     	; 0x28aa <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    286e:	80 ea       	ldi	r24, 0xA0	; 160
    2870:	99 e7       	ldi	r25, 0x79	; 121
    2872:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2876:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    287a:	8e e1       	ldi	r24, 0x1E	; 30
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    2882:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    288e:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2892:	72 e0       	ldi	r23, 0x02	; 2
    2894:	77 2e       	mov	r7, r23
    2896:	0e c7       	rjmp	.+3612   	; 0x36b4 <ProcessInput+0xfc0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2898:	8f 36       	cpi	r24, 0x6F	; 111
    289a:	39 f4       	brne	.+14     	; 0x28aa <ProcessInput+0x1b6>
    289c:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3993+0x8>
    28a0:	81 fd       	sbrc	r24, 1
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28a4:	85 e8       	ldi	r24, 0x85	; 133
    28a6:	99 e7       	ldi	r25, 0x79	; 121
    28a8:	f9 c4       	rjmp	.+2546   	; 0x329c <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    28aa:	80 91 d9 38 	lds	r24, 0x38D9	; 0x8038d9 <actObj1.3993+0x6>
    28ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <CheckState>
    28b2:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    28b6:	88 23       	and	r24, r24
    28b8:	09 f4       	brne	.+2      	; 0x28bc <ProcessInput+0x1c8>
    28ba:	49 c0       	rjmp	.+146    	; 0x294e <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    28bc:	ae 2f       	mov	r26, r30
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	aa 0f       	add	r26, r26
    28c2:	bb 1f       	adc	r27, r27
    28c4:	ac 52       	subi	r26, 0x2C	; 44
    28c6:	b6 4c       	sbci	r27, 0xC6	; 198
    28c8:	8d 91       	ld	r24, X+
    28ca:	9c 91       	ld	r25, X
    28cc:	89 2b       	or	r24, r25
    28ce:	11 f0       	breq	.+4      	; 0x28d4 <ProcessInput+0x1e0>
    28d0:	ef 5f       	subi	r30, 0xFF	; 255
    28d2:	01 c0       	rjmp	.+2      	; 0x28d6 <ProcessInput+0x1e2>
    28d4:	e1 50       	subi	r30, 0x01	; 1
    28d6:	e0 93 29 38 	sts	0x3829, r30	; 0x803829 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    28da:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	ee 52       	subi	r30, 0x2E	; 46
    28e6:	f6 4c       	sbci	r31, 0xC6	; 198
    28e8:	62 e1       	ldi	r22, 0x12	; 18
    28ea:	7a e3       	ldi	r23, 0x3A	; 58
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	55 da       	rcall	.-2902   	; 0x1d9c <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    28f2:	80 91 2e 3a 	lds	r24, 0x3A2E	; 0x803a2e <currObj+0x1c>
    28f6:	90 91 2f 3a 	lds	r25, 0x3A2F	; 0x803a2f <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28fa:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <currObj+0xe>
    28fe:	30 91 21 3a 	lds	r19, 0x3A21	; 0x803a21 <currObj+0xf>
    2902:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    2906:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    290a:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    290e:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    2912:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    2916:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    291a:	8b e5       	ldi	r24, 0x5B	; 91
    291c:	9a e7       	ldi	r25, 0x7A	; 122
    291e:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    2922:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <reactStr+0x44>
    292e:	90 93 57 39 	sts	0x3957, r25	; 0x803957 <reactStr+0x45>
    reactStr[2][number]=type;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	80 93 96 39 	sts	0x3996, r24	; 0x803996 <reactStr+0x84>
    293a:	90 93 97 39 	sts	0x3997, r25	; 0x803997 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    293e:	80 91 16 3a 	lds	r24, 0x3A16	; 0x803a16 <currObj+0x4>
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    2948:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    294c:	8d c4       	rjmp	.+2330   	; 0x3268 <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	ee 0f       	add	r30, r30
    2952:	ff 1f       	adc	r31, r31
    2954:	ec 52       	subi	r30, 0x2C	; 44
    2956:	f6 4c       	sbci	r31, 0xC6	; 198
    2958:	10 82       	st	Z, r1
    295a:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    295c:	80 91 f5 38 	lds	r24, 0x38F5	; 0x8038f5 <actObj1.3993+0x22>
    2960:	90 91 f6 38 	lds	r25, 0x38F6	; 0x8038f6 <actObj1.3993+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2964:	20 91 e7 38 	lds	r18, 0x38E7	; 0x8038e7 <actObj1.3993+0x14>
    2968:	30 91 e8 38 	lds	r19, 0x38E8	; 0x8038e8 <actObj1.3993+0x15>
    296c:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    2970:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2974:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    2978:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    297c:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    2980:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2984:	80 91 fb 38 	lds	r24, 0x38FB	; 0x8038fb <actObj1.3993+0x28>
    2988:	56 c5       	rjmp	.+2732   	; 0x3436 <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    298a:	8c 36       	cpi	r24, 0x6C	; 108
    298c:	09 f0       	breq	.+2      	; 0x2990 <ProcessInput+0x29c>
    298e:	57 c1       	rjmp	.+686    	; 0x2c3e <ProcessInput+0x54a>
    2990:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
            if (inputLen == 1) {
    2994:	b1 e0       	ldi	r27, 0x01	; 1
    2996:	fb 12       	cpse	r15, r27
    2998:	f6 c0       	rjmp	.+492    	; 0x2b86 <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    299a:	80 91 2e 3a 	lds	r24, 0x3A2E	; 0x803a2e <currObj+0x1c>
    299e:	90 91 2f 3a 	lds	r25, 0x3A2F	; 0x803a2f <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29a2:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <currObj+0xe>
    29a6:	30 91 21 3a 	lds	r19, 0x3A21	; 0x803a21 <currObj+0xf>
    29aa:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    29ae:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    29b2:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    29b6:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    29ba:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    29be:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29c2:	8b e5       	ldi	r24, 0x5B	; 91
    29c4:	9a e7       	ldi	r25, 0x7A	; 122
    29c6:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    29ca:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <reactStr+0x44>
    29d6:	90 93 57 39 	sts	0x3957, r25	; 0x803957 <reactStr+0x45>
    reactStr[2][number]=type;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	80 93 96 39 	sts	0x3996, r24	; 0x803996 <reactStr+0x84>
    29e2:	90 93 97 39 	sts	0x3997, r25	; 0x803997 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29e6:	2e ee       	ldi	r18, 0xEE	; 238
    29e8:	39 e7       	ldi	r19, 0x79	; 121
    29ea:	20 93 18 39 	sts	0x3918, r18	; 0x803918 <reactStr+0x6>
    29ee:	30 93 19 39 	sts	0x3919, r19	; 0x803919 <reactStr+0x7>
    reactStr[1][number]=length;
    29f2:	25 e1       	ldi	r18, 0x15	; 21
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	20 93 58 39 	sts	0x3958, r18	; 0x803958 <reactStr+0x46>
    29fa:	30 93 59 39 	sts	0x3959, r19	; 0x803959 <reactStr+0x47>
    reactStr[2][number]=type;
    29fe:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <reactStr+0x86>
    2a02:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	ee 0f       	add	r30, r30
    2a0a:	ff 1f       	adc	r31, r31
    2a0c:	ec 52       	subi	r30, 0x2C	; 44
    2a0e:	f6 4c       	sbci	r31, 0xC6	; 198
    2a10:	10 82       	st	Z, r1
    2a12:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2a14:	84 e0       	ldi	r24, 0x04	; 4
    2a16:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a18:	99 e5       	ldi	r25, 0x59	; 89
    2a1a:	c9 2e       	mov	r12, r25
    2a1c:	9a e7       	ldi	r25, 0x7A	; 122
    2a1e:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2a20:	22 e0       	ldi	r18, 0x02	; 2
    2a22:	a2 2e       	mov	r10, r18
    2a24:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2a26:	88 24       	eor	r8, r8
    2a28:	83 94       	inc	r8
    2a2a:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2a2c:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <currDepth>
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 01       	movw	r18, r24
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	f9 01       	movw	r30, r18
    2a3a:	ec 52       	subi	r30, 0x2C	; 44
    2a3c:	f6 4c       	sbci	r31, 0xC6	; 198
    2a3e:	7f 01       	movw	r14, r30
    2a40:	40 81       	ld	r20, Z
    2a42:	51 81       	ldd	r21, Z+1	; 0x01
    2a44:	f9 01       	movw	r30, r18
    2a46:	ee 52       	subi	r30, 0x2E	; 46
    2a48:	f6 4c       	sbci	r31, 0xC6	; 198
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	70 da       	rcall	.-2848   	; 0x1f32 <FindChild>
    2a52:	d7 01       	movw	r26, r14
    2a54:	8d 93       	st	X+, r24
    2a56:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2a58:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	ee 0f       	add	r30, r30
    2a60:	ff 1f       	adc	r31, r31
    2a62:	ec 52       	subi	r30, 0x2C	; 44
    2a64:	f6 4c       	sbci	r31, 0xC6	; 198
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <ProcessInput+0x37c>
    2a6e:	4a c0       	rjmp	.+148    	; 0x2b04 <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2a70:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <inventory>
    2a74:	30 91 3b 38 	lds	r19, 0x383B	; 0x80383b <inventory+0x1>
    2a78:	82 17       	cp	r24, r18
    2a7a:	93 07       	cpc	r25, r19
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <ProcessInput+0x38c>
    2a7e:	42 c0       	rjmp	.+132    	; 0x2b04 <ProcessInput+0x410>
    2a80:	20 91 3c 38 	lds	r18, 0x383C	; 0x80383c <inventory+0x2>
    2a84:	30 91 3d 38 	lds	r19, 0x383D	; 0x80383d <inventory+0x3>
    2a88:	82 17       	cp	r24, r18
    2a8a:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2a8c:	d9 f1       	breq	.+118    	; 0x2b04 <ProcessInput+0x410>
    2a8e:	63 ed       	ldi	r22, 0xD3	; 211
    2a90:	78 e3       	ldi	r23, 0x38	; 56
    2a92:	84 d9       	rcall	.-3320   	; 0x1d9c <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2a94:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0x1a>
    2a98:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a9c:	e6 2d       	mov	r30, r6
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	df 01       	movw	r26, r30
    2aa2:	aa 0f       	add	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	ae 5e       	subi	r26, 0xEE	; 238
    2aa8:	b6 4c       	sbci	r27, 0xC6	; 198
    2aaa:	20 91 df 38 	lds	r18, 0x38DF	; 0x8038df <actObj1.3993+0xc>
    2aae:	30 91 e0 38 	lds	r19, 0x38E0	; 0x8038e0 <actObj1.3993+0xd>
    2ab2:	2d 93       	st	X+, r18
    2ab4:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2ab6:	df 01       	movw	r26, r30
    2ab8:	aa 0f       	add	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	ae 5a       	subi	r26, 0xAE	; 174
    2abe:	b6 4c       	sbci	r27, 0xC6	; 198
    2ac0:	8d 93       	st	X+, r24
    2ac2:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ee 56       	subi	r30, 0x6E	; 110
    2aca:	f6 4c       	sbci	r31, 0xC6	; 198
    2acc:	10 82       	st	Z, r1
    2ace:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	86 0d       	add	r24, r6
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	63 94       	inc	r6
    2ad8:	63 94       	inc	r6
    2ada:	fc 01       	movw	r30, r24
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	ee 5e       	subi	r30, 0xEE	; 238
    2ae2:	f6 4c       	sbci	r31, 0xC6	; 198
    2ae4:	c0 82       	st	Z, r12
    2ae6:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    2ae8:	fc 01       	movw	r30, r24
    2aea:	ee 0f       	add	r30, r30
    2aec:	ff 1f       	adc	r31, r31
    2aee:	ee 5a       	subi	r30, 0xAE	; 174
    2af0:	f6 4c       	sbci	r31, 0xC6	; 198
    2af2:	a0 82       	st	Z, r10
    2af4:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	fc 01       	movw	r30, r24
    2afc:	ee 56       	subi	r30, 0x6E	; 110
    2afe:	f6 4c       	sbci	r31, 0xC6	; 198
    2b00:	80 82       	st	Z, r8
    2b02:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    2b04:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <currDepth>
    2b08:	82 2f       	mov	r24, r18
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	ee 0f       	add	r30, r30
    2b10:	ff 1f       	adc	r31, r31
    2b12:	ec 52       	subi	r30, 0x2C	; 44
    2b14:	f6 4c       	sbci	r31, 0xC6	; 198
    2b16:	40 81       	ld	r20, Z
    2b18:	51 81       	ldd	r21, Z+1	; 0x01
    2b1a:	45 2b       	or	r20, r21
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <ProcessInput+0x42c>
    2b1e:	86 cf       	rjmp	.-244    	; 0x2a2c <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    2b20:	22 23       	and	r18, r18
    2b22:	69 f1       	breq	.+90     	; 0x2b7e <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e0 53       	subi	r30, 0x30	; 48
    2b2c:	f6 4c       	sbci	r31, 0xC6	; 198
    2b2e:	63 ed       	ldi	r22, 0xD3	; 211
    2b30:	78 e3       	ldi	r23, 0x38	; 56
    2b32:	80 81       	ld	r24, Z
    2b34:	91 81       	ldd	r25, Z+1	; 0x01
    2b36:	32 d9       	rcall	.-3484   	; 0x1d9c <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    2b38:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <actObj1.3993+0x1a>
    2b3c:	30 91 ee 38 	lds	r19, 0x38EE	; 0x8038ee <actObj1.3993+0x1b>
    2b40:	77 24       	eor	r7, r7
    2b42:	73 94       	inc	r7
    2b44:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b46:	86 2d       	mov	r24, r6
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	ee 5e       	subi	r30, 0xEE	; 238
    2b52:	f6 4c       	sbci	r31, 0xC6	; 198
    2b54:	40 91 df 38 	lds	r20, 0x38DF	; 0x8038df <actObj1.3993+0xc>
    2b58:	50 91 e0 38 	lds	r21, 0x38E0	; 0x8038e0 <actObj1.3993+0xd>
    2b5c:	40 83       	st	Z, r20
    2b5e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2b60:	fc 01       	movw	r30, r24
    2b62:	ee 0f       	add	r30, r30
    2b64:	ff 1f       	adc	r31, r31
    2b66:	ee 5a       	subi	r30, 0xAE	; 174
    2b68:	f6 4c       	sbci	r31, 0xC6	; 198
    2b6a:	20 83       	st	Z, r18
    2b6c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	fc 01       	movw	r30, r24
    2b74:	ee 56       	subi	r30, 0x6E	; 110
    2b76:	f6 4c       	sbci	r31, 0xC6	; 198
    2b78:	10 82       	st	Z, r1
    2b7a:	11 82       	std	Z+1, r1	; 0x01
    2b7c:	9b c5       	rjmp	.+2870   	; 0x36b4 <ProcessInput+0xfc0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2b7e:	77 24       	eor	r7, r7
    2b80:	7a 94       	dec	r7
    2b82:	76 0c       	add	r7, r6
    2b84:	97 c5       	rjmp	.+2862   	; 0x36b4 <ProcessInput+0xfc0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2b86:	ee 2e       	mov	r14, r30
    2b88:	f1 2c       	mov	r15, r1
    2b8a:	f7 01       	movw	r30, r14
    2b8c:	ee 0f       	add	r30, r30
    2b8e:	ff 1f       	adc	r31, r31
    2b90:	ee 52       	subi	r30, 0x2E	; 46
    2b92:	f6 4c       	sbci	r31, 0xC6	; 198
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	d8 01       	movw	r26, r16
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	6c 91       	ld	r22, X
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	c7 d9       	rcall	.-3186   	; 0x1f32 <FindChild>
    2ba4:	f7 01       	movw	r30, r14
    2ba6:	ee 0f       	add	r30, r30
    2ba8:	ff 1f       	adc	r31, r31
    2baa:	ec 52       	subi	r30, 0x2C	; 44
    2bac:	f6 4c       	sbci	r31, 0xC6	; 198
    2bae:	80 83       	st	Z, r24
    2bb0:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2bb2:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <currDepth>
    2bb6:	29 2f       	mov	r18, r25
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	f9 01       	movw	r30, r18
    2bbc:	ee 0f       	add	r30, r30
    2bbe:	ff 1f       	adc	r31, r31
    2bc0:	ec 52       	subi	r30, 0x2C	; 44
    2bc2:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc4:	40 81       	ld	r20, Z
    2bc6:	51 81       	ldd	r21, Z+1	; 0x01
    2bc8:	41 15       	cp	r20, r1
    2bca:	51 05       	cpc	r21, r1
    2bcc:	21 f0       	breq	.+8      	; 0x2bd6 <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    2bce:	63 ed       	ldi	r22, 0xD3	; 211
    2bd0:	78 e3       	ldi	r23, 0x38	; 56
    2bd2:	ca 01       	movw	r24, r20
    2bd4:	1e c0       	rjmp	.+60     	; 0x2c12 <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    2bd6:	99 23       	and	r25, r25
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2bda:	9e c5       	rjmp	.+2876   	; 0x3718 <ProcessInput+0x1024>
    2bdc:	22 0f       	add	r18, r18
    2bde:	33 1f       	adc	r19, r19
    2be0:	f9 01       	movw	r30, r18
    2be2:	e0 53       	subi	r30, 0x30	; 48
    2be4:	f6 4c       	sbci	r31, 0xC6	; 198
    2be6:	d8 01       	movw	r26, r16
    2be8:	11 96       	adiw	r26, 0x01	; 1
    2bea:	6c 91       	ld	r22, X
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	4c d9       	rcall	.-3432   	; 0x1e8a <CheckLetter>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	03 c0       	rjmp	.+6      	; 0x2bfc <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    2bf6:	77 24       	eor	r7, r7
    2bf8:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    2bfa:	5c c5       	rjmp	.+2744   	; 0x36b4 <ProcessInput+0xfc0>
    2bfc:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	ee 0f       	add	r30, r30
    2c04:	ff 1f       	adc	r31, r31
    2c06:	e0 53       	subi	r30, 0x30	; 48
    2c08:	f6 4c       	sbci	r31, 0xC6	; 198
    2c0a:	63 ed       	ldi	r22, 0xD3	; 211
    2c0c:	78 e3       	ldi	r23, 0x38	; 56
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	c4 d8       	rcall	.-3704   	; 0x1d9c <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    2c14:	80 91 ef 38 	lds	r24, 0x38EF	; 0x8038ef <actObj1.3993+0x1c>
    2c18:	90 91 f0 38 	lds	r25, 0x38F0	; 0x8038f0 <actObj1.3993+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c1c:	20 91 e1 38 	lds	r18, 0x38E1	; 0x8038e1 <actObj1.3993+0xe>
    2c20:	30 91 e2 38 	lds	r19, 0x38E2	; 0x8038e2 <actObj1.3993+0xf>
    2c24:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    2c28:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2c2c:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    2c30:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    2c34:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    2c38:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
    2c3c:	2a ce       	rjmp	.-940    	; 0x2892 <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2c3e:	80 37       	cpi	r24, 0x70	; 112
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <ProcessInput+0x550>
    2c42:	96 c0       	rjmp	.+300    	; 0x2d70 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    2c44:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2c48:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2c4c:	89 2b       	or	r24, r25
    2c4e:	79 f0       	breq	.+30     	; 0x2c6e <ProcessInput+0x57a>
    2c50:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    2c54:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    2c58:	89 2b       	or	r24, r25
    2c5a:	49 f0       	breq	.+18     	; 0x2c6e <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c5c:	85 e4       	ldi	r24, 0x45	; 69
    2c5e:	98 e7       	ldi	r25, 0x78	; 120
    2c60:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2c64:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2c68:	89 e5       	ldi	r24, 0x59	; 89
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	08 ce       	rjmp	.-1008   	; 0x287e <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2c6e:	b2 e0       	ldi	r27, 0x02	; 2
    2c70:	fb 12       	cpse	r15, r27
    2c72:	70 cd       	rjmp	.-1312   	; 0x2754 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2c74:	e0 90 29 38 	lds	r14, 0x3829	; 0x803829 <currDepth>
    2c78:	f1 2c       	mov	r15, r1
    2c7a:	f7 01       	movw	r30, r14
    2c7c:	ee 0f       	add	r30, r30
    2c7e:	ff 1f       	adc	r31, r31
    2c80:	ee 52       	subi	r30, 0x2E	; 46
    2c82:	f6 4c       	sbci	r31, 0xC6	; 198
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	d8 01       	movw	r26, r16
    2c8a:	11 96       	adiw	r26, 0x01	; 1
    2c8c:	6c 91       	ld	r22, X
    2c8e:	80 81       	ld	r24, Z
    2c90:	91 81       	ldd	r25, Z+1	; 0x01
    2c92:	4f d9       	rcall	.-3426   	; 0x1f32 <FindChild>
    2c94:	f7 01       	movw	r30, r14
    2c96:	ee 0f       	add	r30, r30
    2c98:	ff 1f       	adc	r31, r31
    2c9a:	ec 52       	subi	r30, 0x2C	; 44
    2c9c:	f6 4c       	sbci	r31, 0xC6	; 198
    2c9e:	80 83       	st	Z, r24
    2ca0:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2ca2:	20 91 29 38 	lds	r18, 0x3829	; 0x803829 <currDepth>
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	2f 5f       	subi	r18, 0xFF	; 255
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	22 0f       	add	r18, r18
    2cae:	33 1f       	adc	r19, r19
    2cb0:	f9 01       	movw	r30, r18
    2cb2:	ee 52       	subi	r30, 0x2E	; 46
    2cb4:	f6 4c       	sbci	r31, 0xC6	; 198
    2cb6:	80 81       	ld	r24, Z
    2cb8:	91 81       	ldd	r25, Z+1	; 0x01
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <ProcessInput+0x5cc>
    2cbe:	ca c3       	rjmp	.+1940   	; 0x3454 <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    2cc0:	40 91 3a 38 	lds	r20, 0x383A	; 0x80383a <inventory>
    2cc4:	50 91 3b 38 	lds	r21, 0x383B	; 0x80383b <inventory+0x1>
    2cc8:	84 17       	cp	r24, r20
    2cca:	95 07       	cpc	r25, r21
    2ccc:	39 f0       	breq	.+14     	; 0x2cdc <ProcessInput+0x5e8>
    2cce:	40 91 3c 38 	lds	r20, 0x383C	; 0x80383c <inventory+0x2>
    2cd2:	50 91 3d 38 	lds	r21, 0x383D	; 0x80383d <inventory+0x3>
    2cd6:	84 17       	cp	r24, r20
    2cd8:	95 07       	cpc	r25, r21
    2cda:	c1 f4       	brne	.+48     	; 0x2d0c <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cdc:	80 e2       	ldi	r24, 0x20	; 32
    2cde:	98 e7       	ldi	r25, 0x78	; 120
    2ce0:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2ce4:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2ce8:	85 e2       	ldi	r24, 0x25	; 37
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    2cf0:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    2cfc:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    2d00:	f9 01       	movw	r30, r18
    2d02:	ee 52       	subi	r30, 0x2E	; 46
    2d04:	f6 4c       	sbci	r31, 0xC6	; 198
    2d06:	10 82       	st	Z, r1
    2d08:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    2d0a:	c3 cd       	rjmp	.-1146   	; 0x2892 <ProcessInput+0x19e>
    2d0c:	63 ed       	ldi	r22, 0xD3	; 211
    2d0e:	78 e3       	ldi	r23, 0x38	; 56
    2d10:	45 d8       	rcall	.-3958   	; 0x1d9c <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    2d12:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3993+0x7>
    2d16:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <CheckState>
    2d1a:	88 23       	and	r24, r24
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <ProcessInput+0x62c>
    2d1e:	75 c3       	rjmp	.+1770   	; 0x340a <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    2d20:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3993+0xb>
    2d24:	88 23       	and	r24, r24
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <ProcessInput+0x636>
    2d28:	15 cd       	rjmp	.-1494   	; 0x2754 <ProcessInput+0x60>
                                if (inventory[0]) {
    2d2a:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2d2e:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2d32:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
                                    inventory[1] = route[currDepth+1];
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	ee 0f       	add	r30, r30
    2d3a:	ff 1f       	adc	r31, r31
    2d3c:	ec 52       	subi	r30, 0x2C	; 44
    2d3e:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    2d40:	89 2b       	or	r24, r25
    2d42:	39 f0       	breq	.+14     	; 0x2d52 <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    2d44:	80 81       	ld	r24, Z
    2d46:	91 81       	ldd	r25, Z+1	; 0x01
    2d48:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <inventory+0x2>
    2d4c:	90 93 3d 38 	sts	0x383D, r25	; 0x80383d <inventory+0x3>
    2d50:	06 c0       	rjmp	.+12     	; 0x2d5e <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <inventory>
    2d5a:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d5e:	8a e0       	ldi	r24, 0x0A	; 10
    2d60:	98 e7       	ldi	r25, 0x78	; 120
    2d62:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2d66:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2d6a:	86 e1       	ldi	r24, 0x16	; 22
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	5e c2       	rjmp	.+1212   	; 0x322c <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    2d70:	84 36       	cpi	r24, 0x64	; 100
    2d72:	d9 f4       	brne	.+54     	; 0x2daa <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2d74:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2d78:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <ProcessInput+0x68e>
    2d80:	ce c4       	rjmp	.+2460   	; 0x371e <ProcessInput+0x102a>
    2d82:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    2d86:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    2d8a:	89 2b       	or	r24, r25
    2d8c:	49 f4       	brne	.+18     	; 0x2da0 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d8e:	84 ee       	ldi	r24, 0xE4	; 228
    2d90:	97 e7       	ldi	r25, 0x77	; 119
    2d92:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2d96:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2d9a:	86 e2       	ldi	r24, 0x26	; 38
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	6f cd       	rjmp	.-1314   	; 0x287e <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2da0:	b2 e0       	ldi	r27, 0x02	; 2
    2da2:	fb 16       	cp	r15, r27
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <ProcessInput+0x6b4>
    2da6:	21 c5       	rjmp	.+2626   	; 0x37ea <ProcessInput+0x10f6>
    2da8:	d5 cc       	rjmp	.-1622   	; 0x2754 <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    2daa:	89 36       	cpi	r24, 0x69	; 105
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <ProcessInput+0x6bc>
    2dae:	7b c0       	rjmp	.+246    	; 0x2ea6 <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2db0:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <inventory>
    2db4:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <inventory+0x1>
    2db8:	89 2b       	or	r24, r25
    2dba:	31 f4       	brne	.+12     	; 0x2dc8 <ProcessInput+0x6d4>
    2dbc:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    2dc0:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    2dc4:	89 2b       	or	r24, r25
    2dc6:	19 f3       	breq	.-58     	; 0x2d8e <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dc8:	8a e0       	ldi	r24, 0x0A	; 10
    2dca:	98 e7       	ldi	r25, 0x78	; 120
    2dcc:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    2dd0:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    2dd4:	86 e1       	ldi	r24, 0x16	; 22
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    2ddc:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    2de8:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>
    2dec:	2a e3       	ldi	r18, 0x3A	; 58
    2dee:	e2 2e       	mov	r14, r18
    2df0:	28 e3       	ldi	r18, 0x38	; 56
    2df2:	f2 2e       	mov	r15, r18
    2df4:	3e e3       	ldi	r19, 0x3E	; 62
    2df6:	63 2e       	mov	r6, r19
    2df8:	38 e3       	ldi	r19, 0x38	; 56
    2dfa:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2dfc:	42 e0       	ldi	r20, 0x02	; 2
    2dfe:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e00:	59 e5       	ldi	r21, 0x59	; 89
    2e02:	c5 2e       	mov	r12, r21
    2e04:	5a e7       	ldi	r21, 0x7A	; 122
    2e06:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2e08:	62 e0       	ldi	r22, 0x02	; 2
    2e0a:	a6 2e       	mov	r10, r22
    2e0c:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2e0e:	88 24       	eor	r8, r8
    2e10:	83 94       	inc	r8
    2e12:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2e14:	d7 01       	movw	r26, r14
    2e16:	8d 91       	ld	r24, X+
    2e18:	9d 91       	ld	r25, X+
    2e1a:	7d 01       	movw	r14, r26
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	d9 f1       	breq	.+118    	; 0x2e96 <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    2e20:	63 ed       	ldi	r22, 0xD3	; 211
    2e22:	78 e3       	ldi	r23, 0x38	; 56
    2e24:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2e28:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0x1a>
    2e2c:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e30:	e5 2d       	mov	r30, r5
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	df 01       	movw	r26, r30
    2e36:	aa 0f       	add	r26, r26
    2e38:	bb 1f       	adc	r27, r27
    2e3a:	ae 5e       	subi	r26, 0xEE	; 238
    2e3c:	b6 4c       	sbci	r27, 0xC6	; 198
    2e3e:	20 91 df 38 	lds	r18, 0x38DF	; 0x8038df <actObj1.3993+0xc>
    2e42:	30 91 e0 38 	lds	r19, 0x38E0	; 0x8038e0 <actObj1.3993+0xd>
    2e46:	2d 93       	st	X+, r18
    2e48:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2e4a:	df 01       	movw	r26, r30
    2e4c:	aa 0f       	add	r26, r26
    2e4e:	bb 1f       	adc	r27, r27
    2e50:	ae 5a       	subi	r26, 0xAE	; 174
    2e52:	b6 4c       	sbci	r27, 0xC6	; 198
    2e54:	8d 93       	st	X+, r24
    2e56:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    2e58:	ee 0f       	add	r30, r30
    2e5a:	ff 1f       	adc	r31, r31
    2e5c:	ee 56       	subi	r30, 0x6E	; 110
    2e5e:	f6 4c       	sbci	r31, 0xC6	; 198
    2e60:	10 82       	st	Z, r1
    2e62:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e64:	e1 e0       	ldi	r30, 0x01	; 1
    2e66:	e5 0d       	add	r30, r5
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	53 94       	inc	r5
    2e6c:	53 94       	inc	r5
    2e6e:	df 01       	movw	r26, r30
    2e70:	aa 0f       	add	r26, r26
    2e72:	bb 1f       	adc	r27, r27
    2e74:	ae 5e       	subi	r26, 0xEE	; 238
    2e76:	b6 4c       	sbci	r27, 0xC6	; 198
    2e78:	cd 92       	st	X+, r12
    2e7a:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2e7c:	df 01       	movw	r26, r30
    2e7e:	aa 0f       	add	r26, r26
    2e80:	bb 1f       	adc	r27, r27
    2e82:	ae 5a       	subi	r26, 0xAE	; 174
    2e84:	b6 4c       	sbci	r27, 0xC6	; 198
    2e86:	ad 92       	st	X+, r10
    2e88:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2e8a:	ee 0f       	add	r30, r30
    2e8c:	ff 1f       	adc	r31, r31
    2e8e:	ee 56       	subi	r30, 0x6E	; 110
    2e90:	f6 4c       	sbci	r31, 0xC6	; 198
    2e92:	80 82       	st	Z, r8
    2e94:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    2e96:	6e 14       	cp	r6, r14
    2e98:	7f 04       	cpc	r7, r15
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <ProcessInput+0x7aa>
    2e9c:	bb cf       	rjmp	.-138    	; 0x2e14 <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2e9e:	77 24       	eor	r7, r7
    2ea0:	7a 94       	dec	r7
    2ea2:	75 0c       	add	r7, r5
    2ea4:	07 c4       	rjmp	.+2062   	; 0x36b4 <ProcessInput+0xfc0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    2ea6:	9c e8       	ldi	r25, 0x8C	; 140
    2ea8:	98 0f       	add	r25, r24
    2eaa:	92 30       	cpi	r25, 0x02	; 2
    2eac:	28 f0       	brcs	.+10     	; 0x2eb8 <ProcessInput+0x7c4>
    2eae:	87 36       	cpi	r24, 0x67	; 103
    2eb0:	19 f0       	breq	.+6      	; 0x2eb8 <ProcessInput+0x7c4>
    2eb2:	82 37       	cpi	r24, 0x72	; 114
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <ProcessInput+0x7c4>
    2eb6:	d7 c2       	rjmp	.+1454   	; 0x3466 <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    2eb8:	8e ef       	ldi	r24, 0xFE	; 254
    2eba:	8f 0d       	add	r24, r15
    2ebc:	82 30       	cpi	r24, 0x02	; 2
    2ebe:	08 f0       	brcs	.+2      	; 0x2ec2 <ProcessInput+0x7ce>
    2ec0:	49 cc       	rjmp	.-1902   	; 0x2754 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    2ec2:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2ec6:	ce 2e       	mov	r12, r30
    2ec8:	d1 2c       	mov	r13, r1
    2eca:	d8 01       	movw	r26, r16
    2ecc:	af 0d       	add	r26, r15
    2ece:	b1 1d       	adc	r27, r1
    2ed0:	11 97       	sbiw	r26, 0x01	; 1
    2ed2:	f6 01       	movw	r30, r12
    2ed4:	ee 0f       	add	r30, r30
    2ed6:	ff 1f       	adc	r31, r31
    2ed8:	ee 52       	subi	r30, 0x2E	; 46
    2eda:	f6 4c       	sbci	r31, 0xC6	; 198
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	6c 91       	ld	r22, X
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	25 d8       	rcall	.-4022   	; 0x1f32 <FindChild>
    2ee8:	f6 01       	movw	r30, r12
    2eea:	ee 0f       	add	r30, r30
    2eec:	ff 1f       	adc	r31, r31
    2eee:	ec 52       	subi	r30, 0x2C	; 44
    2ef0:	f6 4c       	sbci	r31, 0xC6	; 198
    2ef2:	80 83       	st	Z, r24
    2ef4:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2ef6:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	ee 0f       	add	r30, r30
    2efe:	ff 1f       	adc	r31, r31
    2f00:	ec 52       	subi	r30, 0x2C	; 44
    2f02:	f6 4c       	sbci	r31, 0xC6	; 198
    2f04:	80 81       	ld	r24, Z
    2f06:	91 81       	ldd	r25, Z+1	; 0x01
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <ProcessInput+0x81a>
    2f0c:	9a c2       	rjmp	.+1332   	; 0x3442 <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    2f0e:	b3 e0       	ldi	r27, 0x03	; 3
    2f10:	fb 12       	cpse	r15, r27
    2f12:	78 c1       	rjmp	.+752    	; 0x3204 <ProcessInput+0xb10>
    2f14:	f8 01       	movw	r30, r16
    2f16:	20 81       	ld	r18, Z
    2f18:	25 37       	cpi	r18, 0x75	; 117
    2f1a:	19 f0       	breq	.+6      	; 0x2f22 <ProcessInput+0x82e>
    2f1c:	27 36       	cpi	r18, 0x67	; 103
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <ProcessInput+0x82e>
    2f20:	71 c1       	rjmp	.+738    	; 0x3204 <ProcessInput+0xb10>
    2f22:	61 2c       	mov	r6, r1
    2f24:	77 24       	eor	r7, r7
    2f26:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f28:	54 e6       	ldi	r21, 0x64	; 100
    2f2a:	c5 2e       	mov	r12, r21
    2f2c:	59 e7       	ldi	r21, 0x79	; 121
    2f2e:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2f30:	61 e2       	ldi	r22, 0x21	; 33
    2f32:	a6 2e       	mov	r10, r22
    2f34:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2f36:	88 24       	eor	r8, r8
    2f38:	83 94       	inc	r8
    2f3a:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2f3c:	e6 2c       	mov	r14, r6
    2f3e:	f1 2c       	mov	r15, r1
    2f40:	c7 01       	movw	r24, r14
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	9c 01       	movw	r18, r24
    2f48:	26 5c       	subi	r18, 0xC6	; 198
    2f4a:	37 4c       	sbci	r19, 0xC7	; 199
    2f4c:	79 01       	movw	r14, r18
    2f4e:	d9 01       	movw	r26, r18
    2f50:	8d 91       	ld	r24, X+
    2f52:	9c 91       	ld	r25, X
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	81 f0       	breq	.+32     	; 0x2f78 <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    2f58:	f8 01       	movw	r30, r16
    2f5a:	61 81       	ldd	r22, Z+1	; 0x01
    2f5c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CheckLetter>
    2f60:	88 23       	and	r24, r24
    2f62:	51 f0       	breq	.+20     	; 0x2f78 <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    2f64:	68 ea       	ldi	r22, 0xA8	; 168
    2f66:	78 e3       	ldi	r23, 0x38	; 56
    2f68:	d7 01       	movw	r26, r14
    2f6a:	8d 91       	ld	r24, X+
    2f6c:	9c 91       	ld	r25, X
    2f6e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>
                                    x = 2;
    2f72:	32 e0       	ldi	r19, 0x02	; 2
    2f74:	63 2e       	mov	r6, r19
    2f76:	1e c0       	rjmp	.+60     	; 0x2fb4 <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    2f78:	b1 e0       	ldi	r27, 0x01	; 1
    2f7a:	6b 12       	cpse	r6, r27
    2f7c:	1a c0       	rjmp	.+52     	; 0x2fb2 <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f7e:	e7 2d       	mov	r30, r7
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	df 01       	movw	r26, r30
    2f84:	aa 0f       	add	r26, r26
    2f86:	bb 1f       	adc	r27, r27
    2f88:	ae 5e       	subi	r26, 0xEE	; 238
    2f8a:	b6 4c       	sbci	r27, 0xC6	; 198
    2f8c:	cd 92       	st	X+, r12
    2f8e:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2f90:	df 01       	movw	r26, r30
    2f92:	aa 0f       	add	r26, r26
    2f94:	bb 1f       	adc	r27, r27
    2f96:	ae 5a       	subi	r26, 0xAE	; 174
    2f98:	b6 4c       	sbci	r27, 0xC6	; 198
    2f9a:	ad 92       	st	X+, r10
    2f9c:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2f9e:	ee 0f       	add	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	ee 56       	subi	r30, 0x6E	; 110
    2fa4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fa6:	80 82       	st	Z, r8
    2fa8:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2faa:	f8 01       	movw	r30, r16
    2fac:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2fae:	73 94       	inc	r7
    2fb0:	01 c0       	rjmp	.+2      	; 0x2fb4 <ProcessInput+0x8c0>
    2fb2:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2fb4:	63 94       	inc	r6
    2fb6:	f1 e0       	ldi	r31, 0x01	; 1
    2fb8:	6f 16       	cp	r6, r31
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <ProcessInput+0x8ca>
    2fbc:	bf cf       	rjmp	.-130    	; 0x2f3c <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2fbe:	d8 01       	movw	r26, r16
    2fc0:	8c 91       	ld	r24, X
    2fc2:	88 23       	and	r24, r24
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <ProcessInput+0x8d4>
    2fc6:	76 c3       	rjmp	.+1772   	; 0x36b4 <ProcessInput+0xfc0>
                            PopulateObject(route[currDepth+1], &actObj1);
    2fc8:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	ee 0f       	add	r30, r30
    2fd0:	ff 1f       	adc	r31, r31
    2fd2:	ec 52       	subi	r30, 0x2C	; 44
    2fd4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fd6:	63 ed       	ldi	r22, 0xD3	; 211
    2fd8:	78 e3       	ldi	r23, 0x38	; 56
    2fda:	80 81       	ld	r24, Z
    2fdc:	91 81       	ldd	r25, Z+1	; 0x01
    2fde:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2fe2:	e0 90 f1 38 	lds	r14, 0x38F1	; 0x8038f1 <actObj1.3993+0x1e>
    2fe6:	f0 90 f2 38 	lds	r15, 0x38F2	; 0x8038f2 <actObj1.3993+0x1f>
    2fea:	b1 e0       	ldi	r27, 0x01	; 1
    2fec:	eb 16       	cp	r14, r27
    2fee:	f1 04       	cpc	r15, r1
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <ProcessInput+0x900>
    2ff2:	9a c0       	rjmp	.+308    	; 0x3128 <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2ff4:	98 01       	movw	r18, r16
    2ff6:	2e 5f       	subi	r18, 0xFE	; 254
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	61 e0       	ldi	r22, 0x01	; 1
    2ffe:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3993+0x10>
    3002:	90 91 e4 38 	lds	r25, 0x38E4	; 0x8038e4 <actObj1.3993+0x11>
    3006:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <ExtEERead>
                                if (data[2] == '1') {
    300a:	f8 01       	movw	r30, r16
    300c:	42 81       	ldd	r20, Z+2	; 0x02
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	27 0d       	add	r18, r7
    3012:	87 2d       	mov	r24, r7
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	41 33       	cpi	r20, 0x31	; 49
    3018:	09 f0       	breq	.+2      	; 0x301c <ProcessInput+0x928>
    301a:	6b c0       	rjmp	.+214    	; 0x30f2 <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    301c:	30 91 b3 38 	lds	r19, 0x38B3	; 0x8038b3 <actObj2.3994+0xb>
                                    if ((item < 31)||(item > 34)) {
    3020:	51 ee       	ldi	r21, 0xE1	; 225
    3022:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3024:	fc 01       	movw	r30, r24
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31
    302a:	ee 5e       	subi	r30, 0xEE	; 238
    302c:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    302e:	54 30       	cpi	r21, 0x04	; 4
    3030:	60 f0       	brcs	.+24     	; 0x304a <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3032:	44 e0       	ldi	r20, 0x04	; 4
    3034:	59 e7       	ldi	r21, 0x79	; 121
    3036:	40 83       	st	Z, r20
    3038:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    303a:	fc 01       	movw	r30, r24
    303c:	ee 0f       	add	r30, r30
    303e:	ff 1f       	adc	r31, r31
    3040:	ee 5a       	subi	r30, 0xAE	; 174
    3042:	f6 4c       	sbci	r31, 0xC6	; 198
    3044:	4a e1       	ldi	r20, 0x1A	; 26
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	64 c0       	rjmp	.+200    	; 0x3112 <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    304a:	6e e8       	ldi	r22, 0x8E	; 142
    304c:	75 e7       	ldi	r23, 0x75	; 117
    304e:	60 83       	st	Z, r22
    3050:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3052:	fc 01       	movw	r30, r24
    3054:	ee 0f       	add	r30, r30
    3056:	ff 1f       	adc	r31, r31
    3058:	ee 5a       	subi	r30, 0xAE	; 174
    305a:	f6 4c       	sbci	r31, 0xC6	; 198
    305c:	62 eb       	ldi	r22, 0xB2	; 178
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	60 83       	st	Z, r22
    3062:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	fc 01       	movw	r30, r24
    306a:	ee 56       	subi	r30, 0x6E	; 110
    306c:	f6 4c       	sbci	r31, 0xC6	; 198
    306e:	e0 82       	st	Z, r14
    3070:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3072:	82 2f       	mov	r24, r18
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	fc 01       	movw	r30, r24
    3078:	ee 0f       	add	r30, r30
    307a:	ff 1f       	adc	r31, r31
    307c:	ee 5e       	subi	r30, 0xEE	; 238
    307e:	f6 4c       	sbci	r31, 0xC6	; 198
    3080:	6b e5       	ldi	r22, 0x5B	; 91
    3082:	7a e7       	ldi	r23, 0x7A	; 122
    3084:	60 83       	st	Z, r22
    3086:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3088:	fc 01       	movw	r30, r24
    308a:	ee 0f       	add	r30, r30
    308c:	ff 1f       	adc	r31, r31
    308e:	ee 5a       	subi	r30, 0xAE	; 174
    3090:	f6 4c       	sbci	r31, 0xC6	; 198
    3092:	62 e0       	ldi	r22, 0x02	; 2
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	60 83       	st	Z, r22
    3098:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	fc 01       	movw	r30, r24
    30a0:	ee 56       	subi	r30, 0x6E	; 110
    30a2:	f6 4c       	sbci	r31, 0xC6	; 198
    30a4:	e0 82       	st	Z, r14
    30a6:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	87 0d       	add	r24, r7
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	f3 e0       	ldi	r31, 0x03	; 3
    30b0:	7f 0e       	add	r7, r31
    30b2:	fc 01       	movw	r30, r24
    30b4:	ee 0f       	add	r30, r30
    30b6:	ff 1f       	adc	r31, r31
    30b8:	ee 5e       	subi	r30, 0xEE	; 238
    30ba:	f6 4c       	sbci	r31, 0xC6	; 198
    30bc:	60 eb       	ldi	r22, 0xB0	; 176
    30be:	78 e7       	ldi	r23, 0x78	; 120
    30c0:	60 83       	st	Z, r22
    30c2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    30c4:	fc 01       	movw	r30, r24
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	ee 5a       	subi	r30, 0xAE	; 174
    30cc:	f6 4c       	sbci	r31, 0xC6	; 198
    30ce:	62 e1       	ldi	r22, 0x12	; 18
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	60 83       	st	Z, r22
    30d4:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	fc 01       	movw	r30, r24
    30dc:	ee 56       	subi	r30, 0x6E	; 110
    30de:	f6 4c       	sbci	r31, 0xC6	; 198
    30e0:	e0 82       	st	Z, r14
    30e2:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    30e4:	40 93 01 39 	sts	0x3901, r20	; 0x803901 <specialInput>
                                        specialInput[1] = item;
    30e8:	30 93 02 39 	sts	0x3902, r19	; 0x803902 <specialInput+0x1>
                                        specialInput[2] = 0;
    30ec:	10 92 03 39 	sts	0x3903, r1	; 0x803903 <specialInput+0x2>
    30f0:	e1 c2       	rjmp	.+1474   	; 0x36b4 <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30f2:	fc 01       	movw	r30, r24
    30f4:	ee 0f       	add	r30, r30
    30f6:	ff 1f       	adc	r31, r31
    30f8:	ee 5e       	subi	r30, 0xEE	; 238
    30fa:	f6 4c       	sbci	r31, 0xC6	; 198
    30fc:	40 e4       	ldi	r20, 0x40	; 64
    30fe:	56 e7       	ldi	r21, 0x76	; 118
    3100:	40 83       	st	Z, r20
    3102:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3104:	fc 01       	movw	r30, r24
    3106:	ee 0f       	add	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	ee 5a       	subi	r30, 0xAE	; 174
    310c:	f6 4c       	sbci	r31, 0xC6	; 198
    310e:	42 e4       	ldi	r20, 0x42	; 66
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	40 83       	st	Z, r20
    3114:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	fc 01       	movw	r30, r24
    311c:	ee 56       	subi	r30, 0x6E	; 110
    311e:	f6 4c       	sbci	r31, 0xC6	; 198
    3120:	e0 82       	st	Z, r14
    3122:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    3124:	72 2e       	mov	r7, r18
    3126:	c6 c2       	rjmp	.+1420   	; 0x36b4 <ProcessInput+0xfc0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    3128:	90 91 dc 38 	lds	r25, 0x38DC	; 0x8038dc <actObj1.3993+0x9>
    312c:	80 91 b3 38 	lds	r24, 0x38B3	; 0x8038b3 <actObj2.3994+0xb>
    3130:	98 13       	cpse	r25, r24
    3132:	2f c0       	rjmp	.+94     	; 0x3192 <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3134:	20 91 f9 38 	lds	r18, 0x38F9	; 0x8038f9 <actObj1.3993+0x26>
    3138:	30 91 fa 38 	lds	r19, 0x38FA	; 0x8038fa <actObj1.3993+0x27>
    313c:	ff 24       	eor	r15, r15
    313e:	f3 94       	inc	r15
    3140:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3142:	87 2d       	mov	r24, r7
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	fc 01       	movw	r30, r24
    3148:	ee 0f       	add	r30, r30
    314a:	ff 1f       	adc	r31, r31
    314c:	ee 5e       	subi	r30, 0xEE	; 238
    314e:	f6 4c       	sbci	r31, 0xC6	; 198
    3150:	40 91 eb 38 	lds	r20, 0x38EB	; 0x8038eb <actObj1.3993+0x18>
    3154:	50 91 ec 38 	lds	r21, 0x38EC	; 0x8038ec <actObj1.3993+0x19>
    3158:	40 83       	st	Z, r20
    315a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    315c:	fc 01       	movw	r30, r24
    315e:	ee 0f       	add	r30, r30
    3160:	ff 1f       	adc	r31, r31
    3162:	ee 5a       	subi	r30, 0xAE	; 174
    3164:	f6 4c       	sbci	r31, 0xC6	; 198
    3166:	20 83       	st	Z, r18
    3168:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	fc 01       	movw	r30, r24
    3170:	ee 56       	subi	r30, 0x6E	; 110
    3172:	f6 4c       	sbci	r31, 0xC6	; 198
    3174:	10 82       	st	Z, r1
    3176:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3178:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x2a>
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    3182:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3186:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3993+0xa>
    318a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    318e:	7f 2c       	mov	r7, r15
    3190:	91 c2       	rjmp	.+1314   	; 0x36b4 <ProcessInput+0xfc0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3192:	d8 01       	movw	r26, r16
    3194:	8c 91       	ld	r24, X
    3196:	85 37       	cpi	r24, 0x75	; 117
    3198:	99 f4       	brne	.+38     	; 0x31c0 <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    319a:	87 2d       	mov	r24, r7
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	fc 01       	movw	r30, r24
    31a0:	ee 0f       	add	r30, r30
    31a2:	ff 1f       	adc	r31, r31
    31a4:	ee 5e       	subi	r30, 0xEE	; 238
    31a6:	f6 4c       	sbci	r31, 0xC6	; 198
    31a8:	24 e0       	ldi	r18, 0x04	; 4
    31aa:	39 e7       	ldi	r19, 0x79	; 121
    31ac:	20 83       	st	Z, r18
    31ae:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    31b0:	fc 01       	movw	r30, r24
    31b2:	ee 0f       	add	r30, r30
    31b4:	ff 1f       	adc	r31, r31
    31b6:	ee 5a       	subi	r30, 0xAE	; 174
    31b8:	f6 4c       	sbci	r31, 0xC6	; 198
    31ba:	2a e1       	ldi	r18, 0x1A	; 26
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	15 c0       	rjmp	.+42     	; 0x31ea <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    31c0:	87 36       	cpi	r24, 0x67	; 103
    31c2:	09 f0       	breq	.+2      	; 0x31c6 <ProcessInput+0xad2>
    31c4:	77 c2       	rjmp	.+1262   	; 0x36b4 <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31c6:	87 2d       	mov	r24, r7
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	fc 01       	movw	r30, r24
    31cc:	ee 0f       	add	r30, r30
    31ce:	ff 1f       	adc	r31, r31
    31d0:	ee 5e       	subi	r30, 0xEE	; 238
    31d2:	f6 4c       	sbci	r31, 0xC6	; 198
    31d4:	2d ed       	ldi	r18, 0xDD	; 221
    31d6:	36 e7       	ldi	r19, 0x76	; 118
    31d8:	20 83       	st	Z, r18
    31da:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    31dc:	fc 01       	movw	r30, r24
    31de:	ee 0f       	add	r30, r30
    31e0:	ff 1f       	adc	r31, r31
    31e2:	ee 5a       	subi	r30, 0xAE	; 174
    31e4:	f6 4c       	sbci	r31, 0xC6	; 198
    31e6:	28 e2       	ldi	r18, 0x28	; 40
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	20 83       	st	Z, r18
    31ec:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	fc 01       	movw	r30, r24
    31f4:	ee 56       	subi	r30, 0x6E	; 110
    31f6:	f6 4c       	sbci	r31, 0xC6	; 198
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	80 83       	st	Z, r24
    31fe:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3200:	73 94       	inc	r7
    3202:	58 c2       	rjmp	.+1200   	; 0x36b4 <ProcessInput+0xfc0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    3204:	63 ed       	ldi	r22, 0xD3	; 211
    3206:	78 e3       	ldi	r23, 0x38	; 56
    3208:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    320c:	f8 01       	movw	r30, r16
    320e:	80 81       	ld	r24, Z
    3210:	84 37       	cpi	r24, 0x74	; 116
    3212:	69 f5       	brne	.+90     	; 0x326e <ProcessInput+0xb7a>
    3214:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3993+0x8>
    3218:	83 fd       	sbrc	r24, 3
    321a:	4a c0       	rjmp	.+148    	; 0x32b0 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    321c:	8e e1       	ldi	r24, 0x1E	; 30
    321e:	99 e7       	ldi	r25, 0x79	; 121
    3220:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    3224:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3228:	8e e1       	ldi	r24, 0x1E	; 30
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    3230:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    323c:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3240:	80 91 ed 38 	lds	r24, 0x38ED	; 0x8038ed <actObj1.3993+0x1a>
    3244:	90 91 ee 38 	lds	r25, 0x38EE	; 0x8038ee <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3248:	20 91 df 38 	lds	r18, 0x38DF	; 0x8038df <actObj1.3993+0xc>
    324c:	30 91 e0 38 	lds	r19, 0x38E0	; 0x8038e0 <actObj1.3993+0xd>
    3250:	20 93 16 39 	sts	0x3916, r18	; 0x803916 <reactStr+0x4>
    3254:	30 93 17 39 	sts	0x3917, r19	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    3258:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <reactStr+0x44>
    325c:	90 93 57 39 	sts	0x3957, r25	; 0x803957 <reactStr+0x45>
    reactStr[2][number]=type;
    3260:	10 92 96 39 	sts	0x3996, r1	; 0x803996 <reactStr+0x84>
    3264:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3268:	a3 e0       	ldi	r26, 0x03	; 3
    326a:	7a 2e       	mov	r7, r26
    326c:	23 c2       	rjmp	.+1094   	; 0x36b4 <ProcessInput+0xfc0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    326e:	85 37       	cpi	r24, 0x75	; 117
    3270:	69 f4       	brne	.+26     	; 0x328c <ProcessInput+0xb98>
    3272:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3993+0x8>
    3276:	84 fd       	sbrc	r24, 4
    3278:	1b c0       	rjmp	.+54     	; 0x32b0 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    327a:	84 e0       	ldi	r24, 0x04	; 4
    327c:	99 e7       	ldi	r25, 0x79	; 121
    327e:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    3282:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3286:	8a e1       	ldi	r24, 0x1A	; 26
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	f9 ca       	rjmp	.-2574   	; 0x287e <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    328c:	82 37       	cpi	r24, 0x72	; 114
    328e:	69 f4       	brne	.+26     	; 0x32aa <ProcessInput+0xbb6>
    3290:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3993+0x8>
    3294:	85 fd       	sbrc	r24, 5
    3296:	0c c0       	rjmp	.+24     	; 0x32b0 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3298:	89 ee       	ldi	r24, 0xE9	; 233
    329a:	98 e7       	ldi	r25, 0x78	; 120
    329c:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    32a0:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    32a4:	8b e1       	ldi	r24, 0x1B	; 27
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	ea ca       	rjmp	.-2604   	; 0x287e <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    32aa:	87 36       	cpi	r24, 0x67	; 103
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <ProcessInput+0xbbc>
    32ae:	52 ca       	rjmp	.-2908   	; 0x2754 <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    32b0:	e0 90 f1 38 	lds	r14, 0x38F1	; 0x8038f1 <actObj1.3993+0x1e>
    32b4:	f0 90 f2 38 	lds	r15, 0x38F2	; 0x8038f2 <actObj1.3993+0x1f>
    32b8:	f1 e0       	ldi	r31, 0x01	; 1
    32ba:	ef 16       	cp	r14, r31
    32bc:	f1 04       	cpc	r15, r1
    32be:	11 f5       	brne	.+68     	; 0x3304 <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    32c0:	98 01       	movw	r18, r16
    32c2:	2e 5f       	subi	r18, 0xFE	; 254
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	61 e0       	ldi	r22, 0x01	; 1
    32ca:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3993+0x10>
    32ce:	90 91 e4 38 	lds	r25, 0x38E4	; 0x8038e4 <actObj1.3993+0x11>
    32d2:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <ExtEERead>
                                if (data[2] == '1') {
    32d6:	d8 01       	movw	r26, r16
    32d8:	12 96       	adiw	r26, 0x02	; 2
    32da:	8c 91       	ld	r24, X
    32dc:	81 33       	cpi	r24, 0x31	; 49
    32de:	09 f0       	breq	.+2      	; 0x32e2 <ProcessInput+0xbee>
    32e0:	8a cc       	rjmp	.-1772   	; 0x2bf6 <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32e2:	83 e6       	ldi	r24, 0x63	; 99
    32e4:	95 e7       	ldi	r25, 0x75	; 117
    32e6:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    32ea:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    32ee:	8b e2       	ldi	r24, 0x2B	; 43
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    32f6:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    32fa:	e0 92 94 39 	sts	0x3994, r14	; 0x803994 <reactStr+0x82>
    32fe:	f0 92 95 39 	sts	0x3995, r15	; 0x803995 <reactStr+0x83>
    3302:	c7 ca       	rjmp	.-2674   	; 0x2892 <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3304:	e1 14       	cp	r14, r1
    3306:	f1 04       	cpc	r15, r1
    3308:	09 f4       	brne	.+2      	; 0x330c <ProcessInput+0xc18>
    330a:	59 c0       	rjmp	.+178    	; 0x33be <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    330c:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <actObj1.3993+0x10>
    3310:	90 91 e4 38 	lds	r25, 0x38E4	; 0x8038e4 <actObj1.3993+0x11>
    3314:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    3318:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    331c:	e0 92 54 39 	sts	0x3954, r14	; 0x803954 <reactStr+0x42>
    3320:	f0 92 55 39 	sts	0x3955, r15	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    3324:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    3328:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    332c:	8b e5       	ldi	r24, 0x5B	; 91
    332e:	9a e7       	ldi	r25, 0x7A	; 122
    3330:	80 93 16 39 	sts	0x3916, r24	; 0x803916 <reactStr+0x4>
    3334:	90 93 17 39 	sts	0x3917, r25	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	80 93 56 39 	sts	0x3956, r24	; 0x803956 <reactStr+0x44>
    3340:	90 93 57 39 	sts	0x3957, r25	; 0x803957 <reactStr+0x45>
    reactStr[2][number]=type;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	80 93 96 39 	sts	0x3996, r24	; 0x803996 <reactStr+0x84>
    334c:	90 93 97 39 	sts	0x3997, r25	; 0x803997 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3350:	20 eb       	ldi	r18, 0xB0	; 176
    3352:	38 e7       	ldi	r19, 0x78	; 120
    3354:	20 93 18 39 	sts	0x3918, r18	; 0x803918 <reactStr+0x6>
    3358:	30 93 19 39 	sts	0x3919, r19	; 0x803919 <reactStr+0x7>
    reactStr[1][number]=length;
    335c:	22 e1       	ldi	r18, 0x12	; 18
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	20 93 58 39 	sts	0x3958, r18	; 0x803958 <reactStr+0x46>
    3364:	30 93 59 39 	sts	0x3959, r19	; 0x803959 <reactStr+0x47>
    reactStr[2][number]=type;
    3368:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <reactStr+0x86>
    336c:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    3370:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x20>
    3374:	90 91 f4 38 	lds	r25, 0x38F4	; 0x8038f4 <actObj1.3993+0x21>
    3378:	40 97       	sbiw	r24, 0x10	; 16
    337a:	30 f0       	brcs	.+12     	; 0x3388 <ProcessInput+0xc94>
    337c:	8f e0       	ldi	r24, 0x0F	; 15
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <actObj1.3993+0x20>
    3384:	90 93 f4 38 	sts	0x38F4, r25	; 0x8038f4 <actObj1.3993+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    3388:	21 e0       	ldi	r18, 0x01	; 1
    338a:	39 e3       	ldi	r19, 0x39	; 57
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	60 91 f3 38 	lds	r22, 0x38F3	; 0x8038f3 <actObj1.3993+0x20>
    3392:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <actObj1.3993+0x12>
    3396:	90 91 e6 38 	lds	r25, 0x38E6	; 0x8038e6 <actObj1.3993+0x13>
    339a:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    339e:	61 e0       	ldi	r22, 0x01	; 1
    33a0:	79 e3       	ldi	r23, 0x39	; 57
    33a2:	80 91 f3 38 	lds	r24, 0x38F3	; 0x8038f3 <actObj1.3993+0x20>
    33a6:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    33aa:	e0 91 f3 38 	lds	r30, 0x38F3	; 0x8038f3 <actObj1.3993+0x20>
    33ae:	f0 91 f4 38 	lds	r31, 0x38F4	; 0x8038f4 <actObj1.3993+0x21>
    33b2:	ef 5f       	subi	r30, 0xFF	; 255
    33b4:	f6 4c       	sbci	r31, 0xC6	; 198
    33b6:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    33b8:	f4 e0       	ldi	r31, 0x04	; 4
    33ba:	7f 2e       	mov	r7, r31
    33bc:	7b c1       	rjmp	.+758    	; 0x36b4 <ProcessInput+0xfc0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    33be:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3993+0x7>
    33c2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <CheckState>
    33c6:	88 23       	and	r24, r24
    33c8:	01 f1       	breq	.+64     	; 0x340a <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    33ca:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <actObj1.3993+0x26>
    33ce:	90 91 fa 38 	lds	r25, 0x38FA	; 0x8038fa <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33d2:	20 91 eb 38 	lds	r18, 0x38EB	; 0x8038eb <actObj1.3993+0x18>
    33d6:	30 91 ec 38 	lds	r19, 0x38EC	; 0x8038ec <actObj1.3993+0x19>
    33da:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    33de:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    33e2:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    33e6:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    33ea:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    33ee:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    33f2:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x2a>
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    33fc:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3400:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3993+0xa>
    3404:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UpdateState>
    3408:	44 ca       	rjmp	.-2936   	; 0x2892 <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    340a:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3993+0x24>
    340e:	90 91 f8 38 	lds	r25, 0x38F8	; 0x8038f8 <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3412:	20 91 e9 38 	lds	r18, 0x38E9	; 0x8038e9 <actObj1.3993+0x16>
    3416:	30 91 ea 38 	lds	r19, 0x38EA	; 0x8038ea <actObj1.3993+0x17>
    341a:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    341e:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3422:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    3426:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    342a:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    342e:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3432:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3993+0x29>
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    343c:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    3440:	28 ca       	rjmp	.-2992   	; 0x2892 <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    3442:	f8 01       	movw	r30, r16
    3444:	80 81       	ld	r24, Z
    3446:	84 37       	cpi	r24, 0x74	; 116
    3448:	11 f0       	breq	.+4      	; 0x344e <ProcessInput+0xd5a>
    344a:	87 36       	cpi	r24, 0x67	; 103
    344c:	19 f4       	brne	.+6      	; 0x3454 <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    344e:	8c e3       	ldi	r24, 0x3C	; 60
    3450:	99 e7       	ldi	r25, 0x79	; 121
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <ProcessInput+0xd64>
    3454:	80 e5       	ldi	r24, 0x50	; 80
    3456:	99 e7       	ldi	r25, 0x79	; 121
    3458:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    345c:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3460:	84 e1       	ldi	r24, 0x14	; 20
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0c ca       	rjmp	.-3048   	; 0x287e <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    3466:	81 36       	cpi	r24, 0x61	; 97
    3468:	09 f0       	breq	.+2      	; 0x346c <ProcessInput+0xd78>
    346a:	c5 cb       	rjmp	.-2166   	; 0x2bf6 <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    346c:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <specialPassed>
    3470:	82 30       	cpi	r24, 0x02	; 2
    3472:	08 f4       	brcc	.+2      	; 0x3476 <ProcessInput+0xd82>
    3474:	b3 c0       	rjmp	.+358    	; 0x35dc <ProcessInput+0xee8>
                if (data[1] > 0) {
    3476:	d8 01       	movw	r26, r16
    3478:	11 96       	adiw	r26, 0x01	; 1
    347a:	2c 91       	ld	r18, X
    347c:	22 23       	and	r18, r18
    347e:	09 f4       	brne	.+2      	; 0x3482 <ProcessInput+0xd8e>
    3480:	a4 c0       	rjmp	.+328    	; 0x35ca <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    3482:	fe 01       	movw	r30, r28
    3484:	31 96       	adiw	r30, 0x01	; 1
    3486:	7f 01       	movw	r14, r30
    3488:	8a e0       	ldi	r24, 0x0A	; 10
    348a:	df 01       	movw	r26, r30
    348c:	1d 92       	st	X+, r1
    348e:	8a 95       	dec	r24
    3490:	e9 f7       	brne	.-6      	; 0x348c <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    3492:	21 53       	subi	r18, 0x31	; 49
    3494:	f8 01       	movw	r30, r16
    3496:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    3498:	32 81       	ldd	r19, Z+2	; 0x02
    349a:	31 53       	subi	r19, 0x31	; 49
    349c:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    349e:	83 81       	ldd	r24, Z+3	; 0x03
    34a0:	81 36       	cpi	r24, 0x61	; 97
    34a2:	11 f4       	brne	.+4      	; 0x34a8 <ProcessInput+0xdb4>
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    34a8:	85 36       	cpi	r24, 0x65	; 101
    34aa:	11 f4       	brne	.+4      	; 0x34b0 <ProcessInput+0xdbc>
    34ac:	13 82       	std	Z+3, r1	; 0x03
    34ae:	08 c0       	rjmp	.+16     	; 0x34c0 <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    34b0:	86 36       	cpi	r24, 0x66	; 102
    34b2:	21 f4       	brne	.+8      	; 0x34bc <ProcessInput+0xdc8>
    34b4:	83 e0       	ldi	r24, 0x03	; 3
    34b6:	f8 01       	movw	r30, r16
    34b8:	83 83       	std	Z+3, r24	; 0x03
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <ProcessInput+0xdcc>
                    else data[3] = 2;
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    34c0:	21 fd       	sbrc	r18, 1
    34c2:	04 c0       	rjmp	.+8      	; 0x34cc <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	dc 01       	movw	r26, r24
    34ca:	04 c0       	rjmp	.+8      	; 0x34d4 <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 e1       	ldi	r26, 0x10	; 16
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    34d4:	20 ff       	sbrs	r18, 0
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <ProcessInput+0xdea>
    34d8:	9f 5f       	subi	r25, 0xFF	; 255
    34da:	af 4f       	sbci	r26, 0xFF	; 255
    34dc:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    34de:	f8 01       	movw	r30, r16
    34e0:	23 81       	ldd	r18, Z+3	; 0x03
    34e2:	21 fd       	sbrc	r18, 1
    34e4:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    34e6:	20 ff       	sbrs	r18, 0
    34e8:	03 c0       	rjmp	.+6      	; 0x34f0 <ProcessInput+0xdfc>
    34ea:	40 96       	adiw	r24, 0x10	; 16
    34ec:	a1 1d       	adc	r26, r1
    34ee:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    34f0:	31 ff       	sbrs	r19, 1
    34f2:	03 c0       	rjmp	.+6      	; 0x34fa <ProcessInput+0xe06>
    34f4:	90 5f       	subi	r25, 0xF0	; 240
    34f6:	af 4f       	sbci	r26, 0xFF	; 255
    34f8:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    34fa:	30 ff       	sbrs	r19, 0
    34fc:	03 c0       	rjmp	.+6      	; 0x3504 <ProcessInput+0xe10>
    34fe:	01 96       	adiw	r24, 0x01	; 1
    3500:	a1 1d       	adc	r26, r1
    3502:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3504:	40 91 39 38 	lds	r20, 0x3839	; 0x803839 <whoami>
    3508:	24 e0       	ldi	r18, 0x04	; 4
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	24 1b       	sub	r18, r20
    350e:	31 09       	sbc	r19, r1
    3510:	bc 01       	movw	r22, r24
    3512:	cd 01       	movw	r24, r26
    3514:	04 c0       	rjmp	.+8      	; 0x351e <ProcessInput+0xe2a>
    3516:	66 0f       	add	r22, r22
    3518:	77 1f       	adc	r23, r23
    351a:	88 1f       	adc	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	2a 95       	dec	r18
    3520:	d2 f7       	brpl	.-12     	; 0x3516 <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3522:	26 e0       	ldi	r18, 0x06	; 6
    3524:	35 e7       	ldi	r19, 0x75	; 117
    3526:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    352a:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    352e:	20 e2       	ldi	r18, 0x20	; 32
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	20 93 54 39 	sts	0x3954, r18	; 0x803954 <reactStr+0x42>
    3536:	30 93 55 39 	sts	0x3955, r19	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    353a:	21 e0       	ldi	r18, 0x01	; 1
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	20 93 94 39 	sts	0x3994, r18	; 0x803994 <reactStr+0x82>
    3542:	30 93 95 39 	sts	0x3995, r19	; 0x803995 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    3546:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    3548:	b5 2e       	mov	r11, r21
    354a:	ea e0       	ldi	r30, 0x0A	; 10
    354c:	4e 2e       	mov	r4, r30
    354e:	51 2c       	mov	r5, r1
    3550:	61 2c       	mov	r6, r1
    3552:	71 2c       	mov	r7, r1
    3554:	67 01       	movw	r12, r14
    3556:	cb 0c       	add	r12, r11
    3558:	d1 1c       	adc	r13, r1
    355a:	a3 01       	movw	r20, r6
    355c:	92 01       	movw	r18, r4
    355e:	5b d2       	rcall	.+1206   	; 0x3a16 <__udivmodsi4>
    3560:	d6 01       	movw	r26, r12
    3562:	6c 93       	st	X, r22
                        answer /= 10;
    3564:	b9 01       	movw	r22, r18
    3566:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    3568:	61 15       	cp	r22, r1
    356a:	71 05       	cpc	r23, r1
    356c:	81 05       	cpc	r24, r1
    356e:	91 05       	cpc	r25, r1
    3570:	51 f4       	brne	.+20     	; 0x3586 <ProcessInput+0xe92>
    3572:	22 e1       	ldi	r18, 0x12	; 18
    3574:	c2 2e       	mov	r12, r18
    3576:	29 e3       	ldi	r18, 0x39	; 57
    3578:	d2 2e       	mov	r13, r18
    357a:	32 e0       	ldi	r19, 0x02	; 2
    357c:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    357e:	88 24       	eor	r8, r8
    3580:	83 94       	inc	r8
    3582:	91 2c       	mov	r9, r1
    3584:	02 c0       	rjmp	.+4      	; 0x358a <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    3586:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    3588:	e5 cf       	rjmp	.-54     	; 0x3554 <ProcessInput+0xe60>
    358a:	f2 e0       	ldi	r31, 0x02	; 2
    358c:	cf 0e       	add	r12, r31
    358e:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    3590:	29 e0       	ldi	r18, 0x09	; 9
    3592:	2b 15       	cp	r18, r11
    3594:	08 f4       	brcc	.+2      	; 0x3598 <ProcessInput+0xea4>
    3596:	8c c0       	rjmp	.+280    	; 0x36b0 <ProcessInput+0xfbc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3598:	73 94       	inc	r7
    359a:	f7 01       	movw	r30, r14
    359c:	eb 0d       	add	r30, r11
    359e:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35a0:	80 81       	ld	r24, Z
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	8d 52       	subi	r24, 0x2D	; 45
    35a6:	9b 48       	sbci	r25, 0x8B	; 139
    35a8:	f6 01       	movw	r30, r12
    35aa:	82 83       	std	Z+2, r24	; 0x02
    35ac:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    35ae:	ee 5b       	subi	r30, 0xBE	; 190
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 82       	st	Z, r8
    35b4:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    35b6:	e0 5c       	subi	r30, 0xC0	; 192
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 82       	st	Z, r8
    35bc:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    35be:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3993+0xa>
    35c2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    35c6:	b3 94       	inc	r11
    35c8:	e0 cf       	rjmp	.-64     	; 0x358a <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35ca:	86 e2       	ldi	r24, 0x26	; 38
    35cc:	95 e7       	ldi	r25, 0x75	; 117
    35ce:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    35d2:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    35d6:	8d e3       	ldi	r24, 0x3D	; 61
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	5e c0       	rjmp	.+188    	; 0x3698 <ProcessInput+0xfa4>
    35dc:	e0 91 29 38 	lds	r30, 0x3829	; 0x803829 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	ee 0f       	add	r30, r30
    35e4:	ff 1f       	adc	r31, r31
    35e6:	ec 52       	subi	r30, 0x2C	; 44
    35e8:	f6 4c       	sbci	r31, 0xC6	; 198
    35ea:	63 ed       	ldi	r22, 0xD3	; 211
    35ec:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <ProcessInput+0xf00>
    35f2:	46 c0       	rjmp	.+140    	; 0x3680 <ProcessInput+0xf8c>
                PopulateObject(route[currDepth+1], &actObj1);
    35f4:	80 81       	ld	r24, Z
    35f6:	91 81       	ldd	r25, Z+1	; 0x01
    35f8:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    35fc:	80 91 da 38 	lds	r24, 0x38DA	; 0x8038da <actObj1.3993+0x7>
    3600:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <CheckState>
    3604:	88 23       	and	r24, r24
    3606:	01 f1       	breq	.+64     	; 0x3648 <ProcessInput+0xf54>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3608:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <actObj1.3993+0x26>
    360c:	90 91 fa 38 	lds	r25, 0x38FA	; 0x8038fa <actObj1.3993+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3610:	20 91 eb 38 	lds	r18, 0x38EB	; 0x8038eb <actObj1.3993+0x18>
    3614:	30 91 ec 38 	lds	r19, 0x38EC	; 0x8038ec <actObj1.3993+0x19>
    3618:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    361c:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3620:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    3624:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    3628:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    362c:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3630:	80 91 fd 38 	lds	r24, 0x38FD	; 0x8038fd <actObj1.3993+0x2a>
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    363a:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    363e:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3993+0xa>
    3642:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <UpdateState>
    3646:	32 c0       	rjmp	.+100    	; 0x36ac <ProcessInput+0xfb8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3648:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <actObj1.3993+0x24>
    364c:	90 91 f8 38 	lds	r25, 0x38F8	; 0x8038f8 <actObj1.3993+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3650:	20 91 e9 38 	lds	r18, 0x38E9	; 0x8038e9 <actObj1.3993+0x16>
    3654:	30 91 ea 38 	lds	r19, 0x38EA	; 0x8038ea <actObj1.3993+0x17>
    3658:	20 93 14 39 	sts	0x3914, r18	; 0x803914 <reactStr+0x2>
    365c:	30 93 15 39 	sts	0x3915, r19	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3660:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    3664:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    3668:	10 92 94 39 	sts	0x3994, r1	; 0x803994 <reactStr+0x82>
    366c:	10 92 95 39 	sts	0x3995, r1	; 0x803995 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3670:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3993+0x29>
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <effect>
    367a:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <effect+0x1>
    367e:	16 c0       	rjmp	.+44     	; 0x36ac <ProcessInput+0xfb8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3680:	80 81       	ld	r24, Z
    3682:	91 81       	ldd	r25, Z+1	; 0x01
    3684:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3688:	8e e9       	ldi	r24, 0x9E	; 158
    368a:	98 e7       	ldi	r25, 0x78	; 120
    368c:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    3690:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3694:	82 e1       	ldi	r24, 0x12	; 18
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    369c:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    36a8:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    36ac:	82 e0       	ldi	r24, 0x02	; 2
    36ae:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    36b0:	10 92 01 39 	sts	0x3901, r1	; 0x803901 <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36b4:	8b e5       	ldi	r24, 0x5B	; 91
    36b6:	9a e7       	ldi	r25, 0x7A	; 122
    36b8:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <reactStr>
    36bc:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <reactStr+0x1>
    reactStr[1][number]=length;
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x40>
    36c8:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x41>
    reactStr[2][number]=type;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x80>
    36d4:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    36d8:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <specialInput>
    36dc:	88 23       	and	r24, r24
    36de:	19 f0       	breq	.+6      	; 0x36e6 <ProcessInput+0xff2>
    36e0:	70 92 11 39 	sts	0x3911, r7	; 0x803911 <responseList>
    36e4:	9a c0       	rjmp	.+308    	; 0x381a <ProcessInput+0x1126>
    36e6:	87 2d       	mov	r24, r7
    36e8:	12 c0       	rjmp	.+36     	; 0x370e <ProcessInput+0x101a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36ea:	8b e5       	ldi	r24, 0x5B	; 91
    36ec:	9a e7       	ldi	r25, 0x7A	; 122
    36ee:	80 93 12 39 	sts	0x3912, r24	; 0x803912 <reactStr>
    36f2:	90 93 13 39 	sts	0x3913, r25	; 0x803913 <reactStr+0x1>
    reactStr[1][number]=length;
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	80 93 52 39 	sts	0x3952, r24	; 0x803952 <reactStr+0x40>
    36fe:	90 93 53 39 	sts	0x3953, r25	; 0x803953 <reactStr+0x41>
    reactStr[2][number]=type;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	80 93 92 39 	sts	0x3992, r24	; 0x803992 <reactStr+0x80>
    370a:	90 93 93 39 	sts	0x3993, r25	; 0x803993 <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    370e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <SetStandardResponse>
    3712:	80 93 11 39 	sts	0x3911, r24	; 0x803911 <responseList>
    3716:	81 c0       	rjmp	.+258    	; 0x381a <ProcessInput+0x1126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3718:	84 ed       	ldi	r24, 0xD4	; 212
    371a:	99 e7       	ldi	r25, 0x79	; 121
    371c:	b0 cd       	rjmp	.-1184   	; 0x327e <ProcessInput+0xb8a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    371e:	b2 e0       	ldi	r27, 0x02	; 2
    3720:	fb 12       	cpse	r15, r27
    3722:	18 c8       	rjmp	.-4048   	; 0x2754 <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3724:	d8 01       	movw	r26, r16
    3726:	11 96       	adiw	r26, 0x01	; 1
    3728:	6c 91       	ld	r22, X
    372a:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CheckLetter>
    372e:	88 23       	and	r24, r24
    3730:	09 f4       	brne	.+2      	; 0x3734 <ProcessInput+0x1040>
    3732:	5b c0       	rjmp	.+182    	; 0x37ea <ProcessInput+0x10f6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	9c 01       	movw	r18, r24
    373e:	26 5c       	subi	r18, 0xC6	; 198
    3740:	37 4c       	sbci	r19, 0xC7	; 199
    3742:	79 01       	movw	r14, r18
    3744:	63 ed       	ldi	r22, 0xD3	; 211
    3746:	78 e3       	ldi	r23, 0x38	; 56
    3748:	d9 01       	movw	r26, r18
    374a:	8d 91       	ld	r24, X+
    374c:	9c 91       	ld	r25, X
    374e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3752:	84 ed       	ldi	r24, 0xD4	; 212
    3754:	97 e7       	ldi	r25, 0x77	; 119
    3756:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    375a:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    375e:	80 e1       	ldi	r24, 0x10	; 16
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	80 93 54 39 	sts	0x3954, r24	; 0x803954 <reactStr+0x42>
    3766:	90 93 55 39 	sts	0x3955, r25	; 0x803955 <reactStr+0x43>
    reactStr[2][number]=type;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	80 93 94 39 	sts	0x3994, r24	; 0x803994 <reactStr+0x82>
    3772:	90 93 95 39 	sts	0x3995, r25	; 0x803995 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3776:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <actObj1.3993+0x1a>
    377a:	30 91 ee 38 	lds	r19, 0x38EE	; 0x8038ee <actObj1.3993+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    377e:	40 91 df 38 	lds	r20, 0x38DF	; 0x8038df <actObj1.3993+0xc>
    3782:	50 91 e0 38 	lds	r21, 0x38E0	; 0x8038e0 <actObj1.3993+0xd>
    3786:	40 93 16 39 	sts	0x3916, r20	; 0x803916 <reactStr+0x4>
    378a:	50 93 17 39 	sts	0x3917, r21	; 0x803917 <reactStr+0x5>
    reactStr[1][number]=length;
    378e:	20 93 56 39 	sts	0x3956, r18	; 0x803956 <reactStr+0x44>
    3792:	30 93 57 39 	sts	0x3957, r19	; 0x803957 <reactStr+0x45>
    reactStr[2][number]=type;
    3796:	10 92 96 39 	sts	0x3996, r1	; 0x803996 <reactStr+0x84>
    379a:	10 92 97 39 	sts	0x3997, r1	; 0x803997 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    379e:	2b e5       	ldi	r18, 0x5B	; 91
    37a0:	3a e7       	ldi	r19, 0x7A	; 122
    37a2:	20 93 18 39 	sts	0x3918, r18	; 0x803918 <reactStr+0x6>
    37a6:	30 93 19 39 	sts	0x3919, r19	; 0x803919 <reactStr+0x7>
    reactStr[1][number]=length;
    37aa:	22 e0       	ldi	r18, 0x02	; 2
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	20 93 58 39 	sts	0x3958, r18	; 0x803958 <reactStr+0x46>
    37b2:	30 93 59 39 	sts	0x3959, r19	; 0x803959 <reactStr+0x47>
    reactStr[2][number]=type;
    37b6:	80 93 98 39 	sts	0x3998, r24	; 0x803998 <reactStr+0x86>
    37ba:	90 93 99 39 	sts	0x3999, r25	; 0x803999 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37be:	27 e9       	ldi	r18, 0x97	; 151
    37c0:	37 e7       	ldi	r19, 0x77	; 119
    37c2:	20 93 1a 39 	sts	0x391A, r18	; 0x80391a <reactStr+0x8>
    37c6:	30 93 1b 39 	sts	0x391B, r19	; 0x80391b <reactStr+0x9>
    reactStr[1][number]=length;
    37ca:	2d e3       	ldi	r18, 0x3D	; 61
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	20 93 5a 39 	sts	0x395A, r18	; 0x80395a <reactStr+0x48>
    37d2:	30 93 5b 39 	sts	0x395B, r19	; 0x80395b <reactStr+0x49>
    reactStr[2][number]=type;
    37d6:	80 93 9a 39 	sts	0x399A, r24	; 0x80399a <reactStr+0x88>
    37da:	90 93 9b 39 	sts	0x399B, r25	; 0x80399b <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    37de:	f7 01       	movw	r30, r14
    37e0:	10 82       	st	Z, r1
    37e2:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    37e4:	f5 e0       	ldi	r31, 0x05	; 5
    37e6:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    37e8:	65 cf       	rjmp	.-310    	; 0x36b4 <ProcessInput+0xfc0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    37ea:	80 91 3c 38 	lds	r24, 0x383C	; 0x80383c <inventory+0x2>
    37ee:	90 91 3d 38 	lds	r25, 0x383D	; 0x80383d <inventory+0x3>
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	49 f0       	breq	.+18     	; 0x3808 <ProcessInput+0x1114>
                        if (CheckLetter(inventory[x], data[1])) {
    37f6:	f8 01       	movw	r30, r16
    37f8:	61 81       	ldd	r22, Z+1	; 0x01
    37fa:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CheckLetter>
    37fe:	88 23       	and	r24, r24
    3800:	19 f0       	breq	.+6      	; 0x3808 <ProcessInput+0x1114>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	98 cf       	rjmp	.-208    	; 0x3738 <ProcessInput+0x1044>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3808:	84 e6       	ldi	r24, 0x64	; 100
    380a:	99 e7       	ldi	r25, 0x79	; 121
    380c:	80 93 14 39 	sts	0x3914, r24	; 0x803914 <reactStr+0x2>
    3810:	90 93 15 39 	sts	0x3915, r25	; 0x803915 <reactStr+0x3>
    reactStr[1][number]=length;
    3814:	81 e2       	ldi	r24, 0x21	; 33
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	32 c8       	rjmp	.-3996   	; 0x287e <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    381a:	d8 01       	movw	r26, r16
    381c:	1c 92       	st	X, r1
    serRxDone = 0;
    381e:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <serRxDone>
    RXCNT = 0;    
    3822:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	2a 96       	adiw	r28, 0x0a	; 10
    3828:	cd bf       	out	0x3d, r28	; 61
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	cf 90       	pop	r12
    383c:	bf 90       	pop	r11
    383e:	af 90       	pop	r10
    3840:	9f 90       	pop	r9
    3842:	8f 90       	pop	r8
    3844:	7f 90       	pop	r7
    3846:	6f 90       	pop	r6
    3848:	5f 90       	pop	r5
    384a:	4f 90       	pop	r4
    384c:	08 95       	ret

0000384e <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    384e:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    3850:	0e 94 24 10 	call	0x2048	; 0x2048 <CheckSend>
    3854:	88 23       	and	r24, r24
    3856:	11 f0       	breq	.+4      	; 0x385c <TextAdventure+0xe>
    3858:	c1 e0       	ldi	r28, 0x01	; 1
    385a:	11 c0       	rjmp	.+34     	; 0x387e <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    385c:	0e 94 91 10 	call	0x2122	; 0x2122 <CheckResponse>
    3860:	81 11       	cpse	r24, r1
    3862:	fa cf       	rjmp	.-12     	; 0x3858 <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    3864:	87 e6       	ldi	r24, 0x67	; 103
    3866:	98 e3       	ldi	r25, 0x38	; 56
    3868:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <CheckInput>
    386c:	c8 2f       	mov	r28, r24
    386e:	81 11       	cpse	r24, r1
    3870:	05 c0       	rjmp	.+10     	; 0x387c <TextAdventure+0x2e>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    3872:	87 e6       	ldi	r24, 0x67	; 103
    3874:	98 e3       	ldi	r25, 0x38	; 56
    3876:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <ProcessInput>

    return 0;
    387a:	01 c0       	rjmp	.+2      	; 0x387e <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    387c:	c2 e0       	ldi	r28, 0x02	; 2

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);

    return 0;
    387e:	8c 2f       	mov	r24, r28
    3880:	cf 91       	pop	r28
    3882:	08 95       	ret

00003884 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3884:	0e 94 34 05 	call	0xa68	; 0xa68 <Setup>

    SerSpeed(0xff);
    3888:	8f ef       	ldi	r24, 0xFF	; 255
    388a:	0e 94 a4 08 	call	0x1148	; 0x1148 <SerSpeed>
    388e:	a8 e9       	ldi	r26, 0x98	; 152
    3890:	ba eb       	ldi	r27, 0xBA	; 186
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	ed 91       	ld	r30, X+
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	ef 53       	subi	r30, 0x3F	; 63
    389a:	f5 4c       	sbci	r31, 0xC5	; 197
    389c:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    389e:	15 96       	adiw	r26, 0x05	; 5
    38a0:	ec 91       	ld	r30, X
    38a2:	15 97       	sbiw	r26, 0x05	; 5
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	ef 53       	subi	r30, 0x3F	; 63
    38a8:	f5 4c       	sbci	r31, 0xC5	; 197
    38aa:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    38ac:	2a eb       	ldi	r18, 0xBA	; 186
    38ae:	ae 39       	cpi	r26, 0x9E	; 158
    38b0:	b2 07       	cpc	r27, r18
    38b2:	81 f7       	brne	.-32     	; 0x3894 <main+0x10>
    38b4:	ea e8       	ldi	r30, 0x8A	; 138
    38b6:	fa eb       	ldi	r31, 0xBA	; 186
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    38b8:	91 e0       	ldi	r25, 0x01	; 1
    38ba:	ef 01       	movw	r28, r30
    38bc:	a5 81       	ldd	r26, Z+5	; 0x05
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	af 53       	subi	r26, 0x3F	; 63
    38c2:	b5 4c       	sbci	r27, 0xC5	; 197
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	9c 93       	st	X, r25
    38c8:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    38ca:	a8 81       	ld	r26, Y
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	af 53       	subi	r26, 0x3F	; 63
    38d0:	b5 4c       	sbci	r27, 0xC5	; 197
    38d2:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    38d4:	2a eb       	ldi	r18, 0xBA	; 186
    38d6:	ef 38       	cpi	r30, 0x8F	; 143
    38d8:	f2 07       	cpc	r31, r18
    38da:	79 f7       	brne	.-34     	; 0x38ba <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }

    //"Others"
    iLED[EYE[G][R]] = 1;
    38dc:	e0 91 96 ba 	lds	r30, 0xBA96	; 0x80ba96 <__bss_end+0x7f85>
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	ef 53       	subi	r30, 0x3F	; 63
    38e4:	f5 4c       	sbci	r31, 0xC5	; 197
    38e6:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    38e8:	e0 91 97 ba 	lds	r30, 0xBA97	; 0x80ba97 <__bss_end+0x7f86>
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	ef 53       	subi	r30, 0x3F	; 63
    38f0:	f5 4c       	sbci	r31, 0xC5	; 197
    38f2:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    38f4:	e0 91 94 ba 	lds	r30, 0xBA94	; 0x80ba94 <__bss_end+0x7f83>
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	ef 53       	subi	r30, 0x3F	; 63
    38fc:	f5 4c       	sbci	r31, 0xC5	; 197
    38fe:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    3900:	e0 91 95 ba 	lds	r30, 0xBA95	; 0x80ba95 <__bss_end+0x7f84>
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	ef 53       	subi	r30, 0x3F	; 63
    3908:	f5 4c       	sbci	r31, 0xC5	; 197
    390a:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    390c:	e0 91 88 ba 	lds	r30, 0xBA88	; 0x80ba88 <__bss_end+0x7f77>
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	ef 53       	subi	r30, 0x3F	; 63
    3914:	f5 4c       	sbci	r31, 0xC5	; 197
    3916:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    3918:	e0 91 89 ba 	lds	r30, 0xBA89	; 0x80ba89 <__bss_end+0x7f78>
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	ef 53       	subi	r30, 0x3F	; 63
    3920:	f5 4c       	sbci	r31, 0xC5	; 197
    3922:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    3924:	e0 91 87 ba 	lds	r30, 0xBA87	; 0x80ba87 <__bss_end+0x7f76>
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	ef 53       	subi	r30, 0x3F	; 63
    392c:	f5 4c       	sbci	r31, 0xC5	; 197
    392e:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    3930:	e0 91 86 ba 	lds	r30, 0xBA86	; 0x80ba86 <__bss_end+0x7f75>
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	ef 53       	subi	r30, 0x3F	; 63
    3938:	f5 4c       	sbci	r31, 0xC5	; 197
    393a:	80 83       	st	Z, r24

    LoadGameState();
    393c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <LoadGameState>

    while (TRUE) {
        if (GenerateAudio()) {
    3940:	0e 94 36 0b 	call	0x166c	; 0x166c <GenerateAudio>
    3944:	88 23       	and	r24, r24
    3946:	e1 f3       	breq	.-8      	; 0x3940 <main+0xbc>
            buttonState = CheckButtons(buttonState);
    3948:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <buttonState>
    394c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <CheckButtons>
    3950:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <buttonState>
            buttonMark = 0;
    3954:	10 92 3e 38 	sts	0x383E, r1	; 0x80383e <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3958:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    395c:	82 31       	cpi	r24, 0x12	; 18
    395e:	19 f4       	brne	.+6      	; 0x3966 <main+0xe2>
    3960:	0e 94 c4 08 	call	0x1188	; 0x1188 <SelectAuIn>
    3964:	02 c0       	rjmp	.+4      	; 0x396a <main+0xe6>
    3966:	0e 94 b5 08 	call	0x116a	; 0x116a <SelectTSens>

            //GenerateBlinks();

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    396a:	71 df       	rcall	.-286    	; 0x384e <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    396c:	0e 94 32 04 	call	0x864	; 0x864 <MagnetMaze>
            LanyardCode();
    3970:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LanyardCode>
            BastetDictates();
    3974:	0e 94 9e 0c 	call	0x193c	; 0x193c <BastetDictates>
            MakeFriends();
    3978:	0e 94 7c 00 	call	0xf8	; 0xf8 <MakeFriends>

            //Save progress
            SaveGameState();
    397c:	0e 94 b2 09 	call	0x1364	; 0x1364 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3980:	80 91 b4 3a 	lds	r24, 0x3AB4	; 0x803ab4 <adcPhot>
    3984:	90 91 b5 3a 	lds	r25, 0x3AB5	; 0x803ab5 <adcPhot+0x1>
    3988:	0a 97       	sbiw	r24, 0x0a	; 10
    398a:	20 f4       	brcc	.+8      	; 0x3994 <main+0x110>
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	84 e7       	ldi	r24, 0x74	; 116
    3990:	0e 94 39 0a 	call	0x1472	; 0x1472 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    3994:	80 91 b4 3a 	lds	r24, 0x3AB4	; 0x803ab4 <adcPhot>
    3998:	90 91 b5 3a 	lds	r25, 0x3AB5	; 0x803ab5 <adcPhot+0x1>
    399c:	85 36       	cpi	r24, 0x65	; 101
    399e:	91 05       	cpc	r25, r1
    39a0:	20 f0       	brcs	.+8      	; 0x39aa <main+0x126>
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	84 e7       	ldi	r24, 0x74	; 116
    39a6:	0e 94 39 0a 	call	0x1472	; 0x1472 <WriteStatusBit>

            //Check temperature
            HotSummer();
    39aa:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <HotSummer>
    39ae:	c8 cf       	rjmp	.-112    	; 0x3940 <main+0xbc>

000039b0 <__udivmodqi4>:
    39b0:	99 1b       	sub	r25, r25
    39b2:	79 e0       	ldi	r23, 0x09	; 9
    39b4:	04 c0       	rjmp	.+8      	; 0x39be <__udivmodqi4_ep>

000039b6 <__udivmodqi4_loop>:
    39b6:	99 1f       	adc	r25, r25
    39b8:	96 17       	cp	r25, r22
    39ba:	08 f0       	brcs	.+2      	; 0x39be <__udivmodqi4_ep>
    39bc:	96 1b       	sub	r25, r22

000039be <__udivmodqi4_ep>:
    39be:	88 1f       	adc	r24, r24
    39c0:	7a 95       	dec	r23
    39c2:	c9 f7       	brne	.-14     	; 0x39b6 <__udivmodqi4_loop>
    39c4:	80 95       	com	r24
    39c6:	08 95       	ret

000039c8 <__udivmodhi4>:
    39c8:	aa 1b       	sub	r26, r26
    39ca:	bb 1b       	sub	r27, r27
    39cc:	51 e1       	ldi	r21, 0x11	; 17
    39ce:	07 c0       	rjmp	.+14     	; 0x39de <__udivmodhi4_ep>

000039d0 <__udivmodhi4_loop>:
    39d0:	aa 1f       	adc	r26, r26
    39d2:	bb 1f       	adc	r27, r27
    39d4:	a6 17       	cp	r26, r22
    39d6:	b7 07       	cpc	r27, r23
    39d8:	10 f0       	brcs	.+4      	; 0x39de <__udivmodhi4_ep>
    39da:	a6 1b       	sub	r26, r22
    39dc:	b7 0b       	sbc	r27, r23

000039de <__udivmodhi4_ep>:
    39de:	88 1f       	adc	r24, r24
    39e0:	99 1f       	adc	r25, r25
    39e2:	5a 95       	dec	r21
    39e4:	a9 f7       	brne	.-22     	; 0x39d0 <__udivmodhi4_loop>
    39e6:	80 95       	com	r24
    39e8:	90 95       	com	r25
    39ea:	bc 01       	movw	r22, r24
    39ec:	cd 01       	movw	r24, r26
    39ee:	08 95       	ret

000039f0 <__divmodhi4>:
    39f0:	97 fb       	bst	r25, 7
    39f2:	07 2e       	mov	r0, r23
    39f4:	16 f4       	brtc	.+4      	; 0x39fa <__divmodhi4+0xa>
    39f6:	00 94       	com	r0
    39f8:	06 d0       	rcall	.+12     	; 0x3a06 <__divmodhi4_neg1>
    39fa:	77 fd       	sbrc	r23, 7
    39fc:	08 d0       	rcall	.+16     	; 0x3a0e <__divmodhi4_neg2>
    39fe:	e4 df       	rcall	.-56     	; 0x39c8 <__udivmodhi4>
    3a00:	07 fc       	sbrc	r0, 7
    3a02:	05 d0       	rcall	.+10     	; 0x3a0e <__divmodhi4_neg2>
    3a04:	3e f4       	brtc	.+14     	; 0x3a14 <__divmodhi4_exit>

00003a06 <__divmodhi4_neg1>:
    3a06:	90 95       	com	r25
    3a08:	81 95       	neg	r24
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	08 95       	ret

00003a0e <__divmodhi4_neg2>:
    3a0e:	70 95       	com	r23
    3a10:	61 95       	neg	r22
    3a12:	7f 4f       	sbci	r23, 0xFF	; 255

00003a14 <__divmodhi4_exit>:
    3a14:	08 95       	ret

00003a16 <__udivmodsi4>:
    3a16:	a1 e2       	ldi	r26, 0x21	; 33
    3a18:	1a 2e       	mov	r1, r26
    3a1a:	aa 1b       	sub	r26, r26
    3a1c:	bb 1b       	sub	r27, r27
    3a1e:	fd 01       	movw	r30, r26
    3a20:	0d c0       	rjmp	.+26     	; 0x3a3c <__udivmodsi4_ep>

00003a22 <__udivmodsi4_loop>:
    3a22:	aa 1f       	adc	r26, r26
    3a24:	bb 1f       	adc	r27, r27
    3a26:	ee 1f       	adc	r30, r30
    3a28:	ff 1f       	adc	r31, r31
    3a2a:	a2 17       	cp	r26, r18
    3a2c:	b3 07       	cpc	r27, r19
    3a2e:	e4 07       	cpc	r30, r20
    3a30:	f5 07       	cpc	r31, r21
    3a32:	20 f0       	brcs	.+8      	; 0x3a3c <__udivmodsi4_ep>
    3a34:	a2 1b       	sub	r26, r18
    3a36:	b3 0b       	sbc	r27, r19
    3a38:	e4 0b       	sbc	r30, r20
    3a3a:	f5 0b       	sbc	r31, r21

00003a3c <__udivmodsi4_ep>:
    3a3c:	66 1f       	adc	r22, r22
    3a3e:	77 1f       	adc	r23, r23
    3a40:	88 1f       	adc	r24, r24
    3a42:	99 1f       	adc	r25, r25
    3a44:	1a 94       	dec	r1
    3a46:	69 f7       	brne	.-38     	; 0x3a22 <__udivmodsi4_loop>
    3a48:	60 95       	com	r22
    3a4a:	70 95       	com	r23
    3a4c:	80 95       	com	r24
    3a4e:	90 95       	com	r25
    3a50:	9b 01       	movw	r18, r22
    3a52:	ac 01       	movw	r20, r24
    3a54:	bd 01       	movw	r22, r26
    3a56:	cf 01       	movw	r24, r30
    3a58:	08 95       	ret

00003a5a <_exit>:
    3a5a:	f8 94       	cli

00003a5c <__stop_program>:
    3a5c:	ff cf       	rjmp	.-2      	; 0x3a5c <__stop_program>
