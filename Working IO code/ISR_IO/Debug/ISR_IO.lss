
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00803800  00002a28  00002adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003e  0000a9ea  000029ea  00002a9e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002cb  00803890  00803890  00002b6c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000260  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000552f  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002373  00000000  00000000  0000836b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000276f  00000000  00000000  0000a6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000077c  00000000  00000000  0000ce50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001754  00000000  00000000  0000d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003931  00000000  00000000  0000ed20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c0  00000000  00000000  00012651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	3d c4       	rjmp	.+2170   	; 0x894 <__vector_6>
      1a:	00 00       	nop
      1c:	89 c4       	rjmp	.+2322   	; 0x930 <__vector_7>
      1e:	00 00       	nop
      20:	8e c2       	rjmp	.+1308   	; 0x53e <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c2       	rjmp	.+1450   	; 0x5e0 <__vector_13>
      36:	00 00       	nop
      38:	06 c3       	rjmp	.+1548   	; 0x646 <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c3       	rjmp	.+1878   	; 0x7a8 <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	d5 c3       	rjmp	.+1962   	; 0x804 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3f c3       	rjmp	.+1662   	; 0x6ec <__vector_27>
      6e:	00 00       	nop
      70:	7f c3       	rjmp	.+1790   	; 0x770 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e8 e2       	ldi	r30, 0x28	; 40
      90:	fa e2       	ldi	r31, 0x2A	; 42
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a0 39       	cpi	r26, 0x90	; 144
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a0 e9       	ldi	r26, 0x90	; 144
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 35       	cpi	r26, 0x5B	; 91
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 2e 14 	call	0x285c	; 0x285c <main>
      b2:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      be:	e6 e2       	ldi	r30, 0x26	; 38
      c0:	f4 e0       	ldi	r31, 0x04	; 4
      c2:	80 83       	st	Z, r24
      c4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      c8:	a1 e2       	ldi	r26, 0x21	; 33
      ca:	b4 e0       	ldi	r27, 0x04	; 4
      cc:	92 e0       	ldi	r25, 0x02	; 2
      ce:	9c 93       	st	X, r25
      d0:	90 83       	st	Z, r25
      d2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      d6:	e0 e1       	ldi	r30, 0x10	; 16
      d8:	f8 e0       	ldi	r31, 0x08	; 8
      da:	97 e0       	ldi	r25, 0x07	; 7
      dc:	96 83       	std	Z+6, r25	; 0x06
      de:	98 e0       	ldi	r25, 0x08	; 8
      e0:	94 83       	std	Z+4, r25	; 0x04
      e2:	83 83       	std	Z+3, r24	; 0x03
      e4:	8c 93       	st	X, r24
      e6:	85 81       	ldd	r24, Z+5	; 0x05
      e8:	81 60       	ori	r24, 0x01	; 1
      ea:	85 83       	std	Z+5, r24	; 0x05
      ec:	85 81       	ldd	r24, Z+5	; 0x05
      ee:	84 6c       	ori	r24, 0xC4	; 196
      f0:	85 83       	std	Z+5, r24	; 0x05
      f2:	08 95       	ret

000000f4 <I2C_recover>:
      f4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      f8:	88 60       	ori	r24, 0x08	; 8
      fa:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fe:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     108:	99 e0       	ldi	r25, 0x09	; 9
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     112:	30 e1       	ldi	r19, 0x10	; 16
     114:	3a 95       	dec	r19
     116:	f1 f7       	brne	.-4      	; 0x114 <I2C_recover+0x20>
     118:	00 c0       	rjmp	.+0      	; 0x11a <I2C_recover+0x26>
     11a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     11e:	30 e1       	ldi	r19, 0x10	; 16
     120:	3a 95       	dec	r19
     122:	f1 f7       	brne	.-4      	; 0x120 <I2C_recover+0x2c>
     124:	00 c0       	rjmp	.+0      	; 0x126 <I2C_recover+0x32>
     126:	91 50       	subi	r25, 0x01	; 1
     128:	89 f7       	brne	.-30     	; 0x10c <I2C_recover+0x18>
     12a:	28 e0       	ldi	r18, 0x08	; 8
     12c:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     130:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     13e:	91 60       	ori	r25, 0x01	; 1
     140:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     144:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	94 6c       	ori	r25, 0xC4	; 196
     14a:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14e:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     152:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     156:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	84 6c       	ori	r24, 0xC4	; 196
     16a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16e:	08 95       	ret

00000170 <I2C_start>:
     170:	28 2f       	mov	r18, r24
     172:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     176:	90 6c       	ori	r25, 0xC0	; 192
     178:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	89 2f       	mov	r24, r25
     182:	84 70       	andi	r24, 0x04	; 4
     184:	92 fd       	sbrc	r25, 2
     186:	03 c0       	rjmp	.+6      	; 0x18e <I2C_start+0x1e>
     188:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     18c:	08 95       	ret
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	08 95       	ret

00000192 <I2C_wait_ACK>:
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     19c:	87 fd       	sbrc	r24, 7
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <I2C_wait_ACK+0x22>
     1a8:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     1ac:	81 11       	cpse	r24, r1
     1ae:	f4 cf       	rjmp	.-24     	; 0x198 <I2C_wait_ACK+0x6>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	08 95       	ret
     1b4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1b8:	80 6c       	ori	r24, 0xC0	; 192
     1ba:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1be:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	82 fd       	sbrc	r24, 2
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <I2C_wait_ACK+0x46>
     1c6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ca:	83 fd       	sbrc	r24, 3
     1cc:	07 c0       	rjmp	.+14     	; 0x1dc <I2C_wait_ACK+0x4a>
     1ce:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d2:	82 95       	swap	r24
     1d4:	81 70       	andi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	08 95       	ret

000001e0 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e0:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e2:	8c e0       	ldi	r24, 0x0C	; 12
     1e4:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1e8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ec:	89 2f       	mov	r24, r25
     1ee:	83 70       	andi	r24, 0x03	; 3
     1f0:	82 30       	cpi	r24, 0x02	; 2
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f4:	88 e0       	ldi	r24, 0x08	; 8
     1f6:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1f8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1fc:	97 fd       	sbrc	r25, 7
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     200:	90 91 8e 3a 	lds	r25, 0x3A8E	; 0x803a8e <timeout_I2C>
     204:	91 11       	cpse	r25, r1
     206:	f8 cf       	rjmp	.-16     	; 0x1f8 <I2C_read+0x18>
     208:	8f ef       	ldi	r24, 0xFF	; 255
     20a:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     20c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     210:	90 6c       	ori	r25, 0xC0	; 192
     212:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     216:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21a:	92 fd       	sbrc	r25, 2
     21c:	1e c0       	rjmp	.+60     	; 0x25a <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     21e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     222:	93 fd       	sbrc	r25, 3
     224:	1d c0       	rjmp	.+58     	; 0x260 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     226:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22a:	89 2f       	mov	r24, r25
     22c:	80 71       	andi	r24, 0x10	; 16
     22e:	94 fd       	sbrc	r25, 4
     230:	16 c0       	rjmp	.+44     	; 0x25e <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     232:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     236:	61 11       	cpse	r22, r1
     238:	02 c0       	rjmp	.+4      	; 0x23e <I2C_read+0x5e>
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	01 c0       	rjmp	.+2      	; 0x240 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     23e:	94 60       	ori	r25, 0x04	; 4
     240:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     244:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     248:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24a:	61 11       	cpse	r22, r1
     24c:	09 c0       	rjmp	.+18     	; 0x260 <I2C_read+0x80>
     24e:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     252:	92 60       	ori	r25, 0x02	; 2
     254:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     258:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     25e:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     260:	08 95       	ret

00000262 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     262:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     264:	8c e0       	ldi	r24, 0x0C	; 12
     266:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	92 30       	cpi	r25, 0x02	; 2
     272:	b1 f4       	brne	.+44     	; 0x2a0 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     274:	80 81       	ld	r24, Z
     276:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     27e:	86 fd       	sbrc	r24, 6
     280:	06 c0       	rjmp	.+12     	; 0x28e <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     282:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     286:	81 11       	cpse	r24, r1
     288:	f8 cf       	rjmp	.-16     	; 0x27a <I2C_write+0x18>
     28a:	8f ef       	ldi	r24, 0xFF	; 255
     28c:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     28e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     292:	82 fd       	sbrc	r24, 2
     294:	07 c0       	rjmp	.+14     	; 0x2a4 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     296:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29a:	82 95       	swap	r24
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a4:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2a6:	08 95       	ret

000002a8 <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2a8:	e0 e1       	ldi	r30, 0x10	; 16
     2aa:	f8 e0       	ldi	r31, 0x08	; 8
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	83 60       	ori	r24, 0x03	; 3
     2b0:	84 83       	std	Z+4, r24	; 0x04
     2b2:	08 95       	ret

000002b4 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	6b 01       	movw	r12, r22
     2c4:	f4 2e       	mov	r15, r20
     2c6:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2c8:	18 2f       	mov	r17, r24
     2ca:	11 0f       	add	r17, r17
     2cc:	81 2f       	mov	r24, r17
     2ce:	50 df       	rcall	.-352    	; 0x170 <I2C_start>
	if (status != 0) goto error;
     2d0:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d2:	2b c0       	rjmp	.+86     	; 0x32a <I2C_read_bytes+0x76>
     2d4:	5e df       	rcall	.-324    	; 0x192 <I2C_wait_ACK>
	if (status == 1) {
     2d6:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <I2C_read_bytes+0x2c>
     2da:	e6 df       	rcall	.-52     	; 0x2a8 <I2C_stop>
		return 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	27 c0       	rjmp	.+78     	; 0x32e <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e0:	81 11       	cpse	r24, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e4:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2e6:	49 f0       	breq	.+18     	; 0x2fa <I2C_read_bytes+0x46>
     2e8:	c6 01       	movw	r24, r12
     2ea:	bb df       	rcall	.-138    	; 0x262 <I2C_write>
	    if (status != 0) goto error;
     2ec:	81 11       	cpse	r24, r1
     2ee:	1d c0       	rjmp	.+58     	; 0x32a <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	c8 1a       	sub	r12, r24
     2f4:	d8 0a       	sbc	r13, r24
        --reg_len;
     2f6:	fa 94       	dec	r15
     2f8:	f5 cf       	rjmp	.-22     	; 0x2e4 <I2C_read_bytes+0x30>
     2fa:	01 34       	cpi	r16, 0x41	; 65
     2fc:	08 f0       	brcs	.+2      	; 0x300 <I2C_read_bytes+0x4c>
     2fe:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     300:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     302:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     306:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     308:	40 f0       	brcs	.+16     	; 0x31a <I2C_read_bytes+0x66>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	ce 01       	movw	r24, r28
     30e:	68 df       	rcall	.-304    	; 0x1e0 <I2C_read>
		if (status != 0) goto error;
     310:	81 11       	cpse	r24, r1
     312:	0b c0       	rjmp	.+22     	; 0x32a <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     318:	f6 cf       	rjmp	.-20     	; 0x306 <I2C_read_bytes+0x52>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     31e:	60 df       	rcall	.-320    	; 0x1e0 <I2C_read>
     320:	81 11       	cpse	r24, r1
	I2C_stop();
     322:	03 c0       	rjmp	.+6      	; 0x32a <I2C_read_bytes+0x76>
     324:	c1 df       	rcall	.-126    	; 0x2a8 <I2C_stop>
	return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32a:	e4 de       	rcall	.-568    	; 0xf4 <I2C_recover>
     32c:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     32e:	df 91       	pop	r29
}
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	ff 90       	pop	r15
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <Setup>:
     33e:	cf 93       	push	r28
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     340:	df 93       	push	r29
     342:	f8 94       	cli
     344:	88 ed       	ldi	r24, 0xD8	; 216
     346:	84 bf       	out	0x34, r24	; 52
     348:	c1 e0       	ldi	r28, 0x01	; 1
     34a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     34e:	8a e4       	ldi	r24, 0x4A	; 74
     350:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     354:	8c e7       	ldi	r24, 0x7C	; 124
     356:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     35a:	9f e3       	ldi	r25, 0x3F	; 63
     35c:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     360:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     364:	80 68       	ori	r24, 0x80	; 128
     366:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     36a:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     36e:	80 68       	ori	r24, 0x80	; 128
     370:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     374:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     37e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     382:	80 68       	ori	r24, 0x80	; 128
     384:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     388:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     392:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     396:	80 68       	ori	r24, 0x80	; 128
     398:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     39c:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     3a0:	d2 e0       	ldi	r29, 0x02	; 2
     3a2:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     3a6:	2b e5       	ldi	r18, 0x5B	; 91
     3a8:	31 e0       	ldi	r19, 0x01	; 1
     3aa:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     3ae:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     3b2:	80 ea       	ldi	r24, 0xA0	; 160
     3b4:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     3b8:	80 ec       	ldi	r24, 0xC0	; 192
     3ba:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     3c4:	1c ba       	out	0x1c, r1	; 28
     3c6:	1d ba       	out	0x1d, r1	; 29
     3c8:	1e ba       	out	0x1e, r1	; 30
     3ca:	1f ba       	out	0x1f, r1	; 31
     3cc:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3d6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     3da:	87 e7       	ldi	r24, 0x77	; 119
     3dc:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     3e0:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     3e4:	8b e0       	ldi	r24, 0x0B	; 11
     3e6:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     3ea:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     3fa:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     3fe:	8f ef       	ldi	r24, 0xFF	; 255
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     406:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     40a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     40e:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     412:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     416:	8b e8       	ldi	r24, 0x8B	; 139
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     41e:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     422:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     426:	48 de       	rcall	.-880    	; 0xb8 <I2C_init>
     428:	82 e1       	ldi	r24, 0x12	; 18
     42a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     434:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     438:	86 e0       	ldi	r24, 0x06	; 6
     43a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     43e:	84 e4       	ldi	r24, 0x44	; 68
     440:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     444:	8e e1       	ldi	r24, 0x1E	; 30
     446:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     44a:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     44e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     452:	81 60       	ori	r24, 0x01	; 1
     454:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     458:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     45c:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     460:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     464:	82 e5       	ldi	r24, 0x52	; 82
     466:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     470:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     474:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     478:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     482:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     486:	80 e4       	ldi	r24, 0x40	; 64
     488:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     48c:	80 e8       	ldi	r24, 0x80	; 128
     48e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     492:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     496:	81 60       	ori	r24, 0x01	; 1
     498:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     49c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     4a0:	80 fd       	sbrc	r24, 0
     4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a4:	80 e3       	ldi	r24, 0x30	; 48
     4a6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     4aa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     4ae:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     4b2:	82 fd       	sbrc	r24, 2
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	98 e7       	ldi	r25, 0x78	; 120
     4ba:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     4be:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     4c2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     4c6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     4ca:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     4ce:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     4d2:	82 96       	adiw	r24, 0x22	; 34
     4d4:	0e 94 bd 14 	call	0x297a	; 0x297a <__udivmodhi4>
     4d8:	80 93 38 3b 	sts	0x3B38, r24	; 0x803b38 <tmp16bit>
     4dc:	90 93 39 3b 	sts	0x3B39, r25	; 0x803b39 <tmp16bit+0x1>
     4e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     4e4:	83 fd       	sbrc	r24, 3
     4e6:	fc cf       	rjmp	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4e8:	80 91 38 3b 	lds	r24, 0x3B38	; 0x803b38 <tmp16bit>
     4ec:	90 91 39 3b 	lds	r25, 0x3B39	; 0x803b39 <tmp16bit+0x1>
     4f0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     4f4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     4f8:	83 e0       	ldi	r24, 0x03	; 3
     4fa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     504:	88 e0       	ldi	r24, 0x08	; 8
     506:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     50a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     50e:	80 fd       	sbrc	r24, 0
     510:	fc cf       	rjmp	.-8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     512:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     516:	81 60       	ori	r24, 0x01	; 1
     518:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     51c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     520:	81 60       	ori	r24, 0x01	; 1
     522:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     526:	10 92 a3 3a 	sts	0x3AA3, r1	; 0x803aa3 <serRx>
     52a:	83 ea       	ldi	r24, 0xA3	; 163
     52c:	9a e3       	ldi	r25, 0x3A	; 58
     52e:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <serTxAddr>
     532:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <serTxAddr+0x1>
     536:	78 94       	sei
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <__vector_8>:
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
     554:	87 e0       	ldi	r24, 0x07	; 7
     556:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     55a:	84 e4       	ldi	r24, 0x44	; 68
     55c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     560:	ec b3       	in	r30, 0x1c	; 28
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	e8 9f       	mul	r30, r24
     566:	f0 01       	movw	r30, r0
     568:	11 24       	eor	r1, r1
     56a:	e2 5f       	subi	r30, 0xF2	; 242
     56c:	f4 4c       	sbci	r31, 0xC4	; 196
     56e:	a8 e2       	ldi	r26, 0x28	; 40
     570:	ba e0       	ldi	r27, 0x0A	; 10
     572:	96 e0       	ldi	r25, 0x06	; 6
     574:	81 91       	ld	r24, Z+
     576:	8d 93       	st	X+, r24
     578:	9a 95       	dec	r25
     57a:	e1 f7       	brne	.-8      	; 0x574 <__vector_8+0x36>
     57c:	8b e0       	ldi	r24, 0x0B	; 11
     57e:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     582:	8c b3       	in	r24, 0x1c	; 28
     584:	83 30       	cpi	r24, 0x03	; 3
     586:	58 f4       	brcc	.+22     	; 0x59e <__vector_8+0x60>
     588:	8c b3       	in	r24, 0x1c	; 28
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	01 c0       	rjmp	.+2      	; 0x590 <__vector_8+0x52>
     58e:	99 0f       	add	r25, r25
     590:	8a 95       	dec	r24
     592:	ea f7       	brpl	.-6      	; 0x58e <__vector_8+0x50>
     594:	99 b9       	out	0x09, r25	; 9
     596:	8c b3       	in	r24, 0x1c	; 28
     598:	83 95       	inc	r24
     59a:	8c bb       	out	0x1c, r24	; 28
     59c:	0a c0       	rjmp	.+20     	; 0x5b2 <__vector_8+0x74>
     59e:	8c b3       	in	r24, 0x1c	; 28
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	21 f4       	brne	.+8      	; 0x5ac <__vector_8+0x6e>
     5a4:	2a 9a       	sbi	0x05, 2	; 5
     5a6:	83 95       	inc	r24
     5a8:	8c bb       	out	0x1c, r24	; 28
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <__vector_8+0x74>
     5ac:	2e 9a       	sbi	0x05, 6	; 5
     5ae:	88 27       	eor	r24, r24
     5b0:	8c bb       	out	0x1c, r24	; 28
     5b2:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     5b6:	88 23       	and	r24, r24
     5b8:	29 f0       	breq	.+10     	; 0x5c4 <__vector_8+0x86>
     5ba:	80 91 8e 3a 	lds	r24, 0x3A8E	; 0x803a8e <timeout_I2C>
     5be:	81 50       	subi	r24, 0x01	; 1
     5c0:	80 93 8e 3a 	sts	0x3A8E, r24	; 0x803a8e <timeout_I2C>
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     5ca:	ff 91       	pop	r31
     5cc:	ef 91       	pop	r30
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	0f 90       	pop	r0
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	0f 90       	pop	r0
     5dc:	1f 90       	pop	r1
     5de:	18 95       	reti

000005e0 <__vector_13>:
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
     5f2:	e0 91 e7 3a 	lds	r30, 0x3AE7	; 0x803ae7 <serTxAddr>
     5f6:	f0 91 e8 3a 	lds	r31, 0x3AE8	; 0x803ae8 <serTxAddr+0x1>
     5fa:	80 81       	ld	r24, Z
     5fc:	88 23       	and	r24, r24
     5fe:	91 f0       	breq	.+36     	; 0x624 <__vector_13+0x44>
     600:	80 81       	ld	r24, Z
     602:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     606:	80 91 e7 3a 	lds	r24, 0x3AE7	; 0x803ae7 <serTxAddr>
     60a:	90 91 e8 3a 	lds	r25, 0x3AE8	; 0x803ae8 <serTxAddr+0x1>
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <serTxAddr>
     614:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <serTxAddr+0x1>
     618:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     61c:	80 62       	ori	r24, 0x20	; 32
     61e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     622:	05 c0       	rjmp	.+10     	; 0x62e <__vector_13+0x4e>
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <serTxDone>
     62a:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_14>:
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
     65e:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <auSmpAddr>
     662:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <auSmpAddr+0x1>
     666:	80 81       	ld	r24, Z
     668:	81 11       	cpse	r24, r1
     66a:	08 c0       	rjmp	.+16     	; 0x67c <__vector_14+0x36>
     66c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__data_start>
     670:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__data_start+0x1>
     674:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <auSmpAddr>
     678:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <auSmpAddr+0x1>
     67c:	e0 91 02 38 	lds	r30, 0x3802	; 0x803802 <auSmpAddr>
     680:	f0 91 03 38 	lds	r31, 0x3803	; 0x803803 <auSmpAddr+0x1>
     684:	80 81       	ld	r24, Z
     686:	88 23       	and	r24, r24
     688:	e1 f0       	breq	.+56     	; 0x6c2 <__vector_14+0x7c>
     68a:	20 81       	ld	r18, Z
     68c:	40 91 e4 3a 	lds	r20, 0x3AE4	; 0x803ae4 <auVolume>
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	2f 57       	subi	r18, 0x7F	; 127
     694:	31 09       	sbc	r19, r1
     696:	42 9f       	mul	r20, r18
     698:	c0 01       	movw	r24, r0
     69a:	43 9f       	mul	r20, r19
     69c:	90 0d       	add	r25, r0
     69e:	11 24       	eor	r1, r1
     6a0:	89 2f       	mov	r24, r25
     6a2:	99 0f       	add	r25, r25
     6a4:	99 0b       	sbc	r25, r25
     6a6:	80 58       	subi	r24, 0x80	; 128
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     6ae:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <auSmpAddr>
     6b2:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <auSmpAddr+0x1>
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <auSmpAddr>
     6bc:	90 93 03 38 	sts	0x3803, r25	; 0x803803 <auSmpAddr+0x1>
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <__vector_14+0x88>
     6c2:	80 e8       	ldi	r24, 0x80	; 128
     6c4:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 36 3b 	sts	0x3B36, r24	; 0x803b36 <auPlayDone>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	4f 91       	pop	r20
     6de:	3f 91       	pop	r19
     6e0:	2f 91       	pop	r18
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_27>:
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	8f 93       	push	r24
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
     6fc:	80 91 9c 38 	lds	r24, 0x389C	; 0x80389c <serRxDone>
     700:	81 11       	cpse	r24, r1
     702:	2b c0       	rjmp	.+86     	; 0x75a <__vector_27+0x6e>
     704:	ed b3       	in	r30, 0x1d	; 29
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     70c:	ed 55       	subi	r30, 0x5D	; 93
     70e:	f5 4c       	sbci	r31, 0xC5	; 197
     710:	80 83       	st	Z, r24
     712:	ed b3       	in	r30, 0x1d	; 29
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ed 55       	subi	r30, 0x5D	; 93
     718:	f5 4c       	sbci	r31, 0xC5	; 197
     71a:	80 81       	ld	r24, Z
     71c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     720:	ed b3       	in	r30, 0x1d	; 29
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ed 55       	subi	r30, 0x5D	; 93
     726:	f5 4c       	sbci	r31, 0xC5	; 197
     728:	80 81       	ld	r24, Z
     72a:	8a 30       	cpi	r24, 0x0A	; 10
     72c:	39 f0       	breq	.+14     	; 0x73c <__vector_27+0x50>
     72e:	ed b3       	in	r30, 0x1d	; 29
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	ed 55       	subi	r30, 0x5D	; 93
     734:	f5 4c       	sbci	r31, 0xC5	; 197
     736:	80 81       	ld	r24, Z
     738:	8d 30       	cpi	r24, 0x0D	; 13
     73a:	49 f4       	brne	.+18     	; 0x74e <__vector_27+0x62>
     73c:	ed b3       	in	r30, 0x1d	; 29
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ed 55       	subi	r30, 0x5D	; 93
     742:	f5 4c       	sbci	r31, 0xC5	; 197
     744:	10 82       	st	Z, r1
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 9c 38 	sts	0x389C, r24	; 0x80389c <serRxDone>
     74c:	06 c0       	rjmp	.+12     	; 0x75a <__vector_27+0x6e>
     74e:	8d b3       	in	r24, 0x1d	; 29
     750:	80 34       	cpi	r24, 0x40	; 64
     752:	18 f4       	brcc	.+6      	; 0x75a <__vector_27+0x6e>
     754:	8d b3       	in	r24, 0x1d	; 29
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	8d bb       	out	0x1d, r24	; 29
     75a:	80 e8       	ldi	r24, 0x80	; 128
     75c:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     760:	ff 91       	pop	r31
     762:	ef 91       	pop	r30
     764:	8f 91       	pop	r24
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <__vector_28>:
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	8f 93       	push	r24
     77c:	ef 93       	push	r30
     77e:	ff 93       	push	r31
     780:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     784:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     78e:	e5 e0       	ldi	r30, 0x05	; 5
     790:	f8 e0       	ldi	r31, 0x08	; 8
     792:	80 81       	ld	r24, Z
     794:	8f 7d       	andi	r24, 0xDF	; 223
     796:	80 83       	st	Z, r24
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	8f 91       	pop	r24
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <__vector_20>:
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	8f 93       	push	r24
     7b4:	ef 93       	push	r30
     7b6:	ff 93       	push	r31
     7b8:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <__data_end>
     7bc:	81 11       	cpse	r24, r1
     7be:	15 c0       	rjmp	.+42     	; 0x7ea <__vector_20+0x42>
     7c0:	8e b3       	in	r24, 0x1e	; 30
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	8f 71       	andi	r24, 0x1F	; 31
     7c6:	8e bb       	out	0x1e, r24	; 30
     7c8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     7cc:	8e 31       	cpi	r24, 0x1E	; 30
     7ce:	29 f4       	brne	.+10     	; 0x7da <__vector_20+0x32>
     7d0:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     7d4:	80 93 37 3b 	sts	0x3B37, r24	; 0x803b37 <adcTemp>
     7d8:	0a c0       	rjmp	.+20     	; 0x7ee <__vector_20+0x46>
     7da:	ee b3       	in	r30, 0x1e	; 30
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     7e2:	e2 51       	subi	r30, 0x12	; 18
     7e4:	f5 4c       	sbci	r31, 0xC5	; 197
     7e6:	80 83       	st	Z, r24
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <__vector_20+0x46>
     7ea:	10 92 90 38 	sts	0x3890, r1	; 0x803890 <__data_end>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     7f4:	ff 91       	pop	r31
     7f6:	ef 91       	pop	r30
     7f8:	8f 91       	pop	r24
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <__vector_22>:
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	8f 93       	push	r24
     810:	9f 93       	push	r25
     812:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     816:	81 11       	cpse	r24, r1
     818:	0a c0       	rjmp	.+20     	; 0x82e <__vector_22+0x2a>
     81a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     81e:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     822:	80 93 eb 3a 	sts	0x3AEB, r24	; 0x803aeb <adcPhot>
     826:	90 93 ec 3a 	sts	0x3AEC, r25	; 0x803aec <adcPhot+0x1>
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	10 c0       	rjmp	.+32     	; 0x84e <__vector_22+0x4a>
     82e:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	79 f4       	brne	.+30     	; 0x854 <__vector_22+0x50>
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     83c:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     840:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     844:	80 93 e9 3a 	sts	0x3AE9, r24	; 0x803ae9 <adcHall>
     848:	90 93 ea 3a 	sts	0x3AEA, r25	; 0x803aea <adcHall+0x1>
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     852:	10 c0       	rjmp	.+32     	; 0x874 <__vector_22+0x70>
     854:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     858:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     85c:	80 93 e5 3a 	sts	0x3AE5, r24	; 0x803ae5 <adcBtns>
     860:	90 93 e6 3a 	sts	0x3AE6, r25	; 0x803ae6 <adcBtns+0x1>
     864:	8f b3       	in	r24, 0x1f	; 31
     866:	8f 30       	cpi	r24, 0x0F	; 15
     868:	29 f4       	brne	.+10     	; 0x874 <__vector_22+0x70>
     86a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     874:	8f b3       	in	r24, 0x1f	; 31
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	8f 70       	andi	r24, 0x0F	; 15
     87c:	99 27       	eor	r25, r25
     87e:	8f bb       	out	0x1f, r24	; 31
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	0f 90       	pop	r0
     890:	1f 90       	pop	r1
     892:	18 95       	reti

00000894 <__vector_6>:
     894:	1f 92       	push	r1
     896:	0f 92       	push	r0
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	0f 92       	push	r0
     89c:	11 24       	eor	r1, r1
     89e:	5f 93       	push	r21
     8a0:	6f 93       	push	r22
     8a2:	7f 93       	push	r23
     8a4:	8f 93       	push	r24
     8a6:	9f 93       	push	r25
     8a8:	af 93       	push	r26
     8aa:	bf 93       	push	r27
     8ac:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     8b0:	81 ff       	sbrs	r24, 1
     8b2:	26 c0       	rjmp	.+76     	; 0x900 <__vector_6+0x6c>
     8b4:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
     8b8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ba:	29 f0       	breq	.+10     	; 0x8c6 <__vector_6+0x32>
     8bc:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 93 9a 38 	sts	0x389A, r24	; 0x80389a <buttonMark>
     8c6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     8ca:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     8ce:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     8d2:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     8d6:	82 96       	adiw	r24, 0x22	; 34
     8d8:	0e 94 bd 14 	call	0x297a	; 0x297a <__udivmodhi4>
     8dc:	80 93 38 3b 	sts	0x3B38, r24	; 0x803b38 <tmp16bit>
     8e0:	90 93 39 3b 	sts	0x3B39, r25	; 0x803b39 <tmp16bit+0x1>
     8e4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     8e8:	83 fd       	sbrc	r24, 3
     8ea:	fc cf       	rjmp	.-8      	; 0x8e4 <__vector_6+0x50>
     8ec:	80 91 38 3b 	lds	r24, 0x3B38	; 0x803b38 <tmp16bit>
     8f0:	90 91 39 3b 	lds	r25, 0x3B39	; 0x803b39 <tmp16bit+0x1>
     8f4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     8f8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	0a c0       	rjmp	.+20     	; 0x914 <__vector_6+0x80>
     900:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <minuteMark>
     904:	8f 3f       	cpi	r24, 0xFF	; 255
     906:	29 f0       	breq	.+10     	; 0x912 <__vector_6+0x7e>
     908:	80 91 9b 38 	lds	r24, 0x389B	; 0x80389b <minuteMark>
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <minuteMark>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	0f 90       	pop	r0
     92c:	1f 90       	pop	r1
     92e:	18 95       	reti

00000930 <__vector_7>:
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	8f 93       	push	r24
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     942:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     946:	8f 91       	pop	r24
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <EERead>:
     952:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     956:	91 fd       	sbrc	r25, 1
     958:	fc cf       	rjmp	.-8      	; 0x952 <EERead>
     95a:	fb 01       	movw	r30, r22
     95c:	48 0f       	add	r20, r24
     95e:	84 17       	cp	r24, r20
     960:	39 f0       	breq	.+14     	; 0x970 <EERead+0x1e>
     962:	a8 2f       	mov	r26, r24
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	bc 5e       	subi	r27, 0xEC	; 236
     968:	9c 91       	ld	r25, X
     96a:	91 93       	st	Z+, r25
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	f7 cf       	rjmp	.-18     	; 0x95e <EERead+0xc>
     970:	08 95       	ret

00000972 <EEWrite>:
     972:	9d e9       	ldi	r25, 0x9D	; 157
     974:	24 e0       	ldi	r18, 0x04	; 4
     976:	33 e0       	ldi	r19, 0x03	; 3
     978:	44 23       	and	r20, r20
     97a:	09 f1       	breq	.+66     	; 0x9be <EEWrite+0x4c>
     97c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     980:	51 fd       	sbrc	r21, 1
     982:	fc cf       	rjmp	.-8      	; 0x97c <EEWrite+0xa>
     984:	94 bf       	out	0x34, r25	; 52
     986:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     98a:	e8 2f       	mov	r30, r24
     98c:	58 2f       	mov	r21, r24
     98e:	5f 71       	andi	r21, 0x1F	; 31
     990:	8f 5f       	subi	r24, 0xFF	; 255
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	db 01       	movw	r26, r22
     998:	11 97       	sbiw	r26, 0x01	; 1
     99a:	ac 91       	ld	r26, X
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	fc 5e       	subi	r31, 0xEC	; 236
     9a0:	a0 83       	st	Z, r26
     9a2:	41 50       	subi	r20, 0x01	; 1
     9a4:	19 f0       	breq	.+6      	; 0x9ac <EEWrite+0x3a>
     9a6:	e8 2f       	mov	r30, r24
     9a8:	5f 31       	cpi	r21, 0x1F	; 31
     9aa:	81 f7       	brne	.-32     	; 0x98c <EEWrite+0x1a>
     9ac:	94 bf       	out	0x34, r25	; 52
     9ae:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     9b2:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     9b6:	52 ff       	sbrs	r21, 2
     9b8:	df cf       	rjmp	.-66     	; 0x978 <EEWrite+0x6>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	08 95       	ret
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	08 95       	ret

000009c2 <SerSend>:
     9c2:	20 91 04 38 	lds	r18, 0x3804	; 0x803804 <serTxDone>
     9c6:	22 23       	and	r18, r18
     9c8:	59 f0       	breq	.+22     	; 0x9e0 <SerSend+0x1e>
     9ca:	80 93 e7 3a 	sts	0x3AE7, r24	; 0x803ae7 <serTxAddr>
     9ce:	90 93 e8 3a 	sts	0x3AE8, r25	; 0x803ae8 <serTxAddr+0x1>
     9d2:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <serTxDone>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	08 95       	ret
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	08 95       	ret

000009e4 <SerSpeed>:
     9e4:	28 2f       	mov	r18, r24
     9e6:	81 11       	cpse	r24, r1
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <SerSpeed+0x8>
     9ea:	21 e0       	ldi	r18, 0x01	; 1
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	82 1b       	sub	r24, r18
     9f2:	91 09       	sbc	r25, r1
     9f4:	98 2f       	mov	r25, r24
     9f6:	88 27       	eor	r24, r24
     9f8:	81 50       	subi	r24, 0x01	; 1
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a00:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     a04:	08 95       	ret

00000a06 <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     a06:	20 91 e5 3a 	lds	r18, 0x3AE5	; 0x803ae5 <adcBtns>
     a0a:	30 91 e6 3a 	lds	r19, 0x3AE6	; 0x803ae6 <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a0e:	94 e0       	ldi	r25, 0x04	; 4
     a10:	36 95       	lsr	r19
     a12:	27 95       	ror	r18
     a14:	9a 95       	dec	r25
     a16:	e1 f7       	brne	.-8      	; 0xa10 <CheckButtons+0xa>
     a18:	33 27       	eor	r19, r19
     a1a:	2c 35       	cpi	r18, 0x5C	; 92
     a1c:	31 05       	cpc	r19, r1
     a1e:	d0 f4       	brcc	.+52     	; 0xa54 <CheckButtons+0x4e>
     a20:	23 35       	cpi	r18, 0x53	; 83
     a22:	31 05       	cpc	r19, r1
     a24:	a8 f5       	brcc	.+106    	; 0xa90 <CheckButtons+0x8a>
     a26:	22 33       	cpi	r18, 0x32	; 50
     a28:	31 05       	cpc	r19, r1
     a2a:	50 f4       	brcc	.+20     	; 0xa40 <CheckButtons+0x3a>
     a2c:	2d 32       	cpi	r18, 0x2D	; 45
     a2e:	31 05       	cpc	r19, r1
     a30:	58 f5       	brcc	.+86     	; 0xa88 <CheckButtons+0x82>
     a32:	23 52       	subi	r18, 0x23	; 35
     a34:	31 09       	sbc	r19, r1
     a36:	25 30       	cpi	r18, 0x05	; 5
     a38:	31 05       	cpc	r19, r1
     a3a:	80 f5       	brcc	.+96     	; 0xa9c <CheckButtons+0x96>
        case 28 ... 32:         //30: All buttons pressed
        bNibble = 0b1111;
        break;

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     a3c:	9c e0       	ldi	r25, 0x0C	; 12
     a3e:	2f c0       	rjmp	.+94     	; 0xa9e <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a40:	27 33       	cpi	r18, 0x37	; 55
     a42:	31 05       	cpc	r19, r1
     a44:	18 f1       	brcs	.+70     	; 0xa8c <CheckButtons+0x86>
     a46:	2e 53       	subi	r18, 0x3E	; 62
     a48:	31 09       	sbc	r19, r1
     a4a:	27 30       	cpi	r18, 0x07	; 7
     a4c:	31 05       	cpc	r19, r1
     a4e:	30 f5       	brcc	.+76     	; 0xa9c <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     a50:	96 e0       	ldi	r25, 0x06	; 6
        break;
     a52:	25 c0       	rjmp	.+74     	; 0xa9e <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a54:	2a 38       	cpi	r18, 0x8A	; 138
     a56:	31 05       	cpc	r19, r1
     a58:	50 f4       	brcc	.+20     	; 0xa6e <CheckButtons+0x68>
     a5a:	29 37       	cpi	r18, 0x79	; 121
     a5c:	31 05       	cpc	r19, r1
     a5e:	d0 f4       	brcc	.+52     	; 0xa94 <CheckButtons+0x8e>
     a60:	23 56       	subi	r18, 0x63	; 99
     a62:	31 09       	sbc	r19, r1
     a64:	2b 30       	cpi	r18, 0x0B	; 11
     a66:	31 05       	cpc	r19, r1
     a68:	c8 f4       	brcc	.+50     	; 0xa9c <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     a6a:	93 e0       	ldi	r25, 0x03	; 3
        break;
     a6c:	18 c0       	rjmp	.+48     	; 0xa9e <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     a6e:	22 3a       	cpi	r18, 0xA2	; 162
     a70:	31 05       	cpc	r19, r1
     a72:	a0 f0       	brcs	.+40     	; 0xa9c <CheckButtons+0x96>
     a74:	2b 3b       	cpi	r18, 0xBB	; 187
     a76:	31 05       	cpc	r19, r1
     a78:	78 f0       	brcs	.+30     	; 0xa98 <CheckButtons+0x92>
     a7a:	20 5f       	subi	r18, 0xF0	; 240
     a7c:	31 09       	sbc	r19, r1
     a7e:	20 31       	cpi	r18, 0x10	; 16
     a80:	31 05       	cpc	r19, r1
     a82:	60 f4       	brcc	.+24     	; 0xa9c <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     a84:	90 e0       	ldi	r25, 0x00	; 0
        break;
     a86:	0b c0       	rjmp	.+22     	; 0xa9e <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     a88:	99 e0       	ldi	r25, 0x09	; 9
        break;
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     a8c:	98 e0       	ldi	r25, 0x08	; 8
        break;
     a8e:	07 c0       	rjmp	.+14     	; 0xa9e <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     a90:	94 e0       	ldi	r25, 0x04	; 4
        break;
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     a94:	92 e0       	ldi	r25, 0x02	; 2
        break;
     a96:	03 c0       	rjmp	.+6      	; 0xa9e <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     a98:	91 e0       	ldi	r25, 0x01	; 1
        break;
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     a9c:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     a9e:	28 2f       	mov	r18, r24
     aa0:	2f 70       	andi	r18, 0x0F	; 15
     aa2:	92 13       	cpse	r25, r18
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     aa6:	98 2f       	mov	r25, r24
     aa8:	90 7f       	andi	r25, 0xF0	; 240
     aaa:	90 3f       	cpi	r25, 0xF0	; 240
     aac:	39 f0       	breq	.+14     	; 0xabc <CheckButtons+0xb6>
     aae:	80 5f       	subi	r24, 0xF0	; 240
     ab0:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     ab2:	99 23       	and	r25, r25
     ab4:	11 f0       	breq	.+4      	; 0xaba <CheckButtons+0xb4>
     ab6:	89 2f       	mov	r24, r25
     ab8:	08 95       	ret
     aba:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     abc:	08 95       	ret

00000abe <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     abe:	80 91 85 38 	lds	r24, 0x3885	; 0x803885 <state.3863>
     ac2:	90 91 86 38 	lds	r25, 0x3886	; 0x803886 <state.3863+0x1>
     ac6:	9c 01       	movw	r18, r24
     ac8:	32 2f       	mov	r19, r18
     aca:	22 27       	eor	r18, r18
     acc:	32 95       	swap	r19
     ace:	33 0f       	add	r19, r19
     ad0:	30 7e       	andi	r19, 0xE0	; 224
     ad2:	82 27       	eor	r24, r18
     ad4:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     ad6:	9c 01       	movw	r18, r24
     ad8:	23 2f       	mov	r18, r19
     ada:	33 27       	eor	r19, r19
     adc:	26 95       	lsr	r18
     ade:	82 27       	eor	r24, r18
     ae0:	93 27       	eor	r25, r19
    state ^= (state << 7);
     ae2:	9c 01       	movw	r18, r24
     ae4:	36 95       	lsr	r19
     ae6:	32 2f       	mov	r19, r18
     ae8:	22 27       	eor	r18, r18
     aea:	37 95       	ror	r19
     aec:	27 95       	ror	r18
     aee:	82 27       	eor	r24, r18
     af0:	93 27       	eor	r25, r19
     af2:	80 93 85 38 	sts	0x3885, r24	; 0x803885 <state.3863>
     af6:	90 93 86 38 	sts	0x3886, r25	; 0x803886 <state.3863+0x1>
    return (state & 0xff);
}
     afa:	08 95       	ret

00000afc <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	7b 01       	movw	r14, r22
     b0c:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     b0e:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     b12:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     b16:	e8 2f       	mov	r30, r24
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	e7 70       	andi	r30, 0x07	; 7
     b1e:	ff 27       	eor	r31, r31
     b20:	e9 57       	subi	r30, 0x79	; 121
     b22:	f7 4c       	sbci	r31, 0xC7	; 199
     b24:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     b26:	cb df       	rcall	.-106    	; 0xabe <lfsr>
     b28:	8d 21       	and	r24, r13
     b2a:	c8 0f       	add	r28, r24
     b2c:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     b2e:	c7 df       	rcall	.-114    	; 0xabe <lfsr>
     b30:	8d 21       	and	r24, r13
     b32:	c8 1b       	sub	r28, r24
     b34:	d1 09       	sbc	r29, r1
     b36:	0c 17       	cp	r16, r28
     b38:	1d 07       	cpc	r17, r29
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <floatSpeed+0x42>
     b3c:	e8 01       	movw	r28, r16
     b3e:	c7 01       	movw	r24, r14
     b40:	ec 16       	cp	r14, r28
     b42:	fd 06       	cpc	r15, r29
     b44:	08 f4       	brcc	.+2      	; 0xb48 <floatSpeed+0x4c>
     b46:	ce 01       	movw	r24, r28
     b48:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    //0x038B is normal rate, for wind we need to be a bit slower
    if (val < min) val = min;  
    TCB1_CCMP = val;
     b4c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     b50:	df 91       	pop	r29
}
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	08 95       	ret

00000b60 <floatAround>:
     b60:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	c8 2f       	mov	r28, r24
     b6a:	04 2f       	mov	r16, r20
     b6c:	12 2f       	mov	r17, r18
    bits = mask[(bits-1)&0x07];
     b6e:	e6 2f       	mov	r30, r22
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	31 97       	sbiw	r30, 0x01	; 1
     b74:	e7 70       	andi	r30, 0x07	; 7
     b76:	ff 27       	eor	r31, r31
     b78:	e9 57       	subi	r30, 0x79	; 121
     b7a:	f7 4c       	sbci	r31, 0xC7	; 199
     b7c:	d0 81       	ld	r29, Z
    sample += lfsr()&bits;
     b7e:	9f df       	rcall	.-194    	; 0xabe <lfsr>
     b80:	8d 23       	and	r24, r29
     b82:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
     b84:	9c df       	rcall	.-200    	; 0xabe <lfsr>
     b86:	8d 23       	and	r24, r29
     b88:	c8 1b       	sub	r28, r24
     b8a:	8c 2f       	mov	r24, r28
     b8c:	11 23       	and	r17, r17
    if (max){
     b8e:	41 f0       	breq	.+16     	; 0xba0 <floatAround+0x40>
     b90:	9c 2f       	mov	r25, r28
     b92:	1c 17       	cp	r17, r28
     b94:	08 f4       	brcc	.+2      	; 0xb98 <floatAround+0x38>
     b96:	91 2f       	mov	r25, r17
     b98:	80 2f       	mov	r24, r16
     b9a:	09 17       	cp	r16, r25
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <floatAround+0x40>
     b9e:	89 2f       	mov	r24, r25
     ba0:	df 91       	pop	r29
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    return sample;
}
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <SaveGameState>:
     baa:	cf 92       	push	r12

//Save changed data to EEPROM
uint8_t SaveGameState(){
     bac:	df 92       	push	r13
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	64 97       	sbiw	r28, 0x14	; 20
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
     bc2:	44 e1       	ldi	r20, 0x14	; 20
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	c2 de       	rcall	.-636    	; 0x952 <EERead>
     bce:	8f e8       	ldi	r24, 0x8F	; 143
     bd0:	c8 2e       	mov	r12, r24
     bd2:	8a e3       	ldi	r24, 0x3A	; 58
     bd4:	d8 2e       	mov	r13, r24
     bd6:	8e 01       	movw	r16, r28
     bd8:	0f 5f       	subi	r16, 0xFF	; 255
     bda:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     bdc:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
     bde:	f8 01       	movw	r30, r16
     be0:	81 91       	ld	r24, Z+
     be2:	8f 01       	movw	r16, r30
     be4:	f6 01       	movw	r30, r12
     be6:	90 81       	ld	r25, Z
     be8:	98 13       	cpse	r25, r24
     bea:	08 c0       	rjmp	.+16     	; 0xbfc <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
     bec:	f3 94       	inc	r15
     bee:	ff ef       	ldi	r31, 0xFF	; 255
     bf0:	cf 1a       	sub	r12, r31
     bf2:	df 0a       	sbc	r13, r31
     bf4:	80 e1       	ldi	r24, 0x10	; 16
     bf6:	f8 12       	cpse	r15, r24
     bf8:	f2 cf       	rjmp	.-28     	; 0xbde <SaveGameState+0x34>
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     bfc:	41 e0       	ldi	r20, 0x01	; 1
     bfe:	b6 01       	movw	r22, r12
     c00:	8f 2d       	mov	r24, r15
     c02:	b7 de       	rcall	.-658    	; 0x972 <EEWrite>
     c04:	88 23       	and	r24, r24
     c06:	91 f3       	breq	.-28     	; 0xbec <SaveGameState+0x42>
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	36 c0       	rjmp	.+108    	; 0xc78 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
     c0c:	20 91 96 38 	lds	r18, 0x3896	; 0x803896 <inventory>
     c10:	30 91 97 38 	lds	r19, 0x3897	; 0x803897 <inventory+0x1>
     c14:	30 93 9f 3a 	sts	0x3A9F, r19	; 0x803a9f <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
     c18:	20 93 a0 3a 	sts	0x3AA0, r18	; 0x803aa0 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
     c1c:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
     c20:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
     c24:	90 93 a1 3a 	sts	0x3AA1, r25	; 0x803aa1 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
     c28:	80 93 a2 3a 	sts	0x3AA2, r24	; 0x803aa2 <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
     c2c:	89 89       	ldd	r24, Y+17	; 0x11
     c2e:	9a 89       	ldd	r25, Y+18	; 0x12
     c30:	98 27       	eor	r25, r24
     c32:	89 27       	eor	r24, r25
     c34:	98 27       	eor	r25, r24
     c36:	28 17       	cp	r18, r24
     c38:	39 07       	cpc	r19, r25
     c3a:	69 f4       	brne	.+26     	; 0xc56 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
     c3c:	8b 89       	ldd	r24, Y+19	; 0x13
     c3e:	9c 89       	ldd	r25, Y+20	; 0x14
     c40:	98 27       	eor	r25, r24
     c42:	89 27       	eor	r24, r25
     c44:	98 27       	eor	r25, r24
     c46:	20 91 98 38 	lds	r18, 0x3898	; 0x803898 <inventory+0x2>
     c4a:	30 91 99 38 	lds	r19, 0x3899	; 0x803899 <inventory+0x3>
     c4e:	28 17       	cp	r18, r24
     c50:	39 07       	cpc	r19, r25
     c52:	49 f4       	brne	.+18     	; 0xc66 <SaveGameState+0xbc>
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
     c56:	42 e0       	ldi	r20, 0x02	; 2
     c58:	6f e9       	ldi	r22, 0x9F	; 159
     c5a:	7a e3       	ldi	r23, 0x3A	; 58
     c5c:	80 e1       	ldi	r24, 0x10	; 16
     c5e:	89 de       	rcall	.-750    	; 0x972 <EEWrite>
     c60:	88 23       	and	r24, r24
     c62:	61 f3       	breq	.-40     	; 0xc3c <SaveGameState+0x92>
     c64:	d1 cf       	rjmp	.-94     	; 0xc08 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
     c66:	42 e0       	ldi	r20, 0x02	; 2
     c68:	61 ea       	ldi	r22, 0xA1	; 161
     c6a:	7a e3       	ldi	r23, 0x3A	; 58
     c6c:	82 e1       	ldi	r24, 0x12	; 18
     c6e:	81 de       	rcall	.-766    	; 0x972 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	81 11       	cpse	r24, r1
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <SaveGameState+0xce>
     c76:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
     c78:	89 2f       	mov	r24, r25
     c7a:	64 96       	adiw	r28, 0x14	; 20
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	df 90       	pop	r13
     c8c:	cf 90       	pop	r12
     c8e:	08 95       	ret

00000c90 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
     c90:	e8 2f       	mov	r30, r24
     c92:	ef 77       	andi	r30, 0x7F	; 127
     c94:	e6 95       	lsr	r30
     c96:	e6 95       	lsr	r30
     c98:	e6 95       	lsr	r30
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	e1 57       	subi	r30, 0x71	; 113
     c9e:	f5 4c       	sbci	r31, 0xC5	; 197
     ca0:	20 81       	ld	r18, Z
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	87 70       	andi	r24, 0x07	; 7
     ca6:	a9 01       	movw	r20, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <ReadStatusBit+0x1e>
     caa:	55 95       	asr	r21
     cac:	47 95       	ror	r20
     cae:	8a 95       	dec	r24
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <ReadStatusBit+0x1a>
     cb2:	ca 01       	movw	r24, r20
}
     cb4:	81 70       	andi	r24, 0x01	; 1
     cb6:	08 95       	ret

00000cb8 <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
     cb8:	e8 2f       	mov	r30, r24
     cba:	ef 77       	andi	r30, 0x7F	; 127
     cbc:	e6 95       	lsr	r30
     cbe:	e6 95       	lsr	r30
     cc0:	e6 95       	lsr	r30
     cc2:	28 2f       	mov	r18, r24
     cc4:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	e1 57       	subi	r30, 0x71	; 113
     cca:	f5 4c       	sbci	r31, 0xC5	; 197
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <WriteStatusBit+0x1c>
     cd2:	88 0f       	add	r24, r24
     cd4:	2a 95       	dec	r18
     cd6:	ea f7       	brpl	.-6      	; 0xcd2 <WriteStatusBit+0x1a>
     cd8:	66 23       	and	r22, r22
     cda:	19 f0       	breq	.+6      	; 0xce2 <WriteStatusBit+0x2a>
     cdc:	90 81       	ld	r25, Z
     cde:	89 2b       	or	r24, r25
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
     ce2:	80 95       	com	r24
     ce4:	90 81       	ld	r25, Z
     ce6:	89 23       	and	r24, r25
     ce8:	80 83       	st	Z, r24
     cea:	08 95       	ret

00000cec <getID>:

uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
     cec:	e3 e0       	ldi	r30, 0x03	; 3
     cee:	f1 e1       	ldi	r31, 0x11	; 17
    else gameState[number>>3] &= ~(1<<(number&7));
}

uint8_t getID(){
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
     cf2:	91 91       	ld	r25, Z+
     cf4:	89 0f       	add	r24, r25
    //Give out a number 0..3, calculated using serial number fields
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
     cf6:	ed 30       	cpi	r30, 0x0D	; 13
     cf8:	91 e1       	ldi	r25, 0x11	; 17
     cfa:	f9 07       	cpc	r31, r25
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
     cfe:	83 70       	andi	r24, 0x03	; 3
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <whoami>
    return whoami;
}
     d06:	08 95       	ret

00000d08 <Reset>:

void Reset(){
     d08:	ef e8       	ldi	r30, 0x8F	; 143
     d0a:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
     d0c:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
     d0e:	8a e3       	ldi	r24, 0x3A	; 58
     d10:	e3 3a       	cpi	r30, 0xA3	; 163
     d12:	f8 07       	cpc	r31, r24
     d14:	d9 f7       	brne	.-10     	; 0xd0c <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
     d16:	ea df       	rcall	.-44     	; 0xcec <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
     d18:	81 11       	cpse	r24, r1
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d1c:	80 91 9c 3a 	lds	r24, 0x3A9C	; 0x803a9c <gameState+0xd>
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	31 f4       	brne	.+12     	; 0xd34 <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d28:	80 91 9c 3a 	lds	r24, 0x3A9C	; 0x803a9c <gameState+0xd>
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	80 93 9c 3a 	sts	0x3A9C, r24	; 0x803a9c <gameState+0xd>
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	21 f4       	brne	.+8      	; 0xd40 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d38:	80 91 9d 3a 	lds	r24, 0x3A9D	; 0x803a9d <gameState+0xe>
     d3c:	81 60       	ori	r24, 0x01	; 1
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	29 f4       	brne	.+10     	; 0xd4e <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
     d44:	80 91 9d 3a 	lds	r24, 0x3A9D	; 0x803a9d <gameState+0xe>
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	80 93 9d 3a 	sts	0x3A9D, r24	; 0x803a9d <gameState+0xe>
     d4e:	80 91 8f 3a 	lds	r24, 0x3A8F	; 0x803a8f <gameState>
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <gameState>
     d58:	08 95       	ret

00000d5a <GenerateAudio>:
    WriteStatusBit(0, 1);
}

//void setupSound(uint8_t number){

void GenerateAudio(){
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
    static uint8_t auBuffer[128] = {0x80, 0};
    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
     d62:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     d66:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
     d6a:	88 27       	eor	r24, r24
     d6c:	89 2b       	or	r24, r25
     d6e:	09 f0       	breq	.+2      	; 0xd72 <GenerateAudio+0x18>
     d70:	65 c0       	rjmp	.+202    	; 0xe3c <GenerateAudio+0xe2>

        //Silence
        if ((effect&0xE0)==0){
     d72:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     d76:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
     d7a:	80 7e       	andi	r24, 0xE0	; 224
     d7c:	99 27       	eor	r25, r25
     d7e:	89 2b       	or	r24, r25
     d80:	31 f4       	brne	.+12     	; 0xd8e <GenerateAudio+0x34>
            auRepAddr = &zero;
     d82:	81 e9       	ldi	r24, 0x91	; 145
     d84:	98 e3       	ldi	r25, 0x38	; 56
     d86:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     d8a:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
     d8e:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     d92:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        }

        //Good (bell)
        if ((effect&0xE0)==64){
     d96:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     d9a:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
     d9e:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     da2:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
     da6:	80 7e       	andi	r24, 0xE0	; 224
     da8:	99 27       	eor	r25, r25
     daa:	80 36       	cpi	r24, 0x60	; 96
     dac:	91 05       	cpc	r25, r1
     dae:	d1 f5       	brne	.+116    	; 0xe24 <GenerateAudio+0xca>
            auBuffer[6]= 0;        
     db0:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <auBuffer.3907+0x6>
            auRepAddr = &auBuffer[0];
     db4:	85 e0       	ldi	r24, 0x05	; 5
     db6:	98 e3       	ldi	r25, 0x38	; 56
     db8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
     dbc:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
     dc0:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
     dc2:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
     dc4:	d3 e0       	ldi	r29, 0x03	; 3
     dc6:	8c 2f       	mov	r24, r28
     dc8:	6d 2f       	mov	r22, r29
     dca:	0e 94 b1 14 	call	0x2962	; 0x2962 <__udivmodqi4>
     dce:	99 23       	and	r25, r25
     dd0:	39 f0       	breq	.+14     	; 0xde0 <GenerateAudio+0x86>
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	65 e0       	ldi	r22, 0x05	; 5
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	c2 de       	rcall	.-636    	; 0xb60 <floatAround>
     ddc:	f8 01       	movw	r30, r16
     dde:	81 83       	std	Z+1, r24	; 0x01
        if ((effect&0xE0)==96){
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
     de0:	cf 5f       	subi	r28, 0xFF	; 255
     de2:	0f 5f       	subi	r16, 0xFF	; 255
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	c6 30       	cpi	r28, 0x06	; 6
     de8:	71 f7       	brne	.-36     	; 0xdc6 <GenerateAudio+0x6c>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
     dea:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
     dee:	88 23       	and	r24, r24
     df0:	c9 f0       	breq	.+50     	; 0xe24 <GenerateAudio+0xca>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	54 e0       	ldi	r21, 0x04	; 4
     df6:	60 e8       	ldi	r22, 0x80	; 128
     df8:	72 e0       	ldi	r23, 0x02	; 2
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	7f de       	rcall	.-770    	; 0xafc <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
     dfe:	80 91 e4 3a 	lds	r24, 0x3AE4	; 0x803ae4 <auVolume>
     e02:	20 ea       	ldi	r18, 0xA0	; 160
     e04:	40 e1       	ldi	r20, 0x10	; 16
     e06:	62 e0       	ldi	r22, 0x02	; 2
     e08:	ab de       	rcall	.-682    	; 0xb60 <floatAround>
     e0a:	80 93 e4 3a 	sts	0x3AE4, r24	; 0x803ae4 <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
     e0e:	20 e9       	ldi	r18, 0x90	; 144
     e10:	40 e7       	ldi	r20, 0x70	; 112
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auBuffer.3907>
     e18:	a3 de       	rcall	.-698    	; 0xb60 <floatAround>
     e1a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auBuffer.3907>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
     e1e:	80 95       	com	r24
     e20:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <auBuffer.3907+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
     e24:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e28:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        }

        //Knocking
        if ((effect&0xE0)==160){
     e2c:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e30:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        }

        //Scream
        if ((effect&0xE0)==192){
     e34:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
     e38:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>

        //Rain storm with whistling wind
        else {
        }
    }
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret

00000e4a <DecryptData>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
     e4a:	f9 01       	movw	r30, r18
     e4c:	9c 01       	movw	r18, r24
     e4e:	2e 1b       	sub	r18, r30
     e50:	3f 0b       	sbc	r19, r31
     e52:	88 e0       	ldi	r24, 0x08	; 8
     e54:	48 9f       	mul	r20, r24
     e56:	a0 01       	movw	r20, r0
     e58:	11 24       	eor	r1, r1
     e5a:	48 5e       	subi	r20, 0xE8	; 232
     e5c:	55 45       	sbci	r21, 0x55	; 85
     e5e:	66 23       	and	r22, r22
     e60:	69 f0       	breq	.+26     	; 0xe7c <DecryptData+0x32>
     e62:	df 01       	movw	r26, r30
     e64:	a2 0f       	add	r26, r18
     e66:	b3 1f       	adc	r27, r19
     e68:	a7 70       	andi	r26, 0x07	; 7
     e6a:	bb 27       	eor	r27, r27
     e6c:	a4 0f       	add	r26, r20
     e6e:	b5 1f       	adc	r27, r21
     e70:	80 81       	ld	r24, Z
     e72:	9c 91       	ld	r25, X
     e74:	98 27       	eor	r25, r24
     e76:	91 93       	st	Z+, r25
     e78:	61 50       	subi	r22, 0x01	; 1
     e7a:	f1 cf       	rjmp	.-30     	; 0xe5e <DecryptData+0x14>
     e7c:	08 95       	ret

00000e7e <UnflipData>:
     e7e:	26 2f       	mov	r18, r22
     e80:	fb 01       	movw	r30, r22
     e82:	35 e5       	ldi	r19, 0x55	; 85
     e84:	9e 2f       	mov	r25, r30
     e86:	92 1b       	sub	r25, r18
     e88:	98 17       	cp	r25, r24
     e8a:	28 f4       	brcc	.+10     	; 0xe96 <UnflipData+0x18>
     e8c:	90 81       	ld	r25, Z
     e8e:	92 95       	swap	r25
     e90:	93 27       	eor	r25, r19
     e92:	91 93       	st	Z+, r25
     e94:	f7 cf       	rjmp	.-18     	; 0xe84 <UnflipData+0x6>
     e96:	08 95       	ret

00000e98 <ExtEERead>:
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	00 d0       	rcall	.+0      	; 0xeae <ExtEERead+0x16>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	d6 2e       	mov	r13, r22
     eb4:	c4 2e       	mov	r12, r20
     eb6:	59 01       	movw	r10, r18
     eb8:	7c 01       	movw	r14, r24
     eba:	e8 94       	clt
     ebc:	f7 f8       	bld	r15, 7
     ebe:	f9 82       	std	Y+1, r15	; 0x01
     ec0:	ea 82       	std	Y+2, r14	; 0x02
     ec2:	06 2f       	mov	r16, r22
     ec4:	42 e0       	ldi	r20, 0x02	; 2
     ec6:	be 01       	movw	r22, r28
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	80 e5       	ldi	r24, 0x50	; 80
     ece:	f2 d9       	rcall	.-3100   	; 0x2b4 <I2C_read_bytes>
     ed0:	18 2f       	mov	r17, r24
     ed2:	81 11       	cpse	r24, r1
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <ExtEERead+0x48>
     ed6:	95 01       	movw	r18, r10
     ed8:	4c 2d       	mov	r20, r12
     eda:	6d 2d       	mov	r22, r13
     edc:	c7 01       	movw	r24, r14
     ede:	b5 df       	rcall	.-150    	; 0xe4a <DecryptData>
     ee0:	81 2f       	mov	r24, r17
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	08 95       	ret

00000efc <ClearTxAfter>:
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	88 30       	cpi	r24, 0x08	; 8
     f00:	30 f4       	brcc	.+12     	; 0xf0e <ClearTxAfter+0x12>
     f02:	e8 2f       	mov	r30, r24
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	eb 58       	subi	r30, 0x8B	; 139
     f08:	f5 4c       	sbci	r31, 0xC5	; 197
     f0a:	10 82       	st	Z, r1
     f0c:	f7 cf       	rjmp	.-18     	; 0xefc <ClearTxAfter>
     f0e:	08 95       	ret

00000f10 <StartsWith>:
     f10:	ac 01       	movw	r20, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	e9 2f       	mov	r30, r25
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	da 01       	movw	r26, r20
     f1a:	ae 0f       	add	r26, r30
     f1c:	bf 1f       	adc	r27, r31
     f1e:	3c 91       	ld	r19, X
     f20:	e6 0f       	add	r30, r22
     f22:	f7 1f       	adc	r31, r23
     f24:	31 11       	cpse	r19, r1
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <StartsWith+0x22>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 81       	ld	r25, Z
     f2c:	99 23       	and	r25, r25
     f2e:	49 f0       	breq	.+18     	; 0xf42 <StartsWith+0x32>
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <StartsWith+0x30>
     f32:	20 81       	ld	r18, Z
     f34:	22 23       	and	r18, r18
     f36:	c1 f3       	breq	.-16     	; 0xf28 <StartsWith+0x18>
     f38:	32 13       	cpse	r19, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <StartsWith+0x30>
     f3c:	9f 5f       	subi	r25, 0xFF	; 255
     f3e:	ea cf       	rjmp	.-44     	; 0xf14 <StartsWith+0x4>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 95       	ret

00000f44 <PrepareSending>:
     f44:	61 15       	cp	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	51 f1       	breq	.+84     	; 0xf9e <PrepareSending+0x5a>
     f4a:	ed e7       	ldi	r30, 0x7D	; 125
     f4c:	fa e3       	ldi	r31, 0x3A	; 58
     f4e:	a5 e7       	ldi	r26, 0x75	; 117
     f50:	ba e3       	ldi	r27, 0x3A	; 58
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	3f ef       	ldi	r19, 0xFF	; 255
     f56:	6f 3f       	cpi	r22, 0xFF	; 255
     f58:	71 05       	cpc	r23, r1
     f5a:	69 f0       	breq	.+26     	; 0xf76 <PrepareSending+0x32>
     f5c:	60 f0       	brcs	.+24     	; 0xf76 <PrepareSending+0x32>
     f5e:	81 93       	st	Z+, r24
     f60:	91 93       	st	Z+, r25
     f62:	3d 93       	st	X+, r19
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	71 09       	sbc	r23, r1
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	27 30       	cpi	r18, 0x07	; 7
     f70:	91 f7       	brne	.-28     	; 0xf56 <PrepareSending+0x12>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret
     f76:	e2 2f       	mov	r30, r18
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	df 01       	movw	r26, r30
     f7c:	aa 0f       	add	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	a3 58       	subi	r26, 0x83	; 131
     f82:	b5 4c       	sbci	r27, 0xC5	; 197
     f84:	8d 93       	st	X+, r24
     f86:	9c 93       	st	X, r25
     f88:	eb 58       	subi	r30, 0x8B	; 139
     f8a:	f5 4c       	sbci	r31, 0xC5	; 197
     f8c:	cb 01       	movw	r24, r22
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	0e 94 bd 14 	call	0x297a	; 0x297a <__udivmodhi4>
     f96:	80 83       	st	Z, r24
     f98:	40 93 73 3a 	sts	0x3A73, r20	; 0x803a73 <txTypeNow>
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <PrepareSending+0x64>
     f9e:	10 92 7d 3a 	sts	0x3A7D, r1	; 0x803a7d <txAddrList>
     fa2:	10 92 7e 3a 	sts	0x3A7E, r1	; 0x803a7e <txAddrList+0x1>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	82 2f       	mov	r24, r18
     faa:	a8 df       	rcall	.-176    	; 0xefc <ClearTxAfter>
     fac:	10 92 74 3a 	sts	0x3A74, r1	; 0x803a74 <txAddrNow>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	08 95       	ret

00000fb4 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	f9 01       	movw	r30, r18
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e8 5b       	subi	r30, 0xB8	; 184
     fc4:	f6 4c       	sbci	r31, 0xC6	; 198
     fc6:	ab e5       	ldi	r26, 0x5B	; 91
     fc8:	ba e7       	ldi	r27, 0x7A	; 122
     fca:	a0 83       	st	Z, r26
     fcc:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
     fce:	f9 01       	movw	r30, r18
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	e8 57       	subi	r30, 0x78	; 120
     fd6:	f6 4c       	sbci	r31, 0xC6	; 198
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	60 83       	st	Z, r22
     fde:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	f9 01       	movw	r30, r18
     fe6:	e8 53       	subi	r30, 0x38	; 56
     fe8:	f6 4c       	sbci	r31, 0xC6	; 198
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	40 83       	st	Z, r20
     ff0:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	28 0f       	add	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	f9 01       	movw	r30, r18
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	e8 5b       	subi	r30, 0xB8	; 184
    1000:	f6 4c       	sbci	r31, 0xC6	; 198
    1002:	c4 e6       	ldi	r28, 0x64	; 100
    1004:	da e7       	ldi	r29, 0x7A	; 122
    1006:	c0 83       	st	Z, r28
    1008:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    100a:	f9 01       	movw	r30, r18
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	e8 57       	subi	r30, 0x78	; 120
    1012:	f6 4c       	sbci	r31, 0xC6	; 198
    1014:	ca e0       	ldi	r28, 0x0A	; 10
    1016:	d0 e0       	ldi	r29, 0x00	; 0
    1018:	c0 83       	st	Z, r28
    101a:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	f9 01       	movw	r30, r18
    1022:	e8 53       	subi	r30, 0x38	; 56
    1024:	f6 4c       	sbci	r31, 0xC6	; 198
    1026:	40 83       	st	Z, r20
    1028:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    102a:	e2 e0       	ldi	r30, 0x02	; 2
    102c:	e8 0f       	add	r30, r24
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	e8 5b       	subi	r30, 0xB8	; 184
    1036:	f6 4c       	sbci	r31, 0xC6	; 198
    1038:	20 ef       	ldi	r18, 0xF0	; 240
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	20 83       	st	Z, r18
    103e:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1040:	23 e0       	ldi	r18, 0x03	; 3
    1042:	28 0f       	add	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	e8 5b       	subi	r30, 0xB8	; 184
    104e:	f6 4c       	sbci	r31, 0xC6	; 198
    1050:	a0 83       	st	Z, r26
    1052:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1054:	f9 01       	movw	r30, r18
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	e8 57       	subi	r30, 0x78	; 120
    105c:	f6 4c       	sbci	r31, 0xC6	; 198
    105e:	60 83       	st	Z, r22
    1060:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	f9 01       	movw	r30, r18
    1068:	e8 53       	subi	r30, 0x38	; 56
    106a:	f6 4c       	sbci	r31, 0xC6	; 198
    106c:	40 83       	st	Z, r20
    106e:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1070:	24 e0       	ldi	r18, 0x04	; 4
    1072:	28 0f       	add	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	e8 5b       	subi	r30, 0xB8	; 184
    107e:	f6 4c       	sbci	r31, 0xC6	; 198
    1080:	a7 e5       	ldi	r26, 0x57	; 87
    1082:	ba e7       	ldi	r27, 0x7A	; 122
    1084:	a0 83       	st	Z, r26
    1086:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1088:	f9 01       	movw	r30, r18
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	e8 57       	subi	r30, 0x78	; 120
    1090:	f6 4c       	sbci	r31, 0xC6	; 198
    1092:	60 83       	st	Z, r22
    1094:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1096:	22 0f       	add	r18, r18
    1098:	33 1f       	adc	r19, r19
    109a:	f9 01       	movw	r30, r18
    109c:	e8 53       	subi	r30, 0x38	; 56
    109e:	f6 4c       	sbci	r31, 0xC6	; 198
    10a0:	40 83       	st	Z, r20
    10a2:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    10a4:	8b 5f       	subi	r24, 0xFB	; 251
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    10ac:	af 92       	push	r10
    10ae:	bf 92       	push	r11
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	2c 97       	sbiw	r28, 0x0c	; 12
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	7c 01       	movw	r14, r24
    10ca:	8b 01       	movw	r16, r22
    uint8_t effAdded;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    10cc:	9e 01       	movw	r18, r28
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	6c e0       	ldi	r22, 0x0C	; 12
    10d6:	80 96       	adiw	r24, 0x20	; 32
    10d8:	df de       	rcall	.-578    	; 0xe98 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	98 27       	eor	r25, r24
    10e0:	89 27       	eor	r24, r25
    10e2:	98 27       	eor	r25, r24
    10e4:	80 96       	adiw	r24, 0x20	; 32
    10e6:	f8 01       	movw	r30, r16
    10e8:	80 83       	st	Z, r24
    10ea:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	98 27       	eor	r25, r24
    10f2:	89 27       	eor	r24, r25
    10f4:	98 27       	eor	r25, r24
    10f6:	80 96       	adiw	r24, 0x20	; 32
    10f8:	82 83       	std	Z+2, r24	; 0x02
    10fa:	93 83       	std	Z+3, r25	; 0x03
    10fc:	de 01       	movw	r26, r28
    10fe:	15 96       	adiw	r26, 0x05	; 5
    1100:	34 96       	adiw	r30, 0x04	; 4
    1102:	c8 01       	movw	r24, r16
    1104:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    1106:	2d 91       	ld	r18, X+
    1108:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    110a:	e8 17       	cp	r30, r24
    110c:	f9 07       	cpc	r31, r25
    110e:	d9 f7       	brne	.-10     	; 0x1106 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    1110:	fc e2       	ldi	r31, 0x2C	; 44
    1112:	ef 0e       	add	r14, r31
    1114:	f1 1c       	adc	r15, r1
    1116:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    1118:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    111a:	9e 01       	movw	r18, r28
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	c7 01       	movw	r24, r14
    1126:	b8 de       	rcall	.-656    	; 0xe98 <ExtEERead>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	98 27       	eor	r25, r24
    112e:	89 27       	eor	r24, r25
    1130:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    1132:	97 01       	movw	r18, r14
    1134:	2e 5f       	subi	r18, 0xFE	; 254
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1138:	43 e0       	ldi	r20, 0x03	; 3
    113a:	4d 15       	cp	r20, r13
    113c:	80 f4       	brcc	.+32     	; 0x115e <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    113e:	ac 01       	movw	r20, r24
    1140:	41 50       	subi	r20, 0x01	; 1
    1142:	51 09       	sbc	r21, r1
    1144:	f8 01       	movw	r30, r16
    1146:	42 8f       	std	Z+26, r20	; 0x1a
    1148:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    114a:	f3 e0       	ldi	r31, 0x03	; 3
    114c:	ef 0e       	add	r14, r31
    114e:	f1 1c       	adc	r15, r1
    1150:	f8 01       	movw	r30, r16
    1152:	e4 86       	std	Z+12, r14	; 0x0c
    1154:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1156:	4b 81       	ldd	r20, Y+3	; 0x03
    1158:	f5 01       	movw	r30, r10
    115a:	44 a3       	std	Z+36, r20	; 0x24
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    115e:	f8 01       	movw	r30, r16
    1160:	82 8f       	std	Z+26, r24	; 0x1a
    1162:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1164:	24 87       	std	Z+12, r18	; 0x0c
    1166:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1168:	7c 01       	movw	r14, r24
    116a:	e2 0e       	add	r14, r18
    116c:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    116e:	d3 94       	inc	r13
    1170:	0e 5f       	subi	r16, 0xFE	; 254
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	ff ef       	ldi	r31, 0xFF	; 255
    1176:	af 1a       	sub	r10, r31
    1178:	bf 0a       	sbc	r11, r31
    117a:	47 e0       	ldi	r20, 0x07	; 7
    117c:	d4 12       	cpse	r13, r20
    117e:	cd cf       	rjmp	.-102    	; 0x111a <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    1180:	2c 96       	adiw	r28, 0x0c	; 12
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	08 95       	ret

0000119a <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    119a:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    119c:	8f 77       	andi	r24, 0x7F	; 127
    if (clearBit) {
    119e:	97 ff       	sbrs	r25, 7
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <UpdateState+0xc>
        WriteStatusBit(num, 0);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <UpdateState+0xe>
    } else {
        WriteStatusBit(num, 1);
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	87 cd       	rjmp	.-1266   	; 0xcb8 <WriteStatusBit>

000011aa <CheckState>:
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    11aa:	cf 93       	push	r28
    11ac:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    11ae:	8f 77       	andi	r24, 0x7F	; 127
    11b0:	6f dd       	rcall	.-1314   	; 0xc90 <ReadStatusBit>
    11b2:	2c 2f       	mov	r18, r28
    11b4:	22 1f       	adc	r18, r18
    11b6:	22 27       	eor	r18, r18
    11b8:	22 1f       	adc	r18, r18
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	81 11       	cpse	r24, r1
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <CheckState+0x18>
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    11c2:	82 2f       	mov	r24, r18
    11c4:	89 27       	eor	r24, r25
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	a0 97       	sbiw	r28, 0x20	; 32
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    11e6:	7c 01       	movw	r14, r24
    11e8:	20 e2       	ldi	r18, 0x20	; 32
    11ea:	e2 0e       	add	r14, r18
    11ec:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    11ee:	9e 01       	movw	r18, r28
    11f0:	2f 5f       	subi	r18, 0xFF	; 255
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	62 e0       	ldi	r22, 0x02	; 2
    11f8:	8c 96       	adiw	r24, 0x2c	; 44
    11fa:	4e de       	rcall	.-868    	; 0xe98 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    11fc:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    11fe:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    1200:	11 23       	and	r17, r17
    1202:	51 f1       	breq	.+84     	; 0x1258 <CheckLetter+0x8e>
    1204:	01 2f       	mov	r16, r17
    1206:	11 32       	cpi	r17, 0x21	; 33
    1208:	08 f0       	brcs	.+2      	; 0x120c <CheckLetter+0x42>
    120a:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    120c:	9e 01       	movw	r18, r28
    120e:	2f 5f       	subi	r18, 0xFF	; 255
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	60 2f       	mov	r22, r16
    1216:	c7 01       	movw	r24, r14
    1218:	0e 96       	adiw	r24, 0x0e	; 14
    121a:	3e de       	rcall	.-900    	; 0xe98 <ExtEERead>
    121c:	fe 01       	movw	r30, r28
    121e:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    1220:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    1222:	dd 20       	and	r13, r13
    1224:	61 f0       	breq	.+24     	; 0x123e <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    1226:	e1 e0       	ldi	r30, 0x01	; 1
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	ec 0f       	add	r30, r28
    122c:	fd 1f       	adc	r31, r29
    122e:	e8 0f       	add	r30, r24
    1230:	f1 1d       	adc	r31, r1
    1232:	90 81       	ld	r25, Z
    1234:	90 62       	ori	r25, 0x20	; 32
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	9c 11       	cpse	r25, r12
    123a:	0e c0       	rjmp	.+28     	; 0x1258 <CheckLetter+0x8e>
    123c:	0e c0       	rjmp	.+28     	; 0x125a <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    123e:	91 91       	ld	r25, Z+
    1240:	dd 24       	eor	r13, r13
    1242:	d3 94       	inc	r13
    1244:	9b 35       	cpi	r25, 0x5B	; 91
    1246:	09 f0       	breq	.+2      	; 0x124a <CheckLetter+0x80>
    1248:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	80 17       	cp	r24, r16
    124e:	48 f3       	brcs	.-46     	; 0x1222 <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    1250:	e0 0e       	add	r14, r16
    1252:	f1 1c       	adc	r15, r1
        x -= max;
    1254:	10 1b       	sub	r17, r16
    1256:	d4 cf       	rjmp	.-88     	; 0x1200 <CheckLetter+0x36>
    }
    return 0;
    1258:	80 e0       	ldi	r24, 0x00	; 0
}
    125a:	a0 96       	adiw	r28, 0x20	; 32
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	00 d0       	rcall	.+0      	; 0x1286 <FindChild+0x14>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <FindChild+0x16>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	d6 2e       	mov	r13, r22
    128e:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1290:	9e 01       	movw	r18, r28
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	64 e0       	ldi	r22, 0x04	; 4
    129a:	80 96       	adiw	r24, 0x20	; 32
    129c:	fd dd       	rcall	.-1030   	; 0xe98 <ExtEERead>
    129e:	e9 80       	ldd	r14, Y+1	; 0x01
    12a0:	fa 80       	ldd	r15, Y+2	; 0x02
    12a2:	fe 24       	eor	r15, r14
    12a4:	ef 24       	eor	r14, r15
    12a6:	fe 24       	eor	r15, r14
    12a8:	0b 81       	ldd	r16, Y+3	; 0x03
    12aa:	1c 81       	ldd	r17, Y+4	; 0x04
    12ac:	10 27       	eor	r17, r16
    12ae:	01 27       	eor	r16, r17
    12b0:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    12b2:	0e 15       	cp	r16, r14
    12b4:	1f 05       	cpc	r17, r15
    12b6:	30 f5       	brcc	.+76     	; 0x1304 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    12b8:	a0 16       	cp	r10, r16
    12ba:	b1 06       	cpc	r11, r17
    12bc:	58 f0       	brcs	.+22     	; 0x12d4 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    12be:	9e 01       	movw	r18, r28
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	62 e0       	ldi	r22, 0x02	; 2
    12c8:	c8 01       	movw	r24, r16
    12ca:	80 96       	adiw	r24, 0x20	; 32
    12cc:	e5 dd       	rcall	.-1078   	; 0xe98 <ExtEERead>
    12ce:	09 81       	ldd	r16, Y+1	; 0x01
    12d0:	1a 81       	ldd	r17, Y+2	; 0x02
    12d2:	ec cf       	rjmp	.-40     	; 0x12ac <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    12d4:	9e 01       	movw	r18, r28
    12d6:	2f 5f       	subi	r18, 0xFF	; 255
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	c8 01       	movw	r24, r16
    12e0:	85 96       	adiw	r24, 0x25	; 37
    12e2:	da dd       	rcall	.-1100   	; 0xe98 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	81 11       	cpse	r24, r1
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    12ea:	d1 10       	cpse	r13, r1
    12ec:	05 c0       	rjmp	.+10     	; 0x12f8 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <FindChild+0x98>
    12f0:	5c df       	rcall	.-328    	; 0x11aa <CheckState>
    12f2:	81 11       	cpse	r24, r1
    12f4:	fa cf       	rjmp	.-12     	; 0x12ea <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    12f6:	e3 cf       	rjmp	.-58     	; 0x12be <FindChild+0x4c>
    12f8:	6d 2d       	mov	r22, r13
    12fa:	c8 01       	movw	r24, r16
    12fc:	66 df       	rcall	.-308    	; 0x11ca <CheckLetter>
    12fe:	88 23       	and	r24, r24
    1300:	f1 f2       	breq	.-68     	; 0x12be <FindChild+0x4c>
    1302:	03 c0       	rjmp	.+6      	; 0x130a <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	01 c0       	rjmp	.+2      	; 0x130c <FindChild+0x9a>
    130a:	c8 01       	movw	r24, r16
}
    130c:	24 96       	adiw	r28, 0x04	; 4
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	bf 90       	pop	r11
    1322:	af 90       	pop	r10
    1324:	08 95       	ret

00001326 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1326:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1328:	9f e9       	ldi	r25, 0x9F	; 159
    132a:	98 0f       	add	r25, r24
    132c:	9a 31       	cpi	r25, 0x1A	; 26
    132e:	38 f0       	brcs	.+14     	; 0x133e <InpOkChk+0x18>
    1330:	90 ed       	ldi	r25, 0xD0	; 208
    1332:	98 0f       	add	r25, r24
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	9a 30       	cpi	r25, 0x0A	; 10
    1338:	18 f0       	brcs	.+6      	; 0x1340 <InpOkChk+0x1a>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
    133e:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1340:	08 95       	ret

00001342 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    134c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    134e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1350:	f8 01       	movw	r30, r16
    1352:	ed 0f       	add	r30, r29
    1354:	f1 1d       	adc	r31, r1
    1356:	20 81       	ld	r18, Z
    1358:	8c 2f       	mov	r24, r28
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	22 23       	and	r18, r18
    135e:	51 f0       	breq	.+20     	; 0x1374 <CleanInput+0x32>
        data[cnt] = data[x];
    1360:	d8 01       	movw	r26, r16
    1362:	a8 0f       	add	r26, r24
    1364:	b9 1f       	adc	r27, r25
    1366:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1368:	80 81       	ld	r24, Z
    136a:	dd df       	rcall	.-70     	; 0x1326 <InpOkChk>
    136c:	81 11       	cpse	r24, r1
    136e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1370:	df 5f       	subi	r29, 0xFF	; 255
    1372:	ee cf       	rjmp	.-36     	; 0x1350 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1374:	f8 01       	movw	r30, r16
    1376:	e8 0f       	add	r30, r24
    1378:	f9 1f       	adc	r31, r25
    137a:	10 82       	st	Z, r1
    return cnt;
}
    137c:	8c 2f       	mov	r24, r28
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1388:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    138a:	20 91 74 3a 	lds	r18, 0x3A74	; 0x803a74 <txAddrNow>
    138e:	28 30       	cpi	r18, 0x08	; 8
    1390:	08 f0       	brcs	.+2      	; 0x1394 <CheckSend+0xc>
    1392:	47 c0       	rjmp	.+142    	; 0x1422 <CheckSend+0x9a>
    1394:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <serTxDone>
    1398:	88 23       	and	r24, r24
    139a:	09 f4       	brne	.+2      	; 0x139e <CheckSend+0x16>
    139c:	42 c0       	rjmp	.+132    	; 0x1422 <CheckSend+0x9a>
        if (txStrLen[txAddrNow] == 0){
    139e:	82 2f       	mov	r24, r18
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	eb 58       	subi	r30, 0x8B	; 139
    13a6:	f5 4c       	sbci	r31, 0xC5	; 197
    13a8:	e0 81       	ld	r30, Z
    13aa:	e1 11       	cpse	r30, r1
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <CheckSend+0x32>
            txPart = 0;
    13ae:	10 92 35 39 	sts	0x3935, r1	; 0x803935 <txPart.3918>
            txAddrNow = TXLISTLEN;
    13b2:	88 e0       	ldi	r24, 0x08	; 8
    13b4:	80 93 74 3a 	sts	0x3A74, r24	; 0x803a74 <txAddrNow>
    13b8:	2c c0       	rjmp	.+88     	; 0x1412 <CheckSend+0x8a>
        } else if (txPart < txStrLen[txAddrNow]){
    13ba:	50 91 35 39 	lds	r21, 0x3935	; 0x803935 <txPart.3918>
    13be:	5e 17       	cp	r21, r30
    13c0:	50 f5       	brcc	.+84     	; 0x1416 <CheckSend+0x8e>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    13c2:	ce 2f       	mov	r28, r30
    13c4:	c5 1b       	sub	r28, r21
    13c6:	c1 32       	cpi	r28, 0x21	; 33
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <CheckSend+0x44>
    13ca:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	fc 01       	movw	r30, r24
    13d2:	e3 58       	subi	r30, 0x83	; 131
    13d4:	f5 4c       	sbci	r31, 0xC5	; 197
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	2a e3       	ldi	r18, 0x3A	; 58
    13dc:	3b e3       	ldi	r19, 0x3B	; 59
    13de:	40 91 73 3a 	lds	r20, 0x3A73	; 0x803a73 <txTypeNow>
    13e2:	6c 2f       	mov	r22, r28
    13e4:	85 0f       	add	r24, r21
    13e6:	91 1d       	adc	r25, r1
    13e8:	57 dd       	rcall	.-1362   	; 0xe98 <ExtEERead>
            txPart += EEreadLength;
    13ea:	80 91 35 39 	lds	r24, 0x3935	; 0x803935 <txPart.3918>
    13ee:	8c 0f       	add	r24, r28
    13f0:	80 93 35 39 	sts	0x3935, r24	; 0x803935 <txPart.3918>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    13f4:	ec 2f       	mov	r30, r28
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	e6 5c       	subi	r30, 0xC6	; 198
    13fa:	f4 4c       	sbci	r31, 0xC4	; 196
    13fc:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    13fe:	80 91 3a 3b 	lds	r24, 0x3B3A	; 0x803b3a <txBuffer>
    1402:	81 11       	cpse	r24, r1
    1404:	03 c0       	rjmp	.+6      	; 0x140c <CheckSend+0x84>
    1406:	8b ed       	ldi	r24, 0xDB	; 219
    1408:	80 93 3a 3b 	sts	0x3B3A, r24	; 0x803b3a <txBuffer>
            SerSend(&txBuffer[0]);
    140c:	8a e3       	ldi	r24, 0x3A	; 58
    140e:	9b e3       	ldi	r25, 0x3B	; 59
    1410:	d8 da       	rcall	.-2640   	; 0x9c2 <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0b c0       	rjmp	.+22     	; 0x142c <CheckSend+0xa4>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1416:	10 92 35 39 	sts	0x3935, r1	; 0x803935 <txPart.3918>
            ++txAddrNow;
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	20 93 74 3a 	sts	0x3A74, r18	; 0x803a74 <txAddrNow>
    1420:	f8 cf       	rjmp	.-16     	; 0x1412 <CheckSend+0x8a>
        }
    } else if (serTxDone) return 0; //All is sent!
    1422:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <serTxDone>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	91 11       	cpse	r25, r1
    142a:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1434:	c0 91 47 39 	lds	r28, 0x3947	; 0x803947 <responseList>
    1438:	cc 23       	and	r28, r28
    143a:	e9 f1       	breq	.+122    	; 0x14b6 <CheckResponse+0x86>
        --responseList;
    143c:	c1 50       	subi	r28, 0x01	; 1
    143e:	c0 93 47 39 	sts	0x3947, r28	; 0x803947 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1442:	d0 91 34 39 	lds	r29, 0x3934	; 0x803934 <number.3922>
    1446:	2d 2f       	mov	r18, r29
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	f9 01       	movw	r30, r18
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	e8 5b       	subi	r30, 0xB8	; 184
    1452:	f6 4c       	sbci	r31, 0xC6	; 198
    1454:	80 81       	ld	r24, Z
    1456:	91 81       	ldd	r25, Z+1	; 0x01
    1458:	80 3f       	cpi	r24, 0xF0	; 240
    145a:	4f ef       	ldi	r20, 0xFF	; 255
    145c:	94 07       	cpc	r25, r20
    145e:	51 f4       	brne	.+20     	; 0x1474 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    1460:	60 91 62 3a 	lds	r22, 0x3A62	; 0x803a62 <currObj+0x1a>
    1464:	70 91 63 3a 	lds	r23, 0x3A63	; 0x803a63 <currObj+0x1b>
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	80 91 54 3a 	lds	r24, 0x3A54	; 0x803a54 <currObj+0xc>
    146e:	90 91 55 3a 	lds	r25, 0x3A55	; 0x803a55 <currObj+0xd>
    1472:	0d c0       	rjmp	.+26     	; 0x148e <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    1474:	d9 01       	movw	r26, r18
    1476:	aa 0f       	add	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	a8 53       	subi	r26, 0x38	; 56
    147c:	b6 4c       	sbci	r27, 0xC6	; 198
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	f9 01       	movw	r30, r18
    1484:	e8 57       	subi	r30, 0x78	; 120
    1486:	f6 4c       	sbci	r31, 0xC6	; 198
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	4c 91       	ld	r20, X
    148e:	5a dd       	rcall	.-1356   	; 0xf44 <PrepareSending>
        }
        ++number;
    1490:	df 5f       	subi	r29, 0xFF	; 255
    1492:	d0 93 34 39 	sts	0x3934, r29	; 0x803934 <number.3922>

        if (responseList == 0) {
    1496:	c1 11       	cpse	r28, r1
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    149a:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <currObj+0x4>
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <effect>
    14a4:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <effect+0x1>
            RXCNT = 0;
    14a8:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    14aa:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
            number = 0;
    14ae:	10 92 34 39 	sts	0x3934, r1	; 0x803934 <number.3922>
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    14b4:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    14b6:	8c 2f       	mov	r24, r28
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	2a 97       	sbiw	r28, 0x0a	; 10
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    14d6:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    14da:	8f 3f       	cpi	r24, 0xFF	; 255
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <CheckInput+0x22>
    14de:	57 c0       	rjmp	.+174    	; 0x158e <CheckInput+0xd0>
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    14e0:	44 e1       	ldi	r20, 0x14	; 20
    14e2:	6f e8       	ldi	r22, 0x8F	; 143
    14e4:	7a e3       	ldi	r23, 0x3A	; 58
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	34 da       	rcall	.-2968   	; 0x952 <EERead>
    14ea:	8e e6       	ldi	r24, 0x6E	; 110
    14ec:	f8 2e       	mov	r15, r24

        uint8_t idSet = 0;
    14ee:	e1 2c       	mov	r14, r1
        for (uint8_t x=0; x<4; ++x){
            idSet += ReadStatusBit(110+x);
    14f0:	8f 2d       	mov	r24, r15
    14f2:	ce db       	rcall	.-2148   	; 0xc90 <ReadStatusBit>
    14f4:	e8 0e       	add	r14, r24
    14f6:	f3 94       	inc	r15
    if (currDepth == 0xff) {
        //Load things from EEPROM
        EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

        uint8_t idSet = 0;
        for (uint8_t x=0; x<4; ++x){
    14f8:	82 e7       	ldi	r24, 0x72	; 114
    14fa:	f8 12       	cpse	r15, r24
    14fc:	f9 cf       	rjmp	.-14     	; 0x14f0 <CheckInput+0x32>
            idSet += ReadStatusBit(110+x);
        }

        //Check if badge is reset(0 = cheated!) or new(3) or error(2)
        if (idSet != 1) {
    14fe:	e1 e0       	ldi	r30, 0x01	; 1
    1500:	ee 16       	cp	r14, r30
            Reset();
    1502:	11 f0       	breq	.+4      	; 0x1508 <CheckInput+0x4a>
    1504:	01 dc       	rcall	.-2046   	; 0xd08 <Reset>
        } else getID();
    1506:	01 c0       	rjmp	.+2      	; 0x150a <CheckInput+0x4c>
    1508:	f1 db       	rcall	.-2078   	; 0xcec <getID>

        inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    150a:	80 91 9f 3a 	lds	r24, 0x3A9F	; 0x803a9f <gameState+0x10>
    150e:	90 91 a0 3a 	lds	r25, 0x3AA0	; 0x803aa0 <gameState+0x11>
    1512:	98 27       	eor	r25, r24
    1514:	89 27       	eor	r24, r25
    1516:	98 27       	eor	r25, r24
    1518:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <inventory>
    151c:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <inventory+0x1>
        inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    1520:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <gameState+0x12>
    1524:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <gameState+0x13>
    1528:	98 27       	eor	r25, r24
    152a:	89 27       	eor	r24, r25
    152c:	98 27       	eor	r25, r24
    152e:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <inventory+0x2>
    1532:	90 93 99 38 	sts	0x3899, r25	; 0x803899 <inventory+0x3>
        SaveGameState();
    1536:	39 db       	rcall	.-2446   	; 0xbaa <SaveGameState>

        //Start at first location
        PopulateObject(route[0], &currObj);
    1538:	68 e4       	ldi	r22, 0x48	; 72
    153a:	7a e3       	ldi	r23, 0x3A	; 58
    153c:	80 91 08 3a 	lds	r24, 0x3A08	; 0x803a08 <route>
    1540:	90 91 09 3a 	lds	r25, 0x3A09	; 0x803a09 <route+0x1>
    1544:	b3 dd       	rcall	.-1178   	; 0x10ac <PopulateObject>
        currDepth = 0;
    1546:	10 92 8f 38 	sts	0x388F, r1	; 0x80388f <currDepth>

        //Play an effect if configured
        if ((effect < 0x0100) && (effect ^ currObj.byteField[EFFECTS])){
    154a:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
    154e:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
    1552:	8f 3f       	cpi	r24, 0xFF	; 255
    1554:	91 05       	cpc	r25, r1
    1556:	09 f0       	breq	.+2      	; 0x155a <CheckInput+0x9c>
    1558:	d0 f4       	brcc	.+52     	; 0x158e <CheckInput+0xd0>
    155a:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <currObj+0x4>
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	20 91 93 38 	lds	r18, 0x3893	; 0x803893 <effect>
    1564:	30 91 94 38 	lds	r19, 0x3894	; 0x803894 <effect+0x1>
    1568:	82 17       	cp	r24, r18
    156a:	93 07       	cpc	r25, r19
    156c:	81 f0       	breq	.+32     	; 0x158e <CheckInput+0xd0>
            effect = currObj.byteField[EFFECTS];
    156e:	80 93 93 38 	sts	0x3893, r24	; 0x803893 <effect>
    1572:	90 93 94 38 	sts	0x3894, r25	; 0x803894 <effect+0x1>
            auStart = ((effect&0xE0)>0);
    1576:	80 91 93 38 	lds	r24, 0x3893	; 0x803893 <effect>
    157a:	90 91 94 38 	lds	r25, 0x3894	; 0x803894 <effect+0x1>
    157e:	80 7e       	andi	r24, 0xE0	; 224
    1580:	99 27       	eor	r25, r25
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	89 2b       	or	r24, r25
    1586:	09 f4       	brne	.+2      	; 0x158a <CheckInput+0xcc>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	20 93 92 38 	sts	0x3892, r18	; 0x803892 <auStart>
        }
    }

    if (serRxDone){
    158e:	80 91 9c 38 	lds	r24, 0x389C	; 0x80389c <serRxDone>
    1592:	88 23       	and	r24, r24
    1594:	09 f4       	brne	.+2      	; 0x1598 <CheckInput+0xda>
    1596:	51 c1       	rjmp	.+674    	; 0x183a <CheckInput+0x37c>

        //Special input requested from user by game
        if (specialInput[0]){
    1598:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <specialInput>
    159c:	88 23       	and	r24, r24
    159e:	09 f4       	brne	.+2      	; 0x15a2 <CheckInput+0xe4>
    15a0:	57 c0       	rjmp	.+174    	; 0x1650 <CheckInput+0x192>
            specialPassed = 0;
    15a2:	10 92 36 39 	sts	0x3936, r1	; 0x803936 <specialPassed>
            data[0] = 'a';
    15a6:	81 e6       	ldi	r24, 0x61	; 97
    15a8:	f8 01       	movw	r30, r16
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    15aa:	80 83       	st	Z, r24
    15ac:	67 e3       	ldi	r22, 0x37	; 55
    15ae:	79 e3       	ldi	r23, 0x39	; 57
    15b0:	83 ea       	ldi	r24, 0xA3	; 163
    15b2:	9a e3       	ldi	r25, 0x3A	; 58
    15b4:	ad dc       	rcall	.-1702   	; 0xf10 <StartsWith>
    15b6:	f8 2e       	mov	r15, r24
    15b8:	88 23       	and	r24, r24
    15ba:	21 f0       	breq	.+8      	; 0x15c4 <CheckInput+0x106>
                specialPassed = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <specialPassed>
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <CheckInput+0x10e>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    15c4:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <specialInput>
    15c8:	81 33       	cpi	r24, 0x31	; 49
    15ca:	11 f0       	breq	.+4      	; 0x15d0 <CheckInput+0x112>
                    if (serTxDone) SerSend(&cheat[0]);
                }
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    15cc:	f1 2c       	mov	r15, r1
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    15ce:	37 c1       	rjmp	.+622    	; 0x183e <CheckInput+0x380>
    15d0:	80 91 39 39 	lds	r24, 0x3939	; 0x803939 <specialInput+0x2>
    15d4:	81 11       	cpse	r24, r1
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    15d6:	fa cf       	rjmp	.-12     	; 0x15cc <CheckInput+0x10e>
    15d8:	83 ea       	ldi	r24, 0xA3	; 163
    15da:	9a e3       	ldi	r25, 0x3A	; 58
    15dc:	b2 de       	rcall	.-668    	; 0x1342 <CleanInput>
                specialPassed = 2;
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	90 93 36 39 	sts	0x3936, r25	; 0x803936 <specialPassed>
                data[1] = 0;
    15e4:	f8 01       	movw	r30, r16
    15e6:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	80 f3       	brcs	.-32     	; 0x15cc <CheckInput+0x10e>
                    if ((serRx[0] == '0')||(serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')) {
    15ec:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    15f0:	80 33       	cpi	r24, 0x30	; 48
    15f2:	61 f0       	breq	.+24     	; 0x160c <CheckInput+0x14e>
    15f4:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    15f8:	81 33       	cpi	r24, 0x31	; 49
    15fa:	41 f0       	breq	.+16     	; 0x160c <CheckInput+0x14e>
    15fc:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    1600:	82 33       	cpi	r24, 0x32	; 50
    1602:	21 f0       	breq	.+8      	; 0x160c <CheckInput+0x14e>
    1604:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    1608:	83 33       	cpi	r24, 0x33	; 51
    160a:	01 f7       	brne	.-64     	; 0x15cc <CheckInput+0x10e>
                        serRx[1] |= 0x20;
    160c:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    1610:	80 62       	ori	r24, 0x20	; 32
    1612:	80 93 a4 3a 	sts	0x3AA4, r24	; 0x803aa4 <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    1616:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    161a:	81 36       	cpi	r24, 0x61	; 97
    161c:	61 f0       	breq	.+24     	; 0x1636 <CheckInput+0x178>
    161e:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    1622:	85 36       	cpi	r24, 0x65	; 101
    1624:	41 f0       	breq	.+16     	; 0x1636 <CheckInput+0x178>
    1626:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    162a:	86 36       	cpi	r24, 0x66	; 102
    162c:	21 f0       	breq	.+8      	; 0x1636 <CheckInput+0x178>
    162e:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    1632:	87 37       	cpi	r24, 0x77	; 119
    1634:	59 f6       	brne	.-106    	; 0x15cc <CheckInput+0x10e>
                            data[1] = specialInput[1]+0x11;
    1636:	80 91 38 39 	lds	r24, 0x3938	; 0x803938 <specialInput+0x1>
    163a:	8f 5e       	subi	r24, 0xEF	; 239
    163c:	f8 01       	movw	r30, r16
    163e:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1640:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
    1644:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1646:	80 91 a4 3a 	lds	r24, 0x3AA4	; 0x803aa4 <serRx+0x1>
    164a:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    164c:	14 82       	std	Z+4, r1	; 0x04
    164e:	f7 c0       	rjmp	.+494    	; 0x183e <CheckInput+0x380>
    1650:	d8 01       	movw	r26, r16
    }

    if (serRxDone){

        //Special input requested from user by game
        if (specialInput[0]){
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
        
        //Normal input
        } else {
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    1656:	fc 01       	movw	r30, r24
    1658:	ed 55       	subi	r30, 0x5D	; 93
    165a:	f5 4c       	sbci	r31, 0xC5	; 197
    165c:	20 81       	ld	r18, Z
    165e:	21 34       	cpi	r18, 0x41	; 65
    1660:	18 f0       	brcs	.+6      	; 0x1668 <CheckInput+0x1aa>
    1662:	20 81       	ld	r18, Z
    1664:	2b 35       	cpi	r18, 0x5B	; 91
    1666:	10 f0       	brcs	.+4      	; 0x166c <CheckInput+0x1ae>
    1668:	20 81       	ld	r18, Z
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <CheckInput+0x1b2>
    166c:	20 81       	ld	r18, Z
    166e:	20 62       	ori	r18, 0x20	; 32
    1670:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1672:	20 81       	ld	r18, Z
    1674:	21 11       	cpse	r18, r1
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <CheckInput+0x1c4>
                    data[x] = 0;
    1678:	f8 01       	movw	r30, r16
    167a:	e8 0f       	add	r30, r24
    167c:	f1 1d       	adc	r31, r1
    167e:	10 82       	st	Z, r1
                    break;
    1680:	05 c0       	rjmp	.+10     	; 0x168c <CheckInput+0x1ce>
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	11 96       	adiw	r26, 0x01	; 1
            //}
        
        //Normal input
        } else {
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    1686:	81 34       	cpi	r24, 0x41	; 65
    1688:	91 05       	cpc	r25, r1
    168a:	29 f7       	brne	.-54     	; 0x1656 <CheckInput+0x198>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    168c:	80 91 a3 3a 	lds	r24, 0x3AA3	; 0x803aa3 <serRx>
                data[0] = 0;
    1690:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1692:	81 11       	cpse	r24, r1
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <CheckInput+0x1e2>
                data[0] = 0;
    1696:	10 82       	st	Z, r1
                RXCNT = 0;
    1698:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    169a:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
    169e:	cd c0       	rjmp	.+410    	; 0x183a <CheckInput+0x37c>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 33       	cpi	r24, 0x3F	; 63
    16a4:	11 f0       	breq	.+4      	; 0x16aa <CheckInput+0x1ec>
    16a6:	88 36       	cpi	r24, 0x68	; 104
    16a8:	49 f4       	brne	.+18     	; 0x16bc <CheckInput+0x1fe>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    16aa:	83 e9       	ldi	r24, 0x93	; 147
    16ac:	9b e7       	ldi	r25, 0x7B	; 123
    16ae:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    16b2:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    16b6:	8d e6       	ldi	r24, 0x6D	; 109
    16b8:	94 e0       	ldi	r25, 0x04	; 4
    16ba:	79 c0       	rjmp	.+242    	; 0x17ae <CheckInput+0x2f0>
                responseList = SetStandardResponse(1);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    16bc:	81 36       	cpi	r24, 0x61	; 97
    16be:	49 f4       	brne	.+18     	; 0x16d2 <CheckInput+0x214>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    16c0:	8e e6       	ldi	r24, 0x6E	; 110
    16c2:	9a e7       	ldi	r25, 0x7A	; 122
    16c4:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    16c8:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    16cc:	85 e2       	ldi	r24, 0x25	; 37
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	6e c0       	rjmp	.+220    	; 0x17ae <CheckInput+0x2f0>
                responseList = SetStandardResponse(1);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    16d2:	87 37       	cpi	r24, 0x77	; 119
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <CheckInput+0x21a>
    16d6:	61 c0       	rjmp	.+194    	; 0x179a <CheckInput+0x2dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    16d8:	8b ec       	ldi	r24, 0xCB	; 203
    16da:	96 e7       	ldi	r25, 0x76	; 118
    16dc:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    16e0:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    16e4:	82 e1       	ldi	r24, 0x12	; 18
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    16ec:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    16f8:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    16fc:	20 91 95 38 	lds	r18, 0x3895	; 0x803895 <whoami>
    1700:	21 30       	cpi	r18, 0x01	; 1
    1702:	19 f4       	brne	.+6      	; 0x170a <CheckInput+0x24c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1704:	25 ec       	ldi	r18, 0xC5	; 197
    1706:	36 e7       	ldi	r19, 0x76	; 118
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <CheckInput+0x26a>
            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(1, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	49 f4       	brne	.+18     	; 0x1720 <CheckInput+0x262>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    170e:	22 ec       	ldi	r18, 0xC2	; 194
    1710:	36 e7       	ldi	r19, 0x76	; 118
    1712:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1716:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    171a:	23 e0       	ldi	r18, 0x03	; 3
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	1e c0       	rjmp	.+60     	; 0x175c <CheckInput+0x29e>
                SetResponse(0, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(1, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(1, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    1720:	23 30       	cpi	r18, 0x03	; 3
    1722:	49 f4       	brne	.+18     	; 0x1736 <CheckInput+0x278>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1724:	2c eb       	ldi	r18, 0xBC	; 188
    1726:	36 e7       	ldi	r19, 0x76	; 118
    1728:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    172c:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1730:	26 e0       	ldi	r18, 0x06	; 6
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	13 c0       	rjmp	.+38     	; 0x175c <CheckInput+0x29e>
                    SetResponse(1, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(1, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(1, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    1736:	24 30       	cpi	r18, 0x04	; 4
    1738:	49 f4       	brne	.+18     	; 0x174c <CheckInput+0x28e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    173a:	27 eb       	ldi	r18, 0xB7	; 183
    173c:	36 e7       	ldi	r19, 0x76	; 118
    173e:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1742:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1746:	25 e0       	ldi	r18, 0x05	; 5
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	08 c0       	rjmp	.+16     	; 0x175c <CheckInput+0x29e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    174c:	20 e4       	ldi	r18, 0x40	; 64
    174e:	36 e7       	ldi	r19, 0x76	; 118
    1750:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1754:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1758:	22 e4       	ldi	r18, 0x42	; 66
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	20 93 8a 39 	sts	0x398A, r18	; 0x80398a <reactStr+0x42>
    1760:	30 93 8b 39 	sts	0x398B, r19	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1764:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    1768:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    176c:	8d e9       	ldi	r24, 0x9D	; 157
    176e:	96 e7       	ldi	r25, 0x76	; 118
    1770:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    1774:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    1778:	8a e1       	ldi	r24, 0x1A	; 26
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    1780:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	80 93 cc 39 	sts	0x39CC, r24	; 0x8039cc <reactStr+0x84>
    178c:	90 93 cd 39 	sts	0x39CD, r25	; 0x8039cd <reactStr+0x85>
                    SetResponse(1, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(1, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(2, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(3);
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	10 dc       	rcall	.-2016   	; 0xfb4 <SetStandardResponse>
    1794:	80 93 47 39 	sts	0x3947, r24	; 0x803947 <responseList>
    1798:	50 c0       	rjmp	.+160    	; 0x183a <CheckInput+0x37c>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    179a:	81 37       	cpi	r24, 0x71	; 113
    179c:	99 f4       	brne	.+38     	; 0x17c4 <CheckInput+0x306>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	9a e7       	ldi	r25, 0x7A	; 122
    17a2:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    17a6:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    17aa:	84 e5       	ldi	r24, 0x54	; 84
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    17b2:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    17be:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
    17c2:	e7 cf       	rjmp	.-50     	; 0x1792 <CheckInput+0x2d4>
                responseList = SetStandardResponse(1);
                return 1;
            }

            //Change status bit
            if (data[0] == '#'){
    17c4:	83 32       	cpi	r24, 0x23	; 35
    17c6:	b9 f4       	brne	.+46     	; 0x17f6 <CheckInput+0x338>
    17c8:	f8 01       	movw	r30, r16
    17ca:	31 96       	adiw	r30, 0x01	; 1
    17cc:	0c 5f       	subi	r16, 0xFC	; 252
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	80 e0       	ldi	r24, 0x00	; 0
                uint8_t bitNr = 0;
                for (uint8_t x=1; x<4; ++x) {
                    data[x] -= '0';
    17d2:	90 81       	ld	r25, Z
    17d4:	90 53       	subi	r25, 0x30	; 48
    17d6:	91 93       	st	Z+, r25
                    bitNr *= 10;
    17d8:	88 0f       	add	r24, r24
    17da:	28 2f       	mov	r18, r24
    17dc:	22 0f       	add	r18, r18
    17de:	22 0f       	add	r18, r18
                    if (data[x] < 10) {
    17e0:	82 0f       	add	r24, r18
    17e2:	9a 30       	cpi	r25, 0x0A	; 10
                        bitNr += data[x];
    17e4:	30 f4       	brcc	.+12     	; 0x17f2 <CheckInput+0x334>
            }

            //Change status bit
            if (data[0] == '#'){
                uint8_t bitNr = 0;
                for (uint8_t x=1; x<4; ++x) {
    17e6:	89 0f       	add	r24, r25
    17e8:	e0 17       	cp	r30, r16
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if (bitNr) UpdateState(bitNr);
    17ea:	f1 07       	cpc	r31, r17
    17ec:	91 f7       	brne	.-28     	; 0x17d2 <CheckInput+0x314>
    17ee:	81 11       	cpse	r24, r1
                responseList = SetStandardResponse(0);
    17f0:	d4 dc       	rcall	.-1624   	; 0x119a <UpdateState>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
                return 1;
            }

            //Cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    17f4:	ce cf       	rjmp	.-100    	; 0x1792 <CheckInput+0x2d4>
    17f6:	68 e0       	ldi	r22, 0x08	; 8
    17f8:	7a ea       	ldi	r23, 0xAA	; 170
    17fa:	c8 01       	movw	r24, r16
    17fc:	89 db       	rcall	.-2286   	; 0xf10 <StartsWith>
    17fe:	88 23       	and	r24, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <CheckInput+0x346>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    1802:	e4 ce       	rjmp	.-568    	; 0x15cc <CheckInput+0x10e>
    1804:	1e e6       	ldi	r17, 0x6E	; 110
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	81 2f       	mov	r24, r17
    180a:	56 da       	rcall	.-2900   	; 0xcb8 <WriteStatusBit>

            //Cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    180c:	1f 5f       	subi	r17, 0xFF	; 255
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    180e:	12 37       	cpi	r17, 0x72	; 114
    1810:	d1 f7       	brne	.-12     	; 0x1806 <CheckInput+0x348>

                uint8_t cheat[] = "Cheater! ";
    1812:	cb d9       	rcall	.-3178   	; 0xbaa <SaveGameState>
    1814:	8a e0       	ldi	r24, 0x0A	; 10
    1816:	ee e0       	ldi	r30, 0x0E	; 14
    1818:	fa ea       	ldi	r31, 0xAA	; 170
    181a:	de 01       	movw	r26, r28
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	01 90       	ld	r0, Z+
    1820:	0d 92       	st	X+, r0
                SerSpeed(60);
    1822:	8a 95       	dec	r24
    1824:	e1 f7       	brne	.-8      	; 0x181e <CheckInput+0x360>
    1826:	8c e3       	ldi	r24, 0x3C	; 60
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    1828:	dd d8       	rcall	.-3654   	; 0x9e4 <SerSpeed>
    182a:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <serTxDone>
    182e:	88 23       	and	r24, r24
    1830:	e1 f3       	breq	.-8      	; 0x182a <CheckInput+0x36c>
    1832:	ce 01       	movw	r24, r28
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	c5 d8       	rcall	.-3702   	; 0x9c2 <SerSend>
    1838:	f8 cf       	rjmp	.-16     	; 0x182a <CheckInput+0x36c>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    183a:	ff 24       	eor	r15, r15
    183c:	f3 94       	inc	r15
}
    183e:	8f 2d       	mov	r24, r15
    1840:	2a 96       	adiw	r28, 0x0a	; 10
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	08 95       	ret

00001854 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    1854:	4f 92       	push	r4
    1856:	5f 92       	push	r5
    1858:	6f 92       	push	r6
    185a:	7f 92       	push	r7
    185c:	8f 92       	push	r8
    185e:	9f 92       	push	r9
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	2a 97       	sbiw	r28, 0x0a	; 10
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    1880:	60 dd       	rcall	.-1344   	; 0x1342 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    1882:	c8 01       	movw	r24, r16
    1884:	5e dd       	rcall	.-1348   	; 0x1342 <CleanInput>
    1886:	f8 2e       	mov	r15, r24

    if (inputLen) {
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <ProcessInput+0x3a>
    188c:	b6 c7       	rjmp	.+3948   	; 0x27fa <ProcessInput+0xfa6>

        //eXit to previous location
        if (data[0] == 'x'){
    188e:	d8 01       	movw	r26, r16
    1890:	8c 91       	ld	r24, X
    1892:	88 37       	cpi	r24, 0x78	; 120
    1894:	29 f5       	brne	.+74     	; 0x18e0 <ProcessInput+0x8c>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    1896:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    189a:	e8 2f       	mov	r30, r24
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	e8 5f       	subi	r30, 0xF8	; 248
    18a4:	f5 4c       	sbci	r31, 0xC5	; 197
    18a6:	20 81       	ld	r18, Z
    18a8:	31 81       	ldd	r19, Z+1	; 0x01
    18aa:	23 2b       	or	r18, r19
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <ProcessInput+0x5e>
    18ae:	81 11       	cpse	r24, r1
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <ProcessInput+0x64>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18b2:	82 e8       	ldi	r24, 0x82	; 130
    18b4:	96 e7       	ldi	r25, 0x76	; 118
    18b6:	2a c5       	rjmp	.+2644   	; 0x230c <ProcessInput+0xab8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    18b8:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <currObj+0x6>
    18bc:	76 dc       	rcall	.-1812   	; 0x11aa <CheckState>
    18be:	88 23       	and	r24, r24
    18c0:	31 f0       	breq	.+12     	; 0x18ce <ProcessInput+0x7a>
                --currDepth;
    18c2:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    18c6:	e1 50       	subi	r30, 0x01	; 1
    18c8:	e0 93 8f 38 	sts	0x388F, r30	; 0x80388f <currDepth>
    18cc:	95 c0       	rjmp	.+298    	; 0x19f8 <ProcessInput+0x1a4>
                PopulateObject(route[currDepth], &currObj);
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
    18ce:	80 91 6a 3a 	lds	r24, 0x3A6A	; 0x803a6a <currObj+0x22>
    18d2:	90 91 6b 3a 	lds	r25, 0x3A6B	; 0x803a6b <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    18d6:	20 91 5c 3a 	lds	r18, 0x3A5C	; 0x803a5c <currObj+0x14>
    18da:	30 91 5d 3a 	lds	r19, 0x3A5D	; 0x803a5d <currObj+0x15>
    18de:	d5 c5       	rjmp	.+2986   	; 0x248a <ProcessInput+0xc36>
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);               
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    18e0:	85 36       	cpi	r24, 0x65	; 101
    18e2:	19 f0       	breq	.+6      	; 0x18ea <ProcessInput+0x96>
    18e4:	8f 36       	cpi	r24, 0x6F	; 111
    18e6:	09 f0       	breq	.+2      	; 0x18ea <ProcessInput+0x96>
    18e8:	a4 c0       	rjmp	.+328    	; 0x1a32 <ProcessInput+0x1de>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    18ea:	b2 e0       	ldi	r27, 0x02	; 2
    18ec:	fb 12       	cpse	r15, r27
    18ee:	e1 cf       	rjmp	.-62     	; 0x18b2 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    18f0:	e0 90 8f 38 	lds	r14, 0x388F	; 0x80388f <currDepth>
    18f4:	f1 2c       	mov	r15, r1
    18f6:	f7 01       	movw	r30, r14
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	e8 5f       	subi	r30, 0xF8	; 248
    18fe:	f5 4c       	sbci	r31, 0xC5	; 197
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	d8 01       	movw	r26, r16
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	6c 91       	ld	r22, X
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	b1 dc       	rcall	.-1694   	; 0x1272 <FindChild>
    1910:	f7 01       	movw	r30, r14
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31
    1916:	e6 5f       	subi	r30, 0xF6	; 246
    1918:	f5 4c       	sbci	r31, 0xC5	; 197
    191a:	80 83       	st	Z, r24
    191c:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    191e:	90 91 8f 38 	lds	r25, 0x388F	; 0x80388f <currDepth>
    1922:	29 2f       	mov	r18, r25
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	f9 01       	movw	r30, r18
    1928:	ee 0f       	add	r30, r30
    192a:	ff 1f       	adc	r31, r31
    192c:	e6 5f       	subi	r30, 0xF6	; 246
    192e:	f5 4c       	sbci	r31, 0xC5	; 197
    1930:	40 81       	ld	r20, Z
    1932:	51 81       	ldd	r21, Z+1	; 0x01
    1934:	41 15       	cp	r20, r1
    1936:	51 05       	cpc	r21, r1
    1938:	21 f0       	breq	.+8      	; 0x1942 <ProcessInput+0xee>
                    PopulateObject(route[currDepth+1], &actObj1);
    193a:	69 e0       	ldi	r22, 0x09	; 9
    193c:	79 e3       	ldi	r23, 0x39	; 57
    193e:	ca 01       	movw	r24, r20
    1940:	1c c0       	rjmp	.+56     	; 0x197a <ProcessInput+0x126>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    1942:	99 23       	and	r25, r25
    1944:	09 f4       	brne	.+2      	; 0x1948 <ProcessInput+0xf4>
    1946:	d9 c6       	rjmp	.+3506   	; 0x26fa <ProcessInput+0xea6>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    1948:	22 0f       	add	r18, r18
    194a:	33 1f       	adc	r19, r19
    194c:	f9 01       	movw	r30, r18
    194e:	ea 5f       	subi	r30, 0xFA	; 250
    1950:	f5 4c       	sbci	r31, 0xC5	; 197
    1952:	d8 01       	movw	r26, r16
    1954:	11 96       	adiw	r26, 0x01	; 1
    1956:	6c 91       	ld	r22, X
    1958:	80 81       	ld	r24, Z
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	36 dc       	rcall	.-1940   	; 0x11ca <CheckLetter>
    195e:	88 23       	and	r24, r24
    1960:	09 f4       	brne	.+2      	; 0x1964 <ProcessInput+0x110>
    1962:	cb c6       	rjmp	.+3478   	; 0x26fa <ProcessInput+0xea6>
                        PopulateObject(route[currDepth-1], &actObj1);
    1964:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	ea 5f       	subi	r30, 0xFA	; 250
    1970:	f5 4c       	sbci	r31, 0xC5	; 197
    1972:	69 e0       	ldi	r22, 0x09	; 9
    1974:	79 e3       	ldi	r23, 0x39	; 57
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	98 db       	rcall	.-2256   	; 0x10ac <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    197c:	d8 01       	movw	r26, r16
    197e:	8c 91       	ld	r24, X
    1980:	85 36       	cpi	r24, 0x65	; 101
    1982:	c9 f4       	brne	.+50     	; 0x19b6 <ProcessInput+0x162>
    1984:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3951+0x8>
    1988:	80 fd       	sbrc	r24, 0
    198a:	1e c0       	rjmp	.+60     	; 0x19c8 <ProcessInput+0x174>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    198c:	80 ea       	ldi	r24, 0xA0	; 160
    198e:	99 e7       	ldi	r25, 0x79	; 121
    1990:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1994:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1998:	8e e1       	ldi	r24, 0x1E	; 30
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    19a0:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    19ac:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    19b0:	92 e0       	ldi	r25, 0x02	; 2
    19b2:	79 2e       	mov	r7, r25
    19b4:	7e c6       	rjmp	.+3324   	; 0x26b2 <ProcessInput+0xe5e>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    19b6:	8f 36       	cpi	r24, 0x6F	; 111
    19b8:	39 f4       	brne	.+14     	; 0x19c8 <ProcessInput+0x174>
    19ba:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3951+0x8>
    19be:	81 fd       	sbrc	r24, 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <ProcessInput+0x174>
    19c2:	85 e8       	ldi	r24, 0x85	; 133
    19c4:	99 e7       	ldi	r25, 0x79	; 121
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    19c6:	a2 c4       	rjmp	.+2372   	; 0x230c <ProcessInput+0xab8>
    19c8:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <actObj1.3951+0x6>
    19cc:	ee db       	rcall	.-2084   	; 0x11aa <CheckState>
    19ce:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    19d2:	88 23       	and	r24, r24
    19d4:	f1 f0       	breq	.+60     	; 0x1a12 <ProcessInput+0x1be>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    19d6:	ae 2f       	mov	r26, r30
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	aa 0f       	add	r26, r26
    19dc:	bb 1f       	adc	r27, r27
    19de:	a6 5f       	subi	r26, 0xF6	; 246
    19e0:	b5 4c       	sbci	r27, 0xC5	; 197
    19e2:	8d 91       	ld	r24, X+
    19e4:	9c 91       	ld	r25, X
    19e6:	89 2b       	or	r24, r25
    19e8:	11 f0       	breq	.+4      	; 0x19ee <ProcessInput+0x19a>
    19ea:	ef 5f       	subi	r30, 0xFF	; 255
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <ProcessInput+0x19c>
    19ee:	e1 50       	subi	r30, 0x01	; 1
    19f0:	e0 93 8f 38 	sts	0x388F, r30	; 0x80388f <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    19f4:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	e8 5f       	subi	r30, 0xF8	; 248
    1a00:	f5 4c       	sbci	r31, 0xC5	; 197
    1a02:	68 e4       	ldi	r22, 0x48	; 72
    1a04:	7a e3       	ldi	r23, 0x3A	; 58
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	50 db       	rcall	.-2400   	; 0x10ac <PopulateObject>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    1a0c:	77 24       	eor	r7, r7
    1a0e:	73 94       	inc	r7
    1a10:	50 c6       	rjmp	.+3232   	; 0x26b2 <ProcessInput+0xe5e>
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	ee 0f       	add	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	e6 5f       	subi	r30, 0xF6	; 246
    1a1a:	f5 4c       	sbci	r31, 0xC5	; 197
    1a1c:	10 82       	st	Z, r1
    1a1e:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);                
    1a20:	80 91 2b 39 	lds	r24, 0x392B	; 0x80392b <actObj1.3951+0x22>
    1a24:	90 91 2c 39 	lds	r25, 0x392C	; 0x80392c <actObj1.3951+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a28:	20 91 1d 39 	lds	r18, 0x391D	; 0x80391d <actObj1.3951+0x14>
    1a2c:	30 91 1e 39 	lds	r19, 0x391E	; 0x80391e <actObj1.3951+0x15>
    1a30:	2c c5       	rjmp	.+2648   	; 0x248a <ProcessInput+0xc36>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    1a32:	8c 36       	cpi	r24, 0x6C	; 108
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <ProcessInput+0x1e4>
    1a36:	49 c1       	rjmp	.+658    	; 0x1cca <ProcessInput+0x476>
    1a38:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
            if (inputLen == 1) {
    1a3c:	b1 e0       	ldi	r27, 0x01	; 1
    1a3e:	fb 12       	cpse	r15, r27
    1a40:	f6 c0       	rjmp	.+492    	; 0x1c2e <ProcessInput+0x3da>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    1a42:	80 91 64 3a 	lds	r24, 0x3A64	; 0x803a64 <currObj+0x1c>
    1a46:	90 91 65 3a 	lds	r25, 0x3A65	; 0x803a65 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a4a:	20 91 56 3a 	lds	r18, 0x3A56	; 0x803a56 <currObj+0xe>
    1a4e:	30 91 57 3a 	lds	r19, 0x3A57	; 0x803a57 <currObj+0xf>
    1a52:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    1a56:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1a5a:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1a5e:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1a62:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    1a66:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a6a:	8b e5       	ldi	r24, 0x5B	; 91
    1a6c:	9a e7       	ldi	r25, 0x7A	; 122
    1a6e:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    1a72:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    1a7e:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	80 93 cc 39 	sts	0x39CC, r24	; 0x8039cc <reactStr+0x84>
    1a8a:	90 93 cd 39 	sts	0x39CD, r25	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1a8e:	2e ee       	ldi	r18, 0xEE	; 238
    1a90:	39 e7       	ldi	r19, 0x79	; 121
    1a92:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x6>
    1a96:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    1a9a:	25 e1       	ldi	r18, 0x15	; 21
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	20 93 8e 39 	sts	0x398E, r18	; 0x80398e <reactStr+0x46>
    1aa2:	30 93 8f 39 	sts	0x398F, r19	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    1aa6:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    1aaa:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	ee 0f       	add	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	e6 5f       	subi	r30, 0xF6	; 246
    1ab6:	f5 4c       	sbci	r31, 0xC5	; 197
    1ab8:	10 82       	st	Z, r1
    1aba:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    1abc:	34 e0       	ldi	r19, 0x04	; 4
    1abe:	63 2e       	mov	r6, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ac0:	49 e5       	ldi	r20, 0x59	; 89
    1ac2:	c4 2e       	mov	r12, r20
    1ac4:	4a e7       	ldi	r20, 0x7A	; 122
    1ac6:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    1ac8:	52 e0       	ldi	r21, 0x02	; 2
    1aca:	a5 2e       	mov	r10, r21
    1acc:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    1ace:	88 24       	eor	r8, r8
    1ad0:	83 94       	inc	r8
    1ad2:	91 2c       	mov	r9, r1
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    1ad4:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 01       	movw	r18, r24
    1adc:	22 0f       	add	r18, r18
    1ade:	33 1f       	adc	r19, r19
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	e6 5f       	subi	r30, 0xF6	; 246
    1ae4:	f5 4c       	sbci	r31, 0xC5	; 197
    1ae6:	7f 01       	movw	r14, r30
    1ae8:	40 81       	ld	r20, Z
    1aea:	51 81       	ldd	r21, Z+1	; 0x01
    1aec:	f9 01       	movw	r30, r18
    1aee:	e8 5f       	subi	r30, 0xF8	; 248
    1af0:	f5 4c       	sbci	r31, 0xC5	; 197
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	bc db       	rcall	.-2184   	; 0x1272 <FindChild>
    1afa:	d7 01       	movw	r26, r14
    1afc:	8d 93       	st	X+, r24
    1afe:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    1b00:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e6 5f       	subi	r30, 0xF6	; 246
    1b0c:	f5 4c       	sbci	r31, 0xC5	; 197
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <ProcessInput+0x2c4>
    1b16:	4a c0       	rjmp	.+148    	; 0x1bac <ProcessInput+0x358>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    1b18:	20 91 96 38 	lds	r18, 0x3896	; 0x803896 <inventory>
    1b1c:	30 91 97 38 	lds	r19, 0x3897	; 0x803897 <inventory+0x1>
    1b20:	82 17       	cp	r24, r18
    1b22:	93 07       	cpc	r25, r19
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <ProcessInput+0x2d4>
    1b26:	42 c0       	rjmp	.+132    	; 0x1bac <ProcessInput+0x358>
    1b28:	20 91 98 38 	lds	r18, 0x3898	; 0x803898 <inventory+0x2>
    1b2c:	30 91 99 38 	lds	r19, 0x3899	; 0x803899 <inventory+0x3>
    1b30:	82 17       	cp	r24, r18
    1b32:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    1b34:	d9 f1       	breq	.+118    	; 0x1bac <ProcessInput+0x358>
    1b36:	69 e0       	ldi	r22, 0x09	; 9
    1b38:	79 e3       	ldi	r23, 0x39	; 57
    1b3a:	b8 da       	rcall	.-2704   	; 0x10ac <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    1b3c:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3951+0x1a>
    1b40:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3951+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b44:	e6 2d       	mov	r30, r6
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	df 01       	movw	r26, r30
    1b4a:	aa 0f       	add	r26, r26
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	a8 5b       	subi	r26, 0xB8	; 184
    1b50:	b6 4c       	sbci	r27, 0xC6	; 198
    1b52:	20 91 15 39 	lds	r18, 0x3915	; 0x803915 <actObj1.3951+0xc>
    1b56:	30 91 16 39 	lds	r19, 0x3916	; 0x803916 <actObj1.3951+0xd>
    1b5a:	2d 93       	st	X+, r18
    1b5c:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    1b5e:	df 01       	movw	r26, r30
    1b60:	aa 0f       	add	r26, r26
    1b62:	bb 1f       	adc	r27, r27
    1b64:	a8 57       	subi	r26, 0x78	; 120
    1b66:	b6 4c       	sbci	r27, 0xC6	; 198
    1b68:	8d 93       	st	X+, r24
    1b6a:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	e8 53       	subi	r30, 0x38	; 56
    1b72:	f6 4c       	sbci	r31, 0xC6	; 198
    1b74:	10 82       	st	Z, r1
    1b76:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	86 0d       	add	r24, r6
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	63 94       	inc	r6
    1b80:	63 94       	inc	r6
    1b82:	fc 01       	movw	r30, r24
    1b84:	ee 0f       	add	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	e8 5b       	subi	r30, 0xB8	; 184
    1b8a:	f6 4c       	sbci	r31, 0xC6	; 198
    1b8c:	c0 82       	st	Z, r12
    1b8e:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    1b90:	fc 01       	movw	r30, r24
    1b92:	ee 0f       	add	r30, r30
    1b94:	ff 1f       	adc	r31, r31
    1b96:	e8 57       	subi	r30, 0x78	; 120
    1b98:	f6 4c       	sbci	r31, 0xC6	; 198
    1b9a:	a0 82       	st	Z, r10
    1b9c:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	e8 53       	subi	r30, 0x38	; 56
    1ba6:	f6 4c       	sbci	r31, 0xC6	; 198
    1ba8:	80 82       	st	Z, r8
    1baa:	91 82       	std	Z+1, r9	; 0x01
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                            //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    1bac:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <currDepth>
    1bb0:	82 2f       	mov	r24, r18
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	e6 5f       	subi	r30, 0xF6	; 246
    1bbc:	f5 4c       	sbci	r31, 0xC5	; 197
    1bbe:	40 81       	ld	r20, Z
    1bc0:	51 81       	ldd	r21, Z+1	; 0x01
    1bc2:	45 2b       	or	r20, r21
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <ProcessInput+0x374>
    1bc6:	86 cf       	rjmp	.-244    	; 0x1ad4 <ProcessInput+0x280>

                //Look back if not on level 0
                if (currDepth) {
    1bc8:	22 23       	and	r18, r18
                    PopulateObject(route[currDepth-1], &actObj1);
    1bca:	69 f1       	breq	.+90     	; 0x1c26 <ProcessInput+0x3d2>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	ea 5f       	subi	r30, 0xFA	; 250
    1bd4:	f5 4c       	sbci	r31, 0xC5	; 197
    1bd6:	69 e0       	ldi	r22, 0x09	; 9
    1bd8:	79 e3       	ldi	r23, 0x39	; 57
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	66 da       	rcall	.-2868   	; 0x10ac <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    1be0:	20 91 23 39 	lds	r18, 0x3923	; 0x803923 <actObj1.3951+0x1a>
    1be4:	30 91 24 39 	lds	r19, 0x3924	; 0x803924 <actObj1.3951+0x1b>
    1be8:	77 24       	eor	r7, r7
    1bea:	73 94       	inc	r7
    1bec:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1bee:	86 2d       	mov	r24, r6
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	e8 5b       	subi	r30, 0xB8	; 184
    1bfa:	f6 4c       	sbci	r31, 0xC6	; 198
    1bfc:	40 91 15 39 	lds	r20, 0x3915	; 0x803915 <actObj1.3951+0xc>
    1c00:	50 91 16 39 	lds	r21, 0x3916	; 0x803916 <actObj1.3951+0xd>
    1c04:	40 83       	st	Z, r20
    1c06:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    1c08:	fc 01       	movw	r30, r24
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	e8 57       	subi	r30, 0x78	; 120
    1c10:	f6 4c       	sbci	r31, 0xC6	; 198
    1c12:	20 83       	st	Z, r18
    1c14:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	e8 53       	subi	r30, 0x38	; 56
    1c1e:	f6 4c       	sbci	r31, 0xC6	; 198
    1c20:	10 82       	st	Z, r1
    1c22:	11 82       	std	Z+1, r1	; 0x01
    1c24:	46 c5       	rjmp	.+2700   	; 0x26b2 <ProcessInput+0xe5e>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    1c26:	77 24       	eor	r7, r7
    1c28:	7a 94       	dec	r7
    1c2a:	76 0c       	add	r7, r6
    1c2c:	42 c5       	rjmp	.+2692   	; 0x26b2 <ProcessInput+0xe5e>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    1c2e:	ee 2e       	mov	r14, r30
    1c30:	f1 2c       	mov	r15, r1
    1c32:	f7 01       	movw	r30, r14
    1c34:	ee 0f       	add	r30, r30
    1c36:	ff 1f       	adc	r31, r31
    1c38:	e8 5f       	subi	r30, 0xF8	; 248
    1c3a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	d8 01       	movw	r26, r16
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	6c 91       	ld	r22, X
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	13 db       	rcall	.-2522   	; 0x1272 <FindChild>
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	e6 5f       	subi	r30, 0xF6	; 246
    1c54:	f5 4c       	sbci	r31, 0xC5	; 197
    1c56:	80 83       	st	Z, r24
    1c58:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    1c5a:	90 91 8f 38 	lds	r25, 0x388F	; 0x80388f <currDepth>
    1c5e:	29 2f       	mov	r18, r25
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	e6 5f       	subi	r30, 0xF6	; 246
    1c6a:	f5 4c       	sbci	r31, 0xC5	; 197
    1c6c:	40 81       	ld	r20, Z
    1c6e:	51 81       	ldd	r21, Z+1	; 0x01
    1c70:	41 15       	cp	r20, r1
    1c72:	51 05       	cpc	r21, r1
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <ProcessInput+0x42a>
                    PopulateObject(route[currDepth+1], &actObj1);
    1c76:	69 e0       	ldi	r22, 0x09	; 9
    1c78:	79 e3       	ldi	r23, 0x39	; 57
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	1c c0       	rjmp	.+56     	; 0x1cb6 <ProcessInput+0x462>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    1c7e:	99 23       	and	r25, r25
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <ProcessInput+0x430>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    1c82:	3b c5       	rjmp	.+2678   	; 0x26fa <ProcessInput+0xea6>
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	f9 01       	movw	r30, r18
    1c8a:	ea 5f       	subi	r30, 0xFA	; 250
    1c8c:	f5 4c       	sbci	r31, 0xC5	; 197
    1c8e:	d8 01       	movw	r26, r16
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	6c 91       	ld	r22, X
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	98 da       	rcall	.-2768   	; 0x11ca <CheckLetter>
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <ProcessInput+0x44c>
                        PopulateObject(route[currDepth-1], &actObj1);
    1c9e:	b6 ce       	rjmp	.-660    	; 0x1a0c <ProcessInput+0x1b8>
    1ca0:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	ea 5f       	subi	r30, 0xFA	; 250
    1cac:	f5 4c       	sbci	r31, 0xC5	; 197
    1cae:	69 e0       	ldi	r22, 0x09	; 9
    1cb0:	79 e3       	ldi	r23, 0x39	; 57
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	fa d9       	rcall	.-3084   	; 0x10ac <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    1cb8:	80 91 25 39 	lds	r24, 0x3925	; 0x803925 <actObj1.3951+0x1c>
    1cbc:	90 91 26 39 	lds	r25, 0x3926	; 0x803926 <actObj1.3951+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1cc0:	20 91 17 39 	lds	r18, 0x3917	; 0x803917 <actObj1.3951+0xe>
    1cc4:	30 91 18 39 	lds	r19, 0x3918	; 0x803918 <actObj1.3951+0xf>
    1cc8:	e0 c3       	rjmp	.+1984   	; 0x248a <ProcessInput+0xc36>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    1cca:	80 37       	cpi	r24, 0x70	; 112
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <ProcessInput+0x47c>
    1cce:	96 c0       	rjmp	.+300    	; 0x1dfc <ProcessInput+0x5a8>
            if (inventory[0]&&inventory[1]) {
    1cd0:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    1cd4:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    1cd8:	89 2b       	or	r24, r25
    1cda:	79 f0       	breq	.+30     	; 0x1cfa <ProcessInput+0x4a6>
    1cdc:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    1ce0:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    1ce4:	89 2b       	or	r24, r25
    1ce6:	49 f0       	breq	.+18     	; 0x1cfa <ProcessInput+0x4a6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ce8:	85 e4       	ldi	r24, 0x45	; 69
    1cea:	98 e7       	ldi	r25, 0x78	; 120
    1cec:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1cf0:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1cf4:	89 e5       	ldi	r24, 0x59	; 89
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	51 ce       	rjmp	.-862    	; 0x199c <ProcessInput+0x148>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    1cfa:	b2 e0       	ldi	r27, 0x02	; 2
    1cfc:	fb 12       	cpse	r15, r27
    1cfe:	d9 cd       	rjmp	.-1102   	; 0x18b2 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], route[currDepth+1]);
    1d00:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <currDepth>
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 01       	movw	r18, r24
    1d08:	22 0f       	add	r18, r18
    1d0a:	33 1f       	adc	r19, r19
    1d0c:	f9 01       	movw	r30, r18
    1d0e:	e6 5f       	subi	r30, 0xF6	; 246
    1d10:	f5 4c       	sbci	r31, 0xC5	; 197
    1d12:	7f 01       	movw	r14, r30
    1d14:	40 81       	ld	r20, Z
    1d16:	51 81       	ldd	r21, Z+1	; 0x01
    1d18:	f9 01       	movw	r30, r18
    1d1a:	e8 5f       	subi	r30, 0xF8	; 248
    1d1c:	f5 4c       	sbci	r31, 0xC5	; 197
    1d1e:	d8 01       	movw	r26, r16
    1d20:	11 96       	adiw	r26, 0x01	; 1
    1d22:	6c 91       	ld	r22, X
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	a4 da       	rcall	.-2744   	; 0x1272 <FindChild>
    1d2a:	f7 01       	movw	r30, r14
    1d2c:	80 83       	st	Z, r24
    1d2e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    1d30:	20 91 8f 38 	lds	r18, 0x388F	; 0x80388f <currDepth>
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	22 0f       	add	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	f9 01       	movw	r30, r18
    1d40:	e8 5f       	subi	r30, 0xF8	; 248
    1d42:	f5 4c       	sbci	r31, 0xC5	; 197
    1d44:	80 81       	ld	r24, Z
    1d46:	91 81       	ldd	r25, Z+1	; 0x01
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <ProcessInput+0x4fa>
    1d4c:	b4 c3       	rjmp	.+1896   	; 0x24b6 <ProcessInput+0xc62>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    1d4e:	40 91 96 38 	lds	r20, 0x3896	; 0x803896 <inventory>
    1d52:	50 91 97 38 	lds	r21, 0x3897	; 0x803897 <inventory+0x1>
    1d56:	84 17       	cp	r24, r20
    1d58:	95 07       	cpc	r25, r21
    1d5a:	39 f0       	breq	.+14     	; 0x1d6a <ProcessInput+0x516>
    1d5c:	40 91 98 38 	lds	r20, 0x3898	; 0x803898 <inventory+0x2>
    1d60:	50 91 99 38 	lds	r21, 0x3899	; 0x803899 <inventory+0x3>
    1d64:	84 17       	cp	r24, r20
    1d66:	95 07       	cpc	r25, r21
    1d68:	c1 f4       	brne	.+48     	; 0x1d9a <ProcessInput+0x546>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1d6a:	80 e2       	ldi	r24, 0x20	; 32
    1d6c:	98 e7       	ldi	r25, 0x78	; 120
    1d6e:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1d72:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1d76:	85 e2       	ldi	r24, 0x25	; 37
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1d7e:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], route[currDepth+1]);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    1d8a:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
    1d8e:	f9 01       	movw	r30, r18
    1d90:	e8 5f       	subi	r30, 0xF8	; 248
    1d92:	f5 4c       	sbci	r31, 0xC5	; 197
    1d94:	10 82       	st	Z, r1
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    1d96:	11 82       	std	Z+1, r1	; 0x01
    1d98:	0b ce       	rjmp	.-1002   	; 0x19b0 <ProcessInput+0x15c>
    1d9a:	69 e0       	ldi	r22, 0x09	; 9
    1d9c:	79 e3       	ldi	r23, 0x39	; 57
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    1d9e:	86 d9       	rcall	.-3316   	; 0x10ac <PopulateObject>
    1da0:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3951+0x7>
    1da4:	02 da       	rcall	.-3068   	; 0x11aa <CheckState>
    1da6:	88 23       	and	r24, r24
    1da8:	09 f4       	brne	.+2      	; 0x1dac <ProcessInput+0x558>
    1daa:	67 c3       	rjmp	.+1742   	; 0x247a <ProcessInput+0xc26>
                            if (actObj1.byteField[ITEM_NR]) {
    1dac:	80 91 14 39 	lds	r24, 0x3914	; 0x803914 <actObj1.3951+0xb>
    1db0:	88 23       	and	r24, r24
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <ProcessInput+0x562>
    1db4:	7e cd       	rjmp	.-1284   	; 0x18b2 <ProcessInput+0x5e>
                                if (inventory[0]) {
    1db6:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    1dba:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    1dbe:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
                                    inventory[1] = route[currDepth+1];
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	ee 0f       	add	r30, r30
    1dc6:	ff 1f       	adc	r31, r31
    1dc8:	e6 5f       	subi	r30, 0xF6	; 246
    1dca:	f5 4c       	sbci	r31, 0xC5	; 197
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    1dcc:	89 2b       	or	r24, r25
    1dce:	39 f0       	breq	.+14     	; 0x1dde <ProcessInput+0x58a>
                                    inventory[1] = route[currDepth+1];
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	80 93 98 38 	sts	0x3898, r24	; 0x803898 <inventory+0x2>
    1dd8:	90 93 99 38 	sts	0x3899, r25	; 0x803899 <inventory+0x3>
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <ProcessInput+0x596>
                                } else {
                                    inventory[0] = route[currDepth+1];
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	80 93 96 38 	sts	0x3896, r24	; 0x803896 <inventory>
    1de6:	90 93 97 38 	sts	0x3897, r25	; 0x803897 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	98 e7       	ldi	r25, 0x78	; 120
    1dee:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1df2:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1df6:	86 e1       	ldi	r24, 0x16	; 22
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	50 c2       	rjmp	.+1184   	; 0x229c <ProcessInput+0xa48>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    1dfc:	84 36       	cpi	r24, 0x64	; 100
    1dfe:	d9 f4       	brne	.+54     	; 0x1e36 <ProcessInput+0x5e2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    1e00:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    1e04:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <ProcessInput+0x5ba>
    1e0c:	79 c4       	rjmp	.+2290   	; 0x2700 <ProcessInput+0xeac>
    1e0e:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    1e12:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    1e16:	89 2b       	or	r24, r25
    1e18:	49 f4       	brne	.+18     	; 0x1e2c <ProcessInput+0x5d8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e1a:	84 ee       	ldi	r24, 0xE4	; 228
    1e1c:	97 e7       	ldi	r25, 0x77	; 119
    1e1e:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1e22:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1e26:	86 e2       	ldi	r24, 0x26	; 38
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	b8 cd       	rjmp	.-1168   	; 0x199c <ProcessInput+0x148>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    1e2c:	f2 e0       	ldi	r31, 0x02	; 2
    1e2e:	ff 16       	cp	r15, r31
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <ProcessInput+0x5e0>
    1e32:	ca c4       	rjmp	.+2452   	; 0x27c8 <ProcessInput+0xf74>
    1e34:	3e cd       	rjmp	.-1412   	; 0x18b2 <ProcessInput+0x5e>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    1e36:	89 36       	cpi	r24, 0x69	; 105
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <ProcessInput+0x5e8>
    1e3a:	7a c0       	rjmp	.+244    	; 0x1f30 <ProcessInput+0x6dc>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    1e3c:	80 91 96 38 	lds	r24, 0x3896	; 0x803896 <inventory>
    1e40:	90 91 97 38 	lds	r25, 0x3897	; 0x803897 <inventory+0x1>
    1e44:	89 2b       	or	r24, r25
    1e46:	31 f4       	brne	.+12     	; 0x1e54 <ProcessInput+0x600>
    1e48:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    1e4c:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    1e50:	89 2b       	or	r24, r25
    1e52:	19 f3       	breq	.-58     	; 0x1e1a <ProcessInput+0x5c6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e54:	8a e0       	ldi	r24, 0x0A	; 10
    1e56:	98 e7       	ldi	r25, 0x78	; 120
    1e58:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    1e5c:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    1e60:	86 e1       	ldi	r24, 0x16	; 22
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    1e68:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    1e74:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
    1e78:	26 e9       	ldi	r18, 0x96	; 150
    1e7a:	e2 2e       	mov	r14, r18
    1e7c:	28 e3       	ldi	r18, 0x38	; 56
    1e7e:	f2 2e       	mov	r15, r18
    1e80:	3a e9       	ldi	r19, 0x9A	; 154
    1e82:	63 2e       	mov	r6, r19
    1e84:	38 e3       	ldi	r19, 0x38	; 56
    1e86:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    1e88:	42 e0       	ldi	r20, 0x02	; 2
    1e8a:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e8c:	59 e5       	ldi	r21, 0x59	; 89
    1e8e:	c5 2e       	mov	r12, r21
    1e90:	5a e7       	ldi	r21, 0x7A	; 122
    reactStr[1][number]=length;
    1e92:	d5 2e       	mov	r13, r21
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	a6 2e       	mov	r10, r22
    reactStr[2][number]=type;
    1e98:	b1 2c       	mov	r11, r1
    1e9a:	88 24       	eor	r8, r8
    1e9c:	83 94       	inc	r8
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    1e9e:	91 2c       	mov	r9, r1
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	91 91       	ld	r25, Z+
    1ea6:	7f 01       	movw	r14, r30
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
                        PopulateObject(inventory[x], &actObj1);
    1eaa:	d1 f1       	breq	.+116    	; 0x1f20 <ProcessInput+0x6cc>
    1eac:	69 e0       	ldi	r22, 0x09	; 9
    1eae:	79 e3       	ldi	r23, 0x39	; 57
    1eb0:	fd d8       	rcall	.-3590   	; 0x10ac <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    1eb2:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3951+0x1a>
    1eb6:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3951+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1eba:	e5 2d       	mov	r30, r5
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	df 01       	movw	r26, r30
    1ec0:	aa 0f       	add	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	a8 5b       	subi	r26, 0xB8	; 184
    1ec6:	b6 4c       	sbci	r27, 0xC6	; 198
    1ec8:	20 91 15 39 	lds	r18, 0x3915	; 0x803915 <actObj1.3951+0xc>
    1ecc:	30 91 16 39 	lds	r19, 0x3916	; 0x803916 <actObj1.3951+0xd>
    1ed0:	2d 93       	st	X+, r18
    1ed2:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    1ed4:	df 01       	movw	r26, r30
    1ed6:	aa 0f       	add	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	a8 57       	subi	r26, 0x78	; 120
    1edc:	b6 4c       	sbci	r27, 0xC6	; 198
    1ede:	8d 93       	st	X+, r24
    1ee0:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	e8 53       	subi	r30, 0x38	; 56
    1ee8:	f6 4c       	sbci	r31, 0xC6	; 198
    1eea:	10 82       	st	Z, r1
    1eec:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1eee:	e1 e0       	ldi	r30, 0x01	; 1
    1ef0:	e5 0d       	add	r30, r5
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	53 94       	inc	r5
    1ef6:	53 94       	inc	r5
    1ef8:	df 01       	movw	r26, r30
    1efa:	aa 0f       	add	r26, r26
    1efc:	bb 1f       	adc	r27, r27
    1efe:	a8 5b       	subi	r26, 0xB8	; 184
    1f00:	b6 4c       	sbci	r27, 0xC6	; 198
    1f02:	cd 92       	st	X+, r12
    1f04:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    1f06:	df 01       	movw	r26, r30
    1f08:	aa 0f       	add	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	a8 57       	subi	r26, 0x78	; 120
    1f0e:	b6 4c       	sbci	r27, 0xC6	; 198
    1f10:	ad 92       	st	X+, r10
    1f12:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	e8 53       	subi	r30, 0x38	; 56
    1f1a:	f6 4c       	sbci	r31, 0xC6	; 198
    1f1c:	80 82       	st	Z, r8
    1f1e:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    1f20:	6e 14       	cp	r6, r14
    1f22:	7f 04       	cpc	r7, r15
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <ProcessInput+0x6d4>
    1f26:	bc cf       	rjmp	.-136    	; 0x1ea0 <ProcessInput+0x64c>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    1f28:	77 24       	eor	r7, r7
    1f2a:	7a 94       	dec	r7
    1f2c:	75 0c       	add	r7, r5
    1f2e:	c1 c3       	rjmp	.+1922   	; 0x26b2 <ProcessInput+0xe5e>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    1f30:	9c e8       	ldi	r25, 0x8C	; 140
    1f32:	98 0f       	add	r25, r24
    1f34:	92 30       	cpi	r25, 0x02	; 2
    1f36:	28 f0       	brcs	.+10     	; 0x1f42 <ProcessInput+0x6ee>
    1f38:	87 36       	cpi	r24, 0x67	; 103
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <ProcessInput+0x6ee>
    1f3c:	82 37       	cpi	r24, 0x72	; 114
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <ProcessInput+0x6ee>
    1f40:	c3 c2       	rjmp	.+1414   	; 0x24c8 <ProcessInput+0xc74>
            if ((inputLen<2)||(inputLen>3)) {
    1f42:	8e ef       	ldi	r24, 0xFE	; 254
    1f44:	8f 0d       	add	r24, r15
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <ProcessInput+0x6f8>
    1f4a:	b3 cc       	rjmp	.-1690   	; 0x18b2 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    1f4c:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1f50:	ce 2e       	mov	r12, r30
    1f52:	d1 2c       	mov	r13, r1
    1f54:	d8 01       	movw	r26, r16
    1f56:	af 0d       	add	r26, r15
    1f58:	b1 1d       	adc	r27, r1
    1f5a:	11 97       	sbiw	r26, 0x01	; 1
    1f5c:	f6 01       	movw	r30, r12
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	e8 5f       	subi	r30, 0xF8	; 248
    1f64:	f5 4c       	sbci	r31, 0xC5	; 197
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	6c 91       	ld	r22, X
    1f6c:	80 81       	ld	r24, Z
    1f6e:	91 81       	ldd	r25, Z+1	; 0x01
    1f70:	80 d9       	rcall	.-3328   	; 0x1272 <FindChild>
    1f72:	f6 01       	movw	r30, r12
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	e6 5f       	subi	r30, 0xF6	; 246
    1f7a:	f5 4c       	sbci	r31, 0xC5	; 197
    1f7c:	80 83       	st	Z, r24
    1f7e:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    1f80:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	e6 5f       	subi	r30, 0xF6	; 246
    1f8c:	f5 4c       	sbci	r31, 0xC5	; 197
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <ProcessInput+0x744>
    1f96:	86 c2       	rjmp	.+1292   	; 0x24a4 <ProcessInput+0xc50>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    1f98:	f3 e0       	ldi	r31, 0x03	; 3
    1f9a:	ff 12       	cpse	r15, r31
    1f9c:	6b c1       	rjmp	.+726    	; 0x2274 <ProcessInput+0xa20>
    1f9e:	d8 01       	movw	r26, r16
    1fa0:	2c 91       	ld	r18, X
    1fa2:	25 37       	cpi	r18, 0x75	; 117
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <ProcessInput+0x758>
    1fa6:	27 36       	cpi	r18, 0x67	; 103
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <ProcessInput+0x758>
    1faa:	64 c1       	rjmp	.+712    	; 0x2274 <ProcessInput+0xa20>
    1fac:	61 2c       	mov	r6, r1
    1fae:	77 24       	eor	r7, r7
    1fb0:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fb2:	54 e6       	ldi	r21, 0x64	; 100
    1fb4:	c5 2e       	mov	r12, r21
    1fb6:	59 e7       	ldi	r21, 0x79	; 121
    1fb8:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    1fba:	61 e2       	ldi	r22, 0x21	; 33
    1fbc:	a6 2e       	mov	r10, r22
    1fbe:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    1fc0:	88 24       	eor	r8, r8
    1fc2:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    1fc4:	91 2c       	mov	r9, r1
    1fc6:	e6 2c       	mov	r14, r6
    1fc8:	f1 2c       	mov	r15, r1
    1fca:	c7 01       	movw	r24, r14
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	ea 56       	subi	r30, 0x6A	; 106
    1fd4:	f7 4c       	sbci	r31, 0xC7	; 199
    1fd6:	7f 01       	movw	r14, r30
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
                                if (CheckLetter(inventory[x], data[1])) {
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	79 f0       	breq	.+30     	; 0x1ffe <ProcessInput+0x7aa>
    1fe0:	d8 01       	movw	r26, r16
    1fe2:	11 96       	adiw	r26, 0x01	; 1
    1fe4:	6c 91       	ld	r22, X
    1fe6:	f1 d8       	rcall	.-3614   	; 0x11ca <CheckLetter>
    1fe8:	88 23       	and	r24, r24
                                    PopulateObject(inventory[x], &actObj2);
    1fea:	49 f0       	breq	.+18     	; 0x1ffe <ProcessInput+0x7aa>
    1fec:	6e ed       	ldi	r22, 0xDE	; 222
    1fee:	78 e3       	ldi	r23, 0x38	; 56
    1ff0:	f7 01       	movw	r30, r14
    1ff2:	80 81       	ld	r24, Z
    1ff4:	91 81       	ldd	r25, Z+1	; 0x01
    1ff6:	5a d8       	rcall	.-3916   	; 0x10ac <PopulateObject>
                                    x = 2;
    1ff8:	32 e0       	ldi	r19, 0x02	; 2
    1ffa:	63 2e       	mov	r6, r19
    1ffc:	1e c0       	rjmp	.+60     	; 0x203a <ProcessInput+0x7e6>
                                }
                            }
                            if (x == 1) { 
    1ffe:	f1 e0       	ldi	r31, 0x01	; 1
    2000:	6f 12       	cpse	r6, r31
    2002:	1a c0       	rjmp	.+52     	; 0x2038 <ProcessInput+0x7e4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2004:	e7 2d       	mov	r30, r7
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	df 01       	movw	r26, r30
    200a:	aa 0f       	add	r26, r26
    200c:	bb 1f       	adc	r27, r27
    200e:	a8 5b       	subi	r26, 0xB8	; 184
    2010:	b6 4c       	sbci	r27, 0xC6	; 198
    2012:	cd 92       	st	X+, r12
    2014:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2016:	df 01       	movw	r26, r30
    2018:	aa 0f       	add	r26, r26
    201a:	bb 1f       	adc	r27, r27
    201c:	a8 57       	subi	r26, 0x78	; 120
    201e:	b6 4c       	sbci	r27, 0xC6	; 198
    2020:	ad 92       	st	X+, r10
    2022:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	e8 53       	subi	r30, 0x38	; 56
    202a:	f6 4c       	sbci	r31, 0xC6	; 198
    202c:	80 82       	st	Z, r8
    202e:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2030:	d8 01       	movw	r26, r16
    2032:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2034:	73 94       	inc	r7
    2036:	01 c0       	rjmp	.+2      	; 0x203a <ProcessInput+0x7e6>
    2038:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    203a:	63 94       	inc	r6
    203c:	b1 e0       	ldi	r27, 0x01	; 1
    203e:	6b 16       	cp	r6, r27
    2040:	09 f4       	brne	.+2      	; 0x2044 <ProcessInput+0x7f0>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2042:	c1 cf       	rjmp	.-126    	; 0x1fc6 <ProcessInput+0x772>
    2044:	f8 01       	movw	r30, r16
    2046:	80 81       	ld	r24, Z
    2048:	88 23       	and	r24, r24
    204a:	09 f4       	brne	.+2      	; 0x204e <ProcessInput+0x7fa>
                            PopulateObject(route[currDepth+1], &actObj1);
    204c:	32 c3       	rjmp	.+1636   	; 0x26b2 <ProcessInput+0xe5e>
    204e:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	e6 5f       	subi	r30, 0xF6	; 246
    205a:	f5 4c       	sbci	r31, 0xC5	; 197
    205c:	69 e0       	ldi	r22, 0x09	; 9
    205e:	79 e3       	ldi	r23, 0x39	; 57
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	23 d8       	rcall	.-4026   	; 0x10ac <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2066:	e0 90 27 39 	lds	r14, 0x3927	; 0x803927 <actObj1.3951+0x1e>
    206a:	f0 90 28 39 	lds	r15, 0x3928	; 0x803928 <actObj1.3951+0x1f>
    206e:	f1 e0       	ldi	r31, 0x01	; 1
    2070:	ef 16       	cp	r14, r31
    2072:	f1 04       	cpc	r15, r1
    2074:	09 f0       	breq	.+2      	; 0x2078 <ProcessInput+0x824>
    2076:	9b c0       	rjmp	.+310    	; 0x21ae <ProcessInput+0x95a>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2078:	98 01       	movw	r18, r16
    207a:	2e 5f       	subi	r18, 0xFE	; 254
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	61 e0       	ldi	r22, 0x01	; 1
    2082:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3951+0x10>
    2086:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3951+0x11>
    208a:	0e 94 4c 07 	call	0xe98	; 0xe98 <ExtEERead>
                                if (data[2] == '1') {
    208e:	d8 01       	movw	r26, r16
    2090:	12 96       	adiw	r26, 0x02	; 2
    2092:	4c 91       	ld	r20, X
    2094:	21 e0       	ldi	r18, 0x01	; 1
    2096:	27 0d       	add	r18, r7
    2098:	87 2d       	mov	r24, r7
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	41 33       	cpi	r20, 0x31	; 49
    209e:	09 f0       	breq	.+2      	; 0x20a2 <ProcessInput+0x84e>
    20a0:	6b c0       	rjmp	.+214    	; 0x2178 <ProcessInput+0x924>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    20a2:	30 91 e9 38 	lds	r19, 0x38E9	; 0x8038e9 <actObj2.3952+0xb>
                                    if ((item < 31)||(item > 34)) {
    20a6:	51 ee       	ldi	r21, 0xE1	; 225
    20a8:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20aa:	fc 01       	movw	r30, r24
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	e8 5b       	subi	r30, 0xB8	; 184
    20b2:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    20b4:	54 30       	cpi	r21, 0x04	; 4
    20b6:	60 f0       	brcs	.+24     	; 0x20d0 <ProcessInput+0x87c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20b8:	44 e0       	ldi	r20, 0x04	; 4
    20ba:	59 e7       	ldi	r21, 0x79	; 121
    20bc:	40 83       	st	Z, r20
    20be:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    20c0:	fc 01       	movw	r30, r24
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	e8 57       	subi	r30, 0x78	; 120
    20c8:	f6 4c       	sbci	r31, 0xC6	; 198
    20ca:	4a e1       	ldi	r20, 0x1A	; 26
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	64 c0       	rjmp	.+200    	; 0x2198 <ProcessInput+0x944>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20d0:	6e e8       	ldi	r22, 0x8E	; 142
    20d2:	75 e7       	ldi	r23, 0x75	; 117
    20d4:	60 83       	st	Z, r22
    20d6:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    20d8:	fc 01       	movw	r30, r24
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	e8 57       	subi	r30, 0x78	; 120
    20e0:	f6 4c       	sbci	r31, 0xC6	; 198
    20e2:	62 eb       	ldi	r22, 0xB2	; 178
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	60 83       	st	Z, r22
    20e8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	fc 01       	movw	r30, r24
    20f0:	e8 53       	subi	r30, 0x38	; 56
    20f2:	f6 4c       	sbci	r31, 0xC6	; 198
    20f4:	e0 82       	st	Z, r14
    20f6:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20f8:	82 2f       	mov	r24, r18
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e8 5b       	subi	r30, 0xB8	; 184
    2104:	f6 4c       	sbci	r31, 0xC6	; 198
    2106:	6b e5       	ldi	r22, 0x5B	; 91
    2108:	7a e7       	ldi	r23, 0x7A	; 122
    210a:	60 83       	st	Z, r22
    210c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    210e:	fc 01       	movw	r30, r24
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	e8 57       	subi	r30, 0x78	; 120
    2116:	f6 4c       	sbci	r31, 0xC6	; 198
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	60 83       	st	Z, r22
    211e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	fc 01       	movw	r30, r24
    2126:	e8 53       	subi	r30, 0x38	; 56
    2128:	f6 4c       	sbci	r31, 0xC6	; 198
    212a:	e0 82       	st	Z, r14
    212c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	87 0d       	add	r24, r7
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	b3 e0       	ldi	r27, 0x03	; 3
    2136:	7b 0e       	add	r7, r27
    2138:	fc 01       	movw	r30, r24
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	e8 5b       	subi	r30, 0xB8	; 184
    2140:	f6 4c       	sbci	r31, 0xC6	; 198
    2142:	60 eb       	ldi	r22, 0xB0	; 176
    2144:	78 e7       	ldi	r23, 0x78	; 120
    2146:	60 83       	st	Z, r22
    2148:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    214a:	fc 01       	movw	r30, r24
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	e8 57       	subi	r30, 0x78	; 120
    2152:	f6 4c       	sbci	r31, 0xC6	; 198
    2154:	62 e1       	ldi	r22, 0x12	; 18
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	60 83       	st	Z, r22
    215a:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	fc 01       	movw	r30, r24
    2162:	e8 53       	subi	r30, 0x38	; 56
    2164:	f6 4c       	sbci	r31, 0xC6	; 198
    2166:	e0 82       	st	Z, r14
    2168:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    216a:	40 93 37 39 	sts	0x3937, r20	; 0x803937 <specialInput>
                                        specialInput[1] = item;
    216e:	30 93 38 39 	sts	0x3938, r19	; 0x803938 <specialInput+0x1>
                                        specialInput[2] = 0;
    2172:	10 92 39 39 	sts	0x3939, r1	; 0x803939 <specialInput+0x2>
    2176:	9d c2       	rjmp	.+1338   	; 0x26b2 <ProcessInput+0xe5e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2178:	fc 01       	movw	r30, r24
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e8 5b       	subi	r30, 0xB8	; 184
    2180:	f6 4c       	sbci	r31, 0xC6	; 198
    2182:	40 e4       	ldi	r20, 0x40	; 64
    2184:	56 e7       	ldi	r21, 0x76	; 118
    2186:	40 83       	st	Z, r20
    2188:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    218a:	fc 01       	movw	r30, r24
    218c:	ee 0f       	add	r30, r30
    218e:	ff 1f       	adc	r31, r31
    2190:	e8 57       	subi	r30, 0x78	; 120
    2192:	f6 4c       	sbci	r31, 0xC6	; 198
    2194:	42 e4       	ldi	r20, 0x42	; 66
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	40 83       	st	Z, r20
    219a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	fc 01       	movw	r30, r24
    21a2:	e8 53       	subi	r30, 0x38	; 56
    21a4:	f6 4c       	sbci	r31, 0xC6	; 198
    21a6:	e0 82       	st	Z, r14
    21a8:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[0] = '1';
                                        specialInput[1] = item;
                                        specialInput[2] = 0;
                                    }
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    21aa:	72 2e       	mov	r7, r18
    21ac:	82 c2       	rjmp	.+1284   	; 0x26b2 <ProcessInput+0xe5e>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    21ae:	90 91 12 39 	lds	r25, 0x3912	; 0x803912 <actObj1.3951+0x9>
    21b2:	80 91 e9 38 	lds	r24, 0x38E9	; 0x8038e9 <actObj2.3952+0xb>
    21b6:	98 13       	cpse	r25, r24
    21b8:	24 c0       	rjmp	.+72     	; 0x2202 <ProcessInput+0x9ae>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    21ba:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <actObj1.3951+0xa>
    21be:	0e 94 cd 08 	call	0x119a	; 0x119a <UpdateState>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    21c2:	20 91 2f 39 	lds	r18, 0x392F	; 0x80392f <actObj1.3951+0x26>
    21c6:	30 91 30 39 	lds	r19, 0x3930	; 0x803930 <actObj1.3951+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    21ca:	87 2d       	mov	r24, r7
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	fc 01       	movw	r30, r24
    21d0:	ee 0f       	add	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	e8 5b       	subi	r30, 0xB8	; 184
    21d6:	f6 4c       	sbci	r31, 0xC6	; 198
    21d8:	40 91 21 39 	lds	r20, 0x3921	; 0x803921 <actObj1.3951+0x18>
    21dc:	50 91 22 39 	lds	r21, 0x3922	; 0x803922 <actObj1.3951+0x19>
    21e0:	40 83       	st	Z, r20
    21e2:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    21e4:	fc 01       	movw	r30, r24
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	e8 57       	subi	r30, 0x78	; 120
    21ec:	f6 4c       	sbci	r31, 0xC6	; 198
    21ee:	20 83       	st	Z, r18
    21f0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	fc 01       	movw	r30, r24
    21f8:	e8 53       	subi	r30, 0x38	; 56
    21fa:	f6 4c       	sbci	r31, 0xC6	; 198
    21fc:	10 82       	st	Z, r1
    21fe:	11 82       	std	Z+1, r1	; 0x01
    2200:	37 c0       	rjmp	.+110    	; 0x2270 <ProcessInput+0xa1c>
                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
    2202:	f8 01       	movw	r30, r16
    2204:	80 81       	ld	r24, Z
    2206:	85 37       	cpi	r24, 0x75	; 117
    2208:	99 f4       	brne	.+38     	; 0x2230 <ProcessInput+0x9dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    220a:	87 2d       	mov	r24, r7
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	fc 01       	movw	r30, r24
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	e8 5b       	subi	r30, 0xB8	; 184
    2216:	f6 4c       	sbci	r31, 0xC6	; 198
    2218:	24 e0       	ldi	r18, 0x04	; 4
    221a:	39 e7       	ldi	r19, 0x79	; 121
    221c:	20 83       	st	Z, r18
    221e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2220:	fc 01       	movw	r30, r24
    2222:	ee 0f       	add	r30, r30
    2224:	ff 1f       	adc	r31, r31
    2226:	e8 57       	subi	r30, 0x78	; 120
    2228:	f6 4c       	sbci	r31, 0xC6	; 198
    222a:	2a e1       	ldi	r18, 0x1A	; 26
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	15 c0       	rjmp	.+42     	; 0x225a <ProcessInput+0xa06>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2230:	87 36       	cpi	r24, 0x67	; 103
    2232:	09 f0       	breq	.+2      	; 0x2236 <ProcessInput+0x9e2>
    2234:	3e c2       	rjmp	.+1148   	; 0x26b2 <ProcessInput+0xe5e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2236:	87 2d       	mov	r24, r7
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	fc 01       	movw	r30, r24
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	e8 5b       	subi	r30, 0xB8	; 184
    2242:	f6 4c       	sbci	r31, 0xC6	; 198
    2244:	2d ed       	ldi	r18, 0xDD	; 221
    2246:	36 e7       	ldi	r19, 0x76	; 118
    2248:	20 83       	st	Z, r18
    224a:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    224c:	fc 01       	movw	r30, r24
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	e8 57       	subi	r30, 0x78	; 120
    2254:	f6 4c       	sbci	r31, 0xC6	; 198
    2256:	28 e2       	ldi	r18, 0x28	; 40
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	20 83       	st	Z, r18
    225c:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	fc 01       	movw	r30, r24
    2264:	e8 53       	subi	r30, 0x38	; 56
    2266:	f6 4c       	sbci	r31, 0xC6	; 198
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	80 83       	st	Z, r24
    226e:	91 83       	std	Z+1, r25	; 0x01
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2270:	73 94       	inc	r7
    2272:	1f c2       	rjmp	.+1086   	; 0x26b2 <ProcessInput+0xe5e>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2274:	69 e0       	ldi	r22, 0x09	; 9
    2276:	79 e3       	ldi	r23, 0x39	; 57
    2278:	0e 94 56 08 	call	0x10ac	; 0x10ac <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    227c:	d8 01       	movw	r26, r16
    227e:	8c 91       	ld	r24, X
    2280:	84 37       	cpi	r24, 0x74	; 116
    2282:	69 f5       	brne	.+90     	; 0x22de <ProcessInput+0xa8a>
    2284:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3951+0x8>
    2288:	83 fd       	sbrc	r24, 3
    228a:	52 c0       	rjmp	.+164    	; 0x2330 <ProcessInput+0xadc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    228c:	8e e1       	ldi	r24, 0x1E	; 30
    228e:	99 e7       	ldi	r25, 0x79	; 121
    2290:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2294:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2298:	8e e1       	ldi	r24, 0x1E	; 30
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    22a0:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    22ac:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    22b0:	80 91 23 39 	lds	r24, 0x3923	; 0x803923 <actObj1.3951+0x1a>
    22b4:	90 91 24 39 	lds	r25, 0x3924	; 0x803924 <actObj1.3951+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22b8:	20 91 15 39 	lds	r18, 0x3915	; 0x803915 <actObj1.3951+0xc>
    22bc:	30 91 16 39 	lds	r19, 0x3916	; 0x803916 <actObj1.3951+0xd>
    22c0:	20 93 4c 39 	sts	0x394C, r18	; 0x80394c <reactStr+0x4>
    22c4:	30 93 4d 39 	sts	0x394D, r19	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    22c8:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    22cc:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    22d0:	10 92 cc 39 	sts	0x39CC, r1	; 0x8039cc <reactStr+0x84>
    22d4:	10 92 cd 39 	sts	0x39CD, r1	; 0x8039cd <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    22d8:	63 e0       	ldi	r22, 0x03	; 3
    22da:	76 2e       	mov	r7, r22
    22dc:	ea c1       	rjmp	.+980    	; 0x26b2 <ProcessInput+0xe5e>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    22de:	85 37       	cpi	r24, 0x75	; 117
    22e0:	69 f4       	brne	.+26     	; 0x22fc <ProcessInput+0xaa8>
    22e2:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3951+0x8>
    22e6:	84 fd       	sbrc	r24, 4
    22e8:	23 c0       	rjmp	.+70     	; 0x2330 <ProcessInput+0xadc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22ea:	84 e0       	ldi	r24, 0x04	; 4
    22ec:	99 e7       	ldi	r25, 0x79	; 121
    22ee:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    22f2:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    22f6:	8a e1       	ldi	r24, 0x1A	; 26
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	50 cb       	rjmp	.-2400   	; 0x199c <ProcessInput+0x148>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    22fc:	82 37       	cpi	r24, 0x72	; 114
    22fe:	69 f4       	brne	.+26     	; 0x231a <ProcessInput+0xac6>
    2300:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <actObj1.3951+0x8>
    2304:	85 fd       	sbrc	r24, 5
    2306:	14 c0       	rjmp	.+40     	; 0x2330 <ProcessInput+0xadc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2308:	89 ee       	ldi	r24, 0xE9	; 233
    230a:	98 e7       	ldi	r25, 0x78	; 120
    230c:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2310:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2314:	8b e1       	ldi	r24, 0x1B	; 27
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	41 cb       	rjmp	.-2430   	; 0x199c <ProcessInput+0x148>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    231a:	87 36       	cpi	r24, 0x67	; 103
    231c:	49 f4       	brne	.+18     	; 0x2330 <ProcessInput+0xadc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    231e:	8d ed       	ldi	r24, 0xDD	; 221
    2320:	96 e7       	ldi	r25, 0x76	; 118
    2322:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2326:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    232a:	88 e2       	ldi	r24, 0x28	; 40
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	36 cb       	rjmp	.-2452   	; 0x199c <ProcessInput+0x148>
                        } else if (data[0] == 'g'){ 
                            SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2330:	e0 90 27 39 	lds	r14, 0x3927	; 0x803927 <actObj1.3951+0x1e>
    2334:	f0 90 28 39 	lds	r15, 0x3928	; 0x803928 <actObj1.3951+0x1f>
    2338:	b1 e0       	ldi	r27, 0x01	; 1
    233a:	eb 16       	cp	r14, r27
    233c:	f1 04       	cpc	r15, r1
    233e:	09 f5       	brne	.+66     	; 0x2382 <ProcessInput+0xb2e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2340:	98 01       	movw	r18, r16
    2342:	2e 5f       	subi	r18, 0xFE	; 254
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3951+0x10>
    234e:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3951+0x11>
    2352:	0e 94 4c 07 	call	0xe98	; 0xe98 <ExtEERead>
                                if (data[2] == '1') {
    2356:	f8 01       	movw	r30, r16
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	81 33       	cpi	r24, 0x31	; 49
    235c:	09 f0       	breq	.+2      	; 0x2360 <ProcessInput+0xb0c>
    235e:	56 cb       	rjmp	.-2388   	; 0x1a0c <ProcessInput+0x1b8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2360:	83 e6       	ldi	r24, 0x63	; 99
    2362:	95 e7       	ldi	r25, 0x75	; 117
    2364:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2368:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    236c:	8b e2       	ldi	r24, 0x2B	; 43
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2374:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2378:	e0 92 ca 39 	sts	0x39CA, r14	; 0x8039ca <reactStr+0x82>
    237c:	f0 92 cb 39 	sts	0x39CB, r15	; 0x8039cb <reactStr+0x83>
    2380:	17 cb       	rjmp	.-2514   	; 0x19b0 <ProcessInput+0x15c>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    2382:	e1 14       	cp	r14, r1
    2384:	f1 04       	cpc	r15, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <ProcessInput+0xb36>
    2388:	59 c0       	rjmp	.+178    	; 0x243c <ProcessInput+0xbe8>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    238a:	80 91 19 39 	lds	r24, 0x3919	; 0x803919 <actObj1.3951+0x10>
    238e:	90 91 1a 39 	lds	r25, 0x391A	; 0x80391a <actObj1.3951+0x11>
    2392:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2396:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    239a:	e0 92 8a 39 	sts	0x398A, r14	; 0x80398a <reactStr+0x42>
    239e:	f0 92 8b 39 	sts	0x398B, r15	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    23a2:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    23a6:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23aa:	8b e5       	ldi	r24, 0x5B	; 91
    23ac:	9a e7       	ldi	r25, 0x7A	; 122
    23ae:	80 93 4c 39 	sts	0x394C, r24	; 0x80394c <reactStr+0x4>
    23b2:	90 93 4d 39 	sts	0x394D, r25	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	80 93 8c 39 	sts	0x398C, r24	; 0x80398c <reactStr+0x44>
    23be:	90 93 8d 39 	sts	0x398D, r25	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	80 93 cc 39 	sts	0x39CC, r24	; 0x8039cc <reactStr+0x84>
    23ca:	90 93 cd 39 	sts	0x39CD, r25	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23ce:	20 eb       	ldi	r18, 0xB0	; 176
    23d0:	38 e7       	ldi	r19, 0x78	; 120
    23d2:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x6>
    23d6:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    23da:	22 e1       	ldi	r18, 0x12	; 18
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	20 93 8e 39 	sts	0x398E, r18	; 0x80398e <reactStr+0x46>
    23e2:	30 93 8f 39 	sts	0x398F, r19	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    23e6:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    23ea:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    23ee:	80 91 29 39 	lds	r24, 0x3929	; 0x803929 <actObj1.3951+0x20>
    23f2:	90 91 2a 39 	lds	r25, 0x392A	; 0x80392a <actObj1.3951+0x21>
    23f6:	40 97       	sbiw	r24, 0x10	; 16
    23f8:	30 f0       	brcs	.+12     	; 0x2406 <ProcessInput+0xbb2>
    23fa:	8f e0       	ldi	r24, 0x0F	; 15
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	80 93 29 39 	sts	0x3929, r24	; 0x803929 <actObj1.3951+0x20>
    2402:	90 93 2a 39 	sts	0x392A, r25	; 0x80392a <actObj1.3951+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    2406:	27 e3       	ldi	r18, 0x37	; 55
    2408:	39 e3       	ldi	r19, 0x39	; 57
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	60 91 29 39 	lds	r22, 0x3929	; 0x803929 <actObj1.3951+0x20>
    2410:	80 91 1b 39 	lds	r24, 0x391B	; 0x80391b <actObj1.3951+0x12>
    2414:	90 91 1c 39 	lds	r25, 0x391C	; 0x80391c <actObj1.3951+0x13>
    2418:	0e 94 4c 07 	call	0xe98	; 0xe98 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], &specialInput[0]);
    241c:	67 e3       	ldi	r22, 0x37	; 55
    241e:	79 e3       	ldi	r23, 0x39	; 57
    2420:	80 91 29 39 	lds	r24, 0x3929	; 0x803929 <actObj1.3951+0x20>
    2424:	0e 94 3f 07 	call	0xe7e	; 0xe7e <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    2428:	e0 91 29 39 	lds	r30, 0x3929	; 0x803929 <actObj1.3951+0x20>
    242c:	f0 91 2a 39 	lds	r31, 0x392A	; 0x80392a <actObj1.3951+0x21>
    2430:	e9 5c       	subi	r30, 0xC9	; 201
    2432:	f6 4c       	sbci	r31, 0xC6	; 198
    2434:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    2436:	54 e0       	ldi	r21, 0x04	; 4
    2438:	75 2e       	mov	r7, r21
    243a:	3b c1       	rjmp	.+630    	; 0x26b2 <ProcessInput+0xe5e>
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], &specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    243c:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <actObj1.3951+0x7>
    2440:	0e 94 d5 08 	call	0x11aa	; 0x11aa <CheckState>
    2444:	88 23       	and	r24, r24
    2446:	c9 f0       	breq	.+50     	; 0x247a <ProcessInput+0xc26>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2448:	80 91 2f 39 	lds	r24, 0x392F	; 0x80392f <actObj1.3951+0x26>
    244c:	90 91 30 39 	lds	r25, 0x3930	; 0x803930 <actObj1.3951+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2450:	20 91 21 39 	lds	r18, 0x3921	; 0x803921 <actObj1.3951+0x18>
    2454:	30 91 22 39 	lds	r19, 0x3922	; 0x803922 <actObj1.3951+0x19>
    2458:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    245c:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2460:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2464:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2468:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    246c:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
                                UnflipData(actObj1.lenStr[ACTION_STR2], &specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                                //specialPassed = 0;
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2470:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <actObj1.3951+0xa>
    2474:	0e 94 cd 08 	call	0x119a	; 0x119a <UpdateState>
    2478:	9b ca       	rjmp	.-2762   	; 0x19b0 <ProcessInput+0x15c>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    247a:	80 91 2d 39 	lds	r24, 0x392D	; 0x80392d <actObj1.3951+0x24>
    247e:	90 91 2e 39 	lds	r25, 0x392E	; 0x80392e <actObj1.3951+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2482:	20 91 1f 39 	lds	r18, 0x391F	; 0x80391f <actObj1.3951+0x16>
    2486:	30 91 20 39 	lds	r19, 0x3920	; 0x803920 <actObj1.3951+0x17>
    248a:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    248e:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2492:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2496:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    249a:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    249e:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
    24a2:	86 ca       	rjmp	.-2804   	; 0x19b0 <ProcessInput+0x15c>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    24a4:	d8 01       	movw	r26, r16
    24a6:	8c 91       	ld	r24, X
    24a8:	84 37       	cpi	r24, 0x74	; 116
    24aa:	11 f0       	breq	.+4      	; 0x24b0 <ProcessInput+0xc5c>
    24ac:	87 36       	cpi	r24, 0x67	; 103
    24ae:	19 f4       	brne	.+6      	; 0x24b6 <ProcessInput+0xc62>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24b0:	8c e3       	ldi	r24, 0x3C	; 60
    24b2:	99 e7       	ldi	r25, 0x79	; 121
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <ProcessInput+0xc66>
    24b6:	80 e5       	ldi	r24, 0x50	; 80
    24b8:	99 e7       	ldi	r25, 0x79	; 121
    24ba:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    24be:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    24c2:	84 e1       	ldi	r24, 0x14	; 20
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	6a ca       	rjmp	.-2860   	; 0x199c <ProcessInput+0x148>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    24c8:	81 36       	cpi	r24, 0x61	; 97
    24ca:	09 f0       	breq	.+2      	; 0x24ce <ProcessInput+0xc7a>
    24cc:	9f ca       	rjmp	.-2754   	; 0x1a0c <ProcessInput+0x1b8>
            
            //Priest offerings
            if (specialPassed >= 2) {
    24ce:	80 91 36 39 	lds	r24, 0x3936	; 0x803936 <specialPassed>
    24d2:	82 30       	cpi	r24, 0x02	; 2
    24d4:	08 f4       	brcc	.+2      	; 0x24d8 <ProcessInput+0xc84>
    24d6:	ab c0       	rjmp	.+342    	; 0x262e <ProcessInput+0xdda>
                if (data[1] > 0) {
    24d8:	f8 01       	movw	r30, r16
    24da:	21 81       	ldd	r18, Z+1	; 0x01
    24dc:	22 23       	and	r18, r18
    24de:	09 f4       	brne	.+2      	; 0x24e2 <ProcessInput+0xc8e>
    24e0:	9d c0       	rjmp	.+314    	; 0x261c <ProcessInput+0xdc8>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    24e2:	ae 01       	movw	r20, r28
    24e4:	4f 5f       	subi	r20, 0xFF	; 255
    24e6:	5f 4f       	sbci	r21, 0xFF	; 255
    24e8:	7a 01       	movw	r14, r20
    24ea:	8a e0       	ldi	r24, 0x0A	; 10
    24ec:	da 01       	movw	r26, r20
    24ee:	1d 92       	st	X+, r1
    24f0:	8a 95       	dec	r24
    24f2:	e9 f7       	brne	.-6      	; 0x24ee <ProcessInput+0xc9a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0';
    24f4:	20 53       	subi	r18, 0x30	; 48
    24f6:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='0';
    24f8:	32 81       	ldd	r19, Z+2	; 0x02
    24fa:	30 53       	subi	r19, 0x30	; 48
    24fc:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    24fe:	83 81       	ldd	r24, Z+3	; 0x03
    2500:	81 36       	cpi	r24, 0x61	; 97
    2502:	11 f4       	brne	.+4      	; 0x2508 <ProcessInput+0xcb4>
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	0c c0       	rjmp	.+24     	; 0x2520 <ProcessInput+0xccc>
                    else if (data[3] == 'e') data[3] = 0;
    2508:	85 36       	cpi	r24, 0x65	; 101
    250a:	19 f4       	brne	.+6      	; 0x2512 <ProcessInput+0xcbe>
    250c:	f8 01       	movw	r30, r16
    250e:	13 82       	std	Z+3, r1	; 0x03
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <ProcessInput+0xcce>
                    else if (data[3] == 'f') data[3] = 3;
    2512:	86 36       	cpi	r24, 0x66	; 102
    2514:	19 f4       	brne	.+6      	; 0x251c <ProcessInput+0xcc8>
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	83 83       	std	Z+3, r24	; 0x03
    251a:	03 c0       	rjmp	.+6      	; 0x2522 <ProcessInput+0xcce>
                    else data[3] = 2;
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	f8 01       	movw	r30, r16
    2520:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    2522:	21 fd       	sbrc	r18, 1
    2524:	04 c0       	rjmp	.+8      	; 0x252e <ProcessInput+0xcda>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	dc 01       	movw	r26, r24
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <ProcessInput+0xce2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e1       	ldi	r26, 0x10	; 16
    2534:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    2536:	20 ff       	sbrs	r18, 0
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <ProcessInput+0xcec>
    253a:	9f 5f       	subi	r25, 0xFF	; 255
    253c:	af 4f       	sbci	r26, 0xFF	; 255
    253e:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    2540:	f8 01       	movw	r30, r16
    2542:	23 81       	ldd	r18, Z+3	; 0x03
    2544:	21 fd       	sbrc	r18, 1
    2546:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    2548:	20 ff       	sbrs	r18, 0
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <ProcessInput+0xcfe>
    254c:	40 96       	adiw	r24, 0x10	; 16
    254e:	a1 1d       	adc	r26, r1
    2550:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    2552:	31 ff       	sbrs	r19, 1
    2554:	03 c0       	rjmp	.+6      	; 0x255c <ProcessInput+0xd08>
    2556:	90 5f       	subi	r25, 0xF0	; 240
    2558:	af 4f       	sbci	r26, 0xFF	; 255
    255a:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    255c:	30 ff       	sbrs	r19, 0
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <ProcessInput+0xd12>
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	a1 1d       	adc	r26, r1
    2564:	b1 1d       	adc	r27, r1
                    answer <<= (3 - whoami);            
    2566:	40 91 95 38 	lds	r20, 0x3895	; 0x803895 <whoami>
    256a:	23 e0       	ldi	r18, 0x03	; 3
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	24 1b       	sub	r18, r20
    2570:	31 09       	sbc	r19, r1
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <ProcessInput+0xd2c>
    2578:	66 0f       	add	r22, r22
    257a:	77 1f       	adc	r23, r23
    257c:	88 1f       	adc	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	2a 95       	dec	r18
    2582:	d2 f7       	brpl	.-12     	; 0x2578 <ProcessInput+0xd24>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2584:	26 e0       	ldi	r18, 0x06	; 6
    2586:	35 e7       	ldi	r19, 0x75	; 117
    2588:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    258c:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2590:	20 e2       	ldi	r18, 0x20	; 32
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	20 93 8a 39 	sts	0x398A, r18	; 0x80398a <reactStr+0x42>
    2598:	30 93 8b 39 	sts	0x398B, r19	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    259c:	21 e0       	ldi	r18, 0x01	; 1
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	20 93 ca 39 	sts	0x39CA, r18	; 0x8039ca <reactStr+0x82>
    25a4:	30 93 cb 39 	sts	0x39CB, r19	; 0x8039cb <reactStr+0x83>
                    answer <<= (3 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    25a8:	39 e0       	ldi	r19, 0x09	; 9
                        digit[n] = answer % 10;
    25aa:	b3 2e       	mov	r11, r19
    25ac:	4a e0       	ldi	r20, 0x0A	; 10
    25ae:	44 2e       	mov	r4, r20
    25b0:	51 2c       	mov	r5, r1
    25b2:	61 2c       	mov	r6, r1
    25b4:	71 2c       	mov	r7, r1
    25b6:	67 01       	movw	r12, r14
    25b8:	cb 0c       	add	r12, r11
    25ba:	d1 1c       	adc	r13, r1
    25bc:	a3 01       	movw	r20, r6
    25be:	92 01       	movw	r18, r4
    25c0:	f0 d1       	rcall	.+992    	; 0x29a2 <__udivmodsi4>
    25c2:	d6 01       	movw	r26, r12
    25c4:	6c 93       	st	X, r22
                        answer /= 10;
    25c6:	b9 01       	movw	r22, r18
    25c8:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    25ca:	61 15       	cp	r22, r1
    25cc:	71 05       	cpc	r23, r1
    25ce:	81 05       	cpc	r24, r1
    25d0:	91 05       	cpc	r25, r1
    25d2:	39 f4       	brne	.+14     	; 0x25e2 <ProcessInput+0xd8e>
    25d4:	e8 e4       	ldi	r30, 0x48	; 72
    25d6:	f9 e3       	ldi	r31, 0x39	; 57
    25d8:	22 e0       	ldi	r18, 0x02	; 2
    25da:	72 2e       	mov	r7, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    25dc:	21 e0       	ldi	r18, 0x01	; 1
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <ProcessInput+0xd92>
                    answer <<= (3 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    25e2:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    25e4:	e8 cf       	rjmp	.-48     	; 0x25b6 <ProcessInput+0xd62>
    25e6:	32 96       	adiw	r30, 0x02	; 2
                    for (; n<10; ++n) {
    25e8:	b9 e0       	ldi	r27, 0x09	; 9
    25ea:	bb 15       	cp	r27, r11
    25ec:	08 f4       	brcc	.+2      	; 0x25f0 <ProcessInput+0xd9c>
    25ee:	5f c0       	rjmp	.+190    	; 0x26ae <ProcessInput+0xe5a>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    25f0:	73 94       	inc	r7
    25f2:	d7 01       	movw	r26, r14
    25f4:	ab 0d       	add	r26, r11
    25f6:	b1 1d       	adc	r27, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25f8:	8c 91       	ld	r24, X
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	8d 52       	subi	r24, 0x2D	; 45
    25fe:	9b 48       	sbci	r25, 0x8B	; 139
    2600:	82 83       	std	Z+2, r24	; 0x02
    2602:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2604:	df 01       	movw	r26, r30
    2606:	ae 5b       	subi	r26, 0xBE	; 190
    2608:	bf 4f       	sbci	r27, 0xFF	; 255
    260a:	2d 93       	st	X+, r18
    260c:	3c 93       	st	X, r19
    260e:	11 97       	sbiw	r26, 0x01	; 1
    reactStr[2][number]=type;
    2610:	a0 5c       	subi	r26, 0xC0	; 192
    2612:	bf 4f       	sbci	r27, 0xFF	; 255
    2614:	2d 93       	st	X+, r18
    2616:	3c 93       	st	X, r19
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    2618:	b3 94       	inc	r11
    261a:	e5 cf       	rjmp	.-54     	; 0x25e6 <ProcessInput+0xd92>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    261c:	86 e2       	ldi	r24, 0x26	; 38
    261e:	95 e7       	ldi	r25, 0x75	; 117
    2620:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2624:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2628:	8d e3       	ldi	r24, 0x3D	; 61
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	34 c0       	rjmp	.+104    	; 0x2696 <ProcessInput+0xe42>
    262e:	e0 91 8f 38 	lds	r30, 0x388F	; 0x80388f <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	e6 5f       	subi	r30, 0xF6	; 246
    263a:	f5 4c       	sbci	r31, 0xC5	; 197
    263c:	69 e0       	ldi	r22, 0x09	; 9
    263e:	79 e3       	ldi	r23, 0x39	; 57
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    2640:	81 30       	cpi	r24, 0x01	; 1
    2642:	e9 f4       	brne	.+58     	; 0x267e <ProcessInput+0xe2a>
                PopulateObject(route[currDepth+1], &actObj1);
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	0e 94 56 08 	call	0x10ac	; 0x10ac <PopulateObject>
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    264c:	80 91 2f 39 	lds	r24, 0x392F	; 0x80392f <actObj1.3951+0x26>
    2650:	90 91 30 39 	lds	r25, 0x3930	; 0x803930 <actObj1.3951+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2654:	20 91 21 39 	lds	r18, 0x3921	; 0x803921 <actObj1.3951+0x18>
    2658:	30 91 22 39 	lds	r19, 0x3922	; 0x803922 <actObj1.3951+0x19>
    265c:	20 93 4a 39 	sts	0x394A, r18	; 0x80394a <reactStr+0x2>
    2660:	30 93 4b 39 	sts	0x394B, r19	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2664:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2668:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    266c:	10 92 ca 39 	sts	0x39CA, r1	; 0x8039ca <reactStr+0x82>
    2670:	10 92 cb 39 	sts	0x39CB, r1	; 0x8039cb <reactStr+0x83>
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                UpdateState(actObj1.byteField[ACTION_STATE]);
    2674:	80 91 13 39 	lds	r24, 0x3913	; 0x803913 <actObj1.3951+0xa>
    2678:	0e 94 cd 08 	call	0x119a	; 0x119a <UpdateState>
    267c:	16 c0       	rjmp	.+44     	; 0x26aa <ProcessInput+0xe56>
            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	0e 94 56 08 	call	0x10ac	; 0x10ac <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2686:	8e e9       	ldi	r24, 0x9E	; 158
    2688:	98 e7       	ldi	r25, 0x78	; 120
    268a:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    268e:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    2692:	82 e1       	ldi	r24, 0x12	; 18
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    269a:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    26a6:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                UpdateState(actObj1.byteField[ACTION_STATE]);
            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    26ae:	10 92 37 39 	sts	0x3937, r1	; 0x803937 <specialInput>
            ;//No clue, no valid input...
                
        }
            
        //Input handled
        data[0] = 0;
    26b2:	f8 01       	movw	r30, r16
    26b4:	10 82       	st	Z, r1
        serRxDone = 0;
    26b6:	10 92 9c 38 	sts	0x389C, r1	; 0x80389c <serRxDone>
        RXCNT = 0;
    26ba:	1d ba       	out	0x1d, r1	; 29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26bc:	8b e5       	ldi	r24, 0x5B	; 91
    26be:	9a e7       	ldi	r25, 0x7A	; 122
    26c0:	80 93 48 39 	sts	0x3948, r24	; 0x803948 <reactStr>
    26c4:	90 93 49 39 	sts	0x3949, r25	; 0x803949 <reactStr+0x1>
    reactStr[1][number]=length;
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	80 93 88 39 	sts	0x3988, r24	; 0x803988 <reactStr+0x40>
    26d0:	90 93 89 39 	sts	0x3989, r25	; 0x803989 <reactStr+0x41>
    reactStr[2][number]=type;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	80 93 c8 39 	sts	0x39C8, r24	; 0x8039c8 <reactStr+0x80>
    26dc:	90 93 c9 39 	sts	0x39C9, r25	; 0x8039c9 <reactStr+0x81>
        //Input handled
        data[0] = 0;
        serRxDone = 0;
        RXCNT = 0;
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    26e0:	80 91 37 39 	lds	r24, 0x3937	; 0x803937 <specialInput>
    26e4:	88 23       	and	r24, r24
    26e6:	19 f0       	breq	.+6      	; 0x26ee <ProcessInput+0xe9a>
    26e8:	70 92 47 39 	sts	0x3947, r7	; 0x803947 <responseList>
    26ec:	86 c0       	rjmp	.+268    	; 0x27fa <ProcessInput+0xfa6>
    26ee:	87 2d       	mov	r24, r7
    26f0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SetStandardResponse>
    26f4:	80 93 47 39 	sts	0x3947, r24	; 0x803947 <responseList>

    }
    
    return 0;
    26f8:	80 c0       	rjmp	.+256    	; 0x27fa <ProcessInput+0xfa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    26fa:	84 ed       	ldi	r24, 0xD4	; 212
    26fc:	99 e7       	ldi	r25, 0x79	; 121
    26fe:	f7 cd       	rjmp	.-1042   	; 0x22ee <ProcessInput+0xa9a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2700:	f2 e0       	ldi	r31, 0x02	; 2
    2702:	ff 12       	cpse	r15, r31
    2704:	d6 c8       	rjmp	.-3668   	; 0x18b2 <ProcessInput+0x5e>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    2706:	f8 01       	movw	r30, r16
    2708:	61 81       	ldd	r22, Z+1	; 0x01
    270a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <CheckLetter>
    270e:	88 23       	and	r24, r24
    2710:	09 f4       	brne	.+2      	; 0x2714 <ProcessInput+0xec0>
    2712:	5a c0       	rjmp	.+180    	; 0x27c8 <ProcessInput+0xf74>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	fc 01       	movw	r30, r24
    271e:	ea 56       	subi	r30, 0x6A	; 106
    2720:	f7 4c       	sbci	r31, 0xC7	; 199
    2722:	7f 01       	movw	r14, r30
    2724:	69 e0       	ldi	r22, 0x09	; 9
    2726:	79 e3       	ldi	r23, 0x39	; 57
    2728:	80 81       	ld	r24, Z
    272a:	91 81       	ldd	r25, Z+1	; 0x01
    272c:	0e 94 56 08 	call	0x10ac	; 0x10ac <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2730:	84 ed       	ldi	r24, 0xD4	; 212
    2732:	97 e7       	ldi	r25, 0x77	; 119
    2734:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    2738:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    273c:	80 e1       	ldi	r24, 0x10	; 16
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	80 93 8a 39 	sts	0x398A, r24	; 0x80398a <reactStr+0x42>
    2744:	90 93 8b 39 	sts	0x398B, r25	; 0x80398b <reactStr+0x43>
    reactStr[2][number]=type;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	80 93 ca 39 	sts	0x39CA, r24	; 0x8039ca <reactStr+0x82>
    2750:	90 93 cb 39 	sts	0x39CB, r25	; 0x8039cb <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2754:	20 91 23 39 	lds	r18, 0x3923	; 0x803923 <actObj1.3951+0x1a>
    2758:	30 91 24 39 	lds	r19, 0x3924	; 0x803924 <actObj1.3951+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    275c:	40 91 15 39 	lds	r20, 0x3915	; 0x803915 <actObj1.3951+0xc>
    2760:	50 91 16 39 	lds	r21, 0x3916	; 0x803916 <actObj1.3951+0xd>
    2764:	40 93 4c 39 	sts	0x394C, r20	; 0x80394c <reactStr+0x4>
    2768:	50 93 4d 39 	sts	0x394D, r21	; 0x80394d <reactStr+0x5>
    reactStr[1][number]=length;
    276c:	20 93 8c 39 	sts	0x398C, r18	; 0x80398c <reactStr+0x44>
    2770:	30 93 8d 39 	sts	0x398D, r19	; 0x80398d <reactStr+0x45>
    reactStr[2][number]=type;
    2774:	10 92 cc 39 	sts	0x39CC, r1	; 0x8039cc <reactStr+0x84>
    2778:	10 92 cd 39 	sts	0x39CD, r1	; 0x8039cd <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    277c:	2b e5       	ldi	r18, 0x5B	; 91
    277e:	3a e7       	ldi	r19, 0x7A	; 122
    2780:	20 93 4e 39 	sts	0x394E, r18	; 0x80394e <reactStr+0x6>
    2784:	30 93 4f 39 	sts	0x394F, r19	; 0x80394f <reactStr+0x7>
    reactStr[1][number]=length;
    2788:	22 e0       	ldi	r18, 0x02	; 2
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	20 93 8e 39 	sts	0x398E, r18	; 0x80398e <reactStr+0x46>
    2790:	30 93 8f 39 	sts	0x398F, r19	; 0x80398f <reactStr+0x47>
    reactStr[2][number]=type;
    2794:	80 93 ce 39 	sts	0x39CE, r24	; 0x8039ce <reactStr+0x86>
    2798:	90 93 cf 39 	sts	0x39CF, r25	; 0x8039cf <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    279c:	27 e9       	ldi	r18, 0x97	; 151
    279e:	37 e7       	ldi	r19, 0x77	; 119
    27a0:	20 93 50 39 	sts	0x3950, r18	; 0x803950 <reactStr+0x8>
    27a4:	30 93 51 39 	sts	0x3951, r19	; 0x803951 <reactStr+0x9>
    reactStr[1][number]=length;
    27a8:	2d e3       	ldi	r18, 0x3D	; 61
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	20 93 90 39 	sts	0x3990, r18	; 0x803990 <reactStr+0x48>
    27b0:	30 93 91 39 	sts	0x3991, r19	; 0x803991 <reactStr+0x49>
    reactStr[2][number]=type;
    27b4:	80 93 d0 39 	sts	0x39D0, r24	; 0x8039d0 <reactStr+0x88>
    27b8:	90 93 d1 39 	sts	0x39D1, r25	; 0x8039d1 <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    27bc:	d7 01       	movw	r26, r14
    27be:	1d 92       	st	X+, r1
    27c0:	1c 92       	st	X, r1
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    27c2:	f5 e0       	ldi	r31, 0x05	; 5
    27c4:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    27c6:	75 cf       	rjmp	.-278    	; 0x26b2 <ProcessInput+0xe5e>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    27c8:	80 91 98 38 	lds	r24, 0x3898	; 0x803898 <inventory+0x2>
    27cc:	90 91 99 38 	lds	r25, 0x3899	; 0x803899 <inventory+0x3>
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	51 f0       	breq	.+20     	; 0x27e8 <ProcessInput+0xf94>
                        if (CheckLetter(inventory[x], data[1])) {
    27d4:	d8 01       	movw	r26, r16
    27d6:	11 96       	adiw	r26, 0x01	; 1
    27d8:	6c 91       	ld	r22, X
    27da:	0e 94 e5 08 	call	0x11ca	; 0x11ca <CheckLetter>
    27de:	88 23       	and	r24, r24
    27e0:	19 f0       	breq	.+6      	; 0x27e8 <ProcessInput+0xf94>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	98 cf       	rjmp	.-208    	; 0x2718 <ProcessInput+0xec4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27e8:	84 e6       	ldi	r24, 0x64	; 100
    27ea:	99 e7       	ldi	r25, 0x79	; 121
    27ec:	80 93 4a 39 	sts	0x394A, r24	; 0x80394a <reactStr+0x2>
    27f0:	90 93 4b 39 	sts	0x394B, r25	; 0x80394b <reactStr+0x3>
    reactStr[1][number]=length;
    27f4:	81 e2       	ldi	r24, 0x21	; 33
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	d1 c8       	rjmp	.-3678   	; 0x199c <ProcessInput+0x148>
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    }
    
    return 0;
}
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	2a 96       	adiw	r28, 0x0a	; 10
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	bf 90       	pop	r11
    2814:	af 90       	pop	r10
    2816:	9f 90       	pop	r9
    2818:	8f 90       	pop	r8
    281a:	7f 90       	pop	r7
    281c:	6f 90       	pop	r6
    281e:	5f 90       	pop	r5
    2820:	4f 90       	pop	r4
    2822:	08 95       	ret

00002824 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    2824:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    2826:	0e 94 c4 09 	call	0x1388	; 0x1388 <CheckSend>
    282a:	88 23       	and	r24, r24
    282c:	11 f0       	breq	.+4      	; 0x2832 <TextAdventure+0xe>
    282e:	c1 e0       	ldi	r28, 0x01	; 1
    2830:	12 c0       	rjmp	.+36     	; 0x2856 <TextAdventure+0x32>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    2832:	0e 94 18 0a 	call	0x1430	; 0x1430 <CheckResponse>
    2836:	81 11       	cpse	r24, r1
    2838:	fa cf       	rjmp	.-12     	; 0x282e <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    283a:	8d e9       	ldi	r24, 0x9D	; 157
    283c:	98 e3       	ldi	r25, 0x38	; 56
    283e:	0e 94 5f 0a 	call	0x14be	; 0x14be <CheckInput>
    2842:	c8 2f       	mov	r28, r24
    2844:	81 11       	cpse	r24, r1
    2846:	06 c0       	rjmp	.+12     	; 0x2854 <TextAdventure+0x30>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    2848:	8d e9       	ldi	r24, 0x9D	; 157
    284a:	98 e3       	ldi	r25, 0x38	; 56
    284c:	03 d8       	rcall	.-4090   	; 0x1854 <ProcessInput>
    SaveGameState();
    284e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SaveGameState>

    return 0;
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <TextAdventure+0x32>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    2854:	c2 e0       	ldi	r28, 0x02	; 2
    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    SaveGameState();

    return 0;
    2856:	8c 2f       	mov	r24, r28
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    285c:	0e 94 9f 01 	call	0x33e	; 0x33e <Setup>

    SerSpeed(255);
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <SerSpeed>
    2866:	ac ef       	ldi	r26, 0xFC	; 252
    2868:	b9 ea       	ldi	r27, 0xA9	; 169
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	ed 91       	ld	r30, X+
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	e2 5f       	subi	r30, 0xF2	; 242
    2872:	f4 4c       	sbci	r31, 0xC4	; 196
    2874:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    2876:	15 96       	adiw	r26, 0x05	; 5
    2878:	ec 91       	ld	r30, X
    287a:	15 97       	sbiw	r26, 0x05	; 5
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	e2 5f       	subi	r30, 0xF2	; 242
    2880:	f4 4c       	sbci	r31, 0xC4	; 196
    2882:	80 83       	st	Z, r24

    SerSpeed(255);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    2884:	2a ea       	ldi	r18, 0xAA	; 170
    2886:	a2 30       	cpi	r26, 0x02	; 2
    2888:	b2 07       	cpc	r27, r18
    288a:	81 f7       	brne	.-32     	; 0x286c <main+0x10>
    288c:	ee ee       	ldi	r30, 0xEE	; 238
    288e:	f9 ea       	ldi	r31, 0xA9	; 169
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	ef 01       	movw	r28, r30
    2894:	a5 81       	ldd	r26, Z+5	; 0x05
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	a2 5f       	subi	r26, 0xF2	; 242
    289a:	b4 4c       	sbci	r27, 0xC4	; 196
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	9c 93       	st	X, r25
    28a0:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    28a2:	a8 81       	ld	r26, Y
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	a2 5f       	subi	r26, 0xF2	; 242
    28a8:	b4 4c       	sbci	r27, 0xC4	; 196
    28aa:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    28ac:	29 ea       	ldi	r18, 0xA9	; 169
    28ae:	e3 3f       	cpi	r30, 0xF3	; 243
    28b0:	f2 07       	cpc	r31, r18
    28b2:	79 f7       	brne	.-34     	; 0x2892 <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    28b4:	e0 91 fa a9 	lds	r30, 0xA9FA	; 0x80a9fa <__bss_end+0x6e9f>
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	e2 5f       	subi	r30, 0xF2	; 242
    28bc:	f4 4c       	sbci	r31, 0xC4	; 196
    28be:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    28c0:	e0 91 fb a9 	lds	r30, 0xA9FB	; 0x80a9fb <__bss_end+0x6ea0>
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	e2 5f       	subi	r30, 0xF2	; 242
    28c8:	f4 4c       	sbci	r31, 0xC4	; 196
    28ca:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    28cc:	e0 91 f8 a9 	lds	r30, 0xA9F8	; 0x80a9f8 <__bss_end+0x6e9d>
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	e2 5f       	subi	r30, 0xF2	; 242
    28d4:	f4 4c       	sbci	r31, 0xC4	; 196
    28d6:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    28d8:	e0 91 f9 a9 	lds	r30, 0xA9F9	; 0x80a9f9 <__bss_end+0x6e9e>
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	e2 5f       	subi	r30, 0xF2	; 242
    28e0:	f4 4c       	sbci	r31, 0xC4	; 196
    28e2:	80 83       	st	Z, r24
    iLED[GEM[R]] = 1;
    28e4:	e0 91 ec a9 	lds	r30, 0xA9EC	; 0x80a9ec <__bss_end+0x6e91>
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	e2 5f       	subi	r30, 0xF2	; 242
    28ec:	f4 4c       	sbci	r31, 0xC4	; 196
    28ee:	80 83       	st	Z, r24
    iLED[GEM[G]] = 1;
    28f0:	e0 91 ed a9 	lds	r30, 0xA9ED	; 0x80a9ed <__bss_end+0x6e92>
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	e2 5f       	subi	r30, 0xF2	; 242
    28f8:	f4 4c       	sbci	r31, 0xC4	; 196
    28fa:	80 83       	st	Z, r24
    iLED[RAT] = 1;
    28fc:	e0 91 eb a9 	lds	r30, 0xA9EB	; 0x80a9eb <__bss_end+0x6e90>
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	e2 5f       	subi	r30, 0xF2	; 242
    2904:	f4 4c       	sbci	r31, 0xC4	; 196
    2906:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    2908:	e0 91 ea a9 	lds	r30, 0xA9EA	; 0x80a9ea <__bss_end+0x6e8f>
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	e2 5f       	subi	r30, 0xF2	; 242
    2910:	f4 4c       	sbci	r31, 0xC4	; 196
    2912:	80 83       	st	Z, r24

    while (1)
    {
        GenerateAudio();
    2914:	0e 94 ad 06 	call	0xd5a	; 0xd5a <GenerateAudio>

        if (buttonMark){
    2918:	80 91 9a 38 	lds	r24, 0x389A	; 0x80389a <buttonMark>
    291c:	88 23       	and	r24, r24
    291e:	d1 f3       	breq	.-12     	; 0x2914 <main+0xb8>
            buttonState = CheckButtons(buttonState);
    2920:	80 91 8d 3a 	lds	r24, 0x3A8D	; 0x803a8d <buttonState>
    2924:	0e 94 03 05 	call	0xa06	; 0xa06 <CheckButtons>
    2928:	80 93 8d 3a 	sts	0x3A8D, r24	; 0x803a8d <buttonState>
            buttonMark = 0;
    292c:	10 92 9a 38 	sts	0x389A, r1	; 0x80389a <buttonMark>
            
            TextAdventure();
    2930:	79 df       	rcall	.-270    	; 0x2824 <TextAdventure>
          
            //Other games & user interaction checks
            //MagnetMaze();
            BastetDictates();
    2932:	0e 94 23 07 	call	0xe46	; 0xe46 <BastetDictates>
            //LanyardCode();
            //MakeFriends();
             
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    2936:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <adcPhot>
    293a:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <adcPhot+0x1>
    293e:	0a 97       	sbiw	r24, 0x0a	; 10
    2940:	20 f4       	brcc	.+8      	; 0x294a <main+0xee>
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	84 e7       	ldi	r24, 0x74	; 116
    2946:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    294a:	80 91 eb 3a 	lds	r24, 0x3AEB	; 0x803aeb <adcPhot>
    294e:	90 91 ec 3a 	lds	r25, 0x3AEC	; 0x803aec <adcPhot+0x1>
    2952:	85 36       	cpi	r24, 0x65	; 101
    2954:	91 05       	cpc	r25, r1
    2956:	f0 f2       	brcs	.-68     	; 0x2914 <main+0xb8>
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	84 e7       	ldi	r24, 0x74	; 116
    295c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <WriteStatusBit>
    2960:	d9 cf       	rjmp	.-78     	; 0x2914 <main+0xb8>

00002962 <__udivmodqi4>:
    2962:	99 1b       	sub	r25, r25
    2964:	79 e0       	ldi	r23, 0x09	; 9
    2966:	04 c0       	rjmp	.+8      	; 0x2970 <__udivmodqi4_ep>

00002968 <__udivmodqi4_loop>:
    2968:	99 1f       	adc	r25, r25
    296a:	96 17       	cp	r25, r22
    296c:	08 f0       	brcs	.+2      	; 0x2970 <__udivmodqi4_ep>
    296e:	96 1b       	sub	r25, r22

00002970 <__udivmodqi4_ep>:
    2970:	88 1f       	adc	r24, r24
    2972:	7a 95       	dec	r23
    2974:	c9 f7       	brne	.-14     	; 0x2968 <__udivmodqi4_loop>
    2976:	80 95       	com	r24
    2978:	08 95       	ret

0000297a <__udivmodhi4>:
    297a:	aa 1b       	sub	r26, r26
    297c:	bb 1b       	sub	r27, r27
    297e:	51 e1       	ldi	r21, 0x11	; 17
    2980:	07 c0       	rjmp	.+14     	; 0x2990 <__udivmodhi4_ep>

00002982 <__udivmodhi4_loop>:
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	a6 17       	cp	r26, r22
    2988:	b7 07       	cpc	r27, r23
    298a:	10 f0       	brcs	.+4      	; 0x2990 <__udivmodhi4_ep>
    298c:	a6 1b       	sub	r26, r22
    298e:	b7 0b       	sbc	r27, r23

00002990 <__udivmodhi4_ep>:
    2990:	88 1f       	adc	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	5a 95       	dec	r21
    2996:	a9 f7       	brne	.-22     	; 0x2982 <__udivmodhi4_loop>
    2998:	80 95       	com	r24
    299a:	90 95       	com	r25
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	08 95       	ret

000029a2 <__udivmodsi4>:
    29a2:	a1 e2       	ldi	r26, 0x21	; 33
    29a4:	1a 2e       	mov	r1, r26
    29a6:	aa 1b       	sub	r26, r26
    29a8:	bb 1b       	sub	r27, r27
    29aa:	fd 01       	movw	r30, r26
    29ac:	0d c0       	rjmp	.+26     	; 0x29c8 <__udivmodsi4_ep>

000029ae <__udivmodsi4_loop>:
    29ae:	aa 1f       	adc	r26, r26
    29b0:	bb 1f       	adc	r27, r27
    29b2:	ee 1f       	adc	r30, r30
    29b4:	ff 1f       	adc	r31, r31
    29b6:	a2 17       	cp	r26, r18
    29b8:	b3 07       	cpc	r27, r19
    29ba:	e4 07       	cpc	r30, r20
    29bc:	f5 07       	cpc	r31, r21
    29be:	20 f0       	brcs	.+8      	; 0x29c8 <__udivmodsi4_ep>
    29c0:	a2 1b       	sub	r26, r18
    29c2:	b3 0b       	sbc	r27, r19
    29c4:	e4 0b       	sbc	r30, r20
    29c6:	f5 0b       	sbc	r31, r21

000029c8 <__udivmodsi4_ep>:
    29c8:	66 1f       	adc	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	1a 94       	dec	r1
    29d2:	69 f7       	brne	.-38     	; 0x29ae <__udivmodsi4_loop>
    29d4:	60 95       	com	r22
    29d6:	70 95       	com	r23
    29d8:	80 95       	com	r24
    29da:	90 95       	com	r25
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	bd 01       	movw	r22, r26
    29e2:	cf 01       	movw	r24, r30
    29e4:	08 95       	ret

000029e6 <_exit>:
    29e6:	f8 94       	cli

000029e8 <__stop_program>:
    29e8:	ff cf       	rjmp	.-2      	; 0x29e8 <__stop_program>
