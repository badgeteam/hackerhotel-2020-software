
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00803800  00003f4c  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e90  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0000be90  00003e90  00003f44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e2  00803836  00803836  00004036  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00004036  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004068  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c9b  00000000  00000000  000043e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002853  00000000  00000000  0000b07b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dc3  00000000  00000000  0000d8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000090c  00000000  00000000  00011694  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a97  00000000  00000000  00011fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c35  00000000  00000000  00013a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  0001766c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c7       	rjmp	.+3870   	; 0xf38 <__vector_6>
      1a:	00 00       	nop
      1c:	e1 c7       	rjmp	.+4034   	; 0xfe0 <__vector_7>
      1e:	00 00       	nop
      20:	cc c5       	rjmp	.+2968   	; 0xbba <__vector_8>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	13 c6       	rjmp	.+3110   	; 0xc5c <__vector_13>
      36:	00 00       	nop
      38:	44 c6       	rjmp	.+3208   	; 0xcc2 <__vector_14>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ff c6       	rjmp	.+3582   	; 0xe50 <__vector_20>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c7       	rjmp	.+3662   	; 0xea8 <__vector_22>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c6       	rjmp	.+3316   	; 0xd62 <__vector_27>
      6e:	00 00       	nop
      70:	d3 c6       	rjmp	.+3494   	; 0xe18 <__vector_28>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 0b       	sbc	r26, r17
      7e:	cf 0b       	sbc	r28, r31
      80:	d6 0b       	sbc	r29, r22
      82:	91 0c       	add	r9, r1
      84:	91 0c       	add	r9, r1
      86:	e5 0b       	sbc	r30, r21
      88:	f2 0b       	sbc	r31, r18
      8a:	30 0c       	add	r3, r0
      8c:	57 0c       	add	r5, r7

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	cd bf       	out	0x3d, r28	; 61
      96:	df e3       	ldi	r29, 0x3F	; 63
      98:	de bf       	out	0x3e, r29	; 62

0000009a <__do_copy_data>:
      9a:	18 e3       	ldi	r17, 0x38	; 56
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b8 e3       	ldi	r27, 0x38	; 56
      a0:	ec e4       	ldi	r30, 0x4C	; 76
      a2:	ff e3       	ldi	r31, 0x3F	; 63
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
      a6:	05 90       	lpm	r0, Z+
      a8:	0d 92       	st	X+, r0
      aa:	a6 33       	cpi	r26, 0x36	; 54
      ac:	b1 07       	cpc	r27, r17
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
      b0:	2b e3       	ldi	r18, 0x3B	; 59
      b2:	a6 e3       	ldi	r26, 0x36	; 54
      b4:	b8 e3       	ldi	r27, 0x38	; 56
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
      ba:	a8 31       	cpi	r26, 0x18	; 24
      bc:	b2 07       	cpc	r27, r18
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>
      c0:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <main>
      c4:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <chkVolt250>:
#include <main_def.h>
#include <resources.h>
#include <I2C.h>

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
      ca:	28 ed       	ldi	r18, 0xD8	; 216
      cc:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t avgVolt = 9;
      ce:	89 e0       	ldi	r24, 0x09	; 9
        
    for (uint8_t x=225; x>24; x-=25) {
        if ((auIn > (x-DELTA)) && (auIn < (x+DELTA))) {
      d0:	40 91 c8 3a 	lds	r20, 0x3AC8	; 0x803ac8 <auIn>
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	42 17       	cp	r20, r18
      d8:	53 07       	cpc	r21, r19
      da:	4c f0       	brlt	.+18     	; 0xee <chkVolt250+0x24>
      dc:	40 91 c8 3a 	lds	r20, 0x3AC8	; 0x803ac8 <auIn>
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	6e 5e       	subi	r22, 0xEE	; 238
      e6:	7f 4f       	sbci	r23, 0xFF	; 255
      e8:	64 17       	cp	r22, r20
      ea:	75 07       	cpc	r23, r21
      ec:	2c f4       	brge	.+10     	; 0xf8 <chkVolt250+0x2e>
            break;
        }
        --avgVolt;
      ee:	81 50       	subi	r24, 0x01	; 1
      f0:	29 51       	subi	r18, 0x19	; 25
      f2:	31 09       	sbc	r19, r1

//Returns measured voltage * 4 (2V returns 8) if it is in the expected range (DELTA)
uint8_t chkVolt250(){
    uint8_t avgVolt = 9;
        
    for (uint8_t x=225; x>24; x-=25) {
      f4:	81 11       	cpse	r24, r1
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <chkVolt250+0x6>
            break;
        }
        --avgVolt;
    }
    return avgVolt;
}
      f8:	08 95       	ret

000000fa <MakeFriends>:

// Main game loop
uint8_t MakeFriends(){
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
    static uint8_t setDAC[2] = {255, 0};
    static uint8_t chkTmr = 0;
    static uint8_t jackIn = 0;
    static uint8_t candidate = 0;

    ++chkTmr;
      fe:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3790>
     102:	8f 5f       	subi	r24, 0xFF	; 255
     104:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <chkTmr.3790>
     108:	c4 e6       	ldi	r28, 0x64	; 100

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
     10a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t x=0; x<4; ++x){
        if (CheckState(100+x) == 0) foundAll = 0;
     10c:	8c 2f       	mov	r24, r28
     10e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
     112:	81 11       	cpse	r24, r1
     114:	01 c0       	rjmp	.+2      	; 0x118 <MakeFriends+0x1e>
     116:	d0 e0       	ldi	r29, 0x00	; 0
     118:	cf 5f       	subi	r28, 0xFF	; 255

    ++chkTmr;

    //Check if badge has found 3 friends
    uint8_t foundAll = 1;
    for (uint8_t x=0; x<4; ++x){
     11a:	c8 36       	cpi	r28, 0x68	; 104
     11c:	b9 f7       	brne	.-18     	; 0x10c <MakeFriends+0x12>
        if (CheckState(100+x) == 0) foundAll = 0;
    }
    if (foundAll) UpdateState(124);
     11e:	dd 23       	and	r29, r29
     120:	19 f0       	breq	.+6      	; 0x128 <MakeFriends+0x2e>
     122:	8c e7       	ldi	r24, 0x7C	; 124
     124:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>

    //Set game state, must be able to hijack from other games.
    if (progress > FIRST_CONTACT) { 
     128:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3788>
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	20 f0       	brcs	.+8      	; 0x138 <MakeFriends+0x3e>
        gameNow = FRIENDS; 
     130:	94 e0       	ldi	r25, 0x04	; 4
     132:	90 93 42 38 	sts	0x3842, r25	; 0x803842 <gameNow>
     136:	0d c0       	rjmp	.+26     	; 0x152 <MakeFriends+0x58>
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     138:	81 11       	cpse	r24, r1
     13a:	0b c0       	rjmp	.+22     	; 0x152 <MakeFriends+0x58>
     13c:	90 91 42 38 	lds	r25, 0x3842	; 0x803842 <gameNow>
     140:	94 30       	cpi	r25, 0x04	; 4
     142:	61 f4       	brne	.+24     	; 0x15c <MakeFriends+0x62>
        gameNow = TEXT; 
     144:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        effect = 0;
     148:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
     14c:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
     150:	05 c0       	rjmp	.+10     	; 0x15c <MakeFriends+0x62>
    if (progress > FIRST_CONTACT) { 
        gameNow = FRIENDS; 
    }
    
    //Clear game state if not communicating properly or headphones detected
    if (((progress == NO_OTHER) || detHdPh) && (gameNow == FRIENDS)) {
     152:	90 91 c5 3a 	lds	r25, 0x3AC5	; 0x803ac5 <detHdPh>
     156:	91 11       	cpse	r25, r1
     158:	f1 cf       	rjmp	.-30     	; 0x13c <MakeFriends+0x42>
     15a:	18 c0       	rjmp	.+48     	; 0x18c <MakeFriends+0x92>
        gameNow = TEXT; 
        effect = 0;
    }

    //Audio off, set voltage level (setDAC[0]*10mV)
    if ((progress == NO_OTHER) && (detHdPh == 0)) {
     15c:	81 11       	cpse	r24, r1
     15e:	16 c0       	rjmp	.+44     	; 0x18c <MakeFriends+0x92>
     160:	90 91 c5 3a 	lds	r25, 0x3AC5	; 0x803ac5 <detHdPh>
     164:	91 11       	cpse	r25, r1
     166:	12 c0       	rjmp	.+36     	; 0x18c <MakeFriends+0x92>
        setDAC[0] = whoami * 51;
     168:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     16c:	93 e3       	ldi	r25, 0x33	; 51
     16e:	89 9f       	mul	r24, r25
     170:	80 2d       	mov	r24, r0
     172:	11 24       	eor	r1, r1
     174:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
        auRepAddr = &setDAC[0];
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	98 e3       	ldi	r25, 0x38	; 56
     17c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
     180:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        auVolume = 255;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
     18a:	09 c0       	rjmp	.+18     	; 0x19e <MakeFriends+0xa4>
    } else {
        if (progress & NEXT){
     18c:	98 2f       	mov	r25, r24
     18e:	90 7f       	andi	r25, 0xF0	; 240
     190:	31 f0       	breq	.+12     	; 0x19e <MakeFriends+0xa4>
            progress++;
            progress&=0x0f;
     192:	8f 5f       	subi	r24, 0xFF	; 255
     194:	8f 70       	andi	r24, 0x0F	; 15
     196:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3788>
            chkTmr = 0;
     19a:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <chkTmr.3790>
        }
    }

    //Check for other badges ()
    if ((auIn < (setDAC[0] - DELTA)) || (auIn > (setDAC[0] + DELTA)) || (progress > FIRST_CONTACT)) {
     19e:	40 91 c8 3a 	lds	r20, 0x3AC8	; 0x803ac8 <auIn>
     1a2:	20 91 00 38 	lds	r18, 0x3800	; 0x803800 <__data_start>
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	b9 01       	movw	r22, r18
     1ac:	6a 50       	subi	r22, 0x0A	; 10
     1ae:	71 09       	sbc	r23, r1
     1b0:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3788>
     1b4:	46 17       	cp	r20, r22
     1b6:	57 07       	cpc	r21, r23
     1b8:	5c f0       	brlt	.+22     	; 0x1d0 <MakeFriends+0xd6>
     1ba:	40 91 c8 3a 	lds	r20, 0x3AC8	; 0x803ac8 <auIn>
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	26 5f       	subi	r18, 0xF6	; 246
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	24 17       	cp	r18, r20
     1c6:	35 07       	cpc	r19, r21
     1c8:	1c f0       	brlt	.+6      	; 0x1d0 <MakeFriends+0xd6>
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	08 f4       	brcc	.+2      	; 0x1d0 <MakeFriends+0xd6>
     1ce:	43 c0       	rjmp	.+134    	; 0x256 <MakeFriends+0x15c>
        if ((progress == NO_OTHER) && (detHdPh == 0)) {
     1d0:	81 11       	cpse	r24, r1
     1d2:	0b c0       	rjmp	.+22     	; 0x1ea <MakeFriends+0xf0>
     1d4:	80 91 c5 3a 	lds	r24, 0x3AC5	; 0x803ac5 <detHdPh>
     1d8:	81 11       	cpse	r24, r1
     1da:	95 c0       	rjmp	.+298    	; 0x306 <MakeFriends+0x20c>
            if (chkTmr >= 8) {
     1dc:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3790>
     1e0:	88 30       	cpi	r24, 0x08	; 8
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <MakeFriends+0xec>
     1e4:	90 c0       	rjmp	.+288    	; 0x306 <MakeFriends+0x20c>
                progress |= NEXT;
     1e6:	80 ef       	ldi	r24, 0xF0	; 240
     1e8:	63 c0       	rjmp	.+198    	; 0x2b0 <MakeFriends+0x1b6>
            }
        }

        //Candidate found, check ranges
        else if (progress == FIRST_CONTACT) {
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	41 f5       	brne	.+80     	; 0x23e <MakeFriends+0x144>
            jackIn = chkVolt250();
     1ee:	6d df       	rcall	.-294    	; 0xca <chkVolt250>
     1f0:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3791>
            if (jackIn) {
     1f4:	88 23       	and	r24, r24
     1f6:	79 f1       	breq	.+94     	; 0x256 <MakeFriends+0x15c>
                if (chkTmr >= SHORT_WAIT){
     1f8:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <chkTmr.3790>
     1fc:	98 30       	cpi	r25, 0x08	; 8
     1fe:	08 f4       	brcc	.+2      	; 0x202 <MakeFriends+0x108>
     200:	82 c0       	rjmp	.+260    	; 0x306 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
     202:	90 91 43 38 	lds	r25, 0x3843	; 0x803843 <whoami>
     206:	91 30       	cpi	r25, 0x01	; 1
     208:	11 f4       	brne	.+4      	; 0x20e <MakeFriends+0x114>
     20a:	83 50       	subi	r24, 0x03	; 3
     20c:	14 c0       	rjmp	.+40     	; 0x236 <MakeFriends+0x13c>
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
     20e:	92 30       	cpi	r25, 0x02	; 2
     210:	31 f4       	brne	.+12     	; 0x21e <MakeFriends+0x124>
     212:	83 30       	cpi	r24, 0x03	; 3
     214:	91 f0       	breq	.+36     	; 0x23a <MakeFriends+0x140>
     216:	85 50       	subi	r24, 0x05	; 5
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	e8 f4       	brcc	.+58     	; 0x256 <MakeFriends+0x15c>
     21c:	0e c0       	rjmp	.+28     	; 0x23a <MakeFriends+0x140>
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
     21e:	93 30       	cpi	r25, 0x03	; 3
     220:	39 f4       	brne	.+14     	; 0x230 <MakeFriends+0x136>
     222:	9c ef       	ldi	r25, 0xFC	; 252
     224:	98 0f       	add	r25, r24
     226:	92 30       	cpi	r25, 0x02	; 2
     228:	40 f0       	brcs	.+16     	; 0x23a <MakeFriends+0x140>
     22a:	87 30       	cpi	r24, 0x07	; 7
     22c:	a1 f4       	brne	.+40     	; 0x256 <MakeFriends+0x15c>
     22e:	05 c0       	rjmp	.+10     	; 0x23a <MakeFriends+0x140>
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
     230:	94 30       	cpi	r25, 0x04	; 4
     232:	89 f4       	brne	.+34     	; 0x256 <MakeFriends+0x15c>
     234:	85 50       	subi	r24, 0x05	; 5
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	70 f4       	brcc	.+28     	; 0x256 <MakeFriends+0x15c>
                        progress |= NEXT;
     23a:	81 ef       	ldi	r24, 0xF1	; 241
     23c:	39 c0       	rjmp	.+114    	; 0x2b0 <MakeFriends+0x1b6>
                progress = NO_OTHER;
            }
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	69 f0       	breq	.+26     	; 0x25c <MakeFriends+0x162>
                progress |= NEXT;
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	c1 f1       	breq	.+112    	; 0x2b6 <MakeFriends+0x1bc>
                    progress |= NEXT;
                } else progress = NO_OTHER;                
            }

        //Wait for quit
        } else if (progress == FOURTH_BASE) {
     246:	84 30       	cpi	r24, 0x04	; 4
     248:	09 f0       	breq	.+2      	; 0x24c <MakeFriends+0x152>
     24a:	5d c0       	rjmp	.+186    	; 0x306 <MakeFriends+0x20c>
            if (chkTmr >= (SHORT_WAIT<<3)) {
     24c:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3790>
     250:	80 34       	cpi	r24, 0x40	; 64
     252:	08 f4       	brcc	.+2      	; 0x256 <MakeFriends+0x15c>
     254:	58 c0       	rjmp	.+176    	; 0x306 <MakeFriends+0x20c>
                    if (   ((whoami == 1)&&((jackIn >= 3)&&(jackIn <= 5))) 
                    || ((whoami == 2)&&((jackIn == 3)||(jackIn == 5)||(jackIn == 6)))  
                    || ((whoami == 3)&&((jackIn == 4)||(jackIn == 5)||(jackIn == 7))) 
                    || ((whoami == 4)&&((jackIn >= 5)&&(jackIn <= 7)))   ) {
                        progress |= NEXT;
                    } else progress = NO_OTHER;
     256:	10 92 38 38 	sts	0x3838, r1	; 0x803838 <progress.3788>
     25a:	55 c0       	rjmp	.+170    	; 0x306 <MakeFriends+0x20c>
        }

        //Wait for the other badge (and a bit longer for effect)
        else if (progress == SECOND_LOVE){
            
            effect = 7;
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     264:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            if (chkTmr >= SHORT_WAIT) {
     268:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3790>
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	38 f0       	brcs	.+14     	; 0x27e <MakeFriends+0x184>
                setDAC[0] = floatAround(0x80, 8, 100, 255); 
     270:	2f ef       	ldi	r18, 0xFF	; 255
     272:	44 e6       	ldi	r20, 0x64	; 100
     274:	68 e0       	ldi	r22, 0x08	; 8
     276:	80 e8       	ldi	r24, 0x80	; 128
     278:	f3 d7       	rcall	.+4070   	; 0x1260 <floatAround>
     27a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
            }

            //The badge with the lowest voltage will now go to 2.5V (impedance check, for people tricking the things with a power supply)
            if (chkTmr >= LONG_WAIT){
     27e:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3790>
     282:	8a 3f       	cpi	r24, 0xFA	; 250
     284:	08 f4       	brcc	.+2      	; 0x288 <MakeFriends+0x18e>
     286:	3f c0       	rjmp	.+126    	; 0x306 <MakeFriends+0x20c>
                candidate = jackIn-whoami;
     288:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
     28c:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <jackIn.3791>
     290:	98 1b       	sub	r25, r24
     292:	90 93 36 38 	sts	0x3836, r25	; 0x803836 <__data_end>
                if (candidate > whoami) {
     296:	89 17       	cp	r24, r25
     298:	10 f4       	brcc	.+4      	; 0x29e <MakeFriends+0x1a4>
                    setDAC[0] = 249;
     29a:	89 ef       	ldi	r24, 0xF9	; 249
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <MakeFriends+0x1ac>
                } else {
                    setDAC[0] = whoami * 51;
     29e:	93 e3       	ldi	r25, 0x33	; 51
     2a0:	89 9f       	mul	r24, r25
     2a2:	80 2d       	mov	r24, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                }
                progress |= NEXT;
     2aa:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <progress.3788>
     2ae:	80 6f       	ori	r24, 0xF0	; 240
     2b0:	80 93 38 38 	sts	0x3838, r24	; 0x803838 <progress.3788>
     2b4:	28 c0       	rjmp	.+80     	; 0x306 <MakeFriends+0x20c>
            }
        } 
        
        //Wait a bit, check Voltage again, if ok show who you connected with and your own number, save, exit
        else if (progress == THIRD_KISS) {
            if (chkTmr >= SHORT_WAIT) {
     2b6:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <chkTmr.3790>
     2ba:	88 30       	cpi	r24, 0x08	; 8
                jackIn = chkVolt250();
     2bc:	20 f1       	brcs	.+72     	; 0x306 <MakeFriends+0x20c>
     2be:	05 df       	rcall	.-502    	; 0xca <chkVolt250>
     2c0:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <jackIn.3791>
                if (jackIn == (((candidate > whoami)?candidate:whoami) + 5)) {
     2c4:	90 91 36 38 	lds	r25, 0x3836	; 0x803836 <__data_end>
     2c8:	48 2f       	mov	r20, r24
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	20 91 43 38 	lds	r18, 0x3843	; 0x803843 <whoami>
     2d0:	29 17       	cp	r18, r25
     2d2:	08 f4       	brcc	.+2      	; 0x2d6 <MakeFriends+0x1dc>
     2d4:	29 2f       	mov	r18, r25
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	2b 5f       	subi	r18, 0xFB	; 251
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	42 17       	cp	r20, r18
     2de:	53 07       	cpc	r21, r19
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <MakeFriends+0x1ea>
     2e2:	b9 cf       	rjmp	.-142    	; 0x256 <MakeFriends+0x15c>
                    UpdateState(99+candidate);
     2e4:	83 e6       	ldi	r24, 0x63	; 99
     2e6:	89 0f       	add	r24, r25
     2e8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
                 
                    effect = 31;
     2ec:	8f e1       	ldi	r24, 0x1F	; 31
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     2f4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    WingBar(candidate, whoami);
     2f8:	60 91 43 38 	lds	r22, 0x3843	; 0x803843 <whoami>
     2fc:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <__data_end>
     300:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <WingBar>
     304:	d2 cf       	rjmp	.-92     	; 0x2aa <MakeFriends+0x1b0>
    } else {
        progress = NO_OTHER;
    }
      
    return 0;
}
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     314:	e6 e2       	ldi	r30, 0x26	; 38
     316:	f4 e0       	ldi	r31, 0x04	; 4
     318:	80 83       	st	Z, r24
     31a:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
     31e:	a1 e2       	ldi	r26, 0x21	; 33
     320:	b4 e0       	ldi	r27, 0x04	; 4
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	9c 93       	st	X, r25
     326:	90 83       	st	Z, r25
     328:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
     32c:	e0 e1       	ldi	r30, 0x10	; 16
     32e:	f8 e0       	ldi	r31, 0x08	; 8
     330:	97 e0       	ldi	r25, 0x07	; 7
     332:	96 83       	std	Z+6, r25	; 0x06
     334:	98 e0       	ldi	r25, 0x08	; 8
     336:	94 83       	std	Z+4, r25	; 0x04
     338:	83 83       	std	Z+3, r24	; 0x03
     33a:	8c 93       	st	X, r24
     33c:	85 81       	ldd	r24, Z+5	; 0x05
     33e:	81 60       	ori	r24, 0x01	; 1
     340:	85 83       	std	Z+5, r24	; 0x05
     342:	85 81       	ldd	r24, Z+5	; 0x05
     344:	84 6c       	ori	r24, 0xC4	; 196
     346:	85 83       	std	Z+5, r24	; 0x05
     348:	08 95       	ret

0000034a <I2C_recover>:
     34a:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     34e:	88 60       	ori	r24, 0x08	; 8
     350:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     354:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     358:	82 e0       	ldi	r24, 0x02	; 2
     35a:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     35e:	99 e0       	ldi	r25, 0x09	; 9
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     368:	30 e1       	ldi	r19, 0x10	; 16
     36a:	3a 95       	dec	r19
     36c:	f1 f7       	brne	.-4      	; 0x36a <I2C_recover+0x20>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <I2C_recover+0x26>
     370:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     374:	30 e1       	ldi	r19, 0x10	; 16
     376:	3a 95       	dec	r19
     378:	f1 f7       	brne	.-4      	; 0x376 <I2C_recover+0x2c>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <I2C_recover+0x32>
     37c:	91 50       	subi	r25, 0x01	; 1
     37e:	89 f7       	brne	.-30     	; 0x362 <I2C_recover+0x18>
     380:	28 e0       	ldi	r18, 0x08	; 8
     382:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     386:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     390:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     394:	91 60       	ori	r25, 0x01	; 1
     396:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     39e:	94 6c       	ori	r25, 0xC4	; 196
     3a0:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3a4:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     3a8:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     3ac:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     3b0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3b4:	81 60       	ori	r24, 0x01	; 1
     3b6:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3ba:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3be:	84 6c       	ori	r24, 0xC4	; 196
     3c0:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3c4:	08 95       	ret

000003c6 <I2C_start>:
     3c6:	28 2f       	mov	r18, r24
     3c8:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3cc:	90 6c       	ori	r25, 0xC0	; 192
     3ce:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d2:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3d6:	89 2f       	mov	r24, r25
     3d8:	84 70       	andi	r24, 0x04	; 4
     3da:	92 fd       	sbrc	r25, 2
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <I2C_start+0x1e>
     3de:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     3e2:	08 95       	ret
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	08 95       	ret

000003e8 <I2C_wait_ACK>:
     3e8:	8c e0       	ldi	r24, 0x0C	; 12
     3ea:	80 93 66 3a 	sts	0x3A66, r24	; 0x803a66 <timeout_I2C>
     3ee:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3f2:	87 fd       	sbrc	r24, 7
     3f4:	0a c0       	rjmp	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     3fa:	86 fd       	sbrc	r24, 6
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3fe:	80 91 66 3a 	lds	r24, 0x3A66	; 0x803a66 <timeout_I2C>
     402:	81 11       	cpse	r24, r1
     404:	f4 cf       	rjmp	.-24     	; 0x3ee <I2C_wait_ACK+0x6>
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	08 95       	ret
     40a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     40e:	80 6c       	ori	r24, 0xC0	; 192
     410:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     414:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     418:	82 fd       	sbrc	r24, 2
     41a:	09 c0       	rjmp	.+18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     41c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     420:	83 fd       	sbrc	r24, 3
     422:	07 c0       	rjmp	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     424:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     428:	82 95       	swap	r24
     42a:	81 70       	andi	r24, 0x01	; 1
     42c:	08 95       	ret
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	08 95       	ret
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	08 95       	ret

00000436 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     436:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     438:	8c e0       	ldi	r24, 0x0C	; 12
     43a:	80 93 66 3a 	sts	0x3A66, r24	; 0x803a66 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     43e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     442:	89 2f       	mov	r24, r25
     444:	83 70       	andi	r24, 0x03	; 3
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	11 f0       	breq	.+4      	; 0x44e <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     44e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     452:	97 fd       	sbrc	r25, 7
     454:	06 c0       	rjmp	.+12     	; 0x462 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     456:	90 91 66 3a 	lds	r25, 0x3A66	; 0x803a66 <timeout_I2C>
     45a:	91 11       	cpse	r25, r1
     45c:	f8 cf       	rjmp	.-16     	; 0x44e <I2C_read+0x18>
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     462:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     466:	90 6c       	ori	r25, 0xC0	; 192
     468:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     46c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     470:	92 fd       	sbrc	r25, 2
     472:	1e c0       	rjmp	.+60     	; 0x4b0 <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     474:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     478:	93 fd       	sbrc	r25, 3
     47a:	1d c0       	rjmp	.+58     	; 0x4b6 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     47c:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     480:	89 2f       	mov	r24, r25
     482:	80 71       	andi	r24, 0x10	; 16
     484:	94 fd       	sbrc	r25, 4
     486:	16 c0       	rjmp	.+44     	; 0x4b4 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     488:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     48c:	61 11       	cpse	r22, r1
     48e:	02 c0       	rjmp	.+4      	; 0x494 <I2C_read+0x5e>
     490:	9b 7f       	andi	r25, 0xFB	; 251
     492:	01 c0       	rjmp	.+2      	; 0x496 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     494:	94 60       	ori	r25, 0x04	; 4
     496:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     49a:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     49e:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     4a0:	61 11       	cpse	r22, r1
     4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <I2C_read+0x80>
     4a4:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4a8:	92 60       	ori	r25, 0x02	; 2
     4aa:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     4ae:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     4b4:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     4b6:	08 95       	ret

000004b8 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     4b8:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     4ba:	8c e0       	ldi	r24, 0x0C	; 12
     4bc:	80 93 66 3a 	sts	0x3A66, r24	; 0x803a66 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     4c0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4c4:	93 70       	andi	r25, 0x03	; 3
     4c6:	92 30       	cpi	r25, 0x02	; 2
     4c8:	b1 f4       	brne	.+44     	; 0x4f6 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     4ca:	80 81       	ld	r24, Z
     4cc:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     4d0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4d4:	86 fd       	sbrc	r24, 6
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4d8:	80 91 66 3a 	lds	r24, 0x3A66	; 0x803a66 <timeout_I2C>
     4dc:	81 11       	cpse	r24, r1
     4de:	f8 cf       	rjmp	.-16     	; 0x4d0 <I2C_write+0x18>
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4e4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     4e8:	82 fd       	sbrc	r24, 2
     4ea:	07 c0       	rjmp	.+14     	; 0x4fa <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     4ec:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     4f0:	82 95       	swap	r24
     4f2:	81 70       	andi	r24, 0x01	; 1
     4f4:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     4f6:	88 e0       	ldi	r24, 0x08	; 8
     4f8:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     4fa:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     4fc:	08 95       	ret

000004fe <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     4fe:	e0 e1       	ldi	r30, 0x10	; 16
     500:	f8 e0       	ldi	r31, 0x08	; 8
     502:	84 81       	ldd	r24, Z+4	; 0x04
     504:	83 60       	ori	r24, 0x03	; 3
     506:	84 83       	std	Z+4, r24	; 0x04
     508:	08 95       	ret

0000050a <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	6b 01       	movw	r12, r22
     51a:	f4 2e       	mov	r15, r20
     51c:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     51e:	18 2f       	mov	r17, r24
     520:	11 0f       	add	r17, r17
     522:	81 2f       	mov	r24, r17
     524:	50 df       	rcall	.-352    	; 0x3c6 <I2C_start>
	if (status != 0) goto error;
     526:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     528:	2b c0       	rjmp	.+86     	; 0x580 <I2C_read_bytes+0x76>
     52a:	5e df       	rcall	.-324    	; 0x3e8 <I2C_wait_ACK>
	if (status == 1) {
     52c:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     52e:	19 f4       	brne	.+6      	; 0x536 <I2C_read_bytes+0x2c>
     530:	e6 df       	rcall	.-52     	; 0x4fe <I2C_stop>
		return 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	27 c0       	rjmp	.+78     	; 0x584 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     536:	81 11       	cpse	r24, r1
     538:	23 c0       	rjmp	.+70     	; 0x580 <I2C_read_bytes+0x76>
    while(reg_len > 0){
     53a:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     53c:	49 f0       	breq	.+18     	; 0x550 <I2C_read_bytes+0x46>
     53e:	c6 01       	movw	r24, r12
     540:	bb df       	rcall	.-138    	; 0x4b8 <I2C_write>
	    if (status != 0) goto error;
     542:	81 11       	cpse	r24, r1
     544:	1d c0       	rjmp	.+58     	; 0x580 <I2C_read_bytes+0x76>
        ++reg_ptr;
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	c8 1a       	sub	r12, r24
     54a:	d8 0a       	sbc	r13, r24
        --reg_len;
     54c:	fa 94       	dec	r15
     54e:	f5 cf       	rjmp	.-22     	; 0x53a <I2C_read_bytes+0x30>
     550:	01 34       	cpi	r16, 0x41	; 65
     552:	08 f0       	brcs	.+2      	; 0x556 <I2C_read_bytes+0x4c>
     554:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     556:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     558:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     55c:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     55e:	40 f0       	brcs	.+16     	; 0x570 <I2C_read_bytes+0x66>
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	ce 01       	movw	r24, r28
     564:	68 df       	rcall	.-304    	; 0x436 <I2C_read>
		if (status != 0) goto error;
     566:	81 11       	cpse	r24, r1
     568:	0b c0       	rjmp	.+22     	; 0x580 <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     56a:	21 96       	adiw	r28, 0x01	; 1
     56c:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     56e:	f6 cf       	rjmp	.-20     	; 0x55c <I2C_read_bytes+0x52>
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     574:	60 df       	rcall	.-320    	; 0x436 <I2C_read>
     576:	81 11       	cpse	r24, r1
	I2C_stop();
     578:	03 c0       	rjmp	.+6      	; 0x580 <I2C_read_bytes+0x76>
     57a:	c1 df       	rcall	.-126    	; 0x4fe <I2C_stop>
	return 0;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     580:	e4 de       	rcall	.-568    	; 0x34a <I2C_recover>
     582:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     584:	df 91       	pop	r29
}
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	08 95       	ret

00000594 <initLanyard>:
uint8_t         lanyardCnt = 0;
uint8_t         lanyardState = TRUE;
uint16_t        lanyardLastActive = 0;

void initLanyard() {
    lanyardPos      = 0;
     594:	10 92 3d 38 	sts	0x383D, r1	; 0x80383d <lanyardPos>
    lanyardCnt      = 0;
     598:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
    lanyardState    = TRUE;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
    ClearHackerLeds();
     5a2:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <ClearHackerLeds>
     5a6:	08 95       	ret

000005a8 <LanyardCode>:
}

// Main game loop
uint8_t LanyardCode(){
     5a8:	cf 93       	push	r28
    if (gameNow == LANYARD && idleTimeout(lanyardLastActive,LANYARD_MAX_IDLE)) {
     5aa:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     5ae:	83 30       	cpi	r24, 0x03	; 3
     5b0:	81 f4       	brne	.+32     	; 0x5d2 <LanyardCode+0x2a>
     5b2:	6a e0       	ldi	r22, 0x0A	; 10
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <lanyardLastActive>
     5ba:	90 91 3b 38 	lds	r25, 0x383B	; 0x80383b <lanyardLastActive+0x1>
     5be:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <idleTimeout>
     5c2:	88 23       	and	r24, r24
     5c4:	31 f0       	breq	.+12     	; 0x5d2 <LanyardCode+0x2a>
        /* clean up maze game and go back to text game */
        initLanyard();
     5c6:	e6 df       	rcall	.-52     	; 0x594 <initLanyard>
        gameNow = TEXT;
     5c8:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        ClearHackerLeds();
     5cc:	0e 94 18 0b 	call	0x1630	; 0x1630 <ClearHackerLeds>
        return 0;
     5d0:	9b c0       	rjmp	.+310    	; 0x708 <LanyardCode+0x160>
    }

    if (CheckState(LANYARD_COMPLETED))
     5d2:	8b e7       	ldi	r24, 0x7B	; 123
     5d4:	1f d7       	rcall	.+3646   	; 0x1414 <CheckState>
     5d6:	81 11       	cpse	r24, r1
     5d8:	97 c0       	rjmp	.+302    	; 0x708 <LanyardCode+0x160>
        return 0;

    if ( gameNow != TEXT && gameNow != LANYARD )
     5da:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     5de:	88 23       	and	r24, r24
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <LanyardCode+0x40>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <LanyardCode+0x40>
     5e6:	90 c0       	rjmp	.+288    	; 0x708 <LanyardCode+0x160>
        return 0;

    /* activate led for buttonstate */
    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
     5e8:	c0 91 b8 be 	lds	r28, 0xBEB8	; 0x80beb8 <__bss_end+0x83a0>
     5ec:	ec 2f       	mov	r30, r28
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     5f4:	8f 3f       	cpi	r24, 0xFF	; 255
     5f6:	19 f0       	breq	.+6      	; 0x5fe <LanyardCode+0x56>
     5f8:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <LanyardCode+0x58>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	e7 53       	subi	r30, 0x37	; 55
     602:	f5 4c       	sbci	r31, 0xC5	; 197
     604:	90 83       	st	Z, r25

    if (buttonState == 0xff)
     606:	8f 3f       	cpi	r24, 0xFF	; 255
     608:	09 f4       	brne	.+2      	; 0x60c <LanyardCode+0x64>
     60a:	7e c0       	rjmp	.+252    	; 0x708 <LanyardCode+0x160>
        return 0;

    if (buttonState == lastButtonState)
     60c:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
     610:	89 17       	cp	r24, r25
     612:	09 f4       	brne	.+2      	; 0x616 <LanyardCode+0x6e>
     614:	79 c0       	rjmp	.+242    	; 0x708 <LanyardCode+0x160>
        return 0;

    lanyardLastActive = getClock();
     616:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <getClock>
     61a:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <lanyardLastActive>
     61e:	90 93 3b 38 	sts	0x383B, r25	; 0x80383b <lanyardLastActive+0x1>

    if (lastButtonState == 0xff){
     622:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <lastButtonState>
     626:	8f 3f       	cpi	r24, 0xFF	; 255
     628:	09 f0       	breq	.+2      	; 0x62c <LanyardCode+0x84>
     62a:	6e c0       	rjmp	.+220    	; 0x708 <LanyardCode+0x160>
        effect = 0x13f + (buttonState << 5);
     62c:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
     630:	20 e2       	ldi	r18, 0x20	; 32
     632:	82 9f       	mul	r24, r18
     634:	c0 01       	movw	r24, r0
     636:	11 24       	eor	r1, r1
     638:	81 5c       	subi	r24, 0xC1	; 193
     63a:	9e 4f       	sbci	r25, 0xFE	; 254
     63c:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     640:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>

        if (gameNow != LANYARD)
     644:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     648:	83 30       	cpi	r24, 0x03	; 3
            initLanyard();
     64a:	09 f0       	breq	.+2      	; 0x64e <LanyardCode+0xa6>
     64c:	a3 df       	rcall	.-186    	; 0x594 <initLanyard>
        gameNow = LANYARD;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>

        if (buttonState == lanyardCode[lanyardPos]) {
     654:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <lanyardPos>
     658:	e8 2f       	mov	r30, r24
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	e0 56       	subi	r30, 0x60	; 96
     65e:	f1 44       	sbci	r31, 0x41	; 65
     660:	20 81       	ld	r18, Z
     662:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
     666:	29 13       	cpse	r18, r25
     668:	12 c0       	rjmp	.+36     	; 0x68e <LanyardCode+0xe6>
            lanyardState &= TRUE;
     66a:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     66e:	91 70       	andi	r25, 0x01	; 1
     670:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[EYE[R][L]] = 0;
     674:	e0 91 c7 be 	lds	r30, 0xBEC7	; 0x80bec7 <__bss_end+0x83af>
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	e7 53       	subi	r30, 0x37	; 55
     67c:	f5 4c       	sbci	r31, 0xC5	; 197
     67e:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     680:	e0 91 c6 be 	lds	r30, 0xBEC6	; 0x80bec6 <__bss_end+0x83ae>
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	e7 53       	subi	r30, 0x37	; 55
     688:	f5 4c       	sbci	r31, 0xC5	; 197
     68a:	10 82       	st	Z, r1
     68c:	09 c0       	rjmp	.+18     	; 0x6a0 <LanyardCode+0xf8>
        } else {
            lanyardState = FALSE;
     68e:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            if (lanyardPos < 4 ) {
     692:	84 30       	cpi	r24, 0x04	; 4
                initLanyard();
     694:	28 f4       	brcc	.+10     	; 0x6a0 <LanyardCode+0xf8>
     696:	7e df       	rcall	.-260    	; 0x594 <initLanyard>
                gameNow         = BASTET;
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
                return 0;
     69e:	34 c0       	rjmp	.+104    	; 0x708 <LanyardCode+0x160>
            }
        }
        lanyardPos++;
     6a0:	8f 5f       	subi	r24, 0xFF	; 255
     6a2:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <lanyardPos>
        lanyardCnt++;            
     6a6:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <lanyardCnt>
     6aa:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     6ac:	94 30       	cpi	r25, 0x04	; 4
     6ae:	18 f4       	brcc	.+6      	; 0x6b6 <LanyardCode+0x10e>
                gameNow         = BASTET;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     6b0:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <lanyardCnt>
     6b4:	29 c0       	rjmp	.+82     	; 0x708 <LanyardCode+0x160>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     6b6:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <lanyardCnt>
            if (lanyardState == TRUE) {
     6ba:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     6be:	91 30       	cpi	r25, 0x01	; 1
     6c0:	e1 f4       	brne	.+56     	; 0x6fa <LanyardCode+0x152>
                if ((lanyardPos % 4) == 0) {
     6c2:	98 2f       	mov	r25, r24
     6c4:	93 70       	andi	r25, 0x03	; 3
     6c6:	69 f4       	brne	.+26     	; 0x6e2 <LanyardCode+0x13a>
                    iLED[HCKR[G][(lanyardPos>>2)-1]] = dimValue;
     6c8:	e8 2f       	mov	r30, r24
     6ca:	e6 95       	lsr	r30
     6cc:	e6 95       	lsr	r30
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	e6 53       	subi	r30, 0x36	; 54
     6d2:	f1 44       	sbci	r31, 0x41	; 65
     6d4:	e5 81       	ldd	r30, Z+5	; 0x05
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
     6dc:	e7 53       	subi	r30, 0x37	; 55
     6de:	f5 4c       	sbci	r31, 0xC5	; 197
                }
                if (lanyardPos == LANYARD_LEN) {
     6e0:	90 83       	st	Z, r25
     6e2:	88 31       	cpi	r24, 0x18	; 24
                    UpdateState(LANYARD_COMPLETED);
     6e4:	89 f4       	brne	.+34     	; 0x708 <LanyardCode+0x160>
     6e6:	8b e7       	ldi	r24, 0x7B	; 123
     6e8:	74 d6       	rcall	.+3304   	; 0x13d2 <UpdateState>
                    iLED[CAT]       = 0;
     6ea:	ec 2f       	mov	r30, r28
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	e7 53       	subi	r30, 0x37	; 55
     6f0:	f5 4c       	sbci	r31, 0xC5	; 197
                    effect = 0x42;
     6f2:	10 82       	st	Z, r1
     6f4:	82 e4       	ldi	r24, 0x42	; 66
     6f6:	90 e0       	ldi	r25, 0x00	; 0
                    /*TODO state = STATE_MUSIC;*/
                }
            } else {
                initLanyard();
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <LanyardCode+0x158>
     6fa:	4c df       	rcall	.-360    	; 0x594 <initLanyard>
                effect = 0x21;
     6fc:	81 e2       	ldi	r24, 0x21	; 33
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     704:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
            }
        }
    }

    return 0;
}
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <initMaze>:
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;
uint16_t        mazeLastActive = 0;

void initMaze() {
    mazeHckrPos = 0;
     70e:	10 92 4f 38 	sts	0x384F, r1	; 0x80384f <mazeHckrPos>
    mazePos = 0;
     712:	10 92 50 38 	sts	0x3850, r1	; 0x803850 <mazePos>
    mazeCnt = 0;
     716:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <mazeCnt>
    mazeState = TRUE;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <mazeState>
    inverted  = FALSE;
     720:	10 92 4d 38 	sts	0x384D, r1	; 0x80384d <inverted>
    ClearHackerLeds();
     724:	85 c7       	rjmp	.+3850   	; 0x1630 <ClearHackerLeds>
     726:	08 95       	ret

00000728 <showFieldStrength>:
}

void showFieldStrength(int16_t val) {
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
    int16_t field;
 
    field = abs(val);
     72e:	97 ff       	sbrs	r25, 7
     730:	03 c0       	rjmp	.+6      	; 0x738 <showFieldStrength+0x10>
     732:	d1 95       	neg	r29
     734:	c1 95       	neg	r28
     736:	d1 09       	sbc	r29, r1
 
    if ( field > HALL_FIELD_0 ) {
     738:	cd 33       	cpi	r28, 0x3D	; 61
     73a:	d1 05       	cpc	r29, r1
     73c:	44 f0       	brlt	.+16     	; 0x74e <showFieldStrength+0x26>
        if (gameNow == TEXT) {
     73e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     742:	81 11       	cpse	r24, r1
     744:	04 c0       	rjmp	.+8      	; 0x74e <showFieldStrength+0x26>
            initMaze();
     746:	e3 df       	rcall	.-58     	; 0x70e <initMaze>
            gameNow = MAZE;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
        }
    }

    if (gameNow == MAZE) {
     74e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	09 f5       	brne	.+66     	; 0x798 <showFieldStrength+0x70>
        if ( field < HALL_FIELD_0 )
     756:	cc 33       	cpi	r28, 0x3C	; 60
     758:	d1 05       	cpc	r29, r1
     75a:	1c f4       	brge	.+6      	; 0x762 <showFieldStrength+0x3a>
            WingBar(0,0);
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	1a c0       	rjmp	.+52     	; 0x796 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_1 )
     762:	c8 37       	cpi	r28, 0x78	; 120
     764:	d1 05       	cpc	r29, r1
     766:	1c f4       	brge	.+6      	; 0x76e <showFieldStrength+0x46>
            WingBar(1,1);
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	14 c0       	rjmp	.+40     	; 0x796 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_2 )
     76e:	c6 39       	cpi	r28, 0x96	; 150
     770:	d1 05       	cpc	r29, r1
     772:	1c f4       	brge	.+6      	; 0x77a <showFieldStrength+0x52>
            WingBar(2,2);
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e c0       	rjmp	.+28     	; 0x796 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_3 )
     77a:	c8 3c       	cpi	r28, 0xC8	; 200
     77c:	d1 05       	cpc	r29, r1
     77e:	1c f4       	brge	.+6      	; 0x786 <showFieldStrength+0x5e>
            WingBar(3,3);
     780:	63 e0       	ldi	r22, 0x03	; 3
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	08 c0       	rjmp	.+16     	; 0x796 <showFieldStrength+0x6e>
        else if ( field < HALL_FIELD_4 )
     786:	cc 32       	cpi	r28, 0x2C	; 44
     788:	d1 40       	sbci	r29, 0x01	; 1
     78a:	1c f4       	brge	.+6      	; 0x792 <showFieldStrength+0x6a>
            WingBar(4,4);
     78c:	64 e0       	ldi	r22, 0x04	; 4
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	02 c0       	rjmp	.+4      	; 0x796 <showFieldStrength+0x6e>
        else
            WingBar(5,5);
     792:	65 e0       	ldi	r22, 0x05	; 5
     794:	85 e0       	ldi	r24, 0x05	; 5
     796:	0e d7       	rcall	.+3612   	; 0x15b4 <WingBar>
    }
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <MagnetMaze>:

// Main game loop
uint8_t MagnetMaze(){
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
    if (gameNow == MAZE && idleTimeout(mazeLastActive,MAZE_MAX_IDLE)) {
     7a2:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	71 f4       	brne	.+28     	; 0x7c6 <MagnetMaze+0x28>
     7aa:	6a e0       	ldi	r22, 0x0A	; 10
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 4b 38 	lds	r24, 0x384B	; 0x80384b <mazeLastActive>
     7b2:	90 91 4c 38 	lds	r25, 0x384C	; 0x80384c <mazeLastActive+0x1>
     7b6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <idleTimeout>
     7ba:	88 23       	and	r24, r24
     7bc:	21 f0       	breq	.+8      	; 0x7c6 <MagnetMaze+0x28>
        /* clean up maze game and go back to text game */
        initMaze();
     7be:	a7 df       	rcall	.-178    	; 0x70e <initMaze>
        gameNow = TEXT;
     7c0:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        return 0;
     7c4:	e5 c0       	rjmp	.+458    	; 0x990 <MagnetMaze+0x1f2>
    }
        
    if (CheckState(MAZE_INACTIVE))
     7c6:	87 ef       	ldi	r24, 0xF7	; 247
     7c8:	25 d6       	rcall	.+3146   	; 0x1414 <CheckState>
     7ca:	81 11       	cpse	r24, r1
     7cc:	e1 c0       	rjmp	.+450    	; 0x990 <MagnetMaze+0x1f2>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     7ce:	8d e7       	ldi	r24, 0x7D	; 125
     7d0:	21 d6       	rcall	.+3138   	; 0x1414 <CheckState>
     7d2:	81 11       	cpse	r24, r1
     7d4:	dd c0       	rjmp	.+442    	; 0x990 <MagnetMaze+0x1f2>
     7d6:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	08 f0       	brcs	.+2      	; 0x7e0 <MagnetMaze+0x42>
     7de:	d8 c0       	rjmp	.+432    	; 0x990 <MagnetMaze+0x1f2>
     7e0:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <calHall>
        return 0;

    if (calHall == 0)
     7e4:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <calHall+0x1>
     7e8:	89 2b       	or	r24, r25
     7ea:	41 f4       	brne	.+16     	; 0x7fc <MagnetMaze+0x5e>
     7ec:	80 91 c1 3a 	lds	r24, 0x3AC1	; 0x803ac1 <adcHall>
        calHall = adcHall;
     7f0:	90 91 c2 3a 	lds	r25, 0x3AC2	; 0x803ac2 <adcHall+0x1>
     7f4:	80 93 f1 3a 	sts	0x3AF1, r24	; 0x803af1 <calHall>
     7f8:	90 93 f2 3a 	sts	0x3AF2, r25	; 0x803af2 <calHall+0x1>
     7fc:	c0 91 c1 3a 	lds	r28, 0x3AC1	; 0x803ac1 <adcHall>

    int16_t valHall = adcHall - calHall;
     800:	d0 91 c2 3a 	lds	r29, 0x3AC2	; 0x803ac2 <adcHall+0x1>
     804:	80 91 f1 3a 	lds	r24, 0x3AF1	; 0x803af1 <calHall>
     808:	90 91 f2 3a 	lds	r25, 0x3AF2	; 0x803af2 <calHall+0x1>
     80c:	c8 1b       	sub	r28, r24
     80e:	d9 0b       	sbc	r29, r25
    showFieldStrength(valHall);
     810:	ce 01       	movw	r24, r28
     812:	8a df       	rcall	.-236    	; 0x728 <showFieldStrength>
     814:	80 91 52 38 	lds	r24, 0x3852	; 0x803852 <curHallState>

    switch (curHallState) {
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	89 f0       	breq	.+34     	; 0x83e <MagnetMaze+0xa0>
     81c:	18 f0       	brcs	.+6      	; 0x824 <MagnetMaze+0x86>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	c1 f0       	breq	.+48     	; 0x852 <MagnetMaze+0xb4>
     822:	1f c0       	rjmp	.+62     	; 0x862 <MagnetMaze+0xc4>
     824:	c4 3d       	cpi	r28, 0xD4	; 212
        case 0:
            if ( valHall + HALL_HIGH < 0 ) {
     826:	9e ef       	ldi	r25, 0xFE	; 254
     828:	d9 07       	cpc	r29, r25
     82a:	14 f4       	brge	.+4      	; 0x830 <MagnetMaze+0x92>
     82c:	91 e0       	ldi	r25, 0x01	; 1
                newHallState = 1;
     82e:	04 c0       	rjmp	.+8      	; 0x838 <MagnetMaze+0x9a>
     830:	cd 32       	cpi	r28, 0x2D	; 45
            } else if ( valHall - HALL_HIGH > 0 ) {
     832:	d1 40       	sbci	r29, 0x01	; 1
     834:	5c f0       	brlt	.+22     	; 0x84c <MagnetMaze+0xae>
     836:	92 e0       	ldi	r25, 0x02	; 2
                newHallState = 2;
     838:	90 93 51 38 	sts	0x3851, r25	; 0x803851 <newHallState>
     83c:	12 c0       	rjmp	.+36     	; 0x862 <MagnetMaze+0xc4>
     83e:	cd 32       	cpi	r28, 0x2D	; 45
                newHallState = 0;
            }
            break;
        
        case 1:
            if ( valHall - HALL_HIGH > 0 ) {
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	d9 07       	cpc	r29, r25
     844:	c4 f7       	brge	.-16     	; 0x836 <MagnetMaze+0x98>
     846:	c9 38       	cpi	r28, 0x89	; 137
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     848:	df 4f       	sbci	r29, 0xFF	; 255
     84a:	84 f3       	brlt	.-32     	; 0x82c <MagnetMaze+0x8e>
     84c:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <newHallState>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     850:	08 c0       	rjmp	.+16     	; 0x862 <MagnetMaze+0xc4>
     852:	c4 3d       	cpi	r28, 0xD4	; 212
                newHallState = 1;
            }
            break;
        
        case 2:
            if ( valHall + HALL_HIGH < 0 ) {
     854:	9e ef       	ldi	r25, 0xFE	; 254
     856:	d9 07       	cpc	r29, r25
     858:	4c f3       	brlt	.-46     	; 0x82c <MagnetMaze+0x8e>
     85a:	c8 37       	cpi	r28, 0x78	; 120
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     85c:	d1 05       	cpc	r29, r1
     85e:	b4 f3       	brlt	.-20     	; 0x84c <MagnetMaze+0xae>
     860:	ea cf       	rjmp	.-44     	; 0x836 <MagnetMaze+0x98>
     862:	c0 91 b8 be 	lds	r28, 0xBEB8	; 0x80beb8 <__bss_end+0x83a0>
            }
            break;
    }

    /* Indicate that the magnet was read succesfully */
    iLED[CAT] = (newHallState ? dimValue : 0);
     866:	ec 2f       	mov	r30, r28
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	90 91 51 38 	lds	r25, 0x3851	; 0x803851 <newHallState>
     86e:	99 23       	and	r25, r25
     870:	19 f0       	breq	.+6      	; 0x878 <MagnetMaze+0xda>
     872:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     876:	01 c0       	rjmp	.+2      	; 0x87a <MagnetMaze+0xdc>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	e7 53       	subi	r30, 0x37	; 55
     87c:	f5 4c       	sbci	r31, 0xC5	; 197
     87e:	20 83       	st	Z, r18
     880:	2f e9       	ldi	r18, 0x9F	; 159
    effect = 0x19f;
     882:	31 e0       	ldi	r19, 0x01	; 1
     884:	20 93 40 38 	sts	0x3840, r18	; 0x803840 <effect>
     888:	30 93 41 38 	sts	0x3841, r19	; 0x803841 <effect+0x1>
     88c:	89 17       	cp	r24, r25

    if (newHallState != curHallState) {
     88e:	09 f4       	brne	.+2      	; 0x892 <MagnetMaze+0xf4>
     890:	7f c0       	rjmp	.+254    	; 0x990 <MagnetMaze+0x1f2>
     892:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <getClock>
        /* keep track of time to enable an idle timeout to exit the game */
        mazeLastActive = getClock();
     896:	80 93 4b 38 	sts	0x384B, r24	; 0x80384b <mazeLastActive>
     89a:	90 93 4c 38 	sts	0x384C, r25	; 0x80384c <mazeLastActive+0x1>
     89e:	90 91 50 38 	lds	r25, 0x3850	; 0x803850 <mazePos>

        /* Make the maze work regardless of badge orientation */
        if ((mazePos == 0) && (newHallState != 0))
     8a2:	80 91 51 38 	lds	r24, 0x3851	; 0x803851 <newHallState>
     8a6:	91 11       	cpse	r25, r1
     8a8:	08 c0       	rjmp	.+16     	; 0x8ba <MagnetMaze+0x11c>
     8aa:	88 23       	and	r24, r24
     8ac:	31 f0       	breq	.+12     	; 0x8ba <MagnetMaze+0x11c>
     8ae:	91 e0       	ldi	r25, 0x01	; 1
            inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <MagnetMaze+0x118>
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 4d 38 	sts	0x384D, r25	; 0x80384d <inverted>
     8ba:	80 93 52 38 	sts	0x3852, r24	; 0x803852 <curHallState>

        curHallState = newHallState;
     8be:	88 23       	and	r24, r24
        
        if (curHallState != 0) {
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <MagnetMaze+0x126>
     8c2:	66 c0       	rjmp	.+204    	; 0x990 <MagnetMaze+0x1f2>
     8c4:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
            if (gameNow == TEXT)
     8c8:	81 11       	cpse	r24, r1
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <MagnetMaze+0x130>
                initMaze();
     8cc:	20 df       	rcall	.-448    	; 0x70e <initMaze>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
            gameNow = MAZE;
     8d0:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>
     8d4:	80 91 4d 38 	lds	r24, 0x384D	; 0x80384d <inverted>

            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     8d8:	20 91 52 38 	lds	r18, 0x3852	; 0x803852 <curHallState>
     8dc:	88 23       	and	r24, r24
     8de:	11 f0       	breq	.+4      	; 0x8e4 <MagnetMaze+0x146>
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	28 27       	eor	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	80 91 50 38 	lds	r24, 0x3850	; 0x803850 <mazePos>
     8ea:	e8 2f       	mov	r30, r24
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ea 5f       	subi	r30, 0xFA	; 250
     8f0:	f0 44       	sbci	r31, 0x40	; 64
     8f2:	40 81       	ld	r20, Z
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	24 17       	cp	r18, r20
     8f8:	35 07       	cpc	r19, r21
     8fa:	91 f4       	brne	.+36     	; 0x920 <MagnetMaze+0x182>
     8fc:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                mazeState &= TRUE;
     900:	91 70       	andi	r25, 0x01	; 1
     902:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <mazeState>
     906:	e0 91 c7 be 	lds	r30, 0xBEC7	; 0x80bec7 <__bss_end+0x83af>
                iLED[EYE[R][L]] = 0;
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	e7 53       	subi	r30, 0x37	; 55
     90e:	f5 4c       	sbci	r31, 0xC5	; 197
     910:	10 82       	st	Z, r1
     912:	e0 91 c6 be 	lds	r30, 0xBEC6	; 0x80bec6 <__bss_end+0x83ae>
                iLED[EYE[R][R]] = 0;
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	e7 53       	subi	r30, 0x37	; 55
     91a:	f5 4c       	sbci	r31, 0xC5	; 197
     91c:	10 82       	st	Z, r1
     91e:	02 c0       	rjmp	.+4      	; 0x924 <MagnetMaze+0x186>
     920:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <mazeState>
            } else {
                mazeState = FALSE;
     924:	8f 5f       	subi	r24, 0xFF	; 255
            }
            mazePos++;
     926:	80 93 50 38 	sts	0x3850, r24	; 0x803850 <mazePos>
     92a:	90 91 4e 38 	lds	r25, 0x384E	; 0x80384e <mazeCnt>
            mazeCnt++;            
     92e:	9f 5f       	subi	r25, 0xFF	; 255
     930:	93 30       	cpi	r25, 0x03	; 3
            if (mazeCnt >= 3) {
     932:	18 f4       	brcc	.+6      	; 0x93a <MagnetMaze+0x19c>
     934:	90 93 4e 38 	sts	0x384E, r25	; 0x80384e <mazeCnt>
                iLED[EYE[R][R]] = 0;
            } else {
                mazeState = FALSE;
            }
            mazePos++;
            mazeCnt++;            
     938:	2b c0       	rjmp	.+86     	; 0x990 <MagnetMaze+0x1f2>
     93a:	10 92 4e 38 	sts	0x384E, r1	; 0x80384e <mazeCnt>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     93e:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <mazeState>
                if (mazeState == TRUE) {
     942:	91 30       	cpi	r25, 0x01	; 1
     944:	e1 f4       	brne	.+56     	; 0x97e <MagnetMaze+0x1e0>
     946:	90 91 4f 38 	lds	r25, 0x384F	; 0x80384f <mazeHckrPos>
                    iLED[HCKR[G][mazeHckrPos]] = dimValue;
     94a:	e9 2f       	mov	r30, r25
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e6 53       	subi	r30, 0x36	; 54
     950:	f1 44       	sbci	r31, 0x41	; 65
     952:	e6 81       	ldd	r30, Z+6	; 0x06
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
     95a:	e7 53       	subi	r30, 0x37	; 55
     95c:	f5 4c       	sbci	r31, 0xC5	; 197
     95e:	20 83       	st	Z, r18
     960:	9f 5f       	subi	r25, 0xFF	; 255
                    mazeHckrPos++;
     962:	90 93 4f 38 	sts	0x384F, r25	; 0x80384f <mazeHckrPos>
                    if (mazePos == sizeof(mazeCode)) {
     966:	82 31       	cpi	r24, 0x12	; 18
     968:	99 f4       	brne	.+38     	; 0x990 <MagnetMaze+0x1f2>
                        UpdateState(MAZE_COMPLETED);
     96a:	8d e7       	ldi	r24, 0x7D	; 125
     96c:	32 d5       	rcall	.+2660   	; 0x13d2 <UpdateState>
     96e:	ec 2f       	mov	r30, r28
                        iLED[CAT]       = 0;
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	e7 53       	subi	r30, 0x37	; 55
     974:	f5 4c       	sbci	r31, 0xC5	; 197
     976:	10 82       	st	Z, r1
                        effect = 0x42;
     978:	82 e4       	ldi	r24, 0x42	; 66
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	05 c0       	rjmp	.+10     	; 0x988 <MagnetMaze+0x1ea>
                        /*TODO state = STATE_MUSIC;*/
                    }
                } else {
                    initMaze();
     97e:	c7 de       	rcall	.-626    	; 0x70e <initMaze>
     980:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
                    gameNow   = TEXT;
     984:	81 e2       	ldi	r24, 0x21	; 33
                    effect = 0x21;
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
     98c:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
     990:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <Setup>:
     998:	cf 93       	push	r28
volatile uint16_t tmp16bit;    
volatile uint8_t mask[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
uint8_t HeartCount = 0;
uint8_t LedCount = 0;

void Setup(){
     99a:	df 93       	push	r29
    cli();
     99c:	f8 94       	cli

    //Set up clock at 10MHz
    CCP = CCP_IOREG_gc;
     99e:	88 ed       	ldi	r24, 0xD8	; 216
     9a0:	84 bf       	out	0x34, r24	; 52
    CLKCTRL_MCLKCTRLB = 0x01;
     9a2:	c1 e0       	ldi	r28, 0x01	; 1
     9a4:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>

    //Set I/O direction registers
    PORTA_DIR = 0b01001010;
     9a8:	8a e4       	ldi	r24, 0x4A	; 74
     9aa:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
    PORTB_DIR = 0b01111100;
     9ae:	8c e7       	ldi	r24, 0x7C	; 124
     9b0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
    PORTC_DIR = 0b00111111;
     9b4:	9f e3       	ldi	r25, 0x3F	; 63
     9b6:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>

    //Invert some pins for correcting LED reversal error
#ifndef PURIST_BADGE
    PORTC_PIN3CTRL |= 0x80;
     9ba:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     9be:	80 68       	ori	r24, 0x80	; 128
     9c0:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
    PORTC_PIN4CTRL |= 0x80;
     9c4:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     9c8:	80 68       	ori	r24, 0x80	; 128
     9ca:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
    PORTC_PIN5CTRL |= 0x80;
     9ce:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     9d2:	80 68       	ori	r24, 0x80	; 128
     9d4:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
    PORTB_PIN3CTRL |= 0x80;
     9d8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     9dc:	80 68       	ori	r24, 0x80	; 128
     9de:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
    PORTB_PIN4CTRL |= 0x80;
     9e2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     9e6:	80 68       	ori	r24, 0x80	; 128
     9e8:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
    PORTB_PIN5CTRL |= 0x80;
     9ec:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     9f0:	80 68       	ori	r24, 0x80	; 128
     9f2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
    PORTB_PIN2CTRL |= 0x80;
    PORTB_PIN6CTRL |= 0x80;
    */

    //UART (Alternative pins PA1=TxD, PA2=RxD, baudrate 9600, 8n1, RX and Buffer empty interrupts on)
    PORTMUX_CTRLB = 0x01;
     9f6:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    PORTA_OUTSET = 0x02;
     9fa:	d2 e0       	ldi	r29, 0x02	; 2
     9fc:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
    USART0_BAUD = (uint16_t)USART0_BAUD_RATE(115200);
     a00:	2b e5       	ldi	r18, 0x5B	; 91
     a02:	31 e0       	ldi	r19, 0x01	; 1
     a04:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     a08:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    USART0_CTRLA = 0xA0; //Interrupts on
     a0c:	80 ea       	ldi	r24, 0xA0	; 160
     a0e:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
    USART0_CTRLB = 0xC0; //RX and TX on
     a12:	80 ec       	ldi	r24, 0xC0	; 192
     a14:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    USART0_CTRLC = 0x03; //8 bits data, no parity, 1 stop bit
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     
    //GPIO registers 0..3 can be used for global variables used in ISR routines (ASM capability: IN, OUT, SBI, CBI, SBIS, SBIC)
    L_COL = 0;     //Used in LED array to hold currently driven column value
     a1e:	1c ba       	out	0x1c, r1	; 28
    RXCNT = 0;     //Used as UART receive counter
     a20:	1d ba       	out	0x1d, r1	; 29
    GPIOR3 = 0;    //
     a22:	1f ba       	out	0x1f, r1	; 31

    //Init TCA (split mode, f_CLK/16, PWM on 6 alternative pins, underflow int enabled, synced and started)
    TCA0_SPLIT_CTRLD = 1;
     a24:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
    TCA0_SPLIT_CTRLA = (0x4)<<1;
     a28:	88 e0       	ldi	r24, 0x08	; 8
     a2a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
    PORTMUX_CTRLC = 0x3F;
     a2e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    TCA0_SPLIT_CTRLB = 0x77;
     a32:	87 e7       	ldi	r24, 0x77	; 119
     a34:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
    TCA0_SPLIT_INTCTRL = 0x1;
     a38:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3;
     a3c:	8b e0       	ldi	r24, 0x0B	; 11
     a3e:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
    TCA0_SPLIT_CTRLA |= 1;
     a42:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     a46:	81 60       	ori	r24, 0x01	; 1
     a48:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     
    //Init TCB0 (compare value sets serial Tx pause between characters, uses TCA0 prescaler, enabled, interrupt disabled)
    TCB0_CTRLA = ((0x02)<<1)|0x01;
     a4c:	85 e0       	ldi	r24, 0x05	; 5
     a4e:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
    TCB0_CTRLB = 0;
     a52:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
    TCB0_CCMP = 0x01FF;
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     a5e:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    TCB0_INTCTRL = 0x00;     
     a62:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     
    //Init TCB1 (compare value sets audio sample rate (0x038B = 11025sps), enabled, interrupt enabled)
    TCB1_CTRLA = 0x01;
     a66:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
    TCB1_CTRLB = 0;
     a6a:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
    TCB1_CCMP = 0x038B;
     a6e:	8b e8       	ldi	r24, 0x8B	; 139
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     a76:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    TCB1_INTCTRL = 0x01;
     a7a:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>

    //Init I2C (100kHz)
    I2C_init();
     a7e:	47 dc       	rcall	.-1906   	; 0x30e <I2C_init>

    //VREF (DAC, ADC's)
    VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     a80:	82 e1       	ldi	r24, 0x12	; 18
     a82:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    VREF_CTRLC   = 0x20;    //ADC1 reference at 2.5V
     a86:	80 e2       	ldi	r24, 0x20	; 32
     a88:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    VREF_CTRLB   = 0x01;    //DAC0 ref forced enabled
     a8c:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

    //Init ADC0 (audio in, also controls DAC output rate, internal temperature?)
    ADC0_CTRLA   = 0x02;    //10 bit resolution, free running
     a90:	d0 93 00 06 	sts	0x0600, r29	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_CTRLC   = 0x44;    //Reduced sample capacitor, internal reference, clock/32 => 24038sps
     a94:	84 e4       	ldi	r24, 0x44	; 68
     a96:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     a9a:	8e e1       	ldi	r24, 0x1E	; 30
     a9c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    ADC0_INTCTRL = 0x01;    //Result ready interrupt enabled
     aa0:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    ADC0_CTRLA  |= 0x01;    //ADC0 enabled
     aa4:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    ADC0_COMMAND = 0x01;    //Start first conversion, after that it will run periodically.
     aae:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>

    //Init ADC1 (buttons and sensors: CH0=Photo transistor, CH1=Hall, CH4=Buttons)
    ADC1_CTRLA   = 0;
     ab2:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_CTRLB   = 0x02;    //4 results automatically accumulated
     ab6:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    ADC1_CTRLC   = 0x52;    //Reduced sample capacitor, VDD as reference, clock/8
     aba:	82 e5       	ldi	r24, 0x52	; 82
     abc:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    ADC1_SAMPCTRL= 0x04;    //Extend sampling time with 4 cycles (6 total)
     ac0:	84 e0       	ldi	r24, 0x04	; 4
     ac2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    ADC1_MUXPOS  = 0x04;    //Start with Buttons, for sensors, activate sensor power first.
     ac6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    ADC1_INTCTRL = 0x01;    //Result ready interrupt enabled
     aca:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
    ADC1_CTRLA  |= 0x01;    //ADC0 enabled
     ace:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
    ADC1_COMMAND = 0x01;    //Start single conversion
     ad8:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>

    //Init DAC0
    DAC0_CTRLA = 0x40;     //Enable output buffer (connect to pin)
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
    DAC0_DATA = 0x80;      //Data value at half point (about 1.25V)
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    DAC0_CTRLA |= 0x01;    //Enable DAC
     ae8:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     
    //PIT and RTC interrupts
    while(RTC_STATUS & RTC_CTRLABUSY_bm);
     af2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     af6:	80 fd       	sbrc	r24, 0
     af8:	fc cf       	rjmp	.-8      	; 0xaf2 <Setup+0x15a>
    RTC_CTRLA          = (0x6)<<3;                         //Prescaler: /64
     afa:	80 e3       	ldi	r24, 0x30	; 48
     afc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_CLKSEL         = 0;                                //Clock source: internal 32768Hz clock
     b00:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    while(RTC_STATUS & RTC_PERBUSY_bm);
     b04:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b08:	82 fd       	sbrc	r24, 2
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <Setup+0x16c>
    RTC_PER            = 512*60;                           //60 second period (for clocking how long the device has been running?)
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	98 e7       	ldi	r25, 0x78	; 120
     b10:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b14:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
    tmp16bit = (RTC_CNT + BTN_TMR);
     b18:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     b1c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     b20:	82 96       	adiw	r24, 0x22	; 34
     b22:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <tmp16bit>
     b26:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <tmp16bit+0x1>
    if (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     b2a:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b2e:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b32:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <tmp16bit>
     b36:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <tmp16bit+0x1>
     b3a:	28 17       	cp	r18, r24
     b3c:	39 07       	cpc	r19, r25
     b3e:	70 f4       	brcc	.+28     	; 0xb5c <Setup+0x1c4>
     b40:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     b44:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     b48:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <tmp16bit>
     b4c:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <tmp16bit+0x1>
     b50:	82 1b       	sub	r24, r18
     b52:	93 0b       	sbc	r25, r19
     b54:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <tmp16bit>
     b58:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <tmp16bit+0x1>
    while(RTC_STATUS & RTC_CMPBUSY_bm);
     b5c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b60:	83 fd       	sbrc	r24, 3
     b62:	fc cf       	rjmp	.-8      	; 0xb5c <Setup+0x1c4>
    RTC_CMP            = tmp16bit;                         //Button timing
     b64:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <tmp16bit>
     b68:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <tmp16bit+0x1>
     b6c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     b70:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
    RTC_INTCTRL        = 0x03;                             //RTC overflow interrupt enabled
     b74:	83 e0       	ldi	r24, 0x03	; 3
     b76:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    RTC_PITINTCTRL     = 0x01;                             //PIT interrupt enabled
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
    RTC_PITCTRLA       = (0x1)<<3;                         //Interrupt fires after 4 RTC clock cycles Rate=(RTCCLK/(PRESC*PERIOD)) 32768/256=128Hz
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
    while(RTC_STATUS & RTC_CTRLABUSY_bm);      
     b86:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     b8a:	80 fd       	sbrc	r24, 0
     b8c:	fc cf       	rjmp	.-8      	; 0xb86 <Setup+0x1ee>
    RTC_CTRLA          |= 0x01;                            //Enable RTC
     b8e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     b92:	81 60       	ori	r24, 0x01	; 1
     b94:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
    RTC_PITCTRLA       |= 0x01;                            //Enable PIT
     b98:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     b9c:	81 60       	ori	r24, 0x01	; 1
     b9e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     
    //Other inits
    serRx[0] = 0;           // Empty Rx buffer (first char is enough)
     ba2:	10 92 7b 3a 	sts	0x3A7B, r1	; 0x803a7b <serRx>
    serTxAddr = &serRx[0];  // Point to first address of the Rx buffer
     ba6:	8b e7       	ldi	r24, 0x7B	; 123
     ba8:	9a e3       	ldi	r25, 0x3A	; 58
     baa:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <serTxAddr>
     bae:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <serTxAddr+0x1>

    sei();
     bb2:	78 94       	sei
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <__vector_8>:

// TCA0 is used for driving the LED matrix at 488Hz (* 5 columns = 2440Hz). The lower 8 bit underflow interrupt is used to load new values and shift between columns.
ISR(TCA0_LUNF_vect){
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
    PORTB_OUTCLR = 0x44;
     bd6:	84 e4       	ldi	r24, 0x44	; 68
     bd8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
    "ldi r25, 6        \n"
    "ld r24, %a[arr]+  \n"
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");
     bdc:	ec b3       	in	r30, 0x1c	; 28
     bde:	88 e0       	ldi	r24, 0x08	; 8
     be0:	e8 9f       	mul	r30, r24
     be2:	f0 01       	movw	r30, r0
     be4:	11 24       	eor	r1, r1
     be6:	e7 53       	subi	r30, 0x37	; 55
     be8:	f5 4c       	sbci	r31, 0xC5	; 197
    //Turn off all columns
    PORTC_OUTCLR = 0x07;
    PORTB_OUTCLR = 0x44;

    //Write all of the compare registers of TCA0 with PWM values in array (rows)
    asm(
     bea:	a8 e2       	ldi	r26, 0x28	; 40
     bec:	ba e0       	ldi	r27, 0x0A	; 10
     bee:	96 e0       	ldi	r25, 0x06	; 6
     bf0:	81 91       	ld	r24, Z+
     bf2:	8d 93       	st	X+, r24
     bf4:	9a 95       	dec	r25
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <__vector_8+0x36>
    "st %a[wo]+, r24   \n"
    "dec r25           \n"
    "brne .-8          \n"
    :: [wo] "e" (&TCA0_SPLIT_LCMP0), [arr] "e" (&iLED[(L_COL<<3)]) : "r25", "r24", "cc", "memory");

    TCA0_SPLIT_CTRLESET = ((0x2)<<2)|0x3; //Sync timers: Moved this below the PWM value loading to fix the data shifting in asm above.
     bf8:	8b e0       	ldi	r24, 0x0B	; 11
     bfa:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>

    //Turn on the right column
    if (L_COL<3) {
     bfe:	8c b3       	in	r24, 0x1c	; 28
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	58 f4       	brcc	.+22     	; 0xc1a <__vector_8+0x60>
        asm(
     c04:	8c b3       	in	r24, 0x1c	; 28
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <__vector_8+0x52>
     c0a:	99 0f       	add	r25, r25
     c0c:	8a 95       	dec	r24
     c0e:	ea f7       	brpl	.-6      	; 0xc0a <__vector_8+0x50>
     c10:	99 b9       	out	0x09, r25	; 9
     c12:	8c b3       	in	r24, 0x1c	; 28
     c14:	83 95       	inc	r24
     c16:	8c bb       	out	0x1c, r24	; 28
     c18:	0a c0       	rjmp	.+20     	; 0xc2e <__vector_8+0x74>
        "in r24, %[io0]  \n"
        "inc r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpc] "I" (&VPORTC_OUT) : "r24", "r25", "cc");
        } else {
        asm(
     c1a:	8c b3       	in	r24, 0x1c	; 28
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	21 f4       	brne	.+8      	; 0xc28 <__vector_8+0x6e>
     c20:	2a 9a       	sbi	0x05, 2	; 5
     c22:	83 95       	inc	r24
     c24:	8c bb       	out	0x1c, r24	; 28
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <__vector_8+0x74>
     c28:	2e 9a       	sbi	0x05, 6	; 5
     c2a:	88 27       	eor	r24, r24
     c2c:	8c bb       	out	0x1c, r24	; 28
        "clr r24         \n"
        "out %[io0], r24 \n"
        :: [io0] "I" (&L_COL), [vpb] "I" (&VPORTB_OUT) : "r24", "cc");
    }
    
    if(timeout_I2C) --timeout_I2C;
     c2e:	80 91 66 3a 	lds	r24, 0x3A66	; 0x803a66 <timeout_I2C>
     c32:	88 23       	and	r24, r24
     c34:	29 f0       	breq	.+10     	; 0xc40 <__vector_8+0x86>
     c36:	80 91 66 3a 	lds	r24, 0x3A66	; 0x803a66 <timeout_I2C>
     c3a:	81 50       	subi	r24, 0x01	; 1
     c3c:	80 93 66 3a 	sts	0x3A66, r24	; 0x803a66 <timeout_I2C>
    TCA0_SPLIT_INTFLAGS = 0xFF;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_13>:

// TCB0 is used for (slowly) sending serial characters. A 0x00 character code is needed to terminate sending or it will leak memory to serial. It's a feature, honest! 
ISR(TCB0_INT_vect){
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
    if (*serTxAddr) {
     c6e:	e0 91 bf 3a 	lds	r30, 0x3ABF	; 0x803abf <serTxAddr>
     c72:	f0 91 c0 3a 	lds	r31, 0x3AC0	; 0x803ac0 <serTxAddr+0x1>
     c76:	80 81       	ld	r24, Z
     c78:	88 23       	and	r24, r24
     c7a:	91 f0       	breq	.+36     	; 0xca0 <__vector_13+0x44>
        USART0_TXDATAL = *serTxAddr;
     c7c:	80 81       	ld	r24, Z
     c7e:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        ++serTxAddr;
     c82:	80 91 bf 3a 	lds	r24, 0x3ABF	; 0x803abf <serTxAddr>
     c86:	90 91 c0 3a 	lds	r25, 0x3AC0	; 0x803ac0 <serTxAddr+0x1>
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <serTxAddr>
     c90:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <serTxAddr+0x1>
        USART0_CTRLA |= USART_DREIE_bm;
     c94:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c98:	80 62       	ori	r24, 0x20	; 32
     c9a:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <__vector_13+0x4e>
    } else {
        serTxDone = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x00;
     ca6:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    }
    TCB0_INTFLAGS = TCB_CAPT_bm;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
}
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <__vector_14>:

// TCB1 is used for audio generation. Keeps playing "data" until 0 is reached. Audio sample data can contain 0x01 to 0xFF, centered around 0x80
ISR(TCB1_INT_vect){
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
    int16_t volCtrl;
    if (*auSmpAddr == 0) auSmpAddr = auRepAddr;
     cda:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cde:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     ce2:	80 81       	ld	r24, Z
     ce4:	81 11       	cpse	r24, r1
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <__vector_14+0x36>
     ce8:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     cec:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     cf0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     cf4:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
    if (*auSmpAddr) {
     cf8:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     cfc:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d00:	80 81       	ld	r24, Z
     d02:	88 23       	and	r24, r24
     d04:	e1 f0       	breq	.+56     	; 0xd3e <__vector_14+0x7c>
        volCtrl = ((((int16_t)(*auSmpAddr) - 0x7f) * auVolume) >> 8) + 0x80;
     d06:	20 81       	ld	r18, Z
     d08:	40 91 bc 3a 	lds	r20, 0x3ABC	; 0x803abc <auVolume>
        DAC0_DATA = (uint8_t)(volCtrl);
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	2f 57       	subi	r18, 0x7F	; 127
     d10:	31 09       	sbc	r19, r1
     d12:	42 9f       	mul	r20, r18
     d14:	c0 01       	movw	r24, r0
     d16:	43 9f       	mul	r20, r19
     d18:	90 0d       	add	r25, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	89 2f       	mov	r24, r25
     d1e:	99 0f       	add	r25, r25
     d20:	99 0b       	sbc	r25, r25
     d22:	80 58       	subi	r24, 0x80	; 128
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
        ++auSmpAddr;
     d2a:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     d2e:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     d38:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <__vector_14+0x82>
    } else {
        DAC0_DATA = 0x80;
     d3e:	80 e8       	ldi	r24, 0x80	; 128
     d40:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
    }
    TCB1_INTFLAGS = TCB_CAPT_bm;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
}
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <__vector_27>:

// Reads up to RXLEN characters until LF is found, LF sets the serRxDone flag and writes 0 instead of LF.
ISR(USART0_RXC_vect){
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	8f 93       	push	r24
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
    if (serRxDone == 0){
     d72:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <serRxDone>
     d76:	81 11       	cpse	r24, r1
     d78:	44 c0       	rjmp	.+136    	; 0xe02 <__vector_27+0xa0>
        serRx[RXCNT] = USART0.RXDATAL;
     d7a:	ed b3       	in	r30, 0x1d	; 29
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     d82:	e5 58       	subi	r30, 0x85	; 133
     d84:	f5 4c       	sbci	r31, 0xC5	; 197
     d86:	80 83       	st	Z, r24
        USART0_TXDATAL = serRx[RXCNT];
     d88:	ed b3       	in	r30, 0x1d	; 29
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	e5 58       	subi	r30, 0x85	; 133
     d8e:	f5 4c       	sbci	r31, 0xC5	; 197
     d90:	80 81       	ld	r24, Z
     d92:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
        if ((serRx[RXCNT] == 0x0A)||(serRx[RXCNT] == 0x0D)){
     d96:	ed b3       	in	r30, 0x1d	; 29
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	e5 58       	subi	r30, 0x85	; 133
     d9c:	f5 4c       	sbci	r31, 0xC5	; 197
     d9e:	80 81       	ld	r24, Z
     da0:	8a 30       	cpi	r24, 0x0A	; 10
     da2:	39 f0       	breq	.+14     	; 0xdb2 <__vector_27+0x50>
     da4:	ed b3       	in	r30, 0x1d	; 29
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	e5 58       	subi	r30, 0x85	; 133
     daa:	f5 4c       	sbci	r31, 0xC5	; 197
     dac:	80 81       	ld	r24, Z
     dae:	8d 30       	cpi	r24, 0x0D	; 13
     db0:	49 f4       	brne	.+18     	; 0xdc4 <__vector_27+0x62>
            serRx[RXCNT] = 0;
     db2:	ed b3       	in	r30, 0x1d	; 29
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	e5 58       	subi	r30, 0x85	; 133
     db8:	f5 4c       	sbci	r31, 0xC5	; 197
     dba:	10 82       	st	Z, r1
            serRxDone = 1;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	80 93 4a 38 	sts	0x384A, r24	; 0x80384a <serRxDone>
     dc2:	1f c0       	rjmp	.+62     	; 0xe02 <__vector_27+0xa0>
        } else if (((serRx[RXCNT] == 0x08)||(serRx[RXCNT] == 0x7F))&&(RXCNT > 0)) {
     dc4:	ed b3       	in	r30, 0x1d	; 29
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	e5 58       	subi	r30, 0x85	; 133
     dca:	f5 4c       	sbci	r31, 0xC5	; 197
     dcc:	80 81       	ld	r24, Z
     dce:	88 30       	cpi	r24, 0x08	; 8
     dd0:	39 f0       	breq	.+14     	; 0xde0 <__vector_27+0x7e>
     dd2:	ed b3       	in	r30, 0x1d	; 29
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	e5 58       	subi	r30, 0x85	; 133
     dd8:	f5 4c       	sbci	r31, 0xC5	; 197
     dda:	80 81       	ld	r24, Z
     ddc:	8f 37       	cpi	r24, 0x7F	; 127
     dde:	59 f4       	brne	.+22     	; 0xdf6 <__vector_27+0x94>
     de0:	8d b3       	in	r24, 0x1d	; 29
     de2:	88 23       	and	r24, r24
     de4:	41 f0       	breq	.+16     	; 0xdf6 <__vector_27+0x94>
            serRx[RXCNT] = 0;
     de6:	ed b3       	in	r30, 0x1d	; 29
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	e5 58       	subi	r30, 0x85	; 133
     dec:	f5 4c       	sbci	r31, 0xC5	; 197
     dee:	10 82       	st	Z, r1
            --RXCNT;
     df0:	8d b3       	in	r24, 0x1d	; 29
     df2:	81 50       	subi	r24, 0x01	; 1
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <__vector_27+0x9e>
        } else if (RXCNT < (RXLEN-1)) ++RXCNT;
     df6:	8d b3       	in	r24, 0x1d	; 29
     df8:	80 34       	cpi	r24, 0x40	; 64
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <__vector_27+0xa0>
     dfc:	8d b3       	in	r24, 0x1d	; 29
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	8d bb       	out	0x1d, r24	; 29
    }
    USART0_STATUS = USART_RXCIF_bm;
     e02:	80 e8       	ldi	r24, 0x80	; 128
     e04:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
};
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	8f 91       	pop	r24
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_28>:

// Trigger new data write and turn off DRE interrupt.
ISR(USART0_DRE_vect){
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	8f 93       	push	r24
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
    TCB0_CNT = 0;
     e28:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     e2c:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
    TCB0_INTCTRL = 0x01;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
    USART0_CTRLA &= ~(USART_DREIE_bm);
     e36:	e5 e0       	ldi	r30, 0x05	; 5
     e38:	f8 e0       	ldi	r31, 0x08	; 8
     e3a:	80 81       	ld	r24, Z
     e3c:	8f 7d       	andi	r24, 0xDF	; 223
     e3e:	80 83       	st	Z, r24
};
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	8f 91       	pop	r24
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_20>:

// ADC used for audio input and temperature sensor.
ISR(ADC0_RESRDY_vect){
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
    //If just switched reference, discard first few samples
    if (adc0Chg == 0){
     e5e:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     e62:	81 11       	cpse	r24, r1
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__vector_20+0x3a>
        if (ADC0_MUXPOS == 0x1E) adcTemp = ADC0_RES; else auIn=ADC0_RESL;
     e66:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     e6a:	8e 31       	cpi	r24, 0x1E	; 30
     e6c:	49 f4       	brne	.+18     	; 0xe80 <__vector_20+0x30>
     e6e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e72:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     e76:	80 93 f3 3a 	sts	0x3AF3, r24	; 0x803af3 <adcTemp>
     e7a:	90 93 f4 3a 	sts	0x3AF4, r25	; 0x803af4 <adcTemp+0x1>
     e7e:	0a c0       	rjmp	.+20     	; 0xe94 <__vector_20+0x44>
     e80:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     e84:	80 93 c8 3a 	sts	0x3AC8, r24	; 0x803ac8 <auIn>
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <__vector_20+0x44>
    } else --adc0Chg;
     e8a:	80 91 3e 38 	lds	r24, 0x383E	; 0x80383e <adc0Chg>
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    ADC0_INTFLAGS = ADC_RESRDY_bm;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
}
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_22>:

// Reads out sensors at 8Hz and buttons at 42Hz (timed by PIT), power for the sensors is on 1/8th of the time to save power.
ISR(ADC1_RESRDY_vect){
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
    if (ADC1_MUXPOS == 0) {
     eb6:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     eba:	81 11       	cpse	r24, r1
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <__vector_22+0x2a>
        adcPhot = ADC1_RES;
     ebe:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ec2:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ec6:	80 93 c3 3a 	sts	0x3AC3, r24	; 0x803ac3 <adcPhot>
     eca:	90 93 c4 3a 	sts	0x3AC4, r25	; 0x803ac4 <adcPhot+0x1>
        ADC1_MUXPOS = 0x01;             //Select Hall sensor
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	10 c0       	rjmp	.+32     	; 0xef2 <__vector_22+0x4a>
    } else if (ADC1_MUXPOS == 1){
     ed2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	79 f4       	brne	.+30     	; 0xef8 <__vector_22+0x50>
        PORTA_OUTCLR = 0b00001000;      //Turn off sensor power
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
        adcHall = ADC1_RES;
     ee0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     ee4:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ee8:	80 93 c1 3a 	sts	0x3AC1, r24	; 0x803ac1 <adcHall>
     eec:	90 93 c2 3a 	sts	0x3AC2, r25	; 0x803ac2 <adcHall+0x1>
        ADC1_MUXPOS = 0x04;             //select buttons
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <__vector_22+0x70>
    } else {
        adcBtns = ADC1_RES;
     ef8:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     efc:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     f00:	80 93 bd 3a 	sts	0x3ABD, r24	; 0x803abd <adcBtns>
     f04:	90 93 be 3a 	sts	0x3ABE, r25	; 0x803abe <adcBtns+0x1>
        if (A1CNT == 15){
     f08:	8f b3       	in	r24, 0x1f	; 31
     f0a:	8f 30       	cpi	r24, 0x0F	; 15
     f0c:	29 f4       	brne	.+10     	; 0xf18 <__vector_22+0x70>
            ADC1_MUXPOS = 0x00;         //Select photo transistor
     f0e:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
            PORTA_OUTSET = 0b00001000;  //Turn on sensor power
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
        }
    }

    A1CNT=(A1CNT+1)%16;        
     f18:	8f b3       	in	r24, 0x1f	; 31
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	8f 70       	andi	r24, 0x0F	; 15
     f20:	99 27       	eor	r25, r25
     f22:	8f bb       	out	0x1f, r24	; 31
    ADC1_INTFLAGS = ADC_RESRDY_bm;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
}
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <__vector_6>:

// RTC compare interrupt, triggers at 512/BTN_TMR rate, also RTC overflow interrupt, triggers once a minute
ISR(RTC_CNT_vect) {
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	2f 93       	push	r18
     f44:	3f 93       	push	r19
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
    if (RTC_INTFLAGS & RTC_CMP_bm){
     f4a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     f4e:	81 ff       	sbrs	r24, 1
     f50:	36 c0       	rjmp	.+108    	; 0xfbe <__vector_6+0x86>
        if (buttonMark<0xff) ++buttonMark;   // For button timing purposes
     f52:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f56:	8f 3f       	cpi	r24, 0xFF	; 255
     f58:	29 f0       	breq	.+10     	; 0xf64 <__vector_6+0x2c>
     f5a:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <buttonMark>
        tmp16bit = (RTC_CNT + BTN_TMR);
     f64:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     f68:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     f6c:	82 96       	adiw	r24, 0x22	; 34
        while (tmp16bit > RTC_PER) tmp16bit -= RTC_PER;
     f6e:	80 93 f5 3a 	sts	0x3AF5, r24	; 0x803af5 <tmp16bit>
     f72:	90 93 f6 3a 	sts	0x3AF6, r25	; 0x803af6 <tmp16bit+0x1>
     f76:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f7a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f7e:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <tmp16bit>
     f82:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <tmp16bit+0x1>
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	58 f4       	brcc	.+22     	; 0xfa2 <__vector_6+0x6a>
     f8c:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     f90:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     f94:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <tmp16bit>
     f98:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <tmp16bit+0x1>
     f9c:	82 1b       	sub	r24, r18
     f9e:	93 0b       	sbc	r25, r19
     fa0:	e6 cf       	rjmp	.-52     	; 0xf6e <__vector_6+0x36>
        while(RTC_STATUS & RTC_CMPBUSY_bm);
     fa2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     fa6:	83 fd       	sbrc	r24, 3
     fa8:	fc cf       	rjmp	.-8      	; 0xfa2 <__vector_6+0x6a>
        RTC_CMP = tmp16bit;                 // Button timing: next interrupt set
     faa:	80 91 f5 3a 	lds	r24, 0x3AF5	; 0x803af5 <tmp16bit>
     fae:	90 91 f6 3a 	lds	r25, 0x3AF6	; 0x803af6 <tmp16bit+0x1>
     fb2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     fb6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
        RTC_INTFLAGS = RTC_CMP_bm;		    // clear interrupt flag
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <__vector_6+0x92>
    } else {
        ++minuteMark;                       // For very slow timing purposes, overflows to 0
     fbe:	80 91 49 38 	lds	r24, 0x3849	; 0x803849 <minuteMark>
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	80 93 49 38 	sts	0x3849, r24	; 0x803849 <minuteMark>
        RTC_INTFLAGS = RTC_OVF_bm;		    // clear interrupt flag
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    }
}
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <__vector_7>:

// PIT interrupt (timing of ADC1: sensor values)
ISR(RTC_PIT_vect) {						// PIT interrupt handling code
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	8f 93       	push	r24
    ADC1_COMMAND = 0x01;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    RTC_PITINTFLAGS = RTC_PI_bm;		// clear interrupt flag
     ff2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
     ff6:	8f 91       	pop	r24
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <EERead>:

// Read bytes from EEPROM
void EERead(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    1002:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1006:	91 fd       	sbrc	r25, 1
    1008:	fc cf       	rjmp	.-8      	; 0x1002 <EERead>
    100a:	fb 01       	movw	r30, r22
    100c:	48 0f       	add	r20, r24

    while(size){
    100e:	84 17       	cp	r24, r20
    1010:	39 f0       	breq	.+14     	; 0x1020 <EERead+0x1e>
        *eeValues++ = *(uint8_t *)(EEPROM_START+eeAddr++);  // Read data from buffer
    1012:	a8 2f       	mov	r26, r24
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	bc 5e       	subi	r27, 0xEC	; 236
    1018:	9c 91       	ld	r25, X
    101a:	91 93       	st	Z+, r25
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	f7 cf       	rjmp	.-18     	; 0x100e <EERead+0xc>
        --size;
    }
}
    1020:	08 95       	ret

00001022 <EEWrite>:
{
    uint8_t lastByteOfPage;
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1022:	9d e9       	ldi	r25, 0x9D	; 157
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1024:	24 e0       	ldi	r18, 0x04	; 4
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    1026:	33 e0       	ldi	r19, 0x03	; 3

// Write bytes to the EEPROM, if address exceeds EEPROM space data wraps around
uint8_t EEWrite(uint8_t eeAddr, uint8_t *eeValues, uint8_t size)
{
    uint8_t lastByteOfPage;
    while(size){
    1028:	44 23       	and	r20, r20
    102a:	09 f1       	breq	.+66     	; 0x106e <EEWrite+0x4c>
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
    102c:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1030:	51 fd       	sbrc	r21, 1
    1032:	fc cf       	rjmp	.-8      	; 0x102c <EEWrite+0xa>
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
    1034:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
    1036:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
    103a:	e8 2f       	mov	r30, r24
        while((size) && (lastByteOfPage == 0)){
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
    103c:	58 2f       	mov	r21, r24
    103e:	5f 71       	andi	r21, 0x1F	; 31
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	db 01       	movw	r26, r22
    1048:	11 97       	sbiw	r26, 0x01	; 1
    104a:	ac 91       	ld	r26, X
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	fc 5e       	subi	r31, 0xEC	; 236
    1050:	a0 83       	st	Z, r26
            --size;
    1052:	41 50       	subi	r20, 0x01	; 1
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1054:	19 f0       	breq	.+6      	; 0x105c <EEWrite+0x3a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
    1056:	e8 2f       	mov	r30, r24
    while(size){
        lastByteOfPage = 0;
        while(NVMCTRL_STATUS & NVMCTRL_EEBUSY_bm);              // Wait until any write operation has finished
        CCP = CCP_SPM_gc;                                       // Gain access to NVMCTRL_CTRLA
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEBUFCLR_gc;              // Clear page buffer
        while((size) && (lastByteOfPage == 0)){
    1058:	5f 31       	cpi	r21, 0x1F	; 31
    105a:	81 f7       	brne	.-32     	; 0x103c <EEWrite+0x1a>
            if ((eeAddr % EEPROM_PAGE_SIZE) == (EEPROM_PAGE_SIZE-1)) lastByteOfPage = 1;
            *(uint8_t *)(EEPROM_START+eeAddr++) = *eeValues++;  // Write data to buffer
            --size;
        }
        CCP = CCP_SPM_gc;
    105c:	94 bf       	out	0x34, r25	; 52
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
    105e:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    1062:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
    1066:	52 ff       	sbrs	r21, 2
    1068:	df cf       	rjmp	.-66     	; 0x1028 <EEWrite+0x6>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0;
}
    106c:	08 95       	ret
        }
        CCP = CCP_SPM_gc;
        NVMCTRL_CTRLA = NVMCTRL_CMD_PAGEERASEWRITE_gc;          // Erase old data and write new data to EEPROM
        if (NVMCTRL_STATUS & NVMCTRL_WRERROR_bm) return 1;
    }
    return 0;
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	08 95       	ret

00001072 <DecryptData>:
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    1072:	f9 01       	movw	r30, r18
    //offset += L_BOILER;
    while(length){
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    1074:	9c 01       	movw	r18, r24
    1076:	2e 1b       	sub	r18, r30
    1078:	3f 0b       	sbc	r19, r31
    107a:	88 e0       	ldi	r24, 0x08	; 8
    107c:	48 9f       	mul	r20, r24
    107e:	a0 01       	movw	r20, r0
    1080:	11 24       	eor	r1, r1
    1082:	4a 50       	subi	r20, 0x0A	; 10
    1084:	51 44       	sbci	r21, 0x41	; 65
}

//Decrypts data read from I2C EEPROM, max 255 bytes at a time
void DecryptData(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    //offset += L_BOILER;
    while(length){
    1086:	66 23       	and	r22, r22
    1088:	69 f0       	breq	.+26     	; 0x10a4 <DecryptData+0x32>
        *data ^= xor_key[type][(uint8_t)(offset%KEY_LENGTH)];
    108a:	df 01       	movw	r26, r30
    108c:	a2 0f       	add	r26, r18
    108e:	b3 1f       	adc	r27, r19
    1090:	a7 70       	andi	r26, 0x07	; 7
    1092:	bb 27       	eor	r27, r27
    1094:	a4 0f       	add	r26, r20
    1096:	b5 1f       	adc	r27, r21
    1098:	80 81       	ld	r24, Z
    109a:	9c 91       	ld	r25, X
    109c:	98 27       	eor	r25, r24
    109e:	91 93       	st	Z+, r25
        ++data;
        ++offset;
        --length;
    10a0:	61 50       	subi	r22, 0x01	; 1
    10a2:	f1 cf       	rjmp	.-30     	; 0x1086 <DecryptData+0x14>
    }
}
    10a4:	08 95       	ret

000010a6 <ExtEERead>:

//Game data: Read a number of bytes and decrypt
uint8_t ExtEERead(uint16_t offset, uint8_t length, uint8_t type, uint8_t *data){
    10a6:	a2 e0       	ldi	r26, 0x02	; 2
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e9 e5       	ldi	r30, 0x59	; 89
    10ac:	f8 e0       	ldi	r31, 0x08	; 8
    10ae:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__+0x10>
    10b2:	d6 2e       	mov	r13, r22
    10b4:	c4 2e       	mov	r12, r20
    10b6:	59 01       	movw	r10, r18
    offset &=EXT_EE_MAX;
    10b8:	7c 01       	movw	r14, r24
    10ba:	e8 94       	clt
    10bc:	f7 f8       	bld	r15, 7
    uint8_t reg[2] = {(uint8_t)(offset>>8), (uint8_t)(offset&0xff)};
    10be:	f9 82       	std	Y+1, r15	; 0x01
    10c0:	ea 82       	std	Y+2, r14	; 0x02
    uint8_t error = (I2C_read_bytes(EE_I2C_ADDR, &reg[0], 2, data, length));
    10c2:	06 2f       	mov	r16, r22
    10c4:	42 e0       	ldi	r20, 0x02	; 2
    10c6:	be 01       	movw	r22, r28
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	80 e5       	ldi	r24, 0x50	; 80
    10ce:	1d da       	rcall	.-3014   	; 0x50a <I2C_read_bytes>
    10d0:	18 2f       	mov	r17, r24
    if (error) return error;
    10d2:	81 11       	cpse	r24, r1
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <ExtEERead+0x3a>
    DecryptData(offset, length, type, data);
    10d6:	95 01       	movw	r18, r10
    10d8:	4c 2d       	mov	r20, r12
    10da:	6d 2d       	mov	r22, r13
    10dc:	c7 01       	movw	r24, r14
    10de:	c9 df       	rcall	.-110    	; 0x1072 <DecryptData>
    return 0;
}
    10e0:	81 2f       	mov	r24, r17
    10e2:	22 96       	adiw	r28, 0x02	; 2
    10e4:	ea e0       	ldi	r30, 0x0A	; 10
    10e6:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__epilogue_restores__+0x10>

000010ea <SerSend>:

// Sends a set of characters to the serial port, stops only when character value 0 is reached.
uint8_t SerSend(unsigned char *addr){
    if (serTxDone){
    10ea:	20 91 09 38 	lds	r18, 0x3809	; 0x803809 <serTxDone>
    10ee:	22 23       	and	r18, r18
    10f0:	59 f0       	breq	.+22     	; 0x1108 <SerSend+0x1e>
        serTxAddr = addr;
    10f2:	80 93 bf 3a 	sts	0x3ABF, r24	; 0x803abf <serTxAddr>
    10f6:	90 93 c0 3a 	sts	0x3AC0, r25	; 0x803ac0 <serTxAddr+0x1>
        serTxDone = 0;
    10fa:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <serTxDone>
        TCB0_INTCTRL = 0x01;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
        return 0;
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	08 95       	ret
    } else return 1;    //Error: Still sending data
    1108:	81 e0       	ldi	r24, 0x01	; 1
};
    110a:	08 95       	ret

0000110c <SerSpeed>:

// Set serial character output speed, 255-0 (0.8 to 100ms delay between characters)
void SerSpeed(uint8_t serSpd){
    110c:	28 2f       	mov	r18, r24
    if (serSpd<1) serSpd = 1;
    110e:	81 11       	cpse	r24, r1
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <SerSpeed+0x8>
    1112:	21 e0       	ldi	r18, 0x01	; 1
    TCB0_CCMP = ((uint16_t)(0xFF-serSpd)<<8) + 0xFF;
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	82 1b       	sub	r24, r18
    111a:	91 09       	sbc	r25, r1
    111c:	98 2f       	mov	r25, r24
    111e:	88 27       	eor	r24, r24
    1120:	81 50       	subi	r24, 0x01	; 1
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1128:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
    112c:	08 95       	ret

0000112e <SelectTSens>:
};

// Select temperature sensor
void SelectTSens(){
     VREF_CTRLA   = 0x12;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    112e:	82 e1       	ldi	r24, 0x12	; 18
    1130:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
    1134:	e0 e0       	ldi	r30, 0x00	; 0
    1136:	f6 e0       	ldi	r31, 0x06	; 6
    1138:	80 81       	ld	r24, Z
    113a:	8b 7f       	andi	r24, 0xFB	; 251
    113c:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x1E;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    113e:	8e e1       	ldi	r24, 0x1E	; 30
    1140:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1144:	83 e0       	ldi	r24, 0x03	; 3
    1146:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    114a:	08 95       	ret

0000114c <SelectAuIn>:
};

// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
    114c:	82 e2       	ldi	r24, 0x22	; 34
    114e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     ADC0_CTRLA   |= ADC_RESSEL_bm;
    1152:	e0 e0       	ldi	r30, 0x00	; 0
    1154:	f6 e0       	ldi	r31, 0x06	; 6
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	80 83       	st	Z, r24
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
    115c:	87 e0       	ldi	r24, 0x07	; 7
    115e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     adc0Chg = 3;
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	80 93 3e 38 	sts	0x383E, r24	; 0x80383e <adc0Chg>
    1168:	08 95       	ret

0000116a <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    116a:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcBtns>
    116e:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcBtns+0x1>
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1172:	24 e0       	ldi	r18, 0x04	; 4
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	2a 95       	dec	r18
    117a:	e1 f7       	brne	.-8      	; 0x1174 <CheckButtons+0xa>
    117c:	99 27       	eor	r25, r25
    117e:	80 36       	cpi	r24, 0x60	; 96
    1180:	91 05       	cpc	r25, r1
    1182:	40 f4       	brcc	.+16     	; 0x1194 <CheckButtons+0x2a>
    1184:	8f 34       	cpi	r24, 0x4F	; 79
    1186:	91 05       	cpc	r25, r1
    1188:	88 f4       	brcc	.+34     	; 0x11ac <CheckButtons+0x42>
    118a:	c0 97       	sbiw	r24, 0x30	; 48
    118c:	09 97       	sbiw	r24, 0x09	; 9
    118e:	90 f4       	brcc	.+36     	; 0x11b4 <CheckButtons+0x4a>

            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	11 c0       	rjmp	.+34     	; 0x11b6 <CheckButtons+0x4c>
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error

        switch(bADC){
    1194:	85 37       	cpi	r24, 0x75	; 117
    1196:	91 05       	cpc	r25, r1
    1198:	68 f0       	brcs	.+26     	; 0x11b4 <CheckButtons+0x4a>
    119a:	8e 38       	cpi	r24, 0x8E	; 142
    119c:	91 05       	cpc	r25, r1
    119e:	40 f0       	brcs	.+16     	; 0x11b0 <CheckButtons+0x46>
    11a0:	8e 59       	subi	r24, 0x9E	; 158
    11a2:	91 09       	sbc	r25, r1
    11a4:	81 97       	sbiw	r24, 0x21	; 33
    11a6:	30 f4       	brcc	.+12     	; 0x11b4 <CheckButtons+0x4a>
            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
            break;

            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
    11a8:	90 e0       	ldi	r25, 0x00	; 0
            break;
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <CheckButtons+0x4c>
            case 48 ... 56:          //52: Bottom left (+/-4)
            button = 2;
            break;

            case 79 ... 95:          //87: Top left (+/-8)
            button = 3;
    11ac:	93 e0       	ldi	r25, 0x03	; 3
            break;
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <CheckButtons+0x4c>

            case 117 ... 141:        //129: Top right (+/- 12)
            button = 1;
    11b0:	91 e0       	ldi	r25, 0x01	; 1
            break;
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <CheckButtons+0x4c>

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(){
    static uint8_t previousValue = 0xFF;
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t button = 0xFF;     //FF = released or error
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
            case 158 ... 190:        //174: Bottom right (+/- 16)
            button = 0;
            break;
        }

        if (((previousValue+1)== 0) || (button != previousValue)) {
    11b6:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <previousValue.3903>
    11ba:	98 17       	cp	r25, r24
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <CheckButtons+0x5a>
            previousValue = button;
    11be:	90 93 2a 38 	sts	0x382A, r25	; 0x80382a <previousValue.3903>
            return 0xFF;
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
        } else return button;

}
    11c4:	08 95       	ret

000011c6 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
    11c6:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <state.3913>
    11ca:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <state.3913+0x1>
    11ce:	9c 01       	movw	r18, r24
    11d0:	32 2f       	mov	r19, r18
    11d2:	22 27       	eor	r18, r18
    11d4:	32 95       	swap	r19
    11d6:	33 0f       	add	r19, r19
    11d8:	30 7e       	andi	r19, 0xE0	; 224
    11da:	82 27       	eor	r24, r18
    11dc:	93 27       	eor	r25, r19
    state ^= (state >> 9);
    11de:	9c 01       	movw	r18, r24
    11e0:	23 2f       	mov	r18, r19
    11e2:	33 27       	eor	r19, r19
    11e4:	26 95       	lsr	r18
    11e6:	82 27       	eor	r24, r18
    11e8:	93 27       	eor	r25, r19
    state ^= (state << 7);
    11ea:	9c 01       	movw	r18, r24
    11ec:	36 95       	lsr	r19
    11ee:	32 2f       	mov	r19, r18
    11f0:	22 27       	eor	r18, r18
    11f2:	37 95       	ror	r19
    11f4:	27 95       	ror	r18
    11f6:	82 27       	eor	r24, r18
    11f8:	93 27       	eor	r25, r19
    11fa:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <state.3913>
    11fe:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <state.3913+0x1>
    return (state & 0xff);
}
    1202:	08 95       	ret

00001204 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e8 e0       	ldi	r30, 0x08	; 8
    120a:	f9 e0       	ldi	r31, 0x09	; 9
    120c:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__prologue_saves__+0x16>
    1210:	7b 01       	movw	r14, r22
    1212:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
    1214:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1218:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
    121c:	e8 2f       	mov	r30, r24
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	e7 70       	andi	r30, 0x07	; 7
    1224:	ff 27       	eor	r31, r31
    1226:	e5 5d       	subi	r30, 0xD5	; 213
    1228:	f7 4c       	sbci	r31, 0xC7	; 199
    122a:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
    122c:	cc df       	rcall	.-104    	; 0x11c6 <lfsr>
    122e:	8d 21       	and	r24, r13
    1230:	c8 0f       	add	r28, r24
    1232:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
    1234:	c8 df       	rcall	.-112    	; 0x11c6 <lfsr>
    1236:	8d 21       	and	r24, r13
    1238:	c8 1b       	sub	r28, r24
    123a:	d1 09       	sbc	r29, r1
    123c:	0c 17       	cp	r16, r28
    123e:	1d 07       	cpc	r17, r29
    1240:	08 f4       	brcc	.+2      	; 0x1244 <floatSpeed+0x40>
    1242:	e8 01       	movw	r28, r16
    1244:	c7 01       	movw	r24, r14
    1246:	ec 16       	cp	r14, r28
    1248:	fd 06       	cpc	r15, r29
    124a:	08 f4       	brcc	.+2      	; 0x124e <floatSpeed+0x4a>
    124c:	ce 01       	movw	r24, r28
    124e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1252:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1256:	cd b7       	in	r28, 0x3d	; 61
}
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	e7 e0       	ldi	r30, 0x07	; 7
    125c:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__+0x16>

00001260 <floatAround>:
    1260:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	c8 2f       	mov	r28, r24
    126a:	d4 2f       	mov	r29, r20
    126c:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    126e:	e6 2f       	mov	r30, r22
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	31 97       	sbiw	r30, 0x01	; 1
    1274:	e7 70       	andi	r30, 0x07	; 7
    1276:	ff 27       	eor	r31, r31
    1278:	e5 5d       	subi	r30, 0xD5	; 213
    127a:	f7 4c       	sbci	r31, 0xC7	; 199
    127c:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    127e:	a3 df       	rcall	.-186    	; 0x11c6 <lfsr>
    1280:	81 23       	and	r24, r17
    1282:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    1284:	a0 df       	rcall	.-192    	; 0x11c6 <lfsr>
    1286:	81 23       	and	r24, r17
    1288:	c8 1b       	sub	r28, r24
    128a:	8c 2f       	mov	r24, r28
    128c:	00 23       	and	r16, r16
    if (max){
    128e:	41 f0       	breq	.+16     	; 0x12a0 <floatAround+0x40>
    1290:	9c 2f       	mov	r25, r28
    1292:	0c 17       	cp	r16, r28
    1294:	08 f4       	brcc	.+2      	; 0x1298 <floatAround+0x38>
    1296:	90 2f       	mov	r25, r16
    1298:	8d 2f       	mov	r24, r29
    129a:	d9 17       	cp	r29, r25
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <floatAround+0x40>
    129e:	89 2f       	mov	r24, r25
    12a0:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	8d 17       	cp	r24, r29
    12a6:	10 f0       	brcs	.+4      	; 0x12ac <floatAround+0x4c>
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	2d 2f       	mov	r18, r29
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	24 23       	and	r18, r20
    12b2:	35 23       	and	r19, r21
    12b4:	23 2b       	or	r18, r19
    12b6:	09 f0       	breq	.+2      	; 0x12ba <floatAround+0x5a>
    12b8:	8d 2f       	mov	r24, r29
    12ba:	df 91       	pop	r29

    return sample;
}
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <SaveGameState>:
    12c4:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    12c6:	df 92       	push	r13
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	64 97       	sbiw	r28, 0x14	; 20
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    12dc:	44 e1       	ldi	r20, 0x14	; 20
    12de:	be 01       	movw	r22, r28
    12e0:	6f 5f       	subi	r22, 0xFF	; 255
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	8d de       	rcall	.-742    	; 0x1002 <EERead>
    12e8:	87 e6       	ldi	r24, 0x67	; 103
    12ea:	c8 2e       	mov	r12, r24
    12ec:	8a e3       	ldi	r24, 0x3A	; 58
    12ee:	d8 2e       	mov	r13, r24
    12f0:	8e 01       	movw	r16, r28
    12f2:	0f 5f       	subi	r16, 0xFF	; 255
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    12f6:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    12f8:	f8 01       	movw	r30, r16
    12fa:	81 91       	ld	r24, Z+
    12fc:	8f 01       	movw	r16, r30
    12fe:	f6 01       	movw	r30, r12
    1300:	90 81       	ld	r25, Z
    1302:	98 13       	cpse	r25, r24
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    1306:	f3 94       	inc	r15
    1308:	ff ef       	ldi	r31, 0xFF	; 255
    130a:	cf 1a       	sub	r12, r31
    130c:	df 0a       	sbc	r13, r31
    130e:	80 e1       	ldi	r24, 0x10	; 16
    1310:	f8 12       	cpse	r15, r24
    1312:	f2 cf       	rjmp	.-28     	; 0x12f8 <SaveGameState+0x34>
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	b6 01       	movw	r22, r12
    131a:	8f 2d       	mov	r24, r15
    131c:	82 de       	rcall	.-764    	; 0x1022 <EEWrite>
    131e:	88 23       	and	r24, r24
    1320:	91 f3       	breq	.-28     	; 0x1306 <SaveGameState+0x42>
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	36 c0       	rjmp	.+108    	; 0x1392 <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    1326:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    132a:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    132e:	30 93 77 3a 	sts	0x3A77, r19	; 0x803a77 <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    1332:	20 93 78 3a 	sts	0x3A78, r18	; 0x803a78 <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    1336:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    133a:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    133e:	90 93 79 3a 	sts	0x3A79, r25	; 0x803a79 <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    1342:	80 93 7a 3a 	sts	0x3A7A, r24	; 0x803a7a <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    1346:	89 89       	ldd	r24, Y+17	; 0x11
    1348:	9a 89       	ldd	r25, Y+18	; 0x12
    134a:	98 27       	eor	r25, r24
    134c:	89 27       	eor	r24, r25
    134e:	98 27       	eor	r25, r24
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	69 f4       	brne	.+26     	; 0x1370 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    1356:	8b 89       	ldd	r24, Y+19	; 0x13
    1358:	9c 89       	ldd	r25, Y+20	; 0x14
    135a:	98 27       	eor	r25, r24
    135c:	89 27       	eor	r24, r25
    135e:	98 27       	eor	r25, r24
    1360:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    1364:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    1368:	28 17       	cp	r18, r24
    136a:	39 07       	cpc	r19, r25
    136c:	49 f4       	brne	.+18     	; 0x1380 <SaveGameState+0xbc>
    136e:	10 c0       	rjmp	.+32     	; 0x1390 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1370:	42 e0       	ldi	r20, 0x02	; 2
    1372:	67 e7       	ldi	r22, 0x77	; 119
    1374:	7a e3       	ldi	r23, 0x3A	; 58
    1376:	80 e1       	ldi	r24, 0x10	; 16
    1378:	54 de       	rcall	.-856    	; 0x1022 <EEWrite>
    137a:	88 23       	and	r24, r24
    137c:	61 f3       	breq	.-40     	; 0x1356 <SaveGameState+0x92>
    137e:	d1 cf       	rjmp	.-94     	; 0x1322 <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1380:	42 e0       	ldi	r20, 0x02	; 2
    1382:	69 e7       	ldi	r22, 0x79	; 121
    1384:	7a e3       	ldi	r23, 0x3A	; 58
    1386:	82 e1       	ldi	r24, 0x12	; 18
    1388:	4c de       	rcall	.-872    	; 0x1022 <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	81 11       	cpse	r24, r1
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <SaveGameState+0xce>
    1390:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    1392:	89 2f       	mov	r24, r25
    1394:	64 96       	adiw	r28, 0x14	; 20
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	08 95       	ret

000013aa <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    13aa:	e8 2f       	mov	r30, r24
    13ac:	ef 77       	andi	r30, 0x7F	; 127
    13ae:	e6 95       	lsr	r30
    13b0:	e6 95       	lsr	r30
    13b2:	e6 95       	lsr	r30
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	e9 59       	subi	r30, 0x99	; 153
    13b8:	f5 4c       	sbci	r31, 0xC5	; 197
    13ba:	20 81       	ld	r18, Z
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	87 70       	andi	r24, 0x07	; 7
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <ReadStatusBit+0x1e>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <ReadStatusBit+0x1a>
    13cc:	ca 01       	movw	r24, r20
}
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	08 95       	ret

000013d2 <UpdateState>:

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    13d2:	e8 2f       	mov	r30, r24
    13d4:	ef 77       	andi	r30, 0x7F	; 127
    
    if (num) {
    13d6:	e9 f0       	breq	.+58     	; 0x1412 <UpdateState+0x40>
    13d8:	e6 95       	lsr	r30
    13da:	e6 95       	lsr	r30
    13dc:	e6 95       	lsr	r30
    13de:	28 2f       	mov	r18, r24
    13e0:	27 70       	andi	r18, 0x07	; 7
        if (clearBit) {
            gameState[num>>3] &= ~(1<<(num&7));
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	e9 59       	subi	r30, 0x99	; 153
    13e6:	f5 4c       	sbci	r31, 0xC5	; 197
void UpdateState(uint8_t num){
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    
    if (num) {
        if (clearBit) {
    13e8:	87 ff       	sbrs	r24, 7
    13ea:	0a c0       	rjmp	.+20     	; 0x1400 <UpdateState+0x2e>
            gameState[num>>3] &= ~(1<<(num&7));
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <UpdateState+0x22>
    13f2:	88 0f       	add	r24, r24
    13f4:	2a 95       	dec	r18
    13f6:	ea f7       	brpl	.-6      	; 0x13f2 <UpdateState+0x20>
    13f8:	80 95       	com	r24
    13fa:	90 81       	ld	r25, Z
    13fc:	89 23       	and	r24, r25
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <UpdateState+0x3e>
        } else {
            gameState[num>>3] |= 1<<(num&7);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <UpdateState+0x36>
    1406:	88 0f       	add	r24, r24
    1408:	2a 95       	dec	r18
    140a:	ea f7       	brpl	.-6      	; 0x1406 <UpdateState+0x34>
    140c:	90 81       	ld	r25, Z
    140e:	89 2b       	or	r24, r25
    1410:	80 83       	st	Z, r24
    1412:	08 95       	ret

00001414 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    1414:	cf 93       	push	r28
    1416:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    1418:	8f 77       	andi	r24, 0x7F	; 127
    141a:	c7 df       	rcall	.-114    	; 0x13aa <ReadStatusBit>
    141c:	2c 2f       	mov	r18, r28
    141e:	22 1f       	adc	r18, r18
    1420:	22 27       	eor	r18, r18
    1422:	22 1f       	adc	r18, r18
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	81 11       	cpse	r24, r1
    1428:	01 c0       	rjmp	.+2      	; 0x142c <CheckState+0x18>
    142a:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    142c:	82 2f       	mov	r24, r18
    142e:	89 27       	eor	r24, r25
    1430:	cf 91       	pop	r28
    1432:	08 95       	ret

00001434 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    1434:	e3 e0       	ldi	r30, 0x03	; 3
    1436:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    1438:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    143a:	91 91       	ld	r25, Z+
    143c:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    143e:	ed 30       	cpi	r30, 0x0D	; 13
    1440:	91 e1       	ldi	r25, 0x11	; 17
    1442:	f9 07       	cpc	r31, r25
    1444:	d1 f7       	brne	.-12     	; 0x143a <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    1446:	83 70       	andi	r24, 0x03	; 3
    whoami = id+1;
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	98 0f       	add	r25, r24
    144c:	90 93 43 38 	sts	0x3843, r25	; 0x803843 <whoami>
    return id;
}
    1450:	08 95       	ret

00001452 <Reset>:

void Reset(){
    1452:	cf 93       	push	r28
    1454:	e7 e6       	ldi	r30, 0x67	; 103
    1456:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    1458:	11 92       	st	Z+, r1
    //Reset game progress (all zeros) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    145a:	8a e3       	ldi	r24, 0x3A	; 58
    145c:	eb 37       	cpi	r30, 0x7B	; 123
    145e:	f8 07       	cpc	r31, r24
    1460:	d9 f7       	brne	.-10     	; 0x1458 <Reset+0x6>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    1462:	e8 df       	rcall	.-48     	; 0x1434 <getID>
    1464:	c8 2f       	mov	r28, r24

    //Write bit in gameState location 110..113
    if (id == 0) UpdateState(110);
    1466:	81 11       	cpse	r24, r1
    1468:	02 c0       	rjmp	.+4      	; 0x146e <Reset+0x1c>
    146a:	8e e6       	ldi	r24, 0x6E	; 110
    146c:	0b c0       	rjmp	.+22     	; 0x1484 <Reset+0x32>
    else if (id == 1) UpdateState(111);
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	11 f4       	brne	.+4      	; 0x1476 <Reset+0x24>
    1472:	8f e6       	ldi	r24, 0x6F	; 111
    1474:	07 c0       	rjmp	.+14     	; 0x1484 <Reset+0x32>
    else if (id == 2) UpdateState(112);
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	11 f4       	brne	.+4      	; 0x147e <Reset+0x2c>
    147a:	80 e7       	ldi	r24, 0x70	; 112
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <Reset+0x32>
    else if (id == 3) UpdateState(113);
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	11 f4       	brne	.+4      	; 0x1486 <Reset+0x34>
    1482:	81 e7       	ldi	r24, 0x71	; 113
    1484:	a6 df       	rcall	.-180    	; 0x13d2 <UpdateState>
    UpdateState(100+id);
    1486:	84 e6       	ldi	r24, 0x64	; 100
    1488:	8c 0f       	add	r24, r28
    148a:	a3 df       	rcall	.-186    	; 0x13d2 <UpdateState>

    //Write bit 0, must always be 1!

}
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1494:	44 e1       	ldi	r20, 0x14	; 20
    1496:	67 e6       	ldi	r22, 0x67	; 103
    1498:	7a e3       	ldi	r23, 0x3A	; 58
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	b2 dd       	rcall	.-1180   	; 0x1002 <EERead>
    149e:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    14a0:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    14a2:	8c 2f       	mov	r24, r28
    14a4:	82 df       	rcall	.-252    	; 0x13aa <ReadStatusBit>
    14a6:	d8 0f       	add	r29, r24
    14a8:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    14aa:	c2 37       	cpi	r28, 0x72	; 114
    14ac:	d1 f7       	brne	.-12     	; 0x14a2 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    14ae:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <LoadGameState+0x26>
    14b2:	cf df       	rcall	.-98     	; 0x1452 <Reset>
    } else getID();
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <LoadGameState+0x28>
    14b6:	be df       	rcall	.-132    	; 0x1434 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    14b8:	80 91 77 3a 	lds	r24, 0x3A77	; 0x803a77 <gameState+0x10>
    14bc:	90 91 78 3a 	lds	r25, 0x3A78	; 0x803a78 <gameState+0x11>
    14c0:	98 27       	eor	r25, r24
    14c2:	89 27       	eor	r24, r25
    14c4:	98 27       	eor	r25, r24
    14c6:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    14ca:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    14ce:	80 91 79 3a 	lds	r24, 0x3A79	; 0x803a79 <gameState+0x12>
    14d2:	90 91 7a 3a 	lds	r25, 0x3A7A	; 0x803a7a <gameState+0x13>
    14d6:	98 27       	eor	r25, r24
    14d8:	89 27       	eor	r24, r25
    14da:	98 27       	eor	r25, r24
    14dc:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    14e0:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <HotSummer>:
    //Write bit 0, must always be 1!

}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    14ea:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    14ec:	86 e7       	ldi	r24, 0x76	; 118
    14ee:	92 df       	rcall	.-220    	; 0x1414 <CheckState>
    14f0:	c8 2f       	mov	r28, r24
    14f2:	88 23       	and	r24, r24
    14f4:	81 f0       	breq	.+32     	; 0x1516 <HotSummer+0x2c>
        iLED[SCARAB[R]] = 0;
    14f6:	e0 91 ba be 	lds	r30, 0xBEBA	; 0x80beba <__bss_end+0x83a2>
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	e7 53       	subi	r30, 0x37	; 55
    14fe:	f5 4c       	sbci	r31, 0xC5	; 197
    1500:	10 82       	st	Z, r1
        iLED[SCARAB[G]] = dimValue;
    1502:	e0 91 bb be 	lds	r30, 0xBEBB	; 0x80bebb <__bss_end+0x83a3>
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    150c:	e7 53       	subi	r30, 0x37	; 55
    150e:	f5 4c       	sbci	r31, 0xC5	; 197
    1510:	80 83       	st	Z, r24
        return 1;
    1512:	c1 e0       	ldi	r28, 0x01	; 1
    1514:	4c c0       	rjmp	.+152    	; 0x15ae <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    1516:	85 e7       	ldi	r24, 0x75	; 117
    1518:	7d df       	rcall	.-262    	; 0x1414 <CheckState>
    151a:	88 23       	and	r24, r24
    151c:	59 f1       	breq	.+86     	; 0x1574 <HotSummer+0x8a>
        iLED[SCARAB[R]] = dimValue;
    151e:	e0 91 ba be 	lds	r30, 0xBEBA	; 0x80beba <__bss_end+0x83a2>
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1528:	e7 53       	subi	r30, 0x37	; 55
    152a:	f5 4c       	sbci	r31, 0xC5	; 197
    152c:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 32))) {
    152e:	80 91 5f 38 	lds	r24, 0x385F	; 0x80385f <cooledDown.3968>
    1532:	88 23       	and	r24, r24
    1534:	79 f0       	breq	.+30     	; 0x1554 <HotSummer+0x6a>
    1536:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <calTemp>
    153a:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <calTemp+0x1>
    153e:	20 91 f3 3a 	lds	r18, 0x3AF3	; 0x803af3 <adcTemp>
    1542:	30 91 f4 3a 	lds	r19, 0x3AF4	; 0x803af4 <adcTemp+0x1>
    1546:	80 96       	adiw	r24, 0x20	; 32
    1548:	28 17       	cp	r18, r24
    154a:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    154c:	18 f0       	brcs	.+6      	; 0x1554 <HotSummer+0x6a>
    154e:	86 e7       	ldi	r24, 0x76	; 118
    1550:	40 df       	rcall	.-384    	; 0x13d2 <UpdateState>
            return 0;
    1552:	2d c0       	rjmp	.+90     	; 0x15ae <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 8)) cooledDown = 1;
    1554:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <calTemp>
    1558:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <calTemp+0x1>
    155c:	20 91 f3 3a 	lds	r18, 0x3AF3	; 0x803af3 <adcTemp>
    1560:	30 91 f4 3a 	lds	r19, 0x3AF4	; 0x803af4 <adcTemp+0x1>
    1564:	08 96       	adiw	r24, 0x08	; 8
    1566:	82 17       	cp	r24, r18
    1568:	93 07       	cpc	r25, r19
    156a:	08 f1       	brcs	.+66     	; 0x15ae <HotSummer+0xc4>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <cooledDown.3968>
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1574:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <calTemp>
    1578:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <calTemp+0x1>
    157c:	89 2b       	or	r24, r25
    157e:	41 f4       	brne	.+16     	; 0x1590 <HotSummer+0xa6>
    1580:	80 91 f3 3a 	lds	r24, 0x3AF3	; 0x803af3 <adcTemp>
    1584:	90 91 f4 3a 	lds	r25, 0x3AF4	; 0x803af4 <adcTemp+0x1>
    1588:	80 93 c6 3a 	sts	0x3AC6, r24	; 0x803ac6 <calTemp>
    158c:	90 93 c7 3a 	sts	0x3AC7, r25	; 0x803ac7 <calTemp+0x1>
        if (adcTemp >= (calTemp + 32)) {
    1590:	80 91 c6 3a 	lds	r24, 0x3AC6	; 0x803ac6 <calTemp>
    1594:	90 91 c7 3a 	lds	r25, 0x3AC7	; 0x803ac7 <calTemp+0x1>
    1598:	20 91 f3 3a 	lds	r18, 0x3AF3	; 0x803af3 <adcTemp>
    159c:	30 91 f4 3a 	lds	r19, 0x3AF4	; 0x803af4 <adcTemp+0x1>
    15a0:	80 96       	adiw	r24, 0x20	; 32
    15a2:	28 17       	cp	r18, r24
    15a4:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    15a6:	18 f0       	brcs	.+6      	; 0x15ae <HotSummer+0xc4>
    15a8:	85 e7       	ldi	r24, 0x75	; 117
    15aa:	13 df       	rcall	.-474    	; 0x13d2 <UpdateState>
        }
    }
    return 0;
    15ac:	c0 e0       	ldi	r28, 0x00	; 0
}
    15ae:	8c 2f       	mov	r24, r28
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <WingBar>:

void WingBar(int8_t l, int8_t r) {
    15b4:	ec eb       	ldi	r30, 0xBC	; 188
    15b6:	fe eb       	ldi	r31, 0xBE	; 190
    for (int8_t i=0; i<5; i++) {
    15b8:	90 e0       	ldi	r25, 0x00	; 0
        if (i<l)
            iLED[WING[L][i]] = dimValue;
    15ba:	a5 81       	ldd	r26, Z+5	; 0x05
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
        if (i<l)
    15be:	98 17       	cp	r25, r24
    15c0:	34 f4       	brge	.+12     	; 0x15ce <WingBar+0x1a>
            iLED[WING[L][i]] = dimValue;
    15c2:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15c6:	a7 53       	subi	r26, 0x37	; 55
    15c8:	b5 4c       	sbci	r27, 0xC5	; 197
    15ca:	2c 93       	st	X, r18
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <WingBar+0x20>
        else
            iLED[WING[L][i]] = 0;
    15ce:	a7 53       	subi	r26, 0x37	; 55
    15d0:	b5 4c       	sbci	r27, 0xC5	; 197
    15d2:	1c 92       	st	X, r1
        if (i<r)
            iLED[WING[R][i]] = dimValue;
    15d4:	a0 81       	ld	r26, Z
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    for (int8_t i=0; i<5; i++) {
        if (i<l)
            iLED[WING[L][i]] = dimValue;
        else
            iLED[WING[L][i]] = 0;
        if (i<r)
    15d8:	96 17       	cp	r25, r22
    15da:	34 f4       	brge	.+12     	; 0x15e8 <WingBar+0x34>
            iLED[WING[R][i]] = dimValue;
    15dc:	20 91 0c 38 	lds	r18, 0x380C	; 0x80380c <dimValue>
    15e0:	a7 53       	subi	r26, 0x37	; 55
    15e2:	b5 4c       	sbci	r27, 0xC5	; 197
    15e4:	2c 93       	st	X, r18
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <WingBar+0x3a>
        else
            iLED[WING[R][i]] = 0;
    15e8:	a7 53       	subi	r26, 0x37	; 55
    15ea:	b5 4c       	sbci	r27, 0xC5	; 197
    15ec:	1c 92       	st	X, r1
    15ee:	9f 5f       	subi	r25, 0xFF	; 255
    15f0:	31 96       	adiw	r30, 0x01	; 1
    }
    return 0;
}

void WingBar(int8_t l, int8_t r) {
    for (int8_t i=0; i<5; i++) {
    15f2:	95 30       	cpi	r25, 0x05	; 5
    15f4:	11 f7       	brne	.-60     	; 0x15ba <WingBar+0x6>
        if (i<r)
            iLED[WING[R][i]] = dimValue;
        else
            iLED[WING[R][i]] = 0;
    }
}
    15f6:	08 95       	ret

000015f8 <SetBothEyes>:

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    15f8:	a6 ec       	ldi	r26, 0xC6	; 198
    15fa:	be eb       	ldi	r27, 0xBE	; 190
    15fc:	ec 91       	ld	r30, X
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	e7 53       	subi	r30, 0x37	; 55
    1602:	f5 4c       	sbci	r31, 0xC5	; 197
    1604:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1606:	12 96       	adiw	r26, 0x02	; 2
    1608:	ec 91       	ld	r30, X
    160a:	12 97       	sbiw	r26, 0x02	; 2
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	e7 53       	subi	r30, 0x37	; 55
    1610:	f5 4c       	sbci	r31, 0xC5	; 197
    1612:	60 83       	st	Z, r22
    }
}

void SetBothEyes(uint8_t r, uint8_t g) {
    for (uint8_t i=0; i<2; i++) {
        iLED[EYE[R][i]] = r;
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	ec 91       	ld	r30, X
    1618:	11 97       	sbiw	r26, 0x01	; 1
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	e7 53       	subi	r30, 0x37	; 55
    161e:	f5 4c       	sbci	r31, 0xC5	; 197
    1620:	80 83       	st	Z, r24
        iLED[EYE[G][i]] = g;
    1622:	13 96       	adiw	r26, 0x03	; 3
    1624:	ec 91       	ld	r30, X
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	e7 53       	subi	r30, 0x37	; 55
    162a:	f5 4c       	sbci	r31, 0xC5	; 197
    162c:	60 83       	st	Z, r22
    162e:	08 95       	ret

00001630 <ClearHackerLeds>:
    }
}

void ClearHackerLeds() {
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	ea ec       	ldi	r30, 0xCA	; 202
    1636:	fe eb       	ldi	r31, 0xBE	; 190
    1638:	ef 01       	movw	r28, r30
    for (uint8_t i=0;i<6;i++) {
        iLED[HCKR[G][i]] = 0;
    163a:	a6 81       	ldd	r26, Z+6	; 0x06
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	a7 53       	subi	r26, 0x37	; 55
    1640:	b5 4c       	sbci	r27, 0xC5	; 197
    1642:	1c 92       	st	X, r1
    1644:	31 96       	adiw	r30, 0x01	; 1
        iLED[HCKR[R][i]] = 0;
    1646:	a8 81       	ld	r26, Y
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	a7 53       	subi	r26, 0x37	; 55
    164c:	b5 4c       	sbci	r27, 0xC5	; 197
    164e:	1c 92       	st	X, r1
        iLED[EYE[G][i]] = g;
    }
}

void ClearHackerLeds() {
    for (uint8_t i=0;i<6;i++) {
    1650:	8e eb       	ldi	r24, 0xBE	; 190
    1652:	e0 3d       	cpi	r30, 0xD0	; 208
    1654:	f8 07       	cpc	r31, r24
    1656:	81 f7       	brne	.-32     	; 0x1638 <ClearHackerLeds+0x8>
        iLED[HCKR[G][i]] = 0;
        iLED[HCKR[R][i]] = 0;
    }
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <GenerateBlinks>:


void GenerateBlinks(){
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e3       	ldi	r30, 0x35	; 53
    1664:	fb e0       	ldi	r31, 0x0B	; 11
    1666:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__prologue_saves__+0x14>
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    166a:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    166e:	88 23       	and	r24, r24
    1670:	29 f0       	breq	.+10     	; 0x167c <GenerateBlinks+0x1e>
                iLED[HCKR[R][i]] = dimValue;
            }
        }
    }

    if (CheckState(GEM_STATE)) {
    1672:	80 e4       	ldi	r24, 0x40	; 64
    1674:	cf de       	rcall	.-610    	; 0x1414 <CheckState>
    1676:	81 11       	cpse	r24, r1
    1678:	24 c0       	rjmp	.+72     	; 0x16c2 <GenerateBlinks+0x64>
    167a:	50 c0       	rjmp	.+160    	; 0x171c <GenerateBlinks+0xbe>
    167c:	ca ec       	ldi	r28, 0xCA	; 202
    167e:	de eb       	ldi	r29, 0xBE	; 190
    used by the games, the other LEDs can be used by setting 
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
    1680:	1a e7       	ldi	r17, 0x7A	; 122
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    1682:	81 2f       	mov	r24, r17
    1684:	c7 de       	rcall	.-626    	; 0x1414 <CheckState>
                iLED[HCKR[G][i]] = dimValue;
    1686:	ee 81       	ldd	r30, Y+6	; 0x06
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
            if(CheckState(HACKER_STATES + i)) {
    168a:	88 23       	and	r24, r24
    168c:	59 f0       	breq	.+22     	; 0x16a4 <GenerateBlinks+0x46>
                iLED[HCKR[G][i]] = dimValue;
    168e:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1692:	e7 53       	subi	r30, 0x37	; 55
    1694:	f5 4c       	sbci	r31, 0xC5	; 197
    1696:	80 83       	st	Z, r24
                iLED[HCKR[R][i]] = 0;
    1698:	e8 81       	ld	r30, Y
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	e7 53       	subi	r30, 0x37	; 55
    169e:	f5 4c       	sbci	r31, 0xC5	; 197
    16a0:	10 82       	st	Z, r1
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <GenerateBlinks+0x5a>
            } else {
                iLED[HCKR[G][i]] = 0;
    16a4:	e7 53       	subi	r30, 0x37	; 55
    16a6:	f5 4c       	sbci	r31, 0xC5	; 197
    16a8:	10 82       	st	Z, r1
                iLED[HCKR[R][i]] = dimValue;
    16aa:	e8 81       	ld	r30, Y
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    16b2:	e7 53       	subi	r30, 0x37	; 55
    16b4:	f5 4c       	sbci	r31, 0xC5	; 197
    16b6:	80 83       	st	Z, r24
    16b8:	1f 5f       	subi	r17, 0xFF	; 255
    16ba:	21 96       	adiw	r28, 0x01	; 1
    effect (or be set directly)
    */

    //Activate HCKR & BADGER leds based on the state-bits
    if (gameNow == TEXT) {
        for (uint8_t i=0;i<6;i++) {
    16bc:	10 38       	cpi	r17, 0x80	; 128
    16be:	09 f7       	brne	.-62     	; 0x1682 <GenerateBlinks+0x24>
    16c0:	d8 cf       	rjmp	.-80     	; 0x1672 <GenerateBlinks+0x14>
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16c2:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <HeartCount>
    16c6:	98 2f       	mov	r25, r24
    16c8:	9d 7f       	andi	r25, 0xFD	; 253
    16ca:	e0 91 b9 be 	lds	r30, 0xBEB9	; 0x80beb9 <__bss_end+0x83a1>
            iLED[BADGER] = dimValue>>1 ;
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
            }
        }
    }

    if (CheckState(GEM_STATE)) {
        if ( HeartCount == 1 || HeartCount == 3 || HeartCount == 5 )
    16d0:	91 30       	cpi	r25, 0x01	; 1
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <GenerateBlinks+0x7a>
    16d4:	85 30       	cpi	r24, 0x05	; 5
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <GenerateBlinks+0x82>
            iLED[BADGER] = dimValue>>1 ;
    16d8:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16dc:	96 95       	lsr	r25
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <GenerateBlinks+0x8e>
        else if ( HeartCount == 2 || HeartCount == 4 )
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	11 f0       	breq	.+4      	; 0x16e8 <GenerateBlinks+0x8a>
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	31 f4       	brne	.+12     	; 0x16f4 <GenerateBlinks+0x96>
            iLED[BADGER] = dimValue;
    16e8:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    16ec:	e7 53       	subi	r30, 0x37	; 55
    16ee:	f5 4c       	sbci	r31, 0xC5	; 197
    16f0:	90 83       	st	Z, r25
    16f2:	0c c0       	rjmp	.+24     	; 0x170c <GenerateBlinks+0xae>
        else if ( HeartCount == 0 || HeartCount == 6 )
    16f4:	88 23       	and	r24, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <GenerateBlinks+0x9e>
    16f8:	86 30       	cpi	r24, 0x06	; 6
    16fa:	29 f4       	brne	.+10     	; 0x1706 <GenerateBlinks+0xa8>
            iLED[BADGER] = dimValue>>2;
    16fc:	90 91 0c 38 	lds	r25, 0x380C	; 0x80380c <dimValue>
    1700:	96 95       	lsr	r25
    1702:	96 95       	lsr	r25
    1704:	f3 cf       	rjmp	.-26     	; 0x16ec <GenerateBlinks+0x8e>
        else
            iLED[BADGER] = 0;
    1706:	e7 53       	subi	r30, 0x37	; 55
    1708:	f5 4c       	sbci	r31, 0xC5	; 197
    170a:	10 82       	st	Z, r1
        if (HeartCount<32)
    170c:	80 32       	cpi	r24, 0x20	; 32
    170e:	20 f4       	brcc	.+8      	; 0x1718 <GenerateBlinks+0xba>
            HeartCount++;
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <HeartCount>
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GenerateBlinks+0xbe>
        else
            HeartCount = 0;
    1718:	10 92 61 38 	sts	0x3861, r1	; 0x803861 <HeartCount>
    }

    //LEDs effects for all games
    // Keep a counter for dynamic effects
    LedCount++;
    171c:	90 91 60 38 	lds	r25, 0x3860	; 0x803860 <LedCount>
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <LedCount>
    
    switch (effect&0x1f) {
    1726:	e0 91 40 38 	lds	r30, 0x3840	; 0x803840 <effect>
    172a:	f0 91 41 38 	lds	r31, 0x3841	; 0x803841 <effect+0x1>
    172e:	ef 71       	andi	r30, 0x1F	; 31
    1730:	ff 27       	eor	r31, r31
    1732:	e9 30       	cpi	r30, 0x09	; 9
    1734:	f1 05       	cpc	r31, r1
    1736:	08 f0       	brcs	.+2      	; 0x173a <GenerateBlinks+0xdc>
    1738:	f4 c0       	rjmp	.+488    	; 0x1922 <GenerateBlinks+0x2c4>
    173a:	e2 5c       	subi	r30, 0xC2	; 194
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__tablejump2__>
        // All LEDs off
        case 0:
            WingBar(0,0);
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	36 df       	rcall	.-404    	; 0x15b4 <WingBar>
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    1748:	e0 91 c6 be 	lds	r30, 0xBEC6	; 0x80bec6 <__bss_end+0x83ae>
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	e7 53       	subi	r30, 0x37	; 55
    1750:	f5 4c       	sbci	r31, 0xC5	; 197
    1752:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1754:	e0 91 c8 be 	lds	r30, 0xBEC8	; 0x80bec8 <__bss_end+0x83b0>
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	e7 53       	subi	r30, 0x37	; 55
    175c:	f5 4c       	sbci	r31, 0xC5	; 197
    175e:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1760:	e0 91 ba be 	lds	r30, 0xBEBA	; 0x80beba <__bss_end+0x83a2>
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	e7 53       	subi	r30, 0x37	; 55
    1768:	f5 4c       	sbci	r31, 0xC5	; 197
    176a:	10 82       	st	Z, r1
    switch (effect&0x1f) {
        // All LEDs off
        case 0:
            WingBar(0,0);
            for (uint8_t i=0; i<2; i++) {
                iLED[EYE[R][i]] = 0;
    176c:	e0 91 c7 be 	lds	r30, 0xBEC7	; 0x80bec7 <__bss_end+0x83af>
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	e7 53       	subi	r30, 0x37	; 55
    1774:	f5 4c       	sbci	r31, 0xC5	; 197
    1776:	10 82       	st	Z, r1
                iLED[EYE[G][i]] = 0; 
    1778:	e0 91 c9 be 	lds	r30, 0xBEC9	; 0x80bec9 <__bss_end+0x83b1>
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	e7 53       	subi	r30, 0x37	; 55
    1780:	f5 4c       	sbci	r31, 0xC5	; 197
    1782:	10 82       	st	Z, r1
                iLED[SCARAB[i]] = 0;
    1784:	e0 91 bb be 	lds	r30, 0xBEBB	; 0x80bebb <__bss_end+0x83a3>
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	e7 53       	subi	r30, 0x37	; 55
    178c:	f5 4c       	sbci	r31, 0xC5	; 197
    178e:	10 82       	st	Z, r1
            }
            iLED[CAT] = 0;
    1790:	e0 91 b8 be 	lds	r30, 0xBEB8	; 0x80beb8 <__bss_end+0x83a0>
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	e7 53       	subi	r30, 0x37	; 55
    1798:	f5 4c       	sbci	r31, 0xC5	; 197
    179a:	10 82       	st	Z, r1
            break;
    179c:	c2 c0       	rjmp	.+388    	; 0x1922 <GenerateBlinks+0x2c4>

        //'flashing red eyes',       # 1 can be used when a bad answer is given
        case 1:
            SetBothEyes((LedCount & 1 ? dimValue : 0),0);
    179e:	89 2f       	mov	r24, r25
    17a0:	81 70       	andi	r24, 0x01	; 1
    17a2:	90 fd       	sbrc	r25, 0
    17a4:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <GenerateBlinks+0x168>
    17ac:	69 2f       	mov	r22, r25
    17ae:	70 e0       	ldi	r23, 0x00	; 0
            break;

        //'flashing green eyes',     # 2 can be used when a good answer is given
        case 2:
            SetBothEyes(0, 0x1f + (((LedCount & 0x08) ? ((LedCount&0x07)^0x07) : (LedCount&0x07))<<5));
    17b0:	93 ff       	sbrs	r25, 3
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GenerateBlinks+0x15a>
    17b4:	60 95       	com	r22
    17b6:	70 95       	com	r23
    17b8:	95 e0       	ldi	r25, 0x05	; 5
    17ba:	66 0f       	add	r22, r22
    17bc:	77 1f       	adc	r23, r23
    17be:	9a 95       	dec	r25
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <GenerateBlinks+0x15c>
    17c2:	61 5e       	subi	r22, 0xE1	; 225
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	18 df       	rcall	.-464    	; 0x15f8 <SetBothEyes>
            break;
    17c8:	ac c0       	rjmp	.+344    	; 0x1922 <GenerateBlinks+0x2c4>

        //'flash both wings'
        case 5:
            if ((LedCount & 3) == 0) {
    17ca:	89 2f       	mov	r24, r25
    17cc:	83 70       	andi	r24, 0x03	; 3
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <GenerateBlinks+0x174>
    17d0:	a8 c0       	rjmp	.+336    	; 0x1922 <GenerateBlinks+0x2c4>
                if (LedCount & 4)
    17d2:	92 ff       	sbrs	r25, 2
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <GenerateBlinks+0x17e>
                    WingBar(5,5);
    17d6:	65 e0       	ldi	r22, 0x05	; 5
    17d8:	85 e0       	ldi	r24, 0x05	; 5
                else
                    WingBar(0,0);
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GenerateBlinks+0x182>
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	e9 de       	rcall	.-558    	; 0x15b4 <WingBar>
    17e2:	9f c0       	rjmp	.+318    	; 0x1922 <GenerateBlinks+0x2c4>
            }
            break;

        //'circle the wing leds'
        case 6:
            if (LedCount > 4) LedCount = 0;
    17e4:	95 30       	cpi	r25, 0x05	; 5
    17e6:	10 f0       	brcs	.+4      	; 0x17ec <GenerateBlinks+0x18e>
    17e8:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <LedCount>
            iLED[WING[L][LedCount]] = 0;
    17ec:	40 91 60 38 	lds	r20, 0x3860	; 0x803860 <LedCount>
    17f0:	24 2f       	mov	r18, r20
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	e4 54       	subi	r30, 0x44	; 68
    17f8:	f1 44       	sbci	r31, 0x41	; 65
    17fa:	e5 81       	ldd	r30, Z+5	; 0x05
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	e7 53       	subi	r30, 0x37	; 55
    1800:	f5 4c       	sbci	r31, 0xC5	; 197
    1802:	10 82       	st	Z, r1
            iLED[WING[L][LedCount == 4 ? 0 : LedCount+1]] = dimValue;
    1804:	44 30       	cpi	r20, 0x04	; 4
    1806:	19 f0       	breq	.+6      	; 0x180e <GenerateBlinks+0x1b0>
    1808:	c9 01       	movw	r24, r18
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GenerateBlinks+0x1b4>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	fc 01       	movw	r30, r24
    1814:	e4 54       	subi	r30, 0x44	; 68
    1816:	f1 44       	sbci	r31, 0x41	; 65
    1818:	e5 81       	ldd	r30, Z+5	; 0x05
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1820:	e7 53       	subi	r30, 0x37	; 55
    1822:	f5 4c       	sbci	r31, 0xC5	; 197
    1824:	80 83       	st	Z, r24
            iLED[WING[R][4-LedCount]] = 0;
    1826:	e0 ec       	ldi	r30, 0xC0	; 192
    1828:	fe eb       	ldi	r31, 0xBE	; 190
    182a:	e2 1b       	sub	r30, r18
    182c:	f3 0b       	sbc	r31, r19
    182e:	e0 81       	ld	r30, Z
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	e7 53       	subi	r30, 0x37	; 55
    1834:	f5 4c       	sbci	r31, 0xC5	; 197
    1836:	10 82       	st	Z, r1
            iLED[WING[R][LedCount == 4 ? 4 : 3-LedCount]] = dimValue;
    1838:	44 30       	cpi	r20, 0x04	; 4
    183a:	29 f0       	breq	.+10     	; 0x1846 <GenerateBlinks+0x1e8>
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	82 1b       	sub	r24, r18
    1842:	93 0b       	sbc	r25, r19
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GenerateBlinks+0x1ec>
    1846:	84 e0       	ldi	r24, 0x04	; 4
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	fc 01       	movw	r30, r24
    184c:	e4 54       	subi	r30, 0x44	; 68
    184e:	f1 44       	sbci	r31, 0x41	; 65
    1850:	e0 81       	ld	r30, Z
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1858:	e7 53       	subi	r30, 0x37	; 55
    185a:	f5 4c       	sbci	r31, 0xC5	; 197
    185c:	80 83       	st	Z, r24
            break;
    185e:	61 c0       	rjmp	.+194    	; 0x1922 <GenerateBlinks+0x2c4>
    1860:	cc eb       	ldi	r28, 0xBC	; 188
    1862:	de eb       	ldi	r29, 0xBE	; 190
    1864:	81 ec       	ldi	r24, 0xC1	; 193
    1866:	e8 2e       	mov	r14, r24
    1868:	8e eb       	ldi	r24, 0xBE	; 190
    186a:	f8 2e       	mov	r15, r24

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
                iLED[WING[L][x]] = (lfsr() > 127)?dimValue:0;
    186c:	6e 01       	movw	r12, r28
    186e:	0d 81       	ldd	r16, Y+5	; 0x05
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	a9 dc       	rcall	.-1710   	; 0x11c6 <lfsr>
    1874:	87 ff       	sbrs	r24, 7
    1876:	03 c0       	rjmp	.+6      	; 0x187e <GenerateBlinks+0x220>
    1878:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <GenerateBlinks+0x222>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	f8 01       	movw	r30, r16
    1882:	e7 53       	subi	r30, 0x37	; 55
    1884:	f5 4c       	sbci	r31, 0xC5	; 197
    1886:	80 83       	st	Z, r24
                iLED[WING[R][x]] = (lfsr() > 127)?dimValue:0;
    1888:	21 96       	adiw	r28, 0x01	; 1
    188a:	f6 01       	movw	r30, r12
    188c:	00 81       	ld	r16, Z
    188e:	10 e0       	ldi	r17, 0x00	; 0
    1890:	9a dc       	rcall	.-1740   	; 0x11c6 <lfsr>
    1892:	87 ff       	sbrs	r24, 7
    1894:	03 c0       	rjmp	.+6      	; 0x189c <GenerateBlinks+0x23e>
    1896:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    189a:	01 c0       	rjmp	.+2      	; 0x189e <GenerateBlinks+0x240>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	f8 01       	movw	r30, r16
    18a0:	e7 53       	subi	r30, 0x37	; 55
    18a2:	f5 4c       	sbci	r31, 0xC5	; 197
    18a4:	80 83       	st	Z, r24
            iLED[WING[R][LedCount == 4 ? 4 : 3-LedCount]] = dimValue;
            break;

        //'random wing leds'
        case 7:
            for (uint8_t x=0; x<5; ++x){
    18a6:	ec 16       	cp	r14, r28
    18a8:	fd 06       	cpc	r15, r29
    18aa:	01 f7       	brne	.-64     	; 0x186c <GenerateBlinks+0x20e>
    18ac:	3a c0       	rjmp	.+116    	; 0x1922 <GenerateBlinks+0x2c4>
            }
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
    18ae:	90 fd       	sbrc	r25, 0
    18b0:	38 c0       	rjmp	.+112    	; 0x1922 <GenerateBlinks+0x2c4>
    18b2:	ec eb       	ldi	r30, 0xBC	; 188
    18b4:	fe eb       	ldi	r31, 0xBE	; 190
    18b6:	80 ec       	ldi	r24, 0xC0	; 192
    18b8:	9e eb       	ldi	r25, 0xBE	; 190
    18ba:	9f 01       	movw	r18, r30
                for (uint8_t x=0; x<4; ++x){
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
    18bc:	a5 81       	ldd	r26, Z+5	; 0x05
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	c6 81       	ldd	r28, Z+6	; 0x06
    18c2:	d0 e0       	ldi	r29, 0x00	; 0
    18c4:	c7 53       	subi	r28, 0x37	; 55
    18c6:	d5 4c       	sbci	r29, 0xC5	; 197
    18c8:	48 81       	ld	r20, Y
    18ca:	a7 53       	subi	r26, 0x37	; 55
    18cc:	b5 4c       	sbci	r27, 0xC5	; 197
    18ce:	4c 93       	st	X, r20
    18d0:	31 96       	adiw	r30, 0x01	; 1
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
    18d2:	e9 01       	movw	r28, r18
    18d4:	a8 81       	ld	r26, Y
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	c0 81       	ld	r28, Z
    18da:	d0 e0       	ldi	r29, 0x00	; 0
    18dc:	c7 53       	subi	r28, 0x37	; 55
    18de:	d5 4c       	sbci	r29, 0xC5	; 197
    18e0:	28 81       	ld	r18, Y
    18e2:	a7 53       	subi	r26, 0x37	; 55
    18e4:	b5 4c       	sbci	r27, 0xC5	; 197
            break;

        //'falling rain'
        case 8:
            if ((LedCount & 1) == 0) {
                for (uint8_t x=0; x<4; ++x){
    18e6:	2c 93       	st	X, r18
    18e8:	8e 17       	cp	r24, r30
    18ea:	9f 07       	cpc	r25, r31
                    iLED[WING[L][x]] = iLED[WING[L][x+1]];
                    iLED[WING[R][x]] = iLED[WING[R][x+1]];
                }
                iLED[WING[L][4]] = (lfsr() > 224)?dimValue:0;
    18ec:	31 f7       	brne	.-52     	; 0x18ba <GenerateBlinks+0x25c>
    18ee:	c0 91 c5 be 	lds	r28, 0xBEC5	; 0x80bec5 <__bss_end+0x83ad>
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
    18f4:	68 dc       	rcall	.-1840   	; 0x11c6 <lfsr>
    18f6:	81 3e       	cpi	r24, 0xE1	; 225
    18f8:	18 f0       	brcs	.+6      	; 0x1900 <GenerateBlinks+0x2a2>
    18fa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <GenerateBlinks+0x2a4>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	c7 53       	subi	r28, 0x37	; 55
    1904:	d5 4c       	sbci	r29, 0xC5	; 197
                iLED[WING[R][4]] = (lfsr() > 224)?dimValue:0;
    1906:	88 83       	st	Y, r24
    1908:	c0 91 c0 be 	lds	r28, 0xBEC0	; 0x80bec0 <__bss_end+0x83a8>
    190c:	d0 e0       	ldi	r29, 0x00	; 0
    190e:	5b dc       	rcall	.-1866   	; 0x11c6 <lfsr>
    1910:	81 3e       	cpi	r24, 0xE1	; 225
    1912:	18 f0       	brcs	.+6      	; 0x191a <GenerateBlinks+0x2bc>
    1914:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1918:	01 c0       	rjmp	.+2      	; 0x191c <GenerateBlinks+0x2be>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	c7 53       	subi	r28, 0x37	; 55
    191e:	d5 4c       	sbci	r29, 0xC5	; 197
    1920:	88 83       	st	Y, r24
        case 31:
        default:
            break;
            
    }
}
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	e8 e0       	ldi	r30, 0x08	; 8
    1928:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__epilogue_restores__+0x14>

0000192c <GenerateAudio>:


uint8_t GenerateAudio(){
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28

    if (auIn < HPLVL) {
    1932:	80 91 c8 3a 	lds	r24, 0x3AC8	; 0x803ac8 <auIn>
    1936:	89 31       	cpi	r24, 0x19	; 25
    1938:	08 f0       	brcs	.+2      	; 0x193c <GenerateAudio+0x10>
    193a:	8e c1       	rjmp	.+796    	; 0x1c58 <GenerateAudio+0x32c>

        detHdPh = 1;
    193c:	c1 e0       	ldi	r28, 0x01	; 1
    193e:	c0 93 c5 3a 	sts	0x3AC5, r28	; 0x803ac5 <detHdPh>

        //Audio for text adventure
        if ((effect&0xff00)==0) {
    1942:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1946:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    194a:	88 27       	eor	r24, r24
    194c:	89 2b       	or	r24, r25
    194e:	09 f0       	breq	.+2      	; 0x1952 <GenerateAudio+0x26>
    1950:	2d c1       	rjmp	.+602    	; 0x1bac <GenerateAudio+0x280>

            //Silence
            if ((effect&0xE0)==0){
    1952:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1956:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    195a:	80 7e       	andi	r24, 0xE0	; 224
    195c:	99 27       	eor	r25, r25
    195e:	89 2b       	or	r24, r25
    1960:	31 f4       	brne	.+12     	; 0x196e <GenerateAudio+0x42>
                auRepAddr = &zero;
    1962:	8f e3       	ldi	r24, 0x3F	; 63
    1964:	98 e3       	ldi	r25, 0x38	; 56
    1966:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    196a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
            }

            //Bad (buzzer)
            if ((effect&0xE0)==32){
    196e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1972:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1976:	80 7e       	andi	r24, 0xE0	; 224
    1978:	99 27       	eor	r25, r25
    197a:	80 97       	sbiw	r24, 0x20	; 32
    197c:	09 f0       	breq	.+2      	; 0x1980 <GenerateAudio+0x54>
    197e:	53 c0       	rjmp	.+166    	; 0x1a26 <GenerateAudio+0xfa>
                static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
                static uint8_t duration, start;
                floatSpeed(1, 0x2000, 0x2200);
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	52 e2       	ldi	r21, 0x22	; 34
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e2       	ldi	r23, 0x20	; 32
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	3c dc       	rcall	.-1928   	; 0x1204 <floatSpeed>
                auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	65 e0       	ldi	r22, 0x05	; 5
    1992:	80 e8       	ldi	r24, 0x80	; 128
    1994:	65 dc       	rcall	.-1846   	; 0x1260 <floatAround>
    1996:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <auBuffer.4021+0x2>

                if (buttonMark){
    199a:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    199e:	88 23       	and	r24, r24
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <GenerateAudio+0x78>
    19a2:	41 c0       	rjmp	.+130    	; 0x1a26 <GenerateAudio+0xfa>
                    if (start == 0) {
    19a4:	80 91 5e 38 	lds	r24, 0x385E	; 0x80385e <start.4023>
    19a8:	81 11       	cpse	r24, r1
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <GenerateAudio+0x9e>
                        duration = 4;
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4022>
                        auVolume = 255;
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
                        auRepAddr = &auBuffer[0];
    19b8:	87 e1       	ldi	r24, 0x17	; 23
    19ba:	98 e3       	ldi	r25, 0x38	; 56
    19bc:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19c0:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	80 93 5e 38 	sts	0x385E, r24	; 0x80385e <start.4023>
                    }
                    
                    if ((auVolume)&&(duration == 0)) auVolume >>= 1; 
    19ca:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    19ce:	88 23       	and	r24, r24
    19d0:	49 f0       	breq	.+18     	; 0x19e4 <GenerateAudio+0xb8>
    19d2:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4022>
    19d6:	81 11       	cpse	r24, r1
    19d8:	05 c0       	rjmp	.+10     	; 0x19e4 <GenerateAudio+0xb8>
    19da:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    19de:	86 95       	lsr	r24
    19e0:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>

                    if (auVolume == 0){
    19e4:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    19e8:	81 11       	cpse	r24, r1
    19ea:	16 c0       	rjmp	.+44     	; 0x1a18 <GenerateAudio+0xec>
                        start = 0;
    19ec:	10 92 5e 38 	sts	0x385E, r1	; 0x80385e <start.4023>
                        auRepAddr = &zero;
    19f0:	8f e3       	ldi	r24, 0x3F	; 63
    19f2:	98 e3       	ldi	r25, 0x38	; 56
    19f4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    19f8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        effect &= 0x1f;
    19fc:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a00:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a04:	8f 71       	andi	r24, 0x1F	; 31
    1a06:	99 27       	eor	r25, r25
    1a08:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1a0c:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                        auVolume = 255;
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
    1a16:	07 c0       	rjmp	.+14     	; 0x1a26 <GenerateAudio+0xfa>
                    } else if (duration) --duration;
    1a18:	80 91 5d 38 	lds	r24, 0x385D	; 0x80385d <duration.4022>
    1a1c:	88 23       	and	r24, r24
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <GenerateAudio+0xfa>
    1a20:	81 50       	subi	r24, 0x01	; 1
    1a22:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <duration.4022>

                }
            }

            //Good (bell)
            if (((effect&0xE0)==64)||((effect&0xE0)==160)){
    1a26:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a2a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a2e:	80 7e       	andi	r24, 0xE0	; 224
    1a30:	99 27       	eor	r25, r25
    1a32:	80 34       	cpi	r24, 0x40	; 64
    1a34:	91 05       	cpc	r25, r1
    1a36:	51 f0       	breq	.+20     	; 0x1a4c <GenerateAudio+0x120>
    1a38:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a3c:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a40:	80 7e       	andi	r24, 0xE0	; 224
    1a42:	99 27       	eor	r25, r25
    1a44:	80 3a       	cpi	r24, 0xA0	; 160
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <GenerateAudio+0x120>
    1a4a:	47 c0       	rjmp	.+142    	; 0x1ada <GenerateAudio+0x1ae>
                static uint8_t start, auBuffer[3] = {255, 1, 0};
                
                if (buttonMark){
    1a4c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <GenerateAudio+0x12a>
    1a54:	42 c0       	rjmp	.+132    	; 0x1ada <GenerateAudio+0x1ae>
                    if (start == 0) {
    1a56:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <start.4024>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	12 c0       	rjmp	.+36     	; 0x1a82 <GenerateAudio+0x156>
                        auVolume = 255;
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
                        TCB1_CCMP = 0x0a00;
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	9a e0       	ldi	r25, 0x0A	; 10
    1a68:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a6c:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                        auRepAddr = &auBuffer[0];
    1a70:	84 e1       	ldi	r24, 0x14	; 20
    1a72:	98 e3       	ldi	r25, 0x38	; 56
    1a74:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1a78:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        start = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <start.4024>
                    }
                     
                    TCB1_CCMP -= (0x080<<((uint8_t)(effect>64)?2:0));                    
    1a82:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1a86:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1a8a:	81 34       	cpi	r24, 0x41	; 65
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	18 f4       	brcc	.+6      	; 0x1a96 <GenerateAudio+0x16a>
    1a90:	20 e8       	ldi	r18, 0x80	; 128
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GenerateAudio+0x16e>
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	32 e0       	ldi	r19, 0x02	; 2
    1a9a:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1a9e:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1aa2:	82 1b       	sub	r24, r18
    1aa4:	93 0b       	sbc	r25, r19
    1aa6:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1aaa:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    if (auVolume > 32) auVolume -=32; else 
    1aae:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    1ab2:	81 32       	cpi	r24, 0x21	; 33
    1ab4:	30 f0       	brcs	.+12     	; 0x1ac2 <GenerateAudio+0x196>
    1ab6:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    1aba:	80 52       	subi	r24, 0x20	; 32
    1abc:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
    1ac0:	0c c0       	rjmp	.+24     	; 0x1ada <GenerateAudio+0x1ae>
                    {
                        start = 0;
    1ac2:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <start.4024>
                        auRepAddr = &zero;
    1ac6:	8f e3       	ldi	r24, 0x3F	; 63
    1ac8:	98 e3       	ldi	r25, 0x38	; 56
    1aca:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1ace:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        effect = 0;
    1ad2:	10 92 40 38 	sts	0x3840, r1	; 0x803840 <effect>
    1ad6:	10 92 41 38 	sts	0x3841, r1	; 0x803841 <effect+0x1>
                    }
                }
            }

            //Rain storm with whistling wind
            if ((effect&0xE0)==96){
    1ada:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1ade:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1ae2:	80 7e       	andi	r24, 0xE0	; 224
    1ae4:	99 27       	eor	r25, r25
    1ae6:	80 36       	cpi	r24, 0x60	; 96
    1ae8:	91 05       	cpc	r25, r1
    1aea:	a9 f5       	brne	.+106    	; 0x1b56 <GenerateAudio+0x22a>
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
    1aec:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <auBuffer.4026+0x6>
                auRepAddr = &auBuffer[0];
    1af0:	85 e5       	ldi	r24, 0x55	; 85
    1af2:	98 e3       	ldi	r25, 0x38	; 56
    1af4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1af8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    1afc:	8c 01       	movw	r16, r24

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1afe:	c1 e0       	ldi	r28, 0x01	; 1
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1b00:	c3 30       	cpi	r28, 0x03	; 3
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <GenerateAudio+0x1e6>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	41 e0       	ldi	r20, 0x01	; 1
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	80 e8       	ldi	r24, 0x80	; 128
    1b0c:	a9 db       	rcall	.-2222   	; 0x1260 <floatAround>
    1b0e:	f8 01       	movw	r30, r16
    1b10:	81 83       	std	Z+1, r24	; 0x01
                static uint8_t auBuffer[7];
                auBuffer[6]= 0;        
                auRepAddr = &auBuffer[0];

                //Noise is to be generated fast, outside of buttonMark loop
                for (uint8_t x=1; x<6; ++x){
    1b12:	cf 5f       	subi	r28, 0xFF	; 255
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	c6 30       	cpi	r28, 0x06	; 6
    1b1a:	91 f7       	brne	.-28     	; 0x1b00 <GenerateAudio+0x1d4>
                    if ((x>0) && (x!=3)) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
                }

                if (buttonMark){
    1b1c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1b20:	88 23       	and	r24, r24
    1b22:	c9 f0       	breq	.+50     	; 0x1b56 <GenerateAudio+0x22a>
                    //"Floating" speed for howl (and noise, but that's hardly audible)
                    floatSpeed(5, 0x0280, 0x0400);
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	54 e0       	ldi	r21, 0x04	; 4
    1b28:	60 e8       	ldi	r22, 0x80	; 128
    1b2a:	72 e0       	ldi	r23, 0x02	; 2
    1b2c:	85 e0       	ldi	r24, 0x05	; 5
    1b2e:	6a db       	rcall	.-2348   	; 0x1204 <floatSpeed>
            
                    //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                    auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    1b30:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    1b34:	20 ea       	ldi	r18, 0xA0	; 160
    1b36:	40 e1       	ldi	r20, 0x10	; 16
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	92 db       	rcall	.-2268   	; 0x1260 <floatAround>
    1b3c:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
                    auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    1b40:	20 e9       	ldi	r18, 0x90	; 144
    1b42:	40 e7       	ldi	r20, 0x70	; 112
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <auBuffer.4026>
    1b4a:	8a db       	rcall	.-2284   	; 0x1260 <floatAround>
    1b4c:	80 93 55 38 	sts	0x3855, r24	; 0x803855 <auBuffer.4026>
                    auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    1b50:	80 95       	com	r24
    1b52:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <auBuffer.4026+0x3>
                }
            }

            //Footsteps
            if ((effect&0xE0)==128){
    1b56:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1b5a:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>

            }

            //Bleeps
            if ((effect&0xE0)==160){
    1b5e:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1b62:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1b66:	80 7e       	andi	r24, 0xE0	; 224
    1b68:	99 27       	eor	r25, r25
    1b6a:	80 3a       	cpi	r24, 0xA0	; 160
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	c9 f4       	brne	.+50     	; 0x1ba2 <GenerateAudio+0x276>
                static uint8_t auBuffer[3] = {255, 1, 0};
                auRepAddr = &auBuffer[0];
    1b70:	81 e1       	ldi	r24, 0x11	; 17
    1b72:	98 e3       	ldi	r25, 0x38	; 56
    1b74:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1b78:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                if (buttonMark){
    1b7c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1b80:	88 23       	and	r24, r24
                    floatSpeed(6, 0x0500, 0x0fff);
    1b82:	79 f0       	breq	.+30     	; 0x1ba2 <GenerateAudio+0x276>
    1b84:	4f ef       	ldi	r20, 0xFF	; 255
    1b86:	5f e0       	ldi	r21, 0x0F	; 15
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	75 e0       	ldi	r23, 0x05	; 5
    1b8c:	86 e0       	ldi	r24, 0x06	; 6
    1b8e:	3a db       	rcall	.-2444   	; 0x1204 <floatSpeed>
                    if (auVolume) --auVolume;
    1b90:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    1b94:	88 23       	and	r24, r24
    1b96:	29 f0       	breq	.+10     	; 0x1ba2 <GenerateAudio+0x276>
    1b98:	80 91 bc 3a 	lds	r24, 0x3ABC	; 0x803abc <auVolume>
    1b9c:	81 50       	subi	r24, 0x01	; 1
    1b9e:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
                }
            }

            //
            if ((effect&0xE0)==192){
    1ba2:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1ba6:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1baa:	58 c0       	rjmp	.+176    	; 0x1c5c <GenerateAudio+0x330>
            }

            //
            else {
            }
        } else if ((effect&0xff00)==0x0100) {
    1bac:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1bb0:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1bb4:	88 27       	eor	r24, r24
    1bb6:	81 15       	cp	r24, r1
    1bb8:	91 40       	sbci	r25, 0x01	; 1
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <GenerateAudio+0x292>
    1bbc:	4f c0       	rjmp	.+158    	; 0x1c5c <GenerateAudio+0x330>
            if ((effect&0xE0) <= 0x90) {
    1bbe:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1bc2:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1bc6:	80 7e       	andi	r24, 0xE0	; 224
    1bc8:	99 27       	eor	r25, r25
    1bca:	81 39       	cpi	r24, 0x91	; 145
    1bcc:	91 05       	cpc	r25, r1
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <GenerateAudio+0x2a6>
    1bd0:	45 c0       	rjmp	.+138    	; 0x1c5c <GenerateAudio+0x330>
                
                static uint8_t auBuffer[3] = {255, 1, 0};
                static uint8_t duration, start;
                uint16_t freq = ((effect&0xE0)+1)<<6;
    1bd2:	60 91 40 38 	lds	r22, 0x3840	; 0x803840 <effect>
    1bd6:	70 91 41 38 	lds	r23, 0x3841	; 0x803841 <effect+0x1>
    1bda:	60 7e       	andi	r22, 0xE0	; 224
    1bdc:	77 27       	eor	r23, r23
    1bde:	6f 5f       	subi	r22, 0xFF	; 255
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	86 e0       	ldi	r24, 0x06	; 6
    1be4:	66 0f       	add	r22, r22
    1be6:	77 1f       	adc	r23, r23
    1be8:	8a 95       	dec	r24
                floatSpeed(1, freq+0x0200, freq+0x0300);
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <GenerateAudio+0x2b8>
    1bec:	ab 01       	movw	r20, r22
    1bee:	5d 5f       	subi	r21, 0xFD	; 253
    1bf0:	7e 5f       	subi	r23, 0xFE	; 254
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	07 db       	rcall	.-2546   	; 0x1204 <floatSpeed>
                //auBuffer[] = floatAround(0x80, 5, 0x01, 0x00);

                if (buttonMark) {
    1bf6:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
    1bfa:	88 23       	and	r24, r24
    1bfc:	79 f1       	breq	.+94     	; 0x1c5c <GenerateAudio+0x330>
                    if (start == 0) {
    1bfe:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <start.4034>
    1c02:	81 11       	cpse	r24, r1
    1c04:	0e c0       	rjmp	.+28     	; 0x1c22 <GenerateAudio+0x2f6>
                        duration = 3;
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <duration.4033>
                        auRepAddr = &auBuffer[0];
    1c0c:	8e e0       	ldi	r24, 0x0E	; 14
    1c0e:	98 e3       	ldi	r25, 0x38	; 56
    1c10:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c14:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        auVolume = 255;
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	80 93 bc 3a 	sts	0x3ABC, r24	; 0x803abc <auVolume>
                        start = 1;
    1c1e:	c0 93 54 38 	sts	0x3854, r28	; 0x803854 <start.4034>
                    }   if (duration == 0) {
    1c22:	80 91 53 38 	lds	r24, 0x3853	; 0x803853 <duration.4033>
    1c26:	81 11       	cpse	r24, r1
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <GenerateAudio+0x324>
                        effect &= 0x1f;
    1c2a:	80 91 40 38 	lds	r24, 0x3840	; 0x803840 <effect>
    1c2e:	90 91 41 38 	lds	r25, 0x3841	; 0x803841 <effect+0x1>
    1c32:	8f 71       	andi	r24, 0x1F	; 31
    1c34:	99 27       	eor	r25, r25
    1c36:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1c3a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                        auRepAddr = &zero;
    1c3e:	8f e3       	ldi	r24, 0x3F	; 63
    1c40:	98 e3       	ldi	r25, 0x38	; 56
    1c42:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    1c46:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                        //auSmpAddr = &zero;
                        //auVolume = 0xff;
                        start = 0;
    1c4a:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <start.4034>
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <GenerateAudio+0x330>
                    } else --duration;
    1c50:	81 50       	subi	r24, 0x01	; 1
    1c52:	80 93 53 38 	sts	0x3853, r24	; 0x803853 <duration.4033>
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <GenerateAudio+0x330>
                }
            }
        }
    } else {
        detHdPh = 0;
    1c58:	10 92 c5 3a 	sts	0x3AC5, r1	; 0x803ac5 <detHdPh>
    }
    return buttonMark;
    1c5c:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <buttonMark>
}
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	08 95       	ret

00001c68 <getClock>:

uint16_t getClock() {
    uint16_t tmp = RTC_CNT;
    1c68:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
    1c6c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
    return 60 * minuteMark + (tmp>>9);
    1c70:	20 91 49 38 	lds	r18, 0x3849	; 0x803849 <minuteMark>
    1c74:	89 2f       	mov	r24, r25
    1c76:	99 27       	eor	r25, r25
    1c78:	86 95       	lsr	r24
}
    1c7a:	3c e3       	ldi	r19, 0x3C	; 60
    1c7c:	23 9f       	mul	r18, r19
    1c7e:	80 0d       	add	r24, r0
    1c80:	91 1d       	adc	r25, r1
    1c82:	11 24       	eor	r1, r1
    1c84:	08 95       	ret

00001c86 <idleTimeout>:

uint8_t idleTimeout(uint16_t lastActive, uint16_t maxIdle) {
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	8c 01       	movw	r16, r24
    1c90:	eb 01       	movw	r28, r22
    uint16_t curClock;

    curClock = getClock();
    1c92:	ea df       	rcall	.-44     	; 0x1c68 <getClock>
    1c94:	9c 01       	movw	r18, r24
    if (curClock < lastActive)
    1c96:	80 17       	cp	r24, r16
    1c98:	91 07       	cpc	r25, r17
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <idleTimeout+0x18>
        curClock += 256 * 60;
    1c9c:	34 5c       	subi	r19, 0xC4	; 196

    return (curClock > (lastActive + maxIdle));
    1c9e:	c0 0f       	add	r28, r16
    1ca0:	d1 1f       	adc	r29, r17
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	c2 17       	cp	r28, r18
    1ca6:	d3 07       	cpc	r29, r19
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <idleTimeout+0x26>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <SelfTest>:

uint8_t SelfTest(){
    1cb6:	a4 e0       	ldi	r26, 0x04	; 4
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e1 e6       	ldi	r30, 0x61	; 97
    1cbc:	fe e0       	ldi	r31, 0x0E	; 14
    1cbe:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x1e>
    uint8_t tstVal[4] = {0x01, 0};
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	1a 82       	std	Y+2, r1	; 0x02
    1cc6:	1b 82       	std	Y+3, r1	; 0x03
    1cc8:	1c 82       	std	Y+4, r1	; 0x04
    1cca:	aa ec       	ldi	r26, 0xCA	; 202
    1ccc:	be eb       	ldi	r27, 0xBE	; 190
    1cce:	80 ed       	ldi	r24, 0xD0	; 208
    1cd0:	9e eb       	ldi	r25, 0xBE	; 190

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
        iLED[HCKR[R][x]] = 0xff;
    1cd2:	2f ef       	ldi	r18, 0xFF	; 255
    1cd4:	ed 91       	ld	r30, X+
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	e7 53       	subi	r30, 0x37	; 55
    1cda:	f5 4c       	sbci	r31, 0xC5	; 197
    1cdc:	20 83       	st	Z, r18

uint8_t SelfTest(){
    uint8_t tstVal[4] = {0x01, 0};

    //Red HCKR all on 100%
    for (uint8_t x=0; x<6; ++x) {
    1cde:	8a 17       	cp	r24, r26
    1ce0:	9b 07       	cpc	r25, r27
    1ce2:	c1 f7       	brne	.-16     	; 0x1cd4 <SelfTest+0x1e>
        iLED[HCKR[R][x]] = 0xff;
    }

    //Light sensor
    tstVal[0] = adcPhot&0xff;
    1ce4:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <adcPhot>
    1ce8:	90 91 c4 3a 	lds	r25, 0x3AC4	; 0x803ac4 <adcPhot+0x1>
    1cec:	89 83       	std	Y+1, r24	; 0x01
    while (tstVal[0] == (adcPhot&0xff)) ;
    1cee:	99 27       	eor	r25, r25
    1cf0:	20 91 c3 3a 	lds	r18, 0x3AC3	; 0x803ac3 <adcPhot>
    1cf4:	30 91 c4 3a 	lds	r19, 0x3AC4	; 0x803ac4 <adcPhot+0x1>
    1cf8:	33 27       	eor	r19, r19
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	c1 f3       	breq	.-16     	; 0x1cf0 <SelfTest+0x3a>
    iLED[HCKR[R][1]] = 0x00;
    1d00:	e0 91 cb be 	lds	r30, 0xBECB	; 0x80becb <__bss_end+0x83b3>
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	e7 53       	subi	r30, 0x37	; 55
    1d08:	f5 4c       	sbci	r31, 0xC5	; 197
    1d0a:	10 82       	st	Z, r1

    //Buttons (none pressed / shorted)
    while ((adcBtns>>4) < 200) ;
    1d0c:	80 91 bd 3a 	lds	r24, 0x3ABD	; 0x803abd <adcBtns>
    1d10:	90 91 be 3a 	lds	r25, 0x3ABE	; 0x803abe <adcBtns+0x1>
    1d14:	80 38       	cpi	r24, 0x80	; 128
    1d16:	9c 40       	sbci	r25, 0x0C	; 12
    1d18:	c8 f3       	brcs	.-14     	; 0x1d0c <SelfTest+0x56>
    iLED[HCKR[R][4]] = 0x00;
    1d1a:	e0 91 ce be 	lds	r30, 0xBECE	; 0x80bece <__bss_end+0x83b6>
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	e7 53       	subi	r30, 0x37	; 55
    1d22:	f5 4c       	sbci	r31, 0xC5	; 197
    1d24:	10 82       	st	Z, r1
    
    ExtEERead(0x3CCC, 4, 0, (uint8_t *)&tstVal[0]);
    1d26:	9e 01       	movw	r18, r28
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	8c ec       	ldi	r24, 0xCC	; 204
    1d32:	9c e3       	ldi	r25, 0x3C	; 60
    1d34:	b8 d9       	rcall	.-3216   	; 0x10a6 <ExtEERead>
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 33       	cpi	r24, 0x3F	; 63
    1d3a:	49 f4       	brne	.+18     	; 0x1d4e <SelfTest+0x98>
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	81 11       	cpse	r24, r1
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <SelfTest+0x98>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	80 3c       	cpi	r24, 0xC0	; 192
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <SelfTest+0x98>
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	84 31       	cpi	r24, 0x14	; 20
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <SelfTest+0x9a>
    1d4e:	ff cf       	rjmp	.-2      	; 0x1d4e <SelfTest+0x98>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
        iLED[x]=0;
    1d54:	fc 01       	movw	r30, r24
    1d56:	e7 53       	subi	r30, 0x37	; 55
    1d58:	f5 4c       	sbci	r31, 0xC5	; 197
    1d5a:	10 82       	st	Z, r1
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    if ((tstVal[0] != 63) || (tstVal[1] != 0) || (tstVal[2] != 192) || (tstVal[3] != 20)){
        while(1);
    }
    
    //All LEDs off
    for (uint8_t x=0; x<40; ++x) {
    1d5e:	88 32       	cpi	r24, 0x28	; 40
    1d60:	91 05       	cpc	r25, r1
    1d62:	c1 f7       	brne	.-16     	; 0x1d54 <SelfTest+0x9e>
    1d64:	10 e0       	ldi	r17, 0x00	; 0
        iLED[x]=0;
    }

    for(uint8_t x=0; x<(adcPhot&0x3f); ++x) lfsr();
    1d66:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <adcPhot>
    1d6a:	90 91 c4 3a 	lds	r25, 0x3AC4	; 0x803ac4 <adcPhot+0x1>
    1d6e:	21 2f       	mov	r18, r17
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	8f 73       	andi	r24, 0x3F	; 63
    1d74:	99 27       	eor	r25, r25
    1d76:	28 17       	cp	r18, r24
    1d78:	39 07       	cpc	r19, r25
    1d7a:	18 f4       	brcc	.+6      	; 0x1d82 <SelfTest+0xcc>
    1d7c:	24 da       	rcall	.-3000   	; 0x11c6 <lfsr>
    1d7e:	1f 5f       	subi	r17, 0xFF	; 255
    1d80:	f2 cf       	rjmp	.-28     	; 0x1d66 <SelfTest+0xb0>

    return 0;
}
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	24 96       	adiw	r28, 0x04	; 4
    1d86:	e3 e0       	ldi	r30, 0x03	; 3
    1d88:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__epilogue_restores__+0x1e>

00001d8c <simonLed>:

/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	ec eb       	ldi	r30, 0xBC	; 188
    1d92:	fe eb       	ldi	r31, 0xBE	; 190
    1d94:	ef 01       	movw	r28, r30
    for (uint8_t n = 0; n < 5; n++) {
        iLED[WING[L][n]] = 0;
    1d96:	a5 81       	ldd	r26, Z+5	; 0x05
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	a7 53       	subi	r26, 0x37	; 55
    1d9c:	b5 4c       	sbci	r27, 0xC5	; 197
    1d9e:	1c 92       	st	X, r1
    1da0:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 0;
    1da2:	a8 81       	ld	r26, Y
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	a7 53       	subi	r26, 0x37	; 55
    1da8:	b5 4c       	sbci	r27, 0xC5	; 197
    1daa:	1c 92       	st	X, r1
/**
 * Set the wing LED blocks to selected option
 * @param val
 */
void simonLed(uint8_t val) {
    for (uint8_t n = 0; n < 5; n++) {
    1dac:	9e eb       	ldi	r25, 0xBE	; 190
    1dae:	e1 3c       	cpi	r30, 0xC1	; 193
    1db0:	f9 07       	cpc	r31, r25
    1db2:	81 f7       	brne	.-32     	; 0x1d94 <simonLed+0x8>
        iLED[WING[L][n]] = 0;
        iLED[WING[R][n]] = 0;
    }
    if (val == 3) {         // II
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	d9 f4       	brne	.+54     	; 0x1dee <simonLed+0x62>
        iLED[WING[L][0]] = dimValue;
    1db8:	e0 91 c1 be 	lds	r30, 0xBEC1	; 0x80bec1 <__bss_end+0x83a9>
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dc2:	e7 53       	subi	r30, 0x37	; 55
    1dc4:	f5 4c       	sbci	r31, 0xC5	; 197
    1dc6:	80 83       	st	Z, r24
        iLED[WING[L][1]] = dimValue;
    1dc8:	e0 91 c2 be 	lds	r30, 0xBEC2	; 0x80bec2 <__bss_end+0x83aa>
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dd2:	e7 53       	subi	r30, 0x37	; 55
    1dd4:	f5 4c       	sbci	r31, 0xC5	; 197
    1dd6:	80 83       	st	Z, r24
        iLED[WING[L][2]] = dimValue;
    1dd8:	e0 91 c3 be 	lds	r30, 0xBEC3	; 0x80bec3 <__bss_end+0x83ab>
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1de2:	e7 53       	subi	r30, 0x37	; 55
    1de4:	f5 4c       	sbci	r31, 0xC5	; 197
    1de6:	80 83       	st	Z, r24
        effect = 0x013f;
    1de8:	8f e3       	ldi	r24, 0x3F	; 63
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	46 c0       	rjmp	.+140    	; 0x1e7a <simonLed+0xee>
    } else if (val == 1) {  //
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	99 f4       	brne	.+38     	; 0x1e18 <simonLed+0x8c>
        iLED[WING[L][3]] = dimValue;
    1df2:	e0 91 c4 be 	lds	r30, 0xBEC4	; 0x80bec4 <__bss_end+0x83ac>
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1dfc:	e7 53       	subi	r30, 0x37	; 55
    1dfe:	f5 4c       	sbci	r31, 0xC5	; 197
    1e00:	80 83       	st	Z, r24
        iLED[WING[L][4]] = dimValue;
    1e02:	e0 91 c5 be 	lds	r30, 0xBEC5	; 0x80bec5 <__bss_end+0x83ad>
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e0c:	e7 53       	subi	r30, 0x37	; 55
    1e0e:	f5 4c       	sbci	r31, 0xC5	; 197
    1e10:	80 83       	st	Z, r24
        effect = 0x015f;
    1e12:	8f e5       	ldi	r24, 0x5F	; 95
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	31 c0       	rjmp	.+98     	; 0x1e7a <simonLed+0xee>
    } else if (val == 4) {  // III
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	d9 f4       	brne	.+54     	; 0x1e52 <simonLed+0xc6>
        iLED[WING[R][0]] = dimValue;
    1e1c:	e0 91 bc be 	lds	r30, 0xBEBC	; 0x80bebc <__bss_end+0x83a4>
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e26:	e7 53       	subi	r30, 0x37	; 55
    1e28:	f5 4c       	sbci	r31, 0xC5	; 197
    1e2a:	80 83       	st	Z, r24
        iLED[WING[R][1]] = dimValue;
    1e2c:	e0 91 bd be 	lds	r30, 0xBEBD	; 0x80bebd <__bss_end+0x83a5>
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e36:	e7 53       	subi	r30, 0x37	; 55
    1e38:	f5 4c       	sbci	r31, 0xC5	; 197
    1e3a:	80 83       	st	Z, r24
        iLED[WING[R][2]] = dimValue;
    1e3c:	e0 91 be be 	lds	r30, 0xBEBE	; 0x80bebe <__bss_end+0x83a6>
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e46:	e7 53       	subi	r30, 0x37	; 55
    1e48:	f5 4c       	sbci	r31, 0xC5	; 197
    1e4a:	80 83       	st	Z, r24
        effect = 0x017f;
    1e4c:	8f e7       	ldi	r24, 0x7F	; 127
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <simonLed+0xee>
    } else if (val == 2) {  // I
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	b1 f4       	brne	.+44     	; 0x1e82 <simonLed+0xf6>
        iLED[WING[R][3]] = dimValue;
    1e56:	e0 91 bf be 	lds	r30, 0xBEBF	; 0x80bebf <__bss_end+0x83a7>
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e60:	e7 53       	subi	r30, 0x37	; 55
    1e62:	f5 4c       	sbci	r31, 0xC5	; 197
    1e64:	80 83       	st	Z, r24
        iLED[WING[R][4]] = dimValue;
    1e66:	e0 91 c0 be 	lds	r30, 0xBEC0	; 0x80bec0 <__bss_end+0x83a8>
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1e70:	e7 53       	subi	r30, 0x37	; 55
    1e72:	f5 4c       	sbci	r31, 0xC5	; 197
    1e74:	80 83       	st	Z, r24
        effect = 0x019f;
    1e76:	8f e9       	ldi	r24, 0x9F	; 159
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    1e7e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    }
}
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <BastetDictates>:

/**
 * Main game loop
 * @return 0
 */
uint8_t BastetDictates() {
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    if ((TEXT != gameNow) && (BASTET != gameNow))
    1e8c:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1e90:	8d 7f       	andi	r24, 0xFD	; 253
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <BastetDictates+0xe>
    1e94:	73 c1       	rjmp	.+742    	; 0x217c <BastetDictates+0x2f4>
        return 0;

    if (CheckState(BASTET_COMPLETED)) {
    1e96:	8a e7       	ldi	r24, 0x7A	; 122
    1e98:	bd da       	rcall	.-2694   	; 0x1414 <CheckState>
    1e9a:	88 23       	and	r24, r24
    1e9c:	41 f0       	breq	.+16     	; 0x1eae <BastetDictates+0x26>
        if (BASTET == gameNow) {
    1e9e:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <BastetDictates+0x20>
    1ea6:	6a c1       	rjmp	.+724    	; 0x217c <BastetDictates+0x2f4>
            gameNow = TEXT;
    1ea8:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
    1eac:	67 c1       	rjmp	.+718    	; 0x217c <BastetDictates+0x2f4>
        }
        return 0;
    }

    if (CheckState(LANYARD_COMPLETED))
    1eae:	8b e7       	ldi	r24, 0x7B	; 123
    1eb0:	b1 da       	rcall	.-2718   	; 0x1414 <CheckState>
    1eb2:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    1eb6:	88 23       	and	r24, r24
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <BastetDictates+0x3c>
        if (buttonState!=0xff)
    1eba:	9f 3f       	cpi	r25, 0xFF	; 255
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <BastetDictates+0x3c>
            gameNow = BASTET;
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	80 93 42 38 	sts	0x3842, r24	; 0x803842 <gameNow>

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);
    1ec4:	e0 91 b8 be 	lds	r30, 0xBEB8	; 0x80beb8 <__bss_end+0x83a0>
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	9f 3f       	cpi	r25, 0xFF	; 255
    1ecc:	19 f0       	breq	.+6      	; 0x1ed4 <BastetDictates+0x4c>
    1ece:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <BastetDictates+0x4e>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	e7 53       	subi	r30, 0x37	; 55
    1ed8:	f5 4c       	sbci	r31, 0xC5	; 197
    1eda:	80 83       	st	Z, r24

    if (BASTET_BOOT == simonGameState) {
    1edc:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonGameState>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	0c c0       	rjmp	.+24     	; 0x1efc <BastetDictates+0x74>
    1ee4:	c8 e6       	ldi	r28, 0x68	; 104
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
            simonState[i] = (lfsr() % 4);
    1ee6:	d8 e3       	ldi	r29, 0x38	; 56
    1ee8:	6e d9       	rcall	.-3364   	; 0x11c6 <lfsr>
    1eea:	83 70       	andi	r24, 0x03	; 3
    1eec:	89 93       	st	Y+, r24
            gameNow = BASTET;

    iLED[CAT] = (buttonState==0xff ? 0 : dimValue);

    if (BASTET_BOOT == simonGameState) {
        for (uint8_t i = 0; i < BASTET_LENGTH; i++) {
    1eee:	88 e3       	ldi	r24, 0x38	; 56
    1ef0:	c4 37       	cpi	r28, 0x74	; 116
    1ef2:	d8 07       	cpc	r29, r24
    1ef4:	c9 f7       	brne	.-14     	; 0x1ee8 <BastetDictates+0x60>
            simonState[i] = (lfsr() % 4);
        }
        simonGameState = BASTET_GAME_START;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
    }

    if (BASTET_GAME_START == simonGameState && BASTET == gameNow) {
    1efc:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonGameState>
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	71 f4       	brne	.+28     	; 0x1f20 <BastetDictates+0x98>
    1f04:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	51 f4       	brne	.+20     	; 0x1f20 <BastetDictates+0x98>
        simonGameState = BASTET_GAME_INTRO;
    1f0c:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
        simonPos = 0;
    1f10:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonPos>
        simonInputPos = 0;
    1f14:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonInputPos>
        simonTimer = 0;
    1f18:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
        simonCounter = 0;
    1f1c:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
    }

    if (BASTET_GAME_INTRO == simonGameState) {
    1f20:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonGameState>
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	19 f5       	brne	.+70     	; 0x1f6e <BastetDictates+0xe6>
        if (simonTimer > 5) {   // ±.33 seconds
    1f28:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
    1f2c:	86 30       	cpi	r24, 0x06	; 6
    1f2e:	38 f0       	brcs	.+14     	; 0x1f3e <BastetDictates+0xb6>
            simonCounter++;
    1f30:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonCounter>
    1f34:	8f 5f       	subi	r24, 0xFF	; 255
    1f36:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <simonCounter>
            simonTimer = 0;
    1f3a:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
        }
        if (simonCounter > 5) {
    1f3e:	e0 91 63 38 	lds	r30, 0x3863	; 0x803863 <simonCounter>
    1f42:	e6 30       	cpi	r30, 0x06	; 6
    1f44:	48 f0       	brcs	.+18     	; 0x1f58 <BastetDictates+0xd0>
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
            simonTimer = 0;
    1f4c:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
            simonCounter = 0;
    1f50:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
            ClearHackerLeds();
    1f54:	6d db       	rcall	.-2342   	; 0x1630 <ClearHackerLeds>
            return 0;
    1f56:	12 c1       	rjmp	.+548    	; 0x217c <BastetDictates+0x2f4>
        }
        iLED[HCKR[R][simonCounter]] = dimValue;
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	e6 53       	subi	r30, 0x36	; 54
    1f5c:	f1 44       	sbci	r31, 0x41	; 65
    1f5e:	e0 81       	ld	r30, Z
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    1f66:	e7 53       	subi	r30, 0x37	; 55
    1f68:	f5 4c       	sbci	r31, 0xC5	; 197
    1f6a:	80 83       	st	Z, r24
    1f6c:	2b c0       	rjmp	.+86     	; 0x1fc4 <BastetDictates+0x13c>
    }

    if (BASTET_GAME_SHOW_PATTERN == simonGameState) {
    1f6e:	83 30       	cpi	r24, 0x03	; 3
    1f70:	49 f5       	brne	.+82     	; 0x1fc4 <BastetDictates+0x13c>
        if (simonTimer > 7) {   // ±.5 second
    1f72:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
    1f76:	88 30       	cpi	r24, 0x08	; 8
    1f78:	38 f0       	brcs	.+14     	; 0x1f88 <BastetDictates+0x100>
            simonCounter++;
    1f7a:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonCounter>
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <simonCounter>
            simonTimer = 0;
    1f84:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
        }
        if (simonCounter > simonPos) {
    1f88:	e0 91 63 38 	lds	r30, 0x3863	; 0x803863 <simonCounter>
    1f8c:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonPos>
    1f90:	8e 17       	cp	r24, r30
    1f92:	40 f4       	brcc	.+16     	; 0x1fa4 <BastetDictates+0x11c>
            simonInputPos = 0;
    1f94:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonInputPos>
            simonGameState = BASTET_GAME_INPUT;
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
            simonLed(0);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	f5 de       	rcall	.-534    	; 0x1d8c <simonLed>
    1fa2:	98 c0       	rjmp	.+304    	; 0x20d4 <BastetDictates+0x24c>
            simonTimer = 0;
            return 0;
        }
        if (simonTimer < 3) {
    1fa4:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	30 f4       	brcc	.+12     	; 0x1fb8 <BastetDictates+0x130>
            simonLed(simonState[simonCounter] + 1);
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	e8 59       	subi	r30, 0x98	; 152
    1fb0:	f7 4c       	sbci	r31, 0xC7	; 199
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	ea de       	rcall	.-556    	; 0x1d8c <simonLed>
        }
        if (simonTimer > 6) {
    1fb8:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
    1fbc:	87 30       	cpi	r24, 0x07	; 7
    1fbe:	10 f0       	brcs	.+4      	; 0x1fc4 <BastetDictates+0x13c>
            simonLed(0);
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	e4 de       	rcall	.-568    	; 0x1d8c <simonLed>
    1fc4:	c0 91 62 38 	lds	r28, 0x3862	; 0x803862 <simonGameState>
        }
    }

    if (BASTET_GAME_INPUT == simonGameState) {
    1fc8:	c5 30       	cpi	r28, 0x05	; 5
    1fca:	09 f0       	breq	.+2      	; 0x1fce <BastetDictates+0x146>
    1fcc:	86 c0       	rjmp	.+268    	; 0x20da <BastetDictates+0x252>
    1fce:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
        //Button pressed
        if (lastButtonState != buttonState && (buttonState+1) > 0) {
    1fd2:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <lastButtonState>
    1fd6:	98 17       	cp	r25, r24
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <BastetDictates+0x154>
    1fda:	71 c0       	rjmp	.+226    	; 0x20be <BastetDictates+0x236>
    1fdc:	90 91 64 38 	lds	r25, 0x3864	; 0x803864 <simonWait>
            if (simonWait == 0 && buttonState < 4) {
    1fe0:	91 11       	cpse	r25, r1
    1fe2:	6f c0       	rjmp	.+222    	; 0x20c2 <BastetDictates+0x23a>
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <BastetDictates+0x162>
    1fe8:	6c c0       	rjmp	.+216    	; 0x20c2 <BastetDictates+0x23a>
                simonWait = 1;
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	90 93 64 38 	sts	0x3864, r25	; 0x803864 <simonWait>
                simonTimer = 0;
    1ff0:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
                simonLed(buttonState+1);
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	ca de       	rcall	.-620    	; 0x1d8c <simonLed>
    1ff8:	84 e0       	ldi	r24, 0x04	; 4
                simonGameState = BASTET_GAME_WAIT_LEDS;
    1ffa:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
    1ffe:	c0 93 33 38 	sts	0x3833, r28	; 0x803833 <simonNextGameState>
                simonNextGameState = BASTET_GAME_INPUT;
    2002:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonInputPos>

                if (simonState[simonInputPos] == buttonState) {
    2006:	e8 2f       	mov	r30, r24
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	e8 59       	subi	r30, 0x98	; 152
    200c:	f7 4c       	sbci	r31, 0xC7	; 199
    200e:	20 81       	ld	r18, Z
    2010:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <buttonState>
    2014:	29 13       	cpse	r18, r25
    2016:	1d c0       	rjmp	.+58     	; 0x2052 <BastetDictates+0x1ca>
    2018:	8f 5f       	subi	r24, 0xFF	; 255
                    simonInputPos++;
    201a:	80 93 66 38 	sts	0x3866, r24	; 0x803866 <simonInputPos>
    201e:	e0 91 67 38 	lds	r30, 0x3867	; 0x803867 <simonPos>
                    if (simonInputPos > simonPos) {
    2022:	e8 17       	cp	r30, r24
    2024:	a0 f5       	brcc	.+104    	; 0x208e <BastetDictates+0x206>
    2026:	ef 5f       	subi	r30, 0xFF	; 255
                        simonPos++;
    2028:	e0 93 67 38 	sts	0x3867, r30	; 0x803867 <simonPos>
    202c:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
                        simonTimer = 0;
    2030:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
                        simonCounter = 0;
    2034:	e1 30       	cpi	r30, 0x01	; 1
                        if (simonPos > 1) { // BASTET_LENGTH = 12
    2036:	59 f0       	breq	.+22     	; 0x204e <BastetDictates+0x1c6>
    2038:	e6 95       	lsr	r30
                            iLED[HCKR[G][(simonPos / 2) - 1]] = dimValue;
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e6 53       	subi	r30, 0x36	; 54
    203e:	f1 44       	sbci	r31, 0x41	; 65
    2040:	e5 81       	ldd	r30, Z+5	; 0x05
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    2048:	e7 53       	subi	r30, 0x37	; 55
    204a:	f5 4c       	sbci	r31, 0xC5	; 197
    204c:	80 83       	st	Z, r24
    204e:	83 e0       	ldi	r24, 0x03	; 3
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
    2050:	1c c0       	rjmp	.+56     	; 0x208a <BastetDictates+0x202>
    2052:	80 e2       	ldi	r24, 0x20	; 32
                    }
                } else {
                    effect = 32;
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    205a:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    205e:	aa ec       	ldi	r26, 0xCA	; 202
    2060:	be eb       	ldi	r27, 0xBE	; 190
    2062:	ed 91       	ld	r30, X+
                    for (uint8_t n=0; n<6; n++){
                        iLED[HCKR[R][n]] = dimValue;
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <dimValue>
    206a:	e7 53       	subi	r30, 0x37	; 55
    206c:	f5 4c       	sbci	r31, 0xC5	; 197
    206e:	80 83       	st	Z, r24
    2070:	8e eb       	ldi	r24, 0xBE	; 190
                        }
                        simonNextGameState = BASTET_GAME_SHOW_PATTERN;
                    }
                } else {
                    effect = 32;
                    for (uint8_t n=0; n<6; n++){
    2072:	a0 3d       	cpi	r26, 0xD0	; 208
    2074:	b8 07       	cpc	r27, r24
    2076:	a9 f7       	brne	.-22     	; 0x2062 <BastetDictates+0x1da>
    2078:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonInputPos>
                        iLED[HCKR[R][n]] = dimValue;
                    }
                    simonInputPos = 0;
    207c:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonPos>
                    simonPos = 0;
    2080:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
                    simonTimer = 0;
    2084:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
                    simonCounter = 0;
    2088:	86 e0       	ldi	r24, 0x06	; 6
                    simonNextGameState = BASTET_GAME_OUTRO;
    208a:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <simonNextGameState>
    208e:	80 91 66 38 	lds	r24, 0x3866	; 0x803866 <simonInputPos>
                }

                if (simonInputPos >= BASTET_LENGTH || simonPos >= BASTET_LENGTH) { // beetje dubbel
    2092:	8c 30       	cpi	r24, 0x0C	; 12
    2094:	20 f4       	brcc	.+8      	; 0x209e <BastetDictates+0x216>
    2096:	80 91 67 38 	lds	r24, 0x3867	; 0x803867 <simonPos>
    209a:	8c 30       	cpi	r24, 0x0C	; 12
    209c:	90 f0       	brcs	.+36     	; 0x20c2 <BastetDictates+0x23a>
                    effect = 64|2;
    209e:	82 e4       	ldi	r24, 0x42	; 66
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    20a6:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(BASTET_COMPLETED);
    20aa:	8a e7       	ldi	r24, 0x7A	; 122
    20ac:	92 d9       	rcall	.-3292   	; 0x13d2 <UpdateState>
    20ae:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
                    simonTimer = 0;
    20b2:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
                    simonCounter = 0;
    20b6:	87 e0       	ldi	r24, 0x07	; 7
                    simonNextGameState = BASTET_GAME_OVER;
    20b8:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <simonNextGameState>
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <BastetDictates+0x23a>
    20be:	10 92 64 38 	sts	0x3864, r1	; 0x803864 <simonWait>
                }
            }
        
        //Button released, next or reset!
        } else {
            simonWait = 0;
    20c2:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
        }

        if (simonTimer == 200) {    // did you forget about Bastet?
    20c6:	88 3c       	cpi	r24, 0xC8	; 200
    20c8:	41 f4       	brne	.+16     	; 0x20da <BastetDictates+0x252>
    20ca:	83 e0       	ldi	r24, 0x03	; 3
            simonGameState = BASTET_GAME_SHOW_PATTERN;
    20cc:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
    20d0:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
            simonCounter = 0;
    20d4:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
            simonTimer = 0;
    20d8:	51 c0       	rjmp	.+162    	; 0x217c <BastetDictates+0x2f4>
            return 0;
    20da:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonGameState>
        }
    }

    if (BASTET_GAME_WAIT_LEDS == simonGameState) {
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	81 f4       	brne	.+32     	; 0x2102 <BastetDictates+0x27a>
        if (simonTimer >= 7) {
    20e2:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
    20e6:	87 30       	cpi	r24, 0x07	; 7
    20e8:	60 f0       	brcs	.+24     	; 0x2102 <BastetDictates+0x27a>
            // on to next state after ±.5 second
            simonLed(0);  // LEDs off
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	4f de       	rcall	.-866    	; 0x1d8c <simonLed>
    20ee:	10 92 64 38 	sts	0x3864, r1	; 0x803864 <simonWait>
            simonWait = 0;
    20f2:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
            simonTimer = 0;
    20f6:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
            simonCounter = 0;
    20fa:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <simonNextGameState>
            simonGameState = simonNextGameState;
    20fe:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
    2102:	80 91 62 38 	lds	r24, 0x3862	; 0x803862 <simonGameState>
        }
    }

    if (BASTET_GAME_OUTRO == simonGameState) {
    2106:	86 30       	cpi	r24, 0x06	; 6
    2108:	41 f5       	brne	.+80     	; 0x215a <BastetDictates+0x2d2>
    210a:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
        if (simonTimer > 3) {
    210e:	84 30       	cpi	r24, 0x04	; 4
    2110:	38 f0       	brcs	.+14     	; 0x2120 <BastetDictates+0x298>
    2112:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonCounter>
            simonCounter++;
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	80 93 63 38 	sts	0x3863, r24	; 0x803863 <simonCounter>
    211c:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
            simonTimer = 0;
    2120:	80 91 63 38 	lds	r24, 0x3863	; 0x803863 <simonCounter>
        }
        if (simonCounter > 5) {
    2124:	86 30       	cpi	r24, 0x06	; 6
    2126:	40 f0       	brcs	.+16     	; 0x2138 <BastetDictates+0x2b0>
    2128:	10 92 65 38 	sts	0x3865, r1	; 0x803865 <simonTimer>
            simonTimer = 0;
    212c:	10 92 63 38 	sts	0x3863, r1	; 0x803863 <simonCounter>
            simonCounter = 0;
    2130:	87 e0       	ldi	r24, 0x07	; 7
            simonGameState = BASTET_GAME_OVER;
    2132:	80 93 62 38 	sts	0x3862, r24	; 0x803862 <simonGameState>
    2136:	22 c0       	rjmp	.+68     	; 0x217c <BastetDictates+0x2f4>
            return 0;
    2138:	e5 e0       	ldi	r30, 0x05	; 5
        }
        iLED[HCKR[R][5-simonCounter]] = 0;
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	e8 1b       	sub	r30, r24
    213e:	f1 09       	sbc	r31, r1
    2140:	e6 53       	subi	r30, 0x36	; 54
    2142:	f1 44       	sbci	r31, 0x41	; 65
    2144:	a0 81       	ld	r26, Z
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	a7 53       	subi	r26, 0x37	; 55
    214a:	b5 4c       	sbci	r27, 0xC5	; 197
    214c:	1c 92       	st	X, r1
    214e:	e6 81       	ldd	r30, Z+6	; 0x06
        iLED[HCKR[G][5-simonCounter]] = 0;
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	e7 53       	subi	r30, 0x37	; 55
    2154:	f5 4c       	sbci	r31, 0xC5	; 197
    2156:	10 82       	st	Z, r1
    2158:	0c c0       	rjmp	.+24     	; 0x2172 <BastetDictates+0x2ea>
    215a:	87 30       	cpi	r24, 0x07	; 7
    }

    if (BASTET_GAME_OVER == simonGameState) {
    215c:	51 f4       	brne	.+20     	; 0x2172 <BastetDictates+0x2ea>
        simonInputPos = 0;
    215e:	10 92 66 38 	sts	0x3866, r1	; 0x803866 <simonInputPos>
        simonPos = 0;
    2162:	10 92 67 38 	sts	0x3867, r1	; 0x803867 <simonPos>
        simonGameState = BASTET_BOOT; // BASTET_GAME_START for stale "field" ツs
    2166:	10 92 62 38 	sts	0x3862, r1	; 0x803862 <simonGameState>
        gameNow = TEXT;
    216a:	10 92 42 38 	sts	0x3842, r1	; 0x803842 <gameNow>
        simonLed(0);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	0d de       	rcall	.-998    	; 0x1d8c <simonLed>
    2172:	80 91 65 38 	lds	r24, 0x3865	; 0x803865 <simonTimer>
    }

    ++simonTimer;
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 93 65 38 	sts	0x3865, r24	; 0x803865 <simonTimer>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <Cheat>:
    2184:	a2 e1       	ldi	r26, 0x12	; 18

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 ec       	ldi	r30, 0xC8	; 200
    218a:	f0 e1       	ldi	r31, 0x10	; 16
    218c:	0c 94 24 1f 	jmp	0x3e48	; 0x3e48 <__prologue_saves__+0x1e>
    2190:	8a 8b       	std	Y+18, r24	; 0x12
    2192:	80 e1       	ldi	r24, 0x10	; 16
    2194:	e0 e9       	ldi	r30, 0x90	; 144
    2196:	fe eb       	ldi	r31, 0xBE	; 190
    2198:	de 01       	movw	r26, r28
    219a:	11 96       	adiw	r26, 0x01	; 1
    219c:	01 90       	ld	r0, Z+
    219e:	0d 92       	st	X+, r0
    21a0:	8a 95       	dec	r24
    21a2:	e1 f7       	brne	.-8      	; 0x219c <Cheat+0x18>
    21a4:	fe 01       	movw	r30, r28
    21a6:	31 96       	adiw	r30, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	21 91       	ld	r18, Z+
    21ae:	31 91       	ld	r19, Z+
    21b0:	26 17       	cp	r18, r22
    21b2:	37 07       	cpc	r19, r23
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <Cheat+0x34>
    21b6:	89 2f       	mov	r24, r25
    21b8:	9f 5f       	subi	r25, 0xFF	; 255
    21ba:	98 30       	cpi	r25, 0x08	; 8
    21bc:	b9 f7       	brne	.-18     	; 0x21ac <Cheat+0x28>
    21be:	88 30       	cpi	r24, 0x08	; 8
    21c0:	10 f0       	brcs	.+4      	; 0x21c6 <Cheat+0x42>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <Cheat+0x6a>
    21c6:	18 e1       	ldi	r17, 0x18	; 24
    21c8:	18 0f       	add	r17, r24
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	be 01       	movw	r22, r28
    21ce:	6f 5e       	subi	r22, 0xEF	; 239
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	81 2f       	mov	r24, r17
    21d4:	0e 94 01 08 	call	0x1002	; 0x1002 <EERead>
    21d8:	89 89       	ldd	r24, Y+17	; 0x11
    21da:	8f 3f       	cpi	r24, 0xFF	; 255
    21dc:	91 f7       	brne	.-28     	; 0x21c2 <Cheat+0x3e>
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	be 01       	movw	r22, r28
    21e2:	6e 5e       	subi	r22, 0xEE	; 238
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	81 2f       	mov	r24, r17
    21e8:	0e 94 11 08 	call	0x1022	; 0x1022 <EEWrite>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	62 96       	adiw	r28, 0x12	; 18
    21f0:	e3 e0       	ldi	r30, 0x03	; 3
    21f2:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__epilogue_restores__+0x1e>

000021f6 <UnflipData>:
    21f6:	26 2f       	mov	r18, r22
    21f8:	fb 01       	movw	r30, r22
    21fa:	35 e5       	ldi	r19, 0x55	; 85
    21fc:	9e 2f       	mov	r25, r30
    21fe:	92 1b       	sub	r25, r18
    2200:	98 17       	cp	r25, r24
    2202:	28 f4       	brcc	.+10     	; 0x220e <UnflipData+0x18>
    2204:	90 81       	ld	r25, Z
    2206:	92 95       	swap	r25
    2208:	93 27       	eor	r25, r19
    220a:	91 93       	st	Z+, r25
    220c:	f7 cf       	rjmp	.-18     	; 0x21fc <UnflipData+0x6>
    220e:	08 95       	ret

00002210 <ClearTxAfter>:
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	88 30       	cpi	r24, 0x08	; 8
    2214:	30 f4       	brcc	.+12     	; 0x2222 <ClearTxAfter+0x12>
    2216:	e8 2f       	mov	r30, r24
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	e2 5b       	subi	r30, 0xB2	; 178
    221c:	f5 4c       	sbci	r31, 0xC5	; 197
    221e:	10 82       	st	Z, r1
    2220:	f7 cf       	rjmp	.-18     	; 0x2210 <ClearTxAfter>
    2222:	08 95       	ret

00002224 <StartsWith>:
    2224:	ac 01       	movw	r20, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	e9 2f       	mov	r30, r25
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	da 01       	movw	r26, r20
    222e:	ae 0f       	add	r26, r30
    2230:	bf 1f       	adc	r27, r31
    2232:	3c 91       	ld	r19, X
    2234:	e6 0f       	add	r30, r22
    2236:	f7 1f       	adc	r31, r23
    2238:	31 11       	cpse	r19, r1
    223a:	05 c0       	rjmp	.+10     	; 0x2246 <StartsWith+0x22>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 81       	ld	r25, Z
    2240:	99 23       	and	r25, r25
    2242:	49 f0       	breq	.+18     	; 0x2256 <StartsWith+0x32>
    2244:	07 c0       	rjmp	.+14     	; 0x2254 <StartsWith+0x30>
    2246:	20 81       	ld	r18, Z
    2248:	22 23       	and	r18, r18
    224a:	c1 f3       	breq	.-16     	; 0x223c <StartsWith+0x18>
    224c:	32 13       	cpse	r19, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <StartsWith+0x30>
    2250:	9f 5f       	subi	r25, 0xFF	; 255
    2252:	ea cf       	rjmp	.-44     	; 0x2228 <StartsWith+0x4>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	08 95       	ret

00002258 <PrepareSending>:
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	fc 01       	movw	r30, r24
    225e:	61 15       	cp	r22, r1
    2260:	71 05       	cpc	r23, r1
    2262:	59 f1       	breq	.+86     	; 0x22ba <PrepareSending+0x62>
    2264:	a6 e5       	ldi	r26, 0x56	; 86
    2266:	ba e3       	ldi	r27, 0x3A	; 58
    2268:	ce e4       	ldi	r28, 0x4E	; 78
    226a:	da e3       	ldi	r29, 0x3A	; 58
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	9f ef       	ldi	r25, 0xFF	; 255
    2270:	6f 3f       	cpi	r22, 0xFF	; 255
    2272:	71 05       	cpc	r23, r1
    2274:	69 f0       	breq	.+26     	; 0x2290 <PrepareSending+0x38>
    2276:	60 f0       	brcs	.+24     	; 0x2290 <PrepareSending+0x38>
    2278:	ed 93       	st	X+, r30
    227a:	fd 93       	st	X+, r31
    227c:	99 93       	st	Y+, r25
    227e:	e1 50       	subi	r30, 0x01	; 1
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	6f 5f       	subi	r22, 0xFF	; 255
    2284:	71 09       	sbc	r23, r1
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	87 30       	cpi	r24, 0x07	; 7
    228a:	91 f7       	brne	.-28     	; 0x2270 <PrepareSending+0x18>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	1e c0       	rjmp	.+60     	; 0x22cc <PrepareSending+0x74>
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	d9 01       	movw	r26, r18
    2296:	aa 0f       	add	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	aa 5a       	subi	r26, 0xAA	; 170
    229c:	b5 4c       	sbci	r27, 0xC5	; 197
    229e:	ed 93       	st	X+, r30
    22a0:	fc 93       	st	X, r31
    22a2:	6f 3f       	cpi	r22, 0xFF	; 255
    22a4:	71 05       	cpc	r23, r1
    22a6:	11 f4       	brne	.+4      	; 0x22ac <PrepareSending+0x54>
    22a8:	6e ef       	ldi	r22, 0xFE	; 254
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	f9 01       	movw	r30, r18
    22ae:	e2 5b       	subi	r30, 0xB2	; 178
    22b0:	f5 4c       	sbci	r31, 0xC5	; 197
    22b2:	60 83       	st	Z, r22
    22b4:	40 93 4c 3a 	sts	0x3A4C, r20	; 0x803a4c <txTypeNow>
    22b8:	05 c0       	rjmp	.+10     	; 0x22c4 <PrepareSending+0x6c>
    22ba:	10 92 56 3a 	sts	0x3A56, r1	; 0x803a56 <txAddrList>
    22be:	10 92 57 3a 	sts	0x3A57, r1	; 0x803a57 <txAddrList+0x1>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	a5 df       	rcall	.-182    	; 0x2210 <ClearTxAfter>
    22c6:	10 92 4d 3a 	sts	0x3A4D, r1	; 0x803a4d <txAddrNow>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	08 95       	ret

000022d2 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	f9 01       	movw	r30, r18
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	ef 5d       	subi	r30, 0xDF	; 223
    22e2:	f6 4c       	sbci	r31, 0xC6	; 198
    22e4:	a9 e5       	ldi	r26, 0x59	; 89
    22e6:	ba e7       	ldi	r27, 0x7A	; 122
    22e8:	a0 83       	st	Z, r26
    22ea:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    22ec:	f9 01       	movw	r30, r18
    22ee:	ee 0f       	add	r30, r30
    22f0:	ff 1f       	adc	r31, r31
    22f2:	ef 59       	subi	r30, 0x9F	; 159
    22f4:	f6 4c       	sbci	r31, 0xC6	; 198
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	60 83       	st	Z, r22
    22fc:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    22fe:	22 0f       	add	r18, r18
    2300:	33 1f       	adc	r19, r19
    2302:	f9 01       	movw	r30, r18
    2304:	ef 55       	subi	r30, 0x5F	; 95
    2306:	f6 4c       	sbci	r31, 0xC6	; 198
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	40 83       	st	Z, r20
    230e:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	28 0f       	add	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	f9 01       	movw	r30, r18
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ef 5d       	subi	r30, 0xDF	; 223
    231e:	f6 4c       	sbci	r31, 0xC6	; 198
    2320:	c2 e6       	ldi	r28, 0x62	; 98
    2322:	da e7       	ldi	r29, 0x7A	; 122
    2324:	c0 83       	st	Z, r28
    2326:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    2328:	f9 01       	movw	r30, r18
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ef 59       	subi	r30, 0x9F	; 159
    2330:	f6 4c       	sbci	r31, 0xC6	; 198
    2332:	cc e0       	ldi	r28, 0x0C	; 12
    2334:	d0 e0       	ldi	r29, 0x00	; 0
    2336:	c0 83       	st	Z, r28
    2338:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    233a:	22 0f       	add	r18, r18
    233c:	33 1f       	adc	r19, r19
    233e:	f9 01       	movw	r30, r18
    2340:	ef 55       	subi	r30, 0x5F	; 95
    2342:	f6 4c       	sbci	r31, 0xC6	; 198
    2344:	40 83       	st	Z, r20
    2346:	51 83       	std	Z+1, r21	; 0x01
//
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    2348:	e2 e0       	ldi	r30, 0x02	; 2
    234a:	e8 0f       	add	r30, r24
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ef 5d       	subi	r30, 0xDF	; 223
    2354:	f6 4c       	sbci	r31, 0xC6	; 198
    2356:	20 ef       	ldi	r18, 0xF0	; 240
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	20 83       	st	Z, r18
    235c:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    235e:	23 e0       	ldi	r18, 0x03	; 3
    2360:	28 0f       	add	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	f9 01       	movw	r30, r18
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	ef 5d       	subi	r30, 0xDF	; 223
    236c:	f6 4c       	sbci	r31, 0xC6	; 198
    236e:	a0 83       	st	Z, r26
    2370:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    2372:	f9 01       	movw	r30, r18
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ef 59       	subi	r30, 0x9F	; 159
    237a:	f6 4c       	sbci	r31, 0xC6	; 198
    237c:	60 83       	st	Z, r22
    237e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2380:	22 0f       	add	r18, r18
    2382:	33 1f       	adc	r19, r19
    2384:	f9 01       	movw	r30, r18
    2386:	ef 55       	subi	r30, 0x5F	; 95
    2388:	f6 4c       	sbci	r31, 0xC6	; 198
    238a:	40 83       	st	Z, r20
    238c:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    238e:	24 e0       	ldi	r18, 0x04	; 4
    2390:	28 0f       	add	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	f9 01       	movw	r30, r18
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	ef 5d       	subi	r30, 0xDF	; 223
    239c:	f6 4c       	sbci	r31, 0xC6	; 198
    239e:	a5 e5       	ldi	r26, 0x55	; 85
    23a0:	ba e7       	ldi	r27, 0x7A	; 122
    23a2:	a0 83       	st	Z, r26
    23a4:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    23a6:	f9 01       	movw	r30, r18
    23a8:	ee 0f       	add	r30, r30
    23aa:	ff 1f       	adc	r31, r31
    23ac:	ef 59       	subi	r30, 0x9F	; 159
    23ae:	f6 4c       	sbci	r31, 0xC6	; 198
    23b0:	60 83       	st	Z, r22
    23b2:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	f9 01       	movw	r30, r18
    23ba:	ef 55       	subi	r30, 0x5F	; 95
    23bc:	f6 4c       	sbci	r31, 0xC6	; 198
    23be:	40 83       	st	Z, r20
    23c0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[0][custStrEnd++] = CURR_LOC;
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);

    return custStrEnd;
}
    23c2:	8b 5f       	subi	r24, 0xFB	; 251
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	08 95       	ret

000023ca <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	df 92       	push	r13
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	2c 97       	sbiw	r28, 0x0c	; 12
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	7c 01       	movw	r14, r24
    23e8:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    23ea:	9e 01       	movw	r18, r28
    23ec:	2f 5f       	subi	r18, 0xFF	; 255
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	6c e0       	ldi	r22, 0x0C	; 12
    23f4:	80 96       	adiw	r24, 0x20	; 32
    23f6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a 81       	ldd	r25, Y+2	; 0x02
    23fe:	98 27       	eor	r25, r24
    2400:	89 27       	eor	r24, r25
    2402:	98 27       	eor	r25, r24
    2404:	80 96       	adiw	r24, 0x20	; 32
    2406:	f8 01       	movw	r30, r16
    2408:	80 83       	st	Z, r24
    240a:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	98 27       	eor	r25, r24
    2412:	89 27       	eor	r24, r25
    2414:	98 27       	eor	r25, r24
    2416:	80 96       	adiw	r24, 0x20	; 32
    2418:	82 83       	std	Z+2, r24	; 0x02
    241a:	93 83       	std	Z+3, r25	; 0x03
    241c:	de 01       	movw	r26, r28
    241e:	15 96       	adiw	r26, 0x05	; 5
    2420:	34 96       	adiw	r30, 0x04	; 4
    2422:	c8 01       	movw	r24, r16
    2424:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    2426:	2d 91       	ld	r18, X+
    2428:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    242a:	e8 17       	cp	r30, r24
    242c:	f9 07       	cpc	r31, r25
    242e:	d9 f7       	brne	.-10     	; 0x2426 <PopulateObject+0x5c>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    2430:	fc e2       	ldi	r31, 0x2C	; 44
    2432:	ef 0e       	add	r14, r31
    2434:	f1 1c       	adc	r15, r1
    2436:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2438:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    243a:	9e 01       	movw	r18, r28
    243c:	2f 5f       	subi	r18, 0xFF	; 255
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	63 e0       	ldi	r22, 0x03	; 3
    2444:	c7 01       	movw	r24, r14
    2446:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	98 27       	eor	r25, r24
    2450:	89 27       	eor	r24, r25
    2452:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    2454:	97 01       	movw	r18, r14
    2456:	2e 5f       	subi	r18, 0xFE	; 254
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    245a:	43 e0       	ldi	r20, 0x03	; 3
    245c:	4d 15       	cp	r20, r13
    245e:	80 f4       	brcc	.+32     	; 0x2480 <PopulateObject+0xb6>
            object->lenStr[x]= parStr-1;
    2460:	ac 01       	movw	r20, r24
    2462:	41 50       	subi	r20, 0x01	; 1
    2464:	51 09       	sbc	r21, r1
    2466:	f8 01       	movw	r30, r16
    2468:	42 8f       	std	Z+26, r20	; 0x1a
    246a:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    246c:	f3 e0       	ldi	r31, 0x03	; 3
    246e:	ef 0e       	add	r14, r31
    2470:	f1 1c       	adc	r15, r1
    2472:	f8 01       	movw	r30, r16
    2474:	e4 86       	std	Z+12, r14	; 0x0c
    2476:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    2478:	4b 81       	ldd	r20, Y+3	; 0x03
    247a:	f5 01       	movw	r30, r10
    247c:	44 a3       	std	Z+36, r20	; 0x24
    247e:	05 c0       	rjmp	.+10     	; 0x248a <PopulateObject+0xc0>
        } else {
            object->lenStr[x]= parStr;
    2480:	f8 01       	movw	r30, r16
    2482:	82 8f       	std	Z+26, r24	; 0x1a
    2484:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    2486:	24 87       	std	Z+12, r18	; 0x0c
    2488:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    248a:	7c 01       	movw	r14, r24
    248c:	e2 0e       	add	r14, r18
    248e:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    2490:	d3 94       	inc	r13
    2492:	0e 5f       	subi	r16, 0xFE	; 254
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	ff ef       	ldi	r31, 0xFF	; 255
    2498:	af 1a       	sub	r10, r31
    249a:	bf 0a       	sbc	r11, r31
    249c:	47 e0       	ldi	r20, 0x07	; 7
    249e:	d4 12       	cpse	r13, r20
    24a0:	cc cf       	rjmp	.-104    	; 0x243a <PopulateObject+0x70>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    24a2:	2c 96       	adiw	r28, 0x0c	; 12
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	1f 91       	pop	r17
    24ae:	0f 91       	pop	r16
    24b0:	ff 90       	pop	r15
    24b2:	ef 90       	pop	r14
    24b4:	df 90       	pop	r13
    24b6:	bf 90       	pop	r11
    24b8:	af 90       	pop	r10
    24ba:	08 95       	ret

000024bc <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    24bc:	a0 e2       	ldi	r26, 0x20	; 32
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e4 e6       	ldi	r30, 0x64	; 100
    24c2:	f2 e1       	ldi	r31, 0x12	; 18
    24c4:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__prologue_saves__+0x14>
    24c8:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    24ca:	7c 01       	movw	r14, r24
    24cc:	20 e2       	ldi	r18, 0x20	; 32
    24ce:	e2 0e       	add	r14, r18
    24d0:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    24d2:	9e 01       	movw	r18, r28
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	62 e0       	ldi	r22, 0x02	; 2
    24dc:	8c 96       	adiw	r24, 0x2c	; 44
    24de:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    24e2:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    24e4:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    24e6:	11 23       	and	r17, r17
    24e8:	59 f1       	breq	.+86     	; 0x2540 <CheckLetter+0x84>
    24ea:	01 2f       	mov	r16, r17
    24ec:	11 32       	cpi	r17, 0x21	; 33
    24ee:	08 f0       	brcs	.+2      	; 0x24f2 <CheckLetter+0x36>
    24f0:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    24f2:	9e 01       	movw	r18, r28
    24f4:	2f 5f       	subi	r18, 0xFF	; 255
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	60 2f       	mov	r22, r16
    24fc:	c7 01       	movw	r24, r14
    24fe:	0e 96       	adiw	r24, 0x0e	; 14
    2500:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
    2504:	fe 01       	movw	r30, r28
    2506:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    2508:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    250a:	dd 20       	and	r13, r13
    250c:	61 f0       	breq	.+24     	; 0x2526 <CheckLetter+0x6a>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    250e:	e1 e0       	ldi	r30, 0x01	; 1
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	ec 0f       	add	r30, r28
    2514:	fd 1f       	adc	r31, r29
    2516:	e8 0f       	add	r30, r24
    2518:	f1 1d       	adc	r31, r1
    251a:	90 81       	ld	r25, Z
    251c:	90 62       	ori	r25, 0x20	; 32
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	9c 11       	cpse	r25, r12
    2522:	0e c0       	rjmp	.+28     	; 0x2540 <CheckLetter+0x84>
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <CheckLetter+0x86>
            }
            if (data[y] == '[') found = 1;
    2526:	91 91       	ld	r25, Z+
    2528:	dd 24       	eor	r13, r13
    252a:	d3 94       	inc	r13
    252c:	9b 35       	cpi	r25, 0x5B	; 91
    252e:	09 f0       	breq	.+2      	; 0x2532 <CheckLetter+0x76>
    2530:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	80 17       	cp	r24, r16
    2536:	48 f3       	brcs	.-46     	; 0x250a <CheckLetter+0x4e>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    2538:	e0 0e       	add	r14, r16
    253a:	f1 1c       	adc	r15, r1
        x -= max;
    253c:	10 1b       	sub	r17, r16
    253e:	d3 cf       	rjmp	.-90     	; 0x24e6 <CheckLetter+0x2a>
    }
    return 0;
    2540:	80 e0       	ldi	r24, 0x00	; 0
}
    2542:	a0 96       	adiw	r28, 0x20	; 32
    2544:	e8 e0       	ldi	r30, 0x08	; 8
    2546:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__epilogue_restores__+0x14>

0000254a <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    254a:	af 92       	push	r10
    254c:	bf 92       	push	r11
    254e:	df 92       	push	r13
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	00 d0       	rcall	.+0      	; 0x255e <FindChild+0x14>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <FindChild+0x16>
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	d6 2e       	mov	r13, r22
    2566:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    2568:	9e 01       	movw	r18, r28
    256a:	2f 5f       	subi	r18, 0xFF	; 255
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
    256e:	40 e0       	ldi	r20, 0x00	; 0
    2570:	64 e0       	ldi	r22, 0x04	; 4
    2572:	80 96       	adiw	r24, 0x20	; 32
    2574:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
    2578:	e9 80       	ldd	r14, Y+1	; 0x01
    257a:	fa 80       	ldd	r15, Y+2	; 0x02
    257c:	fe 24       	eor	r15, r14
    257e:	ef 24       	eor	r14, r15
    2580:	fe 24       	eor	r15, r14
    2582:	0b 81       	ldd	r16, Y+3	; 0x03
    2584:	1c 81       	ldd	r17, Y+4	; 0x04
    2586:	10 27       	eor	r17, r16
    2588:	01 27       	eor	r16, r17
    258a:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    258c:	0e 15       	cp	r16, r14
    258e:	1f 05       	cpc	r17, r15
    2590:	48 f5       	brcc	.+82     	; 0x25e4 <FindChild+0x9a>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    2592:	a0 16       	cp	r10, r16
    2594:	b1 06       	cpc	r11, r17
    2596:	60 f0       	brcs	.+24     	; 0x25b0 <FindChild+0x66>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    2598:	9e 01       	movw	r18, r28
    259a:	2f 5f       	subi	r18, 0xFF	; 255
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	62 e0       	ldi	r22, 0x02	; 2
    25a2:	c8 01       	movw	r24, r16
    25a4:	80 96       	adiw	r24, 0x20	; 32
    25a6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
    25aa:	09 81       	ldd	r16, Y+1	; 0x01
    25ac:	1a 81       	ldd	r17, Y+2	; 0x02
    25ae:	eb cf       	rjmp	.-42     	; 0x2586 <FindChild+0x3c>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    25b0:	9e 01       	movw	r18, r28
    25b2:	2f 5f       	subi	r18, 0xFF	; 255
    25b4:	3f 4f       	sbci	r19, 0xFF	; 255
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	61 e0       	ldi	r22, 0x01	; 1
    25ba:	c8 01       	movw	r24, r16
    25bc:	85 96       	adiw	r24, 0x25	; 37
    25be:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	81 11       	cpse	r24, r1
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <FindChild+0x84>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25c8:	d1 10       	cpse	r13, r1
    25ca:	06 c0       	rjmp	.+12     	; 0x25d8 <FindChild+0x8e>
    25cc:	0e c0       	rjmp	.+28     	; 0x25ea <FindChild+0xa0>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    25ce:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
    25d2:	81 11       	cpse	r24, r1
    25d4:	f9 cf       	rjmp	.-14     	; 0x25c8 <FindChild+0x7e>
    25d6:	e0 cf       	rjmp	.-64     	; 0x2598 <FindChild+0x4e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    25d8:	6d 2d       	mov	r22, r13
    25da:	c8 01       	movw	r24, r16
    25dc:	6f df       	rcall	.-290    	; 0x24bc <CheckLetter>
    25de:	88 23       	and	r24, r24
    25e0:	d9 f2       	breq	.-74     	; 0x2598 <FindChild+0x4e>
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <FindChild+0xa0>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <FindChild+0xa2>
    25ea:	c8 01       	movw	r24, r16
}
    25ec:	24 96       	adiw	r28, 0x04	; 4
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	bf 90       	pop	r11
    2602:	af 90       	pop	r10
    2604:	08 95       	ret

00002606 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    2606:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    2608:	9f e9       	ldi	r25, 0x9F	; 159
    260a:	98 0f       	add	r25, r24
    260c:	9a 31       	cpi	r25, 0x1A	; 26
    260e:	38 f0       	brcs	.+14     	; 0x261e <InpOkChk+0x18>
    2610:	90 ed       	ldi	r25, 0xD0	; 208
    2612:	98 0f       	add	r25, r24
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	9a 30       	cpi	r25, 0x0A	; 10
    2618:	18 f0       	brcs	.+6      	; 0x2620 <InpOkChk+0x1a>
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	08 95       	ret
    261e:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    2620:	08 95       	ret

00002622 <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    262c:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    262e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    2630:	f8 01       	movw	r30, r16
    2632:	ed 0f       	add	r30, r29
    2634:	f1 1d       	adc	r31, r1
    2636:	20 81       	ld	r18, Z
    2638:	8c 2f       	mov	r24, r28
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	22 23       	and	r18, r18
    263e:	51 f0       	breq	.+20     	; 0x2654 <CleanInput+0x32>
        data[cnt] = data[x];
    2640:	d8 01       	movw	r26, r16
    2642:	a8 0f       	add	r26, r24
    2644:	b9 1f       	adc	r27, r25
    2646:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    2648:	80 81       	ld	r24, Z
    264a:	dd df       	rcall	.-70     	; 0x2606 <InpOkChk>
    264c:	81 11       	cpse	r24, r1
    264e:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    2650:	df 5f       	subi	r29, 0xFF	; 255
    2652:	ee cf       	rjmp	.-36     	; 0x2630 <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    2654:	f8 01       	movw	r30, r16
    2656:	e8 0f       	add	r30, r24
    2658:	f9 1f       	adc	r31, r25
    265a:	10 82       	st	Z, r1
    return cnt;
}
    265c:	8c 2f       	mov	r24, r28
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	08 95       	ret

00002668 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    2668:	cf 93       	push	r28
    /*if (effect == 0){
        effect = currObj.byteField[EFFECTS];
    }*/

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    266a:	20 91 4d 3a 	lds	r18, 0x3A4D	; 0x803a4d <txAddrNow>
    266e:	28 30       	cpi	r18, 0x08	; 8
    2670:	08 f0       	brcs	.+2      	; 0x2674 <CheckSend+0xc>
    2672:	49 c0       	rjmp	.+146    	; 0x2706 <CheckSend+0x9e>
    2674:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2678:	88 23       	and	r24, r24
    267a:	09 f4       	brne	.+2      	; 0x267e <CheckSend+0x16>
    267c:	44 c0       	rjmp	.+136    	; 0x2706 <CheckSend+0x9e>
        if (txStrLen[txAddrNow] == 0){
    267e:	82 2f       	mov	r24, r18
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	fc 01       	movw	r30, r24
    2684:	e2 5b       	subi	r30, 0xB2	; 178
    2686:	f5 4c       	sbci	r31, 0xC5	; 197
    2688:	e0 81       	ld	r30, Z
    268a:	e1 11       	cpse	r30, r1
    268c:	06 c0       	rjmp	.+12     	; 0x269a <CheckSend+0x32>
            txPart = 0;
    268e:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <txPart.3937>
            txAddrNow = TXLISTLEN;
    2692:	88 e0       	ldi	r24, 0x08	; 8
    2694:	80 93 4d 3a 	sts	0x3A4D, r24	; 0x803a4d <txAddrNow>
    2698:	2e c0       	rjmp	.+92     	; 0x26f6 <CheckSend+0x8e>
        } else if (txPart < txStrLen[txAddrNow]){
    269a:	50 91 0c 39 	lds	r21, 0x390C	; 0x80390c <txPart.3937>
    269e:	5e 17       	cp	r21, r30
    26a0:	60 f5       	brcc	.+88     	; 0x26fa <CheckSend+0x92>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    26a2:	ce 2f       	mov	r28, r30
    26a4:	c5 1b       	sub	r28, r21
    26a6:	c1 32       	cpi	r28, 0x21	; 33
    26a8:	08 f0       	brcs	.+2      	; 0x26ac <CheckSend+0x44>
    26aa:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	fc 01       	movw	r30, r24
    26b2:	ea 5a       	subi	r30, 0xAA	; 170
    26b4:	f5 4c       	sbci	r31, 0xC5	; 197
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	27 ef       	ldi	r18, 0xF7	; 247
    26bc:	3a e3       	ldi	r19, 0x3A	; 58
    26be:	40 91 4c 3a 	lds	r20, 0x3A4C	; 0x803a4c <txTypeNow>
    26c2:	6c 2f       	mov	r22, r28
    26c4:	85 0f       	add	r24, r21
    26c6:	91 1d       	adc	r25, r1
    26c8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
            txPart += EEreadLength;
    26cc:	80 91 0c 39 	lds	r24, 0x390C	; 0x80390c <txPart.3937>
    26d0:	8c 0f       	add	r24, r28
    26d2:	80 93 0c 39 	sts	0x390C, r24	; 0x80390c <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    26d6:	ec 2f       	mov	r30, r28
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	e9 50       	subi	r30, 0x09	; 9
    26dc:	f5 4c       	sbci	r31, 0xC5	; 197
    26de:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    26e0:	80 91 f7 3a 	lds	r24, 0x3AF7	; 0x803af7 <txBuffer>
    26e4:	81 11       	cpse	r24, r1
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <CheckSend+0x86>
    26e8:	8b ed       	ldi	r24, 0xDB	; 219
    26ea:	80 93 f7 3a 	sts	0x3AF7, r24	; 0x803af7 <txBuffer>
            SerSend(&txBuffer[0]);
    26ee:	87 ef       	ldi	r24, 0xF7	; 247
    26f0:	9a e3       	ldi	r25, 0x3A	; 58
    26f2:	0e 94 75 08 	call	0x10ea	; 0x10ea <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0b c0       	rjmp	.+22     	; 0x2710 <CheckSend+0xa8>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    26fa:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <txPart.3937>
            ++txAddrNow;
    26fe:	2f 5f       	subi	r18, 0xFF	; 255
    2700:	20 93 4d 3a 	sts	0x3A4D, r18	; 0x803a4d <txAddrNow>
    2704:	f8 cf       	rjmp	.-16     	; 0x26f6 <CheckSend+0x8e>
        }
    } else if (serTxDone) return 0; //All is sent!
    2706:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <serTxDone>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	91 11       	cpse	r25, r1
    270e:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    2710:	cf 91       	pop	r28
    2712:	08 95       	ret

00002714 <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    2718:	c0 91 20 39 	lds	r28, 0x3920	; 0x803920 <responseList>
    271c:	cc 23       	and	r28, r28
    271e:	b1 f1       	breq	.+108    	; 0x278c <CheckResponse+0x78>
        --responseList;
    2720:	c1 50       	subi	r28, 0x01	; 1
    2722:	c0 93 20 39 	sts	0x3920, r28	; 0x803920 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    2726:	d0 91 0b 39 	lds	r29, 0x390B	; 0x80390b <number.3941>
    272a:	2d 2f       	mov	r18, r29
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	f9 01       	movw	r30, r18
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ef 5d       	subi	r30, 0xDF	; 223
    2736:	f6 4c       	sbci	r31, 0xC6	; 198
    2738:	80 81       	ld	r24, Z
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	80 3f       	cpi	r24, 0xF0	; 240
    273e:	4f ef       	ldi	r20, 0xFF	; 255
    2740:	94 07       	cpc	r25, r20
    2742:	51 f4       	brne	.+20     	; 0x2758 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    2744:	60 91 3b 3a 	lds	r22, 0x3A3B	; 0x803a3b <currObj+0x1a>
    2748:	70 91 3c 3a 	lds	r23, 0x3A3C	; 0x803a3c <currObj+0x1b>
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	80 91 2d 3a 	lds	r24, 0x3A2D	; 0x803a2d <currObj+0xc>
    2752:	90 91 2e 3a 	lds	r25, 0x3A2E	; 0x803a2e <currObj+0xd>
    2756:	0d c0       	rjmp	.+26     	; 0x2772 <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    2758:	d9 01       	movw	r26, r18
    275a:	aa 0f       	add	r26, r26
    275c:	bb 1f       	adc	r27, r27
    275e:	af 55       	subi	r26, 0x5F	; 95
    2760:	b6 4c       	sbci	r27, 0xC6	; 198
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	f9 01       	movw	r30, r18
    2768:	ef 59       	subi	r30, 0x9F	; 159
    276a:	f6 4c       	sbci	r31, 0xC6	; 198
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	4c 91       	ld	r20, X
    2772:	72 dd       	rcall	.-1308   	; 0x2258 <PrepareSending>
        }
        ++number;
    2774:	df 5f       	subi	r29, 0xFF	; 255
    2776:	d0 93 0b 39 	sts	0x390B, r29	; 0x80390b <number.3941>

        if (responseList == 0) {
    277a:	c1 11       	cpse	r28, r1
    277c:	06 c0       	rjmp	.+12     	; 0x278a <CheckResponse+0x76>
            //effect = currObj.byteField[EFFECTS];
            RXCNT = 0;
    277e:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    2780:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <serRxDone>
            number = 0;
    2784:	10 92 0b 39 	sts	0x390B, r1	; 0x80390b <number.3941>
    2788:	01 c0       	rjmp	.+2      	; 0x278c <CheckResponse+0x78>
            return 0;
        }
        return 1;
    278a:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    278c:	8c 2f       	mov	r24, r28
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    2794:	aa e0       	ldi	r26, 0x0A	; 10
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e0 ed       	ldi	r30, 0xD0	; 208
    279a:	f3 e1       	ldi	r31, 0x13	; 19
    279c:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x6>
    27a0:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    27a2:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <currDepth>
    27a6:	8f 3f       	cpi	r24, 0xFF	; 255
    27a8:	49 f4       	brne	.+18     	; 0x27bc <CheckInput+0x28>
        //Start at first location
        PopulateObject(route[0], &currObj);
    27aa:	61 e2       	ldi	r22, 0x21	; 33
    27ac:	7a e3       	ldi	r23, 0x3A	; 58
    27ae:	80 91 e1 39 	lds	r24, 0x39E1	; 0x8039e1 <route>
    27b2:	90 91 e2 39 	lds	r25, 0x39E2	; 0x8039e2 <route+0x1>
    27b6:	09 de       	rcall	.-1006   	; 0x23ca <PopulateObject>
        currDepth = 0;
    27b8:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <currDepth>
    }

    if (serRxDone){
    27bc:	80 91 4a 38 	lds	r24, 0x384A	; 0x80384a <serRxDone>
    27c0:	88 23       	and	r24, r24
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <CheckInput+0x32>
    27c4:	d4 c1       	rjmp	.+936    	; 0x2b6e <CheckInput+0x3da>

        //Special input requested from user by game
        if (specialInput[0]){
    27c6:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <specialInput>
    27ca:	88 23       	and	r24, r24
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <CheckInput+0x3c>
    27ce:	4f c0       	rjmp	.+158    	; 0x286e <CheckInput+0xda>
            specialPassed = 0;
    27d0:	10 92 0f 39 	sts	0x390F, r1	; 0x80390f <specialPassed>
            data[0] = 'a';
    27d4:	81 e6       	ldi	r24, 0x61	; 97
    27d6:	f8 01       	movw	r30, r16
    27d8:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    27da:	60 e1       	ldi	r22, 0x10	; 16
    27dc:	79 e3       	ldi	r23, 0x39	; 57
    27de:	8b e7       	ldi	r24, 0x7B	; 123
    27e0:	9a e3       	ldi	r25, 0x3A	; 58
    27e2:	20 dd       	rcall	.-1472   	; 0x2224 <StartsWith>
    27e4:	f8 2e       	mov	r15, r24
    27e6:	88 23       	and	r24, r24
    27e8:	21 f0       	breq	.+8      	; 0x27f2 <CheckInput+0x5e>
                specialPassed = 1;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	80 93 0f 39 	sts	0x390F, r24	; 0x80390f <specialPassed>
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <CheckInput+0x66>

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    27f2:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <specialInput>
    27f6:	81 33       	cpi	r24, 0x31	; 49
    27f8:	11 f0       	breq	.+4      	; 0x27fe <CheckInput+0x6a>
                responseList = SetStandardResponse((3*MAX_CHEATS));
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    27fa:	f1 2c       	mov	r15, r1
    27fc:	ba c1       	rjmp	.+884    	; 0x2b72 <CheckInput+0x3de>
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
                specialPassed = 1;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    27fe:	80 91 12 39 	lds	r24, 0x3912	; 0x803912 <specialInput+0x2>
    2802:	81 11       	cpse	r24, r1
    2804:	fa cf       	rjmp	.-12     	; 0x27fa <CheckInput+0x66>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    2806:	8b e7       	ldi	r24, 0x7B	; 123
    2808:	9a e3       	ldi	r25, 0x3A	; 58
    280a:	0b df       	rcall	.-490    	; 0x2622 <CleanInput>
                specialPassed = 2;
    280c:	92 e0       	ldi	r25, 0x02	; 2
    280e:	90 93 0f 39 	sts	0x390F, r25	; 0x80390f <specialPassed>
                data[1] = 0;
    2812:	f8 01       	movw	r30, r16
    2814:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	80 f3       	brcs	.-32     	; 0x27fa <CheckInput+0x66>
                    if ((serRx[0] >= '1') && (serRx[0] <= '4')) {
    281a:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx>
    281e:	81 33       	cpi	r24, 0x31	; 49
    2820:	60 f3       	brcs	.-40     	; 0x27fa <CheckInput+0x66>
    2822:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx>
    2826:	85 33       	cpi	r24, 0x35	; 53
    2828:	40 f7       	brcc	.-48     	; 0x27fa <CheckInput+0x66>
                        serRx[1] |= 0x20;
    282a:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <serRx+0x1>
    282e:	80 62       	ori	r24, 0x20	; 32
    2830:	80 93 7c 3a 	sts	0x3A7C, r24	; 0x803a7c <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    2834:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <serRx+0x1>
    2838:	81 36       	cpi	r24, 0x61	; 97
    283a:	61 f0       	breq	.+24     	; 0x2854 <CheckInput+0xc0>
    283c:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <serRx+0x1>
    2840:	85 36       	cpi	r24, 0x65	; 101
    2842:	41 f0       	breq	.+16     	; 0x2854 <CheckInput+0xc0>
    2844:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <serRx+0x1>
    2848:	86 36       	cpi	r24, 0x66	; 102
    284a:	21 f0       	breq	.+8      	; 0x2854 <CheckInput+0xc0>
    284c:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <serRx+0x1>
    2850:	87 37       	cpi	r24, 0x77	; 119
    2852:	99 f6       	brne	.-90     	; 0x27fa <CheckInput+0x66>
                            data[1] = specialInput[1]+0x11;
    2854:	80 91 11 39 	lds	r24, 0x3911	; 0x803911 <specialInput+0x1>
    2858:	8f 5e       	subi	r24, 0xEF	; 239
    285a:	f8 01       	movw	r30, r16
    285c:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    285e:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx>
    2862:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    2864:	80 91 7c 3a 	lds	r24, 0x3A7C	; 0x803a7c <serRx+0x1>
    2868:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    286a:	14 82       	std	Z+4, r1	; 0x04
    286c:	82 c1       	rjmp	.+772    	; 0x2b72 <CheckInput+0x3de>
        } else {
      
            //SetResponse(0, A_LF, 4, TEASER);

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    286e:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx>
    2872:	83 32       	cpi	r24, 0x23	; 35
    2874:	89 f5       	brne	.+98     	; 0x28d8 <CheckInput+0x144>
    2876:	8d b3       	in	r24, 0x1d	; 29
    2878:	86 30       	cpi	r24, 0x06	; 6
    287a:	71 f5       	brne	.+92     	; 0x28d8 <CheckInput+0x144>
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    2882:	fc 01       	movw	r30, r24
    2884:	e5 58       	subi	r30, 0x85	; 133
    2886:	f5 4c       	sbci	r31, 0xC5	; 197
    2888:	20 81       	ld	r18, Z
    288a:	20 53       	subi	r18, 0x30	; 48
    288c:	20 83       	st	Z, r18
                    bitNr *= 10;
    288e:	11 0f       	add	r17, r17
    2890:	21 2f       	mov	r18, r17
    2892:	22 0f       	add	r18, r18
    2894:	22 0f       	add	r18, r18
    2896:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    2898:	20 91 7c 3a 	lds	r18, 0x3A7C	; 0x803a7c <serRx+0x1>
    289c:	23 30       	cpi	r18, 0x03	; 3
    289e:	48 f4       	brcc	.+18     	; 0x28b2 <CheckInput+0x11e>
                    if (serRx[x] < 10) {
    28a0:	20 81       	ld	r18, Z
    28a2:	2a 30       	cpi	r18, 0x0A	; 10
    28a4:	b8 f4       	brcc	.+46     	; 0x28d4 <CheckInput+0x140>
                        bitNr += serRx[x];
    28a6:	20 81       	ld	r18, Z
    28a8:	12 0f       	add	r17, r18
    28aa:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    28ac:	84 30       	cpi	r24, 0x04	; 4
    28ae:	91 05       	cpc	r25, r1
    28b0:	41 f7       	brne	.-48     	; 0x2882 <CheckInput+0xee>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    28b2:	81 2f       	mov	r24, r17
    28b4:	8f 77       	andi	r24, 0x7F	; 127
    28b6:	71 f0       	breq	.+28     	; 0x28d4 <CheckInput+0x140>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    28b8:	80 91 7f 3a 	lds	r24, 0x3A7F	; 0x803a7f <serRx+0x4>
    28bc:	60 91 80 3a 	lds	r22, 0x3A80	; 0x803a80 <serRx+0x5>
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	78 2b       	or	r23, r24
    28c4:	81 2f       	mov	r24, r17
    28c6:	80 95       	com	r24
    28c8:	5d dc       	rcall	.-1862   	; 0x2184 <Cheat>
    28ca:	88 23       	and	r24, r24
    28cc:	19 f0       	breq	.+6      	; 0x28d4 <CheckInput+0x140>
    28ce:	81 2f       	mov	r24, r17
    28d0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
                }
                
                responseList = SetStandardResponse(1);
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	48 c1       	rjmp	.+656    	; 0x2b68 <CheckInput+0x3d4>
    28d8:	d8 01       	movw	r26, r16
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    28de:	fc 01       	movw	r30, r24
    28e0:	e5 58       	subi	r30, 0x85	; 133
    28e2:	f5 4c       	sbci	r31, 0xC5	; 197
    28e4:	20 81       	ld	r18, Z
    28e6:	21 34       	cpi	r18, 0x41	; 65
    28e8:	18 f0       	brcs	.+6      	; 0x28f0 <CheckInput+0x15c>
    28ea:	20 81       	ld	r18, Z
    28ec:	2b 35       	cpi	r18, 0x5B	; 91
    28ee:	10 f0       	brcs	.+4      	; 0x28f4 <CheckInput+0x160>
    28f0:	20 81       	ld	r18, Z
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <CheckInput+0x164>
    28f4:	20 81       	ld	r18, Z
    28f6:	20 62       	ori	r18, 0x20	; 32
    28f8:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    28fa:	20 81       	ld	r18, Z
    28fc:	21 11       	cpse	r18, r1
    28fe:	05 c0       	rjmp	.+10     	; 0x290a <CheckInput+0x176>
                    data[x] = 0;
    2900:	f8 01       	movw	r30, r16
    2902:	e8 0f       	add	r30, r24
    2904:	f1 1d       	adc	r31, r1
    2906:	10 82       	st	Z, r1
                    break;
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <CheckInput+0x180>
    290a:	01 96       	adiw	r24, 0x01	; 1
    290c:	11 96       	adiw	r26, 0x01	; 1
                
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    290e:	81 34       	cpi	r24, 0x41	; 65
    2910:	91 05       	cpc	r25, r1
    2912:	29 f7       	brne	.-54     	; 0x28de <CheckInput+0x14a>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    2914:	80 91 7b 3a 	lds	r24, 0x3A7B	; 0x803a7b <serRx>
                data[0] = 0;
    2918:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    291a:	81 11       	cpse	r24, r1
    291c:	05 c0       	rjmp	.+10     	; 0x2928 <CheckInput+0x194>
                data[0] = 0;
    291e:	10 82       	st	Z, r1
                RXCNT = 0;
    2920:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    2922:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <serRxDone>
    2926:	23 c1       	rjmp	.+582    	; 0x2b6e <CheckInput+0x3da>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    2928:	80 81       	ld	r24, Z
    292a:	8f 33       	cpi	r24, 0x3F	; 63
    292c:	11 f0       	breq	.+4      	; 0x2932 <CheckInput+0x19e>
    292e:	88 36       	cpi	r24, 0x68	; 104
    2930:	49 f4       	brne	.+18     	; 0x2944 <CheckInput+0x1b0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2932:	83 e9       	ldi	r24, 0x93	; 147
    2934:	9b e7       	ldi	r25, 0x7B	; 123
    2936:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    293a:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    293e:	8d e6       	ldi	r24, 0x6D	; 109
    2940:	94 e0       	ldi	r25, 0x04	; 4
    2942:	0a c0       	rjmp	.+20     	; 0x2958 <CheckInput+0x1c4>
                responseList = SetStandardResponse(2);
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    2944:	81 36       	cpi	r24, 0x61	; 97
    2946:	a1 f4       	brne	.+40     	; 0x2970 <CheckInput+0x1dc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2948:	8e e6       	ldi	r24, 0x6E	; 110
    294a:	9a e7       	ldi	r25, 0x7A	; 122
    294c:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    2950:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2954:	85 e2       	ldi	r24, 0x25	; 37
    2956:	91 e0       	ldi	r25, 0x01	; 1
    2958:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    295c:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    2968:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
                SetResponse(1, A_ALPHABET, L_ALPHABET, TEASER);
                responseList = SetStandardResponse(2);
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	fc c0       	rjmp	.+504    	; 0x2b68 <CheckInput+0x3d4>
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    2970:	87 37       	cpi	r24, 0x77	; 119
    2972:	09 f0       	breq	.+2      	; 0x2976 <CheckInput+0x1e2>
    2974:	41 c0       	rjmp	.+130    	; 0x29f8 <CheckInput+0x264>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2976:	8d e8       	ldi	r24, 0x8D	; 141
    2978:	96 e7       	ldi	r25, 0x76	; 118
    297a:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    297e:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2982:	82 e1       	ldi	r24, 0x12	; 18
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    298a:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    298e:	21 e0       	ldi	r18, 0x01	; 1
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	20 93 a3 39 	sts	0x39A3, r18	; 0x8039a3 <reactStr+0x82>
    2996:	30 93 a4 39 	sts	0x39A4, r19	; 0x8039a4 <reactStr+0x83>
            }

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                SetResponse(2, names[0][whoami-1], names[1][whoami-1], TEASER);
    299a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <whoami>
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	fc 01       	movw	r30, r24
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	ee 5b       	subi	r30, 0xBE	; 190
    29a8:	f0 44       	sbci	r31, 0x40	; 64
    29aa:	40 81       	ld	r20, Z
    29ac:	51 81       	ldd	r21, Z+1	; 0x01
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	fc 01       	movw	r30, r24
    29b4:	e6 5c       	subi	r30, 0xC6	; 198
    29b6:	f0 44       	sbci	r31, 0x40	; 64
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29b8:	80 81       	ld	r24, Z
    29ba:	91 81       	ldd	r25, Z+1	; 0x01
    29bc:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x4>
    29c0:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    29c4:	40 93 65 39 	sts	0x3965, r20	; 0x803965 <reactStr+0x44>
    29c8:	50 93 66 39 	sts	0x3966, r21	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    29cc:	20 93 a5 39 	sts	0x39A5, r18	; 0x8039a5 <reactStr+0x84>
    29d0:	30 93 a6 39 	sts	0x39A6, r19	; 0x8039a6 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    29d4:	8f e5       	ldi	r24, 0x5F	; 95
    29d6:	96 e7       	ldi	r25, 0x76	; 118
    29d8:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x6>
    29dc:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x7>
    reactStr[1][number]=length;
    29e0:	8a e1       	ldi	r24, 0x1A	; 26
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x46>
    29e8:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x47>
    reactStr[2][number]=type;
    29ec:	20 93 a7 39 	sts	0x39A7, r18	; 0x8039a7 <reactStr+0x86>
    29f0:	30 93 a8 39 	sts	0x39A8, r19	; 0x8039a8 <reactStr+0x87>
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }*/

                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    29f4:	84 e0       	ldi	r24, 0x04	; 4
                responseList = SetStandardResponse(2);
                return 1;
            }*/

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    29f6:	b8 c0       	rjmp	.+368    	; 0x2b68 <CheckInput+0x3d4>
    29f8:	68 e1       	ldi	r22, 0x18	; 24
    29fa:	7f eb       	ldi	r23, 0xBF	; 191
    29fc:	c8 01       	movw	r24, r16
    29fe:	12 dc       	rcall	.-2012   	; 0x2224 <StartsWith>
    2a00:	88 23       	and	r24, r24
    2a02:	19 f1       	breq	.+70     	; 0x2a4a <CheckInput+0x2b6>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a04:	8e ee       	ldi	r24, 0xEE	; 238
    2a06:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    2a0a:	8f ee       	ldi	r24, 0xEF	; 239
    2a0c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    2a10:	80 ef       	ldi	r24, 0xF0	; 240
    2a12:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    2a16:	81 ef       	ldi	r24, 0xF1	; 241
    2a18:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
                }
                SaveGameState();
    2a1c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <SaveGameState>

                uint8_t cheat[] = "Gotcha! ";
    2a20:	89 e0       	ldi	r24, 0x09	; 9
    2a22:	eb e2       	ldi	r30, 0x2B	; 43
    2a24:	ff eb       	ldi	r31, 0xBF	; 191
    2a26:	de 01       	movw	r26, r28
    2a28:	11 96       	adiw	r26, 0x01	; 1
    2a2a:	01 90       	ld	r0, Z+
    2a2c:	0d 92       	st	X+, r0
    2a2e:	8a 95       	dec	r24
    2a30:	e1 f7       	brne	.-8      	; 0x2a2a <CheckInput+0x296>
                SerSpeed(60);
    2a32:	8c e3       	ldi	r24, 0x3C	; 60
    2a34:	0e 94 86 08 	call	0x110c	; 0x110c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2a38:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2a3c:	88 23       	and	r24, r24
    2a3e:	e1 f3       	breq	.-8      	; 0x2a38 <CheckInput+0x2a4>
    2a40:	ce 01       	movw	r24, r28
    2a42:	01 96       	adiw	r24, 0x01	; 1
    2a44:	0e 94 75 08 	call	0x10ea	; 0x10ea <SerSend>
                }
            }
            
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
    2a48:	f7 cf       	rjmp	.-18     	; 0x2a38 <CheckInput+0x2a4>
    2a4a:	6e e1       	ldi	r22, 0x1E	; 30
    2a4c:	7f eb       	ldi	r23, 0xBF	; 191
    2a4e:	c8 01       	movw	r24, r16
    2a50:	e9 db       	rcall	.-2094   	; 0x2224 <StartsWith>
    2a52:	88 23       	and	r24, r24
    2a54:	81 f1       	breq	.+96     	; 0x2ab6 <CheckInput+0x322>
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2a56:	8f ef       	ldi	r24, 0xFF	; 255
    2a58:	8a 87       	std	Y+10, r24	; 0x0a
    2a5a:	18 e1       	ldi	r17, 0x18	; 24
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	be 01       	movw	r22, r28
    2a60:	66 5f       	subi	r22, 0xF6	; 246
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	81 2f       	mov	r24, r17
    2a66:	0e 94 11 08 	call	0x1022	; 0x1022 <EEWrite>
    2a6a:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset
            if (StartsWith(&data[0], "ikillu")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2a6c:	10 32       	cpi	r17, 0x20	; 32
    2a6e:	b1 f7       	brne	.-20     	; 0x2a5c <CheckInput+0x2c8>
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    UpdateState(128+110+x);
    2a70:	8e ee       	ldi	r24, 0xEE	; 238
    2a72:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    2a76:	8f ee       	ldi	r24, 0xEF	; 239
    2a78:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    2a7c:	80 ef       	ldi	r24, 0xF0	; 240
    2a7e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    2a82:	81 ef       	ldi	r24, 0xF1	; 241
    2a84:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
                }
                
                SaveGameState();
    2a88:	0e 94 62 09 	call	0x12c4	; 0x12c4 <SaveGameState>

                uint8_t cheat[] = "Reset! ";
    2a8c:	88 e0       	ldi	r24, 0x08	; 8
    2a8e:	e4 e3       	ldi	r30, 0x34	; 52
    2a90:	ff eb       	ldi	r31, 0xBF	; 191
    2a92:	de 01       	movw	r26, r28
    2a94:	11 96       	adiw	r26, 0x01	; 1
    2a96:	01 90       	ld	r0, Z+
    2a98:	0d 92       	st	X+, r0
    2a9a:	8a 95       	dec	r24
    2a9c:	e1 f7       	brne	.-8      	; 0x2a96 <CheckInput+0x302>
                SerSpeed(60);
    2a9e:	8c e3       	ldi	r24, 0x3C	; 60
    2aa0:	0e 94 86 08 	call	0x110c	; 0x110c <SerSpeed>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2aa4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <serTxDone>
    2aa8:	88 23       	and	r24, r24
    2aaa:	e1 f3       	breq	.-8      	; 0x2aa4 <CheckInput+0x310>
    2aac:	ce 01       	movw	r24, r28
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	0e 94 75 08 	call	0x10ea	; 0x10ea <SerSend>
                }
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
    2ab4:	f7 cf       	rjmp	.-18     	; 0x2aa4 <CheckInput+0x310>
    2ab6:	65 e2       	ldi	r22, 0x25	; 37
    2ab8:	7f eb       	ldi	r23, 0xBF	; 191
    2aba:	c8 01       	movw	r24, r16
    2abc:	b3 db       	rcall	.-2202   	; 0x2224 <StartsWith>
    2abe:	88 23       	and	r24, r24
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <CheckInput+0x330>
    2ac2:	9b ce       	rjmp	.-714    	; 0x27fa <CheckInput+0x66>
    2ac4:	81 e2       	ldi	r24, 0x21	; 33
    2ac6:	c8 2e       	mov	r12, r24
    2ac8:	89 e3       	ldi	r24, 0x39	; 57
    2aca:	d8 2e       	mov	r13, r24
    2acc:	91 e6       	ldi	r25, 0x61	; 97
    2ace:	e9 2e       	mov	r14, r25
    2ad0:	99 e3       	ldi	r25, 0x39	; 57
    2ad2:	f9 2e       	mov	r15, r25
    2ad4:	01 ea       	ldi	r16, 0xA1	; 161
    2ad6:	19 e3       	ldi	r17, 0x39	; 57
    2ad8:	28 e1       	ldi	r18, 0x18	; 24
    2ada:	52 2e       	mov	r5, r18
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    2adc:	aa 24       	eor	r10, r10
    2ade:	a3 94       	inc	r10
    2ae0:	b1 2c       	mov	r11, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ae2:	47 e5       	ldi	r20, 0x57	; 87
    2ae4:	84 2e       	mov	r8, r20
    2ae6:	4a e7       	ldi	r20, 0x7A	; 122
    2ae8:	94 2e       	mov	r9, r20
    reactStr[1][number]=length;
    2aea:	52 e0       	ldi	r21, 0x02	; 2
    2aec:	65 2e       	mov	r6, r21
    2aee:	71 2c       	mov	r7, r1
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	be 01       	movw	r22, r28
    2af4:	6f 5f       	subi	r22, 0xFF	; 255
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	85 2d       	mov	r24, r5
    2afa:	0e 94 01 08 	call	0x1002	; 0x1002 <EERead>
                    bit = 0xff-bit;
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	80 95       	com	r24
    2b02:	89 83       	std	Y+1, r24	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b04:	28 2f       	mov	r18, r24
    2b06:	22 95       	swap	r18
    2b08:	2f 70       	andi	r18, 0x0F	; 15
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	23 57       	subi	r18, 0x73	; 115
    2b0e:	3b 48       	sbci	r19, 0x8B	; 139
    2b10:	f6 01       	movw	r30, r12
    2b12:	20 83       	st	Z, r18
    2b14:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2b16:	f7 01       	movw	r30, r14
    2b18:	a0 82       	st	Z, r10
    2b1a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	a0 82       	st	Z, r10
    2b20:	b1 82       	std	Z+1, r11	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b22:	8f 70       	andi	r24, 0x0F	; 15
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	83 57       	subi	r24, 0x73	; 115
    2b28:	9b 48       	sbci	r25, 0x8B	; 139
    2b2a:	f6 01       	movw	r30, r12
    2b2c:	82 83       	std	Z+2, r24	; 0x02
    2b2e:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    2b30:	f7 01       	movw	r30, r14
    2b32:	a2 82       	std	Z+2, r10	; 0x02
    2b34:	b3 82       	std	Z+3, r11	; 0x03
    reactStr[2][number]=type;
    2b36:	f8 01       	movw	r30, r16
    2b38:	a2 82       	std	Z+2, r10	; 0x02
    2b3a:	b3 82       	std	Z+3, r11	; 0x03
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b3c:	f6 01       	movw	r30, r12
    2b3e:	84 82       	std	Z+4, r8	; 0x04
    2b40:	95 82       	std	Z+5, r9	; 0x05
    reactStr[1][number]=length;
    2b42:	f7 01       	movw	r30, r14
    2b44:	64 82       	std	Z+4, r6	; 0x04
    2b46:	75 82       	std	Z+5, r7	; 0x05
    reactStr[2][number]=type;
    2b48:	f8 01       	movw	r30, r16
    2b4a:	a4 82       	std	Z+4, r10	; 0x04
    2b4c:	b5 82       	std	Z+5, r11	; 0x05
    2b4e:	53 94       	inc	r5
    2b50:	f6 e0       	ldi	r31, 0x06	; 6
    2b52:	cf 0e       	add	r12, r31
    2b54:	d1 1c       	adc	r13, r1
    2b56:	86 e0       	ldi	r24, 0x06	; 6
    2b58:	e8 0e       	add	r14, r24
    2b5a:	f1 1c       	adc	r15, r1
    2b5c:	0a 5f       	subi	r16, 0xFA	; 250
            }

            //Show used cheat codes
            if (StartsWith(&data[0], "cheat")){
                uint8_t bit;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	e0 e2       	ldi	r30, 0x20	; 32
    2b62:	5e 12       	cpse	r5, r30
                    //SetResponse(x*4, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    SetResponse(x*3, A_DIGITS+(bit>>4), 1, TEASER);               
                    SetResponse(x*3+1, A_DIGITS+(bit%16), 1, TEASER);
                    SetResponse(x*3+2, A_COMMA, L_COMMA, TEASER);
                }
                responseList = SetStandardResponse((3*MAX_CHEATS));
    2b64:	c5 cf       	rjmp	.-118    	; 0x2af0 <CheckInput+0x35c>
    2b66:	88 e1       	ldi	r24, 0x18	; 24
    2b68:	b4 db       	rcall	.-2200   	; 0x22d2 <SetStandardResponse>
    2b6a:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <responseList>
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    2b6e:	ff 24       	eor	r15, r15
    2b70:	f3 94       	inc	r15
}
    2b72:	8f 2d       	mov	r24, r15
    2b74:	2a 96       	adiw	r28, 0x0a	; 10
    2b76:	ef e0       	ldi	r30, 0x0F	; 15
    2b78:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__epilogue_restores__+0x6>

00002b7c <ShowInventory>:

uint8_t ShowInventory(uint8_t elements){
    2b7c:	ab e2       	ldi	r26, 0x2B	; 43
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e4 ec       	ldi	r30, 0xC4	; 196
    2b82:	f5 e1       	ldi	r31, 0x15	; 21
    2b84:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__prologue_saves__+0xe>
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    2b88:	99 24       	eor	r9, r9
    2b8a:	93 94       	inc	r9
    2b8c:	98 0e       	add	r9, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	fc 01       	movw	r30, r24
    2b92:	ee 0f       	add	r30, r30
    2b94:	ff 1f       	adc	r31, r31
    2b96:	ef 5d       	subi	r30, 0xDF	; 223
    2b98:	f6 4c       	sbci	r31, 0xC6	; 198
    2b9a:	2c ec       	ldi	r18, 0xCC	; 204
    2b9c:	37 e7       	ldi	r19, 0x77	; 119
    2b9e:	20 83       	st	Z, r18
    2ba0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
    2ba8:	ef 59       	subi	r30, 0x9F	; 159
    2baa:	f6 4c       	sbci	r31, 0xC6	; 198
    2bac:	26 e1       	ldi	r18, 0x16	; 22
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	20 83       	st	Z, r18
    2bb2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	fc 01       	movw	r30, r24
    2bba:	ef 55       	subi	r30, 0x5F	; 95
    2bbc:	f6 4c       	sbci	r31, 0xC6	; 198
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	80 83       	st	Z, r24
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	04 e4       	ldi	r16, 0x44	; 68
    2bc8:	18 e3       	ldi	r17, 0x38	; 56
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bca:	37 e5       	ldi	r19, 0x57	; 87
    2bcc:	e3 2e       	mov	r14, r19
    2bce:	3a e7       	ldi	r19, 0x7A	; 122
    2bd0:	f3 2e       	mov	r15, r19
    reactStr[1][number]=length;
    2bd2:	42 e0       	ldi	r20, 0x02	; 2
    2bd4:	c4 2e       	mov	r12, r20
    2bd6:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2bd8:	aa 24       	eor	r10, r10
    2bda:	a3 94       	inc	r10
    2bdc:	b1 2c       	mov	r11, r1
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
        if (inventory[x]) {
    2bde:	f8 01       	movw	r30, r16
    2be0:	81 91       	ld	r24, Z+
    2be2:	91 91       	ld	r25, Z+
    2be4:	8f 01       	movw	r16, r30
    2be6:	00 97       	sbiw	r24, 0x00	; 0
    2be8:	c9 f1       	breq	.+114    	; 0x2c5c <ShowInventory+0xe0>
            PopulateObject(inventory[x], &actObj1);
    2bea:	be 01       	movw	r22, r28
    2bec:	6f 5f       	subi	r22, 0xFF	; 255
    2bee:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf0:	ec db       	rcall	.-2088   	; 0x23ca <PopulateObject>
            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2bf2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2bf4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bf6:	89 2d       	mov	r24, r9
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	ee 0f       	add	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	ef 5d       	subi	r30, 0xDF	; 223
    2c02:	f6 4c       	sbci	r31, 0xC6	; 198
    2c04:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c06:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c08:	40 83       	st	Z, r20
    2c0a:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	ee 0f       	add	r30, r30
    2c10:	ff 1f       	adc	r31, r31
    2c12:	ef 59       	subi	r30, 0x9F	; 159
    2c14:	f6 4c       	sbci	r31, 0xC6	; 198
    2c16:	20 83       	st	Z, r18
    2c18:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	fc 01       	movw	r30, r24
    2c20:	ef 55       	subi	r30, 0x5F	; 95
    2c22:	f6 4c       	sbci	r31, 0xC6	; 198
    2c24:	10 82       	st	Z, r1
    2c26:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	89 0d       	add	r24, r9
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	93 94       	inc	r9
    2c30:	93 94       	inc	r9
    2c32:	fc 01       	movw	r30, r24
    2c34:	ee 0f       	add	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	ef 5d       	subi	r30, 0xDF	; 223
    2c3a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c3c:	e0 82       	st	Z, r14
    2c3e:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    2c40:	fc 01       	movw	r30, r24
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	ef 59       	subi	r30, 0x9F	; 159
    2c48:	f6 4c       	sbci	r31, 0xC6	; 198
    2c4a:	c0 82       	st	Z, r12
    2c4c:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	fc 01       	movw	r30, r24
    2c54:	ef 55       	subi	r30, 0x5F	; 95
    2c56:	f6 4c       	sbci	r31, 0xC6	; 198
    2c58:	a0 82       	st	Z, r10
    2c5a:	b1 82       	std	Z+1, r11	; 0x01
uint8_t ShowInventory(uint8_t elements){
    object_model_t actObj1;

    SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);

    for (uint8_t x=0; x<2; ++x) {
    2c5c:	f8 e3       	ldi	r31, 0x38	; 56
    2c5e:	08 34       	cpi	r16, 0x48	; 72
    2c60:	1f 07       	cpc	r17, r31
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <ShowInventory+0xea>
    2c64:	bc cf       	rjmp	.-136    	; 0x2bde <ShowInventory+0x62>
        }
    }
    elements -= 1;
            
    return elements;
}
    2c66:	8f ef       	ldi	r24, 0xFF	; 255
    2c68:	89 0d       	add	r24, r9
    2c6a:	ab 96       	adiw	r28, 0x2b	; 43
    2c6c:	eb e0       	ldi	r30, 0x0B	; 11
    2c6e:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0xe>

00002c72 <ProcessInput>:

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    2c72:	a8 e0       	ldi	r26, 0x08	; 8
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ef e3       	ldi	r30, 0x3F	; 63
    2c78:	f6 e1       	ldi	r31, 0x16	; 22
    2c7a:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x8>
    2c7e:	3c 01       	movw	r6, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2c80:	d0 dc       	rcall	.-1632   	; 0x2622 <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2c82:	c3 01       	movw	r24, r6
    2c84:	ce dc       	rcall	.-1636   	; 0x2622 <CleanInput>
    2c86:	f8 2e       	mov	r15, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c88:	29 e5       	ldi	r18, 0x59	; 89
    2c8a:	3a e7       	ldi	r19, 0x7A	; 122
    2c8c:	20 93 21 39 	sts	0x3921, r18	; 0x803921 <reactStr>
    2c90:	30 93 22 39 	sts	0x3922, r19	; 0x803922 <reactStr+0x1>
    reactStr[1][number]=length;
    2c94:	84 e0       	ldi	r24, 0x04	; 4
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	80 93 61 39 	sts	0x3961, r24	; 0x803961 <reactStr+0x40>
    2c9c:	90 93 62 39 	sts	0x3962, r25	; 0x803962 <reactStr+0x41>
    reactStr[2][number]=type;
    2ca0:	01 e0       	ldi	r16, 0x01	; 1
    2ca2:	10 e0       	ldi	r17, 0x00	; 0
    2ca4:	00 93 a1 39 	sts	0x39A1, r16	; 0x8039a1 <reactStr+0x80>
    2ca8:	10 93 a2 39 	sts	0x39A2, r17	; 0x8039a2 <reactStr+0x81>

    CleanInput(&data[0]);
    uint8_t inputLen = CleanInput(&data[0]);
    SetResponse(0, A_LF, 4, TEASER);

    if (inputLen) {
    2cac:	ff 20       	and	r15, r15
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <ProcessInput+0x40>
    2cb0:	54 c7       	rjmp	.+3752   	; 0x3b5a <ProcessInput+0xee8>

        //eXit to previous location
        if (data[0] == 'x'){
    2cb2:	d3 01       	movw	r26, r6
    2cb4:	8c 91       	ld	r24, X
    2cb6:	88 37       	cpi	r24, 0x78	; 120
    2cb8:	09 f0       	breq	.+2      	; 0x2cbc <ProcessInput+0x4a>
    2cba:	45 c0       	rjmp	.+138    	; 0x2d46 <ProcessInput+0xd4>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    2cbc:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <currDepth>
    2cc0:	e8 2f       	mov	r30, r24
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	ef 51       	subi	r30, 0x1F	; 31
    2cca:	f6 4c       	sbci	r31, 0xC6	; 198
    2ccc:	20 81       	ld	r18, Z
    2cce:	31 81       	ldd	r19, Z+1	; 0x01
    2cd0:	23 2b       	or	r18, r19
    2cd2:	11 f0       	breq	.+4      	; 0x2cd8 <ProcessInput+0x66>
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <ProcessInput+0x6c>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cd8:	84 e4       	ldi	r24, 0x44	; 68
    2cda:	96 e7       	ldi	r25, 0x76	; 118
    2cdc:	13 c5       	rjmp	.+2598   	; 0x3704 <ProcessInput+0xa92>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2cde:	80 91 27 3a 	lds	r24, 0x3A27	; 0x803a27 <currObj+0x6>
    2ce2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
    2ce6:	88 23       	and	r24, r24
    2ce8:	b9 f0       	breq	.+46     	; 0x2d18 <ProcessInput+0xa6>
                --currDepth;
    2cea:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    2cee:	e1 50       	subi	r30, 0x01	; 1
    2cf0:	e0 93 34 38 	sts	0x3834, r30	; 0x803834 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	ee 0f       	add	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	ef 51       	subi	r30, 0x1F	; 31
    2cfc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cfe:	61 e2       	ldi	r22, 0x21	; 33
    2d00:	7a e3       	ldi	r23, 0x3A	; 58
    2d02:	80 81       	ld	r24, Z
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	61 db       	rcall	.-2366   	; 0x23ca <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    2d08:	80 91 25 3a 	lds	r24, 0x3A25	; 0x803a25 <currObj+0x4>
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2d12:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2d16:	2a c2       	rjmp	.+1108   	; 0x316c <ProcessInput+0x4fa>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    2d18:	80 91 43 3a 	lds	r24, 0x3A43	; 0x803a43 <currObj+0x22>
    2d1c:	90 91 44 3a 	lds	r25, 0x3A44	; 0x803a44 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d20:	20 91 35 3a 	lds	r18, 0x3A35	; 0x803a35 <currObj+0x14>
    2d24:	30 91 36 3a 	lds	r19, 0x3A36	; 0x803a36 <currObj+0x15>
    2d28:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    2d2c:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2d30:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    2d34:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    2d38:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    2d3c:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    2d40:	80 91 49 3a 	lds	r24, 0x3A49	; 0x803a49 <currObj+0x28>
    2d44:	a9 c5       	rjmp	.+2898   	; 0x3898 <ProcessInput+0xc26>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    2d46:	85 36       	cpi	r24, 0x65	; 101
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <ProcessInput+0xde>
    2d4a:	8f 36       	cpi	r24, 0x6F	; 111
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <ProcessInput+0xde>
    2d4e:	de c0       	rjmp	.+444    	; 0x2f0c <ProcessInput+0x29a>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    2d50:	b2 e0       	ldi	r27, 0x02	; 2
    2d52:	fb 12       	cpse	r15, r27
    2d54:	c1 cf       	rjmp	.-126    	; 0x2cd8 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    2d56:	00 91 34 38 	lds	r16, 0x3834	; 0x803834 <currDepth>
    2d5a:	10 e0       	ldi	r17, 0x00	; 0
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	ee 0f       	add	r30, r30
    2d60:	ff 1f       	adc	r31, r31
    2d62:	ef 51       	subi	r30, 0x1F	; 31
    2d64:	f6 4c       	sbci	r31, 0xC6	; 198
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	50 e0       	ldi	r21, 0x00	; 0
    2d6a:	d3 01       	movw	r26, r6
    2d6c:	11 96       	adiw	r26, 0x01	; 1
    2d6e:	6c 91       	ld	r22, X
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	ea db       	rcall	.-2092   	; 0x254a <FindChild>
    2d76:	00 0f       	add	r16, r16
    2d78:	11 1f       	adc	r17, r17
    2d7a:	f8 01       	movw	r30, r16
    2d7c:	ed 51       	subi	r30, 0x1D	; 29
    2d7e:	f6 4c       	sbci	r31, 0xC6	; 198
    2d80:	80 83       	st	Z, r24
    2d82:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    2d84:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <currDepth>
    2d88:	29 2f       	mov	r18, r25
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	f9 01       	movw	r30, r18
    2d8e:	ee 0f       	add	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	ed 51       	subi	r30, 0x1D	; 29
    2d94:	f6 4c       	sbci	r31, 0xC6	; 198
    2d96:	40 81       	ld	r20, Z
    2d98:	51 81       	ldd	r21, Z+1	; 0x01
    2d9a:	41 15       	cp	r20, r1
    2d9c:	51 05       	cpc	r21, r1
    2d9e:	21 f0       	breq	.+8      	; 0x2da8 <ProcessInput+0x136>
                    PopulateObject(route[currDepth+1], &actObj1);
    2da0:	60 ee       	ldi	r22, 0xE0	; 224
    2da2:	78 e3       	ldi	r23, 0x38	; 56
    2da4:	ca 01       	movw	r24, r20
    2da6:	1c c0       	rjmp	.+56     	; 0x2de0 <ProcessInput+0x16e>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    2da8:	99 23       	and	r25, r25
    2daa:	09 f4       	brne	.+2      	; 0x2dae <ProcessInput+0x13c>
    2dac:	dc c6       	rjmp	.+3512   	; 0x3b66 <ProcessInput+0xef4>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2dae:	22 0f       	add	r18, r18
    2db0:	33 1f       	adc	r19, r19
    2db2:	f9 01       	movw	r30, r18
    2db4:	e1 52       	subi	r30, 0x21	; 33
    2db6:	f6 4c       	sbci	r31, 0xC6	; 198
    2db8:	d3 01       	movw	r26, r6
    2dba:	11 96       	adiw	r26, 0x01	; 1
    2dbc:	6c 91       	ld	r22, X
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	7c db       	rcall	.-2312   	; 0x24bc <CheckLetter>
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <ProcessInput+0x158>
    2dc8:	ce c6       	rjmp	.+3484   	; 0x3b66 <ProcessInput+0xef4>
                        PopulateObject(route[currDepth-1], &actObj1);
    2dca:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	ee 0f       	add	r30, r30
    2dd2:	ff 1f       	adc	r31, r31
    2dd4:	e1 52       	subi	r30, 0x21	; 33
    2dd6:	f6 4c       	sbci	r31, 0xC6	; 198
    2dd8:	60 ee       	ldi	r22, 0xE0	; 224
    2dda:	78 e3       	ldi	r23, 0x38	; 56
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	f4 da       	rcall	.-2584   	; 0x23ca <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2de2:	d3 01       	movw	r26, r6
    2de4:	8c 91       	ld	r24, X
    2de6:	85 36       	cpi	r24, 0x65	; 101
    2de8:	c1 f4       	brne	.+48     	; 0x2e1a <ProcessInput+0x1a8>
    2dea:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x8>
    2dee:	80 fd       	sbrc	r24, 0
    2df0:	1d c0       	rjmp	.+58     	; 0x2e2c <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2df2:	8d e9       	ldi	r24, 0x9D	; 157
    2df4:	99 e7       	ldi	r25, 0x79	; 121
    2df6:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    2dfa:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2dfe:	8e e1       	ldi	r24, 0x1E	; 30
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    2e06:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    2e12:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2e16:	12 e0       	ldi	r17, 0x02	; 2
    2e18:	97 c6       	rjmp	.+3374   	; 0x3b48 <ProcessInput+0xed6>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    2e1a:	8f 36       	cpi	r24, 0x6F	; 111
    2e1c:	39 f4       	brne	.+14     	; 0x2e2c <ProcessInput+0x1ba>
    2e1e:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x8>
    2e22:	81 fd       	sbrc	r24, 1
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <ProcessInput+0x1ba>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e26:	82 e8       	ldi	r24, 0x82	; 130
    2e28:	99 e7       	ldi	r25, 0x79	; 121
    2e2a:	6c c4       	rjmp	.+2264   	; 0x3704 <ProcessInput+0xa92>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2e2c:	80 91 e6 38 	lds	r24, 0x38E6	; 0x8038e6 <actObj1.3989+0x6>
    2e30:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
    2e34:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    2e38:	88 23       	and	r24, r24
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <ProcessInput+0x1cc>
    2e3c:	49 c0       	rjmp	.+146    	; 0x2ed0 <ProcessInput+0x25e>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    2e3e:	ae 2f       	mov	r26, r30
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	aa 0f       	add	r26, r26
    2e44:	bb 1f       	adc	r27, r27
    2e46:	ad 51       	subi	r26, 0x1D	; 29
    2e48:	b6 4c       	sbci	r27, 0xC6	; 198
    2e4a:	8d 91       	ld	r24, X+
    2e4c:	9c 91       	ld	r25, X
    2e4e:	89 2b       	or	r24, r25
    2e50:	11 f0       	breq	.+4      	; 0x2e56 <ProcessInput+0x1e4>
    2e52:	ef 5f       	subi	r30, 0xFF	; 255
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <ProcessInput+0x1e6>
    2e56:	e1 50       	subi	r30, 0x01	; 1
    2e58:	e0 93 34 38 	sts	0x3834, r30	; 0x803834 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    2e5c:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	ee 0f       	add	r30, r30
    2e64:	ff 1f       	adc	r31, r31
    2e66:	ef 51       	subi	r30, 0x1F	; 31
    2e68:	f6 4c       	sbci	r31, 0xC6	; 198
    2e6a:	61 e2       	ldi	r22, 0x21	; 33
    2e6c:	7a e3       	ldi	r23, 0x3A	; 58
    2e6e:	80 81       	ld	r24, Z
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	ab da       	rcall	.-2730   	; 0x23ca <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2e74:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x1c>
    2e78:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e7c:	20 91 2f 3a 	lds	r18, 0x3A2F	; 0x803a2f <currObj+0xe>
    2e80:	30 91 30 3a 	lds	r19, 0x3A30	; 0x803a30 <currObj+0xf>
    2e84:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    2e88:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2e8c:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    2e90:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    2e94:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    2e98:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e9c:	89 e5       	ldi	r24, 0x59	; 89
    2e9e:	9a e7       	ldi	r25, 0x7A	; 122
    2ea0:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x4>
    2ea4:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x44>
    2eb0:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x84>
    2ebc:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2ec0:	80 91 25 3a 	lds	r24, 0x3A25	; 0x803a25 <currObj+0x4>
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    2eca:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    2ece:	07 c4       	rjmp	.+2062   	; 0x36de <ProcessInput+0xa6c>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	ee 0f       	add	r30, r30
    2ed4:	ff 1f       	adc	r31, r31
    2ed6:	ed 51       	subi	r30, 0x1D	; 29
    2ed8:	f6 4c       	sbci	r31, 0xC6	; 198
    2eda:	10 82       	st	Z, r1
    2edc:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2ede:	80 91 02 39 	lds	r24, 0x3902	; 0x803902 <actObj1.3989+0x22>
    2ee2:	90 91 03 39 	lds	r25, 0x3903	; 0x803903 <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ee6:	20 91 f4 38 	lds	r18, 0x38F4	; 0x8038f4 <actObj1.3989+0x14>
    2eea:	30 91 f5 38 	lds	r19, 0x38F5	; 0x8038f5 <actObj1.3989+0x15>
    2eee:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    2ef2:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2ef6:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    2efa:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    2efe:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    2f02:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    2f06:	80 91 08 39 	lds	r24, 0x3908	; 0x803908 <actObj1.3989+0x28>
    2f0a:	c6 c4       	rjmp	.+2444   	; 0x3898 <ProcessInput+0xc26>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2f0c:	8c 36       	cpi	r24, 0x6C	; 108
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <ProcessInput+0x2a0>
    2f10:	59 c1       	rjmp	.+690    	; 0x31c4 <ProcessInput+0x552>
    2f12:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
            if (inputLen == 1) {
    2f16:	b1 e0       	ldi	r27, 0x01	; 1
    2f18:	fb 12       	cpse	r15, r27
    2f1a:	f1 c0       	rjmp	.+482    	; 0x30fe <ProcessInput+0x48c>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2f1c:	80 91 3d 3a 	lds	r24, 0x3A3D	; 0x803a3d <currObj+0x1c>
    2f20:	90 91 3e 3a 	lds	r25, 0x3A3E	; 0x803a3e <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f24:	40 91 2f 3a 	lds	r20, 0x3A2F	; 0x803a2f <currObj+0xe>
    2f28:	50 91 30 3a 	lds	r21, 0x3A30	; 0x803a30 <currObj+0xf>
    2f2c:	40 93 23 39 	sts	0x3923, r20	; 0x803923 <reactStr+0x2>
    2f30:	50 93 24 39 	sts	0x3924, r21	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    2f34:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    2f38:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    2f3c:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    2f40:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f44:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x4>
    2f48:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x44>
    2f54:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    2f58:	00 93 a5 39 	sts	0x39A5, r16	; 0x8039a5 <reactStr+0x84>
    2f5c:	10 93 a6 39 	sts	0x39A6, r17	; 0x8039a6 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f60:	8b ee       	ldi	r24, 0xEB	; 235
    2f62:	99 e7       	ldi	r25, 0x79	; 121
    2f64:	80 93 27 39 	sts	0x3927, r24	; 0x803927 <reactStr+0x6>
    2f68:	90 93 28 39 	sts	0x3928, r25	; 0x803928 <reactStr+0x7>
    reactStr[1][number]=length;
    2f6c:	85 e1       	ldi	r24, 0x15	; 21
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	80 93 67 39 	sts	0x3967, r24	; 0x803967 <reactStr+0x46>
    2f74:	90 93 68 39 	sts	0x3968, r25	; 0x803968 <reactStr+0x47>
    reactStr[2][number]=type;
    2f78:	00 93 a7 39 	sts	0x39A7, r16	; 0x8039a7 <reactStr+0x86>
    2f7c:	10 93 a8 39 	sts	0x39A8, r17	; 0x8039a8 <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	ee 0f       	add	r30, r30
    2f84:	ff 1f       	adc	r31, r31
    2f86:	ed 51       	subi	r30, 0x1D	; 29
    2f88:	f6 4c       	sbci	r31, 0xC6	; 198
    2f8a:	10 82       	st	Z, r1
    2f8c:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    2f8e:	14 e0       	ldi	r17, 0x04	; 4
    2f90:	91 2e       	mov	r9, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f92:	07 e5       	ldi	r16, 0x57	; 87
    2f94:	e0 2e       	mov	r14, r16
    2f96:	0a e7       	ldi	r16, 0x7A	; 122
    2f98:	f0 2e       	mov	r15, r16
    reactStr[1][number]=length;
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	c8 2e       	mov	r12, r24
    2f9e:	d1 2c       	mov	r13, r1
    reactStr[2][number]=type;
    2fa0:	aa 24       	eor	r10, r10
    2fa2:	a3 94       	inc	r10
    2fa4:	b1 2c       	mov	r11, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2fa6:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <currDepth>
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	8c 01       	movw	r16, r24
    2fae:	00 0f       	add	r16, r16
    2fb0:	11 1f       	adc	r17, r17
    2fb2:	0d 51       	subi	r16, 0x1D	; 29
    2fb4:	16 4c       	sbci	r17, 0xC6	; 198
    2fb6:	f8 01       	movw	r30, r16
    2fb8:	40 81       	ld	r20, Z
    2fba:	51 81       	ldd	r21, Z+1	; 0x01
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	ef 51       	subi	r30, 0x1F	; 31
    2fc4:	f6 4c       	sbci	r31, 0xC6	; 198
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	be da       	rcall	.-2692   	; 0x254a <FindChild>
    2fce:	d8 01       	movw	r26, r16
    2fd0:	8d 93       	st	X+, r24
    2fd2:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    2fd4:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	ed 51       	subi	r30, 0x1D	; 29
    2fe0:	f6 4c       	sbci	r31, 0xC6	; 198
    2fe2:	80 81       	ld	r24, Z
    2fe4:	91 81       	ldd	r25, Z+1	; 0x01
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <ProcessInput+0x37a>
    2fea:	4a c0       	rjmp	.+148    	; 0x3080 <ProcessInput+0x40e>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2fec:	20 91 44 38 	lds	r18, 0x3844	; 0x803844 <inventory>
    2ff0:	30 91 45 38 	lds	r19, 0x3845	; 0x803845 <inventory+0x1>
    2ff4:	82 17       	cp	r24, r18
    2ff6:	93 07       	cpc	r25, r19
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <ProcessInput+0x38a>
    2ffa:	42 c0       	rjmp	.+132    	; 0x3080 <ProcessInput+0x40e>
    2ffc:	20 91 46 38 	lds	r18, 0x3846	; 0x803846 <inventory+0x2>
    3000:	30 91 47 38 	lds	r19, 0x3847	; 0x803847 <inventory+0x3>
    3004:	82 17       	cp	r24, r18
    3006:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    3008:	d9 f1       	breq	.+118    	; 0x3080 <ProcessInput+0x40e>
    300a:	60 ee       	ldi	r22, 0xE0	; 224
    300c:	78 e3       	ldi	r23, 0x38	; 56
    300e:	dd d9       	rcall	.-3142   	; 0x23ca <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    3010:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x1a>
    3014:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3018:	e9 2d       	mov	r30, r9
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	df 01       	movw	r26, r30
    301e:	aa 0f       	add	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	af 5d       	subi	r26, 0xDF	; 223
    3024:	b6 4c       	sbci	r27, 0xC6	; 198
    3026:	20 91 ec 38 	lds	r18, 0x38EC	; 0x8038ec <actObj1.3989+0xc>
    302a:	30 91 ed 38 	lds	r19, 0x38ED	; 0x8038ed <actObj1.3989+0xd>
    302e:	2d 93       	st	X+, r18
    3030:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    3032:	df 01       	movw	r26, r30
    3034:	aa 0f       	add	r26, r26
    3036:	bb 1f       	adc	r27, r27
    3038:	af 59       	subi	r26, 0x9F	; 159
    303a:	b6 4c       	sbci	r27, 0xC6	; 198
    303c:	8d 93       	st	X+, r24
    303e:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	ef 55       	subi	r30, 0x5F	; 95
    3046:	f6 4c       	sbci	r31, 0xC6	; 198
    3048:	10 82       	st	Z, r1
    304a:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	89 0d       	add	r24, r9
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	93 94       	inc	r9
    3054:	93 94       	inc	r9
    3056:	fc 01       	movw	r30, r24
    3058:	ee 0f       	add	r30, r30
    305a:	ff 1f       	adc	r31, r31
    305c:	ef 5d       	subi	r30, 0xDF	; 223
    305e:	f6 4c       	sbci	r31, 0xC6	; 198
    3060:	e0 82       	st	Z, r14
    3062:	f1 82       	std	Z+1, r15	; 0x01
    reactStr[1][number]=length;
    3064:	fc 01       	movw	r30, r24
    3066:	ee 0f       	add	r30, r30
    3068:	ff 1f       	adc	r31, r31
    306a:	ef 59       	subi	r30, 0x9F	; 159
    306c:	f6 4c       	sbci	r31, 0xC6	; 198
    306e:	c0 82       	st	Z, r12
    3070:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[2][number]=type;
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	fc 01       	movw	r30, r24
    3078:	ef 55       	subi	r30, 0x5F	; 95
    307a:	f6 4c       	sbci	r31, 0xC6	; 198
    307c:	a0 82       	st	Z, r10
    307e:	b1 82       	std	Z+1, r11	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    3080:	20 91 34 38 	lds	r18, 0x3834	; 0x803834 <currDepth>
    3084:	82 2f       	mov	r24, r18
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	fc 01       	movw	r30, r24
    308a:	ee 0f       	add	r30, r30
    308c:	ff 1f       	adc	r31, r31
    308e:	ed 51       	subi	r30, 0x1D	; 29
    3090:	f6 4c       	sbci	r31, 0xC6	; 198
    3092:	40 81       	ld	r20, Z
    3094:	51 81       	ldd	r21, Z+1	; 0x01
    3096:	45 2b       	or	r20, r21
    3098:	09 f0       	breq	.+2      	; 0x309c <ProcessInput+0x42a>
    309a:	85 cf       	rjmp	.-246    	; 0x2fa6 <ProcessInput+0x334>

                //Look back if not on level 0
                if (currDepth) {
    309c:	22 23       	and	r18, r18
    309e:	61 f1       	breq	.+88     	; 0x30f8 <ProcessInput+0x486>
                    PopulateObject(route[currDepth-1], &actObj1);
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	fc 01       	movw	r30, r24
    30a6:	e1 52       	subi	r30, 0x21	; 33
    30a8:	f6 4c       	sbci	r31, 0xC6	; 198
    30aa:	60 ee       	ldi	r22, 0xE0	; 224
    30ac:	78 e3       	ldi	r23, 0x38	; 56
    30ae:	80 81       	ld	r24, Z
    30b0:	91 81       	ldd	r25, Z+1	; 0x01
    30b2:	8b d9       	rcall	.-3306   	; 0x23ca <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    30b4:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3989+0x1a>
    30b8:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3989+0x1b>
    30bc:	11 e0       	ldi	r17, 0x01	; 1
    30be:	19 0d       	add	r17, r9
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30c0:	89 2d       	mov	r24, r9
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	fc 01       	movw	r30, r24
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	ef 5d       	subi	r30, 0xDF	; 223
    30cc:	f6 4c       	sbci	r31, 0xC6	; 198
    30ce:	40 91 ec 38 	lds	r20, 0x38EC	; 0x8038ec <actObj1.3989+0xc>
    30d2:	50 91 ed 38 	lds	r21, 0x38ED	; 0x8038ed <actObj1.3989+0xd>
    30d6:	40 83       	st	Z, r20
    30d8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    30da:	fc 01       	movw	r30, r24
    30dc:	ee 0f       	add	r30, r30
    30de:	ff 1f       	adc	r31, r31
    30e0:	ef 59       	subi	r30, 0x9F	; 159
    30e2:	f6 4c       	sbci	r31, 0xC6	; 198
    30e4:	20 83       	st	Z, r18
    30e6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	fc 01       	movw	r30, r24
    30ee:	ef 55       	subi	r30, 0x5F	; 95
    30f0:	f6 4c       	sbci	r31, 0xC6	; 198
    30f2:	10 82       	st	Z, r1
    30f4:	11 82       	std	Z+1, r1	; 0x01
    30f6:	28 c5       	rjmp	.+2640   	; 0x3b48 <ProcessInput+0xed6>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    30f8:	1f ef       	ldi	r17, 0xFF	; 255
    30fa:	19 0d       	add	r17, r9
    30fc:	25 c5       	rjmp	.+2634   	; 0x3b48 <ProcessInput+0xed6>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    30fe:	ee 2e       	mov	r14, r30
    3100:	f1 2c       	mov	r15, r1
    3102:	f7 01       	movw	r30, r14
    3104:	ee 0f       	add	r30, r30
    3106:	ff 1f       	adc	r31, r31
    3108:	ef 51       	subi	r30, 0x1F	; 31
    310a:	f6 4c       	sbci	r31, 0xC6	; 198
    310c:	40 e0       	ldi	r20, 0x00	; 0
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	d3 01       	movw	r26, r6
    3112:	11 96       	adiw	r26, 0x01	; 1
    3114:	6c 91       	ld	r22, X
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	17 da       	rcall	.-3026   	; 0x254a <FindChild>
    311c:	f7 01       	movw	r30, r14
    311e:	ee 0f       	add	r30, r30
    3120:	ff 1f       	adc	r31, r31
    3122:	ed 51       	subi	r30, 0x1D	; 29
    3124:	f6 4c       	sbci	r31, 0xC6	; 198
    3126:	80 83       	st	Z, r24
    3128:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    312a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <currDepth>
    312e:	29 2f       	mov	r18, r25
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	f9 01       	movw	r30, r18
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	ed 51       	subi	r30, 0x1D	; 29
    313a:	f6 4c       	sbci	r31, 0xC6	; 198
    313c:	40 81       	ld	r20, Z
    313e:	51 81       	ldd	r21, Z+1	; 0x01
    3140:	41 15       	cp	r20, r1
    3142:	51 05       	cpc	r21, r1
    3144:	21 f0       	breq	.+8      	; 0x314e <ProcessInput+0x4dc>
                    PopulateObject(route[currDepth+1], &actObj1);
    3146:	60 ee       	ldi	r22, 0xE0	; 224
    3148:	78 e3       	ldi	r23, 0x38	; 56
    314a:	ca 01       	movw	r24, r20
    314c:	1c c0       	rjmp	.+56     	; 0x3186 <ProcessInput+0x514>
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    314e:	99 23       	and	r25, r25
                    if (CheckLetter(route[currDepth-1], data[1])) {
    3150:	81 f1       	breq	.+96     	; 0x31b2 <ProcessInput+0x540>
    3152:	22 0f       	add	r18, r18
    3154:	33 1f       	adc	r19, r19
    3156:	f9 01       	movw	r30, r18
    3158:	e1 52       	subi	r30, 0x21	; 33
    315a:	f6 4c       	sbci	r31, 0xC6	; 198
    315c:	d3 01       	movw	r26, r6
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	6c 91       	ld	r22, X
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	aa d9       	rcall	.-3244   	; 0x24bc <CheckLetter>
    3168:	81 11       	cpse	r24, r1
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <ProcessInput+0x4fe>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    316c:	11 e0       	ldi	r17, 0x01	; 1
                if (route[currDepth+1]) {
                    PopulateObject(route[currDepth+1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    316e:	ec c4       	rjmp	.+2520   	; 0x3b48 <ProcessInput+0xed6>
    3170:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	ee 0f       	add	r30, r30
    3178:	ff 1f       	adc	r31, r31
    317a:	e1 52       	subi	r30, 0x21	; 33
    317c:	f6 4c       	sbci	r31, 0xC6	; 198
    317e:	60 ee       	ldi	r22, 0xE0	; 224
    3180:	78 e3       	ldi	r23, 0x38	; 56
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	21 d9       	rcall	.-3518   	; 0x23ca <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    3188:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <actObj1.3989+0x1c>
    318c:	90 91 fd 38 	lds	r25, 0x38FD	; 0x8038fd <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3190:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <actObj1.3989+0xe>
    3194:	30 91 ef 38 	lds	r19, 0x38EF	; 0x8038ef <actObj1.3989+0xf>
    3198:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    319c:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    31a0:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    31a4:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    31a8:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    31ac:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
    31b0:	32 ce       	rjmp	.-924    	; 0x2e16 <ProcessInput+0x1a4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31b2:	81 ed       	ldi	r24, 0xD1	; 209
    31b4:	99 e7       	ldi	r25, 0x79	; 121
    31b6:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    31ba:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    31be:	8a e1       	ldi	r24, 0x1A	; 26
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	c9 c2       	rjmp	.+1426   	; 0x3756 <ProcessInput+0xae4>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    31c4:	80 37       	cpi	r24, 0x70	; 112
    31c6:	09 f0       	breq	.+2      	; 0x31ca <ProcessInput+0x558>
    31c8:	92 c0       	rjmp	.+292    	; 0x32ee <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    31ca:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    31ce:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    31d2:	89 2b       	or	r24, r25
    31d4:	79 f0       	breq	.+30     	; 0x31f4 <ProcessInput+0x582>
    31d6:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    31da:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    31de:	89 2b       	or	r24, r25
    31e0:	49 f0       	breq	.+18     	; 0x31f4 <ProcessInput+0x582>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31e2:	87 e0       	ldi	r24, 0x07	; 7
    31e4:	98 e7       	ldi	r25, 0x78	; 120
    31e6:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    31ea:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    31ee:	89 e5       	ldi	r24, 0x59	; 89
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	b1 c2       	rjmp	.+1378   	; 0x3756 <ProcessInput+0xae4>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    31f4:	b2 e0       	ldi	r27, 0x02	; 2
    31f6:	fb 12       	cpse	r15, r27
    31f8:	6f cd       	rjmp	.-1314   	; 0x2cd8 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    31fa:	00 91 34 38 	lds	r16, 0x3834	; 0x803834 <currDepth>
    31fe:	10 e0       	ldi	r17, 0x00	; 0
    3200:	f8 01       	movw	r30, r16
    3202:	ee 0f       	add	r30, r30
    3204:	ff 1f       	adc	r31, r31
    3206:	ef 51       	subi	r30, 0x1F	; 31
    3208:	f6 4c       	sbci	r31, 0xC6	; 198
    320a:	40 e0       	ldi	r20, 0x00	; 0
    320c:	50 e0       	ldi	r21, 0x00	; 0
    320e:	d3 01       	movw	r26, r6
    3210:	11 96       	adiw	r26, 0x01	; 1
    3212:	6c 91       	ld	r22, X
    3214:	80 81       	ld	r24, Z
    3216:	91 81       	ldd	r25, Z+1	; 0x01
    3218:	98 d9       	rcall	.-3280   	; 0x254a <FindChild>
    321a:	00 0f       	add	r16, r16
    321c:	11 1f       	adc	r17, r17
    321e:	f8 01       	movw	r30, r16
    3220:	ed 51       	subi	r30, 0x1D	; 29
    3222:	f6 4c       	sbci	r31, 0xC6	; 198
    3224:	80 83       	st	Z, r24
    3226:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    3228:	20 91 34 38 	lds	r18, 0x3834	; 0x803834 <currDepth>
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	2f 5f       	subi	r18, 0xFF	; 255
    3230:	3f 4f       	sbci	r19, 0xFF	; 255
    3232:	22 0f       	add	r18, r18
    3234:	33 1f       	adc	r19, r19
    3236:	f9 01       	movw	r30, r18
    3238:	ef 51       	subi	r30, 0x1F	; 31
    323a:	f6 4c       	sbci	r31, 0xC6	; 198
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	09 f4       	brne	.+2      	; 0x3246 <ProcessInput+0x5d4>
    3244:	38 c3       	rjmp	.+1648   	; 0x38b6 <ProcessInput+0xc44>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    3246:	40 91 44 38 	lds	r20, 0x3844	; 0x803844 <inventory>
    324a:	50 91 45 38 	lds	r21, 0x3845	; 0x803845 <inventory+0x1>
    324e:	84 17       	cp	r24, r20
    3250:	95 07       	cpc	r25, r21
    3252:	39 f0       	breq	.+14     	; 0x3262 <ProcessInput+0x5f0>
    3254:	40 91 46 38 	lds	r20, 0x3846	; 0x803846 <inventory+0x2>
    3258:	50 91 47 38 	lds	r21, 0x3847	; 0x803847 <inventory+0x3>
    325c:	84 17       	cp	r24, r20
    325e:	95 07       	cpc	r25, r21
    3260:	c1 f4       	brne	.+48     	; 0x3292 <ProcessInput+0x620>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3262:	82 ee       	ldi	r24, 0xE2	; 226
    3264:	97 e7       	ldi	r25, 0x77	; 119
    3266:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    326a:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    326e:	85 e2       	ldi	r24, 0x25	; 37
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3276:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    3282:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    3286:	f9 01       	movw	r30, r18
    3288:	ef 51       	subi	r30, 0x1F	; 31
    328a:	f6 4c       	sbci	r31, 0xC6	; 198
    328c:	10 82       	st	Z, r1
    328e:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    3290:	c2 cd       	rjmp	.-1148   	; 0x2e16 <ProcessInput+0x1a4>
    3292:	60 ee       	ldi	r22, 0xE0	; 224
    3294:	78 e3       	ldi	r23, 0x38	; 56
    3296:	99 d8       	rcall	.-3790   	; 0x23ca <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    3298:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3989+0x7>
    329c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
    32a0:	88 23       	and	r24, r24
    32a2:	09 f4       	brne	.+2      	; 0x32a6 <ProcessInput+0x634>
    32a4:	e3 c2       	rjmp	.+1478   	; 0x386c <ProcessInput+0xbfa>
                            if (actObj1.byteField[ITEM_NR]) {
    32a6:	80 91 eb 38 	lds	r24, 0x38EB	; 0x8038eb <actObj1.3989+0xb>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <ProcessInput+0x63e>
    32ae:	14 cd       	rjmp	.-1496   	; 0x2cd8 <ProcessInput+0x66>
                                if (inventory[0]) {
    32b0:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    32b4:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    32b8:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
                                    inventory[1] = route[currDepth+1];
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	ee 0f       	add	r30, r30
    32c0:	ff 1f       	adc	r31, r31
    32c2:	ed 51       	subi	r30, 0x1D	; 29
    32c4:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    32c6:	89 2b       	or	r24, r25
    32c8:	39 f0       	breq	.+14     	; 0x32d8 <ProcessInput+0x666>
                                    inventory[1] = route[currDepth+1];
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <inventory+0x2>
    32d2:	90 93 47 38 	sts	0x3847, r25	; 0x803847 <inventory+0x3>
    32d6:	06 c0       	rjmp	.+12     	; 0x32e4 <ProcessInput+0x672>
                                } else {
                                    inventory[0] = route[currDepth+1];
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <inventory>
    32e0:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <inventory+0x1>
                                }
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    32e4:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0xa>
    32e8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    32ec:	2b c0       	rjmp	.+86     	; 0x3344 <ProcessInput+0x6d2>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    32ee:	84 36       	cpi	r24, 0x64	; 100
    32f0:	d9 f4       	brne	.+54     	; 0x3328 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    32f2:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    32f6:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	09 f0       	breq	.+2      	; 0x3300 <ProcessInput+0x68e>
    32fe:	3c c4       	rjmp	.+2168   	; 0x3b78 <ProcessInput+0xf06>
    3300:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3304:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3308:	89 2b       	or	r24, r25
    330a:	49 f4       	brne	.+18     	; 0x331e <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    330c:	86 ea       	ldi	r24, 0xA6	; 166
    330e:	97 e7       	ldi	r25, 0x77	; 119
    3310:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3314:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3318:	86 e2       	ldi	r24, 0x26	; 38
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	72 cd       	rjmp	.-1308   	; 0x2e02 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    331e:	b2 e0       	ldi	r27, 0x02	; 2
    3320:	fb 16       	cp	r15, r27
    3322:	09 f4       	brne	.+2      	; 0x3326 <ProcessInput+0x6b4>
    3324:	8b c4       	rjmp	.+2326   	; 0x3c3c <ProcessInput+0xfca>
    3326:	d8 cc       	rjmp	.-1616   	; 0x2cd8 <ProcessInput+0x66>
                }
            }
        } 

        //Inventory list
        else if (data[0] == 'i') {
    3328:	89 36       	cpi	r24, 0x69	; 105
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    332a:	81 f4       	brne	.+32     	; 0x334c <ProcessInput+0x6da>
    332c:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <inventory>
    3330:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <inventory+0x1>
    3334:	89 2b       	or	r24, r25
    3336:	31 f4       	brne	.+12     	; 0x3344 <ProcessInput+0x6d2>
    3338:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    333c:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3340:	89 2b       	or	r24, r25
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
                } else {
                    elements = ShowInventory(elements);
    3342:	21 f3       	breq	.-56     	; 0x330c <ProcessInput+0x69a>
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	1a dc       	rcall	.-1996   	; 0x2b7c <ShowInventory>
    3348:	18 2f       	mov	r17, r24
    334a:	fe c3       	rjmp	.+2044   	; 0x3b48 <ProcessInput+0xed6>
                }        
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    334c:	9c e8       	ldi	r25, 0x8C	; 140
    334e:	98 0f       	add	r25, r24
    3350:	92 30       	cpi	r25, 0x02	; 2
    3352:	28 f0       	brcs	.+10     	; 0x335e <ProcessInput+0x6ec>
    3354:	87 36       	cpi	r24, 0x67	; 103
    3356:	19 f0       	breq	.+6      	; 0x335e <ProcessInput+0x6ec>
    3358:	82 37       	cpi	r24, 0x72	; 114
    335a:	09 f0       	breq	.+2      	; 0x335e <ProcessInput+0x6ec>
    335c:	b5 c2       	rjmp	.+1386   	; 0x38c8 <ProcessInput+0xc56>
            if ((inputLen<2)||(inputLen>3)) {
    335e:	8e ef       	ldi	r24, 0xFE	; 254
    3360:	8f 0d       	add	r24, r15
    3362:	82 30       	cpi	r24, 0x02	; 2
    3364:	08 f0       	brcs	.+2      	; 0x3368 <ProcessInput+0x6f6>
    3366:	b8 cc       	rjmp	.-1680   	; 0x2cd8 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    3368:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    336c:	0e 2f       	mov	r16, r30
    336e:	10 e0       	ldi	r17, 0x00	; 0
    3370:	d3 01       	movw	r26, r6
    3372:	af 0d       	add	r26, r15
    3374:	b1 1d       	adc	r27, r1
    3376:	11 97       	sbiw	r26, 0x01	; 1
    3378:	f8 01       	movw	r30, r16
    337a:	ee 0f       	add	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	ef 51       	subi	r30, 0x1F	; 31
    3380:	f6 4c       	sbci	r31, 0xC6	; 198
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	6c 91       	ld	r22, X
    3388:	80 81       	ld	r24, Z
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	de d8       	rcall	.-3652   	; 0x254a <FindChild>
    338e:	f8 01       	movw	r30, r16
    3390:	ee 0f       	add	r30, r30
    3392:	ff 1f       	adc	r31, r31
    3394:	ed 51       	subi	r30, 0x1D	; 29
    3396:	f6 4c       	sbci	r31, 0xC6	; 198
    3398:	80 83       	st	Z, r24
    339a:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    339c:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	ee 0f       	add	r30, r30
    33a4:	ff 1f       	adc	r31, r31
    33a6:	ed 51       	subi	r30, 0x1D	; 29
    33a8:	f6 4c       	sbci	r31, 0xC6	; 198
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <ProcessInput+0x742>
    33b2:	78 c2       	rjmp	.+1264   	; 0x38a4 <ProcessInput+0xc32>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    33b4:	f3 e0       	ldi	r31, 0x03	; 3
    33b6:	ff 12       	cpse	r15, r31
    33b8:	60 c1       	rjmp	.+704    	; 0x367a <ProcessInput+0xa08>
    33ba:	d3 01       	movw	r26, r6
    33bc:	2c 91       	ld	r18, X
    33be:	25 37       	cpi	r18, 0x75	; 117
    33c0:	19 f0       	breq	.+6      	; 0x33c8 <ProcessInput+0x756>
    33c2:	27 36       	cpi	r18, 0x67	; 103
    33c4:	09 f0       	breq	.+2      	; 0x33c8 <ProcessInput+0x756>
    33c6:	59 c1       	rjmp	.+690    	; 0x367a <ProcessInput+0xa08>
    33c8:	00 e0       	ldi	r16, 0x00	; 0
    33ca:	11 e0       	ldi	r17, 0x01	; 1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    33cc:	41 e6       	ldi	r20, 0x61	; 97
    33ce:	c4 2e       	mov	r12, r20
    33d0:	49 e7       	ldi	r20, 0x79	; 121
    33d2:	d4 2e       	mov	r13, r20
    reactStr[1][number]=length;
    33d4:	51 e2       	ldi	r21, 0x21	; 33
    33d6:	a5 2e       	mov	r10, r21
    33d8:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    33da:	88 24       	eor	r8, r8
    33dc:	83 94       	inc	r8
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
                            if (inventory[x]) { 
    33de:	91 2c       	mov	r9, r1
    33e0:	e0 2e       	mov	r14, r16
    33e2:	f1 2c       	mov	r15, r1
    33e4:	c7 01       	movw	r24, r14
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	fc 01       	movw	r30, r24
    33ec:	ec 5b       	subi	r30, 0xBC	; 188
    33ee:	f7 4c       	sbci	r31, 0xC7	; 199
    33f0:	7f 01       	movw	r14, r30
    33f2:	80 81       	ld	r24, Z
    33f4:	91 81       	ldd	r25, Z+1	; 0x01
    33f6:	00 97       	sbiw	r24, 0x00	; 0
                                if (CheckLetter(inventory[x], data[1])) {
    33f8:	79 f0       	breq	.+30     	; 0x3418 <ProcessInput+0x7a6>
    33fa:	d3 01       	movw	r26, r6
    33fc:	11 96       	adiw	r26, 0x01	; 1
    33fe:	6c 91       	ld	r22, X
    3400:	5d d8       	rcall	.-3910   	; 0x24bc <CheckLetter>
    3402:	88 23       	and	r24, r24
    3404:	49 f0       	breq	.+18     	; 0x3418 <ProcessInput+0x7a6>
                                    PopulateObject(inventory[x], &actObj2);
    3406:	65 eb       	ldi	r22, 0xB5	; 181
    3408:	78 e3       	ldi	r23, 0x38	; 56
    340a:	f7 01       	movw	r30, r14
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	0e 94 e5 11 	call	0x23ca	; 0x23ca <PopulateObject>
                                    x = 2;
    3414:	02 e0       	ldi	r16, 0x02	; 2
    3416:	1d c0       	rjmp	.+58     	; 0x3452 <ProcessInput+0x7e0>
                                }
                            }
                            if (x == 1) { 
    3418:	01 30       	cpi	r16, 0x01	; 1
    341a:	d1 f4       	brne	.+52     	; 0x3450 <ProcessInput+0x7de>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    341c:	e1 2f       	mov	r30, r17
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	df 01       	movw	r26, r30
    3422:	aa 0f       	add	r26, r26
    3424:	bb 1f       	adc	r27, r27
    3426:	af 5d       	subi	r26, 0xDF	; 223
    3428:	b6 4c       	sbci	r27, 0xC6	; 198
    342a:	cd 92       	st	X+, r12
    342c:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    342e:	df 01       	movw	r26, r30
    3430:	aa 0f       	add	r26, r26
    3432:	bb 1f       	adc	r27, r27
    3434:	af 59       	subi	r26, 0x9F	; 159
    3436:	b6 4c       	sbci	r27, 0xC6	; 198
    3438:	ad 92       	st	X+, r10
    343a:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    343c:	ee 0f       	add	r30, r30
    343e:	ff 1f       	adc	r31, r31
    3440:	ef 55       	subi	r30, 0x5F	; 95
    3442:	f6 4c       	sbci	r31, 0xC6	; 198
    3444:	80 82       	st	Z, r8
    3446:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    3448:	d3 01       	movw	r26, r6
    344a:	1c 92       	st	X, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    344c:	1f 5f       	subi	r17, 0xFF	; 255
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <ProcessInput+0x7e0>
    3450:	00 e0       	ldi	r16, 0x00	; 0
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; ++x) {
    3452:	0f 5f       	subi	r16, 0xFF	; 255
    3454:	01 30       	cpi	r16, 0x01	; 1
    3456:	21 f2       	breq	.-120    	; 0x33e0 <ProcessInput+0x76e>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    3458:	f3 01       	movw	r30, r6
    345a:	80 81       	ld	r24, Z
    345c:	88 23       	and	r24, r24
    345e:	09 f4       	brne	.+2      	; 0x3462 <ProcessInput+0x7f0>
    3460:	73 c3       	rjmp	.+1766   	; 0x3b48 <ProcessInput+0xed6>
                            PopulateObject(route[currDepth+1], &actObj1);
    3462:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	ee 0f       	add	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	ed 51       	subi	r30, 0x1D	; 29
    346e:	f6 4c       	sbci	r31, 0xC6	; 198
    3470:	60 ee       	ldi	r22, 0xE0	; 224
    3472:	78 e3       	ldi	r23, 0x38	; 56
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	0e 94 e5 11 	call	0x23ca	; 0x23ca <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    347c:	e0 90 fe 38 	lds	r14, 0x38FE	; 0x8038fe <actObj1.3989+0x1e>
    3480:	f0 90 ff 38 	lds	r15, 0x38FF	; 0x8038ff <actObj1.3989+0x1f>
    3484:	f1 e0       	ldi	r31, 0x01	; 1
    3486:	ef 16       	cp	r14, r31
    3488:	f1 04       	cpc	r15, r1
    348a:	09 f0       	breq	.+2      	; 0x348e <ProcessInput+0x81c>
    348c:	89 c0       	rjmp	.+274    	; 0x35a0 <ProcessInput+0x92e>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    348e:	93 01       	movw	r18, r6
    3490:	2e 5f       	subi	r18, 0xFE	; 254
    3492:	3f 4f       	sbci	r19, 0xFF	; 255
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	61 e0       	ldi	r22, 0x01	; 1
    3498:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x10>
    349c:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3989+0x11>
    34a0:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
                                if (data[2] == '1') {
    34a4:	d3 01       	movw	r26, r6
    34a6:	12 96       	adiw	r26, 0x02	; 2
    34a8:	3c 91       	ld	r19, X
    34aa:	31 33       	cpi	r19, 0x31	; 49
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <ProcessInput+0x83e>
    34ae:	4c c3       	rjmp	.+1688   	; 0x3b48 <ProcessInput+0xed6>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    34b0:	20 91 c0 38 	lds	r18, 0x38C0	; 0x8038c0 <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    34b4:	51 ee       	ldi	r21, 0xE1	; 225
    34b6:	52 0f       	add	r21, r18
    34b8:	41 e0       	ldi	r20, 0x01	; 1
    34ba:	41 0f       	add	r20, r17
    34bc:	81 2f       	mov	r24, r17
    34be:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34c0:	fc 01       	movw	r30, r24
    34c2:	ee 0f       	add	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	ef 5d       	subi	r30, 0xDF	; 223
    34c8:	f6 4c       	sbci	r31, 0xC6	; 198
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    34ca:	54 30       	cpi	r21, 0x04	; 4
    34cc:	b0 f0       	brcs	.+44     	; 0x34fa <ProcessInput+0x888>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34ce:	21 e0       	ldi	r18, 0x01	; 1
    34d0:	39 e7       	ldi	r19, 0x79	; 121
    34d2:	20 83       	st	Z, r18
    34d4:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    34d6:	fc 01       	movw	r30, r24
    34d8:	ee 0f       	add	r30, r30
    34da:	ff 1f       	adc	r31, r31
    34dc:	ef 59       	subi	r30, 0x9F	; 159
    34de:	f6 4c       	sbci	r31, 0xC6	; 198
    34e0:	2a e1       	ldi	r18, 0x1A	; 26
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	20 83       	st	Z, r18
    34e6:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	fc 01       	movw	r30, r24
    34ee:	ef 55       	subi	r30, 0x5F	; 95
    34f0:	f6 4c       	sbci	r31, 0xC6	; 198
    34f2:	e0 82       	st	Z, r14
    34f4:	f1 82       	std	Z+1, r15	; 0x01
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
    34f6:	14 2f       	mov	r17, r20
    34f8:	27 c3       	rjmp	.+1614   	; 0x3b48 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    34fa:	60 e5       	ldi	r22, 0x50	; 80
    34fc:	75 e7       	ldi	r23, 0x75	; 117
    34fe:	60 83       	st	Z, r22
    3500:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    3502:	fc 01       	movw	r30, r24
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	ef 59       	subi	r30, 0x9F	; 159
    350a:	f6 4c       	sbci	r31, 0xC6	; 198
    350c:	62 eb       	ldi	r22, 0xB2	; 178
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	60 83       	st	Z, r22
    3512:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	fc 01       	movw	r30, r24
    351a:	ef 55       	subi	r30, 0x5F	; 95
    351c:	f6 4c       	sbci	r31, 0xC6	; 198
    351e:	e0 82       	st	Z, r14
    3520:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3522:	84 2f       	mov	r24, r20
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	fc 01       	movw	r30, r24
    3528:	ee 0f       	add	r30, r30
    352a:	ff 1f       	adc	r31, r31
    352c:	ef 5d       	subi	r30, 0xDF	; 223
    352e:	f6 4c       	sbci	r31, 0xC6	; 198
    3530:	49 e5       	ldi	r20, 0x59	; 89
    3532:	5a e7       	ldi	r21, 0x7A	; 122
    3534:	40 83       	st	Z, r20
    3536:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3538:	fc 01       	movw	r30, r24
    353a:	ee 0f       	add	r30, r30
    353c:	ff 1f       	adc	r31, r31
    353e:	ef 59       	subi	r30, 0x9F	; 159
    3540:	f6 4c       	sbci	r31, 0xC6	; 198
    3542:	42 e0       	ldi	r20, 0x02	; 2
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	40 83       	st	Z, r20
    3548:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	fc 01       	movw	r30, r24
    3550:	ef 55       	subi	r30, 0x5F	; 95
    3552:	f6 4c       	sbci	r31, 0xC6	; 198
    3554:	e0 82       	st	Z, r14
    3556:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3558:	82 e0       	ldi	r24, 0x02	; 2
    355a:	81 0f       	add	r24, r17
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	1d 5f       	subi	r17, 0xFD	; 253
    3560:	fc 01       	movw	r30, r24
    3562:	ee 0f       	add	r30, r30
    3564:	ff 1f       	adc	r31, r31
    3566:	ef 5d       	subi	r30, 0xDF	; 223
    3568:	f6 4c       	sbci	r31, 0xC6	; 198
    356a:	4d ea       	ldi	r20, 0xAD	; 173
    356c:	58 e7       	ldi	r21, 0x78	; 120
    356e:	40 83       	st	Z, r20
    3570:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    3572:	fc 01       	movw	r30, r24
    3574:	ee 0f       	add	r30, r30
    3576:	ff 1f       	adc	r31, r31
    3578:	ef 59       	subi	r30, 0x9F	; 159
    357a:	f6 4c       	sbci	r31, 0xC6	; 198
    357c:	42 e1       	ldi	r20, 0x12	; 18
    357e:	50 e0       	ldi	r21, 0x00	; 0
    3580:	40 83       	st	Z, r20
    3582:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    3584:	88 0f       	add	r24, r24
    3586:	99 1f       	adc	r25, r25
    3588:	fc 01       	movw	r30, r24
    358a:	ef 55       	subi	r30, 0x5F	; 95
    358c:	f6 4c       	sbci	r31, 0xC6	; 198
    358e:	e0 82       	st	Z, r14
    3590:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    3592:	30 93 10 39 	sts	0x3910, r19	; 0x803910 <specialInput>
                                        specialInput[1] = item;
    3596:	20 93 11 39 	sts	0x3911, r18	; 0x803911 <specialInput+0x1>
                                        specialInput[2] = 0;
    359a:	10 92 12 39 	sts	0x3912, r1	; 0x803912 <specialInput+0x2>
    359e:	d4 c2       	rjmp	.+1448   	; 0x3b48 <ProcessInput+0xed6>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    35a0:	90 91 e9 38 	lds	r25, 0x38E9	; 0x8038e9 <actObj1.3989+0x9>
    35a4:	80 91 c0 38 	lds	r24, 0x38C0	; 0x8038c0 <actObj2.3990+0xb>
    35a8:	98 13       	cpse	r25, r24
    35aa:	2e c0       	rjmp	.+92     	; 0x3608 <ProcessInput+0x996>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    35ac:	20 91 06 39 	lds	r18, 0x3906	; 0x803906 <actObj1.3989+0x26>
    35b0:	30 91 07 39 	lds	r19, 0x3907	; 0x803907 <actObj1.3989+0x27>
    35b4:	01 e0       	ldi	r16, 0x01	; 1
    35b6:	01 0f       	add	r16, r17
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    35b8:	81 2f       	mov	r24, r17
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	fc 01       	movw	r30, r24
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	ef 5d       	subi	r30, 0xDF	; 223
    35c4:	f6 4c       	sbci	r31, 0xC6	; 198
    35c6:	40 91 f8 38 	lds	r20, 0x38F8	; 0x8038f8 <actObj1.3989+0x18>
    35ca:	50 91 f9 38 	lds	r21, 0x38F9	; 0x8038f9 <actObj1.3989+0x19>
    35ce:	40 83       	st	Z, r20
    35d0:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    35d2:	fc 01       	movw	r30, r24
    35d4:	ee 0f       	add	r30, r30
    35d6:	ff 1f       	adc	r31, r31
    35d8:	ef 59       	subi	r30, 0x9F	; 159
    35da:	f6 4c       	sbci	r31, 0xC6	; 198
    35dc:	20 83       	st	Z, r18
    35de:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    35e0:	88 0f       	add	r24, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	fc 01       	movw	r30, r24
    35e6:	ef 55       	subi	r30, 0x5F	; 95
    35e8:	f6 4c       	sbci	r31, 0xC6	; 198
    35ea:	10 82       	st	Z, r1
    35ec:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    35ee:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <actObj1.3989+0x2a>
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    35f8:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    35fc:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0xa>
    3600:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
                                    }
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3604:	10 2f       	mov	r17, r16
    3606:	a0 c2       	rjmp	.+1344   	; 0x3b48 <ProcessInput+0xed6>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    3608:	f3 01       	movw	r30, r6
    360a:	80 81       	ld	r24, Z
    360c:	85 37       	cpi	r24, 0x75	; 117
    360e:	99 f4       	brne	.+38     	; 0x3636 <ProcessInput+0x9c4>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3610:	81 2f       	mov	r24, r17
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	fc 01       	movw	r30, r24
    3616:	ee 0f       	add	r30, r30
    3618:	ff 1f       	adc	r31, r31
    361a:	ef 5d       	subi	r30, 0xDF	; 223
    361c:	f6 4c       	sbci	r31, 0xC6	; 198
    361e:	21 e0       	ldi	r18, 0x01	; 1
    3620:	39 e7       	ldi	r19, 0x79	; 121
    3622:	20 83       	st	Z, r18
    3624:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3626:	fc 01       	movw	r30, r24
    3628:	ee 0f       	add	r30, r30
    362a:	ff 1f       	adc	r31, r31
    362c:	ef 59       	subi	r30, 0x9F	; 159
    362e:	f6 4c       	sbci	r31, 0xC6	; 198
    3630:	2a e1       	ldi	r18, 0x1A	; 26
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	15 c0       	rjmp	.+42     	; 0x3660 <ProcessInput+0x9ee>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    3636:	87 36       	cpi	r24, 0x67	; 103
    3638:	09 f0       	breq	.+2      	; 0x363c <ProcessInput+0x9ca>
    363a:	86 c2       	rjmp	.+1292   	; 0x3b48 <ProcessInput+0xed6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    363c:	81 2f       	mov	r24, r17
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	fc 01       	movw	r30, r24
    3642:	ee 0f       	add	r30, r30
    3644:	ff 1f       	adc	r31, r31
    3646:	ef 5d       	subi	r30, 0xDF	; 223
    3648:	f6 4c       	sbci	r31, 0xC6	; 198
    364a:	2f e9       	ldi	r18, 0x9F	; 159
    364c:	36 e7       	ldi	r19, 0x76	; 118
    364e:	20 83       	st	Z, r18
    3650:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    3652:	fc 01       	movw	r30, r24
    3654:	ee 0f       	add	r30, r30
    3656:	ff 1f       	adc	r31, r31
    3658:	ef 59       	subi	r30, 0x9F	; 159
    365a:	f6 4c       	sbci	r31, 0xC6	; 198
    365c:	28 e2       	ldi	r18, 0x28	; 40
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	20 83       	st	Z, r18
    3662:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    3664:	88 0f       	add	r24, r24
    3666:	99 1f       	adc	r25, r25
    3668:	fc 01       	movw	r30, r24
    366a:	ef 55       	subi	r30, 0x5F	; 95
    366c:	f6 4c       	sbci	r31, 0xC6	; 198
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	80 83       	st	Z, r24
    3674:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    3676:	1f 5f       	subi	r17, 0xFF	; 255
    3678:	67 c2       	rjmp	.+1230   	; 0x3b48 <ProcessInput+0xed6>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    367a:	60 ee       	ldi	r22, 0xE0	; 224
    367c:	78 e3       	ldi	r23, 0x38	; 56
    367e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    3682:	d3 01       	movw	r26, r6
    3684:	8c 91       	ld	r24, X
    3686:	84 37       	cpi	r24, 0x74	; 116
    3688:	61 f5       	brne	.+88     	; 0x36e2 <ProcessInput+0xa70>
    368a:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x8>
    368e:	83 fd       	sbrc	r24, 3
    3690:	43 c0       	rjmp	.+134    	; 0x3718 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3692:	8b e1       	ldi	r24, 0x1B	; 27
    3694:	99 e7       	ldi	r25, 0x79	; 121
    3696:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    369a:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    369e:	8e e1       	ldi	r24, 0x1E	; 30
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    36a6:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    36b2:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36b6:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <actObj1.3989+0x1a>
    36ba:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36be:	20 91 ec 38 	lds	r18, 0x38EC	; 0x8038ec <actObj1.3989+0xc>
    36c2:	30 91 ed 38 	lds	r19, 0x38ED	; 0x8038ed <actObj1.3989+0xd>
    36c6:	20 93 25 39 	sts	0x3925, r18	; 0x803925 <reactStr+0x4>
    36ca:	30 93 26 39 	sts	0x3926, r19	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    36ce:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x44>
    36d2:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    36d6:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x84>
    36da:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    36de:	13 e0       	ldi	r17, 0x03	; 3
    36e0:	33 c2       	rjmp	.+1126   	; 0x3b48 <ProcessInput+0xed6>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    36e2:	85 37       	cpi	r24, 0x75	; 117
    36e4:	39 f4       	brne	.+14     	; 0x36f4 <ProcessInput+0xa82>
    36e6:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x8>
    36ea:	84 fd       	sbrc	r24, 4
    36ec:	15 c0       	rjmp	.+42     	; 0x3718 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	99 e7       	ldi	r25, 0x79	; 121
    36f2:	3b c2       	rjmp	.+1142   	; 0x3b6a <ProcessInput+0xef8>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    36f4:	82 37       	cpi	r24, 0x72	; 114
    36f6:	69 f4       	brne	.+26     	; 0x3712 <ProcessInput+0xaa0>
    36f8:	80 91 e8 38 	lds	r24, 0x38E8	; 0x8038e8 <actObj1.3989+0x8>
    36fc:	85 fd       	sbrc	r24, 5
    36fe:	0c c0       	rjmp	.+24     	; 0x3718 <ProcessInput+0xaa6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3700:	86 ee       	ldi	r24, 0xE6	; 230
    3702:	98 e7       	ldi	r25, 0x78	; 120
    3704:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3708:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    370c:	8b e1       	ldi	r24, 0x1B	; 27
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	78 cb       	rjmp	.-2320   	; 0x2e02 <ProcessInput+0x190>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    3712:	87 36       	cpi	r24, 0x67	; 103
    3714:	09 f4       	brne	.+2      	; 0x3718 <ProcessInput+0xaa6>
    3716:	e0 ca       	rjmp	.-2624   	; 0x2cd8 <ProcessInput+0x66>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    3718:	00 91 fe 38 	lds	r16, 0x38FE	; 0x8038fe <actObj1.3989+0x1e>
    371c:	10 91 ff 38 	lds	r17, 0x38FF	; 0x8038ff <actObj1.3989+0x1f>
    3720:	01 30       	cpi	r16, 0x01	; 1
    3722:	11 05       	cpc	r17, r1
    3724:	09 f5       	brne	.+66     	; 0x3768 <ProcessInput+0xaf6>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    3726:	93 01       	movw	r18, r6
    3728:	2e 5f       	subi	r18, 0xFE	; 254
    372a:	3f 4f       	sbci	r19, 0xFF	; 255
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	61 e0       	ldi	r22, 0x01	; 1
    3730:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x10>
    3734:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3989+0x11>
    3738:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
                                if (data[2] == '1') {
    373c:	f3 01       	movw	r30, r6
    373e:	82 81       	ldd	r24, Z+2	; 0x02
    3740:	81 33       	cpi	r24, 0x31	; 49
    3742:	09 f0       	breq	.+2      	; 0x3746 <ProcessInput+0xad4>
    3744:	13 cd       	rjmp	.-1498   	; 0x316c <ProcessInput+0x4fa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3746:	85 e2       	ldi	r24, 0x25	; 37
    3748:	95 e7       	ldi	r25, 0x75	; 117
    374a:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    374e:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3752:	8b e2       	ldi	r24, 0x2B	; 43
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    375a:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    375e:	00 93 a3 39 	sts	0x39A3, r16	; 0x8039a3 <reactStr+0x82>
    3762:	10 93 a4 39 	sts	0x39A4, r17	; 0x8039a4 <reactStr+0x83>
    3766:	57 cb       	rjmp	.-2386   	; 0x2e16 <ProcessInput+0x1a4>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    3768:	01 15       	cp	r16, r1
    376a:	11 05       	cpc	r17, r1
    376c:	09 f4       	brne	.+2      	; 0x3770 <ProcessInput+0xafe>
    376e:	58 c0       	rjmp	.+176    	; 0x3820 <ProcessInput+0xbae>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3770:	80 91 f0 38 	lds	r24, 0x38F0	; 0x8038f0 <actObj1.3989+0x10>
    3774:	90 91 f1 38 	lds	r25, 0x38F1	; 0x8038f1 <actObj1.3989+0x11>
    3778:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    377c:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3780:	00 93 63 39 	sts	0x3963, r16	; 0x803963 <reactStr+0x42>
    3784:	10 93 64 39 	sts	0x3964, r17	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3788:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    378c:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3790:	89 e5       	ldi	r24, 0x59	; 89
    3792:	9a e7       	ldi	r25, 0x7A	; 122
    3794:	80 93 25 39 	sts	0x3925, r24	; 0x803925 <reactStr+0x4>
    3798:	90 93 26 39 	sts	0x3926, r25	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    379c:	82 e0       	ldi	r24, 0x02	; 2
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	80 93 65 39 	sts	0x3965, r24	; 0x803965 <reactStr+0x44>
    37a4:	90 93 66 39 	sts	0x3966, r25	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	80 93 a5 39 	sts	0x39A5, r24	; 0x8039a5 <reactStr+0x84>
    37b0:	90 93 a6 39 	sts	0x39A6, r25	; 0x8039a6 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    37b4:	2d ea       	ldi	r18, 0xAD	; 173
    37b6:	38 e7       	ldi	r19, 0x78	; 120
    37b8:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x6>
    37bc:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x7>
    reactStr[1][number]=length;
    37c0:	22 e1       	ldi	r18, 0x12	; 18
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	20 93 67 39 	sts	0x3967, r18	; 0x803967 <reactStr+0x46>
    37c8:	30 93 68 39 	sts	0x3968, r19	; 0x803968 <reactStr+0x47>
    reactStr[2][number]=type;
    37cc:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x86>
    37d0:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    37d4:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x20>
    37d8:	90 91 01 39 	lds	r25, 0x3901	; 0x803901 <actObj1.3989+0x21>
    37dc:	40 97       	sbiw	r24, 0x10	; 16
    37de:	30 f0       	brcs	.+12     	; 0x37ec <ProcessInput+0xb7a>
    37e0:	8f e0       	ldi	r24, 0x0F	; 15
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	80 93 00 39 	sts	0x3900, r24	; 0x803900 <actObj1.3989+0x20>
    37e8:	90 93 01 39 	sts	0x3901, r25	; 0x803901 <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    37ec:	20 e1       	ldi	r18, 0x10	; 16
    37ee:	39 e3       	ldi	r19, 0x39	; 57
    37f0:	40 e0       	ldi	r20, 0x00	; 0
    37f2:	60 91 00 39 	lds	r22, 0x3900	; 0x803900 <actObj1.3989+0x20>
    37f6:	80 91 f2 38 	lds	r24, 0x38F2	; 0x8038f2 <actObj1.3989+0x12>
    37fa:	90 91 f3 38 	lds	r25, 0x38F3	; 0x8038f3 <actObj1.3989+0x13>
    37fe:	0e 94 53 08 	call	0x10a6	; 0x10a6 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    3802:	60 e1       	ldi	r22, 0x10	; 16
    3804:	79 e3       	ldi	r23, 0x39	; 57
    3806:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <actObj1.3989+0x20>
    380a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    380e:	e0 91 00 39 	lds	r30, 0x3900	; 0x803900 <actObj1.3989+0x20>
    3812:	f0 91 01 39 	lds	r31, 0x3901	; 0x803901 <actObj1.3989+0x21>
    3816:	e0 5f       	subi	r30, 0xF0	; 240
    3818:	f6 4c       	sbci	r31, 0xC6	; 198
    381a:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    381c:	14 e0       	ldi	r17, 0x04	; 4
    381e:	94 c1       	rjmp	.+808    	; 0x3b48 <ProcessInput+0xed6>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    3820:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3989+0x7>
    3824:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
    3828:	88 23       	and	r24, r24
    382a:	01 f1       	breq	.+64     	; 0x386c <ProcessInput+0xbfa>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    382c:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3989+0x26>
    3830:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3834:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3989+0x18>
    3838:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3989+0x19>
    383c:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    3840:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3844:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3848:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    384c:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    3850:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    3854:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <actObj1.3989+0x2a>
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    385e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    3862:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0xa>
    3866:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    386a:	d5 ca       	rjmp	.-2646   	; 0x2e16 <ProcessInput+0x1a4>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    386c:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x24>
    3870:	90 91 05 39 	lds	r25, 0x3905	; 0x803905 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3874:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3989+0x16>
    3878:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3989+0x17>
    387c:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    3880:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3884:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3888:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    388c:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    3890:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    3894:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <actObj1.3989+0x29>
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    389e:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    38a2:	b9 ca       	rjmp	.-2702   	; 0x2e16 <ProcessInput+0x1a4>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    38a4:	d3 01       	movw	r26, r6
    38a6:	8c 91       	ld	r24, X
    38a8:	84 37       	cpi	r24, 0x74	; 116
    38aa:	11 f0       	breq	.+4      	; 0x38b0 <ProcessInput+0xc3e>
    38ac:	87 36       	cpi	r24, 0x67	; 103
    38ae:	19 f4       	brne	.+6      	; 0x38b6 <ProcessInput+0xc44>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    38b0:	89 e3       	ldi	r24, 0x39	; 57
    38b2:	99 e7       	ldi	r25, 0x79	; 121
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <ProcessInput+0xc48>
    38b6:	8d e4       	ldi	r24, 0x4D	; 77
    38b8:	99 e7       	ldi	r25, 0x79	; 121
    38ba:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    38be:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    38c2:	84 e1       	ldi	r24, 0x14	; 20
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	9d ca       	rjmp	.-2758   	; 0x2e02 <ProcessInput+0x190>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    38c8:	81 36       	cpi	r24, 0x61	; 97
    38ca:	09 f0       	breq	.+2      	; 0x38ce <ProcessInput+0xc5c>
    38cc:	4f cc       	rjmp	.-1890   	; 0x316c <ProcessInput+0x4fa>
            
            //Priest offerings
            if (specialPassed >= 2) {
    38ce:	80 91 0f 39 	lds	r24, 0x390F	; 0x80390f <specialPassed>
    38d2:	82 30       	cpi	r24, 0x02	; 2
    38d4:	08 f4       	brcc	.+2      	; 0x38d8 <ProcessInput+0xc66>
    38d6:	c7 c0       	rjmp	.+398    	; 0x3a66 <ProcessInput+0xdf4>
                if (data[1] > 0) {
    38d8:	f3 01       	movw	r30, r6
    38da:	21 81       	ldd	r18, Z+1	; 0x01
    38dc:	22 23       	and	r18, r18
    38de:	09 f4       	brne	.+2      	; 0x38e2 <ProcessInput+0xc70>
    38e0:	af c0       	rjmp	.+350    	; 0x3a40 <ProcessInput+0xdce>

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    38e2:	ce 01       	movw	r24, r28
    38e4:	01 96       	adiw	r24, 0x01	; 1
    38e6:	7c 01       	movw	r14, r24
    38e8:	88 e0       	ldi	r24, 0x08	; 8
    38ea:	d7 01       	movw	r26, r14
    38ec:	1d 92       	st	X+, r1
    38ee:	8a 95       	dec	r24
    38f0:	e9 f7       	brne	.-6      	; 0x38ec <ProcessInput+0xc7a>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='0'; // item 31 needs to become something that results in 0 when doing %4
    38f2:	20 53       	subi	r18, 0x30	; 48
    38f4:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    38f6:	32 81       	ldd	r19, Z+2	; 0x02
    38f8:	31 53       	subi	r19, 0x31	; 49
    38fa:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    38fc:	83 81       	ldd	r24, Z+3	; 0x03
    38fe:	81 36       	cpi	r24, 0x61	; 97
    3900:	11 f4       	brne	.+4      	; 0x3906 <ProcessInput+0xc94>
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	0c c0       	rjmp	.+24     	; 0x391e <ProcessInput+0xcac>
                    else if (data[3] == 'e') data[3] = 0;
    3906:	85 36       	cpi	r24, 0x65	; 101
    3908:	19 f4       	brne	.+6      	; 0x3910 <ProcessInput+0xc9e>
    390a:	f3 01       	movw	r30, r6
    390c:	13 82       	std	Z+3, r1	; 0x03
    390e:	08 c0       	rjmp	.+16     	; 0x3920 <ProcessInput+0xcae>
                    else if (data[3] == 'f') data[3] = 3;
    3910:	86 36       	cpi	r24, 0x66	; 102
    3912:	19 f4       	brne	.+6      	; 0x391a <ProcessInput+0xca8>
    3914:	83 e0       	ldi	r24, 0x03	; 3
    3916:	83 83       	std	Z+3, r24	; 0x03
    3918:	03 c0       	rjmp	.+6      	; 0x3920 <ProcessInput+0xcae>
                    else data[3] = 2;
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	f3 01       	movw	r30, r6
    391e:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    3920:	21 fd       	sbrc	r18, 1
    3922:	04 c0       	rjmp	.+8      	; 0x392c <ProcessInput+0xcba>
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    //uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint8_t  digit[8] = {0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	dc 01       	movw	r26, r24
    392a:	04 c0       	rjmp	.+8      	; 0x3934 <ProcessInput+0xcc2>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e1       	ldi	r26, 0x10	; 16
    3932:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    3934:	20 ff       	sbrs	r18, 0
    3936:	03 c0       	rjmp	.+6      	; 0x393e <ProcessInput+0xccc>
    3938:	9f 5f       	subi	r25, 0xFF	; 255
    393a:	af 4f       	sbci	r26, 0xFF	; 255
    393c:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    393e:	f3 01       	movw	r30, r6
    3940:	23 81       	ldd	r18, Z+3	; 0x03
    3942:	21 fd       	sbrc	r18, 1
    3944:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    3946:	20 ff       	sbrs	r18, 0
    3948:	03 c0       	rjmp	.+6      	; 0x3950 <ProcessInput+0xcde>
    394a:	40 96       	adiw	r24, 0x10	; 16
    394c:	a1 1d       	adc	r26, r1
    394e:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    3950:	31 ff       	sbrs	r19, 1
    3952:	03 c0       	rjmp	.+6      	; 0x395a <ProcessInput+0xce8>
    3954:	90 5f       	subi	r25, 0xF0	; 240
    3956:	af 4f       	sbci	r26, 0xFF	; 255
    3958:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    395a:	30 ff       	sbrs	r19, 0
    395c:	03 c0       	rjmp	.+6      	; 0x3964 <ProcessInput+0xcf2>
    395e:	01 96       	adiw	r24, 0x01	; 1
    3960:	a1 1d       	adc	r26, r1
    3962:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    3964:	40 91 43 38 	lds	r20, 0x3843	; 0x803843 <whoami>
    3968:	24 e0       	ldi	r18, 0x04	; 4
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	24 1b       	sub	r18, r20
    396e:	31 09       	sbc	r19, r1
    3970:	04 c0       	rjmp	.+8      	; 0x397a <ProcessInput+0xd08>
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	aa 1f       	adc	r26, r26
    3978:	bb 1f       	adc	r27, r27
    397a:	2a 95       	dec	r18
    397c:	d2 f7       	brpl	.-12     	; 0x3972 <ProcessInput+0xd00>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    397e:	28 ec       	ldi	r18, 0xC8	; 200
    3980:	34 e7       	ldi	r19, 0x74	; 116
    3982:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    3986:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    398a:	20 e2       	ldi	r18, 0x20	; 32
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	20 93 63 39 	sts	0x3963, r18	; 0x803963 <reactStr+0x42>
    3992:	30 93 64 39 	sts	0x3964, r19	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3996:	21 e0       	ldi	r18, 0x01	; 1
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	20 93 a3 39 	sts	0x39A3, r18	; 0x8039a3 <reactStr+0x82>
    399e:	30 93 a4 39 	sts	0x39A4, r19	; 0x8039a4 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    39a2:	4d e9       	ldi	r20, 0x9D	; 157
    39a4:	54 e7       	ldi	r21, 0x74	; 116
    39a6:	40 93 25 39 	sts	0x3925, r20	; 0x803925 <reactStr+0x4>
    39aa:	50 93 26 39 	sts	0x3926, r21	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    39ae:	42 e0       	ldi	r20, 0x02	; 2
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	40 93 65 39 	sts	0x3965, r20	; 0x803965 <reactStr+0x44>
    39b6:	50 93 66 39 	sts	0x3966, r21	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    39ba:	20 93 a5 39 	sts	0x39A5, r18	; 0x8039a5 <reactStr+0x84>
    39be:	30 93 a6 39 	sts	0x39A6, r19	; 0x8039a6 <reactStr+0x85>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39c2:	07 e0       	ldi	r16, 0x07	; 7
                        digit[n] = answer % 16;
    39c4:	f7 01       	movw	r30, r14
    39c6:	e0 0f       	add	r30, r16
    39c8:	f1 1d       	adc	r31, r1
    39ca:	28 2f       	mov	r18, r24
    39cc:	2f 70       	andi	r18, 0x0F	; 15
    39ce:	20 83       	st	Z, r18
                        answer /= 16;
    39d0:	44 e0       	ldi	r20, 0x04	; 4
    39d2:	b6 95       	lsr	r27
    39d4:	a7 95       	ror	r26
    39d6:	97 95       	ror	r25
    39d8:	87 95       	ror	r24
    39da:	4a 95       	dec	r20
    39dc:	d1 f7       	brne	.-12     	; 0x39d2 <ProcessInput+0xd60>
                        if (answer == 0) break;
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	a1 05       	cpc	r26, r1
    39e2:	b1 05       	cpc	r27, r1
    39e4:	49 f4       	brne	.+18     	; 0x39f8 <ProcessInput+0xd86>
    39e6:	21 e2       	ldi	r18, 0x21	; 33
    39e8:	c2 2e       	mov	r12, r18
    39ea:	29 e3       	ldi	r18, 0x39	; 57
    39ec:	d2 2e       	mov	r13, r18
    39ee:	13 e0       	ldi	r17, 0x03	; 3
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    39f0:	aa 24       	eor	r10, r10
    39f2:	a3 94       	inc	r10
    39f4:	b1 2c       	mov	r11, r1
    39f6:	02 c0       	rjmp	.+4      	; 0x39fc <ProcessInput+0xd8a>

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    SetResponse(elements++, A_HEXPREFIX, L_HEXPREFIX, TEASER);
                    
                    //Set up sending out number
                    for (n=7; n>=0; --n) {
    39f8:	01 50       	subi	r16, 0x01	; 1
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }
    39fa:	e4 cf       	rjmp	.-56     	; 0x39c4 <ProcessInput+0xd52>
    39fc:	b2 e0       	ldi	r27, 0x02	; 2
    39fe:	cb 0e       	add	r12, r27
    3a00:	d1 1c       	adc	r13, r1

                    for (; n<8; ++n) {
    3a02:	08 30       	cpi	r16, 0x08	; 8
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <ProcessInput+0xd96>
    3a06:	9e c0       	rjmp	.+316    	; 0x3b44 <ProcessInput+0xed2>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    3a08:	1f 5f       	subi	r17, 0xFF	; 255
    3a0a:	f7 01       	movw	r30, r14
    3a0c:	e0 0f       	add	r30, r16
    3a0e:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a10:	80 81       	ld	r24, Z
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	83 57       	subi	r24, 0x73	; 115
    3a16:	9b 48       	sbci	r25, 0x8B	; 139
    3a18:	d6 01       	movw	r26, r12
    3a1a:	14 96       	adiw	r26, 0x04	; 4
    3a1c:	8d 93       	st	X+, r24
    3a1e:	9c 93       	st	X, r25
    3a20:	15 97       	sbiw	r26, 0x05	; 5
    reactStr[1][number]=length;
    3a22:	f6 01       	movw	r30, r12
    3a24:	ec 5b       	subi	r30, 0xBC	; 188
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	a0 82       	st	Z, r10
    3a2a:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    3a2c:	e0 5c       	subi	r30, 0xC0	; 192
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	a0 82       	st	Z, r10
    3a32:	b1 82       	std	Z+1, r11	; 0x01
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    3a34:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0xa>
    3a38:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
                        digit[n] = answer % 16;
                        answer /= 16;
                        if (answer == 0) break;
                    }

                    for (; n<8; ++n) {
    3a3c:	0f 5f       	subi	r16, 0xFF	; 255
    3a3e:	de cf       	rjmp	.-68     	; 0x39fc <ProcessInput+0xd8a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a40:	88 ee       	ldi	r24, 0xE8	; 232
    3a42:	94 e7       	ldi	r25, 0x74	; 116
    3a44:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3a48:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3a4c:	8d e3       	ldi	r24, 0x3D	; 61
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3a54:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    3a60:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
    3a64:	6e c0       	rjmp	.+220    	; 0x3b42 <ProcessInput+0xed0>
    3a66:	e0 91 34 38 	lds	r30, 0x3834	; 0x803834 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	ee 0f       	add	r30, r30
    3a6e:	ff 1f       	adc	r31, r31
    3a70:	ed 51       	subi	r30, 0x1D	; 29
    3a72:	f6 4c       	sbci	r31, 0xC6	; 198
    3a74:	60 ee       	ldi	r22, 0xE0	; 224
    3a76:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    3a78:	81 30       	cpi	r24, 0x01	; 1
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <ProcessInput+0xe0c>
    3a7c:	46 c0       	rjmp	.+140    	; 0x3b0a <ProcessInput+0xe98>
                PopulateObject(route[currDepth+1], &actObj1);
    3a7e:	80 81       	ld	r24, Z
    3a80:	91 81       	ldd	r25, Z+1	; 0x01
    3a82:	0e 94 e5 11 	call	0x23ca	; 0x23ca <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    3a86:	80 91 e7 38 	lds	r24, 0x38E7	; 0x8038e7 <actObj1.3989+0x7>
    3a8a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <CheckState>
    3a8e:	88 23       	and	r24, r24
    3a90:	01 f1       	breq	.+64     	; 0x3ad2 <ProcessInput+0xe60>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    3a92:	80 91 06 39 	lds	r24, 0x3906	; 0x803906 <actObj1.3989+0x26>
    3a96:	90 91 07 39 	lds	r25, 0x3907	; 0x803907 <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3a9a:	20 91 f8 38 	lds	r18, 0x38F8	; 0x8038f8 <actObj1.3989+0x18>
    3a9e:	30 91 f9 38 	lds	r19, 0x38F9	; 0x8038f9 <actObj1.3989+0x19>
    3aa2:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    3aa6:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3aaa:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3aae:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3ab2:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    3ab6:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3aba:	80 91 0a 39 	lds	r24, 0x390A	; 0x80390a <actObj1.3989+0x2a>
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3ac4:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3ac8:	80 91 ea 38 	lds	r24, 0x38EA	; 0x8038ea <actObj1.3989+0xa>
    3acc:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
    3ad0:	38 c0       	rjmp	.+112    	; 0x3b42 <ProcessInput+0xed0>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    3ad2:	80 91 04 39 	lds	r24, 0x3904	; 0x803904 <actObj1.3989+0x24>
    3ad6:	90 91 05 39 	lds	r25, 0x3905	; 0x803905 <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ada:	20 91 f6 38 	lds	r18, 0x38F6	; 0x8038f6 <actObj1.3989+0x16>
    3ade:	30 91 f7 38 	lds	r19, 0x38F7	; 0x8038f7 <actObj1.3989+0x17>
    3ae2:	20 93 23 39 	sts	0x3923, r18	; 0x803923 <reactStr+0x2>
    3ae6:	30 93 24 39 	sts	0x3924, r19	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3aea:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3aee:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3af2:	10 92 a3 39 	sts	0x39A3, r1	; 0x8039a3 <reactStr+0x82>
    3af6:	10 92 a4 39 	sts	0x39A4, r1	; 0x8039a4 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3afa:	80 91 09 39 	lds	r24, 0x3909	; 0x803909 <actObj1.3989+0x29>
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <effect>
    3b04:	90 93 41 38 	sts	0x3841, r25	; 0x803841 <effect+0x1>
    3b08:	1c c0       	rjmp	.+56     	; 0x3b42 <ProcessInput+0xed0>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3b0a:	80 81       	ld	r24, Z
    3b0c:	91 81       	ldd	r25, Z+1	; 0x01
    3b0e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b12:	80 e6       	ldi	r24, 0x60	; 96
    3b14:	98 e7       	ldi	r25, 0x78	; 120
    3b16:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3b1a:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3b1e:	8d e4       	ldi	r24, 0x4D	; 77
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3b26:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    3b32:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
                PunishmentTime = getClock();
    3b36:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <getClock>
    3b3a:	80 93 0d 39 	sts	0x390D, r24	; 0x80390d <PunishmentTime>
    3b3e:	90 93 0e 39 	sts	0x390E, r25	; 0x80390e <PunishmentTime+0x1>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3b42:	12 e0       	ldi	r17, 0x02	; 2
                PunishmentTime = getClock();
            }
            specialInput[0] = 0;
    3b44:	10 92 10 39 	sts	0x3910, r1	; 0x803910 <specialInput>

        }
                    
        //Input handled
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    3b48:	80 91 10 39 	lds	r24, 0x3910	; 0x803910 <specialInput>
    3b4c:	88 23       	and	r24, r24
    3b4e:	19 f0       	breq	.+6      	; 0x3b56 <ProcessInput+0xee4>
    3b50:	10 93 20 39 	sts	0x3920, r17	; 0x803920 <responseList>
    3b54:	8b c0       	rjmp	.+278    	; 0x3c6c <ProcessInput+0xffa>
    3b56:	81 2f       	mov	r24, r17
    3b58:	01 c0       	rjmp	.+2      	; 0x3b5c <ProcessInput+0xeea>

    } else {

        responseList = SetStandardResponse(1);
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <SetStandardResponse>
    3b60:	80 93 20 39 	sts	0x3920, r24	; 0x803920 <responseList>
    3b64:	83 c0       	rjmp	.+262    	; 0x3c6c <ProcessInput+0xffa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3b66:	81 ed       	ldi	r24, 0xD1	; 209
    3b68:	99 e7       	ldi	r25, 0x79	; 121
    3b6a:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3b6e:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3b72:	8a e1       	ldi	r24, 0x1A	; 26
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	45 c9       	rjmp	.-3446   	; 0x2e02 <ProcessInput+0x190>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3b78:	f2 e0       	ldi	r31, 0x02	; 2
    3b7a:	ff 12       	cpse	r15, r31
    3b7c:	ad c8       	rjmp	.-3750   	; 0x2cd8 <ProcessInput+0x66>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    3b7e:	f3 01       	movw	r30, r6
    3b80:	61 81       	ldd	r22, Z+1	; 0x01
    3b82:	0e 94 5e 12 	call	0x24bc	; 0x24bc <CheckLetter>
    3b86:	88 23       	and	r24, r24
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <ProcessInput+0xf1a>
    3b8a:	58 c0       	rjmp	.+176    	; 0x3c3c <ProcessInput+0xfca>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3b8c:	00 e0       	ldi	r16, 0x00	; 0
    3b8e:	10 e0       	ldi	r17, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    3b90:	00 0f       	add	r16, r16
    3b92:	11 1f       	adc	r17, r17
    3b94:	0c 5b       	subi	r16, 0xBC	; 188
    3b96:	17 4c       	sbci	r17, 0xC7	; 199
    3b98:	60 ee       	ldi	r22, 0xE0	; 224
    3b9a:	78 e3       	ldi	r23, 0x38	; 56
    3b9c:	d8 01       	movw	r26, r16
    3b9e:	8d 91       	ld	r24, X+
    3ba0:	9c 91       	ld	r25, X
    3ba2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3ba6:	86 e9       	ldi	r24, 0x96	; 150
    3ba8:	97 e7       	ldi	r25, 0x77	; 119
    3baa:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3bae:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3bb2:	80 e1       	ldi	r24, 0x10	; 16
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	80 93 63 39 	sts	0x3963, r24	; 0x803963 <reactStr+0x42>
    3bba:	90 93 64 39 	sts	0x3964, r25	; 0x803964 <reactStr+0x43>
    reactStr[2][number]=type;
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	80 93 a3 39 	sts	0x39A3, r24	; 0x8039a3 <reactStr+0x82>
    3bc6:	90 93 a4 39 	sts	0x39A4, r25	; 0x8039a4 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    3bca:	20 91 fa 38 	lds	r18, 0x38FA	; 0x8038fa <actObj1.3989+0x1a>
    3bce:	30 91 fb 38 	lds	r19, 0x38FB	; 0x8038fb <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bd2:	40 91 ec 38 	lds	r20, 0x38EC	; 0x8038ec <actObj1.3989+0xc>
    3bd6:	50 91 ed 38 	lds	r21, 0x38ED	; 0x8038ed <actObj1.3989+0xd>
    3bda:	40 93 25 39 	sts	0x3925, r20	; 0x803925 <reactStr+0x4>
    3bde:	50 93 26 39 	sts	0x3926, r21	; 0x803926 <reactStr+0x5>
    reactStr[1][number]=length;
    3be2:	20 93 65 39 	sts	0x3965, r18	; 0x803965 <reactStr+0x44>
    3be6:	30 93 66 39 	sts	0x3966, r19	; 0x803966 <reactStr+0x45>
    reactStr[2][number]=type;
    3bea:	10 92 a5 39 	sts	0x39A5, r1	; 0x8039a5 <reactStr+0x84>
    3bee:	10 92 a6 39 	sts	0x39A6, r1	; 0x8039a6 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3bf2:	29 e5       	ldi	r18, 0x59	; 89
    3bf4:	3a e7       	ldi	r19, 0x7A	; 122
    3bf6:	20 93 27 39 	sts	0x3927, r18	; 0x803927 <reactStr+0x6>
    3bfa:	30 93 28 39 	sts	0x3928, r19	; 0x803928 <reactStr+0x7>
    reactStr[1][number]=length;
    3bfe:	22 e0       	ldi	r18, 0x02	; 2
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	20 93 67 39 	sts	0x3967, r18	; 0x803967 <reactStr+0x46>
    3c06:	30 93 68 39 	sts	0x3968, r19	; 0x803968 <reactStr+0x47>
    reactStr[2][number]=type;
    3c0a:	80 93 a7 39 	sts	0x39A7, r24	; 0x8039a7 <reactStr+0x86>
    3c0e:	90 93 a8 39 	sts	0x39A8, r25	; 0x8039a8 <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c12:	29 e5       	ldi	r18, 0x59	; 89
    3c14:	37 e7       	ldi	r19, 0x77	; 119
    3c16:	20 93 29 39 	sts	0x3929, r18	; 0x803929 <reactStr+0x8>
    3c1a:	30 93 2a 39 	sts	0x392A, r19	; 0x80392a <reactStr+0x9>
    reactStr[1][number]=length;
    3c1e:	2d e3       	ldi	r18, 0x3D	; 61
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	20 93 69 39 	sts	0x3969, r18	; 0x803969 <reactStr+0x48>
    3c26:	30 93 6a 39 	sts	0x396A, r19	; 0x80396a <reactStr+0x49>
    reactStr[2][number]=type;
    3c2a:	80 93 a9 39 	sts	0x39A9, r24	; 0x8039a9 <reactStr+0x88>
    3c2e:	90 93 aa 39 	sts	0x39AA, r25	; 0x8039aa <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    3c32:	f8 01       	movw	r30, r16
    3c34:	10 82       	st	Z, r1
    3c36:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    3c38:	15 e0       	ldi	r17, 0x05	; 5
                            inventory[x] = 0;
                            break;
    3c3a:	86 cf       	rjmp	.-244    	; 0x3b48 <ProcessInput+0xed6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c3c:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <inventory+0x2>
    3c40:	90 91 47 38 	lds	r25, 0x3847	; 0x803847 <inventory+0x3>
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	49 f0       	breq	.+18     	; 0x3c5a <ProcessInput+0xfe8>
                        if (CheckLetter(inventory[x], data[1])) {
    3c48:	f3 01       	movw	r30, r6
    3c4a:	61 81       	ldd	r22, Z+1	; 0x01
    3c4c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <CheckLetter>
    3c50:	88 23       	and	r24, r24
    3c52:	19 f0       	breq	.+6      	; 0x3c5a <ProcessInput+0xfe8>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    3c54:	01 e0       	ldi	r16, 0x01	; 1
    3c56:	10 e0       	ldi	r17, 0x00	; 0
    3c58:	9b cf       	rjmp	.-202    	; 0x3b90 <ProcessInput+0xf1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3c5a:	81 e6       	ldi	r24, 0x61	; 97
    3c5c:	99 e7       	ldi	r25, 0x79	; 121
    3c5e:	80 93 23 39 	sts	0x3923, r24	; 0x803923 <reactStr+0x2>
    3c62:	90 93 24 39 	sts	0x3924, r25	; 0x803924 <reactStr+0x3>
    reactStr[1][number]=length;
    3c66:	81 e2       	ldi	r24, 0x21	; 33
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    } else {

        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3c6a:	cb c8       	rjmp	.-3690   	; 0x2e02 <ProcessInput+0x190>
    3c6c:	f3 01       	movw	r30, r6
    serRxDone = 0;
    3c6e:	10 82       	st	Z, r1
    3c70:	10 92 4a 38 	sts	0x384A, r1	; 0x80384a <serRxDone>
    RXCNT = 0;    
    return 0;
}
    3c74:	1d ba       	out	0x1d, r1	; 29
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	28 96       	adiw	r28, 0x08	; 8
    3c7a:	ee e0       	ldi	r30, 0x0E	; 14
    3c7c:	f3 c0       	rjmp	.+486    	; 0x3e64 <__epilogue_restores__+0x8>

00003c7e <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3c7e:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    uint16_t PunishmentCount;
    
    /* Count down PunishmentTime on WING LEDs */
    if (PunishmentTime != 0) {
    3c80:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <PunishmentTime>
    3c84:	90 91 0e 39 	lds	r25, 0x390E	; 0x80390e <PunishmentTime+0x1>
    3c88:	89 2b       	or	r24, r25
    3c8a:	09 f1       	breq	.+66     	; 0x3cce <TextAdventure+0x50>
        PunishmentCount = getClock();
    3c8c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <getClock>
        if (PunishmentCount < PunishmentTime)
    3c90:	20 91 0d 39 	lds	r18, 0x390D	; 0x80390d <PunishmentTime>
    3c94:	30 91 0e 39 	lds	r19, 0x390E	; 0x80390e <PunishmentTime+0x1>
    3c98:	82 17       	cp	r24, r18
    3c9a:	93 07       	cpc	r25, r19
    3c9c:	08 f4       	brcc	.+2      	; 0x3ca0 <TextAdventure+0x22>
            PunishmentCount += 256 * 60;
    3c9e:	94 5c       	subi	r25, 0xC4	; 196
        PunishmentCount -= PunishmentTime;
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	42 1b       	sub	r20, r18
    3ca4:	53 0b       	sbc	r21, r19
    3ca6:	9a 01       	movw	r18, r20
        if (PunishmentCount > 10) {
    3ca8:	4b 30       	cpi	r20, 0x0B	; 11
    3caa:	51 05       	cpc	r21, r1
    3cac:	30 f0       	brcs	.+12     	; 0x3cba <TextAdventure+0x3c>
            PunishmentTime = 0;
    3cae:	10 92 0d 39 	sts	0x390D, r1	; 0x80390d <PunishmentTime>
    3cb2:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <PunishmentTime+0x1>
            PunishmentCount = 10;
    3cb6:	2a e0       	ldi	r18, 0x0A	; 10
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
        }
        if (gameNow == TEXT ) {
    3cba:	80 91 42 38 	lds	r24, 0x3842	; 0x803842 <gameNow>
    3cbe:	81 11       	cpse	r24, r1
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <TextAdventure+0x50>
            WingBar(10-PunishmentCount,5-PunishmentCount);
    3cc2:	65 e0       	ldi	r22, 0x05	; 5
    3cc4:	62 1b       	sub	r22, r18
    3cc6:	8a e0       	ldi	r24, 0x0A	; 10
    3cc8:	82 1b       	sub	r24, r18
    3cca:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <WingBar>
        }
    }

    //Still sending data to serial?
    if (CheckSend()) return 1;
    3cce:	0e 94 34 13 	call	0x2668	; 0x2668 <CheckSend>
    3cd2:	88 23       	and	r24, r24
    3cd4:	11 f0       	breq	.+4      	; 0x3cda <TextAdventure+0x5c>
    3cd6:	c1 e0       	ldi	r28, 0x01	; 1
    3cd8:	18 c0       	rjmp	.+48     	; 0x3d0a <TextAdventure+0x8c>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3cda:	0e 94 8a 13 	call	0x2714	; 0x2714 <CheckResponse>
    3cde:	c8 2f       	mov	r28, r24
    3ce0:	81 11       	cpse	r24, r1
    3ce2:	f9 cf       	rjmp	.-14     	; 0x3cd6 <TextAdventure+0x58>

    if (PunishmentTime == 0) {
    3ce4:	80 91 0d 39 	lds	r24, 0x390D	; 0x80390d <PunishmentTime>
    3ce8:	90 91 0e 39 	lds	r25, 0x390E	; 0x80390e <PunishmentTime+0x1>
    3cec:	89 2b       	or	r24, r25
    3cee:	69 f4       	brne	.+26     	; 0x3d0a <TextAdventure+0x8c>
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3cf0:	84 e7       	ldi	r24, 0x74	; 116
    3cf2:	98 e3       	ldi	r25, 0x38	; 56
    3cf4:	0e 94 ca 13 	call	0x2794	; 0x2794 <CheckInput>
    3cf8:	c8 2f       	mov	r28, r24
    3cfa:	81 11       	cpse	r24, r1
    3cfc:	05 c0       	rjmp	.+10     	; 0x3d08 <TextAdventure+0x8a>

        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    3cfe:	84 e7       	ldi	r24, 0x74	; 116
    3d00:	98 e3       	ldi	r25, 0x38	; 56
    3d02:	0e 94 39 16 	call	0x2c72	; 0x2c72 <ProcessInput>
    3d06:	01 c0       	rjmp	.+2      	; 0x3d0a <TextAdventure+0x8c>
    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    if (PunishmentTime == 0) {
        //No responses to send, check if there is user input.
        if (CheckInput(&serInput[0])) return 2; 
    3d08:	c2 e0       	ldi	r28, 0x02	; 2
        //Input found, process and save (changes only)
        ProcessInput(&serInput[0]);
    }

    return 0;
}
    3d0a:	8c 2f       	mov	r24, r28
    3d0c:	cf 91       	pop	r28
    3d0e:	08 95       	ret

00003d10 <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    3d10:	0e 94 cc 04 	call	0x998	; 0x998 <Setup>
    LoadGameState();
    3d14:	0e 94 48 0a 	call	0x1490	; 0x1490 <LoadGameState>
    gameState[0]|=1;
    3d18:	80 91 67 3a 	lds	r24, 0x3A67	; 0x803a67 <gameState>
    3d1c:	81 60       	ori	r24, 0x01	; 1
    3d1e:	80 93 67 3a 	sts	0x3A67, r24	; 0x803a67 <gameState>
    SelfTest();
    3d22:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <SelfTest>
            if (adcPhot < 10) UpdateState(116);
            if (adcPhot > 100) UpdateState(128+116);

            dimValueSum -= (dimValueSum>>6);
            dimValueSum += 256;
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3d26:	cf e1       	ldi	r28, 0x1F	; 31
    3d28:	d0 e0       	ldi	r29, 0x00	; 0
    LoadGameState();
    gameState[0]|=1;
    SelfTest();

    while (TRUE) {
        if (GenerateAudio()) {
    3d2a:	0e 94 96 0c 	call	0x192c	; 0x192c <GenerateAudio>
    3d2e:	88 23       	and	r24, r24
    3d30:	e1 f3       	breq	.-8      	; 0x3d2a <main+0x1a>
            lastButtonState = buttonState;
    3d32:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <buttonState>
    3d36:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <lastButtonState>
            buttonState = CheckButtons();
    3d3a:	0e 94 b5 08 	call	0x116a	; 0x116a <CheckButtons>
    3d3e:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <buttonState>
            buttonMark = 0;
    3d42:	10 92 48 38 	sts	0x3848, r1	; 0x803848 <buttonMark>

            if (VREF_CTRLA == 0x12) SelectAuIn(); else SelectTSens();
    3d46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3d4a:	82 31       	cpi	r24, 0x12	; 18
    3d4c:	19 f4       	brne	.+6      	; 0x3d54 <main+0x44>
    3d4e:	0e 94 a6 08 	call	0x114c	; 0x114c <SelectAuIn>
    3d52:	02 c0       	rjmp	.+4      	; 0x3d58 <main+0x48>
    3d54:	0e 94 97 08 	call	0x112e	; 0x112e <SelectTSens>

            GenerateBlinks();
    3d58:	0e 94 2f 0b 	call	0x165e	; 0x165e <GenerateBlinks>

            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3d5c:	90 df       	rcall	.-224    	; 0x3c7e <TextAdventure>

            //Other games & user interaction checks
            MagnetMaze();
    3d5e:	0e 94 cf 03 	call	0x79e	; 0x79e <MagnetMaze>
            LanyardCode();
    3d62:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LanyardCode>
            BastetDictates();
    3d66:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <BastetDictates>
            MakeFriends();
    3d6a:	0e 94 7d 00 	call	0xfa	; 0xfa <MakeFriends>

            //Save progress
            SaveGameState();
    3d6e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <SaveGameState>

            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) UpdateState(116);
    3d72:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <adcPhot>
    3d76:	90 91 c4 3a 	lds	r25, 0x3AC4	; 0x803ac4 <adcPhot+0x1>
    3d7a:	0a 97       	sbiw	r24, 0x0a	; 10
    3d7c:	18 f4       	brcc	.+6      	; 0x3d84 <main+0x74>
    3d7e:	84 e7       	ldi	r24, 0x74	; 116
    3d80:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>
            if (adcPhot > 100) UpdateState(128+116);
    3d84:	80 91 c3 3a 	lds	r24, 0x3AC3	; 0x803ac3 <adcPhot>
    3d88:	90 91 c4 3a 	lds	r25, 0x3AC4	; 0x803ac4 <adcPhot+0x1>
    3d8c:	85 36       	cpi	r24, 0x65	; 101
    3d8e:	91 05       	cpc	r25, r1
    3d90:	18 f0       	brcs	.+6      	; 0x3d98 <main+0x88>
    3d92:	84 ef       	ldi	r24, 0xF4	; 244
    3d94:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UpdateState>

            dimValueSum -= (dimValueSum>>6);
    3d98:	20 91 0a 38 	lds	r18, 0x380A	; 0x80380a <dimValueSum>
    3d9c:	30 91 0b 38 	lds	r19, 0x380B	; 0x80380b <dimValueSum+0x1>
    3da0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3da4:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3da8:	46 e0       	ldi	r20, 0x06	; 6
    3daa:	36 95       	lsr	r19
    3dac:	27 95       	ror	r18
    3dae:	4a 95       	dec	r20
    3db0:	e1 f7       	brne	.-8      	; 0x3daa <main+0x9a>
    3db2:	82 1b       	sub	r24, r18
    3db4:	93 0b       	sbc	r25, r19
    3db6:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dba:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum += 256;
    3dbe:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3dc2:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3dc6:	93 95       	inc	r25
    3dc8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dcc:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValueSum -= QSINE[31-(adcPhot>>7)];
    3dd0:	20 91 c3 3a 	lds	r18, 0x3AC3	; 0x803ac3 <adcPhot>
    3dd4:	30 91 c4 3a 	lds	r19, 0x3AC4	; 0x803ac4 <adcPhot+0x1>
    3dd8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3ddc:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3de0:	22 0f       	add	r18, r18
    3de2:	23 2f       	mov	r18, r19
    3de4:	22 1f       	adc	r18, r18
    3de6:	33 0b       	sbc	r19, r19
    3de8:	31 95       	neg	r19
    3dea:	fe 01       	movw	r30, r28
    3dec:	e2 1b       	sub	r30, r18
    3dee:	f3 0b       	sbc	r31, r19
    3df0:	ea 52       	subi	r30, 0x2A	; 42
    3df2:	f1 44       	sbci	r31, 0x41	; 65
    3df4:	20 81       	ld	r18, Z
    3df6:	82 1b       	sub	r24, r18
    3df8:	91 09       	sbc	r25, r1
    3dfa:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <dimValueSum>
    3dfe:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <dimValueSum+0x1>
            dimValue     = dimValueSum>>6;
    3e02:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <dimValueSum>
    3e06:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <dimValueSum+0x1>
    3e0a:	66 e0       	ldi	r22, 0x06	; 6
    3e0c:	96 95       	lsr	r25
    3e0e:	87 95       	ror	r24
    3e10:	6a 95       	dec	r22
    3e12:	e1 f7       	brne	.-8      	; 0x3e0c <main+0xfc>
    3e14:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <dimValue>

            //Check temperature
            HotSummer();
    3e18:	0e 94 75 0a 	call	0x14ea	; 0x14ea <HotSummer>
    3e1c:	86 cf       	rjmp	.-244    	; 0x3d2a <main+0x1a>

00003e1e <__tablejump2__>:
    3e1e:	ee 0f       	add	r30, r30
    3e20:	ff 1f       	adc	r31, r31
    3e22:	05 90       	lpm	r0, Z+
    3e24:	f4 91       	lpm	r31, Z
    3e26:	e0 2d       	mov	r30, r0
    3e28:	09 94       	ijmp

00003e2a <__prologue_saves__>:
    3e2a:	2f 92       	push	r2
    3e2c:	3f 92       	push	r3
    3e2e:	4f 92       	push	r4
    3e30:	5f 92       	push	r5
    3e32:	6f 92       	push	r6
    3e34:	7f 92       	push	r7
    3e36:	8f 92       	push	r8
    3e38:	9f 92       	push	r9
    3e3a:	af 92       	push	r10
    3e3c:	bf 92       	push	r11
    3e3e:	cf 92       	push	r12
    3e40:	df 92       	push	r13
    3e42:	ef 92       	push	r14
    3e44:	ff 92       	push	r15
    3e46:	0f 93       	push	r16
    3e48:	1f 93       	push	r17
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    3e52:	ca 1b       	sub	r28, r26
    3e54:	db 0b       	sbc	r29, r27
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	09 94       	ijmp

00003e5c <__epilogue_restores__>:
    3e5c:	2a 88       	ldd	r2, Y+18	; 0x12
    3e5e:	39 88       	ldd	r3, Y+17	; 0x11
    3e60:	48 88       	ldd	r4, Y+16	; 0x10
    3e62:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e64:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e66:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e68:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e6e:	b9 84       	ldd	r11, Y+9	; 0x09
    3e70:	c8 84       	ldd	r12, Y+8	; 0x08
    3e72:	df 80       	ldd	r13, Y+7	; 0x07
    3e74:	ee 80       	ldd	r14, Y+6	; 0x06
    3e76:	fd 80       	ldd	r15, Y+5	; 0x05
    3e78:	0c 81       	ldd	r16, Y+4	; 0x04
    3e7a:	1b 81       	ldd	r17, Y+3	; 0x03
    3e7c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e7e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e80:	ce 0f       	add	r28, r30
    3e82:	d1 1d       	adc	r29, r1
    3e84:	cd bf       	out	0x3d, r28	; 61
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	ed 01       	movw	r28, r26
    3e8a:	08 95       	ret

00003e8c <_exit>:
    3e8c:	f8 94       	cli

00003e8e <__stop_program>:
    3e8e:	ff cf       	rjmp	.-2      	; 0x3e8e <__stop_program>
