
ISR_IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00803800  00003610  000036c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003536  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000da  0000b536  00003536  000035ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000002e3  00803828  00803828  000036ec  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002e0  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000634e  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002648  00000000  00000000  00009d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033e7  00000000  00000000  0000c3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008ac  00000000  00000000  0000f7bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018dd  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000040b0  00000000  00000000  00011945  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000350  00000000  00000000  000159f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c6       	rjmp	.+3386   	; 0xd54 <__vector_6>
      1a:	00 00       	nop
      1c:	e5 c6       	rjmp	.+3530   	; 0xde8 <__vector_7>
      1e:	00 00       	nop
      20:	d0 c4       	rjmp	.+2464   	; 0x9c2 <__vector_8>
      22:	00 00       	nop
      24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
      32:	00 00       	nop
      34:	17 c5       	rjmp	.+2606   	; 0xa64 <__vector_13>
      36:	00 00       	nop
      38:	48 c5       	rjmp	.+2704   	; 0xaca <__vector_14>
      3a:	00 00       	nop
      3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c6       	rjmp	.+3084   	; 0xc5e <__vector_20>
      52:	00 00       	nop
      54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c6       	rjmp	.+3178   	; 0xcc4 <__vector_22>
      5a:	00 00       	nop
      5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c5       	rjmp	.+2818   	; 0xb70 <__vector_27>
      6e:	00 00       	nop
      70:	da c5       	rjmp	.+2996   	; 0xc26 <__vector_28>
      72:	00 00       	nop
      74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
	...

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e0 e1       	ldi	r30, 0x10	; 16
      90:	f6 e3       	ldi	r31, 0x36	; 54
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 32       	cpi	r26, 0x28	; 40
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	2b e3       	ldi	r18, 0x3B	; 59
      a0:	a8 e2       	ldi	r26, 0x28	; 40
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 30       	cpi	r26, 0x0B	; 11
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 b5 19 	call	0x336a	; 0x336a <main>
      b2:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <_exit>

000000b6 <__bad_interrupt>:
      b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <MakeFriends>:
    
    //
    
      
    return 0;
}
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	08 95       	ret

000000bc <I2C_init>:
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
      c2:	e6 e2       	ldi	r30, 0x26	; 38
      c4:	f4 e0       	ldi	r31, 0x04	; 4
      c6:	80 83       	st	Z, r24
      c8:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__TEXT_REGION_LENGTH__+0x700430>
      cc:	a1 e2       	ldi	r26, 0x21	; 33
      ce:	b4 e0       	ldi	r27, 0x04	; 4
      d0:	92 e0       	ldi	r25, 0x02	; 2
      d2:	9c 93       	st	X, r25
      d4:	90 83       	st	Z, r25
      d6:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <__TEXT_REGION_LENGTH__+0x700431>
      da:	e0 e1       	ldi	r30, 0x10	; 16
      dc:	f8 e0       	ldi	r31, 0x08	; 8
      de:	97 e0       	ldi	r25, 0x07	; 7
      e0:	96 83       	std	Z+6, r25	; 0x06
      e2:	98 e0       	ldi	r25, 0x08	; 8
      e4:	94 83       	std	Z+4, r25	; 0x04
      e6:	83 83       	std	Z+3, r24	; 0x03
      e8:	8c 93       	st	X, r24
      ea:	85 81       	ldd	r24, Z+5	; 0x05
      ec:	81 60       	ori	r24, 0x01	; 1
      ee:	85 83       	std	Z+5, r24	; 0x05
      f0:	85 81       	ldd	r24, Z+5	; 0x05
      f2:	84 6c       	ori	r24, 0xC4	; 196
      f4:	85 83       	std	Z+5, r24	; 0x05
      f6:	08 95       	ret

000000f8 <I2C_recover>:
      f8:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
      fc:	88 60       	ori	r24, 0x08	; 8
      fe:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     102:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     10c:	99 e0       	ldi	r25, 0x09	; 9
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	20 93 21 04 	sts	0x0421, r18	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     116:	30 e1       	ldi	r19, 0x10	; 16
     118:	3a 95       	dec	r19
     11a:	f1 f7       	brne	.-4      	; 0x118 <I2C_recover+0x20>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <I2C_recover+0x26>
     11e:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <__TEXT_REGION_LENGTH__+0x700422>
     122:	30 e1       	ldi	r19, 0x10	; 16
     124:	3a 95       	dec	r19
     126:	f1 f7       	brne	.-4      	; 0x124 <I2C_recover+0x2c>
     128:	00 c0       	rjmp	.+0      	; 0x12a <I2C_recover+0x32>
     12a:	91 50       	subi	r25, 0x01	; 1
     12c:	89 f7       	brne	.-30     	; 0x110 <I2C_recover+0x18>
     12e:	28 e0       	ldi	r18, 0x08	; 8
     130:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     134:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     13e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     142:	91 60       	ori	r25, 0x01	; 1
     144:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     148:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     14c:	94 6c       	ori	r25, 0xC4	; 196
     14e:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     152:	20 93 14 08 	sts	0x0814, r18	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     156:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <__TEXT_REGION_LENGTH__+0x700813>
     15a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
     15e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     162:	81 60       	ori	r24, 0x01	; 1
     164:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     168:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     16c:	84 6c       	ori	r24, 0xC4	; 196
     16e:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     172:	08 95       	ret

00000174 <I2C_start>:
     174:	28 2f       	mov	r18, r24
     176:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     17a:	90 6c       	ori	r25, 0xC0	; 192
     17c:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     180:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     184:	89 2f       	mov	r24, r25
     186:	84 70       	andi	r24, 0x04	; 4
     188:	92 fd       	sbrc	r25, 2
     18a:	03 c0       	rjmp	.+6      	; 0x192 <I2C_start+0x1e>
     18c:	20 93 17 08 	sts	0x0817, r18	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
     190:	08 95       	ret
     192:	84 e0       	ldi	r24, 0x04	; 4
     194:	08 95       	ret

00000196 <I2C_wait_ACK>:
     196:	8c e0       	ldi	r24, 0x0C	; 12
     198:	80 93 39 3a 	sts	0x3A39, r24	; 0x803a39 <timeout_I2C>
     19c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a0:	87 fd       	sbrc	r24, 7
     1a2:	0a c0       	rjmp	.+20     	; 0x1b8 <I2C_wait_ACK+0x22>
     1a4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1a8:	86 fd       	sbrc	r24, 6
     1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <I2C_wait_ACK+0x22>
     1ac:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <timeout_I2C>
     1b0:	81 11       	cpse	r24, r1
     1b2:	f4 cf       	rjmp	.-24     	; 0x19c <I2C_wait_ACK+0x6>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	08 95       	ret
     1b8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1bc:	80 6c       	ori	r24, 0xC0	; 192
     1be:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1c6:	82 fd       	sbrc	r24, 2
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <I2C_wait_ACK+0x46>
     1ca:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1ce:	83 fd       	sbrc	r24, 3
     1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <I2C_wait_ACK+0x4a>
     1d2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1d6:	82 95       	swap	r24
     1d8:	81 70       	andi	r24, 0x01	; 1
     1da:	08 95       	ret
     1dc:	84 e0       	ldi	r24, 0x04	; 4
     1de:	08 95       	ret
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	08 95       	ret

000001e4 <I2C_read>:
}

uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
     1e4:	fc 01       	movw	r30, r24
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
     1e6:	8c e0       	ldi	r24, 0x0C	; 12
     1e8:	80 93 39 3a 	sts	0x3A39, r24	; 0x803a39 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     1ec:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     1f0:	89 2f       	mov	r24, r25
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	82 30       	cpi	r24, 0x02	; 2
     1f6:	11 f0       	breq	.+4      	; 0x1fc <I2C_read+0x18>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
     1f8:	88 e0       	ldi	r24, 0x08	; 8
     1fa:	08 95       	ret
uint8_t	I2C_read(uint8_t *data, uint8_t ack_flag)					// read data, ack_flag 0: send ACK, 1: send NACK, returns status
{
	timeout_I2C = READ_TIMEOUT;										// reset timeout counter, will be decremented by LED matrix interrupt
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{		
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
     1fc:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     200:	97 fd       	sbrc	r25, 7
     202:	06 c0       	rjmp	.+12     	; 0x210 <I2C_read+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     204:	90 91 39 3a 	lds	r25, 0x3A39	; 0x803a39 <timeout_I2C>
     208:	91 11       	cpse	r25, r1
     20a:	f8 cf       	rjmp	.-16     	; 0x1fc <I2C_read+0x18>
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	08 95       	ret
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
     210:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     214:	90 6c       	ori	r25, 0xC0	; 192
     216:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     21a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     21e:	92 fd       	sbrc	r25, 2
     220:	1e c0       	rjmp	.+60     	; 0x25e <I2C_read+0x7a>
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
     222:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     226:	93 fd       	sbrc	r25, 3
     228:	1d c0       	rjmp	.+58     	; 0x264 <I2C_read+0x80>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     22a:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     22e:	89 2f       	mov	r24, r25
     230:	80 71       	andi	r24, 0x10	; 16
     232:	94 fd       	sbrc	r25, 4
     234:	16 c0       	rjmp	.+44     	; 0x262 <I2C_read+0x7e>
		if (ack_flag == 0) TWI0.MCTRLB &= ~(1 << TWI_ACKACT_bp);	// setup ACK
     236:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     23a:	61 11       	cpse	r22, r1
     23c:	02 c0       	rjmp	.+4      	; 0x242 <I2C_read+0x5e>
     23e:	9b 7f       	andi	r25, 0xFB	; 251
     240:	01 c0       	rjmp	.+2      	; 0x244 <I2C_read+0x60>
		else		TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;				// setup NACK (last byte read)
     242:	94 60       	ori	r25, 0x04	; 4
     244:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
		*data = TWI0.MDATA;
     248:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
     24c:	90 83       	st	Z, r25
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
     24e:	61 11       	cpse	r22, r1
     250:	09 c0       	rjmp	.+18     	; 0x264 <I2C_read+0x80>
     252:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     256:	92 60       	ori	r25, 0x02	; 2
     258:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <__TEXT_REGION_LENGTH__+0x700814>
     25c:	08 95       	ret
		while (!(TWI0.MSTATUS & TWI_RIF_bm))						// wait for RIF set (data byte received)
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		TWI0.MSTATUS |= (TWI_RIF_bm | TWI_WIF_bm);					// clear Read and Write interrupt flags	
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	08 95       	ret
		if (TWI0.MSTATUS & TWI_ARBLOST_bm) return 2;				// Arbitration Lost, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort				
     262:	81 e0       	ldi	r24, 0x01	; 1
		*data = TWI0.MDATA;
		if (ack_flag == 0) TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;	// send ACK, more bytes to follow					
		return 0;
	}
	else return 8;													// master does not control bus
}
     264:	08 95       	ret

00000266 <I2C_write>:

uint8_t I2C_write(uint8_t *data)									// write data, return status
{
     266:	fc 01       	movw	r30, r24
	timeout_I2C = WRITE_TIMEOUT;									// reset timeout counter, will be decremented by LED matrix interrupt
     268:	8c e0       	ldi	r24, 0x0C	; 12
     26a:	80 93 39 3a 	sts	0x3A39, r24	; 0x803a39 <timeout_I2C>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
     26e:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     272:	93 70       	andi	r25, 0x03	; 3
     274:	92 30       	cpi	r25, 0x02	; 2
     276:	b1 f4       	brne	.+44     	; 0x2a4 <I2C_write+0x3e>
	{
		TWI0.MDATA = *data;		
     278:	80 81       	ld	r24, Z
     27a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
     27e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     282:	86 fd       	sbrc	r24, 6
     284:	06 c0       	rjmp	.+12     	; 0x292 <I2C_write+0x2c>
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     286:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <timeout_I2C>
     28a:	81 11       	cpse	r24, r1
     28c:	f8 cf       	rjmp	.-16     	; 0x27e <I2C_write+0x18>
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     292:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
     296:	82 fd       	sbrc	r24, 2
     298:	07 c0       	rjmp	.+14     	; 0x2a8 <I2C_write+0x42>
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
     29a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
	if ((TWI0.MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_OWNER_gc)	// if master controls bus
	{
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
     29e:	82 95       	swap	r24
     2a0:	81 70       	andi	r24, 0x01	; 1
     2a2:	08 95       	ret
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	08 95       	ret
		TWI0.MDATA = *data;		
		while (!(TWI0.MSTATUS & TWI_WIF_bm))						// wait until WIF set, status register contains ACK/NACK bit
		{
			if (!(timeout_I2C)) return 0xff;			            // return timeout error
		}
		if (TWI0.MSTATUS & TWI_BUSERR_bm) return 4;					// Bus Error, abort
     2a8:	84 e0       	ldi	r24, 0x04	; 4
		if (TWI0.MSTATUS & TWI_RXACK_bm) return 1;					// Slave replied with NACK, abort
		return 0;													// no error	
	}
	else return 8;													// master does not control bus
}
     2aa:	08 95       	ret

000002ac <I2C_stop>:

void I2C_stop()
{
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     2ac:	e0 e1       	ldi	r30, 0x10	; 16
     2ae:	f8 e0       	ldi	r31, 0x08	; 8
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
     2b2:	83 60       	ori	r24, 0x03	; 3
     2b4:	84 83       	std	Z+4, r24	; 0x04
     2b6:	08 95       	ret

000002b8 <I2C_read_bytes>:
// addr_ptr		address of first array element to transfer
// slave reg	starting slave register
// num_bytes	number of bytes to transfer

uint8_t	I2C_read_bytes(uint8_t slave_addr, uint8_t *reg_ptr, uint8_t reg_len, uint8_t *dat_ptr, uint8_t dat_len)
{
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	6b 01       	movw	r12, r22
     2c8:	f4 2e       	mov	r15, r20
     2ca:	e9 01       	movw	r28, r18
	uint8_t status;
	if (dat_len > MAX_LEN) dat_len = MAX_LEN;
	status = I2C_start(slave_addr << 1);							// slave write address, LSB 0
     2cc:	18 2f       	mov	r17, r24
     2ce:	11 0f       	add	r17, r17
     2d0:	81 2f       	mov	r24, r17
     2d2:	50 df       	rcall	.-352    	; 0x174 <I2C_start>
	if (status != 0) goto error;
     2d4:	81 11       	cpse	r24, r1
	status = I2C_wait_ACK();										// wait for slave ACK
     2d6:	2b c0       	rjmp	.+86     	; 0x32e <I2C_read_bytes+0x76>
     2d8:	5e df       	rcall	.-324    	; 0x196 <I2C_wait_ACK>
	if (status == 1) {
     2da:	81 30       	cpi	r24, 0x01	; 1
		I2C_stop();													// NACK, abort
     2dc:	19 f4       	brne	.+6      	; 0x2e4 <I2C_read_bytes+0x2c>
     2de:	e6 df       	rcall	.-52     	; 0x2ac <I2C_stop>
		return 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	27 c0       	rjmp	.+78     	; 0x332 <I2C_read_bytes+0x7a>
	}
	if (status != 0) goto error;
     2e4:	81 11       	cpse	r24, r1
     2e6:	23 c0       	rjmp	.+70     	; 0x32e <I2C_read_bytes+0x76>
    while(reg_len > 0){
     2e8:	ff 20       	and	r15, r15
	    status = I2C_write(reg_ptr);    							// send slave start register
     2ea:	49 f0       	breq	.+18     	; 0x2fe <I2C_read_bytes+0x46>
     2ec:	c6 01       	movw	r24, r12
     2ee:	bb df       	rcall	.-138    	; 0x266 <I2C_write>
	    if (status != 0) goto error;
     2f0:	81 11       	cpse	r24, r1
     2f2:	1d c0       	rjmp	.+58     	; 0x32e <I2C_read_bytes+0x76>
        ++reg_ptr;
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	c8 1a       	sub	r12, r24
     2f8:	d8 0a       	sbc	r13, r24
        --reg_len;
     2fa:	fa 94       	dec	r15
     2fc:	f5 cf       	rjmp	.-22     	; 0x2e8 <I2C_read_bytes+0x30>
     2fe:	01 34       	cpi	r16, 0x41	; 65
     300:	08 f0       	brcs	.+2      	; 0x304 <I2C_read_bytes+0x4c>
     302:	00 e4       	ldi	r16, 0x40	; 64
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
     304:	1f 5f       	subi	r17, 0xFF	; 255
// the Atmel device documentation mentions a special command for repeated start TWI_MCMD_REPSTART_gc,
// but this is not used in Atmel's demo code, so we don't use it either

void I2C_rep_start(uint8_t shifted_addr)						    // send repeated start, device_addr + LSB set if READ
{
	TWI0.MADDR = shifted_addr;	
     306:	10 93 17 08 	sts	0x0817, r17	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	    if (status != 0) goto error;
        ++reg_ptr;
        --reg_len;
    }
	I2C_rep_start((slave_addr << 1) + 1);							// slave read address, LSB 1
	while (dat_len > 1) {
     30a:	02 30       	cpi	r16, 0x02	; 2
		status = I2C_read(dat_ptr, 0);								// first bytes, send ACK
     30c:	40 f0       	brcs	.+16     	; 0x31e <I2C_read_bytes+0x66>
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	ce 01       	movw	r24, r28
     312:	68 df       	rcall	.-304    	; 0x1e4 <I2C_read>
		if (status != 0) goto error;
     314:	81 11       	cpse	r24, r1
     316:	0b c0       	rjmp	.+22     	; 0x32e <I2C_read_bytes+0x76>
		++dat_ptr;
		--dat_len;
     318:	21 96       	adiw	r28, 0x01	; 1
     31a:	01 50       	subi	r16, 0x01	; 1
	}
	status = I2C_read(dat_ptr, 1);									// single or last byte, send NACK
     31c:	f6 cf       	rjmp	.-20     	; 0x30a <I2C_read_bytes+0x52>
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	ce 01       	movw	r24, r28
	if (status != 0) goto error;
     322:	60 df       	rcall	.-320    	; 0x1e4 <I2C_read>
     324:	81 11       	cpse	r24, r1
	I2C_stop();
     326:	03 c0       	rjmp	.+6      	; 0x32e <I2C_read_bytes+0x76>
     328:	c1 df       	rcall	.-126    	; 0x2ac <I2C_stop>
	return 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	02 c0       	rjmp	.+4      	; 0x332 <I2C_read_bytes+0x7a>
	
error:
	I2C_recover();													// clock out possibly stuck slave, reset master
     32e:	e4 de       	rcall	.-568    	; 0xf8 <I2C_recover>
     330:	8f ef       	ldi	r24, 0xFF	; 255
	return 0xff;													// flag error
     332:	df 91       	pop	r29
}
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	df 90       	pop	r13
     33e:	cf 90       	pop	r12
     340:	08 95       	ret

00000342 <LanyardCode>:
     342:	cf 93       	push	r28
uint8_t         lastButtonState = 0xff;
uint8_t         digit = 0xff;

// Main game loop
uint8_t LanyardCode(){
    if (CheckState(LANYARD_COMPLETED)) {
     344:	8b e7       	ldi	r24, 0x7B	; 123
     346:	45 d7       	rcall	.+3722   	; 0x11d2 <CheckState>
     348:	81 11       	cpse	r24, r1
     34a:	f0 c0       	rjmp	.+480    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        }
        */
        return 0;
    }

    if ( gameNow != TEXT && gameNow != LANYARD )
     34c:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     350:	88 23       	and	r24, r24
     352:	19 f0       	breq	.+6      	; 0x35a <LanyardCode+0x18>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	09 f0       	breq	.+2      	; 0x35a <LanyardCode+0x18>
     358:	e9 c0       	rjmp	.+466    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        return 0;

    /* activate led for buttonstate */
    iLED[SCARAB[G]] = (buttonState==0xff ? 0 : dimValue);
     35a:	c0 91 61 b5 	lds	r28, 0xB561	; 0x80b561 <__bss_end+0x7a56>
     35e:	ec 2f       	mov	r30, r28
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	19 f0       	breq	.+6      	; 0x370 <LanyardCode+0x2e>
     36a:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     36e:	01 c0       	rjmp	.+2      	; 0x372 <LanyardCode+0x30>
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	e5 54       	subi	r30, 0x45	; 69
     374:	f5 4c       	sbci	r31, 0xC5	; 197
     376:	90 83       	st	Z, r25

    if ( (buttonState & 0xf0) == 0)
     378:	98 2f       	mov	r25, r24
     37a:	90 7f       	andi	r25, 0xF0	; 240
     37c:	09 f4       	brne	.+2      	; 0x380 <LanyardCode+0x3e>
     37e:	d6 c0       	rjmp	.+428    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        return 0;

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
     380:	20 91 01 38 	lds	r18, 0x3801	; 0x803801 <lastButtonState>
     384:	98 2f       	mov	r25, r24
     386:	92 27       	eor	r25, r18
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	09 f4       	brne	.+2      	; 0x38e <LanyardCode+0x4c>
     38c:	cf c0       	rjmp	.+414    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        return 0;

    if (lastButtonState == 0xff){
     38e:	2f 3f       	cpi	r18, 0xFF	; 255
     390:	09 f0       	breq	.+2      	; 0x394 <LanyardCode+0x52>
     392:	c8 c0       	rjmp	.+400    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
        switch (buttonState & 0x0f) {
     394:	8f 70       	andi	r24, 0x0F	; 15
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	61 f0       	breq	.+24     	; 0x3b2 <LanyardCode+0x70>
     39a:	28 f4       	brcc	.+10     	; 0x3a6 <LanyardCode+0x64>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	69 f4       	brne	.+26     	; 0x3ba <LanyardCode+0x78>
            case 0b0001: {
                digit = 0;
     3a0:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__data_start>
                break;
     3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <LanyardCode+0x7e>

    if ((buttonState&0x0f) == (lastButtonState&0x0f))
        return 0;

    if (lastButtonState == 0xff){
        switch (buttonState & 0x0f) {
     3a6:	84 30       	cpi	r24, 0x04	; 4
     3a8:	31 f0       	breq	.+12     	; 0x3b6 <LanyardCode+0x74>
     3aa:	88 30       	cpi	r24, 0x08	; 8
     3ac:	31 f4       	brne	.+12     	; 0x3ba <LanyardCode+0x78>
                digit = 3;
                break;
            }

            case 0b1000: {
                digit = 2;
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	05 c0       	rjmp	.+10     	; 0x3bc <LanyardCode+0x7a>
                digit = 0;
                break;
            }

            case 0b0010: {
                digit = 1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc <LanyardCode+0x7a>
                break;
            }

            case 0b0100: {
                digit = 3;
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <LanyardCode+0x7a>
                digit = 2;
                break;
            }

            default: {
                digit = 0xff;
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
                break;
            }
        }
        gameNow = LANYARD;
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <gameNow>
        /* play tone for button */

        if (digit == lanyardCode[lanyardPos]) {
     3c6:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <lanyardPos>
     3ca:	e8 2f       	mov	r30, r24
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ea 5b       	subi	r30, 0xBA	; 186
     3d0:	fa 44       	sbci	r31, 0x4A	; 74
     3d2:	20 81       	ld	r18, Z
     3d4:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
     3d8:	e0 91 5e b5 	lds	r30, 0xB55E	; 0x80b55e <__bss_end+0x7a53>
     3dc:	29 13       	cpse	r18, r25
     3de:	17 c0       	rjmp	.+46     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
            lanyardState &= TRUE;
     3e0:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     3e4:	91 70       	andi	r25, 0x01	; 1
     3e6:	90 93 02 38 	sts	0x3802, r25	; 0x803802 <lanyardState>
            iLED[CAT]       = 128;
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e5 54       	subi	r30, 0x45	; 69
     3ee:	f5 4c       	sbci	r31, 0xC5	; 197
     3f0:	90 e8       	ldi	r25, 0x80	; 128
     3f2:	90 83       	st	Z, r25
            iLED[EYE[R][L]] = 0;
     3f4:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	e5 54       	subi	r30, 0x45	; 69
     3fc:	f5 4c       	sbci	r31, 0xC5	; 197
     3fe:	10 82       	st	Z, r1
            iLED[EYE[R][R]] = 0;
     400:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	e5 54       	subi	r30, 0x45	; 69
     408:	f5 4c       	sbci	r31, 0xC5	; 197
     40a:	10 82       	st	Z, r1
     40c:	13 c0       	rjmp	.+38     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        } else {
            lanyardState = FALSE;
     40e:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <lanyardState>
            iLED[CAT]       = 0;
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	e5 54       	subi	r30, 0x45	; 69
     416:	f5 4c       	sbci	r31, 0xC5	; 197
     418:	10 82       	st	Z, r1
            if (lanyardPos < 4 ) {
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	58 f4       	brcc	.+22     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
                /*gameNow         = BASTET;*/
                gameNow         = TEXT;
     41e:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     422:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardCnt      = 0;
     426:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
                lanyardState    = TRUE;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	7a c0       	rjmp	.+244    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
                return 0;
            }
        }
        lanyardPos++;
     434:	8f 5f       	subi	r24, 0xFF	; 255
     436:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <lanyardPos>
        lanyardCnt++;            
     43a:	90 91 28 38 	lds	r25, 0x3828	; 0x803828 <__data_end>
     43e:	9f 5f       	subi	r25, 0xFF	; 255
        if (lanyardCnt >= 4) {
     440:	94 30       	cpi	r25, 0x04	; 4
     442:	18 f4       	brcc	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
                lastButtonState = 0xff;
                return 0;
            }
        }
        lanyardPos++;
        lanyardCnt++;            
     444:	90 93 28 38 	sts	0x3828, r25	; 0x803828 <__data_end>
     448:	6d c0       	rjmp	.+218    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
        if (lanyardCnt >= 4) {
            lanyardCnt = 0;
     44a:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <__data_end>
            if (lanyardState == TRUE) {
     44e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <lanyardState>
     452:	91 30       	cpi	r25, 0x01	; 1
     454:	a1 f5       	brne	.+104    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
                iLED[HCKR[G][(lanyardPos/4)-1]] = dimValue;
     456:	e8 2f       	mov	r30, r24
     458:	e6 95       	lsr	r30
     45a:	e6 95       	lsr	r30
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	e0 59       	subi	r30, 0x90	; 144
     460:	fa 44       	sbci	r31, 0x4A	; 74
     462:	e5 81       	ldd	r30, Z+5	; 0x05
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     46a:	e5 54       	subi	r30, 0x45	; 69
     46c:	f5 4c       	sbci	r31, 0xC5	; 197
     46e:	90 83       	st	Z, r25
                if (lanyardPos == sizeof(lanyardCode)) {
     470:	88 31       	cpi	r24, 0x18	; 24
     472:	09 f0       	breq	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     474:	57 c0       	rjmp	.+174    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                    UpdateState(LANYARD_COMPLETED);
     476:	8b e7       	ldi	r24, 0x7B	; 123
     478:	a2 d6       	rcall	.+3396   	; 0x11be <UpdateState>
                    iLED[SCARAB[G]] = 0;
     47a:	ec 2f       	mov	r30, r28
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	e5 54       	subi	r30, 0x45	; 69
     480:	f5 4c       	sbci	r31, 0xC5	; 197
     482:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = 0;
     484:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	e5 54       	subi	r30, 0x45	; 69
     48c:	f5 4c       	sbci	r31, 0xC5	; 197
     48e:	10 82       	st	Z, r1
                    iLED[EYE[R][R]] = 0;
     490:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	e5 54       	subi	r30, 0x45	; 69
     498:	f5 4c       	sbci	r31, 0xC5	; 197
     49a:	10 82       	st	Z, r1
                    iLED[EYE[G][L]] = dimValue;
     49c:	e0 91 6f b5 	lds	r30, 0xB56F	; 0x80b56f <__bss_end+0x7a64>
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4a6:	e5 54       	subi	r30, 0x45	; 69
     4a8:	f5 4c       	sbci	r31, 0xC5	; 197
     4aa:	80 83       	st	Z, r24
                    iLED[EYE[G][R]] = dimValue;
     4ac:	e0 91 6e b5 	lds	r30, 0xB56E	; 0x80b56e <__bss_end+0x7a63>
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4b6:	e5 54       	subi	r30, 0x45	; 69
     4b8:	f5 4c       	sbci	r31, 0xC5	; 197
     4ba:	80 83       	st	Z, r24
     4bc:	33 c0       	rjmp	.+102    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
                    /*state = STATE_MUSIC;*/
                }
            } else {
                gameNow         = TEXT;
     4be:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                lanyardPos      = 0;
     4c2:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <lanyardPos>
                lanyardState    = TRUE;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <lanyardState>
                lastButtonState = 0xff;
                iLED[SCARAB[G]] = 0;
     4cc:	ec 2f       	mov	r30, r28
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	e5 54       	subi	r30, 0x45	; 69
     4d2:	f5 4c       	sbci	r31, 0xC5	; 197
     4d4:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     4d6:	e0 91 6f b5 	lds	r30, 0xB56F	; 0x80b56f <__bss_end+0x7a64>
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	e5 54       	subi	r30, 0x45	; 69
     4de:	f5 4c       	sbci	r31, 0xC5	; 197
     4e0:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     4e2:	e0 91 6e b5 	lds	r30, 0xB56E	; 0x80b56e <__bss_end+0x7a63>
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	e5 54       	subi	r30, 0x45	; 69
     4ea:	f5 4c       	sbci	r31, 0xC5	; 197
     4ec:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = dimValue;
     4ee:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     4f8:	e5 54       	subi	r30, 0x45	; 69
     4fa:	f5 4c       	sbci	r31, 0xC5	; 197
     4fc:	80 83       	st	Z, r24
                iLED[EYE[R][R]] = dimValue;
     4fe:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     508:	e5 54       	subi	r30, 0x45	; 69
     50a:	f5 4c       	sbci	r31, 0xC5	; 197
     50c:	80 83       	st	Z, r24
     50e:	a6 e7       	ldi	r26, 0x76	; 118
     510:	b5 eb       	ldi	r27, 0xB5	; 181
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     512:	ed 91       	ld	r30, X+
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	e5 54       	subi	r30, 0x45	; 69
     518:	f5 4c       	sbci	r31, 0xC5	; 197
     51a:	10 82       	st	Z, r1
                iLED[SCARAB[G]] = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = dimValue;
                iLED[EYE[R][R]] = dimValue;
                for (int i=0; i<6; i++ )
     51c:	85 eb       	ldi	r24, 0xB5	; 181
     51e:	ac 37       	cpi	r26, 0x7C	; 124
     520:	b8 07       	cpc	r27, r24
     522:	b9 f7       	brne	.-18     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }

    lastButtonState = buttonState;
     524:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
     528:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <lastButtonState>
    return 0;
}
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <MagnetMaze>:
uint8_t         mazeCnt = 0;
uint8_t         mazeState = TRUE;
uint8_t         inverted  = FALSE;

// Main game loop
uint8_t MagnetMaze(){
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
    if (CheckState(MAZE_INACTIVE))
     536:	87 ef       	ldi	r24, 0xF7	; 247
     538:	4c d6       	rcall	.+3224   	; 0x11d2 <CheckState>
     53a:	81 11       	cpse	r24, r1
     53c:	3e c1       	rjmp	.+636    	; 0x7ba <MagnetMaze+0x288>
        return 0;

    if (CheckState(MAZE_COMPLETED))
     53e:	8d e7       	ldi	r24, 0x7D	; 125
     540:	48 d6       	rcall	.+3216   	; 0x11d2 <CheckState>
     542:	81 11       	cpse	r24, r1
     544:	3a c1       	rjmp	.+628    	; 0x7ba <MagnetMaze+0x288>
        return 0;

    if ( (gameNow != TEXT) && (gameNow != MAZE) )
     546:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <gameNow>
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	08 f0       	brcs	.+2      	; 0x550 <MagnetMaze+0x1e>
     54e:	35 c1       	rjmp	.+618    	; 0x7ba <MagnetMaze+0x288>
        return 0;

    if (calHall == 0)
     550:	80 91 e4 3a 	lds	r24, 0x3AE4	; 0x803ae4 <calHall>
     554:	90 91 e5 3a 	lds	r25, 0x3AE5	; 0x803ae5 <calHall+0x1>
     558:	89 2b       	or	r24, r25
     55a:	41 f4       	brne	.+16     	; 0x56c <MagnetMaze+0x3a>
        calHall = adcHall;
     55c:	80 91 94 3a 	lds	r24, 0x3A94	; 0x803a94 <adcHall>
     560:	90 91 95 3a 	lds	r25, 0x3A95	; 0x803a95 <adcHall+0x1>
     564:	80 93 e4 3a 	sts	0x3AE4, r24	; 0x803ae4 <calHall>
     568:	90 93 e5 3a 	sts	0x3AE5, r25	; 0x803ae5 <calHall+0x1>

    int16_t valHall = adcHall - calHall;
     56c:	80 91 94 3a 	lds	r24, 0x3A94	; 0x803a94 <adcHall>
     570:	90 91 95 3a 	lds	r25, 0x3A95	; 0x803a95 <adcHall+0x1>
     574:	20 91 e4 3a 	lds	r18, 0x3AE4	; 0x803ae4 <calHall>
     578:	30 91 e5 3a 	lds	r19, 0x3AE5	; 0x803ae5 <calHall+0x1>
     57c:	82 1b       	sub	r24, r18
     57e:	93 0b       	sbc	r25, r19
    switch (curHallState) {
     580:	30 91 3c 38 	lds	r19, 0x383C	; 0x80383c <curHallState>
     584:	31 30       	cpi	r19, 0x01	; 1
     586:	89 f0       	breq	.+34     	; 0x5aa <MagnetMaze+0x78>
     588:	18 f0       	brcs	.+6      	; 0x590 <MagnetMaze+0x5e>
     58a:	32 30       	cpi	r19, 0x02	; 2
     58c:	c1 f0       	breq	.+48     	; 0x5be <MagnetMaze+0x8c>
     58e:	1f c0       	rjmp	.+62     	; 0x5ce <MagnetMaze+0x9c>
        case 0: {
            if ( valHall + HALL_HIGH < 0 ) {
     590:	84 3d       	cpi	r24, 0xD4	; 212
     592:	2e ef       	ldi	r18, 0xFE	; 254
     594:	92 07       	cpc	r25, r18
     596:	14 f4       	brge	.+4      	; 0x59c <MagnetMaze+0x6a>
                newHallState = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <MagnetMaze+0x72>
            } else if ( valHall - HALL_HIGH > 0 ) {
     59c:	8d 32       	cpi	r24, 0x2D	; 45
     59e:	91 40       	sbci	r25, 0x01	; 1
     5a0:	5c f0       	brlt	.+22     	; 0x5b8 <MagnetMaze+0x86>
                newHallState = 2;
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <newHallState>
     5a8:	12 c0       	rjmp	.+36     	; 0x5ce <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 1: {
            if ( valHall - HALL_HIGH > 0 ) {
     5aa:	8d 32       	cpi	r24, 0x2D	; 45
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	92 07       	cpc	r25, r18
     5b0:	c4 f7       	brge	.-16     	; 0x5a2 <MagnetMaze+0x70>
                newHallState = 2;
            } else if ( valHall + HALL_LOW > 0 ) {
     5b2:	89 38       	cpi	r24, 0x89	; 137
     5b4:	9f 4f       	sbci	r25, 0xFF	; 255
     5b6:	84 f3       	brlt	.-32     	; 0x598 <MagnetMaze+0x66>
            if ( valHall + HALL_HIGH < 0 ) {
                newHallState = 1;
            } else if ( valHall - HALL_HIGH > 0 ) {
                newHallState = 2;
            } else {
                newHallState = 0;
     5b8:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <newHallState>
     5bc:	08 c0       	rjmp	.+16     	; 0x5ce <MagnetMaze+0x9c>
            }
            break;
        }
        
        case 2: {
            if ( valHall + HALL_HIGH < 0 ) {
     5be:	84 3d       	cpi	r24, 0xD4	; 212
     5c0:	2e ef       	ldi	r18, 0xFE	; 254
     5c2:	92 07       	cpc	r25, r18
     5c4:	4c f3       	brlt	.-46     	; 0x598 <MagnetMaze+0x66>
                newHallState = 1;
            } else if ( valHall - HALL_LOW < 0 ) {
     5c6:	88 37       	cpi	r24, 0x78	; 120
     5c8:	91 05       	cpc	r25, r1
     5ca:	b4 f3       	brlt	.-20     	; 0x5b8 <MagnetMaze+0x86>
     5cc:	ea cf       	rjmp	.-44     	; 0x5a2 <MagnetMaze+0x70>
            break;
        }
    }

    /* activate led for hallstate */
    iLED[SCARAB[G]] = (newHallState ? dimValue : 0);
     5ce:	c0 91 61 b5 	lds	r28, 0xB561	; 0x80b561 <__bss_end+0x7a56>
     5d2:	ec 2f       	mov	r30, r28
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <newHallState>
     5da:	88 23       	and	r24, r24
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <MagnetMaze+0xb2>
     5de:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <dimValue>
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <MagnetMaze+0xb4>
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	e5 54       	subi	r30, 0x45	; 69
     5e8:	f5 4c       	sbci	r31, 0xC5	; 197
     5ea:	90 83       	st	Z, r25


    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
     5ec:	88 23       	and	r24, r24
     5ee:	59 f0       	breq	.+22     	; 0x606 <MagnetMaze+0xd4>
     5f0:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <mazePos>
     5f4:	21 11       	cpse	r18, r1
     5f6:	3d c0       	rjmp	.+122    	; 0x672 <MagnetMaze+0x140>
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	09 f4       	brne	.+2      	; 0x600 <MagnetMaze+0xce>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	90 93 38 38 	sts	0x3838, r25	; 0x803838 <inverted>
     604:	36 c0       	rjmp	.+108    	; 0x672 <MagnetMaze+0x140>

    if (newHallState != curHallState) {
     606:	33 23       	and	r19, r19
     608:	09 f4       	brne	.+2      	; 0x60c <MagnetMaze+0xda>
     60a:	d7 c0       	rjmp	.+430    	; 0x7ba <MagnetMaze+0x288>
        curHallState = newHallState;
     60c:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <curHallState>
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
                }
            }
        } else {
            if (mazePos == sizeof(mazeCode)) {
     610:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <mazePos>
     614:	82 31       	cpi	r24, 0x12	; 18
     616:	09 f0       	breq	.+2      	; 0x61a <MagnetMaze+0xe8>
     618:	d0 c0       	rjmp	.+416    	; 0x7ba <MagnetMaze+0x288>
                gameNow   = TEXT;
     61a:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                mazePos   = 0;
     61e:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                mazeState = TRUE;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[SCARAB[G]]    = 0;
     628:	10 82       	st	Z, r1
                iLED[EYE[G][L]] = 0;
     62a:	e0 91 6f b5 	lds	r30, 0xB56F	; 0x80b56f <__bss_end+0x7a64>
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	e5 54       	subi	r30, 0x45	; 69
     632:	f5 4c       	sbci	r31, 0xC5	; 197
     634:	10 82       	st	Z, r1
                iLED[EYE[G][R]] = 0;
     636:	e0 91 6e b5 	lds	r30, 0xB56E	; 0x80b56e <__bss_end+0x7a63>
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	e5 54       	subi	r30, 0x45	; 69
     63e:	f5 4c       	sbci	r31, 0xC5	; 197
     640:	10 82       	st	Z, r1
                iLED[EYE[R][L]] = 0;
     642:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	e5 54       	subi	r30, 0x45	; 69
     64a:	f5 4c       	sbci	r31, 0xC5	; 197
     64c:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     64e:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	e5 54       	subi	r30, 0x45	; 69
     656:	f5 4c       	sbci	r31, 0xC5	; 197
     658:	10 82       	st	Z, r1
     65a:	a6 e7       	ldi	r26, 0x76	; 118
     65c:	b5 eb       	ldi	r27, 0xB5	; 181
                for (int i=0; i<6; i++ )
                    iLED[HCKR[G][i]] = 0;
     65e:	ed 91       	ld	r30, X+
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	e5 54       	subi	r30, 0x45	; 69
     664:	f5 4c       	sbci	r31, 0xC5	; 197
     666:	10 82       	st	Z, r1
                iLED[SCARAB[G]]    = 0;
                iLED[EYE[G][L]] = 0;
                iLED[EYE[G][R]] = 0;
                iLED[EYE[R][L]] = 0;
                iLED[EYE[R][R]] = 0;
                for (int i=0; i<6; i++ )
     668:	25 eb       	ldi	r18, 0xB5	; 181
     66a:	ac 37       	cpi	r26, 0x7C	; 124
     66c:	b2 07       	cpc	r27, r18
     66e:	b9 f7       	brne	.-18     	; 0x65e <MagnetMaze+0x12c>
     670:	a4 c0       	rjmp	.+328    	; 0x7ba <MagnetMaze+0x288>

    /* Make the maze work regardless of badge orientation */
    if (newHallState != 0 && mazePos == 0 )
        inverted = (newHallState != mazeCode[0]) ? TRUE : FALSE;

    if (newHallState != curHallState) {
     672:	38 17       	cp	r19, r24
     674:	09 f4       	brne	.+2      	; 0x678 <MagnetMaze+0x146>
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <MagnetMaze+0x288>
        curHallState = newHallState;
     678:	80 93 3c 38 	sts	0x383C, r24	; 0x80383c <curHallState>
        
        if (curHallState != 0) {
            gameNow = MAZE;
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	90 93 2f 38 	sts	0x382F, r25	; 0x80382f <gameNow>
            if ( (inverted ? curHallState^3 : curHallState) == mazeCode[mazePos]) {
     682:	90 91 38 38 	lds	r25, 0x3838	; 0x803838 <inverted>
     686:	99 23       	and	r25, r25
     688:	11 f0       	breq	.+4      	; 0x68e <MagnetMaze+0x15c>
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	89 27       	eor	r24, r25
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	e2 2f       	mov	r30, r18
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	e4 58       	subi	r30, 0x84	; 132
     696:	fa 44       	sbci	r31, 0x4A	; 74
     698:	40 81       	ld	r20, Z
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	84 17       	cp	r24, r20
     69e:	95 07       	cpc	r25, r21
     6a0:	91 f4       	brne	.+36     	; 0x6c6 <MagnetMaze+0x194>
                mazeState &= TRUE;
     6a2:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6a6:	81 70       	andi	r24, 0x01	; 1
     6a8:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                iLED[EYE[R][L]] = 0;
     6ac:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	e5 54       	subi	r30, 0x45	; 69
     6b4:	f5 4c       	sbci	r31, 0xC5	; 197
     6b6:	10 82       	st	Z, r1
                iLED[EYE[R][R]] = 0;
     6b8:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	e5 54       	subi	r30, 0x45	; 69
     6c0:	f5 4c       	sbci	r31, 0xC5	; 197
     6c2:	10 82       	st	Z, r1
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <MagnetMaze+0x198>
            } else {
                mazeState = FALSE;
     6c6:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <mazeState>
                /* play tone BAD */
            }
            mazePos++;
     6ca:	2f 5f       	subi	r18, 0xFF	; 255
     6cc:	20 93 3a 38 	sts	0x383A, r18	; 0x80383a <mazePos>
            mazeCnt++;            
     6d0:	80 91 39 38 	lds	r24, 0x3839	; 0x803839 <mazeCnt>
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
            if (mazeCnt >= 3) {
     6d6:	83 30       	cpi	r24, 0x03	; 3
     6d8:	18 f4       	brcc	.+6      	; 0x6e0 <MagnetMaze+0x1ae>
            } else {
                mazeState = FALSE;
                /* play tone BAD */
            }
            mazePos++;
            mazeCnt++;            
     6da:	80 93 39 38 	sts	0x3839, r24	; 0x803839 <mazeCnt>
     6de:	6d c0       	rjmp	.+218    	; 0x7ba <MagnetMaze+0x288>
            if (mazeCnt >= 3) {
                mazeCnt = 0;
     6e0:	10 92 39 38 	sts	0x3839, r1	; 0x803839 <mazeCnt>
                if (mazeState == TRUE) {
     6e4:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <mazeState>
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	a9 f5       	brne	.+106    	; 0x756 <MagnetMaze+0x224>
                    /* play tone GOOD */
                    iLED[HCKR[G][(mazePos/3)-1]] = dimValue;
     6ec:	eb ea       	ldi	r30, 0xAB	; 171
     6ee:	2e 9f       	mul	r18, r30
     6f0:	e1 2d       	mov	r30, r1
     6f2:	11 24       	eor	r1, r1
     6f4:	e6 95       	lsr	r30
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	e0 59       	subi	r30, 0x90	; 144
     6fa:	fa 44       	sbci	r31, 0x4A	; 74
     6fc:	e5 81       	ldd	r30, Z+5	; 0x05
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     704:	e5 54       	subi	r30, 0x45	; 69
     706:	f5 4c       	sbci	r31, 0xC5	; 197
     708:	80 83       	st	Z, r24
                    if (mazePos == sizeof(mazeCode)) {
     70a:	22 31       	cpi	r18, 0x12	; 18
     70c:	09 f0       	breq	.+2      	; 0x710 <MagnetMaze+0x1de>
                        UpdateState(MAZE_COMPLETED);
     70e:	55 c0       	rjmp	.+170    	; 0x7ba <MagnetMaze+0x288>
     710:	8d e7       	ldi	r24, 0x7D	; 125
     712:	55 d5       	rcall	.+2730   	; 0x11be <UpdateState>
                        iLED[SCARAB[G]]    = 0;
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	c5 54       	subi	r28, 0x45	; 69
     718:	d5 4c       	sbci	r29, 0xC5	; 197
     71a:	18 82       	st	Y, r1
                        iLED[EYE[R][L]] = 0;
     71c:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	e5 54       	subi	r30, 0x45	; 69
     724:	f5 4c       	sbci	r31, 0xC5	; 197
     726:	10 82       	st	Z, r1
                        iLED[EYE[R][R]] = 0;
     728:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	e5 54       	subi	r30, 0x45	; 69
     730:	f5 4c       	sbci	r31, 0xC5	; 197
     732:	10 82       	st	Z, r1
                        iLED[EYE[G][L]] = dimValue;
     734:	e0 91 6f b5 	lds	r30, 0xB56F	; 0x80b56f <__bss_end+0x7a64>
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     73e:	e5 54       	subi	r30, 0x45	; 69
     740:	f5 4c       	sbci	r31, 0xC5	; 197
     742:	80 83       	st	Z, r24
                        iLED[EYE[G][R]] = dimValue;
     744:	e0 91 6e b5 	lds	r30, 0xB56E	; 0x80b56e <__bss_end+0x7a63>
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     74e:	e5 54       	subi	r30, 0x45	; 69
     750:	f5 4c       	sbci	r31, 0xC5	; 197
     752:	80 83       	st	Z, r24
     754:	32 c0       	rjmp	.+100    	; 0x7ba <MagnetMaze+0x288>
                        /*state = STATE_MUSIC;*/
                    }
                } else {
                    gameNow   = TEXT;
     756:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <gameNow>
                    mazePos   = 0;
     75a:	10 92 3a 38 	sts	0x383A, r1	; 0x80383a <mazePos>
                    mazeState = TRUE;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <mazeState>
                    iLED[SCARAB[G]]    = 0;
     764:	d0 e0       	ldi	r29, 0x00	; 0
     766:	c5 54       	subi	r28, 0x45	; 69
     768:	d5 4c       	sbci	r29, 0xC5	; 197
     76a:	18 82       	st	Y, r1
                    iLED[EYE[G][L]] = 0;
     76c:	e0 91 6f b5 	lds	r30, 0xB56F	; 0x80b56f <__bss_end+0x7a64>
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e5 54       	subi	r30, 0x45	; 69
     774:	f5 4c       	sbci	r31, 0xC5	; 197
     776:	10 82       	st	Z, r1
                    iLED[EYE[G][R]] = 0;
     778:	e0 91 6e b5 	lds	r30, 0xB56E	; 0x80b56e <__bss_end+0x7a63>
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	e5 54       	subi	r30, 0x45	; 69
     780:	f5 4c       	sbci	r31, 0xC5	; 197
     782:	10 82       	st	Z, r1
                    iLED[EYE[R][L]] = dimValue;
     784:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     78e:	e5 54       	subi	r30, 0x45	; 69
     790:	f5 4c       	sbci	r31, 0xC5	; 197
     792:	80 83       	st	Z, r24
                    iLED[EYE[R][R]] = dimValue;
     794:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
     79e:	e5 54       	subi	r30, 0x45	; 69
     7a0:	f5 4c       	sbci	r31, 0xC5	; 197
     7a2:	80 83       	st	Z, r24
     7a4:	a6 e7       	ldi	r26, 0x76	; 118
     7a6:	b5 eb       	ldi	r27, 0xB5	; 181
                    for (int i=0; i<6; i++ )
                        iLED[HCKR[G][i]] = 0;
     7a8:	ed 91       	ld	r30, X+
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	e5 54       	subi	r30, 0x45	; 69
     7ae:	f5 4c       	sbci	r31, 0xC5	; 197
     7b0:	10 82       	st	Z, r1
                    iLED[SCARAB[G]]    = 0;
                    iLED[EYE[G][L]] = 0;
                    iLED[EYE[G][R]] = 0;
                    iLED[EYE[R][L]] = dimValue;
                    iLED[EYE[R][R]] = dimValue;
                    for (int i=0; i<6; i++ )
     7b2:	85 eb       	ldi	r24, 0xB5	; 181
     7b4:	ac 37       	cpi	r26, 0x7C	; 124
     7b6:	b8 07       	cpc	r27, r24
     7b8:	b9 f7       	brne	.-18     	; 0x7a8 <MagnetMaze+0x276>
                    iLED[HCKR[G][i]] = 0;
            }
        }
    }
    return 0;
}
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <Setup>:
// Select "audio" input (0-2.5V)
void SelectAuIn(){
     VREF_CTRLA   = 0x22;    //0x22 for audio in/out (2.5V), 0x12 for temperature in, audio out (1.1V/2.5V)
     ADC0_CTRLA   &= ~(ADC_RESSEL_bm);
     ADC0_MUXPOS  = 0x07;    //Audio in: AIN7 at (0x07), Temperature: Internal sensor at (0x1E)
     adc0Chg = 1;
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	f8 94       	cli
     7c8:	88 ed       	ldi	r24, 0xD8	; 216
     7ca:	84 bf       	out	0x34, r24	; 52
     7cc:	c1 e0       	ldi	r28, 0x01	; 1
     7ce:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
     7d2:	8a e4       	ldi	r24, 0x4A	; 74
     7d4:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x700400>
     7d8:	8c e7       	ldi	r24, 0x7C	; 124
     7da:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x700420>
     7de:	9f e3       	ldi	r25, 0x3F	; 63
     7e0:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <__TEXT_REGION_LENGTH__+0x700440>
     7e4:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x700453>
     7ee:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7f2:	80 68       	ori	r24, 0x80	; 128
     7f4:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x700454>
     7f8:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
     802:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     806:	80 68       	ori	r24, 0x80	; 128
     808:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <__TEXT_REGION_LENGTH__+0x700433>
     80c:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     810:	80 68       	ori	r24, 0x80	; 128
     812:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <__TEXT_REGION_LENGTH__+0x700434>
     816:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__TEXT_REGION_LENGTH__+0x700435>
     820:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
     824:	d2 e0       	ldi	r29, 0x02	; 2
     826:	d0 93 05 04 	sts	0x0405, r29	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     82a:	2b e5       	ldi	r18, 0x5B	; 91
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
     832:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
     836:	80 ea       	ldi	r24, 0xA0	; 160
     838:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     83c:	80 ec       	ldi	r24, 0xC0	; 192
     83e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
     848:	1c ba       	out	0x1c, r1	; 28
     84a:	1d ba       	out	0x1d, r1	; 29
     84c:	1e ba       	out	0x1e, r1	; 30
     84e:	1f ba       	out	0x1f, r1	; 31
     850:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x700a03>
     854:	88 e0       	ldi	r24, 0x08	; 8
     856:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     85a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
     85e:	87 e7       	ldi	r24, 0x77	; 119
     860:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x700a01>
     864:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x700a0a>
     868:	8b e0       	ldi	r24, 0x0B	; 11
     86a:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     86e:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     872:	81 60       	ori	r24, 0x01	; 1
     874:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	80 93 40 0a 	sts	0x0A40, r24	; 0x800a40 <__TEXT_REGION_LENGTH__+0x700a40>
     87e:	10 92 41 0a 	sts	0x0A41, r1	; 0x800a41 <__TEXT_REGION_LENGTH__+0x700a41>
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     88a:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     88e:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     892:	c0 93 50 0a 	sts	0x0A50, r28	; 0x800a50 <__TEXT_REGION_LENGTH__+0x700a50>
     896:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <__TEXT_REGION_LENGTH__+0x700a51>
     89a:	8b e8       	ldi	r24, 0x8B	; 139
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     8a2:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
     8a6:	c0 93 55 0a 	sts	0x0A55, r28	; 0x800a55 <__TEXT_REGION_LENGTH__+0x700a55>
     8aa:	08 dc       	rcall	.-2032   	; 0xbc <I2C_init>
     8ac:	82 e1       	ldi	r24, 0x12	; 18
     8ae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
     8b8:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     8bc:	86 e0       	ldi	r24, 0x06	; 6
     8be:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8c2:	84 e4       	ldi	r24, 0x44	; 68
     8c4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     8c8:	8e e1       	ldi	r24, 0x1E	; 30
     8ca:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     8ce:	c0 93 0a 06 	sts	0x060A, r28	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     8d2:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8d6:	81 60       	ori	r24, 0x01	; 1
     8d8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     8dc:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     8e0:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     8e4:	d0 93 41 06 	sts	0x0641, r29	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
     8e8:	82 e5       	ldi	r24, 0x52	; 82
     8ea:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     8f4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     8f8:	c0 93 4a 06 	sts	0x064A, r28	; 0x80064a <__TEXT_REGION_LENGTH__+0x70064a>
     8fc:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     900:	81 60       	ori	r24, 0x01	; 1
     902:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
     906:	c0 93 48 06 	sts	0x0648, r28	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     916:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
     920:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     924:	80 fd       	sbrc	r24, 0
     926:	fc cf       	rjmp	.-8      	; 0x920 <Setup+0x15e>
     928:	80 e3       	ldi	r24, 0x30	; 48
     92a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     92e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
     932:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     936:	82 fd       	sbrc	r24, 2
     938:	fc cf       	rjmp	.-8      	; 0x932 <Setup+0x170>
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	98 e7       	ldi	r25, 0x78	; 120
     93e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     942:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     946:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     94a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     94e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     952:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     956:	82 96       	adiw	r24, 0x22	; 34
     958:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__udivmodhi4>
     95c:	80 93 e8 3a 	sts	0x3AE8, r24	; 0x803ae8 <tmp16bit>
     960:	90 93 e9 3a 	sts	0x3AE9, r25	; 0x803ae9 <tmp16bit+0x1>
     964:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     968:	83 fd       	sbrc	r24, 3
     96a:	fc cf       	rjmp	.-8      	; 0x964 <Setup+0x1a2>
     96c:	80 91 e8 3a 	lds	r24, 0x3AE8	; 0x803ae8 <tmp16bit>
     970:	90 91 e9 3a 	lds	r25, 0x3AE9	; 0x803ae9 <tmp16bit+0x1>
     974:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     978:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>
     988:	88 e0       	ldi	r24, 0x08	; 8
     98a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     98e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     992:	80 fd       	sbrc	r24, 0
     994:	fc cf       	rjmp	.-8      	; 0x98e <Setup+0x1cc>
     996:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__TEXT_REGION_LENGTH__+0x700140>
     9a0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     9a4:	81 60       	ori	r24, 0x01	; 1
     9a6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
     9aa:	10 92 4e 3a 	sts	0x3A4E, r1	; 0x803a4e <serRx>
     9ae:	8e e4       	ldi	r24, 0x4E	; 78
     9b0:	9a e3       	ldi	r25, 0x3A	; 58
     9b2:	80 93 92 3a 	sts	0x3A92, r24	; 0x803a92 <serTxAddr>
     9b6:	90 93 93 3a 	sts	0x3A93, r25	; 0x803a93 <serTxAddr+0x1>
     9ba:	78 94       	sei
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <__vector_8>:
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <__TEXT_REGION_LENGTH__+0x700446>
     9de:	84 e4       	ldi	r24, 0x44	; 68
     9e0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x700426>
     9e4:	ec b3       	in	r30, 0x1c	; 28
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	e8 9f       	mul	r30, r24
     9ea:	f0 01       	movw	r30, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	e5 54       	subi	r30, 0x45	; 69
     9f0:	f5 4c       	sbci	r31, 0xC5	; 197
     9f2:	a8 e2       	ldi	r26, 0x28	; 40
     9f4:	ba e0       	ldi	r27, 0x0A	; 10
     9f6:	96 e0       	ldi	r25, 0x06	; 6
     9f8:	81 91       	ld	r24, Z+
     9fa:	8d 93       	st	X+, r24
     9fc:	9a 95       	dec	r25
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <__vector_8+0x36>
     a00:	8b e0       	ldi	r24, 0x0B	; 11
     a02:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <__TEXT_REGION_LENGTH__+0x700a05>
     a06:	8c b3       	in	r24, 0x1c	; 28
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	58 f4       	brcc	.+22     	; 0xa22 <__vector_8+0x60>
     a0c:	8c b3       	in	r24, 0x1c	; 28
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <__vector_8+0x52>
     a12:	99 0f       	add	r25, r25
     a14:	8a 95       	dec	r24
     a16:	ea f7       	brpl	.-6      	; 0xa12 <__vector_8+0x50>
     a18:	99 b9       	out	0x09, r25	; 9
     a1a:	8c b3       	in	r24, 0x1c	; 28
     a1c:	83 95       	inc	r24
     a1e:	8c bb       	out	0x1c, r24	; 28
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <__vector_8+0x74>
     a22:	8c b3       	in	r24, 0x1c	; 28
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	21 f4       	brne	.+8      	; 0xa30 <__vector_8+0x6e>
     a28:	2a 9a       	sbi	0x05, 2	; 5
     a2a:	83 95       	inc	r24
     a2c:	8c bb       	out	0x1c, r24	; 28
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__vector_8+0x74>
     a30:	2e 9a       	sbi	0x05, 6	; 5
     a32:	88 27       	eor	r24, r24
     a34:	8c bb       	out	0x1c, r24	; 28
     a36:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <timeout_I2C>
     a3a:	88 23       	and	r24, r24
     a3c:	29 f0       	breq	.+10     	; 0xa48 <__vector_8+0x86>
     a3e:	80 91 39 3a 	lds	r24, 0x3A39	; 0x803a39 <timeout_I2C>
     a42:	81 50       	subi	r24, 0x01	; 1
     a44:	80 93 39 3a 	sts	0x3A39, r24	; 0x803a39 <timeout_I2C>
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	0f 90       	pop	r0
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	0f 90       	pop	r0
     a60:	1f 90       	pop	r1
     a62:	18 95       	reti

00000a64 <__vector_13>:
     a64:	1f 92       	push	r1
     a66:	0f 92       	push	r0
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	0f 92       	push	r0
     a6c:	11 24       	eor	r1, r1
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
     a76:	e0 91 92 3a 	lds	r30, 0x3A92	; 0x803a92 <serTxAddr>
     a7a:	f0 91 93 3a 	lds	r31, 0x3A93	; 0x803a93 <serTxAddr+0x1>
     a7e:	80 81       	ld	r24, Z
     a80:	88 23       	and	r24, r24
     a82:	91 f0       	breq	.+36     	; 0xaa8 <__vector_13+0x44>
     a84:	80 81       	ld	r24, Z
     a86:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a8a:	80 91 92 3a 	lds	r24, 0x3A92	; 0x803a92 <serTxAddr>
     a8e:	90 91 93 3a 	lds	r25, 0x3A93	; 0x803a93 <serTxAddr+0x1>
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	80 93 92 3a 	sts	0x3A92, r24	; 0x803a92 <serTxAddr>
     a98:	90 93 93 3a 	sts	0x3A93, r25	; 0x803a93 <serTxAddr+0x1>
     a9c:	80 91 05 08 	lds	r24, 0x0805	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     aa0:	80 62       	ori	r24, 0x20	; 32
     aa2:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x700805>
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__vector_13+0x4e>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <serTxDone>
     aae:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__TEXT_REGION_LENGTH__+0x700a46>
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_14>:
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
     ae2:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     ae6:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     aea:	80 81       	ld	r24, Z
     aec:	81 11       	cpse	r24, r1
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <__vector_14+0x36>
     af0:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <auRepAddr>
     af4:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <auRepAddr+0x1>
     af8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     afc:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b00:	e0 91 05 38 	lds	r30, 0x3805	; 0x803805 <auSmpAddr>
     b04:	f0 91 06 38 	lds	r31, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b08:	80 81       	ld	r24, Z
     b0a:	88 23       	and	r24, r24
     b0c:	e1 f0       	breq	.+56     	; 0xb46 <__vector_14+0x7c>
     b0e:	20 81       	ld	r18, Z
     b10:	40 91 8f 3a 	lds	r20, 0x3A8F	; 0x803a8f <auVolume>
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	2f 57       	subi	r18, 0x7F	; 127
     b18:	31 09       	sbc	r19, r1
     b1a:	42 9f       	mul	r20, r18
     b1c:	c0 01       	movw	r24, r0
     b1e:	43 9f       	mul	r20, r19
     b20:	90 0d       	add	r25, r0
     b22:	11 24       	eor	r1, r1
     b24:	89 2f       	mov	r24, r25
     b26:	99 0f       	add	r25, r25
     b28:	99 0b       	sbc	r25, r25
     b2a:	80 58       	subi	r24, 0x80	; 128
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b32:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <auSmpAddr>
     b36:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <auSmpAddr+0x1>
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
     b40:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
     b44:	06 c0       	rjmp	.+12     	; 0xb52 <__vector_14+0x88>
     b46:	80 e8       	ldi	r24, 0x80	; 128
     b48:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 93 e3 3a 	sts	0x3AE3, r24	; 0x803ae3 <auPlayDone>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <__TEXT_REGION_LENGTH__+0x700a56>
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	9f 91       	pop	r25
     b5e:	8f 91       	pop	r24
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_27>:
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	8f 93       	push	r24
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
     b84:	81 11       	cpse	r24, r1
     b86:	44 c0       	rjmp	.+136    	; 0xc10 <__vector_27+0xa0>
     b88:	ed b3       	in	r30, 0x1d	; 29
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
     b90:	e2 5b       	subi	r30, 0xB2	; 178
     b92:	f5 4c       	sbci	r31, 0xC5	; 197
     b94:	80 83       	st	Z, r24
     b96:	ed b3       	in	r30, 0x1d	; 29
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	e2 5b       	subi	r30, 0xB2	; 178
     b9c:	f5 4c       	sbci	r31, 0xC5	; 197
     b9e:	80 81       	ld	r24, Z
     ba0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     ba4:	ed b3       	in	r30, 0x1d	; 29
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	e2 5b       	subi	r30, 0xB2	; 178
     baa:	f5 4c       	sbci	r31, 0xC5	; 197
     bac:	80 81       	ld	r24, Z
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	39 f0       	breq	.+14     	; 0xbc0 <__vector_27+0x50>
     bb2:	ed b3       	in	r30, 0x1d	; 29
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	e2 5b       	subi	r30, 0xB2	; 178
     bb8:	f5 4c       	sbci	r31, 0xC5	; 197
     bba:	80 81       	ld	r24, Z
     bbc:	8d 30       	cpi	r24, 0x0D	; 13
     bbe:	49 f4       	brne	.+18     	; 0xbd2 <__vector_27+0x62>
     bc0:	ed b3       	in	r30, 0x1d	; 29
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e2 5b       	subi	r30, 0xB2	; 178
     bc6:	f5 4c       	sbci	r31, 0xC5	; 197
     bc8:	10 82       	st	Z, r1
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 37 38 	sts	0x3837, r24	; 0x803837 <serRxDone>
     bd0:	1f c0       	rjmp	.+62     	; 0xc10 <__vector_27+0xa0>
     bd2:	ed b3       	in	r30, 0x1d	; 29
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	e2 5b       	subi	r30, 0xB2	; 178
     bd8:	f5 4c       	sbci	r31, 0xC5	; 197
     bda:	80 81       	ld	r24, Z
     bdc:	88 30       	cpi	r24, 0x08	; 8
     bde:	39 f0       	breq	.+14     	; 0xbee <__vector_27+0x7e>
     be0:	ed b3       	in	r30, 0x1d	; 29
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e2 5b       	subi	r30, 0xB2	; 178
     be6:	f5 4c       	sbci	r31, 0xC5	; 197
     be8:	80 81       	ld	r24, Z
     bea:	8f 37       	cpi	r24, 0x7F	; 127
     bec:	59 f4       	brne	.+22     	; 0xc04 <__vector_27+0x94>
     bee:	8d b3       	in	r24, 0x1d	; 29
     bf0:	88 23       	and	r24, r24
     bf2:	41 f0       	breq	.+16     	; 0xc04 <__vector_27+0x94>
     bf4:	ed b3       	in	r30, 0x1d	; 29
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	e2 5b       	subi	r30, 0xB2	; 178
     bfa:	f5 4c       	sbci	r31, 0xC5	; 197
     bfc:	10 82       	st	Z, r1
     bfe:	8d b3       	in	r24, 0x1d	; 29
     c00:	81 50       	subi	r24, 0x01	; 1
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__vector_27+0x9e>
     c04:	8d b3       	in	r24, 0x1d	; 29
     c06:	80 34       	cpi	r24, 0x40	; 64
     c08:	18 f4       	brcc	.+6      	; 0xc10 <__vector_27+0xa0>
     c0a:	8d b3       	in	r24, 0x1d	; 29
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	8d bb       	out	0x1d, r24	; 29
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	8f 91       	pop	r24
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_28>:
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	8f 93       	push	r24
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__TEXT_REGION_LENGTH__+0x700a4a>
     c3a:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__TEXT_REGION_LENGTH__+0x700a4b>
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     c44:	e5 e0       	ldi	r30, 0x05	; 5
     c46:	f8 e0       	ldi	r31, 0x08	; 8
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	80 83       	st	Z, r24
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	8f 91       	pop	r24
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <__vector_20>:
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <adc0Chg>
     c74:	81 11       	cpse	r24, r1
     c76:	18 c0       	rjmp	.+48     	; 0xca8 <__vector_20+0x4a>
     c78:	8e b3       	in	r24, 0x1e	; 30
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	8f 71       	andi	r24, 0x1F	; 31
     c7e:	8e bb       	out	0x1e, r24	; 30
     c80:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     c84:	8e 31       	cpi	r24, 0x1E	; 30
     c86:	41 f4       	brne	.+16     	; 0xc98 <__vector_20+0x3a>
     c88:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	80 93 e6 3a 	sts	0x3AE6, r24	; 0x803ae6 <adcTemp>
     c92:	90 93 e7 3a 	sts	0x3AE7, r25	; 0x803ae7 <adcTemp+0x1>
     c96:	0a c0       	rjmp	.+20     	; 0xcac <__vector_20+0x4e>
     c98:	ee b3       	in	r30, 0x1e	; 30
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     ca0:	e5 56       	subi	r30, 0x65	; 101
     ca2:	f5 4c       	sbci	r31, 0xC5	; 197
     ca4:	80 83       	st	Z, r24
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <__vector_20+0x4e>
     ca8:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <adc0Chg>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0
     cc0:	1f 90       	pop	r1
     cc2:	18 95       	reti

00000cc4 <__vector_22>:
     cc4:	1f 92       	push	r1
     cc6:	0f 92       	push	r0
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	0f 92       	push	r0
     ccc:	11 24       	eor	r1, r1
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cd6:	81 11       	cpse	r24, r1
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <__vector_22+0x2a>
     cda:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     cde:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     ce2:	80 93 96 3a 	sts	0x3A96, r24	; 0x803a96 <adcPhot>
     ce6:	90 93 97 3a 	sts	0x3A97, r25	; 0x803a97 <adcPhot+0x1>
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__vector_22+0x4a>
     cee:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	79 f4       	brne	.+30     	; 0xd14 <__vector_22+0x50>
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     cfc:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d00:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d04:	80 93 94 3a 	sts	0x3A94, r24	; 0x803a94 <adcHall>
     d08:	90 93 95 3a 	sts	0x3A95, r25	; 0x803a95 <adcHall+0x1>
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d12:	10 c0       	rjmp	.+32     	; 0xd34 <__vector_22+0x70>
     d14:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
     d18:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <__TEXT_REGION_LENGTH__+0x700651>
     d1c:	80 93 90 3a 	sts	0x3A90, r24	; 0x803a90 <adcBtns>
     d20:	90 93 91 3a 	sts	0x3A91, r25	; 0x803a91 <adcBtns+0x1>
     d24:	8f b3       	in	r24, 0x1f	; 31
     d26:	8f 30       	cpi	r24, 0x0F	; 15
     d28:	29 f4       	brne	.+10     	; 0xd34 <__vector_22+0x70>
     d2a:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x700405>
     d34:	8f b3       	in	r24, 0x1f	; 31
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	8f 70       	andi	r24, 0x0F	; 15
     d3c:	99 27       	eor	r25, r25
     d3e:	8f bb       	out	0x1f, r24	; 31
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <__TEXT_REGION_LENGTH__+0x70064b>
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_6>:
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     d70:	81 ff       	sbrs	r24, 1
     d72:	26 c0       	rjmp	.+76     	; 0xdc0 <__vector_6+0x6c>
     d74:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d78:	8f 3f       	cpi	r24, 0xFF	; 255
     d7a:	29 f0       	breq	.+10     	; 0xd86 <__vector_6+0x32>
     d7c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <buttonMark>
     d86:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x700148>
     d8a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x700149>
     d8e:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     d92:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     d96:	82 96       	adiw	r24, 0x22	; 34
     d98:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__udivmodhi4>
     d9c:	80 93 e8 3a 	sts	0x3AE8, r24	; 0x803ae8 <tmp16bit>
     da0:	90 93 e9 3a 	sts	0x3AE9, r25	; 0x803ae9 <tmp16bit+0x1>
     da4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     da8:	83 fd       	sbrc	r24, 3
     daa:	fc cf       	rjmp	.-8      	; 0xda4 <__vector_6+0x50>
     dac:	80 91 e8 3a 	lds	r24, 0x3AE8	; 0x803ae8 <tmp16bit>
     db0:	90 91 e9 3a 	lds	r25, 0x3AE9	; 0x803ae9 <tmp16bit+0x1>
     db4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x70014c>
     db8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x70014d>
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <__vector_6+0x78>
     dc0:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <minuteMark>
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
     dc6:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <minuteMark>
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_7>:
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	8f 93       	push	r24
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     dfa:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
     dfe:	8f 91       	pop	r24
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <EERead>:
     e0a:	90 91 02 10 	lds	r25, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e0e:	91 fd       	sbrc	r25, 1
     e10:	fc cf       	rjmp	.-8      	; 0xe0a <EERead>
     e12:	fb 01       	movw	r30, r22
     e14:	48 0f       	add	r20, r24
     e16:	84 17       	cp	r24, r20
     e18:	39 f0       	breq	.+14     	; 0xe28 <EERead+0x1e>
     e1a:	a8 2f       	mov	r26, r24
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	bc 5e       	subi	r27, 0xEC	; 236
     e20:	9c 91       	ld	r25, X
     e22:	91 93       	st	Z+, r25
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	f7 cf       	rjmp	.-18     	; 0xe16 <EERead+0xc>
     e28:	08 95       	ret

00000e2a <EEWrite>:
     e2a:	9d e9       	ldi	r25, 0x9D	; 157
     e2c:	24 e0       	ldi	r18, 0x04	; 4
     e2e:	33 e0       	ldi	r19, 0x03	; 3
     e30:	44 23       	and	r20, r20
     e32:	09 f1       	breq	.+66     	; 0xe76 <EEWrite+0x4c>
     e34:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e38:	51 fd       	sbrc	r21, 1
     e3a:	fc cf       	rjmp	.-8      	; 0xe34 <EEWrite+0xa>
     e3c:	94 bf       	out	0x34, r25	; 52
     e3e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e42:	e8 2f       	mov	r30, r24
     e44:	58 2f       	mov	r21, r24
     e46:	5f 71       	andi	r21, 0x1F	; 31
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	db 01       	movw	r26, r22
     e50:	11 97       	sbiw	r26, 0x01	; 1
     e52:	ac 91       	ld	r26, X
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	fc 5e       	subi	r31, 0xEC	; 236
     e58:	a0 83       	st	Z, r26
     e5a:	41 50       	subi	r20, 0x01	; 1
     e5c:	19 f0       	breq	.+6      	; 0xe64 <EEWrite+0x3a>
     e5e:	e8 2f       	mov	r30, r24
     e60:	5f 31       	cpi	r21, 0x1F	; 31
     e62:	81 f7       	brne	.-32     	; 0xe44 <EEWrite+0x1a>
     e64:	94 bf       	out	0x34, r25	; 52
     e66:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x701000>
     e6a:	50 91 02 10 	lds	r21, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x701002>
     e6e:	52 ff       	sbrs	r21, 2
     e70:	df cf       	rjmp	.-66     	; 0xe30 <EEWrite+0x6>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	08 95       	ret
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret

00000e7a <SerSend>:
     e7a:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <serTxDone>
     e7e:	22 23       	and	r18, r18
     e80:	59 f0       	breq	.+22     	; 0xe98 <SerSend+0x1e>
     e82:	80 93 92 3a 	sts	0x3A92, r24	; 0x803a92 <serTxAddr>
     e86:	90 93 93 3a 	sts	0x3A93, r25	; 0x803a93 <serTxAddr+0x1>
     e8a:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <serTxDone>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 45 0a 	sts	0x0A45, r24	; 0x800a45 <__TEXT_REGION_LENGTH__+0x700a45>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	08 95       	ret
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	08 95       	ret

00000e9c <SerSpeed>:
     e9c:	28 2f       	mov	r18, r24
     e9e:	81 11       	cpse	r24, r1
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <SerSpeed+0x8>
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	82 1b       	sub	r24, r18
     eaa:	91 09       	sbc	r25, r1
     eac:	98 2f       	mov	r25, r24
     eae:	88 27       	eor	r24, r24
     eb0:	81 50       	subi	r24, 0x01	; 1
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
     eb8:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
     ebc:	08 95       	ret

00000ebe <CheckButtons>:
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
     ebe:	20 91 90 3a 	lds	r18, 0x3A90	; 0x803a90 <adcBtns>
     ec2:	30 91 91 3a 	lds	r19, 0x3A91	; 0x803a91 <adcBtns+0x1>
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ec6:	94 e0       	ldi	r25, 0x04	; 4
     ec8:	36 95       	lsr	r19
     eca:	27 95       	ror	r18
     ecc:	9a 95       	dec	r25
     ece:	e1 f7       	brne	.-8      	; 0xec8 <CheckButtons+0xa>
     ed0:	33 27       	eor	r19, r19
     ed2:	2c 35       	cpi	r18, 0x5C	; 92
     ed4:	31 05       	cpc	r19, r1
     ed6:	d0 f4       	brcc	.+52     	; 0xf0c <CheckButtons+0x4e>
     ed8:	23 35       	cpi	r18, 0x53	; 83
     eda:	31 05       	cpc	r19, r1
     edc:	a8 f5       	brcc	.+106    	; 0xf48 <CheckButtons+0x8a>
     ede:	22 33       	cpi	r18, 0x32	; 50
     ee0:	31 05       	cpc	r19, r1
     ee2:	50 f4       	brcc	.+20     	; 0xef8 <CheckButtons+0x3a>
     ee4:	2d 32       	cpi	r18, 0x2D	; 45
     ee6:	31 05       	cpc	r19, r1
     ee8:	58 f5       	brcc	.+86     	; 0xf40 <CheckButtons+0x82>
     eea:	23 52       	subi	r18, 0x23	; 35
     eec:	31 09       	sbc	r19, r1
     eee:	25 30       	cpi	r18, 0x05	; 5
     ef0:	31 05       	cpc	r19, r1
     ef2:	80 f5       	brcc	.+96     	; 0xf54 <CheckButtons+0x96>

        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
     ef4:	9c e0       	ldi	r25, 0x0C	; 12
     ef6:	2f c0       	rjmp	.+94     	; 0xf56 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     ef8:	27 33       	cpi	r18, 0x37	; 55
     efa:	31 05       	cpc	r19, r1
     efc:	18 f1       	brcs	.+70     	; 0xf44 <CheckButtons+0x86>
     efe:	2e 53       	subi	r18, 0x3E	; 62
     f00:	31 09       	sbc	r19, r1
     f02:	27 30       	cpi	r18, 0x07	; 7
     f04:	31 05       	cpc	r19, r1
     f06:	30 f5       	brcc	.+76     	; 0xf54 <CheckButtons+0x96>
        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
        break;

        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
     f08:	96 e0       	ldi	r25, 0x06	; 6
        break;
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     f0c:	2a 38       	cpi	r18, 0x8A	; 138
     f0e:	31 05       	cpc	r19, r1
     f10:	50 f4       	brcc	.+20     	; 0xf26 <CheckButtons+0x68>
     f12:	29 37       	cpi	r18, 0x79	; 121
     f14:	31 05       	cpc	r19, r1
     f16:	d0 f4       	brcc	.+52     	; 0xf4c <CheckButtons+0x8e>
     f18:	23 56       	subi	r18, 0x63	; 99
     f1a:	31 09       	sbc	r19, r1
     f1c:	2b 30       	cpi	r18, 0x0B	; 11
     f1e:	31 05       	cpc	r19, r1
     f20:	c8 f4       	brcc	.+50     	; 0xf54 <CheckButtons+0x96>
        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
        break;

        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
     f22:	93 e0       	ldi	r25, 0x03	; 3
        break;
     f24:	18 c0       	rjmp	.+48     	; 0xf56 <CheckButtons+0x98>
// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
    
    switch(bADC){
     f26:	22 3a       	cpi	r18, 0xA2	; 162
     f28:	31 05       	cpc	r19, r1
     f2a:	a0 f0       	brcs	.+40     	; 0xf54 <CheckButtons+0x96>
     f2c:	2b 3b       	cpi	r18, 0xBB	; 187
     f2e:	31 05       	cpc	r19, r1
     f30:	78 f0       	brcs	.+30     	; 0xf50 <CheckButtons+0x92>
     f32:	20 5f       	subi	r18, 0xF0	; 240
     f34:	31 09       	sbc	r19, r1
     f36:	20 31       	cpi	r18, 0x10	; 16
     f38:	31 05       	cpc	r19, r1
     f3a:	60 f4       	brcc	.+24     	; 0xf54 <CheckButtons+0x96>
        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
        break;

        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
     f3c:	90 e0       	ldi	r25, 0x00	; 0
        break;
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <CheckButtons+0x98>
        case 35 ... 39:          //37: Both left
        bNibble = 0b1100;
        break;

        case 45 ... 49:          //47: Both bottom
        bNibble = 0b1001;
     f40:	99 e0       	ldi	r25, 0x09	; 9
        break;
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <CheckButtons+0x98>

        case 50 ... 54:          //52: Bottom left
        bNibble = 0b1000;
     f44:	98 e0       	ldi	r25, 0x08	; 8
        break;
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <CheckButtons+0x98>
        case 62 ... 68:          //65: Both top
        bNibble = 0b0110;
        break;

        case 83 ... 91:          //87: Top left
        bNibble = 0b0100;
     f48:	94 e0       	ldi	r25, 0x04	; 4
        break;
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <CheckButtons+0x98>
        case 99 ... 109:         //104: Both right
        bNibble = 0b0011;
        break;

        case 121 ... 137:        //129: Top right
        bNibble = 0b0010;
     f4c:	92 e0       	ldi	r25, 0x02	; 2
        break;
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <CheckButtons+0x98>

        case 162 ... 186:        //174: Bottom right
        bNibble = 0b0001;
     f50:	91 e0       	ldi	r25, 0x01	; 1
        break;
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <CheckButtons+0x98>
};

// Returns button combination (4LSB) and number of consecutive times this combination is detected. First read should always be ignored! 
uint8_t CheckButtons(uint8_t previousValue){
    uint8_t bADC = (uint8_t)(adcBtns>>4);
    uint8_t bNibble = 0x0F;     //MSB to LSB: Bottom left, top left, top right, bottom right, 0F is error
     f54:	9f e0       	ldi	r25, 0x0F	; 15
        case 240 ... 255:        //255: No button pressed
        bNibble = 0b0000;
        break;
    }

    if ((previousValue&0x0F)==bNibble){
     f56:	28 2f       	mov	r18, r24
     f58:	2f 70       	andi	r18, 0x0F	; 15
     f5a:	92 13       	cpse	r25, r18
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <CheckButtons+0xac>
        if ((previousValue&0xF0) < 0xF0) previousValue += 0x10; //Same value? Increase time nibble
     f5e:	98 2f       	mov	r25, r24
     f60:	90 7f       	andi	r25, 0xF0	; 240
     f62:	90 3f       	cpi	r25, 0xF0	; 240
     f64:	39 f0       	breq	.+14     	; 0xf74 <CheckButtons+0xb6>
     f66:	80 5f       	subi	r24, 0xF0	; 240
     f68:	08 95       	ret
        return previousValue;       
    } else if (bNibble == 0) return 0xFF; //Buttons released, 0xFF triggers readout, previousValue holds last button value.
     f6a:	99 23       	and	r25, r25
     f6c:	11 f0       	breq	.+4      	; 0xf72 <CheckButtons+0xb4>
     f6e:	89 2f       	mov	r24, r25
     f70:	08 95       	ret
     f72:	8f ef       	ldi	r24, 0xFF	; 255
              else return bNibble;  //New value  
}
     f74:	08 95       	ret

00000f76 <lfsr>:

uint8_t lfsr(){
    static uint16_t state = 0xd401;
    state ^= (state << 13);
     f76:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <state.3879>
     f7a:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <state.3879+0x1>
     f7e:	9c 01       	movw	r18, r24
     f80:	32 2f       	mov	r19, r18
     f82:	22 27       	eor	r18, r18
     f84:	32 95       	swap	r19
     f86:	33 0f       	add	r19, r19
     f88:	30 7e       	andi	r19, 0xE0	; 224
     f8a:	82 27       	eor	r24, r18
     f8c:	93 27       	eor	r25, r19
    state ^= (state >> 9);
     f8e:	9c 01       	movw	r18, r24
     f90:	23 2f       	mov	r18, r19
     f92:	33 27       	eor	r19, r19
     f94:	26 95       	lsr	r18
     f96:	82 27       	eor	r24, r18
     f98:	93 27       	eor	r25, r19
    state ^= (state << 7);
     f9a:	9c 01       	movw	r18, r24
     f9c:	36 95       	lsr	r19
     f9e:	32 2f       	mov	r19, r18
     fa0:	22 27       	eor	r18, r18
     fa2:	37 95       	ror	r19
     fa4:	27 95       	ror	r18
     fa6:	82 27       	eor	r24, r18
     fa8:	93 27       	eor	r25, r19
     faa:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <state.3879>
     fae:	90 93 1d 38 	sts	0x381D, r25	; 0x80381d <state.3879+0x1>
    return (state & 0xff);
}
     fb2:	08 95       	ret

00000fb4 <floatSpeed>:

void floatSpeed(uint8_t bits, uint16_t min, uint16_t max){
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	7b 01       	movw	r14, r22
     fc4:	8a 01       	movw	r16, r20
    uint16_t val = TCB1_CCMP;
     fc6:	c0 91 5c 0a 	lds	r28, 0x0A5C	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
     fca:	d0 91 5d 0a 	lds	r29, 0x0A5D	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    bits = mask[(bits-1)&0x07];
     fce:	e8 2f       	mov	r30, r24
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	31 97       	sbiw	r30, 0x01	; 1
     fd4:	e7 70       	andi	r30, 0x07	; 7
     fd6:	ff 27       	eor	r31, r31
     fd8:	e2 5e       	subi	r30, 0xE2	; 226
     fda:	f7 4c       	sbci	r31, 0xC7	; 199
     fdc:	d0 80       	ld	r13, Z
    val += (lfsr()&bits);
     fde:	cb df       	rcall	.-106    	; 0xf76 <lfsr>
     fe0:	8d 21       	and	r24, r13
     fe2:	c8 0f       	add	r28, r24
     fe4:	d1 1d       	adc	r29, r1
    val -= (lfsr()&bits);
     fe6:	c7 df       	rcall	.-114    	; 0xf76 <lfsr>
     fe8:	8d 21       	and	r24, r13
     fea:	c8 1b       	sub	r28, r24
     fec:	d1 09       	sbc	r29, r1
     fee:	0c 17       	cp	r16, r28
     ff0:	1d 07       	cpc	r17, r29
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <floatSpeed+0x42>
     ff4:	e8 01       	movw	r28, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	ec 16       	cp	r14, r28
     ffa:	fd 06       	cpc	r15, r29
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <floatSpeed+0x4c>
     ffe:	ce 01       	movw	r24, r28
    1000:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    if (val > max) val = max;    
    if (val < min) val = min;  
    TCB1_CCMP = val;
    1004:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
    1008:	df 91       	pop	r29
}
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	08 95       	ret

00001018 <floatAround>:
    1018:	0f 93       	push	r16

uint8_t floatAround(uint8_t sample, uint8_t bits, uint8_t min, uint8_t max){
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	c8 2f       	mov	r28, r24
    1022:	d4 2f       	mov	r29, r20
    1024:	02 2f       	mov	r16, r18
    bits = mask[(bits-1)&0x07];
    1026:	e6 2f       	mov	r30, r22
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	31 97       	sbiw	r30, 0x01	; 1
    102c:	e7 70       	andi	r30, 0x07	; 7
    102e:	ff 27       	eor	r31, r31
    1030:	e2 5e       	subi	r30, 0xE2	; 226
    1032:	f7 4c       	sbci	r31, 0xC7	; 199
    1034:	10 81       	ld	r17, Z
    sample += lfsr()&bits;
    1036:	9f df       	rcall	.-194    	; 0xf76 <lfsr>
    1038:	81 23       	and	r24, r17
    103a:	c8 0f       	add	r28, r24
    sample -= lfsr()&bits;
    103c:	9c df       	rcall	.-200    	; 0xf76 <lfsr>
    103e:	81 23       	and	r24, r17
    1040:	c8 1b       	sub	r28, r24
    1042:	8c 2f       	mov	r24, r28
    1044:	00 23       	and	r16, r16
    if (max){
    1046:	41 f0       	breq	.+16     	; 0x1058 <floatAround+0x40>
    1048:	9c 2f       	mov	r25, r28
    104a:	0c 17       	cp	r16, r28
    104c:	08 f4       	brcc	.+2      	; 0x1050 <floatAround+0x38>
    104e:	90 2f       	mov	r25, r16
    1050:	8d 2f       	mov	r24, r29
    1052:	d9 17       	cp	r29, r25
    1054:	08 f4       	brcc	.+2      	; 0x1058 <floatAround+0x40>
    1056:	89 2f       	mov	r24, r25
    1058:	41 e0       	ldi	r20, 0x01	; 1
        if (sample > max) sample = max;
        if (sample < min) sample = min;
    }
    if (min & (sample < min)) sample = min;
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	8d 17       	cp	r24, r29
    105e:	10 f0       	brcs	.+4      	; 0x1064 <floatAround+0x4c>
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	2d 2f       	mov	r18, r29
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	24 23       	and	r18, r20
    106a:	35 23       	and	r19, r21
    106c:	23 2b       	or	r18, r19
    106e:	09 f0       	breq	.+2      	; 0x1072 <floatAround+0x5a>
    1070:	8d 2f       	mov	r24, r29
    1072:	df 91       	pop	r29

    return sample;
}
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <SaveGameState>:
    107c:	cf 92       	push	r12
    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
}

//Save changed data to EEPROM
uint8_t SaveGameState(){
    107e:	df 92       	push	r13
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	64 97       	sbiw	r28, 0x14	; 20
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	de bf       	out	0x3e, r29	; 62
    uint8_t gameCheck[BOOTCHK];

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);
    1094:	44 e1       	ldi	r20, 0x14	; 20
    1096:	be 01       	movw	r22, r28
    1098:	6f 5f       	subi	r22, 0xFF	; 255
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	b5 de       	rcall	.-662    	; 0xe0a <EERead>
    10a0:	8a e3       	ldi	r24, 0x3A	; 58
    10a2:	c8 2e       	mov	r12, r24
    10a4:	8a e3       	ldi	r24, 0x3A	; 58
    10a6:	d8 2e       	mov	r13, r24
    10a8:	8e 01       	movw	r16, r28
    10aa:	0f 5f       	subi	r16, 0xFF	; 255
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    10ae:	f1 2c       	mov	r15, r1
        if (gameState[x] != gameCheck[x]){
    10b0:	f8 01       	movw	r30, r16
    10b2:	81 91       	ld	r24, Z+
    10b4:	8f 01       	movw	r16, r30
    10b6:	f6 01       	movw	r30, r12
    10b8:	90 81       	ld	r25, Z
    10ba:	98 13       	cpse	r25, r24
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <SaveGameState+0x52>

    //Read all data up to the boot/check result address from EEPROM
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
    10be:	f3 94       	inc	r15
    10c0:	ff ef       	ldi	r31, 0xFF	; 255
    10c2:	cf 1a       	sub	r12, r31
    10c4:	df 0a       	sbc	r13, r31
    10c6:	80 e1       	ldi	r24, 0x10	; 16
    10c8:	f8 12       	cpse	r15, r24
    10ca:	f2 cf       	rjmp	.-28     	; 0x10b0 <SaveGameState+0x34>
    10cc:	08 c0       	rjmp	.+16     	; 0x10de <SaveGameState+0x62>
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	b6 01       	movw	r22, r12
    10d2:	8f 2d       	mov	r24, r15
    10d4:	aa de       	rcall	.-684    	; 0xe2a <EEWrite>
    10d6:	88 23       	and	r24, r24
    10d8:	91 f3       	breq	.-28     	; 0x10be <SaveGameState+0x42>
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	36 c0       	rjmp	.+108    	; 0x114a <SaveGameState+0xce>
        }
    }

    //Check the inventory too
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    10de:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    10e2:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    10e6:	30 93 4a 3a 	sts	0x3A4A, r19	; 0x803a4a <gameState+0x10>
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    10ea:	20 93 4b 3a 	sts	0x3A4B, r18	; 0x803a4b <gameState+0x11>
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    10ee:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    10f2:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    10f6:	90 93 4c 3a 	sts	0x3A4C, r25	; 0x803a4c <gameState+0x12>
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    10fa:	80 93 4d 3a 	sts	0x3A4D, r24	; 0x803a4d <gameState+0x13>
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
    10fe:	89 89       	ldd	r24, Y+17	; 0x11
    1100:	9a 89       	ldd	r25, Y+18	; 0x12
    1102:	98 27       	eor	r25, r24
    1104:	89 27       	eor	r24, r25
    1106:	98 27       	eor	r25, r24
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	69 f4       	brne	.+26     	; 0x1128 <SaveGameState+0xac>
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
    110e:	8b 89       	ldd	r24, Y+19	; 0x13
    1110:	9c 89       	ldd	r25, Y+20	; 0x14
    1112:	98 27       	eor	r25, r24
    1114:	89 27       	eor	r24, r25
    1116:	98 27       	eor	r25, r24
    1118:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    111c:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	49 f4       	brne	.+18     	; 0x1138 <SaveGameState+0xbc>
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <SaveGameState+0xcc>
    gameState[INVADDR] = (uint8_t)(inventory[0]>>8);
    gameState[INVADDR+1] = (uint8_t)(inventory[0]&0xff);
    gameState[INVADDR+2] = (uint8_t)(inventory[1]>>8);
    gameState[INVADDR+3] = (uint8_t)(inventory[1]&0xff);
    if (inventory[0] != (gameCheck[INVADDR]<<8|gameCheck[INVADDR+1])) {
        if (EEWrite(INVADDR, &gameState[INVADDR], 2)) return 1;
    1128:	42 e0       	ldi	r20, 0x02	; 2
    112a:	6a e4       	ldi	r22, 0x4A	; 74
    112c:	7a e3       	ldi	r23, 0x3A	; 58
    112e:	80 e1       	ldi	r24, 0x10	; 16
    1130:	7c de       	rcall	.-776    	; 0xe2a <EEWrite>
    1132:	88 23       	and	r24, r24
    1134:	61 f3       	breq	.-40     	; 0x110e <SaveGameState+0x92>
    1136:	d1 cf       	rjmp	.-94     	; 0x10da <SaveGameState+0x5e>
    }
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    1138:	42 e0       	ldi	r20, 0x02	; 2
    113a:	6c e4       	ldi	r22, 0x4C	; 76
    113c:	7a e3       	ldi	r23, 0x3A	; 58
    113e:	82 e1       	ldi	r24, 0x12	; 18
    1140:	74 de       	rcall	.-792    	; 0xe2a <EEWrite>
    EERead(0, &gameCheck[0], BOOTCHK);

    //Check game status bits
    for (uint8_t x=0; x<STATLEN; ++x){
        if (gameState[x] != gameCheck[x]){
            if (EEWrite(x, &gameState[x], 1)) return 1;
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	81 11       	cpse	r24, r1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <SaveGameState+0xce>
    1148:	90 e0       	ldi	r25, 0x00	; 0
    if (inventory[1] != (gameCheck[INVADDR+2]<<8|gameCheck[INVADDR+3])) {
        if (EEWrite(INVADDR+2, &gameState[INVADDR+2], 2)) return 1;
    }

    return 0;
}
    114a:	89 2f       	mov	r24, r25
    114c:	64 96       	adiw	r28, 0x14	; 20
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <ReadStatusBit>:

uint8_t ReadStatusBit(uint8_t number){
    number &= 0x7f;
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
    1162:	e8 2f       	mov	r30, r24
    1164:	ef 77       	andi	r30, 0x7F	; 127
    1166:	e6 95       	lsr	r30
    1168:	e6 95       	lsr	r30
    116a:	e6 95       	lsr	r30
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e6 5c       	subi	r30, 0xC6	; 198
    1170:	f5 4c       	sbci	r31, 0xC5	; 197
    1172:	20 81       	ld	r18, Z
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	87 70       	andi	r24, 0x07	; 7
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <ReadStatusBit+0x1e>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <ReadStatusBit+0x1a>
    1184:	ca 01       	movw	r24, r20
}
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	08 95       	ret

0000118a <WriteStatusBit>:

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    118a:	e8 2f       	mov	r30, r24
    118c:	ef 77       	andi	r30, 0x7F	; 127
    118e:	e6 95       	lsr	r30
    1190:	e6 95       	lsr	r30
    1192:	e6 95       	lsr	r30
    1194:	28 2f       	mov	r18, r24
    1196:	27 70       	andi	r18, 0x07	; 7
    if (state) gameState[number>>3] |= 1<<(number&7);
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	e6 5c       	subi	r30, 0xC6	; 198
    119c:	f5 4c       	sbci	r31, 0xC5	; 197
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <WriteStatusBit+0x1c>
    11a4:	88 0f       	add	r24, r24
    11a6:	2a 95       	dec	r18
    11a8:	ea f7       	brpl	.-6      	; 0x11a4 <WriteStatusBit+0x1a>
    11aa:	66 23       	and	r22, r22
    11ac:	19 f0       	breq	.+6      	; 0x11b4 <WriteStatusBit+0x2a>
    11ae:	90 81       	ld	r25, Z
    11b0:	89 2b       	or	r24, r25
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <WriteStatusBit+0x30>
    else gameState[number>>3] &= ~(1<<(number&7));
    11b4:	80 95       	com	r24
    11b6:	90 81       	ld	r25, Z
    11b8:	89 23       	and	r24, r25
    11ba:	80 83       	st	Z, r24
    11bc:	08 95       	ret

000011be <UpdateState>:
}

//Update game state: num -> vBBBBbbb v=value(0 is set!), BBBB=Byte number, bbb=bit number
void UpdateState(uint8_t num){
    11be:	98 2f       	mov	r25, r24
    uint8_t clearBit = num & 0x80;
    num &= 0x7f;
    11c0:	8f 77       	andi	r24, 0x7F	; 127
    if (num) {
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <UpdateState+0x12>
        if (clearBit) {
    11c4:	97 ff       	sbrs	r25, 7
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <UpdateState+0xe>
            WriteStatusBit(num, 0);
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <UpdateState+0x10>
        } else {
            WriteStatusBit(num, 1);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	dd cf       	rjmp	.-70     	; 0x118a <WriteStatusBit>
    11d0:	08 95       	ret

000011d2 <CheckState>:
        }
    }
}

//Checks if state of bit BBBBbbb matches with v (inverted) bit
uint8_t CheckState(uint8_t num){
    11d2:	cf 93       	push	r28
    11d4:	c8 2f       	mov	r28, r24
    uint8_t bitSet = 0;
    if (ReadStatusBit(num & 0x7f)){
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	c4 df       	rcall	.-120    	; 0x1162 <ReadStatusBit>
    11da:	2c 2f       	mov	r18, r28
    11dc:	22 1f       	adc	r18, r18
    11de:	22 27       	eor	r18, r18
    11e0:	22 1f       	adc	r18, r18
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	81 11       	cpse	r24, r1
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <CheckState+0x18>
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    }
    if (((num & 0x80)>0)^(bitSet>0)){
        return 1;
    }
    return 0;
}
    11ea:	82 2f       	mov	r24, r18
    11ec:	89 27       	eor	r24, r25
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <getID>:

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;
    11f2:	e3 e0       	ldi	r30, 0x03	; 3
    11f4:	f1 e1       	ldi	r31, 0x11	; 17
    return 0;
}

//Give out a number 0..3, calculated using serial number fields
uint8_t getID(){
    uint8_t id = 0;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
        id += *serNum;
    11f8:	91 91       	ld	r25, Z+
    11fa:	89 0f       	add	r24, r25
uint8_t getID(){
    uint8_t id = 0;
    uint8_t *serNum;
    serNum = (uint8_t*)&SIGROW_SERNUM0;

    for (uint8_t x=0; x<10; ++x){
    11fc:	ed 30       	cpi	r30, 0x0D	; 13
    11fe:	91 e1       	ldi	r25, 0x11	; 17
    1200:	f9 07       	cpc	r31, r25
    1202:	d1 f7       	brne	.-12     	; 0x11f8 <getID+0x6>
        id += *serNum;
        ++serNum;
    }
    id %= 4;
    whoami = id+1;
    1204:	83 70       	andi	r24, 0x03	; 3
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <whoami>
    return whoami;
}
    120c:	08 95       	ret

0000120e <Reset>:

void Reset(){
    120e:	ea e3       	ldi	r30, 0x3A	; 58
    1210:	fa e3       	ldi	r31, 0x3A	; 58
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
        gameState[x] = 0;
    1212:	11 92       	st	Z+, r1
    //Reset game progress (all zeroes) and load some bits:
    //# 110   set to 1 by FW if badge UUID mod 4 == 0
    //# 111   set to 1 by FW if badge UUID mod 4 == 1
    //# 112   set to 1 by FW if badge UUID mod 4 == 2
    //# 113   set to 1 by FW if badge UUID mod 4 == 3
    for (uint8_t x=0; x<sizeof(gameState); ++x){
    1214:	8a e3       	ldi	r24, 0x3A	; 58
    1216:	ee 34       	cpi	r30, 0x4E	; 78
    1218:	f8 07       	cpc	r31, r24
    121a:	d9 f7       	brne	.-10     	; 0x1212 <Reset+0x4>
        gameState[x] = 0;
    }

    uint8_t id = getID();
    121c:	ea df       	rcall	.-44     	; 0x11f2 <getID>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    121e:	81 11       	cpse	r24, r1
    1220:	04 c0       	rjmp	.+8      	; 0x122a <Reset+0x1c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    1222:	80 91 47 3a 	lds	r24, 0x3A47	; 0x803a47 <gameState+0xd>
    1226:	80 64       	ori	r24, 0x40	; 64
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <Reset+0x26>

    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	31 f4       	brne	.+12     	; 0x123a <Reset+0x2c>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    122e:	80 91 47 3a 	lds	r24, 0x3A47	; 0x803a47 <gameState+0xd>
    1232:	80 68       	ori	r24, 0x80	; 128
    1234:	80 93 47 3a 	sts	0x3A47, r24	; 0x803a47 <gameState+0xd>
    1238:	0d c0       	rjmp	.+26     	; 0x1254 <Reset+0x46>
    uint8_t id = getID();

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	21 f4       	brne	.+8      	; 0x1246 <Reset+0x38>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    123e:	80 91 48 3a 	lds	r24, 0x3A48	; 0x803a48 <gameState+0xe>
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	05 c0       	rjmp	.+10     	; 0x1250 <Reset+0x42>

    //Write bit in gameState location 110..113
    if (id == 0) WriteStatusBit(110, 1);
    else if (id == 1) WriteStatusBit(111, 1);
    else if (id == 2) WriteStatusBit(112, 1);
    else if (id == 3) WriteStatusBit(113, 1);
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	29 f4       	brne	.+10     	; 0x1254 <Reset+0x46>
    if (gameState[number>>3] & (1<<(number&7))) return 1; else return 0;
}

void WriteStatusBit(uint8_t number, uint8_t state){
    number &= 0x7f;
    if (state) gameState[number>>3] |= 1<<(number&7);
    124a:	80 91 48 3a 	lds	r24, 0x3A48	; 0x803a48 <gameState+0xe>
    124e:	82 60       	ori	r24, 0x02	; 2
    1250:	80 93 48 3a 	sts	0x3A48, r24	; 0x803a48 <gameState+0xe>
    1254:	80 91 3a 3a 	lds	r24, 0x3A3A	; 0x803a3a <gameState>
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 93 3a 3a 	sts	0x3A3A, r24	; 0x803a3a <gameState>
    125e:	08 95       	ret

00001260 <LoadGameState>:

    return sample;
}

//Load game status
void LoadGameState(){
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM
    1264:	44 e1       	ldi	r20, 0x14	; 20
    1266:	6a e3       	ldi	r22, 0x3A	; 58
    1268:	7a e3       	ldi	r23, 0x3A	; 58
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	ce dd       	rcall	.-1124   	; 0xe0a <EERead>
    126e:	ce e6       	ldi	r28, 0x6E	; 110

    uint8_t idSet = 0;
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t x=0; x<4; ++x){
        idSet += ReadStatusBit(110+x);
    1272:	8c 2f       	mov	r24, r28
    1274:	76 df       	rcall	.-276    	; 0x1162 <ReadStatusBit>
    1276:	d8 0f       	add	r29, r24
    1278:	cf 5f       	subi	r28, 0xFF	; 255
//Load game status
void LoadGameState(){
    EERead(0, &gameState[0], BOOTCHK);   //Load game status bits from EEPROM

    uint8_t idSet = 0;
    for (uint8_t x=0; x<4; ++x){
    127a:	c2 37       	cpi	r28, 0x72	; 114
    127c:	d1 f7       	brne	.-12     	; 0x1272 <LoadGameState+0x12>
        idSet += ReadStatusBit(110+x);
    }

    //Check if badge is reset(0 = cheated!) or new(3) or error(2)
    if (idSet != 1) {
    127e:	d1 30       	cpi	r29, 0x01	; 1
        Reset();
    1280:	11 f0       	breq	.+4      	; 0x1286 <LoadGameState+0x26>
    1282:	c5 df       	rcall	.-118    	; 0x120e <Reset>
    } else getID();
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <LoadGameState+0x28>
    1286:	b5 df       	rcall	.-150    	; 0x11f2 <getID>

    inventory[0] = (gameState[INVADDR]<<8|gameState[INVADDR+1]);
    1288:	80 91 4a 3a 	lds	r24, 0x3A4A	; 0x803a4a <gameState+0x10>
    128c:	90 91 4b 3a 	lds	r25, 0x3A4B	; 0x803a4b <gameState+0x11>
    1290:	98 27       	eor	r25, r24
    1292:	89 27       	eor	r24, r25
    1294:	98 27       	eor	r25, r24
    1296:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    129a:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    inventory[1] = (gameState[INVADDR+2]<<8|gameState[INVADDR+3]);
    129e:	80 91 4c 3a 	lds	r24, 0x3A4C	; 0x803a4c <gameState+0x12>
    12a2:	90 91 4d 3a 	lds	r25, 0x3A4D	; 0x803a4d <gameState+0x13>
    12a6:	98 27       	eor	r25, r24
    12a8:	89 27       	eor	r24, r25
    12aa:	98 27       	eor	r25, r24
    12ac:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    12b0:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <HotSummer>:
    //Write bit 0, must always be 1!
    WriteStatusBit(0, 1);
}

//Sets specific game bits after the badge is heated for one and two times.
uint8_t HotSummer(){
    12ba:	cf 93       	push	r28
    static uint8_t cooledDown = 0;

    if (CheckState(SUMMERS_COMPLETED)){
    12bc:	86 e7       	ldi	r24, 0x76	; 118
    12be:	89 df       	rcall	.-238    	; 0x11d2 <CheckState>
    12c0:	c8 2f       	mov	r28, r24
    12c2:	88 23       	and	r24, r24
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <HotSummer+0x2c>
        iLED[SCARAB[G]] = 0;
    12c6:	e0 91 61 b5 	lds	r30, 0xB561	; 0x80b561 <__bss_end+0x7a56>
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	e5 54       	subi	r30, 0x45	; 69
    12ce:	f5 4c       	sbci	r31, 0xC5	; 197
    12d0:	10 82       	st	Z, r1
        iLED[SCARAB[R]] = dimValue;
    12d2:	e0 91 60 b5 	lds	r30, 0xB560	; 0x80b560 <__bss_end+0x7a55>
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    12dc:	e5 54       	subi	r30, 0x45	; 69
    12de:	f5 4c       	sbci	r31, 0xC5	; 197
    12e0:	80 83       	st	Z, r24
        return 1;
    12e2:	c1 e0       	ldi	r28, 0x01	; 1
    12e4:	4c c0       	rjmp	.+152    	; 0x137e <HotSummer+0xc4>
    }

    if (CheckState(FIRST_SUMMER)) {
    12e6:	85 e7       	ldi	r24, 0x75	; 117
    12e8:	74 df       	rcall	.-280    	; 0x11d2 <CheckState>
    12ea:	88 23       	and	r24, r24
    12ec:	59 f1       	breq	.+86     	; 0x1344 <HotSummer+0x8a>
        iLED[SCARAB[G]] = dimValue;
    12ee:	e0 91 61 b5 	lds	r30, 0xB561	; 0x80b561 <__bss_end+0x7a56>
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    12f8:	e5 54       	subi	r30, 0x45	; 69
    12fa:	f5 4c       	sbci	r31, 0xC5	; 197
    12fc:	80 83       	st	Z, r24
        if ((cooledDown) && (adcTemp >= (calTemp + 8))) {
    12fe:	80 91 48 38 	lds	r24, 0x3848	; 0x803848 <cooledDown.3938>
    1302:	88 23       	and	r24, r24
    1304:	79 f0       	breq	.+30     	; 0x1324 <HotSummer+0x6a>
    1306:	80 91 99 3a 	lds	r24, 0x3A99	; 0x803a99 <calTemp>
    130a:	90 91 9a 3a 	lds	r25, 0x3A9A	; 0x803a9a <calTemp+0x1>
    130e:	20 91 e6 3a 	lds	r18, 0x3AE6	; 0x803ae6 <adcTemp>
    1312:	30 91 e7 3a 	lds	r19, 0x3AE7	; 0x803ae7 <adcTemp+0x1>
    1316:	08 96       	adiw	r24, 0x08	; 8
    1318:	28 17       	cp	r18, r24
    131a:	39 07       	cpc	r19, r25
            UpdateState(SUMMERS_COMPLETED);
    131c:	18 f0       	brcs	.+6      	; 0x1324 <HotSummer+0x6a>
    131e:	86 e7       	ldi	r24, 0x76	; 118
    1320:	4e df       	rcall	.-356    	; 0x11be <UpdateState>
            return 0;
    1322:	2d c0       	rjmp	.+90     	; 0x137e <HotSummer+0xc4>
        }
        if (adcTemp <= (calTemp + 2)) cooledDown = 1;
    1324:	80 91 99 3a 	lds	r24, 0x3A99	; 0x803a99 <calTemp>
    1328:	90 91 9a 3a 	lds	r25, 0x3A9A	; 0x803a9a <calTemp+0x1>
    132c:	20 91 e6 3a 	lds	r18, 0x3AE6	; 0x803ae6 <adcTemp>
    1330:	30 91 e7 3a 	lds	r19, 0x3AE7	; 0x803ae7 <adcTemp+0x1>
    1334:	02 96       	adiw	r24, 0x02	; 2
    1336:	82 17       	cp	r24, r18
    1338:	93 07       	cpc	r25, r19
    133a:	08 f1       	brcs	.+66     	; 0x137e <HotSummer+0xc4>
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 48 38 	sts	0x3848, r24	; 0x803848 <cooledDown.3938>
    1342:	1d c0       	rjmp	.+58     	; 0x137e <HotSummer+0xc4>
                   
    } else {
        if (calTemp == 0) calTemp = adcTemp;
    1344:	80 91 99 3a 	lds	r24, 0x3A99	; 0x803a99 <calTemp>
    1348:	90 91 9a 3a 	lds	r25, 0x3A9A	; 0x803a9a <calTemp+0x1>
    134c:	89 2b       	or	r24, r25
    134e:	41 f4       	brne	.+16     	; 0x1360 <HotSummer+0xa6>
    1350:	80 91 e6 3a 	lds	r24, 0x3AE6	; 0x803ae6 <adcTemp>
    1354:	90 91 e7 3a 	lds	r25, 0x3AE7	; 0x803ae7 <adcTemp+0x1>
    1358:	80 93 99 3a 	sts	0x3A99, r24	; 0x803a99 <calTemp>
    135c:	90 93 9a 3a 	sts	0x3A9A, r25	; 0x803a9a <calTemp+0x1>
        if (adcTemp >= (calTemp + 8)) {
    1360:	80 91 99 3a 	lds	r24, 0x3A99	; 0x803a99 <calTemp>
    1364:	90 91 9a 3a 	lds	r25, 0x3A9A	; 0x803a9a <calTemp+0x1>
    1368:	20 91 e6 3a 	lds	r18, 0x3AE6	; 0x803ae6 <adcTemp>
    136c:	30 91 e7 3a 	lds	r19, 0x3AE7	; 0x803ae7 <adcTemp+0x1>
    1370:	08 96       	adiw	r24, 0x08	; 8
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
            UpdateState(FIRST_SUMMER);
    1376:	18 f0       	brcs	.+6      	; 0x137e <HotSummer+0xc4>
    1378:	85 e7       	ldi	r24, 0x75	; 117
    137a:	21 df       	rcall	.-446    	; 0x11be <UpdateState>
        }
    }
    return 0;
    137c:	c0 e0       	ldi	r28, 0x00	; 0
}
    137e:	8c 2f       	mov	r24, r28
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <GenerateBlinks>:

void GenerateBlinks(){
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    static uint8_t test = 0;
    iLED[WING[L][test%5]] = 0;
    1388:	20 91 47 38 	lds	r18, 0x3847	; 0x803847 <test.3941>
    138c:	82 2f       	mov	r24, r18
    138e:	65 e0       	ldi	r22, 0x05	; 5
    1390:	0e 94 44 1a 	call	0x3488	; 0x3488 <__udivmodqi4>
    1394:	e9 2f       	mov	r30, r25
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ee 59       	subi	r30, 0x9E	; 158
    139a:	fa 44       	sbci	r31, 0x4A	; 74
    139c:	e5 81       	ldd	r30, Z+5	; 0x05
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	e5 54       	subi	r30, 0x45	; 69
    13a2:	f5 4c       	sbci	r31, 0xC5	; 197
    13a4:	10 82       	st	Z, r1
    iLED[WING[L][(test+1)%5]] = dimValue;
    13a6:	82 2f       	mov	r24, r18
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	65 e0       	ldi	r22, 0x05	; 5
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divmodhi4>
    13b4:	fc 01       	movw	r30, r24
    13b6:	ee 59       	subi	r30, 0x9E	; 158
    13b8:	fa 44       	sbci	r31, 0x4A	; 74
    13ba:	e5 81       	ldd	r30, Z+5	; 0x05
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <dimValue>
    13c2:	e5 54       	subi	r30, 0x45	; 69
    13c4:	f5 4c       	sbci	r31, 0xC5	; 197
    13c6:	80 83       	st	Z, r24
    ++test;
    13c8:	2f 5f       	subi	r18, 0xFF	; 255
    13ca:	20 93 47 38 	sts	0x3847, r18	; 0x803847 <test.3941>
    13ce:	82 e6       	ldi	r24, 0x62	; 98
    13d0:	95 eb       	ldi	r25, 0xB5	; 181
    13d2:	cc e6       	ldi	r28, 0x6C	; 108
    13d4:	d5 eb       	ldi	r29, 0xB5	; 181

    for (uint8_t x=0; x<5; ++x){
        iLED[WING[R][x]] = iLED[WING[L][4-x]];
    13d6:	dc 01       	movw	r26, r24
    13d8:	ed 91       	ld	r30, X+
    13da:	cd 01       	movw	r24, r26
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	aa 91       	ld	r26, -Y
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	a5 54       	subi	r26, 0x45	; 69
    13e4:	b5 4c       	sbci	r27, 0xC5	; 197
    13e6:	2c 91       	ld	r18, X
    13e8:	e5 54       	subi	r30, 0x45	; 69
    13ea:	f5 4c       	sbci	r31, 0xC5	; 197
    13ec:	20 83       	st	Z, r18
    static uint8_t test = 0;
    iLED[WING[L][test%5]] = 0;
    iLED[WING[L][(test+1)%5]] = dimValue;
    ++test;

    for (uint8_t x=0; x<5; ++x){
    13ee:	b5 eb       	ldi	r27, 0xB5	; 181
    13f0:	c7 36       	cpi	r28, 0x67	; 103
    13f2:	db 07       	cpc	r29, r27
    13f4:	81 f7       	brne	.-32     	; 0x13d6 <GenerateBlinks+0x52>
        iLED[WING[R][x]] = iLED[WING[L][4-x]];
    }
}
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <GenerateAudio>:


uint8_t GenerateAudio(){
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29

    //auRepAddr = &auBuffer[0];

    //Audio for text adventure
    if ((effect&0xff00)==0) {
    1404:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1408:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    140c:	88 27       	eor	r24, r24
    140e:	89 2b       	or	r24, r25
    1410:	09 f0       	breq	.+2      	; 0x1414 <GenerateAudio+0x18>
    1412:	c3 c0       	rjmp	.+390    	; 0x159a <GenerateAudio+0x19e>

        //Silence
        if ((effect&0xE0)==0){
    1414:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1418:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    141c:	80 7e       	andi	r24, 0xE0	; 224
    141e:	99 27       	eor	r25, r25
    1420:	89 2b       	or	r24, r25
    1422:	31 f4       	brne	.+12     	; 0x1430 <GenerateAudio+0x34>
            auRepAddr = &zero;
    1424:	8b e2       	ldi	r24, 0x2B	; 43
    1426:	98 e3       	ldi	r25, 0x38	; 56
    1428:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    142c:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
        }

        //Bad (buzzer)
        if ((effect&0xE0)==32){
    1430:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1434:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1438:	80 7e       	andi	r24, 0xE0	; 224
    143a:	99 27       	eor	r25, r25
    143c:	80 97       	sbiw	r24, 0x20	; 32
    143e:	09 f0       	breq	.+2      	; 0x1442 <GenerateAudio+0x46>
    1440:	59 c0       	rjmp	.+178    	; 0x14f4 <GenerateAudio+0xf8>
            static uint8_t auBuffer[17] = {1, 255, 128, 128, 192, 255, 64, 255, 192, 128, 64, 1, 192, 1, 64, 128, 0}; 
            static uint8_t loudness, duration, start;
            floatSpeed(1, 0x2000, 0x2200);
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	52 e2       	ldi	r21, 0x22	; 34
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	70 e2       	ldi	r23, 0x20	; 32
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	b3 dd       	rcall	.-1178   	; 0xfb4 <floatSpeed>
            auBuffer[2] = floatAround(0x80, 5, 0x01, 0x00);
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	65 e0       	ldi	r22, 0x05	; 5
    1454:	80 e8       	ldi	r24, 0x80	; 128
    1456:	e0 dd       	rcall	.-1088   	; 0x1018 <floatAround>
    1458:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <auBuffer.3948+0x2>

            if (buttonMark) {
    145c:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    1460:	88 23       	and	r24, r24
    1462:	09 f4       	brne	.+2      	; 0x1466 <GenerateAudio+0x6a>
    1464:	47 c0       	rjmp	.+142    	; 0x14f4 <GenerateAudio+0xf8>
                if (start == 0) {
    1466:	80 91 46 38 	lds	r24, 0x3846	; 0x803846 <start.3951>
    146a:	81 11       	cpse	r24, r1
    146c:	15 c0       	rjmp	.+42     	; 0x1498 <GenerateAudio+0x9c>
                    duration = 4;
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	80 93 45 38 	sts	0x3845, r24	; 0x803845 <duration.3950>
                    loudness = 0xff;
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <loudness.3949>
                    TCB1_CCMP = 0x2000;
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e2       	ldi	r25, 0x20	; 32
    147e:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <__TEXT_REGION_LENGTH__+0x700a5c>
    1482:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <__TEXT_REGION_LENGTH__+0x700a5d>
                    auRepAddr = &auBuffer[0];
    1486:	8b e0       	ldi	r24, 0x0B	; 11
    1488:	98 e3       	ldi	r25, 0x38	; 56
    148a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    148e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    start = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	80 93 46 38 	sts	0x3846, r24	; 0x803846 <start.3951>
                }

                if (loudness) {
    1498:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <loudness.3949>
    149c:	88 23       	and	r24, r24
    149e:	69 f0       	breq	.+26     	; 0x14ba <GenerateAudio+0xbe>
                    auVolume = loudness;
    14a0:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <auVolume>
                    if (duration) duration--; else loudness >>= 1;
    14a4:	90 91 45 38 	lds	r25, 0x3845	; 0x803845 <duration.3950>
    14a8:	99 23       	and	r25, r25
    14aa:	21 f0       	breq	.+8      	; 0x14b4 <GenerateAudio+0xb8>
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	90 93 45 38 	sts	0x3845, r25	; 0x803845 <duration.3950>
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <GenerateAudio+0xbe>
    14b4:	86 95       	lsr	r24
    14b6:	80 93 44 38 	sts	0x3844, r24	; 0x803844 <loudness.3949>
                } 

                if (loudness == 0) {
    14ba:	80 91 44 38 	lds	r24, 0x3844	; 0x803844 <loudness.3949>
    14be:	81 11       	cpse	r24, r1
    14c0:	19 c0       	rjmp	.+50     	; 0x14f4 <GenerateAudio+0xf8>
                    effect &= 0x10;
    14c2:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14c6:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    14ca:	80 71       	andi	r24, 0x10	; 16
    14cc:	99 27       	eor	r25, r25
    14ce:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    14d2:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                    auRepAddr = &zero;
    14d6:	8b e2       	ldi	r24, 0x2B	; 43
    14d8:	98 e3       	ldi	r25, 0x38	; 56
    14da:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    14de:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
                    auSmpAddr = &zero;
    14e2:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <auSmpAddr>
    14e6:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <auSmpAddr+0x1>
                    auVolume = 0xff;
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <auVolume>
                    start = 0;
    14f0:	10 92 46 38 	sts	0x3846, r1	; 0x803846 <start.3951>
                }
            }
        }

        //Good (bell)
        if ((effect&0xE0)==64){
    14f4:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    14f8:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
            //auBuffer = 
        }

        //Rain storm with whistling wind
        if ((effect&0xE0)==96){
    14fc:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1500:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1504:	80 7e       	andi	r24, 0xE0	; 224
    1506:	99 27       	eor	r25, r25
    1508:	80 36       	cpi	r24, 0x60	; 96
    150a:	91 05       	cpc	r25, r1
    150c:	d1 f5       	brne	.+116    	; 0x1582 <GenerateAudio+0x186>
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
    150e:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <auBuffer.3952+0x6>
            auRepAddr = &auBuffer[0];
    1512:	8d e3       	ldi	r24, 0x3D	; 61
    1514:	98 e3       	ldi	r25, 0x38	; 56
    1516:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <auRepAddr>
    151a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <auRepAddr+0x1>
    151e:	8c 01       	movw	r16, r24

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    1520:	c1 e0       	ldi	r28, 0x01	; 1
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
    1522:	d3 e0       	ldi	r29, 0x03	; 3
    1524:	8c 2f       	mov	r24, r28
    1526:	6d 2f       	mov	r22, r29
    1528:	0e 94 44 1a 	call	0x3488	; 0x3488 <__udivmodqi4>
    152c:	99 23       	and	r25, r25
    152e:	39 f0       	breq	.+14     	; 0x153e <GenerateAudio+0x142>
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	65 e0       	ldi	r22, 0x05	; 5
    1536:	80 e8       	ldi	r24, 0x80	; 128
    1538:	6f dd       	rcall	.-1314   	; 0x1018 <floatAround>
    153a:	f8 01       	movw	r30, r16
    153c:	81 83       	std	Z+1, r24	; 0x01
            static uint8_t auBuffer[7];
            auBuffer[6]= 0;        
            auRepAddr = &auBuffer[0];

            //Noise is to be generated fast, outside of buttonMark loop
            for (uint8_t x=1; x<6; ++x){
    153e:	cf 5f       	subi	r28, 0xFF	; 255
    1540:	0f 5f       	subi	r16, 0xFF	; 255
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	c6 30       	cpi	r28, 0x06	; 6
    1546:	71 f7       	brne	.-36     	; 0x1524 <GenerateAudio+0x128>
                if (x%3) auBuffer[x] = floatAround(0x80, 5, 0x01, 0x00);
            }

            if (buttonMark){
    1548:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    154c:	88 23       	and	r24, r24
    154e:	c9 f0       	breq	.+50     	; 0x1582 <GenerateAudio+0x186>
                //"Floating" speed for howl (and noise, but that's hardly audible)
                floatSpeed(5, 0x0280, 0x0400);
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	54 e0       	ldi	r21, 0x04	; 4
    1554:	60 e8       	ldi	r22, 0x80	; 128
    1556:	72 e0       	ldi	r23, 0x02	; 2
    1558:	85 e0       	ldi	r24, 0x05	; 5
    155a:	2c dd       	rcall	.-1448   	; 0xfb4 <floatSpeed>
            
                //"Floating" volume and wind howl during 8 bit rainstorm needs some randomness
                auVolume = floatAround(auVolume, 2, 0x10, 0xA0);
    155c:	80 91 8f 3a 	lds	r24, 0x3A8F	; 0x803a8f <auVolume>
    1560:	20 ea       	ldi	r18, 0xA0	; 160
    1562:	40 e1       	ldi	r20, 0x10	; 16
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	58 dd       	rcall	.-1360   	; 0x1018 <floatAround>
    1568:	80 93 8f 3a 	sts	0x3A8F, r24	; 0x803a8f <auVolume>
                auBuffer[0] = floatAround(auBuffer[0], 2, 0x70, 0x90);
    156c:	20 e9       	ldi	r18, 0x90	; 144
    156e:	40 e7       	ldi	r20, 0x70	; 112
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	80 91 3d 38 	lds	r24, 0x383D	; 0x80383d <auBuffer.3952>
    1576:	50 dd       	rcall	.-1376   	; 0x1018 <floatAround>
    1578:	80 93 3d 38 	sts	0x383D, r24	; 0x80383d <auBuffer.3952>
                auBuffer[3] = 0xFF-auBuffer[0];  //Inverse value of wind[0] produces a whistle
    157c:	80 95       	com	r24
    157e:	80 93 40 38 	sts	0x3840, r24	; 0x803840 <auBuffer.3952+0x3>
            }
        }

        //Footsteps
        if ((effect&0xE0)==128){
    1582:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1586:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        }

        //
        if ((effect&0xE0)==160){
    158a:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    158e:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>

        }

        //
        if ((effect&0xE0)==192){
    1592:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1596:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
        //
        else {
        }
    }

    return buttonMark;
    159a:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <buttonMark>
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	08 95       	ret

000015a8 <BastetDictates>:

// Main game loop
uint8_t BastetDictates(){
  
    return 0;
}
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	08 95       	ret

000015ac <Cheat>:

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    reactStr[2][number]=type;
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	62 97       	sbiw	r28, 0x12	; 18
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	8a 8b       	std	Y+18, r24	; 0x12
    15be:	80 e1       	ldi	r24, 0x10	; 16
    15c0:	e6 e3       	ldi	r30, 0x36	; 54
    15c2:	f5 eb       	ldi	r31, 0xB5	; 181
    15c4:	de 01       	movw	r26, r28
    15c6:	11 96       	adiw	r26, 0x01	; 1
    15c8:	01 90       	ld	r0, Z+
    15ca:	0d 92       	st	X+, r0
    15cc:	8a 95       	dec	r24
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <Cheat+0x1c>
    15d0:	fe 01       	movw	r30, r28
    15d2:	31 96       	adiw	r30, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	21 91       	ld	r18, Z+
    15da:	31 91       	ld	r19, Z+
    15dc:	26 17       	cp	r18, r22
    15de:	37 07       	cpc	r19, r23
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <Cheat+0x38>
    15e2:	89 2f       	mov	r24, r25
    15e4:	9f 5f       	subi	r25, 0xFF	; 255
    15e6:	98 30       	cpi	r25, 0x08	; 8
    15e8:	b9 f7       	brne	.-18     	; 0x15d8 <Cheat+0x2c>
    15ea:	88 30       	cpi	r24, 0x08	; 8
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <Cheat+0x46>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <Cheat+0x6a>
    15f2:	18 e1       	ldi	r17, 0x18	; 24
    15f4:	18 0f       	add	r17, r24
    15f6:	41 e0       	ldi	r20, 0x01	; 1
    15f8:	be 01       	movw	r22, r28
    15fa:	6f 5e       	subi	r22, 0xEF	; 239
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	81 2f       	mov	r24, r17
    1600:	04 dc       	rcall	.-2040   	; 0xe0a <EERead>
    1602:	89 89       	ldd	r24, Y+17	; 0x11
    1604:	8f 3f       	cpi	r24, 0xFF	; 255
    1606:	99 f7       	brne	.-26     	; 0x15ee <Cheat+0x42>
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	be 01       	movw	r22, r28
    160c:	6e 5e       	subi	r22, 0xEE	; 238
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	81 2f       	mov	r24, r17
    1612:	0b dc       	rcall	.-2026   	; 0xe2a <EEWrite>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	62 96       	adiw	r28, 0x12	; 18
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	08 95       	ret

00001624 <DecryptData>:
    1624:	f9 01       	movw	r30, r18
    1626:	9c 01       	movw	r18, r24
    1628:	2e 1b       	sub	r18, r30
    162a:	3f 0b       	sbc	r19, r31
    162c:	88 e0       	ldi	r24, 0x08	; 8
    162e:	48 9f       	mul	r20, r24
    1630:	a0 01       	movw	r20, r0
    1632:	11 24       	eor	r1, r1
    1634:	40 50       	subi	r20, 0x00	; 0
    1636:	5a 44       	sbci	r21, 0x4A	; 74
    1638:	66 23       	and	r22, r22
    163a:	69 f0       	breq	.+26     	; 0x1656 <DecryptData+0x32>
    163c:	df 01       	movw	r26, r30
    163e:	a2 0f       	add	r26, r18
    1640:	b3 1f       	adc	r27, r19
    1642:	a7 70       	andi	r26, 0x07	; 7
    1644:	bb 27       	eor	r27, r27
    1646:	a4 0f       	add	r26, r20
    1648:	b5 1f       	adc	r27, r21
    164a:	80 81       	ld	r24, Z
    164c:	9c 91       	ld	r25, X
    164e:	98 27       	eor	r25, r24
    1650:	91 93       	st	Z+, r25
    1652:	61 50       	subi	r22, 0x01	; 1
    1654:	f1 cf       	rjmp	.-30     	; 0x1638 <DecryptData+0x14>
    1656:	08 95       	ret

00001658 <UnflipData>:
    1658:	26 2f       	mov	r18, r22
    165a:	fb 01       	movw	r30, r22
    165c:	35 e5       	ldi	r19, 0x55	; 85
    165e:	9e 2f       	mov	r25, r30
    1660:	92 1b       	sub	r25, r18
    1662:	98 17       	cp	r25, r24
    1664:	28 f4       	brcc	.+10     	; 0x1670 <UnflipData+0x18>
    1666:	90 81       	ld	r25, Z
    1668:	92 95       	swap	r25
    166a:	93 27       	eor	r25, r19
    166c:	91 93       	st	Z+, r25
    166e:	f7 cf       	rjmp	.-18     	; 0x165e <UnflipData+0x6>
    1670:	08 95       	ret

00001672 <ExtEERead>:
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 d0       	rcall	.+0      	; 0x1688 <ExtEERead+0x16>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	d6 2e       	mov	r13, r22
    168e:	c4 2e       	mov	r12, r20
    1690:	59 01       	movw	r10, r18
    1692:	7c 01       	movw	r14, r24
    1694:	e8 94       	clt
    1696:	f7 f8       	bld	r15, 7
    1698:	f9 82       	std	Y+1, r15	; 0x01
    169a:	ea 82       	std	Y+2, r14	; 0x02
    169c:	06 2f       	mov	r16, r22
    169e:	42 e0       	ldi	r20, 0x02	; 2
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	80 e5       	ldi	r24, 0x50	; 80
    16a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <I2C_read_bytes>
    16ac:	18 2f       	mov	r17, r24
    16ae:	81 11       	cpse	r24, r1
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <ExtEERead+0x4a>
    16b2:	95 01       	movw	r18, r10
    16b4:	4c 2d       	mov	r20, r12
    16b6:	6d 2d       	mov	r22, r13
    16b8:	c7 01       	movw	r24, r14
    16ba:	b4 df       	rcall	.-152    	; 0x1624 <DecryptData>
    16bc:	81 2f       	mov	r24, r17
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	08 95       	ret

000016d8 <ClearTxAfter>:
    16d8:	8f 5f       	subi	r24, 0xFF	; 255
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	30 f4       	brcc	.+12     	; 0x16ea <ClearTxAfter+0x12>
    16de:	e8 2f       	mov	r30, r24
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	ef 5d       	subi	r30, 0xDF	; 223
    16e4:	f5 4c       	sbci	r31, 0xC5	; 197
    16e6:	10 82       	st	Z, r1
    16e8:	f7 cf       	rjmp	.-18     	; 0x16d8 <ClearTxAfter>
    16ea:	08 95       	ret

000016ec <StartsWith>:
    16ec:	ac 01       	movw	r20, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	e9 2f       	mov	r30, r25
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	da 01       	movw	r26, r20
    16f6:	ae 0f       	add	r26, r30
    16f8:	bf 1f       	adc	r27, r31
    16fa:	3c 91       	ld	r19, X
    16fc:	e6 0f       	add	r30, r22
    16fe:	f7 1f       	adc	r31, r23
    1700:	31 11       	cpse	r19, r1
    1702:	05 c0       	rjmp	.+10     	; 0x170e <StartsWith+0x22>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 81       	ld	r25, Z
    1708:	99 23       	and	r25, r25
    170a:	49 f0       	breq	.+18     	; 0x171e <StartsWith+0x32>
    170c:	07 c0       	rjmp	.+14     	; 0x171c <StartsWith+0x30>
    170e:	20 81       	ld	r18, Z
    1710:	22 23       	and	r18, r18
    1712:	c1 f3       	breq	.-16     	; 0x1704 <StartsWith+0x18>
    1714:	32 13       	cpse	r19, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <StartsWith+0x30>
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	ea cf       	rjmp	.-44     	; 0x16f0 <StartsWith+0x4>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret

00001720 <PrepareSending>:
    1720:	61 15       	cp	r22, r1
    1722:	71 05       	cpc	r23, r1
    1724:	51 f1       	breq	.+84     	; 0x177a <PrepareSending+0x5a>
    1726:	e9 e2       	ldi	r30, 0x29	; 41
    1728:	fa e3       	ldi	r31, 0x3A	; 58
    172a:	a1 e2       	ldi	r26, 0x21	; 33
    172c:	ba e3       	ldi	r27, 0x3A	; 58
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	6f 3f       	cpi	r22, 0xFF	; 255
    1734:	71 05       	cpc	r23, r1
    1736:	69 f0       	breq	.+26     	; 0x1752 <PrepareSending+0x32>
    1738:	60 f0       	brcs	.+24     	; 0x1752 <PrepareSending+0x32>
    173a:	81 93       	st	Z+, r24
    173c:	91 93       	st	Z+, r25
    173e:	3d 93       	st	X+, r19
    1740:	81 50       	subi	r24, 0x01	; 1
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	6f 5f       	subi	r22, 0xFF	; 255
    1746:	71 09       	sbc	r23, r1
    1748:	2f 5f       	subi	r18, 0xFF	; 255
    174a:	27 30       	cpi	r18, 0x07	; 7
    174c:	91 f7       	brne	.-28     	; 0x1732 <PrepareSending+0x12>
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	08 95       	ret
    1752:	e2 2f       	mov	r30, r18
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	df 01       	movw	r26, r30
    1758:	aa 0f       	add	r26, r26
    175a:	bb 1f       	adc	r27, r27
    175c:	a7 5d       	subi	r26, 0xD7	; 215
    175e:	b5 4c       	sbci	r27, 0xC5	; 197
    1760:	8d 93       	st	X+, r24
    1762:	9c 93       	st	X, r25
    1764:	ef 5d       	subi	r30, 0xDF	; 223
    1766:	f5 4c       	sbci	r31, 0xC5	; 197
    1768:	cb 01       	movw	r24, r22
    176a:	6f ef       	ldi	r22, 0xFF	; 255
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__udivmodhi4>
    1772:	80 83       	st	Z, r24
    1774:	40 93 1f 3a 	sts	0x3A1F, r20	; 0x803a1f <txTypeNow>
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <PrepareSending+0x64>
    177a:	10 92 29 3a 	sts	0x3A29, r1	; 0x803a29 <txAddrList>
    177e:	10 92 2a 3a 	sts	0x3A2A, r1	; 0x803a2a <txAddrList+0x1>
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	82 2f       	mov	r24, r18
    1786:	a8 df       	rcall	.-176    	; 0x16d8 <ClearTxAfter>
    1788:	10 92 20 3a 	sts	0x3A20, r1	; 0x803a20 <txAddrNow>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	08 95       	ret

00001790 <SetStandardResponse>:
}

//
uint8_t SetStandardResponse(uint8_t custStrEnd){
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	f9 01       	movw	r30, r18
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	ec 50       	subi	r30, 0x0C	; 12
    17a0:	f7 4c       	sbci	r31, 0xC7	; 199
    17a2:	ab e5       	ldi	r26, 0x5B	; 91
    17a4:	ba e7       	ldi	r27, 0x7A	; 122
    17a6:	a0 83       	st	Z, r26
    17a8:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    17aa:	f9 01       	movw	r30, r18
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	ec 5c       	subi	r30, 0xCC	; 204
    17b2:	f6 4c       	sbci	r31, 0xC6	; 198
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	60 83       	st	Z, r22
    17ba:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	f9 01       	movw	r30, r18
    17c2:	ec 58       	subi	r30, 0x8C	; 140
    17c4:	f6 4c       	sbci	r31, 0xC6	; 198
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	40 83       	st	Z, r20
    17cc:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	28 0f       	add	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	f9 01       	movw	r30, r18
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	ec 50       	subi	r30, 0x0C	; 12
    17dc:	f7 4c       	sbci	r31, 0xC7	; 199
    17de:	c4 e6       	ldi	r28, 0x64	; 100
    17e0:	da e7       	ldi	r29, 0x7A	; 122
    17e2:	c0 83       	st	Z, r28
    17e4:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[1][number]=length;
    17e6:	f9 01       	movw	r30, r18
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	ec 5c       	subi	r30, 0xCC	; 204
    17ee:	f6 4c       	sbci	r31, 0xC6	; 198
    17f0:	ca e0       	ldi	r28, 0x0A	; 10
    17f2:	d0 e0       	ldi	r29, 0x00	; 0
    17f4:	c0 83       	st	Z, r28
    17f6:	d1 83       	std	Z+1, r29	; 0x01
    reactStr[2][number]=type;
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	f9 01       	movw	r30, r18
    17fe:	ec 58       	subi	r30, 0x8C	; 140
    1800:	f6 4c       	sbci	r31, 0xC6	; 198
    1802:	40 83       	st	Z, r20
    1804:	51 83       	std	Z+1, r21	; 0x01
uint8_t SetStandardResponse(uint8_t custStrEnd){

    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_LOCATION, L_LOCATION, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);
    reactStr[0][custStrEnd++] = CURR_LOC;
    1806:	e2 e0       	ldi	r30, 0x02	; 2
    1808:	e8 0f       	add	r30, r24
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	ee 0f       	add	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	ec 50       	subi	r30, 0x0C	; 12
    1812:	f7 4c       	sbci	r31, 0xC7	; 199
    1814:	20 ef       	ldi	r18, 0xF0	; 240
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	20 83       	st	Z, r18
    181a:	31 83       	std	Z+1, r19	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    181c:	23 e0       	ldi	r18, 0x03	; 3
    181e:	28 0f       	add	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ec 50       	subi	r30, 0x0C	; 12
    182a:	f7 4c       	sbci	r31, 0xC7	; 199
    182c:	a0 83       	st	Z, r26
    182e:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1830:	f9 01       	movw	r30, r18
    1832:	ee 0f       	add	r30, r30
    1834:	ff 1f       	adc	r31, r31
    1836:	ec 5c       	subi	r30, 0xCC	; 204
    1838:	f6 4c       	sbci	r31, 0xC6	; 198
    183a:	60 83       	st	Z, r22
    183c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	f9 01       	movw	r30, r18
    1844:	ec 58       	subi	r30, 0x8C	; 140
    1846:	f6 4c       	sbci	r31, 0xC6	; 198
    1848:	40 83       	st	Z, r20
    184a:	51 83       	std	Z+1, r21	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    184c:	24 e0       	ldi	r18, 0x04	; 4
    184e:	28 0f       	add	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	f9 01       	movw	r30, r18
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ec 50       	subi	r30, 0x0C	; 12
    185a:	f7 4c       	sbci	r31, 0xC7	; 199
    185c:	a7 e5       	ldi	r26, 0x57	; 87
    185e:	ba e7       	ldi	r27, 0x7A	; 122
    1860:	a0 83       	st	Z, r26
    1862:	b1 83       	std	Z+1, r27	; 0x01
    reactStr[1][number]=length;
    1864:	f9 01       	movw	r30, r18
    1866:	ee 0f       	add	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	ec 5c       	subi	r30, 0xCC	; 204
    186c:	f6 4c       	sbci	r31, 0xC6	; 198
    186e:	60 83       	st	Z, r22
    1870:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	f9 01       	movw	r30, r18
    1878:	ec 58       	subi	r30, 0x8C	; 140
    187a:	f6 4c       	sbci	r31, 0xC6	; 198
    187c:	40 83       	st	Z, r20
    187e:	51 83       	std	Z+1, r21	; 0x01
    SetResponse(custStrEnd++, A_LF, 2, TEASER);
    SetResponse(custStrEnd++, A_PROMPT, L_PROMPT, TEASER);
    //SetResponse(custStrEnd++, A_SPACE, L_SPACE, TEASER);

    return custStrEnd;
}
    1880:	8b 5f       	subi	r24, 0xFB	; 251
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <PopulateObject>:

//Get all the relevant data and string addresses of an object
void PopulateObject(uint16_t offset, object_model_t *object){
    1888:	af 92       	push	r10
    188a:	bf 92       	push	r11
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	2c 97       	sbiw	r28, 0x0c	; 12
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	7c 01       	movw	r14, r24
    18a6:	8b 01       	movw	r16, r22
    uint16_t parStr;
    offset += L_BOILER;

    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    18a8:	9e 01       	movw	r18, r28
    18aa:	2f 5f       	subi	r18, 0xFF	; 255
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	6c e0       	ldi	r22, 0x0C	; 12
    18b2:	80 96       	adiw	r24, 0x20	; 32
    18b4:	de de       	rcall	.-580    	; 0x1672 <ExtEERead>
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	98 27       	eor	r25, r24
    18bc:	89 27       	eor	r24, r25
    18be:	98 27       	eor	r25, r24
    18c0:	80 96       	adiw	r24, 0x20	; 32
    18c2:	f8 01       	movw	r30, r16
    18c4:	80 83       	st	Z, r24
    18c6:	91 83       	std	Z+1, r25	; 0x01
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	98 27       	eor	r25, r24
    18ce:	89 27       	eor	r24, r25
    18d0:	98 27       	eor	r25, r24
    18d2:	80 96       	adiw	r24, 0x20	; 32
    18d4:	82 83       	std	Z+2, r24	; 0x02
    18d6:	93 83       	std	Z+3, r25	; 0x03
    18d8:	de 01       	movw	r26, r28
    18da:	15 96       	adiw	r26, 0x05	; 5
    18dc:	34 96       	adiw	r30, 0x04	; 4
    18de:	c8 01       	movw	r24, r16
    18e0:	0c 96       	adiw	r24, 0x0c	; 12
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    18e2:	2d 91       	ld	r18, X+
    18e4:	21 93       	st	Z+, r18
    //Fill things with fixed distance to offset
    uint8_t data[OFF_STRINGFLDS];
    ExtEERead(offset, OFF_STRINGFLDS, GAME, &data[0]);
    object->addrNextObj = (data[OFF_NEXTOBJ]<<8|data[OFF_NEXTOBJ+1])+L_BOILER;
    object->addrNextLvl = (data[OFF_NEXTLVL]<<8|data[OFF_NEXTLVL+1])+L_BOILER;
    for (uint8_t x=0; x<BYTE_FIELDS_LEN; ++x){
    18e6:	e8 17       	cp	r30, r24
    18e8:	f9 07       	cpc	r31, r25
    18ea:	d9 f7       	brne	.-10     	; 0x18e2 <PopulateObject+0x5a>
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    18ec:	fc e2       	ldi	r31, 0x2C	; 44
    18ee:	ef 0e       	add	r14, r31
    18f0:	f1 1c       	adc	r15, r1
    18f2:	58 01       	movw	r10, r16
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    18f4:	d1 2c       	mov	r13, r1
        
        //Determine length
        ExtEERead(offset, 3, GAME, &data[0]);
    18f6:	9e 01       	movw	r18, r28
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
    18fa:	3f 4f       	sbci	r19, 0xFF	; 255
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	63 e0       	ldi	r22, 0x03	; 3
    1900:	c7 01       	movw	r24, r14
    1902:	b7 de       	rcall	.-658    	; 0x1672 <ExtEERead>
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	98 27       	eor	r25, r24
    190a:	89 27       	eor	r24, r25
    190c:	98 27       	eor	r25, r24
        parStr = (data[0]<<8|data[1]);
        offset += 2;
    190e:	97 01       	movw	r18, r14
    1910:	2e 5f       	subi	r18, 0xFE	; 254
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
        if (x >= OPEN_ACL_MSG){
    1914:	43 e0       	ldi	r20, 0x03	; 3
    1916:	4d 15       	cp	r20, r13
    1918:	80 f4       	brcc	.+32     	; 0x193a <PopulateObject+0xb2>
            object->lenStr[x]= parStr-1;
    191a:	ac 01       	movw	r20, r24
    191c:	41 50       	subi	r20, 0x01	; 1
    191e:	51 09       	sbc	r21, r1
    1920:	f8 01       	movw	r30, r16
    1922:	42 8f       	std	Z+26, r20	; 0x1a
    1924:	53 8f       	std	Z+27, r21	; 0x1b
            object->addrStr[x]=offset+1;
    1926:	f3 e0       	ldi	r31, 0x03	; 3
    1928:	ef 0e       	add	r14, r31
    192a:	f1 1c       	adc	r15, r1
    192c:	f8 01       	movw	r30, r16
    192e:	e4 86       	std	Z+12, r14	; 0x0c
    1930:	f5 86       	std	Z+13, r15	; 0x0d
            object->effect[x-OPEN_ACL_MSG] = data[2];
    1932:	4b 81       	ldd	r20, Y+3	; 0x03
    1934:	f5 01       	movw	r30, r10
    1936:	44 a3       	std	Z+36, r20	; 0x24
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <PopulateObject+0xbc>
        } else {
            object->lenStr[x]= parStr;
    193a:	f8 01       	movw	r30, r16
    193c:	82 8f       	std	Z+26, r24	; 0x1a
    193e:	93 8f       	std	Z+27, r25	; 0x1b
            object->addrStr[x]=offset;
    1940:	24 87       	std	Z+12, r18	; 0x0c
    1942:	35 87       	std	Z+13, r19	; 0x0d
        }
        
        //Determine string start location for next field
        offset += parStr;
    1944:	7c 01       	movw	r14, r24
    1946:	e2 0e       	add	r14, r18
    1948:	f3 1e       	adc	r15, r19
        object->byteField[x]=data[x+OFF_BYTEFLDS];
    }

    //Find out where all of the strings begin and how long they are
    offset += OFF_STRINGFLDS;
    for(uint8_t x=0; x<STRING_FIELDS_LEN; ++x){
    194a:	d3 94       	inc	r13
    194c:	0e 5f       	subi	r16, 0xFE	; 254
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	ff ef       	ldi	r31, 0xFF	; 255
    1952:	af 1a       	sub	r10, r31
    1954:	bf 0a       	sbc	r11, r31
    1956:	47 e0       	ldi	r20, 0x07	; 7
    1958:	d4 12       	cpse	r13, r20
    195a:	cd cf       	rjmp	.-102    	; 0x18f6 <PopulateObject+0x6e>
        }
        
        //Determine string start location for next field
        offset += parStr;
    }    
}
    195c:	2c 96       	adiw	r28, 0x0c	; 12
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	08 95       	ret

00001976 <CheckLetter>:

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	a0 97       	sbiw	r28, 0x20	; 32
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	c6 2e       	mov	r12, r22
    
    uint8_t found = 0;
    uint8_t data[32];

    object += L_BOILER;
    1992:	7c 01       	movw	r14, r24
    1994:	20 e2       	ldi	r18, 0x20	; 32
    1996:	e2 0e       	add	r14, r18
    1998:	f1 1c       	adc	r15, r1
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    199a:	9e 01       	movw	r18, r28
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	8c 96       	adiw	r24, 0x2c	; 44
    19a6:	65 de       	rcall	.-822    	; 0x1672 <ExtEERead>
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.
    19a8:	1a 81       	ldd	r17, Y+2	; 0x02
}

//Check if the entered letter corresponds with a name
uint8_t CheckLetter(uint16_t object, uint8_t letter){
    
    uint8_t found = 0;
    19aa:	d1 2c       	mov	r13, r1

    object += L_BOILER;
    ExtEERead(object+OFF_STRINGFLDS, 2, GAME, &data[0]);
    uint8_t x = data[1]; //Assuming a name is not longer than 255 characters.

    while (x){
    19ac:	11 23       	and	r17, r17
    19ae:	51 f1       	breq	.+84     	; 0x1a04 <CheckLetter+0x8e>
    19b0:	01 2f       	mov	r16, r17
    19b2:	11 32       	cpi	r17, 0x21	; 33
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <CheckLetter+0x42>
    19b6:	00 e2       	ldi	r16, 0x20	; 32
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
    19b8:	9e 01       	movw	r18, r28
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	60 2f       	mov	r22, r16
    19c2:	c7 01       	movw	r24, r14
    19c4:	0e 96       	adiw	r24, 0x0e	; 14
    19c6:	55 de       	rcall	.-854    	; 0x1672 <ExtEERead>
    19c8:	fe 01       	movw	r30, r28
    19ca:	31 96       	adiw	r30, 0x01	; 1
        for (uint8_t y=0; y<max; ++y){
    19cc:	80 e0       	ldi	r24, 0x00	; 0
            if (found){
    19ce:	dd 20       	and	r13, r13
    19d0:	61 f0       	breq	.+24     	; 0x19ea <CheckLetter+0x74>
                if ((data[y]|0x20) == letter) return 1; else return 0;
    19d2:	e1 e0       	ldi	r30, 0x01	; 1
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	ec 0f       	add	r30, r28
    19d8:	fd 1f       	adc	r31, r29
    19da:	e8 0f       	add	r30, r24
    19dc:	f1 1d       	adc	r31, r1
    19de:	90 81       	ld	r25, Z
    19e0:	90 62       	ori	r25, 0x20	; 32
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	9c 11       	cpse	r25, r12
    19e6:	0e c0       	rjmp	.+28     	; 0x1a04 <CheckLetter+0x8e>
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <CheckLetter+0x90>
            }
            if (data[y] == '[') found = 1;
    19ea:	91 91       	ld	r25, Z+
    19ec:	dd 24       	eor	r13, r13
    19ee:	d3 94       	inc	r13
    19f0:	9b 35       	cpi	r25, 0x5B	; 91
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <CheckLetter+0x80>
    19f4:	d1 2c       	mov	r13, r1

    while (x){
        uint8_t max;
        if (x>32) max = 32; else max = x;
        ExtEERead(object+OFF_STRINGFLDS+2, max, GAME, &data[0]);
        for (uint8_t y=0; y<max; ++y){
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	80 17       	cp	r24, r16
    19fa:	48 f3       	brcs	.-46     	; 0x19ce <CheckLetter+0x58>
            if (found){
                if ((data[y]|0x20) == letter) return 1; else return 0;
            }
            if (data[y] == '[') found = 1;
        }
        object += max;
    19fc:	e0 0e       	add	r14, r16
    19fe:	f1 1c       	adc	r15, r1
        x -= max;
    1a00:	10 1b       	sub	r17, r16
    1a02:	d4 cf       	rjmp	.-88     	; 0x19ac <CheckLetter+0x36>
    }
    return 0;
    1a04:	80 e0       	ldi	r24, 0x00	; 0
}
    1a06:	a0 96       	adiw	r28, 0x20	; 32
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	08 95       	ret

00001a1e <FindChild>:

//Returns the child's address if the child is visible and the search letter matches
uint16_t FindChild(uint16_t parent, uint8_t letter, uint16_t start){
    1a1e:	af 92       	push	r10
    1a20:	bf 92       	push	r11
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <FindChild+0x14>
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <FindChild+0x16>
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	d6 2e       	mov	r13, r22
    1a3a:	5a 01       	movw	r10, r20
    
    uint16_t child = parent;
    uint8_t data[4];

    ExtEERead(child+L_BOILER, 4, GAME, &data[0]);
    1a3c:	9e 01       	movw	r18, r28
    1a3e:	2f 5f       	subi	r18, 0xFF	; 255
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	64 e0       	ldi	r22, 0x04	; 4
    1a46:	80 96       	adiw	r24, 0x20	; 32
    1a48:	14 de       	rcall	.-984    	; 0x1672 <ExtEERead>
    1a4a:	e9 80       	ldd	r14, Y+1	; 0x01
    1a4c:	fa 80       	ldd	r15, Y+2	; 0x02
    1a4e:	fe 24       	eor	r15, r14
    1a50:	ef 24       	eor	r14, r15
    1a52:	fe 24       	eor	r15, r14
    1a54:	0b 81       	ldd	r16, Y+3	; 0x03
    1a56:	1c 81       	ldd	r17, Y+4	; 0x04
    1a58:	10 27       	eor	r17, r16
    1a5a:	01 27       	eor	r16, r17
    1a5c:	10 27       	eor	r17, r16
    parent = (data[0]<<8|data[1]);    //Next object on parent level
    child =  (data[2]<<8|data[3]);    //First object on child level

    //As long as the child is within the parent's range
    while (parent>child){
    1a5e:	0e 15       	cp	r16, r14
    1a60:	1f 05       	cpc	r17, r15
    1a62:	30 f5       	brcc	.+76     	; 0x1ab0 <FindChild+0x92>

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
    1a64:	a0 16       	cp	r10, r16
    1a66:	b1 06       	cpc	r11, r17
    1a68:	58 f0       	brcs	.+22     	; 0x1a80 <FindChild+0x62>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
            }
        }

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	2f 5f       	subi	r18, 0xFF	; 255
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	62 e0       	ldi	r22, 0x02	; 2
    1a74:	c8 01       	movw	r24, r16
    1a76:	80 96       	adiw	r24, 0x20	; 32
    1a78:	fc dd       	rcall	.-1032   	; 0x1672 <ExtEERead>
    1a7a:	09 81       	ldd	r16, Y+1	; 0x01
    1a7c:	1a 81       	ldd	r17, Y+2	; 0x02
    1a7e:	ec cf       	rjmp	.-40     	; 0x1a58 <FindChild+0x3a>
    //As long as the child is within the parent's range
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
    1a80:	9e 01       	movw	r18, r28
    1a82:	2f 5f       	subi	r18, 0xFF	; 255
    1a84:	3f 4f       	sbci	r19, 0xFF	; 255
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	85 96       	adiw	r24, 0x25	; 37
    1a8e:	f1 dd       	rcall	.-1054   	; 0x1672 <ExtEERead>
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	81 11       	cpse	r24, r1
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <FindChild+0x7e>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1a96:	d1 10       	cpse	r13, r1
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <FindChild+0x86>
    while (parent>child){

        //If child's address is higher than the start address, perform search for letter
        if (child>start){
            ExtEERead(child+OFF_BYTEFLDS+VISIBLE_ACL+L_BOILER, 1, GAME, &data[0]);
            if ((data[0] == 0)||(CheckState(data[0]))) {
    1a9a:	0d c0       	rjmp	.+26     	; 0x1ab6 <FindChild+0x98>
    1a9c:	9a db       	rcall	.-2252   	; 0x11d2 <CheckState>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	fa cf       	rjmp	.-12     	; 0x1a96 <FindChild+0x78>
                if ((letter == 0)||(CheckLetter(child, letter))) return child;
    1aa2:	e3 cf       	rjmp	.-58     	; 0x1a6a <FindChild+0x4c>
    1aa4:	6d 2d       	mov	r22, r13
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	66 df       	rcall	.-308    	; 0x1976 <CheckLetter>
    1aaa:	88 23       	and	r24, r24
    1aac:	f1 f2       	breq	.-68     	; 0x1a6a <FindChild+0x4c>
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <FindChild+0x98>

        //Not visible or name not right
        ExtEERead(child+L_BOILER, 2, GAME, &data[0]);
        child = (data[0]<<8|data[1]);    //Next object on child level
        
    } return 0;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <FindChild+0x9a>
    1ab6:	c8 01       	movw	r24, r16
}
    1ab8:	24 96       	adiw	r28, 0x04	; 4
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	08 95       	ret

00001ad2 <InpOkChk>:

//Allow only a(A) to z(Z) and 0 to 9 as input
uint8_t InpOkChk(uint8_t test){
    test |= 0x20;
    1ad2:	80 62       	ori	r24, 0x20	; 32
    if ((test>='a')&&(test<='z')) return 1;
    1ad4:	9f e9       	ldi	r25, 0x9F	; 159
    1ad6:	98 0f       	add	r25, r24
    1ad8:	9a 31       	cpi	r25, 0x1A	; 26
    1ada:	38 f0       	brcs	.+14     	; 0x1aea <InpOkChk+0x18>
    1adc:	90 ed       	ldi	r25, 0xD0	; 208
    1ade:	98 0f       	add	r25, r24
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	9a 30       	cpi	r25, 0x0A	; 10
    1ae4:	18 f0       	brcs	.+6      	; 0x1aec <InpOkChk+0x1a>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	08 95       	ret
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    if ((test>='0')&&(test<='9')) return 1;
    return 0;
}
    1aec:	08 95       	ret

00001aee <CleanInput>:

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	8c 01       	movw	r16, r24
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1af8:	d0 e0       	ldi	r29, 0x00	; 0
    return 0;
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    1afa:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t x=0; data[x]!=0; ++x){
    1afc:	f8 01       	movw	r30, r16
    1afe:	ed 0f       	add	r30, r29
    1b00:	f1 1d       	adc	r31, r1
    1b02:	20 81       	ld	r18, Z
    1b04:	8c 2f       	mov	r24, r28
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	22 23       	and	r18, r18
    1b0a:	51 f0       	breq	.+20     	; 0x1b20 <CleanInput+0x32>
        data[cnt] = data[x];
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	a8 0f       	add	r26, r24
    1b10:	b9 1f       	adc	r27, r25
    1b12:	2c 93       	st	X, r18
        if (InpOkChk(data[x])) ++cnt;
    1b14:	80 81       	ld	r24, Z
    1b16:	dd df       	rcall	.-70     	; 0x1ad2 <InpOkChk>
    1b18:	81 11       	cpse	r24, r1
    1b1a:	cf 5f       	subi	r28, 0xFF	; 255
}

//Cleans input of garbage and returns length of cleaned input "o->d2  !\0" becomes "od2\0"
uint8_t CleanInput(uint8_t *data){
    uint8_t cnt = 0;
    for (uint8_t x=0; data[x]!=0; ++x){
    1b1c:	df 5f       	subi	r29, 0xFF	; 255
    1b1e:	ee cf       	rjmp	.-36     	; 0x1afc <CleanInput+0xe>
        data[cnt] = data[x];
        if (InpOkChk(data[x])) ++cnt;
    }
    data[cnt] = 0;
    1b20:	f8 01       	movw	r30, r16
    1b22:	e8 0f       	add	r30, r24
    1b24:	f9 1f       	adc	r31, r25
    1b26:	10 82       	st	Z, r1
    return cnt;
}
    1b28:	8c 2f       	mov	r24, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <CheckSend>:

//Send routine, optimized for low memory usage
uint8_t CheckSend(){
    1b34:	cf 93       	push	r28
    static uint8_t txPart;
    uint8_t EEreadLength=0;

    //Play effects if available and not already playing
    if (effect == 0){
    1b36:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1b3a:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1b3e:	89 2b       	or	r24, r25
    1b40:	99 f4       	brne	.+38     	; 0x1b68 <CheckSend+0x34>
        effect = currObj.byteField[EFFECTS];
    1b42:	80 91 f8 39 	lds	r24, 0x39F8	; 0x8039f8 <currObj+0x4>
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1b4c:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
        auStart = ((effect&0xE0)>0);
    1b50:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <effect>
    1b54:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <effect+0x1>
    1b58:	80 7e       	andi	r24, 0xE0	; 224
    1b5a:	99 27       	eor	r25, r25
    1b5c:	21 e0       	ldi	r18, 0x01	; 1
    1b5e:	89 2b       	or	r24, r25
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <CheckSend+0x30>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	20 93 2c 38 	sts	0x382C, r18	; 0x80382c <auStart>
    }

    //Check if more string(part)s have to be sent to the serial output if previous send operation is completed
    if ((txAddrNow < TXLISTLEN) && serTxDone){
    1b68:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <txAddrNow>
    1b6c:	28 30       	cpi	r18, 0x08	; 8
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <CheckSend+0x3e>
    1b70:	47 c0       	rjmp	.+142    	; 0x1c00 <CheckSend+0xcc>
    1b72:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
    1b76:	88 23       	and	r24, r24
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <CheckSend+0x48>
    1b7a:	42 c0       	rjmp	.+132    	; 0x1c00 <CheckSend+0xcc>
        if (txStrLen[txAddrNow] == 0){
    1b7c:	82 2f       	mov	r24, r18
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	fc 01       	movw	r30, r24
    1b82:	ef 5d       	subi	r30, 0xDF	; 223
    1b84:	f5 4c       	sbci	r31, 0xC5	; 197
    1b86:	e0 81       	ld	r30, Z
    1b88:	e1 11       	cpse	r30, r1
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <CheckSend+0x64>
            txPart = 0;
    1b8c:	10 92 e1 38 	sts	0x38E1, r1	; 0x8038e1 <txPart.3937>
            txAddrNow = TXLISTLEN;
    1b90:	88 e0       	ldi	r24, 0x08	; 8
    1b92:	80 93 20 3a 	sts	0x3A20, r24	; 0x803a20 <txAddrNow>
    1b96:	2c c0       	rjmp	.+88     	; 0x1bf0 <CheckSend+0xbc>
        } else if (txPart < txStrLen[txAddrNow]){
    1b98:	50 91 e1 38 	lds	r21, 0x38E1	; 0x8038e1 <txPart.3937>
    1b9c:	5e 17       	cp	r21, r30
    1b9e:	50 f5       	brcc	.+84     	; 0x1bf4 <CheckSend+0xc0>
            EEreadLength = txStrLen[txAddrNow]-txPart;
    1ba0:	ce 2f       	mov	r28, r30
    1ba2:	c5 1b       	sub	r28, r21
    1ba4:	c1 32       	cpi	r28, 0x21	; 33
    1ba6:	08 f0       	brcs	.+2      	; 0x1baa <CheckSend+0x76>
    1ba8:	c0 e2       	ldi	r28, 0x20	; 32
            if (EEreadLength>=TXLEN) EEreadLength = TXLEN-1;
            ExtEERead(txAddrList[txAddrNow]+txPart, EEreadLength, txTypeNow, &txBuffer[0]);
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e7 5d       	subi	r30, 0xD7	; 215
    1bb2:	f5 4c       	sbci	r31, 0xC5	; 197
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	2a ee       	ldi	r18, 0xEA	; 234
    1bba:	3a e3       	ldi	r19, 0x3A	; 58
    1bbc:	40 91 1f 3a 	lds	r20, 0x3A1F	; 0x803a1f <txTypeNow>
    1bc0:	6c 2f       	mov	r22, r28
    1bc2:	85 0f       	add	r24, r21
    1bc4:	91 1d       	adc	r25, r1
    1bc6:	55 dd       	rcall	.-1366   	; 0x1672 <ExtEERead>
            txPart += EEreadLength;
    1bc8:	80 91 e1 38 	lds	r24, 0x38E1	; 0x8038e1 <txPart.3937>
    1bcc:	8c 0f       	add	r24, r28
    1bce:	80 93 e1 38 	sts	0x38E1, r24	; 0x8038e1 <txPart.3937>
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
    1bd2:	ec 2f       	mov	r30, r28
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	e6 51       	subi	r30, 0x16	; 22
    1bd8:	f5 4c       	sbci	r31, 0xC5	; 197
    1bda:	10 82       	st	Z, r1
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
    1bdc:	80 91 ea 3a 	lds	r24, 0x3AEA	; 0x803aea <txBuffer>
    1be0:	81 11       	cpse	r24, r1
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <CheckSend+0xb6>
    1be4:	8b ed       	ldi	r24, 0xDB	; 219
    1be6:	80 93 ea 3a 	sts	0x3AEA, r24	; 0x803aea <txBuffer>
            SerSend(&txBuffer[0]);
    1bea:	8a ee       	ldi	r24, 0xEA	; 234
    1bec:	9a e3       	ldi	r25, 0x3A	; 58
    1bee:	45 d9       	rcall	.-3446   	; 0xe7a <SerSend>
        } else {
            txPart = 0;
            ++txAddrNow;
        }
    } else if (serTxDone) return 0; //All is sent!
    return 1; //Still sending, do not change the data in the tx variables
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0b c0       	rjmp	.+22     	; 0x1c0a <CheckSend+0xd6>
            txPart += EEreadLength;
            txBuffer[EEreadLength] = 0; //Add string terminator after piece to send to plug memory leak
            if ((txBuffer[0] == 0) && (EEreadLength)) txBuffer[0] = 0xDB; //Block character when data wrong.
            SerSend(&txBuffer[0]);
        } else {
            txPart = 0;
    1bf4:	10 92 e1 38 	sts	0x38E1, r1	; 0x8038e1 <txPart.3937>
            ++txAddrNow;
    1bf8:	2f 5f       	subi	r18, 0xFF	; 255
    1bfa:	20 93 20 3a 	sts	0x3A20, r18	; 0x803a20 <txAddrNow>
    1bfe:	f8 cf       	rjmp	.-16     	; 0x1bf0 <CheckSend+0xbc>
        }
    } else if (serTxDone) return 0; //All is sent!
    1c00:	90 91 08 38 	lds	r25, 0x3808	; 0x803808 <serTxDone>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	91 11       	cpse	r25, r1
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    return 1; //Still sending, do not change the data in the tx variables
}
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <CheckResponse>:

//Send another part of the response and play the effect afterwards
uint8_t CheckResponse(){
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    static uint8_t number = 0;
    if (responseList){
    1c12:	c0 91 f3 38 	lds	r28, 0x38F3	; 0x8038f3 <responseList>
    1c16:	cc 23       	and	r28, r28
    1c18:	e9 f1       	breq	.+122    	; 0x1c94 <CheckResponse+0x86>
        --responseList;
    1c1a:	c1 50       	subi	r28, 0x01	; 1
    1c1c:	c0 93 f3 38 	sts	0x38F3, r28	; 0x8038f3 <responseList>
        if (reactStr[0][number] == CURR_LOC) {
    1c20:	d0 91 e0 38 	lds	r29, 0x38E0	; 0x8038e0 <number.3941>
    1c24:	2d 2f       	mov	r18, r29
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	f9 01       	movw	r30, r18
    1c2a:	ee 0f       	add	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	ec 50       	subi	r30, 0x0C	; 12
    1c30:	f7 4c       	sbci	r31, 0xC7	; 199
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	80 3f       	cpi	r24, 0xF0	; 240
    1c38:	4f ef       	ldi	r20, 0xFF	; 255
    1c3a:	94 07       	cpc	r25, r20
    1c3c:	51 f4       	brne	.+20     	; 0x1c52 <CheckResponse+0x44>
            PrepareSending(currObj.addrStr[NAME], currObj.lenStr[NAME], GAME);
    1c3e:	60 91 0e 3a 	lds	r22, 0x3A0E	; 0x803a0e <currObj+0x1a>
    1c42:	70 91 0f 3a 	lds	r23, 0x3A0F	; 0x803a0f <currObj+0x1b>
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	80 91 00 3a 	lds	r24, 0x3A00	; 0x803a00 <currObj+0xc>
    1c4c:	90 91 01 3a 	lds	r25, 0x3A01	; 0x803a01 <currObj+0xd>
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <CheckResponse+0x5e>
        } else {
            PrepareSending(reactStr[0][number], reactStr[1][number], reactStr[2][number]);
    1c52:	d9 01       	movw	r26, r18
    1c54:	aa 0f       	add	r26, r26
    1c56:	bb 1f       	adc	r27, r27
    1c58:	ac 58       	subi	r26, 0x8C	; 140
    1c5a:	b6 4c       	sbci	r27, 0xC6	; 198
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	f9 01       	movw	r30, r18
    1c62:	ec 5c       	subi	r30, 0xCC	; 204
    1c64:	f6 4c       	sbci	r31, 0xC6	; 198
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	4c 91       	ld	r20, X
    1c6c:	59 dd       	rcall	.-1358   	; 0x1720 <PrepareSending>
        }
        ++number;
    1c6e:	df 5f       	subi	r29, 0xFF	; 255
    1c70:	d0 93 e0 38 	sts	0x38E0, r29	; 0x8038e0 <number.3941>

        if (responseList == 0) {
    1c74:	c1 11       	cpse	r28, r1
    1c76:	0d c0       	rjmp	.+26     	; 0x1c92 <CheckResponse+0x84>
            effect = currObj.byteField[EFFECTS];
    1c78:	80 91 f8 39 	lds	r24, 0x39F8	; 0x8039f8 <currObj+0x4>
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    1c82:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
            RXCNT = 0;
    1c86:	1d ba       	out	0x1d, r1	; 29
            serRxDone = 0;
    1c88:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
            number = 0;
    1c8c:	10 92 e0 38 	sts	0x38E0, r1	; 0x8038e0 <number.3941>
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <CheckResponse+0x86>
            return 0;
        }
        return 1;
    1c92:	c1 e0       	ldi	r28, 0x01	; 1
    }
    return 0;
}
    1c94:	8c 2f       	mov	r24, r28
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <CheckInput>:

//User input check (and validation)
uint8_t CheckInput(uint8_t *data){
    1c9c:	4f 92       	push	r4
    1c9e:	5f 92       	push	r5
    1ca0:	6f 92       	push	r6
    1ca2:	7f 92       	push	r7
    1ca4:	8f 92       	push	r8
    1ca6:	9f 92       	push	r9
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	a1 97       	sbiw	r28, 0x21	; 33
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	8c 01       	movw	r16, r24
    
    //Load game data after reboot
    if (currDepth == 0xff) {
    1cc8:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    1ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cce:	49 f4       	brne	.+18     	; 0x1ce2 <CheckInput+0x46>
        //Start at first location
        PopulateObject(route[0], &currObj);
    1cd0:	64 ef       	ldi	r22, 0xF4	; 244
    1cd2:	79 e3       	ldi	r23, 0x39	; 57
    1cd4:	80 91 b4 39 	lds	r24, 0x39B4	; 0x8039b4 <route>
    1cd8:	90 91 b5 39 	lds	r25, 0x39B5	; 0x8039b5 <route+0x1>
    1cdc:	d5 dd       	rcall	.-1110   	; 0x1888 <PopulateObject>
        currDepth = 0;
    1cde:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <currDepth>
    }

    if (serRxDone){
    1ce2:	80 91 37 38 	lds	r24, 0x3837	; 0x803837 <serRxDone>
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <CheckInput+0x50>
    1cea:	60 c2       	rjmp	.+1216   	; 0x21ac <CheckInput+0x510>

        //Special input requested from user by game
        if (specialInput[0]){
    1cec:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <specialInput>
    1cf0:	88 23       	and	r24, r24
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <CheckInput+0x5a>
    1cf4:	57 c0       	rjmp	.+174    	; 0x1da4 <CheckInput+0x108>
            specialPassed = 0;
    1cf6:	10 92 e2 38 	sts	0x38E2, r1	; 0x8038e2 <specialPassed>
            data[0] = 'a';
    1cfa:	81 e6       	ldi	r24, 0x61	; 97
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	80 83       	st	Z, r24
            
            //Normal code challenge
            if (StartsWith((uint8_t *)&serRx[0], &specialInput[0])) {
    1d00:	63 ee       	ldi	r22, 0xE3	; 227
    1d02:	78 e3       	ldi	r23, 0x38	; 56
    1d04:	8e e4       	ldi	r24, 0x4E	; 78
    1d06:	9a e3       	ldi	r25, 0x3A	; 58
    1d08:	f1 dc       	rcall	.-1566   	; 0x16ec <StartsWith>
    1d0a:	f8 2e       	mov	r15, r24
    1d0c:	88 23       	and	r24, r24
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <CheckInput+0x7c>
                specialPassed = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <specialPassed>
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <CheckInput+0x84>
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1d18:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <specialInput>
    1d1c:	81 33       	cpi	r24, 0x31	; 49
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <CheckInput+0x88>
                responseList = 32;
                return 1;
            }
        } 
        //Data received, but not any of the commands above
        return 0;
    1d20:	f1 2c       	mov	r15, r1
    1d22:	46 c2       	rjmp	.+1164   	; 0x21b0 <CheckInput+0x514>
                specialPassed = 1;
                //specialInput[0] = 0;
                //data[1] = 0;

            //Special challenge 1
            } else if ((specialInput[0] == '1')&&(specialInput[2] == 0)) {
    1d24:	80 91 e5 38 	lds	r24, 0x38E5	; 0x8038e5 <specialInput+0x2>
    1d28:	81 11       	cpse	r24, r1
    1d2a:	fa cf       	rjmp	.-12     	; 0x1d20 <CheckInput+0x84>
                uint8_t inputLen = CleanInput((uint8_t *)&serRx[0]);
    1d2c:	8e e4       	ldi	r24, 0x4E	; 78
    1d2e:	9a e3       	ldi	r25, 0x3A	; 58
    1d30:	de de       	rcall	.-580    	; 0x1aee <CleanInput>
                specialPassed = 2;
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	90 93 e2 38 	sts	0x38E2, r25	; 0x8038e2 <specialPassed>
                data[1] = 0;
    1d38:	f8 01       	movw	r30, r16
    1d3a:	11 82       	std	Z+1, r1	; 0x01

                if (inputLen >= 2) {
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	80 f3       	brcs	.-32     	; 0x1d20 <CheckInput+0x84>
                    if ((serRx[0] == '1')||(serRx[0] == '2')||(serRx[0] == '3')||(serRx[0] == '4')) {
    1d40:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
    1d44:	81 33       	cpi	r24, 0x31	; 49
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <CheckInput+0xc4>
    1d48:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
    1d4c:	82 33       	cpi	r24, 0x32	; 50
    1d4e:	41 f0       	breq	.+16     	; 0x1d60 <CheckInput+0xc4>
    1d50:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
    1d54:	83 33       	cpi	r24, 0x33	; 51
    1d56:	21 f0       	breq	.+8      	; 0x1d60 <CheckInput+0xc4>
    1d58:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
    1d5c:	84 33       	cpi	r24, 0x34	; 52
    1d5e:	01 f7       	brne	.-64     	; 0x1d20 <CheckInput+0x84>
                        serRx[1] |= 0x20;
    1d60:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <serRx+0x1>
    1d64:	80 62       	ori	r24, 0x20	; 32
    1d66:	80 93 4f 3a 	sts	0x3A4F, r24	; 0x803a4f <serRx+0x1>
                        if ((serRx[1] == 'a')||(serRx[1] == 'e')||(serRx[1] == 'f')||(serRx[1] == 'w')) {
    1d6a:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <serRx+0x1>
    1d6e:	81 36       	cpi	r24, 0x61	; 97
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <CheckInput+0xee>
    1d72:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <serRx+0x1>
    1d76:	85 36       	cpi	r24, 0x65	; 101
    1d78:	41 f0       	breq	.+16     	; 0x1d8a <CheckInput+0xee>
    1d7a:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <serRx+0x1>
    1d7e:	86 36       	cpi	r24, 0x66	; 102
    1d80:	21 f0       	breq	.+8      	; 0x1d8a <CheckInput+0xee>
    1d82:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <serRx+0x1>
    1d86:	87 37       	cpi	r24, 0x77	; 119
    1d88:	59 f6       	brne	.-106    	; 0x1d20 <CheckInput+0x84>
                            data[1] = specialInput[1]+0x11;
    1d8a:	80 91 e4 38 	lds	r24, 0x38E4	; 0x8038e4 <specialInput+0x1>
    1d8e:	8f 5e       	subi	r24, 0xEF	; 239
    1d90:	f8 01       	movw	r30, r16
    1d92:	81 83       	std	Z+1, r24	; 0x01
                            data[2] = serRx[0];
    1d94:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
    1d98:	82 83       	std	Z+2, r24	; 0x02
                            data[3] = serRx[1];
    1d9a:	80 91 4f 3a 	lds	r24, 0x3A4F	; 0x803a4f <serRx+0x1>
    1d9e:	83 83       	std	Z+3, r24	; 0x03
                            data[4] = 0;
    1da0:	14 82       	std	Z+4, r1	; 0x04
    1da2:	06 c2       	rjmp	.+1036   	; 0x21b0 <CheckInput+0x514>
        
        //Normal input
        } else {

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
    1da4:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
    1da8:	83 32       	cpi	r24, 0x23	; 35
    1daa:	81 f5       	brne	.+96     	; 0x1e0c <CheckInput+0x170>
    1dac:	8d b3       	in	r24, 0x1d	; 29
    1dae:	86 30       	cpi	r24, 0x06	; 6
    1db0:	69 f5       	brne	.+90     	; 0x1e0c <CheckInput+0x170>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	10 e0       	ldi	r17, 0x00	; 0
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
                    serRx[x] -= '0';
    1db8:	fc 01       	movw	r30, r24
    1dba:	e2 5b       	subi	r30, 0xB2	; 178
    1dbc:	f5 4c       	sbci	r31, 0xC5	; 197
    1dbe:	20 81       	ld	r18, Z
    1dc0:	20 53       	subi	r18, 0x30	; 48
    1dc2:	20 83       	st	Z, r18
                    bitNr *= 10;
    1dc4:	11 0f       	add	r17, r17
    1dc6:	21 2f       	mov	r18, r17
    1dc8:	22 0f       	add	r18, r18
    1dca:	22 0f       	add	r18, r18
    1dcc:	12 0f       	add	r17, r18
                    if (serRx[1] > 2) break;
    1dce:	20 91 4f 3a 	lds	r18, 0x3A4F	; 0x803a4f <serRx+0x1>
    1dd2:	23 30       	cpi	r18, 0x03	; 3
    1dd4:	48 f4       	brcc	.+18     	; 0x1de8 <CheckInput+0x14c>
                    if (serRx[x] < 10) {
    1dd6:	20 81       	ld	r18, Z
    1dd8:	2a 30       	cpi	r18, 0x0A	; 10
    1dda:	b0 f4       	brcc	.+44     	; 0x1e08 <CheckInput+0x16c>
                        bitNr += serRx[x];
    1ddc:	20 81       	ld	r18, Z
    1dde:	12 0f       	add	r17, r18
    1de0:	01 96       	adiw	r24, 0x01	; 1

            //Change status bit
            if ((serRx[0] == '#')&&(RXCNT == 6)){
                uint8_t bitNr = 0;

                for (uint8_t x=1; x<4; ++x) {
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	91 05       	cpc	r25, r1
    1de6:	41 f7       	brne	.-48     	; 0x1db8 <CheckInput+0x11c>
                        continue;
                    }
                    bitNr = 0;
                    break;
                }
                if ((bitNr)&&(bitNr!=128)) {
    1de8:	81 2f       	mov	r24, r17
    1dea:	8f 77       	andi	r24, 0x7F	; 127
    1dec:	69 f0       	breq	.+26     	; 0x1e08 <CheckInput+0x16c>
                    if (Cheat(0xff-bitNr, serRx[4]<<8|serRx[5])) UpdateState(bitNr);
    1dee:	80 91 52 3a 	lds	r24, 0x3A52	; 0x803a52 <serRx+0x4>
    1df2:	60 91 53 3a 	lds	r22, 0x3A53	; 0x803a53 <serRx+0x5>
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	78 2b       	or	r23, r24
    1dfa:	81 2f       	mov	r24, r17
    1dfc:	80 95       	com	r24
    1dfe:	d6 db       	rcall	.-2132   	; 0x15ac <Cheat>
    1e00:	88 23       	and	r24, r24
    1e02:	11 f0       	breq	.+4      	; 0x1e08 <CheckInput+0x16c>
    1e04:	81 2f       	mov	r24, r17
    1e06:	db d9       	rcall	.-3146   	; 0x11be <UpdateState>
                }
                responseList = SetStandardResponse(0);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	50 c0       	rjmp	.+160    	; 0x1eac <CheckInput+0x210>
    1e0c:	d8 01       	movw	r26, r16
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
                if ((serRx[x]<'A')||(serRx[x]>'Z')) data[x]=serRx[x]; else data[x]=serRx[x]|0x20;
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 5b       	subi	r30, 0xB2	; 178
    1e16:	f5 4c       	sbci	r31, 0xC5	; 197
    1e18:	20 81       	ld	r18, Z
    1e1a:	21 34       	cpi	r18, 0x41	; 65
    1e1c:	18 f0       	brcs	.+6      	; 0x1e24 <CheckInput+0x188>
    1e1e:	20 81       	ld	r18, Z
    1e20:	2b 35       	cpi	r18, 0x5B	; 91
    1e22:	10 f0       	brcs	.+4      	; 0x1e28 <CheckInput+0x18c>
    1e24:	20 81       	ld	r18, Z
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <CheckInput+0x190>
    1e28:	20 81       	ld	r18, Z
    1e2a:	20 62       	ori	r18, 0x20	; 32
    1e2c:	2c 93       	st	X, r18
                if (serRx[x] == 0) {
    1e2e:	20 81       	ld	r18, Z
    1e30:	21 11       	cpse	r18, r1
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <CheckInput+0x1a2>
                    data[x] = 0;
    1e34:	f8 01       	movw	r30, r16
    1e36:	e8 0f       	add	r30, r24
    1e38:	f1 1d       	adc	r31, r1
    1e3a:	10 82       	st	Z, r1
                    break;
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <CheckInput+0x1ac>
    1e3e:	01 96       	adiw	r24, 0x01	; 1
    1e40:	11 96       	adiw	r26, 0x01	; 1
                responseList = SetStandardResponse(0);
                return 1;            
            }
            
            //Read up to the \0 character and convert to lower case.
            for (uint8_t x=0; x<RXLEN; ++x){
    1e42:	81 34       	cpi	r24, 0x41	; 65
    1e44:	91 05       	cpc	r25, r1
    1e46:	29 f7       	brne	.-54     	; 0x1e12 <CheckInput+0x176>
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1e48:	80 91 4e 3a 	lds	r24, 0x3A4E	; 0x803a4e <serRx>
                data[0] = 0;
    1e4c:	f8 01       	movw	r30, r16
                    break;
                }
            }

            //No text
            if (serRx[0] == 0){
    1e4e:	81 11       	cpse	r24, r1
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <CheckInput+0x1c0>
                data[0] = 0;
    1e52:	10 82       	st	Z, r1
                RXCNT = 0;
    1e54:	1d ba       	out	0x1d, r1	; 29
                serRxDone = 0;
    1e56:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
    1e5a:	a8 c1       	rjmp	.+848    	; 0x21ac <CheckInput+0x510>
                return 1;
            }

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8f 33       	cpi	r24, 0x3F	; 63
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <CheckInput+0x1ca>
    1e62:	88 36       	cpi	r24, 0x68	; 104
    1e64:	39 f5       	brne	.+78     	; 0x1eb4 <CheckInput+0x218>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e66:	8b e5       	ldi	r24, 0x5B	; 91
    1e68:	9a e7       	ldi	r25, 0x7A	; 122
    1e6a:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <reactStr>
    1e6e:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <reactStr+0x1>
    reactStr[1][number]=length;
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	80 93 34 39 	sts	0x3934, r24	; 0x803934 <reactStr+0x40>
    1e7a:	90 93 35 39 	sts	0x3935, r25	; 0x803935 <reactStr+0x41>
    reactStr[2][number]=type;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	80 93 74 39 	sts	0x3974, r24	; 0x803974 <reactStr+0x80>
    1e86:	90 93 75 39 	sts	0x3975, r25	; 0x803975 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1e8a:	23 e9       	ldi	r18, 0x93	; 147
    1e8c:	3b e7       	ldi	r19, 0x7B	; 123
    1e8e:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    1e92:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    1e96:	2d e6       	ldi	r18, 0x6D	; 109
    1e98:	34 e0       	ldi	r19, 0x04	; 4
    1e9a:	20 93 36 39 	sts	0x3936, r18	; 0x803936 <reactStr+0x42>
    1e9e:	30 93 37 39 	sts	0x3937, r19	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    1ea2:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    1ea6:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>

            //Help text
            if ((data[0] == '?')||(data[0] == 'h')){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELP, L_HELP, TEASER);
                responseList = SetStandardResponse(2);
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	71 dc       	rcall	.-1822   	; 0x1790 <SetStandardResponse>
    1eae:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <responseList>
    1eb2:	7c c1       	rjmp	.+760    	; 0x21ac <CheckInput+0x510>
                return 1;
            }        
        
            //Alphabet text
            if (data[0] == 'a'){
    1eb4:	81 36       	cpi	r24, 0x61	; 97
    1eb6:	d9 f4       	brne	.+54     	; 0x1eee <CheckInput+0x252>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1eb8:	8b e5       	ldi	r24, 0x5B	; 91
    1eba:	9a e7       	ldi	r25, 0x7A	; 122
    1ebc:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <reactStr>
    1ec0:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <reactStr+0x1>
    reactStr[1][number]=length;
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	80 93 34 39 	sts	0x3934, r24	; 0x803934 <reactStr+0x40>
    1ecc:	90 93 35 39 	sts	0x3935, r25	; 0x803935 <reactStr+0x41>
    reactStr[2][number]=type;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	80 93 74 39 	sts	0x3974, r24	; 0x803974 <reactStr+0x80>
    1ed8:	90 93 75 39 	sts	0x3975, r25	; 0x803975 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1edc:	2e e6       	ldi	r18, 0x6E	; 110
    1ede:	3a e7       	ldi	r19, 0x7A	; 122
    1ee0:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    1ee4:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    1ee8:	25 e2       	ldi	r18, 0x25	; 37
    1eea:	31 e0       	ldi	r19, 0x01	; 1
    1eec:	d6 cf       	rjmp	.-84     	; 0x1e9a <CheckInput+0x1fe>
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Whoami text
            if (data[0] == 'w'){
    1eee:	87 37       	cpi	r24, 0x77	; 119
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <CheckInput+0x258>
    1ef2:	6e c0       	rjmp	.+220    	; 0x1fd0 <CheckInput+0x334>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ef4:	8b e5       	ldi	r24, 0x5B	; 91
    1ef6:	9a e7       	ldi	r25, 0x7A	; 122
    1ef8:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <reactStr>
    1efc:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <reactStr+0x1>
    reactStr[1][number]=length;
    1f00:	84 e0       	ldi	r24, 0x04	; 4
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	80 93 34 39 	sts	0x3934, r24	; 0x803934 <reactStr+0x40>
    1f08:	90 93 35 39 	sts	0x3935, r25	; 0x803935 <reactStr+0x41>
    reactStr[2][number]=type;
    1f0c:	21 e0       	ldi	r18, 0x01	; 1
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	20 93 74 39 	sts	0x3974, r18	; 0x803974 <reactStr+0x80>
    1f14:	30 93 75 39 	sts	0x3975, r19	; 0x803975 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f18:	8b ec       	ldi	r24, 0xCB	; 203
    1f1a:	96 e7       	ldi	r25, 0x76	; 118
    1f1c:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    1f20:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    1f24:	82 e1       	ldi	r24, 0x12	; 18
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    1f2c:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    1f30:	20 93 76 39 	sts	0x3976, r18	; 0x803976 <reactStr+0x82>
    1f34:	30 93 77 39 	sts	0x3977, r19	; 0x803977 <reactStr+0x83>

            //Whoami text
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
    1f38:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <whoami>
    1f3c:	81 30       	cpi	r24, 0x01	; 1
    1f3e:	19 f4       	brne	.+6      	; 0x1f46 <CheckInput+0x2aa>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f40:	85 ec       	ldi	r24, 0xC5	; 197
    1f42:	96 e7       	ldi	r25, 0x76	; 118
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <CheckInput+0x2c8>
            if (data[0] == 'w'){
                SetResponse(0, A_LF, 4, TEASER);
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	49 f4       	brne	.+18     	; 0x1f5c <CheckInput+0x2c0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f4a:	82 ec       	ldi	r24, 0xC2	; 194
    1f4c:	96 e7       	ldi	r25, 0x76	; 118
    1f4e:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    1f52:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	1e c0       	rjmp	.+60     	; 0x1f98 <CheckInput+0x2fc>
                SetResponse(1, A_HELLO, L_HELLO, TEASER);
                if (whoami == 1) {
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	49 f4       	brne	.+18     	; 0x1f72 <CheckInput+0x2d6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f60:	8c eb       	ldi	r24, 0xBC	; 188
    1f62:	96 e7       	ldi	r25, 0x76	; 118
    1f64:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    1f68:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    1f6c:	86 e0       	ldi	r24, 0x06	; 6
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	13 c0       	rjmp	.+38     	; 0x1f98 <CheckInput+0x2fc>
                    SetResponse(2, A_ANUBIS, L_ANUBIS, TEASER);
                } else if (whoami == 2) {
                    SetResponse(2, A_BES, L_BES, TEASER);
                } else if (whoami == 3) {
                    SetResponse(2, A_KHONSU, L_KHONSU, TEASER);
                } else if (whoami == 4) {
    1f72:	84 30       	cpi	r24, 0x04	; 4
    1f74:	49 f4       	brne	.+18     	; 0x1f88 <CheckInput+0x2ec>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f76:	87 eb       	ldi	r24, 0xB7	; 183
    1f78:	96 e7       	ldi	r25, 0x76	; 118
    1f7a:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    1f7e:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    1f82:	85 e0       	ldi	r24, 0x05	; 5
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	08 c0       	rjmp	.+16     	; 0x1f98 <CheckInput+0x2fc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1f88:	80 e4       	ldi	r24, 0x40	; 64
    1f8a:	96 e7       	ldi	r25, 0x76	; 118
    1f8c:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    1f90:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    1f94:	82 e4       	ldi	r24, 0x42	; 66
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	80 93 38 39 	sts	0x3938, r24	; 0x803938 <reactStr+0x44>
    1f9c:	90 93 39 39 	sts	0x3939, r25	; 0x803939 <reactStr+0x45>
    reactStr[2][number]=type;
    1fa0:	20 93 78 39 	sts	0x3978, r18	; 0x803978 <reactStr+0x84>
    1fa4:	30 93 79 39 	sts	0x3979, r19	; 0x803979 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fa8:	8d e9       	ldi	r24, 0x9D	; 157
    1faa:	96 e7       	ldi	r25, 0x76	; 118
    1fac:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <reactStr+0x6>
    1fb0:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <reactStr+0x7>
    reactStr[1][number]=length;
    1fb4:	8a e1       	ldi	r24, 0x1A	; 26
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	80 93 3a 39 	sts	0x393A, r24	; 0x80393a <reactStr+0x46>
    1fbc:	90 93 3b 39 	sts	0x393B, r25	; 0x80393b <reactStr+0x47>
    reactStr[2][number]=type;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	80 93 7a 39 	sts	0x397A, r24	; 0x80397a <reactStr+0x86>
    1fc8:	90 93 7b 39 	sts	0x397B, r25	; 0x80397b <reactStr+0x87>
                    SetResponse(2, A_THOTH, L_THOTH, TEASER);
                } else {
                    SetResponse(2, A_ERROR, L_ERROR, TEASER);
                }
                SetResponse(3, A_PLEASED, L_PLEASED, TEASER);
                responseList = SetStandardResponse(4);
    1fcc:	84 e0       	ldi	r24, 0x04	; 4
    1fce:	6e cf       	rjmp	.-292    	; 0x1eac <CheckInput+0x210>
                return 1;
            }

            //Quit text
            if (data[0] == 'q'){
    1fd0:	81 37       	cpi	r24, 0x71	; 113
    1fd2:	d9 f4       	brne	.+54     	; 0x200a <CheckInput+0x36e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1fd4:	8b e5       	ldi	r24, 0x5B	; 91
    1fd6:	9a e7       	ldi	r25, 0x7A	; 122
    1fd8:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <reactStr>
    1fdc:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <reactStr+0x1>
    reactStr[1][number]=length;
    1fe0:	84 e0       	ldi	r24, 0x04	; 4
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	80 93 34 39 	sts	0x3934, r24	; 0x803934 <reactStr+0x40>
    1fe8:	90 93 35 39 	sts	0x3935, r25	; 0x803935 <reactStr+0x41>
    reactStr[2][number]=type;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	80 93 74 39 	sts	0x3974, r24	; 0x803974 <reactStr+0x80>
    1ff4:	90 93 75 39 	sts	0x3975, r25	; 0x803975 <reactStr+0x81>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    1ff8:	23 e0       	ldi	r18, 0x03	; 3
    1ffa:	3a e7       	ldi	r19, 0x7A	; 122
    1ffc:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    2000:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2004:	24 e5       	ldi	r18, 0x54	; 84
    2006:	30 e0       	ldi	r19, 0x00	; 0
                responseList = SetStandardResponse(2);
                return 1;
            }

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
    2008:	48 cf       	rjmp	.-368    	; 0x1e9a <CheckInput+0x1fe>
    200a:	6e e8       	ldi	r22, 0x8E	; 142
    200c:	75 eb       	ldi	r23, 0xB5	; 181
    200e:	c8 01       	movw	r24, r16
    2010:	6d db       	rcall	.-2342   	; 0x16ec <StartsWith>
    2012:	88 23       	and	r24, r24
    2014:	e9 f0       	breq	.+58     	; 0x2050 <CheckInput+0x3b4>
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    2016:	1e e6       	ldi	r17, 0x6E	; 110
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	81 2f       	mov	r24, r17
    201c:	b6 d8       	rcall	.-3732   	; 0x118a <WriteStatusBit>
    201e:	1f 5f       	subi	r17, 0xFF	; 255

            //Fake cheat = reset badge!
            if (StartsWith(&data[0], "iddqd")){
            
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2020:	12 37       	cpi	r17, 0x72	; 114
    2022:	d1 f7       	brne	.-12     	; 0x2018 <CheckInput+0x37c>
                    WriteStatusBit(110+x, 0);
                }
                SaveGameState();
    2024:	2b d8       	rcall	.-4010   	; 0x107c <SaveGameState>
    2026:	80 e2       	ldi	r24, 0x20	; 32

                uint8_t cheat[] = "Cheater! Contact badge team... ";
    2028:	e1 ed       	ldi	r30, 0xD1	; 209
    202a:	f5 eb       	ldi	r31, 0xB5	; 181
    202c:	de 01       	movw	r26, r28
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	01 90       	ld	r0, Z+
    2032:	0d 92       	st	X+, r0
    2034:	8a 95       	dec	r24
    2036:	e1 f7       	brne	.-8      	; 0x2030 <CheckInput+0x394>
    2038:	8c e3       	ldi	r24, 0x3C	; 60
                SerSpeed(60);
    203a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SerSpeed>
    203e:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    2042:	88 23       	and	r24, r24
    2044:	e1 f3       	breq	.-8      	; 0x203e <CheckInput+0x3a2>
    2046:	ce 01       	movw	r24, r28
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SerSend>
    204e:	f7 cf       	rjmp	.-18     	; 0x203e <CheckInput+0x3a2>
                }
            }
            
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
    2050:	64 e9       	ldi	r22, 0x94	; 148
    2052:	75 eb       	ldi	r23, 0xB5	; 181
    2054:	c8 01       	movw	r24, r16
    2056:	4a db       	rcall	.-2412   	; 0x16ec <StartsWith>
    2058:	68 2e       	mov	r6, r24
    205a:	88 23       	and	r24, r24
    205c:	59 f1       	breq	.+86     	; 0x20b4 <CheckInput+0x418>
    205e:	8f ef       	ldi	r24, 0xFF	; 255
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
    2060:	89 a3       	std	Y+33, r24	; 0x21
    2062:	18 e1       	ldi	r17, 0x18	; 24
    2064:	41 e0       	ldi	r20, 0x01	; 1
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
    2066:	be 01       	movw	r22, r28
    2068:	6f 5d       	subi	r22, 0xDF	; 223
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	81 2f       	mov	r24, r17
    206e:	0e 94 15 07 	call	0xe2a	; 0xe2a <EEWrite>
    2072:	1f 5f       	subi	r17, 0xFF	; 255
            //Cheat reset (Quote from: Donald E. Westlake)
            if (StartsWith(&data[0], "the trouble with real life is, there's no reset button")){
                
                //Reset cheat data by resetting the EEPROM bytes
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2074:	10 32       	cpi	r17, 0x20	; 32
    2076:	b1 f7       	brne	.-20     	; 0x2064 <CheckInput+0x3c8>
    2078:	1e e6       	ldi	r17, 0x6E	; 110
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
                    WriteStatusBit(110+x, 0);
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	81 2f       	mov	r24, r17
    207e:	85 d8       	rcall	.-3830   	; 0x118a <WriteStatusBit>
    2080:	1f 5f       	subi	r17, 0xFF	; 255
    2082:	12 37       	cpi	r17, 0x72	; 114
                uint8_t empty=0xff;
                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    EEWrite(CHEATS+x, &empty, 1);
                }
                //Reset game data by wiping the UUID bits
                for (uint8_t x=0; x<4; ++x){
    2084:	d1 f7       	brne	.-12     	; 0x207a <CheckInput+0x3de>
    2086:	0e 94 3e 08 	call	0x107c	; 0x107c <SaveGameState>
                    WriteStatusBit(110+x, 0);
                }
                
                SaveGameState();
    208a:	8f e0       	ldi	r24, 0x0F	; 15

                uint8_t cheat[] = "Reset please! ";
    208c:	e1 ef       	ldi	r30, 0xF1	; 241
    208e:	f5 eb       	ldi	r31, 0xB5	; 181
    2090:	de 01       	movw	r26, r28
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	01 90       	ld	r0, Z+
    2096:	0d 92       	st	X+, r0
    2098:	8a 95       	dec	r24
    209a:	e1 f7       	brne	.-8      	; 0x2094 <CheckInput+0x3f8>
    209c:	8c e3       	ldi	r24, 0x3C	; 60
                SerSpeed(60);
    209e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SerSpeed>
    20a2:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <serTxDone>
                while(1){
                    if (serTxDone) SerSend(&cheat[0]);
    20a6:	88 23       	and	r24, r24
    20a8:	e1 f3       	breq	.-8      	; 0x20a2 <CheckInput+0x406>
    20aa:	ce 01       	movw	r24, r28
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	0e 94 3d 07 	call	0xe7a	; 0xe7a <SerSend>
    20b2:	f7 cf       	rjmp	.-18     	; 0x20a2 <CheckInput+0x406>
                }
            }
            if (StartsWith(&data[0], "cheat")){
    20b4:	6b ec       	ldi	r22, 0xCB	; 203
    20b6:	75 eb       	ldi	r23, 0xB5	; 181
    20b8:	c8 01       	movw	r24, r16
    20ba:	18 db       	rcall	.-2512   	; 0x16ec <StartsWith>
    20bc:	88 23       	and	r24, r24
    20be:	09 f4       	brne	.+2      	; 0x20c2 <CheckInput+0x426>
    20c0:	2f ce       	rjmp	.-930    	; 0x1d20 <CheckInput+0x84>
    20c2:	04 ef       	ldi	r16, 0xF4	; 244
    20c4:	18 e3       	ldi	r17, 0x38	; 56
    20c6:	78 e1       	ldi	r23, 0x18	; 24
    20c8:	77 2e       	mov	r7, r23
    20ca:	ea e0       	ldi	r30, 0x0A	; 10
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    20cc:	5e 2e       	mov	r5, r30
    20ce:	f4 e6       	ldi	r31, 0x64	; 100
                        bit /= 10;
    20d0:	4f 2e       	mov	r4, r31
    20d2:	ee 24       	eor	r14, r14
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    20d4:	e3 94       	inc	r14
    20d6:	f1 2c       	mov	r15, r1
    20d8:	cc 24       	eor	r12, r12
    20da:	c3 94       	inc	r12
    20dc:	d1 2c       	mov	r13, r1
    20de:	89 e5       	ldi	r24, 0x59	; 89
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    20e0:	88 2e       	mov	r8, r24
    20e2:	8a e7       	ldi	r24, 0x7A	; 122
    20e4:	98 2e       	mov	r9, r24
    20e6:	92 e0       	ldi	r25, 0x02	; 2
    reactStr[1][number]=length;
    20e8:	a9 2e       	mov	r10, r25
    20ea:	b1 2c       	mov	r11, r1
    20ec:	41 e0       	ldi	r20, 0x01	; 1
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
    20ee:	be 01       	movw	r22, r28
    20f0:	6f 5d       	subi	r22, 0xDF	; 223
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	87 2d       	mov	r24, r7
    20f6:	0e 94 05 07 	call	0xe0a	; 0xe0a <EERead>
    20fa:	29 a1       	ldd	r18, Y+33	; 0x21
                    bit = 0xff-bit;
    20fc:	20 95       	com	r18
    20fe:	82 2f       	mov	r24, r18
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2100:	65 2d       	mov	r22, r5
    2102:	0e 94 44 1a 	call	0x3488	; 0x3488 <__udivmodqi4>
    2106:	9b 83       	std	Y+3, r25	; 0x03
    2108:	0e 94 44 1a 	call	0x3488	; 0x3488 <__udivmodqi4>
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	82 2f       	mov	r24, r18
                        bit /= 10;
    2110:	64 2d       	mov	r22, r4
    2112:	0e 94 44 1a 	call	0x3488	; 0x3488 <__udivmodqi4>
    2116:	89 83       	std	Y+1, r24	; 0x01
                    
                    //Set up sending out number
                    EERead(CHEATS+x, &bit, 1);
                    bit = 0xff-bit;
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
    2118:	19 a2       	std	Y+33, r1	; 0x21
    211a:	de 01       	movw	r26, r28
    211c:	11 96       	adiw	r26, 0x01	; 1
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	2d 91       	ld	r18, X+
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
    2122:	86 2d       	mov	r24, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2124:	84 0f       	add	r24, r20
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	fc 01       	movw	r30, r24
    212a:	ee 0f       	add	r30, r30
    212c:	ff 1f       	adc	r31, r31
    212e:	ec 50       	subi	r30, 0x0C	; 12
    2130:	f7 4c       	sbci	r31, 0xC7	; 199
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	2d 52       	subi	r18, 0x2D	; 45
    2136:	3b 48       	sbci	r19, 0x8B	; 139
    2138:	20 83       	st	Z, r18
    213a:	31 83       	std	Z+1, r19	; 0x01
    213c:	fc 01       	movw	r30, r24
    reactStr[1][number]=length;
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ec 5c       	subi	r30, 0xCC	; 204
    2144:	f6 4c       	sbci	r31, 0xC6	; 198
    2146:	e0 82       	st	Z, r14
    2148:	f1 82       	std	Z+1, r15	; 0x01
    214a:	88 0f       	add	r24, r24
    reactStr[2][number]=type;
    214c:	99 1f       	adc	r25, r25
    214e:	fc 01       	movw	r30, r24
    2150:	ec 58       	subi	r30, 0x8C	; 140
    2152:	f6 4c       	sbci	r31, 0xC6	; 198
    2154:	e0 82       	st	Z, r14
    2156:	f1 82       	std	Z+1, r15	; 0x01
    2158:	4f 5f       	subi	r20, 0xFF	; 255
    215a:	43 30       	cpi	r20, 0x03	; 3
                    for (n=2; n>=0; --n) {
                        digit[n] = bit % 10;
                        bit /= 10;
                    }

                    for (n=0; n<3; ++n) {
    215c:	09 f7       	brne	.-62     	; 0x2120 <CheckInput+0x484>
    215e:	f8 01       	movw	r30, r16
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2160:	86 82       	std	Z+6, r8	; 0x06
    2162:	97 82       	std	Z+7, r9	; 0x07
    2164:	ea 5b       	subi	r30, 0xBA	; 186
    reactStr[1][number]=length;
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	a0 82       	st	Z, r10
    216a:	b1 82       	std	Z+1, r11	; 0x01
    216c:	e0 5c       	subi	r30, 0xC0	; 192
    reactStr[2][number]=type;
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	c0 82       	st	Z, r12
    2172:	d1 82       	std	Z+1, r13	; 0x01
    2174:	73 94       	inc	r7
    2176:	08 5f       	subi	r16, 0xF8	; 248
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	f4 e0       	ldi	r31, 0x04	; 4
    217c:	6f 0e       	add	r6, r31
    217e:	80 e2       	ldi	r24, 0x20	; 32
            }
            if (StartsWith(&data[0], "cheat")){
                int8_t n;
                uint8_t bit, digit[3];

                for (uint8_t x=0; x<MAX_CHEATS; ++x){
    2180:	78 12       	cpse	r7, r24
    2182:	b4 cf       	rjmp	.-152    	; 0x20ec <CheckInput+0x450>
    2184:	8b e5       	ldi	r24, 0x5B	; 91
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2186:	9a e7       	ldi	r25, 0x7A	; 122
    2188:	80 93 32 39 	sts	0x3932, r24	; 0x803932 <reactStr+0x3e>
    218c:	90 93 33 39 	sts	0x3933, r25	; 0x803933 <reactStr+0x3f>
    2190:	84 e0       	ldi	r24, 0x04	; 4
    reactStr[1][number]=length;
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	80 93 72 39 	sts	0x3972, r24	; 0x803972 <reactStr+0x7e>
    2198:	90 93 73 39 	sts	0x3973, r25	; 0x803973 <reactStr+0x7f>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    reactStr[2][number]=type;
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	80 93 b2 39 	sts	0x39B2, r24	; 0x8039b2 <reactStr+0xbe>
    21a4:	90 93 b3 39 	sts	0x39B3, r25	; 0x8039b3 <reactStr+0xbf>
    21a8:	70 92 f3 38 	sts	0x38F3, r7	; 0x8038f3 <responseList>
                        SetResponse(x*4+n, A_DIGITS+digit[n], 1, TEASER);
                    }                
                    SetResponse(x*4+3, A_COMMA, L_COMMA, TEASER);
                }
                SetResponse((4*MAX_CHEATS)-1, A_LF, 4, TEASER);
                responseList = 32;
    21ac:	ff 24       	eor	r15, r15
        //Data received, but not any of the commands above
        return 0;
    }

    //Serial input not available yet
    return 1;
    21ae:	f3 94       	inc	r15
    21b0:	8f 2d       	mov	r24, r15
}
    21b2:	a1 96       	adiw	r28, 0x21	; 33
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	bf 90       	pop	r11
    21ca:	af 90       	pop	r10
    21cc:	9f 90       	pop	r9
    21ce:	8f 90       	pop	r8
    21d0:	7f 90       	pop	r7
    21d2:	6f 90       	pop	r6
    21d4:	5f 90       	pop	r5
    21d6:	4f 90       	pop	r4
    21d8:	08 95       	ret

000021da <ProcessInput>:
    21da:	4f 92       	push	r4

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    21dc:	5f 92       	push	r5
    21de:	6f 92       	push	r6
    21e0:	7f 92       	push	r7
    21e2:	8f 92       	push	r8
    21e4:	9f 92       	push	r9
    21e6:	af 92       	push	r10
    21e8:	bf 92       	push	r11
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	2a 97       	sbiw	r28, 0x0a	; 10
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	8c 01       	movw	r16, r24
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;

    CleanInput(&data[0]);
    2206:	73 dc       	rcall	.-1818   	; 0x1aee <CleanInput>
    uint8_t inputLen = CleanInput(&data[0]);
    2208:	c8 01       	movw	r24, r16
    220a:	71 dc       	rcall	.-1822   	; 0x1aee <CleanInput>
    220c:	f8 2e       	mov	r15, r24

    if (inputLen) {
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <ProcessInput+0x3a>
    2212:	de c7       	rjmp	.+4028   	; 0x31d0 <ProcessInput+0xff6>

        //eXit to previous location
        if (data[0] == 'x'){
    2214:	d8 01       	movw	r26, r16
    2216:	8c 91       	ld	r24, X
    2218:	88 37       	cpi	r24, 0x78	; 120
    221a:	09 f0       	breq	.+2      	; 0x221e <ProcessInput+0x44>
    221c:	45 c0       	rjmp	.+138    	; 0x22a8 <ProcessInput+0xce>

            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
    221e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    2222:	e8 2f       	mov	r30, r24
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ec 54       	subi	r30, 0x4C	; 76
    222c:	f6 4c       	sbci	r31, 0xC6	; 198
    222e:	20 81       	ld	r18, Z
    2230:	31 81       	ldd	r19, Z+1	; 0x01
    2232:	23 2b       	or	r18, r19
    2234:	11 f0       	breq	.+4      	; 0x223a <ProcessInput+0x60>
    2236:	81 11       	cpse	r24, r1
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <ProcessInput+0x66>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    223a:	82 e8       	ldi	r24, 0x82	; 130
    223c:	96 e7       	ldi	r25, 0x76	; 118
    223e:	a1 c5       	rjmp	.+2882   	; 0x2d82 <ProcessInput+0xba8>
            //Standing in the Lobby?
            if ((route[currDepth] == 0)||(currDepth == 0)){
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            
            //Is there a way to go back?
            } else if (CheckState(currObj.byteField[OPEN_ACL])){
    2240:	80 91 fa 39 	lds	r24, 0x39FA	; 0x8039fa <currObj+0x6>
    2244:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <CheckState>
    2248:	88 23       	and	r24, r24
    224a:	b9 f0       	breq	.+46     	; 0x227a <ProcessInput+0xa0>
                --currDepth;
    224c:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2250:	e1 50       	subi	r30, 0x01	; 1
    2252:	e0 93 26 38 	sts	0x3826, r30	; 0x803826 <currDepth>
                PopulateObject(route[currDepth], &currObj);
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	ec 54       	subi	r30, 0x4C	; 76
    225e:	f6 4c       	sbci	r31, 0xC6	; 198
    2260:	64 ef       	ldi	r22, 0xF4	; 244
    2262:	79 e3       	ldi	r23, 0x39	; 57
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	0f db       	rcall	.-2530   	; 0x1888 <PopulateObject>
                effect = currObj.byteField[EFFECTS];
    226a:	80 91 f8 39 	lds	r24, 0x39F8	; 0x8039f8 <currObj+0x4>
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2274:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    2278:	31 c2       	rjmp	.+1122   	; 0x26dc <ProcessInput+0x502>
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
    227a:	80 91 16 3a 	lds	r24, 0x3A16	; 0x803a16 <currObj+0x22>
    227e:	90 91 17 3a 	lds	r25, 0x3A17	; 0x803a17 <currObj+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2282:	20 91 08 3a 	lds	r18, 0x3A08	; 0x803a08 <currObj+0x14>
    2286:	30 91 09 3a 	lds	r19, 0x3A09	; 0x803a09 <currObj+0x15>
    228a:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    228e:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2292:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2296:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    229a:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    229e:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
                effect = currObj.byteField[EFFECTS];
            
            //No way out, print denied message of location
            } else {
                SetResponse(elements++, currObj.addrStr[OPEN_ACL_MSG], currObj.lenStr[OPEN_ACL_MSG], GAME);
                effect = currObj.effect[0];               
    22a2:	80 91 1c 3a 	lds	r24, 0x3A1C	; 0x803a1c <currObj+0x28>
    22a6:	3a c6       	rjmp	.+3188   	; 0x2f1c <ProcessInput+0xd42>
            }   
        
        //Enter locations or Open objects    
        } else if ((data[0] == 'e')||(data[0] == 'o')) {
    22a8:	85 36       	cpi	r24, 0x65	; 101
    22aa:	19 f0       	breq	.+6      	; 0x22b2 <ProcessInput+0xd8>
    22ac:	8f 36       	cpi	r24, 0x6F	; 111
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <ProcessInput+0xd8>
    22b0:	df c0       	rjmp	.+446    	; 0x2470 <ProcessInput+0x296>
                
            //Not possible, too many/little characters
            if (inputLen != 2){
    22b2:	b2 e0       	ldi	r27, 0x02	; 2
    22b4:	fb 12       	cpse	r15, r27
    22b6:	c1 cf       	rjmp	.-126    	; 0x223a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                uint8_t canDo = 0;
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    22b8:	e0 90 26 38 	lds	r14, 0x3826	; 0x803826 <currDepth>
    22bc:	f1 2c       	mov	r15, r1
    22be:	f7 01       	movw	r30, r14
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	ec 54       	subi	r30, 0x4C	; 76
    22c6:	f6 4c       	sbci	r31, 0xC6	; 198
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	d8 01       	movw	r26, r16
    22ce:	11 96       	adiw	r26, 0x01	; 1
    22d0:	6c 91       	ld	r22, X
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	a3 db       	rcall	.-2234   	; 0x1a1e <FindChild>
    22d8:	f7 01       	movw	r30, r14
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	ea 54       	subi	r30, 0x4A	; 74
    22e0:	f6 4c       	sbci	r31, 0xC6	; 198
    22e2:	80 83       	st	Z, r24
    22e4:	91 83       	std	Z+1, r25	; 0x01
                    
                //Child found?
                if (route[currDepth+1]) {
    22e6:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <currDepth>
    22ea:	29 2f       	mov	r18, r25
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	f9 01       	movw	r30, r18
    22f0:	ee 0f       	add	r30, r30
    22f2:	ff 1f       	adc	r31, r31
    22f4:	ea 54       	subi	r30, 0x4A	; 74
    22f6:	f6 4c       	sbci	r31, 0xC6	; 198
    22f8:	40 81       	ld	r20, Z
    22fa:	51 81       	ldd	r21, Z+1	; 0x01
    22fc:	41 15       	cp	r20, r1
    22fe:	51 05       	cpc	r21, r1
    2300:	21 f0       	breq	.+8      	; 0x230a <ProcessInput+0x130>
                    PopulateObject(route[currDepth+1], &actObj1);
    2302:	65 eb       	ldi	r22, 0xB5	; 181
    2304:	78 e3       	ldi	r23, 0x38	; 56
    2306:	ca 01       	movw	r24, r20
    2308:	1c c0       	rjmp	.+56     	; 0x2342 <ProcessInput+0x168>
                    canDo = 1;
                //No child, maybe a step back, letter ok?
                } else if (currDepth) {
    230a:	99 23       	and	r25, r25
    230c:	09 f4       	brne	.+2      	; 0x2310 <ProcessInput+0x136>
    230e:	77 c7       	rjmp	.+3822   	; 0x31fe <ProcessInput+0x1024>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	f9 01       	movw	r30, r18
    2316:	ee 54       	subi	r30, 0x4E	; 78
    2318:	f6 4c       	sbci	r31, 0xC6	; 198
    231a:	d8 01       	movw	r26, r16
    231c:	11 96       	adiw	r26, 0x01	; 1
    231e:	6c 91       	ld	r22, X
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	28 db       	rcall	.-2480   	; 0x1976 <CheckLetter>
    2326:	88 23       	and	r24, r24
    2328:	09 f4       	brne	.+2      	; 0x232c <ProcessInput+0x152>
    232a:	69 c7       	rjmp	.+3794   	; 0x31fe <ProcessInput+0x1024>
                        PopulateObject(route[currDepth-1], &actObj1);
    232c:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ee 54       	subi	r30, 0x4E	; 78
    2338:	f6 4c       	sbci	r31, 0xC6	; 198
    233a:	65 eb       	ldi	r22, 0xB5	; 181
    233c:	78 e3       	ldi	r23, 0x38	; 56
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	a2 da       	rcall	.-2748   	; 0x1888 <PopulateObject>
                    }
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
    2344:	f8 01       	movw	r30, r16
    2346:	80 81       	ld	r24, Z
    2348:	85 36       	cpi	r24, 0x65	; 101
    234a:	c9 f4       	brne	.+50     	; 0x237e <ProcessInput+0x1a4>
    234c:	80 91 bd 38 	lds	r24, 0x38BD	; 0x8038bd <actObj1.3989+0x8>
    2350:	80 fd       	sbrc	r24, 0
    2352:	1e c0       	rjmp	.+60     	; 0x2390 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2354:	80 ea       	ldi	r24, 0xA0	; 160
    2356:	99 e7       	ldi	r25, 0x79	; 121
    2358:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    235c:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2360:	8e e1       	ldi	r24, 0x1E	; 30
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2368:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    2374:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>
                }

                //The candidate is found! Let's check if the action is legit
                if (canDo) {
                    if ((data[0] == 'e') && ((actObj1.byteField[ACTION_MASK]&ENTER)==0)) {
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
    2378:	72 e0       	ldi	r23, 0x02	; 2
    237a:	77 2e       	mov	r7, r23
    237c:	0e c7       	rjmp	.+3612   	; 0x319a <ProcessInput+0xfc0>
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
    237e:	8f 36       	cpi	r24, 0x6F	; 111
    2380:	39 f4       	brne	.+14     	; 0x2390 <ProcessInput+0x1b6>
    2382:	80 91 bd 38 	lds	r24, 0x38BD	; 0x8038bd <actObj1.3989+0x8>
    2386:	81 fd       	sbrc	r24, 1
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <ProcessInput+0x1b6>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    238a:	85 e8       	ldi	r24, 0x85	; 133
    238c:	99 e7       	ldi	r25, 0x79	; 121
    238e:	f9 c4       	rjmp	.+2546   	; 0x2d82 <ProcessInput+0xba8>
                        SetResponse(elements++, A_CANTENTER, L_CANTENTER, TEASER);
                    } else if ((data[0] == 'o') && ((actObj1.byteField[ACTION_MASK]&OPEN)==0)) {
                        SetResponse(elements++, A_CANTOPEN, L_CANTOPEN, TEASER);
                    
                    //Action legit, permission granted?
                    } else if (CheckState(actObj1.byteField[OPEN_ACL])) {
    2390:	80 91 bb 38 	lds	r24, 0x38BB	; 0x8038bb <actObj1.3989+0x6>
    2394:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <CheckState>
    2398:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    239c:	88 23       	and	r24, r24
    239e:	09 f4       	brne	.+2      	; 0x23a2 <ProcessInput+0x1c8>
    23a0:	49 c0       	rjmp	.+146    	; 0x2434 <ProcessInput+0x25a>
                            
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
    23a2:	ae 2f       	mov	r26, r30
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	aa 0f       	add	r26, r26
    23a8:	bb 1f       	adc	r27, r27
    23aa:	aa 54       	subi	r26, 0x4A	; 74
    23ac:	b6 4c       	sbci	r27, 0xC6	; 198
    23ae:	8d 91       	ld	r24, X+
    23b0:	9c 91       	ld	r25, X
    23b2:	89 2b       	or	r24, r25
    23b4:	11 f0       	breq	.+4      	; 0x23ba <ProcessInput+0x1e0>
    23b6:	ef 5f       	subi	r30, 0xFF	; 255
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <ProcessInput+0x1e2>
    23ba:	e1 50       	subi	r30, 0x01	; 1
    23bc:	e0 93 26 38 	sts	0x3826, r30	; 0x803826 <currDepth>
                        PopulateObject(route[currDepth], &currObj);
    23c0:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	ec 54       	subi	r30, 0x4C	; 76
    23cc:	f6 4c       	sbci	r31, 0xC6	; 198
    23ce:	64 ef       	ldi	r22, 0xF4	; 244
    23d0:	79 e3       	ldi	r23, 0x39	; 57
    23d2:	80 81       	ld	r24, Z
    23d4:	91 81       	ldd	r25, Z+1	; 0x01
    23d6:	58 da       	rcall	.-2896   	; 0x1888 <PopulateObject>
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    23d8:	80 91 10 3a 	lds	r24, 0x3A10	; 0x803a10 <currObj+0x1c>
    23dc:	90 91 11 3a 	lds	r25, 0x3A11	; 0x803a11 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    23e0:	20 91 02 3a 	lds	r18, 0x3A02	; 0x803a02 <currObj+0xe>
    23e4:	30 91 03 3a 	lds	r19, 0x3A03	; 0x803a03 <currObj+0xf>
    23e8:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    23ec:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    23f0:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    23f4:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    23f8:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    23fc:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2400:	8b e5       	ldi	r24, 0x5B	; 91
    2402:	9a e7       	ldi	r25, 0x7A	; 122
    2404:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    2408:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    240c:	82 e0       	ldi	r24, 0x02	; 2
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	80 93 38 39 	sts	0x3938, r24	; 0x803938 <reactStr+0x44>
    2414:	90 93 39 39 	sts	0x3939, r25	; 0x803939 <reactStr+0x45>
    reactStr[2][number]=type;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	80 93 78 39 	sts	0x3978, r24	; 0x803978 <reactStr+0x84>
    2420:	90 93 79 39 	sts	0x3979, r25	; 0x803979 <reactStr+0x85>
                        //Yes! Check if we must move forward or backwards.
                        if (route[currDepth+1]) ++currDepth; else --currDepth;
                        PopulateObject(route[currDepth], &currObj);
                        SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                        SetResponse(elements++, A_LF, 2, TEASER);
                        effect = currObj.byteField[EFFECTS];
    2424:	80 91 f8 39 	lds	r24, 0x39F8	; 0x8039f8 <currObj+0x4>
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    242e:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    2432:	8d c4       	rjmp	.+2330   	; 0x2d4e <ProcessInput+0xb74>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	ea 54       	subi	r30, 0x4A	; 74
    243c:	f6 4c       	sbci	r31, 0xC6	; 198
    243e:	10 82       	st	Z, r1
    2440:	11 82       	std	Z+1, r1	; 0x01
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
    2442:	80 91 d7 38 	lds	r24, 0x38D7	; 0x8038d7 <actObj1.3989+0x22>
    2446:	90 91 d8 38 	lds	r25, 0x38D8	; 0x8038d8 <actObj1.3989+0x23>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    244a:	20 91 c9 38 	lds	r18, 0x38C9	; 0x8038c9 <actObj1.3989+0x14>
    244e:	30 91 ca 38 	lds	r19, 0x38CA	; 0x8038ca <actObj1.3989+0x15>
    2452:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    2456:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    245a:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    245e:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    2462:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    2466:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
                                                  
                    //Not granted!
                    } else {
                        route[currDepth+1] = 0;
                        SetResponse(elements++, actObj1.addrStr[OPEN_ACL_MSG], actObj1.lenStr[OPEN_ACL_MSG], GAME);
                        effect = actObj1.effect[0];              
    246a:	80 91 dd 38 	lds	r24, 0x38DD	; 0x8038dd <actObj1.3989+0x28>
    246e:	56 c5       	rjmp	.+2732   	; 0x2f1c <ProcessInput+0xd42>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);                
                }
            }

        //Look around or at objects
        } else if (data[0] == 'l') {
    2470:	8c 36       	cpi	r24, 0x6C	; 108
    2472:	09 f0       	breq	.+2      	; 0x2476 <ProcessInput+0x29c>
    2474:	57 c1       	rjmp	.+686    	; 0x2724 <ProcessInput+0x54a>
    2476:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
            if (inputLen == 1) {
    247a:	b1 e0       	ldi	r27, 0x01	; 1
    247c:	fb 12       	cpse	r15, r27
    247e:	f6 c0       	rjmp	.+492    	; 0x266c <ProcessInput+0x492>

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
    2480:	80 91 10 3a 	lds	r24, 0x3A10	; 0x803a10 <currObj+0x1c>
    2484:	90 91 11 3a 	lds	r25, 0x3A11	; 0x803a11 <currObj+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2488:	20 91 02 3a 	lds	r18, 0x3A02	; 0x803a02 <currObj+0xe>
    248c:	30 91 03 3a 	lds	r19, 0x3A03	; 0x803a03 <currObj+0xf>
    2490:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    2494:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2498:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    249c:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    24a0:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    24a4:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24a8:	8b e5       	ldi	r24, 0x5B	; 91
    24aa:	9a e7       	ldi	r25, 0x7A	; 122
    24ac:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    24b0:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	80 93 38 39 	sts	0x3938, r24	; 0x803938 <reactStr+0x44>
    24bc:	90 93 39 39 	sts	0x3939, r25	; 0x803939 <reactStr+0x45>
    reactStr[2][number]=type;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	80 93 78 39 	sts	0x3978, r24	; 0x803978 <reactStr+0x84>
    24c8:	90 93 79 39 	sts	0x3979, r25	; 0x803979 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24cc:	2e ee       	ldi	r18, 0xEE	; 238
    24ce:	39 e7       	ldi	r19, 0x79	; 121
    24d0:	20 93 fa 38 	sts	0x38FA, r18	; 0x8038fa <reactStr+0x6>
    24d4:	30 93 fb 38 	sts	0x38FB, r19	; 0x8038fb <reactStr+0x7>
    reactStr[1][number]=length;
    24d8:	25 e1       	ldi	r18, 0x15	; 21
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	20 93 3a 39 	sts	0x393A, r18	; 0x80393a <reactStr+0x46>
    24e0:	30 93 3b 39 	sts	0x393B, r19	; 0x80393b <reactStr+0x47>
    reactStr[2][number]=type;
    24e4:	80 93 7a 39 	sts	0x397A, r24	; 0x80397a <reactStr+0x86>
    24e8:	90 93 7b 39 	sts	0x397B, r25	; 0x80397b <reactStr+0x87>
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	ee 0f       	add	r30, r30
    24f0:	ff 1f       	adc	r31, r31
    24f2:	ea 54       	subi	r30, 0x4A	; 74
    24f4:	f6 4c       	sbci	r31, 0xC6	; 198
    24f6:	10 82       	st	Z, r1
    24f8:	11 82       	std	Z+1, r1	; 0x01
            if (inputLen == 1) {

                //Show info about this area first
                SetResponse(elements++, currObj.addrStr[DESC], currObj.lenStr[DESC],GAME);
                SetResponse(elements++, A_LF, 2, TEASER);
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	68 2e       	mov	r6, r24
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    24fe:	99 e5       	ldi	r25, 0x59	; 89
    2500:	c9 2e       	mov	r12, r25
    2502:	9a e7       	ldi	r25, 0x7A	; 122
    2504:	d9 2e       	mov	r13, r25
    reactStr[1][number]=length;
    2506:	22 e0       	ldi	r18, 0x02	; 2
    2508:	a2 2e       	mov	r10, r18
    250a:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    250c:	88 24       	eor	r8, r8
    250e:	83 94       	inc	r8
    2510:	91 2c       	mov	r9, r1
                SetResponse(elements++, A_LOOK, L_LOOK, TEASER);

                //Check the visible children first
                route[currDepth+1] = 0;
                do{
                    route[currDepth+1] = FindChild(route[currDepth], 0, route[currDepth+1]);
    2512:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <currDepth>
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9c 01       	movw	r18, r24
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	f9 01       	movw	r30, r18
    2520:	ea 54       	subi	r30, 0x4A	; 74
    2522:	f6 4c       	sbci	r31, 0xC6	; 198
    2524:	7f 01       	movw	r14, r30
    2526:	40 81       	ld	r20, Z
    2528:	51 81       	ldd	r21, Z+1	; 0x01
    252a:	f9 01       	movw	r30, r18
    252c:	ec 54       	subi	r30, 0x4C	; 76
    252e:	f6 4c       	sbci	r31, 0xC6	; 198
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	73 da       	rcall	.-2842   	; 0x1a1e <FindChild>
    2538:	d7 01       	movw	r26, r14
    253a:	8d 93       	st	X+, r24
    253c:	9c 93       	st	X, r25
                    if (route[currDepth+1]) {
    253e:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ea 54       	subi	r30, 0x4A	; 74
    254a:	f6 4c       	sbci	r31, 0xC6	; 198
    254c:	80 81       	ld	r24, Z
    254e:	91 81       	ldd	r25, Z+1	; 0x01
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	09 f4       	brne	.+2      	; 0x2556 <ProcessInput+0x37c>
    2554:	4a c0       	rjmp	.+148    	; 0x25ea <ProcessInput+0x410>
                        if ((route[currDepth+1] != inventory[0])&&(route[currDepth+1] != inventory[1])) {
    2556:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <inventory>
    255a:	30 91 32 38 	lds	r19, 0x3832	; 0x803832 <inventory+0x1>
    255e:	82 17       	cp	r24, r18
    2560:	93 07       	cpc	r25, r19
    2562:	09 f4       	brne	.+2      	; 0x2566 <ProcessInput+0x38c>
    2564:	42 c0       	rjmp	.+132    	; 0x25ea <ProcessInput+0x410>
    2566:	20 91 33 38 	lds	r18, 0x3833	; 0x803833 <inventory+0x2>
    256a:	30 91 34 38 	lds	r19, 0x3834	; 0x803834 <inventory+0x3>
    256e:	82 17       	cp	r24, r18
    2570:	93 07       	cpc	r25, r19
                            PopulateObject(route[currDepth+1], &actObj1);
    2572:	d9 f1       	breq	.+118    	; 0x25ea <ProcessInput+0x410>
    2574:	65 eb       	ldi	r22, 0xB5	; 181
    2576:	78 e3       	ldi	r23, 0x38	; 56
    2578:	87 d9       	rcall	.-3314   	; 0x1888 <PopulateObject>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    257a:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x1a>
    257e:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2582:	e6 2d       	mov	r30, r6
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	df 01       	movw	r26, r30
    2588:	aa 0f       	add	r26, r26
    258a:	bb 1f       	adc	r27, r27
    258c:	ac 50       	subi	r26, 0x0C	; 12
    258e:	b7 4c       	sbci	r27, 0xC7	; 199
    2590:	20 91 c1 38 	lds	r18, 0x38C1	; 0x8038c1 <actObj1.3989+0xc>
    2594:	30 91 c2 38 	lds	r19, 0x38C2	; 0x8038c2 <actObj1.3989+0xd>
    2598:	2d 93       	st	X+, r18
    259a:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    259c:	df 01       	movw	r26, r30
    259e:	aa 0f       	add	r26, r26
    25a0:	bb 1f       	adc	r27, r27
    25a2:	ac 5c       	subi	r26, 0xCC	; 204
    25a4:	b6 4c       	sbci	r27, 0xC6	; 198
    25a6:	8d 93       	st	X+, r24
    25a8:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	ec 58       	subi	r30, 0x8C	; 140
    25b0:	f6 4c       	sbci	r31, 0xC6	; 198
    25b2:	10 82       	st	Z, r1
    25b4:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	86 0d       	add	r24, r6
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	63 94       	inc	r6
    25be:	63 94       	inc	r6
    25c0:	fc 01       	movw	r30, r24
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	ec 50       	subi	r30, 0x0C	; 12
    25c8:	f7 4c       	sbci	r31, 0xC7	; 199
    25ca:	c0 82       	st	Z, r12
    25cc:	d1 82       	std	Z+1, r13	; 0x01
    reactStr[1][number]=length;
    25ce:	fc 01       	movw	r30, r24
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	ec 5c       	subi	r30, 0xCC	; 204
    25d6:	f6 4c       	sbci	r31, 0xC6	; 198
    25d8:	a0 82       	st	Z, r10
    25da:	b1 82       	std	Z+1, r11	; 0x01
    reactStr[2][number]=type;
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	fc 01       	movw	r30, r24
    25e2:	ec 58       	subi	r30, 0x8C	; 140
    25e4:	f6 4c       	sbci	r31, 0xC6	; 198
    25e6:	80 82       	st	Z, r8
    25e8:	91 82       	std	Z+1, r9	; 0x01
                            PopulateObject(route[currDepth+1], &actObj1);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                            SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        }
                    }
                }while (route[currDepth+1]);
    25ea:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <currDepth>
    25ee:	82 2f       	mov	r24, r18
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	fc 01       	movw	r30, r24
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ea 54       	subi	r30, 0x4A	; 74
    25fa:	f6 4c       	sbci	r31, 0xC6	; 198
    25fc:	40 81       	ld	r20, Z
    25fe:	51 81       	ldd	r21, Z+1	; 0x01
    2600:	45 2b       	or	r20, r21
    2602:	09 f0       	breq	.+2      	; 0x2606 <ProcessInput+0x42c>
    2604:	86 cf       	rjmp	.-244    	; 0x2512 <ProcessInput+0x338>

                //Look back if not on level 0
                if (currDepth) {
    2606:	22 23       	and	r18, r18
    2608:	69 f1       	breq	.+90     	; 0x2664 <ProcessInput+0x48a>
                    PopulateObject(route[currDepth-1], &actObj1);
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	fc 01       	movw	r30, r24
    2610:	ee 54       	subi	r30, 0x4E	; 78
    2612:	f6 4c       	sbci	r31, 0xC6	; 198
    2614:	65 eb       	ldi	r22, 0xB5	; 181
    2616:	78 e3       	ldi	r23, 0x38	; 56
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	35 d9       	rcall	.-3478   	; 0x1888 <PopulateObject>
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
    261e:	20 91 cf 38 	lds	r18, 0x38CF	; 0x8038cf <actObj1.3989+0x1a>
    2622:	30 91 d0 38 	lds	r19, 0x38D0	; 0x8038d0 <actObj1.3989+0x1b>
    2626:	77 24       	eor	r7, r7
    2628:	73 94       	inc	r7
    262a:	76 0c       	add	r7, r6
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    262c:	86 2d       	mov	r24, r6
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	fc 01       	movw	r30, r24
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ec 50       	subi	r30, 0x0C	; 12
    2638:	f7 4c       	sbci	r31, 0xC7	; 199
    263a:	40 91 c1 38 	lds	r20, 0x38C1	; 0x8038c1 <actObj1.3989+0xc>
    263e:	50 91 c2 38 	lds	r21, 0x38C2	; 0x8038c2 <actObj1.3989+0xd>
    2642:	40 83       	st	Z, r20
    2644:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2646:	fc 01       	movw	r30, r24
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	ec 5c       	subi	r30, 0xCC	; 204
    264e:	f6 4c       	sbci	r31, 0xC6	; 198
    2650:	20 83       	st	Z, r18
    2652:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	fc 01       	movw	r30, r24
    265a:	ec 58       	subi	r30, 0x8C	; 140
    265c:	f6 4c       	sbci	r31, 0xC6	; 198
    265e:	10 82       	st	Z, r1
    2660:	11 82       	std	Z+1, r1	; 0x01
    2662:	9b c5       	rjmp	.+2870   	; 0x319a <ProcessInput+0xfc0>

                //Look back if not on level 0
                if (currDepth) {
                    PopulateObject(route[currDepth-1], &actObj1);
                    SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME],GAME);
                } else elements-=1;
    2664:	77 24       	eor	r7, r7
    2666:	7a 94       	dec	r7
    2668:	76 0c       	add	r7, r6
    266a:	97 c5       	rjmp	.+2862   	; 0x319a <ProcessInput+0xfc0>

            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    266c:	ee 2e       	mov	r14, r30
    266e:	f1 2c       	mov	r15, r1
    2670:	f7 01       	movw	r30, r14
    2672:	ee 0f       	add	r30, r30
    2674:	ff 1f       	adc	r31, r31
    2676:	ec 54       	subi	r30, 0x4C	; 76
    2678:	f6 4c       	sbci	r31, 0xC6	; 198
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	d8 01       	movw	r26, r16
    2680:	11 96       	adiw	r26, 0x01	; 1
    2682:	6c 91       	ld	r22, X
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	ca d9       	rcall	.-3180   	; 0x1a1e <FindChild>
    268a:	f7 01       	movw	r30, r14
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	ea 54       	subi	r30, 0x4A	; 74
    2692:	f6 4c       	sbci	r31, 0xC6	; 198
    2694:	80 83       	st	Z, r24
    2696:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2698:	90 91 26 38 	lds	r25, 0x3826	; 0x803826 <currDepth>
    269c:	29 2f       	mov	r18, r25
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	f9 01       	movw	r30, r18
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	ea 54       	subi	r30, 0x4A	; 74
    26a8:	f6 4c       	sbci	r31, 0xC6	; 198
    26aa:	40 81       	ld	r20, Z
    26ac:	51 81       	ldd	r21, Z+1	; 0x01
    26ae:	41 15       	cp	r20, r1
    26b0:	51 05       	cpc	r21, r1
    26b2:	21 f0       	breq	.+8      	; 0x26bc <ProcessInput+0x4e2>
                    PopulateObject(route[currDepth+1], &actObj1);
    26b4:	65 eb       	ldi	r22, 0xB5	; 181
    26b6:	78 e3       	ldi	r23, 0x38	; 56
    26b8:	ca 01       	movw	r24, r20
    26ba:	1e c0       	rjmp	.+60     	; 0x26f8 <ProcessInput+0x51e>
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
    26bc:	99 23       	and	r25, r25
    26be:	09 f4       	brne	.+2      	; 0x26c2 <ProcessInput+0x4e8>
                    if (CheckLetter(route[currDepth-1], data[1])) {
    26c0:	9e c5       	rjmp	.+2876   	; 0x31fe <ProcessInput+0x1024>
    26c2:	22 0f       	add	r18, r18
    26c4:	33 1f       	adc	r19, r19
    26c6:	f9 01       	movw	r30, r18
    26c8:	ee 54       	subi	r30, 0x4E	; 78
    26ca:	f6 4c       	sbci	r31, 0xC6	; 198
    26cc:	d8 01       	movw	r26, r16
    26ce:	11 96       	adiw	r26, 0x01	; 1
    26d0:	6c 91       	ld	r22, X
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	4f d9       	rcall	.-3426   	; 0x1976 <CheckLetter>
    26d8:	81 11       	cpse	r24, r1
    26da:	03 c0       	rjmp	.+6      	; 0x26e2 <ProcessInput+0x508>
}

//The game logic!
uint8_t ProcessInput(uint8_t *data){
    static object_model_t actObj1, actObj2;
    uint8_t elements = 1;
    26dc:	77 24       	eor	r7, r7
    26de:	73 94       	inc	r7
                    PopulateObject(route[currDepth+1], &actObj1);
//TODO: CHECKSTATE -> A_CANTLOOK item
                    SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);   
                } else if (currDepth) {
                    if (CheckLetter(route[currDepth-1], data[1])) {
                        PopulateObject(route[currDepth-1], &actObj1);
    26e0:	5c c5       	rjmp	.+2744   	; 0x319a <ProcessInput+0xfc0>
    26e2:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	ee 0f       	add	r30, r30
    26ea:	ff 1f       	adc	r31, r31
    26ec:	ee 54       	subi	r30, 0x4E	; 78
    26ee:	f6 4c       	sbci	r31, 0xC6	; 198
    26f0:	65 eb       	ldi	r22, 0xB5	; 181
    26f2:	78 e3       	ldi	r23, 0x38	; 56
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	c7 d8       	rcall	.-3698   	; 0x1888 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[DESC], actObj1.lenStr[DESC],GAME);
    26fa:	80 91 d1 38 	lds	r24, 0x38D1	; 0x8038d1 <actObj1.3989+0x1c>
    26fe:	90 91 d2 38 	lds	r25, 0x38D2	; 0x8038d2 <actObj1.3989+0x1d>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2702:	20 91 c3 38 	lds	r18, 0x38C3	; 0x8038c3 <actObj1.3989+0xe>
    2706:	30 91 c4 38 	lds	r19, 0x38C4	; 0x8038c4 <actObj1.3989+0xf>
    270a:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    270e:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2712:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2716:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    271a:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    271e:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
    2722:	2a ce       	rjmp	.-940    	; 0x2378 <ProcessInput+0x19e>
                    SetResponse(elements++, A_DONTSEE, L_DONTSEE, TEASER);
                }
            }
        
        //Pick up an object
        } else if (data[0] == 'p') {
    2724:	80 37       	cpi	r24, 0x70	; 112
    2726:	09 f0       	breq	.+2      	; 0x272a <ProcessInput+0x550>
    2728:	96 c0       	rjmp	.+300    	; 0x2856 <ProcessInput+0x67c>
            if (inventory[0]&&inventory[1]) {
    272a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    272e:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2732:	89 2b       	or	r24, r25
    2734:	79 f0       	breq	.+30     	; 0x2754 <ProcessInput+0x57a>
    2736:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    273a:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    273e:	89 2b       	or	r24, r25
    2740:	49 f0       	breq	.+18     	; 0x2754 <ProcessInput+0x57a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2742:	85 e4       	ldi	r24, 0x45	; 69
    2744:	98 e7       	ldi	r25, 0x78	; 120
    2746:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    274a:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    274e:	89 e5       	ldi	r24, 0x59	; 89
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	08 ce       	rjmp	.-1008   	; 0x2364 <ProcessInput+0x18a>
        
        //Pick up an object
        } else if (data[0] == 'p') {
            if (inventory[0]&&inventory[1]) {
                SetResponse(elements++, A_CARRYTWO, L_CARRYTWO, TEASER);
            } else if (inputLen != 2) {
    2754:	b2 e0       	ldi	r27, 0x02	; 2
    2756:	fb 12       	cpse	r15, r27
    2758:	70 cd       	rjmp	.-1312   	; 0x223a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
    275a:	e0 90 26 38 	lds	r14, 0x3826	; 0x803826 <currDepth>
    275e:	f1 2c       	mov	r15, r1
    2760:	f7 01       	movw	r30, r14
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	ec 54       	subi	r30, 0x4C	; 76
    2768:	f6 4c       	sbci	r31, 0xC6	; 198
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	d8 01       	movw	r26, r16
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	6c 91       	ld	r22, X
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	52 d9       	rcall	.-3420   	; 0x1a1e <FindChild>
    277a:	f7 01       	movw	r30, r14
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	ea 54       	subi	r30, 0x4A	; 74
    2782:	f6 4c       	sbci	r31, 0xC6	; 198
    2784:	80 83       	st	Z, r24
    2786:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    2788:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <currDepth>
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	2f 5f       	subi	r18, 0xFF	; 255
    2790:	3f 4f       	sbci	r19, 0xFF	; 255
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	f9 01       	movw	r30, r18
    2798:	ec 54       	subi	r30, 0x4C	; 76
    279a:	f6 4c       	sbci	r31, 0xC6	; 198
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <ProcessInput+0x5cc>
    27a4:	ca c3       	rjmp	.+1940   	; 0x2f3a <ProcessInput+0xd60>
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
    27a6:	40 91 31 38 	lds	r20, 0x3831	; 0x803831 <inventory>
    27aa:	50 91 32 38 	lds	r21, 0x3832	; 0x803832 <inventory+0x1>
    27ae:	84 17       	cp	r24, r20
    27b0:	95 07       	cpc	r25, r21
    27b2:	39 f0       	breq	.+14     	; 0x27c2 <ProcessInput+0x5e8>
    27b4:	40 91 33 38 	lds	r20, 0x3833	; 0x803833 <inventory+0x2>
    27b8:	50 91 34 38 	lds	r21, 0x3834	; 0x803834 <inventory+0x3>
    27bc:	84 17       	cp	r24, r20
    27be:	95 07       	cpc	r25, r21
    27c0:	c1 f4       	brne	.+48     	; 0x27f2 <ProcessInput+0x618>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	98 e7       	ldi	r25, 0x78	; 120
    27c6:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    27ca:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    27ce:	85 e2       	ldi	r24, 0x25	; 37
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    27d6:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    27e2:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[1], 0);
                if (route[currDepth+1]) {
                    if ((route[currDepth+1] == inventory[0])||(route[currDepth+1] == inventory[1])) {
                        SetResponse(elements++, A_ALREADYCARRYING, L_ALREADYCARRYING, TEASER);
                        route[currDepth+1] = 0;
    27e6:	f9 01       	movw	r30, r18
    27e8:	ec 54       	subi	r30, 0x4C	; 76
    27ea:	f6 4c       	sbci	r31, 0xC6	; 198
    27ec:	10 82       	st	Z, r1
    27ee:	11 82       	std	Z+1, r1	; 0x01
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
    27f0:	c3 cd       	rjmp	.-1146   	; 0x2378 <ProcessInput+0x19e>
    27f2:	65 eb       	ldi	r22, 0xB5	; 181
    27f4:	78 e3       	ldi	r23, 0x38	; 56
    27f6:	48 d8       	rcall	.-3952   	; 0x1888 <PopulateObject>
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
    27f8:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3989+0x7>
    27fc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <CheckState>
    2800:	88 23       	and	r24, r24
    2802:	09 f4       	brne	.+2      	; 0x2806 <ProcessInput+0x62c>
    2804:	75 c3       	rjmp	.+1770   	; 0x2ef0 <ProcessInput+0xd16>
                            if (actObj1.byteField[ITEM_NR]) {
    2806:	80 91 c0 38 	lds	r24, 0x38C0	; 0x8038c0 <actObj1.3989+0xb>
    280a:	88 23       	and	r24, r24
    280c:	09 f4       	brne	.+2      	; 0x2810 <ProcessInput+0x636>
    280e:	15 cd       	rjmp	.-1494   	; 0x223a <ProcessInput+0x60>
                                if (inventory[0]) {
    2810:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    2814:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2818:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
                                    inventory[1] = route[currDepth+1];
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	ea 54       	subi	r30, 0x4A	; 74
    2824:	f6 4c       	sbci	r31, 0xC6	; 198
                    } else {
                        //Put item in the inventory if possible
                        PopulateObject(route[currDepth+1], &actObj1);  
                        if (CheckState(actObj1.byteField[ACTION_ACL])) {
                            if (actObj1.byteField[ITEM_NR]) {
                                if (inventory[0]) {
    2826:	89 2b       	or	r24, r25
    2828:	39 f0       	breq	.+14     	; 0x2838 <ProcessInput+0x65e>
                                    inventory[1] = route[currDepth+1];
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <inventory+0x2>
    2832:	90 93 34 38 	sts	0x3834, r25	; 0x803834 <inventory+0x3>
    2836:	06 c0       	rjmp	.+12     	; 0x2844 <ProcessInput+0x66a>
                                } else {
                                    inventory[0] = route[currDepth+1];
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <inventory>
    2840:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <inventory+0x1>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2844:	8a e0       	ldi	r24, 0x0A	; 10
    2846:	98 e7       	ldi	r25, 0x78	; 120
    2848:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    284c:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2850:	86 e1       	ldi	r24, 0x16	; 22
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	5e c2       	rjmp	.+1212   	; 0x2d12 <ProcessInput+0xb38>
                } else SetResponse(elements++, A_NOSUCHOBJECT, L_NOSUCHOBJECT, TEASER);
            }
        } else

        //Drop item if in inventory
        if (data[0] == 'd') {
    2856:	84 36       	cpi	r24, 0x64	; 100
    2858:	d9 f4       	brne	.+54     	; 0x2890 <ProcessInput+0x6b6>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    285a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    285e:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	09 f0       	breq	.+2      	; 0x2868 <ProcessInput+0x68e>
    2866:	ce c4       	rjmp	.+2460   	; 0x3204 <ProcessInput+0x102a>
    2868:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    286c:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    2870:	89 2b       	or	r24, r25
    2872:	49 f4       	brne	.+18     	; 0x2886 <ProcessInput+0x6ac>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2874:	84 ee       	ldi	r24, 0xE4	; 228
    2876:	97 e7       	ldi	r25, 0x77	; 119
    2878:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    287c:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2880:	86 e2       	ldi	r24, 0x26	; 38
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	6f cd       	rjmp	.-1314   	; 0x2364 <ProcessInput+0x18a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    2886:	b2 e0       	ldi	r27, 0x02	; 2
    2888:	fb 16       	cp	r15, r27
    288a:	09 f4       	brne	.+2      	; 0x288e <ProcessInput+0x6b4>
    288c:	21 c5       	rjmp	.+2626   	; 0x32d0 <ProcessInput+0x10f6>
    288e:	d5 cc       	rjmp	.-1622   	; 0x223a <ProcessInput+0x60>
                    if (x) SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                }
            }

        //Inventory list
        } else if (data[0] == 'i') {
    2890:	89 36       	cpi	r24, 0x69	; 105
    2892:	09 f0       	breq	.+2      	; 0x2896 <ProcessInput+0x6bc>
    2894:	7b c0       	rjmp	.+246    	; 0x298c <ProcessInput+0x7b2>
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
    2896:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <inventory>
    289a:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <inventory+0x1>
    289e:	89 2b       	or	r24, r25
    28a0:	31 f4       	brne	.+12     	; 0x28ae <ProcessInput+0x6d4>
    28a2:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    28a6:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    28aa:	89 2b       	or	r24, r25
    28ac:	19 f3       	breq	.-58     	; 0x2874 <ProcessInput+0x69a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28ae:	8a e0       	ldi	r24, 0x0A	; 10
    28b0:	98 e7       	ldi	r25, 0x78	; 120
    28b2:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    28b6:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    28ba:	86 e1       	ldi	r24, 0x16	; 22
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    28c2:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    28ce:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>
    28d2:	21 e3       	ldi	r18, 0x31	; 49
    28d4:	e2 2e       	mov	r14, r18
    28d6:	28 e3       	ldi	r18, 0x38	; 56
    28d8:	f2 2e       	mov	r15, r18
    28da:	35 e3       	ldi	r19, 0x35	; 53
    28dc:	63 2e       	mov	r6, r19
    28de:	38 e3       	ldi	r19, 0x38	; 56
    28e0:	73 2e       	mov	r7, r19
        //Inventory list
        } else if (data[0] == 'i') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
    28e2:	42 e0       	ldi	r20, 0x02	; 2
    28e4:	54 2e       	mov	r5, r20
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    28e6:	59 e5       	ldi	r21, 0x59	; 89
    28e8:	c5 2e       	mov	r12, r21
    28ea:	5a e7       	ldi	r21, 0x7A	; 122
    28ec:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    28ee:	62 e0       	ldi	r22, 0x02	; 2
    28f0:	a6 2e       	mov	r10, r22
    28f2:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    28f4:	88 24       	eor	r8, r8
    28f6:	83 94       	inc	r8
    28f8:	91 2c       	mov	r9, r1
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    28fa:	d7 01       	movw	r26, r14
    28fc:	8d 91       	ld	r24, X+
    28fe:	9d 91       	ld	r25, X+
    2900:	7d 01       	movw	r14, r26
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	d9 f1       	breq	.+118    	; 0x297c <ProcessInput+0x7a2>
                        PopulateObject(inventory[x], &actObj1);
    2906:	65 eb       	ldi	r22, 0xB5	; 181
    2908:	78 e3       	ldi	r23, 0x38	; 56
    290a:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    290e:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x1a>
    2912:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2916:	e5 2d       	mov	r30, r5
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	df 01       	movw	r26, r30
    291c:	aa 0f       	add	r26, r26
    291e:	bb 1f       	adc	r27, r27
    2920:	ac 50       	subi	r26, 0x0C	; 12
    2922:	b7 4c       	sbci	r27, 0xC7	; 199
    2924:	20 91 c1 38 	lds	r18, 0x38C1	; 0x8038c1 <actObj1.3989+0xc>
    2928:	30 91 c2 38 	lds	r19, 0x38C2	; 0x8038c2 <actObj1.3989+0xd>
    292c:	2d 93       	st	X+, r18
    292e:	3c 93       	st	X, r19
    reactStr[1][number]=length;
    2930:	df 01       	movw	r26, r30
    2932:	aa 0f       	add	r26, r26
    2934:	bb 1f       	adc	r27, r27
    2936:	ac 5c       	subi	r26, 0xCC	; 204
    2938:	b6 4c       	sbci	r27, 0xC6	; 198
    293a:	8d 93       	st	X+, r24
    293c:	9c 93       	st	X, r25
    reactStr[2][number]=type;
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	ec 58       	subi	r30, 0x8C	; 140
    2944:	f6 4c       	sbci	r31, 0xC6	; 198
    2946:	10 82       	st	Z, r1
    2948:	11 82       	std	Z+1, r1	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    294a:	e1 e0       	ldi	r30, 0x01	; 1
    294c:	e5 0d       	add	r30, r5
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	53 94       	inc	r5
    2952:	53 94       	inc	r5
    2954:	df 01       	movw	r26, r30
    2956:	aa 0f       	add	r26, r26
    2958:	bb 1f       	adc	r27, r27
    295a:	ac 50       	subi	r26, 0x0C	; 12
    295c:	b7 4c       	sbci	r27, 0xC7	; 199
    295e:	cd 92       	st	X+, r12
    2960:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2962:	df 01       	movw	r26, r30
    2964:	aa 0f       	add	r26, r26
    2966:	bb 1f       	adc	r27, r27
    2968:	ac 5c       	subi	r26, 0xCC	; 204
    296a:	b6 4c       	sbci	r27, 0xC6	; 198
    296c:	ad 92       	st	X+, r10
    296e:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ec 58       	subi	r30, 0x8C	; 140
    2976:	f6 4c       	sbci	r31, 0xC6	; 198
    2978:	80 82       	st	Z, r8
    297a:	91 82       	std	Z+1, r9	; 0x01
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else {
                SetResponse(elements++, A_NOWCARRING, L_NOWCARRING, TEASER);
                //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                
                for (uint8_t x=0; x<2; ++x) {
    297c:	6e 14       	cp	r6, r14
    297e:	7f 04       	cpc	r7, r15
    2980:	09 f0       	breq	.+2      	; 0x2984 <ProcessInput+0x7aa>
    2982:	bb cf       	rjmp	.-138    	; 0x28fa <ProcessInput+0x720>
                        SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        SetResponse(elements++, A_COMMA, L_COMMA, TEASER);
                        //SetResponse(elements++, A_SPACE, L_SPACE, TEASER);
                    }
                }
                elements -= 1;
    2984:	77 24       	eor	r7, r7
    2986:	7a 94       	dec	r7
    2988:	75 0c       	add	r7, r5
    298a:	07 c4       	rjmp	.+2062   	; 0x319a <ProcessInput+0xfc0>
            }            
        
        //Talk, use, give, read
        } else if ((data[0] == 't')||(data[0] == 'u')||(data[0] == 'g')||(data[0] == 'r')) {
    298c:	9c e8       	ldi	r25, 0x8C	; 140
    298e:	98 0f       	add	r25, r24
    2990:	92 30       	cpi	r25, 0x02	; 2
    2992:	28 f0       	brcs	.+10     	; 0x299e <ProcessInput+0x7c4>
    2994:	87 36       	cpi	r24, 0x67	; 103
    2996:	19 f0       	breq	.+6      	; 0x299e <ProcessInput+0x7c4>
    2998:	82 37       	cpi	r24, 0x72	; 114
    299a:	09 f0       	breq	.+2      	; 0x299e <ProcessInput+0x7c4>
    299c:	d7 c2       	rjmp	.+1454   	; 0x2f4c <ProcessInput+0xd72>
            if ((inputLen<2)||(inputLen>3)) {
    299e:	8e ef       	ldi	r24, 0xFE	; 254
    29a0:	8f 0d       	add	r24, r15
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	08 f0       	brcs	.+2      	; 0x29a8 <ProcessInput+0x7ce>
    29a6:	49 cc       	rjmp	.-1902   	; 0x223a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);                
            
            //Check for visible person or object first
            } else {
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
    29a8:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    29ac:	ce 2e       	mov	r12, r30
    29ae:	d1 2c       	mov	r13, r1
    29b0:	d8 01       	movw	r26, r16
    29b2:	af 0d       	add	r26, r15
    29b4:	b1 1d       	adc	r27, r1
    29b6:	11 97       	sbiw	r26, 0x01	; 1
    29b8:	f6 01       	movw	r30, r12
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	ec 54       	subi	r30, 0x4C	; 76
    29c0:	f6 4c       	sbci	r31, 0xC6	; 198
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	6c 91       	ld	r22, X
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	28 d8       	rcall	.-4016   	; 0x1a1e <FindChild>
    29ce:	f6 01       	movw	r30, r12
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	ea 54       	subi	r30, 0x4A	; 74
    29d6:	f6 4c       	sbci	r31, 0xC6	; 198
    29d8:	80 83       	st	Z, r24
    29da:	91 83       	std	Z+1, r25	; 0x01
                if (route[currDepth+1]) {
    29dc:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	ee 0f       	add	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	ea 54       	subi	r30, 0x4A	; 74
    29e8:	f6 4c       	sbci	r31, 0xC6	; 198
    29ea:	80 81       	ld	r24, Z
    29ec:	91 81       	ldd	r25, Z+1	; 0x01
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <ProcessInput+0x81a>
    29f2:	9a c2       	rjmp	.+1332   	; 0x2f28 <ProcessInput+0xd4e>
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
    29f4:	b3 e0       	ldi	r27, 0x03	; 3
    29f6:	fb 12       	cpse	r15, r27
    29f8:	78 c1       	rjmp	.+752    	; 0x2cea <ProcessInput+0xb10>
    29fa:	f8 01       	movw	r30, r16
    29fc:	20 81       	ld	r18, Z
    29fe:	25 37       	cpi	r18, 0x75	; 117
    2a00:	19 f0       	breq	.+6      	; 0x2a08 <ProcessInput+0x82e>
    2a02:	27 36       	cpi	r18, 0x67	; 103
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <ProcessInput+0x82e>
    2a06:	71 c1       	rjmp	.+738    	; 0x2cea <ProcessInput+0xb10>
    2a08:	61 2c       	mov	r6, r1
    2a0a:	77 24       	eor	r7, r7
    2a0c:	73 94       	inc	r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a0e:	54 e6       	ldi	r21, 0x64	; 100
    2a10:	c5 2e       	mov	r12, r21
    2a12:	59 e7       	ldi	r21, 0x79	; 121
    2a14:	d5 2e       	mov	r13, r21
    reactStr[1][number]=length;
    2a16:	61 e2       	ldi	r22, 0x21	; 33
    2a18:	a6 2e       	mov	r10, r22
    2a1a:	b1 2c       	mov	r11, r1
    reactStr[2][number]=type;
    2a1c:	88 24       	eor	r8, r8
    2a1e:	83 94       	inc	r8
    2a20:	91 2c       	mov	r9, r1
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
                            if (inventory[x]) { 
    2a22:	e6 2c       	mov	r14, r6
    2a24:	f1 2c       	mov	r15, r1
    2a26:	c7 01       	movw	r24, r14
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	9c 01       	movw	r18, r24
    2a2e:	2f 5c       	subi	r18, 0xCF	; 207
    2a30:	37 4c       	sbci	r19, 0xC7	; 199
    2a32:	79 01       	movw	r14, r18
    2a34:	d9 01       	movw	r26, r18
    2a36:	8d 91       	ld	r24, X+
    2a38:	9c 91       	ld	r25, X
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	81 f0       	breq	.+32     	; 0x2a5e <ProcessInput+0x884>
                                if (CheckLetter(inventory[x], data[1])) {
    2a3e:	f8 01       	movw	r30, r16
    2a40:	61 81       	ldd	r22, Z+1	; 0x01
    2a42:	0e 94 bb 0c 	call	0x1976	; 0x1976 <CheckLetter>
    2a46:	88 23       	and	r24, r24
    2a48:	51 f0       	breq	.+20     	; 0x2a5e <ProcessInput+0x884>
                                    PopulateObject(inventory[x], &actObj2);
    2a4a:	6a e8       	ldi	r22, 0x8A	; 138
    2a4c:	78 e3       	ldi	r23, 0x38	; 56
    2a4e:	d7 01       	movw	r26, r14
    2a50:	8d 91       	ld	r24, X+
    2a52:	9c 91       	ld	r25, X
    2a54:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>
                                    x = 2;
    2a58:	32 e0       	ldi	r19, 0x02	; 2
    2a5a:	63 2e       	mov	r6, r19
    2a5c:	1e c0       	rjmp	.+60     	; 0x2a9a <ProcessInput+0x8c0>
                                }
                            }
                            if (x == 1) { 
    2a5e:	b1 e0       	ldi	r27, 0x01	; 1
    2a60:	6b 12       	cpse	r6, r27
    2a62:	1a c0       	rjmp	.+52     	; 0x2a98 <ProcessInput+0x8be>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2a64:	e7 2d       	mov	r30, r7
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	df 01       	movw	r26, r30
    2a6a:	aa 0f       	add	r26, r26
    2a6c:	bb 1f       	adc	r27, r27
    2a6e:	ac 50       	subi	r26, 0x0C	; 12
    2a70:	b7 4c       	sbci	r27, 0xC7	; 199
    2a72:	cd 92       	st	X+, r12
    2a74:	dc 92       	st	X, r13
    reactStr[1][number]=length;
    2a76:	df 01       	movw	r26, r30
    2a78:	aa 0f       	add	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	ac 5c       	subi	r26, 0xCC	; 204
    2a7e:	b6 4c       	sbci	r27, 0xC6	; 198
    2a80:	ad 92       	st	X+, r10
    2a82:	bc 92       	st	X, r11
    reactStr[2][number]=type;
    2a84:	ee 0f       	add	r30, r30
    2a86:	ff 1f       	adc	r31, r31
    2a88:	ec 58       	subi	r30, 0x8C	; 140
    2a8a:	f6 4c       	sbci	r31, 0xC6	; 198
    2a8c:	80 82       	st	Z, r8
    2a8e:	91 82       	std	Z+1, r9	; 0x01
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
                                data[0] = 0;
    2a90:	f8 01       	movw	r30, r16
    2a92:	10 82       	st	Z, r1
                                    PopulateObject(inventory[x], &actObj2);
                                    x = 2;
                                }
                            }
                            if (x == 1) { 
                                SetResponse(elements++, A_NOTCARRYING, L_NOTCARRYING, TEASER);
    2a94:	73 94       	inc	r7
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <ProcessInput+0x8c0>
    2a98:	61 2c       	mov	r6, r1
                route[currDepth+1] = FindChild(route[currDepth], data[inputLen-1], 0);
                if (route[currDepth+1]) {
                    
                    //Give item to person / use item on object 
                    if ((inputLen == 3)&&((data[0] == 'u')||(data[0] == 'g'))) {
                        for (uint8_t x=0; x<2; x++) {
    2a9a:	63 94       	inc	r6
    2a9c:	f1 e0       	ldi	r31, 0x01	; 1
    2a9e:	6f 16       	cp	r6, r31
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <ProcessInput+0x8ca>
    2aa2:	bf cf       	rjmp	.-130    	; 0x2a22 <ProcessInput+0x848>
                                data[0] = 0;
                            }
                        }

                        //Both the item and person/object are found, check if action is legit
                        if (data[0]){
    2aa4:	d8 01       	movw	r26, r16
    2aa6:	8c 91       	ld	r24, X
    2aa8:	88 23       	and	r24, r24
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <ProcessInput+0x8d4>
    2aac:	76 c3       	rjmp	.+1772   	; 0x319a <ProcessInput+0xfc0>
                            PopulateObject(route[currDepth+1], &actObj1);
    2aae:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	ee 0f       	add	r30, r30
    2ab6:	ff 1f       	adc	r31, r31
    2ab8:	ea 54       	subi	r30, 0x4A	; 74
    2aba:	f6 4c       	sbci	r31, 0xC6	; 198
    2abc:	65 eb       	ldi	r22, 0xB5	; 181
    2abe:	78 e3       	ldi	r23, 0x38	; 56
    2ac0:	80 81       	ld	r24, Z
    2ac2:	91 81       	ldd	r25, Z+1	; 0x01
    2ac4:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>

                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2ac8:	e0 90 d3 38 	lds	r14, 0x38D3	; 0x8038d3 <actObj1.3989+0x1e>
    2acc:	f0 90 d4 38 	lds	r15, 0x38D4	; 0x8038d4 <actObj1.3989+0x1f>
    2ad0:	b1 e0       	ldi	r27, 0x01	; 1
    2ad2:	eb 16       	cp	r14, r27
    2ad4:	f1 04       	cpc	r15, r1
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <ProcessInput+0x900>
    2ad8:	9a c0       	rjmp	.+308    	; 0x2c0e <ProcessInput+0xa34>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2ada:	98 01       	movw	r18, r16
    2adc:	2e 5f       	subi	r18, 0xFE	; 254
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	80 91 c5 38 	lds	r24, 0x38C5	; 0x8038c5 <actObj1.3989+0x10>
    2ae8:	90 91 c6 38 	lds	r25, 0x38C6	; 0x8038c6 <actObj1.3989+0x11>
    2aec:	0e 94 39 0b 	call	0x1672	; 0x1672 <ExtEERead>
                                if (data[2] == '1') {
    2af0:	f8 01       	movw	r30, r16
    2af2:	42 81       	ldd	r20, Z+2	; 0x02
    2af4:	21 e0       	ldi	r18, 0x01	; 1
    2af6:	27 0d       	add	r18, r7
    2af8:	87 2d       	mov	r24, r7
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	41 33       	cpi	r20, 0x31	; 49
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <ProcessInput+0x928>
    2b00:	6b c0       	rjmp	.+214    	; 0x2bd8 <ProcessInput+0x9fe>
                                    uint8_t item = actObj2.byteField[ITEM_NR];
    2b02:	30 91 95 38 	lds	r19, 0x3895	; 0x803895 <actObj2.3990+0xb>
                                    if ((item < 31)||(item > 34)) {
    2b06:	51 ee       	ldi	r21, 0xE1	; 225
    2b08:	53 0f       	add	r21, r19
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	ff 1f       	adc	r31, r31
    2b10:	ec 50       	subi	r30, 0x0C	; 12
    2b12:	f7 4c       	sbci	r31, 0xC7	; 199
                            //Special game
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
                                if (data[2] == '1') {
                                    uint8_t item = actObj2.byteField[ITEM_NR];
                                    if ((item < 31)||(item > 34)) {
    2b14:	54 30       	cpi	r21, 0x04	; 4
    2b16:	60 f0       	brcs	.+24     	; 0x2b30 <ProcessInput+0x956>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b18:	44 e0       	ldi	r20, 0x04	; 4
    2b1a:	59 e7       	ldi	r21, 0x79	; 121
    2b1c:	40 83       	st	Z, r20
    2b1e:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2b20:	fc 01       	movw	r30, r24
    2b22:	ee 0f       	add	r30, r30
    2b24:	ff 1f       	adc	r31, r31
    2b26:	ec 5c       	subi	r30, 0xCC	; 204
    2b28:	f6 4c       	sbci	r31, 0xC6	; 198
    2b2a:	4a e1       	ldi	r20, 0x1A	; 26
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	64 c0       	rjmp	.+200    	; 0x2bf8 <ProcessInput+0xa1e>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b30:	6e e8       	ldi	r22, 0x8E	; 142
    2b32:	75 e7       	ldi	r23, 0x75	; 117
    2b34:	60 83       	st	Z, r22
    2b36:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2b38:	fc 01       	movw	r30, r24
    2b3a:	ee 0f       	add	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	ec 5c       	subi	r30, 0xCC	; 204
    2b40:	f6 4c       	sbci	r31, 0xC6	; 198
    2b42:	62 eb       	ldi	r22, 0xB2	; 178
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	60 83       	st	Z, r22
    2b48:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	fc 01       	movw	r30, r24
    2b50:	ec 58       	subi	r30, 0x8C	; 140
    2b52:	f6 4c       	sbci	r31, 0xC6	; 198
    2b54:	e0 82       	st	Z, r14
    2b56:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b58:	82 2f       	mov	r24, r18
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	ee 0f       	add	r30, r30
    2b60:	ff 1f       	adc	r31, r31
    2b62:	ec 50       	subi	r30, 0x0C	; 12
    2b64:	f7 4c       	sbci	r31, 0xC7	; 199
    2b66:	6b e5       	ldi	r22, 0x5B	; 91
    2b68:	7a e7       	ldi	r23, 0x7A	; 122
    2b6a:	60 83       	st	Z, r22
    2b6c:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2b6e:	fc 01       	movw	r30, r24
    2b70:	ee 0f       	add	r30, r30
    2b72:	ff 1f       	adc	r31, r31
    2b74:	ec 5c       	subi	r30, 0xCC	; 204
    2b76:	f6 4c       	sbci	r31, 0xC6	; 198
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	60 83       	st	Z, r22
    2b7e:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	fc 01       	movw	r30, r24
    2b86:	ec 58       	subi	r30, 0x8C	; 140
    2b88:	f6 4c       	sbci	r31, 0xC6	; 198
    2b8a:	e0 82       	st	Z, r14
    2b8c:	f1 82       	std	Z+1, r15	; 0x01
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	87 0d       	add	r24, r7
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	f3 e0       	ldi	r31, 0x03	; 3
    2b96:	7f 0e       	add	r7, r31
    2b98:	fc 01       	movw	r30, r24
    2b9a:	ee 0f       	add	r30, r30
    2b9c:	ff 1f       	adc	r31, r31
    2b9e:	ec 50       	subi	r30, 0x0C	; 12
    2ba0:	f7 4c       	sbci	r31, 0xC7	; 199
    2ba2:	60 eb       	ldi	r22, 0xB0	; 176
    2ba4:	78 e7       	ldi	r23, 0x78	; 120
    2ba6:	60 83       	st	Z, r22
    2ba8:	71 83       	std	Z+1, r23	; 0x01
    reactStr[1][number]=length;
    2baa:	fc 01       	movw	r30, r24
    2bac:	ee 0f       	add	r30, r30
    2bae:	ff 1f       	adc	r31, r31
    2bb0:	ec 5c       	subi	r30, 0xCC	; 204
    2bb2:	f6 4c       	sbci	r31, 0xC6	; 198
    2bb4:	62 e1       	ldi	r22, 0x12	; 18
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	60 83       	st	Z, r22
    2bba:	71 83       	std	Z+1, r23	; 0x01
    reactStr[2][number]=type;
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	ec 58       	subi	r30, 0x8C	; 140
    2bc4:	f6 4c       	sbci	r31, 0xC6	; 198
    2bc6:	e0 82       	st	Z, r14
    2bc8:	f1 82       	std	Z+1, r15	; 0x01
                                        SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                    } else {
                                        SetResponse(elements++, A_PRIEST, L_PRIEST, TEASER);
                                        SetResponse(elements++, A_LF, 2, TEASER);
                                        SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                        specialInput[0] = '1';
    2bca:	40 93 e3 38 	sts	0x38E3, r20	; 0x8038e3 <specialInput>
                                        specialInput[1] = item;
    2bce:	30 93 e4 38 	sts	0x38E4, r19	; 0x8038e4 <specialInput+0x1>
                                        specialInput[2] = 0;
    2bd2:	10 92 e5 38 	sts	0x38E5, r1	; 0x8038e5 <specialInput+0x2>
    2bd6:	e1 c2       	rjmp	.+1474   	; 0x319a <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2bd8:	fc 01       	movw	r30, r24
    2bda:	ee 0f       	add	r30, r30
    2bdc:	ff 1f       	adc	r31, r31
    2bde:	ec 50       	subi	r30, 0x0C	; 12
    2be0:	f7 4c       	sbci	r31, 0xC7	; 199
    2be2:	40 e4       	ldi	r20, 0x40	; 64
    2be4:	56 e7       	ldi	r21, 0x76	; 118
    2be6:	40 83       	st	Z, r20
    2be8:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2bea:	fc 01       	movw	r30, r24
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	ec 5c       	subi	r30, 0xCC	; 204
    2bf2:	f6 4c       	sbci	r31, 0xC6	; 198
    2bf4:	42 e4       	ldi	r20, 0x42	; 66
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	40 83       	st	Z, r20
    2bfa:	51 83       	std	Z+1, r21	; 0x01
    reactStr[2][number]=type;
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	fc 01       	movw	r30, r24
    2c02:	ec 58       	subi	r30, 0x8C	; 140
    2c04:	f6 4c       	sbci	r31, 0xC6	; 198
    2c06:	e0 82       	st	Z, r14
    2c08:	f1 82       	std	Z+1, r15	; 0x01
                                        specialInput[2] = 0;
                                    }

                                //There should not be another special
                                } else {
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
    2c0a:	72 2e       	mov	r7, r18
    2c0c:	c6 c2       	rjmp	.+1420   	; 0x319a <ProcessInput+0xfc0>
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
    2c0e:	90 91 be 38 	lds	r25, 0x38BE	; 0x8038be <actObj1.3989+0x9>
    2c12:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <actObj2.3990+0xb>
    2c16:	98 13       	cpse	r25, r24
    2c18:	2f c0       	rjmp	.+94     	; 0x2c78 <ProcessInput+0xa9e>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2c1a:	20 91 db 38 	lds	r18, 0x38DB	; 0x8038db <actObj1.3989+0x26>
    2c1e:	30 91 dc 38 	lds	r19, 0x38DC	; 0x8038dc <actObj1.3989+0x27>
    2c22:	ff 24       	eor	r15, r15
    2c24:	f3 94       	inc	r15
    2c26:	f7 0c       	add	r15, r7
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c28:	87 2d       	mov	r24, r7
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	ec 50       	subi	r30, 0x0C	; 12
    2c34:	f7 4c       	sbci	r31, 0xC7	; 199
    2c36:	40 91 cd 38 	lds	r20, 0x38CD	; 0x8038cd <actObj1.3989+0x18>
    2c3a:	50 91 ce 38 	lds	r21, 0x38CE	; 0x8038ce <actObj1.3989+0x19>
    2c3e:	40 83       	st	Z, r20
    2c40:	51 83       	std	Z+1, r21	; 0x01
    reactStr[1][number]=length;
    2c42:	fc 01       	movw	r30, r24
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	ec 5c       	subi	r30, 0xCC	; 204
    2c4a:	f6 4c       	sbci	r31, 0xC6	; 198
    2c4c:	20 83       	st	Z, r18
    2c4e:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	fc 01       	movw	r30, r24
    2c56:	ec 58       	subi	r30, 0x8C	; 140
    2c58:	f6 4c       	sbci	r31, 0xC6	; 198
    2c5a:	10 82       	st	Z, r1
    2c5c:	11 82       	std	Z+1, r1	; 0x01
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    2c5e:	80 91 df 38 	lds	r24, 0x38DF	; 0x8038df <actObj1.3989+0x2a>
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2c68:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2c6c:	80 91 bf 38 	lds	r24, 0x38BF	; 0x8038bf <actObj1.3989+0xa>
    2c70:	0e 94 df 08 	call	0x11be	; 0x11be <UpdateState>
                                    SetResponse(elements++, A_ERROR, L_ERROR, TEASER);
                                }

                            //Normal "use ... on ..." or "give ... to ..." action
                            } else if (actObj1.byteField[ACTION_ITEM] == actObj2.byteField[ITEM_NR]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2c74:	7f 2c       	mov	r7, r15
    2c76:	91 c2       	rjmp	.+1314   	; 0x319a <ProcessInput+0xfc0>
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
    2c78:	d8 01       	movw	r26, r16
    2c7a:	8c 91       	ld	r24, X
    2c7c:	85 37       	cpi	r24, 0x75	; 117
    2c7e:	99 f4       	brne	.+38     	; 0x2ca6 <ProcessInput+0xacc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2c80:	87 2d       	mov	r24, r7
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	fc 01       	movw	r30, r24
    2c86:	ee 0f       	add	r30, r30
    2c88:	ff 1f       	adc	r31, r31
    2c8a:	ec 50       	subi	r30, 0x0C	; 12
    2c8c:	f7 4c       	sbci	r31, 0xC7	; 199
    2c8e:	24 e0       	ldi	r18, 0x04	; 4
    2c90:	39 e7       	ldi	r19, 0x79	; 121
    2c92:	20 83       	st	Z, r18
    2c94:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2c96:	fc 01       	movw	r30, r24
    2c98:	ee 0f       	add	r30, r30
    2c9a:	ff 1f       	adc	r31, r31
    2c9c:	ec 5c       	subi	r30, 0xCC	; 204
    2c9e:	f6 4c       	sbci	r31, 0xC6	; 198
    2ca0:	2a e1       	ldi	r18, 0x1A	; 26
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	15 c0       	rjmp	.+42     	; 0x2cd0 <ProcessInput+0xaf6>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
    2ca6:	87 36       	cpi	r24, 0x67	; 103
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <ProcessInput+0xad2>
    2caa:	77 c2       	rjmp	.+1262   	; 0x319a <ProcessInput+0xfc0>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2cac:	87 2d       	mov	r24, r7
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	ee 0f       	add	r30, r30
    2cb4:	ff 1f       	adc	r31, r31
    2cb6:	ec 50       	subi	r30, 0x0C	; 12
    2cb8:	f7 4c       	sbci	r31, 0xC7	; 199
    2cba:	2d ed       	ldi	r18, 0xDD	; 221
    2cbc:	36 e7       	ldi	r19, 0x76	; 118
    2cbe:	20 83       	st	Z, r18
    2cc0:	31 83       	std	Z+1, r19	; 0x01
    reactStr[1][number]=length;
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	ec 5c       	subi	r30, 0xCC	; 204
    2cca:	f6 4c       	sbci	r31, 0xC6	; 198
    2ccc:	28 e2       	ldi	r18, 0x28	; 40
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	20 83       	st	Z, r18
    2cd2:	31 83       	std	Z+1, r19	; 0x01
    reactStr[2][number]=type;
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	fc 01       	movw	r30, r24
    2cda:	ec 58       	subi	r30, 0x8C	; 140
    2cdc:	f6 4c       	sbci	r31, 0xC6	; 198
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	80 83       	st	Z, r24
    2ce4:	91 83       	std	Z+1, r25	; 0x01
                                
                            } else {
                                if (data[0] == 'u') {
                                    SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                                } else if (data[0] == 'g') {
                                    SetResponse(elements++, A_CANTGIVE, L_CANTGIVE, TEASER);                                    
    2ce6:	73 94       	inc	r7
    2ce8:	58 c2       	rjmp	.+1200   	; 0x319a <ProcessInput+0xfc0>
                            }
                        }
                    
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
    2cea:	65 eb       	ldi	r22, 0xB5	; 181
    2cec:	78 e3       	ldi	r23, 0x38	; 56
    2cee:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
    2cf2:	f8 01       	movw	r30, r16
    2cf4:	80 81       	ld	r24, Z
    2cf6:	84 37       	cpi	r24, 0x74	; 116
    2cf8:	69 f5       	brne	.+90     	; 0x2d54 <ProcessInput+0xb7a>
    2cfa:	80 91 bd 38 	lds	r24, 0x38BD	; 0x8038bd <actObj1.3989+0x8>
    2cfe:	83 fd       	sbrc	r24, 3
    2d00:	4a c0       	rjmp	.+148    	; 0x2d96 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d02:	8e e1       	ldi	r24, 0x1E	; 30
    2d04:	99 e7       	ldi	r25, 0x79	; 121
    2d06:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    2d0a:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2d0e:	8e e1       	ldi	r24, 0x1E	; 30
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2d16:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    2d22:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2d26:	80 91 cf 38 	lds	r24, 0x38CF	; 0x8038cf <actObj1.3989+0x1a>
    2d2a:	90 91 d0 38 	lds	r25, 0x38D0	; 0x8038d0 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d2e:	20 91 c1 38 	lds	r18, 0x38C1	; 0x8038c1 <actObj1.3989+0xc>
    2d32:	30 91 c2 38 	lds	r19, 0x38C2	; 0x8038c2 <actObj1.3989+0xd>
    2d36:	20 93 f8 38 	sts	0x38F8, r18	; 0x8038f8 <reactStr+0x4>
    2d3a:	30 93 f9 38 	sts	0x38F9, r19	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    2d3e:	80 93 38 39 	sts	0x3938, r24	; 0x803938 <reactStr+0x44>
    2d42:	90 93 39 39 	sts	0x3939, r25	; 0x803939 <reactStr+0x45>
    reactStr[2][number]=type;
    2d46:	10 92 78 39 	sts	0x3978, r1	; 0x803978 <reactStr+0x84>
    2d4a:	10 92 79 39 	sts	0x3979, r1	; 0x803979 <reactStr+0x85>
                    //Talk to person, read or use object (without item)                          
                    } else {
                        PopulateObject(route[currDepth+1], &actObj1);
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    2d4e:	a3 e0       	ldi	r26, 0x03	; 3
    2d50:	7a 2e       	mov	r7, r26
    2d52:	23 c2       	rjmp	.+1094   	; 0x319a <ProcessInput+0xfc0>
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
    2d54:	85 37       	cpi	r24, 0x75	; 117
    2d56:	69 f4       	brne	.+26     	; 0x2d72 <ProcessInput+0xb98>
    2d58:	80 91 bd 38 	lds	r24, 0x38BD	; 0x8038bd <actObj1.3989+0x8>
    2d5c:	84 fd       	sbrc	r24, 4
    2d5e:	1b c0       	rjmp	.+54     	; 0x2d96 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d60:	84 e0       	ldi	r24, 0x04	; 4
    2d62:	99 e7       	ldi	r25, 0x79	; 121
    2d64:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    2d68:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2d6c:	8a e1       	ldi	r24, 0x1A	; 26
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	f9 ca       	rjmp	.-2574   	; 0x2364 <ProcessInput+0x18a>
                        if ((data[0] == 't')&&((actObj1.byteField[ACTION_MASK]&TALK) == 0)) {
                            SetResponse(elements++, A_WHYTALK, L_WHYTALK, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
    2d72:	82 37       	cpi	r24, 0x72	; 114
    2d74:	69 f4       	brne	.+26     	; 0x2d90 <ProcessInput+0xbb6>
    2d76:	80 91 bd 38 	lds	r24, 0x38BD	; 0x8038bd <actObj1.3989+0x8>
    2d7a:	85 fd       	sbrc	r24, 5
    2d7c:	0c c0       	rjmp	.+24     	; 0x2d96 <ProcessInput+0xbbc>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2d7e:	89 ee       	ldi	r24, 0xE9	; 233
    2d80:	98 e7       	ldi	r25, 0x78	; 120
    2d82:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    2d86:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2d8a:	8b e1       	ldi	r24, 0x1B	; 27
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	ea ca       	rjmp	.-2604   	; 0x2364 <ProcessInput+0x18a>
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                        } else if ((data[0] == 'u')&&((actObj1.byteField[ACTION_MASK]&USE) == 0)) {
                            SetResponse(elements++, A_CANTUSE, L_CANTUSE, TEASER);
                        } else if ((data[0] == 'r')&&((actObj1.byteField[ACTION_MASK]&READ) == 0)) {
                            SetResponse(elements++, A_CANTREAD, L_CANTREAD, TEASER);
                        } else if (data[0] == 'g'){ 
    2d90:	87 36       	cpi	r24, 0x67	; 103
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <ProcessInput+0xbbc>
    2d94:	52 ca       	rjmp	.-2908   	; 0x223a <ProcessInput+0x60>
                            SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);  
                        } else {

                            //Special game, not enough characters
                            if (actObj1.lenStr[ACTION_STR1] == 1) {
    2d96:	e0 90 d3 38 	lds	r14, 0x38D3	; 0x8038d3 <actObj1.3989+0x1e>
    2d9a:	f0 90 d4 38 	lds	r15, 0x38D4	; 0x8038d4 <actObj1.3989+0x1f>
    2d9e:	f1 e0       	ldi	r31, 0x01	; 1
    2da0:	ef 16       	cp	r14, r31
    2da2:	f1 04       	cpc	r15, r1
    2da4:	11 f5       	brne	.+68     	; 0x2dea <ProcessInput+0xc10>
                                ExtEERead(actObj1.addrStr[ACTION_STR1], 1, GAME, &data[2]);
    2da6:	98 01       	movw	r18, r16
    2da8:	2e 5f       	subi	r18, 0xFE	; 254
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	80 91 c5 38 	lds	r24, 0x38C5	; 0x8038c5 <actObj1.3989+0x10>
    2db4:	90 91 c6 38 	lds	r25, 0x38C6	; 0x8038c6 <actObj1.3989+0x11>
    2db8:	0e 94 39 0b 	call	0x1672	; 0x1672 <ExtEERead>
                                if (data[2] == '1') {
    2dbc:	d8 01       	movw	r26, r16
    2dbe:	12 96       	adiw	r26, 0x02	; 2
    2dc0:	8c 91       	ld	r24, X
    2dc2:	81 33       	cpi	r24, 0x31	; 49
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <ProcessInput+0xbee>
    2dc6:	8a cc       	rjmp	.-1772   	; 0x26dc <ProcessInput+0x502>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2dc8:	83 e6       	ldi	r24, 0x63	; 99
    2dca:	95 e7       	ldi	r25, 0x75	; 117
    2dcc:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    2dd0:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2dd4:	8b e2       	ldi	r24, 0x2B	; 43
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2ddc:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    2de0:	e0 92 76 39 	sts	0x3976, r14	; 0x803976 <reactStr+0x82>
    2de4:	f0 92 77 39 	sts	0x3977, r15	; 0x803977 <reactStr+0x83>
    2de8:	c7 ca       	rjmp	.-2674   	; 0x2378 <ProcessInput+0x19e>
                                if (data[2] == '1') {
                                    SetResponse(elements++, A_PLEASEOFFER, L_PLEASEOFFER, TEASER);
                                }

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
    2dea:	e1 14       	cp	r14, r1
    2dec:	f1 04       	cpc	r15, r1
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <ProcessInput+0xc18>
    2df0:	59 c0       	rjmp	.+178    	; 0x2ea4 <ProcessInput+0xcca>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2df2:	80 91 c5 38 	lds	r24, 0x38C5	; 0x8038c5 <actObj1.3989+0x10>
    2df6:	90 91 c6 38 	lds	r25, 0x38C6	; 0x8038c6 <actObj1.3989+0x11>
    2dfa:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    2dfe:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2e02:	e0 92 36 39 	sts	0x3936, r14	; 0x803936 <reactStr+0x42>
    2e06:	f0 92 37 39 	sts	0x3937, r15	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    2e0a:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    2e0e:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e12:	8b e5       	ldi	r24, 0x5B	; 91
    2e14:	9a e7       	ldi	r25, 0x7A	; 122
    2e16:	80 93 f8 38 	sts	0x38F8, r24	; 0x8038f8 <reactStr+0x4>
    2e1a:	90 93 f9 38 	sts	0x38F9, r25	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	80 93 38 39 	sts	0x3938, r24	; 0x803938 <reactStr+0x44>
    2e26:	90 93 39 39 	sts	0x3939, r25	; 0x803939 <reactStr+0x45>
    reactStr[2][number]=type;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	80 93 78 39 	sts	0x3978, r24	; 0x803978 <reactStr+0x84>
    2e32:	90 93 79 39 	sts	0x3979, r25	; 0x803979 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2e36:	20 eb       	ldi	r18, 0xB0	; 176
    2e38:	38 e7       	ldi	r19, 0x78	; 120
    2e3a:	20 93 fa 38 	sts	0x38FA, r18	; 0x8038fa <reactStr+0x6>
    2e3e:	30 93 fb 38 	sts	0x38FB, r19	; 0x8038fb <reactStr+0x7>
    reactStr[1][number]=length;
    2e42:	22 e1       	ldi	r18, 0x12	; 18
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	20 93 3a 39 	sts	0x393A, r18	; 0x80393a <reactStr+0x46>
    2e4a:	30 93 3b 39 	sts	0x393B, r19	; 0x80393b <reactStr+0x47>
    reactStr[2][number]=type;
    2e4e:	80 93 7a 39 	sts	0x397A, r24	; 0x80397a <reactStr+0x86>
    2e52:	90 93 7b 39 	sts	0x397B, r25	; 0x80397b <reactStr+0x87>
                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
                                if (actObj1.lenStr[ACTION_STR2]>(INP_LENGTH-1)) actObj1.lenStr[ACTION_STR2] = (INP_LENGTH-1);
    2e56:	80 91 d5 38 	lds	r24, 0x38D5	; 0x8038d5 <actObj1.3989+0x20>
    2e5a:	90 91 d6 38 	lds	r25, 0x38D6	; 0x8038d6 <actObj1.3989+0x21>
    2e5e:	40 97       	sbiw	r24, 0x10	; 16
    2e60:	30 f0       	brcs	.+12     	; 0x2e6e <ProcessInput+0xc94>
    2e62:	8f e0       	ldi	r24, 0x0F	; 15
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	80 93 d5 38 	sts	0x38D5, r24	; 0x8038d5 <actObj1.3989+0x20>
    2e6a:	90 93 d6 38 	sts	0x38D6, r25	; 0x8038d6 <actObj1.3989+0x21>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
    2e6e:	23 ee       	ldi	r18, 0xE3	; 227
    2e70:	38 e3       	ldi	r19, 0x38	; 56
    2e72:	40 e0       	ldi	r20, 0x00	; 0
    2e74:	60 91 d5 38 	lds	r22, 0x38D5	; 0x8038d5 <actObj1.3989+0x20>
    2e78:	80 91 c7 38 	lds	r24, 0x38C7	; 0x8038c7 <actObj1.3989+0x12>
    2e7c:	90 91 c8 38 	lds	r25, 0x38C8	; 0x8038c8 <actObj1.3989+0x13>
    2e80:	0e 94 39 0b 	call	0x1672	; 0x1672 <ExtEERead>
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
    2e84:	63 ee       	ldi	r22, 0xE3	; 227
    2e86:	78 e3       	ldi	r23, 0x38	; 56
    2e88:	80 91 d5 38 	lds	r24, 0x38D5	; 0x8038d5 <actObj1.3989+0x20>
    2e8c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <UnflipData>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
    2e90:	e0 91 d5 38 	lds	r30, 0x38D5	; 0x8038d5 <actObj1.3989+0x20>
    2e94:	f0 91 d6 38 	lds	r31, 0x38D6	; 0x8038d6 <actObj1.3989+0x21>
    2e98:	ed 51       	subi	r30, 0x1D	; 29
    2e9a:	f7 4c       	sbci	r31, 0xC7	; 199
    2e9c:	10 82       	st	Z, r1

                            //General request
                            } else if (actObj1.lenStr[ACTION_STR1]) {
                                SetResponse(elements++, actObj1.addrStr[ACTION_STR1], actObj1.lenStr[ACTION_STR1], GAME);
                                SetResponse(elements++, A_LF, 2, TEASER);
                                SetResponse(elements++, A_RESPONSE, L_RESPONSE, TEASER);
    2e9e:	f4 e0       	ldi	r31, 0x04	; 4
    2ea0:	7f 2e       	mov	r7, r31
    2ea2:	7b c1       	rjmp	.+758    	; 0x319a <ProcessInput+0xfc0>
                                ExtEERead(actObj1.addrStr[ACTION_STR2], actObj1.lenStr[ACTION_STR2], GAME, (uint8_t *)&specialInput[0]);
                                UnflipData(actObj1.lenStr[ACTION_STR2], (uint8_t *)&specialInput[0]);
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
    2ea4:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3989+0x7>
    2ea8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <CheckState>
    2eac:	88 23       	and	r24, r24
    2eae:	01 f1       	breq	.+64     	; 0x2ef0 <ProcessInput+0xd16>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    2eb0:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3989+0x26>
    2eb4:	90 91 dc 38 	lds	r25, 0x38DC	; 0x8038dc <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2eb8:	20 91 cd 38 	lds	r18, 0x38CD	; 0x8038cd <actObj1.3989+0x18>
    2ebc:	30 91 ce 38 	lds	r19, 0x38CE	; 0x8038ce <actObj1.3989+0x19>
    2ec0:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    2ec4:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2ec8:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2ecc:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    2ed0:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    2ed4:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
                                specialInput[actObj1.lenStr[ACTION_STR2]] = 0;
                            
                            //Normal action    
                            } else if (CheckState(actObj1.byteField[ACTION_ACL])){
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
    2ed8:	80 91 df 38 	lds	r24, 0x38DF	; 0x8038df <actObj1.3989+0x2a>
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2ee2:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                                UpdateState(actObj1.byteField[ACTION_STATE]);
    2ee6:	80 91 bf 38 	lds	r24, 0x38BF	; 0x8038bf <actObj1.3989+0xa>
    2eea:	0e 94 df 08 	call	0x11be	; 0x11be <UpdateState>
    2eee:	44 ca       	rjmp	.-2936   	; 0x2378 <ProcessInput+0x19e>
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    2ef0:	80 91 d9 38 	lds	r24, 0x38D9	; 0x8038d9 <actObj1.3989+0x24>
    2ef4:	90 91 da 38 	lds	r25, 0x38DA	; 0x8038da <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2ef8:	20 91 cb 38 	lds	r18, 0x38CB	; 0x8038cb <actObj1.3989+0x16>
    2efc:	30 91 cc 38 	lds	r19, 0x38CC	; 0x8038cc <actObj1.3989+0x17>
    2f00:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    2f04:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2f08:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    2f0c:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    2f10:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    2f14:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
                                SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                                effect = actObj1.effect[2];
                                UpdateState(actObj1.byteField[ACTION_STATE]);
                            } else {
                                SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                                effect = actObj1.effect[1];
    2f18:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3989+0x29>
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    2f22:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    2f26:	28 ca       	rjmp	.-2992   	; 0x2378 <ProcessInput+0x19e>
                        }
                    }

                //Person or object not found
                } else {
                    if ((data[0] == 't')||(data[0] == 'g')){
    2f28:	f8 01       	movw	r30, r16
    2f2a:	80 81       	ld	r24, Z
    2f2c:	84 37       	cpi	r24, 0x74	; 116
    2f2e:	11 f0       	breq	.+4      	; 0x2f34 <ProcessInput+0xd5a>
    2f30:	87 36       	cpi	r24, 0x67	; 103
    2f32:	19 f4       	brne	.+6      	; 0x2f3a <ProcessInput+0xd60>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    2f34:	8c e3       	ldi	r24, 0x3C	; 60
    2f36:	99 e7       	ldi	r25, 0x79	; 121
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <ProcessInput+0xd64>
    2f3a:	80 e5       	ldi	r24, 0x50	; 80
    2f3c:	99 e7       	ldi	r25, 0x79	; 121
    2f3e:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    2f42:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    2f46:	84 e1       	ldi	r24, 0x14	; 20
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0c ca       	rjmp	.-3048   	; 0x2364 <ProcessInput+0x18a>
                    }
                }
            }
        
        //Special answer given
        } else if (data[0] == 'a'){
    2f4c:	81 36       	cpi	r24, 0x61	; 97
    2f4e:	09 f0       	breq	.+2      	; 0x2f52 <ProcessInput+0xd78>
    2f50:	c5 cb       	rjmp	.-2166   	; 0x26dc <ProcessInput+0x502>
            
            //Priest offerings
            if (specialPassed >= 2) {
    2f52:	80 91 e2 38 	lds	r24, 0x38E2	; 0x8038e2 <specialPassed>
    2f56:	82 30       	cpi	r24, 0x02	; 2
    2f58:	08 f4       	brcc	.+2      	; 0x2f5c <ProcessInput+0xd82>
    2f5a:	b3 c0       	rjmp	.+358    	; 0x30c2 <ProcessInput+0xee8>
                if (data[1] > 0) {
    2f5c:	d8 01       	movw	r26, r16
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	2c 91       	ld	r18, X
    2f62:	22 23       	and	r18, r18
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <ProcessInput+0xd8e>
    2f66:	a4 c0       	rjmp	.+328    	; 0x30b0 <ProcessInput+0xed6>

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    2f68:	fe 01       	movw	r30, r28
    2f6a:	31 96       	adiw	r30, 0x01	; 1
    2f6c:	7f 01       	movw	r14, r30
    2f6e:	8a e0       	ldi	r24, 0x0A	; 10
    2f70:	df 01       	movw	r26, r30
    2f72:	1d 92       	st	X+, r1
    2f74:	8a 95       	dec	r24
    2f76:	e9 f7       	brne	.-6      	; 0x2f72 <ProcessInput+0xd98>
                        answer = ((offering  & 2) << 19) + ((offering  & 1) << 8) + \
                        ((element   & 2) << 15) + ((element   & 1) << 4) + \
                        ((kneelings & 2) << 11) + ((kneelings & 1))
                        answer = answer << (3-person)
                    */
                    data[1]-='1';
    2f78:	21 53       	subi	r18, 0x31	; 49
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	21 83       	std	Z+1, r18	; 0x01
                    data[2]-='1';
    2f7e:	32 81       	ldd	r19, Z+2	; 0x02
    2f80:	31 53       	subi	r19, 0x31	; 49
    2f82:	32 83       	std	Z+2, r19	; 0x02
                    if (data[3] == 'a') data[3] = 1;
    2f84:	83 81       	ldd	r24, Z+3	; 0x03
    2f86:	81 36       	cpi	r24, 0x61	; 97
    2f88:	11 f4       	brne	.+4      	; 0x2f8e <ProcessInput+0xdb4>
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	08 c0       	rjmp	.+16     	; 0x2f9e <ProcessInput+0xdc4>
                    else if (data[3] == 'e') data[3] = 0;
    2f8e:	85 36       	cpi	r24, 0x65	; 101
    2f90:	11 f4       	brne	.+4      	; 0x2f96 <ProcessInput+0xdbc>
    2f92:	13 82       	std	Z+3, r1	; 0x03
    2f94:	08 c0       	rjmp	.+16     	; 0x2fa6 <ProcessInput+0xdcc>
                    else if (data[3] == 'f') data[3] = 3;
    2f96:	86 36       	cpi	r24, 0x66	; 102
    2f98:	21 f4       	brne	.+8      	; 0x2fa2 <ProcessInput+0xdc8>
    2f9a:	83 e0       	ldi	r24, 0x03	; 3
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	83 83       	std	Z+3, r24	; 0x03
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <ProcessInput+0xdcc>
                    else data[3] = 2;
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	83 83       	std	Z+3, r24	; 0x03

                    if (data[1] & 2) answer += (1UL << 20);
    2fa6:	21 fd       	sbrc	r18, 1
    2fa8:	04 c0       	rjmp	.+8      	; 0x2fb2 <ProcessInput+0xdd8>
            //Priest offerings
            if (specialPassed >= 2) {
                if (data[1] > 0) {

                    uint8_t  digit[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
                    uint32_t answer = 0;
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	dc 01       	movw	r26, r24
    2fb0:	04 c0       	rjmp	.+8      	; 0x2fba <ProcessInput+0xde0>
                    if (data[3] == 'a') data[3] = 1;
                    else if (data[3] == 'e') data[3] = 0;
                    else if (data[3] == 'f') data[3] = 3;
                    else data[3] = 2;

                    if (data[1] & 2) answer += (1UL << 20);
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 e1       	ldi	r26, 0x10	; 16
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
                    if (data[1] & 1) answer += (1 << 8);
    2fba:	20 ff       	sbrs	r18, 0
    2fbc:	03 c0       	rjmp	.+6      	; 0x2fc4 <ProcessInput+0xdea>
    2fbe:	9f 5f       	subi	r25, 0xFF	; 255
    2fc0:	af 4f       	sbci	r26, 0xFF	; 255
    2fc2:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[3] & 2) answer += (1UL << 16);
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	23 81       	ldd	r18, Z+3	; 0x03
    2fc8:	21 fd       	sbrc	r18, 1
    2fca:	11 96       	adiw	r26, 0x01	; 1
                    if (data[3] & 1) answer += (1 << 4);
    2fcc:	20 ff       	sbrs	r18, 0
    2fce:	03 c0       	rjmp	.+6      	; 0x2fd6 <ProcessInput+0xdfc>
    2fd0:	40 96       	adiw	r24, 0x10	; 16
    2fd2:	a1 1d       	adc	r26, r1
    2fd4:	b1 1d       	adc	r27, r1
                    if (data[2] & 2) answer += (1 << 12);
    2fd6:	31 ff       	sbrs	r19, 1
    2fd8:	03 c0       	rjmp	.+6      	; 0x2fe0 <ProcessInput+0xe06>
    2fda:	90 5f       	subi	r25, 0xF0	; 240
    2fdc:	af 4f       	sbci	r26, 0xFF	; 255
    2fde:	bf 4f       	sbci	r27, 0xFF	; 255
                    if (data[2] & 1) answer += 1;
    2fe0:	30 ff       	sbrs	r19, 0
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <ProcessInput+0xe10>
    2fe4:	01 96       	adiw	r24, 0x01	; 1
    2fe6:	a1 1d       	adc	r26, r1
    2fe8:	b1 1d       	adc	r27, r1
                    answer <<= (4 - whoami);            
    2fea:	40 91 30 38 	lds	r20, 0x3830	; 0x803830 <whoami>
    2fee:	24 e0       	ldi	r18, 0x04	; 4
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	24 1b       	sub	r18, r20
    2ff4:	31 09       	sbc	r19, r1
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <ProcessInput+0xe2a>
    2ffc:	66 0f       	add	r22, r22
    2ffe:	77 1f       	adc	r23, r23
    3000:	88 1f       	adc	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	2a 95       	dec	r18
    3006:	d2 f7       	brpl	.-12     	; 0x2ffc <ProcessInput+0xe22>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3008:	26 e0       	ldi	r18, 0x06	; 6
    300a:	35 e7       	ldi	r19, 0x75	; 117
    300c:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    3010:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    3014:	20 e2       	ldi	r18, 0x20	; 32
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	20 93 36 39 	sts	0x3936, r18	; 0x803936 <reactStr+0x42>
    301c:	30 93 37 39 	sts	0x3937, r19	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    3020:	21 e0       	ldi	r18, 0x01	; 1
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	20 93 76 39 	sts	0x3976, r18	; 0x803976 <reactStr+0x82>
    3028:	30 93 77 39 	sts	0x3977, r19	; 0x803977 <reactStr+0x83>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    302c:	59 e0       	ldi	r21, 0x09	; 9
                        digit[n] = answer % 10;
    302e:	b5 2e       	mov	r11, r21
    3030:	ea e0       	ldi	r30, 0x0A	; 10
    3032:	4e 2e       	mov	r4, r30
    3034:	51 2c       	mov	r5, r1
    3036:	61 2c       	mov	r6, r1
    3038:	71 2c       	mov	r7, r1
    303a:	67 01       	movw	r12, r14
    303c:	cb 0c       	add	r12, r11
    303e:	d1 1c       	adc	r13, r1
    3040:	a3 01       	movw	r20, r6
    3042:	92 01       	movw	r18, r4
    3044:	54 d2       	rcall	.+1192   	; 0x34ee <__udivmodsi4>
    3046:	d6 01       	movw	r26, r12
    3048:	6c 93       	st	X, r22
                        answer /= 10;
    304a:	b9 01       	movw	r22, r18
    304c:	ca 01       	movw	r24, r20
                        if (answer == 0) break;
    304e:	61 15       	cp	r22, r1
    3050:	71 05       	cpc	r23, r1
    3052:	81 05       	cpc	r24, r1
    3054:	91 05       	cpc	r25, r1
    3056:	51 f4       	brne	.+20     	; 0x306c <ProcessInput+0xe92>
    3058:	24 ef       	ldi	r18, 0xF4	; 244
    305a:	c2 2e       	mov	r12, r18
    305c:	28 e3       	ldi	r18, 0x38	; 56
    305e:	d2 2e       	mov	r13, r18
    3060:	32 e0       	ldi	r19, 0x02	; 2
    3062:	73 2e       	mov	r7, r19
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    reactStr[1][number]=length;
    3064:	88 24       	eor	r8, r8
    3066:	83 94       	inc	r8
    3068:	91 2c       	mov	r9, r1
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <ProcessInput+0xe96>
                    answer <<= (4 - whoami);            

                    SetResponse(elements++, A_YOURPART, L_YOURPART, TEASER);
                    
                    //Set up sending out number
                    for (n=9; n>=0; --n) {
    306c:	ba 94       	dec	r11
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
    306e:	e5 cf       	rjmp	.-54     	; 0x303a <ProcessInput+0xe60>
    3070:	f2 e0       	ldi	r31, 0x02	; 2
    3072:	cf 0e       	add	r12, r31
    3074:	d1 1c       	adc	r13, r1
                    for (; n<10; ++n) {
    3076:	29 e0       	ldi	r18, 0x09	; 9
    3078:	2b 15       	cp	r18, r11
    307a:	08 f4       	brcc	.+2      	; 0x307e <ProcessInput+0xea4>
    307c:	8c c0       	rjmp	.+280    	; 0x3196 <ProcessInput+0xfbc>
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
    307e:	73 94       	inc	r7
    3080:	f7 01       	movw	r30, r14
    3082:	eb 0d       	add	r30, r11
    3084:	f1 1d       	adc	r31, r1
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3086:	80 81       	ld	r24, Z
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	8d 52       	subi	r24, 0x2D	; 45
    308c:	9b 48       	sbci	r25, 0x8B	; 139
    308e:	f6 01       	movw	r30, r12
    3090:	82 83       	std	Z+2, r24	; 0x02
    3092:	93 83       	std	Z+3, r25	; 0x03
    reactStr[1][number]=length;
    3094:	ee 5b       	subi	r30, 0xBE	; 190
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 82       	st	Z, r8
    309a:	91 82       	std	Z+1, r9	; 0x01
    reactStr[2][number]=type;
    309c:	e0 5c       	subi	r30, 0xC0	; 192
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 82       	st	Z, r8
    30a2:	91 82       	std	Z+1, r9	; 0x01
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
                        SetResponse(elements++, A_DIGITS+digit[n], 1, TEASER);
                        UpdateState(actObj1.byteField[ACTION_STATE]);
    30a4:	80 91 bf 38 	lds	r24, 0x38BF	; 0x8038bf <actObj1.3989+0xa>
    30a8:	0e 94 df 08 	call	0x11be	; 0x11be <UpdateState>
                    for (n=9; n>=0; --n) {
                        digit[n] = answer % 10;
                        answer /= 10;
                        if (answer == 0) break;
                    }
                    for (; n<10; ++n) {
    30ac:	b3 94       	inc	r11
    30ae:	e0 cf       	rjmp	.-64     	; 0x3070 <ProcessInput+0xe96>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30b0:	86 e2       	ldi	r24, 0x26	; 38
    30b2:	95 e7       	ldi	r25, 0x75	; 117
    30b4:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    30b8:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    30bc:	8d e3       	ldi	r24, 0x3D	; 61
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	5e c0       	rjmp	.+188    	; 0x317e <ProcessInput+0xfa4>
    30c2:	e0 91 26 38 	lds	r30, 0x3826	; 0x803826 <currDepth>
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	ea 54       	subi	r30, 0x4A	; 74
    30ce:	f6 4c       	sbci	r31, 0xC6	; 198
    30d0:	65 eb       	ldi	r22, 0xB5	; 181
    30d2:	78 e3       	ldi	r23, 0x38	; 56
                } else {
                    SetResponse(elements++, A_BADOFFERING, L_BADOFFERING, TEASER);
                }
            
            //Other questions    
            } else if (specialPassed == 1) {
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	09 f0       	breq	.+2      	; 0x30da <ProcessInput+0xf00>
    30d8:	46 c0       	rjmp	.+140    	; 0x3166 <ProcessInput+0xf8c>
                PopulateObject(route[currDepth+1], &actObj1);
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>
                if (CheckState(actObj1.byteField[ACTION_ACL])){
    30e2:	80 91 bc 38 	lds	r24, 0x38BC	; 0x8038bc <actObj1.3989+0x7>
    30e6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <CheckState>
    30ea:	88 23       	and	r24, r24
    30ec:	01 f1       	breq	.+64     	; 0x312e <ProcessInput+0xf54>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
    30ee:	80 91 db 38 	lds	r24, 0x38DB	; 0x8038db <actObj1.3989+0x26>
    30f2:	90 91 dc 38 	lds	r25, 0x38DC	; 0x8038dc <actObj1.3989+0x27>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    30f6:	20 91 cd 38 	lds	r18, 0x38CD	; 0x8038cd <actObj1.3989+0x18>
    30fa:	30 91 ce 38 	lds	r19, 0x38CE	; 0x8038ce <actObj1.3989+0x19>
    30fe:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    3102:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    3106:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    310a:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    310e:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    3112:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
            //Other questions    
            } else if (specialPassed == 1) {
                PopulateObject(route[currDepth+1], &actObj1);
                if (CheckState(actObj1.byteField[ACTION_ACL])){
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
    3116:	80 91 df 38 	lds	r24, 0x38DF	; 0x8038df <actObj1.3989+0x2a>
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3120:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
                    UpdateState(actObj1.byteField[ACTION_STATE]);
    3124:	80 91 bf 38 	lds	r24, 0x38BF	; 0x8038bf <actObj1.3989+0xa>
    3128:	0e 94 df 08 	call	0x11be	; 0x11be <UpdateState>
    312c:	32 c0       	rjmp	.+100    	; 0x3192 <ProcessInput+0xfb8>
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
    312e:	80 91 d9 38 	lds	r24, 0x38D9	; 0x8038d9 <actObj1.3989+0x24>
    3132:	90 91 da 38 	lds	r25, 0x38DA	; 0x8038da <actObj1.3989+0x25>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3136:	20 91 cb 38 	lds	r18, 0x38CB	; 0x8038cb <actObj1.3989+0x16>
    313a:	30 91 cc 38 	lds	r19, 0x38CC	; 0x8038cc <actObj1.3989+0x17>
    313e:	20 93 f6 38 	sts	0x38F6, r18	; 0x8038f6 <reactStr+0x2>
    3142:	30 93 f7 38 	sts	0x38F7, r19	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    3146:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    314a:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    314e:	10 92 76 39 	sts	0x3976, r1	; 0x803976 <reactStr+0x82>
    3152:	10 92 77 39 	sts	0x3977, r1	; 0x803977 <reactStr+0x83>
                    SetResponse(elements++, actObj1.addrStr[ACTION_MSG], actObj1.lenStr[ACTION_MSG], GAME);
                    effect = actObj1.effect[2];
                    UpdateState(actObj1.byteField[ACTION_STATE]);
                } else {
                    SetResponse(elements++, actObj1.addrStr[ACTION_ACL_MSG], actObj1.lenStr[ACTION_ACL_MSG], GAME);
                    effect = actObj1.effect[1];
    3156:	80 91 de 38 	lds	r24, 0x38DE	; 0x8038de <actObj1.3989+0x29>
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <effect>
    3160:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <effect+0x1>
    3164:	16 c0       	rjmp	.+44     	; 0x3192 <ProcessInput+0xfb8>
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    316e:	8e e9       	ldi	r24, 0x9E	; 158
    3170:	98 e7       	ldi	r25, 0x78	; 120
    3172:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    3176:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    317a:	82 e1       	ldi	r24, 0x12	; 18
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    3182:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    318e:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>
                    effect = actObj1.effect[1];
                }

            } else {
                PopulateObject(route[currDepth+1], &actObj1);
                SetResponse(elements++, A_INCORRECT, L_INCORRECT, TEASER);
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	78 2e       	mov	r7, r24
            }
            specialInput[0] = 0;
    3196:	10 92 e3 38 	sts	0x38E3, r1	; 0x8038e3 <specialInput>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    319a:	8b e5       	ldi	r24, 0x5B	; 91
    319c:	9a e7       	ldi	r25, 0x7A	; 122
    319e:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <reactStr>
    31a2:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <reactStr+0x1>
    reactStr[1][number]=length;
    31a6:	82 e0       	ldi	r24, 0x02	; 2
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	80 93 34 39 	sts	0x3934, r24	; 0x803934 <reactStr+0x40>
    31ae:	90 93 35 39 	sts	0x3935, r25	; 0x803935 <reactStr+0x41>
    reactStr[2][number]=type;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	80 93 74 39 	sts	0x3974, r24	; 0x803974 <reactStr+0x80>
    31ba:	90 93 75 39 	sts	0x3975, r25	; 0x803975 <reactStr+0x81>
               
        }
            
        //Input handled
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);
    31be:	80 91 e3 38 	lds	r24, 0x38E3	; 0x8038e3 <specialInput>
    31c2:	88 23       	and	r24, r24
    31c4:	19 f0       	breq	.+6      	; 0x31cc <ProcessInput+0xff2>
    31c6:	70 92 f3 38 	sts	0x38F3, r7	; 0x8038f3 <responseList>
    31ca:	9a c0       	rjmp	.+308    	; 0x3300 <ProcessInput+0x1126>
    31cc:	87 2d       	mov	r24, r7
    31ce:	12 c0       	rjmp	.+36     	; 0x31f4 <ProcessInput+0x101a>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31d0:	8b e5       	ldi	r24, 0x5B	; 91
    31d2:	9a e7       	ldi	r25, 0x7A	; 122
    31d4:	80 93 f4 38 	sts	0x38F4, r24	; 0x8038f4 <reactStr>
    31d8:	90 93 f5 38 	sts	0x38F5, r25	; 0x8038f5 <reactStr+0x1>
    reactStr[1][number]=length;
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	80 93 34 39 	sts	0x3934, r24	; 0x803934 <reactStr+0x40>
    31e4:	90 93 35 39 	sts	0x3935, r25	; 0x803935 <reactStr+0x41>
    reactStr[2][number]=type;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	80 93 74 39 	sts	0x3974, r24	; 0x803974 <reactStr+0x80>
    31f0:	90 93 75 39 	sts	0x3975, r25	; 0x803975 <reactStr+0x81>
        SetResponse(0, A_LF, 2, TEASER);
        if (specialInput[0]) responseList = elements; else responseList = SetStandardResponse(elements);

    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    31f4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SetStandardResponse>
    31f8:	80 93 f3 38 	sts	0x38F3, r24	; 0x8038f3 <responseList>
    31fc:	81 c0       	rjmp	.+258    	; 0x3300 <ProcessInput+0x1126>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    31fe:	84 ed       	ldi	r24, 0xD4	; 212
    3200:	99 e7       	ldi	r25, 0x79	; 121
    3202:	b0 cd       	rjmp	.-1184   	; 0x2d64 <ProcessInput+0xb8a>

        //Drop item if in inventory
        if (data[0] == 'd') {
            if ((inventory[0] == 0)&&(inventory[1] == 0)){
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
    3204:	b2 e0       	ldi	r27, 0x02	; 2
    3206:	fb 12       	cpse	r15, r27
    3208:	18 c8       	rjmp	.-4048   	; 0x223a <ProcessInput+0x60>
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
    320a:	d8 01       	movw	r26, r16
    320c:	11 96       	adiw	r26, 0x01	; 1
    320e:	6c 91       	ld	r22, X
    3210:	0e 94 bb 0c 	call	0x1976	; 0x1976 <CheckLetter>
    3214:	88 23       	and	r24, r24
    3216:	09 f4       	brne	.+2      	; 0x321a <ProcessInput+0x1040>
    3218:	5b c0       	rjmp	.+182    	; 0x32d0 <ProcessInput+0x10f6>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	9c 01       	movw	r18, r24
    3224:	2f 5c       	subi	r18, 0xCF	; 207
    3226:	37 4c       	sbci	r19, 0xC7	; 199
    3228:	79 01       	movw	r14, r18
    322a:	65 eb       	ldi	r22, 0xB5	; 181
    322c:	78 e3       	ldi	r23, 0x38	; 56
    322e:	d9 01       	movw	r26, r18
    3230:	8d 91       	ld	r24, X+
    3232:	9c 91       	ld	r25, X
    3234:	0e 94 44 0c 	call	0x1888	; 0x1888 <PopulateObject>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3238:	84 ed       	ldi	r24, 0xD4	; 212
    323a:	97 e7       	ldi	r25, 0x77	; 119
    323c:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    3240:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    3244:	80 e1       	ldi	r24, 0x10	; 16
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	80 93 36 39 	sts	0x3936, r24	; 0x803936 <reactStr+0x42>
    324c:	90 93 37 39 	sts	0x3937, r25	; 0x803937 <reactStr+0x43>
    reactStr[2][number]=type;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	80 93 76 39 	sts	0x3976, r24	; 0x803976 <reactStr+0x82>
    3258:	90 93 77 39 	sts	0x3977, r25	; 0x803977 <reactStr+0x83>
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
    325c:	20 91 cf 38 	lds	r18, 0x38CF	; 0x8038cf <actObj1.3989+0x1a>
    3260:	30 91 d0 38 	lds	r19, 0x38D0	; 0x8038d0 <actObj1.3989+0x1b>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3264:	40 91 c1 38 	lds	r20, 0x38C1	; 0x8038c1 <actObj1.3989+0xc>
    3268:	50 91 c2 38 	lds	r21, 0x38C2	; 0x8038c2 <actObj1.3989+0xd>
    326c:	40 93 f8 38 	sts	0x38F8, r20	; 0x8038f8 <reactStr+0x4>
    3270:	50 93 f9 38 	sts	0x38F9, r21	; 0x8038f9 <reactStr+0x5>
    reactStr[1][number]=length;
    3274:	20 93 38 39 	sts	0x3938, r18	; 0x803938 <reactStr+0x44>
    3278:	30 93 39 39 	sts	0x3939, r19	; 0x803939 <reactStr+0x45>
    reactStr[2][number]=type;
    327c:	10 92 78 39 	sts	0x3978, r1	; 0x803978 <reactStr+0x84>
    3280:	10 92 79 39 	sts	0x3979, r1	; 0x803979 <reactStr+0x85>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    3284:	2b e5       	ldi	r18, 0x5B	; 91
    3286:	3a e7       	ldi	r19, 0x7A	; 122
    3288:	20 93 fa 38 	sts	0x38FA, r18	; 0x8038fa <reactStr+0x6>
    328c:	30 93 fb 38 	sts	0x38FB, r19	; 0x8038fb <reactStr+0x7>
    reactStr[1][number]=length;
    3290:	22 e0       	ldi	r18, 0x02	; 2
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	20 93 3a 39 	sts	0x393A, r18	; 0x80393a <reactStr+0x46>
    3298:	30 93 3b 39 	sts	0x393B, r19	; 0x80393b <reactStr+0x47>
    reactStr[2][number]=type;
    329c:	80 93 7a 39 	sts	0x397A, r24	; 0x80397a <reactStr+0x86>
    32a0:	90 93 7b 39 	sts	0x397B, r25	; 0x80397b <reactStr+0x87>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32a4:	27 e9       	ldi	r18, 0x97	; 151
    32a6:	37 e7       	ldi	r19, 0x77	; 119
    32a8:	20 93 fc 38 	sts	0x38FC, r18	; 0x8038fc <reactStr+0x8>
    32ac:	30 93 fd 38 	sts	0x38FD, r19	; 0x8038fd <reactStr+0x9>
    reactStr[1][number]=length;
    32b0:	2d e3       	ldi	r18, 0x3D	; 61
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	20 93 3c 39 	sts	0x393C, r18	; 0x80393c <reactStr+0x48>
    32b8:	30 93 3d 39 	sts	0x393D, r19	; 0x80393d <reactStr+0x49>
    reactStr[2][number]=type;
    32bc:	80 93 7c 39 	sts	0x397C, r24	; 0x80397c <reactStr+0x88>
    32c0:	90 93 7d 39 	sts	0x397D, r25	; 0x80397d <reactStr+0x89>
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
                            inventory[x] = 0;
    32c4:	f7 01       	movw	r30, r14
    32c6:	10 82       	st	Z, r1
    32c8:	11 82       	std	Z+1, r1	; 0x01
                        if (CheckLetter(inventory[x], data[1])) {
                            PopulateObject(inventory[x], &actObj1);
                            SetResponse(elements++, A_DROPPING, L_DROPPING, TEASER);
                            SetResponse(elements++, actObj1.addrStr[NAME], actObj1.lenStr[NAME], GAME);
                            SetResponse(elements++, A_LF, 2, TEASER);
                            SetResponse(elements++, A_RETURNING, L_RETURNING, TEASER);
    32ca:	f5 e0       	ldi	r31, 0x05	; 5
    32cc:	7f 2e       	mov	r7, r31
                            inventory[x] = 0;
                            break;
    32ce:	65 cf       	rjmp	.-310    	; 0x319a <ProcessInput+0xfc0>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    32d0:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <inventory+0x2>
    32d4:	90 91 34 38 	lds	r25, 0x3834	; 0x803834 <inventory+0x3>
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	49 f0       	breq	.+18     	; 0x32ee <ProcessInput+0x1114>
                        if (CheckLetter(inventory[x], data[1])) {
    32dc:	f8 01       	movw	r30, r16
    32de:	61 81       	ldd	r22, Z+1	; 0x01
    32e0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <CheckLetter>
    32e4:	88 23       	and	r24, r24
    32e6:	19 f0       	breq	.+6      	; 0x32ee <ProcessInput+0x1114>
                SetResponse(elements++, A_EMPTYHANDS, L_EMPTYHANDS, TEASER);
            } else if (inputLen != 2) {
                SetResponse(elements++, A_NOTPOSSIBLE, L_NOTPOSSIBLE, TEASER);
            } else {
                for (uint8_t x=0; x<2; ++x) {
                    if (inventory[x]) {
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	98 cf       	rjmp	.-208    	; 0x321e <ProcessInput+0x1044>
    return 0;
}

//
void SetResponse(uint8_t number, uint16_t address, uint16_t length, uint8_t type){
    reactStr[0][number]=address;
    32ee:	84 e6       	ldi	r24, 0x64	; 100
    32f0:	99 e7       	ldi	r25, 0x79	; 121
    32f2:	80 93 f6 38 	sts	0x38F6, r24	; 0x8038f6 <reactStr+0x2>
    32f6:	90 93 f7 38 	sts	0x38F7, r25	; 0x8038f7 <reactStr+0x3>
    reactStr[1][number]=length;
    32fa:	81 e2       	ldi	r24, 0x21	; 33
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	32 c8       	rjmp	.-3996   	; 0x2364 <ProcessInput+0x18a>
    } else {
        SetResponse(0, A_LF, 2, TEASER);
        responseList = SetStandardResponse(1);
    }

    data[0] = 0;
    3300:	d8 01       	movw	r26, r16
    3302:	1c 92       	st	X, r1
    serRxDone = 0;
    3304:	10 92 37 38 	sts	0x3837, r1	; 0x803837 <serRxDone>
    RXCNT = 0;    
    3308:	1d ba       	out	0x1d, r1	; 29
    return 0;
}
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	2a 96       	adiw	r28, 0x0a	; 10
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	1f 91       	pop	r17
    3318:	0f 91       	pop	r16
    331a:	ff 90       	pop	r15
    331c:	ef 90       	pop	r14
    331e:	df 90       	pop	r13
    3320:	cf 90       	pop	r12
    3322:	bf 90       	pop	r11
    3324:	af 90       	pop	r10
    3326:	9f 90       	pop	r9
    3328:	8f 90       	pop	r8
    332a:	7f 90       	pop	r7
    332c:	6f 90       	pop	r6
    332e:	5f 90       	pop	r5
    3330:	4f 90       	pop	r4
    3332:	08 95       	ret

00003334 <TextAdventure>:


//MAIN GAME STRUCTURE
uint8_t TextAdventure(){
    3334:	cf 93       	push	r28
    static uint8_t serInput[RXLEN];
    
    //Still sending data to serial?
    if (CheckSend()) return 1;
    3336:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <CheckSend>
    333a:	88 23       	and	r24, r24
    333c:	11 f0       	breq	.+4      	; 0x3342 <TextAdventure+0xe>
    333e:	c1 e0       	ldi	r28, 0x01	; 1
    3340:	11 c0       	rjmp	.+34     	; 0x3364 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        
    3342:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <CheckResponse>
    3346:	81 11       	cpse	r24, r1
    3348:	fa cf       	rjmp	.-12     	; 0x333e <TextAdventure+0xa>

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    334a:	89 e4       	ldi	r24, 0x49	; 73
    334c:	98 e3       	ldi	r25, 0x38	; 56
    334e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <CheckInput>
    3352:	c8 2f       	mov	r28, r24
    3354:	81 11       	cpse	r24, r1
    3356:	05 c0       	rjmp	.+10     	; 0x3362 <TextAdventure+0x2e>

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);
    3358:	89 e4       	ldi	r24, 0x49	; 73
    335a:	98 e3       	ldi	r25, 0x38	; 56
    335c:	0e 94 ed 10 	call	0x21da	; 0x21da <ProcessInput>

    return 0;
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <TextAdventure+0x30>

    //Not sending? Process next response part to send, if any.
    if (CheckResponse()) return 1;        

    //No responses to send, check if there is user input.
    if (CheckInput(&serInput[0])) return 2; 
    3362:	c2 e0       	ldi	r28, 0x02	; 2

    //Input found, process and save (changes only)
    ProcessInput(&serInput[0]);

    return 0;
    3364:	8c 2f       	mov	r24, r28
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <main>:


//This is where it begins, inits first and main program in while(1) loop.
int main(void)
{
    Setup();
    336a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Setup>

    SerSpeed(0xff);
    336e:	8f ef       	ldi	r24, 0xFF	; 255
    3370:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SerSpeed>
    3374:	a0 e7       	ldi	r26, 0x70	; 112
    3376:	b5 eb       	ldi	r27, 0xB5	; 181
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
        iLED[HCKR[R][n]] = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	ed 91       	ld	r30, X+
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	e5 54       	subi	r30, 0x45	; 69
    3380:	f5 4c       	sbci	r31, 0xC5	; 197
    3382:	80 83       	st	Z, r24
        iLED[HCKR[G][n]] = 1;
    3384:	15 96       	adiw	r26, 0x05	; 5
    3386:	ec 91       	ld	r30, X
    3388:	15 97       	sbiw	r26, 0x05	; 5
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	e5 54       	subi	r30, 0x45	; 69
    338e:	f5 4c       	sbci	r31, 0xC5	; 197
    3390:	80 83       	st	Z, r24

    SerSpeed(0xff);
    ////Turn on LEDs on low setting to check for interrupt glitches

    //"Hacker"
    for (uint8_t n=0; n<6; n++){
    3392:	25 eb       	ldi	r18, 0xB5	; 181
    3394:	a6 37       	cpi	r26, 0x76	; 118
    3396:	b2 07       	cpc	r27, r18
    3398:	81 f7       	brne	.-32     	; 0x337a <main+0x10>
    339a:	e2 e6       	ldi	r30, 0x62	; 98
    339c:	f5 eb       	ldi	r31, 0xB5	; 181
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
        iLED[WING[L][n]] = 1;
    339e:	91 e0       	ldi	r25, 0x01	; 1
    33a0:	ef 01       	movw	r28, r30
    33a2:	a5 81       	ldd	r26, Z+5	; 0x05
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	a5 54       	subi	r26, 0x45	; 69
    33a8:	b5 4c       	sbci	r27, 0xC5	; 197
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	9c 93       	st	X, r25
    33ae:	31 96       	adiw	r30, 0x01	; 1
        iLED[WING[R][n]] = 1;
    33b0:	a8 81       	ld	r26, Y
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	a5 54       	subi	r26, 0x45	; 69
    33b6:	b5 4c       	sbci	r27, 0xC5	; 197
    33b8:	9c 93       	st	X, r25
        iLED[HCKR[R][n]] = 1;
        iLED[HCKR[G][n]] = 1;
    }

    //"Wings"
    for (uint8_t n=0; n<5; n++){
    33ba:	25 eb       	ldi	r18, 0xB5	; 181
    33bc:	e7 36       	cpi	r30, 0x67	; 103
    33be:	f2 07       	cpc	r31, r18
    33c0:	79 f7       	brne	.-34     	; 0x33a0 <main+0x36>
        iLED[WING[L][n]] = 1;
        iLED[WING[R][n]] = 1;
    }    

    //"Others"
    iLED[EYE[G][R]] = 1;
    33c2:	e0 91 6e b5 	lds	r30, 0xB56E	; 0x80b56e <__bss_end+0x7a63>
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	e5 54       	subi	r30, 0x45	; 69
    33ca:	f5 4c       	sbci	r31, 0xC5	; 197
    33cc:	80 83       	st	Z, r24
    iLED[EYE[G][L]] = 1;
    33ce:	e0 91 6f b5 	lds	r30, 0xB56F	; 0x80b56f <__bss_end+0x7a64>
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	e5 54       	subi	r30, 0x45	; 69
    33d6:	f5 4c       	sbci	r31, 0xC5	; 197
    33d8:	80 83       	st	Z, r24
    iLED[EYE[R][R]] = 1;
    33da:	e0 91 6c b5 	lds	r30, 0xB56C	; 0x80b56c <__bss_end+0x7a61>
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	e5 54       	subi	r30, 0x45	; 69
    33e2:	f5 4c       	sbci	r31, 0xC5	; 197
    33e4:	80 83       	st	Z, r24
    iLED[EYE[R][L]] = 1;
    33e6:	e0 91 6d b5 	lds	r30, 0xB56D	; 0x80b56d <__bss_end+0x7a62>
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	e5 54       	subi	r30, 0x45	; 69
    33ee:	f5 4c       	sbci	r31, 0xC5	; 197
    33f0:	80 83       	st	Z, r24
    iLED[SCARAB[R]] = 1;
    33f2:	e0 91 60 b5 	lds	r30, 0xB560	; 0x80b560 <__bss_end+0x7a55>
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	e5 54       	subi	r30, 0x45	; 69
    33fa:	f5 4c       	sbci	r31, 0xC5	; 197
    33fc:	80 83       	st	Z, r24
    iLED[SCARAB[G]] = 1;
    33fe:	e0 91 61 b5 	lds	r30, 0xB561	; 0x80b561 <__bss_end+0x7a56>
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	e5 54       	subi	r30, 0x45	; 69
    3406:	f5 4c       	sbci	r31, 0xC5	; 197
    3408:	80 83       	st	Z, r24
    iLED[BADGER] = 1;
    340a:	e0 91 5f b5 	lds	r30, 0xB55F	; 0x80b55f <__bss_end+0x7a54>
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	e5 54       	subi	r30, 0x45	; 69
    3412:	f5 4c       	sbci	r31, 0xC5	; 197
    3414:	80 83       	st	Z, r24
    iLED[CAT] = 1;
    3416:	e0 91 5e b5 	lds	r30, 0xB55E	; 0x80b55e <__bss_end+0x7a53>
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	e5 54       	subi	r30, 0x45	; 69
    341e:	f5 4c       	sbci	r31, 0xC5	; 197
    3420:	80 83       	st	Z, r24

    LoadGameState();
    3422:	0e 94 30 09 	call	0x1260	; 0x1260 <LoadGameState>

    while (TRUE) {
        if (GenerateAudio()) {
    3426:	0e 94 fe 09 	call	0x13fc	; 0x13fc <GenerateAudio>
    342a:	88 23       	and	r24, r24
    342c:	e1 f3       	breq	.-8      	; 0x3426 <main+0xbc>
            buttonState = CheckButtons(buttonState);
    342e:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <buttonState>
    3432:	0e 94 5f 07 	call	0xebe	; 0xebe <CheckButtons>
    3436:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <buttonState>
            buttonMark = 0;
    343a:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <buttonMark>
            
            GenerateBlinks();           
    343e:	0e 94 c2 09 	call	0x1384	; 0x1384 <GenerateBlinks>
            
            //Main game, to complete: Finish sub-game MagnetMaze and MakeFriends too.
            TextAdventure();
    3442:	78 df       	rcall	.-272    	; 0x3334 <TextAdventure>
          
            //Other games & user interaction checks
            MagnetMaze();
    3444:	0e 94 99 02 	call	0x532	; 0x532 <MagnetMaze>
            BastetDictates();
    3448:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <BastetDictates>
            LanyardCode();
    344c:	0e 94 a1 01 	call	0x342	; 0x342 <LanyardCode>
            MakeFriends();
    3450:	0e 94 5c 00 	call	0xb8	; 0xb8 <MakeFriends>

            //Save progress
            SaveGameState(); 
    3454:	0e 94 3e 08 	call	0x107c	; 0x107c <SaveGameState>
            
            //Check light sensor status (added hysteresis to preserve writing cycles to internal EEPROM)
            if (adcPhot < 10) WriteStatusBit(116, 1);
    3458:	80 91 96 3a 	lds	r24, 0x3A96	; 0x803a96 <adcPhot>
    345c:	90 91 97 3a 	lds	r25, 0x3A97	; 0x803a97 <adcPhot+0x1>
    3460:	0a 97       	sbiw	r24, 0x0a	; 10
    3462:	20 f4       	brcc	.+8      	; 0x346c <main+0x102>
    3464:	61 e0       	ldi	r22, 0x01	; 1
    3466:	84 e7       	ldi	r24, 0x74	; 116
    3468:	0e 94 c5 08 	call	0x118a	; 0x118a <WriteStatusBit>
            if (adcPhot > 100) WriteStatusBit(116, 0);
    346c:	80 91 96 3a 	lds	r24, 0x3A96	; 0x803a96 <adcPhot>
    3470:	90 91 97 3a 	lds	r25, 0x3A97	; 0x803a97 <adcPhot+0x1>
    3474:	85 36       	cpi	r24, 0x65	; 101
    3476:	91 05       	cpc	r25, r1
    3478:	20 f0       	brcs	.+8      	; 0x3482 <main+0x118>
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	84 e7       	ldi	r24, 0x74	; 116
    347e:	0e 94 c5 08 	call	0x118a	; 0x118a <WriteStatusBit>

            //Check temperature 
            HotSummer();
    3482:	0e 94 5d 09 	call	0x12ba	; 0x12ba <HotSummer>
    3486:	cf cf       	rjmp	.-98     	; 0x3426 <main+0xbc>

00003488 <__udivmodqi4>:
    3488:	99 1b       	sub	r25, r25
    348a:	79 e0       	ldi	r23, 0x09	; 9
    348c:	04 c0       	rjmp	.+8      	; 0x3496 <__udivmodqi4_ep>

0000348e <__udivmodqi4_loop>:
    348e:	99 1f       	adc	r25, r25
    3490:	96 17       	cp	r25, r22
    3492:	08 f0       	brcs	.+2      	; 0x3496 <__udivmodqi4_ep>
    3494:	96 1b       	sub	r25, r22

00003496 <__udivmodqi4_ep>:
    3496:	88 1f       	adc	r24, r24
    3498:	7a 95       	dec	r23
    349a:	c9 f7       	brne	.-14     	; 0x348e <__udivmodqi4_loop>
    349c:	80 95       	com	r24
    349e:	08 95       	ret

000034a0 <__udivmodhi4>:
    34a0:	aa 1b       	sub	r26, r26
    34a2:	bb 1b       	sub	r27, r27
    34a4:	51 e1       	ldi	r21, 0x11	; 17
    34a6:	07 c0       	rjmp	.+14     	; 0x34b6 <__udivmodhi4_ep>

000034a8 <__udivmodhi4_loop>:
    34a8:	aa 1f       	adc	r26, r26
    34aa:	bb 1f       	adc	r27, r27
    34ac:	a6 17       	cp	r26, r22
    34ae:	b7 07       	cpc	r27, r23
    34b0:	10 f0       	brcs	.+4      	; 0x34b6 <__udivmodhi4_ep>
    34b2:	a6 1b       	sub	r26, r22
    34b4:	b7 0b       	sbc	r27, r23

000034b6 <__udivmodhi4_ep>:
    34b6:	88 1f       	adc	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	5a 95       	dec	r21
    34bc:	a9 f7       	brne	.-22     	; 0x34a8 <__udivmodhi4_loop>
    34be:	80 95       	com	r24
    34c0:	90 95       	com	r25
    34c2:	bc 01       	movw	r22, r24
    34c4:	cd 01       	movw	r24, r26
    34c6:	08 95       	ret

000034c8 <__divmodhi4>:
    34c8:	97 fb       	bst	r25, 7
    34ca:	07 2e       	mov	r0, r23
    34cc:	16 f4       	brtc	.+4      	; 0x34d2 <__divmodhi4+0xa>
    34ce:	00 94       	com	r0
    34d0:	06 d0       	rcall	.+12     	; 0x34de <__divmodhi4_neg1>
    34d2:	77 fd       	sbrc	r23, 7
    34d4:	08 d0       	rcall	.+16     	; 0x34e6 <__divmodhi4_neg2>
    34d6:	e4 df       	rcall	.-56     	; 0x34a0 <__udivmodhi4>
    34d8:	07 fc       	sbrc	r0, 7
    34da:	05 d0       	rcall	.+10     	; 0x34e6 <__divmodhi4_neg2>
    34dc:	3e f4       	brtc	.+14     	; 0x34ec <__divmodhi4_exit>

000034de <__divmodhi4_neg1>:
    34de:	90 95       	com	r25
    34e0:	81 95       	neg	r24
    34e2:	9f 4f       	sbci	r25, 0xFF	; 255
    34e4:	08 95       	ret

000034e6 <__divmodhi4_neg2>:
    34e6:	70 95       	com	r23
    34e8:	61 95       	neg	r22
    34ea:	7f 4f       	sbci	r23, 0xFF	; 255

000034ec <__divmodhi4_exit>:
    34ec:	08 95       	ret

000034ee <__udivmodsi4>:
    34ee:	a1 e2       	ldi	r26, 0x21	; 33
    34f0:	1a 2e       	mov	r1, r26
    34f2:	aa 1b       	sub	r26, r26
    34f4:	bb 1b       	sub	r27, r27
    34f6:	fd 01       	movw	r30, r26
    34f8:	0d c0       	rjmp	.+26     	; 0x3514 <__udivmodsi4_ep>

000034fa <__udivmodsi4_loop>:
    34fa:	aa 1f       	adc	r26, r26
    34fc:	bb 1f       	adc	r27, r27
    34fe:	ee 1f       	adc	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	a2 17       	cp	r26, r18
    3504:	b3 07       	cpc	r27, r19
    3506:	e4 07       	cpc	r30, r20
    3508:	f5 07       	cpc	r31, r21
    350a:	20 f0       	brcs	.+8      	; 0x3514 <__udivmodsi4_ep>
    350c:	a2 1b       	sub	r26, r18
    350e:	b3 0b       	sbc	r27, r19
    3510:	e4 0b       	sbc	r30, r20
    3512:	f5 0b       	sbc	r31, r21

00003514 <__udivmodsi4_ep>:
    3514:	66 1f       	adc	r22, r22
    3516:	77 1f       	adc	r23, r23
    3518:	88 1f       	adc	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	1a 94       	dec	r1
    351e:	69 f7       	brne	.-38     	; 0x34fa <__udivmodsi4_loop>
    3520:	60 95       	com	r22
    3522:	70 95       	com	r23
    3524:	80 95       	com	r24
    3526:	90 95       	com	r25
    3528:	9b 01       	movw	r18, r22
    352a:	ac 01       	movw	r20, r24
    352c:	bd 01       	movw	r22, r26
    352e:	cf 01       	movw	r24, r30
    3530:	08 95       	ret

00003532 <_exit>:
    3532:	f8 94       	cli

00003534 <__stop_program>:
    3534:	ff cf       	rjmp	.-2      	; 0x3534 <__stop_program>
